(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "d8a55e69ceb1de8a9970";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "RamenPos";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./RamenPos/RamenPos.js")(__webpack_require__.s = "./RamenPos/RamenPos.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./RamenPos/RamenPos.js":
/*!******************************!*\
  !*** ./RamenPos/RamenPos.js ***!
  \******************************/
/*! exports provided: RamenPos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RamenPos", function() { return RamenPos; });
/* harmony import */ var _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @assemblypayments/spi-client-js/dist/spi-client-js */ "./node_modules/@assemblypayments/spi-client-js/dist/spi-client-js.js");
/* harmony import */ var _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

 // <summary>
// NOTE: THIS PROJECT USES THE 2.6.x of the SPI Client Library
//  
// This is your POS. To integrate with SPI, you need to instantiate a Spi object
// and interact with it.
// 
// Primarily you need to implement 3 things.
// 1. Settings Screen
// 2. Pairing Flow Screen
// 3. Transaction Flow screen
// 
// To see logs from spi, check the console
// </summary>

var RamenPos =
/*#__PURE__*/
function () {
  function RamenPos(log, receipt, flow_msg) {
    _classCallCheck(this, RamenPos);

    this._spi = null;
    this._posId = "RAMENPOS1";
    this._eftposAddress = "192.168.1.1";
    this._spiSecrets = null;
    this._options = null;
    this._version = '2.6.3';
    this._rcpt_from_eftpos = false;
    this._sig_flow_from_eftpos = false;
    this._apiKey = null;
    this._serialNumber = "";
    this._acquirerCode = "wbc";
    this._autoResolveEftposAddress = false;
    this._testMode = true;
    this._useSecureWebSockets = false;
    this._log = log;
    this._receipt = receipt;
    this._flow_msg = flow_msg;
  }

  _createClass(RamenPos, [{
    key: "Start",
    value: function Start() {
      var _this = this;

      this._log.info("Starting RamenPos...");

      this.LoadPersistedState();

      try {
        this._spi = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Spi"](this._posId, this._serialNumber, this._eftposAddress, this._spiSecrets); // It is ok to not have the secrets yet to start with.

        this._spi.Config.PromptForCustomerCopyOnEftpos = this._rcpt_from_eftpos;
        this._spi.Config.SignatureFlowOnEftpos = this._sig_flow_from_eftpos;

        this._spi.SetPosInfo("assembly", this._version);

        this._spi.SetAcquirerCode(this._acquirerCode);

        this._spi.SetDeviceApiKey(this._apiKey);

        this._options = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionOptions"]();

        this._options.SetCustomerReceiptHeader("");

        this._options.SetCustomerReceiptFooter("");

        this._options.SetMerchantReceiptHeader("");

        this._options.SetMerchantReceiptFooter("");
      } catch (e) {
        this._log.info(e.Message);

        return;
      }

      document.addEventListener('DeviceAddressChanged', function (e) {
        return _this.OnDeviceAddressChanged(e.detail);
      });
      document.addEventListener('StatusChanged', function (e) {
        return _this.OnSpiStatusChanged(e.detail);
      });
      document.addEventListener('PairingFlowStateChanged', function (e) {
        return _this.OnPairingFlowStateChanged(e.detail);
      });
      document.addEventListener('SecretsChanged', function (e) {
        return _this.OnSecretsChanged(e.detail);
      });
      document.addEventListener('TxFlowStateChanged', function (e) {
        return _this.OnTxFlowStateChanged(e.detail);
      });
      this._spi.PrintingResponse = this.HandlePrintingResponse.bind(this);
      this._spi.TerminalStatusResponse = this.HandleTerminalStatusResponse.bind(this);
      this._spi.BatteryLevelChanged = this.HandleBatteryLevelChanged.bind(this);
      this.SetAutoAddressResolutionState();

      this._spi.Start();

      this._flow_msg.Clear();

      this._flow_msg.Info("# Welcome to RamenPos !");

      this.PrintStatusAndActions();
      this.AcceptUserInput();
    }
  }, {
    key: "DeviceAddressRequest",
    value: function DeviceAddressRequest() {
      return {
        ApiKey: this._apiKey,
        SerialNumber: this._serialNumber
      };
    }
  }, {
    key: "OnTxFlowStateChanged",
    value: function OnTxFlowStateChanged(txState) {
      this._flow_msg.Clear();

      this.PrintStatusAndActions();

      this._flow_msg.Info("> ");
    }
  }, {
    key: "OnPairingFlowStateChanged",
    value: function OnPairingFlowStateChanged(pairingFlowState) {
      this._flow_msg.Clear();

      this.PrintStatusAndActions();

      this._flow_msg.Info("> ");
    }
  }, {
    key: "OnSecretsChanged",
    value: function OnSecretsChanged(secrets) {
      this._spiSecrets = secrets;

      if (secrets != null) {
        this._log.info("# I Have Secrets: ".concat(secrets.EncKey).concat(secrets.HmacKey, ". Persist them Securely."));

        localStorage.setItem('EncKey', secrets.EncKey);
        localStorage.setItem('HmacKey', secrets.HmacKey);
      } else {
        this._log.info("# I Have Lost the Secrets, i.e. Unpaired. Destroy the persisted secrets.");

        localStorage.removeItem('EncKey');
        localStorage.removeItem('HmacKey');
      }
    } /// <summary>
    /// Called when we received a Status Update i.e. Unpaired/PairedConnecting/PairedConnected
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="spiStatus"></param>

  }, {
    key: "OnSpiStatusChanged",
    value: function OnSpiStatusChanged(spiStatus) {
      this._flow_msg.Clear();

      this._flow_msg.Info("# --> SPI Status Changed: ".concat(spiStatus));

      this.PrintStatusAndActions();
    }
  }, {
    key: "OnDeviceAddressChanged",
    value: function OnDeviceAddressChanged(deviceAddressStatus) {
      var eftposAddress = document.getElementById('eftpos_address');

      switch (deviceAddressStatus.DeviceAddressResponseCode) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["DeviceAddressResponseCode"].SUCCESS:
          eftposAddress.value = deviceAddressStatus.Address;
          this._eftposAddress = deviceAddressStatus.Address;
          alert("Device Address has been updated to ".concat(deviceAddressStatus.Address));
          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["DeviceAddressResponseCode"].INVALID_SERIAL_NUMBER:
          eftposAddress.value = "";
          this._eftposAddress = "";
          alert("The serial number is invalid: " + deviceAddressStatus.ResponseStatusDescription + " : " + deviceAddressStatus.ResponseMessage);
          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["DeviceAddressResponseCode"].DEVICE_SERVICE_ERROR:
          eftposAddress.value = "";
          this._eftposAddress = "";
          alert("The device service error: " + deviceAddressStatus.ResponseStatusDescription + " : " + deviceAddressStatus.ResponseMessage);
          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["DeviceAddressResponseCode"].ADDRESS_NOT_CHANGED:
          alert("The IP address have not changed!");
          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["DeviceAddressResponseCode"].SERIAL_NUMBER_NOT_CHANGED:
          alert("The serial number have not changed!");
          break;

        default:
          alert("The serial number is invalid! or The IP address have not changed!");
          break;
      }
    }
  }, {
    key: "HandlePrintingResponse",
    value: function HandlePrintingResponse(message) {
      this._flow_msg.Clear();

      var printingResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["PrintingResponse"](message);

      if (printingResponse.isSuccess()) {
        this._flow_msg.Info("# --> Printing Response: Printing Receipt successful");
      } else {
        this._flow_msg.Info("# --> Printing Response:  Printing Receipt failed: reason = " + printingResponse.getErrorReason() + ", detail = " + printingResponse.getErrorDetail());
      }

      this._spi.AckFlowEndedAndBackToIdle();

      this.PrintStatusAndActions();
    }
  }, {
    key: "HandleTerminalStatusResponse",
    value: function HandleTerminalStatusResponse(message) {
      this._flow_msg.Clear();

      var terminalStatusResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TerminalStatusResponse"](message);

      this._flow_msg.Info("# Terminal Status Response #");

      this._flow_msg.Info("# Status: " + terminalStatusResponse.GetStatus());

      this._flow_msg.Info("# Battery Level: " + terminalStatusResponse.GetBatteryLevel() + "%");

      this._flow_msg.Info("# Charging: " + terminalStatusResponse.IsCharging());

      this._spi.AckFlowEndedAndBackToIdle();

      this.PrintStatusAndActions();
    }
  }, {
    key: "HandleBatteryLevelChanged",
    value: function HandleBatteryLevelChanged(message) {
      this._log.clear();

      var terminalBattery = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TerminalBattery"](message);

      this._flow_msg.Info("# Battery Level Changed #");

      this._flow_msg.Info("# Battery Level: " + terminalBattery.BatteryLevel + "%");

      this._spi.AckFlowEndedAndBackToIdle();

      this.PrintStatusAndActions();
    }
  }, {
    key: "PrintStatusAndActions",
    value: function PrintStatusAndActions() {
      this.PrintFlowInfo();
      this.PrintActions();
      this.PrintPairingStatus();
    }
  }, {
    key: "PrintFlowInfo",
    value: function PrintFlowInfo() {
      switch (this._spi.CurrentFlow) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Pairing:
          var pairingState = this._spi.CurrentPairingFlowState;

          this._flow_msg.Info("### PAIRING PROCESS UPDATE ###");

          this._flow_msg.Info("# ".concat(pairingState.Message));

          this._flow_msg.Info("# Finished? ".concat(pairingState.Finished));

          this._flow_msg.Info("# Successful? ".concat(pairingState.Successful));

          this._flow_msg.Info("# Confirmation Code: ".concat(pairingState.ConfirmationCode));

          this._flow_msg.Info("# Waiting Confirm from Eftpos? ".concat(pairingState.AwaitingCheckFromEftpos));

          this._flow_msg.Info("# Waiting Confirm from POS? ".concat(pairingState.AwaitingCheckFromPos));

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Transaction:
          var txState = this._spi.CurrentTxFlowState;

          this._flow_msg.Info("### TX PROCESS UPDATE ###");

          this._flow_msg.Info("# ".concat(txState.DisplayMessage));

          this._flow_msg.Info("# PosRefId: ".concat(txState.PosRefId));

          this._flow_msg.Info("# Type: ".concat(txState.Type));

          this._flow_msg.Info("# Amount: $".concat((txState.AmountCents / 100.0).toFixed(2)));

          this._flow_msg.Info("# Waiting For Signature: ".concat(txState.AwaitingSignatureCheck));

          this._flow_msg.Info("# Attempting to Cancel : ".concat(txState.AttemptingToCancel));

          this._flow_msg.Info("# Finished: ".concat(txState.Finished));

          this._flow_msg.Info("# Success: ".concat(txState.Success));

          if (txState.AwaitingSignatureCheck) {
            // We need to print the receipt for the customer to sign.
            this._flow_msg.Info("# RECEIPT TO PRINT FOR SIGNATURE");

            this._receipt.Info(txState.SignatureRequiredMessage.GetMerchantReceipt().trim());
          }

          if (txState.AwaitingPhoneForAuth) {
            this._flow_msg.Info("# PHONE FOR AUTH DETAILS:");

            this._flow_msg.Info("# CALL: ".concat(txState.PhoneForAuthRequiredMessage.GetPhoneNumber()));

            this._flow_msg.Info("# QUOTE: Merchant Id: ".concat(txState.PhoneForAuthRequiredMessage.GetMerchantId()));
          }

          if (txState.Finished) {
            switch (txState.Type) {
              case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].Purchase:
                this.HandleFinishedPurchase(txState);
                break;

              case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].Refund:
                this.HandleFinishedRefund(txState);
                break;

              case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].CashoutOnly:
                this.HandleFinishedCashout(txState);
                break;

              case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].MOTO:
                this.HandleFinishedMoto(txState);
                break;

              case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].Settle:
                this.HandleFinishedSettle(txState);
                break;

              case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].SettlementEnquiry:
                this.HandleFinishedSettlementEnquiry(txState);
                break;

              case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].GetLastTransaction:
                this.HandleFinishedGetLastTransaction(txState);
                break;

              default:
                this._flow_msg.Error("# CAN'T HANDLE TX TYPE: ".concat(txState.Type));

                break;
            }
          }

          break;
      }
    }
  }, {
    key: "HandleFinishedPurchase",
    value: function HandleFinishedPurchase(txState) {
      var purchaseResponse;

      switch (txState.Success) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Success:
          this._flow_msg.Info("# WOOHOO - WE GOT PAID!");

          purchaseResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["PurchaseResponse"](txState.Response);

          this._flow_msg.Info("# Response: ".concat(purchaseResponse.GetResponseText()));

          this._flow_msg.Info("# RRN: ".concat(purchaseResponse.GetRRN()));

          this._flow_msg.Info("# Scheme: ".concat(purchaseResponse.SchemeName));

          this._flow_msg.Info("# Customer Receipt:");

          this._receipt.Info(!purchaseResponse.WasCustomerReceiptPrinted() ? purchaseResponse.GetCustomerReceipt().trim() : "# PRINTED FROM EFTPOS");

          this._flow_msg.Info("# PURCHASE: ".concat(purchaseResponse.GetPurchaseAmount()));

          this._flow_msg.Info("# TIP: ".concat(purchaseResponse.GetTipAmount()));

          this._flow_msg.Info("# SURCHARGE: ".concat(purchaseResponse.GetSurchargeAmount()));

          this._flow_msg.Info("# CASHOUT: ".concat(purchaseResponse.GetCashoutAmount()));

          this._flow_msg.Info("# BANKED NON-CASH AMOUNT: ".concat(purchaseResponse.GetBankNonCashAmount()));

          this._flow_msg.Info("# BANKED CASH AMOUNT: ".concat(purchaseResponse.GetBankCashAmount()));

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Failed:
          this._flow_msg.Info("# WE DID NOT GET PAID :(");

          if (txState.Response != null) {
            purchaseResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["PurchaseResponse"](txState.Response);

            this._flow_msg.Info("# Error: ".concat(txState.Response.GetError()));

            this._flow_msg.Info("# Error Detail: ".concat(txState.Response.GetErrorDetail()));

            this._flow_msg.Info("# Response: ".concat(purchaseResponse.GetResponseText()));

            this._flow_msg.Info("# RRN: ".concat(purchaseResponse.GetRRN()));

            this._flow_msg.Info("# Scheme: ".concat(purchaseResponse.SchemeName));

            this._flow_msg.Info("# Customer Receipt:");

            this._receipt.Info(!purchaseResponse.WasCustomerReceiptPrinted() ? purchaseResponse.GetCustomerReceipt().trim() : "# PRINTED FROM EFTPOS");
          }

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Unknown:
          this._flow_msg.Info("# WE'RE NOT QUITE SURE WHETHER WE GOT PAID OR NOT :/");

          this._flow_msg.Info("# CHECK THE LAST TRANSACTION ON THE EFTPOS ITSELF FROM THE APPROPRIATE MENU ITEM.");

          this._flow_msg.Info("# IF YOU CONFIRM THAT THE CUSTOMER PAID, CLOSE THE ORDER.");

          this._flow_msg.Info("# OTHERWISE, RETRY THE PAYMENT FROM SCRATCH.");

          break;

        default:
          throw new Error('Unknown transaction state');
      }
    }
  }, {
    key: "HandleFinishedRefund",
    value: function HandleFinishedRefund(txState) {
      var refundResponse;

      switch (txState.Success) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Success:
          this._flow_msg.Info("# REFUND GIVEN- OH WELL!");

          refundResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["RefundResponse"](txState.Response);

          this._flow_msg.Info("# Response: ".concat(refundResponse.GetResponseText()));

          this._flow_msg.Info("# RRN: ".concat(refundResponse.GetRRN()));

          this._flow_msg.Info("# Scheme: ".concat(refundResponse.SchemeName));

          this._flow_msg.Info("# Customer Receipt:");

          this._receipt.Info(!refundResponse.WasCustomerReceiptPrinted() ? refundResponse.GetCustomerReceipt().trim() : "# PRINTED FROM EFTPOS");

          this._flow_msg.Info("# REFUNDED AMOUNT: ".concat(refundResponse.GetRefundAmount()));

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Failed:
          this._flow_msg.Info("# REFUND FAILED!");

          if (txState.Response != null) {
            refundResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["RefundResponse"](txState.Response);

            this._flow_msg.Info("# Error: ".concat(txState.Response.GetError()));

            this._flow_msg.Info("# Error Detail: ".concat(txState.Response.GetErrorDetail()));

            this._flow_msg.Info("# Response: ".concat(refundResponse.GetResponseText()));

            this._flow_msg.Info("# RRN: ".concat(refundResponse.GetRRN()));

            this._flow_msg.Info("# Scheme: ".concat(refundResponse.SchemeName));

            this._flow_msg.Info("# Customer Receipt:");

            this._receipt.Info(!refundResponse.WasCustomerReceiptPrinted() ? refundResponse.GetCustomerReceipt().trim() : "# PRINTED FROM EFTPOS");
          }

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Unknown:
          this._flow_msg.Info("# WE'RE NOT QUITE SURE WHETHER THE REFUND WENT THROUGH OR NOT :/");

          this._flow_msg.Info("# CHECK THE LAST TRANSACTION ON THE EFTPOS ITSELF FROM THE APPROPRIATE MENU ITEM.");

          this._flow_msg.Info("# YOU CAN THE TAKE THE APPROPRIATE ACTION.");

          break;

        default:
          throw new Error('Unknown transaction state');
      }
    }
  }, {
    key: "HandleFinishedCashout",
    value: function HandleFinishedCashout(txState) {
      var cashoutResponse;

      switch (txState.Success) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Success:
          this._flow_msg.Info("# CASH-OUT SUCCESSFUL - HAND THEM THE CASH!");

          cashoutResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["CashoutOnlyResponse"](txState.Response);

          this._flow_msg.Info("# Response: ".concat(cashoutResponse.GetResponseText()));

          this._flow_msg.Info("# RRN: ".concat(cashoutResponse.GetRRN()));

          this._flow_msg.Info("# Scheme: ".concat(cashoutResponse.SchemeName));

          this._flow_msg.Info("# Customer Receipt:");

          this._receipt.Info(!cashoutResponse.WasCustomerReceiptPrinted() ? cashoutResponse.GetCustomerReceipt().trim() : "# PRINTED FROM EFTPOS");

          this._flow_msg.Info("# CASHOUT: ".concat(cashoutResponse.GetCashoutAmount()));

          this._flow_msg.Info("# BANKED NON-CASH AMOUNT: ".concat(cashoutResponse.GetBankNonCashAmount()));

          this._flow_msg.Info("# BANKED CASH AMOUNT: ".concat(cashoutResponse.GetBankCashAmount()));

          this._flow_msg.Info("# SURCHARGE: ".concat(cashoutResponse.GetSurchargeAmount()));

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Failed:
          this._flow_msg.Info("# CASHOUT FAILED!");

          if (txState.Response != null) {
            cashoutResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["CashoutOnlyResponse"](txState.Response);

            this._flow_msg.Info("# Error: ".concat(txState.Response.GetError()));

            this._flow_msg.Info("# Error Detail: ".concat(txState.Response.GetErrorDetail()));

            this._flow_msg.Info("# Response: ".concat(cashoutResponse.GetResponseText()));

            this._flow_msg.Info("# RRN: ".concat(cashoutResponse.GetRRN()));

            this._flow_msg.Info("# Scheme: ".concat(cashoutResponse.SchemeName));

            this._flow_msg.Info("# Customer Receipt:");

            this._receipt.Info(cashoutResponse.GetCustomerReceipt());
          }

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Unknown:
          this._flow_msg.Info("# WE'RE NOT QUITE SURE WHETHER THE CASHOUT WENT THROUGH OR NOT :/");

          this._flow_msg.Info("# CHECK THE LAST TRANSACTION ON THE EFTPOS ITSELF FROM THE APPROPRIATE MENU ITEM.");

          this._flow_msg.Info("# YOU CAN THE TAKE THE APPROPRIATE ACTION.");

          break;

        default:
          throw new Error('Unknown transaction state');
      }
    }
  }, {
    key: "HandleFinishedMoto",
    value: function HandleFinishedMoto(txState) {
      var motoResponse;
      var purchaseResponse;

      switch (txState.Success) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Success:
          this._flow_msg.Info("# WOOHOO - WE GOT MOTO-PAID!");

          motoResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["MotoPurchaseResponse"](txState.Response);
          purchaseResponse = motoResponse.PurchaseResponse;

          this._flow_msg.Info("# Response: ".concat(purchaseResponse.GetResponseText()));

          this._flow_msg.Info("# RRN: ".concat(purchaseResponse.GetRRN()));

          this._flow_msg.Info("# Scheme: ".concat(purchaseResponse.SchemeName));

          this._flow_msg.Info("# Card Entry: ".concat(purchaseResponse.GetCardEntry()));

          this._flow_msg.Info("# Customer Receipt:");

          this._receipt.Info(!purchaseResponse.WasCustomerReceiptPrinted() ? purchaseResponse.GetCustomerReceipt().trim() : "# PRINTED FROM EFTPOS");

          this._flow_msg.Info("# PURCHASE: ".concat(purchaseResponse.GetPurchaseAmount()));

          this._flow_msg.Info("# BANKED NON-CASH AMOUNT: ".concat(purchaseResponse.GetBankNonCashAmount()));

          this._flow_msg.Info("# BANKED CASH AMOUNT: ".concat(purchaseResponse.GetBankCashAmount()));

          this._flow_msg.Info("# SURCHARGE: ".concat(purchaseResponse.GetSurchargeAmount()));

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Failed:
          this._flow_msg.Info("# WE DID NOT GET MOTO-PAID :(");

          if (txState.Response != null) {
            motoResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["MotoPurchaseResponse"](txState.Response);
            purchaseResponse = motoResponse.PurchaseResponse;

            this._flow_msg.Info("# Error: ".concat(txState.Response.GetError()));

            this._flow_msg.Info("# Error Detail: ".concat(txState.Response.GetErrorDetail()));

            this._flow_msg.Info("# Response: ".concat(purchaseResponse.GetResponseText()));

            this._flow_msg.Info("# RRN: ".concat(purchaseResponse.GetRRN()));

            this._flow_msg.Info("# Scheme: ".concat(purchaseResponse.SchemeName));

            this._flow_msg.Info("# Customer Receipt:");

            this._receipt.Info(purchaseResponse.GetCustomerReceipt().trim());
          }

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Unknown:
          this._flow_msg.Info("# WE'RE NOT QUITE SURE WHETHER THE MOTO WENT THROUGH OR NOT :/");

          this._flow_msg.Info("# CHECK THE LAST TRANSACTION ON THE EFTPOS ITSELF FROM THE APPROPRIATE MENU ITEM.");

          this._flow_msg.Info("# YOU CAN THE TAKE THE APPROPRIATE ACTION.");

          break;

        default:
          throw new Error('Unknown transaction state');
      }
    }
  }, {
    key: "HandleFinishedGetLastTransaction",
    value: function HandleFinishedGetLastTransaction(txState) {
      if (txState.Response != null) {
        var gltResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["GetLastTransactionResponse"](txState.Response);
        var pos_ref_id = document.getElementById('pos_ref_id').value;

        if (pos_ref_id.length > 1) {
          // User specified that he intended to retrieve a specific tx by pos_ref_id
          // This is how you can use a handy function to match it.
          var success = this._spi.GltMatch(gltResponse, pos_ref_id);

          if (success == _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Unknown) {
            this._flow_msg.Info("# Did not retrieve Expected Transaction. Here is what we got:");
          } else {
            this._flow_msg.Info("# Tx Matched Expected Purchase Request.");
          }
        }

        var purchaseResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["PurchaseResponse"](txState.Response);

        this._flow_msg.Info("# Scheme: ".concat(purchaseResponse.SchemeName));

        this._flow_msg.Info("# Response: ".concat(purchaseResponse.GetResponseText()));

        this._flow_msg.Info("# RRN: ".concat(purchaseResponse.GetRRN()));

        this._flow_msg.Info("# Error: ".concat(txState.Response.GetError()));

        this._flow_msg.Info("# Customer Receipt:");

        this._receipt.Info(purchaseResponse.GetCustomerReceipt().trim());
      } else {
        // We did not even get a response, like in the case of a time-out.
        this._flow_msg.Info("# Could Not Retrieve Last Transaction.");
      }
    }
  }, {
    key: "HandleFinishedSettle",
    value: function HandleFinishedSettle(txState) {
      switch (txState.Success) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Success:
          this._flow_msg.Info("# SETTLEMENT SUCCESSFUL!");

          if (txState.Response != null) {
            var settleResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Settlement"](txState.Response);

            this._flow_msg.Info("# Response: ".concat(settleResponse.GetResponseText()));

            this._flow_msg.Info("# Merchant Receipt:");

            this._receipt.Info(settleResponse.GetReceipt().trim());

            this._flow_msg.Info("# Period Start: " + settleResponse.GetPeriodStartTime());

            this._flow_msg.Info("# Period End: " + settleResponse.GetPeriodEndTime());

            this._flow_msg.Info("# Settlement Time: " + settleResponse.GetTriggeredTime());

            this._flow_msg.Info("# Transaction Range: " + settleResponse.GetTransactionRange());

            this._flow_msg.Info("# Terminal Id: " + settleResponse.GetTerminalId());

            this._flow_msg.Info("# Total TX Count: " + settleResponse.GetTotalCount());

            this._flow_msg.Info("# Total TX Value: $".concat((settleResponse.GetTotalValue() / 100.0).toFixed(2)));

            this._flow_msg.Info("# By Acquirer TX Count: " + settleResponse.GetSettleByAcquirerCount());

            this._flow_msg.Info("# By Acquirer TX Value: $".concat((settleResponse.GetSettleByAcquirerValue() / 100.0).toFixed(2)));

            this._flow_msg.Info("# SCHEME SETTLEMENTS:");

            var schemes = settleResponse.GetSchemeSettlementEntries();

            for (var s in schemes) {
              this._flow_msg.Info("# " + JSON.stringify(schemes[s]));
            }
          }

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Failed:
          this._flow_msg.Info("# SETTLEMENT FAILED!");

          if (txState.Response != null) {
            var settleResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Settlement"](txState.Response);

            this._flow_msg.Info("# Response: ".concat(settleResponse.GetResponseText()));

            this._flow_msg.Info("# Error: ".concat(txState.Response.GetError()));

            this._flow_msg.Info("# Merchant Receipt:");

            this._receipt.Info(settleResponse.GetReceipt());
          }

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Unknown:
          this._flow_msg.Info("# SETTLEMENT ENQUIRY RESULT UNKNOWN!");

          break;

        default:
          throw new Error('Unknown state');
      }
    }
  }, {
    key: "HandleFinishedSettlementEnquiry",
    value: function HandleFinishedSettlementEnquiry(txState) {
      switch (txState.Success) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Success:
          this._flow_msg.Info("# SETTLEMENT ENQUIRY SUCCESSFUL!");

          if (txState.Response != null) {
            var settleResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Settlement"](txState.Response);

            this._flow_msg.Info("# Response: ".concat(settleResponse.GetResponseText()));

            this._flow_msg.Info("# Merchant Receipt:");

            this._receipt.Info(settleResponse.GetReceipt().trim());

            this._flow_msg.Info("# Period Start: " + settleResponse.GetPeriodStartTime());

            this._flow_msg.Info("# Period End: " + settleResponse.GetPeriodEndTime());

            this._flow_msg.Info("# Settlement Time: " + settleResponse.GetTriggeredTime());

            this._flow_msg.Info("# Transaction Range: " + settleResponse.GetTransactionRange());

            this._flow_msg.Info("# Terminal Id: " + settleResponse.GetTerminalId());

            this._flow_msg.Info("# Total TX Count: " + settleResponse.GetTotalCount());

            this._flow_msg.Info("# Total TX Value: $".concat((settleResponse.GetTotalValue() / 100.0).toFixed(2)));

            this._flow_msg.Info("# By Acquirer TX Count: " + settleResponse.GetSettleByAcquirerCount());

            this._flow_msg.Info("# By Acquirer TX Value: $".concat((settleResponse.GetSettleByAcquirerValue() / 100.0).toFixed(2)));

            this._flow_msg.Info("# SCHEME SETTLEMENTS:");

            var schemes = settleResponse.GetSchemeSettlementEntries();

            for (var s in schemes) {
              this._flow_msg.Info("# " + JSON.stringify(schemes[s]));
            }
          }

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Failed:
          this._flow_msg.Info("# SETTLEMENT ENQUIRY FAILED!");

          if (txState.Response != null) {
            var settleResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Settlement"](txState.Response);

            this._flow_msg.Info("# Response: ".concat(settleResponse.GetResponseText()));

            this._flow_msg.Info("# Error: ".concat(txState.Response.GetError()));

            this._flow_msg.Info("# Merchant Receipt:");

            this._receipt.Info(settleResponse.GetReceipt());
          }

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Unknown:
          this._flow_msg.Info("# SETTLEMENT ENQUIRY RESULT UNKNOWN!");

          break;

        default:
          throw new Error('Unknown Transaction state');
      }
    }
  }, {
    key: "PrintActions",
    value: function PrintActions() {
      // List of input controls which are enabled / shown for the current application state
      var inputsEnabled = [];
      var statusEl = document.getElementById('status_indicator');
      var primaryStatusEl = document.getElementById('primary_status');
      var flowStatusEl = document.getElementById('flow_status');
      var flowStatusHeading = document.getElementById('flow_status_heading');
      statusEl.dataset['status'] = this._spi.CurrentStatus;
      statusEl.dataset['flow'] = this._spi.CurrentFlow;
      primaryStatusEl.innerText = this._spi.CurrentStatus;
      flowStatusEl.innerText = this._spi.CurrentFlow;
      flowStatusHeading.innerText = this._spi.CurrentFlow; // Available Actions depend on the current status (Unpaired/PairedConnecting/PairedConnected)

      switch (this._spi.CurrentStatus) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiStatus"].Unpaired:
          //Unpaired...
          switch (this._spi.CurrentFlow) {
            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Idle:
              // Unpaired, Idle
              inputsEnabled.push('pos_id');
              inputsEnabled.push('serial_number');
              inputsEnabled.push('auto_resolve_eftpos_address');
              inputsEnabled.push('use_secure_web_sockets');
              inputsEnabled.push('test_mode');
              inputsEnabled.push('rcpt_from_eftpos');
              inputsEnabled.push('sig_flow_from_eftpos');
              inputsEnabled.push('pair');
              inputsEnabled.push('save_settings');
              inputsEnabled.push('save_address_settings');
              inputsEnabled.push('print_merchant_copy_input');
              inputsEnabled.push('receipt_header_input');
              inputsEnabled.push('receipt_footer_input');
              inputsEnabled.push('save_receipt');
              inputsEnabled.push('print');
              inputsEnabled.push('terminal_status');
              inputsEnabled.push('pos_vendor_key');

              if (!this.IsUnknownStatus()) {
                inputsEnabled.push('eftpos_address');
              }

              break;

            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Pairing:
              // Unpaired, PairingFlow
              var pairingState = this._spi.CurrentPairingFlowState;

              if (pairingState.AwaitingCheckFromPos) {
                inputsEnabled.push('pair_confirm');
              }

              if (!pairingState.Finished) {
                inputsEnabled.push('pair_cancel');
              } else {
                inputsEnabled.push('ok');
              }

              break;

            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Transaction: // Unpaired, TransactionFlow - Should never be the case!

            default:
              this._log.info("# .. Unexpected Flow .. ".concat(this._spi.CurrentFlow));

              break;
          }

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiStatus"].PairedConnecting:
          // This is still considered as a Paired kind of state, but...
          // .. we give user the option of changing IP address, just in case the EFTPOS got a new one in the meanwhile
          inputsEnabled.push('rcpt_from_eftpos');
          inputsEnabled.push('sig_flow_from_eftpos');
          inputsEnabled.push('save_settings'); // .. but otherwise we give the same options as PairedConnected
          // goto case SpiStatus.PairedConnected;

          if (!this.IsUnknownStatus()) {
            inputsEnabled.push('eftpos_address');
          }

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiStatus"].PairedConnected:
          switch (this._spi.CurrentFlow) {
            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Idle:
              // Paired, Idle
              inputsEnabled.push('amount_input');
              inputsEnabled.push('tip_amount_input');
              inputsEnabled.push('surcharge_amount_input');
              inputsEnabled.push('suppress_merchant_password_input');
              inputsEnabled.push('cashout_amount_input');
              inputsEnabled.push('prompt_for_cash');
              inputsEnabled.push('pos_ref_id_input');
              inputsEnabled.push('save_settings');
              inputsEnabled.push('save_receipt');
              inputsEnabled.push('purchase');
              inputsEnabled.push('moto');
              inputsEnabled.push('refund');
              inputsEnabled.push('cashout');
              inputsEnabled.push('settle');
              inputsEnabled.push('settle_enq');
              inputsEnabled.push('recover');
              inputsEnabled.push('unpair');
              inputsEnabled.push('glt');
              inputsEnabled.push('rcpt_from_eftpos');
              inputsEnabled.push('sig_flow_from_eftpos');
              inputsEnabled.push('receipt_header_input');
              inputsEnabled.push('receipt_footer_input');
              inputsEnabled.push('print');
              inputsEnabled.push('terminal_status');
              break;

            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Transaction:
              // Paired, Transaction
              if (this._spi.CurrentTxFlowState.AwaitingSignatureCheck) {
                inputsEnabled.push('tx_sign_accept');
                inputsEnabled.push('tx_sign_decline');
              }

              if (this._spi.CurrentTxFlowState.AwaitingPhoneForAuth) {
                inputsEnabled.push('tx_auth_code');
                inputsEnabled.push('auth_code_input');
              }

              if (this.IsUnknownStatus()) {
                inputsEnabled.push('ok_retry');
                inputsEnabled.push('ok_override_paid');
                inputsEnabled.push('ok_cancel');
              }

              if (!this._spi.CurrentTxFlowState.Finished && !this._spi.CurrentTxFlowState.AttemptingToCancel) {
                inputsEnabled.push('tx_cancel');
              } else {
                switch (this._spi.CurrentTxFlowState.Success) {
                  case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Success:
                    inputsEnabled.push('ok');
                    break;

                  case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Failed:
                    inputsEnabled.push('ok_cancel');
                    break;

                  default:
                    // Unknown
                    inputsEnabled.push('ok_cancel');
                    break;
                }
              }

              break;

            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Pairing:
              // Paired, Pairing - we have just finished the pairing flow. OK to ack.
              inputsEnabled.push('ok');
              break;

            default:
              this._log.info("# .. Unexpected Flow .. ".concat(this._spi.CurrentFlow));

              break;
          }

          break;

        default:
          this._log.info("# .. Unexpected State .. ".concat(this._spi.CurrentStatus));

          break;
      } // Configure buttons / inputs


      var inputs = document.querySelectorAll('.input');

      for (var i = 0; i < inputs.length; i++) {
        inputs[i].disabled = true;
      }

      inputsEnabled.forEach(function (input) {
        document.getElementById(input).disabled = false;
      });

      this._flow_msg.Info();
    }
  }, {
    key: "IsUnknownStatus",
    value: function IsUnknownStatus() {
      if (this._spi.CurrentFlow == _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Transaction) {
        if (this._spi.CurrentTxFlowState.Finished && this._spi.CurrentTxFlowState.Success == _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Unknown) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "PrintPairingStatus",
    value: function PrintPairingStatus() {
      this._flow_msg.Info("# --------------- STATUS ------------------");

      this._flow_msg.Info("# ".concat(this._posId, " <-> Eftpos: ").concat(this._eftposAddress, " #"));

      this._flow_msg.Info("# SPI STATUS: ".concat(this._spi.CurrentStatus, "     FLOW: ").concat(this._spi.CurrentFlow, " #"));

      this._flow_msg.Info("# SPI CONFIG: ".concat(JSON.stringify(this._spi.Config)));

      this._flow_msg.Info("# -----------------------------------------");

      this._flow_msg.Info("# POS: v".concat(this._version, " Spi: v").concat(_assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Spi"].GetVersion()));
    }
  }, {
    key: "SetAutoAddressResolutionState",
    value: function SetAutoAddressResolutionState() {
      this._spi.SetTestMode(this._testMode);

      this._spi.SetSecureWebSockets(this._useSecureWebSockets);

      this._spi.SetAutoAddressResolution(this._autoResolveEftposAddress);
    }
  }, {
    key: "AcceptUserInput",
    value: function AcceptUserInput() {
      var _this2 = this;

      document.getElementById('address_settings_form').addEventListener('submit', function (e) {
        e.preventDefault();

        if (_this2._spi.CurrentStatus === _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiStatus"].Unpaired && _this2._spi.CurrentFlow === _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Idle) {
          _this2._testMode = document.getElementById('test_mode').checked;
          _this2._useSecureWebSockets = document.getElementById('use_secure_web_sockets').checked;
          _this2._autoResolveEftposAddress = document.getElementById('auto_resolve_eftpos_address').checked;

          _this2.SetAutoAddressResolutionState();

          _this2._log.info("Auto address settings saved");
        }
      });
      document.getElementById('settings_form').addEventListener('submit', function (e) {
        e.preventDefault();

        if (_this2._spi.CurrentStatus === _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiStatus"].Unpaired && _this2._spi.CurrentFlow === _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Idle) {
          _this2._posId = document.getElementById('pos_id').value;
          _this2._apiKey = document.getElementById('pos_vendor_key').value;
          _this2._eftposAddress = document.getElementById('eftpos_address').value;
          _this2._serialNumber = document.getElementById('serial_number').value;

          _this2._spi.SetPosId(_this2._posId);

          _this2._spi.SetDeviceApiKey(_this2._apiKey);

          _this2._spi.SetEftposAddress(_this2._eftposAddress);

          _this2._spi.SetSerialNumber(_this2._serialNumber);

          localStorage.setItem('pos_id', _this2._posId);
          localStorage.setItem('pos_vendor_key', _this2._apiKey);
          localStorage.setItem('eftpos_address', _this2._eftposAddress);
          localStorage.setItem('auto_resolve_eftpos_address', _this2._autoResolveEftposAddress);
          localStorage.setItem('serial_number', _this2._serialNumber);
          localStorage.setItem('test_mode', _this2._testMode);
          localStorage.setItem('use_secure_web_sockets', _this2._useSecureWebSockets);

          _this2._log.info("Saved settings");
        }

        _this2._spi.Config.PromptForCustomerCopyOnEftpos = document.getElementById('rcpt_from_eftpos').checked;
        _this2._spi.Config.SignatureFlowOnEftpos = document.getElementById('sig_flow_from_eftpos').checked;
        localStorage.setItem('rcpt_from_eftpos', _this2._spi.Config.PromptForCustomerCopyOnEftpos);
        localStorage.setItem('sig_flow_from_eftpos', _this2._spi.Config.SignatureFlowOnEftpos);

        _this2.PrintPairingStatus();

        return false;
      });
      document.getElementById('auto_resolve_eftpos_address').addEventListener('change', function () {
        document.getElementById('eftpos_address').disabled = document.getElementById('auto_resolve_eftpos_address').checked;
      });
      document.getElementById('use_secure_web_sockets').addEventListener('change', function () {
        var isSecure = document.getElementById('use_secure_web_sockets').checked;

        _this2._spi.SetSecureWebSockets(isSecure);
      });
      document.getElementById('pair').addEventListener('click', function () {
        _this2._spi.Pair();
      });
      document.getElementById('pair_confirm').addEventListener('click', function () {
        _this2._spi.PairingConfirmCode();
      });
      document.getElementById('pair_cancel').addEventListener('click', function () {
        _this2._spi.PairingCancel();
      });
      document.getElementById('unpair').addEventListener('click', function () {
        _this2._spi.Unpair();
      });
      document.getElementById('purchase').addEventListener('click', function () {
        var posRefId = "purchase-".concat(new Date().toISOString());
        var purchaseAmount = parseInt(document.getElementById('amount').value, 10);
        var tipAmount = parseInt(document.getElementById('tip_amount').value, 10);
        var cashoutAmount = parseInt(document.getElementById('cashout_amount').value, 10);
        var surchargeAmount = parseInt(document.getElementById('surcharge_amount').value, 10);
        var promptForCashout = document.getElementById('prompt_for_cash').checked;

        var res = _this2._spi.InitiatePurchaseTxV2(posRefId, purchaseAmount, tipAmount, cashoutAmount, promptForCashout, _this2._options, surchargeAmount);

        if (!res.Initiated) {
          _this2._flow_msg.Info("# Could not initiate purchase: ".concat(res.Message, ". Please Retry."));
        }
      });
      document.getElementById('refund').addEventListener('click', function () {
        var amount = parseInt(document.getElementById('amount').value, 10);
        var suppressMerchantPassword = document.getElementById('suppress_merchant_password').checked;
        var posRefId = "refund-".concat(new Date().toISOString());

        var res = _this2._spi.InitiateRefundTx(posRefId, amount, suppressMerchantPassword);

        _this2._flow_msg.Info(res.Initiated ? "# Refund Initiated. Will be updated with Progress." : "# Could not initiate refund: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('cashout').addEventListener('click', function () {
        var amount = parseInt(document.getElementById('cashout_amount').value, 10);
        var surchargeAmount = parseInt(document.getElementById('surcharge_amount').value, 10);

        if (!amount > 0) {
          _this2._log.info('Cashout amount must be greater than 0');

          return;
        }

        var posRefId = "cashout-".concat(new Date().toISOString());

        var res = _this2._spi.InitiateCashoutOnlyTx(posRefId, amount, surchargeAmount);

        _this2._flow_msg.Info(res.Initiated ? "# Cashout Initiated. Will be updated with Progress." : "# Could not initiate cashout: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('moto').addEventListener('click', function () {
        var amount = parseInt(document.getElementById('amount').value, 10);
        var surchargeAmount = parseInt(document.getElementById('surcharge_amount').value, 10);
        var suppressMerchantPassword = document.getElementById('suppress_merchant_password').checked;
        var posRefId = "cashout-".concat(new Date().toISOString());

        var res = _this2._spi.InitiateMotoPurchaseTx(posRefId, amount, surchargeAmount, suppressMerchantPassword);

        _this2._flow_msg.Info(res.Initiated ? "# MOTO purchase Initiated. Will be updated with Progress." : "# Could not initiate moto purchase: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('tx_sign_accept').addEventListener('click', function () {
        _this2._spi.AcceptSignature(true);
      });
      document.getElementById('tx_sign_decline').addEventListener('click', function () {
        _this2._spi.AcceptSignature(false);
      });
      document.getElementById('tx_cancel').addEventListener('click', function () {
        _this2._spi.CancelTransaction();
      });
      document.getElementById('tx_auth_code').addEventListener('click', function () {
        var authCode = document.getElementById('auth_code').value;

        var res = _this2._spi.SubmitAuthCode(authCode);

        _this2._flow_msg.Info(res.ValidFormat ? "# Auth code submitted" : "# Invalid Code Format. ".concat(res.Message, ". Try Again."));
      });
      document.getElementById('settle').addEventListener('click', function () {
        var res = _this2._spi.InitiateSettleTx(_assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["RequestIdHelper"].Id("settle"));

        _this2._flow_msg.Info(res.Initiated ? "# Settle Initiated. Will be updated with Progress." : "# Could not initiate settle: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('settle_enq').addEventListener('click', function () {
        var res = _this2._spi.InitiateSettlementEnquiry(_assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["RequestIdHelper"].Id("stlenq"));

        _this2._flow_msg.Info(res.Initiated ? "# Settle enquiry Initiated. Will be updated with Progress." : "# Could not initiate settle enquiry: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('print_merchant_copy').addEventListener('click', function () {
        _this2._spi.Config.PrintMerchantCopy = document.getElementById('print_merchant_copy').checked;

        _this2._flow_msg.Clear();

        _this2._spi.AckFlowEndedAndBackToIdle();

        _this2.PrintStatusAndActions();
      });
      document.getElementById('save_receipt').addEventListener('click', function () {
        _this2._options.SetCustomerReceiptHeader(_this2.SanitizePrintText(document.getElementById('receipt_header').value));

        _this2._options.SetMerchantReceiptHeader(_this2.SanitizePrintText(document.getElementById('receipt_header').value));

        _this2._options.SetCustomerReceiptFooter(_this2.SanitizePrintText(document.getElementById('receipt_footer').value));

        _this2._options.SetMerchantReceiptFooter(_this2.SanitizePrintText(document.getElementById('receipt_footer').value));

        _this2._flow_msg.Clear();

        _this2._flow_msg.Info("Receipt header / footer updated.");

        _this2._spi.AckFlowEndedAndBackToIdle();

        _this2.PrintStatusAndActions();
      });
      document.getElementById('print').addEventListener('click', function () {
        var header = document.getElementById('receipt_header').value;
        var footer = document.getElementById('receipt_footer').value;

        var payload = _this2.SanitizePrintText(header + footer);

        _this2._spi.PrintReceipt(_this2._apiKey, payload);
      });
      document.getElementById('terminal_status').addEventListener('click', function () {
        _this2._spi.GetTerminalStatus();
      });
      document.getElementById('ok').addEventListener('click', function () {
        _this2._spi.AckFlowEndedAndBackToIdle();

        _this2._flow_msg.Clear();

        _this2._flow_msg.innerHTML = "Select from the options below";

        _this2.PrintStatusAndActions();
      });
      document.getElementById('recover').addEventListener('click', function () {
        _this2._flow_msg.Clear();

        var posRefId = document.getElementById('pos_ref_id').value;

        var res = _this2._spi.InitiateRecovery(posRefId, _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].Purchase);

        _this2._flow_msg.Info(res.Initiated ? "# Recovery Initiated. Will be updated with Progress." : "# Could not initiate recovery. ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('glt').addEventListener('click', function () {
        var res = _this2._spi.InitiateGetLastTx();

        _this2._flow_msg.Info(res.Initiated ? "# GLT Initiated. Will be updated with Progress." : "# Could not initiate GLT: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('ok_cancel').addEventListener('click', function () {
        _this2._spi.AckFlowEndedAndBackToIdle();

        _this2._flow_msg.Clear();

        _this2._flow_msg.innerHTML = "Order Cancelled";

        _this2.PrintStatusAndActions();
      });
    }
  }, {
    key: "LoadPersistedState",
    value: function LoadPersistedState() {
      if (localStorage.getItem('pos_id')) {
        this._posId = localStorage.getItem('pos_id');
        document.getElementById('pos_id').value = this._posId;
      } else {
        this._posId = document.getElementById('pos_id').value;
      }

      if (localStorage.getItem('pos_vendor_key')) {
        this._apiKey = localStorage.getItem('pos_vendor_key');
        document.getElementById('pos_vendor_key').value = this._apiKey;
      } else {
        this._apiKey = document.getElementById('pos_vendor_key').value;
      }

      if (localStorage.getItem('eftpos_address')) {
        this._eftposAddress = localStorage.getItem('eftpos_address');
        document.getElementById('eftpos_address').value = this._eftposAddress;
      } else {
        this._eftposAddress = document.getElementById('eftpos_address').value;
      }

      this._rcpt_from_eftpos = document.getElementById('rcpt_from_eftpos').checked = localStorage.getItem('rcpt_from_eftpos') === 'true' || false;
      this._sig_flow_from_eftpos = document.getElementById('sig_flow_from_eftpos').checked = localStorage.getItem('sig_flow_from_eftpos') === 'true' || false;

      if (localStorage.getItem('EncKey') && localStorage.getItem('HmacKey')) {
        this._spiSecrets = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Secrets"](localStorage.getItem('EncKey'), localStorage.getItem('HmacKey'));
      }

      if (localStorage.getItem('serial_number')) {
        this._serialNumber = localStorage.getItem('serial_number');
        document.getElementById('serial_number').value = this._serialNumber;
      }

      if (localStorage.getItem('auto_resolve_eftpos_address')) {
        this._autoResolveEftposAddress = localStorage.getItem('auto_resolve_eftpos_address');
        document.getElementById('auto_resolve_eftpos_address').checked = this._autoResolveEftposAddress;
      }

      this._testMode = document.getElementById('test_mode').checked = localStorage.getItem('test_mode') === 'true' || false;
      this._useSecureWebSockets = document.getElementById('use_secure_web_sockets').checked = localStorage.getItem('use_secure_web_sockets') === 'true' || false;
    }
  }, {
    key: "SanitizePrintText",
    value: function SanitizePrintText(printText) {
      printText = printText.replace("\\emphasis", "\emphasis");
      printText = printText.replace("\\clear", "\clear");
      return printText.replace("\r\n", "\n");
    }
  }]);

  return RamenPos;
}();
/**
 * Start the POS
 */

document.addEventListener('DOMContentLoaded', function () {
  try {
    var log = console;
    var receipt = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Logger"](document.getElementById('receipt_output'), "\n\n \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/ \n\n");
    var flow_msg = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Logger"](document.getElementById('flow_msg'));
    var pos = new RamenPos(log, receipt, flow_msg);
    pos.Start();
  } catch (err) {
    console.error(err);
  }
});

/***/ }),

/***/ "./node_modules/@assemblypayments/spi-client-js/dist/spi-client-js.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@assemblypayments/spi-client-js/dist/spi-client-js.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdatespi_client_js"];
/******/ 	window["webpackHotUpdatespi_client_js"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) {}
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "23b1384d9110643c7515";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./index.js")(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: Spi, Logger, Secrets, SuccessState, TransactionOptions, TransactionType, SpiFlow, SpiStatus, PrintingResponse, RefundResponse, PurchaseResponse, GetLastTransactionResponse, MotoPurchaseResponse, TerminalStatusResponse, TerminalBattery, CashoutOnlyResponse, Settlement, RequestIdHelper, DeviceAddressResponseCode, BillStatusResponse, BillRetrievalResult, GetOpenTablesResponse, OpenTablesEntry, BillPaymentFlowEndedResponse, AccountVerifyResponse, PreauthResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_Spi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/Spi */ "./src/Spi.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Spi", function() { return _src_Spi__WEBPACK_IMPORTED_MODULE_0__["Spi"]; });

/* harmony import */ var _src_Logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/Logger */ "./src/Logger.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return _src_Logger__WEBPACK_IMPORTED_MODULE_1__["Logger"]; });

/* harmony import */ var _src_Secrets__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/Secrets */ "./src/Secrets.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Secrets", function() { return _src_Secrets__WEBPACK_IMPORTED_MODULE_2__["Secrets"]; });

/* harmony import */ var _src_Messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/Messages */ "./src/Messages.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SuccessState", function() { return _src_Messages__WEBPACK_IMPORTED_MODULE_3__["SuccessState"]; });

/* harmony import */ var _src_SpiModels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/SpiModels */ "./src/SpiModels.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransactionOptions", function() { return _src_SpiModels__WEBPACK_IMPORTED_MODULE_4__["TransactionOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransactionType", function() { return _src_SpiModels__WEBPACK_IMPORTED_MODULE_4__["TransactionType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpiFlow", function() { return _src_SpiModels__WEBPACK_IMPORTED_MODULE_4__["SpiFlow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpiStatus", function() { return _src_SpiModels__WEBPACK_IMPORTED_MODULE_4__["SpiStatus"]; });

/* harmony import */ var _src_Printing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/Printing */ "./src/Printing.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PrintingResponse", function() { return _src_Printing__WEBPACK_IMPORTED_MODULE_5__["PrintingResponse"]; });

/* harmony import */ var _src_Purchase__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/Purchase */ "./src/Purchase.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RefundResponse", function() { return _src_Purchase__WEBPACK_IMPORTED_MODULE_6__["RefundResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PurchaseResponse", function() { return _src_Purchase__WEBPACK_IMPORTED_MODULE_6__["PurchaseResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GetLastTransactionResponse", function() { return _src_Purchase__WEBPACK_IMPORTED_MODULE_6__["GetLastTransactionResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MotoPurchaseResponse", function() { return _src_Purchase__WEBPACK_IMPORTED_MODULE_6__["MotoPurchaseResponse"]; });

/* harmony import */ var _src_TerminalStatus__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/TerminalStatus */ "./src/TerminalStatus.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TerminalStatusResponse", function() { return _src_TerminalStatus__WEBPACK_IMPORTED_MODULE_7__["TerminalStatusResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TerminalBattery", function() { return _src_TerminalStatus__WEBPACK_IMPORTED_MODULE_7__["TerminalBattery"]; });

/* harmony import */ var _src_Cashout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/Cashout */ "./src/Cashout.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CashoutOnlyResponse", function() { return _src_Cashout__WEBPACK_IMPORTED_MODULE_8__["CashoutOnlyResponse"]; });

/* harmony import */ var _src_Settlement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./src/Settlement */ "./src/Settlement.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Settlement", function() { return _src_Settlement__WEBPACK_IMPORTED_MODULE_9__["Settlement"]; });

/* harmony import */ var _src_RequestIdHelper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./src/RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequestIdHelper", function() { return _src_RequestIdHelper__WEBPACK_IMPORTED_MODULE_10__["RequestIdHelper"]; });

/* harmony import */ var _src_Service_DeviceService__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./src/Service/DeviceService */ "./src/Service/DeviceService.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DeviceAddressResponseCode", function() { return _src_Service_DeviceService__WEBPACK_IMPORTED_MODULE_11__["DeviceAddressResponseCode"]; });

/* harmony import */ var _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./src/PayAtTable */ "./src/PayAtTable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BillStatusResponse", function() { return _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__["BillStatusResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BillRetrievalResult", function() { return _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__["BillRetrievalResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GetOpenTablesResponse", function() { return _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__["GetOpenTablesResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OpenTablesEntry", function() { return _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__["OpenTablesEntry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BillPaymentFlowEndedResponse", function() { return _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__["BillPaymentFlowEndedResponse"]; });

/* harmony import */ var _src_Preauth__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./src/Preauth */ "./src/Preauth.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccountVerifyResponse", function() { return _src_Preauth__WEBPACK_IMPORTED_MODULE_13__["AccountVerifyResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PreauthResponse", function() { return _src_Preauth__WEBPACK_IMPORTED_MODULE_13__["PreauthResponse"]; });

// Re-exported modules required for POS vendors















/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/readOnlyError.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/readOnlyError.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _readOnlyError(name) {
  throw new Error("\"" + name + "\" is read-only");
}

module.exports = _readOnlyError;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/aes-js/index.js":
/*!**************************************!*\
  !*** ./node_modules/aes-js/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
(function(root) {
    "use strict";

    function checkInt(value) {
        return (parseInt(value) === value);
    }

    function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) { return false; }

        for (var i = 0; i < arrayish.length; i++) {
            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                return false;
            }
        }

        return true;
    }

    function coerceArray(arg, copy) {

        // ArrayBuffer view
        if (arg.buffer && arg.name === 'Uint8Array') {

            if (copy) {
                if (arg.slice) {
                    arg = arg.slice();
                } else {
                    arg = Array.prototype.slice.call(arg);
                }
            }

            return arg;
        }

        // It's an array; check it is a valid representation of a byte
        if (Array.isArray(arg)) {
            if (!checkInts(arg)) {
                throw new Error('Array contains invalid value: ' + arg);
            }

            return new Uint8Array(arg);
        }

        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
        if (checkInt(arg.length) && checkInts(arg)) {
            return new Uint8Array(arg);
        }

        throw new Error('unsupported array-like object');
    }

    function createArray(length) {
        return new Uint8Array(length);
    }

    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
            if (sourceArray.slice) {
                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
            } else {
                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
            }
        }
        targetArray.set(sourceArray, targetStart);
    }



    var convertUtf8 = (function() {
        function toBytes(text) {
            var result = [], i = 0;
            text = encodeURI(text);
            while (i < text.length) {
                var c = text.charCodeAt(i++);

                // if it is a % sign, encode the following 2 bytes as a hex value
                if (c === 37) {
                    result.push(parseInt(text.substr(i, 2), 16))
                    i += 2;

                // otherwise, just the actual byte
                } else {
                    result.push(c)
                }
            }

            return coerceArray(result);
        }

        function fromBytes(bytes) {
            var result = [], i = 0;

            while (i < bytes.length) {
                var c = bytes[i];

                if (c < 128) {
                    result.push(String.fromCharCode(c));
                    i++;
                } else if (c > 191 && c < 224) {
                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                    i += 2;
                } else {
                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                    i += 3;
                }
            }

            return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();

    var convertHex = (function() {
        function toBytes(text) {
            var result = [];
            for (var i = 0; i < text.length; i += 2) {
                result.push(parseInt(text.substr(i, 2), 16));
            }

            return result;
        }

        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
        var Hex = '0123456789abcdef';

        function fromBytes(bytes) {
                var result = [];
                for (var i = 0; i < bytes.length; i++) {
                    var v = bytes[i];
                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                }
                return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();


    // Number of rounds by keysize
    var numberOfRounds = {16: 10, 24: 12, 32: 14}

    // Round constant words
    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

    // S-box and Inverse S-box (S is for Substitution)
    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

    // Transformations for encryption
    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

    // Transformations for decryption
    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

    // Transformations for decryption key expansion
    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

    function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
            result.push(
                (bytes[i    ] << 24) |
                (bytes[i + 1] << 16) |
                (bytes[i + 2] <<  8) |
                 bytes[i + 3]
            );
        }
        return result;
    }

    var AES = function(key) {
        if (!(this instanceof AES)) {
            throw Error('AES must be instanitated with `new`');
        }

        Object.defineProperty(this, 'key', {
            value: coerceArray(key, true)
        });

        this._prepare();
    }


    AES.prototype._prepare = function() {

        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
        }

        // encryption round keys
        this._Ke = [];

        // decryption round keys
        this._Kd = [];

        for (var i = 0; i <= rounds; i++) {
            this._Ke.push([0, 0, 0, 0]);
            this._Kd.push([0, 0, 0, 0]);
        }

        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;

        // convert the key into ints
        var tk = convertToInt32(this.key);

        // copy values into round key arrays
        var index;
        for (var i = 0; i < KC; i++) {
            index = i >> 2;
            this._Ke[index][i % 4] = tk[i];
            this._Kd[rounds - index][i % 4] = tk[i];
        }

        // key expansion (fips-197 section 5.2)
        var rconpointer = 0;
        var t = KC, tt;
        while (t < roundKeyCount) {
            tt = tk[KC - 1];
            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                      (S[(tt >>  8) & 0xFF] << 16) ^
                      (S[ tt        & 0xFF] <<  8) ^
                       S[(tt >> 24) & 0xFF]        ^
                      (rcon[rconpointer] << 24));
            rconpointer += 1;

            // key expansion (for non-256 bit)
            if (KC != 8) {
                for (var i = 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }

            // key expansion for 256-bit keys is "slightly different" (fips-197)
            } else {
                for (var i = 1; i < (KC / 2); i++) {
                    tk[i] ^= tk[i - 1];
                }
                tt = tk[(KC / 2) - 1];

                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                              (S[(tt >>  8) & 0xFF] <<  8) ^
                              (S[(tt >> 16) & 0xFF] << 16) ^
                              (S[(tt >> 24) & 0xFF] << 24));

                for (var i = (KC / 2) + 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }
            }

            // copy values into round key arrays
            var i = 0, r, c;
            while (i < KC && t < roundKeyCount) {
                r = t >> 2;
                c = t % 4;
                this._Ke[r][c] = tk[i];
                this._Kd[rounds - r][c] = tk[i++];
                t++;
            }
        }

        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
        for (var r = 1; r < rounds; r++) {
            for (var c = 0; c < 4; c++) {
                tt = this._Kd[r][c];
                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                  U2[(tt >> 16) & 0xFF] ^
                                  U3[(tt >>  8) & 0xFF] ^
                                  U4[ tt        & 0xFF]);
            }
        }
    }

    AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
            throw new Error('invalid plaintext size (must be 16 bytes)');
        }

        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Ke[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T4[ t[(i + 3) % 4]        & 0xff] ^
                        this._Ke[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Ke[rounds][i];
            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }

    AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
            throw new Error('invalid ciphertext size (must be 16 bytes)');
        }

        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Kd[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T8[ t[(i + 1) % 4]        & 0xff] ^
                        this._Kd[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Kd[rounds][i];
            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }


    /**
     *  Mode Of Operation - Electonic Codebook (ECB)
     */
    var ModeOfOperationECB = function(key) {
        if (!(this instanceof ModeOfOperationECB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Electronic Code Block";
        this.name = "ecb";

        this._aes = new AES(key);
    }

    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);
            block = this._aes.encrypt(block);
            copyArray(block, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);
            copyArray(block, plaintext, i);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Block Chaining (CBC)
     */
    var ModeOfOperationCBC = function(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Block Chaining";
        this.name = "cbc";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastCipherblock = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);

            for (var j = 0; j < 16; j++) {
                block[j] ^= this._lastCipherblock[j];
            }

            this._lastCipherblock = this._aes.encrypt(block);
            copyArray(this._lastCipherblock, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);

            for (var j = 0; j < 16; j++) {
                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
            }

            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Feedback (CFB)
     */
    var ModeOfOperationCFB = function(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Feedback";
        this.name = "cfb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 size)');
        }

        if (!segmentSize) { segmentSize = 1; }

        this.segmentSize = segmentSize;

        this._shiftRegister = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if ((plaintext.length % this.segmentSize) != 0) {
            throw new Error('invalid plaintext size (must be segmentSize bytes)');
        }

        var encrypted = coerceArray(plaintext, true);

        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j = 0; j < this.segmentSize; j++) {
                encrypted[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return encrypted;
    }

    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if ((ciphertext.length % this.segmentSize) != 0) {
            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
        }

        var plaintext = coerceArray(ciphertext, true);

        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);

            for (var j = 0; j < this.segmentSize; j++) {
                plaintext[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return plaintext;
    }

    /**
     *  Mode Of Operation - Output Feedback (OFB)
     */
    var ModeOfOperationOFB = function(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Output Feedback";
        this.name = "ofb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
            }
            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


    /**
     *  Counter object for CTR common mode of operation
     */
    var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
            throw Error('Counter must be instanitated with `new`');
        }

        // We allow 0, but anything false-ish uses the default 1
        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

        if (typeof(initialValue) === 'number') {
            this._counter = createArray(16);
            this.setValue(initialValue);

        } else {
            this.setBytes(initialValue);
        }
    }

    Counter.prototype.setValue = function(value) {
        if (typeof(value) !== 'number' || parseInt(value) != value) {
            throw new Error('invalid counter value (must be an integer)');
        }

        // We cannot safely handle numbers beyond the safe range for integers
        if (value > Number.MAX_SAFE_INTEGER) {
            throw new Error('integer value out of safe range');
        }

        for (var index = 15; index >= 0; --index) {
            this._counter[index] = value % 256;
            value = parseInt(value / 256);
        }
    }

    Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);

        if (bytes.length != 16) {
            throw new Error('invalid counter bytes size (must be 16 bytes)');
        }

        this._counter = bytes;
    };

    Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
            if (this._counter[i] === 255) {
                this._counter[i] = 0;
            } else {
                this._counter[i]++;
                break;
            }
        }
    }


    /**
     *  Mode Of Operation - Counter (CTR)
     */
    var ModeOfOperationCTR = function(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Counter";
        this.name = "ctr";

        if (!(counter instanceof Counter)) {
            counter = new Counter(counter)
        }

        this._counter = counter;

        this._remainingCounter = null;
        this._remainingCounterIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(this._counter._counter);
                this._remainingCounterIndex = 0;
                this._counter.increment();
            }
            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


    ///////////////////////
    // Padding

    // See:https://tools.ietf.org/html/rfc2315
    function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - (data.length % 16);
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i = data.length; i < result.length; i++) {
            result[i] = padder;
        }
        return result;
    }

    function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

        var padder = data[data.length - 1];
        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

        var length = data.length - padder;
        for (var i = 0; i < padder; i++) {
            if (data[length + i] !== padder) {
                throw new Error('PKCS#7 invalid padding byte');
            }
        }

        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
    }

    ///////////////////////
    // Exporting


    // The block cipher
    var aesjs = {
        AES: AES,
        Counter: Counter,

        ModeOfOperation: {
            ecb: ModeOfOperationECB,
            cbc: ModeOfOperationCBC,
            cfb: ModeOfOperationCFB,
            ofb: ModeOfOperationOFB,
            ctr: ModeOfOperationCTR
        },

        utils: {
            hex: convertHex,
            utf8: convertUtf8
        },

        padding: {
            pkcs7: {
                pad: pkcs7pad,
                strip: pkcs7strip
            }
        },

        _arrayTest: {
            coerceArray: coerceArray,
            createArray: createArray,
            copyArray: copyArray,
        }
    };


    // node.js
    if (true) {
        module.exports = aesjs

    // RequireJS/AMD
    // http://www.requirejs.org/docs/api.html
    // https://github.com/amdjs/amdjs-api/wiki/AMD
    } else {}


})(this);


/***/ }),

/***/ "./node_modules/bn.js/lib/bn.js":
/*!**************************************!*\
  !*** ./node_modules/bn.js/lib/bn.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(/*! buffer */ 0).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(  false || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/jssha/src/sha.js":
/*!***************************************!*\
  !*** ./node_modules/jssha/src/sha.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;/*
 A JavaScript implementation of the SHA family of hashes, as
 defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding
 HMAC implementation as defined in FIPS PUB 198a

 Copyright Brian Turek 2008-2017
 Distributed under the BSD License
 See http://caligatio.github.com/jsSHA/ for more information

 Several functions taken from Paul Johnston
*/
(function(Y){function C(c,a,b){var e=0,h=[],n=0,g,l,d,f,m,q,u,r,I=!1,v=[],w=[],t,y=!1,z=!1,x=-1;b=b||{};g=b.encoding||"UTF8";t=b.numRounds||1;if(t!==parseInt(t,10)||1>t)throw Error("numRounds must a integer >= 1");if("SHA-1"===c)m=512,q=K,u=Z,f=160,r=function(a){return a.slice()};else if(0===c.lastIndexOf("SHA-",0))if(q=function(a,b){return L(a,b,c)},u=function(a,b,h,e){var k,f;if("SHA-224"===c||"SHA-256"===c)k=(b+65>>>9<<4)+15,f=16;else if("SHA-384"===c||"SHA-512"===c)k=(b+129>>>10<<
5)+31,f=32;else throw Error("Unexpected error in SHA-2 implementation");for(;a.length<=k;)a.push(0);a[b>>>5]|=128<<24-b%32;b=b+h;a[k]=b&4294967295;a[k-1]=b/4294967296|0;h=a.length;for(b=0;b<h;b+=f)e=L(a.slice(b,b+f),e,c);if("SHA-224"===c)a=[e[0],e[1],e[2],e[3],e[4],e[5],e[6]];else if("SHA-256"===c)a=e;else if("SHA-384"===c)a=[e[0].a,e[0].b,e[1].a,e[1].b,e[2].a,e[2].b,e[3].a,e[3].b,e[4].a,e[4].b,e[5].a,e[5].b];else if("SHA-512"===c)a=[e[0].a,e[0].b,e[1].a,e[1].b,e[2].a,e[2].b,e[3].a,e[3].b,e[4].a,
e[4].b,e[5].a,e[5].b,e[6].a,e[6].b,e[7].a,e[7].b];else throw Error("Unexpected error in SHA-2 implementation");return a},r=function(a){return a.slice()},"SHA-224"===c)m=512,f=224;else if("SHA-256"===c)m=512,f=256;else if("SHA-384"===c)m=1024,f=384;else if("SHA-512"===c)m=1024,f=512;else throw Error("Chosen SHA variant is not supported");else if(0===c.lastIndexOf("SHA3-",0)||0===c.lastIndexOf("SHAKE",0)){var F=6;q=D;r=function(a){var c=[],e;for(e=0;5>e;e+=1)c[e]=a[e].slice();return c};x=1;if("SHA3-224"===
c)m=1152,f=224;else if("SHA3-256"===c)m=1088,f=256;else if("SHA3-384"===c)m=832,f=384;else if("SHA3-512"===c)m=576,f=512;else if("SHAKE128"===c)m=1344,f=-1,F=31,z=!0;else if("SHAKE256"===c)m=1088,f=-1,F=31,z=!0;else throw Error("Chosen SHA variant is not supported");u=function(a,c,e,b,h){e=m;var k=F,f,g=[],n=e>>>5,l=0,d=c>>>5;for(f=0;f<d&&c>=e;f+=n)b=D(a.slice(f,f+n),b),c-=e;a=a.slice(f);for(c%=e;a.length<n;)a.push(0);f=c>>>3;a[f>>2]^=k<<f%4*8;a[n-1]^=2147483648;for(b=D(a,b);32*g.length<h;){a=b[l%
5][l/5|0];g.push(a.b);if(32*g.length>=h)break;g.push(a.a);l+=1;0===64*l%e&&D(null,b)}return g}}else throw Error("Chosen SHA variant is not supported");d=M(a,g,x);l=A(c);this.setHMACKey=function(a,b,h){var k;if(!0===I)throw Error("HMAC key already set");if(!0===y)throw Error("Cannot set HMAC key after calling update");if(!0===z)throw Error("SHAKE is not supported for HMAC");g=(h||{}).encoding||"UTF8";b=M(b,g,x)(a);a=b.binLen;b=b.value;k=m>>>3;h=k/4-1;if(k<a/8){for(b=u(b,a,0,A(c),f);b.length<=h;)b.push(0);
b[h]&=4294967040}else if(k>a/8){for(;b.length<=h;)b.push(0);b[h]&=4294967040}for(a=0;a<=h;a+=1)v[a]=b[a]^909522486,w[a]=b[a]^1549556828;l=q(v,l);e=m;I=!0};this.update=function(a){var c,b,k,f=0,g=m>>>5;c=d(a,h,n);a=c.binLen;b=c.value;c=a>>>5;for(k=0;k<c;k+=g)f+m<=a&&(l=q(b.slice(k,k+g),l),f+=m);e+=f;h=b.slice(f>>>5);n=a%m;y=!0};this.getHash=function(a,b){var k,g,d,m;if(!0===I)throw Error("Cannot call getHash after setting HMAC key");d=N(b);if(!0===z){if(-1===d.shakeLen)throw Error("shakeLen must be specified in options");
f=d.shakeLen}switch(a){case "HEX":k=function(a){return O(a,f,x,d)};break;case "B64":k=function(a){return P(a,f,x,d)};break;case "BYTES":k=function(a){return Q(a,f,x)};break;case "ARRAYBUFFER":try{g=new ArrayBuffer(0)}catch(p){throw Error("ARRAYBUFFER not supported by this environment");}k=function(a){return R(a,f,x)};break;default:throw Error("format must be HEX, B64, BYTES, or ARRAYBUFFER");}m=u(h.slice(),n,e,r(l),f);for(g=1;g<t;g+=1)!0===z&&0!==f%32&&(m[m.length-1]&=16777215>>>24-f%32),m=u(m,f,
0,A(c),f);return k(m)};this.getHMAC=function(a,b){var k,g,d,p;if(!1===I)throw Error("Cannot call getHMAC without first setting HMAC key");d=N(b);switch(a){case "HEX":k=function(a){return O(a,f,x,d)};break;case "B64":k=function(a){return P(a,f,x,d)};break;case "BYTES":k=function(a){return Q(a,f,x)};break;case "ARRAYBUFFER":try{k=new ArrayBuffer(0)}catch(v){throw Error("ARRAYBUFFER not supported by this environment");}k=function(a){return R(a,f,x)};break;default:throw Error("outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER");
}g=u(h.slice(),n,e,r(l),f);p=q(w,A(c));p=u(g,f,m,p,f);return k(p)}}function b(c,a){this.a=c;this.b=a}function O(c,a,b,e){var h="";a/=8;var n,g,d;d=-1===b?3:0;for(n=0;n<a;n+=1)g=c[n>>>2]>>>8*(d+n%4*b),h+="0123456789abcdef".charAt(g>>>4&15)+"0123456789abcdef".charAt(g&15);return e.outputUpper?h.toUpperCase():h}function P(c,a,b,e){var h="",n=a/8,g,d,p,f;f=-1===b?3:0;for(g=0;g<n;g+=3)for(d=g+1<n?c[g+1>>>2]:0,p=g+2<n?c[g+2>>>2]:0,p=(c[g>>>2]>>>8*(f+g%4*b)&255)<<16|(d>>>8*(f+(g+1)%4*b)&255)<<8|p>>>8*(f+
(g+2)%4*b)&255,d=0;4>d;d+=1)8*g+6*d<=a?h+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(p>>>6*(3-d)&63):h+=e.b64Pad;return h}function Q(c,a,b){var e="";a/=8;var h,d,g;g=-1===b?3:0;for(h=0;h<a;h+=1)d=c[h>>>2]>>>8*(g+h%4*b)&255,e+=String.fromCharCode(d);return e}function R(c,a,b){a/=8;var e,h=new ArrayBuffer(a),d,g;g=new Uint8Array(h);d=-1===b?3:0;for(e=0;e<a;e+=1)g[e]=c[e>>>2]>>>8*(d+e%4*b)&255;return h}function N(c){var a={outputUpper:!1,b64Pad:"=",shakeLen:-1};c=c||{};
a.outputUpper=c.outputUpper||!1;!0===c.hasOwnProperty("b64Pad")&&(a.b64Pad=c.b64Pad);if(!0===c.hasOwnProperty("shakeLen")){if(0!==c.shakeLen%8)throw Error("shakeLen must be a multiple of 8");a.shakeLen=c.shakeLen}if("boolean"!==typeof a.outputUpper)throw Error("Invalid outputUpper formatting option");if("string"!==typeof a.b64Pad)throw Error("Invalid b64Pad formatting option");return a}function M(c,a,b){switch(a){case "UTF8":case "UTF16BE":case "UTF16LE":break;default:throw Error("encoding must be UTF8, UTF16BE, or UTF16LE");
}switch(c){case "HEX":c=function(a,c,d){var g=a.length,l,p,f,m,q,u;if(0!==g%2)throw Error("String of HEX type must be in byte increments");c=c||[0];d=d||0;q=d>>>3;u=-1===b?3:0;for(l=0;l<g;l+=2){p=parseInt(a.substr(l,2),16);if(isNaN(p))throw Error("String of HEX type contains invalid characters");m=(l>>>1)+q;for(f=m>>>2;c.length<=f;)c.push(0);c[f]|=p<<8*(u+m%4*b)}return{value:c,binLen:4*g+d}};break;case "TEXT":c=function(c,h,d){var g,l,p=0,f,m,q,u,r,t;h=h||[0];d=d||0;q=d>>>3;if("UTF8"===a)for(t=-1===
b?3:0,f=0;f<c.length;f+=1)for(g=c.charCodeAt(f),l=[],128>g?l.push(g):2048>g?(l.push(192|g>>>6),l.push(128|g&63)):55296>g||57344<=g?l.push(224|g>>>12,128|g>>>6&63,128|g&63):(f+=1,g=65536+((g&1023)<<10|c.charCodeAt(f)&1023),l.push(240|g>>>18,128|g>>>12&63,128|g>>>6&63,128|g&63)),m=0;m<l.length;m+=1){r=p+q;for(u=r>>>2;h.length<=u;)h.push(0);h[u]|=l[m]<<8*(t+r%4*b);p+=1}else if("UTF16BE"===a||"UTF16LE"===a)for(t=-1===b?2:0,l="UTF16LE"===a&&1!==b||"UTF16LE"!==a&&1===b,f=0;f<c.length;f+=1){g=c.charCodeAt(f);
!0===l&&(m=g&255,g=m<<8|g>>>8);r=p+q;for(u=r>>>2;h.length<=u;)h.push(0);h[u]|=g<<8*(t+r%4*b);p+=2}return{value:h,binLen:8*p+d}};break;case "B64":c=function(a,c,d){var g=0,l,p,f,m,q,u,r,t;if(-1===a.search(/^[a-zA-Z0-9=+\/]+$/))throw Error("Invalid character in base-64 string");p=a.indexOf("=");a=a.replace(/\=/g,"");if(-1!==p&&p<a.length)throw Error("Invalid '=' found in base-64 string");c=c||[0];d=d||0;u=d>>>3;t=-1===b?3:0;for(p=0;p<a.length;p+=4){q=a.substr(p,4);for(f=m=0;f<q.length;f+=1)l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(q[f]),
m|=l<<18-6*f;for(f=0;f<q.length-1;f+=1){r=g+u;for(l=r>>>2;c.length<=l;)c.push(0);c[l]|=(m>>>16-8*f&255)<<8*(t+r%4*b);g+=1}}return{value:c,binLen:8*g+d}};break;case "BYTES":c=function(a,c,d){var g,l,p,f,m,q;c=c||[0];d=d||0;p=d>>>3;q=-1===b?3:0;for(l=0;l<a.length;l+=1)g=a.charCodeAt(l),m=l+p,f=m>>>2,c.length<=f&&c.push(0),c[f]|=g<<8*(q+m%4*b);return{value:c,binLen:8*a.length+d}};break;case "ARRAYBUFFER":try{c=new ArrayBuffer(0)}catch(e){throw Error("ARRAYBUFFER not supported by this environment");}c=
function(a,c,d){var g,l,p,f,m,q;c=c||[0];d=d||0;l=d>>>3;m=-1===b?3:0;q=new Uint8Array(a);for(g=0;g<a.byteLength;g+=1)f=g+l,p=f>>>2,c.length<=p&&c.push(0),c[p]|=q[g]<<8*(m+f%4*b);return{value:c,binLen:8*a.byteLength+d}};break;default:throw Error("format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER");}return c}function y(c,a){return c<<a|c>>>32-a}function S(c,a){return 32<a?(a-=32,new b(c.b<<a|c.a>>>32-a,c.a<<a|c.b>>>32-a)):0!==a?new b(c.a<<a|c.b>>>32-a,c.b<<a|c.a>>>32-a):c}function w(c,a){return c>>>
a|c<<32-a}function t(c,a){var k=null,k=new b(c.a,c.b);return k=32>=a?new b(k.a>>>a|k.b<<32-a&4294967295,k.b>>>a|k.a<<32-a&4294967295):new b(k.b>>>a-32|k.a<<64-a&4294967295,k.a>>>a-32|k.b<<64-a&4294967295)}function T(c,a){var k=null;return k=32>=a?new b(c.a>>>a,c.b>>>a|c.a<<32-a&4294967295):new b(0,c.a>>>a-32)}function aa(c,a,b){return c&a^~c&b}function ba(c,a,k){return new b(c.a&a.a^~c.a&k.a,c.b&a.b^~c.b&k.b)}function U(c,a,b){return c&a^c&b^a&b}function ca(c,a,k){return new b(c.a&a.a^c.a&k.a^a.a&
k.a,c.b&a.b^c.b&k.b^a.b&k.b)}function da(c){return w(c,2)^w(c,13)^w(c,22)}function ea(c){var a=t(c,28),k=t(c,34);c=t(c,39);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function fa(c){return w(c,6)^w(c,11)^w(c,25)}function ga(c){var a=t(c,14),k=t(c,18);c=t(c,41);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function ha(c){return w(c,7)^w(c,18)^c>>>3}function ia(c){var a=t(c,1),k=t(c,8);c=T(c,7);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function ja(c){return w(c,17)^w(c,19)^c>>>10}function ka(c){var a=t(c,19),k=t(c,61);
c=T(c,6);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function G(c,a){var b=(c&65535)+(a&65535);return((c>>>16)+(a>>>16)+(b>>>16)&65535)<<16|b&65535}function la(c,a,b,e){var h=(c&65535)+(a&65535)+(b&65535)+(e&65535);return((c>>>16)+(a>>>16)+(b>>>16)+(e>>>16)+(h>>>16)&65535)<<16|h&65535}function H(c,a,b,e,h){var d=(c&65535)+(a&65535)+(b&65535)+(e&65535)+(h&65535);return((c>>>16)+(a>>>16)+(b>>>16)+(e>>>16)+(h>>>16)+(d>>>16)&65535)<<16|d&65535}function ma(c,a){var d,e,h;d=(c.b&65535)+(a.b&65535);e=(c.b>>>16)+
(a.b>>>16)+(d>>>16);h=(e&65535)<<16|d&65535;d=(c.a&65535)+(a.a&65535)+(e>>>16);e=(c.a>>>16)+(a.a>>>16)+(d>>>16);return new b((e&65535)<<16|d&65535,h)}function na(c,a,d,e){var h,n,g;h=(c.b&65535)+(a.b&65535)+(d.b&65535)+(e.b&65535);n=(c.b>>>16)+(a.b>>>16)+(d.b>>>16)+(e.b>>>16)+(h>>>16);g=(n&65535)<<16|h&65535;h=(c.a&65535)+(a.a&65535)+(d.a&65535)+(e.a&65535)+(n>>>16);n=(c.a>>>16)+(a.a>>>16)+(d.a>>>16)+(e.a>>>16)+(h>>>16);return new b((n&65535)<<16|h&65535,g)}function oa(c,a,d,e,h){var n,g,l;n=(c.b&
65535)+(a.b&65535)+(d.b&65535)+(e.b&65535)+(h.b&65535);g=(c.b>>>16)+(a.b>>>16)+(d.b>>>16)+(e.b>>>16)+(h.b>>>16)+(n>>>16);l=(g&65535)<<16|n&65535;n=(c.a&65535)+(a.a&65535)+(d.a&65535)+(e.a&65535)+(h.a&65535)+(g>>>16);g=(c.a>>>16)+(a.a>>>16)+(d.a>>>16)+(e.a>>>16)+(h.a>>>16)+(n>>>16);return new b((g&65535)<<16|n&65535,l)}function B(c,a){return new b(c.a^a.a,c.b^a.b)}function A(c){var a=[],d;if("SHA-1"===c)a=[1732584193,4023233417,2562383102,271733878,3285377520];else if(0===c.lastIndexOf("SHA-",0))switch(a=
[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],d=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],c){case "SHA-224":break;case "SHA-256":a=d;break;case "SHA-384":a=[new b(3418070365,a[0]),new b(1654270250,a[1]),new b(2438529370,a[2]),new b(355462360,a[3]),new b(1731405415,a[4]),new b(41048885895,a[5]),new b(3675008525,a[6]),new b(1203062813,a[7])];break;case "SHA-512":a=[new b(d[0],4089235720),new b(d[1],2227873595),
new b(d[2],4271175723),new b(d[3],1595750129),new b(d[4],2917565137),new b(d[5],725511199),new b(d[6],4215389547),new b(d[7],327033209)];break;default:throw Error("Unknown SHA variant");}else if(0===c.lastIndexOf("SHA3-",0)||0===c.lastIndexOf("SHAKE",0))for(c=0;5>c;c+=1)a[c]=[new b(0,0),new b(0,0),new b(0,0),new b(0,0),new b(0,0)];else throw Error("No SHA variants supported");return a}function K(c,a){var b=[],e,d,n,g,l,p,f;e=a[0];d=a[1];n=a[2];g=a[3];l=a[4];for(f=0;80>f;f+=1)b[f]=16>f?c[f]:y(b[f-
3]^b[f-8]^b[f-14]^b[f-16],1),p=20>f?H(y(e,5),d&n^~d&g,l,1518500249,b[f]):40>f?H(y(e,5),d^n^g,l,1859775393,b[f]):60>f?H(y(e,5),U(d,n,g),l,2400959708,b[f]):H(y(e,5),d^n^g,l,3395469782,b[f]),l=g,g=n,n=y(d,30),d=e,e=p;a[0]=G(e,a[0]);a[1]=G(d,a[1]);a[2]=G(n,a[2]);a[3]=G(g,a[3]);a[4]=G(l,a[4]);return a}function Z(c,a,b,e){var d;for(d=(a+65>>>9<<4)+15;c.length<=d;)c.push(0);c[a>>>5]|=128<<24-a%32;a+=b;c[d]=a&4294967295;c[d-1]=a/4294967296|0;a=c.length;for(d=0;d<a;d+=16)e=K(c.slice(d,d+16),e);return e}function L(c,
a,k){var e,h,n,g,l,p,f,m,q,u,r,t,v,w,y,A,z,x,F,B,C,D,E=[],J;if("SHA-224"===k||"SHA-256"===k)u=64,t=1,D=Number,v=G,w=la,y=H,A=ha,z=ja,x=da,F=fa,C=U,B=aa,J=d;else if("SHA-384"===k||"SHA-512"===k)u=80,t=2,D=b,v=ma,w=na,y=oa,A=ia,z=ka,x=ea,F=ga,C=ca,B=ba,J=V;else throw Error("Unexpected error in SHA-2 implementation");k=a[0];e=a[1];h=a[2];n=a[3];g=a[4];l=a[5];p=a[6];f=a[7];for(r=0;r<u;r+=1)16>r?(q=r*t,m=c.length<=q?0:c[q],q=c.length<=q+1?0:c[q+1],E[r]=new D(m,q)):E[r]=w(z(E[r-2]),E[r-7],A(E[r-15]),E[r-
16]),m=y(f,F(g),B(g,l,p),J[r],E[r]),q=v(x(k),C(k,e,h)),f=p,p=l,l=g,g=v(n,m),n=h,h=e,e=k,k=v(m,q);a[0]=v(k,a[0]);a[1]=v(e,a[1]);a[2]=v(h,a[2]);a[3]=v(n,a[3]);a[4]=v(g,a[4]);a[5]=v(l,a[5]);a[6]=v(p,a[6]);a[7]=v(f,a[7]);return a}function D(c,a){var d,e,h,n,g=[],l=[];if(null!==c)for(e=0;e<c.length;e+=2)a[(e>>>1)%5][(e>>>1)/5|0]=B(a[(e>>>1)%5][(e>>>1)/5|0],new b(c[e+1],c[e]));for(d=0;24>d;d+=1){n=A("SHA3-");for(e=0;5>e;e+=1){h=a[e][0];var p=a[e][1],f=a[e][2],m=a[e][3],q=a[e][4];g[e]=new b(h.a^p.a^f.a^
m.a^q.a,h.b^p.b^f.b^m.b^q.b)}for(e=0;5>e;e+=1)l[e]=B(g[(e+4)%5],S(g[(e+1)%5],1));for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)a[e][h]=B(a[e][h],l[e]);for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)n[h][(2*e+3*h)%5]=S(a[e][h],W[e][h]);for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)a[e][h]=B(n[e][h],new b(~n[(e+1)%5][h].a&n[(e+2)%5][h].a,~n[(e+1)%5][h].b&n[(e+2)%5][h].b));a[0][0]=B(a[0][0],X[d])}return a}var d,V,W,X;d=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,
1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,
2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];V=[new b(d[0],3609767458),new b(d[1],602891725),new b(d[2],3964484399),new b(d[3],2173295548),new b(d[4],4081628472),new b(d[5],3053834265),new b(d[6],2937671579),new b(d[7],3664609560),new b(d[8],2734883394),new b(d[9],1164996542),new b(d[10],1323610764),new b(d[11],3590304994),new b(d[12],4068182383),new b(d[13],991336113),new b(d[14],633803317),new b(d[15],3479774868),new b(d[16],2666613458),new b(d[17],944711139),new b(d[18],2341262773),
new b(d[19],2007800933),new b(d[20],1495990901),new b(d[21],1856431235),new b(d[22],3175218132),new b(d[23],2198950837),new b(d[24],3999719339),new b(d[25],766784016),new b(d[26],2566594879),new b(d[27],3203337956),new b(d[28],1034457026),new b(d[29],2466948901),new b(d[30],3758326383),new b(d[31],168717936),new b(d[32],1188179964),new b(d[33],1546045734),new b(d[34],1522805485),new b(d[35],2643833823),new b(d[36],2343527390),new b(d[37],1014477480),new b(d[38],1206759142),new b(d[39],344077627),
new b(d[40],1290863460),new b(d[41],3158454273),new b(d[42],3505952657),new b(d[43],106217008),new b(d[44],3606008344),new b(d[45],1432725776),new b(d[46],1467031594),new b(d[47],851169720),new b(d[48],3100823752),new b(d[49],1363258195),new b(d[50],3750685593),new b(d[51],3785050280),new b(d[52],3318307427),new b(d[53],3812723403),new b(d[54],2003034995),new b(d[55],3602036899),new b(d[56],1575990012),new b(d[57],1125592928),new b(d[58],2716904306),new b(d[59],442776044),new b(d[60],593698344),new b(d[61],
3733110249),new b(d[62],2999351573),new b(d[63],3815920427),new b(3391569614,3928383900),new b(3515267271,566280711),new b(3940187606,3454069534),new b(4118630271,4000239992),new b(116418474,1914138554),new b(174292421,2731055270),new b(289380356,3203993006),new b(460393269,320620315),new b(685471733,587496836),new b(852142971,1086792851),new b(1017036298,365543100),new b(1126000580,2618297676),new b(1288033470,3409855158),new b(1501505948,4234509866),new b(1607167915,987167468),new b(1816402316,
1246189591)];X=[new b(0,1),new b(0,32898),new b(2147483648,32906),new b(2147483648,2147516416),new b(0,32907),new b(0,2147483649),new b(2147483648,2147516545),new b(2147483648,32777),new b(0,138),new b(0,136),new b(0,2147516425),new b(0,2147483658),new b(0,2147516555),new b(2147483648,139),new b(2147483648,32905),new b(2147483648,32771),new b(2147483648,32770),new b(2147483648,128),new b(0,32778),new b(2147483648,2147483658),new b(2147483648,2147516545),new b(2147483648,32896),new b(0,2147483649),
new b(2147483648,2147516424)];W=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]]; true?!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return C}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined})(this);


/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/Cashout.js":
/*!************************!*\
  !*** ./src/Cashout.js ***!
  \************************/
/*! exports provided: CashoutOnlyRequest, CashoutOnlyResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CashoutOnlyRequest", function() { return CashoutOnlyRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CashoutOnlyResponse", function() { return CashoutOnlyResponse; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");





var CashoutOnlyRequest =
/*#__PURE__*/
function () {
  function CashoutOnlyRequest(amountCents, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, CashoutOnlyRequest);

    this.PosRefId = posRefId;
    this.CashoutAmount = amountCents;
    this.SurchargeAmount = null;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(CashoutOnlyRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "cash_amount": this.CashoutAmount,
        "surcharge_amount": this.SurchargeAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_4__["RequestIdHelper"].Id("cshout"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].CashoutOnlyRequest, data, true);
    }
  }]);

  return CashoutOnlyRequest;
}();
var CashoutOnlyResponse =
/*#__PURE__*/
function () {
  function CashoutOnlyResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, CashoutOnlyResponse);

    this._m = m;
    this.RequestId = m.Id;
    this.PosRefId = m.Data.pos_ref_id;
    this.SchemeName = m.Data.scheme_name;
    this.Success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(CashoutOnlyResponse, [{
    key: "GetRRN",
    value: function GetRRN() {
      return this._m.Data["rrn"];
    }
  }, {
    key: "GetCashoutAmount",
    value: function GetCashoutAmount() {
      return this._m.Data["cash_amount"];
    }
  }, {
    key: "GetBankNonCashAmount",
    value: function GetBankNonCashAmount() {
      return this._m.Data["bank_noncash_amount"];
    }
  }, {
    key: "GetBankCashAmount",
    value: function GetBankCashAmount() {
      return this._m.Data["bank_cash_amount"];
    }
  }, {
    key: "GetCustomerReceipt",
    value: function GetCustomerReceipt() {
      return this._m.Data["customer_receipt"];
    }
  }, {
    key: "GetMerchantReceipt",
    value: function GetMerchantReceipt() {
      return this._m.Data["merchant_receipt"];
    }
  }, {
    key: "GetResponseText",
    value: function GetResponseText() {
      return this._m.Data["host_response_text"];
    }
  }, {
    key: "GetResponseCode",
    value: function GetResponseCode() {
      return this._m.Data["host_response_code"];
    }
  }, {
    key: "GetTerminalReferenceId",
    value: function GetTerminalReferenceId() {
      return this._m.Data["terminal_ref_id"];
    }
  }, {
    key: "GetAccountType",
    value: function GetAccountType() {
      return this._m.Data["account_type"];
    }
  }, {
    key: "GetAuthCode",
    value: function GetAuthCode() {
      return this._m.Data["auth_code"];
    }
  }, {
    key: "GetBankDate",
    value: function GetBankDate() {
      return this._m.Data["bank_date"];
    }
  }, {
    key: "GetBankTime",
    value: function GetBankTime() {
      return this._m.Data["bank_time"];
    }
  }, {
    key: "GetMaskedPan",
    value: function GetMaskedPan() {
      return this._m.Data["masked_pan"];
    }
  }, {
    key: "GetTerminalId",
    value: function GetTerminalId() {
      return this._m.Data["terminal_id"];
    }
  }, {
    key: "WasMerchantReceiptPrinted",
    value: function WasMerchantReceiptPrinted() {
      return this._m.Data["merchant_receipt_printed"];
    }
  }, {
    key: "WasCustomerReceiptPrinted",
    value: function WasCustomerReceiptPrinted() {
      return this._m.Data["customer_receipt_printed"];
    }
  }, {
    key: "GetSurchargeAmount",
    value: function GetSurchargeAmount() {
      return this._m.Data["surcharge_amount"];
    }
  }, {
    key: "GetResponseValue",
    value: function GetResponseValue(attribute) {
      return this._m.Data[attribute];
    }
  }]);

  return CashoutOnlyResponse;
}();

/***/ }),

/***/ "./src/Connection.js":
/*!***************************!*\
  !*** ./src/Connection.js ***!
  \***************************/
/*! exports provided: ConnectionState, SPI_PROTOCOL, ConnectionStateEventArgs, MessageEventArgs, Connection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionState", function() { return ConnectionState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPI_PROTOCOL", function() { return SPI_PROTOCOL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionStateEventArgs", function() { return ConnectionStateEventArgs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageEventArgs", function() { return MessageEventArgs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return Connection; });
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);


var ConnectionState = {
  Disconnected: 'Disconnected',
  Connecting: 'Connecting',
  Connected: 'Connected'
};
var SPI_PROTOCOL = 'spi.2.6.0';
var ConnectionStateEventArgs = function ConnectionStateEventArgs(connectionState) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, ConnectionStateEventArgs);

  this.ConnectionState = connectionState;
};
var MessageEventArgs = function MessageEventArgs(message) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, MessageEventArgs);

  this.Message = message;
};
var Connection =
/*#__PURE__*/
function () {
  function Connection() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Connection);

    this.Address = null;
    this.Connected = false;
    this.State = ConnectionState.Disconnected;
    this.SpiProtocol = SPI_PROTOCOL;
    this._ws = null;

    if (typeof WebSocket === 'undefined') {
      throw new Error('Environment does not support WebSockets');
    }
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(Connection, [{
    key: "Connect",
    value: function Connect(UseSecureWebSockets) {
      var _this = this;

      if (this.State === ConnectionState.Connected || this.State === ConnectionState.Connecting) {
        // already connected or connecting. disconnect first.
        return;
      }

      this.State = ConnectionState.Connecting; //Create a new socket instance specifying the url, SPI protocol and Websocket to use.
      //The will create a TCP/IP socket connection to the provided URL and perform HTTP websocket negotiation

      this._ws = new WebSocket(this.Address, this.SpiProtocol);

      this._ws.onopen = function () {
        return _this.pollWebSocketConnection();
      };

      this._ws.onmessage = function (payload) {
        return _this.onMessageReceived(payload);
      };

      this._ws.onclose = function () {
        return _this.onClosed();
      };

      this._ws.onerror = function (err) {
        return _this.onError(err);
      };

      document.dispatchEvent(new CustomEvent('ConnectionStatusChanged', {
        detail: new ConnectionStateEventArgs(ConnectionState.Connecting)
      }));
    }
  }, {
    key: "Disconnect",
    value: function Disconnect() {
      if (this.State == ConnectionState.Disconnected) return;

      if (this._ws && this._ws.readyState != this._ws.CLOSED) {
        this._ws.close();
      }

      if (this._ws) {
        this._ws.onopen = null;
        this._ws.onmessage = null;
        this._ws.onclose = null;
        this._ws.onerror = null;
      }

      this.onClosed();
    }
  }, {
    key: "Send",
    value: function Send(message) {
      this._ws.send(message);
    }
  }, {
    key: "onOpened",
    value: function onOpened() {
      this.State = ConnectionState.Connected;
      this.Connected = true;
      document.dispatchEvent(new CustomEvent('ConnectionStatusChanged', {
        detail: new ConnectionStateEventArgs(ConnectionState.Connected)
      }));
    }
  }, {
    key: "onClosed",
    value: function onClosed() {
      this.Connected = false;
      this.State = ConnectionState.Disconnected;
      this._ws = null;
      document.dispatchEvent(new CustomEvent('ConnectionStatusChanged', {
        detail: new ConnectionStateEventArgs(ConnectionState.Disconnected)
      }));
    }
  }, {
    key: "pollWebSocketConnection",
    value: function pollWebSocketConnection() {
      var _this2 = this;

      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      // Timeout trying to connect after 20 * 200ms = 4000 ms
      if (this._ws.readyState === this._ws.OPEN) {
        this.onOpened();
        return true;
      } else if (count < 20) {
        count++;
        setTimeout(function () {
          return _this2.pollWebSocketConnection(count);
        }, 200);
      } else {
        this.Disconnect();
        return false;
      }
    }
  }, {
    key: "onMessageReceived",
    value: function onMessageReceived(message) {
      document.dispatchEvent(new CustomEvent('MessageReceived', {
        detail: new MessageEventArgs(message.data)
      }));
    }
  }, {
    key: "onError",
    value: function onError(err) {
      document.dispatchEvent(new CustomEvent('ErrorReceived', {
        detail: new MessageEventArgs(err)
      }));
    }
  }]);

  return Connection;
}();

/***/ }),

/***/ "./src/Crypto.js":
/*!***********************!*\
  !*** ./src/Crypto.js ***!
  \***********************/
/*! exports provided: Crypto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Crypto", function() { return Crypto; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jssha__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jssha */ "./node_modules/jssha/src/sha.js");
/* harmony import */ var jssha__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jssha__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! aes-js */ "./node_modules/aes-js/index.js");
/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(aes_js__WEBPACK_IMPORTED_MODULE_3__);




var Crypto =
/*#__PURE__*/
function () {
  function Crypto() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Crypto);
  } // <summary>
  // Encrypt a block using CBC and PKCS7.
  // </summary>
  // <param name="key">The key value</param>
  // <param name="data">The message to encrypt</param>
  // <returns>Returns the resulting encrypted string data as HEX.</returns>


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Crypto, null, [{
    key: "AesEncrypt",
    value: function AesEncrypt(key, data) {
      var bytes = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.hex.toBytes(key);
      var iv = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
      var textBytes = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.padding.pkcs7.pad(aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.utf8.toBytes(data));
      var aesCbc = new aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.ModeOfOperation.cbc(bytes, iv);
      var encryptedBytes = aesCbc.encrypt(textBytes);
      var encryptedString = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.hex.fromBytes(encryptedBytes);
      return encryptedString;
    } // <summary>
    // Decrypt a block using a CBC and PKCS7.
    // </summary>
    // <param name="key">The key value</param>
    // <param name="data">the data to decrypt</param>
    // <returns>Returns the resulting data decrypted in plaintext.</returns>

  }, {
    key: "AesDecrypt",
    value: function AesDecrypt(key, data) {
      var bytes = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.hex.toBytes(key);
      var iv = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
      var encryptedBytes = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.hex.toBytes(data);
      var aesCbc = new aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.ModeOfOperation.cbc(bytes, iv);
      var decryptedBytes = aesCbc.decrypt(encryptedBytes);
      var decrypted = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.utf8.fromBytes(aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.padding.pkcs7.strip(decryptedBytes));
      return decrypted;
    } // <summary>
    // Calculates the HMACSHA256 signature of a message.
    // </summary>
    // <param name="key">The Hmac Key as HEX</param>
    // <param name="messageToSign">The message to sign</param>
    // <returns>The HMACSHA256 signature as a hex string</returns>

  }, {
    key: "HmacSignature",
    value: function HmacSignature(key, messageToSign) {
      var shaObj = new jssha__WEBPACK_IMPORTED_MODULE_2___default.a("SHA-256", "TEXT");
      shaObj.setHMACKey(key, 'HEX');
      shaObj.update(messageToSign);
      return shaObj.getHMAC("HEX");
    }
    /**
     * This utility function calculates the SHA-256 value in hexadecimal format
     * @param {String} value the value to be hashed
     */

  }, {
    key: "GenerateHash",
    value: function GenerateHash(value) {
      var shaObj = new jssha__WEBPACK_IMPORTED_MODULE_2___default.a('SHA-256', 'HEX');
      shaObj.update(value);
      var shaHash = shaObj.getHash('HEX');
      return shaHash;
    }
  }]);

  return Crypto;
}();

/***/ }),

/***/ "./src/DiffieHellman.js":
/*!******************************!*\
  !*** ./src/DiffieHellman.js ***!
  \******************************/
/*! exports provided: DiffieHellman */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiffieHellman", function() { return DiffieHellman; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_2__);


 // This creates the private and public keys for diffie-hellman (https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange#Cryptographic_explanation)
// REQUIREMENTS: bn.js
// ASSUMPTIONS: Inputs to the functions are hexadecimal strings
// <summary>
// This class implements the Diffie-Hellman algorithm using BigIntegers.
// It can do the 3 main things:
// 1. Generate a random Private Key for you.
// 2. Generate your Public Key based on your Private Key.
// 3. Generate the Secret given their Public Key and your Private Key
// p and g are the shared constants for the algorithm, aka primeP and primeG.
// </summary>

var DiffieHellman =
/*#__PURE__*/
function () {
  function DiffieHellman() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, DiffieHellman);
  } // <summary>
  // Generates a random Private Key that you can use.
  // </summary>
  // <param name="p"></param>
  // <returns>Random Private Key</returns>


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(DiffieHellman, [{
    key: "RandomPrivateKey",
    value: function RandomPrivateKey(maxValue) {
      var maxValueBN = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(maxValue);
      var shiftDistance = Math.floor(Math.random() * 1000 + 1);
      var randBitInt = maxValueBN.shrn(shiftDistance); // Right shift divides by a power of 2

      var min = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(2);

      if (randBitInt.cmp(min) == -1) {
        return min;
      }

      return randBitInt;
    } // <summary>
    // Calculates the Public Key from a Private Key.
    // </summary>
    // <param name="p"></param>
    // <param name="g"></param>
    // <param name="privateKey"></param>
    // <returns>Public Key (Hex)</returns>

  }, {
    key: "PublicKey",
    value: function PublicKey(p, g, privateKey) {
      var aHex = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(privateKey, 16);
      var gHex = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(g, 16);
      var montPrime = bn_js__WEBPACK_IMPORTED_MODULE_2___default.a.mont(new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(p, 16));
      var gRed = gHex.toRed(montPrime);
      var secret = gRed.redPow(aHex).fromRed().toString(16);
      return secret;
    } // <summary>
    // Calculates the shared secret given their Public Key (A) and your Private Key (b)
    // </summary>
    // <param name="p"></param>
    // <param name="theirPublicKey"></param>
    // <param name="yourPrivateKey"></param>
    // <returns></returns>

  }, {
    key: "Secret",
    value: function Secret(p, theirPublicKey, yourPrivateKey) {
      var bHex = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(theirPublicKey, 16);
      var AHex = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(yourPrivateKey, 16);
      var montPrime = bn_js__WEBPACK_IMPORTED_MODULE_2___default.a.mont(new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(p, 16));
      var BRed = bHex.toRed(montPrime);
      return BRed.redPow(AHex).fromRed().toString(16).toUpperCase();
    }
  }]);

  return DiffieHellman;
}();

/***/ }),

/***/ "./src/KeyRollingHelper.js":
/*!*********************************!*\
  !*** ./src/KeyRollingHelper.js ***!
  \*********************************/
/*! exports provided: KeyRollingHelper, KeyRollingResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyRollingHelper", function() { return KeyRollingHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyRollingResult", function() { return KeyRollingResult; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _Crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Crypto */ "./src/Crypto.js");
/* harmony import */ var _Secrets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Secrets */ "./src/Secrets.js");





var KeyRollingHelper =
/*#__PURE__*/
function () {
  function KeyRollingHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, KeyRollingHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(KeyRollingHelper, null, [{
    key: "PerformKeyRolling",
    value: function PerformKeyRolling(krRequest, currentSecrets) {
      var m = new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](krRequest.Id, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].KeyRollResponse, {
        "status": "confirmed"
      }, true);
      var newSecrets = new _Secrets__WEBPACK_IMPORTED_MODULE_4__["Secrets"](_Crypto__WEBPACK_IMPORTED_MODULE_3__["Crypto"].GenerateHash(currentSecrets.EncKey).toUpperCase(), _Crypto__WEBPACK_IMPORTED_MODULE_3__["Crypto"].GenerateHash(currentSecrets.HmacKey).toUpperCase());
      return new KeyRollingResult(m, newSecrets);
    }
  }]);

  return KeyRollingHelper;
}();
var KeyRollingResult = function KeyRollingResult(keyRollingConfirmation, newSecrets) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, KeyRollingResult);

  this.KeyRollingConfirmation = keyRollingConfirmation;
  this.NewSecrets = newSecrets;
};

/***/ }),

/***/ "./src/Logger.js":
/*!***********************!*\
  !*** ./src/Logger.js ***!
  \***********************/
/*! exports provided: Logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return Logger; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);


var Logger =
/*#__PURE__*/
function () {
  function Logger(element) {
    var lineSeperator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '\n';

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Logger);

    this.buffer = [];
    this.element = element;
    this.lineSeperator = lineSeperator;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Logger, [{
    key: "Info",
    value: function Info() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this.buffer.push(args.join(' '));

      this._render();
    }
  }, {
    key: "Debug",
    value: function Debug() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this.buffer.push(args.join(' '));

      this._render();
    }
  }, {
    key: "Warn",
    value: function Warn() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      this.buffer.push(args.join(' '));

      this._render();
    }
  }, {
    key: "Error",
    value: function Error() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this.buffer.push(args.join(' '));

      this._render();
    }
  }, {
    key: "Console",
    value: function Console() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      console.log(args.join(' '));
    }
  }, {
    key: "_render",
    value: function _render() {
      this.element.innerText = this.buffer.join(this.lineSeperator);
      this.element.scrollTop = this.element.scrollHeight;
    }
  }, {
    key: "Clear",
    value: function Clear() {
      this.buffer = [];

      this._render();
    }
  }]);

  return Logger;
}();

/***/ }),

/***/ "./src/Messages.js":
/*!*************************!*\
  !*** ./src/Messages.js ***!
  \*************************/
/*! exports provided: Events, SuccessState, MessageStamp, MessageEnvelope, Message */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Events", function() { return Events; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SuccessState", function() { return SuccessState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageStamp", function() { return MessageStamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageEnvelope", function() { return MessageEnvelope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Message", function() { return Message; });
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Crypto */ "./src/Crypto.js");


 // <summary>
// Events statically declares the various event names in messages.
// </summary>

var Events = {
  PairRequest: "pair_request",
  KeyRequest: "key_request",
  KeyResponse: "key_response",
  KeyCheck: "key_check",
  PairResponse: "pair_response",
  DropKeysAdvice: "drop_keys",
  LoginRequest: "login_request",
  LoginResponse: "login_response",
  Ping: "ping",
  Pong: "pong",
  PurchaseRequest: "purchase",
  PurchaseResponse: "purchase_response",
  CancelTransactionRequest: "cancel_transaction",
  CancelTransactionResponse: "cancel_response",
  GetLastTransactionRequest: "get_last_transaction",
  GetLastTransactionResponse: "last_transaction",
  RefundRequest: "refund",
  RefundResponse: "refund_response",
  SignatureRequired: "signature_required",
  SignatureDeclined: "signature_decline",
  SignatureAccepted: "signature_accept",
  AuthCodeRequired: "authorisation_code_required",
  AuthCodeAdvice: "authorisation_code_advice",
  CashoutOnlyRequest: "cash",
  CashoutOnlyResponse: "cash_response",
  MotoPurchaseRequest: "moto_purchase",
  MotoPurchaseResponse: "moto_purchase_response",
  SettleRequest: "settle",
  SettleResponse: "settle_response",
  SettlementEnquiryRequest: "settlement_enquiry",
  SettlementEnquiryResponse: "settlement_enquiry_response",
  SetPosInfoRequest: "set_pos_info",
  SetPosInfoResponse: "set_pos_info_response",
  KeyRollRequest: "request_use_next_keys",
  KeyRollResponse: "response_use_next_keys",
  Error: "error",
  InvalidHmacSignature: "_INVALID_SIGNATURE_",
  // Pay At Table Related Messages
  PayAtTableGetTableConfig: "get_table_config",
  // incoming. When eftpos wants to ask us for P@T configuration.
  PayAtTableSetTableConfig: "set_table_config",
  // outgoing. When we want to instruct eftpos with the P@T configuration.
  PayAtTableGetBillDetails: "get_bill_details",
  // incoming. When eftpos wants to aretrieve the bill for a table.
  PayAtTableBillDetails: "bill_details",
  // outgoing. We reply with this when eftpos requests to us get_bill_details.
  PayAtTableBillPayment: "bill_payment",
  // incoming. When the eftpos advices 
  PrintingRequest: "print",
  PrintingResponse: "print_response",
  TerminalStatusRequest: "get_terminal_status",
  TerminalStatusResponse: "terminal_status",
  BatteryLevelChanged: "battery_level_changed",
  PayAtTableGetOpenTables: "get_open_tables",
  PayAtTableOpenTables: "open_tables",
  PayAtTableBillPaymentFlowEnded: "bill_payment_flow_ended"
};
var SuccessState = {
  Unknown: 'Unknown',
  Success: 'Success',
  Failed: 'Failed'
}; // <summary>
// MessageStamp represents what is required to turn an outgoing Message into Json
// including encryption and date setting.
// </summary>

var MessageStamp = function MessageStamp(posId, secrets, serverTimeDelta) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, MessageStamp);

  this.PosId = posId;
  this.Secrets = secrets;
  this.ServerTimeDelta = serverTimeDelta;
}; // <summary>
// MessageEnvelope represents the outer structure of any message that is exchanged
// between the Pos and the PinPad and vice-versa.
// See http://www.simplepaymentapi.com/#/api/message-encryption
// </summary>

var MessageEnvelope =
/*#__PURE__*/
function () {
  function MessageEnvelope(message, enc, hmac, posId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, MessageEnvelope);

    // <summary>
    // The Message field is set only when in Un-encrypted form.
    // In fact it is the only field in an envelope in the Un-Encrypted form.
    // </summary>
    this.Message = message; // <summary>
    // The enc field is set only when in Encrypted form.
    // It contains the encrypted Json of another MessageEnvelope 
    // </summary>

    this.Enc = enc; // <summary>
    // The hmac field is set only when in Encrypted form.
    // It is the signature of the "enc" field.
    // </summary>

    this.Hmac = hmac; // <summary>
    // The pos_id field is only filled for outgoing Encrypted messages.
    // </summary>

    this.PosId = posId;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(MessageEnvelope, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        message: this.Message,
        enc: this.Enc,
        hmac: this.Hmac,
        pos_id: this.PosId
      };
    }
  }]);

  return MessageEnvelope;
}(); // <summary>
// Message represents the contents of a Message.
// See http://www.simplepaymentapi.com/#/api/message-encryption
// </summary>

var Message =
/*#__PURE__*/
function () {
  function Message(id, eventName, data, needsEncryption) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Message);

    this.Id = id;
    this.EventName = eventName;
    this.Data = data;
    this.DateTimeStamp = '';
    this.PosId = ''; // Pos_id is set here only for outgoing Un-encrypted messages. 

    this.IncommingHmac = ''; // Sometimes the logic around the incoming message might need access to the sugnature, for example in the key_check.

    this._needsEncryption = needsEncryption; // Denotes whether an outgoing message needs to be encrypted in ToJson()

    this.DecryptedJson = ''; // Set on an incoming message just so you can have a look at what it looked like in its json form.
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(Message, [{
    key: "GetSuccessState",
    value: function GetSuccessState() {
      if (!this.Data || typeof this.Data.success === "undefined") {
        return SuccessState.Unknown;
      }

      return this.Data.success ? SuccessState.Success : SuccessState.Failed;
    }
  }, {
    key: "GetError",
    value: function GetError() {
      return this.Data.error_reason ? this.Data.error_reason : "";
    }
  }, {
    key: "GetErrorDetail",
    value: function GetErrorDetail() {
      return this.Data.error_detail;
    }
  }, {
    key: "GetServerTimeDelta",
    value: function GetServerTimeDelta() {
      var now = Date.now(); // Stamp format: 2018-04-19T01:42:38.279

      var dts = this.DateTimeStamp.split(/[\-\+\. :T]/);
      var msgTime = new Date( // year, month, date
      dts[0], dts[1] - 1, dts[2], // hour, minute, second, millis
      dts[3], dts[4], dts[5], dts[6]).getTime(); // Local time zone

      return msgTime - now;
    } // Helper method to parse bank date format 20042018 (ddMMyyyy)

  }, {
    key: "ToJson",
    value: function ToJson(stamp) {
      var now = Date.now();
      var tzoffset = new Date().getTimezoneOffset() * 60 * 1000;
      var adjustedTime = new Date(now - tzoffset + stamp.ServerTimeDelta); // Format date: "yyyy-MM-ddTHH:mm:ss.fff"

      this.DateTimeStamp = adjustedTime.toISOString().slice(0, -1);
      this.PosId = stamp.PosId;
      var envelope = {
        message: {
          id: this.Id,
          event: this.EventName,
          data: this.Data,
          datetime: this.DateTimeStamp
        }
      };

      if (!this._needsEncryption) {
        // Unencrypted Messages need PosID inside the message
        envelope.message.pos_id = this.PosId;
      }

      this.DecryptedJson = JSON.stringify(envelope);

      if (!this._needsEncryption) {
        return this.DecryptedJson;
      }

      var encMsg = _Crypto__WEBPACK_IMPORTED_MODULE_2__["Crypto"].AesEncrypt(stamp.Secrets.EncKey, this.DecryptedJson);
      var hmacSig = _Crypto__WEBPACK_IMPORTED_MODULE_2__["Crypto"].HmacSignature(stamp.Secrets.HmacKey, encMsg);
      var encrMessageEnvelope = {
        enc: encMsg,
        hmac: hmacSig.toUpperCase(),
        pos_id: stamp.PosId
      };
      return JSON.stringify(encrMessageEnvelope);
    }
  }], [{
    key: "ParseBankDate",
    value: function ParseBankDate(bankDate) {
      if (bankDate.length !== 8) return null;
      return new Date("".concat(bankDate.substr(4, 4), "-").concat(bankDate.substr(2, 2), "-").concat(bankDate.substr(0, 2)));
    } // Parses a bank date & time str from "05Oct17" / "05:00" ("ddMMMyy/HH:mm") into date obj

  }, {
    key: "ParseBankDateTimeStr",
    value: function ParseBankDateTimeStr(date, time) {
      return new Date("".concat(date.substr(0, 2), " ").concat(date.substr(2, 3), " ").concat(date.substr(5, 2), " ").concat(time));
    }
  }, {
    key: "FromJson",
    value: function FromJson(msgJson, secrets) {
      var env = JSON.parse(msgJson);

      if (env.message != null) {
        var message = new Message(env.message.id, env.message.event, env.message.data, false);
        message.DecryptedJson = msgJson;
        return message;
      }

      if (secrets == null) {
        // This may happen if we somehow received an encrypted message from eftpos but we're not configered with secrets.
        // For example, if we cancel the pairing process a little late in the game and we get an encrypted key_check message after we've dropped the keys.
        return new Message("UNKNOWN", "NOSECRETS", null, false);
      } // Its encrypted, verify sig


      var sig = _Crypto__WEBPACK_IMPORTED_MODULE_2__["Crypto"].HmacSignature(secrets.HmacKey, env.enc);

      if (sig.toUpperCase() != env.hmac) {
        return new Message("_", Events.InvalidHmacSignature, null, false);
      }

      var decryptedJson = _Crypto__WEBPACK_IMPORTED_MODULE_2__["Crypto"].AesDecrypt(secrets.EncKey, env.enc);

      try {
        var decryptedMsg = JSON.parse(decryptedJson);

        var _message = new Message(decryptedMsg.message.id, decryptedMsg.message.event, decryptedMsg.message.data, true);

        _message.DateTimeStamp = decryptedMsg.message.datetime;
        _message.PosId = decryptedMsg.message.pos_id;
        _message.IncomingHmac = env.hmac;
        _message.DecryptedJson = decryptedJson;
        return _message;
      } catch (e) {
        return new Message("UNKNOWN", "UNPARSEABLE", {
          "msg": decryptedJson
        }, false);
      }
    }
  }]);

  return Message;
}();

/***/ }),

/***/ "./src/Pairing.js":
/*!************************!*\
  !*** ./src/Pairing.js ***!
  \************************/
/*! exports provided: PairRequest, KeyRequest, KeyResponse, KeyCheck, PairResponse, SecretsAndKeyResponse, DropKeysRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PairRequest", function() { return PairRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyRequest", function() { return KeyRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyResponse", function() { return KeyResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyCheck", function() { return KeyCheck; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PairResponse", function() { return PairResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecretsAndKeyResponse", function() { return SecretsAndKeyResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropKeysRequest", function() { return DropKeysRequest; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");



 // <summary>
// Pairing Interaction 1: Outgoing
// </summary>

var PairRequest =
/*#__PURE__*/
function () {
  function PairRequest() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PairRequest);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PairRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        padding: true
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("pr"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PairRequest, data, false);
    }
  }]);

  return PairRequest;
}(); // Pairing Interaction 2: Incoming

var KeyRequest = function KeyRequest(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, KeyRequest);

  this.RequestId = m.Id;
  this.Aenc = m.Data.enc.A;
  this.Ahmac = m.Data.hmac.A;
}; // Pairing Interaction 3: Outgoing

var KeyResponse =
/*#__PURE__*/
function () {
  function KeyResponse(requestId, Benc, Bhmac) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, KeyResponse);

    this.RequestId = requestId;
    this.Benc = Benc;
    this.Bhmac = Bhmac;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(KeyResponse, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        enc: {
          B: this.Benc
        },
        hmac: {
          B: this.Bhmac
        }
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](this.RequestId, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].KeyResponse, data, false);
    }
  }]);

  return KeyResponse;
}(); // Pairing Interaction 4: Incoming

var KeyCheck = function KeyCheck(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, KeyCheck);

  this.ConfirmationCode = m.IncomingHmac.substring(0, 6);
}; // Pairing Interaction 5: Incoming

var PairResponse = function PairResponse(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PairResponse);

  this.Success = m.Data.success;
}; // Holder class for Secrets and KeyResponse, so that we can use them together in method signatures.

var SecretsAndKeyResponse = function SecretsAndKeyResponse(secrets, keyResponse) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SecretsAndKeyResponse);

  this.Secrets = secrets;
  this.KeyResponse = keyResponse;
};
var DropKeysRequest =
/*#__PURE__*/
function () {
  function DropKeysRequest() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, DropKeysRequest);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(DropKeysRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("drpkys"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].DropKeysAdvice, null, true);
    }
  }]);

  return DropKeysRequest;
}();

/***/ }),

/***/ "./src/PairingHelper.js":
/*!******************************!*\
  !*** ./src/PairingHelper.js ***!
  \******************************/
/*! exports provided: GENERATOR, GROUP14_2048_BIT_MODP, PairingHelper, PublicKeyAndSecret */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GENERATOR", function() { return GENERATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GROUP14_2048_BIT_MODP", function() { return GROUP14_2048_BIT_MODP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PairingHelper", function() { return PairingHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PublicKeyAndSecret", function() { return PublicKeyAndSecret; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Pairing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Pairing */ "./src/Pairing.js");
/* harmony import */ var _Secrets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Secrets */ "./src/Secrets.js");
/* harmony import */ var _Crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Crypto */ "./src/Crypto.js");
/* harmony import */ var _DiffieHellman__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DiffieHellman */ "./src/DiffieHellman.js");





 // This is the generator used for diffie-hellman in 2048-bit MODP Group 14 as per (https://tools.ietf.org/html/rfc3526#section-3)

var GENERATOR = 2; // This is the prime used for diffie-hellman using 2048-bit MODP Group 14 as per (https://tools.ietf.org/html/rfc3526#section-3)

var GROUP14_2048_BIT_MODP = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF'; // <summary>
// This static class helps you with the pairing process as documented here:
// http://www.simplepaymentapi.com/#/api/pairing-process
// </summary>

var PairingHelper =
/*#__PURE__*/
function () {
  function PairingHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PairingHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PairingHelper, [{
    key: "GenerateSecretsAndKeyResponse",
    // <summary>
    // Calculates/Generates Secrets and KeyResponse given an incoming KeyRequest.
    // </summary>
    // <param name="keyRequest"></param>
    // <returns>Secrets and KeyResponse to send back.</returns>
    value: function GenerateSecretsAndKeyResponse(keyRequest) {
      var encPubAndSec = this._calculateMyPublicKeyAndSecret(keyRequest.Aenc);

      var Benc = encPubAndSec.MyPublicKey;
      var Senc = encPubAndSec.SharedSecretKey;

      var hmacPubAndSec = this._calculateMyPublicKeyAndSecret(keyRequest.Ahmac);

      var Bhmac = hmacPubAndSec.MyPublicKey;
      var Shmac = hmacPubAndSec.SharedSecretKey;
      var secrets = new _Secrets__WEBPACK_IMPORTED_MODULE_3__["Secrets"](Senc, Shmac);
      var keyResponse = new _Pairing__WEBPACK_IMPORTED_MODULE_2__["KeyResponse"](keyRequest.RequestId, Benc, Bhmac);
      return new _Pairing__WEBPACK_IMPORTED_MODULE_2__["SecretsAndKeyResponse"](secrets, keyResponse);
    } // <summary>
    // Turns an incoming "A" value from the PinPad into the outgoing "B" value 
    // and the secret value using DiffieHelmman helper.
    // </summary>
    // <param name="theirPublicKey">The incoming A value</param>
    // <returns>Your B value and the Secret</returns>

  }, {
    key: "_calculateMyPublicKeyAndSecret",
    value: function _calculateMyPublicKeyAndSecret(theirPublicKey) {
      var diffieHellman = new _DiffieHellman__WEBPACK_IMPORTED_MODULE_5__["DiffieHellman"]();
      var myPrivateBI = diffieHellman.RandomPrivateKey(GROUP14_2048_BIT_MODP);
      var myPublicBI = diffieHellman.PublicKey(GROUP14_2048_BIT_MODP, GENERATOR, myPrivateBI);
      var secretBI = diffieHellman.Secret(GROUP14_2048_BIT_MODP, theirPublicKey, myPrivateBI);
      var secret = this.DHSecretToSPISecret(secretBI);
      return new PublicKeyAndSecret(myPublicBI, secret);
    } // <summary>
    // Converts the DH secret BigInteger into the hex-string to be used as the secret.
    // There are some "gotchyas" here which is why this piece of work is abstracted so it can be tested separately.
    // See: http://www.simplepaymentapi.com/#/api/pairing-process
    // </summary>
    // <param name="secretBI">Secret as BigInteger</param>
    // <returns>Secret as Hex-String</returns>

  }, {
    key: "DHSecretToSPISecret",
    value: function DHSecretToSPISecret(secret) {
      // If the calculated hexadecimal secret doesn't have an even number of characters, we add an extra 0 to the start. This allows SHA-256 to operate on the hexadecimal secret as if it were a hexadecimal representation of a string.
      if (secret.length % 2 === 1) {
        secret = '0' + secret;
      }

      secret = secret.padStart(512, '0'); // We sha256 that byte array and return the hex string result

      return _Crypto__WEBPACK_IMPORTED_MODULE_4__["Crypto"].GenerateHash(secret);
    }
  }], [{
    key: "NewPairRequest",
    // <summary>
    // Generates a pairing Request.
    // </summary>
    // <returns>New PairRequest</returns>
    value: function NewPairRequest() {
      return new _Pairing__WEBPACK_IMPORTED_MODULE_2__["PairRequest"]();
    }
  }]);

  return PairingHelper;
}(); // <summary>
// Internal Holder class for Public and Secret, so that we can use them together in method signatures. 
// </summary>

var PublicKeyAndSecret = function PublicKeyAndSecret(myPublicKey, sharedSecretKey) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PublicKeyAndSecret);

  this.MyPublicKey = myPublicKey;
  this.SharedSecretKey = sharedSecretKey;
};

/***/ }),

/***/ "./src/PayAtTable.js":
/*!***************************!*\
  !*** ./src/PayAtTable.js ***!
  \***************************/
/*! exports provided: BillStatusResponse, BillRetrievalResult, PaymentType, BillPayment, PaymentHistoryEntry, PayAtTableConfig, GetOpenTablesResponse, OpenTablesEntry, BillPaymentFlowEndedResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BillStatusResponse", function() { return BillStatusResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BillRetrievalResult", function() { return BillRetrievalResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentType", function() { return PaymentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BillPayment", function() { return BillPayment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentHistoryEntry", function() { return PaymentHistoryEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PayAtTableConfig", function() { return PayAtTableConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetOpenTablesResponse", function() { return GetOpenTablesResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenTablesEntry", function() { return OpenTablesEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BillPaymentFlowEndedResponse", function() { return BillPaymentFlowEndedResponse; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _Purchase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Purchase */ "./src/Purchase.js");



 // <summary>
// This class represents the BillDetails that the POS will be asked for throughout a PayAtTable flow.
// </summary>

var BillStatusResponse =
/*#__PURE__*/
function () {
  function BillStatusResponse() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BillStatusResponse);

    // <summary>
    // Set this Error accordingly if you are not able to return the BillDetails that were asked from you.
    // </summary>
    this.Result = null; // <summary>
    // This is a unique identifier that you assign to each bill.
    // It migt be for example, the timestamp of when the cover was opened.
    // </summary>

    this.BillId = null; // <summary>
    // This is the table id that this bill was for.
    // The waiter will enter it on the Eftpos at the start of the PayAtTable flow and the Eftpos will 
    // retrieve the bill using the table id. 
    // </summary>

    this.TableId = null;
    this.OperatorId = null; // <summary>
    // The Total Amount on this bill, in cents.
    // </summary>

    this.TotalAmount = 0; // <summary>
    // The currently outsanding amount on this bill, in cents.
    // </summary>

    this.OutstandingAmount = 0; // <summary>
    // Your POS is required to persist some state on behalf of the Eftpos so the Eftpos can recover state.
    // It is just a piece of string that you save against your billId.
    // WHenever you're asked for BillDetails, make sure you return this piece of data if you have it.
    // </summary>

    this.BillData = "";
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(BillStatusResponse, [{
    key: "getBillPaymentHistory",
    value: function getBillPaymentHistory() {
      if (!this.BillData) {
        return [];
      }

      var billPaymentHistory = [];
      var savedBillData = JSON.parse(this.BillData);
      return savedBillData.map(function (bill) {
        return new PaymentHistoryEntry(bill.payment_type, bill.payment_summary);
      });
    }
  }, {
    key: "ToMessage",
    value: function ToMessage(messageId) {
      var data = {
        "success": this.Result == BillRetrievalResult.SUCCESS
      };
      if (this.BillId) data.bill_id = this.BillId;
      if (this.TableId) data.table_id = this.TableId;

      if (this.Result == BillRetrievalResult.SUCCESS) {
        data.bill_total_amount = this.TotalAmount;
        data.bill_outstanding_amount = this.OutstandingAmount;
        data.bill_payment_history = this.getBillPaymentHistory();
      } else {
        data.error_reason = this.Result.toString();
        data.error_detail = this.Result.toString();
      }

      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](messageId, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PayAtTableBillDetails, data, true);
    }
  }], [{
    key: "ToBillData",
    value: function ToBillData(ph) {
      if (ph.length < 1) {
        return "";
      }

      return JSON.stringify(ph);
    }
  }]);

  return BillStatusResponse;
}();
var BillRetrievalResult = {
  SUCCESS: 'SUCCESS',
  INVALID_TABLE_ID: 'INVALID_TABLE_ID',
  INVALID_BILL_ID: 'INVALID_BILL_ID',
  INVALID_OPERATOR_ID: 'INVALID_OPERATOR_ID'
};
var PaymentType = {
  CARD: 'CARD',
  CASH: 'CASH'
};
var BillPayment = function BillPayment(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BillPayment);

  this._incomingAdvice = m;
  this.BillId = this._incomingAdvice.Data["bill_id"];
  this.TableId = this._incomingAdvice.Data["table_id"];
  this.OperatorId = this._incomingAdvice.Data["operator_id"];
  this.PaymentFlowStarted = null;
  var pt = this._incomingAdvice.Data["payment_type"];
  this.PaymentType = pt; // this is when we ply the sub object "payment_details" into a purchase response for convenience.

  var purchaseMsg = new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](m.Id, "payment_details", m.Data["payment_details"], false);
  this.PurchaseResponse = new _Purchase__WEBPACK_IMPORTED_MODULE_3__["PurchaseResponse"](purchaseMsg);
  this.PurchaseAmount = this.PurchaseResponse.GetPurchaseAmount();
  this.TipAmount = this.PurchaseResponse.GetTipAmount();
  this.SurchargeAmount = this.PurchaseResponse.GetSurchargeAmount();
};
var PaymentHistoryEntry =
/*#__PURE__*/
function () {
  function PaymentHistoryEntry(paymentType, paymentSummary) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PaymentHistoryEntry);

    this.PaymentType = paymentType;
    this.PaymentSummary = paymentSummary;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PaymentHistoryEntry, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        payment_type: this.PaymentType,
        payment_summary: this.PaymentSummary
      };
    }
  }, {
    key: "GetTerminalRefId",
    value: function GetTerminalRefId() {
      return this.PaymentSummary["terminal_ref_id"];
    }
  }]);

  return PaymentHistoryEntry;
}();
var PayAtTableConfig =
/*#__PURE__*/
function () {
  function PayAtTableConfig() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PayAtTableConfig);

    this.PayAtTableEnabled = false;
    this.OperatorIdEnabled = false;
    this.SplitByAmountEnabled = false;
    this.EqualSplitEnabled = false;
    this.TableRetrievalEnabled = false;
    this.TippingEnabled = false;
    this.SummaryReportEnabled = false;
    this.LabelPayButton = '';
    this.LabelOperatorId = '';
    this.LabelTableId = ''; // 
    // <summary>
    // Fill in with operator ids that the eftpos terminal will validate against. 
    // Leave Empty to allow any operator_id through. 
    // </summary>

    this.AllowedOperatorIds = [];
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PayAtTableConfig, [{
    key: "ToMessage",
    value: function ToMessage(messageId) {
      var data = {
        "pay_at_table_enabled": this.PayAtTableEnabled,
        "operator_id_enabled": this.OperatorIdEnabled,
        "split_by_amount_enabled": this.SplitByAmountEnabled,
        "equal_split_enabled": this.EqualSplitEnabled,
        "tipping_enabled": this.TippingEnabled,
        "summary_report_enabled": this.SummaryReportEnabled,
        "pay_button_label": this.LabelPayButton,
        "operator_id_label": this.LabelOperatorId,
        "table_id_label": this.LabelTableId,
        "operator_id_list": this.AllowedOperatorIds,
        "table_retrieval_enabled": this.TableRetrievalEnabled
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](messageId, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PayAtTableSetTableConfig, data, true);
    }
  }], [{
    key: "FeatureDisableMessage",
    value: function FeatureDisableMessage(messageId) {
      var data = {
        "pay_at_table_enabled": false
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](messageId, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PayAtTableSetTableConfig, data, true);
    }
  }]);

  return PayAtTableConfig;
}(); // <summary>
// These attributes work for COM interop.
// </summary>

var GetOpenTablesResponse =
/*#__PURE__*/
function () {
  function GetOpenTablesResponse() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GetOpenTablesResponse);

    /// <summary>
    /// Your POS is required to persist some state on behalf of the Eftpos so the Eftpos can recover state.
    /// It is just a piece of string that you save against your operatorId.
    /// Whenever you're asked for OpenTables, make sure you return this piece of data if you have it.
    /// </summary>
    this.TableData = null;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GetOpenTablesResponse, [{
    key: "GetOpenTables",
    value: function GetOpenTables() {
      if (!this.TableData) {
        return [];
      }

      return JSON.parse(this.TableData);
    }
  }, {
    key: "ToMessage",
    value: function ToMessage(messageId) {
      var data = {
        tables: this.GetOpenTables()
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](messageId, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PayAtTableOpenTables, data, true);
    }
  }]);

  return GetOpenTablesResponse;
}(); // <summary>
// These attributes work for COM interop.
// </summary>

var OpenTablesEntry =
/*#__PURE__*/
function () {
  function OpenTablesEntry() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, OpenTablesEntry);

    this.TableId = null;
    this.Label = null;
    this.BillOutstandingAmount = null;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(OpenTablesEntry, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        table_id: this.TableId,
        label: this.Label,
        bill_outstanding_amount: this.BillOutstandingAmount
      };
    }
  }]);

  return OpenTablesEntry;
}(); /// <summary>
/// These attributes work for COM interop.
/// </summary>

var BillPaymentFlowEndedResponse = function BillPaymentFlowEndedResponse(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BillPaymentFlowEndedResponse);

  this.BillId = m.Data.bill_id;
  this.BillOutstandingAmount = m.Data.bill_outstanding_amount;
  this.BillTotalAmount = m.Data.bill_total_amount;
  this.OperatorId = m.Data.operator_id;
  this.TableId = m.Data.table_id;
  this.CardTotalCount = m.Data.card_total_count;
  this.CardTotalAmount = m.Data.card_total_amount;
  this.CashTotalCount = m.Data.cash_total_count;
  this.CashTotalAmount = m.Data.cash_total_amount;
};

/***/ }),

/***/ "./src/PingHelper.js":
/*!***************************!*\
  !*** ./src/PingHelper.js ***!
  \***************************/
/*! exports provided: PongHelper, PingHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PongHelper", function() { return PongHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PingHelper", function() { return PingHelper; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");




var PongHelper =
/*#__PURE__*/
function () {
  function PongHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PongHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PongHelper, null, [{
    key: "GeneratePongRessponse",
    value: function GeneratePongRessponse(ping) {
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](ping.Id, _Messages__WEBPACK_IMPORTED_MODULE_3__["Events"].Pong, null, true);
    }
  }]);

  return PongHelper;
}();
var PingHelper =
/*#__PURE__*/
function () {
  function PingHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PingHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PingHelper, null, [{
    key: "GeneratePingRequest",
    value: function GeneratePingRequest() {
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("ping"), _Messages__WEBPACK_IMPORTED_MODULE_3__["Events"].Ping, null, true);
    }
  }]);

  return PingHelper;
}();

/***/ }),

/***/ "./src/PosInfo.js":
/*!************************!*\
  !*** ./src/PosInfo.js ***!
  \************************/
/*! exports provided: SetPosInfoRequest, SetPosInfoResponse, DeviceInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SetPosInfoRequest", function() { return SetPosInfoRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SetPosInfoResponse", function() { return SetPosInfoResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceInfo", function() { return DeviceInfo; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");




var SetPosInfoRequest =
/*#__PURE__*/
function () {
  function SetPosInfoRequest(version, vendorId, libraryLanguage, libraryVersion, otherInfo) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SetPosInfoRequest);

    this._version = version;
    this._vendorId = vendorId;
    this._libraryLanguage = libraryLanguage;
    this._libraryVersion = libraryVersion;
    this._otherInfo = otherInfo;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SetPosInfoRequest, [{
    key: "toMessage",
    value: function toMessage() {
      var data = {
        pos_version: this._version,
        pos_vendor_id: this._vendorId,
        library_language: this._libraryLanguage,
        library_version: this._libraryVersion,
        other_info: this._otherInfo
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("prav"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].SetPosInfoRequest, data, true);
    }
  }]);

  return SetPosInfoRequest;
}();
var SetPosInfoResponse =
/*#__PURE__*/
function () {
  function SetPosInfoResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SetPosInfoResponse);

    this._success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
    this._m = m;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SetPosInfoResponse, [{
    key: "isSuccess",
    value: function isSuccess() {
      return this._success;
    }
  }, {
    key: "getErrorReason",
    value: function getErrorReason() {
      return this._m.Data.error_reason;
    }
  }, {
    key: "getErrorDetail",
    value: function getErrorDetail() {
      return this._m.Data.error_detail;
    }
  }, {
    key: "getResponseValueWithAttribute",
    value: function getResponseValueWithAttribute(attribute) {
      return this._m.Data[attribute];
    }
  }]);

  return SetPosInfoResponse;
}();
var DeviceInfo =
/*#__PURE__*/
function () {
  function DeviceInfo() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, DeviceInfo);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(DeviceInfo, null, [{
    key: "GetAppDeviceInfo",
    value: function GetAppDeviceInfo() {
      var deviceInfo = {};
      deviceInfo['device_system'] = navigator.userAgent; // deviceInfo.Add("device_system", Environment.OSVersion.Platform.ToString() + " " + Environment.OSVersion.Version.ToString());

      return deviceInfo;
    }
  }]);

  return DeviceInfo;
}();

/***/ }),

/***/ "./src/Preauth.js":
/*!************************!*\
  !*** ./src/Preauth.js ***!
  \************************/
/*! exports provided: PreauthEvents, AccountVerifyRequest, AccountVerifyResponse, PreauthOpenRequest, PreauthTopupRequest, PreauthPartialCancellationRequest, PreauthExtendRequest, PreauthCancelRequest, PreauthCompletionRequest, PreauthResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthEvents", function() { return PreauthEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccountVerifyRequest", function() { return AccountVerifyRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccountVerifyResponse", function() { return AccountVerifyResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthOpenRequest", function() { return PreauthOpenRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthTopupRequest", function() { return PreauthTopupRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthPartialCancellationRequest", function() { return PreauthPartialCancellationRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthExtendRequest", function() { return PreauthExtendRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthCancelRequest", function() { return PreauthCancelRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthCompletionRequest", function() { return PreauthCompletionRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthResponse", function() { return PreauthResponse; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _Purchase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Purchase */ "./src/Purchase.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");






var PreauthEvents = {
  AccountVerifyRequest: "account_verify",
  AccountVerifyResponse: "account_verify_response",
  PreauthOpenRequest: "preauth",
  PreauthOpenResponse: "preauth_response",
  PreauthTopupRequest: "preauth_topup",
  PreauthTopupResponse: "preauth_topup_response",
  PreauthExtendRequest: "preauth_extend",
  PreauthExtendResponse: "preauth_extend_response",
  PreauthPartialCancellationRequest: "preauth_partial_cancellation",
  PreauthPartialCancellationResponse: "preauth_partial_cancellation_response",
  PreauthCancellationRequest: "preauth_cancellation",
  PreauthCancellationResponse: "preauth_cancellation_response",
  PreauthCompleteRequest: "completion",
  PreauthCompleteResponse: "completion_response"
};
var AccountVerifyRequest =
/*#__PURE__*/
function () {
  function AccountVerifyRequest(posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, AccountVerifyRequest);

    this.PosRefId = posRefId;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(AccountVerifyRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prav"), PreauthEvents.AccountVerifyRequest, data, true);
    }
  }]);

  return AccountVerifyRequest;
}();
var AccountVerifyResponse = function AccountVerifyResponse(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, AccountVerifyResponse);

  this.Details = new _Purchase__WEBPACK_IMPORTED_MODULE_4__["PurchaseResponse"](m);
  this.PosRefId = this.Details.PosRefId;
  this._m = m;
};
var PreauthOpenRequest =
/*#__PURE__*/
function () {
  function PreauthOpenRequest(amountCents, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthOpenRequest);

    this.PosRefId = posRefId;
    this.PreauthAmount = amountCents;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthOpenRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_amount": this.PreauthAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prac"), PreauthEvents.PreauthOpenRequest, data, true);
    }
  }]);

  return PreauthOpenRequest;
}();
var PreauthTopupRequest =
/*#__PURE__*/
function () {
  function PreauthTopupRequest(preauthId, topupAmountCents, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthTopupRequest);

    this.PreauthId = preauthId;
    this.TopupAmount = topupAmountCents;
    this.PosRefId = posRefId;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthTopupRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_id": this.PreauthId,
        "topup_amount": this.TopupAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prtu"), PreauthEvents.PreauthTopupRequest, data, true);
    }
  }]);

  return PreauthTopupRequest;
}();
var PreauthPartialCancellationRequest =
/*#__PURE__*/
function () {
  function PreauthPartialCancellationRequest(preauthId, partialCancellationAmountCents, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthPartialCancellationRequest);

    this.PreauthId = preauthId;
    this.PartialCancellationAmount = partialCancellationAmountCents;
    this.PosRefId = posRefId;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthPartialCancellationRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_id": this.PreauthId,
        "preauth_cancel_amount": this.PartialCancellationAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prpc"), PreauthEvents.PreauthPartialCancellationRequest, data, true);
    }
  }]);

  return PreauthPartialCancellationRequest;
}();
var PreauthExtendRequest =
/*#__PURE__*/
function () {
  function PreauthExtendRequest(preauthId, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthExtendRequest);

    this.PreauthId = preauthId;
    this.PosRefId = posRefId;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthExtendRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_id": this.PreauthId
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prext"), PreauthEvents.PreauthExtendRequest, data, true);
    }
  }]);

  return PreauthExtendRequest;
}();
var PreauthCancelRequest =
/*#__PURE__*/
function () {
  function PreauthCancelRequest(preauthId, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthCancelRequest);

    this.PreauthId = preauthId;
    this.PosRefId = posRefId;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthCancelRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_id": this.PreauthId
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prac"), PreauthEvents.PreauthCancellationRequest, data, true);
    }
  }]);

  return PreauthCancelRequest;
}();
var PreauthCompletionRequest =
/*#__PURE__*/
function () {
  function PreauthCompletionRequest(preauthId, completionAmountCents, posRefId, surchargeAmount) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthCompletionRequest);

    this.PreauthId = preauthId;
    this.CompletionAmount = completionAmountCents;
    this.PosRefId = posRefId;
    this.SurchargeAmount = surchargeAmount;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthCompletionRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_id": this.PreauthId,
        "completion_amount": this.CompletionAmount,
        "surcharge_amount": this.SurchargeAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prac"), PreauthEvents.PreauthCompleteRequest, data, true);
    }
  }]);

  return PreauthCompletionRequest;
}();
var PreauthResponse =
/*#__PURE__*/
function () {
  function PreauthResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthResponse);

    this.PreauthId = m.Data["preauth_id"];
    this.Details = new _Purchase__WEBPACK_IMPORTED_MODULE_4__["PurchaseResponse"](m);
    this.PosRefId = this.Details.PosRefId;
    this._m = m;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthResponse, [{
    key: "GetBalanceAmount",
    value: function GetBalanceAmount() {
      var txType = this._m.Data["transaction_type"];

      switch (txType) {
        case "PRE-AUTH":
          return this._m.Data["preauth_amount"];

        case "TOPUP":
          return this._m.Data["balance_amount"];

        case "CANCEL":
          // PARTIAL CANCELLATION
          return this._m.Data["balance_amount"];

        case "PRE-AUTH EXT":
          return this._m.Data["balance_amount"];

        case "PCOMP":
          return 0;
        // Balance is 0 after completion

        case "PRE-AUTH CANCEL":
          return 0;
        // Balance is 0 after cancellation

        default:
          return 0;
      }
    }
  }, {
    key: "GetPreviousBalanceAmount",
    value: function GetPreviousBalanceAmount() {
      var txType = this._m.Data["transaction_type"];

      switch (txType) {
        case "PRE-AUTH":
          return 0;

        case "TOPUP":
          return this._m.Data["existing_preauth_amount"];

        case "CANCEL":
          // PARTIAL CANCELLATION
          return this._m.Data["existing_preauth_amount"];

        case "PRE-AUTH EXT":
          return this._m.Data["existing_preauth_amount"];

        case "PCOMP":
          // THIS IS TECHNICALLY NOT CORRECT WHEN COMPLETION HAPPENS FOR A PARTIAL AMOUNT.
          // BUT UNFORTUNATELY, THIS RESPONSE DOES NOT CONTAIN "existing_preauth_amount".
          // SO "completion_amount" IS THE CLOSEST WE HAVE.
          return this._m.Data["completion_amount"];

        case "PRE-AUTH CANCEL":
          return this._m.Data["preauth_amount"];

        default:
          return 0;
      }
    }
  }, {
    key: "GetCompletionAmount",
    value: function GetCompletionAmount() {
      var txType = this._m.Data["transaction_type"];

      switch (txType) {
        case "PCOMP":
          return this._m.Data["completion_amount"];

        default:
          return 0;
      }
    }
  }, {
    key: "GetSurchargeAmount",
    value: function GetSurchargeAmount() {
      var txType = this._m.Data["transaction_type"];

      switch (txType) {
        case "PCOMP":
          return this._m.Data["surcharge_amount"];

        default:
          return 0;
      }
    }
  }, {
    key: "WasMerchantReceiptPrinted",
    value: function WasMerchantReceiptPrinted() {
      return this._m.Data["merchant_receipt_printed"];
    }
  }, {
    key: "WasCustomerReceiptPrinted",
    value: function WasCustomerReceiptPrinted() {
      return this._m.Data["customer_receipt_printed"];
    }
  }]);

  return PreauthResponse;
}();

/***/ }),

/***/ "./src/Printing.js":
/*!*************************!*\
  !*** ./src/Printing.js ***!
  \*************************/
/*! exports provided: PrintingRequest, PrintingResponse, Printer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrintingRequest", function() { return PrintingRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrintingResponse", function() { return PrintingResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Printer", function() { return Printer; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");




var PrintingRequest =
/*#__PURE__*/
function () {
  function PrintingRequest(key, payload) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PrintingRequest);

    this._key = key;
    this._payload = payload;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PrintingRequest, [{
    key: "toMessage",
    value: function toMessage() {
      var data = {
        "key": this._key,
        "payload": this._payload
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("print"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PrintingRequest, data, true);
    }
  }]);

  return PrintingRequest;
}();
var PrintingResponse =
/*#__PURE__*/
function () {
  function PrintingResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PrintingResponse);

    this._success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
    this._m = m;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PrintingResponse, [{
    key: "isSuccess",
    value: function isSuccess() {
      return this._success;
    }
  }, {
    key: "getErrorReason",
    value: function getErrorReason() {
      return this._m.Data.error_reason;
    }
  }, {
    key: "getErrorDetail",
    value: function getErrorDetail() {
      return this._m.Data.error_detail;
    }
  }, {
    key: "getResponseValueWithAttribute",
    value: function getResponseValueWithAttribute(attribute) {
      return this._m.Data[attribute];
    }
  }]);

  return PrintingResponse;
}();
/**
 * This class is a mock printer for the terminal to print Receipts
 */

var Printer =
/*#__PURE__*/
function () {
  function Printer(element) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Printer);

    this.buffer = [];
    this.element = element;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Printer, [{
    key: "print",
    value: function print() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this.buffer.push(args.join(' '));

      this._render();
    }
  }, {
    key: "_render",
    value: function _render() {
      this.element.innerText = this.buffer.join("\n\n \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/ \n\n");
      this.element.scrollTop = this.element.scrollHeight;
    }
  }, {
    key: "Clear",
    value: function Clear() {
      this.buffer = [];

      this._render();
    }
  }]);

  return Printer;
}();

/***/ }),

/***/ "./src/Purchase.js":
/*!*************************!*\
  !*** ./src/Purchase.js ***!
  \*************************/
/*! exports provided: PurchaseRequest, PurchaseResponse, CancelTransactionRequest, CancelTransactionResponse, GetLastTransactionRequest, GetLastTransactionResponse, RefundRequest, RefundResponse, SignatureRequired, SignatureDecline, SignatureAccept, MotoPurchaseRequest, MotoPurchaseResponse, PhoneForAuthRequired, AuthCodeAdvice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PurchaseRequest", function() { return PurchaseRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PurchaseResponse", function() { return PurchaseResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancelTransactionRequest", function() { return CancelTransactionRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancelTransactionResponse", function() { return CancelTransactionResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetLastTransactionRequest", function() { return GetLastTransactionRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetLastTransactionResponse", function() { return GetLastTransactionResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RefundRequest", function() { return RefundRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RefundResponse", function() { return RefundResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignatureRequired", function() { return SignatureRequired; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignatureDecline", function() { return SignatureDecline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignatureAccept", function() { return SignatureAccept; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MotoPurchaseRequest", function() { return MotoPurchaseRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MotoPurchaseResponse", function() { return MotoPurchaseResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhoneForAuthRequired", function() { return PhoneForAuthRequired; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthCodeAdvice", function() { return AuthCodeAdvice; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");





var PurchaseRequest =
/*#__PURE__*/
function () {
  function PurchaseRequest(amountCents, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PurchaseRequest);

    this.PosRefId = posRefId;
    this.PurchaseAmount = amountCents;
    this.TipAmount = 0;
    this.CashoutAmount = 0;
    this.PromptForCashout = false;
    this.SurchargeAmount = 0;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["TransactionOptions"](); // Library Backwards Compatibility

    this.Id = posRefId;
    this.AmountCents = amountCents;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PurchaseRequest, [{
    key: "AmountSummary",
    value: function AmountSummary() {
      return "Purchase: ".concat((this.PurchaseAmount / 100.0).toFixed(2), "; \n            Tip: ").concat((this.TipAmount / 100.0).toFixed(2), "; \n            Cashout: ").concat((this.CashoutAmount / 100.0).toFixed(2), ";");
    }
  }, {
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        pos_ref_id: this.PosRefId,
        purchase_amount: this.PurchaseAmount,
        tip_amount: this.TipAmount,
        cash_amount: this.CashoutAmount,
        prompt_for_cashout: this.PromptForCashout,
        surcharge_amount: this.SurchargeAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("prchs"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PurchaseRequest, data, true);
    }
  }]);

  return PurchaseRequest;
}();
var PurchaseResponse =
/*#__PURE__*/
function () {
  function PurchaseResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PurchaseResponse);

    this._m = m;
    this.RequestId = m.Id;
    this.PosRefId = m.Data.pos_ref_id;
    this.SchemeName = m.Data.scheme_name;
    this.SchemeAppName = m.Data.scheme_name;
    this.Success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PurchaseResponse, [{
    key: "GetRRN",
    value: function GetRRN() {
      return this._m.Data.rrn;
    }
  }, {
    key: "GetPurchaseAmount",
    value: function GetPurchaseAmount() {
      return this._m.Data.purchase_amount;
    }
  }, {
    key: "GetTipAmount",
    value: function GetTipAmount() {
      return this._m.Data.tip_amount || 0;
    }
  }, {
    key: "GetSurchargeAmount",
    value: function GetSurchargeAmount() {
      return this._m.Data.surcharge_amount || 0;
    }
  }, {
    key: "GetCashoutAmount",
    value: function GetCashoutAmount() {
      return this._m.Data.cash_amount;
    }
  }, {
    key: "GetBankNonCashAmount",
    value: function GetBankNonCashAmount() {
      return this._m.Data.bank_noncash_amount;
    }
  }, {
    key: "GetBankCashAmount",
    value: function GetBankCashAmount() {
      return this._m.Data.bank_cash_amount;
    }
  }, {
    key: "GetCustomerReceipt",
    value: function GetCustomerReceipt() {
      return this._m.Data.customer_receipt || "";
    }
  }, {
    key: "GetMerchantReceipt",
    value: function GetMerchantReceipt() {
      return this._m.Data.merchant_receipt || "";
    }
  }, {
    key: "GetResponseText",
    value: function GetResponseText() {
      return this._m.Data.host_response_text || "";
    }
  }, {
    key: "GetResponseCode",
    value: function GetResponseCode() {
      return this._m.Data.host_response_code;
    }
  }, {
    key: "GetTerminalReferenceId",
    value: function GetTerminalReferenceId() {
      return this._m.Data.terminal_ref_id;
    }
  }, {
    key: "GetCardEntry",
    value: function GetCardEntry() {
      return this._m.Data.card_entry;
    }
  }, {
    key: "GetAccountType",
    value: function GetAccountType() {
      return this._m.Data.account_type;
    }
  }, {
    key: "GetAuthCode",
    value: function GetAuthCode() {
      return this._m.Data.auth_code;
    }
  }, {
    key: "GetBankDate",
    value: function GetBankDate() {
      return this._m.Data.bank_date;
    }
  }, {
    key: "GetBankTime",
    value: function GetBankTime() {
      return this._m.Data.bank_time;
    }
  }, {
    key: "GetMaskedPan",
    value: function GetMaskedPan() {
      return this._m.Data.masked_pan;
    }
  }, {
    key: "GetTerminalId",
    value: function GetTerminalId() {
      return this._m.Data.terminal_id;
    }
  }, {
    key: "WasMerchantReceiptPrinted",
    value: function WasMerchantReceiptPrinted() {
      return this._m.Data.merchant_receipt_printed;
    }
  }, {
    key: "WasCustomerReceiptPrinted",
    value: function WasCustomerReceiptPrinted() {
      return this._m.Data.customer_receipt_printed;
    }
  }, {
    key: "GetSettlementDate",
    value: function GetSettlementDate() {
      //"bank_settlement_date":"20042018"
      var dateStr = this._m.Data.bank_settlement_date;
      if (!dateStr) return null;
      return _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"].ParseBankDate(dateStr);
    }
  }, {
    key: "GetResponseValue",
    value: function GetResponseValue(attribute) {
      return this._m.Data[attribute];
    }
  }, {
    key: "ToPaymentSummary",
    value: function ToPaymentSummary() {
      return {
        account_type: this.GetAccountType(),
        auth_code: this.GetAuthCode(),
        bank_date: this.GetBankDate(),
        bank_time: this.GetBankTime(),
        host_response_code: this.GetResponseCode(),
        host_response_text: this.GetResponseText(),
        masked_pan: this.GetMaskedPan(),
        purchase_amount: this.GetPurchaseAmount(),
        rrn: this.GetRRN(),
        scheme_name: this.SchemeName,
        terminal_id: this.GetTerminalId(),
        terminal_ref_id: this.GetTerminalReferenceId(),
        tip_amount: this.GetTipAmount(),
        surcharge_amount: this.GetSurchargeAmount()
      };
    }
  }]);

  return PurchaseResponse;
}();
var CancelTransactionRequest =
/*#__PURE__*/
function () {
  function CancelTransactionRequest() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, CancelTransactionRequest);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(CancelTransactionRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("ctx"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].CancelTransactionRequest, null, true);
    }
  }]);

  return CancelTransactionRequest;
}();
var CancelTransactionResponse =
/*#__PURE__*/
function () {
  function CancelTransactionResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, CancelTransactionResponse);

    this._m = m;
    this.PosRefId = this._m.Data.pos_ref_id;
    this.Success = this._m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(CancelTransactionResponse, [{
    key: "GetErrorReason",
    value: function GetErrorReason() {
      return this._m.Data.error_reason;
    }
  }, {
    key: "GetErrorDetail",
    value: function GetErrorDetail() {
      return this._m.Data.error_detail;
    }
  }, {
    key: "WasTxnPastPointOfNoReturn",
    value: function WasTxnPastPointOfNoReturn() {
      return this._m.GetError().startsWith("TXN_PAST_POINT_OF_NO_RETURN");
    }
  }, {
    key: "GetResponseValueWithAttribute",
    value: function GetResponseValueWithAttribute(attribute) {
      return this._m.Data[attribute];
    }
  }]);

  return CancelTransactionResponse;
}();
var GetLastTransactionRequest =
/*#__PURE__*/
function () {
  function GetLastTransactionRequest() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GetLastTransactionRequest);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GetLastTransactionRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("glt"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].GetLastTransactionRequest, null, true);
    }
  }]);

  return GetLastTransactionRequest;
}();
var GetLastTransactionResponse =
/*#__PURE__*/
function () {
  function GetLastTransactionResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GetLastTransactionResponse);

    this._m = m;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GetLastTransactionResponse, [{
    key: "WasRetrievedSuccessfully",
    value: function WasRetrievedSuccessfully() {
      // We can't rely on checking "success" flag or "error" fields here,
      // as retrieval may be successful, but the retrieved transaction was a fail.
      // So we check if we got back an ResponseCode.
      // (as opposed to say an operation_in_progress_error)
      return !!this.GetResponseCode();
    }
  }, {
    key: "WasTimeOutOfSyncError",
    value: function WasTimeOutOfSyncError() {
      return this._m.GetError().startsWith("TIME_OUT_OF_SYNC");
    }
  }, {
    key: "WasOperationInProgressError",
    value: function WasOperationInProgressError() {
      return this._m.GetError().startsWith("OPERATION_IN_PROGRESS");
    }
  }, {
    key: "IsWaitingForSignatureResponse",
    value: function IsWaitingForSignatureResponse() {
      return this._m.GetError().startsWith("OPERATION_IN_PROGRESS_AWAITING_SIGNATURE");
    }
  }, {
    key: "IsWaitingForAuthCode",
    value: function IsWaitingForAuthCode() {
      return this._m.GetError().startsWith("OPERATION_IN_PROGRESS_AWAITING_PHONE_AUTH_CODE");
    }
  }, {
    key: "IsStillInProgress",
    value: function IsStillInProgress(posRefId) {
      return this.WasOperationInProgressError() && (this.GetPosRefId() == posRefId || this.GetPosRefId() == null);
    }
  }, {
    key: "GetSuccessState",
    value: function GetSuccessState() {
      return this._m.GetSuccessState();
    }
  }, {
    key: "WasSuccessfulTx",
    value: function WasSuccessfulTx() {
      return this._m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
    }
  }, {
    key: "GetTxType",
    value: function GetTxType() {
      return this._m.Data.transaction_type;
    }
  }, {
    key: "GetPosRefId",
    value: function GetPosRefId() {
      return this._m.Data.pos_ref_id;
    }
  }, {
    key: "GetBankNonCashAmount",
    value: function GetBankNonCashAmount() {
      return this._m.Data.bank_noncash_amount;
    }
  }, {
    key: "GetSchemeApp",
    value: function GetSchemeApp() {
      return this._m.Data.scheme_name;
    }
  }, {
    key: "GetSchemeName",
    value: function GetSchemeName() {
      return this._m.Data.scheme_name;
    }
  }, {
    key: "GetAmount",
    value: function GetAmount() {
      return this._m.Data.amount_purchase;
    }
  }, {
    key: "GetTransactionAmount",
    value: function GetTransactionAmount() {
      return this._m.Data.amount_transaction_type;
    }
  }, {
    key: "GetBankDateTimeString",
    value: function GetBankDateTimeString() {
      var ds = this._m.Data.bank_date + this._m.Data.bank_time;
      return ds;
    }
  }, {
    key: "GetRRN",
    value: function GetRRN() {
      return this._m.Data.rrn;
    }
  }, {
    key: "GetResponseText",
    value: function GetResponseText() {
      return this._m.Data.host_response_text | "";
    }
  }, {
    key: "GetResponseCode",
    value: function GetResponseCode() {
      return this._m.Data.host_response_code;
    } // <summary>
    // There is a bug, VSV-920, whereby the customer_receipt is missing from a glt response.
    // The current recommendation is to use the merchant receipt in place of it if required.
    // This method modifies the underlying incoming message data by copying
    // the merchant receipt into the customer receipt only if there 
    // is a merchant_receipt and there is not a customer_receipt.   
    // </summary>

  }, {
    key: "CopyMerchantReceiptToCustomerReceipt",
    value: function CopyMerchantReceiptToCustomerReceipt() {
      var cr = this._m.Data.customer_receipt;
      var mr = this._m.Data.merchant_receipt;

      if (mr != "" && !cr) {
        this._m.Data.customer_receipt = mr;
      }
    }
  }]);

  return GetLastTransactionResponse;
}();
var RefundRequest =
/*#__PURE__*/
function () {
  function RefundRequest(amountCents, posRefId, suppressMerchantPassword) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, RefundRequest);

    this.AmountCents = amountCents;
    this.Id = _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("refund");
    this.PosRefId = posRefId;
    this.SuppressMerchantPassword = suppressMerchantPassword;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(RefundRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        refund_amount: this.AmountCents,
        pos_ref_id: this.PosRefId,
        suppress_merchant_password: this.SuppressMerchantPassword
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("refund"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].RefundRequest, data, true);
    }
  }]);

  return RefundRequest;
}();
var RefundResponse =
/*#__PURE__*/
function () {
  function RefundResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, RefundResponse);

    this._m = m;
    this.RequestId = m.Id;
    this.PosRefId = m.Data.pos_ref_id;
    this.SchemeName = m.Data.scheme_name;
    this.SchemeAppName = m.Data.scheme_name;
    this.Success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(RefundResponse, [{
    key: "GetRefundAmount",
    value: function GetRefundAmount() {
      return this._m.Data.refund_amount;
    }
  }, {
    key: "GetRRN",
    value: function GetRRN() {
      return this._m.Data.rrn;
    }
  }, {
    key: "GetCustomerReceipt",
    value: function GetCustomerReceipt() {
      return this._m.Data.customer_receipt || "";
    }
  }, {
    key: "GetMerchantReceipt",
    value: function GetMerchantReceipt() {
      return this._m.Data.merchant_receipt;
    }
  }, {
    key: "GetResponseText",
    value: function GetResponseText() {
      return this._m.Data.host_response_text || "";
    }
  }, {
    key: "GetResponseCode",
    value: function GetResponseCode() {
      return this._m.Data.host_response_code || "";
    }
  }, {
    key: "GetTerminalReferenceId",
    value: function GetTerminalReferenceId() {
      return this._m.Data.terminal_ref_id || "";
    }
  }, {
    key: "GetCardEntry",
    value: function GetCardEntry() {
      return this._m.Data.card_entry || "";
    }
  }, {
    key: "GetAccountType",
    value: function GetAccountType() {
      return this._m.Data.account_type || "";
    }
  }, {
    key: "GetAuthCode",
    value: function GetAuthCode() {
      return this._m.Data.auth_code || "";
    }
  }, {
    key: "GetBankDate",
    value: function GetBankDate() {
      return this._m.Data.bank_date || "";
    }
  }, {
    key: "GetBankTime",
    value: function GetBankTime() {
      return this._m.Data.bank_time || "";
    }
  }, {
    key: "GetMaskedPan",
    value: function GetMaskedPan() {
      return this._m.Data.masked_pan || "";
    }
  }, {
    key: "GetTerminalId",
    value: function GetTerminalId() {
      return this._m.Data.terminal_id || "";
    }
  }, {
    key: "WasMerchantReceiptPrinted",
    value: function WasMerchantReceiptPrinted() {
      return this._m.Data.merchant_receipt_printed;
    }
  }, {
    key: "WasCustomerReceiptPrinted",
    value: function WasCustomerReceiptPrinted() {
      return this._m.Data.customer_receipt_printed;
    }
  }, {
    key: "GetSettlementDate",
    value: function GetSettlementDate() {
      //"bank_settlement_date":"20042018"
      var dateStr = this._m.Data.bank_settlement_date;
      if (!dateStr) return null;
      return _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"].ParseBankDate(dateStr);
    }
  }, {
    key: "GetResponseValue",
    value: function GetResponseValue(attribute) {
      return this._m.Data[attribute];
    }
  }]);

  return RefundResponse;
}();
var SignatureRequired =
/*#__PURE__*/
function () {
  function SignatureRequired(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SignatureRequired);

    this.RequestId = m.Id;
    this.PosRefId = m.Data.pos_ref_id;
    this._receiptToSign = m.Data.merchant_receipt;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SignatureRequired, [{
    key: "SignatureRequired",
    value: function SignatureRequired(posRefId, requestId, receiptToSign) {
      this.RequestId = requestId;
      this.PosRefId = posRefId;
      this._receiptToSign = receiptToSign;
    }
  }, {
    key: "GetMerchantReceipt",
    value: function GetMerchantReceipt() {
      return this._receiptToSign;
    }
  }]);

  return SignatureRequired;
}();
var SignatureDecline =
/*#__PURE__*/
function () {
  function SignatureDecline(posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SignatureDecline);

    this.PosRefId = posRefId;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SignatureDecline, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        pos_ref_id: this.PosRefId
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("sigdec"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].SignatureDeclined, data, true);
    }
  }]);

  return SignatureDecline;
}();
var SignatureAccept =
/*#__PURE__*/
function () {
  function SignatureAccept(posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SignatureAccept);

    this.PosRefId = posRefId;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SignatureAccept, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        pos_ref_id: this.PosRefId
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("sigacc"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].SignatureAccepted, data, true);
    }
  }]);

  return SignatureAccept;
}();
var MotoPurchaseRequest =
/*#__PURE__*/
function () {
  function MotoPurchaseRequest(amountCents, posRefId, surchargeAmount) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, MotoPurchaseRequest);

    this.PosRefId = posRefId;
    this.PurchaseAmount = amountCents;
    this.SurchargeAmount = surchargeAmount;
    this.SuppressMerchantPassword = false;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(MotoPurchaseRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        pos_ref_id: this.PosRefId,
        purchase_amount: this.PurchaseAmount,
        surcharge_amount: this.SurchargeAmount,
        suppress_merchant_password: this.SuppressMerchantPassword
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("moto"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].MotoPurchaseRequest, data, true);
    }
  }]);

  return MotoPurchaseRequest;
}();
var MotoPurchaseResponse = function MotoPurchaseResponse(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, MotoPurchaseResponse);

  this.PurchaseResponse = new PurchaseResponse(m);
  this.PosRefId = PurchaseResponse.PosRefId;
};
var PhoneForAuthRequired =
/*#__PURE__*/
function () {
  function PhoneForAuthRequired() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PhoneForAuthRequired);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 4) {
      this.PosRefId = args[0];
      this.RequestId = args[1];
      this._phoneNumber = args[2];
      this._merchantId = args[3];
    } else if (args.length === 1) {
      this.RequestId = args[0].Id;
      this.PosRefId = args[0].Data.pos_ref_id;
      this._phoneNumber = args[0].Data.auth_centre_phone_number;
      this._merchantId = args[0].Data.merchant_id;
    } else {
      throw new Error('Invalid call sig for Phone auth required class');
    }
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PhoneForAuthRequired, [{
    key: "GetPhoneNumber",
    value: function GetPhoneNumber() {
      return this._phoneNumber;
    }
  }, {
    key: "GetMerchantId",
    value: function GetMerchantId() {
      return this._merchantId;
    }
  }]);

  return PhoneForAuthRequired;
}();
var AuthCodeAdvice =
/*#__PURE__*/
function () {
  function AuthCodeAdvice(posRefId, authCode) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, AuthCodeAdvice);

    this.PosRefId = posRefId;
    this.AuthCode = authCode;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(AuthCodeAdvice, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        pos_ref_id: this.PosRefId,
        auth_code: this.AuthCode
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("authad"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].AuthCodeAdvice, data, true);
    }
  }]);

  return AuthCodeAdvice;
}();

/***/ }),

/***/ "./src/PurchaseHelper.js":
/*!*******************************!*\
  !*** ./src/PurchaseHelper.js ***!
  \*******************************/
/*! exports provided: PurchaseHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PurchaseHelper", function() { return PurchaseHelper; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Purchase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Purchase */ "./src/Purchase.js");



var PurchaseHelper =
/*#__PURE__*/
function () {
  function PurchaseHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PurchaseHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PurchaseHelper, null, [{
    key: "CreatePurchaseRequest",
    value: function CreatePurchaseRequest(amountCents, purchaseId) {
      return new _Purchase__WEBPACK_IMPORTED_MODULE_2__["PurchaseRequest"](amountCents, purchaseId);
    }
  }, {
    key: "CreatePurchaseRequestV2",
    value: function CreatePurchaseRequestV2(posRefId, purchaseAmount, tipAmount, cashoutAmount, promptForCashout, surchargeAmount) {
      var pr = Object.assign(new _Purchase__WEBPACK_IMPORTED_MODULE_2__["PurchaseRequest"](purchaseAmount, posRefId), {
        CashoutAmount: cashoutAmount,
        TipAmount: tipAmount,
        PromptForCashout: promptForCashout,
        SurchargeAmount: surchargeAmount
      });
      return pr;
    }
  }, {
    key: "CreateRefundRequest",
    value: function CreateRefundRequest(amountCents, purchaseId, suppressMerchantPassword) {
      return new _Purchase__WEBPACK_IMPORTED_MODULE_2__["RefundRequest"](amountCents, purchaseId, suppressMerchantPassword);
    }
  }]);

  return PurchaseHelper;
}();

/***/ }),

/***/ "./src/RequestIdHelper.js":
/*!********************************!*\
  !*** ./src/RequestIdHelper.js ***!
  \********************************/
/*! exports provided: RequestIdHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RequestIdHelper", function() { return RequestIdHelper; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);


var __RequestIdHelperCounter = 1;
var RequestIdHelper =
/*#__PURE__*/
function () {
  function RequestIdHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, RequestIdHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(RequestIdHelper, null, [{
    key: "Id",
    value: function Id(prefix) {
      return prefix + __RequestIdHelperCounter++;
    }
  }]);

  return RequestIdHelper;
}();

/***/ }),

/***/ "./src/Secrets.js":
/*!************************!*\
  !*** ./src/Secrets.js ***!
  \************************/
/*! exports provided: Secrets */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Secrets", function() { return Secrets; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);


var Secrets =
/*#__PURE__*/
function () {
  function Secrets(encKey, hmacKey) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Secrets);

    this.EncKey = encKey;
    this.HmacKey = hmacKey;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Secrets, null, [{
    key: "save",
    value: function save(EncKey, HmacKey) {
      localStorage.setItem('EncKey', EncKey);
      localStorage.setItem('HmacKey', HmacKey);
    }
  }, {
    key: "restore",
    value: function restore() {
      return new Secrets(localStorage.getItem('EncKey'), localStorage.getItem('HmacKey'));
    }
  }, {
    key: "isSaved",
    value: function isSaved() {
      return localStorage.getItem('EncKey') && localStorage.getItem('HmacKey');
    }
  }, {
    key: "Reset",
    value: function Reset() {
      localStorage.removeItem('EncKey');
      localStorage.removeItem('HmacKey');
    }
  }]);

  return Secrets;
}();

/***/ }),

/***/ "./src/Service/DeviceService.js":
/*!**************************************!*\
  !*** ./src/Service/DeviceService.js ***!
  \**************************************/
/*! exports provided: DeviceAddressStatus, DeviceAddressResponseCode, HttpStatusCode, DeviceAddressService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceAddressStatus", function() { return DeviceAddressStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceAddressResponseCode", function() { return DeviceAddressResponseCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpStatusCode", function() { return HttpStatusCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceAddressService", function() { return DeviceAddressService; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);




var DeviceAddressStatus =
/*#__PURE__*/
function () {
  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(DeviceAddressStatus, [{
    key: "Address",
    get: function get() {
      if (this.UseSecureWebSockets) {
        return this.fqdn;
      } else {
        return this.ip;
      }
    },
    set: function set(address) {
      if (this.UseSecureWebSockets) {
        this.fqdn = addreses;
      } else {
        this.ip = address;
      }
    }
  }]);

  function DeviceAddressStatus(useSecureWebSockets) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, DeviceAddressStatus);

    this.UseSecureWebSockets = useSecureWebSockets;
    this.ip = null;
    this.fqdn = null;
    this.LastUpdated = null;
    this.DeviceAddressResponseCode = null;
    this.ResponseStatusDescription = null;
    this.ResponseMessage = null;
  }

  return DeviceAddressStatus;
}();
var DeviceAddressResponseCode = {
  SUCCESS: 'SUCCESS',
  INVALID_SERIAL_NUMBER: 'INVALID_SERIAL_NUMBER',
  ADDRESS_NOT_CHANGED: 'ADDRESS_NOT_CHANGED',
  SERIAL_NUMBER_NOT_CHANGED: 'SERIAL_NUMBER_NOT_CHANGED',
  DEVICE_SERVICE_ERROR: 'DEVICE_SERVICE_ERROR'
};
var HttpStatusCode = {
  NotFound: 404
};
var DeviceAddressService =
/*#__PURE__*/
function () {
  function DeviceAddressService() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, DeviceAddressService);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(DeviceAddressService, [{
    key: "RetrieveService",
    // RetrieveService(serialNumber, apiKey = 'spi-sample-pos1', acquirerCode, useSecureWebSockets, isTestMode)
    value: function () {
      var _RetrieveService = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(serialNumber) {
        var apiKey,
            acquirerCode,
            isSecureConnection,
            isTestMode,
            CONNECTION_TIMEOUT,
            path,
            deviceAddressUri,
            _args = arguments;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                apiKey = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'spi-sample-pos1';
                acquirerCode = _args.length > 2 ? _args[2] : undefined;
                isSecureConnection = _args.length > 3 ? _args[3] : undefined;
                isTestMode = _args.length > 4 ? _args[4] : undefined;
                CONNECTION_TIMEOUT = 8000;
                path = isSecureConnection ? 'fqdn' : 'ip';
                deviceAddressUri = isTestMode ? "https://device-address-api-sb.".concat(acquirerCode, ".msp.assemblypayments.com/v1/").concat(serialNumber, "/").concat(path) : "https://device-address-api.".concat(acquirerCode, ".msp.assemblypayments.com/v1/").concat(serialNumber, "/").concat(path);
                return _context.abrupt("return", Promise.race([fetch(deviceAddressUri, {
                  method: 'GET',
                  headers: {
                    'ASM-MSP-DEVICE-ADDRESS-API-KEY': apiKey
                  }
                }), new Promise(function (_, reject) {
                  return setTimeout(function () {
                    return reject(new Error('Timeout while trying to retrieve IP address'));
                  }, CONNECTION_TIMEOUT);
                })]));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function RetrieveService(_x) {
        return _RetrieveService.apply(this, arguments);
      }

      return RetrieveService;
    }()
  }]);

  return DeviceAddressService;
}();

/***/ }),

/***/ "./src/Settlement.js":
/*!***************************!*\
  !*** ./src/Settlement.js ***!
  \***************************/
/*! exports provided: SettleRequest, Settlement, SchemeSettlementEntry, SettlementEnquiryRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettleRequest", function() { return SettleRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Settlement", function() { return Settlement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SchemeSettlementEntry", function() { return SchemeSettlementEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettlementEnquiryRequest", function() { return SettlementEnquiryRequest; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");




var SettleRequest =
/*#__PURE__*/
function () {
  function SettleRequest(id) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SettleRequest);

    this.Id = id;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SettleRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {};
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = false;
      this.Config.EnabledSignatureFlowOnEftpos = false;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](this.Id, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].SettleRequest, data, true);
    }
  }]);

  return SettleRequest;
}();
var Settlement =
/*#__PURE__*/
function () {
  function Settlement(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Settlement);

    this.RequestId = m.Id;
    this._m = m;
    this.Success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Settlement, [{
    key: "GetSettleByAcquirerCount",
    value: function GetSettleByAcquirerCount() {
      return this._m.Data.accumulated_settle_by_acquirer_count;
    }
  }, {
    key: "GetSettleByAcquirerValue",
    value: function GetSettleByAcquirerValue() {
      return this._m.Data.accumulated_settle_by_acquirer_value;
    }
  }, {
    key: "GetTotalCount",
    value: function GetTotalCount() {
      return this._m.Data.accumulated_total_count;
    }
  }, {
    key: "GetTotalValue",
    value: function GetTotalValue() {
      return this._m.Data.accumulated_total_value;
    }
  }, {
    key: "GetPeriodStartTime",
    value: function GetPeriodStartTime() {
      var timeStr = this._m.Data.settlement_period_start_time; // "05:00"

      var dateStr = this._m.Data.settlement_period_start_date; // "05Oct17"

      return _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"].ParseBankDateTimeStr(dateStr, timeStr);
    }
  }, {
    key: "GetPeriodEndTime",
    value: function GetPeriodEndTime() {
      var timeStr = this._m.Data.settlement_period_end_time; // "05:00"

      var dateStr = this._m.Data.settlement_period_end_date; // "05Oct17"

      return _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"].ParseBankDateTimeStr(dateStr, timeStr);
    }
  }, {
    key: "GetTriggeredTime",
    value: function GetTriggeredTime() {
      var timeStr = this._m.Data.settlement_triggered_time; // "05:00:45"

      var dateStr = this._m.Data.settlement_triggered_date; // "05Oct17"

      return _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"].ParseBankDateTimeStr(dateStr, timeStr);
    }
  }, {
    key: "GetResponseText",
    value: function GetResponseText() {
      return this._m.Data.host_response_text;
    }
  }, {
    key: "GetReceipt",
    value: function GetReceipt() {
      return this._m.Data.merchant_receipt;
    }
  }, {
    key: "GetTransactionRange",
    value: function GetTransactionRange() {
      return this._m.Data.transaction_range;
    }
  }, {
    key: "GetTerminalId",
    value: function GetTerminalId() {
      return this._m.Data.terminal_id;
    }
  }, {
    key: "WasMerchantReceiptPrinted",
    value: function WasMerchantReceiptPrinted() {
      return this._m.Data.merchant_receipt_printed;
    }
  }, {
    key: "GetSchemeSettlementEntries",
    value: function GetSchemeSettlementEntries() {
      var schemes = this._m.Data.schemes;
      if (!schemes) return [];
      return schemes.map(function (scheme) {
        return new SchemeSettlementEntry(scheme);
      });
    }
  }]);

  return Settlement;
}();
var SchemeSettlementEntry =
/*#__PURE__*/
function () {
  // SchemeSettlementEntry(string schemeName, bool settleByAcquirer, int totalCount, int totalValue)
  // SchemeSettlementEntry(Object schemeObj)
  function SchemeSettlementEntry() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SchemeSettlementEntry);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1) {
      this.SchemeName = args[0].scheme_name;
      this.SettleByAcquirer = args[0].settle_by_acquirer.toLowerCase() == "yes";
      this.TotalValue = parseInt(args[0].total_value, 10);
      this.TotalCount = parseInt(args[0].total_count, 10);
    } else if (args.length === 4) {
      this.SchemeName = args[0];
      this.SettleByAcquirer = args[1];
      this.TotalCount = args[2];
      this.TotalValue = args[3];
    }
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SchemeSettlementEntry, [{
    key: "ToString",
    value: function ToString() {
      return "SchemeName: ".concat(this.SchemeName, ", SettleByAcquirer: ").concat(this.SettleByAcquirer, ", TotalCount: ").concat(this.TotalCount, ", TotalValue: ").concat(this.TotalValue);
    }
  }]);

  return SchemeSettlementEntry;
}();
var SettlementEnquiryRequest =
/*#__PURE__*/
function () {
  function SettlementEnquiryRequest(id) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SettlementEnquiryRequest);

    this.Id = id;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SettlementEnquiryRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {};
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = false;
      this.Config.EnabledSignatureFlowOnEftpos = false;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](this.Id, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].SettlementEnquiryRequest, data, true);
    }
  }]);

  return SettlementEnquiryRequest;
}();

/***/ }),

/***/ "./src/Spi.js":
/*!********************!*\
  !*** ./src/Spi.js ***!
  \********************/
/*! exports provided: Spi, SPI_VERSION */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Spi", function() { return Spi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPI_VERSION", function() { return SPI_VERSION; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony import */ var _PairingHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PairingHelper */ "./src/PairingHelper.js");
/* harmony import */ var _Connection__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Connection */ "./src/Connection.js");
/* harmony import */ var _SpiPayAtTable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SpiPayAtTable */ "./src/SpiPayAtTable.js");
/* harmony import */ var _PayAtTable__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./PayAtTable */ "./src/PayAtTable.js");
/* harmony import */ var _SpiPreauth__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./SpiPreauth */ "./src/SpiPreauth.js");
/* harmony import */ var _Cashout__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Cashout */ "./src/Cashout.js");
/* harmony import */ var _Settlement__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Settlement */ "./src/Settlement.js");
/* harmony import */ var _Pairing__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Pairing */ "./src/Pairing.js");
/* harmony import */ var _PosInfo__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./PosInfo */ "./src/PosInfo.js");
/* harmony import */ var _PurchaseHelper__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./PurchaseHelper */ "./src/PurchaseHelper.js");
/* harmony import */ var _KeyRollingHelper__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./KeyRollingHelper */ "./src/KeyRollingHelper.js");
/* harmony import */ var _PingHelper__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./PingHelper */ "./src/PingHelper.js");
/* harmony import */ var _Purchase__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Purchase */ "./src/Purchase.js");
/* harmony import */ var _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Service/DeviceService */ "./src/Service/DeviceService.js");
/* harmony import */ var _Printing__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Printing */ "./src/Printing.js");
/* harmony import */ var _TerminalStatus__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./TerminalStatus */ "./src/TerminalStatus.js");























var SPI_VERSION = '2.6.0';

var Spi =
/*#__PURE__*/
function () {
  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Spi, [{
    key: "CurrentStatus",
    get: function get() {
      return this._currentStatus;
    },
    set: function set(value) {
      if (this._currentStatus === value) {
        return;
      }

      this._currentStatus = value;
      document.dispatchEvent(new CustomEvent('StatusChanged', {
        detail: value
      }));
    }
  }]);

  function Spi(posId, serialNumber, eftposAddress, secrets) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, Spi);

    this._posId = posId;
    this._serialNumber = serialNumber;
    this._secrets = secrets;
    this._forceSecureWebSockets = false;
    this._eftposAddress = "ws://" + eftposAddress;
    this._log = console;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this._conn = new _Connection__WEBPACK_IMPORTED_MODULE_8__["Connection"]();
    this.CurrentDeviceStatus = null;
    this._deviceApiKey = null;
    this._acquirerCode = null;
    this._inTestMode = false;
    this._autoAddressResolutionEnabled = false; // Our stamp for signing outgoing messages

    this._spiMessageStamp = new _Messages__WEBPACK_IMPORTED_MODULE_4__["MessageStamp"](this._posId, this._secrets, 0);
    this._posVendorId = null;
    this._posVersion = null;
    this._hasSetInfo = null; // We will maintain some state

    this._mostRecentPingSent = null;
    this._mostRecentPongReceived = null;
    this._missedPongsCount = 0;
    this._retriesSinceLastDeviceAddressResolution = 0;
    this._mostRecentLoginResponse = null;
    this._pongTimeout = 5000;
    this._pingFrequency = 18000;
    this._readyToTransact = null;
    this._periodicPingThread = null;
    this._txMonitorCheckFrequency = 1000;
    this._checkOnTxFrequency = 20000;
    this._maxWaitForCancelTx = 10000;
    this._sleepBeforeReconnectMs = 3000;
    this._missedPongsToDisconnect = 2;
    this._retriesBeforeResolvingDeviceAddress = 3;
    this._retriesSinceLastPairing = 0;
    this._retriesBeforePairing = 3;
    this._regexItemsForEftposAddress = /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/;
    this._regexItemsForFqdnEftposAddress = /^[a-zA-Z0-9\.-]+$/;
    this._regexItemsForPosId = /^[a-zA-Z0-9]*$/;
    this.CurrentFlow = null;
    this.CurrentPairingFlowState = null;
    this.CurrentTxFlowState = null;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Spi, [{
    key: "EnablePayAtTable",
    value: function EnablePayAtTable() {
      this._spiPat = new _SpiPayAtTable__WEBPACK_IMPORTED_MODULE_9__["SpiPayAtTable"](this);
      return this._spiPat;
    }
  }, {
    key: "DisablePayAtTable",
    value: function DisablePayAtTable() {
      this._spiPat = new _SpiPayAtTable__WEBPACK_IMPORTED_MODULE_9__["SpiPayAtTable"](this);
      this._spiPat.Config.PayAtTableEnabled = false;
      return this._spiPat;
    }
  }, {
    key: "EnablePreauth",
    value: function EnablePreauth() {
      this._spiPreauth = new _SpiPreauth__WEBPACK_IMPORTED_MODULE_11__["SpiPreauth"](this);
      return this._spiPreauth;
    }
  }, {
    key: "Start",
    value: function Start() {
      if (!this._posVendorId || !this._posVersion) {
        // POS information is now required to be set
        this._log.warn("Missing POS vendor ID and version. posVendorId and posVersion are required before starting");

        throw new Error("Missing POS vendor ID and version. posVendorId and posVersion are required before starting");
      }

      if (!this._isPosIdValid(this._posId)) {
        // continue, as they can set the posId later on
        this._posId = "";

        this._log.warn("Invalid parameter, please correct them before pairing");
      }

      if (!this._isEftposAddressValid(this._eftposAddress)) {
        // continue, as they can set the eftposAddress later on
        this._eftposAddress = "";

        this._log.warn("Invalid parameter, please correct them before pairing");
      }

      this._resetConn();

      this._startTransactionMonitoringThread();

      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle;

      if (this._secrets != null) {
        this._log.info("Starting in Paired State");

        this._currentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnecting;

        this._conn.Connect(); // This is non-blocking

      } else {
        this._log.info("Starting in Unpaired State");

        this._currentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired;
      }
    } /// <summary>
    /// Set the acquirer code of your bank, please contact Assembly's Integration Engineers for acquirer code.
    /// </summary>

  }, {
    key: "SetAcquirerCode",
    value: function SetAcquirerCode(acquirerCode) {
      this._acquirerCode = acquirerCode;
      return true;
    } /// <summary>
    /// Set the api key used for auto address discovery feature
    /// </summary>
    /// <returns></returns>

  }, {
    key: "SetDeviceApiKey",
    value: function SetDeviceApiKey(deviceApiKey) {
      this._deviceApiKey = deviceApiKey;
      return true;
    } /// <summary>
    /// Allows you to set the serial number of the Eftpos
    /// </summary>

  }, {
    key: "SetSerialNumber",
    value: function SetSerialNumber(serialNumber) {
      if (this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return false;
      var was = this._serialNumber;
      this._serialNumber = serialNumber;

      if (this.HasSerialNumberChanged(was)) {
        this._autoResolveEftposAddress();
      } else {
        if (this.CurrentDeviceStatus == null) {
          this.CurrentDeviceStatus = new _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressStatus"]();
        }

        this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].SERIAL_NUMBER_NOT_CHANGED;
        document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
          detail: this.CurrentDeviceStatus
        }));
      }

      return true;
    } /// <summary>
    /// Allows you to set the auto address discovery feature. 
    /// </summary>
    /// <returns></returns>

  }, {
    key: "SetAutoAddressResolution",
    value: function SetAutoAddressResolution(autoAddressResolutionEnable) {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnected) return false;
      var was = this._autoAddressResolutionEnabled;
      this._autoAddressResolutionEnabled = autoAddressResolutionEnable;

      if (autoAddressResolutionEnable && !was) {
        // we're turning it on
        this._autoResolveEftposAddress();
      }

      return true;
    } /// <summary>
    /// Call this method to set the client library test mode.
    /// Set it to true only while you are developing the integration. 
    /// It defaults to false. For a real merchant, always leave it set to false. 
    /// </summary>
    /// <param name="testMode"></param>
    /// <returns></returns>

  }, {
    key: "SetTestMode",
    value: function SetTestMode(testMode) {
      if (this.CurrentStatus && this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return false;
      if (testMode == this._inTestMode) return true; // we're changing mode

      this._inTestMode = testMode;

      this._autoResolveEftposAddress();

      return true;
    } /// <summary>
    /// Set the client library to use secure web sockets TLS (wss protocol)
    /// </summary>
    /// <param name="isSecure"></param>
    /// <returns></returns>

  }, {
    key: "SetSecureWebSockets",
    value: function SetSecureWebSockets(useSecureWebSockets) {
      this._forceSecureWebSockets = useSecureWebSockets;
    } // <summary>
    // Allows you to set the PosId which identifies this instance of your POS.
    // Can only be called in thge Unpaired state. 
    // </summary>

  }, {
    key: "SetPosId",
    value: function SetPosId(posId) {
      if (this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return false;
      this._posId = ""; // reset posId to give more explicit feedback

      if (!this._isPosIdValid(posId)) {
        this._log.info("Pos Id set to null");

        return false;
      }

      this._posId = posId;
      this._spiMessageStamp.PosId = posId;
      return true;
    } // <summary>
    // Allows you to set the PinPad address. Sometimes the PinPad might change IP address 
    // (we recommend reserving static IPs if possible).
    // Either way you need to allow your User to enter the IP address of the PinPad.
    // </summary>

  }, {
    key: "SetEftposAddress",
    value: function SetEftposAddress(address) {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnected || this._autoAddressResolutionEnabled) {
        return false;
      }

      this._eftposAddress = ""; // reset eftposAddress to give more explicit feedback

      if (!this._isEftposAddressValid(address)) {
        this._log.info("Eftpos Address set to null");

        return false;
      }

      this._eftposAddress = "ws://" + address;
      this._conn.Address = this._eftposAddress;
      return true;
    }
  }, {
    key: "SetPosInfo",

    /**
     * Sets values used to identify the POS software to the EFTPOS terminal.
     * Must be set before starting!
     *
     * @param posVendorId Vendor identifier of the POS itself.
     * @param posVersion  Version string of the POS itself.
     */
    value: function SetPosInfo(posVendorId, posVersion) {
      this._posVendorId = posVendorId;
      this._posVersion = posVersion;
    } // <summary>
    // Call this one when a flow is finished and you want to go back to idle state.
    // Typically when your user clicks the "OK" bubtton to acknowldge that pairing is
    // finished, or that transaction is finished.
    // When true, you can dismiss the flow screen and show back the idle screen.
    // </summary>
    // <returns>true means we have moved back to the Idle state. false means current flow was not finished yet.</returns>

  }, {
    key: "AckFlowEndedAndBackToIdle",
    value: function AckFlowEndedAndBackToIdle() {
      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return true; // already idle

      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Pairing && this.CurrentPairingFlowState.Finished) {
        this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle;
        return true;
      }

      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction && this.CurrentTxFlowState.Finished) {
        this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle;
        return true;
      }

      return false;
    } // endregion
    // <summary>
    // This will connect to the Eftpos and start the pairing process.
    // Only call this if you are in the Unpaired state.
    // Subscribe to the PairingFlowStateChanged event to get updates on the pairing process.
    // </summary>
    // <returns>Whether pairing has initiated or not</returns>

  }, {
    key: "Pair",
    value: function Pair() {
      this._log.log("Trying to pair ....");

      if (this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        this._log.warn("Tried to Pair, but we're already paired. Stop pairing.");

        return false;
      }

      if (!this._isPosIdValid(this._posId) || !this._isEftposAddressValid(this._eftposAddress)) {
        this._log.warn("Invalid Pos Id or Eftpos address, stop pairing.");

        return false;
      }

      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Pairing;
      this.CurrentPairingFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["PairingFlowState"]({
        Successful: false,
        Finished: false,
        Message: "Connecting...",
        AwaitingCheckFromEftpos: false,
        AwaitingCheckFromPos: false,
        ConfirmationCode: ""
      });
      document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
        detail: this.CurrentPairingFlowState
      }));

      this._conn.Connect(); // Non-Blocking


      return true;
    } // <summary>
    // Call this when your user clicks yes to confirm the pairing code on your 
    // screen matches the one on the Eftpos.
    // </summary>

  }, {
    key: "PairingConfirmCode",
    value: function PairingConfirmCode() {
      if (!this.CurrentPairingFlowState.AwaitingCheckFromPos) {
        // We weren't expecting this
        return;
      }

      this.CurrentPairingFlowState.AwaitingCheckFromPos = false;

      if (this.CurrentPairingFlowState.AwaitingCheckFromEftpos) {
        // But we are still waiting for confirmation from Eftpos side.
        this._log.info("Pair Code Confirmed from POS side, but am still waiting for confirmation from Eftpos.");

        this.CurrentPairingFlowState.Message = "Click YES on EFTPOS if code is: " + this.CurrentPairingFlowState.ConfirmationCode;
        document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
          detail: this.CurrentPairingFlowState
        }));
      } else {
        // Already confirmed from Eftpos - So all good now. We're Paired also from the POS perspective.
        this._log.info("Pair Code Confirmed from POS side, and was already confirmed from Eftpos side. Pairing finalised.");

        this._onPairingSuccess();

        this._onReadyToTransact();
      }
    } // <summary>
    // Call this if your user clicks CANCEL or NO during the pairing process.
    // </summary>

  }, {
    key: "PairingCancel",
    value: function PairingCancel() {
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Pairing || this.CurrentPairingFlowState.Finished) {
        return;
      }

      if (this.CurrentPairingFlowState.AwaitingCheckFromPos && !this.CurrentPairingFlowState.AwaitingCheckFromEftpos) {
        // This means that the Eftpos already thinks it's paired.
        // Let's tell it to drop keys
        this._send(new _Pairing__WEBPACK_IMPORTED_MODULE_14__["DropKeysRequest"]().ToMessage());
      }

      this._onPairingFailed();
    } // <summary>
    // Call this when your uses clicks the Unpair button.
    // This will disconnect from the Eftpos and forget the secrets.
    // The CurrentState is then changed to Unpaired.
    // Call this only if you are not yet in the Unpaired state.
    // </summary>

  }, {
    key: "Unpair",
    value: function Unpair() {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        return false;
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) {
        return false;
      } // Best effort letting the eftpos know that we're dropping the keys, so it can drop them as well.


      this._send(new _Pairing__WEBPACK_IMPORTED_MODULE_14__["DropKeysRequest"]().ToMessage());

      this._doUnpair();

      return true;
    } // endregion
    // region Transaction Methods
    // <summary>
    // Initiates a purchase transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.
    // </summary>
    // <param name="posRefId">Alphanumeric Identifier for your purchase.</param>
    // <param name="amountCents">Amount in Cents to charge</param>
    // <returns>InitiateTxResult</returns>

  }, {
    key: "InitiatePurchaseTx",
    value: function InitiatePurchaseTx(posRefId, amountCents) {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      }

      var purchaseRequest = _PurchaseHelper__WEBPACK_IMPORTED_MODULE_16__["PurchaseHelper"].CreatePurchaseRequest(amountCents, posRefId);
      purchaseRequest.Config = this.Config;
      var purchaseMsg = purchaseRequest.ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].Purchase, amountCents, purchaseMsg, "Waiting for EFTPOS connection to make payment request for ".concat(amountCents / 100.0));

      if (this._send(purchaseMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to accept payment for ".concat(amountCents / 100.0));
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Purchase Initiated");
    } // <summary>
    // Initiates a purchase transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.
    // <para>Tip and cashout are not allowed simultaneously.</para>
    // </summary>
    // <param name="posRefId">An Unique Identifier for your Order/Purchase</param>
    // <param name="purchaseAmount">The Purchase Amount in Cents.</param>
    // <param name="tipAmount">The Tip Amount in Cents</param>
    // <param name="cashoutAmount">The Cashout Amount in Cents</param>
    // <param name="promptForCashout">Whether to prompt your customer for cashout on the Eftpos</param>
    // <param name="options">The Setting to set Header and Footer for the Receipt</param>
    // <param name="surchargeAmount">The Surcharge Amount in Cents</param>
    // <returns>InitiateTxResult</returns>

  }, {
    key: "InitiatePurchaseTxV2",
    value: function InitiatePurchaseTxV2(posRefId, purchaseAmount, tipAmount, cashoutAmount, promptForCashout) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
      var surchargeAmount = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      if (tipAmount > 0 && (cashoutAmount > 0 || promptForCashout)) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Cannot Accept Tips and Cashout at the same time.");
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      var purchase = _PurchaseHelper__WEBPACK_IMPORTED_MODULE_16__["PurchaseHelper"].CreatePurchaseRequestV2(posRefId, purchaseAmount, tipAmount, cashoutAmount, promptForCashout, surchargeAmount);
      purchase.Config = this.Config;
      purchase.Options = options;
      var purchaseMsg = purchase.ToMessage();
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].Purchase, purchaseAmount, purchaseMsg, "Waiting for EFTPOS connection to make payment request. ".concat(purchase.AmountSummary()));

      if (this._send(purchaseMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to accept payment for ".concat(purchase.AmountSummary()));
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Purchase Initiated");
    } // <summary>
    // Initiates a refund transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.
    // </summary>
    // <param name="posRefId">Alphanumeric Identifier for your refund.</param>
    // <param name="amountCents">Amount in Cents to charge</param>
    // <param name="suppressMerchantPassword">Merchant Password control in VAA</param>
    // <param name="options">The Setting to set Header and Footer for the Receipt</param>
    // <returns>InitiateTxResult</returns>

  }, {
    key: "InitiateRefundTx",
    value: function InitiateRefundTx(posRefId, amountCents) {
      var suppressMerchantPassword = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();

      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      }

      var refundRequest = _PurchaseHelper__WEBPACK_IMPORTED_MODULE_16__["PurchaseHelper"].CreateRefundRequest(amountCents, posRefId, suppressMerchantPassword);
      refundRequest.Config = this.Config;
      refundRequest.Options = options;
      var refundMsg = refundRequest.ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].Refund, amountCents, refundMsg, "Waiting for EFTPOS connection to make refund request for ".concat((amountCents / 100.0).toFixed(2)));

      if (this._send(refundMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to refund ".concat((amountCents / 100.0).toFixed(2)));
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Refund Initiated");
    } // <summary>
    // Let the EFTPOS know whether merchant accepted or declined the signature
    // </summary>
    // <param name="accepted">whether merchant accepted the signature from customer or not</param>

  }, {
    key: "AcceptSignature",
    value: function AcceptSignature(accepted) {
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.AwaitingSignatureCheck) {
        this._log.info("Asked to accept signature but I was not waiting for one.");

        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["MidTxResult"](false, "Asked to accept signature but I was not waiting for one.");
      }

      this.CurrentTxFlowState.SignatureResponded(accepted ? "Accepting Signature..." : "Declining Signature...");
      var sigReqMsg = this.CurrentTxFlowState.SignatureRequiredMessage;

      this._send(accepted ? new _Purchase__WEBPACK_IMPORTED_MODULE_19__["SignatureAccept"](this.CurrentTxFlowState.PosRefId).ToMessage() : new _Purchase__WEBPACK_IMPORTED_MODULE_19__["SignatureDecline"](this.CurrentTxFlowState.PosRefId).ToMessage());

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["MidTxResult"](true, "");
    } // <summary>
    // Submit the Code obtained by your user when phoning for auth. 
    // It will return immediately to tell you whether the code has a valid format or not. 
    // If valid==true is returned, no need to do anything else. Expect updates via standard callback.
    // If valid==false is returned, you can show your user the accompanying message, and invite them to enter another code. 
    // </summary>
    // <param name="authCode">The code obtained by your user from the merchant call centre. It should be a 6-character alpha-numeric value.</param>
    // <returns>Whether code has a valid format or not.</returns>

  }, {
    key: "SubmitAuthCode",
    value: function SubmitAuthCode(authCode) {
      if (authCode.length != 6) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SubmitAuthCodeResult"](false, "Not a 6-digit code.");
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.AwaitingPhoneForAuth) {
        this._log.info("Asked to send auth code but I was not waiting for one.");

        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SubmitAuthCodeResult"](false, "Was not waiting for one.");
      }

      this.CurrentTxFlowState.AuthCodeSent("Submitting Auth Code ".concat(authCode));

      this._send(new _Purchase__WEBPACK_IMPORTED_MODULE_19__["AuthCodeAdvice"](this.CurrentTxFlowState.PosRefId, authCode).ToMessage());

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SubmitAuthCodeResult"](true, "Valid Code.");
    } // <summary>
    // Attempts to cancel a Transaction. 
    // Be subscribed to TxFlowStateChanged event to see how it goes.
    // Wait for the transaction to be finished and then see whether cancellation was successful or not.
    // </summary>
    // <returns>MidTxResult - false only if you called it in the wrong state</returns>

  }, {
    key: "CancelTransaction",
    value: function CancelTransaction() {
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished) {
        this._log.info("Asked to cancel transaction but I was not in the middle of one.");

        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["MidTxResult"](false, "Asked to cancel transaction but I was not in the middle of one.");
      } // TH-1C, TH-3C - Merchant pressed cancel


      if (this.CurrentTxFlowState.RequestSent) {
        var cancelReq = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["CancelTransactionRequest"]();
        this.CurrentTxFlowState.Cancelling("Attempting to Cancel Transaction...");

        this._send(cancelReq.ToMessage());
      } else {
        // We Had Not Even Sent Request Yet. Consider as known failed.
        this.CurrentTxFlowState.Failed(null, "Transaction Cancelled. Request Had not even been sent yet.");
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["MidTxResult"](true, "");
    } // <summary>
    // Initiates a cashout only transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.
    // </summary>
    // <param name="posRefId">Alphanumeric Identifier for your transaction.</param>
    // <param name="amountCents">Amount in Cents to cash out</param>
    // <param name="surchargeAmount">The Surcharge Amount in Cents</param>
    // <returns>InitiateTxResult</returns>

  }, {
    key: "InitiateCashoutOnlyTx",
    value: function InitiateCashoutOnlyTx(posRefId, amountCents) {
      var surchargeAmount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      var cashoutMsg = Object.assign(new _Cashout__WEBPACK_IMPORTED_MODULE_12__["CashoutOnlyRequest"](amountCents, posRefId), {
        SurchargeAmount: surchargeAmount,
        Options: options,
        Config: this.Config
      }).ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].CashoutOnly, amountCents, cashoutMsg, "Waiting for EFTPOS connection to send cashout request for ".concat((amountCents / 100).toFixed(2)));

      if (this._send(cashoutMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to do cashout for ".concat((amountCents / 100).toFixed(2)));
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Cashout Initiated");
    } // <summary>
    // Initiates a Mail Order / Telephone Order Purchase Transaction
    // </summary>
    // <param name="posRefId">Alphanumeric Identifier for your transaction.</param>
    // <param name="amountCents">Amount in Cents</param>
    // <param name="surchargeAmount">The Surcharge Amount in Cents</param>
    // <param name="suppressMerchantPassword">>Merchant Password control in VAA</param>
    // <param name="options">The Setting to set Header and Footer for the Receipt</param>
    // <returns>InitiateTxResult</returns>

  }, {
    key: "InitiateMotoPurchaseTx",
    value: function InitiateMotoPurchaseTx(posRefId, amountCents) {
      var surchargeAmount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var suppressMerchantPassword = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      var motoPurchaseMsg = Object.assign(new _Purchase__WEBPACK_IMPORTED_MODULE_19__["MotoPurchaseRequest"](amountCents, posRefId), {
        SurchargeAmount: surchargeAmount,
        SuppressMerchantPassword: suppressMerchantPassword,
        Config: this.Config,
        Options: options
      }).ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].MOTO, amountCents, motoPurchaseMsg, "Waiting for EFTPOS connection to send MOTO request for ".concat((amountCents / 100).toFixed(2)));

      if (this._send(motoPurchaseMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS do MOTO for ".concat((amountCents / 100).toFixed(2)));
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "MOTO Initiated");
    } // <summary>
    // Initiates a settlement transaction.
    // Be subscribed to TxFlowStateChanged event to get updates on the process.
    // <param name="options">The Setting to set Header and Footer for the Receipt</param>
    // </summary>

  }, {
    key: "InitiateSettleTx",
    value: function InitiateSettleTx(posRefId) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();

      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      }

      var settleMsg = Object.assign(new _Settlement__WEBPACK_IMPORTED_MODULE_13__["SettleRequest"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_6__["RequestIdHelper"].Id("settle")), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].Settle, 0, settleMsg, "Waiting for EFTPOS connection to make a settle request");

      if (this._send(settleMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to settle.");
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Settle Initiated");
    } // <summary>
    // <param name="options">The Setting to set Header and Footer for the Receipt</param>
    // </summary>

  }, {
    key: "InitiateSettlementEnquiry",
    value: function InitiateSettlementEnquiry(posRefId) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      var stlEnqMsg = Object.assign(new _Settlement__WEBPACK_IMPORTED_MODULE_13__["SettlementEnquiryRequest"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_6__["RequestIdHelper"].Id("stlenq")), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].SettlementEnquiry, 0, stlEnqMsg, "Waiting for EFTPOS connection to make a settlement enquiry");

      if (this._send(stlEnqMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to make a settlement enquiry.");
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Settle Initiated");
    } // <summary>
    // Initiates a Get Last Transaction. Use this when you want to retrieve the most recent transaction
    // that was processed by the Eftpos.
    // Be subscribed to TxFlowStateChanged event to get updates on the process.
    // </summary>

  }, {
    key: "InitiateGetLastTx",
    value: function InitiateGetLastTx() {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      }

      var gltRequestMsg = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["GetLastTransactionRequest"]().ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      var posRefId = gltRequestMsg.Id; // GetLastTx is not trying to get anything specific back. So we just use the message id.

      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].GetLastTransaction, 0, gltRequestMsg, "Waiting for EFTPOS connection to make a Get-Last-Transaction request.");
      this.CurrentTxFlowState.CallingGlt(gltRequestMsg.Id);

      if (this._send(gltRequestMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS for last transaction.");
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "GLT Initiated");
    } // <summary>
    // This is useful to recover from your POS crashing in the middle of a transaction.
    // When you restart your POS, if you had saved enough state, you can call this method to recover the client library state.
    // You need to have the posRefId that you passed in with the original transaction, and the transaction type.
    // This method will return immediately whether recovery has started or not.
    // If recovery has started, you need to bring up the transaction modal to your user a be listening to TxFlowStateChanged.
    // </summary>
    // <param name="posRefId">The is that you had assigned to the transaction that you are trying to recover.</param>
    // <param name="txType">The transaction type.</param>
    // <returns></returns>

  }, {
    key: "InitiateRecovery",
    value: function InitiateRecovery(posRefId, txType) {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      var gltRequestMsg = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["GetLastTransactionRequest"]().ToMessage();
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, txType, 0, gltRequestMsg, "Waiting for EFTPOS connection to attempt recovery.");

      if (this._send(gltRequestMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to recover state.");
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Recovery Initiated");
    } // <summary>
    // GltMatch attempts to conclude whether a gltResponse matches an expected transaction and returns
    // the outcome. 
    // If Success/Failed is returned, it means that the gtlResponse did match, and that transaction was succesful/failed.
    // If Unknown is returned, it means that the gltResponse does not match the expected transaction. 
    // </summary>
    // <param name="gltResponse">The GetLastTransactionResponse message to check</param>
    // <param name="posRefId">The Reference Id that you passed in with the original request.</param>
    // <param name="expectedAmount">The total amount in the original request</param>
    // <param name="requestTime">The request time</param>
    // <returns></returns>

  }, {
    key: "GltMatch",
    value: function GltMatch(gltResponse, posRefId, expectedAmount, requestTime) {
      // Obsolete method call check
      // Old interface: GltMatch(GetLastTransactionResponse gltResponse, TransactionType expectedType, int expectedAmount, DateTime requestTime, string posRefId)
      if (arguments.length <= 4 ? 0 : arguments.length - 4) {
        if ((arguments.length <= 4 ? 0 : arguments.length - 4) === 1) {
          this._log.info("Obsolete method call detected: Use GltMatch(gltResponse, posRefId)");

          return this.GltMatch(gltResponse, arguments.length <= 4 ? undefined : arguments[4]);
        } else {
          throw new Error("Obsolete method call with unknown args: Use GltMatch(GetLastTransactionResponse gltResponse, string posRefId)");
        }
      }

      this._log.info("GLT CHECK: PosRefId: ".concat(posRefId, "->").concat(gltResponse.GetPosRefId()));

      var gltBankDateTimeStr = gltResponse.GetBankDateTimeString(); // ddMMyyyyHHmmss

      var gltBankDateTime = new Date("".concat(gltBankDateTimeStr.substr(4, 4), "-").concat(gltBankDateTimeStr.substr(2, 2), "-").concat(gltBankDateTimeStr.substr(0, 2), " ").concat(gltBankDateTimeStr.substr(8, 2), ":").concat(gltBankDateTimeStr.substr(10, 2), ":").concat(gltBankDateTimeStr.substr(12, 2)));
      var compare = parseInt(requestTime) - gltBankDateTime.getTime();

      if (!posRefId == gltResponse.GetPosRefId()) {
        return _Messages__WEBPACK_IMPORTED_MODULE_4__["SuccessState"].Unknown;
      }

      if (gltResponse.GetTxType().toUpperCase() == "PURCHASE" && gltResponse.GetBankNonCashAmount() != expectedAmount && compare > 0) {
        return _Messages__WEBPACK_IMPORTED_MODULE_4__["Message"].SuccessState.Unknown;
      }

      return gltResponse.GetSuccessState();
    }
  }, {
    key: "PrintReceipt",
    value: function PrintReceipt(key, payload) {
      this._send(new _Printing__WEBPACK_IMPORTED_MODULE_21__["PrintingRequest"](key, payload).toMessage());
    }
  }, {
    key: "GetTerminalStatus",
    value: function GetTerminalStatus() {
      this._send(new _TerminalStatus__WEBPACK_IMPORTED_MODULE_22__["TerminalStatusRequest"]().ToMessage());
    } // endregion
    // region Internals for Pairing Flow
    // <summary>
    // Handling the 2nd interaction of the pairing process, i.e. an incoming KeyRequest.
    // </summary>
    // <param name="m">incoming message</param>

  }, {
    key: "_handleKeyRequest",
    value: function _handleKeyRequest(m) {
      this.CurrentPairingFlowState.Message = "Negotiating Pairing...";
      document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
        detail: this.CurrentPairingFlowState
      })); // Use the helper. It takes the incoming request, and generates the secrets and the response.

      var ph = new _PairingHelper__WEBPACK_IMPORTED_MODULE_7__["PairingHelper"]();
      var result = ph.GenerateSecretsAndKeyResponse(new _Pairing__WEBPACK_IMPORTED_MODULE_14__["KeyRequest"](m));
      this._secrets = result.Secrets; // we now have secrets, although pairing is not fully finished yet.

      this._spiMessageStamp.Secrets = this._secrets; // updating our stamp with the secrets so can encrypt messages later.

      this._send(result.KeyResponse.ToMessage()); // send the key_response, i.e. interaction 3 of pairing.

    } // <summary>
    // Handling the 4th interaction of the pairing process i.e. an incoming KeyCheck.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleKeyCheck",
    value: function _handleKeyCheck(m) {
      var keyCheck = new _Pairing__WEBPACK_IMPORTED_MODULE_14__["KeyCheck"](m);
      this.CurrentPairingFlowState.ConfirmationCode = keyCheck.ConfirmationCode;
      this.CurrentPairingFlowState.AwaitingCheckFromEftpos = true;
      this.CurrentPairingFlowState.AwaitingCheckFromPos = true;
      this.CurrentPairingFlowState.Message = "Confirm that the following Code is showing on the Terminal";
      document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
        detail: this.CurrentPairingFlowState
      }));
    } // <summary>
    // Handling the 5th and final interaction of the pairing process, i.e. an incoming PairResponse
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handlePairResponse",
    value: function _handlePairResponse(m) {
      var pairResp = new _Pairing__WEBPACK_IMPORTED_MODULE_14__["PairResponse"](m);
      this.CurrentPairingFlowState.AwaitingCheckFromEftpos = false;

      if (pairResp.Success) {
        if (this.CurrentPairingFlowState.AwaitingCheckFromPos) {
          // Still Waiting for User to say yes on POS
          this._log.info("Got Pair Confirm from Eftpos, but still waiting for use to confirm from POS.");

          this.CurrentPairingFlowState.Message = "Confirm that the following Code is what the EFTPOS showed";
          document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
            detail: this.CurrentPairingFlowState
          }));
        } else {
          this._log.info("Got Pair Confirm from Eftpos, and already had confirm from POS. Now just waiting for first pong.");

          this._onPairingSuccess();
        } // I need to ping/login even if the pos user has not said yes yet, 
        // because otherwise within 5 seconds connectiong will be dropped by eftpos.


        this._startPeriodicPing();
      } else {
        this._onPairingFailed();
      }
    }
  }, {
    key: "_handleDropKeysAdvice",
    value: function _handleDropKeysAdvice(m) {
      this._log.info("Eftpos was Unpaired. I shall unpair from my end as well.");

      this._doUnpair();
    }
  }, {
    key: "_onPairingSuccess",
    value: function _onPairingSuccess() {
      this.CurrentPairingFlowState.Successful = true;
      this.CurrentPairingFlowState.Finished = true;
      this.CurrentPairingFlowState.Message = "Pairing Successful!";
      this.CurrentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnected;
      document.dispatchEvent(new CustomEvent('SecretsChanged', {
        detail: this._secrets
      }));
      document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
        detail: this.CurrentPairingFlowState
      }));
    }
  }, {
    key: "_onPairingFailed",
    value: function _onPairingFailed() {
      this._secrets = null;
      this._spiMessageStamp.Secrets = null;

      this._conn.Disconnect();

      this.CurrentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired;
      this.CurrentPairingFlowState.Message = "Pairing Failed";
      this.CurrentPairingFlowState.Finished = true;
      this.CurrentPairingFlowState.Successful = false;
      this.CurrentPairingFlowState.AwaitingCheckFromPos = false;
      document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
        detail: this.CurrentPairingFlowState
      }));
    }
  }, {
    key: "_doUnpair",
    value: function _doUnpair() {
      this.CurrentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired;

      this._conn.Disconnect();

      this._secrets = null;
      this._spiMessageStamp.Secrets = null;
      document.dispatchEvent(new CustomEvent('SecretsChanged', {
        detail: this._secrets
      }));
    } // <summary>
    // Sometimes the server asks us to roll our secrets.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleKeyRollingRequest",
    value: function _handleKeyRollingRequest(m) {
      // we calculate the new ones...
      var krRes = _KeyRollingHelper__WEBPACK_IMPORTED_MODULE_17__["KeyRollingHelper"].PerformKeyRolling(m, this._secrets);
      this._secrets = krRes.NewSecrets; // and update our secrets with them

      this._spiMessageStamp.Secrets = this._secrets; // and our stamp

      this._send(krRes.KeyRollingConfirmation); // and we tell the server that all is well.


      document.dispatchEvent(new CustomEvent('SecretsChanged', {
        detail: this._secrets
      }));
    } // <summary>
    // The PinPad server will send us this message when a customer signature is reqired.
    // We need to ask the customer to sign the incoming receipt.
    // And then tell the pinpad whether the signature is ok or not.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleSignatureRequired",
    value: function _handleSignatureRequired(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        this._log.info("Received Signature Required but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      }

      this.CurrentTxFlowState.SignatureRequired(new _Purchase__WEBPACK_IMPORTED_MODULE_19__["SignatureRequired"](m), "Ask Customer to Sign the Receipt");
      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // The PinPad server will send us this message when an auth code is required.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleAuthCodeRequired",
    value: function _handleAuthCodeRequired(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        _log.info("Received Auth Code Required but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      }

      var phoneForAuthRequired = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["PhoneForAuthRequired"](m);
      var msg = "Auth Code Required. Call ".concat(phoneForAuthRequired.GetPhoneNumber(), " and quote merchant id ").concat(phoneForAuthRequired.GetMerchantId());
      this.CurrentTxFlowState.PhoneForAuthRequired(phoneForAuthRequired, msg);
      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // The PinPad server will reply to our PurchaseRequest with a PurchaseResponse.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handlePurchaseResponse",
    value: function _handlePurchaseResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        this._log.info("Received Purchase response but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId, "\""));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Purchase Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // The PinPad server will reply to our CashoutOnlyRequest with a CashoutOnlyResponse.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleCashoutOnlyResponse",
    value: function _handleCashoutOnlyResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        this._log.info("Received Cashout Response but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Cashout Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // The PinPad server will reply to our MotoPurchaseRequest with a MotoPurchaseResponse.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleMotoPurchaseResponse",
    value: function _handleMotoPurchaseResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        this._log.info("Received Moto Response but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Moto Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // The PinPad server will reply to our RefundRequest with a RefundResponse.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleRefundResponse",
    value: function _handleRefundResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished | !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        this._log.info("Received Refund response but I was not waiting for this one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Refund Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // TODO: Handle the Settlement Response received from the PinPad
    // </summary>
    // <param name="m"></param>

  }, {
    key: "HandleSettleResponse",
    value: function HandleSettleResponse(m) {
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished) {
        this._log.info("Received Settle response but I was not waiting for one. ".concat(m.DecryptedJson));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Settle Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // Handle the Settlement Enquiry Response received from the PinPad
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleSettlementEnquiryResponse",
    value: function _handleSettlementEnquiryResponse(m) {
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished) {
        this._log.info("Received Settlement Enquiry response but I was not waiting for one. ".concat(m.DecryptedJson));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Settlement Enquiry Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // Sometimes we receive event type "error" from the server, such as when calling cancel_transaction and there is no transaction in progress.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleErrorEvent",
    value: function _handleErrorEvent(m) {
      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction && !this.CurrentTxFlowState.Finished && this.CurrentTxFlowState.AttemptingToCancel && m.GetError() == "NO_TRANSACTION") {
        // TH-2E
        this._log.info("Was trying to cancel a transaction but there is nothing to cancel. Calling GLT to see what's up");

        this._callGetLastTransaction();
      } else {
        this._log.info("Received Error Event But Don't know what to do with it. ".concat(m.DecryptedJson));
      }
    } // <summary>
    // When the PinPad returns to us what the Last Transaction was.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleGetLastTransactionResponse",
    value: function _handleGetLastTransactionResponse(m) {
      var txState = this.CurrentTxFlowState;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || txState.Finished) {
        this._log.info("Received glt response but we were not in the middle of a tx. ignoring.");

        return;
      }

      if (!txState.AwaitingGltResponse) {
        this._log.info("received a glt response but we had not asked for one within this transaction. Perhaps leftover from previous one. ignoring.");

        return;
      }

      if (txState.LastGltRequestId != m.Id) {
        this._log.info("received a glt response but the message id does not match the glt request that we sent. strange. ignoring.");

        return;
      } // TH-4 We were in the middle of a transaction.
      // Let's attempt recovery. This is step 4 of Transaction Processing Handling


      this._log.info("Got Last Transaction..");

      txState.GotGltResponse();
      var gtlResponse = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["GetLastTransactionResponse"](m);
      txState.GLTResponsePosRefId = gtlResponse.GetPosRefId();

      if (!gtlResponse.WasRetrievedSuccessfully()) {
        if (gtlResponse.IsStillInProgress(txState.PosRefId)) {
          // TH-4E - Operation In Progress
          if (gtlResponse.IsWaitingForSignatureResponse() && !txState.AwaitingSignatureCheck) {
            this._log.info("Eftpos is waiting for us to send it signature accept/decline, but we were not aware of this. " + "The user can only really decline at this stage as there is no receipt to print for signing.");

            this.CurrentTxFlowState.SignatureRequired(new _Purchase__WEBPACK_IMPORTED_MODULE_19__["SignatureRequired"](txState.PosRefId, m.Id, "MISSING RECEIPT\n DECLINE AND TRY AGAIN."), "Recovered in Signature Required but we don't have receipt. You may Decline then Retry.");
          } else if (gtlResponse.IsWaitingForAuthCode() && !txState.AwaitingPhoneForAuth) {
            this._log.info("Eftpos is waiting for us to send it auth code, but we were not aware of this. " + "We can only cancel the transaction at this stage as we don't have enough information to recover from this.");

            this.CurrentTxFlowState.PhoneForAuthRequired(new _Purchase__WEBPACK_IMPORTED_MODULE_19__["PhoneForAuthRequired"](txState.PosRefId, m.Id, "UNKNOWN", "UNKNOWN"), "Recovered mid Phone-For-Auth but don't have details. You may Cancel then Retry.");
          } else {
            this._log.info("Operation still in progress... stay waiting."); // No need to publish txFlowStateChanged. Can return;


            return;
          }
        } else if (gtlResponse.WasTimeOutOfSyncError()) {
          // Let's not give up based on a TOOS error.
          // Let's log it, and ignore it. 
          this._log.info("Time-Out-Of-Sync error in Get Last Transaction response. Let's ignore it and we'll try again."); // No need to publish txFlowStateChanged. Can return;


          return;
        } else {
          // TH-4X - Unexpected Response when recovering
          this._log.info("Unexpected Response in Get Last Transaction during - Received posRefId:".concat(gtlResponse.GetPosRefId(), " Error:").concat(m.GetError(), ". Ignoring."));

          return;
        }
      } else {
        if (txState.Type == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].GetLastTransaction) {
          // THIS WAS A PLAIN GET LAST TRANSACTION REQUEST, NOT FOR RECOVERY PURPOSES.
          this._log.info("Retrieved Last Transaction as asked directly by the user.");

          gtlResponse.CopyMerchantReceiptToCustomerReceipt();
          txState.Completed(m.GetSuccessState(), m, "Last Transaction Retrieved");
        } else {
          // TH-4A - Let's try to match the received last transaction against the current transaction
          var successState = this.GltMatch(gtlResponse, txState.PosRefId, txState.AmountCents, txState.RequestTime);

          if (successState == _Messages__WEBPACK_IMPORTED_MODULE_4__["SuccessState"].Unknown) {
            // TH-4N: Didn't Match our transaction. Consider Unknown State.
            this._log.info("Did not match transaction.");

            txState.UnknownCompleted("Failed to recover Transaction Status. Check EFTPOS. ");
          } else {
            // TH-4Y: We Matched, transaction finished, let's update ourselves
            gtlResponse.CopyMerchantReceiptToCustomerReceipt();
            txState.Completed(successState, m, "Transaction Ended.");
          }
        }
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: txState
      }));
    } //When the transaction cancel response is returned.

  }, {
    key: "_handleCancelTransactionResponse",
    value: function _handleCancelTransactionResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;
      var txState = this.CurrentTxFlowState;
      var cancelResponse = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["CancelTransactionResponse"](m);

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || txState.Finished || !txState.PosRefId == incomingPosRefId) {
        if (!cancelResponse.WasTxnPastPointOfNoReturn()) {
          this._log.info("Received Cancel Required but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

          return;
        }
      }

      if (cancelResponse.Success) return;

      this._log.warn("Failed to cancel transaction: reason=" + cancelResponse.GetErrorReason() + ", detail=" + cancelResponse.GetErrorDetail());

      txState.CancelFailed("Failed to cancel transaction: " + cancelResponse.GetErrorDetail() + ". Check EFTPOS.");
      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: txState
      }));
    }
  }, {
    key: "_handleSetPosInfoResponse",
    value: function _handleSetPosInfoResponse(m) {
      var response = new _PosInfo__WEBPACK_IMPORTED_MODULE_15__["SetPosInfoResponse"](m);

      if (response.isSuccess()) {
        this._hasSetInfo = true;

        this._log.info("Setting POS info successful");
      } else {
        this._log.warn("Setting POS info failed: reason=" + response.getErrorReason() + ", detail=" + response.getErrorDetail());
      }
    }
  }, {
    key: "_startTransactionMonitoringThread",
    value: function _startTransactionMonitoringThread() {
      var _this = this;

      var needsPublishing = false;
      var txState = this.CurrentTxFlowState;

      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction && !txState.Finished) {
        var state = txState;

        if (state.AttemptingToCancel && Date.now() > state.CancelAttemptTime + this._maxWaitForCancelTx) {
          // TH-2T - too long since cancel attempt - Consider unknown
          this._log.info("Been too long waiting for transaction to cancel.");

          txState.UnknownCompleted("Waited long enough for Cancel Transaction result. Check EFTPOS. ");
          needsPublishing = true;
        } else if (state.RequestSent && Date.now() > state.LastStateRequestTime + this._checkOnTxFrequency) {
          // TH-1T, TH-4T - It's been a while since we received an update, let's call a GLT
          this._log.info("Checking on our transaction. Last we asked was at ".concat(state.LastStateRequestTime, "..."));

          this._callGetLastTransaction();
        }
      }

      if (needsPublishing) {
        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
          detail: this.CurrentTxFlowState
        }));
      }

      setTimeout(function () {
        return _this._startTransactionMonitoringThread();
      }, this._txMonitorCheckFrequency);
    }
  }, {
    key: "PrintingResponse",
    value: function PrintingResponse(m) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "TerminalStatusResponse",
    value: function TerminalStatusResponse(m) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "BatteryLevelChanged",
    value: function BatteryLevelChanged(m) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "_handlePrintingResponse",
    value: function _handlePrintingResponse(m) {
      if (typeof this.PrintingResponse === 'function') this.PrintingResponse(m);
    }
  }, {
    key: "_handleTerminalStatusResponse",
    value: function _handleTerminalStatusResponse(m) {
      if (typeof this.TerminalStatusResponse === 'function') this.TerminalStatusResponse(m);
    }
  }, {
    key: "_handleBatteryLevelChanged",
    value: function _handleBatteryLevelChanged(m) {
      if (typeof this.BatteryLevelChanged === 'function') this.BatteryLevelChanged(m);
    } // endregion
    // region Internals for Connection Management

  }, {
    key: "_resetConn",
    value: function _resetConn() {
      var _this2 = this;

      // Setup the Connection
      this._conn = new _Connection__WEBPACK_IMPORTED_MODULE_8__["Connection"]();

      if (this._isUsingHttps() || this._forceSecureWebSockets) {
        this._log.info("Secure connection detected.");

        this._eftposAddress = this._eftposAddress.replace("ws://", "wss://");
      }

      this._conn.Address = this._eftposAddress; // Register our Event Handlers

      document.addEventListener('ConnectionStatusChanged', function (e) {
        return _this2._onSpiConnectionStatusChanged(e.detail);
      });
      document.addEventListener('MessageReceived', function (e) {
        return _this2._onSpiMessageReceived(e.detail);
      });
      document.addEventListener('ErrorReceived', function (e) {
        return _this2._onWsErrorReceived(e.detail);
      });
    } // <summary>
    // This method will be called when the connection status changes.
    // You are encouraged to display a PinPad Connection Indicator on the POS screen.
    // </summary>
    // <param name="state"></param>

  }, {
    key: "_onSpiConnectionStatusChanged",
    value: function _onSpiConnectionStatusChanged(state) {
      var _this3 = this;

      switch (state.ConnectionState) {
        case _Connection__WEBPACK_IMPORTED_MODULE_8__["ConnectionState"].Connecting:
          this._log.info("I'm Connecting to the Eftpos at ".concat(this._eftposAddress, "..."));

          break;

        case _Connection__WEBPACK_IMPORTED_MODULE_8__["ConnectionState"].Connected:
          this._retriesSinceLastDeviceAddressResolution = 0;

          if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Pairing && this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
            this.CurrentPairingFlowState.Message = "Requesting to Pair...";
            document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
              detail: this.CurrentPairingFlowState
            }));
            var pr = _PairingHelper__WEBPACK_IMPORTED_MODULE_7__["PairingHelper"].NewPairRequest();

            this._send(pr.ToMessage());
          } else {
            this._log.info("I'm Connected to ".concat(this._eftposAddress, "..."));

            this._spiMessageStamp.Secrets = this._secrets;

            this._startPeriodicPing();
          }

          break;

        case _Connection__WEBPACK_IMPORTED_MODULE_8__["ConnectionState"].Disconnected:
          // Let's reset some lifecycle related to connection state, ready for next connection
          this._log.info("I'm disconnected from ".concat(this._eftposAddress, "..."));

          this._mostRecentPingSent = null;
          this._mostRecentPongReceived = null;
          this._missedPongsCount = 0;

          this._stopPeriodicPing();

          if (this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
            this.CurrentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnecting;

            if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction && !this.CurrentTxFlowState.Finished) {
              // we're in the middle of a transaction, just so you know!
              // TH-1D
              this._log.info("Lost connection in the middle of a transaction...");
            }

            if (this._conn == null) return; // This means the instance has been disposed. Aborting.

            if (this._autoAddressResolutionEnabled) {
              if (this._retriesSinceLastDeviceAddressResolution >= this._retriesBeforeResolvingDeviceAddress) {
                this._autoResolveEftposAddress();

                this._retriesSinceLastDeviceAddressResolution = 0;
              } else {
                this._retriesSinceLastDeviceAddressResolution += 1;
              }
            }

            this._log.info("Will try to reconnect in ".concat(this._sleepBeforeReconnectMs, "ms..."));

            setTimeout(function () {
              if (_this3.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
                // This is non-blocking
                if (_this3._conn) {
                  _this3._conn.Connect();
                }
              }
            }, this._sleepBeforeReconnectMs);
          } else if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Pairing) {
            if (this.CurrentPairingFlowState.Finished) return;

            if (this._retriesSinceLastPairing >= this._retriesBeforePairing) {
              this._retriesSinceLastPairing = 0;

              this._log.warn("Lost Connection during pairing.");

              this._onPairingFailed();

              document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
                detail: this.CurrentPairingFlowState
              }));
              return;
            } else {
              this._log.info("Will try to re-pair in ".concat(this._sleepBeforeReconnectMs, "ms ..."));

              setTimeout(function () {
                if (_this3.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnected) {
                  // This is non-blocking
                  if (_this3._conn) _this3._conn.Connect();
                }

                _this3._retriesSinceLastPairing += 1;
              }, this._sleepBeforeReconnectMs);
            }
          }

          break;

        default:
          throw new Error('Unknown state: ' + state);
      }
    } // <summary>
    // This is an important piece of the puzzle. It's a background thread that periodically
    // sends Pings to the server. If it doesn't receive Pongs, it considers the connection as broken
    // so it disconnects. 
    // </summary>

  }, {
    key: "_startPeriodicPing",
    value: function _startPeriodicPing() {
      var _this4 = this;

      this._stopPeriodicPing();

      this._periodicPingThread = setInterval(function () {
        return _this4._periodicPing();
      }, this._pingFrequency);

      this._periodicPing();
    }
  }, {
    key: "_periodicPing",
    value: function _periodicPing() {
      var _this5 = this;

      // while i'm still connected AND paired...
      if (this._conn.Connected && this._secrets != null) {
        this._doPing();

        setTimeout(function () {
          if (_this5._mostRecentPingSent != null && (_this5._mostRecentPongReceived == null || _this5._mostRecentPongReceived.Id != _this5._mostRecentPingSent.Id)) {
            _this5._missedPongsCount += 1;

            _this5._log.info("Eftpos didn't reply to my Ping. Missed Count: ".concat(_this5._missedPongsCount, "/").concat(_this5._missedPongsToDisconnect, "."));

            if (_this5._missedPongsCount < _this5._missedPongsToDisconnect) {
              _this5._log.info("Trying another ping...");

              _this5._startPeriodicPing();

              return;
            } // This means that we have not received a pong for our most recent ping.
            // We consider this connection as broken.
            // Let's Disconnect.


            _this5._log.info("Disconnecting...");

            _this5._conn.Disconnect();

            _this5._stopPeriodicPing();
          }

          _this5._missedPongsCount = 0;
        }, this._pongTimeout);
      } else {
        this._stopPeriodicPing();

        this._log.info("Cancelling periodic ping as were disconnected or not paired");
      }
    } // <summary>
    // We call this ourselves as soon as we're ready to transact with the PinPad after a connection is established.
    // This function is effectively called after we received the first Login Response from the PinPad.
    // </summary>

  }, {
    key: "_onReadyToTransact",
    value: function _onReadyToTransact() {
      this._log.info("On Ready To Transact!"); // So, we have just made a connection, pinged and logged in successfully.


      this.CurrentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnected;

      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction && !this.CurrentTxFlowState.Finished) {
        if (this.CurrentTxFlowState.RequestSent) {
          // TH-3A - We've just reconnected and were in the middle of Tx.
          // Let's get the last transaction to check what we might have missed out on.
          this._callGetLastTransaction();
        } else {
          // TH-3AR - We had not even sent the request yet. Let's do that now
          this._send(this.CurrentTxFlowState.Request);

          this.CurrentTxFlowState.Sent("Sending Request Now...");
          document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
            detail: this.CurrentTxFlowState
          }));
        }
      } else {
        if (!this._hasSetInfo) {
          this._callSetPosInfo();
        } // let's also tell the eftpos our latest table configuration.


        if (this._spiPat) {
          this._spiPat.PushPayAtTableConfig();
        }
      }
    }
  }, {
    key: "_callSetPosInfo",
    value: function _callSetPosInfo() {
      var setPosInfoRequest = new _PosInfo__WEBPACK_IMPORTED_MODULE_15__["SetPosInfoRequest"](this._posVersion, this._posVendorId, "js", SPI_VERSION, _PosInfo__WEBPACK_IMPORTED_MODULE_15__["DeviceInfo"].GetAppDeviceInfo());

      this._send(setPosInfoRequest.toMessage());
    } // <summary>
    // When we disconnect, we should also stop the periodic ping.
    // </summary>

  }, {
    key: "_stopPeriodicPing",
    value: function _stopPeriodicPing() {
      if (this._periodicPingThread) {
        // If we were already set up, clean up before restarting.
        clearInterval(this._periodicPingThread);
        this._periodicPingThread = null;
      }
    } // Send a Ping to the Server

  }, {
    key: "_doPing",
    value: function _doPing() {
      var ping = _PingHelper__WEBPACK_IMPORTED_MODULE_18__["PingHelper"].GeneratePingRequest();
      this._mostRecentPingSent = ping;

      this._send(ping);

      this._mostRecentPingSentTime = Date.now();
    } // <summary>
    // Received a Pong from the server
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleIncomingPong",
    value: function _handleIncomingPong(m) {
      // We need to maintain this time delta otherwise the server will not accept our messages.
      this._spiMessageStamp.ServerTimeDelta = m.GetServerTimeDelta();

      if (this._mostRecentPongReceived == null) {
        // First pong received after a connection, and after the pairing process is fully finalised.
        if (this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
          this._log.info("First pong of connection and in paired state.");

          this._onReadyToTransact();
        } else {
          this._log.info("First pong of connection but pairing process not finalised yet.");
        }
      }

      this._mostRecentPongReceived = m;

      this._log.debug("PongLatency:".concat(Date.now() - this._mostRecentPingSentTime));
    } // <summary>
    // The server will also send us pings. We need to reply with a pong so it doesn't disconnect us.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleIncomingPing",
    value: function _handleIncomingPing(m) {
      var pong = _PingHelper__WEBPACK_IMPORTED_MODULE_18__["PongHelper"].GeneratePongRessponse(m);

      this._send(pong);
    } // <summary>
    // Ask the PinPad to tell us what the Most Recent Transaction was
    // </summary>

  }, {
    key: "_callGetLastTransaction",
    value: function _callGetLastTransaction() {
      var gltRequestMsg = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["GetLastTransactionRequest"]().ToMessage();
      this.CurrentTxFlowState.CallingGlt(gltRequestMsg.Id);

      this._send(gltRequestMsg);
    } // <summary>
    // This method will be called whenever we receive a message from the Connection
    // </summary>
    // <param name="messageJson"></param>

  }, {
    key: "_onSpiMessageReceived",
    value: function _onSpiMessageReceived(messageJson) {
      // First we parse the incoming message
      var m = _Messages__WEBPACK_IMPORTED_MODULE_4__["Message"].FromJson(messageJson.Message, this._secrets);

      this._log.info("Received:" + m.DecryptedJson);

      if (_SpiPreauth__WEBPACK_IMPORTED_MODULE_11__["SpiPreauth"].IsPreauthEvent(m.EventName)) {
        this._spiPreauth._handlePreauthMessage(m);

        return;
      } // And then we switch on the event type.


      switch (m.EventName) {
        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].KeyRequest:
          this._handleKeyRequest(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].KeyCheck:
          this._handleKeyCheck(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PairResponse:
          this._handlePairResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].DropKeysAdvice:
          this._handleDropKeysAdvice(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PurchaseResponse:
          this._handlePurchaseResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].RefundResponse:
          this._handleRefundResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].CashoutOnlyResponse:
          this._handleCashoutOnlyResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].MotoPurchaseResponse:
          this._handleMotoPurchaseResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].SignatureRequired:
          this._handleSignatureRequired(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].AuthCodeRequired:
          this._handleAuthCodeRequired(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].GetLastTransactionResponse:
          this._handleGetLastTransactionResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].SettleResponse:
          this.HandleSettleResponse(m);
          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].SettlementEnquiryResponse:
          this._handleSettlementEnquiryResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].Ping:
          this._handleIncomingPing(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].Pong:
          this._handleIncomingPong(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].KeyRollRequest:
          this._handleKeyRollingRequest(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].CancelTransactionResponse:
          this._handleCancelTransactionResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].SetPosInfoResponse:
          this._handleSetPosInfoResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PayAtTableGetTableConfig:
          if (this._spiPat == null) {
            this._send(_PayAtTable__WEBPACK_IMPORTED_MODULE_10__["PayAtTableConfig"].FeatureDisableMessage(_RequestIdHelper__WEBPACK_IMPORTED_MODULE_6__["RequestIdHelper"].Id("patconf")));

            break;
          }

          this._spiPat._handleGetTableConfig(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PayAtTableGetBillDetails:
          this._spiPat._handleGetBillDetailsRequest(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PayAtTableBillPayment:
          this._spiPat._handleBillPaymentAdvice(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PayAtTableGetOpenTables:
          this._spiPat._handleGetOpenTablesRequest(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PayAtTableBillPaymentFlowEnded:
          this._spiPat._handleBillPaymentFlowEnded(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PrintingResponse:
          this._handlePrintingResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].TerminalStatusResponse:
          this._handleTerminalStatusResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].BatteryLevelChanged:
          this._handleBatteryLevelChanged(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].Error:
          this._handleErrorEvent(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].InvalidHmacSignature:
          this._log.info("I could not verify message from Eftpos. You might have to Un-pair Eftpos and then reconnect.");

          break;

        default:
          this._log.info("I don't Understand Event: ".concat(m.EventName, ", ").concat(m.Data, ". Perhaps I have not implemented it yet."));

          break;
      }
    }
  }, {
    key: "_onWsErrorReceived",
    value: function _onWsErrorReceived(error) {
      this._log.warn("Received WS Error", error.Message);
    }
  }, {
    key: "_send",
    value: function _send(message) {
      var json = message.ToJson(this._spiMessageStamp);

      if (this._conn.Connected) {
        this._log.info("Sending: " + message.DecryptedJson);

        this._conn.Send(json);

        return true;
      } else {
        this._log.info("Asked to send, but not connected: " + message.DecryptedJson);

        return false;
      }
    }
  }, {
    key: "_isPosIdValid",
    value: function _isPosIdValid(posId) {
      if (!posId) {
        this._log.warn("Pos Id cannot be null or empty");

        return false;
      }

      if (posId.length > 16) {
        this._log.warn("Pos Id is greater than 16 characters");

        return false;
      }

      if (!posId.match(this._regexItemsForPosId)) {
        this._log.warn("Pos Id cannot include special characters");

        return false;
      }

      return true;
    }
  }, {
    key: "_isEftposAddressValid",
    value: function _isEftposAddressValid(eftposAddress) {
      if (!eftposAddress) {
        this._log.warn("The Eftpos address cannot be null or empty");

        return false;
      }

      var sanitisedEftposAddress = eftposAddress.replace(/^w[s]?s:\/\//, ""); // The eftposAddress may be an IP address or if autoAddressResolutionEnabled is true, a FQDN

      if (!this._autoAddressResolutionEnabled && !sanitisedEftposAddress.match(this._regexItemsForEftposAddress) || this._autoAddressResolutionEnabled && !sanitisedEftposAddress.match(this._regexItemsForFqdnEftposAddress)) {
        this._log.warn("The Eftpos address is not in the right format");

        return false;
      }

      return true;
    }
  }, {
    key: "HasSerialNumberChanged",
    value: function HasSerialNumberChanged(updatedSerialNumber) {
      return this._serialNumber != updatedSerialNumber;
    }
  }, {
    key: "HasEftposAddressChanged",
    value: function HasEftposAddressChanged(updatedEftposAddress) {
      return this._eftposAddress != updatedEftposAddress;
    }
  }, {
    key: "_autoResolveEftposAddress",
    value: function () {
      var _autoResolveEftposAddress2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
        var isSecureConnection, service, addressResponse, addressResponseJson, protocol;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this._autoAddressResolutionEnabled) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                if (!(!this._serialNumber || !this._deviceApiKey)) {
                  _context.next = 5;
                  break;
                }

                this._log.warn("Missing serialNumber and/or deviceApiKey. Need to set them before for Auto Address to work.");

                return _context.abrupt("return");

              case 5:
                isSecureConnection = this._isSecureConnection();
                service = new _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressService"]();
                _context.prev = 7;
                _context.next = 10;
                return service.RetrieveService(this._serialNumber, this._deviceApiKey, this._acquirerCode, isSecureConnection, this._inTestMode);

              case 10:
                addressResponse = _context.sent;
                _context.next = 13;
                return addressResponse.json();

              case 13:
                addressResponseJson = _context.sent;
                this.CurrentDeviceStatus = Object.assign(new _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressStatus"](isSecureConnection), {
                  ip: addressResponseJson.ip,
                  fqdn: addressResponseJson.fqdn,
                  DeviceAddressResponseCode: addressResponse.status,
                  ResponseStatusDescription: addressResponse.statusText,
                  ResponseMessage: addressResponse.statusText,
                  LastUpdated: addressResponseJson.last_updated
                });
                _context.next = 26;
                break;

              case 17:
                _context.prev = 17;
                _context.t0 = _context["catch"](7);
                this.CurrentDeviceStatus = this.CurrentDeviceStatus || new _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressStatus"](isSecureConnection);
                this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].DEVICE_SERVICE_ERROR;
                this.CurrentDeviceStatus.ResponseStatusDescription = _context.t0;
                this.CurrentDeviceStatus.ResponseMessage = _context.t0;

                this._log.warn(_context.t0.message);

                document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
                  detail: this.CurrentDeviceStatus
                }));
                return _context.abrupt("return");

              case 26:
                if (!(addressResponse.status == _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["HttpStatusCode"].NotFound)) {
                  _context.next = 30;
                  break;
                }

                this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].INVALID_SERIAL_NUMBER;
                document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
                  detail: this.CurrentDeviceStatus
                }));
                return _context.abrupt("return");

              case 30:
                if (!(!addressResponse.ok || !addressResponseJson || !this.CurrentDeviceStatus.Address)) {
                  _context.next = 34;
                  break;
                }

                this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].DEVICE_SERVICE_ERROR;
                document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
                  detail: this.CurrentDeviceStatus
                }));
                return _context.abrupt("return");

              case 34:
                if (this.HasEftposAddressChanged(this.CurrentDeviceStatus.Address)) {
                  _context.next = 38;
                  break;
                }

                this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].ADDRESS_NOT_CHANGED;
                document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
                  detail: this.CurrentDeviceStatus
                }));
                return _context.abrupt("return");

              case 38:
                // update device and connection address
                protocol = isSecureConnection ? "wss" : "ws";
                this._eftposAddress = protocol + "://" + this.CurrentDeviceStatus.Address;
                this._conn.Address = this._eftposAddress;
                this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].SUCCESS;
                document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
                  detail: this.CurrentDeviceStatus
                }));

              case 43:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 17]]);
      }));

      function _autoResolveEftposAddress() {
        return _autoResolveEftposAddress2.apply(this, arguments);
      }

      return _autoResolveEftposAddress;
    }()
  }, {
    key: "_isUsingHttps",
    value: function _isUsingHttps() {
      return 'https:' == document.location.protocol ? true : false;
    } // determine whether to use wss or not

  }, {
    key: "_isSecureConnection",
    value: function _isSecureConnection() {
      return this._isUsingHttps() || this._forceSecureWebSockets;
    }
  }], [{
    key: "GetVersion",
    value: function GetVersion() {
      return SPI_VERSION;
    }
  }]);

  return Spi;
}();



/***/ }),

/***/ "./src/SpiModels.js":
/*!**************************!*\
  !*** ./src/SpiModels.js ***!
  \**************************/
/*! exports provided: SpiStatus, SpiFlow, PairingFlowState, TransactionType, InitiateTxResult, MidTxResult, TransactionFlowState, SubmitAuthCodeResult, SpiConfig, TransactionOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpiStatus", function() { return SpiStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpiFlow", function() { return SpiFlow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PairingFlowState", function() { return PairingFlowState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionType", function() { return TransactionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InitiateTxResult", function() { return InitiateTxResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MidTxResult", function() { return MidTxResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionFlowState", function() { return TransactionFlowState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubmitAuthCodeResult", function() { return SubmitAuthCodeResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpiConfig", function() { return SpiConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionOptions", function() { return TransactionOptions; });
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");


 // <summary>
// Represents the 3 Pairing statuses that the Spi instanxce can be in.
// </summary>

var SpiStatus = {
  // <summary>
  // Paired and Connected
  // </summary>
  PairedConnected: 'PairedConnected',
  // <summary>
  // Paired but trying to establish a connection 
  // </summary>
  PairedConnecting: 'PairedConnecting',
  // <summary>
  // Unpaired
  // </summary>
  Unpaired: 'Unpaired'
}; // <summary>
// The Spi instance can be in one of these flows at any point in time.
// </summary>

var SpiFlow = {
  // <summary>
  // Currently going through the Pairing Process Flow.
  // Happens during the Unpaired SpiStatus.
  // </summary>
  Pairing: 'Pairing',
  // <summary>
  // Currently going through the transaction Process Flow.
  // Cannot happen in the Unpaired SpiStatus.
  // </summary>
  Transaction: 'Transaction',
  // <summary>
  // Not in any of the other states.
  // </summary>
  Idle: 'Idle'
}; // <summary>
// Represents the Pairing Flow State during the pairing process 
// </summary>

var PairingFlowState = function PairingFlowState(state) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, PairingFlowState);

  // <summary>
  // Some text that can be displayed in the Pairing Process Screen
  // that indicates what the pairing process is up to.
  // </summary>
  this.Message = null; // <summary>
  // When true, it means that the EFTPOS is shoing the confirmation code,
  // and your user needs to press YES or NO on the EFTPOS.
  // </summary>

  this.AwaitingCheckFromEftpos = null; // <summary>
  // When true, you need to display the YES/NO buttons on you pairing screen
  // for your user to confirm the code.
  // </summary>

  this.AwaitingCheckFromPos = null; // <summary>
  // This is the confirmation code for the pairing process.
  // </summary>

  this.ConfirmationCode = null; // <summary>
  // Indicates whether the Pairing Flow has finished its job.
  // </summary>

  this.Finished = null; // <summary>
  // Indicates whether pairing was successful or not.
  // </summary>

  this.Successful = null;

  if (state) {
    Object.assign(this, state);
  }
};
var TransactionType = {
  Purchase: 'Purchase',
  Refund: 'Refund',
  CashoutOnly: 'CashoutOnly',
  MOTO: 'MOTO',
  Settle: 'Settle',
  SettlementEnquiry: 'SettlementEnquiry',
  GetLastTransaction: 'GetLastTransaction',
  Preauth: 'Preauth',
  AccountVerify: 'AccountVerify'
}; // <summary>
// Used as a return in the InitiateTx methods to signify whether 
// the transaction was initiated or not, and a reason to go with it.
// </summary>

var InitiateTxResult = function InitiateTxResult(initiated, message) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, InitiateTxResult);

  // <summary>
  // Whether the tx was initiated.
  // When true, you can expect updated to your registered callback.
  // When false, you can retry calling the InitiateX method.
  // </summary>
  this.Initiated = initiated; // <summary>
  // Text that gives reason for the Initiated flag, especially in case of false. 
  // </summary>

  this.Message = message;
}; // <summary>
// Used as a return in calls mid transaction to let you know
// whether the call was valid or not.
// These attributes work for COM interop.
// </summary>

var MidTxResult = // <summary>
// This default stucture works for COM interop.
// </summary>
function MidTxResult(valid, message) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, MidTxResult);

  this.Valid = valid;
  this.Message = message;
}; // <summary>
// Represents the State during a TransactionFlow
// </summary>

var TransactionFlowState =
/*#__PURE__*/
function () {
  function TransactionFlowState(posRefId, type, amountCents, message, msg) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, TransactionFlowState);

    // <summary>
    //  The id given to this transaction
    // </summary>
    this.PosRefId = posRefId;
    this.Id = posRefId; // obsolete, but let's maintain it for now, to mean same as PosRefId.
    // <summary>
    // Purchase/Refund/Settle/...
    // </summary>

    this.Type = type; // <summary>
    // A text message to display on your Transaction Flow Screen
    // </summary>

    this.DisplayMessage = msg; // <summary>
    // Amount in cents for this transaction
    // </summary>

    this.AmountCents = amountCents; // <summary>
    // Whther the request has been sent to the EFTPOS yet or not.
    // In the PairedConnecting state, the transaction is initiated
    // but the request is only sent once the connection is recovered.
    // </summary>

    this.RequestSent = false; // <summary>
    // The time when the request was sent to the EFTPOS.
    // </summary>

    this.RequestTime = null; // <summary>
    // The time when we last asked for an update, including the original request at first
    // </summary>

    this.LastStateRequestTime = null; // <summary>
    // The id of the last glt request message that was sent. used to match with the response.
    // </summary>

    this.LastGltRequestId = null; // <summary>
    // Whether we're currently attempting to Cancel the transaction.
    // </summary>

    this.AttemptingToCancel = null; // <summary>
    // When this flag is on, you need to display the dignature accept/decline buttons in your 
    // transaction flow screen.
    // </summary>

    this.AwaitingSignatureCheck = false; // <summary>
    // When this flag is on, you need to show your user the phone number to call to get the authorisation code.
    // Then you need to provide your user means to enter that given code and submit it via SubmitAuthCode().
    // </summary>

    this.AwaitingPhoneForAuth = null; // <summary>
    // Whether this transaction flow is over or not.
    // </summary>

    this.Finished = false; // <summary>
    // The success state of this transaction. Starts off as Unknown.
    // When finished, can be Success, Failed OR Unknown.
    // </summary>

    this.Success = _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Unknown; // <summary>
    // The response at the end of the transaction. 
    // Might not be present in all edge cases.
    // You can then turn this Message into the appropriate structure,
    // such as PurchaseResponse, RefundResponse, etc
    // </summary>

    this.Response = null; // <summary>
    // The message the we received from EFTPOS that told us that signature is required.
    // </summary>

    this.SignatureRequiredMessage = null; // <summary>
    // The message the we received from EFTPOS that told us that Phone For Auth is required.
    // </summary>

    this.PhoneForAuthRequiredMessage = null; // <summary>
    // The time when the cancel attempt was made.
    // </summary>

    this.CancelAttemptTime = null; // <summary>
    // The request message that we are sending/sent to the server.
    // </summary>

    this.Request = message; // <summary>
    // Whether we're currently waiting for a Get Last Transaction Response to get an update. 
    // </summary>

    this.AwaitingGltResponse = null;
    this.GLTResponsePosRefId = null;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(TransactionFlowState, [{
    key: "Sent",
    value: function Sent(msg) {
      this.RequestSent = true;
      this.RequestTime = Date.now();
      this.LastStateRequestTime = Date.now();
      this.DisplayMessage = msg;
    }
  }, {
    key: "Cancelling",
    value: function Cancelling(msg) {
      this.AttemptingToCancel = true;
      this.CancelAttemptTime = Date.now();
      this.DisplayMessage = msg;
    }
  }, {
    key: "CancelFailed",
    value: function CancelFailed(msg) {
      this.AttemptingToCancel = false;
      this.DisplayMessage = msg;
    }
  }, {
    key: "CallingGlt",
    value: function CallingGlt(gltRequestId) {
      this.AwaitingGltResponse = true;
      this.LastStateRequestTime = Date.now();
      this.LastGltRequestId = gltRequestId;
    }
  }, {
    key: "GotGltResponse",
    value: function GotGltResponse() {
      this.AwaitingGltResponse = false;
    }
  }, {
    key: "Failed",
    value: function Failed(response, msg) {
      this.Success = _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Failed;
      this.Finished = true;
      this.Response = response;
      this.DisplayMessage = msg;
    }
  }, {
    key: "SignatureRequired",
    value: function SignatureRequired(spiMessage, msg) {
      this.SignatureRequiredMessage = spiMessage;
      this.AwaitingSignatureCheck = true;
      this.DisplayMessage = msg;
    }
  }, {
    key: "SignatureResponded",
    value: function SignatureResponded(msg) {
      this.AwaitingSignatureCheck = false;
      this.DisplayMessage = msg;
    }
  }, {
    key: "PhoneForAuthRequired",
    value: function PhoneForAuthRequired(spiMessage, msg) {
      this.PhoneForAuthRequiredMessage = spiMessage;
      this.AwaitingPhoneForAuth = true;
      this.DisplayMessage = msg;
    }
  }, {
    key: "AuthCodeSent",
    value: function AuthCodeSent(msg) {
      this.AwaitingPhoneForAuth = false;
      this.DisplayMessage = msg;
    }
  }, {
    key: "Completed",
    value: function Completed(state, response, msg) {
      this.Success = state;
      this.Response = response;
      this.Finished = true;
      this.AttemptingToCancel = false;
      this.AwaitingGltResponse = false;
      this.AwaitingSignatureCheck = false;
      this.AwaitingPhoneForAuth = false;
      this.DisplayMessage = msg;
    }
  }, {
    key: "UnknownCompleted",
    value: function UnknownCompleted(msg) {
      this.Success = _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Unknown;
      this.Response = null;
      this.Finished = true;
      this.AttemptingToCancel = false;
      this.AwaitingGltResponse = false;
      this.AwaitingSignatureCheck = false;
      this.AwaitingPhoneForAuth = false;
      this.DisplayMessage = msg;
    }
  }]);

  return TransactionFlowState;
}(); // <summary>
// Used as a return in the SubmitAuthCode method to signify whether Code is valid
// </summary>

var SubmitAuthCodeResult = function SubmitAuthCodeResult(validFormat, message) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SubmitAuthCodeResult);

  this.ValidFormat = validFormat; // <summary>
  // Text that gives reason for Invalidity
  // </summary>

  this.Message = message;
};
var SpiConfig =
/*#__PURE__*/
function () {
  function SpiConfig() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SpiConfig);

    this.PrintMerchantCopy = false;
    this.PromptForCustomerCopyOnEftpos = false;
    this.SignatureFlowOnEftpos = false;
    this.EnabledPrintMerchantCopy = false;
    this.EnabledPromptForCustomerCopyOnEftpos = false;
    this.EnabledSignatureFlowOnEftpos = false;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(SpiConfig, [{
    key: "AddReceiptConfig",
    value: function AddReceiptConfig(messageData) {
      if (this.PromptForCustomerCopyOnEftpos && this.EnabledPromptForCustomerCopyOnEftpos) {
        messageData.prompt_for_customer_copy = this.PromptForCustomerCopyOnEftpos;
      }

      if (this.SignatureFlowOnEftpos && this.EnabledSignatureFlowOnEftpos) {
        messageData.print_for_signature_required_transactions = this.SignatureFlowOnEftpos;
      }

      if (this.PrintMerchantCopy && this.EnabledPrintMerchantCopy) {
        messageData.print_merchant_copy = this.PrintMerchantCopy;
      }

      return messageData;
    }
  }, {
    key: "ToString",
    value: function ToString() {
      return "PromptForCustomerCopyOnEftpos:".concat(this.PromptForCustomerCopyOnEftpos, " SignatureFlowOnEftpos:").concat(this.SignatureFlowOnEftpos, " PrintMerchantCopy: ").concat(this.PrintMerchantCopy);
    }
  }]);

  return SpiConfig;
}();
var TransactionOptions =
/*#__PURE__*/
function () {
  function TransactionOptions() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, TransactionOptions);

    this._customerReceiptHeader = "";
    this._customerReceiptFooter = "";
    this._merchantReceiptHeader = "";
    this._merchantReceiptFooter = "";
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(TransactionOptions, [{
    key: "SetCustomerReceiptHeader",
    value: function SetCustomerReceiptHeader(customerReceiptHeader) {
      this._customerReceiptHeader = customerReceiptHeader;
    }
  }, {
    key: "SetCustomerReceiptFooter",
    value: function SetCustomerReceiptFooter(customerReceiptFooter) {
      this._customerReceiptFooter = customerReceiptFooter;
    }
  }, {
    key: "SetMerchantReceiptHeader",
    value: function SetMerchantReceiptHeader(merchantReceiptHeader) {
      this._merchantReceiptHeader = merchantReceiptHeader;
    }
  }, {
    key: "SetMerchantReceiptFooter",
    value: function SetMerchantReceiptFooter(merchantReceiptFooter) {
      this._merchantReceiptFooter = merchantReceiptFooter;
    }
  }, {
    key: "AddOptions",
    value: function AddOptions(messageData) {
      messageData.customer_receipt_header = this._customerReceiptHeader;
      messageData.customer_receipt_footer = this._customerReceiptFooter;
      messageData.merchant_receipt_header = this._merchantReceiptHeader;
      messageData.merchant_receipt_footer = this._merchantReceiptFooter;
      return messageData;
    }
  }]);

  return TransactionOptions;
}();

/***/ }),

/***/ "./src/SpiPayAtTable.js":
/*!******************************!*\
  !*** ./src/SpiPayAtTable.js ***!
  \******************************/
/*! exports provided: SpiPayAtTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpiPayAtTable", function() { return SpiPayAtTable; });
/* harmony import */ var _babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/readOnlyError */ "./node_modules/@babel/runtime/helpers/readOnlyError.js");
/* harmony import */ var _babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony import */ var _PayAtTable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PayAtTable */ "./src/PayAtTable.js");





var SpiPayAtTable =
/*#__PURE__*/
function () {
  function SpiPayAtTable(spi) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SpiPayAtTable);

    this._spi = spi;
    this._log = console;
    this.Config = new _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["PayAtTableConfig"]();
  } // <summary>
  // This delegate will be called when the Eftpos needs to know the current state of a bill for a table. 
  // <para />
  // Parameters:<para />
  // billId - The unique identifier of the bill. If empty, it means that the PayAtTable flow on the Eftpos is just starting, and the lookup is by tableId.<para />
  // tableId - The identifier of the table that the bill is for. <para />
  // operatorId - The id of the operator entered on the eftpos. <para />
  // <para />
  // Return:<para />
  // You need to return the current state of the bill.
  // </summary>


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(SpiPayAtTable, [{
    key: "GetBillStatus",
    value: function GetBillStatus(billId, tableId, operatorId, paymentFlowStarted) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    } // Abstract method, must implement in POS system

  }, {
    key: "BillPaymentReceived",
    value: function BillPaymentReceived(billPayment, updatedBillData) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "GetOpenTables",
    value: function GetOpenTables(operatorId) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "BillPaymentFlowEnded",
    value: function BillPaymentFlowEnded(message) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "PushPayAtTableConfig",
    value: function PushPayAtTableConfig() {
      this._spi._send(this.Config.ToMessage(_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("patconf")));
    }
  }, {
    key: "_handleGetBillDetailsRequest",
    value: function _handleGetBillDetailsRequest(m) {
      var _this = this;

      var operatorId = m.Data["operator_id"];
      var tableId = m.Data["table_id"];
      var paymentFlowStarted = m.Data["payment_flow_started"]; // Ask POS for Bill Details for this tableId, inluding encoded PaymentData

      return Promise.resolve(this.GetBillStatus("", tableId, operatorId, paymentFlowStarted)).then(function (billStatus) {
        billStatus.TableId = tableId;

        if (billStatus.TotalAmount <= 0) {
          _this._log.info("Table has 0 total amount. not sending it to eftpos.");

          billStatus.Result = _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["BillRetrievalResult"].INVALID_TABLE_ID;
        }

        _this._spi._send(billStatus.ToMessage(m.Id));
      });
    }
  }, {
    key: "_handleBillPaymentAdvice",
    value: function _handleBillPaymentAdvice(m) {
      var _this2 = this;

      var billPayment = new _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["BillPayment"](m); // Ask POS for Bill Details, inluding encoded PaymentData

      return Promise.resolve(this.GetBillStatus(billPayment.BillId, billPayment.TableId, billPayment.OperatorId, billPayment.PaymentFlowStarted)).then(function (existingBillStatus) {
        if (existingBillStatus.Result != _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["BillRetrievalResult"].SUCCESS) {
          _this2._log.warn("Could not retrieve Bill Status for Payment Advice. Sending Error to Eftpos.");

          _this2._spi._send(existingBillStatus.ToMessage(m.Id));
        }

        var existingPaymentHistory = existingBillStatus.getBillPaymentHistory();
        var foundExistingEntry = existingPaymentHistory.find(function (phe) {
          return phe.GetTerminalRefId() == billPayment.PurchaseResponse.GetTerminalReferenceId();
        });

        if (foundExistingEntry) {
          // We have already processed this payment.
          // perhaps Eftpos did get our acknowledgement.
          // Let's update Eftpos.
          _this2._log.warn("Had already received this bill_paymemnt advice from eftpos. Ignoring.");

          _this2._spi._send(existingBillStatus.ToMessage(m.Id));

          return;
        } // Let's add the new entry to the history


        var updatedHistoryEntries = existingPaymentHistory;
        updatedHistoryEntries.push(new _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["PaymentHistoryEntry"](billPayment.PaymentType.toLowerCase(), billPayment.PurchaseResponse.ToPaymentSummary()));
        var updatedBillData = _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["BillStatusResponse"].ToBillData(updatedHistoryEntries); // Advise POS of new payment against this bill, and the updated BillData to Save.

        Promise.resolve(_this2.BillPaymentReceived(billPayment, updatedBillData)).then(function (updatedBillStatus) {
          // Just in case client forgot to set these:
          updatedBillStatus.BillId = billPayment.BillId;
          updatedBillStatus.TableId = billPayment.TableId;

          if (updatedBillStatus.Result != _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["BillRetrievalResult"].SUCCESS) {
            _this2._log.warn("POS Errored when being Advised of Payment. Letting EFTPOS know, and sending existing bill data.");

            updatedBillStatus.BillData = existingBillStatus.BillData;
          } else {
            updatedBillStatus.BillData = updatedBillData;
          }

          _this2._spi._send(updatedBillStatus.ToMessage(m.Id));
        });
      });
    }
  }, {
    key: "_handleGetTableConfig",
    value: function _handleGetTableConfig(m) {
      this._spi._send(this.Config.ToMessage(m.Id));
    }
  }, {
    key: "_handleGetOpenTablesRequest",
    value: function _handleGetOpenTablesRequest(m) {
      var operatorId = m.Data["operator_id"]; // Ask POS for Bill Details for this tableId, inluding encoded PaymentData

      var openTablesResponse = typeof this.GetOpenTables === 'function' ? this.GetOpenTables(operatorId) : null;

      if (!openTablesResponse || !openTablesResponse.TableData || !openTablesResponse.TableData.length) {
        openTablesResponse = (_babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_0___default()("openTablesResponse"), new GetOpenTablesResponse());

        this._log.info("There is no open table.");
      }

      this._spi._send(openTablesResponse.ToMessage(m.Id));
    }
  }, {
    key: "_handleBillPaymentFlowEnded",
    value: function _handleBillPaymentFlowEnded(m) {
      this.BillPaymentFlowEnded(m);
    }
  }]);

  return SpiPayAtTable;
}();

/***/ }),

/***/ "./src/SpiPreauth.js":
/*!***************************!*\
  !*** ./src/SpiPreauth.js ***!
  \***************************/
/*! exports provided: SpiPreauth */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpiPreauth", function() { return SpiPreauth; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Preauth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Preauth */ "./src/Preauth.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");




var SpiPreauth =
/*#__PURE__*/
function () {
  function SpiPreauth(spi) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SpiPreauth);

    this._spi = spi;
    this._log = console;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiConfig"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SpiPreauth, [{
    key: "InitiateAccountVerifyTx",
    value: function InitiateAccountVerifyTx(posRefId) {
      var verifyMsg = new _Preauth__WEBPACK_IMPORTED_MODULE_2__["AccountVerifyRequest"](posRefId).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].AccountVerify, 0, verifyMsg, "Waiting for EFTPOS connection to make account verify request");
      var sentMsg = "Asked EFTPOS to verify account";
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiateOpenTx",
    value: function InitiateOpenTx(posRefId, amountCents) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthOpenRequest"](amountCents, posRefId), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, amountCents, msg, "Waiting for EFTPOS connection to make preauth request for ".concat((amountCents / 100.0).toFixed(2)));
      var sentMsg = "Asked EFTPOS to create preauth for ".concat((amountCents / 100.0).toFixed(2));
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiateTopupTx",
    value: function InitiateTopupTx(posRefId, preauthId, amountCents) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthTopupRequest"](preauthId, amountCents, posRefId), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, amountCents, msg, "Waiting for EFTPOS connection to make preauth topup request for ".concat((amountCents / 100.0).toFixed(2)));
      var sentMsg = "Asked EFTPOS to make preauth topup for ".concat((amountCents / 100.0).toFixed(2));
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiatePartialCancellationTx",
    value: function InitiatePartialCancellationTx(posRefId, preauthId, amountCents) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthPartialCancellationRequest"](preauthId, amountCents, posRefId), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, amountCents, msg, "Waiting for EFTPOS connection to make preauth partial cancellation request for ".concat((amountCents / 100.0).toFixed(2)));
      var sentMsg = "Asked EFTPOS to make preauth partial cancellation for ".concat((amountCents / 100.0).toFixed(2));
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiateExtendTx",
    value: function InitiateExtendTx(posRefId, preauthId) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthExtendRequest"](preauthId, posRefId), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, 0, msg, "Waiting for EFTPOS connection to make preauth Extend request");
      var sentMsg = "Asked EFTPOS to make preauth Extend request";
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiateCompletionTx",
    value: function InitiateCompletionTx(posRefId, preauthId, amountCents) {
      var surchargeAmount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthCompletionRequest"](preauthId, amountCents, posRefId), {
        Config: this.Config,
        SurchargeAmount: surchargeAmount,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, amountCents, msg, "Waiting for EFTPOS connection to make preauth completion request for ".concat((amountCents / 100.0).toFixed(2)));
      var sentMsg = "Asked EFTPOS to make preauth completion for ".concat((amountCents / 100.0).toFixed(2));
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiateCancelTx",
    value: function InitiateCancelTx(posRefId, preauthId) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthCancelRequest"](preauthId, posRefId), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, 0, msg, "Waiting for EFTPOS connection to make preauth cancellation request");
      var sentMsg = "Asked EFTPOS to make preauth cancellation request";
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "_initiatePreauthTx",
    value: function _initiatePreauthTx(tfs, sentMsg) {
      if (this._spi.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["InitiateTxResult"](false, "Not Paired");
      if (this._spi.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["InitiateTxResult"](false, "Not Idle");
      this._spi.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiFlow"].Transaction;
      this._spi.CurrentTxFlowState = tfs;

      if (this._spi._send(tfs.Request)) {
        this._spi.CurrentTxFlowState.Sent(sentMsg);
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this._spi.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["InitiateTxResult"](true, "Preauth Initiated");
    }
  }, {
    key: "_handlePreauthMessage",
    value: function _handlePreauthMessage(m) {
      switch (m.EventName) {
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].AccountVerifyResponse:
          this._handleAccountVerifyResponse(m);

          break;

        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthOpenResponse:
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthTopupResponse:
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthPartialCancellationResponse:
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthExtendResponse:
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthCompleteResponse:
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthCancellationResponse:
          this._handlePreauthResponse(m);

          break;

        default:
          this._log.info("I don't Understand Preauth Event: ".concat(m.EventName, ", ").concat(m.Data, ". Perhaps I have not implemented it yet."));

          break;
      }
    }
  }, {
    key: "_handleAccountVerifyResponse",
    value: function _handleAccountVerifyResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;
      var currentTxFlowState = this._spi.CurrentTxFlowState;

      if (this._spi.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiFlow"].Transaction || currentTxFlowState.Finished || !currentTxFlowState.PosRefId === incomingPosRefId) {
        this._log.info("Received Account Verify response but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      } // TH-1A, TH-2A


      currentTxFlowState.Completed(m.GetSuccessState(), m, "Account Verify Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this._spi.CurrentTxFlowState
      }));
    }
  }, {
    key: "_handlePreauthResponse",
    value: function _handlePreauthResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;
      var currentTxFlowState = this._spi.CurrentTxFlowState;

      if (this._spi.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiFlow"].Transaction || currentTxFlowState.Finished || !currentTxFlowState.PosRefId === incomingPosRefId) {
        this._log.info("Received Preauth response but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      } // TH-1A, TH-2A


      currentTxFlowState.Completed(m.GetSuccessState(), m, "Preauth Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this._spi.CurrentTxFlowState
      }));
    }
  }], [{
    key: "IsPreauthEvent",
    value: function IsPreauthEvent(eventName) {
      return eventName.lastIndexOf("preauth", 0) === 0 || eventName == _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthCompleteResponse || eventName == _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthCompleteRequest || eventName == _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].AccountVerifyRequest || eventName == _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].AccountVerifyResponse;
    }
  }]);

  return SpiPreauth;
}();

/***/ }),

/***/ "./src/TerminalStatus.js":
/*!*******************************!*\
  !*** ./src/TerminalStatus.js ***!
  \*******************************/
/*! exports provided: TerminalStatusRequest, TerminalStatusResponse, TerminalBattery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TerminalStatusRequest", function() { return TerminalStatusRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TerminalStatusResponse", function() { return TerminalStatusResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TerminalBattery", function() { return TerminalBattery; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");




var TerminalStatusRequest =
/*#__PURE__*/
function () {
  function TerminalStatusRequest() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, TerminalStatusRequest);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(TerminalStatusRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {};
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("trmnl"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].TerminalStatusRequest, data, true);
    }
  }]);

  return TerminalStatusRequest;
}();
var TerminalStatusResponse =
/*#__PURE__*/
function () {
  function TerminalStatusResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, TerminalStatusResponse);

    this._m = m;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(TerminalStatusResponse, [{
    key: "GetStatus",
    value: function GetStatus() {
      return this._m.Data.status;
    }
  }, {
    key: "GetBatteryLevel",
    value: function GetBatteryLevel() {
      return parseInt(this._m.Data.battery_level, 10);
    }
  }, {
    key: "IsCharging",
    value: function IsCharging() {
      return !!this._m.Data.charging;
    }
  }]);

  return TerminalStatusResponse;
}();
var TerminalBattery = function TerminalBattery(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, TerminalBattery);

  this.BatteryLevel = parseInt(m.Data.battery_level, 10);
};

/***/ }),

/***/ 0:
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9SYW1lblBvcy9SYW1lblBvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzc2VtYmx5cGF5bWVudHMvc3BpLWNsaWVudC1qcy9kaXN0L3NwaS1jbGllbnQtanMuanMiXSwibmFtZXMiOlsiUmFtZW5Qb3MiLCJsb2ciLCJyZWNlaXB0IiwiZmxvd19tc2ciLCJfc3BpIiwiX3Bvc0lkIiwiX2VmdHBvc0FkZHJlc3MiLCJfc3BpU2VjcmV0cyIsIl9vcHRpb25zIiwiX3ZlcnNpb24iLCJfcmNwdF9mcm9tX2VmdHBvcyIsIl9zaWdfZmxvd19mcm9tX2VmdHBvcyIsIl9hcGlLZXkiLCJfc2VyaWFsTnVtYmVyIiwiX2FjcXVpcmVyQ29kZSIsIl9hdXRvUmVzb2x2ZUVmdHBvc0FkZHJlc3MiLCJfdGVzdE1vZGUiLCJfdXNlU2VjdXJlV2ViU29ja2V0cyIsIl9sb2ciLCJfcmVjZWlwdCIsIl9mbG93X21zZyIsImluZm8iLCJMb2FkUGVyc2lzdGVkU3RhdGUiLCJTcGkiLCJDb25maWciLCJQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyIsIlNpZ25hdHVyZUZsb3dPbkVmdHBvcyIsIlNldFBvc0luZm8iLCJTZXRBY3F1aXJlckNvZGUiLCJTZXREZXZpY2VBcGlLZXkiLCJUcmFuc2FjdGlvbk9wdGlvbnMiLCJTZXRDdXN0b21lclJlY2VpcHRIZWFkZXIiLCJTZXRDdXN0b21lclJlY2VpcHRGb290ZXIiLCJTZXRNZXJjaGFudFJlY2VpcHRIZWFkZXIiLCJTZXRNZXJjaGFudFJlY2VpcHRGb290ZXIiLCJlIiwiTWVzc2FnZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIk9uRGV2aWNlQWRkcmVzc0NoYW5nZWQiLCJkZXRhaWwiLCJPblNwaVN0YXR1c0NoYW5nZWQiLCJPblBhaXJpbmdGbG93U3RhdGVDaGFuZ2VkIiwiT25TZWNyZXRzQ2hhbmdlZCIsIk9uVHhGbG93U3RhdGVDaGFuZ2VkIiwiUHJpbnRpbmdSZXNwb25zZSIsIkhhbmRsZVByaW50aW5nUmVzcG9uc2UiLCJiaW5kIiwiVGVybWluYWxTdGF0dXNSZXNwb25zZSIsIkhhbmRsZVRlcm1pbmFsU3RhdHVzUmVzcG9uc2UiLCJCYXR0ZXJ5TGV2ZWxDaGFuZ2VkIiwiSGFuZGxlQmF0dGVyeUxldmVsQ2hhbmdlZCIsIlNldEF1dG9BZGRyZXNzUmVzb2x1dGlvblN0YXRlIiwiU3RhcnQiLCJDbGVhciIsIkluZm8iLCJQcmludFN0YXR1c0FuZEFjdGlvbnMiLCJBY2NlcHRVc2VySW5wdXQiLCJBcGlLZXkiLCJTZXJpYWxOdW1iZXIiLCJ0eFN0YXRlIiwicGFpcmluZ0Zsb3dTdGF0ZSIsInNlY3JldHMiLCJFbmNLZXkiLCJIbWFjS2V5IiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJzcGlTdGF0dXMiLCJkZXZpY2VBZGRyZXNzU3RhdHVzIiwiZWZ0cG9zQWRkcmVzcyIsImdldEVsZW1lbnRCeUlkIiwiRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZSIsIlNVQ0NFU1MiLCJ2YWx1ZSIsIkFkZHJlc3MiLCJhbGVydCIsIklOVkFMSURfU0VSSUFMX05VTUJFUiIsIlJlc3BvbnNlU3RhdHVzRGVzY3JpcHRpb24iLCJSZXNwb25zZU1lc3NhZ2UiLCJERVZJQ0VfU0VSVklDRV9FUlJPUiIsIkFERFJFU1NfTk9UX0NIQU5HRUQiLCJTRVJJQUxfTlVNQkVSX05PVF9DSEFOR0VEIiwibWVzc2FnZSIsInByaW50aW5nUmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJnZXRFcnJvclJlYXNvbiIsImdldEVycm9yRGV0YWlsIiwiQWNrRmxvd0VuZGVkQW5kQmFja1RvSWRsZSIsInRlcm1pbmFsU3RhdHVzUmVzcG9uc2UiLCJHZXRTdGF0dXMiLCJHZXRCYXR0ZXJ5TGV2ZWwiLCJJc0NoYXJnaW5nIiwiY2xlYXIiLCJ0ZXJtaW5hbEJhdHRlcnkiLCJUZXJtaW5hbEJhdHRlcnkiLCJCYXR0ZXJ5TGV2ZWwiLCJQcmludEZsb3dJbmZvIiwiUHJpbnRBY3Rpb25zIiwiUHJpbnRQYWlyaW5nU3RhdHVzIiwiQ3VycmVudEZsb3ciLCJTcGlGbG93IiwiUGFpcmluZyIsInBhaXJpbmdTdGF0ZSIsIkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlIiwiRmluaXNoZWQiLCJTdWNjZXNzZnVsIiwiQ29uZmlybWF0aW9uQ29kZSIsIkF3YWl0aW5nQ2hlY2tGcm9tRWZ0cG9zIiwiQXdhaXRpbmdDaGVja0Zyb21Qb3MiLCJUcmFuc2FjdGlvbiIsIkN1cnJlbnRUeEZsb3dTdGF0ZSIsIkRpc3BsYXlNZXNzYWdlIiwiUG9zUmVmSWQiLCJUeXBlIiwiQW1vdW50Q2VudHMiLCJ0b0ZpeGVkIiwiQXdhaXRpbmdTaWduYXR1cmVDaGVjayIsIkF0dGVtcHRpbmdUb0NhbmNlbCIsIlN1Y2Nlc3MiLCJTaWduYXR1cmVSZXF1aXJlZE1lc3NhZ2UiLCJHZXRNZXJjaGFudFJlY2VpcHQiLCJ0cmltIiwiQXdhaXRpbmdQaG9uZUZvckF1dGgiLCJQaG9uZUZvckF1dGhSZXF1aXJlZE1lc3NhZ2UiLCJHZXRQaG9uZU51bWJlciIsIkdldE1lcmNoYW50SWQiLCJUcmFuc2FjdGlvblR5cGUiLCJQdXJjaGFzZSIsIkhhbmRsZUZpbmlzaGVkUHVyY2hhc2UiLCJSZWZ1bmQiLCJIYW5kbGVGaW5pc2hlZFJlZnVuZCIsIkNhc2hvdXRPbmx5IiwiSGFuZGxlRmluaXNoZWRDYXNob3V0IiwiTU9UTyIsIkhhbmRsZUZpbmlzaGVkTW90byIsIlNldHRsZSIsIkhhbmRsZUZpbmlzaGVkU2V0dGxlIiwiU2V0dGxlbWVudEVucXVpcnkiLCJIYW5kbGVGaW5pc2hlZFNldHRsZW1lbnRFbnF1aXJ5IiwiR2V0TGFzdFRyYW5zYWN0aW9uIiwiSGFuZGxlRmluaXNoZWRHZXRMYXN0VHJhbnNhY3Rpb24iLCJFcnJvciIsInB1cmNoYXNlUmVzcG9uc2UiLCJTdWNjZXNzU3RhdGUiLCJQdXJjaGFzZVJlc3BvbnNlIiwiUmVzcG9uc2UiLCJHZXRSZXNwb25zZVRleHQiLCJHZXRSUk4iLCJTY2hlbWVOYW1lIiwiV2FzQ3VzdG9tZXJSZWNlaXB0UHJpbnRlZCIsIkdldEN1c3RvbWVyUmVjZWlwdCIsIkdldFB1cmNoYXNlQW1vdW50IiwiR2V0VGlwQW1vdW50IiwiR2V0U3VyY2hhcmdlQW1vdW50IiwiR2V0Q2FzaG91dEFtb3VudCIsIkdldEJhbmtOb25DYXNoQW1vdW50IiwiR2V0QmFua0Nhc2hBbW91bnQiLCJGYWlsZWQiLCJHZXRFcnJvciIsIkdldEVycm9yRGV0YWlsIiwiVW5rbm93biIsInJlZnVuZFJlc3BvbnNlIiwiUmVmdW5kUmVzcG9uc2UiLCJHZXRSZWZ1bmRBbW91bnQiLCJjYXNob3V0UmVzcG9uc2UiLCJDYXNob3V0T25seVJlc3BvbnNlIiwibW90b1Jlc3BvbnNlIiwiTW90b1B1cmNoYXNlUmVzcG9uc2UiLCJHZXRDYXJkRW50cnkiLCJnbHRSZXNwb25zZSIsIkdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlIiwicG9zX3JlZl9pZCIsImxlbmd0aCIsInN1Y2Nlc3MiLCJHbHRNYXRjaCIsInNldHRsZVJlc3BvbnNlIiwiU2V0dGxlbWVudCIsIkdldFJlY2VpcHQiLCJHZXRQZXJpb2RTdGFydFRpbWUiLCJHZXRQZXJpb2RFbmRUaW1lIiwiR2V0VHJpZ2dlcmVkVGltZSIsIkdldFRyYW5zYWN0aW9uUmFuZ2UiLCJHZXRUZXJtaW5hbElkIiwiR2V0VG90YWxDb3VudCIsIkdldFRvdGFsVmFsdWUiLCJHZXRTZXR0bGVCeUFjcXVpcmVyQ291bnQiLCJHZXRTZXR0bGVCeUFjcXVpcmVyVmFsdWUiLCJzY2hlbWVzIiwiR2V0U2NoZW1lU2V0dGxlbWVudEVudHJpZXMiLCJzIiwiSlNPTiIsInN0cmluZ2lmeSIsImlucHV0c0VuYWJsZWQiLCJzdGF0dXNFbCIsInByaW1hcnlTdGF0dXNFbCIsImZsb3dTdGF0dXNFbCIsImZsb3dTdGF0dXNIZWFkaW5nIiwiZGF0YXNldCIsIkN1cnJlbnRTdGF0dXMiLCJpbm5lclRleHQiLCJTcGlTdGF0dXMiLCJVbnBhaXJlZCIsIklkbGUiLCJwdXNoIiwiSXNVbmtub3duU3RhdHVzIiwiUGFpcmVkQ29ubmVjdGluZyIsIlBhaXJlZENvbm5lY3RlZCIsImlucHV0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwiZGlzYWJsZWQiLCJmb3JFYWNoIiwiaW5wdXQiLCJHZXRWZXJzaW9uIiwiU2V0VGVzdE1vZGUiLCJTZXRTZWN1cmVXZWJTb2NrZXRzIiwiU2V0QXV0b0FkZHJlc3NSZXNvbHV0aW9uIiwicHJldmVudERlZmF1bHQiLCJjaGVja2VkIiwiU2V0UG9zSWQiLCJTZXRFZnRwb3NBZGRyZXNzIiwiU2V0U2VyaWFsTnVtYmVyIiwiaXNTZWN1cmUiLCJQYWlyIiwiUGFpcmluZ0NvbmZpcm1Db2RlIiwiUGFpcmluZ0NhbmNlbCIsIlVucGFpciIsInBvc1JlZklkIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicHVyY2hhc2VBbW91bnQiLCJwYXJzZUludCIsInRpcEFtb3VudCIsImNhc2hvdXRBbW91bnQiLCJzdXJjaGFyZ2VBbW91bnQiLCJwcm9tcHRGb3JDYXNob3V0IiwicmVzIiwiSW5pdGlhdGVQdXJjaGFzZVR4VjIiLCJJbml0aWF0ZWQiLCJhbW91bnQiLCJzdXBwcmVzc01lcmNoYW50UGFzc3dvcmQiLCJJbml0aWF0ZVJlZnVuZFR4IiwiSW5pdGlhdGVDYXNob3V0T25seVR4IiwiSW5pdGlhdGVNb3RvUHVyY2hhc2VUeCIsIkFjY2VwdFNpZ25hdHVyZSIsIkNhbmNlbFRyYW5zYWN0aW9uIiwiYXV0aENvZGUiLCJTdWJtaXRBdXRoQ29kZSIsIlZhbGlkRm9ybWF0IiwiSW5pdGlhdGVTZXR0bGVUeCIsIlJlcXVlc3RJZEhlbHBlciIsIklkIiwiSW5pdGlhdGVTZXR0bGVtZW50RW5xdWlyeSIsIlByaW50TWVyY2hhbnRDb3B5IiwiU2FuaXRpemVQcmludFRleHQiLCJoZWFkZXIiLCJmb290ZXIiLCJwYXlsb2FkIiwiUHJpbnRSZWNlaXB0IiwiR2V0VGVybWluYWxTdGF0dXMiLCJpbm5lckhUTUwiLCJJbml0aWF0ZVJlY292ZXJ5IiwiSW5pdGlhdGVHZXRMYXN0VHgiLCJnZXRJdGVtIiwiU2VjcmV0cyIsInByaW50VGV4dCIsInJlcGxhY2UiLCJjb25zb2xlIiwiTG9nZ2VyIiwicG9zIiwiZXJyIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO1FDVkE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLEdBQUc7O1FBRUg7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLEtBQUs7UUFDTDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxNQUFNO1FBQ047UUFDQTtRQUNBLE1BQU07UUFDTjtRQUNBO1FBQ0EsTUFBTTtRQUNOO1FBQ0E7UUFDQTtRQUNBLE9BQU87UUFDUDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxJQUFJO1FBQ0o7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxNQUFNO1FBQ047UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsS0FBSztRQUNMO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsTUFBTTtRQUNOO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxLQUFLOztRQUVMO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLDZCQUE2QjtRQUM3Qiw2QkFBNkI7UUFDN0I7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EscUJBQXFCLGdCQUFnQjtRQUNyQztRQUNBO1FBQ0EsS0FBSztRQUNMO1FBQ0E7UUFDQTtRQUNBLHFCQUFxQixnQkFBZ0I7UUFDckM7UUFDQTtRQUNBLEtBQUs7UUFDTDtRQUNBO1FBQ0EsS0FBSztRQUNMO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTtRQUNBO1FBQ0EsS0FBSzs7UUFFTDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTtRQUNBLEtBQUs7UUFDTDtRQUNBO1FBQ0E7UUFDQSxLQUFLOztRQUVMO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQSxrQkFBa0IsOEJBQThCO1FBQ2hEO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsS0FBSztRQUNMO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLElBQUk7UUFDSjs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLElBQUk7UUFDSjtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLE1BQU07UUFDTjtRQUNBO1FBQ0E7UUFDQSxPQUFPO1FBQ1A7UUFDQTtRQUNBO1FBQ0E7UUFDQSxJQUFJO1FBQ0o7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLG9CQUFvQiwyQkFBMkI7UUFDL0M7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLE9BQU87UUFDUDtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0EsbUJBQW1CLGNBQWM7UUFDakM7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLGdCQUFnQixLQUFLO1FBQ3JCO1FBQ0E7UUFDQTtRQUNBLE1BQU07UUFDTjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsZ0JBQWdCLFlBQVk7UUFDNUI7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQSxjQUFjLDRCQUE0QjtRQUMxQztRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLE1BQU07UUFDTjtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLElBQUk7O1FBRUo7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBOztRQUVBO1FBQ0E7UUFDQSxlQUFlLDRCQUE0QjtRQUMzQztRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBLGVBQWUsNEJBQTRCO1FBQzNDO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxpQkFBaUIsdUNBQXVDO1FBQ3hEO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsaUJBQWlCLHVDQUF1QztRQUN4RDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLGlCQUFpQixzQkFBc0I7UUFDdkM7UUFDQTtRQUNBO1FBQ0EsUUFBUTtRQUNSO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLFVBQVU7UUFDVjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQSxjQUFjLHdDQUF3QztRQUN0RDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsS0FBSztRQUNMO1FBQ0E7UUFDQTtRQUNBLE9BQU87UUFDUDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxTQUFTO1FBQ1Q7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsTUFBTTtRQUNOO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxRQUFRO1FBQ1I7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSxJQUFJO1FBQ0o7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxlQUFlO1FBQ2Y7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLDBDQUEwQyxnQ0FBZ0M7UUFDMUU7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSx3REFBd0Qsa0JBQWtCO1FBQzFFO1FBQ0EsaURBQWlELGNBQWM7UUFDL0Q7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLHlDQUF5QyxpQ0FBaUM7UUFDMUUsZ0hBQWdILG1CQUFtQixFQUFFO1FBQ3JJO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMkJBQTJCLDBCQUEwQixFQUFFO1FBQ3ZELGlDQUFpQyxlQUFlO1FBQ2hEO1FBQ0E7UUFDQTs7UUFFQTtRQUNBLHNEQUFzRCwrREFBK0Q7O1FBRXJIO1FBQ0E7O1FBRUE7UUFDQSxzQ0FBc0MsdUJBQXVCOzs7UUFHN0Q7UUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Q0Nud0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLElBQU1BLFFBQWI7QUFBQTtBQUFBO0FBRUksb0JBQVlDLEdBQVosRUFBaUJDLE9BQWpCLEVBQTBCQyxRQUExQixFQUNBO0FBQUE7O0FBQ0ksU0FBS0MsSUFBTCxHQUFZLElBQVo7QUFDQSxTQUFLQyxNQUFMLEdBQWMsV0FBZDtBQUNBLFNBQUtDLGNBQUwsR0FBc0IsYUFBdEI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixJQUFoQjtBQUNBLFNBQUtDLFFBQUwsR0FBZ0IsT0FBaEI7QUFDQSxTQUFLQyxpQkFBTCxHQUF5QixLQUF6QjtBQUNBLFNBQUtDLHFCQUFMLEdBQTZCLEtBQTdCO0FBRUEsU0FBS0MsT0FBTCxHQUF1QixJQUF2QjtBQUNBLFNBQUtDLGFBQUwsR0FBdUIsRUFBdkI7QUFDQSxTQUFLQyxhQUFMLEdBQXVCLEtBQXZCO0FBQ0EsU0FBS0MseUJBQUwsR0FBa0MsS0FBbEM7QUFDQSxTQUFLQyxTQUFMLEdBQXVCLElBQXZCO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIsS0FBNUI7QUFFQSxTQUFLQyxJQUFMLEdBQVlqQixHQUFaO0FBQ0EsU0FBS2tCLFFBQUwsR0FBZ0JqQixPQUFoQjtBQUNBLFNBQUtrQixTQUFMLEdBQWlCakIsUUFBakI7QUFDSDs7QUF2Qkw7QUFBQTtBQUFBLDRCQTBCSTtBQUFBOztBQUNJLFdBQUtlLElBQUwsQ0FBVUcsSUFBVixDQUFlLHNCQUFmOztBQUNBLFdBQUtDLGtCQUFMOztBQUVBLFVBQ0E7QUFDSSxhQUFLbEIsSUFBTCxHQUFZLElBQUltQixzRkFBSixDQUFRLEtBQUtsQixNQUFiLEVBQXFCLEtBQUtRLGFBQTFCLEVBQXlDLEtBQUtQLGNBQTlDLEVBQThELEtBQUtDLFdBQW5FLENBQVosQ0FESixDQUNpRzs7QUFDN0YsYUFBS0gsSUFBTCxDQUFVb0IsTUFBVixDQUFpQkMsNkJBQWpCLEdBQWlELEtBQUtmLGlCQUF0RDtBQUNBLGFBQUtOLElBQUwsQ0FBVW9CLE1BQVYsQ0FBaUJFLHFCQUFqQixHQUF5QyxLQUFLZixxQkFBOUM7O0FBRUEsYUFBS1AsSUFBTCxDQUFVdUIsVUFBVixDQUFxQixVQUFyQixFQUFpQyxLQUFLbEIsUUFBdEM7O0FBQ0EsYUFBS0wsSUFBTCxDQUFVd0IsZUFBVixDQUEwQixLQUFLZCxhQUEvQjs7QUFDQSxhQUFLVixJQUFMLENBQVV5QixlQUFWLENBQTBCLEtBQUtqQixPQUEvQjs7QUFFQSxhQUFLSixRQUFMLEdBQWdCLElBQUlzQixxR0FBSixFQUFoQjs7QUFDQSxhQUFLdEIsUUFBTCxDQUFjdUIsd0JBQWQsQ0FBdUMsRUFBdkM7O0FBQ0EsYUFBS3ZCLFFBQUwsQ0FBY3dCLHdCQUFkLENBQXVDLEVBQXZDOztBQUNBLGFBQUt4QixRQUFMLENBQWN5Qix3QkFBZCxDQUF1QyxFQUF2Qzs7QUFDQSxhQUFLekIsUUFBTCxDQUFjMEIsd0JBQWQsQ0FBdUMsRUFBdkM7QUFDSCxPQWZELENBZ0JBLE9BQU9DLENBQVAsRUFDQTtBQUNJLGFBQUtqQixJQUFMLENBQVVHLElBQVYsQ0FBZWMsQ0FBQyxDQUFDQyxPQUFqQjs7QUFDQTtBQUNIOztBQUVEQyxjQUFRLENBQUNDLGdCQUFULENBQTBCLHNCQUExQixFQUFrRCxVQUFDSCxDQUFEO0FBQUEsZUFBTyxLQUFJLENBQUNJLHNCQUFMLENBQTRCSixDQUFDLENBQUNLLE1BQTlCLENBQVA7QUFBQSxPQUFsRDtBQUNBSCxjQUFRLENBQUNDLGdCQUFULENBQTBCLGVBQTFCLEVBQTJDLFVBQUNILENBQUQ7QUFBQSxlQUFPLEtBQUksQ0FBQ00sa0JBQUwsQ0FBd0JOLENBQUMsQ0FBQ0ssTUFBMUIsQ0FBUDtBQUFBLE9BQTNDO0FBQ0FILGNBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIseUJBQTFCLEVBQXFELFVBQUNILENBQUQ7QUFBQSxlQUFPLEtBQUksQ0FBQ08seUJBQUwsQ0FBK0JQLENBQUMsQ0FBQ0ssTUFBakMsQ0FBUDtBQUFBLE9BQXJEO0FBQ0FILGNBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsZ0JBQTFCLEVBQTRDLFVBQUNILENBQUQ7QUFBQSxlQUFPLEtBQUksQ0FBQ1EsZ0JBQUwsQ0FBc0JSLENBQUMsQ0FBQ0ssTUFBeEIsQ0FBUDtBQUFBLE9BQTVDO0FBQ0FILGNBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsb0JBQTFCLEVBQWdELFVBQUNILENBQUQ7QUFBQSxlQUFPLEtBQUksQ0FBQ1Msb0JBQUwsQ0FBMEJULENBQUMsQ0FBQ0ssTUFBNUIsQ0FBUDtBQUFBLE9BQWhEO0FBRUEsV0FBS3BDLElBQUwsQ0FBVXlDLGdCQUFWLEdBQTZCLEtBQUtDLHNCQUFMLENBQTRCQyxJQUE1QixDQUFpQyxJQUFqQyxDQUE3QjtBQUNBLFdBQUszQyxJQUFMLENBQVU0QyxzQkFBVixHQUFtQyxLQUFLQyw0QkFBTCxDQUFrQ0YsSUFBbEMsQ0FBdUMsSUFBdkMsQ0FBbkM7QUFDQSxXQUFLM0MsSUFBTCxDQUFVOEMsbUJBQVYsR0FBZ0MsS0FBS0MseUJBQUwsQ0FBK0JKLElBQS9CLENBQW9DLElBQXBDLENBQWhDO0FBRUEsV0FBS0ssNkJBQUw7O0FBQ0EsV0FBS2hELElBQUwsQ0FBVWlELEtBQVY7O0FBRUEsV0FBS2pDLFNBQUwsQ0FBZWtDLEtBQWY7O0FBQ0EsV0FBS2xDLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IseUJBQXBCOztBQUVBLFdBQUtDLHFCQUFMO0FBQ0EsV0FBS0MsZUFBTDtBQUNIO0FBdEVMO0FBQUE7QUFBQSwyQ0F5RUk7QUFDSSxhQUFPO0FBQ0hDLGNBQU0sRUFBRSxLQUFLOUMsT0FEVjtBQUVIK0Msb0JBQVksRUFBRSxLQUFLOUM7QUFGaEIsT0FBUDtBQUlIO0FBOUVMO0FBQUE7QUFBQSx5Q0FnRnlCK0MsT0FoRnpCLEVBaUZJO0FBQ0ksV0FBS3hDLFNBQUwsQ0FBZWtDLEtBQWY7O0FBQ0EsV0FBS0UscUJBQUw7O0FBQ0EsV0FBS3BDLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IsSUFBcEI7QUFDSDtBQXJGTDtBQUFBO0FBQUEsOENBdUY4Qk0sZ0JBdkY5QixFQXdGSTtBQUNJLFdBQUt6QyxTQUFMLENBQWVrQyxLQUFmOztBQUNBLFdBQUtFLHFCQUFMOztBQUNBLFdBQUtwQyxTQUFMLENBQWVtQyxJQUFmLENBQW9CLElBQXBCO0FBQ0g7QUE1Rkw7QUFBQTtBQUFBLHFDQThGcUJPLE9BOUZyQixFQStGSTtBQUNJLFdBQUt2RCxXQUFMLEdBQW1CdUQsT0FBbkI7O0FBQ0EsVUFBSUEsT0FBTyxJQUFJLElBQWYsRUFDQTtBQUNJLGFBQUs1QyxJQUFMLENBQVVHLElBQVYsNkJBQW9DeUMsT0FBTyxDQUFDQyxNQUE1QyxTQUFxREQsT0FBTyxDQUFDRSxPQUE3RDs7QUFDQUMsb0JBQVksQ0FBQ0MsT0FBYixDQUFxQixRQUFyQixFQUErQkosT0FBTyxDQUFDQyxNQUF2QztBQUNBRSxvQkFBWSxDQUFDQyxPQUFiLENBQXFCLFNBQXJCLEVBQWdDSixPQUFPLENBQUNFLE9BQXhDO0FBQ0gsT0FMRCxNQU9BO0FBQ0ksYUFBSzlDLElBQUwsQ0FBVUcsSUFBVjs7QUFDQTRDLG9CQUFZLENBQUNFLFVBQWIsQ0FBd0IsUUFBeEI7QUFDQUYsb0JBQVksQ0FBQ0UsVUFBYixDQUF3QixTQUF4QjtBQUNIO0FBQ0osS0E3R0wsQ0ErR0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFuSEo7QUFBQTtBQUFBLHVDQW9IdUJDLFNBcEh2QixFQXFISTtBQUNJLFdBQUtoRCxTQUFMLENBQWVrQyxLQUFmOztBQUNBLFdBQUtsQyxTQUFMLENBQWVtQyxJQUFmLHFDQUFpRGEsU0FBakQ7O0FBQ0EsV0FBS1oscUJBQUw7QUFDSDtBQXpITDtBQUFBO0FBQUEsMkNBMkgyQmEsbUJBM0gzQixFQTRISTtBQUNJLFVBQUlDLGFBQWEsR0FBR2pDLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsZ0JBQXhCLENBQXBCOztBQUVBLGNBQU9GLG1CQUFtQixDQUFDRyx5QkFBM0I7QUFFSSxhQUFLQSw0R0FBeUIsQ0FBQ0MsT0FBL0I7QUFDSUgsdUJBQWEsQ0FBQ0ksS0FBZCxHQUFzQkwsbUJBQW1CLENBQUNNLE9BQTFDO0FBQ0EsZUFBS3JFLGNBQUwsR0FBc0IrRCxtQkFBbUIsQ0FBQ00sT0FBMUM7QUFDQUMsZUFBSyw4Q0FBdUNQLG1CQUFtQixDQUFDTSxPQUEzRCxFQUFMO0FBQ0E7O0FBQ0osYUFBS0gsNEdBQXlCLENBQUNLLHFCQUEvQjtBQUNJUCx1QkFBYSxDQUFDSSxLQUFkLEdBQXNCLEVBQXRCO0FBQ0EsZUFBS3BFLGNBQUwsR0FBc0IsRUFBdEI7QUFDQXNFLGVBQUssQ0FBQyxtQ0FBbUNQLG1CQUFtQixDQUFDUyx5QkFBdkQsR0FBbUYsS0FBbkYsR0FBMkZULG1CQUFtQixDQUFDVSxlQUFoSCxDQUFMO0FBQ0E7O0FBQ0osYUFBS1AsNEdBQXlCLENBQUNRLG9CQUEvQjtBQUNJVix1QkFBYSxDQUFDSSxLQUFkLEdBQXNCLEVBQXRCO0FBQ0EsZUFBS3BFLGNBQUwsR0FBc0IsRUFBdEI7QUFDQXNFLGVBQUssQ0FBQywrQkFBK0JQLG1CQUFtQixDQUFDUyx5QkFBbkQsR0FBK0UsS0FBL0UsR0FBdUZULG1CQUFtQixDQUFDVSxlQUE1RyxDQUFMO0FBQ0E7O0FBQ0osYUFBS1AsNEdBQXlCLENBQUNTLG1CQUEvQjtBQUNJTCxlQUFLLENBQUMsa0NBQUQsQ0FBTDtBQUNBOztBQUNKLGFBQUtKLDRHQUF5QixDQUFDVSx5QkFBL0I7QUFDSU4sZUFBSyxDQUFDLHFDQUFELENBQUw7QUFDQTs7QUFDSjtBQUNJQSxlQUFLLENBQUMsbUVBQUQsQ0FBTDtBQUNBO0FBekJSO0FBMkJIO0FBMUpMO0FBQUE7QUFBQSwyQ0E0SjJCTyxPQTVKM0IsRUE2Skk7QUFDSSxXQUFLL0QsU0FBTCxDQUFla0MsS0FBZjs7QUFDQSxVQUFJOEIsZ0JBQWdCLEdBQUcsSUFBSXZDLG1HQUFKLENBQXFCc0MsT0FBckIsQ0FBdkI7O0FBRUEsVUFBSUMsZ0JBQWdCLENBQUNDLFNBQWpCLEVBQUosRUFDQTtBQUNJLGFBQUtqRSxTQUFMLENBQWVtQyxJQUFmLENBQW9CLHNEQUFwQjtBQUNILE9BSEQsTUFLQTtBQUNJLGFBQUtuQyxTQUFMLENBQWVtQyxJQUFmLENBQW9CLGlFQUFpRTZCLGdCQUFnQixDQUFDRSxjQUFqQixFQUFqRSxHQUFxRyxhQUFyRyxHQUFxSEYsZ0JBQWdCLENBQUNHLGNBQWpCLEVBQXpJO0FBQ0g7O0FBRUQsV0FBS25GLElBQUwsQ0FBVW9GLHlCQUFWOztBQUNBLFdBQUtoQyxxQkFBTDtBQUNIO0FBNUtMO0FBQUE7QUFBQSxpREE4S2lDMkIsT0E5S2pDLEVBK0tJO0FBQ0ksV0FBSy9ELFNBQUwsQ0FBZWtDLEtBQWY7O0FBQ0EsVUFBSW1DLHNCQUFzQixHQUFHLElBQUl6Qyx5R0FBSixDQUEyQm1DLE9BQTNCLENBQTdCOztBQUNBLFdBQUsvRCxTQUFMLENBQWVtQyxJQUFmLENBQW9CLDhCQUFwQjs7QUFDQSxXQUFLbkMsU0FBTCxDQUFlbUMsSUFBZixDQUFvQixlQUFla0Msc0JBQXNCLENBQUNDLFNBQXZCLEVBQW5DOztBQUNBLFdBQUt0RSxTQUFMLENBQWVtQyxJQUFmLENBQW9CLHNCQUFzQmtDLHNCQUFzQixDQUFDRSxlQUF2QixFQUF0QixHQUFpRSxHQUFyRjs7QUFDQSxXQUFLdkUsU0FBTCxDQUFlbUMsSUFBZixDQUFvQixpQkFBaUJrQyxzQkFBc0IsQ0FBQ0csVUFBdkIsRUFBckM7O0FBQ0EsV0FBS3hGLElBQUwsQ0FBVW9GLHlCQUFWOztBQUNBLFdBQUtoQyxxQkFBTDtBQUNIO0FBeExMO0FBQUE7QUFBQSw4Q0EwTDhCMkIsT0ExTDlCLEVBMkxJO0FBQ0ksV0FBS2pFLElBQUwsQ0FBVTJFLEtBQVY7O0FBQ0EsVUFBSUMsZUFBZSxHQUFHLElBQUlDLGtHQUFKLENBQW9CWixPQUFwQixDQUF0Qjs7QUFDQSxXQUFLL0QsU0FBTCxDQUFlbUMsSUFBZixDQUFvQiwyQkFBcEI7O0FBQ0EsV0FBS25DLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0Isc0JBQXNCdUMsZUFBZSxDQUFDRSxZQUF0QyxHQUFxRCxHQUF6RTs7QUFDQSxXQUFLNUYsSUFBTCxDQUFVb0YseUJBQVY7O0FBQ0EsV0FBS2hDLHFCQUFMO0FBQ0g7QUFsTUw7QUFBQTtBQUFBLDRDQXFNSTtBQUNJLFdBQUt5QyxhQUFMO0FBRUEsV0FBS0MsWUFBTDtBQUVBLFdBQUtDLGtCQUFMO0FBQ0g7QUEzTUw7QUFBQTtBQUFBLG9DQThNSTtBQUNJLGNBQVEsS0FBSy9GLElBQUwsQ0FBVWdHLFdBQWxCO0FBRUksYUFBS0MsMEZBQU8sQ0FBQ0MsT0FBYjtBQUNJLGNBQUlDLFlBQVksR0FBRyxLQUFLbkcsSUFBTCxDQUFVb0csdUJBQTdCOztBQUNBLGVBQUtwRixTQUFMLENBQWVtQyxJQUFmLENBQW9CLGdDQUFwQjs7QUFDQSxlQUFLbkMsU0FBTCxDQUFlbUMsSUFBZixhQUF5QmdELFlBQVksQ0FBQ25FLE9BQXRDOztBQUNBLGVBQUtoQixTQUFMLENBQWVtQyxJQUFmLHVCQUFtQ2dELFlBQVksQ0FBQ0UsUUFBaEQ7O0FBQ0EsZUFBS3JGLFNBQUwsQ0FBZW1DLElBQWYseUJBQXFDZ0QsWUFBWSxDQUFDRyxVQUFsRDs7QUFDQSxlQUFLdEYsU0FBTCxDQUFlbUMsSUFBZixnQ0FBNENnRCxZQUFZLENBQUNJLGdCQUF6RDs7QUFDQSxlQUFLdkYsU0FBTCxDQUFlbUMsSUFBZiwwQ0FBc0RnRCxZQUFZLENBQUNLLHVCQUFuRTs7QUFDQSxlQUFLeEYsU0FBTCxDQUFlbUMsSUFBZix1Q0FBbURnRCxZQUFZLENBQUNNLG9CQUFoRTs7QUFDQTs7QUFFSixhQUFLUiwwRkFBTyxDQUFDUyxXQUFiO0FBQ0ksY0FBSWxELE9BQU8sR0FBRyxLQUFLeEQsSUFBTCxDQUFVMkcsa0JBQXhCOztBQUNBLGVBQUszRixTQUFMLENBQWVtQyxJQUFmLENBQW9CLDJCQUFwQjs7QUFDQSxlQUFLbkMsU0FBTCxDQUFlbUMsSUFBZixhQUF5QkssT0FBTyxDQUFDb0QsY0FBakM7O0FBQ0EsZUFBSzVGLFNBQUwsQ0FBZW1DLElBQWYsdUJBQW1DSyxPQUFPLENBQUNxRCxRQUEzQzs7QUFDQSxlQUFLN0YsU0FBTCxDQUFlbUMsSUFBZixtQkFBK0JLLE9BQU8sQ0FBQ3NELElBQXZDOztBQUNBLGVBQUs5RixTQUFMLENBQWVtQyxJQUFmLHNCQUFrQyxDQUFDSyxPQUFPLENBQUN1RCxXQUFSLEdBQXNCLEtBQXZCLEVBQThCQyxPQUE5QixDQUFzQyxDQUF0QyxDQUFsQzs7QUFDQSxlQUFLaEcsU0FBTCxDQUFlbUMsSUFBZixvQ0FBZ0RLLE9BQU8sQ0FBQ3lELHNCQUF4RDs7QUFDQSxlQUFLakcsU0FBTCxDQUFlbUMsSUFBZixvQ0FBZ0RLLE9BQU8sQ0FBQzBELGtCQUF4RDs7QUFDQSxlQUFLbEcsU0FBTCxDQUFlbUMsSUFBZix1QkFBbUNLLE9BQU8sQ0FBQzZDLFFBQTNDOztBQUNBLGVBQUtyRixTQUFMLENBQWVtQyxJQUFmLHNCQUFrQ0ssT0FBTyxDQUFDMkQsT0FBMUM7O0FBRUEsY0FBSTNELE9BQU8sQ0FBQ3lELHNCQUFaLEVBQ0E7QUFDSTtBQUNBLGlCQUFLakcsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxpQkFBS3BDLFFBQUwsQ0FBY29DLElBQWQsQ0FBbUJLLE9BQU8sQ0FBQzRELHdCQUFSLENBQWlDQyxrQkFBakMsR0FBc0RDLElBQXRELEVBQW5CO0FBQ0g7O0FBRUQsY0FBSTlELE9BQU8sQ0FBQytELG9CQUFaLEVBQ0E7QUFDSSxpQkFBS3ZHLFNBQUwsQ0FBZW1DLElBQWY7O0FBQ0EsaUJBQUtuQyxTQUFMLENBQWVtQyxJQUFmLG1CQUErQkssT0FBTyxDQUFDZ0UsMkJBQVIsQ0FBb0NDLGNBQXBDLEVBQS9COztBQUNBLGlCQUFLekcsU0FBTCxDQUFlbUMsSUFBZixpQ0FBNkNLLE9BQU8sQ0FBQ2dFLDJCQUFSLENBQW9DRSxhQUFwQyxFQUE3QztBQUNIOztBQUVELGNBQUlsRSxPQUFPLENBQUM2QyxRQUFaLEVBQ0E7QUFDSSxvQkFBUTdDLE9BQU8sQ0FBQ3NELElBQWhCO0FBRUksbUJBQUthLGtHQUFlLENBQUNDLFFBQXJCO0FBQ0kscUJBQUtDLHNCQUFMLENBQTRCckUsT0FBNUI7QUFDQTs7QUFDSixtQkFBS21FLGtHQUFlLENBQUNHLE1BQXJCO0FBQ0kscUJBQUtDLG9CQUFMLENBQTBCdkUsT0FBMUI7QUFDQTs7QUFDSixtQkFBS21FLGtHQUFlLENBQUNLLFdBQXJCO0FBQ0kscUJBQUtDLHFCQUFMLENBQTJCekUsT0FBM0I7QUFDQTs7QUFDSixtQkFBS21FLGtHQUFlLENBQUNPLElBQXJCO0FBQ0kscUJBQUtDLGtCQUFMLENBQXdCM0UsT0FBeEI7QUFDQTs7QUFDSixtQkFBS21FLGtHQUFlLENBQUNTLE1BQXJCO0FBQ0kscUJBQUtDLG9CQUFMLENBQTBCN0UsT0FBMUI7QUFDQTs7QUFDSixtQkFBS21FLGtHQUFlLENBQUNXLGlCQUFyQjtBQUNJLHFCQUFLQywrQkFBTCxDQUFxQy9FLE9BQXJDO0FBQ0E7O0FBQ0osbUJBQUttRSxrR0FBZSxDQUFDYSxrQkFBckI7QUFDSSxxQkFBS0MsZ0NBQUwsQ0FBc0NqRixPQUF0QztBQUNBOztBQUNKO0FBQ0kscUJBQUt4QyxTQUFMLENBQWUwSCxLQUFmLG1DQUFnRGxGLE9BQU8sQ0FBQ3NELElBQXhEOztBQUNBO0FBekJSO0FBMkJIOztBQUNEO0FBckVSO0FBdUVIO0FBdFJMO0FBQUE7QUFBQSwyQ0F3UjJCdEQsT0F4UjNCLEVBeVJJO0FBQ0ksVUFBSW1GLGdCQUFKOztBQUNBLGNBQVFuRixPQUFPLENBQUMyRCxPQUFoQjtBQUVJLGFBQUt5QiwrRkFBWSxDQUFDekIsT0FBbEI7QUFDSSxlQUFLbkcsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQXdGLDBCQUFnQixHQUFHLElBQUlFLG1HQUFKLENBQXFCckYsT0FBTyxDQUFDc0YsUUFBN0IsQ0FBbkI7O0FBQ0EsZUFBSzlILFNBQUwsQ0FBZW1DLElBQWYsdUJBQW1Dd0YsZ0JBQWdCLENBQUNJLGVBQWpCLEVBQW5DOztBQUNBLGVBQUsvSCxTQUFMLENBQWVtQyxJQUFmLGtCQUE4QndGLGdCQUFnQixDQUFDSyxNQUFqQixFQUE5Qjs7QUFDQSxlQUFLaEksU0FBTCxDQUFlbUMsSUFBZixxQkFBaUN3RixnQkFBZ0IsQ0FBQ00sVUFBbEQ7O0FBQ0EsZUFBS2pJLFNBQUwsQ0FBZW1DLElBQWY7O0FBQ0EsZUFBS3BDLFFBQUwsQ0FBY29DLElBQWQsQ0FBbUIsQ0FBQ3dGLGdCQUFnQixDQUFDTyx5QkFBakIsRUFBRCxHQUFnRFAsZ0JBQWdCLENBQUNRLGtCQUFqQixHQUFzQzdCLElBQXRDLEVBQWhELDBCQUFuQjs7QUFDQSxlQUFLdEcsU0FBTCxDQUFlbUMsSUFBZix1QkFBbUN3RixnQkFBZ0IsQ0FBQ1MsaUJBQWpCLEVBQW5DOztBQUNBLGVBQUtwSSxTQUFMLENBQWVtQyxJQUFmLGtCQUE4QndGLGdCQUFnQixDQUFDVSxZQUFqQixFQUE5Qjs7QUFDQSxlQUFLckksU0FBTCxDQUFlbUMsSUFBZix3QkFBb0N3RixnQkFBZ0IsQ0FBQ1csa0JBQWpCLEVBQXBDOztBQUNBLGVBQUt0SSxTQUFMLENBQWVtQyxJQUFmLHNCQUFrQ3dGLGdCQUFnQixDQUFDWSxnQkFBakIsRUFBbEM7O0FBQ0EsZUFBS3ZJLFNBQUwsQ0FBZW1DLElBQWYscUNBQWlEd0YsZ0JBQWdCLENBQUNhLG9CQUFqQixFQUFqRDs7QUFDQSxlQUFLeEksU0FBTCxDQUFlbUMsSUFBZixpQ0FBNkN3RixnQkFBZ0IsQ0FBQ2MsaUJBQWpCLEVBQTdDOztBQUNBOztBQUNKLGFBQUtiLCtGQUFZLENBQUNjLE1BQWxCO0FBQ0ksZUFBSzFJLFNBQUwsQ0FBZW1DLElBQWY7O0FBQ0EsY0FBSUssT0FBTyxDQUFDc0YsUUFBUixJQUFvQixJQUF4QixFQUNBO0FBQ0lILDRCQUFnQixHQUFHLElBQUlFLG1HQUFKLENBQXFCckYsT0FBTyxDQUFDc0YsUUFBN0IsQ0FBbkI7O0FBQ0EsaUJBQUs5SCxTQUFMLENBQWVtQyxJQUFmLG9CQUFnQ0ssT0FBTyxDQUFDc0YsUUFBUixDQUFpQmEsUUFBakIsRUFBaEM7O0FBQ0EsaUJBQUszSSxTQUFMLENBQWVtQyxJQUFmLDJCQUF1Q0ssT0FBTyxDQUFDc0YsUUFBUixDQUFpQmMsY0FBakIsRUFBdkM7O0FBQ0EsaUJBQUs1SSxTQUFMLENBQWVtQyxJQUFmLHVCQUFtQ3dGLGdCQUFnQixDQUFDSSxlQUFqQixFQUFuQzs7QUFDQSxpQkFBSy9ILFNBQUwsQ0FBZW1DLElBQWYsa0JBQThCd0YsZ0JBQWdCLENBQUNLLE1BQWpCLEVBQTlCOztBQUNBLGlCQUFLaEksU0FBTCxDQUFlbUMsSUFBZixxQkFBaUN3RixnQkFBZ0IsQ0FBQ00sVUFBbEQ7O0FBQ0EsaUJBQUtqSSxTQUFMLENBQWVtQyxJQUFmOztBQUNBLGlCQUFLcEMsUUFBTCxDQUFjb0MsSUFBZCxDQUFtQixDQUFDd0YsZ0JBQWdCLENBQUNPLHlCQUFqQixFQUFELEdBQ2JQLGdCQUFnQixDQUFDUSxrQkFBakIsR0FBc0M3QixJQUF0QyxFQURhLDBCQUFuQjtBQUdIOztBQUNEOztBQUNKLGFBQUtzQiwrRkFBWSxDQUFDaUIsT0FBbEI7QUFDSSxlQUFLN0ksU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxlQUFLbkMsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxlQUFLbkMsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxlQUFLbkMsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQTs7QUFDSjtBQUNJLGdCQUFNLElBQUl1RixLQUFKLENBQVUsMkJBQVYsQ0FBTjtBQXhDUjtBQTBDSDtBQXJVTDtBQUFBO0FBQUEseUNBdVV5QmxGLE9BdlV6QixFQXdVSTtBQUNJLFVBQUlzRyxjQUFKOztBQUNBLGNBQVF0RyxPQUFPLENBQUMyRCxPQUFoQjtBQUVJLGFBQUt5QiwrRkFBWSxDQUFDekIsT0FBbEI7QUFDSSxlQUFLbkcsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQTJHLHdCQUFjLEdBQUcsSUFBSUMsaUdBQUosQ0FBbUJ2RyxPQUFPLENBQUNzRixRQUEzQixDQUFqQjs7QUFDQSxlQUFLOUgsU0FBTCxDQUFlbUMsSUFBZix1QkFBbUMyRyxjQUFjLENBQUNmLGVBQWYsRUFBbkM7O0FBQ0EsZUFBSy9ILFNBQUwsQ0FBZW1DLElBQWYsa0JBQThCMkcsY0FBYyxDQUFDZCxNQUFmLEVBQTlCOztBQUNBLGVBQUtoSSxTQUFMLENBQWVtQyxJQUFmLHFCQUFpQzJHLGNBQWMsQ0FBQ2IsVUFBaEQ7O0FBQ0EsZUFBS2pJLFNBQUwsQ0FBZW1DLElBQWY7O0FBQ0EsZUFBS3BDLFFBQUwsQ0FBY29DLElBQWQsQ0FBbUIsQ0FBQzJHLGNBQWMsQ0FBQ1oseUJBQWYsRUFBRCxHQUE4Q1ksY0FBYyxDQUFDWCxrQkFBZixHQUFvQzdCLElBQXBDLEVBQTlDLEdBQTJGLHVCQUE5Rzs7QUFDQSxlQUFLdEcsU0FBTCxDQUFlbUMsSUFBZiw4QkFBMEMyRyxjQUFjLENBQUNFLGVBQWYsRUFBMUM7O0FBQ0E7O0FBQ0osYUFBS3BCLCtGQUFZLENBQUNjLE1BQWxCO0FBQ0ksZUFBSzFJLFNBQUwsQ0FBZW1DLElBQWY7O0FBQ0EsY0FBSUssT0FBTyxDQUFDc0YsUUFBUixJQUFvQixJQUF4QixFQUNBO0FBQ0lnQiwwQkFBYyxHQUFHLElBQUlDLGlHQUFKLENBQW1CdkcsT0FBTyxDQUFDc0YsUUFBM0IsQ0FBakI7O0FBQ0EsaUJBQUs5SCxTQUFMLENBQWVtQyxJQUFmLG9CQUFnQ0ssT0FBTyxDQUFDc0YsUUFBUixDQUFpQmEsUUFBakIsRUFBaEM7O0FBQ0EsaUJBQUszSSxTQUFMLENBQWVtQyxJQUFmLDJCQUF1Q0ssT0FBTyxDQUFDc0YsUUFBUixDQUFpQmMsY0FBakIsRUFBdkM7O0FBQ0EsaUJBQUs1SSxTQUFMLENBQWVtQyxJQUFmLHVCQUFtQzJHLGNBQWMsQ0FBQ2YsZUFBZixFQUFuQzs7QUFDQSxpQkFBSy9ILFNBQUwsQ0FBZW1DLElBQWYsa0JBQThCMkcsY0FBYyxDQUFDZCxNQUFmLEVBQTlCOztBQUNBLGlCQUFLaEksU0FBTCxDQUFlbUMsSUFBZixxQkFBaUMyRyxjQUFjLENBQUNiLFVBQWhEOztBQUNBLGlCQUFLakksU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxpQkFBS3BDLFFBQUwsQ0FBY29DLElBQWQsQ0FBbUIsQ0FBQzJHLGNBQWMsQ0FBQ1oseUJBQWYsRUFBRCxHQUE4Q1ksY0FBYyxDQUFDWCxrQkFBZixHQUFvQzdCLElBQXBDLEVBQTlDLEdBQTJGLHVCQUE5RztBQUNIOztBQUNEOztBQUNKLGFBQUtzQiwrRkFBWSxDQUFDaUIsT0FBbEI7QUFDSSxlQUFLN0ksU0FBTCxDQUFlbUMsSUFBZixDQUFvQixrRUFBcEI7O0FBQ0EsZUFBS25DLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IsbUZBQXBCOztBQUNBLGVBQUtuQyxTQUFMLENBQWVtQyxJQUFmLENBQW9CLDRDQUFwQjs7QUFDQTs7QUFDSjtBQUNJLGdCQUFNLElBQUl1RixLQUFKLENBQVUsMkJBQVYsQ0FBTjtBQWhDUjtBQWtDSDtBQTVXTDtBQUFBO0FBQUEsMENBOFcwQmxGLE9BOVcxQixFQStXSTtBQUNJLFVBQUl5RyxlQUFKOztBQUNBLGNBQVF6RyxPQUFPLENBQUMyRCxPQUFoQjtBQUVJLGFBQUt5QiwrRkFBWSxDQUFDekIsT0FBbEI7QUFDSSxlQUFLbkcsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQThHLHlCQUFlLEdBQUcsSUFBSUMsc0dBQUosQ0FBd0IxRyxPQUFPLENBQUNzRixRQUFoQyxDQUFsQjs7QUFDQSxlQUFLOUgsU0FBTCxDQUFlbUMsSUFBZix1QkFBbUM4RyxlQUFlLENBQUNsQixlQUFoQixFQUFuQzs7QUFDQSxlQUFLL0gsU0FBTCxDQUFlbUMsSUFBZixrQkFBOEI4RyxlQUFlLENBQUNqQixNQUFoQixFQUE5Qjs7QUFDQSxlQUFLaEksU0FBTCxDQUFlbUMsSUFBZixxQkFBaUM4RyxlQUFlLENBQUNoQixVQUFqRDs7QUFDQSxlQUFLakksU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxlQUFLcEMsUUFBTCxDQUFjb0MsSUFBZCxDQUFtQixDQUFDOEcsZUFBZSxDQUFDZix5QkFBaEIsRUFBRCxHQUErQ2UsZUFBZSxDQUFDZCxrQkFBaEIsR0FBcUM3QixJQUFyQyxFQUEvQyxHQUE2Rix1QkFBaEg7O0FBQ0EsZUFBS3RHLFNBQUwsQ0FBZW1DLElBQWYsc0JBQWtDOEcsZUFBZSxDQUFDVixnQkFBaEIsRUFBbEM7O0FBQ0EsZUFBS3ZJLFNBQUwsQ0FBZW1DLElBQWYscUNBQWlEOEcsZUFBZSxDQUFDVCxvQkFBaEIsRUFBakQ7O0FBQ0EsZUFBS3hJLFNBQUwsQ0FBZW1DLElBQWYsaUNBQTZDOEcsZUFBZSxDQUFDUixpQkFBaEIsRUFBN0M7O0FBQ0EsZUFBS3pJLFNBQUwsQ0FBZW1DLElBQWYsd0JBQW9DOEcsZUFBZSxDQUFDWCxrQkFBaEIsRUFBcEM7O0FBQ0E7O0FBQ0osYUFBS1YsK0ZBQVksQ0FBQ2MsTUFBbEI7QUFDSSxlQUFLMUksU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxjQUFJSyxPQUFPLENBQUNzRixRQUFSLElBQW9CLElBQXhCLEVBQ0E7QUFDSW1CLDJCQUFlLEdBQUcsSUFBSUMsc0dBQUosQ0FBd0IxRyxPQUFPLENBQUNzRixRQUFoQyxDQUFsQjs7QUFDQSxpQkFBSzlILFNBQUwsQ0FBZW1DLElBQWYsb0JBQWdDSyxPQUFPLENBQUNzRixRQUFSLENBQWlCYSxRQUFqQixFQUFoQzs7QUFDQSxpQkFBSzNJLFNBQUwsQ0FBZW1DLElBQWYsMkJBQXVDSyxPQUFPLENBQUNzRixRQUFSLENBQWlCYyxjQUFqQixFQUF2Qzs7QUFDQSxpQkFBSzVJLFNBQUwsQ0FBZW1DLElBQWYsdUJBQW1DOEcsZUFBZSxDQUFDbEIsZUFBaEIsRUFBbkM7O0FBQ0EsaUJBQUsvSCxTQUFMLENBQWVtQyxJQUFmLGtCQUE4QjhHLGVBQWUsQ0FBQ2pCLE1BQWhCLEVBQTlCOztBQUNBLGlCQUFLaEksU0FBTCxDQUFlbUMsSUFBZixxQkFBaUM4RyxlQUFlLENBQUNoQixVQUFqRDs7QUFDQSxpQkFBS2pJLFNBQUwsQ0FBZW1DLElBQWY7O0FBQ0EsaUJBQUtwQyxRQUFMLENBQWNvQyxJQUFkLENBQW1COEcsZUFBZSxDQUFDZCxrQkFBaEIsRUFBbkI7QUFDSDs7QUFDRDs7QUFDSixhQUFLUCwrRkFBWSxDQUFDaUIsT0FBbEI7QUFDSSxlQUFLN0ksU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxlQUFLbkMsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxlQUFLbkMsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQTs7QUFDSjtBQUNJLGdCQUFNLElBQUl1RixLQUFKLENBQVUsMkJBQVYsQ0FBTjtBQW5DUjtBQXFDSDtBQXRaTDtBQUFBO0FBQUEsdUNBd1p1QmxGLE9BeFp2QixFQXlaSTtBQUNJLFVBQUkyRyxZQUFKO0FBQ0EsVUFBSXhCLGdCQUFKOztBQUNBLGNBQVFuRixPQUFPLENBQUMyRCxPQUFoQjtBQUVJLGFBQUt5QiwrRkFBWSxDQUFDekIsT0FBbEI7QUFDSSxlQUFLbkcsU0FBTCxDQUFlbUMsSUFBZixDQUFvQiw4QkFBcEI7O0FBQ0FnSCxzQkFBWSxHQUFHLElBQUlDLHVHQUFKLENBQXlCNUcsT0FBTyxDQUFDc0YsUUFBakMsQ0FBZjtBQUNBSCwwQkFBZ0IsR0FBR3dCLFlBQVksQ0FBQ3RCLGdCQUFoQzs7QUFDQSxlQUFLN0gsU0FBTCxDQUFlbUMsSUFBZix1QkFBbUN3RixnQkFBZ0IsQ0FBQ0ksZUFBakIsRUFBbkM7O0FBQ0EsZUFBSy9ILFNBQUwsQ0FBZW1DLElBQWYsa0JBQThCd0YsZ0JBQWdCLENBQUNLLE1BQWpCLEVBQTlCOztBQUNBLGVBQUtoSSxTQUFMLENBQWVtQyxJQUFmLHFCQUFpQ3dGLGdCQUFnQixDQUFDTSxVQUFsRDs7QUFDQSxlQUFLakksU0FBTCxDQUFlbUMsSUFBZix5QkFBcUN3RixnQkFBZ0IsQ0FBQzBCLFlBQWpCLEVBQXJDOztBQUNBLGVBQUtySixTQUFMLENBQWVtQyxJQUFmOztBQUNBLGVBQUtwQyxRQUFMLENBQWNvQyxJQUFkLENBQW1CLENBQUN3RixnQkFBZ0IsQ0FBQ08seUJBQWpCLEVBQUQsR0FBZ0RQLGdCQUFnQixDQUFDUSxrQkFBakIsR0FBc0M3QixJQUF0QyxFQUFoRCxHQUErRix1QkFBbEg7O0FBQ0EsZUFBS3RHLFNBQUwsQ0FBZW1DLElBQWYsdUJBQW1Dd0YsZ0JBQWdCLENBQUNTLGlCQUFqQixFQUFuQzs7QUFDQSxlQUFLcEksU0FBTCxDQUFlbUMsSUFBZixxQ0FBaUR3RixnQkFBZ0IsQ0FBQ2Esb0JBQWpCLEVBQWpEOztBQUNBLGVBQUt4SSxTQUFMLENBQWVtQyxJQUFmLGlDQUE2Q3dGLGdCQUFnQixDQUFDYyxpQkFBakIsRUFBN0M7O0FBQ0EsZUFBS3pJLFNBQUwsQ0FBZW1DLElBQWYsd0JBQW9Dd0YsZ0JBQWdCLENBQUNXLGtCQUFqQixFQUFwQzs7QUFDQTs7QUFDSixhQUFLViwrRkFBWSxDQUFDYyxNQUFsQjtBQUNJLGVBQUsxSSxTQUFMLENBQWVtQyxJQUFmOztBQUNBLGNBQUlLLE9BQU8sQ0FBQ3NGLFFBQVIsSUFBb0IsSUFBeEIsRUFDQTtBQUNJcUIsd0JBQVksR0FBRyxJQUFJQyx1R0FBSixDQUF5QjVHLE9BQU8sQ0FBQ3NGLFFBQWpDLENBQWY7QUFDQUgsNEJBQWdCLEdBQUd3QixZQUFZLENBQUN0QixnQkFBaEM7O0FBQ0EsaUJBQUs3SCxTQUFMLENBQWVtQyxJQUFmLG9CQUFnQ0ssT0FBTyxDQUFDc0YsUUFBUixDQUFpQmEsUUFBakIsRUFBaEM7O0FBQ0EsaUJBQUszSSxTQUFMLENBQWVtQyxJQUFmLDJCQUF1Q0ssT0FBTyxDQUFDc0YsUUFBUixDQUFpQmMsY0FBakIsRUFBdkM7O0FBQ0EsaUJBQUs1SSxTQUFMLENBQWVtQyxJQUFmLHVCQUFtQ3dGLGdCQUFnQixDQUFDSSxlQUFqQixFQUFuQzs7QUFDQSxpQkFBSy9ILFNBQUwsQ0FBZW1DLElBQWYsa0JBQThCd0YsZ0JBQWdCLENBQUNLLE1BQWpCLEVBQTlCOztBQUNBLGlCQUFLaEksU0FBTCxDQUFlbUMsSUFBZixxQkFBaUN3RixnQkFBZ0IsQ0FBQ00sVUFBbEQ7O0FBQ0EsaUJBQUtqSSxTQUFMLENBQWVtQyxJQUFmOztBQUNBLGlCQUFLcEMsUUFBTCxDQUFjb0MsSUFBZCxDQUFtQndGLGdCQUFnQixDQUFDUSxrQkFBakIsR0FBc0M3QixJQUF0QyxFQUFuQjtBQUNIOztBQUNEOztBQUNKLGFBQUtzQiwrRkFBWSxDQUFDaUIsT0FBbEI7QUFDSSxlQUFLN0ksU0FBTCxDQUFlbUMsSUFBZixDQUFvQixnRUFBcEI7O0FBQ0EsZUFBS25DLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IsbUZBQXBCOztBQUNBLGVBQUtuQyxTQUFMLENBQWVtQyxJQUFmLENBQW9CLDRDQUFwQjs7QUFDQTs7QUFDSjtBQUNJLGdCQUFNLElBQUl1RixLQUFKLENBQVUsMkJBQVYsQ0FBTjtBQXRDUjtBQXdDSDtBQXBjTDtBQUFBO0FBQUEscURBc2NxQ2xGLE9BdGNyQyxFQXVjSTtBQUNJLFVBQUlBLE9BQU8sQ0FBQ3NGLFFBQVIsSUFBb0IsSUFBeEIsRUFDQTtBQUNJLFlBQUl3QixXQUFXLEdBQUcsSUFBSUMsNkdBQUosQ0FBK0IvRyxPQUFPLENBQUNzRixRQUF2QyxDQUFsQjtBQUNBLFlBQUkwQixVQUFVLEdBQUl2SSxRQUFRLENBQUNrQyxjQUFULENBQXdCLFlBQXhCLEVBQXNDRyxLQUF4RDs7QUFFQSxZQUFJa0csVUFBVSxDQUFDQyxNQUFYLEdBQW9CLENBQXhCLEVBQ0E7QUFDSTtBQUNBO0FBQ0EsY0FBSUMsT0FBTyxHQUFHLEtBQUsxSyxJQUFMLENBQVUySyxRQUFWLENBQW1CTCxXQUFuQixFQUFnQ0UsVUFBaEMsQ0FBZDs7QUFDQSxjQUFJRSxPQUFPLElBQUk5QiwrRkFBWSxDQUFDaUIsT0FBNUIsRUFDQTtBQUNJLGlCQUFLN0ksU0FBTCxDQUFlbUMsSUFBZixDQUFvQiwrREFBcEI7QUFDSCxXQUhELE1BS0E7QUFDSSxpQkFBS25DLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IseUNBQXBCO0FBQ0g7QUFDSjs7QUFFRCxZQUFJd0YsZ0JBQWdCLEdBQUcsSUFBSUUsbUdBQUosQ0FBcUJyRixPQUFPLENBQUNzRixRQUE3QixDQUF2Qjs7QUFDQSxhQUFLOUgsU0FBTCxDQUFlbUMsSUFBZixxQkFBaUN3RixnQkFBZ0IsQ0FBQ00sVUFBbEQ7O0FBQ0EsYUFBS2pJLFNBQUwsQ0FBZW1DLElBQWYsdUJBQW1Dd0YsZ0JBQWdCLENBQUNJLGVBQWpCLEVBQW5DOztBQUNBLGFBQUsvSCxTQUFMLENBQWVtQyxJQUFmLGtCQUE4QndGLGdCQUFnQixDQUFDSyxNQUFqQixFQUE5Qjs7QUFDQSxhQUFLaEksU0FBTCxDQUFlbUMsSUFBZixvQkFBZ0NLLE9BQU8sQ0FBQ3NGLFFBQVIsQ0FBaUJhLFFBQWpCLEVBQWhDOztBQUNBLGFBQUszSSxTQUFMLENBQWVtQyxJQUFmOztBQUNBLGFBQUtwQyxRQUFMLENBQWNvQyxJQUFkLENBQW1Cd0YsZ0JBQWdCLENBQUNRLGtCQUFqQixHQUFzQzdCLElBQXRDLEVBQW5CO0FBQ0gsT0EzQkQsTUE2QkE7QUFDSTtBQUNBLGFBQUt0RyxTQUFMLENBQWVtQyxJQUFmLENBQW9CLHdDQUFwQjtBQUNIO0FBQ0o7QUF6ZUw7QUFBQTtBQUFBLHlDQTJleUJLLE9BM2V6QixFQTRlSTtBQUNJLGNBQVFBLE9BQU8sQ0FBQzJELE9BQWhCO0FBRUksYUFBS3lCLCtGQUFZLENBQUN6QixPQUFsQjtBQUNJLGVBQUtuRyxTQUFMLENBQWVtQyxJQUFmLENBQW9CLDBCQUFwQjs7QUFDQSxjQUFJSyxPQUFPLENBQUNzRixRQUFSLElBQW9CLElBQXhCLEVBQ0E7QUFDSSxnQkFBSThCLGNBQWMsR0FBRyxJQUFJQyw2RkFBSixDQUFlckgsT0FBTyxDQUFDc0YsUUFBdkIsQ0FBckI7O0FBQ0EsaUJBQUs5SCxTQUFMLENBQWVtQyxJQUFmLHVCQUFtQ3lILGNBQWMsQ0FBQzdCLGVBQWYsRUFBbkM7O0FBQ0EsaUJBQUsvSCxTQUFMLENBQWVtQyxJQUFmLENBQW9CLHFCQUFwQjs7QUFDQSxpQkFBS3BDLFFBQUwsQ0FBY29DLElBQWQsQ0FBbUJ5SCxjQUFjLENBQUNFLFVBQWYsR0FBNEJ4RCxJQUE1QixFQUFuQjs7QUFDQSxpQkFBS3RHLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IscUJBQXFCeUgsY0FBYyxDQUFDRyxrQkFBZixFQUF6Qzs7QUFDQSxpQkFBSy9KLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IsbUJBQW1CeUgsY0FBYyxDQUFDSSxnQkFBZixFQUF2Qzs7QUFDQSxpQkFBS2hLLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0Isd0JBQXdCeUgsY0FBYyxDQUFDSyxnQkFBZixFQUE1Qzs7QUFDQSxpQkFBS2pLLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IsMEJBQTBCeUgsY0FBYyxDQUFDTSxtQkFBZixFQUE5Qzs7QUFDQSxpQkFBS2xLLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0Isb0JBQW9CeUgsY0FBYyxDQUFDTyxhQUFmLEVBQXhDOztBQUNBLGlCQUFLbkssU0FBTCxDQUFlbUMsSUFBZixDQUFvQix1QkFBdUJ5SCxjQUFjLENBQUNRLGFBQWYsRUFBM0M7O0FBQ0EsaUJBQUtwSyxTQUFMLENBQWVtQyxJQUFmLDhCQUEwQyxDQUFDeUgsY0FBYyxDQUFDUyxhQUFmLEtBQWlDLEtBQWxDLEVBQXlDckUsT0FBekMsQ0FBaUQsQ0FBakQsQ0FBMUM7O0FBQ0EsaUJBQUtoRyxTQUFMLENBQWVtQyxJQUFmLENBQW9CLDZCQUE2QnlILGNBQWMsQ0FBQ1Usd0JBQWYsRUFBakQ7O0FBQ0EsaUJBQUt0SyxTQUFMLENBQWVtQyxJQUFmLG9DQUFnRCxDQUFDeUgsY0FBYyxDQUFDVyx3QkFBZixLQUE0QyxLQUE3QyxFQUFvRHZFLE9BQXBELENBQTRELENBQTVELENBQWhEOztBQUNBLGlCQUFLaEcsU0FBTCxDQUFlbUMsSUFBZixDQUFvQix1QkFBcEI7O0FBQ0EsZ0JBQUlxSSxPQUFPLEdBQUdaLGNBQWMsQ0FBQ2EsMEJBQWYsRUFBZDs7QUFDQSxpQkFBSyxJQUFJQyxDQUFULElBQWNGLE9BQWQsRUFDQTtBQUNJLG1CQUFLeEssU0FBTCxDQUFlbUMsSUFBZixDQUFvQixPQUFPd0ksSUFBSSxDQUFDQyxTQUFMLENBQWVKLE9BQU8sQ0FBQ0UsQ0FBRCxDQUF0QixDQUEzQjtBQUNIO0FBQ0o7O0FBQ0Q7O0FBQ0osYUFBSzlDLCtGQUFZLENBQUNjLE1BQWxCO0FBQ0ksZUFBSzFJLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0Isc0JBQXBCOztBQUNBLGNBQUlLLE9BQU8sQ0FBQ3NGLFFBQVIsSUFBb0IsSUFBeEIsRUFDQTtBQUNJLGdCQUFJOEIsY0FBYyxHQUFHLElBQUlDLDZGQUFKLENBQWVySCxPQUFPLENBQUNzRixRQUF2QixDQUFyQjs7QUFDQSxpQkFBSzlILFNBQUwsQ0FBZW1DLElBQWYsdUJBQW1DeUgsY0FBYyxDQUFDN0IsZUFBZixFQUFuQzs7QUFDQSxpQkFBSy9ILFNBQUwsQ0FBZW1DLElBQWYsb0JBQWdDSyxPQUFPLENBQUNzRixRQUFSLENBQWlCYSxRQUFqQixFQUFoQzs7QUFDQSxpQkFBSzNJLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IscUJBQXBCOztBQUNBLGlCQUFLcEMsUUFBTCxDQUFjb0MsSUFBZCxDQUFtQnlILGNBQWMsQ0FBQ0UsVUFBZixFQUFuQjtBQUNIOztBQUNEOztBQUNKLGFBQUtsQywrRkFBWSxDQUFDaUIsT0FBbEI7QUFDSSxlQUFLN0ksU0FBTCxDQUFlbUMsSUFBZixDQUFvQixzQ0FBcEI7O0FBQ0E7O0FBQ0o7QUFDSSxnQkFBTSxJQUFJdUYsS0FBSixDQUFVLGVBQVYsQ0FBTjtBQTFDUjtBQTRDSDtBQXpoQkw7QUFBQTtBQUFBLG9EQTJoQm9DbEYsT0EzaEJwQyxFQTRoQkk7QUFDSSxjQUFRQSxPQUFPLENBQUMyRCxPQUFoQjtBQUVJLGFBQUt5QiwrRkFBWSxDQUFDekIsT0FBbEI7QUFDSSxlQUFLbkcsU0FBTCxDQUFlbUMsSUFBZixDQUFvQixrQ0FBcEI7O0FBQ0EsY0FBSUssT0FBTyxDQUFDc0YsUUFBUixJQUFvQixJQUF4QixFQUNBO0FBQ0ksZ0JBQUk4QixjQUFjLEdBQUcsSUFBSUMsNkZBQUosQ0FBZXJILE9BQU8sQ0FBQ3NGLFFBQXZCLENBQXJCOztBQUNBLGlCQUFLOUgsU0FBTCxDQUFlbUMsSUFBZix1QkFBbUN5SCxjQUFjLENBQUM3QixlQUFmLEVBQW5DOztBQUNBLGlCQUFLL0gsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxpQkFBS3BDLFFBQUwsQ0FBY29DLElBQWQsQ0FBbUJ5SCxjQUFjLENBQUNFLFVBQWYsR0FBNEJ4RCxJQUE1QixFQUFuQjs7QUFDQSxpQkFBS3RHLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IscUJBQXFCeUgsY0FBYyxDQUFDRyxrQkFBZixFQUF6Qzs7QUFDQSxpQkFBSy9KLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IsbUJBQW1CeUgsY0FBYyxDQUFDSSxnQkFBZixFQUF2Qzs7QUFDQSxpQkFBS2hLLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0Isd0JBQXdCeUgsY0FBYyxDQUFDSyxnQkFBZixFQUE1Qzs7QUFDQSxpQkFBS2pLLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0IsMEJBQTBCeUgsY0FBYyxDQUFDTSxtQkFBZixFQUE5Qzs7QUFDQSxpQkFBS2xLLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0Isb0JBQW9CeUgsY0FBYyxDQUFDTyxhQUFmLEVBQXhDOztBQUNBLGlCQUFLbkssU0FBTCxDQUFlbUMsSUFBZixDQUFvQix1QkFBdUJ5SCxjQUFjLENBQUNRLGFBQWYsRUFBM0M7O0FBQ0EsaUJBQUtwSyxTQUFMLENBQWVtQyxJQUFmLDhCQUEwQyxDQUFDeUgsY0FBYyxDQUFDUyxhQUFmLEtBQWlDLEtBQWxDLEVBQXlDckUsT0FBekMsQ0FBaUQsQ0FBakQsQ0FBMUM7O0FBQ0EsaUJBQUtoRyxTQUFMLENBQWVtQyxJQUFmLENBQW9CLDZCQUE2QnlILGNBQWMsQ0FBQ1Usd0JBQWYsRUFBakQ7O0FBQ0EsaUJBQUt0SyxTQUFMLENBQWVtQyxJQUFmLG9DQUFnRCxDQUFDeUgsY0FBYyxDQUFDVyx3QkFBZixLQUE0QyxLQUE3QyxFQUFvRHZFLE9BQXBELENBQTRELENBQTVELENBQWhEOztBQUNBLGlCQUFLaEcsU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxnQkFBSXFJLE9BQU8sR0FBR1osY0FBYyxDQUFDYSwwQkFBZixFQUFkOztBQUNBLGlCQUFLLElBQUlDLENBQVQsSUFBY0YsT0FBZCxFQUNBO0FBQ0ksbUJBQUt4SyxTQUFMLENBQWVtQyxJQUFmLENBQW9CLE9BQU93SSxJQUFJLENBQUNDLFNBQUwsQ0FBZUosT0FBTyxDQUFDRSxDQUFELENBQXRCLENBQTNCO0FBQ0g7QUFDSjs7QUFDRDs7QUFDSixhQUFLOUMsK0ZBQVksQ0FBQ2MsTUFBbEI7QUFDSSxlQUFLMUksU0FBTCxDQUFlbUMsSUFBZixDQUFvQiw4QkFBcEI7O0FBQ0EsY0FBSUssT0FBTyxDQUFDc0YsUUFBUixJQUFvQixJQUF4QixFQUNBO0FBQ0ksZ0JBQUk4QixjQUFjLEdBQUcsSUFBSUMsNkZBQUosQ0FBZXJILE9BQU8sQ0FBQ3NGLFFBQXZCLENBQXJCOztBQUNBLGlCQUFLOUgsU0FBTCxDQUFlbUMsSUFBZix1QkFBbUN5SCxjQUFjLENBQUM3QixlQUFmLEVBQW5DOztBQUNBLGlCQUFLL0gsU0FBTCxDQUFlbUMsSUFBZixvQkFBZ0NLLE9BQU8sQ0FBQ3NGLFFBQVIsQ0FBaUJhLFFBQWpCLEVBQWhDOztBQUNBLGlCQUFLM0ksU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxpQkFBS3BDLFFBQUwsQ0FBY29DLElBQWQsQ0FBbUJ5SCxjQUFjLENBQUNFLFVBQWYsRUFBbkI7QUFDSDs7QUFDRDs7QUFDSixhQUFLbEMsK0ZBQVksQ0FBQ2lCLE9BQWxCO0FBQ0ksZUFBSzdJLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0Isc0NBQXBCOztBQUNBOztBQUNKO0FBQ0ksZ0JBQU0sSUFBSXVGLEtBQUosQ0FBVSwyQkFBVixDQUFOO0FBMUNSO0FBNENIO0FBemtCTDtBQUFBO0FBQUEsbUNBNGtCSTtBQUNJO0FBQ0EsVUFBSW1ELGFBQWEsR0FBSyxFQUF0QjtBQUNBLFVBQUlDLFFBQVEsR0FBVTdKLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0Isa0JBQXhCLENBQXRCO0FBQ0EsVUFBSTRILGVBQWUsR0FBRzlKLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsZ0JBQXhCLENBQXRCO0FBQ0EsVUFBSTZILFlBQVksR0FBTS9KLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsYUFBeEIsQ0FBdEI7QUFDQSxVQUFJOEgsaUJBQWlCLEdBQUdoSyxRQUFRLENBQUNrQyxjQUFULENBQXdCLHFCQUF4QixDQUF4QjtBQUVBMkgsY0FBUSxDQUFDSSxPQUFULENBQWlCLFFBQWpCLElBQThCLEtBQUtsTSxJQUFMLENBQVVtTSxhQUF4QztBQUNBTCxjQUFRLENBQUNJLE9BQVQsQ0FBaUIsTUFBakIsSUFBOEIsS0FBS2xNLElBQUwsQ0FBVWdHLFdBQXhDO0FBQ0ErRixxQkFBZSxDQUFDSyxTQUFoQixHQUE4QixLQUFLcE0sSUFBTCxDQUFVbU0sYUFBeEM7QUFDQUgsa0JBQVksQ0FBQ0ksU0FBYixHQUE4QixLQUFLcE0sSUFBTCxDQUFVZ0csV0FBeEM7QUFDQWlHLHVCQUFpQixDQUFDRyxTQUFsQixHQUE4QixLQUFLcE0sSUFBTCxDQUFVZ0csV0FBeEMsQ0FaSixDQWNJOztBQUNBLGNBQVEsS0FBS2hHLElBQUwsQ0FBVW1NLGFBQWxCO0FBRUksYUFBS0UsNEZBQVMsQ0FBQ0MsUUFBZjtBQUF5QjtBQUNyQixrQkFBUSxLQUFLdE0sSUFBTCxDQUFVZ0csV0FBbEI7QUFFSSxpQkFBS0MsMEZBQU8sQ0FBQ3NHLElBQWI7QUFBbUI7QUFDZlYsMkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixRQUFuQjtBQUNBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLGVBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsNkJBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsd0JBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsV0FBbkI7QUFDQVgsMkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixrQkFBbkI7QUFDQVgsMkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixzQkFBbkI7QUFDQVgsMkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixNQUFuQjtBQUNBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLGVBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsdUJBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsMkJBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsc0JBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsc0JBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsY0FBbkI7QUFDQVgsMkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixPQUFuQjtBQUNBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLGlCQUFuQjtBQUNBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLGdCQUFuQjs7QUFFQSxrQkFBRyxDQUFDLEtBQUtDLGVBQUwsRUFBSixFQUNBO0FBQ0laLDZCQUFhLENBQUNXLElBQWQsQ0FBbUIsZ0JBQW5CO0FBQ0g7O0FBQ0Q7O0FBRUosaUJBQUt2RywwRkFBTyxDQUFDQyxPQUFiO0FBQXNCO0FBQ2xCLGtCQUFJQyxZQUFZLEdBQUcsS0FBS25HLElBQUwsQ0FBVW9HLHVCQUE3Qjs7QUFDQSxrQkFBSUQsWUFBWSxDQUFDTSxvQkFBakIsRUFDQTtBQUNJb0YsNkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixjQUFuQjtBQUNIOztBQUNELGtCQUFJLENBQUNyRyxZQUFZLENBQUNFLFFBQWxCLEVBQ0E7QUFDSXdGLDZCQUFhLENBQUNXLElBQWQsQ0FBbUIsYUFBbkI7QUFDSCxlQUhELE1BS0E7QUFDSVgsNkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixJQUFuQjtBQUNIOztBQUNEOztBQUVKLGlCQUFLdkcsMEZBQU8sQ0FBQ1MsV0FBYixDQTNDSixDQTJDOEI7O0FBQzFCO0FBQ0ksbUJBQUs1RixJQUFMLENBQVVHLElBQVYsbUNBQTBDLEtBQUtqQixJQUFMLENBQVVnRyxXQUFwRDs7QUFDQTtBQTlDUjs7QUFnREE7O0FBQ0osYUFBS3FHLDRGQUFTLENBQUNLLGdCQUFmO0FBQWlDO0FBQzdCO0FBQ0FiLHVCQUFhLENBQUNXLElBQWQsQ0FBbUIsa0JBQW5CO0FBQ0FYLHVCQUFhLENBQUNXLElBQWQsQ0FBbUIsc0JBQW5CO0FBQ0FYLHVCQUFhLENBQUNXLElBQWQsQ0FBbUIsZUFBbkIsRUFKSixDQUtJO0FBQ0E7O0FBRUEsY0FBRyxDQUFDLEtBQUtDLGVBQUwsRUFBSixFQUNBO0FBQ0laLHlCQUFhLENBQUNXLElBQWQsQ0FBbUIsZ0JBQW5CO0FBQ0g7O0FBRUwsYUFBS0gsNEZBQVMsQ0FBQ00sZUFBZjtBQUNJLGtCQUFRLEtBQUszTSxJQUFMLENBQVVnRyxXQUFsQjtBQUVJLGlCQUFLQywwRkFBTyxDQUFDc0csSUFBYjtBQUFtQjtBQUNmViwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLGNBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsa0JBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsd0JBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsa0NBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsc0JBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsaUJBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsa0JBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsZUFBbkI7QUFDQVgsMkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixjQUFuQjtBQUVBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLFVBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsTUFBbkI7QUFDQVgsMkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixRQUFuQjtBQUNBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLFNBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsUUFBbkI7QUFDQVgsMkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixZQUFuQjtBQUNBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLFNBQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsUUFBbkI7QUFDQVgsMkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixLQUFuQjtBQUNBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLGtCQUFuQjtBQUNBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLHNCQUFuQjtBQUVBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLHNCQUFuQjtBQUNBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLHNCQUFuQjtBQUNBWCwyQkFBYSxDQUFDVyxJQUFkLENBQW1CLE9BQW5CO0FBQ0FYLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsaUJBQW5CO0FBRUE7O0FBQ0osaUJBQUt2RywwRkFBTyxDQUFDUyxXQUFiO0FBQTBCO0FBQ3RCLGtCQUFJLEtBQUsxRyxJQUFMLENBQVUyRyxrQkFBVixDQUE2Qk0sc0JBQWpDLEVBQ0E7QUFDSTRFLDZCQUFhLENBQUNXLElBQWQsQ0FBbUIsZ0JBQW5CO0FBQ0FYLDZCQUFhLENBQUNXLElBQWQsQ0FBbUIsaUJBQW5CO0FBQ0g7O0FBRUQsa0JBQUcsS0FBS3hNLElBQUwsQ0FBVTJHLGtCQUFWLENBQTZCWSxvQkFBaEMsRUFDQTtBQUNJc0UsNkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixjQUFuQjtBQUNBWCw2QkFBYSxDQUFDVyxJQUFkLENBQW1CLGlCQUFuQjtBQUNIOztBQUVELGtCQUFHLEtBQUtDLGVBQUwsRUFBSCxFQUNBO0FBQ0laLDZCQUFhLENBQUNXLElBQWQsQ0FBbUIsVUFBbkI7QUFDQVgsNkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixrQkFBbkI7QUFDQVgsNkJBQWEsQ0FBQ1csSUFBZCxDQUFtQixXQUFuQjtBQUNIOztBQUVELGtCQUFJLENBQUMsS0FBS3hNLElBQUwsQ0FBVTJHLGtCQUFWLENBQTZCTixRQUE5QixJQUEwQyxDQUFDLEtBQUtyRyxJQUFMLENBQVUyRyxrQkFBVixDQUE2Qk8sa0JBQTVFLEVBQ0E7QUFDSTJFLDZCQUFhLENBQUNXLElBQWQsQ0FBbUIsV0FBbkI7QUFDSCxlQUhELE1BS0E7QUFDSSx3QkFBUSxLQUFLeE0sSUFBTCxDQUFVMkcsa0JBQVYsQ0FBNkJRLE9BQXJDO0FBRUksdUJBQUt5QiwrRkFBWSxDQUFDekIsT0FBbEI7QUFDSTBFLGlDQUFhLENBQUNXLElBQWQsQ0FBbUIsSUFBbkI7QUFDQTs7QUFDSix1QkFBSzVELCtGQUFZLENBQUNjLE1BQWxCO0FBQ0ltQyxpQ0FBYSxDQUFDVyxJQUFkLENBQW1CLFdBQW5CO0FBQ0E7O0FBQ0o7QUFDSTtBQUNBWCxpQ0FBYSxDQUFDVyxJQUFkLENBQW1CLFdBQW5CO0FBQ0E7QUFYUjtBQWFIOztBQUNEOztBQUNKLGlCQUFLdkcsMEZBQU8sQ0FBQ0MsT0FBYjtBQUFzQjtBQUNsQjJGLDJCQUFhLENBQUNXLElBQWQsQ0FBbUIsSUFBbkI7QUFDQTs7QUFDSjtBQUNJLG1CQUFLMUwsSUFBTCxDQUFVRyxJQUFWLG1DQUEwQyxLQUFLakIsSUFBTCxDQUFVZ0csV0FBcEQ7O0FBQ0E7QUE3RVI7O0FBK0VBOztBQUdKO0FBQ0ksZUFBS2xGLElBQUwsQ0FBVUcsSUFBVixvQ0FBMkMsS0FBS2pCLElBQUwsQ0FBVW1NLGFBQXJEOztBQUNBO0FBdEpSLE9BZkosQ0F3S0k7OztBQUNBLFVBQUlTLE1BQU0sR0FBRzNLLFFBQVEsQ0FBQzRLLGdCQUFULENBQTBCLFFBQTFCLENBQWI7O0FBQ0EsV0FBSSxJQUFJQyxDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLEdBQUdGLE1BQU0sQ0FBQ25DLE1BQTFCLEVBQWtDcUMsQ0FBQyxFQUFuQyxFQUNBO0FBQ0lGLGNBQU0sQ0FBQ0UsQ0FBRCxDQUFOLENBQVVDLFFBQVYsR0FBcUIsSUFBckI7QUFDSDs7QUFFRGxCLG1CQUFhLENBQUNtQixPQUFkLENBQXNCLFVBQUNDLEtBQUQsRUFDdEI7QUFDSWhMLGdCQUFRLENBQUNrQyxjQUFULENBQXdCOEksS0FBeEIsRUFBK0JGLFFBQS9CLEdBQTBDLEtBQTFDO0FBQ0gsT0FIRDs7QUFLQSxXQUFLL0wsU0FBTCxDQUFlbUMsSUFBZjtBQUNIO0FBandCTDtBQUFBO0FBQUEsc0NBb3dCSTtBQUNJLFVBQUksS0FBS25ELElBQUwsQ0FBVWdHLFdBQVYsSUFBeUJDLDBGQUFPLENBQUNTLFdBQXJDLEVBQ0E7QUFDSSxZQUFJLEtBQUsxRyxJQUFMLENBQVUyRyxrQkFBVixDQUE2Qk4sUUFBN0IsSUFBeUMsS0FBS3JHLElBQUwsQ0FBVTJHLGtCQUFWLENBQTZCUSxPQUE3QixJQUF3Q3lCLCtGQUFZLENBQUNpQixPQUFsRyxFQUNBO0FBQ0ksaUJBQU8sSUFBUDtBQUNIO0FBQ0o7O0FBRUQsYUFBTyxLQUFQO0FBQ0g7QUE5d0JMO0FBQUE7QUFBQSx5Q0FpeEJJO0FBQ0ksV0FBSzdJLFNBQUwsQ0FBZW1DLElBQWY7O0FBQ0EsV0FBS25DLFNBQUwsQ0FBZW1DLElBQWYsYUFBeUIsS0FBS2xELE1BQTlCLDBCQUFvRCxLQUFLQyxjQUF6RDs7QUFDQSxXQUFLYyxTQUFMLENBQWVtQyxJQUFmLHlCQUFxQyxLQUFLbkQsSUFBTCxDQUFVbU0sYUFBL0Msd0JBQTBFLEtBQUtuTSxJQUFMLENBQVVnRyxXQUFwRjs7QUFDQSxXQUFLaEYsU0FBTCxDQUFlbUMsSUFBZix5QkFBcUN3SSxJQUFJLENBQUNDLFNBQUwsQ0FBZSxLQUFLNUwsSUFBTCxDQUFVb0IsTUFBekIsQ0FBckM7O0FBQ0EsV0FBS0osU0FBTCxDQUFlbUMsSUFBZjs7QUFDQSxXQUFLbkMsU0FBTCxDQUFlbUMsSUFBZixtQkFBK0IsS0FBSzlDLFFBQXBDLG9CQUFzRGMsc0ZBQUcsQ0FBQytMLFVBQUosRUFBdEQ7QUFFSDtBQXp4Qkw7QUFBQTtBQUFBLG9EQTR4Qkk7QUFDSSxXQUFLbE4sSUFBTCxDQUFVbU4sV0FBVixDQUFzQixLQUFLdk0sU0FBM0I7O0FBQ0EsV0FBS1osSUFBTCxDQUFVb04sbUJBQVYsQ0FBOEIsS0FBS3ZNLG9CQUFuQzs7QUFDQSxXQUFLYixJQUFMLENBQVVxTix3QkFBVixDQUFtQyxLQUFLMU0seUJBQXhDO0FBQ0g7QUFoeUJMO0FBQUE7QUFBQSxzQ0FteUJJO0FBQUE7O0FBQ0lzQixjQUFRLENBQUNrQyxjQUFULENBQXdCLHVCQUF4QixFQUFpRGpDLGdCQUFqRCxDQUFrRSxRQUFsRSxFQUE0RSxVQUFDSCxDQUFELEVBQzVFO0FBQ0lBLFNBQUMsQ0FBQ3VMLGNBQUY7O0FBRUEsWUFBRyxNQUFJLENBQUN0TixJQUFMLENBQVVtTSxhQUFWLEtBQTRCRSw0RkFBUyxDQUFDQyxRQUF0QyxJQUFrRCxNQUFJLENBQUN0TSxJQUFMLENBQVVnRyxXQUFWLEtBQTBCQywwRkFBTyxDQUFDc0csSUFBdkYsRUFBNkY7QUFDekYsZ0JBQUksQ0FBQzNMLFNBQUwsR0FBc0JxQixRQUFRLENBQUNrQyxjQUFULENBQXdCLFdBQXhCLEVBQXFDb0osT0FBM0Q7QUFDQSxnQkFBSSxDQUFDMU0sb0JBQUwsR0FBa0NvQixRQUFRLENBQUNrQyxjQUFULENBQXdCLHdCQUF4QixFQUFrRG9KLE9BQXBGO0FBQ0EsZ0JBQUksQ0FBQzVNLHlCQUFMLEdBQWtDc0IsUUFBUSxDQUFDa0MsY0FBVCxDQUF3Qiw2QkFBeEIsRUFBdURvSixPQUF6Rjs7QUFDQSxnQkFBSSxDQUFDdkssNkJBQUw7O0FBQ0EsZ0JBQUksQ0FBQ2xDLElBQUwsQ0FBVUcsSUFBVjtBQUNIO0FBQ0osT0FYRDtBQWFBZ0IsY0FBUSxDQUFDa0MsY0FBVCxDQUF3QixlQUF4QixFQUF5Q2pDLGdCQUF6QyxDQUEwRCxRQUExRCxFQUFvRSxVQUFDSCxDQUFELEVBQ3BFO0FBQ0lBLFNBQUMsQ0FBQ3VMLGNBQUY7O0FBRUEsWUFBRyxNQUFJLENBQUN0TixJQUFMLENBQVVtTSxhQUFWLEtBQTRCRSw0RkFBUyxDQUFDQyxRQUF0QyxJQUFrRCxNQUFJLENBQUN0TSxJQUFMLENBQVVnRyxXQUFWLEtBQTBCQywwRkFBTyxDQUFDc0csSUFBdkYsRUFDQTtBQUNJLGdCQUFJLENBQUN0TSxNQUFMLEdBQXNCZ0MsUUFBUSxDQUFDa0MsY0FBVCxDQUF3QixRQUF4QixFQUFrQ0csS0FBeEQ7QUFDQSxnQkFBSSxDQUFDOUQsT0FBTCxHQUFzQnlCLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsZ0JBQXhCLEVBQTBDRyxLQUFoRTtBQUNBLGdCQUFJLENBQUNwRSxjQUFMLEdBQXNCK0IsUUFBUSxDQUFDa0MsY0FBVCxDQUF3QixnQkFBeEIsRUFBMENHLEtBQWhFO0FBQ0EsZ0JBQUksQ0FBQzdELGFBQUwsR0FBc0J3QixRQUFRLENBQUNrQyxjQUFULENBQXdCLGVBQXhCLEVBQXlDRyxLQUEvRDs7QUFFQSxnQkFBSSxDQUFDdEUsSUFBTCxDQUFVd04sUUFBVixDQUFtQixNQUFJLENBQUN2TixNQUF4Qjs7QUFDQSxnQkFBSSxDQUFDRCxJQUFMLENBQVV5QixlQUFWLENBQTBCLE1BQUksQ0FBQ2pCLE9BQS9COztBQUNBLGdCQUFJLENBQUNSLElBQUwsQ0FBVXlOLGdCQUFWLENBQTJCLE1BQUksQ0FBQ3ZOLGNBQWhDOztBQUNBLGdCQUFJLENBQUNGLElBQUwsQ0FBVTBOLGVBQVYsQ0FBMEIsTUFBSSxDQUFDak4sYUFBL0I7O0FBRUFvRCxzQkFBWSxDQUFDQyxPQUFiLENBQXFCLFFBQXJCLEVBQStCLE1BQUksQ0FBQzdELE1BQXBDO0FBQ0E0RCxzQkFBWSxDQUFDQyxPQUFiLENBQXFCLGdCQUFyQixFQUF1QyxNQUFJLENBQUN0RCxPQUE1QztBQUNBcUQsc0JBQVksQ0FBQ0MsT0FBYixDQUFxQixnQkFBckIsRUFBdUMsTUFBSSxDQUFDNUQsY0FBNUM7QUFDQTJELHNCQUFZLENBQUNDLE9BQWIsQ0FBcUIsNkJBQXJCLEVBQW9ELE1BQUksQ0FBQ25ELHlCQUF6RDtBQUNBa0Qsc0JBQVksQ0FBQ0MsT0FBYixDQUFxQixlQUFyQixFQUFzQyxNQUFJLENBQUNyRCxhQUEzQztBQUNBb0Qsc0JBQVksQ0FBQ0MsT0FBYixDQUFxQixXQUFyQixFQUFrQyxNQUFJLENBQUNsRCxTQUF2QztBQUNBaUQsc0JBQVksQ0FBQ0MsT0FBYixDQUFxQix3QkFBckIsRUFBK0MsTUFBSSxDQUFDakQsb0JBQXBEOztBQUVBLGdCQUFJLENBQUNDLElBQUwsQ0FBVUcsSUFBVjtBQUNIOztBQUVELGNBQUksQ0FBQ2pCLElBQUwsQ0FBVW9CLE1BQVYsQ0FBaUJDLDZCQUFqQixHQUFpRFksUUFBUSxDQUFDa0MsY0FBVCxDQUF3QixrQkFBeEIsRUFBNENvSixPQUE3RjtBQUNBLGNBQUksQ0FBQ3ZOLElBQUwsQ0FBVW9CLE1BQVYsQ0FBaUJFLHFCQUFqQixHQUF5Q1csUUFBUSxDQUFDa0MsY0FBVCxDQUF3QixzQkFBeEIsRUFBZ0RvSixPQUF6RjtBQUVBMUosb0JBQVksQ0FBQ0MsT0FBYixDQUFxQixrQkFBckIsRUFBeUMsTUFBSSxDQUFDOUQsSUFBTCxDQUFVb0IsTUFBVixDQUFpQkMsNkJBQTFEO0FBQ0F3QyxvQkFBWSxDQUFDQyxPQUFiLENBQXFCLHNCQUFyQixFQUE2QyxNQUFJLENBQUM5RCxJQUFMLENBQVVvQixNQUFWLENBQWlCRSxxQkFBOUQ7O0FBRUEsY0FBSSxDQUFDeUUsa0JBQUw7O0FBRUEsZUFBTyxLQUFQO0FBQ0gsT0FwQ0Q7QUFzQ0E5RCxjQUFRLENBQUNrQyxjQUFULENBQXdCLDZCQUF4QixFQUF1RGpDLGdCQUF2RCxDQUF3RSxRQUF4RSxFQUFrRixZQUNsRjtBQUNJRCxnQkFBUSxDQUFDa0MsY0FBVCxDQUF3QixnQkFBeEIsRUFBMEM0SSxRQUExQyxHQUFxRDlLLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsNkJBQXhCLEVBQXVEb0osT0FBNUc7QUFDSCxPQUhEO0FBS0F0TCxjQUFRLENBQUNrQyxjQUFULENBQXdCLHdCQUF4QixFQUFrRGpDLGdCQUFsRCxDQUFtRSxRQUFuRSxFQUE2RSxZQUM3RTtBQUNJLFlBQUl5TCxRQUFRLEdBQUcxTCxRQUFRLENBQUNrQyxjQUFULENBQXdCLHdCQUF4QixFQUFrRG9KLE9BQWpFOztBQUVBLGNBQUksQ0FBQ3ZOLElBQUwsQ0FBVW9OLG1CQUFWLENBQThCTyxRQUE5QjtBQUNILE9BTEQ7QUFPQTFMLGNBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsTUFBeEIsRUFBZ0NqQyxnQkFBaEMsQ0FBaUQsT0FBakQsRUFBMEQsWUFDMUQ7QUFDSSxjQUFJLENBQUNsQyxJQUFMLENBQVU0TixJQUFWO0FBQ0gsT0FIRDtBQUtBM0wsY0FBUSxDQUFDa0MsY0FBVCxDQUF3QixjQUF4QixFQUF3Q2pDLGdCQUF4QyxDQUF5RCxPQUF6RCxFQUFrRSxZQUNsRTtBQUNJLGNBQUksQ0FBQ2xDLElBQUwsQ0FBVTZOLGtCQUFWO0FBQ0gsT0FIRDtBQUtBNUwsY0FBUSxDQUFDa0MsY0FBVCxDQUF3QixhQUF4QixFQUF1Q2pDLGdCQUF2QyxDQUF3RCxPQUF4RCxFQUFpRSxZQUNqRTtBQUNJLGNBQUksQ0FBQ2xDLElBQUwsQ0FBVThOLGFBQVY7QUFDSCxPQUhEO0FBS0E3TCxjQUFRLENBQUNrQyxjQUFULENBQXdCLFFBQXhCLEVBQWtDakMsZ0JBQWxDLENBQW1ELE9BQW5ELEVBQTRELFlBQzVEO0FBQ0ksY0FBSSxDQUFDbEMsSUFBTCxDQUFVK04sTUFBVjtBQUNILE9BSEQ7QUFLQTlMLGNBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsVUFBeEIsRUFBb0NqQyxnQkFBcEMsQ0FBcUQsT0FBckQsRUFBOEQsWUFDOUQ7QUFDSSxZQUFJOEwsUUFBUSxzQkFBc0IsSUFBSUMsSUFBSixHQUFXQyxXQUFYLEVBQXRCLENBQVo7QUFDQSxZQUFJQyxjQUFjLEdBQUlDLFFBQVEsQ0FBQ25NLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsUUFBeEIsRUFBa0NHLEtBQW5DLEVBQXlDLEVBQXpDLENBQTlCO0FBQ0EsWUFBSStKLFNBQVMsR0FBU0QsUUFBUSxDQUFDbk0sUUFBUSxDQUFDa0MsY0FBVCxDQUF3QixZQUF4QixFQUFzQ0csS0FBdkMsRUFBNkMsRUFBN0MsQ0FBOUI7QUFDQSxZQUFJZ0ssYUFBYSxHQUFLRixRQUFRLENBQUNuTSxRQUFRLENBQUNrQyxjQUFULENBQXdCLGdCQUF4QixFQUEwQ0csS0FBM0MsRUFBaUQsRUFBakQsQ0FBOUI7QUFDQSxZQUFJaUssZUFBZSxHQUFHSCxRQUFRLENBQUNuTSxRQUFRLENBQUNrQyxjQUFULENBQXdCLGtCQUF4QixFQUE0Q0csS0FBN0MsRUFBbUQsRUFBbkQsQ0FBOUI7QUFDQSxZQUFJa0ssZ0JBQWdCLEdBQUd2TSxRQUFRLENBQUNrQyxjQUFULENBQXdCLGlCQUF4QixFQUEyQ29KLE9BQWxFOztBQUNBLFlBQUlrQixHQUFHLEdBQWUsTUFBSSxDQUFDek8sSUFBTCxDQUFVME8sb0JBQVYsQ0FBK0JWLFFBQS9CLEVBQXlDRyxjQUF6QyxFQUF5REUsU0FBekQsRUFBb0VDLGFBQXBFLEVBQW1GRSxnQkFBbkYsRUFBcUcsTUFBSSxDQUFDcE8sUUFBMUcsRUFBb0htTyxlQUFwSCxDQUF0Qjs7QUFDQSxZQUFJLENBQUNFLEdBQUcsQ0FBQ0UsU0FBVCxFQUNBO0FBQ0ksZ0JBQUksQ0FBQzNOLFNBQUwsQ0FBZW1DLElBQWYsMENBQXNEc0wsR0FBRyxDQUFDek0sT0FBMUQ7QUFDSDtBQUNKLE9BYkQ7QUFlQUMsY0FBUSxDQUFDa0MsY0FBVCxDQUF3QixRQUF4QixFQUFrQ2pDLGdCQUFsQyxDQUFtRCxPQUFuRCxFQUE0RCxZQUM1RDtBQUNJLFlBQUkwTSxNQUFNLEdBQVFSLFFBQVEsQ0FBQ25NLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsUUFBeEIsRUFBa0NHLEtBQW5DLEVBQXlDLEVBQXpDLENBQTFCO0FBQ0EsWUFBSXVLLHdCQUF3QixHQUFHNU0sUUFBUSxDQUFDa0MsY0FBVCxDQUF3Qiw0QkFBeEIsRUFBc0RvSixPQUFyRjtBQUNBLFlBQUlTLFFBQVEsb0JBQWdCLElBQUlDLElBQUosR0FBV0MsV0FBWCxFQUFoQixDQUFaOztBQUNBLFlBQUlPLEdBQUcsR0FBVyxNQUFJLENBQUN6TyxJQUFMLENBQVU4TyxnQkFBVixDQUEyQmQsUUFBM0IsRUFBcUNZLE1BQXJDLEVBQTZDQyx3QkFBN0MsQ0FBbEI7O0FBQ0EsY0FBSSxDQUFDN04sU0FBTCxDQUFlbUMsSUFBZixDQUFvQnNMLEdBQUcsQ0FBQ0UsU0FBSixHQUFnQixvREFBaEIsMENBQXVHRixHQUFHLENBQUN6TSxPQUEzRyxvQkFBcEI7QUFDSCxPQVBEO0FBU0FDLGNBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsU0FBeEIsRUFBbUNqQyxnQkFBbkMsQ0FBb0QsT0FBcEQsRUFBNkQsWUFDN0Q7QUFDSSxZQUFJME0sTUFBTSxHQUFRUixRQUFRLENBQUNuTSxRQUFRLENBQUNrQyxjQUFULENBQXdCLGdCQUF4QixFQUEwQ0csS0FBM0MsRUFBaUQsRUFBakQsQ0FBMUI7QUFDQSxZQUFJaUssZUFBZSxHQUFHSCxRQUFRLENBQUNuTSxRQUFRLENBQUNrQyxjQUFULENBQXdCLGtCQUF4QixFQUE0Q0csS0FBN0MsRUFBbUQsRUFBbkQsQ0FBOUI7O0FBRUEsWUFBRyxDQUFDc0ssTUFBRCxHQUFVLENBQWIsRUFDQTtBQUNJLGdCQUFJLENBQUM5TixJQUFMLENBQVVHLElBQVYsQ0FBZSx1Q0FBZjs7QUFDQTtBQUNIOztBQUVELFlBQUkrTSxRQUFRLHFCQUFpQixJQUFJQyxJQUFKLEdBQVdDLFdBQVgsRUFBakIsQ0FBWjs7QUFDQSxZQUFJTyxHQUFHLEdBQVcsTUFBSSxDQUFDek8sSUFBTCxDQUFVK08scUJBQVYsQ0FBZ0NmLFFBQWhDLEVBQTBDWSxNQUExQyxFQUFrREwsZUFBbEQsQ0FBbEI7O0FBQ0EsY0FBSSxDQUFDdk4sU0FBTCxDQUFlbUMsSUFBZixDQUFvQnNMLEdBQUcsQ0FBQ0UsU0FBSixHQUFnQixxREFBaEIsMkNBQXlHRixHQUFHLENBQUN6TSxPQUE3RyxvQkFBcEI7QUFDSCxPQWREO0FBZ0JBQyxjQUFRLENBQUNrQyxjQUFULENBQXdCLE1BQXhCLEVBQWdDakMsZ0JBQWhDLENBQWlELE9BQWpELEVBQTBELFlBQzFEO0FBQ0ksWUFBSTBNLE1BQU0sR0FBUVIsUUFBUSxDQUFDbk0sUUFBUSxDQUFDa0MsY0FBVCxDQUF3QixRQUF4QixFQUFrQ0csS0FBbkMsRUFBeUMsRUFBekMsQ0FBMUI7QUFDQSxZQUFJaUssZUFBZSxHQUFHSCxRQUFRLENBQUNuTSxRQUFRLENBQUNrQyxjQUFULENBQXdCLGtCQUF4QixFQUE0Q0csS0FBN0MsRUFBbUQsRUFBbkQsQ0FBOUI7QUFDQSxZQUFJdUssd0JBQXdCLEdBQUc1TSxRQUFRLENBQUNrQyxjQUFULENBQXdCLDRCQUF4QixFQUFzRG9KLE9BQXJGO0FBQ0EsWUFBSVMsUUFBUSxxQkFBaUIsSUFBSUMsSUFBSixHQUFXQyxXQUFYLEVBQWpCLENBQVo7O0FBQ0EsWUFBSU8sR0FBRyxHQUFXLE1BQUksQ0FBQ3pPLElBQUwsQ0FBVWdQLHNCQUFWLENBQWlDaEIsUUFBakMsRUFBMkNZLE1BQTNDLEVBQW1ETCxlQUFuRCxFQUFvRU0sd0JBQXBFLENBQWxCOztBQUNBLGNBQUksQ0FBQzdOLFNBQUwsQ0FBZW1DLElBQWYsQ0FBb0JzTCxHQUFHLENBQUNFLFNBQUosR0FBZ0IsMkRBQWhCLGlEQUFxSEYsR0FBRyxDQUFDek0sT0FBekgsb0JBQXBCO0FBQ0gsT0FSRDtBQVVBQyxjQUFRLENBQUNrQyxjQUFULENBQXdCLGdCQUF4QixFQUEwQ2pDLGdCQUExQyxDQUEyRCxPQUEzRCxFQUFvRSxZQUNwRTtBQUNJLGNBQUksQ0FBQ2xDLElBQUwsQ0FBVWlQLGVBQVYsQ0FBMEIsSUFBMUI7QUFDSCxPQUhEO0FBS0FoTixjQUFRLENBQUNrQyxjQUFULENBQXdCLGlCQUF4QixFQUEyQ2pDLGdCQUEzQyxDQUE0RCxPQUE1RCxFQUFxRSxZQUNyRTtBQUNJLGNBQUksQ0FBQ2xDLElBQUwsQ0FBVWlQLGVBQVYsQ0FBMEIsS0FBMUI7QUFDSCxPQUhEO0FBS0FoTixjQUFRLENBQUNrQyxjQUFULENBQXdCLFdBQXhCLEVBQXFDakMsZ0JBQXJDLENBQXNELE9BQXRELEVBQStELFlBQy9EO0FBQ0ksY0FBSSxDQUFDbEMsSUFBTCxDQUFVa1AsaUJBQVY7QUFDSCxPQUhEO0FBS0FqTixjQUFRLENBQUNrQyxjQUFULENBQXdCLGNBQXhCLEVBQXdDakMsZ0JBQXhDLENBQXlELE9BQXpELEVBQWtFLFlBQ2xFO0FBQ0ksWUFBSWlOLFFBQVEsR0FBR2xOLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsV0FBeEIsRUFBcUNHLEtBQXBEOztBQUNBLFlBQUltSyxHQUFHLEdBQUcsTUFBSSxDQUFDek8sSUFBTCxDQUFVb1AsY0FBVixDQUF5QkQsUUFBekIsQ0FBVjs7QUFDQSxjQUFJLENBQUNuTyxTQUFMLENBQWVtQyxJQUFmLENBQW9Cc0wsR0FBRyxDQUFDWSxXQUFKLDhEQUFzRVosR0FBRyxDQUFDek0sT0FBMUUsaUJBQXBCO0FBQ0gsT0FMRDtBQU9BQyxjQUFRLENBQUNrQyxjQUFULENBQXdCLFFBQXhCLEVBQWtDakMsZ0JBQWxDLENBQW1ELE9BQW5ELEVBQTRELFlBQzVEO0FBQ0ksWUFBSXVNLEdBQUcsR0FBRyxNQUFJLENBQUN6TyxJQUFMLENBQVVzUCxnQkFBVixDQUEyQkMsa0dBQWUsQ0FBQ0MsRUFBaEIsQ0FBbUIsUUFBbkIsQ0FBM0IsQ0FBVjs7QUFDQSxjQUFJLENBQUN4TyxTQUFMLENBQWVtQyxJQUFmLENBQW9Cc0wsR0FBRyxDQUFDRSxTQUFKLEdBQWdCLG9EQUFoQiwwQ0FBdUdGLEdBQUcsQ0FBQ3pNLE9BQTNHLG9CQUFwQjtBQUNILE9BSkQ7QUFNQUMsY0FBUSxDQUFDa0MsY0FBVCxDQUF3QixZQUF4QixFQUFzQ2pDLGdCQUF0QyxDQUF1RCxPQUF2RCxFQUFnRSxZQUNoRTtBQUNJLFlBQUl1TSxHQUFHLEdBQUcsTUFBSSxDQUFDek8sSUFBTCxDQUFVeVAseUJBQVYsQ0FBb0NGLGtHQUFlLENBQUNDLEVBQWhCLENBQW1CLFFBQW5CLENBQXBDLENBQVY7O0FBQ0EsY0FBSSxDQUFDeE8sU0FBTCxDQUFlbUMsSUFBZixDQUFvQnNMLEdBQUcsQ0FBQ0UsU0FBSixHQUFnQiw0REFBaEIsa0RBQXVIRixHQUFHLENBQUN6TSxPQUEzSCxvQkFBcEI7QUFDSCxPQUpEO0FBTUFDLGNBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IscUJBQXhCLEVBQStDakMsZ0JBQS9DLENBQWdFLE9BQWhFLEVBQXlFLFlBQ3pFO0FBQ0ksY0FBSSxDQUFDbEMsSUFBTCxDQUFVb0IsTUFBVixDQUFpQnNPLGlCQUFqQixHQUFxQ3pOLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IscUJBQXhCLEVBQStDb0osT0FBcEY7O0FBQ0EsY0FBSSxDQUFDdk0sU0FBTCxDQUFla0MsS0FBZjs7QUFDQSxjQUFJLENBQUNsRCxJQUFMLENBQVVvRix5QkFBVjs7QUFDQSxjQUFJLENBQUNoQyxxQkFBTDtBQUNILE9BTkQ7QUFRQW5CLGNBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsY0FBeEIsRUFBd0NqQyxnQkFBeEMsQ0FBeUQsT0FBekQsRUFBa0UsWUFDbEU7QUFDSSxjQUFJLENBQUM5QixRQUFMLENBQWN1Qix3QkFBZCxDQUF1QyxNQUFJLENBQUNnTyxpQkFBTCxDQUF1QjFOLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsZ0JBQXhCLEVBQTBDRyxLQUFqRSxDQUF2Qzs7QUFDQSxjQUFJLENBQUNsRSxRQUFMLENBQWN5Qix3QkFBZCxDQUF1QyxNQUFJLENBQUM4TixpQkFBTCxDQUF1QjFOLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsZ0JBQXhCLEVBQTBDRyxLQUFqRSxDQUF2Qzs7QUFFQSxjQUFJLENBQUNsRSxRQUFMLENBQWN3Qix3QkFBZCxDQUF1QyxNQUFJLENBQUMrTixpQkFBTCxDQUF1QjFOLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsZ0JBQXhCLEVBQTBDRyxLQUFqRSxDQUF2Qzs7QUFDQSxjQUFJLENBQUNsRSxRQUFMLENBQWMwQix3QkFBZCxDQUF1QyxNQUFJLENBQUM2TixpQkFBTCxDQUF1QjFOLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsZ0JBQXhCLEVBQTBDRyxLQUFqRSxDQUF2Qzs7QUFFQSxjQUFJLENBQUN0RCxTQUFMLENBQWVrQyxLQUFmOztBQUNBLGNBQUksQ0FBQ2xDLFNBQUwsQ0FBZW1DLElBQWY7O0FBQ0EsY0FBSSxDQUFDbkQsSUFBTCxDQUFVb0YseUJBQVY7O0FBQ0EsY0FBSSxDQUFDaEMscUJBQUw7QUFDSCxPQVpEO0FBY0FuQixjQUFRLENBQUNrQyxjQUFULENBQXdCLE9BQXhCLEVBQWlDakMsZ0JBQWpDLENBQWtELE9BQWxELEVBQTJELFlBQzNEO0FBQ0ksWUFBSTBOLE1BQU0sR0FBSzNOLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsZ0JBQXhCLEVBQTBDRyxLQUF6RDtBQUNBLFlBQUl1TCxNQUFNLEdBQUs1TixRQUFRLENBQUNrQyxjQUFULENBQXdCLGdCQUF4QixFQUEwQ0csS0FBekQ7O0FBRUEsWUFBSXdMLE9BQU8sR0FBRyxNQUFJLENBQUNILGlCQUFMLENBQXVCQyxNQUFNLEdBQUdDLE1BQWhDLENBQWQ7O0FBRUEsY0FBSSxDQUFDN1AsSUFBTCxDQUFVK1AsWUFBVixDQUF1QixNQUFJLENBQUN2UCxPQUE1QixFQUFxQ3NQLE9BQXJDO0FBQ0gsT0FSRDtBQVVBN04sY0FBUSxDQUFDa0MsY0FBVCxDQUF3QixpQkFBeEIsRUFBMkNqQyxnQkFBM0MsQ0FBNEQsT0FBNUQsRUFBcUUsWUFDckU7QUFDSSxjQUFJLENBQUNsQyxJQUFMLENBQVVnUSxpQkFBVjtBQUNILE9BSEQ7QUFLQS9OLGNBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsSUFBeEIsRUFBOEJqQyxnQkFBOUIsQ0FBK0MsT0FBL0MsRUFBd0QsWUFDeEQ7QUFDSSxjQUFJLENBQUNsQyxJQUFMLENBQVVvRix5QkFBVjs7QUFDQSxjQUFJLENBQUNwRSxTQUFMLENBQWVrQyxLQUFmOztBQUNBLGNBQUksQ0FBQ2xDLFNBQUwsQ0FBZWlQLFNBQWYsR0FBMkIsK0JBQTNCOztBQUNBLGNBQUksQ0FBQzdNLHFCQUFMO0FBQ0gsT0FORDtBQVFBbkIsY0FBUSxDQUFDa0MsY0FBVCxDQUF3QixTQUF4QixFQUFtQ2pDLGdCQUFuQyxDQUFvRCxPQUFwRCxFQUE2RCxZQUM3RDtBQUNJLGNBQUksQ0FBQ2xCLFNBQUwsQ0FBZWtDLEtBQWY7O0FBQ0EsWUFBSThLLFFBQVEsR0FBRy9MLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsWUFBeEIsRUFBc0NHLEtBQXJEOztBQUNBLFlBQUltSyxHQUFHLEdBQUcsTUFBSSxDQUFDek8sSUFBTCxDQUFVa1EsZ0JBQVYsQ0FBMkJsQyxRQUEzQixFQUFxQ3JHLGtHQUFlLENBQUNDLFFBQXJELENBQVY7O0FBQ0EsY0FBSSxDQUFDNUcsU0FBTCxDQUFlbUMsSUFBZixDQUFvQnNMLEdBQUcsQ0FBQ0UsU0FBSixHQUFnQixzREFBaEIsNENBQTJHRixHQUFHLENBQUN6TSxPQUEvRyxvQkFBcEI7QUFDSCxPQU5EO0FBUUFDLGNBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsS0FBeEIsRUFBK0JqQyxnQkFBL0IsQ0FBZ0QsT0FBaEQsRUFBeUQsWUFDekQ7QUFDSSxZQUFJdU0sR0FBRyxHQUFHLE1BQUksQ0FBQ3pPLElBQUwsQ0FBVW1RLGlCQUFWLEVBQVY7O0FBQ0EsY0FBSSxDQUFDblAsU0FBTCxDQUFlbUMsSUFBZixDQUFvQnNMLEdBQUcsQ0FBQ0UsU0FBSixHQUFnQixpREFBaEIsdUNBQWlHRixHQUFHLENBQUN6TSxPQUFyRyxvQkFBcEI7QUFDSCxPQUpEO0FBTUFDLGNBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsV0FBeEIsRUFBcUNqQyxnQkFBckMsQ0FBc0QsT0FBdEQsRUFBK0QsWUFDL0Q7QUFDSSxjQUFJLENBQUNsQyxJQUFMLENBQVVvRix5QkFBVjs7QUFDQSxjQUFJLENBQUNwRSxTQUFMLENBQWVrQyxLQUFmOztBQUNBLGNBQUksQ0FBQ2xDLFNBQUwsQ0FBZWlQLFNBQWYsR0FBMkIsaUJBQTNCOztBQUNBLGNBQUksQ0FBQzdNLHFCQUFMO0FBQ0gsT0FORDtBQU9IO0FBN2dDTDtBQUFBO0FBQUEseUNBZ2hDSTtBQUNJLFVBQUdTLFlBQVksQ0FBQ3VNLE9BQWIsQ0FBcUIsUUFBckIsQ0FBSCxFQUNBO0FBQ0ksYUFBS25RLE1BQUwsR0FBYzRELFlBQVksQ0FBQ3VNLE9BQWIsQ0FBcUIsUUFBckIsQ0FBZDtBQUNBbk8sZ0JBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsUUFBeEIsRUFBa0NHLEtBQWxDLEdBQTBDLEtBQUtyRSxNQUEvQztBQUNILE9BSkQsTUFNQTtBQUNJLGFBQUtBLE1BQUwsR0FBY2dDLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsUUFBeEIsRUFBa0NHLEtBQWhEO0FBQ0g7O0FBRUQsVUFBR1QsWUFBWSxDQUFDdU0sT0FBYixDQUFxQixnQkFBckIsQ0FBSCxFQUNBO0FBQ0ksYUFBSzVQLE9BQUwsR0FBZXFELFlBQVksQ0FBQ3VNLE9BQWIsQ0FBcUIsZ0JBQXJCLENBQWY7QUFDQW5PLGdCQUFRLENBQUNrQyxjQUFULENBQXdCLGdCQUF4QixFQUEwQ0csS0FBMUMsR0FBa0QsS0FBSzlELE9BQXZEO0FBQ0gsT0FKRCxNQU1BO0FBQ0ksYUFBS0EsT0FBTCxHQUFleUIsUUFBUSxDQUFDa0MsY0FBVCxDQUF3QixnQkFBeEIsRUFBMENHLEtBQXpEO0FBQ0g7O0FBRUQsVUFBR1QsWUFBWSxDQUFDdU0sT0FBYixDQUFxQixnQkFBckIsQ0FBSCxFQUNBO0FBQ0ksYUFBS2xRLGNBQUwsR0FBc0IyRCxZQUFZLENBQUN1TSxPQUFiLENBQXFCLGdCQUFyQixDQUF0QjtBQUNBbk8sZ0JBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsZ0JBQXhCLEVBQTBDRyxLQUExQyxHQUFrRCxLQUFLcEUsY0FBdkQ7QUFDSCxPQUpELE1BTUE7QUFDSSxhQUFLQSxjQUFMLEdBQXNCK0IsUUFBUSxDQUFDa0MsY0FBVCxDQUF3QixnQkFBeEIsRUFBMENHLEtBQWhFO0FBQ0g7O0FBRUQsV0FBS2hFLGlCQUFMLEdBQXlCMkIsUUFBUSxDQUFDa0MsY0FBVCxDQUF3QixrQkFBeEIsRUFBNENvSixPQUE1QyxHQUFzRDFKLFlBQVksQ0FBQ3VNLE9BQWIsQ0FBcUIsa0JBQXJCLE1BQTZDLE1BQTdDLElBQXVELEtBQXRJO0FBQ0EsV0FBSzdQLHFCQUFMLEdBQTZCMEIsUUFBUSxDQUFDa0MsY0FBVCxDQUF3QixzQkFBeEIsRUFBZ0RvSixPQUFoRCxHQUEwRDFKLFlBQVksQ0FBQ3VNLE9BQWIsQ0FBcUIsc0JBQXJCLE1BQWlELE1BQWpELElBQTJELEtBQWxKOztBQUVBLFVBQUd2TSxZQUFZLENBQUN1TSxPQUFiLENBQXFCLFFBQXJCLEtBQWtDdk0sWUFBWSxDQUFDdU0sT0FBYixDQUFxQixTQUFyQixDQUFyQyxFQUNBO0FBQ0ksYUFBS2pRLFdBQUwsR0FBbUIsSUFBSWtRLDBGQUFKLENBQVl4TSxZQUFZLENBQUN1TSxPQUFiLENBQXFCLFFBQXJCLENBQVosRUFBNEN2TSxZQUFZLENBQUN1TSxPQUFiLENBQXFCLFNBQXJCLENBQTVDLENBQW5CO0FBQ0g7O0FBRUQsVUFBR3ZNLFlBQVksQ0FBQ3VNLE9BQWIsQ0FBcUIsZUFBckIsQ0FBSCxFQUNBO0FBQ0ksYUFBSzNQLGFBQUwsR0FBcUJvRCxZQUFZLENBQUN1TSxPQUFiLENBQXFCLGVBQXJCLENBQXJCO0FBQ0FuTyxnQkFBUSxDQUFDa0MsY0FBVCxDQUF3QixlQUF4QixFQUF5Q0csS0FBekMsR0FBaUQsS0FBSzdELGFBQXREO0FBQ0g7O0FBRUQsVUFBR29ELFlBQVksQ0FBQ3VNLE9BQWIsQ0FBcUIsNkJBQXJCLENBQUgsRUFDQTtBQUNJLGFBQUt6UCx5QkFBTCxHQUFpQ2tELFlBQVksQ0FBQ3VNLE9BQWIsQ0FBcUIsNkJBQXJCLENBQWpDO0FBQ0FuTyxnQkFBUSxDQUFDa0MsY0FBVCxDQUF3Qiw2QkFBeEIsRUFBdURvSixPQUF2RCxHQUFpRSxLQUFLNU0seUJBQXRFO0FBQ0g7O0FBRUQsV0FBS0MsU0FBTCxHQUFpQnFCLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsV0FBeEIsRUFBcUNvSixPQUFyQyxHQUErQzFKLFlBQVksQ0FBQ3VNLE9BQWIsQ0FBcUIsV0FBckIsTUFBc0MsTUFBdEMsSUFBZ0QsS0FBaEg7QUFDQSxXQUFLdlAsb0JBQUwsR0FBNEJvQixRQUFRLENBQUNrQyxjQUFULENBQXdCLHdCQUF4QixFQUFrRG9KLE9BQWxELEdBQTREMUosWUFBWSxDQUFDdU0sT0FBYixDQUFxQix3QkFBckIsTUFBbUQsTUFBbkQsSUFBNkQsS0FBcko7QUFDSDtBQXJrQ0w7QUFBQTtBQUFBLHNDQXVrQ3NCRSxTQXZrQ3RCLEVBd2tDSTtBQUNJQSxlQUFTLEdBQUdBLFNBQVMsQ0FBQ0MsT0FBVixDQUFrQixZQUFsQixFQUFnQyxXQUFoQyxDQUFaO0FBQ0FELGVBQVMsR0FBR0EsU0FBUyxDQUFDQyxPQUFWLENBQWtCLFNBQWxCLEVBQTZCLFFBQTdCLENBQVo7QUFDQSxhQUFPRCxTQUFTLENBQUNDLE9BQVYsQ0FBa0IsTUFBbEIsRUFBMEIsSUFBMUIsQ0FBUDtBQUNIO0FBNWtDTDs7QUFBQTtBQUFBO0FBK2tDQTs7OztBQUdBdE8sUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOEMsWUFDOUM7QUFDSSxNQUNBO0FBQ0ksUUFBSXJDLEdBQUcsR0FBVzJRLE9BQWxCO0FBQ0EsUUFBSTFRLE9BQU8sR0FBTyxJQUFJMlEseUZBQUosQ0FBV3hPLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsZ0JBQXhCLENBQVgsNERBQWxCO0FBQ0EsUUFBSXBFLFFBQVEsR0FBTSxJQUFJMFEseUZBQUosQ0FBV3hPLFFBQVEsQ0FBQ2tDLGNBQVQsQ0FBd0IsVUFBeEIsQ0FBWCxDQUFsQjtBQUNBLFFBQUl1TSxHQUFHLEdBQVcsSUFBSTlRLFFBQUosQ0FBYUMsR0FBYixFQUFrQkMsT0FBbEIsRUFBMkJDLFFBQTNCLENBQWxCO0FBQ0EyUSxPQUFHLENBQUN6TixLQUFKO0FBQ0gsR0FQRCxDQVFBLE9BQU0wTixHQUFOLEVBQ0E7QUFDSUgsV0FBTyxDQUFDSSxLQUFSLENBQWNELEdBQWQ7QUFDSDtBQUNKLENBZEQsRTs7Ozs7Ozs7Ozs7QUNwbkNBO0FBQ0EsSUFBSSxJQUF5RDtBQUM3RDtBQUNBLE1BQU0sRUFLOEI7QUFDcEMsQ0FBQztBQUNELG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixFQUEwQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZ0JBQWdCO0FBQzdDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGdCQUFnQjtBQUM3QztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsOEJBQThCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyQkFBMkI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsY0FBYztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEtBQUs7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNEJBQTRCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNEJBQTRCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0QkFBNEI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsdUNBQXVDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1Q0FBdUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0JBQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix3Q0FBd0M7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZ0NBQWdDO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxrQkFBa0I7QUFDbEY7QUFDQSx5REFBeUQsY0FBYztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxpQ0FBaUM7QUFDbEYsd0hBQXdILG1CQUFtQixFQUFFO0FBQzdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQywwQkFBMEIsRUFBRTtBQUMvRCx5Q0FBeUMsZUFBZTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELCtEQUErRDtBQUM3SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLHVCQUF1QjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0RkFBNEYscURBQXFELEVBQUU7O0FBRW5KO0FBQ0EsK0ZBQStGLDJEQUEyRCxFQUFFOztBQUU1SjtBQUNBLGdHQUFnRyw2REFBNkQsRUFBRTs7QUFFL0o7QUFDQSxxR0FBcUcsbUVBQW1FLEVBQUU7O0FBRTFLO0FBQ0EsMkdBQTJHLDBFQUEwRSxFQUFFOztBQUV2TCx3R0FBd0csdUVBQXVFLEVBQUU7O0FBRWpMLGdHQUFnRywrREFBK0QsRUFBRTs7QUFFakssa0dBQWtHLGlFQUFpRSxFQUFFOztBQUVySztBQUNBLHlHQUF5Ryx1RUFBdUUsRUFBRTs7QUFFbEw7QUFDQSx1R0FBdUcscUVBQXFFLEVBQUU7O0FBRTlLLHlHQUF5Ryx1RUFBdUUsRUFBRTs7QUFFbEwsbUhBQW1ILGlGQUFpRixFQUFFOztBQUV0TSw2R0FBNkcsMkVBQTJFLEVBQUU7O0FBRTFMO0FBQ0EsK0dBQStHLG1GQUFtRixFQUFFOztBQUVwTSx3R0FBd0csNEVBQTRFLEVBQUU7O0FBRXRMO0FBQ0EsNEdBQTRHLHlFQUF5RSxFQUFFOztBQUV2TDtBQUNBLG1HQUFtRyxtRUFBbUUsRUFBRTs7QUFFeEs7QUFDQSx3R0FBd0csOEVBQThFLEVBQUU7O0FBRXhMO0FBQ0Esa0hBQWtILDhGQUE4RixFQUFFOztBQUVsTjtBQUNBLDJHQUEyRyw0RUFBNEUsRUFBRTs7QUFFekwsNEdBQTRHLDZFQUE2RSxFQUFFOztBQUUzTCw4R0FBOEcsK0VBQStFLEVBQUU7O0FBRS9MLHdHQUF3Ryx5RUFBeUUsRUFBRTs7QUFFbkwscUhBQXFILHNGQUFzRixFQUFFOztBQUU3TTtBQUNBLDhHQUE4Ryw0RUFBNEUsRUFBRTs7QUFFNUwsd0dBQXdHLHNFQUFzRSxFQUFFOztBQUVoTDs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlDQUF5QyxjQUFjOztBQUV2RCx1QkFBdUIscUJBQXFCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGlCQUFpQjtBQUM1QztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLGtCQUFrQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7O0FBR0w7QUFDQSwwQkFBMEI7O0FBRTFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsa0JBQWtCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsdUJBQXVCLGFBQWE7QUFDcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLFFBQVE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTs7QUFFQTtBQUNBLGFBQWE7QUFDYiwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkMsMkJBQTJCLE9BQU87QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkMsMkJBQTJCLE9BQU87QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixZQUFZO0FBQ25DLDJCQUEyQixPQUFPO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1QixPQUFPO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsdUJBQXVCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsdUJBQXVCLHNCQUFzQjtBQUM3Qzs7QUFFQSwyQkFBMkIsUUFBUTtBQUNuQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsdUJBQXVCLHVCQUF1QjtBQUM5QztBQUNBOztBQUVBLDJCQUEyQixRQUFRO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7O0FBRUEsMkJBQTJCLGlCQUFpQjs7QUFFNUM7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQSwyQkFBMkIsc0JBQXNCO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7O0FBRUEsMkJBQTJCLHNCQUFzQjtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrREFBa0Qsa0JBQWtCOztBQUVwRTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsWUFBWTtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsbUJBQW1CO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsMENBQTBDOztBQUV6RTtBQUNBLDBCQUEwQixxREFBcUQ7O0FBRS9FO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUssTUFBTSxFQUFFOzs7QUFHYixDQUFDOzs7QUFHRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCx3QkFBd0IsbUJBQW1CO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUztBQUNoQzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsWUFBWTtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDLHNCQUFzQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1QkFBdUIsU0FBUztBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsU0FBUztBQUMxQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGlCQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDRCQUE0QjtBQUM3QztBQUNBOztBQUVBLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTCxpQkFBaUIsYUFBYTtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsWUFBWSxlQUFlO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHFCQUFxQixnQkFBZ0I7QUFDckM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLGNBQWM7QUFDMUI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSw2QkFBNkI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZLGNBQWM7QUFDMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsY0FBYztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsNkJBQTZCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLGNBQWM7QUFDMUI7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsV0FBVztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixvQkFBb0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELFdBQVc7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUJBQW1CLE9BQU87QUFDMUI7O0FBRUE7QUFDQTs7QUFFQSxxQkFBcUIsT0FBTztBQUM1QjtBQUNBOztBQUVBLHVCQUF1QixPQUFPO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsR0FBRztBQUMxQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsV0FBVztBQUM5Qjs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsV0FBVztBQUM5QjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLFNBQVM7QUFDNUI7O0FBRUEsa0NBQWtDO0FBQ2xDLHNDQUFzQztBQUN0Qzs7QUFFQTtBQUNBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkIsY0FBYztBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTs7QUFFQSxpQkFBaUIsT0FBTztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBcUIsT0FBTztBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QixtQ0FBbUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLCtDQUErQztBQUNsRTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxxQkFBcUIsc0NBQXNDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSx5QkFBeUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQkFBaUI7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGNBQWM7QUFDbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixRQUFRO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUMsUUFBUTtBQUN6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSw2QkFBNkIsbUNBQW1DO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCQUE2QixtQ0FBbUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSw2QkFBNkIsbUNBQW1DO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsNkJBQTZCLG1DQUFtQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1QkFBdUIsMEJBQTBCO0FBQ2pEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixnQ0FBZ0M7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixZQUFZO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsb0JBQW9CO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCLFFBQVE7QUFDcEM7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxHQUFHLE1BQUs7O0FBRVQsNEJBQTRCOztBQUU1QixPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLGtCQUFrQixpRUFBaUUsUUFBUSxxQkFBcUIsaUJBQWlCLHdFQUF3RSxpREFBaUQsa0JBQWtCLHVEQUF1RCxnQkFBZ0IscUJBQXFCLFFBQVEsd0RBQXdEO0FBQ3JiLFdBQVcsNkRBQTZELEtBQUssWUFBWSxXQUFXLHVCQUF1QixNQUFNLGtCQUFrQixzQkFBc0IsV0FBVyxRQUFRLElBQUksNkJBQTZCLHdEQUF3RCwwQkFBMEIsOEdBQThHO0FBQzdaLGtEQUFrRCw2REFBNkQsU0FBUyxlQUFlLGlCQUFpQiwyQkFBMkIsa0NBQWtDLG1DQUFtQyxtQ0FBbUMsd0RBQXdELG9FQUFvRSxRQUFRLElBQUksY0FBYyxXQUFXLFFBQVEsSUFBSSx1QkFBdUIsVUFBVSxJQUFJO0FBQzdlLGVBQWUsb0NBQW9DLG1DQUFtQyxtQ0FBbUMsNkNBQTZDLDZDQUE2Qyx3REFBd0Qsc0JBQXNCLElBQUksbUNBQW1DLFFBQVEsVUFBVSxnQ0FBZ0MsYUFBYSxTQUFTLFdBQVcsV0FBVyxRQUFRLGtCQUFrQixtQkFBbUIsYUFBYSxjQUFjLEVBQUU7QUFDaGYsVUFBVSxZQUFZLHdCQUF3QixZQUFZLEtBQUssc0JBQXNCLFVBQVUsd0RBQXdELFdBQVcsT0FBTyxnQ0FBZ0MsTUFBTSw4Q0FBOEMsa0VBQWtFLHlEQUF5RCxRQUFRLG1CQUFtQixjQUFjLFdBQVcsVUFBVSxRQUFRLFFBQVEsVUFBVSxzQkFBc0IsWUFBWTtBQUNsZixpQkFBaUIsZUFBZSxLQUFLLFlBQVksV0FBVyxpQkFBaUIsUUFBUSxLQUFLLDhDQUE4QyxTQUFTLElBQUksTUFBTSx3QkFBd0Isc0JBQXNCLFdBQVcsV0FBVyxVQUFVLFFBQVEsUUFBUSxJQUFJLDBDQUEwQyxLQUFLLGlCQUFpQixNQUFNLE1BQU0sMkJBQTJCLFlBQVksb0VBQW9FLE9BQU8sV0FBVztBQUN0YyxhQUFhLFVBQVUseUJBQXlCLG1CQUFtQixNQUFNLHlCQUF5QixtQkFBbUIsTUFBTSwyQkFBMkIsaUJBQWlCLE1BQU0sdUJBQXVCLHFCQUFxQixTQUFTLDhEQUE4RCxjQUFjLGlCQUFpQixNQUFNLHVFQUF1RSwwQkFBMEIsUUFBUSxJQUFJO0FBQ2xiLFVBQVUsYUFBYSwyQkFBMkIsWUFBWSw0RUFBNEUsT0FBTyxVQUFVLHlCQUF5QixtQkFBbUIsTUFBTSx5QkFBeUIsbUJBQW1CLE1BQU0sMkJBQTJCLGlCQUFpQixNQUFNLHVCQUF1QixxQkFBcUIsU0FBUyw4REFBOEQsY0FBYyxpQkFBaUIsTUFBTTtBQUN6YyxDQUFDLDBCQUEwQixZQUFZLGVBQWUsYUFBYSxnQkFBZ0IsU0FBUyxTQUFTLG9CQUFvQixTQUFTLEtBQUssVUFBVSxhQUFhLFFBQVEsSUFBSSxxR0FBcUcsdUNBQXVDLG9CQUFvQix1QkFBdUIsYUFBYSxRQUFRLElBQUk7QUFDMVgsbUJBQW1CLElBQUkseUhBQXlILFNBQVMsa0JBQWtCLFNBQVMsS0FBSyxVQUFVLGFBQWEsUUFBUSxJQUFJLDREQUE0RCxTQUFTLGtCQUFrQixLQUFLLCtCQUErQixvQkFBb0IsYUFBYSxRQUFRLElBQUkscUNBQXFDLFNBQVMsY0FBYyxPQUFPLHVDQUF1QztBQUM5ZSxnQ0FBZ0MscURBQXFELHNDQUFzQyxvRUFBb0Usc0JBQXNCLHlGQUF5Riw4RUFBOEUsU0FBUyxrQkFBa0IsVUFBVSxnREFBZ0Q7QUFDamQsQ0FBQyxVQUFVLDZCQUE2QiwyQkFBMkIsd0VBQXdFLFNBQVMsT0FBTyxRQUFRLGFBQWEsUUFBUSxJQUFJLE1BQU0sNkJBQTZCLDBFQUEwRSxZQUFZLFlBQVksWUFBWSxXQUFXLHFCQUFxQixPQUFPLHVCQUF1QixNQUFNLDhCQUE4Qix3QkFBd0IsU0FBUyxPQUFPLFFBQVE7QUFDL2QsVUFBVSxXQUFXLHFRQUFxUSxXQUFXLE1BQU0sTUFBTSxZQUFZLFlBQVksV0FBVyx3QkFBd0IsS0FBSyx1R0FBdUcsV0FBVyxNQUFNO0FBQ3plLCtCQUErQixNQUFNLFlBQVksWUFBWSxXQUFXLHFCQUFxQixLQUFLLE9BQU8sdUJBQXVCLE1BQU0sNkJBQTZCLHdCQUF3QiwwRkFBMEYsaUJBQWlCLHNCQUFzQix5RUFBeUUsU0FBUyxPQUFPLFFBQVEsYUFBYSxRQUFRLFdBQVcsTUFBTSxnQkFBZ0IsVUFBVSxXQUFXO0FBQ3hlLGFBQWEsUUFBUSxhQUFhLE1BQU0sTUFBTSxZQUFZLFlBQVksV0FBVyxvQ0FBb0MsTUFBTSxPQUFPLHVCQUF1QixNQUFNLCtCQUErQixnQkFBZ0IsU0FBUyxPQUFPLFFBQVEsYUFBYSxRQUFRLFdBQVcsaUZBQWlGLE9BQU8sOEJBQThCLE1BQU0sdUJBQXVCLHFCQUFxQixTQUFTLDhEQUE4RDtBQUNyZixnQkFBZ0IsZ0JBQWdCLFNBQVMsT0FBTyxRQUFRLGFBQWEsb0JBQW9CLFFBQVEsZUFBZSxrRUFBa0UsT0FBTyxrQ0FBa0MsTUFBTSw2RUFBNkUsU0FBUyxnQkFBZ0IscUJBQXFCLGdCQUFnQixrSEFBa0gsZ0JBQWdCO0FBQzllLFVBQVUsZ0JBQWdCLDRCQUE0Qix1SkFBdUosZ0JBQWdCLFdBQVcsK0VBQStFLG1CQUFtQixnQkFBZ0IsbUJBQW1CLGdEQUFnRCxrQkFBa0IsbUJBQW1CLG1CQUFtQjtBQUNyZCw2QkFBNkIsZUFBZSw4QkFBOEIsZUFBZSx3QkFBd0IsVUFBVSxzQ0FBc0MsZUFBZSw4QkFBOEIsZUFBZSx3QkFBd0IsVUFBVSxzQ0FBc0MsZUFBZSw0QkFBNEIsZUFBZSxzQkFBc0IsU0FBUyxzQ0FBc0MsZUFBZSw4QkFBOEIsZUFBZTtBQUNoZSxTQUFTLHNDQUFzQyxnQkFBZ0IsMEJBQTBCLHFEQUFxRCxxQkFBcUIsOENBQThDLHVFQUF1RSxzQkFBc0Isd0RBQXdELGdGQUFnRixpQkFBaUIsVUFBVSwwQkFBMEI7QUFDM2Usb0JBQW9CLHdCQUF3QixtQ0FBbUMsaUNBQWlDLHNDQUFzQyxxQkFBcUIsVUFBVSxrREFBa0QsdURBQXVELHdCQUF3QiwyREFBMkQsdURBQXVELHNDQUFzQyx1QkFBdUIsVUFBVTtBQUMvZSx1REFBdUQsa0VBQWtFLHdCQUF3Qix1RUFBdUUsa0VBQWtFLHNDQUFzQyxnQkFBZ0IsOEJBQThCLGNBQWMsV0FBVyx5RUFBeUU7QUFDaGQsc0xBQXNMLHFCQUFxQixtQkFBbUIsTUFBTSwyTUFBMk0sTUFBTTtBQUNyYix5SUFBeUksTUFBTSw0Q0FBNEMsMkVBQTJFLElBQUksbUVBQW1FLDhDQUE4QyxTQUFTLGdCQUFnQix1QkFBdUIsT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLFFBQVEsS0FBSztBQUMzZCxzTkFBc04sZUFBZSxlQUFlLGVBQWUsZUFBZSxlQUFlLFNBQVMsb0JBQW9CLE1BQU0sdUJBQXVCLFlBQVksV0FBVyx1QkFBdUIsS0FBSyxrQkFBa0Isc0JBQXNCLFdBQVcsUUFBUSxJQUFJLDZCQUE2QixTQUFTO0FBQ25mLEtBQUssdURBQXVELGdHQUFnRyxtR0FBbUcsNkRBQTZELE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxRQUFRLElBQUk7QUFDaFksaUdBQWlHLGVBQWUsZUFBZSxlQUFlLGVBQWUsZUFBZSxlQUFlLGVBQWUsZUFBZSxTQUFTLGdCQUFnQixzQkFBc0Isb0JBQW9CLFdBQVcsK0VBQStFLFFBQVEsS0FBSyxNQUFNLGFBQWEsUUFBUSxJQUFJLE1BQU0sVUFBVSw0Q0FBNEM7QUFDOWQsNkJBQTZCLFFBQVEsSUFBSSx3Q0FBd0MsUUFBUSxJQUFJLGFBQWEsSUFBSSw2QkFBNkIsUUFBUSxJQUFJLGFBQWEsSUFBSSwwQ0FBMEMsUUFBUSxJQUFJLGFBQWEsSUFBSSxpR0FBaUcsd0JBQXdCLFNBQVMsWUFBWTtBQUM3WDtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsOEJBQThCLG1GQUFtRixvREFBb0QsU0FBUztBQUM5SyxxR0FBcUcsU0FBUyxDQUFDOzs7QUFHL0csT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkLEtBQUs7QUFDTCxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQSx3Q0FBd0MsV0FBVztBQUNuRDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsY0FBYztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMsa0JBQWtCO0FBQ25EO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDhDQUE4QyxRQUFRO0FBQ3REO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUEsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLDhDQUE4QyxRQUFRO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsU0FBUztBQUNwQzs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRHQUE0RywyQkFBMkIsRUFBRTtBQUN6SSw2R0FBNkcsNEJBQTRCLEVBQUU7QUFDM0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5R0FBeUcsd0JBQXdCLEVBQUU7QUFDbkksc0dBQXNHLHFCQUFxQixFQUFFO0FBQzdILGtIQUFrSCxpQ0FBaUMsRUFBRTtBQUNySiwwR0FBMEcseUJBQXlCLEVBQUU7QUFDckksb0dBQW9HLG1CQUFtQixFQUFFO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOENBQThDO0FBQzlDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdHQUFnRyxlQUFlLEVBQUU7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVHQUF1RyxzQkFBc0IsRUFBRTtBQUMvSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDs7QUFFdEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMEdBQTBHLHlCQUF5QixFQUFFO0FBQ3JJLDBHQUEwRyx5QkFBeUIsRUFBRTtBQUNySTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0dBQWdHLGVBQWUsRUFBRTtBQUNqSDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsYUFBYTtBQUN0RjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLDRFQUE0RSxlQUFlO0FBQzNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsNEVBQTRFLGVBQWU7QUFDM0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSw0RUFBNEUsZUFBZTtBQUMzRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLDRFQUE0RSxlQUFlO0FBQzNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdHQUFnRyxlQUFlLEVBQUU7QUFDakgsc0dBQXNHLHFCQUFxQixFQUFFO0FBQzdILHNHQUFzRyxxQkFBcUIsRUFBRTtBQUM3SCx5R0FBeUcsd0JBQXdCLEVBQUU7QUFDbkksaUdBQWlHLGdCQUFnQixFQUFFO0FBQ25IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBOztBQUVBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQyxHQUFHO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7O0FBRXBCLDRCQUE0Qjs7QUFFNUIsNENBQTRDOztBQUU1Qyw0QkFBNEI7QUFDNUI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEOztBQUVoRDtBQUNBLEtBQUs7O0FBRUwsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEVBQTBFOztBQUUxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOzs7QUFHUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxR0FBcUcsb0JBQW9CLEVBQUU7QUFDM0gsb0dBQW9HLG1CQUFtQixFQUFFO0FBQ3pILHFHQUFxRyxvQkFBb0IsRUFBRTtBQUMzSCxrR0FBa0csaUJBQWlCLEVBQUU7QUFDckgsc0dBQXNHLHFCQUFxQixFQUFFO0FBQzdILCtHQUErRyw4QkFBOEIsRUFBRTtBQUMvSSx5R0FBeUcsd0JBQXdCLEVBQUU7QUFDbkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUMsR0FBRzs7QUFFSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUMsR0FBRzs7QUFFSjtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1HQUFtRyxrQkFBa0IsRUFBRTtBQUN2SCwrR0FBK0csOEJBQThCLEVBQUU7QUFDL0ksdUdBQXVHLHNCQUFzQixFQUFFO0FBQy9ILDRHQUE0RywyQkFBMkIsRUFBRTtBQUN6STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTs7QUFFQSxrQkFBa0I7O0FBRWxCLCtoQkFBK2hCO0FBQy9oQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5Q0FBeUM7O0FBRXpDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDLEdBQUc7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0R0FBNEcsMkJBQTJCLEVBQUU7QUFDekksNkdBQTZHLDRCQUE0QixFQUFFO0FBQzNJLHFHQUFxRyxvQkFBb0IsRUFBRTtBQUMzSCxxR0FBcUcsb0JBQW9CLEVBQUU7QUFDM0gsNkdBQTZHLDRCQUE0QixFQUFFO0FBQzNJLDBHQUEwRyx5QkFBeUIsRUFBRTtBQUNySSwrR0FBK0csOEJBQThCLEVBQUU7QUFDL0kseUdBQXlHLHdCQUF3QixFQUFFO0FBQ25JLHNIQUFzSCxxQ0FBcUMsRUFBRTtBQUM3SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUMsR0FBRztBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDLEdBQUc7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUMsR0FBRztBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0dBQW9HLG1CQUFtQixFQUFFO0FBQ3pILG9HQUFvRyxtQkFBbUIsRUFBRTtBQUN6SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJHQUEyRywwQkFBMEIsRUFBRTtBQUN2SSw0R0FBNEcsMkJBQTJCLEVBQUU7QUFDekksb0dBQW9HLG1CQUFtQixFQUFFO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDs7QUFFeEQ7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1R0FBdUcsc0JBQXNCLEVBQUU7QUFDL0gsOEdBQThHLDZCQUE2QixFQUFFO0FBQzdJLCtHQUErRyw4QkFBOEIsRUFBRTtBQUMvSSw0R0FBNEcsMkJBQTJCLEVBQUU7QUFDekksNkdBQTZHLDRCQUE0QixFQUFFO0FBQzNJLDJIQUEySCwwQ0FBMEMsRUFBRTtBQUN2Syw4R0FBOEcsNkJBQTZCLEVBQUU7QUFDN0ksOEdBQThHLDZCQUE2QixFQUFFO0FBQzdJLGtIQUFrSCxpQ0FBaUMsRUFBRTtBQUNySix5R0FBeUcsd0JBQXdCLEVBQUU7QUFDbkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUdBQXlHLHdCQUF3QixFQUFFO0FBQ25JLDBHQUEwRyx5QkFBeUIsRUFBRTtBQUNySSxpR0FBaUcsZ0JBQWdCLEVBQUU7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxhQUFhO0FBQ3RGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlHQUF5Ryx3QkFBd0IsRUFBRTtBQUNuSSwwR0FBMEcseUJBQXlCLEVBQUU7QUFDckksa0hBQWtILGlDQUFpQyxFQUFFO0FBQ3JKLG1IQUFtSCxrQ0FBa0MsRUFBRTtBQUN2SixtSEFBbUgsa0NBQWtDLEVBQUU7QUFDdkosb0hBQW9ILG1DQUFtQyxFQUFFO0FBQ3pKLHVHQUF1RyxzQkFBc0IsRUFBRTtBQUMvSCx3R0FBd0csdUJBQXVCLEVBQUU7QUFDakksMkdBQTJHLDBCQUEwQixFQUFFO0FBQ3ZJLDBHQUEwRyx5QkFBeUIsRUFBRTtBQUNySSx5R0FBeUcsd0JBQXdCLEVBQUU7QUFDbkksNkdBQTZHLDRCQUE0QixFQUFFO0FBQzNJLDhHQUE4Ryw2QkFBNkIsRUFBRTtBQUM3SSw4R0FBOEcsNkJBQTZCLEVBQUU7QUFDN0ksd0dBQXdHLHVCQUF1QixFQUFFO0FBQ2pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGOztBQUV2RjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLHFFQUFxRSw2RUFBNkU7QUFDL047QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1RUFBdUUsYUFBYTtBQUNwRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3R0FBd0csdUJBQXVCLEVBQUU7QUFDakk7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUdBQXlHLHdCQUF3QixFQUFFO0FBQ25JO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlHQUFpRyxnQkFBZ0IsRUFBRTtBQUNuSDtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkdBQTZHLDRCQUE0QixFQUFFO0FBQzNJLG1IQUFtSCxrQ0FBa0MsRUFBRTtBQUN2Six3R0FBd0csdUJBQXVCLEVBQUU7QUFDakksOEdBQThHLDZCQUE2QixFQUFFO0FBQzdJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUdBQXVHLHNCQUFzQixFQUFFO0FBQy9ILG9HQUFvRyxtQkFBbUIsRUFBRTtBQUN6SCwrR0FBK0csOEJBQThCLEVBQUU7QUFDL0ksa0hBQWtILGlDQUFpQyxFQUFFO0FBQ3JKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsOERBQThEOztBQUU5RCw4REFBOEQ7O0FBRTlEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLDREQUE0RDs7QUFFNUQsNERBQTREOztBQUU1RDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwyREFBMkQ7O0FBRTNELDJEQUEyRDs7QUFFM0Q7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVFQUF1RSxhQUFhO0FBQ3BGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZGQUE2RixZQUFZLEVBQUU7QUFDM0cscUdBQXFHLG9CQUFvQixFQUFFO0FBQzNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0JBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7O0FBRS9DO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qjs7QUFFNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUksUUFBUSxJQUFJO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsNkJBQTZCOztBQUU3QixPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDs7QUFFcEQ7O0FBRUE7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qjs7QUFFdkI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0I7O0FBRS9CO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQSxtR0FBbUc7O0FBRW5HO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTzs7QUFFUCwyQkFBMkI7OztBQUczQjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87OztBQUdQOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7O0FBR1A7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0NBQXNDOztBQUV0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxtRUFBbUU7O0FBRW5FO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyxHQUFHOztBQUVWO0FBQ0E7QUFDQSxxQ0FBcUM7O0FBRXJDLG9EQUFvRDs7QUFFcEQsaURBQWlEOztBQUVqRCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDs7QUFFQTtBQUNBLFNBQVM7QUFDVDs7O0FBR0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7O0FBRXZDLG9EQUFvRDs7QUFFcEQsK0NBQStDOzs7QUFHL0M7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7O0FBR1AsK0ZBQStGOztBQUUvRjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7O0FBR1AsOEZBQThGOztBQUU5RjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7O0FBR1AsMkZBQTJGOztBQUUzRjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7O0FBR1AsNkZBQTZGOztBQUU3RjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7O0FBR1AsNkZBQTZGOztBQUU3RjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7O0FBR1AsNkZBQTZGOztBQUU3RjtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0EsV0FBVztBQUNYLDJFQUEyRTs7O0FBRzNFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLDBIQUEwSDs7O0FBRzFIO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLCtDQUErQzs7QUFFL0M7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkM7O0FBRTNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVztBQUNYOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7OztBQUdBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsOENBQThDOzs7QUFHOUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsU0FBUzs7O0FBR1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOzs7QUFHUDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsNkVBQTZFOztBQUU3RTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7OztBQUlELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtR0FBbUcsa0JBQWtCLEVBQUU7QUFDdkgsaUdBQWlHLGdCQUFnQixFQUFFO0FBQ25ILDBHQUEwRyx5QkFBeUIsRUFBRTtBQUNySSx5R0FBeUcsd0JBQXdCLEVBQUU7QUFDbkksMEdBQTBHLHlCQUF5QixFQUFFO0FBQ3JJLHFHQUFxRyxvQkFBb0IsRUFBRTtBQUMzSCw4R0FBOEcsNkJBQTZCLEVBQUU7QUFDN0ksOEdBQThHLDZCQUE2QixFQUFFO0FBQzdJLG1HQUFtRyxrQkFBa0IsRUFBRTtBQUN2SCw0R0FBNEcsMkJBQTJCLEVBQUU7QUFDekk7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkM7QUFDQTs7QUFFQSwrQkFBK0I7QUFDL0I7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQSxxQkFBcUI7QUFDckI7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUI7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNkJBQTZCO0FBQzdCO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCO0FBQ0E7O0FBRUEscUNBQXFDO0FBQ3JDO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBOztBQUVBLHFDQUFxQztBQUNyQztBQUNBOztBQUVBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7O0FBRUEsa0ZBQWtGO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCO0FBQ0E7O0FBRUEseUNBQXlDO0FBQ3pDO0FBQ0E7O0FBRUEsNENBQTRDO0FBQzVDO0FBQ0E7O0FBRUEsa0NBQWtDO0FBQ2xDO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDLEdBQUc7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUNBQWlDO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1R0FBdUcsc0JBQXNCLEVBQUU7QUFDL0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4REFBOEQ7O0FBRTlEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSx1RkFBdUY7O0FBRXZGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7OztBQUdUO0FBQ0E7QUFDQSwrSEFBK0g7O0FBRS9IO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLDZDQUE2Qzs7QUFFN0M7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0dBQW9HLG1CQUFtQixFQUFFO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE9BQU87OztBQUdQLGdHQUFnRzs7QUFFaEc7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7O0FBR1AseUZBQXlGOztBQUV6RjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtHQUErRyw4QkFBOEIsRUFBRTtBQUMvSSxnSEFBZ0gsK0JBQStCLEVBQUU7QUFDakoseUdBQXlHLHdCQUF3QixFQUFFO0FBQ25JO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLE9BQU87O0FBRVAsVUFBVTtBQUNWLENBQUM7QUFDRCwyQ0FBMkMsY0FBYyx1NW12QiIsImZpbGUiOiJSYW1lblBvcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gd2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXTtcbiBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHRcdGlmIChwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuIFx0fSA7XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuIFx0XHRzY3JpcHQuY2hhcnNldCA9IFwidXRmLThcIjtcbiBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIjtcbiBcdFx0aWYgKG51bGwpIHNjcmlwdC5jcm9zc09yaWdpbiA9IG51bGw7XG4gXHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KHJlcXVlc3RUaW1lb3V0KSB7XG4gXHRcdHJlcXVlc3RUaW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQgfHwgMTAwMDA7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XG4gXHRcdFx0fVxuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XG4gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XG4gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XG4gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XG4gXHRcdFx0fVxuIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XG4gXHRcdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbiBcdFx0XHRcdFx0Ly8gdGltZW91dFxuIFx0XHRcdFx0XHRyZWplY3QoXG4gXHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKVxuIFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XG4gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcbiBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuIFx0XHRcdFx0fSBlbHNlIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwICYmIHJlcXVlc3Quc3RhdHVzICE9PSAzMDQpIHtcbiBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHQvLyBzdWNjZXNzXG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0dmFyIHVwZGF0ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuIFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG4gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuIFx0XHRcdFx0XHRcdHJldHVybjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCJkOGE1NWU2OWNlYjFkZThhOTk3MFwiO1xuIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XG4gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcbiBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkge1xuIFx0XHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0aWYgKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbiBcdFx0XHRpZiAobWUuaG90LmFjdGl2ZSkge1xuIFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcbiBcdFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtZS5jaGlsZHJlbi5pbmRleE9mKHJlcXVlc3QpID09PSAtMSkge1xuIFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcbiBcdFx0XHRcdFx0XHRyZXF1ZXN0ICtcbiBcdFx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuIFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHQpO1xuIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XG4gXHRcdH07XG4gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcbiBcdFx0XHRcdH0sXG4gXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9O1xuIFx0XHRmb3IgKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwiZVwiICYmXG4gXHRcdFx0XHRuYW1lICE9PSBcInRcIlxuIFx0XHRcdCkge1xuIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInJlYWR5XCIpIGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XG4gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xuIFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XG4gXHRcdFx0XHR0aHJvdyBlcnI7XG4gXHRcdFx0fSk7XG5cbiBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XG4gXHRcdFx0XHRpZiAoaG90U3RhdHVzID09PSBcInByZXBhcmVcIikge1xuIFx0XHRcdFx0XHRpZiAoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmIChob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fTtcbiBcdFx0Zm4udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdFx0aWYgKG1vZGUgJiAxKSB2YWx1ZSA9IGZuKHZhbHVlKTtcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy50KHZhbHVlLCBtb2RlICYgfjEpO1xuIFx0XHR9O1xuIFx0XHRyZXR1cm4gZm47XG4gXHR9XG5cbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBob3QgPSB7XG4gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG4gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcbiBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcbiBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcblxuIFx0XHRcdC8vIE1vZHVsZSBBUElcbiBcdFx0XHRhY3RpdmU6IHRydWUsXG4gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG4gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbiBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdFx0ZWxzZSBob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuIFx0XHRcdH0sXG4gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XG4gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7XG4gXHRcdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG4gXHRcdFx0fSxcbiBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRpZiAoIWwpIHJldHVybiBob3RTdGF0dXM7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG4gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG4gXHRcdH07XG4gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcbiBcdFx0cmV0dXJuIGhvdDtcbiBcdH1cblxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XG5cbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xuIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbiBcdH1cblxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcbiBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3REZWZlcnJlZDtcblxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XG4gXHRcdHZhciBpc051bWJlciA9ICtpZCArIFwiXCIgPT09IGlkO1xuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcbiBcdFx0fVxuIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xuIFx0XHRyZXR1cm4gaG90RG93bmxvYWRNYW5pZmVzdChob3RSZXF1ZXN0VGltZW91dCkudGhlbihmdW5jdGlvbih1cGRhdGUpIHtcbiBcdFx0XHRpZiAoIXVwZGF0ZSkge1xuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbiBcdFx0XHRcdHJldHVybiBudWxsO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdEF2YWlsYWJsZUZpbGVzTWFwID0gdXBkYXRlLmM7XG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xuXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XG4gXHRcdFx0XHRcdHJlc29sdmU6IHJlc29sdmUsXG4gXHRcdFx0XHRcdHJlamVjdDogcmVqZWN0XG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdHZhciBjaHVua0lkID0gXCJSYW1lblBvc1wiO1xuIFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb25lLWJsb2Nrc1xuIFx0XHRcdHtcbiBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gXHRcdHZhciBjYjtcbiBcdFx0dmFyIGk7XG4gXHRcdHZhciBqO1xuIFx0XHR2YXIgbW9kdWxlO1xuIFx0XHR2YXIgbW9kdWxlSWQ7XG5cbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG4gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbihpZCkge1xuIFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0Y2hhaW46IFtpZF0sXG4gXHRcdFx0XHRcdGlkOiBpZFxuIFx0XHRcdFx0fTtcbiBcdFx0XHR9KTtcbiBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpIGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG4gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0XHRcdFx0aWYgKFxuIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHRcdFx0XHQpXG4gXHRcdFx0XHRcdFx0KSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJlxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQgJiZcbiBcdFx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcbiBcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmVcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuIFx0XHRcdFx0fSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbiBcdFx0XHRpZiAoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0fVxuIFx0XHR9KTtcblxuIFx0XHR2YXIgaWR4O1xuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcbiBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuIFx0XHRcdHZhciBkYXRhID0ge307XG5cbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbiBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuIFx0XHRcdFx0Y2IoZGF0YSk7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG5cbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbiBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xuIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSB7XG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cbiBcdFx0dmFyIGRlcGVuZGVuY3k7XG4gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbiBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcbiBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxuIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihjYikgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuIFx0XHRcdFx0XHR0cnkge1xuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuIFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuIFx0XHRpZiAoZXJyb3IpIHtcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gXHRcdH1cblxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSBmdW5jdGlvbigpIHsgcmV0dXJuIGhvdEN1cnJlbnRIYXNoOyB9O1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoXCIuL1JhbWVuUG9zL1JhbWVuUG9zLmpzXCIpKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9SYW1lblBvcy9SYW1lblBvcy5qc1wiKTtcbiIsImltcG9ydCB7XG4gICAgU3BpLCBcbiAgICBMb2dnZXIsIFxuICAgIFNlY3JldHMsIFxuICAgIFRyYW5zYWN0aW9uT3B0aW9ucyxcbiAgICBUcmFuc2FjdGlvblR5cGUsXG4gICAgUHJpbnRpbmdSZXNwb25zZSxcbiAgICBSZWZ1bmRSZXNwb25zZSxcbiAgICBUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlLFxuICAgIFRlcm1pbmFsQmF0dGVyeSxcbiAgICBDYXNob3V0T25seVJlc3BvbnNlLFxuICAgIE1vdG9QdXJjaGFzZVJlc3BvbnNlLFxuICAgIEdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlLFxuICAgIFB1cmNoYXNlUmVzcG9uc2UsXG4gICAgU2V0dGxlbWVudCxcbiAgICBTdWNjZXNzU3RhdGUsXG4gICAgUmVxdWVzdElkSGVscGVyLFxuICAgIERldmljZUFkZHJlc3NSZXNwb25zZUNvZGUsXG4gICAgU3BpRmxvdyxcbiAgICBTcGlTdGF0dXN9IGZyb20gJ0Bhc3NlbWJseXBheW1lbnRzL3NwaS1jbGllbnQtanMvZGlzdC9zcGktY2xpZW50LWpzJztcblxuLy8gPHN1bW1hcnk+XG4vLyBOT1RFOiBUSElTIFBST0pFQ1QgVVNFUyBUSEUgMi42Lnggb2YgdGhlIFNQSSBDbGllbnQgTGlicmFyeVxuLy8gIFxuLy8gVGhpcyBpcyB5b3VyIFBPUy4gVG8gaW50ZWdyYXRlIHdpdGggU1BJLCB5b3UgbmVlZCB0byBpbnN0YW50aWF0ZSBhIFNwaSBvYmplY3Rcbi8vIGFuZCBpbnRlcmFjdCB3aXRoIGl0LlxuLy8gXG4vLyBQcmltYXJpbHkgeW91IG5lZWQgdG8gaW1wbGVtZW50IDMgdGhpbmdzLlxuLy8gMS4gU2V0dGluZ3MgU2NyZWVuXG4vLyAyLiBQYWlyaW5nIEZsb3cgU2NyZWVuXG4vLyAzLiBUcmFuc2FjdGlvbiBGbG93IHNjcmVlblxuLy8gXG4vLyBUbyBzZWUgbG9ncyBmcm9tIHNwaSwgY2hlY2sgdGhlIGNvbnNvbGVcbi8vIDwvc3VtbWFyeT5cbmV4cG9ydCBjbGFzcyBSYW1lblBvc1xue1xuICAgIGNvbnN0cnVjdG9yKGxvZywgcmVjZWlwdCwgZmxvd19tc2cpIFxuICAgIHtcbiAgICAgICAgdGhpcy5fc3BpID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcG9zSWQgPSBcIlJBTUVOUE9TMVwiO1xuICAgICAgICB0aGlzLl9lZnRwb3NBZGRyZXNzID0gXCIxOTIuMTY4LjEuMVwiO1xuICAgICAgICB0aGlzLl9zcGlTZWNyZXRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSAnMi42LjMnO1xuICAgICAgICB0aGlzLl9yY3B0X2Zyb21fZWZ0cG9zID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3NpZ19mbG93X2Zyb21fZWZ0cG9zID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fYXBpS2V5ICAgICAgICAgPSBudWxsO1xuICAgICAgICB0aGlzLl9zZXJpYWxOdW1iZXIgICA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2FjcXVpcmVyQ29kZSAgID0gXCJ3YmNcIjtcbiAgICAgICAgdGhpcy5fYXV0b1Jlc29sdmVFZnRwb3NBZGRyZXNzICA9IGZhbHNlO1xuICAgICAgICB0aGlzLl90ZXN0TW9kZSAgICAgICA9IHRydWU7XG4gICAgICAgIHRoaXMuX3VzZVNlY3VyZVdlYlNvY2tldHMgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9sb2cgPSBsb2c7XG4gICAgICAgIHRoaXMuX3JlY2VpcHQgPSByZWNlaXB0O1xuICAgICAgICB0aGlzLl9mbG93X21zZyA9IGZsb3dfbXNnO1xuICAgIH1cblxuICAgIFN0YXJ0KClcbiAgICB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiU3RhcnRpbmcgUmFtZW5Qb3MuLi5cIik7XG4gICAgICAgIHRoaXMuTG9hZFBlcnNpc3RlZFN0YXRlKCk7XG5cbiAgICAgICAgdHJ5XG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaSA9IG5ldyBTcGkodGhpcy5fcG9zSWQsIHRoaXMuX3NlcmlhbE51bWJlciwgdGhpcy5fZWZ0cG9zQWRkcmVzcywgdGhpcy5fc3BpU2VjcmV0cyk7IC8vIEl0IGlzIG9rIHRvIG5vdCBoYXZlIHRoZSBzZWNyZXRzIHlldCB0byBzdGFydCB3aXRoLlxuICAgICAgICAgICAgdGhpcy5fc3BpLkNvbmZpZy5Qcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IHRoaXMuX3JjcHRfZnJvbV9lZnRwb3M7XG4gICAgICAgICAgICB0aGlzLl9zcGkuQ29uZmlnLlNpZ25hdHVyZUZsb3dPbkVmdHBvcyA9IHRoaXMuX3NpZ19mbG93X2Zyb21fZWZ0cG9zO1xuXG4gICAgICAgICAgICB0aGlzLl9zcGkuU2V0UG9zSW5mbyhcImFzc2VtYmx5XCIsIHRoaXMuX3ZlcnNpb24pO1xuICAgICAgICAgICAgdGhpcy5fc3BpLlNldEFjcXVpcmVyQ29kZSh0aGlzLl9hY3F1aXJlckNvZGUpO1xuICAgICAgICAgICAgdGhpcy5fc3BpLlNldERldmljZUFwaUtleSh0aGlzLl9hcGlLZXkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zID0gbmV3IFRyYW5zYWN0aW9uT3B0aW9ucygpO1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5TZXRDdXN0b21lclJlY2VpcHRIZWFkZXIoXCJcIik7XG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLlNldEN1c3RvbWVyUmVjZWlwdEZvb3RlcihcIlwiKTtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuU2V0TWVyY2hhbnRSZWNlaXB0SGVhZGVyKFwiXCIpO1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5TZXRNZXJjaGFudFJlY2VpcHRGb290ZXIoXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKGUuTWVzc2FnZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdEZXZpY2VBZGRyZXNzQ2hhbmdlZCcsIChlKSA9PiB0aGlzLk9uRGV2aWNlQWRkcmVzc0NoYW5nZWQoZS5kZXRhaWwpKTsgXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ1N0YXR1c0NoYW5nZWQnLCAoZSkgPT4gdGhpcy5PblNwaVN0YXR1c0NoYW5nZWQoZS5kZXRhaWwpKTsgXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ1BhaXJpbmdGbG93U3RhdGVDaGFuZ2VkJywgKGUpID0+IHRoaXMuT25QYWlyaW5nRmxvd1N0YXRlQ2hhbmdlZChlLmRldGFpbCkpOyBcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignU2VjcmV0c0NoYW5nZWQnLCAoZSkgPT4gdGhpcy5PblNlY3JldHNDaGFuZ2VkKGUuZGV0YWlsKSk7IFxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCAoZSkgPT4gdGhpcy5PblR4Rmxvd1N0YXRlQ2hhbmdlZChlLmRldGFpbCkpOyBcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX3NwaS5QcmludGluZ1Jlc3BvbnNlID0gdGhpcy5IYW5kbGVQcmludGluZ1Jlc3BvbnNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3NwaS5UZXJtaW5hbFN0YXR1c1Jlc3BvbnNlID0gdGhpcy5IYW5kbGVUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3NwaS5CYXR0ZXJ5TGV2ZWxDaGFuZ2VkID0gdGhpcy5IYW5kbGVCYXR0ZXJ5TGV2ZWxDaGFuZ2VkLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5TZXRBdXRvQWRkcmVzc1Jlc29sdXRpb25TdGF0ZSgpO1xuICAgICAgICB0aGlzLl9zcGkuU3RhcnQoKTtcblxuICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBXZWxjb21lIHRvIFJhbWVuUG9zICFcIik7XG4gICAgICAgIFxuICAgICAgICB0aGlzLlByaW50U3RhdHVzQW5kQWN0aW9ucygpO1xuICAgICAgICB0aGlzLkFjY2VwdFVzZXJJbnB1dCgpO1xuICAgIH1cblxuICAgIERldmljZUFkZHJlc3NSZXF1ZXN0KClcbiAgICB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBBcGlLZXk6IHRoaXMuX2FwaUtleSxcbiAgICAgICAgICAgIFNlcmlhbE51bWJlcjogdGhpcy5fc2VyaWFsTnVtYmVyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgT25UeEZsb3dTdGF0ZUNoYW5nZWQodHhTdGF0ZSlcbiAgICB7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkNsZWFyKCk7XG4gICAgICAgIHRoaXMuUHJpbnRTdGF0dXNBbmRBY3Rpb25zKCk7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCI+IFwiKTtcbiAgICB9XG5cbiAgICBPblBhaXJpbmdGbG93U3RhdGVDaGFuZ2VkKHBhaXJpbmdGbG93U3RhdGUpXG4gICAge1xuICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICB0aGlzLlByaW50U3RhdHVzQW5kQWN0aW9ucygpO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiPiBcIik7XG4gICAgfVxuXG4gICAgT25TZWNyZXRzQ2hhbmdlZChzZWNyZXRzKVxuICAgIHtcbiAgICAgICAgdGhpcy5fc3BpU2VjcmV0cyA9IHNlY3JldHM7XG4gICAgICAgIGlmIChzZWNyZXRzICE9IG51bGwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKGAjIEkgSGF2ZSBTZWNyZXRzOiAke3NlY3JldHMuRW5jS2V5fSR7c2VjcmV0cy5IbWFjS2V5fS4gUGVyc2lzdCB0aGVtIFNlY3VyZWx5LmApO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0VuY0tleScsIHNlY3JldHMuRW5jS2V5KTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdIbWFjS2V5Jywgc2VjcmV0cy5IbWFjS2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKGAjIEkgSGF2ZSBMb3N0IHRoZSBTZWNyZXRzLCBpLmUuIFVucGFpcmVkLiBEZXN0cm95IHRoZSBwZXJzaXN0ZWQgc2VjcmV0cy5gKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdFbmNLZXknKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdIbWFjS2V5Jyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLy8gPHN1bW1hcnk+XG4gICAgLy8vIENhbGxlZCB3aGVuIHdlIHJlY2VpdmVkIGEgU3RhdHVzIFVwZGF0ZSBpLmUuIFVucGFpcmVkL1BhaXJlZENvbm5lY3RpbmcvUGFpcmVkQ29ubmVjdGVkXG4gICAgLy8vIDwvc3VtbWFyeT5cbiAgICAvLy8gPHBhcmFtIG5hbWU9XCJzZW5kZXJcIj48L3BhcmFtPlxuICAgIC8vLyA8cGFyYW0gbmFtZT1cInNwaVN0YXR1c1wiPjwvcGFyYW0+XG4gICAgT25TcGlTdGF0dXNDaGFuZ2VkKHNwaVN0YXR1cylcbiAgICB7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkNsZWFyKCk7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgLS0+IFNQSSBTdGF0dXMgQ2hhbmdlZDogJHtzcGlTdGF0dXN9YCk7XG4gICAgICAgIHRoaXMuUHJpbnRTdGF0dXNBbmRBY3Rpb25zKCk7XG4gICAgfVxuXG4gICAgT25EZXZpY2VBZGRyZXNzQ2hhbmdlZChkZXZpY2VBZGRyZXNzU3RhdHVzKVxuICAgIHtcbiAgICAgICAgdmFyIGVmdHBvc0FkZHJlc3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWZ0cG9zX2FkZHJlc3MnKTtcblxuICAgICAgICBzd2l0Y2goZGV2aWNlQWRkcmVzc1N0YXR1cy5EZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlKVxuICAgICAgICB7XG4gICAgICAgICAgICBjYXNlIERldmljZUFkZHJlc3NSZXNwb25zZUNvZGUuU1VDQ0VTUzpcbiAgICAgICAgICAgICAgICBlZnRwb3NBZGRyZXNzLnZhbHVlID0gZGV2aWNlQWRkcmVzc1N0YXR1cy5BZGRyZXNzO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VmdHBvc0FkZHJlc3MgPSBkZXZpY2VBZGRyZXNzU3RhdHVzLkFkZHJlc3M7XG4gICAgICAgICAgICAgICAgYWxlcnQoYERldmljZSBBZGRyZXNzIGhhcyBiZWVuIHVwZGF0ZWQgdG8gJHtkZXZpY2VBZGRyZXNzU3RhdHVzLkFkZHJlc3N9YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERldmljZUFkZHJlc3NSZXNwb25zZUNvZGUuSU5WQUxJRF9TRVJJQUxfTlVNQkVSOlxuICAgICAgICAgICAgICAgIGVmdHBvc0FkZHJlc3MudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VmdHBvc0FkZHJlc3MgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiVGhlIHNlcmlhbCBudW1iZXIgaXMgaW52YWxpZDogXCIgKyBkZXZpY2VBZGRyZXNzU3RhdHVzLlJlc3BvbnNlU3RhdHVzRGVzY3JpcHRpb24gKyBcIiA6IFwiICsgZGV2aWNlQWRkcmVzc1N0YXR1cy5SZXNwb25zZU1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlLkRFVklDRV9TRVJWSUNFX0VSUk9SOlxuICAgICAgICAgICAgICAgIGVmdHBvc0FkZHJlc3MudmFsdWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VmdHBvc0FkZHJlc3MgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiVGhlIGRldmljZSBzZXJ2aWNlIGVycm9yOiBcIiArIGRldmljZUFkZHJlc3NTdGF0dXMuUmVzcG9uc2VTdGF0dXNEZXNjcmlwdGlvbiArIFwiIDogXCIgKyBkZXZpY2VBZGRyZXNzU3RhdHVzLlJlc3BvbnNlTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIERldmljZUFkZHJlc3NSZXNwb25zZUNvZGUuQUREUkVTU19OT1RfQ0hBTkdFRDpcbiAgICAgICAgICAgICAgICBhbGVydChcIlRoZSBJUCBhZGRyZXNzIGhhdmUgbm90IGNoYW5nZWQhXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlLlNFUklBTF9OVU1CRVJfTk9UX0NIQU5HRUQ6XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJUaGUgc2VyaWFsIG51bWJlciBoYXZlIG5vdCBjaGFuZ2VkIVwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJUaGUgc2VyaWFsIG51bWJlciBpcyBpbnZhbGlkISBvciBUaGUgSVAgYWRkcmVzcyBoYXZlIG5vdCBjaGFuZ2VkIVwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfSAgICAgICAgXG4gICAgfVxuXG4gICAgSGFuZGxlUHJpbnRpbmdSZXNwb25zZShtZXNzYWdlKVxuICAgIHtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuQ2xlYXIoKTtcbiAgICAgICAgdmFyIHByaW50aW5nUmVzcG9uc2UgPSBuZXcgUHJpbnRpbmdSZXNwb25zZShtZXNzYWdlKTtcblxuICAgICAgICBpZiAocHJpbnRpbmdSZXNwb25zZS5pc1N1Y2Nlc3MoKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgLS0+IFByaW50aW5nIFJlc3BvbnNlOiBQcmludGluZyBSZWNlaXB0IHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyAtLT4gUHJpbnRpbmcgUmVzcG9uc2U6ICBQcmludGluZyBSZWNlaXB0IGZhaWxlZDogcmVhc29uID0gXCIgKyBwcmludGluZ1Jlc3BvbnNlLmdldEVycm9yUmVhc29uKCkgKyBcIiwgZGV0YWlsID0gXCIgKyBwcmludGluZ1Jlc3BvbnNlLmdldEVycm9yRGV0YWlsKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3BpLkFja0Zsb3dFbmRlZEFuZEJhY2tUb0lkbGUoKTtcbiAgICAgICAgdGhpcy5QcmludFN0YXR1c0FuZEFjdGlvbnMoKTtcbiAgICB9XG5cbiAgICBIYW5kbGVUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlKG1lc3NhZ2UpXG4gICAge1xuICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICB2YXIgdGVybWluYWxTdGF0dXNSZXNwb25zZSA9IG5ldyBUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBUZXJtaW5hbCBTdGF0dXMgUmVzcG9uc2UgI1wiKTtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgU3RhdHVzOiBcIiArIHRlcm1pbmFsU3RhdHVzUmVzcG9uc2UuR2V0U3RhdHVzKCkpO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBCYXR0ZXJ5IExldmVsOiBcIiArIHRlcm1pbmFsU3RhdHVzUmVzcG9uc2UuR2V0QmF0dGVyeUxldmVsKCkgKyBcIiVcIik7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIENoYXJnaW5nOiBcIiArIHRlcm1pbmFsU3RhdHVzUmVzcG9uc2UuSXNDaGFyZ2luZygpKTtcbiAgICAgICAgdGhpcy5fc3BpLkFja0Zsb3dFbmRlZEFuZEJhY2tUb0lkbGUoKTtcbiAgICAgICAgdGhpcy5QcmludFN0YXR1c0FuZEFjdGlvbnMoKTtcbiAgICB9XG5cbiAgICBIYW5kbGVCYXR0ZXJ5TGV2ZWxDaGFuZ2VkKG1lc3NhZ2UpXG4gICAge1xuICAgICAgICB0aGlzLl9sb2cuY2xlYXIoKTtcbiAgICAgICAgdmFyIHRlcm1pbmFsQmF0dGVyeSA9IG5ldyBUZXJtaW5hbEJhdHRlcnkobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIEJhdHRlcnkgTGV2ZWwgQ2hhbmdlZCAjXCIpO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBCYXR0ZXJ5IExldmVsOiBcIiArIHRlcm1pbmFsQmF0dGVyeS5CYXR0ZXJ5TGV2ZWwgKyBcIiVcIik7XG4gICAgICAgIHRoaXMuX3NwaS5BY2tGbG93RW5kZWRBbmRCYWNrVG9JZGxlKCk7XG4gICAgICAgIHRoaXMuUHJpbnRTdGF0dXNBbmRBY3Rpb25zKCk7XG4gICAgfVxuXG4gICAgUHJpbnRTdGF0dXNBbmRBY3Rpb25zKClcbiAgICB7XG4gICAgICAgIHRoaXMuUHJpbnRGbG93SW5mbygpO1xuXG4gICAgICAgIHRoaXMuUHJpbnRBY3Rpb25zKCk7XG5cbiAgICAgICAgdGhpcy5QcmludFBhaXJpbmdTdGF0dXMoKTtcbiAgICB9XG5cbiAgICBQcmludEZsb3dJbmZvKClcbiAgICB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fc3BpLkN1cnJlbnRGbG93KVxuICAgICAgICB7XG4gICAgICAgICAgICBjYXNlIFNwaUZsb3cuUGFpcmluZzpcbiAgICAgICAgICAgICAgICB2YXIgcGFpcmluZ1N0YXRlID0gdGhpcy5fc3BpLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIyMgUEFJUklORyBQUk9DRVNTIFVQREFURSAjIyNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyAke3BhaXJpbmdTdGF0ZS5NZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgRmluaXNoZWQ/ICR7cGFpcmluZ1N0YXRlLkZpbmlzaGVkfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgU3VjY2Vzc2Z1bD8gJHtwYWlyaW5nU3RhdGUuU3VjY2Vzc2Z1bH1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIENvbmZpcm1hdGlvbiBDb2RlOiAke3BhaXJpbmdTdGF0ZS5Db25maXJtYXRpb25Db2RlfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgV2FpdGluZyBDb25maXJtIGZyb20gRWZ0cG9zPyAke3BhaXJpbmdTdGF0ZS5Bd2FpdGluZ0NoZWNrRnJvbUVmdHBvc31gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFdhaXRpbmcgQ29uZmlybSBmcm9tIFBPUz8gJHtwYWlyaW5nU3RhdGUuQXdhaXRpbmdDaGVja0Zyb21Qb3N9YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgU3BpRmxvdy5UcmFuc2FjdGlvbjpcbiAgICAgICAgICAgICAgICB2YXIgdHhTdGF0ZSA9IHRoaXMuX3NwaS5DdXJyZW50VHhGbG93U3RhdGU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMjIyBUWCBQUk9DRVNTIFVQREFURSAjIyNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyAke3R4U3RhdGUuRGlzcGxheU1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBQb3NSZWZJZDogJHt0eFN0YXRlLlBvc1JlZklkfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgVHlwZTogJHt0eFN0YXRlLlR5cGV9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBBbW91bnQ6ICQkeyh0eFN0YXRlLkFtb3VudENlbnRzIC8gMTAwLjApLnRvRml4ZWQoMil9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBXYWl0aW5nIEZvciBTaWduYXR1cmU6ICR7dHhTdGF0ZS5Bd2FpdGluZ1NpZ25hdHVyZUNoZWNrfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQXR0ZW1wdGluZyB0byBDYW5jZWwgOiAke3R4U3RhdGUuQXR0ZW1wdGluZ1RvQ2FuY2VsfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgRmluaXNoZWQ6ICR7dHhTdGF0ZS5GaW5pc2hlZH1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFN1Y2Nlc3M6ICR7dHhTdGF0ZS5TdWNjZXNzfWApO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR4U3RhdGUuQXdhaXRpbmdTaWduYXR1cmVDaGVjaylcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gcHJpbnQgdGhlIHJlY2VpcHQgZm9yIHRoZSBjdXN0b21lciB0byBzaWduLlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFJFQ0VJUFQgVE8gUFJJTlQgRk9SIFNJR05BVFVSRWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNlaXB0LkluZm8odHhTdGF0ZS5TaWduYXR1cmVSZXF1aXJlZE1lc3NhZ2UuR2V0TWVyY2hhbnRSZWNlaXB0KCkudHJpbSgpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHhTdGF0ZS5Bd2FpdGluZ1Bob25lRm9yQXV0aClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUEhPTkUgRk9SIEFVVEggREVUQUlMUzpgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBDQUxMOiAke3R4U3RhdGUuUGhvbmVGb3JBdXRoUmVxdWlyZWRNZXNzYWdlLkdldFBob25lTnVtYmVyKCl9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUVVPVEU6IE1lcmNoYW50IElkOiAke3R4U3RhdGUuUGhvbmVGb3JBdXRoUmVxdWlyZWRNZXNzYWdlLkdldE1lcmNoYW50SWQoKX1gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHhTdGF0ZS5GaW5pc2hlZClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHhTdGF0ZS5UeXBlKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5QdXJjaGFzZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkhhbmRsZUZpbmlzaGVkUHVyY2hhc2UodHhTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5SZWZ1bmQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5IYW5kbGVGaW5pc2hlZFJlZnVuZCh0eFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVHJhbnNhY3Rpb25UeXBlLkNhc2hvdXRPbmx5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuSGFuZGxlRmluaXNoZWRDYXNob3V0KHR4U3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuTU9UTzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkhhbmRsZUZpbmlzaGVkTW90byh0eFN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVHJhbnNhY3Rpb25UeXBlLlNldHRsZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkhhbmRsZUZpbmlzaGVkU2V0dGxlKHR4U3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuU2V0dGxlbWVudEVucXVpcnk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5IYW5kbGVGaW5pc2hlZFNldHRsZW1lbnRFbnF1aXJ5KHR4U3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuR2V0TGFzdFRyYW5zYWN0aW9uOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuSGFuZGxlRmluaXNoZWRHZXRMYXN0VHJhbnNhY3Rpb24odHhTdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkVycm9yKGAjIENBTidUIEhBTkRMRSBUWCBUWVBFOiAke3R4U3RhdGUuVHlwZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEhhbmRsZUZpbmlzaGVkUHVyY2hhc2UodHhTdGF0ZSlcbiAgICB7XG4gICAgICAgIHZhciBwdXJjaGFzZVJlc3BvbnNlO1xuICAgICAgICBzd2l0Y2ggKHR4U3RhdGUuU3VjY2VzcylcbiAgICAgICAge1xuICAgICAgICAgICAgY2FzZSBTdWNjZXNzU3RhdGUuU3VjY2VzczpcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFdPT0hPTyAtIFdFIEdPVCBQQUlEIWApO1xuICAgICAgICAgICAgICAgIHB1cmNoYXNlUmVzcG9uc2UgPSBuZXcgUHVyY2hhc2VSZXNwb25zZSh0eFN0YXRlLlJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFJlc3BvbnNlOiAke3B1cmNoYXNlUmVzcG9uc2UuR2V0UmVzcG9uc2VUZXh0KCl9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSUk46ICR7cHVyY2hhc2VSZXNwb25zZS5HZXRSUk4oKX1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFNjaGVtZTogJHtwdXJjaGFzZVJlc3BvbnNlLlNjaGVtZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBDdXN0b21lciBSZWNlaXB0OmApO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpcHQuSW5mbyghcHVyY2hhc2VSZXNwb25zZS5XYXNDdXN0b21lclJlY2VpcHRQcmludGVkKCkgPyBwdXJjaGFzZVJlc3BvbnNlLkdldEN1c3RvbWVyUmVjZWlwdCgpLnRyaW0oKSA6IGAjIFBSSU5URUQgRlJPTSBFRlRQT1NgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFBVUkNIQVNFOiAke3B1cmNoYXNlUmVzcG9uc2UuR2V0UHVyY2hhc2VBbW91bnQoKX1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFRJUDogJHtwdXJjaGFzZVJlc3BvbnNlLkdldFRpcEFtb3VudCgpfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgU1VSQ0hBUkdFOiAke3B1cmNoYXNlUmVzcG9uc2UuR2V0U3VyY2hhcmdlQW1vdW50KCl9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBDQVNIT1VUOiAke3B1cmNoYXNlUmVzcG9uc2UuR2V0Q2FzaG91dEFtb3VudCgpfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQkFOS0VEIE5PTi1DQVNIIEFNT1VOVDogJHtwdXJjaGFzZVJlc3BvbnNlLkdldEJhbmtOb25DYXNoQW1vdW50KCl9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBCQU5LRUQgQ0FTSCBBTU9VTlQ6ICR7cHVyY2hhc2VSZXNwb25zZS5HZXRCYW5rQ2FzaEFtb3VudCgpfWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdWNjZXNzU3RhdGUuRmFpbGVkOlxuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgV0UgRElEIE5PVCBHRVQgUEFJRCA6KGApO1xuICAgICAgICAgICAgICAgIGlmICh0eFN0YXRlLlJlc3BvbnNlICE9IG51bGwpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBwdXJjaGFzZVJlc3BvbnNlID0gbmV3IFB1cmNoYXNlUmVzcG9uc2UodHhTdGF0ZS5SZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgRXJyb3I6ICR7dHhTdGF0ZS5SZXNwb25zZS5HZXRFcnJvcigpfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIEVycm9yIERldGFpbDogJHt0eFN0YXRlLlJlc3BvbnNlLkdldEVycm9yRGV0YWlsKCl9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUmVzcG9uc2U6ICR7cHVyY2hhc2VSZXNwb25zZS5HZXRSZXNwb25zZVRleHQoKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSUk46ICR7cHVyY2hhc2VSZXNwb25zZS5HZXRSUk4oKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBTY2hlbWU6ICR7cHVyY2hhc2VSZXNwb25zZS5TY2hlbWVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIEN1c3RvbWVyIFJlY2VpcHQ6YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpcHQuSW5mbyghcHVyY2hhc2VSZXNwb25zZS5XYXNDdXN0b21lclJlY2VpcHRQcmludGVkKClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcHVyY2hhc2VSZXNwb25zZS5HZXRDdXN0b21lclJlY2VpcHQoKS50cmltKClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogYCMgUFJJTlRFRCBGUk9NIEVGVFBPU2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3VjY2Vzc1N0YXRlLlVua25vd246XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBXRSdSRSBOT1QgUVVJVEUgU1VSRSBXSEVUSEVSIFdFIEdPVCBQQUlEIE9SIE5PVCA6L2ApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQ0hFQ0sgVEhFIExBU1QgVFJBTlNBQ1RJT04gT04gVEhFIEVGVFBPUyBJVFNFTEYgRlJPTSBUSEUgQVBQUk9QUklBVEUgTUVOVSBJVEVNLmApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgSUYgWU9VIENPTkZJUk0gVEhBVCBUSEUgQ1VTVE9NRVIgUEFJRCwgQ0xPU0UgVEhFIE9SREVSLmApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgT1RIRVJXSVNFLCBSRVRSWSBUSEUgUEFZTUVOVCBGUk9NIFNDUkFUQ0guYCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0cmFuc2FjdGlvbiBzdGF0ZScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgSGFuZGxlRmluaXNoZWRSZWZ1bmQodHhTdGF0ZSlcbiAgICB7XG4gICAgICAgIHZhciByZWZ1bmRSZXNwb25zZTtcbiAgICAgICAgc3dpdGNoICh0eFN0YXRlLlN1Y2Nlc3MpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhc2UgU3VjY2Vzc1N0YXRlLlN1Y2Nlc3M6XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSRUZVTkQgR0lWRU4tIE9IIFdFTEwhYCk7XG4gICAgICAgICAgICAgICAgcmVmdW5kUmVzcG9uc2UgPSBuZXcgUmVmdW5kUmVzcG9uc2UodHhTdGF0ZS5SZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSZXNwb25zZTogJHtyZWZ1bmRSZXNwb25zZS5HZXRSZXNwb25zZVRleHQoKX1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFJSTjogJHtyZWZ1bmRSZXNwb25zZS5HZXRSUk4oKX1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFNjaGVtZTogJHtyZWZ1bmRSZXNwb25zZS5TY2hlbWVOYW1lfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQ3VzdG9tZXIgUmVjZWlwdDpgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNlaXB0LkluZm8oIXJlZnVuZFJlc3BvbnNlLldhc0N1c3RvbWVyUmVjZWlwdFByaW50ZWQoKSA/IHJlZnVuZFJlc3BvbnNlLkdldEN1c3RvbWVyUmVjZWlwdCgpLnRyaW0oKSA6IFwiIyBQUklOVEVEIEZST00gRUZUUE9TXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUkVGVU5ERUQgQU1PVU5UOiAke3JlZnVuZFJlc3BvbnNlLkdldFJlZnVuZEFtb3VudCgpfWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdWNjZXNzU3RhdGUuRmFpbGVkOlxuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUkVGVU5EIEZBSUxFRCFgKTtcbiAgICAgICAgICAgICAgICBpZiAodHhTdGF0ZS5SZXNwb25zZSAhPSBudWxsKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmdW5kUmVzcG9uc2UgPSBuZXcgUmVmdW5kUmVzcG9uc2UodHhTdGF0ZS5SZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgRXJyb3I6ICR7dHhTdGF0ZS5SZXNwb25zZS5HZXRFcnJvcigpfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIEVycm9yIERldGFpbDogJHt0eFN0YXRlLlJlc3BvbnNlLkdldEVycm9yRGV0YWlsKCl9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUmVzcG9uc2U6ICR7cmVmdW5kUmVzcG9uc2UuR2V0UmVzcG9uc2VUZXh0KCl9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUlJOOiAke3JlZnVuZFJlc3BvbnNlLkdldFJSTigpfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFNjaGVtZTogJHtyZWZ1bmRSZXNwb25zZS5TY2hlbWVOYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIEN1c3RvbWVyIFJlY2VpcHQ6YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpcHQuSW5mbyghcmVmdW5kUmVzcG9uc2UuV2FzQ3VzdG9tZXJSZWNlaXB0UHJpbnRlZCgpID8gcmVmdW5kUmVzcG9uc2UuR2V0Q3VzdG9tZXJSZWNlaXB0KCkudHJpbSgpIDogXCIjIFBSSU5URUQgRlJPTSBFRlRQT1NcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdWNjZXNzU3RhdGUuVW5rbm93bjpcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBXRSdSRSBOT1QgUVVJVEUgU1VSRSBXSEVUSEVSIFRIRSBSRUZVTkQgV0VOVCBUSFJPVUdIIE9SIE5PVCA6L1wiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBDSEVDSyBUSEUgTEFTVCBUUkFOU0FDVElPTiBPTiBUSEUgRUZUUE9TIElUU0VMRiBGUk9NIFRIRSBBUFBST1BSSUFURSBNRU5VIElURU0uXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFlPVSBDQU4gVEhFIFRBS0UgVEhFIEFQUFJPUFJJQVRFIEFDVElPTi5cIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0cmFuc2FjdGlvbiBzdGF0ZScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgSGFuZGxlRmluaXNoZWRDYXNob3V0KHR4U3RhdGUpXG4gICAge1xuICAgICAgICB2YXIgY2FzaG91dFJlc3BvbnNlO1xuICAgICAgICBzd2l0Y2ggKHR4U3RhdGUuU3VjY2VzcylcbiAgICAgICAge1xuICAgICAgICAgICAgY2FzZSBTdWNjZXNzU3RhdGUuU3VjY2VzczpcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIENBU0gtT1VUIFNVQ0NFU1NGVUwgLSBIQU5EIFRIRU0gVEhFIENBU0ghYCk7XG4gICAgICAgICAgICAgICAgY2FzaG91dFJlc3BvbnNlID0gbmV3IENhc2hvdXRPbmx5UmVzcG9uc2UodHhTdGF0ZS5SZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSZXNwb25zZTogJHtjYXNob3V0UmVzcG9uc2UuR2V0UmVzcG9uc2VUZXh0KCl9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSUk46ICR7Y2FzaG91dFJlc3BvbnNlLkdldFJSTigpfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgU2NoZW1lOiAke2Nhc2hvdXRSZXNwb25zZS5TY2hlbWVOYW1lfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQ3VzdG9tZXIgUmVjZWlwdDpgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNlaXB0LkluZm8oIWNhc2hvdXRSZXNwb25zZS5XYXNDdXN0b21lclJlY2VpcHRQcmludGVkKCkgPyBjYXNob3V0UmVzcG9uc2UuR2V0Q3VzdG9tZXJSZWNlaXB0KCkudHJpbSgpIDogXCIjIFBSSU5URUQgRlJPTSBFRlRQT1NcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBDQVNIT1VUOiAke2Nhc2hvdXRSZXNwb25zZS5HZXRDYXNob3V0QW1vdW50KCl9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBCQU5LRUQgTk9OLUNBU0ggQU1PVU5UOiAke2Nhc2hvdXRSZXNwb25zZS5HZXRCYW5rTm9uQ2FzaEFtb3VudCgpfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQkFOS0VEIENBU0ggQU1PVU5UOiAke2Nhc2hvdXRSZXNwb25zZS5HZXRCYW5rQ2FzaEFtb3VudCgpfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgU1VSQ0hBUkdFOiAke2Nhc2hvdXRSZXNwb25zZS5HZXRTdXJjaGFyZ2VBbW91bnQoKX1gKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3VjY2Vzc1N0YXRlLkZhaWxlZDpcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIENBU0hPVVQgRkFJTEVEIWApO1xuICAgICAgICAgICAgICAgIGlmICh0eFN0YXRlLlJlc3BvbnNlICE9IG51bGwpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjYXNob3V0UmVzcG9uc2UgPSBuZXcgQ2FzaG91dE9ubHlSZXNwb25zZSh0eFN0YXRlLlJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBFcnJvcjogJHt0eFN0YXRlLlJlc3BvbnNlLkdldEVycm9yKCl9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgRXJyb3IgRGV0YWlsOiAke3R4U3RhdGUuUmVzcG9uc2UuR2V0RXJyb3JEZXRhaWwoKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSZXNwb25zZTogJHtjYXNob3V0UmVzcG9uc2UuR2V0UmVzcG9uc2VUZXh0KCl9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUlJOOiAke2Nhc2hvdXRSZXNwb25zZS5HZXRSUk4oKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBTY2hlbWU6ICR7Y2FzaG91dFJlc3BvbnNlLlNjaGVtZU5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQ3VzdG9tZXIgUmVjZWlwdDpgKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjZWlwdC5JbmZvKGNhc2hvdXRSZXNwb25zZS5HZXRDdXN0b21lclJlY2VpcHQoKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdWNjZXNzU3RhdGUuVW5rbm93bjpcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFdFJ1JFIE5PVCBRVUlURSBTVVJFIFdIRVRIRVIgVEhFIENBU0hPVVQgV0VOVCBUSFJPVUdIIE9SIE5PVCA6L2ApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQ0hFQ0sgVEhFIExBU1QgVFJBTlNBQ1RJT04gT04gVEhFIEVGVFBPUyBJVFNFTEYgRlJPTSBUSEUgQVBQUk9QUklBVEUgTUVOVSBJVEVNLmApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgWU9VIENBTiBUSEUgVEFLRSBUSEUgQVBQUk9QUklBVEUgQUNUSU9OLmApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHJhbnNhY3Rpb24gc3RhdGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEhhbmRsZUZpbmlzaGVkTW90byh0eFN0YXRlKVxuICAgIHtcbiAgICAgICAgdmFyIG1vdG9SZXNwb25zZTtcbiAgICAgICAgdmFyIHB1cmNoYXNlUmVzcG9uc2U7XG4gICAgICAgIHN3aXRjaCAodHhTdGF0ZS5TdWNjZXNzKVxuICAgICAgICB7XG4gICAgICAgICAgICBjYXNlIFN1Y2Nlc3NTdGF0ZS5TdWNjZXNzOlxuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFdPT0hPTyAtIFdFIEdPVCBNT1RPLVBBSUQhXCIpO1xuICAgICAgICAgICAgICAgIG1vdG9SZXNwb25zZSA9IG5ldyBNb3RvUHVyY2hhc2VSZXNwb25zZSh0eFN0YXRlLlJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICBwdXJjaGFzZVJlc3BvbnNlID0gbW90b1Jlc3BvbnNlLlB1cmNoYXNlUmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSZXNwb25zZTogJHtwdXJjaGFzZVJlc3BvbnNlLkdldFJlc3BvbnNlVGV4dCgpfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUlJOOiAke3B1cmNoYXNlUmVzcG9uc2UuR2V0UlJOKCl9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBTY2hlbWU6ICR7cHVyY2hhc2VSZXNwb25zZS5TY2hlbWVOYW1lfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQ2FyZCBFbnRyeTogJHtwdXJjaGFzZVJlc3BvbnNlLkdldENhcmRFbnRyeSgpfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQ3VzdG9tZXIgUmVjZWlwdDpgKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWNlaXB0LkluZm8oIXB1cmNoYXNlUmVzcG9uc2UuV2FzQ3VzdG9tZXJSZWNlaXB0UHJpbnRlZCgpID8gcHVyY2hhc2VSZXNwb25zZS5HZXRDdXN0b21lclJlY2VpcHQoKS50cmltKCkgOiBcIiMgUFJJTlRFRCBGUk9NIEVGVFBPU1wiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFBVUkNIQVNFOiAke3B1cmNoYXNlUmVzcG9uc2UuR2V0UHVyY2hhc2VBbW91bnQoKX1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIEJBTktFRCBOT04tQ0FTSCBBTU9VTlQ6ICR7cHVyY2hhc2VSZXNwb25zZS5HZXRCYW5rTm9uQ2FzaEFtb3VudCgpfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQkFOS0VEIENBU0ggQU1PVU5UOiAke3B1cmNoYXNlUmVzcG9uc2UuR2V0QmFua0Nhc2hBbW91bnQoKX1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFNVUkNIQVJHRTogJHtwdXJjaGFzZVJlc3BvbnNlLkdldFN1cmNoYXJnZUFtb3VudCgpfWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdWNjZXNzU3RhdGUuRmFpbGVkOlxuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgV0UgRElEIE5PVCBHRVQgTU9UTy1QQUlEIDooYCk7XG4gICAgICAgICAgICAgICAgaWYgKHR4U3RhdGUuUmVzcG9uc2UgIT0gbnVsbClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIG1vdG9SZXNwb25zZSA9IG5ldyBNb3RvUHVyY2hhc2VSZXNwb25zZSh0eFN0YXRlLlJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgcHVyY2hhc2VSZXNwb25zZSA9IG1vdG9SZXNwb25zZS5QdXJjaGFzZVJlc3BvbnNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIEVycm9yOiAke3R4U3RhdGUuUmVzcG9uc2UuR2V0RXJyb3IoKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBFcnJvciBEZXRhaWw6ICR7dHhTdGF0ZS5SZXNwb25zZS5HZXRFcnJvckRldGFpbCgpfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFJlc3BvbnNlOiAke3B1cmNoYXNlUmVzcG9uc2UuR2V0UmVzcG9uc2VUZXh0KCl9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUlJOOiAke3B1cmNoYXNlUmVzcG9uc2UuR2V0UlJOKCl9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgU2NoZW1lOiAke3B1cmNoYXNlUmVzcG9uc2UuU2NoZW1lTmFtZX1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBDdXN0b21lciBSZWNlaXB0OmApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNlaXB0LkluZm8ocHVyY2hhc2VSZXNwb25zZS5HZXRDdXN0b21lclJlY2VpcHQoKS50cmltKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3VjY2Vzc1N0YXRlLlVua25vd246XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgV0UnUkUgTk9UIFFVSVRFIFNVUkUgV0hFVEhFUiBUSEUgTU9UTyBXRU5UIFRIUk9VR0ggT1IgTk9UIDovXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIENIRUNLIFRIRSBMQVNUIFRSQU5TQUNUSU9OIE9OIFRIRSBFRlRQT1MgSVRTRUxGIEZST00gVEhFIEFQUFJPUFJJQVRFIE1FTlUgSVRFTS5cIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgWU9VIENBTiBUSEUgVEFLRSBUSEUgQVBQUk9QUklBVEUgQUNUSU9OLlwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHRyYW5zYWN0aW9uIHN0YXRlJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBIYW5kbGVGaW5pc2hlZEdldExhc3RUcmFuc2FjdGlvbih0eFN0YXRlKVxuICAgIHtcbiAgICAgICAgaWYgKHR4U3RhdGUuUmVzcG9uc2UgIT0gbnVsbClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGdsdFJlc3BvbnNlID0gbmV3IEdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlKHR4U3RhdGUuUmVzcG9uc2UpO1xuICAgICAgICAgICAgdmFyIHBvc19yZWZfaWQgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc19yZWZfaWQnKS52YWx1ZTtcblxuICAgICAgICAgICAgaWYgKHBvc19yZWZfaWQubGVuZ3RoID4gMSkgXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gVXNlciBzcGVjaWZpZWQgdGhhdCBoZSBpbnRlbmRlZCB0byByZXRyaWV2ZSBhIHNwZWNpZmljIHR4IGJ5IHBvc19yZWZfaWRcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGhvdyB5b3UgY2FuIHVzZSBhIGhhbmR5IGZ1bmN0aW9uIHRvIG1hdGNoIGl0LlxuICAgICAgICAgICAgICAgIHZhciBzdWNjZXNzID0gdGhpcy5fc3BpLkdsdE1hdGNoKGdsdFJlc3BvbnNlLCBwb3NfcmVmX2lkKTtcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2VzcyA9PSBTdWNjZXNzU3RhdGUuVW5rbm93bilcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIERpZCBub3QgcmV0cmlldmUgRXhwZWN0ZWQgVHJhbnNhY3Rpb24uIEhlcmUgaXMgd2hhdCB3ZSBnb3Q6XCIpO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgZWxzZSBcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFR4IE1hdGNoZWQgRXhwZWN0ZWQgUHVyY2hhc2UgUmVxdWVzdC5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcHVyY2hhc2VSZXNwb25zZSA9IG5ldyBQdXJjaGFzZVJlc3BvbnNlKHR4U3RhdGUuUmVzcG9uc2UpO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBTY2hlbWU6ICR7cHVyY2hhc2VSZXNwb25zZS5TY2hlbWVOYW1lfWApO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSZXNwb25zZTogJHtwdXJjaGFzZVJlc3BvbnNlLkdldFJlc3BvbnNlVGV4dCgpfWApO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSUk46ICR7cHVyY2hhc2VSZXNwb25zZS5HZXRSUk4oKX1gKTtcbiAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgRXJyb3I6ICR7dHhTdGF0ZS5SZXNwb25zZS5HZXRFcnJvcigpfWApO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBDdXN0b21lciBSZWNlaXB0OmApO1xuICAgICAgICAgICAgdGhpcy5fcmVjZWlwdC5JbmZvKHB1cmNoYXNlUmVzcG9uc2UuR2V0Q3VzdG9tZXJSZWNlaXB0KCkudHJpbSgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIFdlIGRpZCBub3QgZXZlbiBnZXQgYSByZXNwb25zZSwgbGlrZSBpbiB0aGUgY2FzZSBvZiBhIHRpbWUtb3V0LlxuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgQ291bGQgTm90IFJldHJpZXZlIExhc3QgVHJhbnNhY3Rpb24uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgSGFuZGxlRmluaXNoZWRTZXR0bGUodHhTdGF0ZSlcbiAgICB7XG4gICAgICAgIHN3aXRjaCAodHhTdGF0ZS5TdWNjZXNzKVxuICAgICAgICB7XG4gICAgICAgICAgICBjYXNlIFN1Y2Nlc3NTdGF0ZS5TdWNjZXNzOlxuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFNFVFRMRU1FTlQgU1VDQ0VTU0ZVTCFcIik7XG4gICAgICAgICAgICAgICAgaWYgKHR4U3RhdGUuUmVzcG9uc2UgIT0gbnVsbClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXR0bGVSZXNwb25zZSA9IG5ldyBTZXR0bGVtZW50KHR4U3RhdGUuUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFJlc3BvbnNlOiAke3NldHRsZVJlc3BvbnNlLkdldFJlc3BvbnNlVGV4dCgpfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBNZXJjaGFudCBSZWNlaXB0OlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjZWlwdC5JbmZvKHNldHRsZVJlc3BvbnNlLkdldFJlY2VpcHQoKS50cmltKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBQZXJpb2QgU3RhcnQ6IFwiICsgc2V0dGxlUmVzcG9uc2UuR2V0UGVyaW9kU3RhcnRUaW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBQZXJpb2QgRW5kOiBcIiArIHNldHRsZVJlc3BvbnNlLkdldFBlcmlvZEVuZFRpbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFNldHRsZW1lbnQgVGltZTogXCIgKyBzZXR0bGVSZXNwb25zZS5HZXRUcmlnZ2VyZWRUaW1lKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBUcmFuc2FjdGlvbiBSYW5nZTogXCIgKyBzZXR0bGVSZXNwb25zZS5HZXRUcmFuc2FjdGlvblJhbmdlKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBUZXJtaW5hbCBJZDogXCIgKyBzZXR0bGVSZXNwb25zZS5HZXRUZXJtaW5hbElkKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBUb3RhbCBUWCBDb3VudDogXCIgKyBzZXR0bGVSZXNwb25zZS5HZXRUb3RhbENvdW50KCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFRvdGFsIFRYIFZhbHVlOiAkJHsoc2V0dGxlUmVzcG9uc2UuR2V0VG90YWxWYWx1ZSgpIC8gMTAwLjApLnRvRml4ZWQoMil9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIEJ5IEFjcXVpcmVyIFRYIENvdW50OiBcIiArIHNldHRsZVJlc3BvbnNlLkdldFNldHRsZUJ5QWNxdWlyZXJDb3VudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBCeSBBY3F1aXJlciBUWCBWYWx1ZTogJCR7KHNldHRsZVJlc3BvbnNlLkdldFNldHRsZUJ5QWNxdWlyZXJWYWx1ZSgpIC8gMTAwLjApLnRvRml4ZWQoMil9YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFNDSEVNRSBTRVRUTEVNRU5UUzpcIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY2hlbWVzID0gc2V0dGxlUmVzcG9uc2UuR2V0U2NoZW1lU2V0dGxlbWVudEVudHJpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcyBpbiBzY2hlbWVzKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBcIiArIEpTT04uc3RyaW5naWZ5KHNjaGVtZXNbc10pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3VjY2Vzc1N0YXRlLkZhaWxlZDpcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBTRVRUTEVNRU5UIEZBSUxFRCFcIik7XG4gICAgICAgICAgICAgICAgaWYgKHR4U3RhdGUuUmVzcG9uc2UgIT0gbnVsbClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXR0bGVSZXNwb25zZSA9IG5ldyBTZXR0bGVtZW50KHR4U3RhdGUuUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFJlc3BvbnNlOiAke3NldHRsZVJlc3BvbnNlLkdldFJlc3BvbnNlVGV4dCgpfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIEVycm9yOiAke3R4U3RhdGUuUmVzcG9uc2UuR2V0RXJyb3IoKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgTWVyY2hhbnQgUmVjZWlwdDpcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpcHQuSW5mbyhzZXR0bGVSZXNwb25zZS5HZXRSZWNlaXB0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3VjY2Vzc1N0YXRlLlVua25vd246XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgU0VUVExFTUVOVCBFTlFVSVJZIFJFU1VMVCBVTktOT1dOIVwiKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHN0YXRlJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBIYW5kbGVGaW5pc2hlZFNldHRsZW1lbnRFbnF1aXJ5KHR4U3RhdGUpXG4gICAge1xuICAgICAgICBzd2l0Y2ggKHR4U3RhdGUuU3VjY2VzcylcbiAgICAgICAge1xuICAgICAgICAgICAgY2FzZSBTdWNjZXNzU3RhdGUuU3VjY2VzczpcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBTRVRUTEVNRU5UIEVOUVVJUlkgU1VDQ0VTU0ZVTCFcIik7XG4gICAgICAgICAgICAgICAgaWYgKHR4U3RhdGUuUmVzcG9uc2UgIT0gbnVsbClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXR0bGVSZXNwb25zZSA9IG5ldyBTZXR0bGVtZW50KHR4U3RhdGUuUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFJlc3BvbnNlOiAke3NldHRsZVJlc3BvbnNlLkdldFJlc3BvbnNlVGV4dCgpfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIE1lcmNoYW50IFJlY2VpcHQ6YCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpcHQuSW5mbyhzZXR0bGVSZXNwb25zZS5HZXRSZWNlaXB0KCkudHJpbSgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBQZXJpb2QgU3RhcnQ6IGAgKyBzZXR0bGVSZXNwb25zZS5HZXRQZXJpb2RTdGFydFRpbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUGVyaW9kIEVuZDogYCArIHNldHRsZVJlc3BvbnNlLkdldFBlcmlvZEVuZFRpbWUoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgU2V0dGxlbWVudCBUaW1lOiBgICsgc2V0dGxlUmVzcG9uc2UuR2V0VHJpZ2dlcmVkVGltZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBUcmFuc2FjdGlvbiBSYW5nZTogYCArIHNldHRsZVJlc3BvbnNlLkdldFRyYW5zYWN0aW9uUmFuZ2UoKSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgVGVybWluYWwgSWQ6IGAgKyBzZXR0bGVSZXNwb25zZS5HZXRUZXJtaW5hbElkKCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFRvdGFsIFRYIENvdW50OiBgICsgc2V0dGxlUmVzcG9uc2UuR2V0VG90YWxDb3VudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBUb3RhbCBUWCBWYWx1ZTogJCR7KHNldHRsZVJlc3BvbnNlLkdldFRvdGFsVmFsdWUoKSAvIDEwMC4wKS50b0ZpeGVkKDIpfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIEJ5IEFjcXVpcmVyIFRYIENvdW50OiBgICsgc2V0dGxlUmVzcG9uc2UuR2V0U2V0dGxlQnlBY3F1aXJlckNvdW50KCkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIEJ5IEFjcXVpcmVyIFRYIFZhbHVlOiAkJHsoc2V0dGxlUmVzcG9uc2UuR2V0U2V0dGxlQnlBY3F1aXJlclZhbHVlKCkgLyAxMDAuMCkudG9GaXhlZCgyKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBTQ0hFTUUgU0VUVExFTUVOVFM6YCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY2hlbWVzID0gc2V0dGxlUmVzcG9uc2UuR2V0U2NoZW1lU2V0dGxlbWVudEVudHJpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcyBpbiBzY2hlbWVzKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIGAgKyBKU09OLnN0cmluZ2lmeShzY2hlbWVzW3NdKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN1Y2Nlc3NTdGF0ZS5GYWlsZWQ6XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgU0VUVExFTUVOVCBFTlFVSVJZIEZBSUxFRCFcIik7XG4gICAgICAgICAgICAgICAgaWYgKHR4U3RhdGUuUmVzcG9uc2UgIT0gbnVsbClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXR0bGVSZXNwb25zZSA9IG5ldyBTZXR0bGVtZW50KHR4U3RhdGUuUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFJlc3BvbnNlOiAke3NldHRsZVJlc3BvbnNlLkdldFJlc3BvbnNlVGV4dCgpfWApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIEVycm9yOiAke3R4U3RhdGUuUmVzcG9uc2UuR2V0RXJyb3IoKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBNZXJjaGFudCBSZWNlaXB0OmApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNlaXB0LkluZm8oc2V0dGxlUmVzcG9uc2UuR2V0UmVjZWlwdCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN1Y2Nlc3NTdGF0ZS5Vbmtub3duOlxuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFNFVFRMRU1FTlQgRU5RVUlSWSBSRVNVTFQgVU5LTk9XTiFcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBUcmFuc2FjdGlvbiBzdGF0ZScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgUHJpbnRBY3Rpb25zKClcbiAgICB7XG4gICAgICAgIC8vIExpc3Qgb2YgaW5wdXQgY29udHJvbHMgd2hpY2ggYXJlIGVuYWJsZWQgLyBzaG93biBmb3IgdGhlIGN1cnJlbnQgYXBwbGljYXRpb24gc3RhdGVcbiAgICAgICAgbGV0IGlucHV0c0VuYWJsZWQgICA9IFtdO1xuICAgICAgICBsZXQgc3RhdHVzRWwgICAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXR1c19pbmRpY2F0b3InKTtcbiAgICAgICAgbGV0IHByaW1hcnlTdGF0dXNFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmltYXJ5X3N0YXR1cycpO1xuICAgICAgICBsZXQgZmxvd1N0YXR1c0VsICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zsb3dfc3RhdHVzJyk7XG4gICAgICAgIGxldCBmbG93U3RhdHVzSGVhZGluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmbG93X3N0YXR1c19oZWFkaW5nJyk7XG5cbiAgICAgICAgc3RhdHVzRWwuZGF0YXNldFsnc3RhdHVzJ10gID0gdGhpcy5fc3BpLkN1cnJlbnRTdGF0dXM7XG4gICAgICAgIHN0YXR1c0VsLmRhdGFzZXRbJ2Zsb3cnXSAgICA9IHRoaXMuX3NwaS5DdXJyZW50RmxvdztcbiAgICAgICAgcHJpbWFyeVN0YXR1c0VsLmlubmVyVGV4dCAgID0gdGhpcy5fc3BpLkN1cnJlbnRTdGF0dXM7XG4gICAgICAgIGZsb3dTdGF0dXNFbC5pbm5lclRleHQgICAgICA9IHRoaXMuX3NwaS5DdXJyZW50RmxvdztcbiAgICAgICAgZmxvd1N0YXR1c0hlYWRpbmcuaW5uZXJUZXh0ID0gdGhpcy5fc3BpLkN1cnJlbnRGbG93O1xuXG4gICAgICAgIC8vIEF2YWlsYWJsZSBBY3Rpb25zIGRlcGVuZCBvbiB0aGUgY3VycmVudCBzdGF0dXMgKFVucGFpcmVkL1BhaXJlZENvbm5lY3RpbmcvUGFpcmVkQ29ubmVjdGVkKVxuICAgICAgICBzd2l0Y2ggKHRoaXMuX3NwaS5DdXJyZW50U3RhdHVzKVxuICAgICAgICB7XG4gICAgICAgICAgICBjYXNlIFNwaVN0YXR1cy5VbnBhaXJlZDogLy9VbnBhaXJlZC4uLlxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fc3BpLkN1cnJlbnRGbG93KVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBTcGlGbG93LklkbGU6IC8vIFVucGFpcmVkLCBJZGxlXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3Bvc19pZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdzZXJpYWxfbnVtYmVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ2F1dG9fcmVzb2x2ZV9lZnRwb3NfYWRkcmVzcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCd1c2Vfc2VjdXJlX3dlYl9zb2NrZXRzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3Rlc3RfbW9kZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdyY3B0X2Zyb21fZWZ0cG9zJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3NpZ19mbG93X2Zyb21fZWZ0cG9zJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3BhaXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnc2F2ZV9zZXR0aW5ncycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdzYXZlX2FkZHJlc3Nfc2V0dGluZ3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgncHJpbnRfbWVyY2hhbnRfY29weV9pbnB1dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdyZWNlaXB0X2hlYWRlcl9pbnB1dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdyZWNlaXB0X2Zvb3Rlcl9pbnB1dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdzYXZlX3JlY2VpcHQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgncHJpbnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgndGVybWluYWxfc3RhdHVzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3Bvc192ZW5kb3Jfa2V5Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCF0aGlzLklzVW5rbm93blN0YXR1cygpKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnZWZ0cG9zX2FkZHJlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgU3BpRmxvdy5QYWlyaW5nOiAvLyBVbnBhaXJlZCwgUGFpcmluZ0Zsb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWlyaW5nU3RhdGUgPSB0aGlzLl9zcGkuQ3VycmVudFBhaXJpbmdGbG93U3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFpcmluZ1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tUG9zKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgncGFpcl9jb25maXJtJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBhaXJpbmdTdGF0ZS5GaW5pc2hlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3BhaXJfY2FuY2VsJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdvaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBTcGlGbG93LlRyYW5zYWN0aW9uOiAvLyBVbnBhaXJlZCwgVHJhbnNhY3Rpb25GbG93IC0gU2hvdWxkIG5ldmVyIGJlIHRoZSBjYXNlIVxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nLmluZm8oYCMgLi4gVW5leHBlY3RlZCBGbG93IC4uICR7dGhpcy5fc3BpLkN1cnJlbnRGbG93fWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTcGlTdGF0dXMuUGFpcmVkQ29ubmVjdGluZzogLy8gVGhpcyBpcyBzdGlsbCBjb25zaWRlcmVkIGFzIGEgUGFpcmVkIGtpbmQgb2Ygc3RhdGUsIGJ1dC4uLlxuICAgICAgICAgICAgICAgIC8vIC4uIHdlIGdpdmUgdXNlciB0aGUgb3B0aW9uIG9mIGNoYW5naW5nIElQIGFkZHJlc3MsIGp1c3QgaW4gY2FzZSB0aGUgRUZUUE9TIGdvdCBhIG5ldyBvbmUgaW4gdGhlIG1lYW53aGlsZVxuICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgncmNwdF9mcm9tX2VmdHBvcycpO1xuICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnc2lnX2Zsb3dfZnJvbV9lZnRwb3MnKTtcbiAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3NhdmVfc2V0dGluZ3MnKTtcbiAgICAgICAgICAgICAgICAvLyAuLiBidXQgb3RoZXJ3aXNlIHdlIGdpdmUgdGhlIHNhbWUgb3B0aW9ucyBhcyBQYWlyZWRDb25uZWN0ZWRcbiAgICAgICAgICAgICAgICAvLyBnb3RvIGNhc2UgU3BpU3RhdHVzLlBhaXJlZENvbm5lY3RlZDtcblxuICAgICAgICAgICAgICAgIGlmKCF0aGlzLklzVW5rbm93blN0YXR1cygpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdlZnRwb3NfYWRkcmVzcycpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSBTcGlTdGF0dXMuUGFpcmVkQ29ubmVjdGVkOlxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fc3BpLkN1cnJlbnRGbG93KVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBTcGlGbG93LklkbGU6IC8vIFBhaXJlZCwgSWRsZVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdhbW91bnRfaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgndGlwX2Ftb3VudF9pbnB1dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdzdXJjaGFyZ2VfYW1vdW50X2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3N1cHByZXNzX21lcmNoYW50X3Bhc3N3b3JkX2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ2Nhc2hvdXRfYW1vdW50X2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3Byb21wdF9mb3JfY2FzaCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdwb3NfcmVmX2lkX2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3NhdmVfc2V0dGluZ3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnc2F2ZV9yZWNlaXB0Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgncHVyY2hhc2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnbW90bycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdyZWZ1bmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnY2FzaG91dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdzZXR0bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnc2V0dGxlX2VucScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdyZWNvdmVyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3VucGFpcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdnbHQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgncmNwdF9mcm9tX2VmdHBvcycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdzaWdfZmxvd19mcm9tX2VmdHBvcycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3JlY2VpcHRfaGVhZGVyX2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3JlY2VpcHRfZm9vdGVyX2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3ByaW50Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3Rlcm1pbmFsX3N0YXR1cycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBTcGlGbG93LlRyYW5zYWN0aW9uOiAvLyBQYWlyZWQsIFRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3BpLkN1cnJlbnRUeEZsb3dTdGF0ZS5Bd2FpdGluZ1NpZ25hdHVyZUNoZWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgndHhfc2lnbl9hY2NlcHQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3R4X3NpZ25fZGVjbGluZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlLkF3YWl0aW5nUGhvbmVGb3JBdXRoKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgndHhfYXV0aF9jb2RlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdhdXRoX2NvZGVfaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5Jc1Vua25vd25TdGF0dXMoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ29rX3JldHJ5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdva19vdmVycmlkZV9wYWlkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdva19jYW5jZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkICYmICF0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlLkF0dGVtcHRpbmdUb0NhbmNlbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3R4X2NhbmNlbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fc3BpLkN1cnJlbnRUeEZsb3dTdGF0ZS5TdWNjZXNzKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU3VjY2Vzc1N0YXRlLlN1Y2Nlc3M6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ29rJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBTdWNjZXNzU3RhdGUuRmFpbGVkOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdva19jYW5jZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5rbm93blxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdva19jYW5jZWwnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFNwaUZsb3cuUGFpcmluZzogLy8gUGFpcmVkLCBQYWlyaW5nIC0gd2UgaGF2ZSBqdXN0IGZpbmlzaGVkIHRoZSBwYWlyaW5nIGZsb3cuIE9LIHRvIGFjay5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnb2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbG9nLmluZm8oYCMgLi4gVW5leHBlY3RlZCBGbG93IC4uICR7dGhpcy5fc3BpLkN1cnJlbnRGbG93fWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nLmluZm8oYCMgLi4gVW5leHBlY3RlZCBTdGF0ZSAuLiAke3RoaXMuX3NwaS5DdXJyZW50U3RhdHVzfWApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29uZmlndXJlIGJ1dHRvbnMgLyBpbnB1dHNcbiAgICAgICAgbGV0IGlucHV0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pbnB1dCcpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgaW5wdXRzLmxlbmd0aDsgaSsrKSBcbiAgICAgICAge1xuICAgICAgICAgICAgaW5wdXRzW2ldLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0c0VuYWJsZWQuZm9yRWFjaCgoaW5wdXQpID0+IFxuICAgICAgICB7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpbnB1dCkuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbygpO1xuICAgIH1cblxuICAgIElzVW5rbm93blN0YXR1cygpXG4gICAge1xuICAgICAgICBpZiAodGhpcy5fc3BpLkN1cnJlbnRGbG93ID09IFNwaUZsb3cuVHJhbnNhY3Rpb24pIFxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3BpLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCAmJiB0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlLlN1Y2Nlc3MgPT0gU3VjY2Vzc1N0YXRlLlVua25vd24pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgUHJpbnRQYWlyaW5nU3RhdHVzKClcbiAgICB7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgLS0tLS0tLS0tLS0tLS0tIFNUQVRVUyAtLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyAke3RoaXMuX3Bvc0lkfSA8LT4gRWZ0cG9zOiAke3RoaXMuX2VmdHBvc0FkZHJlc3N9ICNgKTtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBTUEkgU1RBVFVTOiAke3RoaXMuX3NwaS5DdXJyZW50U3RhdHVzfSAgICAgRkxPVzogJHt0aGlzLl9zcGkuQ3VycmVudEZsb3d9ICNgKTtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBTUEkgQ09ORklHOiAke0pTT04uc3RyaW5naWZ5KHRoaXMuX3NwaS5Db25maWcpfWApO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tYCk7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUE9TOiB2JHt0aGlzLl92ZXJzaW9ufSBTcGk6IHYke1NwaS5HZXRWZXJzaW9uKCl9YCk7XG5cbiAgICB9XG5cbiAgICBTZXRBdXRvQWRkcmVzc1Jlc29sdXRpb25TdGF0ZSgpXG4gICAge1xuICAgICAgICB0aGlzLl9zcGkuU2V0VGVzdE1vZGUodGhpcy5fdGVzdE1vZGUpO1xuICAgICAgICB0aGlzLl9zcGkuU2V0U2VjdXJlV2ViU29ja2V0cyh0aGlzLl91c2VTZWN1cmVXZWJTb2NrZXRzKTtcbiAgICAgICAgdGhpcy5fc3BpLlNldEF1dG9BZGRyZXNzUmVzb2x1dGlvbih0aGlzLl9hdXRvUmVzb2x2ZUVmdHBvc0FkZHJlc3MpO1xuICAgIH1cblxuICAgIEFjY2VwdFVzZXJJbnB1dCgpXG4gICAge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYWRkcmVzc19zZXR0aW5nc19mb3JtJykuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGUpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgaWYodGhpcy5fc3BpLkN1cnJlbnRTdGF0dXMgPT09IFNwaVN0YXR1cy5VbnBhaXJlZCAmJiB0aGlzLl9zcGkuQ3VycmVudEZsb3cgPT09IFNwaUZsb3cuSWRsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rlc3RNb2RlICAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVzdF9tb2RlJykuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICB0aGlzLl91c2VTZWN1cmVXZWJTb2NrZXRzICAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VzZV9zZWN1cmVfd2ViX3NvY2tldHMnKS5jaGVja2VkO1xuICAgICAgICAgICAgICAgIHRoaXMuX2F1dG9SZXNvbHZlRWZ0cG9zQWRkcmVzcyAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXV0b19yZXNvbHZlX2VmdHBvc19hZGRyZXNzJykuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICB0aGlzLlNldEF1dG9BZGRyZXNzUmVzb2x1dGlvblN0YXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nLmluZm8oYEF1dG8gYWRkcmVzcyBzZXR0aW5ncyBzYXZlZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2V0dGluZ3NfZm9ybScpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChlKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICBpZih0aGlzLl9zcGkuQ3VycmVudFN0YXR1cyA9PT0gU3BpU3RhdHVzLlVucGFpcmVkICYmIHRoaXMuX3NwaS5DdXJyZW50RmxvdyA9PT0gU3BpRmxvdy5JZGxlKSBcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3NJZCAgICAgICAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc19pZCcpLnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FwaUtleSAgICAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zX3ZlbmRvcl9rZXknKS52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lZnRwb3NBZGRyZXNzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VmdHBvc19hZGRyZXNzJykudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VyaWFsTnVtYmVyICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZXJpYWxfbnVtYmVyJykudmFsdWU7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9zcGkuU2V0UG9zSWQodGhpcy5fcG9zSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NwaS5TZXREZXZpY2VBcGlLZXkodGhpcy5fYXBpS2V5KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zcGkuU2V0RWZ0cG9zQWRkcmVzcyh0aGlzLl9lZnRwb3NBZGRyZXNzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zcGkuU2V0U2VyaWFsTnVtYmVyKHRoaXMuX3NlcmlhbE51bWJlcik7XG5cbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncG9zX2lkJywgdGhpcy5fcG9zSWQpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwb3NfdmVuZG9yX2tleScsIHRoaXMuX2FwaUtleSk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2VmdHBvc19hZGRyZXNzJywgdGhpcy5fZWZ0cG9zQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2F1dG9fcmVzb2x2ZV9lZnRwb3NfYWRkcmVzcycsIHRoaXMuX2F1dG9SZXNvbHZlRWZ0cG9zQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3NlcmlhbF9udW1iZXInLCB0aGlzLl9zZXJpYWxOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0ZXN0X21vZGUnLCB0aGlzLl90ZXN0TW9kZSk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZV9zZWN1cmVfd2ViX3NvY2tldHMnLCB0aGlzLl91c2VTZWN1cmVXZWJTb2NrZXRzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhgU2F2ZWQgc2V0dGluZ3NgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc3BpLkNvbmZpZy5Qcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyY3B0X2Zyb21fZWZ0cG9zJykuY2hlY2tlZDtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5Db25maWcuU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NpZ19mbG93X2Zyb21fZWZ0cG9zJykuY2hlY2tlZDtcblxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3JjcHRfZnJvbV9lZnRwb3MnLCB0aGlzLl9zcGkuQ29uZmlnLlByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzaWdfZmxvd19mcm9tX2VmdHBvcycsIHRoaXMuX3NwaS5Db25maWcuU2lnbmF0dXJlRmxvd09uRWZ0cG9zKTtcblxuICAgICAgICAgICAgdGhpcy5QcmludFBhaXJpbmdTdGF0dXMoKTtcblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXV0b19yZXNvbHZlX2VmdHBvc19hZGRyZXNzJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZnRwb3NfYWRkcmVzcycpLmRpc2FibGVkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2F1dG9fcmVzb2x2ZV9lZnRwb3NfYWRkcmVzcycpLmNoZWNrZWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2Vfc2VjdXJlX3dlYl9zb2NrZXRzJykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBpc1NlY3VyZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2Vfc2VjdXJlX3dlYl9zb2NrZXRzJykuY2hlY2tlZDtcblxuICAgICAgICAgICAgdGhpcy5fc3BpLlNldFNlY3VyZVdlYlNvY2tldHMoaXNTZWN1cmUpO1xuICAgICAgICB9KTsgIFxuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWlyJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fc3BpLlBhaXIoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhaXJfY29uZmlybScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5QYWlyaW5nQ29uZmlybUNvZGUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhaXJfY2FuY2VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fc3BpLlBhaXJpbmdDYW5jZWwoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3VucGFpcicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5VbnBhaXIoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3B1cmNoYXNlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHBvc1JlZklkICAgICAgICA9IGBwdXJjaGFzZS0ke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gOyBcbiAgICAgICAgICAgIGxldCBwdXJjaGFzZUFtb3VudCAgPSBwYXJzZUludChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYW1vdW50JykudmFsdWUsMTApO1xuICAgICAgICAgICAgbGV0IHRpcEFtb3VudCAgICAgICA9IHBhcnNlSW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aXBfYW1vdW50JykudmFsdWUsMTApO1xuICAgICAgICAgICAgbGV0IGNhc2hvdXRBbW91bnQgICA9IHBhcnNlSW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXNob3V0X2Ftb3VudCcpLnZhbHVlLDEwKTtcbiAgICAgICAgICAgIGxldCBzdXJjaGFyZ2VBbW91bnQgPSBwYXJzZUludChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VyY2hhcmdlX2Ftb3VudCcpLnZhbHVlLDEwKTtcbiAgICAgICAgICAgIGxldCBwcm9tcHRGb3JDYXNob3V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Byb21wdF9mb3JfY2FzaCcpLmNoZWNrZWQ7XG4gICAgICAgICAgICBsZXQgcmVzICAgICAgICAgICAgID0gdGhpcy5fc3BpLkluaXRpYXRlUHVyY2hhc2VUeFYyKHBvc1JlZklkLCBwdXJjaGFzZUFtb3VudCwgdGlwQW1vdW50LCBjYXNob3V0QW1vdW50LCBwcm9tcHRGb3JDYXNob3V0LCB0aGlzLl9vcHRpb25zLCBzdXJjaGFyZ2VBbW91bnQpO1xuICAgICAgICAgICAgaWYgKCFyZXMuSW5pdGlhdGVkKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgQ291bGQgbm90IGluaXRpYXRlIHB1cmNoYXNlOiAke3Jlcy5NZXNzYWdlfS4gUGxlYXNlIFJldHJ5LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVmdW5kJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IGFtb3VudCAgICAgID0gcGFyc2VJbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Ftb3VudCcpLnZhbHVlLDEwKTtcbiAgICAgICAgICAgIGxldCBzdXBwcmVzc01lcmNoYW50UGFzc3dvcmQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VwcHJlc3NfbWVyY2hhbnRfcGFzc3dvcmQnKS5jaGVja2VkO1xuICAgICAgICAgICAgbGV0IHBvc1JlZklkICAgID0gYHJlZnVuZC0ke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gOyBcbiAgICAgICAgICAgIGxldCByZXMgICAgICAgICA9IHRoaXMuX3NwaS5Jbml0aWF0ZVJlZnVuZFR4KHBvc1JlZklkLCBhbW91bnQsIHN1cHByZXNzTWVyY2hhbnRQYXNzd29yZCk7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKHJlcy5Jbml0aWF0ZWQgPyBcIiMgUmVmdW5kIEluaXRpYXRlZC4gV2lsbCBiZSB1cGRhdGVkIHdpdGggUHJvZ3Jlc3MuXCIgOiBgIyBDb3VsZCBub3QgaW5pdGlhdGUgcmVmdW5kOiAke3Jlcy5NZXNzYWdlfS4gUGxlYXNlIFJldHJ5LmApO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FzaG91dCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBhbW91bnQgICAgICA9IHBhcnNlSW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYXNob3V0X2Ftb3VudCcpLnZhbHVlLDEwKTtcbiAgICAgICAgICAgIGxldCBzdXJjaGFyZ2VBbW91bnQgPSBwYXJzZUludChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VyY2hhcmdlX2Ftb3VudCcpLnZhbHVlLDEwKTtcblxuICAgICAgICAgICAgaWYoIWFtb3VudCA+IDApIFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKCdDYXNob3V0IGFtb3VudCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgcG9zUmVmSWQgICAgPSBgY2FzaG91dC0ke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gOyBcbiAgICAgICAgICAgIGxldCByZXMgICAgICAgICA9IHRoaXMuX3NwaS5Jbml0aWF0ZUNhc2hvdXRPbmx5VHgocG9zUmVmSWQsIGFtb3VudCwgc3VyY2hhcmdlQW1vdW50KTtcbiAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8ocmVzLkluaXRpYXRlZCA/IFwiIyBDYXNob3V0IEluaXRpYXRlZC4gV2lsbCBiZSB1cGRhdGVkIHdpdGggUHJvZ3Jlc3MuXCIgOiBgIyBDb3VsZCBub3QgaW5pdGlhdGUgY2FzaG91dDogJHtyZXMuTWVzc2FnZX0uIFBsZWFzZSBSZXRyeS5gKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21vdG8nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IFxuICAgICAgICB7XG4gICAgICAgICAgICBsZXQgYW1vdW50ICAgICAgPSBwYXJzZUludChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYW1vdW50JykudmFsdWUsMTApO1xuICAgICAgICAgICAgbGV0IHN1cmNoYXJnZUFtb3VudCA9IHBhcnNlSW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdXJjaGFyZ2VfYW1vdW50JykudmFsdWUsMTApO1xuICAgICAgICAgICAgbGV0IHN1cHByZXNzTWVyY2hhbnRQYXNzd29yZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdXBwcmVzc19tZXJjaGFudF9wYXNzd29yZCcpLmNoZWNrZWQ7XG4gICAgICAgICAgICBsZXQgcG9zUmVmSWQgICAgPSBgY2FzaG91dC0ke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gOyBcbiAgICAgICAgICAgIGxldCByZXMgICAgICAgICA9IHRoaXMuX3NwaS5Jbml0aWF0ZU1vdG9QdXJjaGFzZVR4KHBvc1JlZklkLCBhbW91bnQsIHN1cmNoYXJnZUFtb3VudCwgc3VwcHJlc3NNZXJjaGFudFBhc3N3b3JkKTtcbiAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8ocmVzLkluaXRpYXRlZCA/IFwiIyBNT1RPIHB1cmNoYXNlIEluaXRpYXRlZC4gV2lsbCBiZSB1cGRhdGVkIHdpdGggUHJvZ3Jlc3MuXCIgOiBgIyBDb3VsZCBub3QgaW5pdGlhdGUgbW90byBwdXJjaGFzZTogJHtyZXMuTWVzc2FnZX0uIFBsZWFzZSBSZXRyeS5gKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3R4X3NpZ25fYWNjZXB0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fc3BpLkFjY2VwdFNpZ25hdHVyZSh0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3R4X3NpZ25fZGVjbGluZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5BY2NlcHRTaWduYXR1cmUoZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHhfY2FuY2VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fc3BpLkNhbmNlbFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0eF9hdXRoX2NvZGUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IFxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYXV0aENvZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXV0aF9jb2RlJykudmFsdWU7XG4gICAgICAgICAgICB2YXIgcmVzID0gdGhpcy5fc3BpLlN1Ym1pdEF1dGhDb2RlKGF1dGhDb2RlKTtcbiAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8ocmVzLlZhbGlkRm9ybWF0ID8gYCMgQXV0aCBjb2RlIHN1Ym1pdHRlZGAgOiBgIyBJbnZhbGlkIENvZGUgRm9ybWF0LiAke3Jlcy5NZXNzYWdlfS4gVHJ5IEFnYWluLmApO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2V0dGxlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHJlcyA9IHRoaXMuX3NwaS5Jbml0aWF0ZVNldHRsZVR4KFJlcXVlc3RJZEhlbHBlci5JZChcInNldHRsZVwiKSk7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKHJlcy5Jbml0aWF0ZWQgPyBcIiMgU2V0dGxlIEluaXRpYXRlZC4gV2lsbCBiZSB1cGRhdGVkIHdpdGggUHJvZ3Jlc3MuXCIgOiBgIyBDb3VsZCBub3QgaW5pdGlhdGUgc2V0dGxlOiAke3Jlcy5NZXNzYWdlfS4gUGxlYXNlIFJldHJ5LmApO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2V0dGxlX2VucScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCByZXMgPSB0aGlzLl9zcGkuSW5pdGlhdGVTZXR0bGVtZW50RW5xdWlyeShSZXF1ZXN0SWRIZWxwZXIuSWQoXCJzdGxlbnFcIikpO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhyZXMuSW5pdGlhdGVkID8gXCIjIFNldHRsZSBlbnF1aXJ5IEluaXRpYXRlZC4gV2lsbCBiZSB1cGRhdGVkIHdpdGggUHJvZ3Jlc3MuXCIgOiBgIyBDb3VsZCBub3QgaW5pdGlhdGUgc2V0dGxlIGVucXVpcnk6ICR7cmVzLk1lc3NhZ2V9LiBQbGVhc2UgUmV0cnkuYCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmludF9tZXJjaGFudF9jb3B5JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fc3BpLkNvbmZpZy5QcmludE1lcmNoYW50Q29weSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmludF9tZXJjaGFudF9jb3B5JykuY2hlY2tlZDtcbiAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLl9zcGkuQWNrRmxvd0VuZGVkQW5kQmFja1RvSWRsZSgpO1xuICAgICAgICAgICAgdGhpcy5QcmludFN0YXR1c0FuZEFjdGlvbnMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NhdmVfcmVjZWlwdCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuU2V0Q3VzdG9tZXJSZWNlaXB0SGVhZGVyKHRoaXMuU2FuaXRpemVQcmludFRleHQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlY2VpcHRfaGVhZGVyJykudmFsdWUpKTtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuU2V0TWVyY2hhbnRSZWNlaXB0SGVhZGVyKHRoaXMuU2FuaXRpemVQcmludFRleHQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlY2VpcHRfaGVhZGVyJykudmFsdWUpKTtcblxuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5TZXRDdXN0b21lclJlY2VpcHRGb290ZXIodGhpcy5TYW5pdGl6ZVByaW50VGV4dChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVjZWlwdF9mb290ZXInKS52YWx1ZSkpO1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5TZXRNZXJjaGFudFJlY2VpcHRGb290ZXIodGhpcy5TYW5pdGl6ZVByaW50VGV4dChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVjZWlwdF9mb290ZXInKS52YWx1ZSkpO1xuXG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgUmVjZWlwdCBoZWFkZXIgLyBmb290ZXIgdXBkYXRlZC5gKTtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5BY2tGbG93RW5kZWRBbmRCYWNrVG9JZGxlKCk7XG4gICAgICAgICAgICB0aGlzLlByaW50U3RhdHVzQW5kQWN0aW9ucygpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpbnQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IFxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgaGVhZGVyICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVjZWlwdF9oZWFkZXInKS52YWx1ZTtcbiAgICAgICAgICAgIHZhciBmb290ZXIgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWNlaXB0X2Zvb3RlcicpLnZhbHVlO1xuXG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IHRoaXMuU2FuaXRpemVQcmludFRleHQoaGVhZGVyICsgZm9vdGVyKTtcblxuICAgICAgICAgICAgdGhpcy5fc3BpLlByaW50UmVjZWlwdCh0aGlzLl9hcGlLZXksIHBheWxvYWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVybWluYWxfc3RhdHVzJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fc3BpLkdldFRlcm1pbmFsU3RhdHVzKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvaycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5BY2tGbG93RW5kZWRBbmRCYWNrVG9JZGxlKCk7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuaW5uZXJIVE1MID0gXCJTZWxlY3QgZnJvbSB0aGUgb3B0aW9ucyBiZWxvd1wiO1xuICAgICAgICAgICAgdGhpcy5QcmludFN0YXR1c0FuZEFjdGlvbnMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlY292ZXInKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IFxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICAgICAgdmFyIHBvc1JlZklkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc19yZWZfaWQnKS52YWx1ZTtcbiAgICAgICAgICAgIHZhciByZXMgPSB0aGlzLl9zcGkuSW5pdGlhdGVSZWNvdmVyeShwb3NSZWZJZCwgVHJhbnNhY3Rpb25UeXBlLlB1cmNoYXNlKTtcbiAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8ocmVzLkluaXRpYXRlZCA/IFwiIyBSZWNvdmVyeSBJbml0aWF0ZWQuIFdpbGwgYmUgdXBkYXRlZCB3aXRoIFByb2dyZXNzLlwiIDogYCMgQ291bGQgbm90IGluaXRpYXRlIHJlY292ZXJ5LiAke3Jlcy5NZXNzYWdlfS4gUGxlYXNlIFJldHJ5LmApO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2x0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHJlcyA9IHRoaXMuX3NwaS5Jbml0aWF0ZUdldExhc3RUeCgpO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhyZXMuSW5pdGlhdGVkID8gXCIjIEdMVCBJbml0aWF0ZWQuIFdpbGwgYmUgdXBkYXRlZCB3aXRoIFByb2dyZXNzLlwiIDogYCMgQ291bGQgbm90IGluaXRpYXRlIEdMVDogJHtyZXMuTWVzc2FnZX0uIFBsZWFzZSBSZXRyeS5gKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29rX2NhbmNlbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5BY2tGbG93RW5kZWRBbmRCYWNrVG9JZGxlKCk7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuaW5uZXJIVE1MID0gXCJPcmRlciBDYW5jZWxsZWRcIjtcbiAgICAgICAgICAgIHRoaXMuUHJpbnRTdGF0dXNBbmRBY3Rpb25zKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIExvYWRQZXJzaXN0ZWRTdGF0ZSgpXG4gICAge1xuICAgICAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9zX2lkJykpIFxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9wb3NJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwb3NfaWQnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3NfaWQnKS52YWx1ZSA9IHRoaXMuX3Bvc0lkO1xuICAgICAgICB9IFxuICAgICAgICBlbHNlIFxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9wb3NJZCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwb3NfaWQnKS52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwb3NfdmVuZG9yX2tleScpKSBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fYXBpS2V5ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Bvc192ZW5kb3Jfa2V5Jyk7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zX3ZlbmRvcl9rZXknKS52YWx1ZSA9IHRoaXMuX2FwaUtleTtcbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fYXBpS2V5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Bvc192ZW5kb3Jfa2V5JykudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZWZ0cG9zX2FkZHJlc3MnKSkgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2VmdHBvc0FkZHJlc3MgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZWZ0cG9zX2FkZHJlc3MnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZnRwb3NfYWRkcmVzcycpLnZhbHVlID0gdGhpcy5fZWZ0cG9zQWRkcmVzcztcbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fZWZ0cG9zQWRkcmVzcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZnRwb3NfYWRkcmVzcycpLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmNwdF9mcm9tX2VmdHBvcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyY3B0X2Zyb21fZWZ0cG9zJykuY2hlY2tlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdyY3B0X2Zyb21fZWZ0cG9zJykgPT09ICd0cnVlJyB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2lnX2Zsb3dfZnJvbV9lZnRwb3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2lnX2Zsb3dfZnJvbV9lZnRwb3MnKS5jaGVja2VkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NpZ19mbG93X2Zyb21fZWZ0cG9zJykgPT09ICd0cnVlJyB8fCBmYWxzZTtcblxuICAgICAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRW5jS2V5JykgJiYgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0htYWNLZXknKSkgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaVNlY3JldHMgPSBuZXcgU2VjcmV0cyhsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRW5jS2V5JyksIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdIbWFjS2V5JykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlcmlhbF9udW1iZXInKSkgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NlcmlhbE51bWJlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZXJpYWxfbnVtYmVyJyk7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VyaWFsX251bWJlcicpLnZhbHVlID0gdGhpcy5fc2VyaWFsTnVtYmVyO1xuICAgICAgICB9IFxuXG4gICAgICAgIGlmKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhdXRvX3Jlc29sdmVfZWZ0cG9zX2FkZHJlc3MnKSkgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2F1dG9SZXNvbHZlRWZ0cG9zQWRkcmVzcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdhdXRvX3Jlc29sdmVfZWZ0cG9zX2FkZHJlc3MnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhdXRvX3Jlc29sdmVfZWZ0cG9zX2FkZHJlc3MnKS5jaGVja2VkID0gdGhpcy5fYXV0b1Jlc29sdmVFZnRwb3NBZGRyZXNzO1xuICAgICAgICB9IFxuXG4gICAgICAgIHRoaXMuX3Rlc3RNb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rlc3RfbW9kZScpLmNoZWNrZWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGVzdF9tb2RlJykgPT09ICd0cnVlJyB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5fdXNlU2VjdXJlV2ViU29ja2V0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1c2Vfc2VjdXJlX3dlYl9zb2NrZXRzJykuY2hlY2tlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2Vfc2VjdXJlX3dlYl9zb2NrZXRzJykgPT09ICd0cnVlJyB8fCBmYWxzZTtcbiAgICB9XG5cbiAgICBTYW5pdGl6ZVByaW50VGV4dChwcmludFRleHQpXG4gICAge1xuICAgICAgICBwcmludFRleHQgPSBwcmludFRleHQucmVwbGFjZShcIlxcXFxlbXBoYXNpc1wiLCBcIlxcZW1waGFzaXNcIik7XG4gICAgICAgIHByaW50VGV4dCA9IHByaW50VGV4dC5yZXBsYWNlKFwiXFxcXGNsZWFyXCIsIFwiXFxjbGVhclwiKTtcbiAgICAgICAgcmV0dXJuIHByaW50VGV4dC5yZXBsYWNlKFwiXFxyXFxuXCIsIFwiXFxuXCIpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBTdGFydCB0aGUgUE9TXG4gKi9cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiBcbntcbiAgICB0cnkgXG4gICAge1xuICAgICAgICBsZXQgbG9nICAgICAgICAgPSBjb25zb2xlO1xuICAgICAgICBsZXQgcmVjZWlwdCAgICAgPSBuZXcgTG9nZ2VyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWNlaXB0X291dHB1dCcpLGBcXG5cXG4gXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvIFxcblxcbmApO1xuICAgICAgICBsZXQgZmxvd19tc2cgICAgPSBuZXcgTG9nZ2VyKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmbG93X21zZycpKTtcbiAgICAgICAgbGV0IHBvcyAgICAgICAgID0gbmV3IFJhbWVuUG9zKGxvZywgcmVjZWlwdCwgZmxvd19tc2cpO1xuICAgICAgICBwb3MuU3RhcnQoKTtcbiAgICB9IFxuICAgIGNhdGNoKGVycikgXG4gICAge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxufSk7XG5cbiIsIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInNwaS1jbGllbnQtanNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wic3BpLWNsaWVudC1qc1wiXSA9IGZhY3RvcnkoKTtcbn0pKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuLyoqKioqKi8gXHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gd2luZG93W1wid2VicGFja0hvdFVwZGF0ZXNwaV9jbGllbnRfanNcIl07XG4vKioqKioqLyBcdHdpbmRvd1tcIndlYnBhY2tIb3RVcGRhdGVzcGlfY2xpZW50X2pzXCJdID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4vKioqKioqLyBcdGZ1bmN0aW9uIHdlYnBhY2tIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuLyoqKioqKi8gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbi8qKioqKiovIFx0XHRpZiAocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbi8qKioqKiovIFx0fSA7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4vKioqKioqLyBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4vKioqKioqLyBcdFx0c2NyaXB0LmNoYXJzZXQgPSBcInV0Zi04XCI7XG4vKioqKioqLyBcdFx0c2NyaXB0LnNyYyA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBjaHVua0lkICsgXCIuXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNcIjtcbi8qKioqKiovIFx0XHRpZiAobnVsbCkgc2NyaXB0LmNyb3NzT3JpZ2luID0gbnVsbDtcbi8qKioqKiovIFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuLyoqKioqKi8gXHRmdW5jdGlvbiBob3REb3dubG9hZE1hbmlmZXN0KHJlcXVlc3RUaW1lb3V0KSB7XG4vKioqKioqLyBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbi8qKioqKiovIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4vKioqKioqLyBcdFx0XHRpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4vKioqKioqLyBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdHRyeSB7XG4vKioqKioqLyBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4vKioqKioqLyBcdFx0XHRcdHZhciByZXF1ZXN0UGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiO1xuLyoqKioqKi8gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xuLyoqKioqKi8gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbi8qKioqKiovIFx0XHRcdFx0cmVxdWVzdC5zZW5kKG51bGwpO1xuLyoqKioqKi8gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4vKioqKioqLyBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbi8qKioqKiovIFx0XHRcdFx0aWYgKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0Ly8gdGltZW91dFxuLyoqKioqKi8gXHRcdFx0XHRcdHJlamVjdChcbi8qKioqKiovIFx0XHRcdFx0XHRcdG5ldyBFcnJvcihcIk1hbmlmZXN0IHJlcXVlc3QgdG8gXCIgKyByZXF1ZXN0UGF0aCArIFwiIHRpbWVkIG91dC5cIilcbi8qKioqKiovIFx0XHRcdFx0XHQpO1xuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbi8qKioqKiovIFx0XHRcdFx0XHQvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG4vKioqKioqLyBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdC8vIG90aGVyIGZhaWx1cmVcbi8qKioqKiovIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSB7XG4vKioqKioqLyBcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xuLyoqKioqKi8gXHRcdFx0XHRcdHRyeSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4vKioqKioqLyBcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0cmVqZWN0KGUpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0cmV0dXJuO1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0XHRyZXNvbHZlKHVwZGF0ZSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH07XG4vKioqKioqLyBcdFx0fSk7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcbi8qKioqKiovIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4vKioqKioqLyBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiMjNiMTM4NGQ5MTEwNjQzYzc1MTVcIjtcbi8qKioqKiovIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XG4vKioqKioqLyBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudENoaWxkTW9kdWxlO1xuLyoqKioqKi8gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbi8qKioqKiovIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4vKioqKioqLyBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdGlmICghbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xuLyoqKioqKi8gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcbi8qKioqKiovIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSB7XG4vKioqKioqLyBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fSBlbHNlIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uc29sZS53YXJuKFxuLyoqKioqKi8gXHRcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICtcbi8qKioqKiovIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcbi8qKioqKiovIFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4vKioqKioqLyBcdFx0XHRcdCk7XG4vKioqKioqLyBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4ge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XG4vKioqKioqLyBcdFx0XHRcdH0sXG4vKioqKioqLyBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH07XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XHRmb3IgKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcbi8qKioqKiovIFx0XHRcdGlmIChcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmXG4vKioqKioqLyBcdFx0XHRcdG5hbWUgIT09IFwiZVwiICYmXG4vKioqKioqLyBcdFx0XHRcdG5hbWUgIT09IFwidFwiXG4vKioqKioqLyBcdFx0XHQpIHtcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcbi8qKioqKiovIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbi8qKioqKiovIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcbi8qKioqKiovIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xuLyoqKioqKi8gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbi8qKioqKiovIFx0XHRcdFx0dGhyb3cgZXJyO1xuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xuLyoqKioqKi8gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XG4vKioqKioqLyBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0aWYgKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0XHRpZiAoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcdGZuLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuLyoqKioqKi8gXHRcdFx0aWYgKG1vZGUgJiAxKSB2YWx1ZSA9IGZuKHZhbHVlKTtcbi8qKioqKiovIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnQodmFsdWUsIG1vZGUgJiB+MSk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZm47XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbi8qKioqKiovIFx0XHR2YXIgaG90ID0ge1xuLyoqKioqKi8gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuLyoqKioqKi8gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbi8qKioqKiovIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG4vKioqKioqLyBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG4vKioqKioqLyBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHQvLyBNb2R1bGUgQVBJXG4vKioqKioqLyBcdFx0XHRhY3RpdmU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbi8qKioqKiovIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XG4vKioqKioqLyBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG4vKioqKioqLyBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4vKioqKioqLyBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4vKioqKioqLyBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xuLyoqKioqKi8gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4vKioqKioqLyBcdFx0XHR9LFxuLyoqKioqKi8gXHRcdFx0ZGVjbGluZTogZnVuY3Rpb24oZGVwKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuLyoqKioqKi8gXHRcdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxuLyoqKioqKi8gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbi8qKioqKiovIFx0XHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuLyoqKioqKi8gXHRcdFx0fSxcbi8qKioqKiovIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4vKioqKioqLyBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuLyoqKioqKi8gXHRcdFx0fSxcbi8qKioqKiovIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuLyoqKioqKi8gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbi8qKioqKiovIFx0XHRcdH0sXG4vKioqKioqLyBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbi8qKioqKiovIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuLyoqKioqKi8gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuLyoqKioqKi8gXHRcdFx0fSxcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuLyoqKioqKi8gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxuLyoqKioqKi8gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxuLyoqKioqKi8gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmICghbCkgcmV0dXJuIGhvdFN0YXR1cztcbi8qKioqKiovIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbi8qKioqKiovIFx0XHRcdH0sXG4vKioqKioqLyBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4vKioqKioqLyBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4vKioqKioqLyBcdFx0XHR9LFxuLyoqKioqKi8gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcbi8qKioqKiovIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbi8qKioqKiovIFx0XHRcdH0sXG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG4vKioqKioqLyBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcbi8qKioqKiovIFx0XHRyZXR1cm4gaG90O1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbi8qKioqKiovIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuLyoqKioqKi8gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcbi8qKioqKiovIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuLyoqKioqKi8gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuLyoqKioqKi8gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcbi8qKioqKiovIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuLyoqKioqKi8gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4vKioqKioqLyBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuLyoqKioqKi8gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcbi8qKioqKiovIFx0dmFyIGhvdERlZmVycmVkO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4vKioqKioqLyBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG4vKioqKioqL1xuLyoqKioqKi8gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XG4vKioqKioqLyBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4vKioqKioqLyBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XG4vKioqKioqLyBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcbi8qKioqKiovIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XG4vKioqKioqLyBcdFx0XHRpZiAoIXVwZGF0ZSkge1xuLyoqKioqKi8gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuLyoqKioqKi8gXHRcdFx0XHRyZXR1cm4gbnVsbDtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4vKioqKioqLyBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbi8qKioqKiovIFx0XHRcdGhvdEF2YWlsYWJsZUZpbGVzTWFwID0gdXBkYXRlLmM7XG4vKioqKioqLyBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbi8qKioqKiovIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4vKioqKioqLyBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xuLyoqKioqKi8gXHRcdFx0XHRcdHJlc29sdmU6IHJlc29sdmUsXG4vKioqKioqLyBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3Rcbi8qKioqKiovIFx0XHRcdFx0fTtcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdFx0aG90VXBkYXRlID0ge307XG4vKioqKioqLyBcdFx0XHR2YXIgY2h1bmtJZCA9IFwibWFpblwiO1xuLyoqKioqKi8gXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG4vKioqKioqLyBcdFx0XHR7XG4vKioqKioqLyBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXG4vKioqKioqLyBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0aWYgKFxuLyoqKioqKi8gXHRcdFx0XHRob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmXG4vKioqKioqLyBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiZcbi8qKioqKiovIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4vKioqKioqLyBcdFx0XHQpIHtcbi8qKioqKiovIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIHByb21pc2U7XG4vKioqKioqLyBcdFx0fSk7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuLyoqKioqKi8gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuO1xuLyoqKioqKi8gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4vKioqKioqLyBcdFx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbi8qKioqKiovIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuLyoqKioqKi8gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuLyoqKioqKi8gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xuLyoqKioqKi8gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbi8qKioqKiovIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4vKioqKioqLyBcdFx0fSBlbHNlIHtcbi8qKioqKiovIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbi8qKioqKiovIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuLyoqKioqKi8gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4vKioqKioqLyBcdFx0dmFyIGRlZmVycmVkID0gaG90RGVmZXJyZWQ7XG4vKioqKioqLyBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuLyoqKioqKi8gXHRcdGlmICghZGVmZXJyZWQpIHJldHVybjtcbi8qKioqKiovIFx0XHRpZiAoaG90QXBwbHlPblVwZGF0ZSkge1xuLyoqKioqKi8gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbi8qKioqKiovIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxuLyoqKioqKi8gXHRcdFx0Ly8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ2NTY2NlxuLyoqKioqKi8gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbi8qKioqKiovIFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0cmV0dXJuIGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUpO1xuLyoqKioqKi8gXHRcdFx0XHR9KVxuLyoqKioqKi8gXHRcdFx0XHQudGhlbihcbi8qKioqKiovIFx0XHRcdFx0XHRmdW5jdGlvbihyZXN1bHQpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbi8qKioqKiovIFx0XHRcdFx0XHR9LFxuLyoqKioqKi8gXHRcdFx0XHRcdGZ1bmN0aW9uKGVycikge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHQpO1xuLyoqKioqKi8gXHRcdH0gZWxzZSB7XG4vKioqKioqLyBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4vKioqKioqLyBcdFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbi8qKioqKiovIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xuLyoqKioqKi8gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbi8qKioqKiovIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbi8qKioqKiovIFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0dmFyIGNiO1xuLyoqKioqKi8gXHRcdHZhciBpO1xuLyoqKioqKi8gXHRcdHZhciBqO1xuLyoqKioqKi8gXHRcdHZhciBtb2R1bGU7XG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZUlkO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5tYXAoZnVuY3Rpb24oaWQpIHtcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIHtcbi8qKioqKiovIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbi8qKioqKiovIFx0XHRcdFx0XHRpZDogaWRcbi8qKioqKiovIFx0XHRcdFx0fTtcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbi8qKioqKiovIFx0XHRcdFx0dmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4vKioqKioqLyBcdFx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcbi8qKioqKiovIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHRcdGlmICghbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCkgY29udGludWU7XG4vKioqKioqLyBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm4ge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG4vKioqKioqLyBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4vKioqKioqLyBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbi8qKioqKiovIFx0XHRcdFx0XHR9O1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0cmV0dXJuIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4vKioqKioqLyBcdFx0XHRcdFx0fTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuLyoqKioqKi8gXHRcdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcbi8qKioqKiovIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG4vKioqKioqLyBcdFx0XHRcdFx0XHR9O1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG4vKioqKioqLyBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuLyoqKioqKi8gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbi8qKioqKiovIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbi8qKioqKiovIFx0XHRcdFx0XHR9KTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHRcdHJldHVybiB7XG4vKioqKioqLyBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbi8qKioqKiovIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcbi8qKioqKiovIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4vKioqKioqLyBcdFx0XHR9O1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuLyoqKioqKi8gXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4vKioqKioqLyBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbi8qKioqKiovIFx0XHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG4vKioqKioqLyBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuLyoqKioqKi8gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuLyoqKioqKi8gXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbi8qKioqKiovIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKCkge1xuLyoqKioqKi8gXHRcdFx0Y29uc29sZS53YXJuKFxuLyoqKioqKi8gXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuLyoqKioqKi8gXHRcdFx0KTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHRmb3IgKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcbi8qKioqKiovIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbi8qKioqKiovIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcbi8qKioqKiovIFx0XHRcdFx0LyoqIEB0eXBlIHtUT0RPfSAqL1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgcmVzdWx0O1xuLyoqKioqKi8gXHRcdFx0XHRpZiAoaG90VXBkYXRlW2lkXSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlSWQpO1xuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2Uge1xuLyoqKioqKi8gXHRcdFx0XHRcdHJlc3VsdCA9IHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcbi8qKioqKiovIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuLyoqKioqKi8gXHRcdFx0XHRcdH07XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbi8qKioqKiovIFx0XHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcbi8qKioqKiovIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcbi8qKioqKiovIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcbi8qKioqKiovIFx0XHRcdFx0aWYgKHJlc3VsdC5jaGFpbikge1xuLyoqKioqKi8gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRzd2l0Y2ggKHJlc3VsdC50eXBlKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0YnJlYWs7XG4vKioqKioqLyBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0YnJlYWs7XG4vKioqKioqLyBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0YnJlYWs7XG4vKioqKioqLyBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0YnJlYWs7XG4vKioqKioqLyBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRpc3Bvc2VkKSBvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRicmVhaztcbi8qKioqKiovIFx0XHRcdFx0XHRkZWZhdWx0OlxuLyoqKioqKi8gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRpZiAoYWJvcnRFcnJvcikge1xuLyoqKioqKi8gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuLyoqKioqKi8gXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChhYm9ydEVycm9yKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gaG90VXBkYXRlW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuLyoqKioqKi8gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZiAoXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWRcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0KVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0KSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7XG4vKioqKioqLyBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFN0b3JlIHNlbGYgYWNjZXB0ZWQgb3V0ZGF0ZWQgbW9kdWxlcyB0byByZXF1aXJlIHRoZW0gbGF0ZXIgYnkgdGhlIG1vZHVsZSBzeXN0ZW1cbi8qKioqKiovIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4vKioqKioqLyBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuLyoqKioqKi8gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XG4vKioqKioqLyBcdFx0XHRpZiAoXG4vKioqKioqLyBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmXG4vKioqKioqLyBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkICYmXG4vKioqKioqLyBcdFx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcbi8qKioqKiovIFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZVxuLyoqKioqKi8gXHRcdFx0KSB7XG4vKioqKioqLyBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbi8qKioqKiovIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0XHRcdGVycm9ySGFuZGxlcjogaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcbi8qKioqKiovIFx0XHRcdFx0fSk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2Vcbi8qKioqKiovIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcbi8qKioqKiovIFx0XHRcdGlmIChob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcbi8qKioqKiovIFx0XHRcdFx0aG90RGlzcG9zZUNodW5rKGNodW5rSWQpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH0pO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHR2YXIgaWR4O1xuLyoqKioqKi8gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuLyoqKioqKi8gXHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4vKioqKioqLyBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xuLyoqKioqKi8gXHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0dmFyIGRhdGEgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcbi8qKioqKiovIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG4vKioqKioqLyBcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG4vKioqKioqLyBcdFx0XHRcdGNiID0gZGlzcG9zZUhhbmRsZXJzW2pdO1xuLyoqKioqKi8gXHRcdFx0XHRjYihkYXRhKTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXSA9IGRhdGE7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcbi8qKioqKiovIFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG4vKioqKioqLyBcdFx0XHRkZWxldGUgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuLyoqKioqKi8gXHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuLyoqKioqKi8gXHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XG4vKioqKioqLyBcdFx0XHRcdGlmICghY2hpbGQpIGNvbnRpbnVlO1xuLyoqKioqKi8gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuLyoqKioqKi8gXHRcdFx0XHRpZiAoaWR4ID49IDApIHtcbi8qKioqKiovIFx0XHRcdFx0XHRjaGlsZC5wYXJlbnRzLnNwbGljZShpZHgsIDEpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuLyoqKioqKi8gXHRcdHZhciBkZXBlbmRlbmN5O1xuLyoqKioqKi8gXHRcdHZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcztcbi8qKioqKiovIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4vKioqKioqLyBcdFx0XHRpZiAoXG4vKioqKioqLyBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpXG4vKioqKioqLyBcdFx0XHQpIHtcbi8qKioqKiovIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHRcdGlmIChtb2R1bGUpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBOb3cgaW4gXCJhcHBseVwiIHBoYXNlXG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG4vKioqKioqLyBcdFx0Zm9yIChtb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG4vKioqKioqLyBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcbi8qKioqKiovIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuLyoqKioqKi8gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbi8qKioqKiovIFx0XHRcdGlmIChcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbi8qKioqKiovIFx0XHRcdCkge1xuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcbi8qKioqKiovIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGNiKSAhPT0gLTEpIGNvbnRpbnVlO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XG4vKioqKioqLyBcdFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0dHJ5IHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0fSk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbi8qKioqKiovIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4vKioqKioqLyBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcbi8qKioqKiovIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4vKioqKioqLyBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHR0cnkge1xuLyoqKioqKi8gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcbi8qKioqKiovIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuLyoqKioqKi8gXHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbi8qKioqKiovIFx0XHRcdFx0XHR0cnkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHR9KTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyMjtcbi8qKioqKiovIFx0XHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0fSBlbHNlIHtcbi8qKioqKiovIFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0fSk7XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG4vKioqKioqLyBcdFx0aWYgKGVycm9yKSB7XG4vKioqKioqLyBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcbi8qKioqKiovIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbi8qKioqKiovIFx0XHR9KTtcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9LFxuLyoqKioqKi8gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuLyoqKioqKi8gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuLyoqKioqKi8gXHRcdFx0Y2hpbGRyZW46IFtdXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4vKioqKioqLyBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuLyoqKioqKi8gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuLyoqKioqKi8gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuLyoqKioqKi8gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gbnM7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfaGFzaF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBob3RDcmVhdGVSZXF1aXJlKFwiLi9pbmRleC5qc1wiKShfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBcIi4vaW5kZXguanNcIik7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovICh7XG5cbi8qKiovIFwiLi9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBTcGksIExvZ2dlciwgU2VjcmV0cywgU3VjY2Vzc1N0YXRlLCBUcmFuc2FjdGlvbk9wdGlvbnMsIFRyYW5zYWN0aW9uVHlwZSwgU3BpRmxvdywgU3BpU3RhdHVzLCBQcmludGluZ1Jlc3BvbnNlLCBSZWZ1bmRSZXNwb25zZSwgUHVyY2hhc2VSZXNwb25zZSwgR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2UsIE1vdG9QdXJjaGFzZVJlc3BvbnNlLCBUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlLCBUZXJtaW5hbEJhdHRlcnksIENhc2hvdXRPbmx5UmVzcG9uc2UsIFNldHRsZW1lbnQsIFJlcXVlc3RJZEhlbHBlciwgRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZSwgQmlsbFN0YXR1c1Jlc3BvbnNlLCBCaWxsUmV0cmlldmFsUmVzdWx0LCBHZXRPcGVuVGFibGVzUmVzcG9uc2UsIE9wZW5UYWJsZXNFbnRyeSwgQmlsbFBheW1lbnRGbG93RW5kZWRSZXNwb25zZSwgQWNjb3VudFZlcmlmeVJlc3BvbnNlLCBQcmVhdXRoUmVzcG9uc2UgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19TcGlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL1NwaSAqLyBcIi4vc3JjL1NwaS5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNwaVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfU3BpX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bXCJTcGlcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL0xvZ2dlciAqLyBcIi4vc3JjL0xvZ2dlci5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkxvZ2dlclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfTG9nZ2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bXCJMb2dnZXJcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19TZWNyZXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9TZWNyZXRzICovIFwiLi9zcmMvU2VjcmV0cy5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNlY3JldHNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1NlY3JldHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlNlY3JldHNcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlN1Y2Nlc3NTdGF0ZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlN1Y2Nlc3NTdGF0ZVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc3JjX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvU3BpTW9kZWxzICovIFwiLi9zcmMvU3BpTW9kZWxzLmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVHJhbnNhY3Rpb25PcHRpb25zXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXTsgfSk7XG5cbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlRyYW5zYWN0aW9uVHlwZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJUcmFuc2FjdGlvblR5cGVcIl07IH0pO1xuXG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTcGlGbG93XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlNwaUZsb3dcIl07IH0pO1xuXG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTcGlTdGF0dXNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiU3BpU3RhdHVzXCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zcmNfUHJpbnRpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL1ByaW50aW5nICovIFwiLi9zcmMvUHJpbnRpbmcuanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQcmludGluZ1Jlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19QcmludGluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiUHJpbnRpbmdSZXNwb25zZVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc3JjX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9QdXJjaGFzZSAqLyBcIi4vc3JjL1B1cmNoYXNlLmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUmVmdW5kUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bXCJSZWZ1bmRSZXNwb25zZVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlB1cmNoYXNlUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bXCJQdXJjaGFzZVJlc3BvbnNlXCJdOyB9KTtcblxuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bXCJHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIk1vdG9QdXJjaGFzZVJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fW1wiTW90b1B1cmNoYXNlUmVzcG9uc2VcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19UZXJtaW5hbFN0YXR1c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvVGVybWluYWxTdGF0dXMgKi8gXCIuL3NyYy9UZXJtaW5hbFN0YXR1cy5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlRlcm1pbmFsU3RhdHVzUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1Rlcm1pbmFsU3RhdHVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19bXCJUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlXCJdOyB9KTtcblxuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVGVybWluYWxCYXR0ZXJ5XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19UZXJtaW5hbFN0YXR1c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fW1wiVGVybWluYWxCYXR0ZXJ5XCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zcmNfQ2FzaG91dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvQ2FzaG91dCAqLyBcIi4vc3JjL0Nhc2hvdXQuanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJDYXNob3V0T25seVJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19DYXNob3V0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19bXCJDYXNob3V0T25seVJlc3BvbnNlXCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zcmNfU2V0dGxlbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvU2V0dGxlbWVudCAqLyBcIi4vc3JjL1NldHRsZW1lbnQuanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTZXR0bGVtZW50XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19TZXR0bGVtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19bXCJTZXR0bGVtZW50XCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zcmNfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvUmVxdWVzdElkSGVscGVyICovIFwiLi9zcmMvUmVxdWVzdElkSGVscGVyLmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUmVxdWVzdElkSGVscGVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19TZXJ2aWNlX0RldmljZVNlcnZpY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9TZXJ2aWNlL0RldmljZVNlcnZpY2UgKi8gXCIuL3NyYy9TZXJ2aWNlL0RldmljZVNlcnZpY2UuanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJEZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19TZXJ2aWNlX0RldmljZVNlcnZpY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzExX19bXCJEZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlXCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zcmNfUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL1BheUF0VGFibGUgKi8gXCIuL3NyYy9QYXlBdFRhYmxlLmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQmlsbFN0YXR1c1Jlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fW1wiQmlsbFN0YXR1c1Jlc3BvbnNlXCJdOyB9KTtcblxuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQmlsbFJldHJpZXZhbFJlc3VsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfX1tcIkJpbGxSZXRyaWV2YWxSZXN1bHRcIl07IH0pO1xuXG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJHZXRPcGVuVGFibGVzUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1BheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX19bXCJHZXRPcGVuVGFibGVzUmVzcG9uc2VcIl07IH0pO1xuXG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJPcGVuVGFibGVzRW50cnlcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1BheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX19bXCJPcGVuVGFibGVzRW50cnlcIl07IH0pO1xuXG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJCaWxsUGF5bWVudEZsb3dFbmRlZFJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fW1wiQmlsbFBheW1lbnRGbG93RW5kZWRSZXNwb25zZVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc3JjX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9QcmVhdXRoICovIFwiLi9zcmMvUHJlYXV0aC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkFjY291bnRWZXJpZnlSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTNfX1tcIkFjY291bnRWZXJpZnlSZXNwb25zZVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlByZWF1dGhSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTNfX1tcIlByZWF1dGhSZXNwb25zZVwiXTsgfSk7XG5cbi8vIFJlLWV4cG9ydGVkIG1vZHVsZXMgcmVxdWlyZWQgZm9yIFBPUyB2ZW5kb3JzXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FzeW5jVG9HZW5lcmF0b3I7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jcmVhdGVDbGFzcztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9yZWFkT25seUVycm9yLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlYWRPbmx5RXJyb3IuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbmZ1bmN0aW9uIF9yZWFkT25seUVycm9yKG5hbWUpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyByZWFkLW9ubHlcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3JlYWRPbmx5RXJyb3I7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVnZW5lcmF0b3ItcnVudGltZSAqLyBcIi4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qc1wiKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9hZXMtanMvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2Flcy1qcy9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyohIE1JVCBMaWNlbnNlLiBDb3B5cmlnaHQgMjAxNS0yMDE4IFJpY2hhcmQgTW9vcmUgPG1lQHJpY21vby5jb20+LiBTZWUgTElDRU5TRS50eHQuICovXG4oZnVuY3Rpb24ocm9vdCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgZnVuY3Rpb24gY2hlY2tJbnQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIChwYXJzZUludCh2YWx1ZSkgPT09IHZhbHVlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0ludHMoYXJyYXlpc2gpIHtcbiAgICAgICAgaWYgKCFjaGVja0ludChhcnJheWlzaC5sZW5ndGgpKSB7IHJldHVybiBmYWxzZTsgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlpc2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghY2hlY2tJbnQoYXJyYXlpc2hbaV0pIHx8IGFycmF5aXNoW2ldIDwgMCB8fCBhcnJheWlzaFtpXSA+IDI1NSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvZXJjZUFycmF5KGFyZywgY29weSkge1xuXG4gICAgICAgIC8vIEFycmF5QnVmZmVyIHZpZXdcbiAgICAgICAgaWYgKGFyZy5idWZmZXIgJiYgYXJnLm5hbWUgPT09ICdVaW50OEFycmF5Jykge1xuXG4gICAgICAgICAgICBpZiAoY29weSkge1xuICAgICAgICAgICAgICAgIGlmIChhcmcuc2xpY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJdCdzIGFuIGFycmF5OyBjaGVjayBpdCBpcyBhIHZhbGlkIHJlcHJlc2VudGF0aW9uIG9mIGEgYnl0ZVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgICAgICBpZiAoIWNoZWNrSW50cyhhcmcpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcnJheSBjb250YWlucyBpbnZhbGlkIHZhbHVlOiAnICsgYXJnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb21ldGhpbmcgZWxzZSwgYnV0IGJlaGF2ZXMgbGlrZSBhbiBhcnJheSAobWF5YmUgYSBCdWZmZXI/IEFyZ3VtZW50cz8pXG4gICAgICAgIGlmIChjaGVja0ludChhcmcubGVuZ3RoKSAmJiBjaGVja0ludHMoYXJnKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vuc3VwcG9ydGVkIGFycmF5LWxpa2Ugb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQXJyYXkobGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvcHlBcnJheShzb3VyY2VBcnJheSwgdGFyZ2V0QXJyYXksIHRhcmdldFN0YXJ0LCBzb3VyY2VTdGFydCwgc291cmNlRW5kKSB7XG4gICAgICAgIGlmIChzb3VyY2VTdGFydCAhPSBudWxsIHx8IHNvdXJjZUVuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlQXJyYXkuc2xpY2UpIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VBcnJheSA9IHNvdXJjZUFycmF5LnNsaWNlKHNvdXJjZVN0YXJ0LCBzb3VyY2VFbmQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VBcnJheSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHNvdXJjZUFycmF5LCBzb3VyY2VTdGFydCwgc291cmNlRW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0YXJnZXRBcnJheS5zZXQoc291cmNlQXJyYXksIHRhcmdldFN0YXJ0KTtcbiAgICB9XG5cblxuXG4gICAgdmFyIGNvbnZlcnRVdGY4ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICBmdW5jdGlvbiB0b0J5dGVzKHRleHQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXSwgaSA9IDA7XG4gICAgICAgICAgICB0ZXh0ID0gZW5jb2RlVVJJKHRleHQpO1xuICAgICAgICAgICAgd2hpbGUgKGkgPCB0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBjID0gdGV4dC5jaGFyQ29kZUF0KGkrKyk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBpdCBpcyBhICUgc2lnbiwgZW5jb2RlIHRoZSBmb2xsb3dpbmcgMiBieXRlcyBhcyBhIGhleCB2YWx1ZVxuICAgICAgICAgICAgICAgIGlmIChjID09PSAzNykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludCh0ZXh0LnN1YnN0cihpLCAyKSwgMTYpKVxuICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG5cbiAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UsIGp1c3QgdGhlIGFjdHVhbCBieXRlXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjb2VyY2VBcnJheShyZXN1bHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZnJvbUJ5dGVzKGJ5dGVzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sIGkgPSAwO1xuXG4gICAgICAgICAgICB3aGlsZSAoaSA8IGJ5dGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBjID0gYnl0ZXNbaV07XG5cbiAgICAgICAgICAgICAgICBpZiAoYyA8IDEyOCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGMpKTtcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA+IDE5MSAmJiBjIDwgMjI0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMHgxZikgPDwgNikgfCAoYnl0ZXNbaSArIDFdICYgMHgzZikpKTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoKChjICYgMHgwZikgPDwgMTIpIHwgKChieXRlc1tpICsgMV0gJiAweDNmKSA8PCA2KSB8IChieXRlc1tpICsgMl0gJiAweDNmKSkpO1xuICAgICAgICAgICAgICAgICAgICBpICs9IDM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvQnl0ZXM6IHRvQnl0ZXMsXG4gICAgICAgICAgICBmcm9tQnl0ZXM6IGZyb21CeXRlcyxcbiAgICAgICAgfVxuICAgIH0pKCk7XG5cbiAgICB2YXIgY29udmVydEhleCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgZnVuY3Rpb24gdG9CeXRlcyh0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludCh0ZXh0LnN1YnN0cihpLCAyKSwgMTYpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGh0dHA6Ly9peHRpLm5ldC9kZXZlbG9wbWVudC9qYXZhc2NyaXB0LzIwMTEvMTEvMTEvYmFzZTY0LWVuY29kZWRlY29kZS1vZi11dGY4LWluLWJyb3dzZXItd2l0aC1qcy5odG1sXG4gICAgICAgIHZhciBIZXggPSAnMDEyMzQ1Njc4OWFiY2RlZic7XG5cbiAgICAgICAgZnVuY3Rpb24gZnJvbUJ5dGVzKGJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSBieXRlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goSGV4Wyh2ICYgMHhmMCkgPj4gNF0gKyBIZXhbdiAmIDB4MGZdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0b0J5dGVzOiB0b0J5dGVzLFxuICAgICAgICAgICAgZnJvbUJ5dGVzOiBmcm9tQnl0ZXMsXG4gICAgICAgIH1cbiAgICB9KSgpO1xuXG5cbiAgICAvLyBOdW1iZXIgb2Ygcm91bmRzIGJ5IGtleXNpemVcbiAgICB2YXIgbnVtYmVyT2ZSb3VuZHMgPSB7MTY6IDEwLCAyNDogMTIsIDMyOiAxNH1cblxuICAgIC8vIFJvdW5kIGNvbnN0YW50IHdvcmRzXG4gICAgdmFyIHJjb24gPSBbMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNiwgMHg2YywgMHhkOCwgMHhhYiwgMHg0ZCwgMHg5YSwgMHgyZiwgMHg1ZSwgMHhiYywgMHg2MywgMHhjNiwgMHg5NywgMHgzNSwgMHg2YSwgMHhkNCwgMHhiMywgMHg3ZCwgMHhmYSwgMHhlZiwgMHhjNSwgMHg5MV07XG5cbiAgICAvLyBTLWJveCBhbmQgSW52ZXJzZSBTLWJveCAoUyBpcyBmb3IgU3Vic3RpdHV0aW9uKVxuICAgIHZhciBTID0gWzB4NjMsIDB4N2MsIDB4NzcsIDB4N2IsIDB4ZjIsIDB4NmIsIDB4NmYsIDB4YzUsIDB4MzAsIDB4MDEsIDB4NjcsIDB4MmIsIDB4ZmUsIDB4ZDcsIDB4YWIsIDB4NzYsIDB4Y2EsIDB4ODIsIDB4YzksIDB4N2QsIDB4ZmEsIDB4NTksIDB4NDcsIDB4ZjAsIDB4YWQsIDB4ZDQsIDB4YTIsIDB4YWYsIDB4OWMsIDB4YTQsIDB4NzIsIDB4YzAsIDB4YjcsIDB4ZmQsIDB4OTMsIDB4MjYsIDB4MzYsIDB4M2YsIDB4ZjcsIDB4Y2MsIDB4MzQsIDB4YTUsIDB4ZTUsIDB4ZjEsIDB4NzEsIDB4ZDgsIDB4MzEsIDB4MTUsIDB4MDQsIDB4YzcsIDB4MjMsIDB4YzMsIDB4MTgsIDB4OTYsIDB4MDUsIDB4OWEsIDB4MDcsIDB4MTIsIDB4ODAsIDB4ZTIsIDB4ZWIsIDB4MjcsIDB4YjIsIDB4NzUsIDB4MDksIDB4ODMsIDB4MmMsIDB4MWEsIDB4MWIsIDB4NmUsIDB4NWEsIDB4YTAsIDB4NTIsIDB4M2IsIDB4ZDYsIDB4YjMsIDB4MjksIDB4ZTMsIDB4MmYsIDB4ODQsIDB4NTMsIDB4ZDEsIDB4MDAsIDB4ZWQsIDB4MjAsIDB4ZmMsIDB4YjEsIDB4NWIsIDB4NmEsIDB4Y2IsIDB4YmUsIDB4MzksIDB4NGEsIDB4NGMsIDB4NTgsIDB4Y2YsIDB4ZDAsIDB4ZWYsIDB4YWEsIDB4ZmIsIDB4NDMsIDB4NGQsIDB4MzMsIDB4ODUsIDB4NDUsIDB4ZjksIDB4MDIsIDB4N2YsIDB4NTAsIDB4M2MsIDB4OWYsIDB4YTgsIDB4NTEsIDB4YTMsIDB4NDAsIDB4OGYsIDB4OTIsIDB4OWQsIDB4MzgsIDB4ZjUsIDB4YmMsIDB4YjYsIDB4ZGEsIDB4MjEsIDB4MTAsIDB4ZmYsIDB4ZjMsIDB4ZDIsIDB4Y2QsIDB4MGMsIDB4MTMsIDB4ZWMsIDB4NWYsIDB4OTcsIDB4NDQsIDB4MTcsIDB4YzQsIDB4YTcsIDB4N2UsIDB4M2QsIDB4NjQsIDB4NWQsIDB4MTksIDB4NzMsIDB4NjAsIDB4ODEsIDB4NGYsIDB4ZGMsIDB4MjIsIDB4MmEsIDB4OTAsIDB4ODgsIDB4NDYsIDB4ZWUsIDB4YjgsIDB4MTQsIDB4ZGUsIDB4NWUsIDB4MGIsIDB4ZGIsIDB4ZTAsIDB4MzIsIDB4M2EsIDB4MGEsIDB4NDksIDB4MDYsIDB4MjQsIDB4NWMsIDB4YzIsIDB4ZDMsIDB4YWMsIDB4NjIsIDB4OTEsIDB4OTUsIDB4ZTQsIDB4NzksIDB4ZTcsIDB4YzgsIDB4MzcsIDB4NmQsIDB4OGQsIDB4ZDUsIDB4NGUsIDB4YTksIDB4NmMsIDB4NTYsIDB4ZjQsIDB4ZWEsIDB4NjUsIDB4N2EsIDB4YWUsIDB4MDgsIDB4YmEsIDB4NzgsIDB4MjUsIDB4MmUsIDB4MWMsIDB4YTYsIDB4YjQsIDB4YzYsIDB4ZTgsIDB4ZGQsIDB4NzQsIDB4MWYsIDB4NGIsIDB4YmQsIDB4OGIsIDB4OGEsIDB4NzAsIDB4M2UsIDB4YjUsIDB4NjYsIDB4NDgsIDB4MDMsIDB4ZjYsIDB4MGUsIDB4NjEsIDB4MzUsIDB4NTcsIDB4YjksIDB4ODYsIDB4YzEsIDB4MWQsIDB4OWUsIDB4ZTEsIDB4ZjgsIDB4OTgsIDB4MTEsIDB4NjksIDB4ZDksIDB4OGUsIDB4OTQsIDB4OWIsIDB4MWUsIDB4ODcsIDB4ZTksIDB4Y2UsIDB4NTUsIDB4MjgsIDB4ZGYsIDB4OGMsIDB4YTEsIDB4ODksIDB4MGQsIDB4YmYsIDB4ZTYsIDB4NDIsIDB4NjgsIDB4NDEsIDB4OTksIDB4MmQsIDB4MGYsIDB4YjAsIDB4NTQsIDB4YmIsIDB4MTZdO1xuICAgIHZhciBTaSA9WzB4NTIsIDB4MDksIDB4NmEsIDB4ZDUsIDB4MzAsIDB4MzYsIDB4YTUsIDB4MzgsIDB4YmYsIDB4NDAsIDB4YTMsIDB4OWUsIDB4ODEsIDB4ZjMsIDB4ZDcsIDB4ZmIsIDB4N2MsIDB4ZTMsIDB4MzksIDB4ODIsIDB4OWIsIDB4MmYsIDB4ZmYsIDB4ODcsIDB4MzQsIDB4OGUsIDB4NDMsIDB4NDQsIDB4YzQsIDB4ZGUsIDB4ZTksIDB4Y2IsIDB4NTQsIDB4N2IsIDB4OTQsIDB4MzIsIDB4YTYsIDB4YzIsIDB4MjMsIDB4M2QsIDB4ZWUsIDB4NGMsIDB4OTUsIDB4MGIsIDB4NDIsIDB4ZmEsIDB4YzMsIDB4NGUsIDB4MDgsIDB4MmUsIDB4YTEsIDB4NjYsIDB4MjgsIDB4ZDksIDB4MjQsIDB4YjIsIDB4NzYsIDB4NWIsIDB4YTIsIDB4NDksIDB4NmQsIDB4OGIsIDB4ZDEsIDB4MjUsIDB4NzIsIDB4ZjgsIDB4ZjYsIDB4NjQsIDB4ODYsIDB4NjgsIDB4OTgsIDB4MTYsIDB4ZDQsIDB4YTQsIDB4NWMsIDB4Y2MsIDB4NWQsIDB4NjUsIDB4YjYsIDB4OTIsIDB4NmMsIDB4NzAsIDB4NDgsIDB4NTAsIDB4ZmQsIDB4ZWQsIDB4YjksIDB4ZGEsIDB4NWUsIDB4MTUsIDB4NDYsIDB4NTcsIDB4YTcsIDB4OGQsIDB4OWQsIDB4ODQsIDB4OTAsIDB4ZDgsIDB4YWIsIDB4MDAsIDB4OGMsIDB4YmMsIDB4ZDMsIDB4MGEsIDB4ZjcsIDB4ZTQsIDB4NTgsIDB4MDUsIDB4YjgsIDB4YjMsIDB4NDUsIDB4MDYsIDB4ZDAsIDB4MmMsIDB4MWUsIDB4OGYsIDB4Y2EsIDB4M2YsIDB4MGYsIDB4MDIsIDB4YzEsIDB4YWYsIDB4YmQsIDB4MDMsIDB4MDEsIDB4MTMsIDB4OGEsIDB4NmIsIDB4M2EsIDB4OTEsIDB4MTEsIDB4NDEsIDB4NGYsIDB4NjcsIDB4ZGMsIDB4ZWEsIDB4OTcsIDB4ZjIsIDB4Y2YsIDB4Y2UsIDB4ZjAsIDB4YjQsIDB4ZTYsIDB4NzMsIDB4OTYsIDB4YWMsIDB4NzQsIDB4MjIsIDB4ZTcsIDB4YWQsIDB4MzUsIDB4ODUsIDB4ZTIsIDB4ZjksIDB4MzcsIDB4ZTgsIDB4MWMsIDB4NzUsIDB4ZGYsIDB4NmUsIDB4NDcsIDB4ZjEsIDB4MWEsIDB4NzEsIDB4MWQsIDB4MjksIDB4YzUsIDB4ODksIDB4NmYsIDB4YjcsIDB4NjIsIDB4MGUsIDB4YWEsIDB4MTgsIDB4YmUsIDB4MWIsIDB4ZmMsIDB4NTYsIDB4M2UsIDB4NGIsIDB4YzYsIDB4ZDIsIDB4NzksIDB4MjAsIDB4OWEsIDB4ZGIsIDB4YzAsIDB4ZmUsIDB4NzgsIDB4Y2QsIDB4NWEsIDB4ZjQsIDB4MWYsIDB4ZGQsIDB4YTgsIDB4MzMsIDB4ODgsIDB4MDcsIDB4YzcsIDB4MzEsIDB4YjEsIDB4MTIsIDB4MTAsIDB4NTksIDB4MjcsIDB4ODAsIDB4ZWMsIDB4NWYsIDB4NjAsIDB4NTEsIDB4N2YsIDB4YTksIDB4MTksIDB4YjUsIDB4NGEsIDB4MGQsIDB4MmQsIDB4ZTUsIDB4N2EsIDB4OWYsIDB4OTMsIDB4YzksIDB4OWMsIDB4ZWYsIDB4YTAsIDB4ZTAsIDB4M2IsIDB4NGQsIDB4YWUsIDB4MmEsIDB4ZjUsIDB4YjAsIDB4YzgsIDB4ZWIsIDB4YmIsIDB4M2MsIDB4ODMsIDB4NTMsIDB4OTksIDB4NjEsIDB4MTcsIDB4MmIsIDB4MDQsIDB4N2UsIDB4YmEsIDB4NzcsIDB4ZDYsIDB4MjYsIDB4ZTEsIDB4NjksIDB4MTQsIDB4NjMsIDB4NTUsIDB4MjEsIDB4MGMsIDB4N2RdO1xuXG4gICAgLy8gVHJhbnNmb3JtYXRpb25zIGZvciBlbmNyeXB0aW9uXG4gICAgdmFyIFQxID0gWzB4YzY2MzYzYTUsIDB4Zjg3YzdjODQsIDB4ZWU3Nzc3OTksIDB4ZjY3YjdiOGQsIDB4ZmZmMmYyMGQsIDB4ZDY2YjZiYmQsIDB4ZGU2ZjZmYjEsIDB4OTFjNWM1NTQsIDB4NjAzMDMwNTAsIDB4MDIwMTAxMDMsIDB4Y2U2NzY3YTksIDB4NTYyYjJiN2QsIDB4ZTdmZWZlMTksIDB4YjVkN2Q3NjIsIDB4NGRhYmFiZTYsIDB4ZWM3Njc2OWEsIDB4OGZjYWNhNDUsIDB4MWY4MjgyOWQsIDB4ODljOWM5NDAsIDB4ZmE3ZDdkODcsIDB4ZWZmYWZhMTUsIDB4YjI1OTU5ZWIsIDB4OGU0NzQ3YzksIDB4ZmJmMGYwMGIsIDB4NDFhZGFkZWMsIDB4YjNkNGQ0NjcsIDB4NWZhMmEyZmQsIDB4NDVhZmFmZWEsIDB4MjM5YzljYmYsIDB4NTNhNGE0ZjcsIDB4ZTQ3MjcyOTYsIDB4OWJjMGMwNWIsIDB4NzViN2I3YzIsIDB4ZTFmZGZkMWMsIDB4M2Q5MzkzYWUsIDB4NGMyNjI2NmEsIDB4NmMzNjM2NWEsIDB4N2UzZjNmNDEsIDB4ZjVmN2Y3MDIsIDB4ODNjY2NjNGYsIDB4NjgzNDM0NWMsIDB4NTFhNWE1ZjQsIDB4ZDFlNWU1MzQsIDB4ZjlmMWYxMDgsIDB4ZTI3MTcxOTMsIDB4YWJkOGQ4NzMsIDB4NjIzMTMxNTMsIDB4MmExNTE1M2YsIDB4MDgwNDA0MGMsIDB4OTVjN2M3NTIsIDB4NDYyMzIzNjUsIDB4OWRjM2MzNWUsIDB4MzAxODE4MjgsIDB4Mzc5Njk2YTEsIDB4MGEwNTA1MGYsIDB4MmY5YTlhYjUsIDB4MGUwNzA3MDksIDB4MjQxMjEyMzYsIDB4MWI4MDgwOWIsIDB4ZGZlMmUyM2QsIDB4Y2RlYmViMjYsIDB4NGUyNzI3NjksIDB4N2ZiMmIyY2QsIDB4ZWE3NTc1OWYsIDB4MTIwOTA5MWIsIDB4MWQ4MzgzOWUsIDB4NTgyYzJjNzQsIDB4MzQxYTFhMmUsIDB4MzYxYjFiMmQsIDB4ZGM2ZTZlYjIsIDB4YjQ1YTVhZWUsIDB4NWJhMGEwZmIsIDB4YTQ1MjUyZjYsIDB4NzYzYjNiNGQsIDB4YjdkNmQ2NjEsIDB4N2RiM2IzY2UsIDB4NTIyOTI5N2IsIDB4ZGRlM2UzM2UsIDB4NWUyZjJmNzEsIDB4MTM4NDg0OTcsIDB4YTY1MzUzZjUsIDB4YjlkMWQxNjgsIDB4MDAwMDAwMDAsIDB4YzFlZGVkMmMsIDB4NDAyMDIwNjAsIDB4ZTNmY2ZjMWYsIDB4NzliMWIxYzgsIDB4YjY1YjViZWQsIDB4ZDQ2YTZhYmUsIDB4OGRjYmNiNDYsIDB4NjdiZWJlZDksIDB4NzIzOTM5NGIsIDB4OTQ0YTRhZGUsIDB4OTg0YzRjZDQsIDB4YjA1ODU4ZTgsIDB4ODVjZmNmNGEsIDB4YmJkMGQwNmIsIDB4YzVlZmVmMmEsIDB4NGZhYWFhZTUsIDB4ZWRmYmZiMTYsIDB4ODY0MzQzYzUsIDB4OWE0ZDRkZDcsIDB4NjYzMzMzNTUsIDB4MTE4NTg1OTQsIDB4OGE0NTQ1Y2YsIDB4ZTlmOWY5MTAsIDB4MDQwMjAyMDYsIDB4ZmU3ZjdmODEsIDB4YTA1MDUwZjAsIDB4NzgzYzNjNDQsIDB4MjU5ZjlmYmEsIDB4NGJhOGE4ZTMsIDB4YTI1MTUxZjMsIDB4NWRhM2EzZmUsIDB4ODA0MDQwYzAsIDB4MDU4ZjhmOGEsIDB4M2Y5MjkyYWQsIDB4MjE5ZDlkYmMsIDB4NzAzODM4NDgsIDB4ZjFmNWY1MDQsIDB4NjNiY2JjZGYsIDB4NzdiNmI2YzEsIDB4YWZkYWRhNzUsIDB4NDIyMTIxNjMsIDB4MjAxMDEwMzAsIDB4ZTVmZmZmMWEsIDB4ZmRmM2YzMGUsIDB4YmZkMmQyNmQsIDB4ODFjZGNkNGMsIDB4MTgwYzBjMTQsIDB4MjYxMzEzMzUsIDB4YzNlY2VjMmYsIDB4YmU1ZjVmZTEsIDB4MzU5Nzk3YTIsIDB4ODg0NDQ0Y2MsIDB4MmUxNzE3MzksIDB4OTNjNGM0NTcsIDB4NTVhN2E3ZjIsIDB4ZmM3ZTdlODIsIDB4N2EzZDNkNDcsIDB4Yzg2NDY0YWMsIDB4YmE1ZDVkZTcsIDB4MzIxOTE5MmIsIDB4ZTY3MzczOTUsIDB4YzA2MDYwYTAsIDB4MTk4MTgxOTgsIDB4OWU0ZjRmZDEsIDB4YTNkY2RjN2YsIDB4NDQyMjIyNjYsIDB4NTQyYTJhN2UsIDB4M2I5MDkwYWIsIDB4MGI4ODg4ODMsIDB4OGM0NjQ2Y2EsIDB4YzdlZWVlMjksIDB4NmJiOGI4ZDMsIDB4MjgxNDE0M2MsIDB4YTdkZWRlNzksIDB4YmM1ZTVlZTIsIDB4MTYwYjBiMWQsIDB4YWRkYmRiNzYsIDB4ZGJlMGUwM2IsIDB4NjQzMjMyNTYsIDB4NzQzYTNhNGUsIDB4MTQwYTBhMWUsIDB4OTI0OTQ5ZGIsIDB4MGMwNjA2MGEsIDB4NDgyNDI0NmMsIDB4Yjg1YzVjZTQsIDB4OWZjMmMyNWQsIDB4YmRkM2QzNmUsIDB4NDNhY2FjZWYsIDB4YzQ2MjYyYTYsIDB4Mzk5MTkxYTgsIDB4MzE5NTk1YTQsIDB4ZDNlNGU0MzcsIDB4ZjI3OTc5OGIsIDB4ZDVlN2U3MzIsIDB4OGJjOGM4NDMsIDB4NmUzNzM3NTksIDB4ZGE2ZDZkYjcsIDB4MDE4ZDhkOGMsIDB4YjFkNWQ1NjQsIDB4OWM0ZTRlZDIsIDB4NDlhOWE5ZTAsIDB4ZDg2YzZjYjQsIDB4YWM1NjU2ZmEsIDB4ZjNmNGY0MDcsIDB4Y2ZlYWVhMjUsIDB4Y2E2NTY1YWYsIDB4ZjQ3YTdhOGUsIDB4NDdhZWFlZTksIDB4MTAwODA4MTgsIDB4NmZiYWJhZDUsIDB4ZjA3ODc4ODgsIDB4NGEyNTI1NmYsIDB4NWMyZTJlNzIsIDB4MzgxYzFjMjQsIDB4NTdhNmE2ZjEsIDB4NzNiNGI0YzcsIDB4OTdjNmM2NTEsIDB4Y2JlOGU4MjMsIDB4YTFkZGRkN2MsIDB4ZTg3NDc0OWMsIDB4M2UxZjFmMjEsIDB4OTY0YjRiZGQsIDB4NjFiZGJkZGMsIDB4MGQ4YjhiODYsIDB4MGY4YThhODUsIDB4ZTA3MDcwOTAsIDB4N2MzZTNlNDIsIDB4NzFiNWI1YzQsIDB4Y2M2NjY2YWEsIDB4OTA0ODQ4ZDgsIDB4MDYwMzAzMDUsIDB4ZjdmNmY2MDEsIDB4MWMwZTBlMTIsIDB4YzI2MTYxYTMsIDB4NmEzNTM1NWYsIDB4YWU1NzU3ZjksIDB4NjliOWI5ZDAsIDB4MTc4Njg2OTEsIDB4OTljMWMxNTgsIDB4M2ExZDFkMjcsIDB4Mjc5ZTllYjksIDB4ZDllMWUxMzgsIDB4ZWJmOGY4MTMsIDB4MmI5ODk4YjMsIDB4MjIxMTExMzMsIDB4ZDI2OTY5YmIsIDB4YTlkOWQ5NzAsIDB4MDc4ZThlODksIDB4MzM5NDk0YTcsIDB4MmQ5YjliYjYsIDB4M2MxZTFlMjIsIDB4MTU4Nzg3OTIsIDB4YzllOWU5MjAsIDB4ODdjZWNlNDksIDB4YWE1NTU1ZmYsIDB4NTAyODI4NzgsIDB4YTVkZmRmN2EsIDB4MDM4YzhjOGYsIDB4NTlhMWExZjgsIDB4MDk4OTg5ODAsIDB4MWEwZDBkMTcsIDB4NjViZmJmZGEsIDB4ZDdlNmU2MzEsIDB4ODQ0MjQyYzYsIDB4ZDA2ODY4YjgsIDB4ODI0MTQxYzMsIDB4Mjk5OTk5YjAsIDB4NWEyZDJkNzcsIDB4MWUwZjBmMTEsIDB4N2JiMGIwY2IsIDB4YTg1NDU0ZmMsIDB4NmRiYmJiZDYsIDB4MmMxNjE2M2FdO1xuICAgIHZhciBUMiA9IFsweGE1YzY2MzYzLCAweDg0Zjg3YzdjLCAweDk5ZWU3Nzc3LCAweDhkZjY3YjdiLCAweDBkZmZmMmYyLCAweGJkZDY2YjZiLCAweGIxZGU2ZjZmLCAweDU0OTFjNWM1LCAweDUwNjAzMDMwLCAweDAzMDIwMTAxLCAweGE5Y2U2NzY3LCAweDdkNTYyYjJiLCAweDE5ZTdmZWZlLCAweDYyYjVkN2Q3LCAweGU2NGRhYmFiLCAweDlhZWM3Njc2LCAweDQ1OGZjYWNhLCAweDlkMWY4MjgyLCAweDQwODljOWM5LCAweDg3ZmE3ZDdkLCAweDE1ZWZmYWZhLCAweGViYjI1OTU5LCAweGM5OGU0NzQ3LCAweDBiZmJmMGYwLCAweGVjNDFhZGFkLCAweDY3YjNkNGQ0LCAweGZkNWZhMmEyLCAweGVhNDVhZmFmLCAweGJmMjM5YzljLCAweGY3NTNhNGE0LCAweDk2ZTQ3MjcyLCAweDViOWJjMGMwLCAweGMyNzViN2I3LCAweDFjZTFmZGZkLCAweGFlM2Q5MzkzLCAweDZhNGMyNjI2LCAweDVhNmMzNjM2LCAweDQxN2UzZjNmLCAweDAyZjVmN2Y3LCAweDRmODNjY2NjLCAweDVjNjgzNDM0LCAweGY0NTFhNWE1LCAweDM0ZDFlNWU1LCAweDA4ZjlmMWYxLCAweDkzZTI3MTcxLCAweDczYWJkOGQ4LCAweDUzNjIzMTMxLCAweDNmMmExNTE1LCAweDBjMDgwNDA0LCAweDUyOTVjN2M3LCAweDY1NDYyMzIzLCAweDVlOWRjM2MzLCAweDI4MzAxODE4LCAweGExMzc5Njk2LCAweDBmMGEwNTA1LCAweGI1MmY5YTlhLCAweDA5MGUwNzA3LCAweDM2MjQxMjEyLCAweDliMWI4MDgwLCAweDNkZGZlMmUyLCAweDI2Y2RlYmViLCAweDY5NGUyNzI3LCAweGNkN2ZiMmIyLCAweDlmZWE3NTc1LCAweDFiMTIwOTA5LCAweDllMWQ4MzgzLCAweDc0NTgyYzJjLCAweDJlMzQxYTFhLCAweDJkMzYxYjFiLCAweGIyZGM2ZTZlLCAweGVlYjQ1YTVhLCAweGZiNWJhMGEwLCAweGY2YTQ1MjUyLCAweDRkNzYzYjNiLCAweDYxYjdkNmQ2LCAweGNlN2RiM2IzLCAweDdiNTIyOTI5LCAweDNlZGRlM2UzLCAweDcxNWUyZjJmLCAweDk3MTM4NDg0LCAweGY1YTY1MzUzLCAweDY4YjlkMWQxLCAweDAwMDAwMDAwLCAweDJjYzFlZGVkLCAweDYwNDAyMDIwLCAweDFmZTNmY2ZjLCAweGM4NzliMWIxLCAweGVkYjY1YjViLCAweGJlZDQ2YTZhLCAweDQ2OGRjYmNiLCAweGQ5NjdiZWJlLCAweDRiNzIzOTM5LCAweGRlOTQ0YTRhLCAweGQ0OTg0YzRjLCAweGU4YjA1ODU4LCAweDRhODVjZmNmLCAweDZiYmJkMGQwLCAweDJhYzVlZmVmLCAweGU1NGZhYWFhLCAweDE2ZWRmYmZiLCAweGM1ODY0MzQzLCAweGQ3OWE0ZDRkLCAweDU1NjYzMzMzLCAweDk0MTE4NTg1LCAweGNmOGE0NTQ1LCAweDEwZTlmOWY5LCAweDA2MDQwMjAyLCAweDgxZmU3ZjdmLCAweGYwYTA1MDUwLCAweDQ0NzgzYzNjLCAweGJhMjU5ZjlmLCAweGUzNGJhOGE4LCAweGYzYTI1MTUxLCAweGZlNWRhM2EzLCAweGMwODA0MDQwLCAweDhhMDU4ZjhmLCAweGFkM2Y5MjkyLCAweGJjMjE5ZDlkLCAweDQ4NzAzODM4LCAweDA0ZjFmNWY1LCAweGRmNjNiY2JjLCAweGMxNzdiNmI2LCAweDc1YWZkYWRhLCAweDYzNDIyMTIxLCAweDMwMjAxMDEwLCAweDFhZTVmZmZmLCAweDBlZmRmM2YzLCAweDZkYmZkMmQyLCAweDRjODFjZGNkLCAweDE0MTgwYzBjLCAweDM1MjYxMzEzLCAweDJmYzNlY2VjLCAweGUxYmU1ZjVmLCAweGEyMzU5Nzk3LCAweGNjODg0NDQ0LCAweDM5MmUxNzE3LCAweDU3OTNjNGM0LCAweGYyNTVhN2E3LCAweDgyZmM3ZTdlLCAweDQ3N2EzZDNkLCAweGFjYzg2NDY0LCAweGU3YmE1ZDVkLCAweDJiMzIxOTE5LCAweDk1ZTY3MzczLCAweGEwYzA2MDYwLCAweDk4MTk4MTgxLCAweGQxOWU0ZjRmLCAweDdmYTNkY2RjLCAweDY2NDQyMjIyLCAweDdlNTQyYTJhLCAweGFiM2I5MDkwLCAweDgzMGI4ODg4LCAweGNhOGM0NjQ2LCAweDI5YzdlZWVlLCAweGQzNmJiOGI4LCAweDNjMjgxNDE0LCAweDc5YTdkZWRlLCAweGUyYmM1ZTVlLCAweDFkMTYwYjBiLCAweDc2YWRkYmRiLCAweDNiZGJlMGUwLCAweDU2NjQzMjMyLCAweDRlNzQzYTNhLCAweDFlMTQwYTBhLCAweGRiOTI0OTQ5LCAweDBhMGMwNjA2LCAweDZjNDgyNDI0LCAweGU0Yjg1YzVjLCAweDVkOWZjMmMyLCAweDZlYmRkM2QzLCAweGVmNDNhY2FjLCAweGE2YzQ2MjYyLCAweGE4Mzk5MTkxLCAweGE0MzE5NTk1LCAweDM3ZDNlNGU0LCAweDhiZjI3OTc5LCAweDMyZDVlN2U3LCAweDQzOGJjOGM4LCAweDU5NmUzNzM3LCAweGI3ZGE2ZDZkLCAweDhjMDE4ZDhkLCAweDY0YjFkNWQ1LCAweGQyOWM0ZTRlLCAweGUwNDlhOWE5LCAweGI0ZDg2YzZjLCAweGZhYWM1NjU2LCAweDA3ZjNmNGY0LCAweDI1Y2ZlYWVhLCAweGFmY2E2NTY1LCAweDhlZjQ3YTdhLCAweGU5NDdhZWFlLCAweDE4MTAwODA4LCAweGQ1NmZiYWJhLCAweDg4ZjA3ODc4LCAweDZmNGEyNTI1LCAweDcyNWMyZTJlLCAweDI0MzgxYzFjLCAweGYxNTdhNmE2LCAweGM3NzNiNGI0LCAweDUxOTdjNmM2LCAweDIzY2JlOGU4LCAweDdjYTFkZGRkLCAweDljZTg3NDc0LCAweDIxM2UxZjFmLCAweGRkOTY0YjRiLCAweGRjNjFiZGJkLCAweDg2MGQ4YjhiLCAweDg1MGY4YThhLCAweDkwZTA3MDcwLCAweDQyN2MzZTNlLCAweGM0NzFiNWI1LCAweGFhY2M2NjY2LCAweGQ4OTA0ODQ4LCAweDA1MDYwMzAzLCAweDAxZjdmNmY2LCAweDEyMWMwZTBlLCAweGEzYzI2MTYxLCAweDVmNmEzNTM1LCAweGY5YWU1NzU3LCAweGQwNjliOWI5LCAweDkxMTc4Njg2LCAweDU4OTljMWMxLCAweDI3M2ExZDFkLCAweGI5Mjc5ZTllLCAweDM4ZDllMWUxLCAweDEzZWJmOGY4LCAweGIzMmI5ODk4LCAweDMzMjIxMTExLCAweGJiZDI2OTY5LCAweDcwYTlkOWQ5LCAweDg5MDc4ZThlLCAweGE3MzM5NDk0LCAweGI2MmQ5YjliLCAweDIyM2MxZTFlLCAweDkyMTU4Nzg3LCAweDIwYzllOWU5LCAweDQ5ODdjZWNlLCAweGZmYWE1NTU1LCAweDc4NTAyODI4LCAweDdhYTVkZmRmLCAweDhmMDM4YzhjLCAweGY4NTlhMWExLCAweDgwMDk4OTg5LCAweDE3MWEwZDBkLCAweGRhNjViZmJmLCAweDMxZDdlNmU2LCAweGM2ODQ0MjQyLCAweGI4ZDA2ODY4LCAweGMzODI0MTQxLCAweGIwMjk5OTk5LCAweDc3NWEyZDJkLCAweDExMWUwZjBmLCAweGNiN2JiMGIwLCAweGZjYTg1NDU0LCAweGQ2NmRiYmJiLCAweDNhMmMxNjE2XTtcbiAgICB2YXIgVDMgPSBbMHg2M2E1YzY2MywgMHg3Yzg0Zjg3YywgMHg3Nzk5ZWU3NywgMHg3YjhkZjY3YiwgMHhmMjBkZmZmMiwgMHg2YmJkZDY2YiwgMHg2ZmIxZGU2ZiwgMHhjNTU0OTFjNSwgMHgzMDUwNjAzMCwgMHgwMTAzMDIwMSwgMHg2N2E5Y2U2NywgMHgyYjdkNTYyYiwgMHhmZTE5ZTdmZSwgMHhkNzYyYjVkNywgMHhhYmU2NGRhYiwgMHg3NjlhZWM3NiwgMHhjYTQ1OGZjYSwgMHg4MjlkMWY4MiwgMHhjOTQwODljOSwgMHg3ZDg3ZmE3ZCwgMHhmYTE1ZWZmYSwgMHg1OWViYjI1OSwgMHg0N2M5OGU0NywgMHhmMDBiZmJmMCwgMHhhZGVjNDFhZCwgMHhkNDY3YjNkNCwgMHhhMmZkNWZhMiwgMHhhZmVhNDVhZiwgMHg5Y2JmMjM5YywgMHhhNGY3NTNhNCwgMHg3Mjk2ZTQ3MiwgMHhjMDViOWJjMCwgMHhiN2MyNzViNywgMHhmZDFjZTFmZCwgMHg5M2FlM2Q5MywgMHgyNjZhNGMyNiwgMHgzNjVhNmMzNiwgMHgzZjQxN2UzZiwgMHhmNzAyZjVmNywgMHhjYzRmODNjYywgMHgzNDVjNjgzNCwgMHhhNWY0NTFhNSwgMHhlNTM0ZDFlNSwgMHhmMTA4ZjlmMSwgMHg3MTkzZTI3MSwgMHhkODczYWJkOCwgMHgzMTUzNjIzMSwgMHgxNTNmMmExNSwgMHgwNDBjMDgwNCwgMHhjNzUyOTVjNywgMHgyMzY1NDYyMywgMHhjMzVlOWRjMywgMHgxODI4MzAxOCwgMHg5NmExMzc5NiwgMHgwNTBmMGEwNSwgMHg5YWI1MmY5YSwgMHgwNzA5MGUwNywgMHgxMjM2MjQxMiwgMHg4MDliMWI4MCwgMHhlMjNkZGZlMiwgMHhlYjI2Y2RlYiwgMHgyNzY5NGUyNywgMHhiMmNkN2ZiMiwgMHg3NTlmZWE3NSwgMHgwOTFiMTIwOSwgMHg4MzllMWQ4MywgMHgyYzc0NTgyYywgMHgxYTJlMzQxYSwgMHgxYjJkMzYxYiwgMHg2ZWIyZGM2ZSwgMHg1YWVlYjQ1YSwgMHhhMGZiNWJhMCwgMHg1MmY2YTQ1MiwgMHgzYjRkNzYzYiwgMHhkNjYxYjdkNiwgMHhiM2NlN2RiMywgMHgyOTdiNTIyOSwgMHhlMzNlZGRlMywgMHgyZjcxNWUyZiwgMHg4NDk3MTM4NCwgMHg1M2Y1YTY1MywgMHhkMTY4YjlkMSwgMHgwMDAwMDAwMCwgMHhlZDJjYzFlZCwgMHgyMDYwNDAyMCwgMHhmYzFmZTNmYywgMHhiMWM4NzliMSwgMHg1YmVkYjY1YiwgMHg2YWJlZDQ2YSwgMHhjYjQ2OGRjYiwgMHhiZWQ5NjdiZSwgMHgzOTRiNzIzOSwgMHg0YWRlOTQ0YSwgMHg0Y2Q0OTg0YywgMHg1OGU4YjA1OCwgMHhjZjRhODVjZiwgMHhkMDZiYmJkMCwgMHhlZjJhYzVlZiwgMHhhYWU1NGZhYSwgMHhmYjE2ZWRmYiwgMHg0M2M1ODY0MywgMHg0ZGQ3OWE0ZCwgMHgzMzU1NjYzMywgMHg4NTk0MTE4NSwgMHg0NWNmOGE0NSwgMHhmOTEwZTlmOSwgMHgwMjA2MDQwMiwgMHg3ZjgxZmU3ZiwgMHg1MGYwYTA1MCwgMHgzYzQ0NzgzYywgMHg5ZmJhMjU5ZiwgMHhhOGUzNGJhOCwgMHg1MWYzYTI1MSwgMHhhM2ZlNWRhMywgMHg0MGMwODA0MCwgMHg4ZjhhMDU4ZiwgMHg5MmFkM2Y5MiwgMHg5ZGJjMjE5ZCwgMHgzODQ4NzAzOCwgMHhmNTA0ZjFmNSwgMHhiY2RmNjNiYywgMHhiNmMxNzdiNiwgMHhkYTc1YWZkYSwgMHgyMTYzNDIyMSwgMHgxMDMwMjAxMCwgMHhmZjFhZTVmZiwgMHhmMzBlZmRmMywgMHhkMjZkYmZkMiwgMHhjZDRjODFjZCwgMHgwYzE0MTgwYywgMHgxMzM1MjYxMywgMHhlYzJmYzNlYywgMHg1ZmUxYmU1ZiwgMHg5N2EyMzU5NywgMHg0NGNjODg0NCwgMHgxNzM5MmUxNywgMHhjNDU3OTNjNCwgMHhhN2YyNTVhNywgMHg3ZTgyZmM3ZSwgMHgzZDQ3N2EzZCwgMHg2NGFjYzg2NCwgMHg1ZGU3YmE1ZCwgMHgxOTJiMzIxOSwgMHg3Mzk1ZTY3MywgMHg2MGEwYzA2MCwgMHg4MTk4MTk4MSwgMHg0ZmQxOWU0ZiwgMHhkYzdmYTNkYywgMHgyMjY2NDQyMiwgMHgyYTdlNTQyYSwgMHg5MGFiM2I5MCwgMHg4ODgzMGI4OCwgMHg0NmNhOGM0NiwgMHhlZTI5YzdlZSwgMHhiOGQzNmJiOCwgMHgxNDNjMjgxNCwgMHhkZTc5YTdkZSwgMHg1ZWUyYmM1ZSwgMHgwYjFkMTYwYiwgMHhkYjc2YWRkYiwgMHhlMDNiZGJlMCwgMHgzMjU2NjQzMiwgMHgzYTRlNzQzYSwgMHgwYTFlMTQwYSwgMHg0OWRiOTI0OSwgMHgwNjBhMGMwNiwgMHgyNDZjNDgyNCwgMHg1Y2U0Yjg1YywgMHhjMjVkOWZjMiwgMHhkMzZlYmRkMywgMHhhY2VmNDNhYywgMHg2MmE2YzQ2MiwgMHg5MWE4Mzk5MSwgMHg5NWE0MzE5NSwgMHhlNDM3ZDNlNCwgMHg3OThiZjI3OSwgMHhlNzMyZDVlNywgMHhjODQzOGJjOCwgMHgzNzU5NmUzNywgMHg2ZGI3ZGE2ZCwgMHg4ZDhjMDE4ZCwgMHhkNTY0YjFkNSwgMHg0ZWQyOWM0ZSwgMHhhOWUwNDlhOSwgMHg2Y2I0ZDg2YywgMHg1NmZhYWM1NiwgMHhmNDA3ZjNmNCwgMHhlYTI1Y2ZlYSwgMHg2NWFmY2E2NSwgMHg3YThlZjQ3YSwgMHhhZWU5NDdhZSwgMHgwODE4MTAwOCwgMHhiYWQ1NmZiYSwgMHg3ODg4ZjA3OCwgMHgyNTZmNGEyNSwgMHgyZTcyNWMyZSwgMHgxYzI0MzgxYywgMHhhNmYxNTdhNiwgMHhiNGM3NzNiNCwgMHhjNjUxOTdjNiwgMHhlODIzY2JlOCwgMHhkZDdjYTFkZCwgMHg3NDljZTg3NCwgMHgxZjIxM2UxZiwgMHg0YmRkOTY0YiwgMHhiZGRjNjFiZCwgMHg4Yjg2MGQ4YiwgMHg4YTg1MGY4YSwgMHg3MDkwZTA3MCwgMHgzZTQyN2MzZSwgMHhiNWM0NzFiNSwgMHg2NmFhY2M2NiwgMHg0OGQ4OTA0OCwgMHgwMzA1MDYwMywgMHhmNjAxZjdmNiwgMHgwZTEyMWMwZSwgMHg2MWEzYzI2MSwgMHgzNTVmNmEzNSwgMHg1N2Y5YWU1NywgMHhiOWQwNjliOSwgMHg4NjkxMTc4NiwgMHhjMTU4OTljMSwgMHgxZDI3M2ExZCwgMHg5ZWI5Mjc5ZSwgMHhlMTM4ZDllMSwgMHhmODEzZWJmOCwgMHg5OGIzMmI5OCwgMHgxMTMzMjIxMSwgMHg2OWJiZDI2OSwgMHhkOTcwYTlkOSwgMHg4ZTg5MDc4ZSwgMHg5NGE3MzM5NCwgMHg5YmI2MmQ5YiwgMHgxZTIyM2MxZSwgMHg4NzkyMTU4NywgMHhlOTIwYzllOSwgMHhjZTQ5ODdjZSwgMHg1NWZmYWE1NSwgMHgyODc4NTAyOCwgMHhkZjdhYTVkZiwgMHg4YzhmMDM4YywgMHhhMWY4NTlhMSwgMHg4OTgwMDk4OSwgMHgwZDE3MWEwZCwgMHhiZmRhNjViZiwgMHhlNjMxZDdlNiwgMHg0MmM2ODQ0MiwgMHg2OGI4ZDA2OCwgMHg0MWMzODI0MSwgMHg5OWIwMjk5OSwgMHgyZDc3NWEyZCwgMHgwZjExMWUwZiwgMHhiMGNiN2JiMCwgMHg1NGZjYTg1NCwgMHhiYmQ2NmRiYiwgMHgxNjNhMmMxNl07XG4gICAgdmFyIFQ0ID0gWzB4NjM2M2E1YzYsIDB4N2M3Yzg0ZjgsIDB4Nzc3Nzk5ZWUsIDB4N2I3YjhkZjYsIDB4ZjJmMjBkZmYsIDB4NmI2YmJkZDYsIDB4NmY2ZmIxZGUsIDB4YzVjNTU0OTEsIDB4MzAzMDUwNjAsIDB4MDEwMTAzMDIsIDB4Njc2N2E5Y2UsIDB4MmIyYjdkNTYsIDB4ZmVmZTE5ZTcsIDB4ZDdkNzYyYjUsIDB4YWJhYmU2NGQsIDB4NzY3NjlhZWMsIDB4Y2FjYTQ1OGYsIDB4ODI4MjlkMWYsIDB4YzljOTQwODksIDB4N2Q3ZDg3ZmEsIDB4ZmFmYTE1ZWYsIDB4NTk1OWViYjIsIDB4NDc0N2M5OGUsIDB4ZjBmMDBiZmIsIDB4YWRhZGVjNDEsIDB4ZDRkNDY3YjMsIDB4YTJhMmZkNWYsIDB4YWZhZmVhNDUsIDB4OWM5Y2JmMjMsIDB4YTRhNGY3NTMsIDB4NzI3Mjk2ZTQsIDB4YzBjMDViOWIsIDB4YjdiN2MyNzUsIDB4ZmRmZDFjZTEsIDB4OTM5M2FlM2QsIDB4MjYyNjZhNGMsIDB4MzYzNjVhNmMsIDB4M2YzZjQxN2UsIDB4ZjdmNzAyZjUsIDB4Y2NjYzRmODMsIDB4MzQzNDVjNjgsIDB4YTVhNWY0NTEsIDB4ZTVlNTM0ZDEsIDB4ZjFmMTA4ZjksIDB4NzE3MTkzZTIsIDB4ZDhkODczYWIsIDB4MzEzMTUzNjIsIDB4MTUxNTNmMmEsIDB4MDQwNDBjMDgsIDB4YzdjNzUyOTUsIDB4MjMyMzY1NDYsIDB4YzNjMzVlOWQsIDB4MTgxODI4MzAsIDB4OTY5NmExMzcsIDB4MDUwNTBmMGEsIDB4OWE5YWI1MmYsIDB4MDcwNzA5MGUsIDB4MTIxMjM2MjQsIDB4ODA4MDliMWIsIDB4ZTJlMjNkZGYsIDB4ZWJlYjI2Y2QsIDB4MjcyNzY5NGUsIDB4YjJiMmNkN2YsIDB4NzU3NTlmZWEsIDB4MDkwOTFiMTIsIDB4ODM4MzllMWQsIDB4MmMyYzc0NTgsIDB4MWExYTJlMzQsIDB4MWIxYjJkMzYsIDB4NmU2ZWIyZGMsIDB4NWE1YWVlYjQsIDB4YTBhMGZiNWIsIDB4NTI1MmY2YTQsIDB4M2IzYjRkNzYsIDB4ZDZkNjYxYjcsIDB4YjNiM2NlN2QsIDB4MjkyOTdiNTIsIDB4ZTNlMzNlZGQsIDB4MmYyZjcxNWUsIDB4ODQ4NDk3MTMsIDB4NTM1M2Y1YTYsIDB4ZDFkMTY4YjksIDB4MDAwMDAwMDAsIDB4ZWRlZDJjYzEsIDB4MjAyMDYwNDAsIDB4ZmNmYzFmZTMsIDB4YjFiMWM4NzksIDB4NWI1YmVkYjYsIDB4NmE2YWJlZDQsIDB4Y2JjYjQ2OGQsIDB4YmViZWQ5NjcsIDB4MzkzOTRiNzIsIDB4NGE0YWRlOTQsIDB4NGM0Y2Q0OTgsIDB4NTg1OGU4YjAsIDB4Y2ZjZjRhODUsIDB4ZDBkMDZiYmIsIDB4ZWZlZjJhYzUsIDB4YWFhYWU1NGYsIDB4ZmJmYjE2ZWQsIDB4NDM0M2M1ODYsIDB4NGQ0ZGQ3OWEsIDB4MzMzMzU1NjYsIDB4ODU4NTk0MTEsIDB4NDU0NWNmOGEsIDB4ZjlmOTEwZTksIDB4MDIwMjA2MDQsIDB4N2Y3ZjgxZmUsIDB4NTA1MGYwYTAsIDB4M2MzYzQ0NzgsIDB4OWY5ZmJhMjUsIDB4YThhOGUzNGIsIDB4NTE1MWYzYTIsIDB4YTNhM2ZlNWQsIDB4NDA0MGMwODAsIDB4OGY4ZjhhMDUsIDB4OTI5MmFkM2YsIDB4OWQ5ZGJjMjEsIDB4MzgzODQ4NzAsIDB4ZjVmNTA0ZjEsIDB4YmNiY2RmNjMsIDB4YjZiNmMxNzcsIDB4ZGFkYTc1YWYsIDB4MjEyMTYzNDIsIDB4MTAxMDMwMjAsIDB4ZmZmZjFhZTUsIDB4ZjNmMzBlZmQsIDB4ZDJkMjZkYmYsIDB4Y2RjZDRjODEsIDB4MGMwYzE0MTgsIDB4MTMxMzM1MjYsIDB4ZWNlYzJmYzMsIDB4NWY1ZmUxYmUsIDB4OTc5N2EyMzUsIDB4NDQ0NGNjODgsIDB4MTcxNzM5MmUsIDB4YzRjNDU3OTMsIDB4YTdhN2YyNTUsIDB4N2U3ZTgyZmMsIDB4M2QzZDQ3N2EsIDB4NjQ2NGFjYzgsIDB4NWQ1ZGU3YmEsIDB4MTkxOTJiMzIsIDB4NzM3Mzk1ZTYsIDB4NjA2MGEwYzAsIDB4ODE4MTk4MTksIDB4NGY0ZmQxOWUsIDB4ZGNkYzdmYTMsIDB4MjIyMjY2NDQsIDB4MmEyYTdlNTQsIDB4OTA5MGFiM2IsIDB4ODg4ODgzMGIsIDB4NDY0NmNhOGMsIDB4ZWVlZTI5YzcsIDB4YjhiOGQzNmIsIDB4MTQxNDNjMjgsIDB4ZGVkZTc5YTcsIDB4NWU1ZWUyYmMsIDB4MGIwYjFkMTYsIDB4ZGJkYjc2YWQsIDB4ZTBlMDNiZGIsIDB4MzIzMjU2NjQsIDB4M2EzYTRlNzQsIDB4MGEwYTFlMTQsIDB4NDk0OWRiOTIsIDB4MDYwNjBhMGMsIDB4MjQyNDZjNDgsIDB4NWM1Y2U0YjgsIDB4YzJjMjVkOWYsIDB4ZDNkMzZlYmQsIDB4YWNhY2VmNDMsIDB4NjI2MmE2YzQsIDB4OTE5MWE4MzksIDB4OTU5NWE0MzEsIDB4ZTRlNDM3ZDMsIDB4Nzk3OThiZjIsIDB4ZTdlNzMyZDUsIDB4YzhjODQzOGIsIDB4MzczNzU5NmUsIDB4NmQ2ZGI3ZGEsIDB4OGQ4ZDhjMDEsIDB4ZDVkNTY0YjEsIDB4NGU0ZWQyOWMsIDB4YTlhOWUwNDksIDB4NmM2Y2I0ZDgsIDB4NTY1NmZhYWMsIDB4ZjRmNDA3ZjMsIDB4ZWFlYTI1Y2YsIDB4NjU2NWFmY2EsIDB4N2E3YThlZjQsIDB4YWVhZWU5NDcsIDB4MDgwODE4MTAsIDB4YmFiYWQ1NmYsIDB4Nzg3ODg4ZjAsIDB4MjUyNTZmNGEsIDB4MmUyZTcyNWMsIDB4MWMxYzI0MzgsIDB4YTZhNmYxNTcsIDB4YjRiNGM3NzMsIDB4YzZjNjUxOTcsIDB4ZThlODIzY2IsIDB4ZGRkZDdjYTEsIDB4NzQ3NDljZTgsIDB4MWYxZjIxM2UsIDB4NGI0YmRkOTYsIDB4YmRiZGRjNjEsIDB4OGI4Yjg2MGQsIDB4OGE4YTg1MGYsIDB4NzA3MDkwZTAsIDB4M2UzZTQyN2MsIDB4YjViNWM0NzEsIDB4NjY2NmFhY2MsIDB4NDg0OGQ4OTAsIDB4MDMwMzA1MDYsIDB4ZjZmNjAxZjcsIDB4MGUwZTEyMWMsIDB4NjE2MWEzYzIsIDB4MzUzNTVmNmEsIDB4NTc1N2Y5YWUsIDB4YjliOWQwNjksIDB4ODY4NjkxMTcsIDB4YzFjMTU4OTksIDB4MWQxZDI3M2EsIDB4OWU5ZWI5MjcsIDB4ZTFlMTM4ZDksIDB4ZjhmODEzZWIsIDB4OTg5OGIzMmIsIDB4MTExMTMzMjIsIDB4Njk2OWJiZDIsIDB4ZDlkOTcwYTksIDB4OGU4ZTg5MDcsIDB4OTQ5NGE3MzMsIDB4OWI5YmI2MmQsIDB4MWUxZTIyM2MsIDB4ODc4NzkyMTUsIDB4ZTllOTIwYzksIDB4Y2VjZTQ5ODcsIDB4NTU1NWZmYWEsIDB4MjgyODc4NTAsIDB4ZGZkZjdhYTUsIDB4OGM4YzhmMDMsIDB4YTFhMWY4NTksIDB4ODk4OTgwMDksIDB4MGQwZDE3MWEsIDB4YmZiZmRhNjUsIDB4ZTZlNjMxZDcsIDB4NDI0MmM2ODQsIDB4Njg2OGI4ZDAsIDB4NDE0MWMzODIsIDB4OTk5OWIwMjksIDB4MmQyZDc3NWEsIDB4MGYwZjExMWUsIDB4YjBiMGNiN2IsIDB4NTQ1NGZjYTgsIDB4YmJiYmQ2NmQsIDB4MTYxNjNhMmNdO1xuXG4gICAgLy8gVHJhbnNmb3JtYXRpb25zIGZvciBkZWNyeXB0aW9uXG4gICAgdmFyIFQ1ID0gWzB4NTFmNGE3NTAsIDB4N2U0MTY1NTMsIDB4MWExN2E0YzMsIDB4M2EyNzVlOTYsIDB4M2JhYjZiY2IsIDB4MWY5ZDQ1ZjEsIDB4YWNmYTU4YWIsIDB4NGJlMzAzOTMsIDB4MjAzMGZhNTUsIDB4YWQ3NjZkZjYsIDB4ODhjYzc2OTEsIDB4ZjUwMjRjMjUsIDB4NGZlNWQ3ZmMsIDB4YzUyYWNiZDcsIDB4MjYzNTQ0ODAsIDB4YjU2MmEzOGYsIDB4ZGViMTVhNDksIDB4MjViYTFiNjcsIDB4NDVlYTBlOTgsIDB4NWRmZWMwZTEsIDB4YzMyZjc1MDIsIDB4ODE0Y2YwMTIsIDB4OGQ0Njk3YTMsIDB4NmJkM2Y5YzYsIDB4MDM4ZjVmZTcsIDB4MTU5MjljOTUsIDB4YmY2ZDdhZWIsIDB4OTU1MjU5ZGEsIDB4ZDRiZTgzMmQsIDB4NTg3NDIxZDMsIDB4NDllMDY5MjksIDB4OGVjOWM4NDQsIDB4NzVjMjg5NmEsIDB4ZjQ4ZTc5NzgsIDB4OTk1ODNlNmIsIDB4MjdiOTcxZGQsIDB4YmVlMTRmYjYsIDB4ZjA4OGFkMTcsIDB4YzkyMGFjNjYsIDB4N2RjZTNhYjQsIDB4NjNkZjRhMTgsIDB4ZTUxYTMxODIsIDB4OTc1MTMzNjAsIDB4NjI1MzdmNDUsIDB4YjE2NDc3ZTAsIDB4YmI2YmFlODQsIDB4ZmU4MWEwMWMsIDB4ZjkwODJiOTQsIDB4NzA0ODY4NTgsIDB4OGY0NWZkMTksIDB4OTRkZTZjODcsIDB4NTI3YmY4YjcsIDB4YWI3M2QzMjMsIDB4NzI0YjAyZTIsIDB4ZTMxZjhmNTcsIDB4NjY1NWFiMmEsIDB4YjJlYjI4MDcsIDB4MmZiNWMyMDMsIDB4ODZjNTdiOWEsIDB4ZDMzNzA4YTUsIDB4MzAyODg3ZjIsIDB4MjNiZmE1YjIsIDB4MDIwMzZhYmEsIDB4ZWQxNjgyNWMsIDB4OGFjZjFjMmIsIDB4YTc3OWI0OTIsIDB4ZjMwN2YyZjAsIDB4NGU2OWUyYTEsIDB4NjVkYWY0Y2QsIDB4MDYwNWJlZDUsIDB4ZDEzNDYyMWYsIDB4YzRhNmZlOGEsIDB4MzQyZTUzOWQsIDB4YTJmMzU1YTAsIDB4MDU4YWUxMzIsIDB4YTRmNmViNzUsIDB4MGI4M2VjMzksIDB4NDA2MGVmYWEsIDB4NWU3MTlmMDYsIDB4YmQ2ZTEwNTEsIDB4M2UyMThhZjksIDB4OTZkZDA2M2QsIDB4ZGQzZTA1YWUsIDB4NGRlNmJkNDYsIDB4OTE1NDhkYjUsIDB4NzFjNDVkMDUsIDB4MDQwNmQ0NmYsIDB4NjA1MDE1ZmYsIDB4MTk5OGZiMjQsIDB4ZDZiZGU5OTcsIDB4ODk0MDQzY2MsIDB4NjdkOTllNzcsIDB4YjBlODQyYmQsIDB4MDc4OThiODgsIDB4ZTcxOTViMzgsIDB4NzljOGVlZGIsIDB4YTE3YzBhNDcsIDB4N2M0MjBmZTksIDB4Zjg4NDFlYzksIDB4MDAwMDAwMDAsIDB4MDk4MDg2ODMsIDB4MzIyYmVkNDgsIDB4MWUxMTcwYWMsIDB4NmM1YTcyNGUsIDB4ZmQwZWZmZmIsIDB4MGY4NTM4NTYsIDB4M2RhZWQ1MWUsIDB4MzYyZDM5MjcsIDB4MGEwZmQ5NjQsIDB4Njg1Y2E2MjEsIDB4OWI1YjU0ZDEsIDB4MjQzNjJlM2EsIDB4MGMwYTY3YjEsIDB4OTM1N2U3MGYsIDB4YjRlZTk2ZDIsIDB4MWI5YjkxOWUsIDB4ODBjMGM1NGYsIDB4NjFkYzIwYTIsIDB4NWE3NzRiNjksIDB4MWMxMjFhMTYsIDB4ZTI5M2JhMGEsIDB4YzBhMDJhZTUsIDB4M2MyMmUwNDMsIDB4MTIxYjE3MWQsIDB4MGUwOTBkMGIsIDB4ZjI4YmM3YWQsIDB4MmRiNmE4YjksIDB4MTQxZWE5YzgsIDB4NTdmMTE5ODUsIDB4YWY3NTA3NGMsIDB4ZWU5OWRkYmIsIDB4YTM3ZjYwZmQsIDB4ZjcwMTI2OWYsIDB4NWM3MmY1YmMsIDB4NDQ2NjNiYzUsIDB4NWJmYjdlMzQsIDB4OGI0MzI5NzYsIDB4Y2IyM2M2ZGMsIDB4YjZlZGZjNjgsIDB4YjhlNGYxNjMsIDB4ZDczMWRjY2EsIDB4NDI2Mzg1MTAsIDB4MTM5NzIyNDAsIDB4ODRjNjExMjAsIDB4ODU0YTI0N2QsIDB4ZDJiYjNkZjgsIDB4YWVmOTMyMTEsIDB4YzcyOWExNmQsIDB4MWQ5ZTJmNGIsIDB4ZGNiMjMwZjMsIDB4MGQ4NjUyZWMsIDB4NzdjMWUzZDAsIDB4MmJiMzE2NmMsIDB4YTk3MGI5OTksIDB4MTE5NDQ4ZmEsIDB4NDdlOTY0MjIsIDB4YThmYzhjYzQsIDB4YTBmMDNmMWEsIDB4NTY3ZDJjZDgsIDB4MjIzMzkwZWYsIDB4ODc0OTRlYzcsIDB4ZDkzOGQxYzEsIDB4OGNjYWEyZmUsIDB4OThkNDBiMzYsIDB4YTZmNTgxY2YsIDB4YTU3YWRlMjgsIDB4ZGFiNzhlMjYsIDB4M2ZhZGJmYTQsIDB4MmMzYTlkZTQsIDB4NTA3ODkyMGQsIDB4NmE1ZmNjOWIsIDB4NTQ3ZTQ2NjIsIDB4ZjY4ZDEzYzIsIDB4OTBkOGI4ZTgsIDB4MmUzOWY3NWUsIDB4ODJjM2FmZjUsIDB4OWY1ZDgwYmUsIDB4NjlkMDkzN2MsIDB4NmZkNTJkYTksIDB4Y2YyNTEyYjMsIDB4YzhhYzk5M2IsIDB4MTAxODdkYTcsIDB4ZTg5YzYzNmUsIDB4ZGIzYmJiN2IsIDB4Y2QyNjc4MDksIDB4NmU1OTE4ZjQsIDB4ZWM5YWI3MDEsIDB4ODM0ZjlhYTgsIDB4ZTY5NTZlNjUsIDB4YWFmZmU2N2UsIDB4MjFiY2NmMDgsIDB4ZWYxNWU4ZTYsIDB4YmFlNzliZDksIDB4NGE2ZjM2Y2UsIDB4ZWE5ZjA5ZDQsIDB4MjliMDdjZDYsIDB4MzFhNGIyYWYsIDB4MmEzZjIzMzEsIDB4YzZhNTk0MzAsIDB4MzVhMjY2YzAsIDB4NzQ0ZWJjMzcsIDB4ZmM4MmNhYTYsIDB4ZTA5MGQwYjAsIDB4MzNhN2Q4MTUsIDB4ZjEwNDk4NGEsIDB4NDFlY2RhZjcsIDB4N2ZjZDUwMGUsIDB4MTc5MWY2MmYsIDB4NzY0ZGQ2OGQsIDB4NDNlZmIwNGQsIDB4Y2NhYTRkNTQsIDB4ZTQ5NjA0ZGYsIDB4OWVkMWI1ZTMsIDB4NGM2YTg4MWIsIDB4YzEyYzFmYjgsIDB4NDY2NTUxN2YsIDB4OWQ1ZWVhMDQsIDB4MDE4YzM1NWQsIDB4ZmE4Nzc0NzMsIDB4ZmIwYjQxMmUsIDB4YjM2NzFkNWEsIDB4OTJkYmQyNTIsIDB4ZTkxMDU2MzMsIDB4NmRkNjQ3MTMsIDB4OWFkNzYxOGMsIDB4MzdhMTBjN2EsIDB4NTlmODE0OGUsIDB4ZWIxMzNjODksIDB4Y2VhOTI3ZWUsIDB4Yjc2MWM5MzUsIDB4ZTExY2U1ZWQsIDB4N2E0N2IxM2MsIDB4OWNkMmRmNTksIDB4NTVmMjczM2YsIDB4MTgxNGNlNzksIDB4NzNjNzM3YmYsIDB4NTNmN2NkZWEsIDB4NWZmZGFhNWIsIDB4ZGYzZDZmMTQsIDB4Nzg0NGRiODYsIDB4Y2FhZmYzODEsIDB4Yjk2OGM0M2UsIDB4MzgyNDM0MmMsIDB4YzJhMzQwNWYsIDB4MTYxZGMzNzIsIDB4YmNlMjI1MGMsIDB4MjgzYzQ5OGIsIDB4ZmYwZDk1NDEsIDB4MzlhODAxNzEsIDB4MDgwY2IzZGUsIDB4ZDhiNGU0OWMsIDB4NjQ1NmMxOTAsIDB4N2JjYjg0NjEsIDB4ZDUzMmI2NzAsIDB4NDg2YzVjNzQsIDB4ZDBiODU3NDJdO1xuICAgIHZhciBUNiA9IFsweDUwNTFmNGE3LCAweDUzN2U0MTY1LCAweGMzMWExN2E0LCAweDk2M2EyNzVlLCAweGNiM2JhYjZiLCAweGYxMWY5ZDQ1LCAweGFiYWNmYTU4LCAweDkzNGJlMzAzLCAweDU1MjAzMGZhLCAweGY2YWQ3NjZkLCAweDkxODhjYzc2LCAweDI1ZjUwMjRjLCAweGZjNGZlNWQ3LCAweGQ3YzUyYWNiLCAweDgwMjYzNTQ0LCAweDhmYjU2MmEzLCAweDQ5ZGViMTVhLCAweDY3MjViYTFiLCAweDk4NDVlYTBlLCAweGUxNWRmZWMwLCAweDAyYzMyZjc1LCAweDEyODE0Y2YwLCAweGEzOGQ0Njk3LCAweGM2NmJkM2Y5LCAweGU3MDM4ZjVmLCAweDk1MTU5MjljLCAweGViYmY2ZDdhLCAweGRhOTU1MjU5LCAweDJkZDRiZTgzLCAweGQzNTg3NDIxLCAweDI5NDllMDY5LCAweDQ0OGVjOWM4LCAweDZhNzVjMjg5LCAweDc4ZjQ4ZTc5LCAweDZiOTk1ODNlLCAweGRkMjdiOTcxLCAweGI2YmVlMTRmLCAweDE3ZjA4OGFkLCAweDY2YzkyMGFjLCAweGI0N2RjZTNhLCAweDE4NjNkZjRhLCAweDgyZTUxYTMxLCAweDYwOTc1MTMzLCAweDQ1NjI1MzdmLCAweGUwYjE2NDc3LCAweDg0YmI2YmFlLCAweDFjZmU4MWEwLCAweDk0ZjkwODJiLCAweDU4NzA0ODY4LCAweDE5OGY0NWZkLCAweDg3OTRkZTZjLCAweGI3NTI3YmY4LCAweDIzYWI3M2QzLCAweGUyNzI0YjAyLCAweDU3ZTMxZjhmLCAweDJhNjY1NWFiLCAweDA3YjJlYjI4LCAweDAzMmZiNWMyLCAweDlhODZjNTdiLCAweGE1ZDMzNzA4LCAweGYyMzAyODg3LCAweGIyMjNiZmE1LCAweGJhMDIwMzZhLCAweDVjZWQxNjgyLCAweDJiOGFjZjFjLCAweDkyYTc3OWI0LCAweGYwZjMwN2YyLCAweGExNGU2OWUyLCAweGNkNjVkYWY0LCAweGQ1MDYwNWJlLCAweDFmZDEzNDYyLCAweDhhYzRhNmZlLCAweDlkMzQyZTUzLCAweGEwYTJmMzU1LCAweDMyMDU4YWUxLCAweDc1YTRmNmViLCAweDM5MGI4M2VjLCAweGFhNDA2MGVmLCAweDA2NWU3MTlmLCAweDUxYmQ2ZTEwLCAweGY5M2UyMThhLCAweDNkOTZkZDA2LCAweGFlZGQzZTA1LCAweDQ2NGRlNmJkLCAweGI1OTE1NDhkLCAweDA1NzFjNDVkLCAweDZmMDQwNmQ0LCAweGZmNjA1MDE1LCAweDI0MTk5OGZiLCAweDk3ZDZiZGU5LCAweGNjODk0MDQzLCAweDc3NjdkOTllLCAweGJkYjBlODQyLCAweDg4MDc4OThiLCAweDM4ZTcxOTViLCAweGRiNzljOGVlLCAweDQ3YTE3YzBhLCAweGU5N2M0MjBmLCAweGM5Zjg4NDFlLCAweDAwMDAwMDAwLCAweDgzMDk4MDg2LCAweDQ4MzIyYmVkLCAweGFjMWUxMTcwLCAweDRlNmM1YTcyLCAweGZiZmQwZWZmLCAweDU2MGY4NTM4LCAweDFlM2RhZWQ1LCAweDI3MzYyZDM5LCAweDY0MGEwZmQ5LCAweDIxNjg1Y2E2LCAweGQxOWI1YjU0LCAweDNhMjQzNjJlLCAweGIxMGMwYTY3LCAweDBmOTM1N2U3LCAweGQyYjRlZTk2LCAweDllMWI5YjkxLCAweDRmODBjMGM1LCAweGEyNjFkYzIwLCAweDY5NWE3NzRiLCAweDE2MWMxMjFhLCAweDBhZTI5M2JhLCAweGU1YzBhMDJhLCAweDQzM2MyMmUwLCAweDFkMTIxYjE3LCAweDBiMGUwOTBkLCAweGFkZjI4YmM3LCAweGI5MmRiNmE4LCAweGM4MTQxZWE5LCAweDg1NTdmMTE5LCAweDRjYWY3NTA3LCAweGJiZWU5OWRkLCAweGZkYTM3ZjYwLCAweDlmZjcwMTI2LCAweGJjNWM3MmY1LCAweGM1NDQ2NjNiLCAweDM0NWJmYjdlLCAweDc2OGI0MzI5LCAweGRjY2IyM2M2LCAweDY4YjZlZGZjLCAweDYzYjhlNGYxLCAweGNhZDczMWRjLCAweDEwNDI2Mzg1LCAweDQwMTM5NzIyLCAweDIwODRjNjExLCAweDdkODU0YTI0LCAweGY4ZDJiYjNkLCAweDExYWVmOTMyLCAweDZkYzcyOWExLCAweDRiMWQ5ZTJmLCAweGYzZGNiMjMwLCAweGVjMGQ4NjUyLCAweGQwNzdjMWUzLCAweDZjMmJiMzE2LCAweDk5YTk3MGI5LCAweGZhMTE5NDQ4LCAweDIyNDdlOTY0LCAweGM0YThmYzhjLCAweDFhYTBmMDNmLCAweGQ4NTY3ZDJjLCAweGVmMjIzMzkwLCAweGM3ODc0OTRlLCAweGMxZDkzOGQxLCAweGZlOGNjYWEyLCAweDM2OThkNDBiLCAweGNmYTZmNTgxLCAweDI4YTU3YWRlLCAweDI2ZGFiNzhlLCAweGE0M2ZhZGJmLCAweGU0MmMzYTlkLCAweDBkNTA3ODkyLCAweDliNmE1ZmNjLCAweDYyNTQ3ZTQ2LCAweGMyZjY4ZDEzLCAweGU4OTBkOGI4LCAweDVlMmUzOWY3LCAweGY1ODJjM2FmLCAweGJlOWY1ZDgwLCAweDdjNjlkMDkzLCAweGE5NmZkNTJkLCAweGIzY2YyNTEyLCAweDNiYzhhYzk5LCAweGE3MTAxODdkLCAweDZlZTg5YzYzLCAweDdiZGIzYmJiLCAweDA5Y2QyNjc4LCAweGY0NmU1OTE4LCAweDAxZWM5YWI3LCAweGE4ODM0ZjlhLCAweDY1ZTY5NTZlLCAweDdlYWFmZmU2LCAweDA4MjFiY2NmLCAweGU2ZWYxNWU4LCAweGQ5YmFlNzliLCAweGNlNGE2ZjM2LCAweGQ0ZWE5ZjA5LCAweGQ2MjliMDdjLCAweGFmMzFhNGIyLCAweDMxMmEzZjIzLCAweDMwYzZhNTk0LCAweGMwMzVhMjY2LCAweDM3NzQ0ZWJjLCAweGE2ZmM4MmNhLCAweGIwZTA5MGQwLCAweDE1MzNhN2Q4LCAweDRhZjEwNDk4LCAweGY3NDFlY2RhLCAweDBlN2ZjZDUwLCAweDJmMTc5MWY2LCAweDhkNzY0ZGQ2LCAweDRkNDNlZmIwLCAweDU0Y2NhYTRkLCAweGRmZTQ5NjA0LCAweGUzOWVkMWI1LCAweDFiNGM2YTg4LCAweGI4YzEyYzFmLCAweDdmNDY2NTUxLCAweDA0OWQ1ZWVhLCAweDVkMDE4YzM1LCAweDczZmE4Nzc0LCAweDJlZmIwYjQxLCAweDVhYjM2NzFkLCAweDUyOTJkYmQyLCAweDMzZTkxMDU2LCAweDEzNmRkNjQ3LCAweDhjOWFkNzYxLCAweDdhMzdhMTBjLCAweDhlNTlmODE0LCAweDg5ZWIxMzNjLCAweGVlY2VhOTI3LCAweDM1Yjc2MWM5LCAweGVkZTExY2U1LCAweDNjN2E0N2IxLCAweDU5OWNkMmRmLCAweDNmNTVmMjczLCAweDc5MTgxNGNlLCAweGJmNzNjNzM3LCAweGVhNTNmN2NkLCAweDViNWZmZGFhLCAweDE0ZGYzZDZmLCAweDg2Nzg0NGRiLCAweDgxY2FhZmYzLCAweDNlYjk2OGM0LCAweDJjMzgyNDM0LCAweDVmYzJhMzQwLCAweDcyMTYxZGMzLCAweDBjYmNlMjI1LCAweDhiMjgzYzQ5LCAweDQxZmYwZDk1LCAweDcxMzlhODAxLCAweGRlMDgwY2IzLCAweDljZDhiNGU0LCAweDkwNjQ1NmMxLCAweDYxN2JjYjg0LCAweDcwZDUzMmI2LCAweDc0NDg2YzVjLCAweDQyZDBiODU3XTtcbiAgICB2YXIgVDcgPSBbMHhhNzUwNTFmNCwgMHg2NTUzN2U0MSwgMHhhNGMzMWExNywgMHg1ZTk2M2EyNywgMHg2YmNiM2JhYiwgMHg0NWYxMWY5ZCwgMHg1OGFiYWNmYSwgMHgwMzkzNGJlMywgMHhmYTU1MjAzMCwgMHg2ZGY2YWQ3NiwgMHg3NjkxODhjYywgMHg0YzI1ZjUwMiwgMHhkN2ZjNGZlNSwgMHhjYmQ3YzUyYSwgMHg0NDgwMjYzNSwgMHhhMzhmYjU2MiwgMHg1YTQ5ZGViMSwgMHgxYjY3MjViYSwgMHgwZTk4NDVlYSwgMHhjMGUxNWRmZSwgMHg3NTAyYzMyZiwgMHhmMDEyODE0YywgMHg5N2EzOGQ0NiwgMHhmOWM2NmJkMywgMHg1ZmU3MDM4ZiwgMHg5Yzk1MTU5MiwgMHg3YWViYmY2ZCwgMHg1OWRhOTU1MiwgMHg4MzJkZDRiZSwgMHgyMWQzNTg3NCwgMHg2OTI5NDllMCwgMHhjODQ0OGVjOSwgMHg4OTZhNzVjMiwgMHg3OTc4ZjQ4ZSwgMHgzZTZiOTk1OCwgMHg3MWRkMjdiOSwgMHg0ZmI2YmVlMSwgMHhhZDE3ZjA4OCwgMHhhYzY2YzkyMCwgMHgzYWI0N2RjZSwgMHg0YTE4NjNkZiwgMHgzMTgyZTUxYSwgMHgzMzYwOTc1MSwgMHg3ZjQ1NjI1MywgMHg3N2UwYjE2NCwgMHhhZTg0YmI2YiwgMHhhMDFjZmU4MSwgMHgyYjk0ZjkwOCwgMHg2ODU4NzA0OCwgMHhmZDE5OGY0NSwgMHg2Yzg3OTRkZSwgMHhmOGI3NTI3YiwgMHhkMzIzYWI3MywgMHgwMmUyNzI0YiwgMHg4ZjU3ZTMxZiwgMHhhYjJhNjY1NSwgMHgyODA3YjJlYiwgMHhjMjAzMmZiNSwgMHg3YjlhODZjNSwgMHgwOGE1ZDMzNywgMHg4N2YyMzAyOCwgMHhhNWIyMjNiZiwgMHg2YWJhMDIwMywgMHg4MjVjZWQxNiwgMHgxYzJiOGFjZiwgMHhiNDkyYTc3OSwgMHhmMmYwZjMwNywgMHhlMmExNGU2OSwgMHhmNGNkNjVkYSwgMHhiZWQ1MDYwNSwgMHg2MjFmZDEzNCwgMHhmZThhYzRhNiwgMHg1MzlkMzQyZSwgMHg1NWEwYTJmMywgMHhlMTMyMDU4YSwgMHhlYjc1YTRmNiwgMHhlYzM5MGI4MywgMHhlZmFhNDA2MCwgMHg5ZjA2NWU3MSwgMHgxMDUxYmQ2ZSwgMHg4YWY5M2UyMSwgMHgwNjNkOTZkZCwgMHgwNWFlZGQzZSwgMHhiZDQ2NGRlNiwgMHg4ZGI1OTE1NCwgMHg1ZDA1NzFjNCwgMHhkNDZmMDQwNiwgMHgxNWZmNjA1MCwgMHhmYjI0MTk5OCwgMHhlOTk3ZDZiZCwgMHg0M2NjODk0MCwgMHg5ZTc3NjdkOSwgMHg0MmJkYjBlOCwgMHg4Yjg4MDc4OSwgMHg1YjM4ZTcxOSwgMHhlZWRiNzljOCwgMHgwYTQ3YTE3YywgMHgwZmU5N2M0MiwgMHgxZWM5Zjg4NCwgMHgwMDAwMDAwMCwgMHg4NjgzMDk4MCwgMHhlZDQ4MzIyYiwgMHg3MGFjMWUxMSwgMHg3MjRlNmM1YSwgMHhmZmZiZmQwZSwgMHgzODU2MGY4NSwgMHhkNTFlM2RhZSwgMHgzOTI3MzYyZCwgMHhkOTY0MGEwZiwgMHhhNjIxNjg1YywgMHg1NGQxOWI1YiwgMHgyZTNhMjQzNiwgMHg2N2IxMGMwYSwgMHhlNzBmOTM1NywgMHg5NmQyYjRlZSwgMHg5MTllMWI5YiwgMHhjNTRmODBjMCwgMHgyMGEyNjFkYywgMHg0YjY5NWE3NywgMHgxYTE2MWMxMiwgMHhiYTBhZTI5MywgMHgyYWU1YzBhMCwgMHhlMDQzM2MyMiwgMHgxNzFkMTIxYiwgMHgwZDBiMGUwOSwgMHhjN2FkZjI4YiwgMHhhOGI5MmRiNiwgMHhhOWM4MTQxZSwgMHgxOTg1NTdmMSwgMHgwNzRjYWY3NSwgMHhkZGJiZWU5OSwgMHg2MGZkYTM3ZiwgMHgyNjlmZjcwMSwgMHhmNWJjNWM3MiwgMHgzYmM1NDQ2NiwgMHg3ZTM0NWJmYiwgMHgyOTc2OGI0MywgMHhjNmRjY2IyMywgMHhmYzY4YjZlZCwgMHhmMTYzYjhlNCwgMHhkY2NhZDczMSwgMHg4NTEwNDI2MywgMHgyMjQwMTM5NywgMHgxMTIwODRjNiwgMHgyNDdkODU0YSwgMHgzZGY4ZDJiYiwgMHgzMjExYWVmOSwgMHhhMTZkYzcyOSwgMHgyZjRiMWQ5ZSwgMHgzMGYzZGNiMiwgMHg1MmVjMGQ4NiwgMHhlM2QwNzdjMSwgMHgxNjZjMmJiMywgMHhiOTk5YTk3MCwgMHg0OGZhMTE5NCwgMHg2NDIyNDdlOSwgMHg4Y2M0YThmYywgMHgzZjFhYTBmMCwgMHgyY2Q4NTY3ZCwgMHg5MGVmMjIzMywgMHg0ZWM3ODc0OSwgMHhkMWMxZDkzOCwgMHhhMmZlOGNjYSwgMHgwYjM2OThkNCwgMHg4MWNmYTZmNSwgMHhkZTI4YTU3YSwgMHg4ZTI2ZGFiNywgMHhiZmE0M2ZhZCwgMHg5ZGU0MmMzYSwgMHg5MjBkNTA3OCwgMHhjYzliNmE1ZiwgMHg0NjYyNTQ3ZSwgMHgxM2MyZjY4ZCwgMHhiOGU4OTBkOCwgMHhmNzVlMmUzOSwgMHhhZmY1ODJjMywgMHg4MGJlOWY1ZCwgMHg5MzdjNjlkMCwgMHgyZGE5NmZkNSwgMHgxMmIzY2YyNSwgMHg5OTNiYzhhYywgMHg3ZGE3MTAxOCwgMHg2MzZlZTg5YywgMHhiYjdiZGIzYiwgMHg3ODA5Y2QyNiwgMHgxOGY0NmU1OSwgMHhiNzAxZWM5YSwgMHg5YWE4ODM0ZiwgMHg2ZTY1ZTY5NSwgMHhlNjdlYWFmZiwgMHhjZjA4MjFiYywgMHhlOGU2ZWYxNSwgMHg5YmQ5YmFlNywgMHgzNmNlNGE2ZiwgMHgwOWQ0ZWE5ZiwgMHg3Y2Q2MjliMCwgMHhiMmFmMzFhNCwgMHgyMzMxMmEzZiwgMHg5NDMwYzZhNSwgMHg2NmMwMzVhMiwgMHhiYzM3NzQ0ZSwgMHhjYWE2ZmM4MiwgMHhkMGIwZTA5MCwgMHhkODE1MzNhNywgMHg5ODRhZjEwNCwgMHhkYWY3NDFlYywgMHg1MDBlN2ZjZCwgMHhmNjJmMTc5MSwgMHhkNjhkNzY0ZCwgMHhiMDRkNDNlZiwgMHg0ZDU0Y2NhYSwgMHgwNGRmZTQ5NiwgMHhiNWUzOWVkMSwgMHg4ODFiNGM2YSwgMHgxZmI4YzEyYywgMHg1MTdmNDY2NSwgMHhlYTA0OWQ1ZSwgMHgzNTVkMDE4YywgMHg3NDczZmE4NywgMHg0MTJlZmIwYiwgMHgxZDVhYjM2NywgMHhkMjUyOTJkYiwgMHg1NjMzZTkxMCwgMHg0NzEzNmRkNiwgMHg2MThjOWFkNywgMHgwYzdhMzdhMSwgMHgxNDhlNTlmOCwgMHgzYzg5ZWIxMywgMHgyN2VlY2VhOSwgMHhjOTM1Yjc2MSwgMHhlNWVkZTExYywgMHhiMTNjN2E0NywgMHhkZjU5OWNkMiwgMHg3MzNmNTVmMiwgMHhjZTc5MTgxNCwgMHgzN2JmNzNjNywgMHhjZGVhNTNmNywgMHhhYTViNWZmZCwgMHg2ZjE0ZGYzZCwgMHhkYjg2Nzg0NCwgMHhmMzgxY2FhZiwgMHhjNDNlYjk2OCwgMHgzNDJjMzgyNCwgMHg0MDVmYzJhMywgMHhjMzcyMTYxZCwgMHgyNTBjYmNlMiwgMHg0OThiMjgzYywgMHg5NTQxZmYwZCwgMHgwMTcxMzlhOCwgMHhiM2RlMDgwYywgMHhlNDljZDhiNCwgMHhjMTkwNjQ1NiwgMHg4NDYxN2JjYiwgMHhiNjcwZDUzMiwgMHg1Yzc0NDg2YywgMHg1NzQyZDBiOF07XG4gICAgdmFyIFQ4ID0gWzB4ZjRhNzUwNTEsIDB4NDE2NTUzN2UsIDB4MTdhNGMzMWEsIDB4Mjc1ZTk2M2EsIDB4YWI2YmNiM2IsIDB4OWQ0NWYxMWYsIDB4ZmE1OGFiYWMsIDB4ZTMwMzkzNGIsIDB4MzBmYTU1MjAsIDB4NzY2ZGY2YWQsIDB4Y2M3NjkxODgsIDB4MDI0YzI1ZjUsIDB4ZTVkN2ZjNGYsIDB4MmFjYmQ3YzUsIDB4MzU0NDgwMjYsIDB4NjJhMzhmYjUsIDB4YjE1YTQ5ZGUsIDB4YmExYjY3MjUsIDB4ZWEwZTk4NDUsIDB4ZmVjMGUxNWQsIDB4MmY3NTAyYzMsIDB4NGNmMDEyODEsIDB4NDY5N2EzOGQsIDB4ZDNmOWM2NmIsIDB4OGY1ZmU3MDMsIDB4OTI5Yzk1MTUsIDB4NmQ3YWViYmYsIDB4NTI1OWRhOTUsIDB4YmU4MzJkZDQsIDB4NzQyMWQzNTgsIDB4ZTA2OTI5NDksIDB4YzljODQ0OGUsIDB4YzI4OTZhNzUsIDB4OGU3OTc4ZjQsIDB4NTgzZTZiOTksIDB4Yjk3MWRkMjcsIDB4ZTE0ZmI2YmUsIDB4ODhhZDE3ZjAsIDB4MjBhYzY2YzksIDB4Y2UzYWI0N2QsIDB4ZGY0YTE4NjMsIDB4MWEzMTgyZTUsIDB4NTEzMzYwOTcsIDB4NTM3ZjQ1NjIsIDB4NjQ3N2UwYjEsIDB4NmJhZTg0YmIsIDB4ODFhMDFjZmUsIDB4MDgyYjk0ZjksIDB4NDg2ODU4NzAsIDB4NDVmZDE5OGYsIDB4ZGU2Yzg3OTQsIDB4N2JmOGI3NTIsIDB4NzNkMzIzYWIsIDB4NGIwMmUyNzIsIDB4MWY4ZjU3ZTMsIDB4NTVhYjJhNjYsIDB4ZWIyODA3YjIsIDB4YjVjMjAzMmYsIDB4YzU3YjlhODYsIDB4MzcwOGE1ZDMsIDB4Mjg4N2YyMzAsIDB4YmZhNWIyMjMsIDB4MDM2YWJhMDIsIDB4MTY4MjVjZWQsIDB4Y2YxYzJiOGEsIDB4NzliNDkyYTcsIDB4MDdmMmYwZjMsIDB4NjllMmExNGUsIDB4ZGFmNGNkNjUsIDB4MDViZWQ1MDYsIDB4MzQ2MjFmZDEsIDB4YTZmZThhYzQsIDB4MmU1MzlkMzQsIDB4ZjM1NWEwYTIsIDB4OGFlMTMyMDUsIDB4ZjZlYjc1YTQsIDB4ODNlYzM5MGIsIDB4NjBlZmFhNDAsIDB4NzE5ZjA2NWUsIDB4NmUxMDUxYmQsIDB4MjE4YWY5M2UsIDB4ZGQwNjNkOTYsIDB4M2UwNWFlZGQsIDB4ZTZiZDQ2NGQsIDB4NTQ4ZGI1OTEsIDB4YzQ1ZDA1NzEsIDB4MDZkNDZmMDQsIDB4NTAxNWZmNjAsIDB4OThmYjI0MTksIDB4YmRlOTk3ZDYsIDB4NDA0M2NjODksIDB4ZDk5ZTc3NjcsIDB4ZTg0MmJkYjAsIDB4ODk4Yjg4MDcsIDB4MTk1YjM4ZTcsIDB4YzhlZWRiNzksIDB4N2MwYTQ3YTEsIDB4NDIwZmU5N2MsIDB4ODQxZWM5ZjgsIDB4MDAwMDAwMDAsIDB4ODA4NjgzMDksIDB4MmJlZDQ4MzIsIDB4MTE3MGFjMWUsIDB4NWE3MjRlNmMsIDB4MGVmZmZiZmQsIDB4ODUzODU2MGYsIDB4YWVkNTFlM2QsIDB4MmQzOTI3MzYsIDB4MGZkOTY0MGEsIDB4NWNhNjIxNjgsIDB4NWI1NGQxOWIsIDB4MzYyZTNhMjQsIDB4MGE2N2IxMGMsIDB4NTdlNzBmOTMsIDB4ZWU5NmQyYjQsIDB4OWI5MTllMWIsIDB4YzBjNTRmODAsIDB4ZGMyMGEyNjEsIDB4Nzc0YjY5NWEsIDB4MTIxYTE2MWMsIDB4OTNiYTBhZTIsIDB4YTAyYWU1YzAsIDB4MjJlMDQzM2MsIDB4MWIxNzFkMTIsIDB4MDkwZDBiMGUsIDB4OGJjN2FkZjIsIDB4YjZhOGI5MmQsIDB4MWVhOWM4MTQsIDB4ZjExOTg1NTcsIDB4NzUwNzRjYWYsIDB4OTlkZGJiZWUsIDB4N2Y2MGZkYTMsIDB4MDEyNjlmZjcsIDB4NzJmNWJjNWMsIDB4NjYzYmM1NDQsIDB4ZmI3ZTM0NWIsIDB4NDMyOTc2OGIsIDB4MjNjNmRjY2IsIDB4ZWRmYzY4YjYsIDB4ZTRmMTYzYjgsIDB4MzFkY2NhZDcsIDB4NjM4NTEwNDIsIDB4OTcyMjQwMTMsIDB4YzYxMTIwODQsIDB4NGEyNDdkODUsIDB4YmIzZGY4ZDIsIDB4ZjkzMjExYWUsIDB4MjlhMTZkYzcsIDB4OWUyZjRiMWQsIDB4YjIzMGYzZGMsIDB4ODY1MmVjMGQsIDB4YzFlM2QwNzcsIDB4YjMxNjZjMmIsIDB4NzBiOTk5YTksIDB4OTQ0OGZhMTEsIDB4ZTk2NDIyNDcsIDB4ZmM4Y2M0YTgsIDB4ZjAzZjFhYTAsIDB4N2QyY2Q4NTYsIDB4MzM5MGVmMjIsIDB4NDk0ZWM3ODcsIDB4MzhkMWMxZDksIDB4Y2FhMmZlOGMsIDB4ZDQwYjM2OTgsIDB4ZjU4MWNmYTYsIDB4N2FkZTI4YTUsIDB4Yjc4ZTI2ZGEsIDB4YWRiZmE0M2YsIDB4M2E5ZGU0MmMsIDB4Nzg5MjBkNTAsIDB4NWZjYzliNmEsIDB4N2U0NjYyNTQsIDB4OGQxM2MyZjYsIDB4ZDhiOGU4OTAsIDB4MzlmNzVlMmUsIDB4YzNhZmY1ODIsIDB4NWQ4MGJlOWYsIDB4ZDA5MzdjNjksIDB4ZDUyZGE5NmYsIDB4MjUxMmIzY2YsIDB4YWM5OTNiYzgsIDB4MTg3ZGE3MTAsIDB4OWM2MzZlZTgsIDB4M2JiYjdiZGIsIDB4MjY3ODA5Y2QsIDB4NTkxOGY0NmUsIDB4OWFiNzAxZWMsIDB4NGY5YWE4ODMsIDB4OTU2ZTY1ZTYsIDB4ZmZlNjdlYWEsIDB4YmNjZjA4MjEsIDB4MTVlOGU2ZWYsIDB4ZTc5YmQ5YmEsIDB4NmYzNmNlNGEsIDB4OWYwOWQ0ZWEsIDB4YjA3Y2Q2MjksIDB4YTRiMmFmMzEsIDB4M2YyMzMxMmEsIDB4YTU5NDMwYzYsIDB4YTI2NmMwMzUsIDB4NGViYzM3NzQsIDB4ODJjYWE2ZmMsIDB4OTBkMGIwZTAsIDB4YTdkODE1MzMsIDB4MDQ5ODRhZjEsIDB4ZWNkYWY3NDEsIDB4Y2Q1MDBlN2YsIDB4OTFmNjJmMTcsIDB4NGRkNjhkNzYsIDB4ZWZiMDRkNDMsIDB4YWE0ZDU0Y2MsIDB4OTYwNGRmZTQsIDB4ZDFiNWUzOWUsIDB4NmE4ODFiNGMsIDB4MmMxZmI4YzEsIDB4NjU1MTdmNDYsIDB4NWVlYTA0OWQsIDB4OGMzNTVkMDEsIDB4ODc3NDczZmEsIDB4MGI0MTJlZmIsIDB4NjcxZDVhYjMsIDB4ZGJkMjUyOTIsIDB4MTA1NjMzZTksIDB4ZDY0NzEzNmQsIDB4ZDc2MThjOWEsIDB4YTEwYzdhMzcsIDB4ZjgxNDhlNTksIDB4MTMzYzg5ZWIsIDB4YTkyN2VlY2UsIDB4NjFjOTM1YjcsIDB4MWNlNWVkZTEsIDB4NDdiMTNjN2EsIDB4ZDJkZjU5OWMsIDB4ZjI3MzNmNTUsIDB4MTRjZTc5MTgsIDB4YzczN2JmNzMsIDB4ZjdjZGVhNTMsIDB4ZmRhYTViNWYsIDB4M2Q2ZjE0ZGYsIDB4NDRkYjg2NzgsIDB4YWZmMzgxY2EsIDB4NjhjNDNlYjksIDB4MjQzNDJjMzgsIDB4YTM0MDVmYzIsIDB4MWRjMzcyMTYsIDB4ZTIyNTBjYmMsIDB4M2M0OThiMjgsIDB4MGQ5NTQxZmYsIDB4YTgwMTcxMzksIDB4MGNiM2RlMDgsIDB4YjRlNDljZDgsIDB4NTZjMTkwNjQsIDB4Y2I4NDYxN2IsIDB4MzJiNjcwZDUsIDB4NmM1Yzc0NDgsIDB4Yjg1NzQyZDBdO1xuXG4gICAgLy8gVHJhbnNmb3JtYXRpb25zIGZvciBkZWNyeXB0aW9uIGtleSBleHBhbnNpb25cbiAgICB2YXIgVTEgPSBbMHgwMDAwMDAwMCwgMHgwZTA5MGQwYiwgMHgxYzEyMWExNiwgMHgxMjFiMTcxZCwgMHgzODI0MzQyYywgMHgzNjJkMzkyNywgMHgyNDM2MmUzYSwgMHgyYTNmMjMzMSwgMHg3MDQ4Njg1OCwgMHg3ZTQxNjU1MywgMHg2YzVhNzI0ZSwgMHg2MjUzN2Y0NSwgMHg0ODZjNWM3NCwgMHg0NjY1NTE3ZiwgMHg1NDdlNDY2MiwgMHg1YTc3NGI2OSwgMHhlMDkwZDBiMCwgMHhlZTk5ZGRiYiwgMHhmYzgyY2FhNiwgMHhmMjhiYzdhZCwgMHhkOGI0ZTQ5YywgMHhkNmJkZTk5NywgMHhjNGE2ZmU4YSwgMHhjYWFmZjM4MSwgMHg5MGQ4YjhlOCwgMHg5ZWQxYjVlMywgMHg4Y2NhYTJmZSwgMHg4MmMzYWZmNSwgMHhhOGZjOGNjNCwgMHhhNmY1ODFjZiwgMHhiNGVlOTZkMiwgMHhiYWU3OWJkOSwgMHhkYjNiYmI3YiwgMHhkNTMyYjY3MCwgMHhjNzI5YTE2ZCwgMHhjOTIwYWM2NiwgMHhlMzFmOGY1NywgMHhlZDE2ODI1YywgMHhmZjBkOTU0MSwgMHhmMTA0OTg0YSwgMHhhYjczZDMyMywgMHhhNTdhZGUyOCwgMHhiNzYxYzkzNSwgMHhiOTY4YzQzZSwgMHg5MzU3ZTcwZiwgMHg5ZDVlZWEwNCwgMHg4ZjQ1ZmQxOSwgMHg4MTRjZjAxMiwgMHgzYmFiNmJjYiwgMHgzNWEyNjZjMCwgMHgyN2I5NzFkZCwgMHgyOWIwN2NkNiwgMHgwMzhmNWZlNywgMHgwZDg2NTJlYywgMHgxZjlkNDVmMSwgMHgxMTk0NDhmYSwgMHg0YmUzMDM5MywgMHg0NWVhMGU5OCwgMHg1N2YxMTk4NSwgMHg1OWY4MTQ4ZSwgMHg3M2M3MzdiZiwgMHg3ZGNlM2FiNCwgMHg2ZmQ1MmRhOSwgMHg2MWRjMjBhMiwgMHhhZDc2NmRmNiwgMHhhMzdmNjBmZCwgMHhiMTY0NzdlMCwgMHhiZjZkN2FlYiwgMHg5NTUyNTlkYSwgMHg5YjViNTRkMSwgMHg4OTQwNDNjYywgMHg4NzQ5NGVjNywgMHhkZDNlMDVhZSwgMHhkMzM3MDhhNSwgMHhjMTJjMWZiOCwgMHhjZjI1MTJiMywgMHhlNTFhMzE4MiwgMHhlYjEzM2M4OSwgMHhmOTA4MmI5NCwgMHhmNzAxMjY5ZiwgMHg0ZGU2YmQ0NiwgMHg0M2VmYjA0ZCwgMHg1MWY0YTc1MCwgMHg1ZmZkYWE1YiwgMHg3NWMyODk2YSwgMHg3YmNiODQ2MSwgMHg2OWQwOTM3YywgMHg2N2Q5OWU3NywgMHgzZGFlZDUxZSwgMHgzM2E3ZDgxNSwgMHgyMWJjY2YwOCwgMHgyZmI1YzIwMywgMHgwNThhZTEzMiwgMHgwYjgzZWMzOSwgMHgxOTk4ZmIyNCwgMHgxNzkxZjYyZiwgMHg3NjRkZDY4ZCwgMHg3ODQ0ZGI4NiwgMHg2YTVmY2M5YiwgMHg2NDU2YzE5MCwgMHg0ZTY5ZTJhMSwgMHg0MDYwZWZhYSwgMHg1MjdiZjhiNywgMHg1YzcyZjViYywgMHgwNjA1YmVkNSwgMHgwODBjYjNkZSwgMHgxYTE3YTRjMywgMHgxNDFlYTljOCwgMHgzZTIxOGFmOSwgMHgzMDI4ODdmMiwgMHgyMjMzOTBlZiwgMHgyYzNhOWRlNCwgMHg5NmRkMDYzZCwgMHg5OGQ0MGIzNiwgMHg4YWNmMWMyYiwgMHg4NGM2MTEyMCwgMHhhZWY5MzIxMSwgMHhhMGYwM2YxYSwgMHhiMmViMjgwNywgMHhiY2UyMjUwYywgMHhlNjk1NmU2NSwgMHhlODljNjM2ZSwgMHhmYTg3NzQ3MywgMHhmNDhlNzk3OCwgMHhkZWIxNWE0OSwgMHhkMGI4NTc0MiwgMHhjMmEzNDA1ZiwgMHhjY2FhNGQ1NCwgMHg0MWVjZGFmNywgMHg0ZmU1ZDdmYywgMHg1ZGZlYzBlMSwgMHg1M2Y3Y2RlYSwgMHg3OWM4ZWVkYiwgMHg3N2MxZTNkMCwgMHg2NWRhZjRjZCwgMHg2YmQzZjljNiwgMHgzMWE0YjJhZiwgMHgzZmFkYmZhNCwgMHgyZGI2YThiOSwgMHgyM2JmYTViMiwgMHgwOTgwODY4MywgMHgwNzg5OGI4OCwgMHgxNTkyOWM5NSwgMHgxYjliOTE5ZSwgMHhhMTdjMGE0NywgMHhhZjc1MDc0YywgMHhiZDZlMTA1MSwgMHhiMzY3MWQ1YSwgMHg5OTU4M2U2YiwgMHg5NzUxMzM2MCwgMHg4NTRhMjQ3ZCwgMHg4YjQzMjk3NiwgMHhkMTM0NjIxZiwgMHhkZjNkNmYxNCwgMHhjZDI2NzgwOSwgMHhjMzJmNzUwMiwgMHhlOTEwNTYzMywgMHhlNzE5NWIzOCwgMHhmNTAyNGMyNSwgMHhmYjBiNDEyZSwgMHg5YWQ3NjE4YywgMHg5NGRlNmM4NywgMHg4NmM1N2I5YSwgMHg4OGNjNzY5MSwgMHhhMmYzNTVhMCwgMHhhY2ZhNThhYiwgMHhiZWUxNGZiNiwgMHhiMGU4NDJiZCwgMHhlYTlmMDlkNCwgMHhlNDk2MDRkZiwgMHhmNjhkMTNjMiwgMHhmODg0MWVjOSwgMHhkMmJiM2RmOCwgMHhkY2IyMzBmMywgMHhjZWE5MjdlZSwgMHhjMGEwMmFlNSwgMHg3YTQ3YjEzYywgMHg3NDRlYmMzNywgMHg2NjU1YWIyYSwgMHg2ODVjYTYyMSwgMHg0MjYzODUxMCwgMHg0YzZhODgxYiwgMHg1ZTcxOWYwNiwgMHg1MDc4OTIwZCwgMHgwYTBmZDk2NCwgMHgwNDA2ZDQ2ZiwgMHgxNjFkYzM3MiwgMHgxODE0Y2U3OSwgMHgzMjJiZWQ0OCwgMHgzYzIyZTA0MywgMHgyZTM5Zjc1ZSwgMHgyMDMwZmE1NSwgMHhlYzlhYjcwMSwgMHhlMjkzYmEwYSwgMHhmMDg4YWQxNywgMHhmZTgxYTAxYywgMHhkNGJlODMyZCwgMHhkYWI3OGUyNiwgMHhjOGFjOTkzYiwgMHhjNmE1OTQzMCwgMHg5Y2QyZGY1OSwgMHg5MmRiZDI1MiwgMHg4MGMwYzU0ZiwgMHg4ZWM5Yzg0NCwgMHhhNGY2ZWI3NSwgMHhhYWZmZTY3ZSwgMHhiOGU0ZjE2MywgMHhiNmVkZmM2OCwgMHgwYzBhNjdiMSwgMHgwMjAzNmFiYSwgMHgxMDE4N2RhNywgMHgxZTExNzBhYywgMHgzNDJlNTM5ZCwgMHgzYTI3NWU5NiwgMHgyODNjNDk4YiwgMHgyNjM1NDQ4MCwgMHg3YzQyMGZlOSwgMHg3MjRiMDJlMiwgMHg2MDUwMTVmZiwgMHg2ZTU5MThmNCwgMHg0NDY2M2JjNSwgMHg0YTZmMzZjZSwgMHg1ODc0MjFkMywgMHg1NjdkMmNkOCwgMHgzN2ExMGM3YSwgMHgzOWE4MDE3MSwgMHgyYmIzMTY2YywgMHgyNWJhMWI2NywgMHgwZjg1Mzg1NiwgMHgwMThjMzU1ZCwgMHgxMzk3MjI0MCwgMHgxZDllMmY0YiwgMHg0N2U5NjQyMiwgMHg0OWUwNjkyOSwgMHg1YmZiN2UzNCwgMHg1NWYyNzMzZiwgMHg3ZmNkNTAwZSwgMHg3MWM0NWQwNSwgMHg2M2RmNGExOCwgMHg2ZGQ2NDcxMywgMHhkNzMxZGNjYSwgMHhkOTM4ZDFjMSwgMHhjYjIzYzZkYywgMHhjNTJhY2JkNywgMHhlZjE1ZThlNiwgMHhlMTFjZTVlZCwgMHhmMzA3ZjJmMCwgMHhmZDBlZmZmYiwgMHhhNzc5YjQ5MiwgMHhhOTcwYjk5OSwgMHhiYjZiYWU4NCwgMHhiNTYyYTM4ZiwgMHg5ZjVkODBiZSwgMHg5MTU0OGRiNSwgMHg4MzRmOWFhOCwgMHg4ZDQ2OTdhM107XG4gICAgdmFyIFUyID0gWzB4MDAwMDAwMDAsIDB4MGIwZTA5MGQsIDB4MTYxYzEyMWEsIDB4MWQxMjFiMTcsIDB4MmMzODI0MzQsIDB4MjczNjJkMzksIDB4M2EyNDM2MmUsIDB4MzEyYTNmMjMsIDB4NTg3MDQ4NjgsIDB4NTM3ZTQxNjUsIDB4NGU2YzVhNzIsIDB4NDU2MjUzN2YsIDB4NzQ0ODZjNWMsIDB4N2Y0NjY1NTEsIDB4NjI1NDdlNDYsIDB4Njk1YTc3NGIsIDB4YjBlMDkwZDAsIDB4YmJlZTk5ZGQsIDB4YTZmYzgyY2EsIDB4YWRmMjhiYzcsIDB4OWNkOGI0ZTQsIDB4OTdkNmJkZTksIDB4OGFjNGE2ZmUsIDB4ODFjYWFmZjMsIDB4ZTg5MGQ4YjgsIDB4ZTM5ZWQxYjUsIDB4ZmU4Y2NhYTIsIDB4ZjU4MmMzYWYsIDB4YzRhOGZjOGMsIDB4Y2ZhNmY1ODEsIDB4ZDJiNGVlOTYsIDB4ZDliYWU3OWIsIDB4N2JkYjNiYmIsIDB4NzBkNTMyYjYsIDB4NmRjNzI5YTEsIDB4NjZjOTIwYWMsIDB4NTdlMzFmOGYsIDB4NWNlZDE2ODIsIDB4NDFmZjBkOTUsIDB4NGFmMTA0OTgsIDB4MjNhYjczZDMsIDB4MjhhNTdhZGUsIDB4MzViNzYxYzksIDB4M2ViOTY4YzQsIDB4MGY5MzU3ZTcsIDB4MDQ5ZDVlZWEsIDB4MTk4ZjQ1ZmQsIDB4MTI4MTRjZjAsIDB4Y2IzYmFiNmIsIDB4YzAzNWEyNjYsIDB4ZGQyN2I5NzEsIDB4ZDYyOWIwN2MsIDB4ZTcwMzhmNWYsIDB4ZWMwZDg2NTIsIDB4ZjExZjlkNDUsIDB4ZmExMTk0NDgsIDB4OTM0YmUzMDMsIDB4OTg0NWVhMGUsIDB4ODU1N2YxMTksIDB4OGU1OWY4MTQsIDB4YmY3M2M3MzcsIDB4YjQ3ZGNlM2EsIDB4YTk2ZmQ1MmQsIDB4YTI2MWRjMjAsIDB4ZjZhZDc2NmQsIDB4ZmRhMzdmNjAsIDB4ZTBiMTY0NzcsIDB4ZWJiZjZkN2EsIDB4ZGE5NTUyNTksIDB4ZDE5YjViNTQsIDB4Y2M4OTQwNDMsIDB4Yzc4NzQ5NGUsIDB4YWVkZDNlMDUsIDB4YTVkMzM3MDgsIDB4YjhjMTJjMWYsIDB4YjNjZjI1MTIsIDB4ODJlNTFhMzEsIDB4ODllYjEzM2MsIDB4OTRmOTA4MmIsIDB4OWZmNzAxMjYsIDB4NDY0ZGU2YmQsIDB4NGQ0M2VmYjAsIDB4NTA1MWY0YTcsIDB4NWI1ZmZkYWEsIDB4NmE3NWMyODksIDB4NjE3YmNiODQsIDB4N2M2OWQwOTMsIDB4Nzc2N2Q5OWUsIDB4MWUzZGFlZDUsIDB4MTUzM2E3ZDgsIDB4MDgyMWJjY2YsIDB4MDMyZmI1YzIsIDB4MzIwNThhZTEsIDB4MzkwYjgzZWMsIDB4MjQxOTk4ZmIsIDB4MmYxNzkxZjYsIDB4OGQ3NjRkZDYsIDB4ODY3ODQ0ZGIsIDB4OWI2YTVmY2MsIDB4OTA2NDU2YzEsIDB4YTE0ZTY5ZTIsIDB4YWE0MDYwZWYsIDB4Yjc1MjdiZjgsIDB4YmM1YzcyZjUsIDB4ZDUwNjA1YmUsIDB4ZGUwODBjYjMsIDB4YzMxYTE3YTQsIDB4YzgxNDFlYTksIDB4ZjkzZTIxOGEsIDB4ZjIzMDI4ODcsIDB4ZWYyMjMzOTAsIDB4ZTQyYzNhOWQsIDB4M2Q5NmRkMDYsIDB4MzY5OGQ0MGIsIDB4MmI4YWNmMWMsIDB4MjA4NGM2MTEsIDB4MTFhZWY5MzIsIDB4MWFhMGYwM2YsIDB4MDdiMmViMjgsIDB4MGNiY2UyMjUsIDB4NjVlNjk1NmUsIDB4NmVlODljNjMsIDB4NzNmYTg3NzQsIDB4NzhmNDhlNzksIDB4NDlkZWIxNWEsIDB4NDJkMGI4NTcsIDB4NWZjMmEzNDAsIDB4NTRjY2FhNGQsIDB4Zjc0MWVjZGEsIDB4ZmM0ZmU1ZDcsIDB4ZTE1ZGZlYzAsIDB4ZWE1M2Y3Y2QsIDB4ZGI3OWM4ZWUsIDB4ZDA3N2MxZTMsIDB4Y2Q2NWRhZjQsIDB4YzY2YmQzZjksIDB4YWYzMWE0YjIsIDB4YTQzZmFkYmYsIDB4YjkyZGI2YTgsIDB4YjIyM2JmYTUsIDB4ODMwOTgwODYsIDB4ODgwNzg5OGIsIDB4OTUxNTkyOWMsIDB4OWUxYjliOTEsIDB4NDdhMTdjMGEsIDB4NGNhZjc1MDcsIDB4NTFiZDZlMTAsIDB4NWFiMzY3MWQsIDB4NmI5OTU4M2UsIDB4NjA5NzUxMzMsIDB4N2Q4NTRhMjQsIDB4NzY4YjQzMjksIDB4MWZkMTM0NjIsIDB4MTRkZjNkNmYsIDB4MDljZDI2NzgsIDB4MDJjMzJmNzUsIDB4MzNlOTEwNTYsIDB4MzhlNzE5NWIsIDB4MjVmNTAyNGMsIDB4MmVmYjBiNDEsIDB4OGM5YWQ3NjEsIDB4ODc5NGRlNmMsIDB4OWE4NmM1N2IsIDB4OTE4OGNjNzYsIDB4YTBhMmYzNTUsIDB4YWJhY2ZhNTgsIDB4YjZiZWUxNGYsIDB4YmRiMGU4NDIsIDB4ZDRlYTlmMDksIDB4ZGZlNDk2MDQsIDB4YzJmNjhkMTMsIDB4YzlmODg0MWUsIDB4ZjhkMmJiM2QsIDB4ZjNkY2IyMzAsIDB4ZWVjZWE5MjcsIDB4ZTVjMGEwMmEsIDB4M2M3YTQ3YjEsIDB4Mzc3NDRlYmMsIDB4MmE2NjU1YWIsIDB4MjE2ODVjYTYsIDB4MTA0MjYzODUsIDB4MWI0YzZhODgsIDB4MDY1ZTcxOWYsIDB4MGQ1MDc4OTIsIDB4NjQwYTBmZDksIDB4NmYwNDA2ZDQsIDB4NzIxNjFkYzMsIDB4NzkxODE0Y2UsIDB4NDgzMjJiZWQsIDB4NDMzYzIyZTAsIDB4NWUyZTM5ZjcsIDB4NTUyMDMwZmEsIDB4MDFlYzlhYjcsIDB4MGFlMjkzYmEsIDB4MTdmMDg4YWQsIDB4MWNmZTgxYTAsIDB4MmRkNGJlODMsIDB4MjZkYWI3OGUsIDB4M2JjOGFjOTksIDB4MzBjNmE1OTQsIDB4NTk5Y2QyZGYsIDB4NTI5MmRiZDIsIDB4NGY4MGMwYzUsIDB4NDQ4ZWM5YzgsIDB4NzVhNGY2ZWIsIDB4N2VhYWZmZTYsIDB4NjNiOGU0ZjEsIDB4NjhiNmVkZmMsIDB4YjEwYzBhNjcsIDB4YmEwMjAzNmEsIDB4YTcxMDE4N2QsIDB4YWMxZTExNzAsIDB4OWQzNDJlNTMsIDB4OTYzYTI3NWUsIDB4OGIyODNjNDksIDB4ODAyNjM1NDQsIDB4ZTk3YzQyMGYsIDB4ZTI3MjRiMDIsIDB4ZmY2MDUwMTUsIDB4ZjQ2ZTU5MTgsIDB4YzU0NDY2M2IsIDB4Y2U0YTZmMzYsIDB4ZDM1ODc0MjEsIDB4ZDg1NjdkMmMsIDB4N2EzN2ExMGMsIDB4NzEzOWE4MDEsIDB4NmMyYmIzMTYsIDB4NjcyNWJhMWIsIDB4NTYwZjg1MzgsIDB4NWQwMThjMzUsIDB4NDAxMzk3MjIsIDB4NGIxZDllMmYsIDB4MjI0N2U5NjQsIDB4Mjk0OWUwNjksIDB4MzQ1YmZiN2UsIDB4M2Y1NWYyNzMsIDB4MGU3ZmNkNTAsIDB4MDU3MWM0NWQsIDB4MTg2M2RmNGEsIDB4MTM2ZGQ2NDcsIDB4Y2FkNzMxZGMsIDB4YzFkOTM4ZDEsIDB4ZGNjYjIzYzYsIDB4ZDdjNTJhY2IsIDB4ZTZlZjE1ZTgsIDB4ZWRlMTFjZTUsIDB4ZjBmMzA3ZjIsIDB4ZmJmZDBlZmYsIDB4OTJhNzc5YjQsIDB4OTlhOTcwYjksIDB4ODRiYjZiYWUsIDB4OGZiNTYyYTMsIDB4YmU5ZjVkODAsIDB4YjU5MTU0OGQsIDB4YTg4MzRmOWEsIDB4YTM4ZDQ2OTddO1xuICAgIHZhciBVMyA9IFsweDAwMDAwMDAwLCAweDBkMGIwZTA5LCAweDFhMTYxYzEyLCAweDE3MWQxMjFiLCAweDM0MmMzODI0LCAweDM5MjczNjJkLCAweDJlM2EyNDM2LCAweDIzMzEyYTNmLCAweDY4NTg3MDQ4LCAweDY1NTM3ZTQxLCAweDcyNGU2YzVhLCAweDdmNDU2MjUzLCAweDVjNzQ0ODZjLCAweDUxN2Y0NjY1LCAweDQ2NjI1NDdlLCAweDRiNjk1YTc3LCAweGQwYjBlMDkwLCAweGRkYmJlZTk5LCAweGNhYTZmYzgyLCAweGM3YWRmMjhiLCAweGU0OWNkOGI0LCAweGU5OTdkNmJkLCAweGZlOGFjNGE2LCAweGYzODFjYWFmLCAweGI4ZTg5MGQ4LCAweGI1ZTM5ZWQxLCAweGEyZmU4Y2NhLCAweGFmZjU4MmMzLCAweDhjYzRhOGZjLCAweDgxY2ZhNmY1LCAweDk2ZDJiNGVlLCAweDliZDliYWU3LCAweGJiN2JkYjNiLCAweGI2NzBkNTMyLCAweGExNmRjNzI5LCAweGFjNjZjOTIwLCAweDhmNTdlMzFmLCAweDgyNWNlZDE2LCAweDk1NDFmZjBkLCAweDk4NGFmMTA0LCAweGQzMjNhYjczLCAweGRlMjhhNTdhLCAweGM5MzViNzYxLCAweGM0M2ViOTY4LCAweGU3MGY5MzU3LCAweGVhMDQ5ZDVlLCAweGZkMTk4ZjQ1LCAweGYwMTI4MTRjLCAweDZiY2IzYmFiLCAweDY2YzAzNWEyLCAweDcxZGQyN2I5LCAweDdjZDYyOWIwLCAweDVmZTcwMzhmLCAweDUyZWMwZDg2LCAweDQ1ZjExZjlkLCAweDQ4ZmExMTk0LCAweDAzOTM0YmUzLCAweDBlOTg0NWVhLCAweDE5ODU1N2YxLCAweDE0OGU1OWY4LCAweDM3YmY3M2M3LCAweDNhYjQ3ZGNlLCAweDJkYTk2ZmQ1LCAweDIwYTI2MWRjLCAweDZkZjZhZDc2LCAweDYwZmRhMzdmLCAweDc3ZTBiMTY0LCAweDdhZWJiZjZkLCAweDU5ZGE5NTUyLCAweDU0ZDE5YjViLCAweDQzY2M4OTQwLCAweDRlYzc4NzQ5LCAweDA1YWVkZDNlLCAweDA4YTVkMzM3LCAweDFmYjhjMTJjLCAweDEyYjNjZjI1LCAweDMxODJlNTFhLCAweDNjODllYjEzLCAweDJiOTRmOTA4LCAweDI2OWZmNzAxLCAweGJkNDY0ZGU2LCAweGIwNGQ0M2VmLCAweGE3NTA1MWY0LCAweGFhNWI1ZmZkLCAweDg5NmE3NWMyLCAweDg0NjE3YmNiLCAweDkzN2M2OWQwLCAweDllNzc2N2Q5LCAweGQ1MWUzZGFlLCAweGQ4MTUzM2E3LCAweGNmMDgyMWJjLCAweGMyMDMyZmI1LCAweGUxMzIwNThhLCAweGVjMzkwYjgzLCAweGZiMjQxOTk4LCAweGY2MmYxNzkxLCAweGQ2OGQ3NjRkLCAweGRiODY3ODQ0LCAweGNjOWI2YTVmLCAweGMxOTA2NDU2LCAweGUyYTE0ZTY5LCAweGVmYWE0MDYwLCAweGY4Yjc1MjdiLCAweGY1YmM1YzcyLCAweGJlZDUwNjA1LCAweGIzZGUwODBjLCAweGE0YzMxYTE3LCAweGE5YzgxNDFlLCAweDhhZjkzZTIxLCAweDg3ZjIzMDI4LCAweDkwZWYyMjMzLCAweDlkZTQyYzNhLCAweDA2M2Q5NmRkLCAweDBiMzY5OGQ0LCAweDFjMmI4YWNmLCAweDExMjA4NGM2LCAweDMyMTFhZWY5LCAweDNmMWFhMGYwLCAweDI4MDdiMmViLCAweDI1MGNiY2UyLCAweDZlNjVlNjk1LCAweDYzNmVlODljLCAweDc0NzNmYTg3LCAweDc5NzhmNDhlLCAweDVhNDlkZWIxLCAweDU3NDJkMGI4LCAweDQwNWZjMmEzLCAweDRkNTRjY2FhLCAweGRhZjc0MWVjLCAweGQ3ZmM0ZmU1LCAweGMwZTE1ZGZlLCAweGNkZWE1M2Y3LCAweGVlZGI3OWM4LCAweGUzZDA3N2MxLCAweGY0Y2Q2NWRhLCAweGY5YzY2YmQzLCAweGIyYWYzMWE0LCAweGJmYTQzZmFkLCAweGE4YjkyZGI2LCAweGE1YjIyM2JmLCAweDg2ODMwOTgwLCAweDhiODgwNzg5LCAweDljOTUxNTkyLCAweDkxOWUxYjliLCAweDBhNDdhMTdjLCAweDA3NGNhZjc1LCAweDEwNTFiZDZlLCAweDFkNWFiMzY3LCAweDNlNmI5OTU4LCAweDMzNjA5NzUxLCAweDI0N2Q4NTRhLCAweDI5NzY4YjQzLCAweDYyMWZkMTM0LCAweDZmMTRkZjNkLCAweDc4MDljZDI2LCAweDc1MDJjMzJmLCAweDU2MzNlOTEwLCAweDViMzhlNzE5LCAweDRjMjVmNTAyLCAweDQxMmVmYjBiLCAweDYxOGM5YWQ3LCAweDZjODc5NGRlLCAweDdiOWE4NmM1LCAweDc2OTE4OGNjLCAweDU1YTBhMmYzLCAweDU4YWJhY2ZhLCAweDRmYjZiZWUxLCAweDQyYmRiMGU4LCAweDA5ZDRlYTlmLCAweDA0ZGZlNDk2LCAweDEzYzJmNjhkLCAweDFlYzlmODg0LCAweDNkZjhkMmJiLCAweDMwZjNkY2IyLCAweDI3ZWVjZWE5LCAweDJhZTVjMGEwLCAweGIxM2M3YTQ3LCAweGJjMzc3NDRlLCAweGFiMmE2NjU1LCAweGE2MjE2ODVjLCAweDg1MTA0MjYzLCAweDg4MWI0YzZhLCAweDlmMDY1ZTcxLCAweDkyMGQ1MDc4LCAweGQ5NjQwYTBmLCAweGQ0NmYwNDA2LCAweGMzNzIxNjFkLCAweGNlNzkxODE0LCAweGVkNDgzMjJiLCAweGUwNDMzYzIyLCAweGY3NWUyZTM5LCAweGZhNTUyMDMwLCAweGI3MDFlYzlhLCAweGJhMGFlMjkzLCAweGFkMTdmMDg4LCAweGEwMWNmZTgxLCAweDgzMmRkNGJlLCAweDhlMjZkYWI3LCAweDk5M2JjOGFjLCAweDk0MzBjNmE1LCAweGRmNTk5Y2QyLCAweGQyNTI5MmRiLCAweGM1NGY4MGMwLCAweGM4NDQ4ZWM5LCAweGViNzVhNGY2LCAweGU2N2VhYWZmLCAweGYxNjNiOGU0LCAweGZjNjhiNmVkLCAweDY3YjEwYzBhLCAweDZhYmEwMjAzLCAweDdkYTcxMDE4LCAweDcwYWMxZTExLCAweDUzOWQzNDJlLCAweDVlOTYzYTI3LCAweDQ5OGIyODNjLCAweDQ0ODAyNjM1LCAweDBmZTk3YzQyLCAweDAyZTI3MjRiLCAweDE1ZmY2MDUwLCAweDE4ZjQ2ZTU5LCAweDNiYzU0NDY2LCAweDM2Y2U0YTZmLCAweDIxZDM1ODc0LCAweDJjZDg1NjdkLCAweDBjN2EzN2ExLCAweDAxNzEzOWE4LCAweDE2NmMyYmIzLCAweDFiNjcyNWJhLCAweDM4NTYwZjg1LCAweDM1NWQwMThjLCAweDIyNDAxMzk3LCAweDJmNGIxZDllLCAweDY0MjI0N2U5LCAweDY5Mjk0OWUwLCAweDdlMzQ1YmZiLCAweDczM2Y1NWYyLCAweDUwMGU3ZmNkLCAweDVkMDU3MWM0LCAweDRhMTg2M2RmLCAweDQ3MTM2ZGQ2LCAweGRjY2FkNzMxLCAweGQxYzFkOTM4LCAweGM2ZGNjYjIzLCAweGNiZDdjNTJhLCAweGU4ZTZlZjE1LCAweGU1ZWRlMTFjLCAweGYyZjBmMzA3LCAweGZmZmJmZDBlLCAweGI0OTJhNzc5LCAweGI5OTlhOTcwLCAweGFlODRiYjZiLCAweGEzOGZiNTYyLCAweDgwYmU5ZjVkLCAweDhkYjU5MTU0LCAweDlhYTg4MzRmLCAweDk3YTM4ZDQ2XTtcbiAgICB2YXIgVTQgPSBbMHgwMDAwMDAwMCwgMHgwOTBkMGIwZSwgMHgxMjFhMTYxYywgMHgxYjE3MWQxMiwgMHgyNDM0MmMzOCwgMHgyZDM5MjczNiwgMHgzNjJlM2EyNCwgMHgzZjIzMzEyYSwgMHg0ODY4NTg3MCwgMHg0MTY1NTM3ZSwgMHg1YTcyNGU2YywgMHg1MzdmNDU2MiwgMHg2YzVjNzQ0OCwgMHg2NTUxN2Y0NiwgMHg3ZTQ2NjI1NCwgMHg3NzRiNjk1YSwgMHg5MGQwYjBlMCwgMHg5OWRkYmJlZSwgMHg4MmNhYTZmYywgMHg4YmM3YWRmMiwgMHhiNGU0OWNkOCwgMHhiZGU5OTdkNiwgMHhhNmZlOGFjNCwgMHhhZmYzODFjYSwgMHhkOGI4ZTg5MCwgMHhkMWI1ZTM5ZSwgMHhjYWEyZmU4YywgMHhjM2FmZjU4MiwgMHhmYzhjYzRhOCwgMHhmNTgxY2ZhNiwgMHhlZTk2ZDJiNCwgMHhlNzliZDliYSwgMHgzYmJiN2JkYiwgMHgzMmI2NzBkNSwgMHgyOWExNmRjNywgMHgyMGFjNjZjOSwgMHgxZjhmNTdlMywgMHgxNjgyNWNlZCwgMHgwZDk1NDFmZiwgMHgwNDk4NGFmMSwgMHg3M2QzMjNhYiwgMHg3YWRlMjhhNSwgMHg2MWM5MzViNywgMHg2OGM0M2ViOSwgMHg1N2U3MGY5MywgMHg1ZWVhMDQ5ZCwgMHg0NWZkMTk4ZiwgMHg0Y2YwMTI4MSwgMHhhYjZiY2IzYiwgMHhhMjY2YzAzNSwgMHhiOTcxZGQyNywgMHhiMDdjZDYyOSwgMHg4ZjVmZTcwMywgMHg4NjUyZWMwZCwgMHg5ZDQ1ZjExZiwgMHg5NDQ4ZmExMSwgMHhlMzAzOTM0YiwgMHhlYTBlOTg0NSwgMHhmMTE5ODU1NywgMHhmODE0OGU1OSwgMHhjNzM3YmY3MywgMHhjZTNhYjQ3ZCwgMHhkNTJkYTk2ZiwgMHhkYzIwYTI2MSwgMHg3NjZkZjZhZCwgMHg3ZjYwZmRhMywgMHg2NDc3ZTBiMSwgMHg2ZDdhZWJiZiwgMHg1MjU5ZGE5NSwgMHg1YjU0ZDE5YiwgMHg0MDQzY2M4OSwgMHg0OTRlYzc4NywgMHgzZTA1YWVkZCwgMHgzNzA4YTVkMywgMHgyYzFmYjhjMSwgMHgyNTEyYjNjZiwgMHgxYTMxODJlNSwgMHgxMzNjODllYiwgMHgwODJiOTRmOSwgMHgwMTI2OWZmNywgMHhlNmJkNDY0ZCwgMHhlZmIwNGQ0MywgMHhmNGE3NTA1MSwgMHhmZGFhNWI1ZiwgMHhjMjg5NmE3NSwgMHhjYjg0NjE3YiwgMHhkMDkzN2M2OSwgMHhkOTllNzc2NywgMHhhZWQ1MWUzZCwgMHhhN2Q4MTUzMywgMHhiY2NmMDgyMSwgMHhiNWMyMDMyZiwgMHg4YWUxMzIwNSwgMHg4M2VjMzkwYiwgMHg5OGZiMjQxOSwgMHg5MWY2MmYxNywgMHg0ZGQ2OGQ3NiwgMHg0NGRiODY3OCwgMHg1ZmNjOWI2YSwgMHg1NmMxOTA2NCwgMHg2OWUyYTE0ZSwgMHg2MGVmYWE0MCwgMHg3YmY4Yjc1MiwgMHg3MmY1YmM1YywgMHgwNWJlZDUwNiwgMHgwY2IzZGUwOCwgMHgxN2E0YzMxYSwgMHgxZWE5YzgxNCwgMHgyMThhZjkzZSwgMHgyODg3ZjIzMCwgMHgzMzkwZWYyMiwgMHgzYTlkZTQyYywgMHhkZDA2M2Q5NiwgMHhkNDBiMzY5OCwgMHhjZjFjMmI4YSwgMHhjNjExMjA4NCwgMHhmOTMyMTFhZSwgMHhmMDNmMWFhMCwgMHhlYjI4MDdiMiwgMHhlMjI1MGNiYywgMHg5NTZlNjVlNiwgMHg5YzYzNmVlOCwgMHg4Nzc0NzNmYSwgMHg4ZTc5NzhmNCwgMHhiMTVhNDlkZSwgMHhiODU3NDJkMCwgMHhhMzQwNWZjMiwgMHhhYTRkNTRjYywgMHhlY2RhZjc0MSwgMHhlNWQ3ZmM0ZiwgMHhmZWMwZTE1ZCwgMHhmN2NkZWE1MywgMHhjOGVlZGI3OSwgMHhjMWUzZDA3NywgMHhkYWY0Y2Q2NSwgMHhkM2Y5YzY2YiwgMHhhNGIyYWYzMSwgMHhhZGJmYTQzZiwgMHhiNmE4YjkyZCwgMHhiZmE1YjIyMywgMHg4MDg2ODMwOSwgMHg4OThiODgwNywgMHg5MjljOTUxNSwgMHg5YjkxOWUxYiwgMHg3YzBhNDdhMSwgMHg3NTA3NGNhZiwgMHg2ZTEwNTFiZCwgMHg2NzFkNWFiMywgMHg1ODNlNmI5OSwgMHg1MTMzNjA5NywgMHg0YTI0N2Q4NSwgMHg0MzI5NzY4YiwgMHgzNDYyMWZkMSwgMHgzZDZmMTRkZiwgMHgyNjc4MDljZCwgMHgyZjc1MDJjMywgMHgxMDU2MzNlOSwgMHgxOTViMzhlNywgMHgwMjRjMjVmNSwgMHgwYjQxMmVmYiwgMHhkNzYxOGM5YSwgMHhkZTZjODc5NCwgMHhjNTdiOWE4NiwgMHhjYzc2OTE4OCwgMHhmMzU1YTBhMiwgMHhmYTU4YWJhYywgMHhlMTRmYjZiZSwgMHhlODQyYmRiMCwgMHg5ZjA5ZDRlYSwgMHg5NjA0ZGZlNCwgMHg4ZDEzYzJmNiwgMHg4NDFlYzlmOCwgMHhiYjNkZjhkMiwgMHhiMjMwZjNkYywgMHhhOTI3ZWVjZSwgMHhhMDJhZTVjMCwgMHg0N2IxM2M3YSwgMHg0ZWJjMzc3NCwgMHg1NWFiMmE2NiwgMHg1Y2E2MjE2OCwgMHg2Mzg1MTA0MiwgMHg2YTg4MWI0YywgMHg3MTlmMDY1ZSwgMHg3ODkyMGQ1MCwgMHgwZmQ5NjQwYSwgMHgwNmQ0NmYwNCwgMHgxZGMzNzIxNiwgMHgxNGNlNzkxOCwgMHgyYmVkNDgzMiwgMHgyMmUwNDMzYywgMHgzOWY3NWUyZSwgMHgzMGZhNTUyMCwgMHg5YWI3MDFlYywgMHg5M2JhMGFlMiwgMHg4OGFkMTdmMCwgMHg4MWEwMWNmZSwgMHhiZTgzMmRkNCwgMHhiNzhlMjZkYSwgMHhhYzk5M2JjOCwgMHhhNTk0MzBjNiwgMHhkMmRmNTk5YywgMHhkYmQyNTI5MiwgMHhjMGM1NGY4MCwgMHhjOWM4NDQ4ZSwgMHhmNmViNzVhNCwgMHhmZmU2N2VhYSwgMHhlNGYxNjNiOCwgMHhlZGZjNjhiNiwgMHgwYTY3YjEwYywgMHgwMzZhYmEwMiwgMHgxODdkYTcxMCwgMHgxMTcwYWMxZSwgMHgyZTUzOWQzNCwgMHgyNzVlOTYzYSwgMHgzYzQ5OGIyOCwgMHgzNTQ0ODAyNiwgMHg0MjBmZTk3YywgMHg0YjAyZTI3MiwgMHg1MDE1ZmY2MCwgMHg1OTE4ZjQ2ZSwgMHg2NjNiYzU0NCwgMHg2ZjM2Y2U0YSwgMHg3NDIxZDM1OCwgMHg3ZDJjZDg1NiwgMHhhMTBjN2EzNywgMHhhODAxNzEzOSwgMHhiMzE2NmMyYiwgMHhiYTFiNjcyNSwgMHg4NTM4NTYwZiwgMHg4YzM1NWQwMSwgMHg5NzIyNDAxMywgMHg5ZTJmNGIxZCwgMHhlOTY0MjI0NywgMHhlMDY5Mjk0OSwgMHhmYjdlMzQ1YiwgMHhmMjczM2Y1NSwgMHhjZDUwMGU3ZiwgMHhjNDVkMDU3MSwgMHhkZjRhMTg2MywgMHhkNjQ3MTM2ZCwgMHgzMWRjY2FkNywgMHgzOGQxYzFkOSwgMHgyM2M2ZGNjYiwgMHgyYWNiZDdjNSwgMHgxNWU4ZTZlZiwgMHgxY2U1ZWRlMSwgMHgwN2YyZjBmMywgMHgwZWZmZmJmZCwgMHg3OWI0OTJhNywgMHg3MGI5OTlhOSwgMHg2YmFlODRiYiwgMHg2MmEzOGZiNSwgMHg1ZDgwYmU5ZiwgMHg1NDhkYjU5MSwgMHg0ZjlhYTg4MywgMHg0Njk3YTM4ZF07XG5cbiAgICBmdW5jdGlvbiBjb252ZXJ0VG9JbnQzMihieXRlcykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgICAgICAgIChieXRlc1tpICAgIF0gPDwgMjQpIHxcbiAgICAgICAgICAgICAgICAoYnl0ZXNbaSArIDFdIDw8IDE2KSB8XG4gICAgICAgICAgICAgICAgKGJ5dGVzW2kgKyAyXSA8PCAgOCkgfFxuICAgICAgICAgICAgICAgICBieXRlc1tpICsgM11cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICB2YXIgQUVTID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBRVMpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAna2V5Jywge1xuICAgICAgICAgICAgdmFsdWU6IGNvZXJjZUFycmF5KGtleSwgdHJ1ZSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fcHJlcGFyZSgpO1xuICAgIH1cblxuXG4gICAgQUVTLnByb3RvdHlwZS5fcHJlcGFyZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciByb3VuZHMgPSBudW1iZXJPZlJvdW5kc1t0aGlzLmtleS5sZW5ndGhdO1xuICAgICAgICBpZiAocm91bmRzID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBrZXkgc2l6ZSAobXVzdCBiZSAxNiwgMjQgb3IgMzIgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlbmNyeXB0aW9uIHJvdW5kIGtleXNcbiAgICAgICAgdGhpcy5fS2UgPSBbXTtcblxuICAgICAgICAvLyBkZWNyeXB0aW9uIHJvdW5kIGtleXNcbiAgICAgICAgdGhpcy5fS2QgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSByb3VuZHM7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fS2UucHVzaChbMCwgMCwgMCwgMF0pO1xuICAgICAgICAgICAgdGhpcy5fS2QucHVzaChbMCwgMCwgMCwgMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJvdW5kS2V5Q291bnQgPSAocm91bmRzICsgMSkgKiA0O1xuICAgICAgICB2YXIgS0MgPSB0aGlzLmtleS5sZW5ndGggLyA0O1xuXG4gICAgICAgIC8vIGNvbnZlcnQgdGhlIGtleSBpbnRvIGludHNcbiAgICAgICAgdmFyIHRrID0gY29udmVydFRvSW50MzIodGhpcy5rZXkpO1xuXG4gICAgICAgIC8vIGNvcHkgdmFsdWVzIGludG8gcm91bmQga2V5IGFycmF5c1xuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgS0M7IGkrKykge1xuICAgICAgICAgICAgaW5kZXggPSBpID4+IDI7XG4gICAgICAgICAgICB0aGlzLl9LZVtpbmRleF1baSAlIDRdID0gdGtbaV07XG4gICAgICAgICAgICB0aGlzLl9LZFtyb3VuZHMgLSBpbmRleF1baSAlIDRdID0gdGtbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBrZXkgZXhwYW5zaW9uIChmaXBzLTE5NyBzZWN0aW9uIDUuMilcbiAgICAgICAgdmFyIHJjb25wb2ludGVyID0gMDtcbiAgICAgICAgdmFyIHQgPSBLQywgdHQ7XG4gICAgICAgIHdoaWxlICh0IDwgcm91bmRLZXlDb3VudCkge1xuICAgICAgICAgICAgdHQgPSB0a1tLQyAtIDFdO1xuICAgICAgICAgICAgdGtbMF0gXj0gKChTWyh0dCA+PiAxNikgJiAweEZGXSA8PCAyNCkgXlxuICAgICAgICAgICAgICAgICAgICAgIChTWyh0dCA+PiAgOCkgJiAweEZGXSA8PCAxNikgXlxuICAgICAgICAgICAgICAgICAgICAgIChTWyB0dCAgICAgICAgJiAweEZGXSA8PCAgOCkgXlxuICAgICAgICAgICAgICAgICAgICAgICBTWyh0dCA+PiAyNCkgJiAweEZGXSAgICAgICAgXlxuICAgICAgICAgICAgICAgICAgICAgIChyY29uW3Jjb25wb2ludGVyXSA8PCAyNCkpO1xuICAgICAgICAgICAgcmNvbnBvaW50ZXIgKz0gMTtcblxuICAgICAgICAgICAgLy8ga2V5IGV4cGFuc2lvbiAoZm9yIG5vbi0yNTYgYml0KVxuICAgICAgICAgICAgaWYgKEtDICE9IDgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IEtDOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGtbaV0gXj0gdGtbaSAtIDFdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8ga2V5IGV4cGFuc2lvbiBmb3IgMjU2LWJpdCBrZXlzIGlzIFwic2xpZ2h0bHkgZGlmZmVyZW50XCIgKGZpcHMtMTk3KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IChLQyAvIDIpOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGtbaV0gXj0gdGtbaSAtIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0dCA9IHRrWyhLQyAvIDIpIC0gMV07XG5cbiAgICAgICAgICAgICAgICB0a1tLQyAvIDJdIF49IChTWyB0dCAgICAgICAgJiAweEZGXSAgICAgICAgXlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFNbKHR0ID4+ICA4KSAmIDB4RkZdIDw8ICA4KSBeXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoU1sodHQgPj4gMTYpICYgMHhGRl0gPDwgMTYpIF5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChTWyh0dCA+PiAyNCkgJiAweEZGXSA8PCAyNCkpO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IChLQyAvIDIpICsgMTsgaSA8IEtDOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdGtbaV0gXj0gdGtbaSAtIDFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY29weSB2YWx1ZXMgaW50byByb3VuZCBrZXkgYXJyYXlzXG4gICAgICAgICAgICB2YXIgaSA9IDAsIHIsIGM7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IEtDICYmIHQgPCByb3VuZEtleUNvdW50KSB7XG4gICAgICAgICAgICAgICAgciA9IHQgPj4gMjtcbiAgICAgICAgICAgICAgICBjID0gdCAlIDQ7XG4gICAgICAgICAgICAgICAgdGhpcy5fS2Vbcl1bY10gPSB0a1tpXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9LZFtyb3VuZHMgLSByXVtjXSA9IHRrW2krK107XG4gICAgICAgICAgICAgICAgdCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW52ZXJzZS1jaXBoZXItaWZ5IHRoZSBkZWNyeXB0aW9uIHJvdW5kIGtleSAoZmlwcy0xOTcgc2VjdGlvbiA1LjMpXG4gICAgICAgIGZvciAodmFyIHIgPSAxOyByIDwgcm91bmRzOyByKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgNDsgYysrKSB7XG4gICAgICAgICAgICAgICAgdHQgPSB0aGlzLl9LZFtyXVtjXTtcbiAgICAgICAgICAgICAgICB0aGlzLl9LZFtyXVtjXSA9IChVMVsodHQgPj4gMjQpICYgMHhGRl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFUyWyh0dCA+PiAxNikgJiAweEZGXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVTNbKHR0ID4+ICA4KSAmIDB4RkZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVNFsgdHQgICAgICAgICYgMHhGRl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgQUVTLnByb3RvdHlwZS5lbmNyeXB0ID0gZnVuY3Rpb24ocGxhaW50ZXh0KSB7XG4gICAgICAgIGlmIChwbGFpbnRleHQubGVuZ3RoICE9IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcm91bmRzID0gdGhpcy5fS2UubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGEgPSBbMCwgMCwgMCwgMF07XG5cbiAgICAgICAgLy8gY29udmVydCBwbGFpbnRleHQgdG8gKGludHMgXiBrZXkpXG4gICAgICAgIHZhciB0ID0gY29udmVydFRvSW50MzIocGxhaW50ZXh0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgIHRbaV0gXj0gdGhpcy5fS2VbMF1baV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhcHBseSByb3VuZCB0cmFuc2Zvcm1zXG4gICAgICAgIGZvciAodmFyIHIgPSAxOyByIDwgcm91bmRzOyByKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IChUMVsodFsgaSAgICAgICAgIF0gPj4gMjQpICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgVDJbKHRbKGkgKyAxKSAlIDRdID4+IDE2KSAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIFQzWyh0WyhpICsgMikgJSA0XSA+PiAgOCkgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICBUNFsgdFsoaSArIDMpICUgNF0gICAgICAgICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fS2Vbcl1baV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdCA9IGEuc2xpY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZSBsYXN0IHJvdW5kIGlzIHNwZWNpYWxcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUFycmF5KDE2KSwgdHQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICB0dCA9IHRoaXMuX0tlW3JvdW5kc11baV07XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgICAgXSA9IChTWyh0WyBpICAgICAgICAgXSA+PiAyNCkgJiAweGZmXSBeICh0dCA+PiAyNCkpICYgMHhmZjtcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSArIDFdID0gKFNbKHRbKGkgKyAxKSAlIDRdID4+IDE2KSAmIDB4ZmZdIF4gKHR0ID4+IDE2KSkgJiAweGZmO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSAoU1sodFsoaSArIDIpICUgNF0gPj4gIDgpICYgMHhmZl0gXiAodHQgPj4gIDgpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAzXSA9IChTWyB0WyhpICsgMykgJSA0XSAgICAgICAgJiAweGZmXSBeICB0dCAgICAgICApICYgMHhmZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgQUVTLnByb3RvdHlwZS5kZWNyeXB0ID0gZnVuY3Rpb24oY2lwaGVydGV4dCkge1xuICAgICAgICBpZiAoY2lwaGVydGV4dC5sZW5ndGggIT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBjaXBoZXJ0ZXh0IHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcm91bmRzID0gdGhpcy5fS2QubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGEgPSBbMCwgMCwgMCwgMF07XG5cbiAgICAgICAgLy8gY29udmVydCBwbGFpbnRleHQgdG8gKGludHMgXiBrZXkpXG4gICAgICAgIHZhciB0ID0gY29udmVydFRvSW50MzIoY2lwaGVydGV4dCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICB0W2ldIF49IHRoaXMuX0tkWzBdW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXBwbHkgcm91bmQgdHJhbnNmb3Jtc1xuICAgICAgICBmb3IgKHZhciByID0gMTsgciA8IHJvdW5kczsgcisrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGFbaV0gPSAoVDVbKHRbIGkgICAgICAgICAgXSA+PiAyNCkgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICBUNlsodFsoaSArIDMpICUgNF0gPj4gMTYpICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgVDdbKHRbKGkgKyAyKSAlIDRdID4+ICA4KSAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIFQ4WyB0WyhpICsgMSkgJSA0XSAgICAgICAgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9LZFtyXVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ID0gYS5zbGljZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlIGxhc3Qgcm91bmQgaXMgc3BlY2lhbFxuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQXJyYXkoMTYpLCB0dDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgIHR0ID0gdGhpcy5fS2Rbcm91bmRzXVtpXTtcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSAgICBdID0gKFNpWyh0WyBpICAgICAgICAgXSA+PiAyNCkgJiAweGZmXSBeICh0dCA+PiAyNCkpICYgMHhmZjtcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSArIDFdID0gKFNpWyh0WyhpICsgMykgJSA0XSA+PiAxNikgJiAweGZmXSBeICh0dCA+PiAxNikpICYgMHhmZjtcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSArIDJdID0gKFNpWyh0WyhpICsgMikgJSA0XSA+PiAgOCkgJiAweGZmXSBeICh0dCA+PiAgOCkpICYgMHhmZjtcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gKFNpWyB0WyhpICsgMSkgJSA0XSAgICAgICAgJiAweGZmXSBeICB0dCAgICAgICApICYgMHhmZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiAgTW9kZSBPZiBPcGVyYXRpb24gLSBFbGVjdG9uaWMgQ29kZWJvb2sgKEVDQilcbiAgICAgKi9cbiAgICB2YXIgTW9kZU9mT3BlcmF0aW9uRUNCID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25FQ0IpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIkVsZWN0cm9uaWMgQ29kZSBCbG9ja1wiO1xuICAgICAgICB0aGlzLm5hbWUgPSBcImVjYlwiO1xuXG4gICAgICAgIHRoaXMuX2FlcyA9IG5ldyBBRVMoa2V5KTtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25FQ0IucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbihwbGFpbnRleHQpIHtcbiAgICAgICAgcGxhaW50ZXh0ID0gY29lcmNlQXJyYXkocGxhaW50ZXh0KTtcblxuICAgICAgICBpZiAoKHBsYWludGV4dC5sZW5ndGggJSAxNikgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwbGFpbnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gY3JlYXRlQXJyYXkocGxhaW50ZXh0Lmxlbmd0aCk7XG4gICAgICAgIHZhciBibG9jayA9IGNyZWF0ZUFycmF5KDE2KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWludGV4dC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICAgICAgICAgIGNvcHlBcnJheShwbGFpbnRleHQsIGJsb2NrLCAwLCBpLCBpICsgMTYpO1xuICAgICAgICAgICAgYmxvY2sgPSB0aGlzLl9hZXMuZW5jcnlwdChibG9jayk7XG4gICAgICAgICAgICBjb3B5QXJyYXkoYmxvY2ssIGNpcGhlcnRleHQsIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7XG4gICAgfVxuXG4gICAgTW9kZU9mT3BlcmF0aW9uRUNCLnByb3RvdHlwZS5kZWNyeXB0ID0gZnVuY3Rpb24oY2lwaGVydGV4dCkge1xuICAgICAgICBjaXBoZXJ0ZXh0ID0gY29lcmNlQXJyYXkoY2lwaGVydGV4dCk7XG5cbiAgICAgICAgaWYgKChjaXBoZXJ0ZXh0Lmxlbmd0aCAlIDE2KSAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwbGFpbnRleHQgPSBjcmVhdGVBcnJheShjaXBoZXJ0ZXh0Lmxlbmd0aCk7XG4gICAgICAgIHZhciBibG9jayA9IGNyZWF0ZUFycmF5KDE2KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNpcGhlcnRleHQubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICAgICAgICBjb3B5QXJyYXkoY2lwaGVydGV4dCwgYmxvY2ssIDAsIGksIGkgKyAxNik7XG4gICAgICAgICAgICBibG9jayA9IHRoaXMuX2Flcy5kZWNyeXB0KGJsb2NrKTtcbiAgICAgICAgICAgIGNvcHlBcnJheShibG9jaywgcGxhaW50ZXh0LCBpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiAgTW9kZSBPZiBPcGVyYXRpb24gLSBDaXBoZXIgQmxvY2sgQ2hhaW5pbmcgKENCQylcbiAgICAgKi9cbiAgICB2YXIgTW9kZU9mT3BlcmF0aW9uQ0JDID0gZnVuY3Rpb24oa2V5LCBpdikge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTW9kZU9mT3BlcmF0aW9uQ0JDKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0FFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJDaXBoZXIgQmxvY2sgQ2hhaW5pbmdcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJjYmNcIjtcblxuICAgICAgICBpZiAoIWl2KSB7XG4gICAgICAgICAgICBpdiA9IGNyZWF0ZUFycmF5KDE2KTtcblxuICAgICAgICB9IGVsc2UgaWYgKGl2Lmxlbmd0aCAhPSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGluaXRpYWxhdGlvbiB2ZWN0b3Igc2l6ZSAobXVzdCBiZSAxNiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xhc3RDaXBoZXJibG9jayA9IGNvZXJjZUFycmF5KGl2LCB0cnVlKTtcblxuICAgICAgICB0aGlzLl9hZXMgPSBuZXcgQUVTKGtleSk7XG4gICAgfVxuXG4gICAgTW9kZU9mT3BlcmF0aW9uQ0JDLnByb3RvdHlwZS5lbmNyeXB0ID0gZnVuY3Rpb24ocGxhaW50ZXh0KSB7XG4gICAgICAgIHBsYWludGV4dCA9IGNvZXJjZUFycmF5KHBsYWludGV4dCk7XG5cbiAgICAgICAgaWYgKChwbGFpbnRleHQubGVuZ3RoICUgMTYpICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2lwaGVydGV4dCA9IGNyZWF0ZUFycmF5KHBsYWludGV4dC5sZW5ndGgpO1xuICAgICAgICB2YXIgYmxvY2sgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFpbnRleHQubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICAgICAgICBjb3B5QXJyYXkocGxhaW50ZXh0LCBibG9jaywgMCwgaSwgaSArIDE2KTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgaisrKSB7XG4gICAgICAgICAgICAgICAgYmxvY2tbal0gXj0gdGhpcy5fbGFzdENpcGhlcmJsb2NrW2pdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9sYXN0Q2lwaGVyYmxvY2sgPSB0aGlzLl9hZXMuZW5jcnlwdChibG9jayk7XG4gICAgICAgICAgICBjb3B5QXJyYXkodGhpcy5fbGFzdENpcGhlcmJsb2NrLCBjaXBoZXJ0ZXh0LCBpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0O1xuICAgIH1cblxuICAgIE1vZGVPZk9wZXJhdGlvbkNCQy5wcm90b3R5cGUuZGVjcnlwdCA9IGZ1bmN0aW9uKGNpcGhlcnRleHQpIHtcbiAgICAgICAgY2lwaGVydGV4dCA9IGNvZXJjZUFycmF5KGNpcGhlcnRleHQpO1xuXG4gICAgICAgIGlmICgoY2lwaGVydGV4dC5sZW5ndGggJSAxNikgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBjaXBoZXJ0ZXh0IHNpemUgKG11c3QgYmUgbXVsdGlwbGUgb2YgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGxhaW50ZXh0ID0gY3JlYXRlQXJyYXkoY2lwaGVydGV4dC5sZW5ndGgpO1xuICAgICAgICB2YXIgYmxvY2sgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaXBoZXJ0ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xuICAgICAgICAgICAgY29weUFycmF5KGNpcGhlcnRleHQsIGJsb2NrLCAwLCBpLCBpICsgMTYpO1xuICAgICAgICAgICAgYmxvY2sgPSB0aGlzLl9hZXMuZGVjcnlwdChibG9jayk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7IGorKykge1xuICAgICAgICAgICAgICAgIHBsYWludGV4dFtpICsgal0gPSBibG9ja1tqXSBeIHRoaXMuX2xhc3RDaXBoZXJibG9ja1tqXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29weUFycmF5KGNpcGhlcnRleHQsIHRoaXMuX2xhc3RDaXBoZXJibG9jaywgMCwgaSwgaSArIDE2KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiAgTW9kZSBPZiBPcGVyYXRpb24gLSBDaXBoZXIgRmVlZGJhY2sgKENGQilcbiAgICAgKi9cbiAgICB2YXIgTW9kZU9mT3BlcmF0aW9uQ0ZCID0gZnVuY3Rpb24oa2V5LCBpdiwgc2VnbWVudFNpemUpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1vZGVPZk9wZXJhdGlvbkNGQikpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiQ2lwaGVyIEZlZWRiYWNrXCI7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiY2ZiXCI7XG5cbiAgICAgICAgaWYgKCFpdikge1xuICAgICAgICAgICAgaXYgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpdi5sZW5ndGggIT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbml0aWFsYXRpb24gdmVjdG9yIHNpemUgKG11c3QgYmUgMTYgc2l6ZSknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc2VnbWVudFNpemUpIHsgc2VnbWVudFNpemUgPSAxOyB9XG5cbiAgICAgICAgdGhpcy5zZWdtZW50U2l6ZSA9IHNlZ21lbnRTaXplO1xuXG4gICAgICAgIHRoaXMuX3NoaWZ0UmVnaXN0ZXIgPSBjb2VyY2VBcnJheShpdiwgdHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5fYWVzID0gbmV3IEFFUyhrZXkpO1xuICAgIH1cblxuICAgIE1vZGVPZk9wZXJhdGlvbkNGQi5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uKHBsYWludGV4dCkge1xuICAgICAgICBpZiAoKHBsYWludGV4dC5sZW5ndGggJSB0aGlzLnNlZ21lbnRTaXplKSAhPSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgcGxhaW50ZXh0IHNpemUgKG11c3QgYmUgc2VnbWVudFNpemUgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZW5jcnlwdGVkID0gY29lcmNlQXJyYXkocGxhaW50ZXh0LCB0cnVlKTtcblxuICAgICAgICB2YXIgeG9yU2VnbWVudDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNyeXB0ZWQubGVuZ3RoOyBpICs9IHRoaXMuc2VnbWVudFNpemUpIHtcbiAgICAgICAgICAgIHhvclNlZ21lbnQgPSB0aGlzLl9hZXMuZW5jcnlwdCh0aGlzLl9zaGlmdFJlZ2lzdGVyKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5zZWdtZW50U2l6ZTsgaisrKSB7XG4gICAgICAgICAgICAgICAgZW5jcnlwdGVkW2kgKyBqXSBePSB4b3JTZWdtZW50W2pdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTaGlmdCB0aGUgcmVnaXN0ZXJcbiAgICAgICAgICAgIGNvcHlBcnJheSh0aGlzLl9zaGlmdFJlZ2lzdGVyLCB0aGlzLl9zaGlmdFJlZ2lzdGVyLCAwLCB0aGlzLnNlZ21lbnRTaXplKTtcbiAgICAgICAgICAgIGNvcHlBcnJheShlbmNyeXB0ZWQsIHRoaXMuX3NoaWZ0UmVnaXN0ZXIsIDE2IC0gdGhpcy5zZWdtZW50U2l6ZSwgaSwgaSArIHRoaXMuc2VnbWVudFNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVuY3J5cHRlZDtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25DRkIucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbihjaXBoZXJ0ZXh0KSB7XG4gICAgICAgIGlmICgoY2lwaGVydGV4dC5sZW5ndGggJSB0aGlzLnNlZ21lbnRTaXplKSAhPSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIHNlZ21lbnRTaXplIGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBsYWludGV4dCA9IGNvZXJjZUFycmF5KGNpcGhlcnRleHQsIHRydWUpO1xuXG4gICAgICAgIHZhciB4b3JTZWdtZW50O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWludGV4dC5sZW5ndGg7IGkgKz0gdGhpcy5zZWdtZW50U2l6ZSkge1xuICAgICAgICAgICAgeG9yU2VnbWVudCA9IHRoaXMuX2Flcy5lbmNyeXB0KHRoaXMuX3NoaWZ0UmVnaXN0ZXIpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuc2VnbWVudFNpemU7IGorKykge1xuICAgICAgICAgICAgICAgIHBsYWludGV4dFtpICsgal0gXj0geG9yU2VnbWVudFtqXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2hpZnQgdGhlIHJlZ2lzdGVyXG4gICAgICAgICAgICBjb3B5QXJyYXkodGhpcy5fc2hpZnRSZWdpc3RlciwgdGhpcy5fc2hpZnRSZWdpc3RlciwgMCwgdGhpcy5zZWdtZW50U2l6ZSk7XG4gICAgICAgICAgICBjb3B5QXJyYXkoY2lwaGVydGV4dCwgdGhpcy5fc2hpZnRSZWdpc3RlciwgMTYgLSB0aGlzLnNlZ21lbnRTaXplLCBpLCBpICsgdGhpcy5zZWdtZW50U2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGxhaW50ZXh0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBNb2RlIE9mIE9wZXJhdGlvbiAtIE91dHB1dCBGZWVkYmFjayAoT0ZCKVxuICAgICAqL1xuICAgIHZhciBNb2RlT2ZPcGVyYXRpb25PRkIgPSBmdW5jdGlvbihrZXksIGl2KSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25PRkIpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIk91dHB1dCBGZWVkYmFja1wiO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIm9mYlwiO1xuXG4gICAgICAgIGlmICghaXYpIHtcbiAgICAgICAgICAgIGl2ID0gY3JlYXRlQXJyYXkoMTYpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoaXYubGVuZ3RoICE9IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaW5pdGlhbGF0aW9uIHZlY3RvciBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdFByZWNpcGhlciA9IGNvZXJjZUFycmF5KGl2LCB0cnVlKTtcbiAgICAgICAgdGhpcy5fbGFzdFByZWNpcGhlckluZGV4ID0gMTY7XG5cbiAgICAgICAgdGhpcy5fYWVzID0gbmV3IEFFUyhrZXkpO1xuICAgIH1cblxuICAgIE1vZGVPZk9wZXJhdGlvbk9GQi5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uKHBsYWludGV4dCkge1xuICAgICAgICB2YXIgZW5jcnlwdGVkID0gY29lcmNlQXJyYXkocGxhaW50ZXh0LCB0cnVlKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY3J5cHRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xhc3RQcmVjaXBoZXJJbmRleCA9PT0gMTYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0UHJlY2lwaGVyID0gdGhpcy5fYWVzLmVuY3J5cHQodGhpcy5fbGFzdFByZWNpcGhlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdFByZWNpcGhlckluZGV4ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVuY3J5cHRlZFtpXSBePSB0aGlzLl9sYXN0UHJlY2lwaGVyW3RoaXMuX2xhc3RQcmVjaXBoZXJJbmRleCsrXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbmNyeXB0ZWQ7XG4gICAgfVxuXG4gICAgLy8gRGVjcnlwdGlvbiBpcyBzeW1ldHJpY1xuICAgIE1vZGVPZk9wZXJhdGlvbk9GQi5wcm90b3R5cGUuZGVjcnlwdCA9IE1vZGVPZk9wZXJhdGlvbk9GQi5wcm90b3R5cGUuZW5jcnlwdDtcblxuXG4gICAgLyoqXG4gICAgICogIENvdW50ZXIgb2JqZWN0IGZvciBDVFIgY29tbW9uIG1vZGUgb2Ygb3BlcmF0aW9uXG4gICAgICovXG4gICAgdmFyIENvdW50ZXIgPSBmdW5jdGlvbihpbml0aWFsVmFsdWUpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIENvdW50ZXIpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQ291bnRlciBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSBhbGxvdyAwLCBidXQgYW55dGhpbmcgZmFsc2UtaXNoIHVzZXMgdGhlIGRlZmF1bHQgMVxuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSAwICYmICFpbml0aWFsVmFsdWUpIHsgaW5pdGlhbFZhbHVlID0gMTsgfVxuXG4gICAgICAgIGlmICh0eXBlb2YoaW5pdGlhbFZhbHVlKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvdW50ZXIgPSBjcmVhdGVBcnJheSgxNik7XG4gICAgICAgICAgICB0aGlzLnNldFZhbHVlKGluaXRpYWxWYWx1ZSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Qnl0ZXMoaW5pdGlhbFZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIENvdW50ZXIucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZih2YWx1ZSkgIT09ICdudW1iZXInIHx8IHBhcnNlSW50KHZhbHVlKSAhPSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGNvdW50ZXIgdmFsdWUgKG11c3QgYmUgYW4gaW50ZWdlciknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIGNhbm5vdCBzYWZlbHkgaGFuZGxlIG51bWJlcnMgYmV5b25kIHRoZSBzYWZlIHJhbmdlIGZvciBpbnRlZ2Vyc1xuICAgICAgICBpZiAodmFsdWUgPiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnRlZ2VyIHZhbHVlIG91dCBvZiBzYWZlIHJhbmdlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDE1OyBpbmRleCA+PSAwOyAtLWluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLl9jb3VudGVyW2luZGV4XSA9IHZhbHVlICUgMjU2O1xuICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludCh2YWx1ZSAvIDI1Nik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBDb3VudGVyLnByb3RvdHlwZS5zZXRCeXRlcyA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gICAgICAgIGJ5dGVzID0gY29lcmNlQXJyYXkoYnl0ZXMsIHRydWUpO1xuXG4gICAgICAgIGlmIChieXRlcy5sZW5ndGggIT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBjb3VudGVyIGJ5dGVzIHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jb3VudGVyID0gYnl0ZXM7XG4gICAgfTtcblxuICAgIENvdW50ZXIucHJvdG90eXBlLmluY3JlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTU7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY291bnRlcltpXSA9PT0gMjU1KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY291bnRlcltpXSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvdW50ZXJbaV0rKztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogIE1vZGUgT2YgT3BlcmF0aW9uIC0gQ291bnRlciAoQ1RSKVxuICAgICAqL1xuICAgIHZhciBNb2RlT2ZPcGVyYXRpb25DVFIgPSBmdW5jdGlvbihrZXksIGNvdW50ZXIpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1vZGVPZk9wZXJhdGlvbkNUUikpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiQ291bnRlclwiO1xuICAgICAgICB0aGlzLm5hbWUgPSBcImN0clwiO1xuXG4gICAgICAgIGlmICghKGNvdW50ZXIgaW5zdGFuY2VvZiBDb3VudGVyKSkge1xuICAgICAgICAgICAgY291bnRlciA9IG5ldyBDb3VudGVyKGNvdW50ZXIpXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jb3VudGVyID0gY291bnRlcjtcblxuICAgICAgICB0aGlzLl9yZW1haW5pbmdDb3VudGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVtYWluaW5nQ291bnRlckluZGV4ID0gMTY7XG5cbiAgICAgICAgdGhpcy5fYWVzID0gbmV3IEFFUyhrZXkpO1xuICAgIH1cblxuICAgIE1vZGVPZk9wZXJhdGlvbkNUUi5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uKHBsYWludGV4dCkge1xuICAgICAgICB2YXIgZW5jcnlwdGVkID0gY29lcmNlQXJyYXkocGxhaW50ZXh0LCB0cnVlKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY3J5cHRlZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3JlbWFpbmluZ0NvdW50ZXJJbmRleCA9PT0gMTYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1haW5pbmdDb3VudGVyID0gdGhpcy5fYWVzLmVuY3J5cHQodGhpcy5fY291bnRlci5fY291bnRlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtYWluaW5nQ291bnRlckluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb3VudGVyLmluY3JlbWVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5jcnlwdGVkW2ldIF49IHRoaXMuX3JlbWFpbmluZ0NvdW50ZXJbdGhpcy5fcmVtYWluaW5nQ291bnRlckluZGV4KytdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVuY3J5cHRlZDtcbiAgICB9XG5cbiAgICAvLyBEZWNyeXB0aW9uIGlzIHN5bWV0cmljXG4gICAgTW9kZU9mT3BlcmF0aW9uQ1RSLnByb3RvdHlwZS5kZWNyeXB0ID0gTW9kZU9mT3BlcmF0aW9uQ1RSLnByb3RvdHlwZS5lbmNyeXB0O1xuXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFBhZGRpbmdcblxuICAgIC8vIFNlZTpodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMjMxNVxuICAgIGZ1bmN0aW9uIHBrY3M3cGFkKGRhdGEpIHtcbiAgICAgICAgZGF0YSA9IGNvZXJjZUFycmF5KGRhdGEsIHRydWUpO1xuICAgICAgICB2YXIgcGFkZGVyID0gMTYgLSAoZGF0YS5sZW5ndGggJSAxNik7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVBcnJheShkYXRhLmxlbmd0aCArIHBhZGRlcik7XG4gICAgICAgIGNvcHlBcnJheShkYXRhLCByZXN1bHQpO1xuICAgICAgICBmb3IgKHZhciBpID0gZGF0YS5sZW5ndGg7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdFtpXSA9IHBhZGRlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBrY3M3c3RyaXAoZGF0YSkge1xuICAgICAgICBkYXRhID0gY29lcmNlQXJyYXkoZGF0YSwgdHJ1ZSk7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA8IDE2KSB7IHRocm93IG5ldyBFcnJvcignUEtDUyM3IGludmFsaWQgbGVuZ3RoJyk7IH1cblxuICAgICAgICB2YXIgcGFkZGVyID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdO1xuICAgICAgICBpZiAocGFkZGVyID4gMTYpIHsgdGhyb3cgbmV3IEVycm9yKCdQS0NTIzcgcGFkZGluZyBieXRlIG91dCBvZiByYW5nZScpOyB9XG5cbiAgICAgICAgdmFyIGxlbmd0aCA9IGRhdGEubGVuZ3RoIC0gcGFkZGVyO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhZGRlcjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZGF0YVtsZW5ndGggKyBpXSAhPT0gcGFkZGVyKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQS0NTIzcgaW52YWxpZCBwYWRkaW5nIGJ5dGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVBcnJheShsZW5ndGgpO1xuICAgICAgICBjb3B5QXJyYXkoZGF0YSwgcmVzdWx0LCAwLCAwLCBsZW5ndGgpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gRXhwb3J0aW5nXG5cblxuICAgIC8vIFRoZSBibG9jayBjaXBoZXJcbiAgICB2YXIgYWVzanMgPSB7XG4gICAgICAgIEFFUzogQUVTLFxuICAgICAgICBDb3VudGVyOiBDb3VudGVyLFxuXG4gICAgICAgIE1vZGVPZk9wZXJhdGlvbjoge1xuICAgICAgICAgICAgZWNiOiBNb2RlT2ZPcGVyYXRpb25FQ0IsXG4gICAgICAgICAgICBjYmM6IE1vZGVPZk9wZXJhdGlvbkNCQyxcbiAgICAgICAgICAgIGNmYjogTW9kZU9mT3BlcmF0aW9uQ0ZCLFxuICAgICAgICAgICAgb2ZiOiBNb2RlT2ZPcGVyYXRpb25PRkIsXG4gICAgICAgICAgICBjdHI6IE1vZGVPZk9wZXJhdGlvbkNUUlxuICAgICAgICB9LFxuXG4gICAgICAgIHV0aWxzOiB7XG4gICAgICAgICAgICBoZXg6IGNvbnZlcnRIZXgsXG4gICAgICAgICAgICB1dGY4OiBjb252ZXJ0VXRmOFxuICAgICAgICB9LFxuXG4gICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgIHBrY3M3OiB7XG4gICAgICAgICAgICAgICAgcGFkOiBwa2NzN3BhZCxcbiAgICAgICAgICAgICAgICBzdHJpcDogcGtjczdzdHJpcFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9hcnJheVRlc3Q6IHtcbiAgICAgICAgICAgIGNvZXJjZUFycmF5OiBjb2VyY2VBcnJheSxcbiAgICAgICAgICAgIGNyZWF0ZUFycmF5OiBjcmVhdGVBcnJheSxcbiAgICAgICAgICAgIGNvcHlBcnJheTogY29weUFycmF5LFxuICAgICAgICB9XG4gICAgfTtcblxuXG4gICAgLy8gbm9kZS5qc1xuICAgIGlmICh0cnVlKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gYWVzanNcblxuICAgIC8vIFJlcXVpcmVKUy9BTURcbiAgICAvLyBodHRwOi8vd3d3LnJlcXVpcmVqcy5vcmcvZG9jcy9hcGkuaHRtbFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbWRqcy9hbWRqcy1hcGkvd2lraS9BTURcbiAgICB9IGVsc2Uge31cblxuXG59KSh0aGlzKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSkgeyhmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBVdGlsc1xuICBmdW5jdGlvbiBhc3NlcnQgKHZhbCwgbXNnKSB7XG4gICAgaWYgKCF2YWwpIHRocm93IG5ldyBFcnJvcihtc2cgfHwgJ0Fzc2VydGlvbiBmYWlsZWQnKTtcbiAgfVxuXG4gIC8vIENvdWxkIHVzZSBgaW5oZXJpdHNgIG1vZHVsZSwgYnV0IGRvbid0IHdhbnQgdG8gbW92ZSBmcm9tIHNpbmdsZSBmaWxlXG4gIC8vIGFyY2hpdGVjdHVyZSB5ZXQuXG4gIGZ1bmN0aW9uIGluaGVyaXRzIChjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvcjtcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlO1xuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKCk7XG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yO1xuICB9XG5cbiAgLy8gQk5cblxuICBmdW5jdGlvbiBCTiAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAoQk4uaXNCTihudW1iZXIpKSB7XG4gICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cblxuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIHRoaXMud29yZHMgPSBudWxsO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcblxuICAgIC8vIFJlZHVjdGlvbiBjb250ZXh0XG4gICAgdGhpcy5yZWQgPSBudWxsO1xuXG4gICAgaWYgKG51bWJlciAhPT0gbnVsbCkge1xuICAgICAgaWYgKGJhc2UgPT09ICdsZScgfHwgYmFzZSA9PT0gJ2JlJykge1xuICAgICAgICBlbmRpYW4gPSBiYXNlO1xuICAgICAgICBiYXNlID0gMTA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2luaXQobnVtYmVyIHx8IDAsIGJhc2UgfHwgMTAsIGVuZGlhbiB8fCAnYmUnKTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBCTjtcbiAgfSBlbHNlIHtcbiAgICBleHBvcnRzLkJOID0gQk47XG4gIH1cblxuICBCTi5CTiA9IEJOO1xuICBCTi53b3JkU2l6ZSA9IDI2O1xuXG4gIHZhciBCdWZmZXI7XG4gIHRyeSB7XG4gICAgQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYnVmZmVyICovIDApLkJ1ZmZlcjtcbiAgfSBjYXRjaCAoZSkge1xuICB9XG5cbiAgQk4uaXNCTiA9IGZ1bmN0aW9uIGlzQk4gKG51bSkge1xuICAgIGlmIChudW0gaW5zdGFuY2VvZiBCTikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bSAhPT0gbnVsbCAmJiB0eXBlb2YgbnVtID09PSAnb2JqZWN0JyAmJlxuICAgICAgbnVtLmNvbnN0cnVjdG9yLndvcmRTaXplID09PSBCTi53b3JkU2l6ZSAmJiBBcnJheS5pc0FycmF5KG51bS53b3Jkcyk7XG4gIH07XG5cbiAgQk4ubWF4ID0gZnVuY3Rpb24gbWF4IChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPiAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ubWluID0gZnVuY3Rpb24gbWluIChsZWZ0LCByaWdodCkge1xuICAgIGlmIChsZWZ0LmNtcChyaWdodCkgPCAwKSByZXR1cm4gbGVmdDtcbiAgICByZXR1cm4gcmlnaHQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gaW5pdCAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0TnVtYmVyKG51bWJlciwgYmFzZSwgZW5kaWFuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG51bWJlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0QXJyYXkobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAnaGV4Jykge1xuICAgICAgYmFzZSA9IDE2O1xuICAgIH1cbiAgICBhc3NlcnQoYmFzZSA9PT0gKGJhc2UgfCAwKSAmJiBiYXNlID49IDIgJiYgYmFzZSA8PSAzNik7XG5cbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKS5yZXBsYWNlKC9cXHMrL2csICcnKTtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGlmIChudW1iZXJbMF0gPT09ICctJykge1xuICAgICAgc3RhcnQrKztcbiAgICB9XG5cbiAgICBpZiAoYmFzZSA9PT0gMTYpIHtcbiAgICAgIHRoaXMuX3BhcnNlSGV4KG51bWJlciwgc3RhcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wYXJzZUJhc2UobnVtYmVyLCBiYXNlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLnN0cmlwKCk7XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICB0aGlzLl9pbml0QXJyYXkodGhpcy50b0FycmF5KCksIGJhc2UsIGVuZGlhbik7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pbml0TnVtYmVyID0gZnVuY3Rpb24gX2luaXROdW1iZXIgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgbnVtYmVyID0gLW51bWJlcjtcbiAgICB9XG4gICAgaWYgKG51bWJlciA8IDB4NDAwMDAwMCkge1xuICAgICAgdGhpcy53b3JkcyA9IFsgbnVtYmVyICYgMHgzZmZmZmZmIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChudW1iZXIgPCAweDEwMDAwMDAwMDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobnVtYmVyIDwgMHgyMDAwMDAwMDAwMDAwMCk7IC8vIDIgXiA1MyAodW5zYWZlKVxuICAgICAgdGhpcy53b3JkcyA9IFtcbiAgICAgICAgbnVtYmVyICYgMHgzZmZmZmZmLFxuICAgICAgICAobnVtYmVyIC8gMHg0MDAwMDAwKSAmIDB4M2ZmZmZmZixcbiAgICAgICAgMVxuICAgICAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMztcbiAgICB9XG5cbiAgICBpZiAoZW5kaWFuICE9PSAnbGUnKSByZXR1cm47XG5cbiAgICAvLyBSZXZlcnNlIHRoZSBieXRlc1xuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXRBcnJheSA9IGZ1bmN0aW9uIF9pbml0QXJyYXkgKG51bWJlciwgYmFzZSwgZW5kaWFuKSB7XG4gICAgLy8gUGVyaGFwcyBhIFVpbnQ4QXJyYXlcbiAgICBhc3NlcnQodHlwZW9mIG51bWJlci5sZW5ndGggPT09ICdudW1iZXInKTtcbiAgICBpZiAobnVtYmVyLmxlbmd0aCA8PSAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbChudW1iZXIubGVuZ3RoIC8gMyk7XG4gICAgdGhpcy53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICB9XG5cbiAgICB2YXIgaiwgdztcbiAgICB2YXIgb2ZmID0gMDtcbiAgICBpZiAoZW5kaWFuID09PSAnYmUnKSB7XG4gICAgICBmb3IgKGkgPSBudW1iZXIubGVuZ3RoIC0gMSwgaiA9IDA7IGkgPj0gMDsgaSAtPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgLSAxXSA8PCA4KSB8IChudW1iZXJbaSAtIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZW5kaWFuID09PSAnbGUnKSB7XG4gICAgICBmb3IgKGkgPSAwLCBqID0gMDsgaSA8IG51bWJlci5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICB3ID0gbnVtYmVyW2ldIHwgKG51bWJlcltpICsgMV0gPDwgOCkgfCAobnVtYmVyW2kgKyAyXSA8PCAxNik7XG4gICAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgdGhpcy53b3Jkc1tqICsgMV0gPSAodyA+Pj4gKDI2IC0gb2ZmKSkgJiAweDNmZmZmZmY7XG4gICAgICAgIG9mZiArPSAyNDtcbiAgICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBmdW5jdGlvbiBwYXJzZUhleCAoc3RyLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbihzdHIubGVuZ3RoLCBlbmQpO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gNDg7XG5cbiAgICAgIHIgPDw9IDQ7XG5cbiAgICAgIC8vICdhJyAtICdmJ1xuICAgICAgaWYgKGMgPj0gNDkgJiYgYyA8PSA1NCkge1xuICAgICAgICByIHw9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnIC0gJ0YnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcgJiYgYyA8PSAyMikge1xuICAgICAgICByIHw9IGMgLSAxNyArIDB4YTtcblxuICAgICAgLy8gJzAnIC0gJzknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByIHw9IGMgJiAweGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl9wYXJzZUhleCA9IGZ1bmN0aW9uIF9wYXJzZUhleCAobnVtYmVyLCBzdGFydCkge1xuICAgIC8vIENyZWF0ZSBwb3NzaWJseSBiaWdnZXIgYXJyYXkgdG8gZW5zdXJlIHRoYXQgaXQgZml0cyB0aGUgbnVtYmVyXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLmNlaWwoKG51bWJlci5sZW5ndGggLSBzdGFydCkgLyA2KTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIC8vIFNjYW4gMjQtYml0IGNodW5rcyBhbmQgYWRkIHRoZW0gdG8gdGhlIG51bWJlclxuICAgIHZhciBvZmYgPSAwO1xuICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSA2LCBqID0gMDsgaSA+PSBzdGFydDsgaSAtPSA2KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBpLCBpICsgNik7XG4gICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAvLyBOT1RFOiBgMHgzZmZmZmZgIGlzIGludGVudGlvbmFsIGhlcmUsIDI2Yml0cyBtYXggc2hpZnQgKyAyNGJpdCBoZXggbGltYlxuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgICAgb2ZmICs9IDI0O1xuICAgICAgaWYgKG9mZiA+PSAyNikge1xuICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgIGorKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgKyA2ICE9PSBzdGFydCkge1xuICAgICAgdyA9IHBhcnNlSGV4KG51bWJlciwgc3RhcnQsIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaiArIDFdIHw9IHcgPj4+ICgyNiAtIG9mZikgJiAweDNmZmZmZjtcbiAgICB9XG4gICAgdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlQmFzZSAoc3RyLCBzdGFydCwgZW5kLCBtdWwpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciAqPSBtdWw7XG5cbiAgICAgIC8vICdhJ1xuICAgICAgaWYgKGMgPj0gNDkpIHtcbiAgICAgICAgciArPSBjIC0gNDkgKyAweGE7XG5cbiAgICAgIC8vICdBJ1xuICAgICAgfSBlbHNlIGlmIChjID49IDE3KSB7XG4gICAgICAgIHIgKz0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgKz0gYztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlQmFzZSA9IGZ1bmN0aW9uIF9wYXJzZUJhc2UgKG51bWJlciwgYmFzZSwgc3RhcnQpIHtcbiAgICAvLyBJbml0aWFsaXplIGFzIHplcm9cbiAgICB0aGlzLndvcmRzID0gWyAwIF07XG4gICAgdGhpcy5sZW5ndGggPSAxO1xuXG4gICAgLy8gRmluZCBsZW5ndGggb2YgbGltYiBpbiBiYXNlXG4gICAgZm9yICh2YXIgbGltYkxlbiA9IDAsIGxpbWJQb3cgPSAxOyBsaW1iUG93IDw9IDB4M2ZmZmZmZjsgbGltYlBvdyAqPSBiYXNlKSB7XG4gICAgICBsaW1iTGVuKys7XG4gICAgfVxuICAgIGxpbWJMZW4tLTtcbiAgICBsaW1iUG93ID0gKGxpbWJQb3cgLyBiYXNlKSB8IDA7XG5cbiAgICB2YXIgdG90YWwgPSBudW1iZXIubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIG1vZCA9IHRvdGFsICUgbGltYkxlbjtcbiAgICB2YXIgZW5kID0gTWF0aC5taW4odG90YWwsIHRvdGFsIC0gbW9kKSArIHN0YXJ0O1xuXG4gICAgdmFyIHdvcmQgPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSBsaW1iTGVuKSB7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgaSArIGxpbWJMZW4sIGJhc2UpO1xuXG4gICAgICB0aGlzLmltdWxuKGxpbWJQb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtb2QgIT09IDApIHtcbiAgICAgIHZhciBwb3cgPSAxO1xuICAgICAgd29yZCA9IHBhcnNlQmFzZShudW1iZXIsIGksIG51bWJlci5sZW5ndGgsIGJhc2UpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbW9kOyBpKyspIHtcbiAgICAgICAgcG93ICo9IGJhc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW11bG4ocG93KTtcbiAgICAgIGlmICh0aGlzLndvcmRzWzBdICsgd29yZCA8IDB4NDAwMDAwMCkge1xuICAgICAgICB0aGlzLndvcmRzWzBdICs9IHdvcmQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9pYWRkbih3b3JkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChkZXN0KSB7XG4gICAgZGVzdC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZXN0LndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXTtcbiAgICB9XG4gICAgZGVzdC5sZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICBkZXN0Lm5lZ2F0aXZlID0gdGhpcy5uZWdhdGl2ZTtcbiAgICBkZXN0LnJlZCA9IHRoaXMucmVkO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lICgpIHtcbiAgICB2YXIgciA9IG5ldyBCTihudWxsKTtcbiAgICB0aGlzLmNvcHkocik7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9leHBhbmQgPSBmdW5jdGlvbiBfZXhwYW5kIChzaXplKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgc2l6ZSkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIFJlbW92ZSBsZWFkaW5nIGAwYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3RyaXAgPSBmdW5jdGlvbiBzdHJpcCAoKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoID4gMSAmJiB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fbm9ybVNpZ24gPSBmdW5jdGlvbiBfbm9ybVNpZ24gKCkge1xuICAgIC8vIC0wID0gMFxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgICByZXR1cm4gKHRoaXMucmVkID8gJzxCTi1SOiAnIDogJzxCTjogJykgKyB0aGlzLnRvU3RyaW5nKDE2KSArICc+JztcbiAgfTtcblxuICAvKlxuXG4gIHZhciB6ZXJvcyA9IFtdO1xuICB2YXIgZ3JvdXBTaXplcyA9IFtdO1xuICB2YXIgZ3JvdXBCYXNlcyA9IFtdO1xuXG4gIHZhciBzID0gJyc7XG4gIHZhciBpID0gLTE7XG4gIHdoaWxlICgrK2kgPCBCTi53b3JkU2l6ZSkge1xuICAgIHplcm9zW2ldID0gcztcbiAgICBzICs9ICcwJztcbiAgfVxuICBncm91cFNpemVzWzBdID0gMDtcbiAgZ3JvdXBTaXplc1sxXSA9IDA7XG4gIGdyb3VwQmFzZXNbMF0gPSAwO1xuICBncm91cEJhc2VzWzFdID0gMDtcbiAgdmFyIGJhc2UgPSAyIC0gMTtcbiAgd2hpbGUgKCsrYmFzZSA8IDM2ICsgMSkge1xuICAgIHZhciBncm91cFNpemUgPSAwO1xuICAgIHZhciBncm91cEJhc2UgPSAxO1xuICAgIHdoaWxlIChncm91cEJhc2UgPCAoMSA8PCBCTi53b3JkU2l6ZSkgLyBiYXNlKSB7XG4gICAgICBncm91cEJhc2UgKj0gYmFzZTtcbiAgICAgIGdyb3VwU2l6ZSArPSAxO1xuICAgIH1cbiAgICBncm91cFNpemVzW2Jhc2VdID0gZ3JvdXBTaXplO1xuICAgIGdyb3VwQmFzZXNbYmFzZV0gPSBncm91cEJhc2U7XG4gIH1cblxuICAqL1xuXG4gIHZhciB6ZXJvcyA9IFtcbiAgICAnJyxcbiAgICAnMCcsXG4gICAgJzAwJyxcbiAgICAnMDAwJyxcbiAgICAnMDAwMCcsXG4gICAgJzAwMDAwJyxcbiAgICAnMDAwMDAwJyxcbiAgICAnMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcsXG4gICAgJzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCdcbiAgXTtcblxuICB2YXIgZ3JvdXBTaXplcyA9IFtcbiAgICAwLCAwLFxuICAgIDI1LCAxNiwgMTIsIDExLCAxMCwgOSwgOCxcbiAgICA4LCA3LCA3LCA3LCA3LCA2LCA2LFxuICAgIDYsIDYsIDYsIDYsIDYsIDUsIDUsXG4gICAgNSwgNSwgNSwgNSwgNSwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1XG4gIF07XG5cbiAgdmFyIGdyb3VwQmFzZXMgPSBbXG4gICAgMCwgMCxcbiAgICAzMzU1NDQzMiwgNDMwNDY3MjEsIDE2Nzc3MjE2LCA0ODgyODEyNSwgNjA0NjYxNzYsIDQwMzUzNjA3LCAxNjc3NzIxNixcbiAgICA0MzA0NjcyMSwgMTAwMDAwMDAsIDE5NDg3MTcxLCAzNTgzMTgwOCwgNjI3NDg1MTcsIDc1Mjk1MzYsIDExMzkwNjI1LFxuICAgIDE2Nzc3MjE2LCAyNDEzNzU2OSwgMzQwMTIyMjQsIDQ3MDQ1ODgxLCA2NDAwMDAwMCwgNDA4NDEwMSwgNTE1MzYzMixcbiAgICA2NDM2MzQzLCA3OTYyNjI0LCA5NzY1NjI1LCAxMTg4MTM3NiwgMTQzNDg5MDcsIDE3MjEwMzY4LCAyMDUxMTE0OSxcbiAgICAyNDMwMDAwMCwgMjg2MjkxNTEsIDMzNTU0NDMyLCAzOTEzNTM5MywgNDU0MzU0MjQsIDUyNTIxODc1LCA2MDQ2NjE3NlxuICBdO1xuXG4gIEJOLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nIChiYXNlLCBwYWRkaW5nKSB7XG4gICAgYmFzZSA9IGJhc2UgfHwgMTA7XG4gICAgcGFkZGluZyA9IHBhZGRpbmcgfCAwIHx8IDE7XG5cbiAgICB2YXIgb3V0O1xuICAgIGlmIChiYXNlID09PSAxNiB8fCBiYXNlID09PSAnaGV4Jykge1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgb2ZmID0gMDtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHcgPSB0aGlzLndvcmRzW2ldO1xuICAgICAgICB2YXIgd29yZCA9ICgoKHcgPDwgb2ZmKSB8IGNhcnJ5KSAmIDB4ZmZmZmZmKS50b1N0cmluZygxNik7XG4gICAgICAgIGNhcnJ5ID0gKHcgPj4+ICgyNCAtIG9mZikpICYgMHhmZmZmZmY7XG4gICAgICAgIGlmIChjYXJyeSAhPT0gMCB8fCBpICE9PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1s2IC0gd29yZC5sZW5ndGhdICsgd29yZCArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSB3b3JkICsgb3V0O1xuICAgICAgICB9XG4gICAgICAgIG9mZiArPSAyO1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGktLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICAgIG91dCA9IGNhcnJ5LnRvU3RyaW5nKDE2KSArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KSB7XG4gICAgICAvLyB2YXIgZ3JvdXBTaXplID0gTWF0aC5mbG9vcihCTi53b3JkU2l6ZSAqIE1hdGguTE4yIC8gTWF0aC5sb2coYmFzZSkpO1xuICAgICAgdmFyIGdyb3VwU2l6ZSA9IGdyb3VwU2l6ZXNbYmFzZV07XG4gICAgICAvLyB2YXIgZ3JvdXBCYXNlID0gTWF0aC5wb3coYmFzZSwgZ3JvdXBTaXplKTtcbiAgICAgIHZhciBncm91cEJhc2UgPSBncm91cEJhc2VzW2Jhc2VdO1xuICAgICAgb3V0ID0gJyc7XG4gICAgICB2YXIgYyA9IHRoaXMuY2xvbmUoKTtcbiAgICAgIGMubmVnYXRpdmUgPSAwO1xuICAgICAgd2hpbGUgKCFjLmlzWmVybygpKSB7XG4gICAgICAgIHZhciByID0gYy5tb2RuKGdyb3VwQmFzZSkudG9TdHJpbmcoYmFzZSk7XG4gICAgICAgIGMgPSBjLmlkaXZuKGdyb3VwQmFzZSk7XG5cbiAgICAgICAgaWYgKCFjLmlzWmVybygpKSB7XG4gICAgICAgICAgb3V0ID0gemVyb3NbZ3JvdXBTaXplIC0gci5sZW5ndGhdICsgciArIG91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXQgPSByICsgb3V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5pc1plcm8oKSkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICB3aGlsZSAob3V0Lmxlbmd0aCAlIHBhZGRpbmcgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJzAnICsgb3V0O1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgb3V0ID0gJy0nICsgb3V0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBhc3NlcnQoZmFsc2UsICdCYXNlIHNob3VsZCBiZSBiZXR3ZWVuIDIgYW5kIDM2Jyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvTnVtYmVyID0gZnVuY3Rpb24gdG9OdW1iZXIgKCkge1xuICAgIHZhciByZXQgPSB0aGlzLndvcmRzWzBdO1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMikge1xuICAgICAgcmV0ICs9IHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMyAmJiB0aGlzLndvcmRzWzJdID09PSAweDAxKSB7XG4gICAgICAvLyBOT1RFOiBhdCB0aGlzIHN0YWdlIGl0IGlzIGtub3duIHRoYXQgdGhlIHRvcCBiaXQgaXMgc2V0XG4gICAgICByZXQgKz0gMHgxMDAwMDAwMDAwMDAwMCArICh0aGlzLndvcmRzWzFdICogMHg0MDAwMDAwKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gMikge1xuICAgICAgYXNzZXJ0KGZhbHNlLCAnTnVtYmVyIGNhbiBvbmx5IHNhZmVseSBzdG9yZSB1cCB0byA1MyBiaXRzJyk7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgPyAtcmV0IDogcmV0O1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKDE2KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9CdWZmZXIgPSBmdW5jdGlvbiB0b0J1ZmZlciAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIEJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEJ1ZmZlciwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5ID0gZnVuY3Rpb24gdG9BcnJheSAoZW5kaWFuLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gdGhpcy50b0FycmF5TGlrZShBcnJheSwgZW5kaWFuLCBsZW5ndGgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0FycmF5TGlrZSA9IGZ1bmN0aW9uIHRvQXJyYXlMaWtlIChBcnJheVR5cGUsIGVuZGlhbiwgbGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVMZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGgoKTtcbiAgICB2YXIgcmVxTGVuZ3RoID0gbGVuZ3RoIHx8IE1hdGgubWF4KDEsIGJ5dGVMZW5ndGgpO1xuICAgIGFzc2VydChieXRlTGVuZ3RoIDw9IHJlcUxlbmd0aCwgJ2J5dGUgYXJyYXkgbG9uZ2VyIHRoYW4gZGVzaXJlZCBsZW5ndGgnKTtcbiAgICBhc3NlcnQocmVxTGVuZ3RoID4gMCwgJ1JlcXVlc3RlZCBhcnJheSBsZW5ndGggPD0gMCcpO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuICAgIHZhciBsaXR0bGVFbmRpYW4gPSBlbmRpYW4gPT09ICdsZSc7XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheVR5cGUocmVxTGVuZ3RoKTtcblxuICAgIHZhciBiLCBpO1xuICAgIHZhciBxID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmICghbGl0dGxlRW5kaWFuKSB7XG4gICAgICAvLyBBc3N1bWUgYmlnLWVuZGlhblxuICAgICAgZm9yIChpID0gMDsgaSA8IHJlcUxlbmd0aCAtIGJ5dGVMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbcmVxTGVuZ3RoIC0gaSAtIDFdID0gYjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgIXEuaXNaZXJvKCk7IGkrKykge1xuICAgICAgICBiID0gcS5hbmRsbigweGZmKTtcbiAgICAgICAgcS5pdXNocm4oOCk7XG5cbiAgICAgICAgcmVzW2ldID0gYjtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGkgPCByZXFMZW5ndGg7IGkrKykge1xuICAgICAgICByZXNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgaWYgKE1hdGguY2x6MzIpIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHJldHVybiAzMiAtIE1hdGguY2x6MzIodyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyA9IGZ1bmN0aW9uIF9jb3VudEJpdHMgKHcpIHtcbiAgICAgIHZhciB0ID0gdztcbiAgICAgIHZhciByID0gMDtcbiAgICAgIGlmICh0ID49IDB4MTAwMCkge1xuICAgICAgICByICs9IDEzO1xuICAgICAgICB0ID4+Pj0gMTM7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDQwKSB7XG4gICAgICAgIHIgKz0gNztcbiAgICAgICAgdCA+Pj49IDc7XG4gICAgICB9XG4gICAgICBpZiAodCA+PSAweDgpIHtcbiAgICAgICAgciArPSA0O1xuICAgICAgICB0ID4+Pj0gNDtcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4MDIpIHtcbiAgICAgICAgciArPSAyO1xuICAgICAgICB0ID4+Pj0gMjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICsgdDtcbiAgICB9O1xuICB9XG5cbiAgQk4ucHJvdG90eXBlLl96ZXJvQml0cyA9IGZ1bmN0aW9uIF96ZXJvQml0cyAodykge1xuICAgIC8vIFNob3J0LWN1dFxuICAgIGlmICh3ID09PSAwKSByZXR1cm4gMjY7XG5cbiAgICB2YXIgdCA9IHc7XG4gICAgdmFyIHIgPSAwO1xuICAgIGlmICgodCAmIDB4MWZmZikgPT09IDApIHtcbiAgICAgIHIgKz0gMTM7XG4gICAgICB0ID4+Pj0gMTM7XG4gICAgfVxuICAgIGlmICgodCAmIDB4N2YpID09PSAwKSB7XG4gICAgICByICs9IDc7XG4gICAgICB0ID4+Pj0gNztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHhmKSA9PT0gMCkge1xuICAgICAgciArPSA0O1xuICAgICAgdCA+Pj49IDQ7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MykgPT09IDApIHtcbiAgICAgIHIgKz0gMjtcbiAgICAgIHQgPj4+PSAyO1xuICAgIH1cbiAgICBpZiAoKHQgJiAweDEpID09PSAwKSB7XG4gICAgICByKys7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIC8vIFJldHVybiBudW1iZXIgb2YgdXNlZCBiaXRzIGluIGEgQk5cbiAgQk4ucHJvdG90eXBlLmJpdExlbmd0aCA9IGZ1bmN0aW9uIGJpdExlbmd0aCAoKSB7XG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV07XG4gICAgdmFyIGhpID0gdGhpcy5fY291bnRCaXRzKHcpO1xuICAgIHJldHVybiAodGhpcy5sZW5ndGggLSAxKSAqIDI2ICsgaGk7XG4gIH07XG5cbiAgZnVuY3Rpb24gdG9CaXRBcnJheSAobnVtKSB7XG4gICAgdmFyIHcgPSBuZXcgQXJyYXkobnVtLmJpdExlbmd0aCgpKTtcblxuICAgIGZvciAodmFyIGJpdCA9IDA7IGJpdCA8IHcubGVuZ3RoOyBiaXQrKykge1xuICAgICAgdmFyIG9mZiA9IChiaXQgLyAyNikgfCAwO1xuICAgICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgICAgd1tiaXRdID0gKG51bS53b3Jkc1tvZmZdICYgKDEgPDwgd2JpdCkpID4+PiB3Yml0O1xuICAgIH1cblxuICAgIHJldHVybiB3O1xuICB9XG5cbiAgLy8gTnVtYmVyIG9mIHRyYWlsaW5nIHplcm8gYml0c1xuICBCTi5wcm90b3R5cGUuemVyb0JpdHMgPSBmdW5jdGlvbiB6ZXJvQml0cyAoKSB7XG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHJldHVybiAwO1xuXG4gICAgdmFyIHIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGIgPSB0aGlzLl96ZXJvQml0cyh0aGlzLndvcmRzW2ldKTtcbiAgICAgIHIgKz0gYjtcbiAgICAgIGlmIChiICE9PSAyNikgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ieXRlTGVuZ3RoID0gZnVuY3Rpb24gYnl0ZUxlbmd0aCAoKSB7XG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmJpdExlbmd0aCgpIC8gOCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvVHdvcyA9IGZ1bmN0aW9uIHRvVHdvcyAod2lkdGgpIHtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWJzKCkuaW5vdG4od2lkdGgpLmlhZGRuKDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tVHdvcyA9IGZ1bmN0aW9uIGZyb21Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLnRlc3RuKHdpZHRoIC0gMSkpIHtcbiAgICAgIHJldHVybiB0aGlzLm5vdG4od2lkdGgpLmlhZGRuKDEpLmluZWcoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaXNOZWcgPSBmdW5jdGlvbiBpc05lZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubmVnYXRpdmUgIT09IDA7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG5lZ2F0aXZlIGNsb25lIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUubmVnID0gZnVuY3Rpb24gbmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmluZWcoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5lZyA9IGZ1bmN0aW9uIGluZWcgKCkge1xuICAgIGlmICghdGhpcy5pc1plcm8oKSkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdW9yID0gZnVuY3Rpb24gaXVvciAobnVtKSB7XG4gICAgd2hpbGUgKHRoaXMubGVuZ3RoIDwgbnVtLmxlbmd0aCkge1xuICAgICAgdGhpcy53b3Jkc1t0aGlzLmxlbmd0aCsrXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldIHwgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlvciA9IGZ1bmN0aW9uIGlvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVvcihudW0pO1xuICB9O1xuXG4gIC8vIE9yIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5vciA9IGZ1bmN0aW9uIG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlvcihudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pb3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVvciA9IGZ1bmN0aW9uIHVvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdWFuZCA9IGZ1bmN0aW9uIGl1YW5kIChudW0pIHtcbiAgICAvLyBiID0gbWluLWxlbmd0aChudW0sIHRoaXMpXG4gICAgdmFyIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gdGhpcy53b3Jkc1tpXSAmIG51bS53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFuZCA9IGZ1bmN0aW9uIGlhbmQgKG51bSkge1xuICAgIGFzc2VydCgodGhpcy5uZWdhdGl2ZSB8IG51bS5uZWdhdGl2ZSkgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1YW5kKG51bSk7XG4gIH07XG5cbiAgLy8gQW5kIGBudW1gIHdpdGggYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5hbmQgPSBmdW5jdGlvbiBhbmQgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYW5kKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51YW5kID0gZnVuY3Rpb24gdWFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdWFuZChudW0pO1xuICAgIHJldHVybiBudW0uY2xvbmUoKS5pdWFuZCh0aGlzKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1eG9yID0gZnVuY3Rpb24gaXV4b3IgKG51bSkge1xuICAgIC8vIGEubGVuZ3RoID4gYi5sZW5ndGhcbiAgICB2YXIgYTtcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBhID0gdGhpcztcbiAgICAgIGIgPSBudW07XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBudW07XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldIF4gYi53b3Jkc1tpXTtcbiAgICB9XG5cbiAgICBpZiAodGhpcyAhPT0gYSkge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5peG9yID0gZnVuY3Rpb24gaXhvciAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXV4b3IobnVtKTtcbiAgfTtcblxuICAvLyBYb3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnhvciA9IGZ1bmN0aW9uIHhvciAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5peG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml4b3IodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnV4b3IgPSBmdW5jdGlvbiB1eG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1eG9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1eG9yKHRoaXMpO1xuICB9O1xuXG4gIC8vIE5vdCBgYHRoaXNgYCB3aXRoIGBgd2lkdGhgYCBiaXR3aWR0aFxuICBCTi5wcm90b3R5cGUuaW5vdG4gPSBmdW5jdGlvbiBpbm90biAod2lkdGgpIHtcbiAgICBhc3NlcnQodHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyAmJiB3aWR0aCA+PSAwKTtcblxuICAgIHZhciBieXRlc05lZWRlZCA9IE1hdGguY2VpbCh3aWR0aCAvIDI2KSB8IDA7XG4gICAgdmFyIGJpdHNMZWZ0ID0gd2lkdGggJSAyNjtcblxuICAgIC8vIEV4dGVuZCB0aGUgYnVmZmVyIHdpdGggbGVhZGluZyB6ZXJvZXNcbiAgICB0aGlzLl9leHBhbmQoYnl0ZXNOZWVkZWQpO1xuXG4gICAgaWYgKGJpdHNMZWZ0ID4gMCkge1xuICAgICAgYnl0ZXNOZWVkZWQtLTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgY29tcGxldGUgd29yZHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzTmVlZGVkOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgdGhlIHJlc2lkdWVcbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICB0aGlzLndvcmRzW2ldID0gfnRoaXMud29yZHNbaV0gJiAoMHgzZmZmZmZmID4+ICgyNiAtIGJpdHNMZWZ0KSk7XG4gICAgfVxuXG4gICAgLy8gQW5kIHJlbW92ZSBsZWFkaW5nIHplcm9lc1xuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm5vdG4gPSBmdW5jdGlvbiBub3RuICh3aWR0aCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5vdG4od2lkdGgpO1xuICB9O1xuXG4gIC8vIFNldCBgYml0YCBvZiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNldG4gPSBmdW5jdGlvbiBzZXRuIChiaXQsIHZhbCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyAmJiBiaXQgPj0gMCk7XG5cbiAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgdmFyIHdiaXQgPSBiaXQgJSAyNjtcblxuICAgIHRoaXMuX2V4cGFuZChvZmYgKyAxKTtcblxuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSB8ICgxIDw8IHdiaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzW29mZl0gPSB0aGlzLndvcmRzW29mZl0gJiB+KDEgPDwgd2JpdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBBZGQgYG51bWAgdG8gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAobnVtKSB7XG4gICAgdmFyIHI7XG5cbiAgICAvLyBuZWdhdGl2ZSArIHBvc2l0aXZlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiB0aGlzLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gcG9zaXRpdmUgKyBuZWdhdGl2ZVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByID0gdGhpcy5pc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHIuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhLCBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSByID4+PiAyNjtcbiAgICB9XG4gICAgZm9yICg7IGNhcnJ5ICE9PSAwICYmIGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAvLyBDb3B5IHRoZSByZXN0IG9mIHRoZSB3b3Jkc1xuICAgIH0gZWxzZSBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgZm9yICg7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBhLndvcmRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAobnVtKSB7XG4gICAgdmFyIHJlcztcbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwICYmIHRoaXMubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSB0aGlzLnN1YihudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlIF49IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH0gZWxzZSBpZiAobnVtLm5lZ2F0aXZlID09PSAwICYmIHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgcmVzID0gbnVtLnN1Yih0aGlzKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGQobnVtKTtcblxuICAgIHJldHVybiBudW0uY2xvbmUoKS5pYWRkKHRoaXMpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgIGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAobnVtKSB7XG4gICAgLy8gdGhpcyAtICgtbnVtKSA9IHRoaXMgKyBudW1cbiAgICBpZiAobnVtLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBudW0ubmVnYXRpdmUgPSAwO1xuICAgICAgdmFyIHIgPSB0aGlzLmlhZGQobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcblxuICAgIC8vIC10aGlzIC0gbnVtID0gLSh0aGlzICsgbnVtKVxuICAgIH0gZWxzZSBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlhZGQobnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gICAgfVxuXG4gICAgLy8gQXQgdGhpcyBwb2ludCBib3RoIG51bWJlcnMgYXJlIHBvc2l0aXZlXG4gICAgdmFyIGNtcCA9IHRoaXMuY21wKG51bSk7XG5cbiAgICAvLyBPcHRpbWl6YXRpb24gLSB6ZXJvaWZ5XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIGEgPiBiXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGNtcCA+IDApIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG4gICAgICByID0gKGEud29yZHNbaV0gfCAwKSAtIChiLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHIgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgaWYgKGNhcnJ5ID09PSAwICYmIGkgPCBhLmxlbmd0aCAmJiBhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSk7XG5cbiAgICBpZiAoYSAhPT0gdGhpcykge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBgbnVtYCBmcm9tIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWIobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbWFsbE11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgdmFyIGxlbiA9IChzZWxmLmxlbmd0aCArIG51bS5sZW5ndGgpIHwgMDtcbiAgICBvdXQubGVuZ3RoID0gbGVuO1xuICAgIGxlbiA9IChsZW4gLSAxKSB8IDA7XG5cbiAgICAvLyBQZWVsIG9uZSBpdGVyYXRpb24gKGNvbXBpbGVyIGNhbid0IGRvIGl0LCBiZWNhdXNlIG9mIGNvZGUgY29tcGxleGl0eSlcbiAgICB2YXIgYSA9IHNlbGYud29yZHNbMF0gfCAwO1xuICAgIHZhciBiID0gbnVtLndvcmRzWzBdIHwgMDtcbiAgICB2YXIgciA9IGEgKiBiO1xuXG4gICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICB2YXIgY2FycnkgPSAociAvIDB4NDAwMDAwMCkgfCAwO1xuICAgIG91dC53b3Jkc1swXSA9IGxvO1xuXG4gICAgZm9yICh2YXIgayA9IDE7IGsgPCBsZW47IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBjYXJyeSA+Pj4gMjY7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IChrIC0gaikgfCAwO1xuICAgICAgICBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIGIgPSBudW0ud29yZHNbal0gfCAwO1xuICAgICAgICByID0gYSAqIGIgKyByd29yZDtcbiAgICAgICAgbmNhcnJ5ICs9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkIHwgMDtcbiAgICAgIGNhcnJ5ID0gbmNhcnJ5IHwgMDtcbiAgICB9XG4gICAgaWYgKGNhcnJ5ICE9PSAwKSB7XG4gICAgICBvdXQud29yZHNba10gPSBjYXJyeSB8IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICAvLyBUT0RPKGluZHV0bnkpOiBpdCBtYXkgYmUgcmVhc29uYWJsZSB0byBvbWl0IGl0IGZvciB1c2VycyB3aG8gZG9uJ3QgbmVlZFxuICAvLyB0byB3b3JrIHdpdGggMjU2LWJpdCBudW1iZXJzLCBvdGhlcndpc2UgaXQgZ2l2ZXMgMjAlIGltcHJvdmVtZW50IGZvciAyNTYtYml0XG4gIC8vIG11bHRpcGxpY2F0aW9uIChsaWtlIGVsbGlwdGljIHNlY3AyNTZrMSkuXG4gIHZhciBjb21iMTBNdWxUbyA9IGZ1bmN0aW9uIGNvbWIxME11bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBhID0gc2VsZi53b3JkcztcbiAgICB2YXIgYiA9IG51bS53b3JkcztcbiAgICB2YXIgbyA9IG91dC53b3JkcztcbiAgICB2YXIgYyA9IDA7XG4gICAgdmFyIGxvO1xuICAgIHZhciBtaWQ7XG4gICAgdmFyIGhpO1xuICAgIHZhciBhMCA9IGFbMF0gfCAwO1xuICAgIHZhciBhbDAgPSBhMCAmIDB4MWZmZjtcbiAgICB2YXIgYWgwID0gYTAgPj4+IDEzO1xuICAgIHZhciBhMSA9IGFbMV0gfCAwO1xuICAgIHZhciBhbDEgPSBhMSAmIDB4MWZmZjtcbiAgICB2YXIgYWgxID0gYTEgPj4+IDEzO1xuICAgIHZhciBhMiA9IGFbMl0gfCAwO1xuICAgIHZhciBhbDIgPSBhMiAmIDB4MWZmZjtcbiAgICB2YXIgYWgyID0gYTIgPj4+IDEzO1xuICAgIHZhciBhMyA9IGFbM10gfCAwO1xuICAgIHZhciBhbDMgPSBhMyAmIDB4MWZmZjtcbiAgICB2YXIgYWgzID0gYTMgPj4+IDEzO1xuICAgIHZhciBhNCA9IGFbNF0gfCAwO1xuICAgIHZhciBhbDQgPSBhNCAmIDB4MWZmZjtcbiAgICB2YXIgYWg0ID0gYTQgPj4+IDEzO1xuICAgIHZhciBhNSA9IGFbNV0gfCAwO1xuICAgIHZhciBhbDUgPSBhNSAmIDB4MWZmZjtcbiAgICB2YXIgYWg1ID0gYTUgPj4+IDEzO1xuICAgIHZhciBhNiA9IGFbNl0gfCAwO1xuICAgIHZhciBhbDYgPSBhNiAmIDB4MWZmZjtcbiAgICB2YXIgYWg2ID0gYTYgPj4+IDEzO1xuICAgIHZhciBhNyA9IGFbN10gfCAwO1xuICAgIHZhciBhbDcgPSBhNyAmIDB4MWZmZjtcbiAgICB2YXIgYWg3ID0gYTcgPj4+IDEzO1xuICAgIHZhciBhOCA9IGFbOF0gfCAwO1xuICAgIHZhciBhbDggPSBhOCAmIDB4MWZmZjtcbiAgICB2YXIgYWg4ID0gYTggPj4+IDEzO1xuICAgIHZhciBhOSA9IGFbOV0gfCAwO1xuICAgIHZhciBhbDkgPSBhOSAmIDB4MWZmZjtcbiAgICB2YXIgYWg5ID0gYTkgPj4+IDEzO1xuICAgIHZhciBiMCA9IGJbMF0gfCAwO1xuICAgIHZhciBibDAgPSBiMCAmIDB4MWZmZjtcbiAgICB2YXIgYmgwID0gYjAgPj4+IDEzO1xuICAgIHZhciBiMSA9IGJbMV0gfCAwO1xuICAgIHZhciBibDEgPSBiMSAmIDB4MWZmZjtcbiAgICB2YXIgYmgxID0gYjEgPj4+IDEzO1xuICAgIHZhciBiMiA9IGJbMl0gfCAwO1xuICAgIHZhciBibDIgPSBiMiAmIDB4MWZmZjtcbiAgICB2YXIgYmgyID0gYjIgPj4+IDEzO1xuICAgIHZhciBiMyA9IGJbM10gfCAwO1xuICAgIHZhciBibDMgPSBiMyAmIDB4MWZmZjtcbiAgICB2YXIgYmgzID0gYjMgPj4+IDEzO1xuICAgIHZhciBiNCA9IGJbNF0gfCAwO1xuICAgIHZhciBibDQgPSBiNCAmIDB4MWZmZjtcbiAgICB2YXIgYmg0ID0gYjQgPj4+IDEzO1xuICAgIHZhciBiNSA9IGJbNV0gfCAwO1xuICAgIHZhciBibDUgPSBiNSAmIDB4MWZmZjtcbiAgICB2YXIgYmg1ID0gYjUgPj4+IDEzO1xuICAgIHZhciBiNiA9IGJbNl0gfCAwO1xuICAgIHZhciBibDYgPSBiNiAmIDB4MWZmZjtcbiAgICB2YXIgYmg2ID0gYjYgPj4+IDEzO1xuICAgIHZhciBiNyA9IGJbN10gfCAwO1xuICAgIHZhciBibDcgPSBiNyAmIDB4MWZmZjtcbiAgICB2YXIgYmg3ID0gYjcgPj4+IDEzO1xuICAgIHZhciBiOCA9IGJbOF0gfCAwO1xuICAgIHZhciBibDggPSBiOCAmIDB4MWZmZjtcbiAgICB2YXIgYmg4ID0gYjggPj4+IDEzO1xuICAgIHZhciBiOSA9IGJbOV0gfCAwO1xuICAgIHZhciBibDkgPSBiOSAmIDB4MWZmZjtcbiAgICB2YXIgYmg5ID0gYjkgPj4+IDEzO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0gc2VsZi5uZWdhdGl2ZSBeIG51bS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gMTk7XG4gICAgLyogayA9IDAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDAsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMCwgYmgwKTtcbiAgICB2YXIgdzAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcwID4+PiAyNikpIHwgMDtcbiAgICB3MCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDEsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDEpKSB8IDA7XG4gICAgdmFyIHcxID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MSA+Pj4gMjYpKSB8IDA7XG4gICAgdzEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAyICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWwyLCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDIsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDIsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMikpIHwgMDtcbiAgICB2YXIgdzIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcyID4+PiAyNikpIHwgMDtcbiAgICB3MiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDMsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMykpIHwgMDtcbiAgICB2YXIgdzMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHczID4+PiAyNikpIHwgMDtcbiAgICB3MyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDQsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDQpKSB8IDA7XG4gICAgdmFyIHc0ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NCA+Pj4gMjYpKSB8IDA7XG4gICAgdzQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA1ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw1LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDUsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDUsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNSkpIHwgMDtcbiAgICB2YXIgdzUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc1ID4+PiAyNikpIHwgMDtcbiAgICB3NSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDYsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNikpIHwgMDtcbiAgICB2YXIgdzYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc2ID4+PiAyNikpIHwgMDtcbiAgICB3NiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDcsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNywgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNywgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDAsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgwLCBiaDcpKSB8IDA7XG4gICAgdmFyIHc3ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3NyA+Pj4gMjYpKSB8IDA7XG4gICAgdzcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSA4ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw4LCBibDApO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDgsIGJoMCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDgsIGJoMCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwxKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgxKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOCkpIHwgMDtcbiAgICB2YXIgdzggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc4ID4+PiAyNikpIHwgMDtcbiAgICB3OCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDkgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzkgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc5ID4+PiAyNikpIHwgMDtcbiAgICB3OSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEwICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDEpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMSwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwxLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDEsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDEsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEwID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTAgPj4+IDI2KSkgfCAwO1xuICAgIHcxMCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDExICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDIpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoMik7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsMikpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoMik7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDMsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgzLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwyLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDIsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMSA+Pj4gMjYpKSB8IDA7XG4gICAgdzExICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgzKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwzKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgzKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEyID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTIgPj4+IDI2KSkgfCAwO1xuICAgIHcxMiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDEzICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDQpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNCwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw0LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDQsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDQsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzEzID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTMgPj4+IDI2KSkgfCAwO1xuICAgIHcxMyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE0ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDUpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNSk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNSkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNSk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDYsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg2LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw1LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDUsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE0ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg2KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw2KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg2KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE1ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTUgPj4+IDI2KSkgfCAwO1xuICAgIHcxNSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE2ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDcpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoNyk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsNykpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoNyk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg4KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNywgYmw5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw3LCBiaDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDcsIGJsOSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDcsIGJoOSkpIHwgMDtcbiAgICB2YXIgdzE2ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTYgPj4+IDI2KSkgfCAwO1xuICAgIHcxNiAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDE3ICovXG4gICAgbG8gPSBNYXRoLmltdWwoYWw5LCBibDgpO1xuICAgIG1pZCA9IE1hdGguaW11bChhbDksIGJoOCk7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDksIGJsOCkpIHwgMDtcbiAgICBoaSA9IE1hdGguaW11bChhaDksIGJoOCk7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw4LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDgsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoOCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNyA+Pj4gMjYpKSB8IDA7XG4gICAgdzE3ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg5KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw5KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg5KTtcbiAgICB2YXIgdzE4ID0gKCgoYyArIGxvKSB8IDApICsgKChtaWQgJiAweDFmZmYpIDw8IDEzKSkgfCAwO1xuICAgIGMgPSAoKChoaSArIChtaWQgPj4+IDEzKSkgfCAwKSArICh3MTggPj4+IDI2KSkgfCAwO1xuICAgIHcxOCAmPSAweDNmZmZmZmY7XG4gICAgb1swXSA9IHcwO1xuICAgIG9bMV0gPSB3MTtcbiAgICBvWzJdID0gdzI7XG4gICAgb1szXSA9IHczO1xuICAgIG9bNF0gPSB3NDtcbiAgICBvWzVdID0gdzU7XG4gICAgb1s2XSA9IHc2O1xuICAgIG9bN10gPSB3NztcbiAgICBvWzhdID0gdzg7XG4gICAgb1s5XSA9IHc5O1xuICAgIG9bMTBdID0gdzEwO1xuICAgIG9bMTFdID0gdzExO1xuICAgIG9bMTJdID0gdzEyO1xuICAgIG9bMTNdID0gdzEzO1xuICAgIG9bMTRdID0gdzE0O1xuICAgIG9bMTVdID0gdzE1O1xuICAgIG9bMTZdID0gdzE2O1xuICAgIG9bMTddID0gdzE3O1xuICAgIG9bMThdID0gdzE4O1xuICAgIGlmIChjICE9PSAwKSB7XG4gICAgICBvWzE5XSA9IGM7XG4gICAgICBvdXQubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH07XG5cbiAgLy8gUG9seWZpbGwgY29tYlxuICBpZiAoIU1hdGguaW11bCkge1xuICAgIGNvbWIxME11bFRvID0gc21hbGxNdWxUbztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJpZ011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIG91dC5uZWdhdGl2ZSA9IG51bS5uZWdhdGl2ZSBeIHNlbGYubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aDtcblxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgdmFyIGhuY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgb3V0Lmxlbmd0aCAtIDE7IGsrKykge1xuICAgICAgLy8gU3VtIGFsbCB3b3JkcyB3aXRoIHRoZSBzYW1lIGBpICsgaiA9IGtgIGFuZCBhY2N1bXVsYXRlIGBuY2FycnlgLFxuICAgICAgLy8gbm90ZSB0aGF0IG5jYXJyeSBjb3VsZCBiZSA+PSAweDNmZmZmZmZcbiAgICAgIHZhciBuY2FycnkgPSBobmNhcnJ5O1xuICAgICAgaG5jYXJyeSA9IDA7XG4gICAgICB2YXIgcndvcmQgPSBjYXJyeSAmIDB4M2ZmZmZmZjtcbiAgICAgIHZhciBtYXhKID0gTWF0aC5taW4oaywgbnVtLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaiA9IE1hdGgubWF4KDAsIGsgLSBzZWxmLmxlbmd0aCArIDEpOyBqIDw9IG1heEo7IGorKykge1xuICAgICAgICB2YXIgaSA9IGsgLSBqO1xuICAgICAgICB2YXIgYSA9IHNlbGYud29yZHNbaV0gfCAwO1xuICAgICAgICB2YXIgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHZhciByID0gYSAqIGI7XG5cbiAgICAgICAgdmFyIGxvID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArICgociAvIDB4NDAwMDAwMCkgfCAwKSkgfCAwO1xuICAgICAgICBsbyA9IChsbyArIHJ3b3JkKSB8IDA7XG4gICAgICAgIHJ3b3JkID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICAgIG5jYXJyeSA9IChuY2FycnkgKyAobG8gPj4+IDI2KSkgfCAwO1xuXG4gICAgICAgIGhuY2FycnkgKz0gbmNhcnJ5ID4+PiAyNjtcbiAgICAgICAgbmNhcnJ5ICY9IDB4M2ZmZmZmZjtcbiAgICAgIH1cbiAgICAgIG91dC53b3Jkc1trXSA9IHJ3b3JkO1xuICAgICAgY2FycnkgPSBuY2Fycnk7XG4gICAgICBuY2FycnkgPSBobmNhcnJ5O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQubGVuZ3RoLS07XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9XG5cbiAgZnVuY3Rpb24ganVtYm9NdWxUbyAoc2VsZiwgbnVtLCBvdXQpIHtcbiAgICB2YXIgZmZ0bSA9IG5ldyBGRlRNKCk7XG4gICAgcmV0dXJuIGZmdG0ubXVscChzZWxmLCBudW0sIG91dCk7XG4gIH1cblxuICBCTi5wcm90b3R5cGUubXVsVG8gPSBmdW5jdGlvbiBtdWxUbyAobnVtLCBvdXQpIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aCArIG51bS5sZW5ndGg7XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxMCAmJiBudW0ubGVuZ3RoID09PSAxMCkge1xuICAgICAgcmVzID0gY29tYjEwTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgNjMpIHtcbiAgICAgIHJlcyA9IHNtYWxsTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSBpZiAobGVuIDwgMTAyNCkge1xuICAgICAgcmVzID0gYmlnTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIENvb2xleS1UdWtleSBhbGdvcml0aG0gZm9yIEZGVFxuICAvLyBzbGlnaHRseSByZXZpc2l0ZWQgdG8gcmVseSBvbiBsb29waW5nIGluc3RlYWQgb2YgcmVjdXJzaW9uXG5cbiAgZnVuY3Rpb24gRkZUTSAoeCwgeSkge1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgfVxuXG4gIEZGVE0ucHJvdG90eXBlLm1ha2VSQlQgPSBmdW5jdGlvbiBtYWtlUkJUIChOKSB7XG4gICAgdmFyIHQgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIGwgPSBCTi5wcm90b3R5cGUuX2NvdW50Qml0cyhOKSAtIDE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcbiAgICAgIHRbaV0gPSB0aGlzLnJldkJpbihpLCBsLCBOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdDtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGJpbmFyeS1yZXZlcnNlZCByZXByZXNlbnRhdGlvbiBvZiBgeGBcbiAgRkZUTS5wcm90b3R5cGUucmV2QmluID0gZnVuY3Rpb24gcmV2QmluICh4LCBsLCBOKSB7XG4gICAgaWYgKHggPT09IDAgfHwgeCA9PT0gTiAtIDEpIHJldHVybiB4O1xuXG4gICAgdmFyIHJiID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgcmIgfD0gKHggJiAxKSA8PCAobCAtIGkgLSAxKTtcbiAgICAgIHggPj49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJiO1xuICB9O1xuXG4gIC8vIFBlcmZvcm1zIFwidHdlZWRsaW5nXCIgcGhhc2UsIHRoZXJlZm9yZSAnZW11bGF0aW5nJ1xuICAvLyBiZWhhdmlvdXIgb2YgdGhlIHJlY3Vyc2l2ZSBhbGdvcml0aG1cbiAgRkZUTS5wcm90b3R5cGUucGVybXV0ZSA9IGZ1bmN0aW9uIHBlcm11dGUgKHJidCwgcndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcnR3c1tpXSA9IHJ3c1tyYnRbaV1dO1xuICAgICAgaXR3c1tpXSA9IGl3c1tyYnRbaV1dO1xuICAgIH1cbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbiB0cmFuc2Zvcm0gKHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOLCByYnQpIHtcbiAgICB0aGlzLnBlcm11dGUocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTik7XG5cbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IE47IHMgPDw9IDEpIHtcbiAgICAgIHZhciBsID0gcyA8PCAxO1xuXG4gICAgICB2YXIgcnR3ZGYgPSBNYXRoLmNvcygyICogTWF0aC5QSSAvIGwpO1xuICAgICAgdmFyIGl0d2RmID0gTWF0aC5zaW4oMiAqIE1hdGguUEkgLyBsKTtcblxuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBOOyBwICs9IGwpIHtcbiAgICAgICAgdmFyIHJ0d2RmXyA9IHJ0d2RmO1xuICAgICAgICB2YXIgaXR3ZGZfID0gaXR3ZGY7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzOyBqKyspIHtcbiAgICAgICAgICB2YXIgcmUgPSBydHdzW3AgKyBqXTtcbiAgICAgICAgICB2YXIgaWUgPSBpdHdzW3AgKyBqXTtcblxuICAgICAgICAgIHZhciBybyA9IHJ0d3NbcCArIGogKyBzXTtcbiAgICAgICAgICB2YXIgaW8gPSBpdHdzW3AgKyBqICsgc107XG5cbiAgICAgICAgICB2YXIgcnggPSBydHdkZl8gKiBybyAtIGl0d2RmXyAqIGlvO1xuXG4gICAgICAgICAgaW8gPSBydHdkZl8gKiBpbyArIGl0d2RmXyAqIHJvO1xuICAgICAgICAgIHJvID0gcng7XG5cbiAgICAgICAgICBydHdzW3AgKyBqXSA9IHJlICsgcm87XG4gICAgICAgICAgaXR3c1twICsgal0gPSBpZSArIGlvO1xuXG4gICAgICAgICAgcnR3c1twICsgaiArIHNdID0gcmUgLSBybztcbiAgICAgICAgICBpdHdzW3AgKyBqICsgc10gPSBpZSAtIGlvO1xuXG4gICAgICAgICAgLyoganNoaW50IG1heGRlcHRoIDogZmFsc2UgKi9cbiAgICAgICAgICBpZiAoaiAhPT0gbCkge1xuICAgICAgICAgICAgcnggPSBydHdkZiAqIHJ0d2RmXyAtIGl0d2RmICogaXR3ZGZfO1xuXG4gICAgICAgICAgICBpdHdkZl8gPSBydHdkZiAqIGl0d2RmXyArIGl0d2RmICogcnR3ZGZfO1xuICAgICAgICAgICAgcnR3ZGZfID0gcng7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmd1ZXNzTGVuMTNiID0gZnVuY3Rpb24gZ3Vlc3NMZW4xM2IgKG4sIG0pIHtcbiAgICB2YXIgTiA9IE1hdGgubWF4KG0sIG4pIHwgMTtcbiAgICB2YXIgb2RkID0gTiAmIDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIGZvciAoTiA9IE4gLyAyIHwgMDsgTjsgTiA9IE4gPj4+IDEpIHtcbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4gMSA8PCBpICsgMSArIG9kZDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb25qdWdhdGUgPSBmdW5jdGlvbiBjb25qdWdhdGUgKHJ3cywgaXdzLCBOKSB7XG4gICAgaWYgKE4gPD0gMSkgcmV0dXJuO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdCA9IHJ3c1tpXTtcblxuICAgICAgcndzW2ldID0gcndzW04gLSBpIC0gMV07XG4gICAgICByd3NbTiAtIGkgLSAxXSA9IHQ7XG5cbiAgICAgIHQgPSBpd3NbaV07XG5cbiAgICAgIGl3c1tpXSA9IC1pd3NbTiAtIGkgLSAxXTtcbiAgICAgIGl3c1tOIC0gaSAtIDFdID0gLXQ7XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm5vcm1hbGl6ZTEzYiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZTEzYiAod3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTiAvIDI7IGkrKykge1xuICAgICAgdmFyIHcgPSBNYXRoLnJvdW5kKHdzWzIgKiBpICsgMV0gLyBOKSAqIDB4MjAwMCArXG4gICAgICAgIE1hdGgucm91bmQod3NbMiAqIGldIC8gTikgK1xuICAgICAgICBjYXJyeTtcblxuICAgICAgd3NbaV0gPSB3ICYgMHgzZmZmZmZmO1xuXG4gICAgICBpZiAodyA8IDB4NDAwMDAwMCkge1xuICAgICAgICBjYXJyeSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXJyeSA9IHcgLyAweDQwMDAwMDAgfCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB3cztcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5jb252ZXJ0MTNiID0gZnVuY3Rpb24gY29udmVydDEzYiAod3MsIGxlbiwgcndzLCBOKSB7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBjYXJyeSA9IGNhcnJ5ICsgKHdzW2ldIHwgMCk7XG5cbiAgICAgIHJ3c1syICogaV0gPSBjYXJyeSAmIDB4MWZmZjsgY2FycnkgPSBjYXJyeSA+Pj4gMTM7XG4gICAgICByd3NbMiAqIGkgKyAxXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICB9XG5cbiAgICAvLyBQYWQgd2l0aCB6ZXJvZXNcbiAgICBmb3IgKGkgPSAyICogbGVuOyBpIDwgTjsgKytpKSB7XG4gICAgICByd3NbaV0gPSAwO1xuICAgIH1cblxuICAgIGFzc2VydChjYXJyeSA9PT0gMCk7XG4gICAgYXNzZXJ0KChjYXJyeSAmIH4weDFmZmYpID09PSAwKTtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5zdHViID0gZnVuY3Rpb24gc3R1YiAoTikge1xuICAgIHZhciBwaCA9IG5ldyBBcnJheShOKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgcGhbaV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBwaDtcbiAgfTtcblxuICBGRlRNLnByb3RvdHlwZS5tdWxwID0gZnVuY3Rpb24gbXVscCAoeCwgeSwgb3V0KSB7XG4gICAgdmFyIE4gPSAyICogdGhpcy5ndWVzc0xlbjEzYih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuXG4gICAgdmFyIHJidCA9IHRoaXMubWFrZVJCVChOKTtcblxuICAgIHZhciBfID0gdGhpcy5zdHViKE4pO1xuXG4gICAgdmFyIHJ3cyA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgcndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBucndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBucndzdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbml3c3QgPSBuZXcgQXJyYXkoTik7XG5cbiAgICB2YXIgcm13cyA9IG91dC53b3JkcztcbiAgICBybXdzLmxlbmd0aCA9IE47XG5cbiAgICB0aGlzLmNvbnZlcnQxM2IoeC53b3JkcywgeC5sZW5ndGgsIHJ3cywgTik7XG4gICAgdGhpcy5jb252ZXJ0MTNiKHkud29yZHMsIHkubGVuZ3RoLCBucndzLCBOKTtcblxuICAgIHRoaXMudHJhbnNmb3JtKHJ3cywgXywgcndzdCwgaXdzdCwgTiwgcmJ0KTtcbiAgICB0aGlzLnRyYW5zZm9ybShucndzLCBfLCBucndzdCwgbml3c3QsIE4sIHJidCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdmFyIHJ4ID0gcndzdFtpXSAqIG5yd3N0W2ldIC0gaXdzdFtpXSAqIG5pd3N0W2ldO1xuICAgICAgaXdzdFtpXSA9IHJ3c3RbaV0gKiBuaXdzdFtpXSArIGl3c3RbaV0gKiBucndzdFtpXTtcbiAgICAgIHJ3c3RbaV0gPSByeDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbmp1Z2F0ZShyd3N0LCBpd3N0LCBOKTtcbiAgICB0aGlzLnRyYW5zZm9ybShyd3N0LCBpd3N0LCBybXdzLCBfLCBOLCByYnQpO1xuICAgIHRoaXMuY29uanVnYXRlKHJtd3MsIF8sIE4pO1xuICAgIHRoaXMubm9ybWFsaXplMTNiKHJtd3MsIE4pO1xuXG4gICAgb3V0Lm5lZ2F0aXZlID0geC5uZWdhdGl2ZSBeIHkubmVnYXRpdmU7XG4gICAgb3V0Lmxlbmd0aCA9IHgubGVuZ3RoICsgeS5sZW5ndGg7XG4gICAgcmV0dXJuIG91dC5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGB0aGlzYCBieSBgbnVtYFxuICBCTi5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLm11bFRvKG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBNdWx0aXBseSBlbXBsb3lpbmcgRkZUXG4gIEJOLnByb3RvdHlwZS5tdWxmID0gZnVuY3Rpb24gbXVsZiAobnVtKSB7XG4gICAgdmFyIG91dCA9IG5ldyBCTihudWxsKTtcbiAgICBvdXQud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGggKyBudW0ubGVuZ3RoKTtcbiAgICByZXR1cm4ganVtYm9NdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgTXVsdGlwbGljYXRpb25cbiAgQk4ucHJvdG90eXBlLmltdWwgPSBmdW5jdGlvbiBpbXVsIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLm11bFRvKG51bSwgdGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmltdWxuID0gZnVuY3Rpb24gaW11bG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG5cbiAgICAvLyBDYXJyeVxuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKiBudW07XG4gICAgICB2YXIgbG8gPSAodyAmIDB4M2ZmZmZmZikgKyAoY2FycnkgJiAweDNmZmZmZmYpO1xuICAgICAgY2FycnkgPj49IDI2O1xuICAgICAgY2FycnkgKz0gKHcgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgIC8vIE5PVEU6IGxvIGlzIDI3Yml0IG1heGltdW1cbiAgICAgIGNhcnJ5ICs9IGxvID4+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICB9XG5cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm11bG4gPSBmdW5jdGlvbiBtdWxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmltdWxuKG51bSk7XG4gIH07XG5cbiAgLy8gYHRoaXNgICogYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zcXIgPSBmdW5jdGlvbiBzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLm11bCh0aGlzKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyICgpIHtcbiAgICByZXR1cm4gdGhpcy5pbXVsKHRoaXMuY2xvbmUoKSk7XG4gIH07XG5cbiAgLy8gTWF0aC5wb3coYHRoaXNgLCBgbnVtYClcbiAgQk4ucHJvdG90eXBlLnBvdyA9IGZ1bmN0aW9uIHBvdyAobnVtKSB7XG4gICAgdmFyIHcgPSB0b0JpdEFycmF5KG51bSk7XG4gICAgaWYgKHcubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEJOKDEpO1xuXG4gICAgLy8gU2tpcCBsZWFkaW5nIHplcm9lc1xuICAgIHZhciByZXMgPSB0aGlzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdy5sZW5ndGg7IGkrKywgcmVzID0gcmVzLnNxcigpKSB7XG4gICAgICBpZiAod1tpXSAhPT0gMCkgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKCsraSA8IHcubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBxID0gcmVzLnNxcigpOyBpIDwgdy5sZW5ndGg7IGkrKywgcSA9IHEuc3FyKCkpIHtcbiAgICAgICAgaWYgKHdbaV0gPT09IDApIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHJlcy5tdWwocSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBTaGlmdC1sZWZ0IGluLXBsYWNlXG4gIEJOLnByb3RvdHlwZS5pdXNobG4gPSBmdW5jdGlvbiBpdXNobG4gKGJpdHMpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdHMgPT09ICdudW1iZXInICYmIGJpdHMgPj0gMCk7XG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSAoYml0cyAtIHIpIC8gMjY7XG4gICAgdmFyIGNhcnJ5TWFzayA9ICgweDNmZmZmZmYgPj4+ICgyNiAtIHIpKSA8PCAoMjYgLSByKTtcbiAgICB2YXIgaTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgY2FycnkgPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbmV3Q2FycnkgPSB0aGlzLndvcmRzW2ldICYgY2FycnlNYXNrO1xuICAgICAgICB2YXIgYyA9ICgodGhpcy53b3Jkc1tpXSB8IDApIC0gbmV3Q2FycnkpIDw8IHI7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSBjIHwgY2Fycnk7XG4gICAgICAgIGNhcnJ5ID0gbmV3Q2FycnkgPj4+ICgyNiAtIHIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FycnkpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgICB0aGlzLmxlbmd0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzICE9PSAwKSB7XG4gICAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIHRoaXMud29yZHNbaSArIHNdID0gdGhpcy53b3Jkc1tpXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sZW5ndGggKz0gcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hsbiA9IGZ1bmN0aW9uIGlzaGxuIChiaXRzKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hsbihiaXRzKTtcbiAgfTtcblxuICAvLyBTaGlmdC1yaWdodCBpbi1wbGFjZVxuICAvLyBOT1RFOiBgaGludGAgaXMgYSBsb3dlc3QgYml0IGJlZm9yZSB0cmFpbGluZyB6ZXJvZXNcbiAgLy8gTk9URTogaWYgYGV4dGVuZGVkYCBpcyBwcmVzZW50IC0gaXQgd2lsbCBiZSBmaWxsZWQgd2l0aCBkZXN0cm95ZWQgYml0c1xuICBCTi5wcm90b3R5cGUuaXVzaHJuID0gZnVuY3Rpb24gaXVzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgaDtcbiAgICBpZiAoaGludCkge1xuICAgICAgaCA9IChoaW50IC0gKGhpbnQgJSAyNikpIC8gMjY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGggPSAwO1xuICAgIH1cblxuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gTWF0aC5taW4oKGJpdHMgLSByKSAvIDI2LCB0aGlzLmxlbmd0aCk7XG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgdmFyIG1hc2tlZFdvcmRzID0gZXh0ZW5kZWQ7XG5cbiAgICBoIC09IHM7XG4gICAgaCA9IE1hdGgubWF4KDAsIGgpO1xuXG4gICAgLy8gRXh0ZW5kZWQgbW9kZSwgY29weSBtYXNrZWQgcGFydFxuICAgIGlmIChtYXNrZWRXb3Jkcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzOyBpKyspIHtcbiAgICAgICAgbWFza2VkV29yZHMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuICAgICAgbWFza2VkV29yZHMubGVuZ3RoID0gcztcbiAgICB9XG5cbiAgICBpZiAocyA9PT0gMCkge1xuICAgICAgLy8gTm8tb3AsIHdlIHNob3VsZCBub3QgbW92ZSBhbnl0aGluZyBhdCBhbGxcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID4gcykge1xuICAgICAgdGhpcy5sZW5ndGggLT0gcztcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2kgKyBzXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IDA7XG4gICAgICB0aGlzLmxlbmd0aCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMCAmJiAoY2FycnkgIT09IDAgfHwgaSA+PSBoKTsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IChjYXJyeSA8PCAoMjYgLSByKSkgfCAod29yZCA+Pj4gcik7XG4gICAgICBjYXJyeSA9IHdvcmQgJiBtYXNrO1xuICAgIH1cblxuICAgIC8vIFB1c2ggY2FycmllZCBiaXRzIGFzIGEgbWFza1xuICAgIGlmIChtYXNrZWRXb3JkcyAmJiBjYXJyeSAhPT0gMCkge1xuICAgICAgbWFza2VkV29yZHMud29yZHNbbWFza2VkV29yZHMubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc2hybiA9IGZ1bmN0aW9uIGlzaHJuIChiaXRzLCBoaW50LCBleHRlbmRlZCkge1xuICAgIC8vIFRPRE8oaW5kdXRueSk6IGltcGxlbWVudCBtZVxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXNocm4oYml0cywgaGludCwgZXh0ZW5kZWQpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnRcbiAgQk4ucHJvdG90eXBlLnNobG4gPSBmdW5jdGlvbiBzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hsbihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNobG4gPSBmdW5jdGlvbiB1c2hsbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0XG4gIEJOLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gc2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXNocm4oYml0cyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVzaHJuID0gZnVuY3Rpb24gdXNocm4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLml1c2hybihiaXRzKTtcbiAgfTtcblxuICAvLyBUZXN0IGlmIG4gYml0IGlzIHNldFxuICBCTi5wcm90b3R5cGUudGVzdG4gPSBmdW5jdGlvbiB0ZXN0biAoYml0KSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcbiAgICB2YXIgciA9IGJpdCAlIDI2O1xuICAgIHZhciBzID0gKGJpdCAtIHIpIC8gMjY7XG4gICAgdmFyIHEgPSAxIDw8IHI7XG5cbiAgICAvLyBGYXN0IGNhc2U6IGJpdCBpcyBtdWNoIGhpZ2hlciB0aGFuIGFsbCBleGlzdGluZyB3b3Jkc1xuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSByZXR1cm4gZmFsc2U7XG5cbiAgICAvLyBDaGVjayBiaXQgYW5kIHJldHVyblxuICAgIHZhciB3ID0gdGhpcy53b3Jkc1tzXTtcblxuICAgIHJldHVybiAhISh3ICYgcSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyIChpbi1wbGFjZSlcbiAgQk4ucHJvdG90eXBlLmltYXNrbiA9IGZ1bmN0aW9uIGltYXNrbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcblxuICAgIGFzc2VydCh0aGlzLm5lZ2F0aXZlID09PSAwLCAnaW1hc2tuIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZSBudW1iZXJzJyk7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHMrKztcbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1pbihzLCB0aGlzLmxlbmd0aCk7XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgdmFyIG1hc2sgPSAweDNmZmZmZmYgXiAoKDB4M2ZmZmZmZiA+Pj4gcikgPDwgcik7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoIC0gMV0gJj0gbWFzaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFJldHVybiBvbmx5IGxvd2VycyBiaXRzIG9mIG51bWJlclxuICBCTi5wcm90b3R5cGUubWFza24gPSBmdW5jdGlvbiBtYXNrbiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW1hc2tuKGJpdHMpO1xuICB9O1xuXG4gIC8vIEFkZCBwbGFpbiBudW1iZXIgYG51bWAgdG8gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pYWRkbiA9IGZ1bmN0aW9uIGlhZGRuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pc3VibigtbnVtKTtcblxuICAgIC8vIFBvc3NpYmxlIHNpZ24gY2hhbmdlXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiAodGhpcy53b3Jkc1swXSB8IDApIDwgbnVtKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gPSBudW0gLSAodGhpcy53b3Jkc1swXSB8IDApO1xuICAgICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pc3VibihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aG91dCBjaGVja3NcbiAgICByZXR1cm4gdGhpcy5faWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2lhZGRuID0gZnVuY3Rpb24gX2lhZGRuIChudW0pIHtcbiAgICB0aGlzLndvcmRzWzBdICs9IG51bTtcblxuICAgIC8vIENhcnJ5XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldID49IDB4NDAwMDAwMDsgaSsrKSB7XG4gICAgICB0aGlzLndvcmRzW2ldIC09IDB4NDAwMDAwMDtcbiAgICAgIGlmIChpID09PSB0aGlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0gPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgMV0rKztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5sZW5ndGggPSBNYXRoLm1heCh0aGlzLmxlbmd0aCwgaSArIDEpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgcGxhaW4gbnVtYmVyIGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5pc3VibiA9IGZ1bmN0aW9uIGlzdWJuIChudW0pIHtcbiAgICBhc3NlcnQodHlwZW9mIG51bSA9PT0gJ251bWJlcicpO1xuICAgIGFzc2VydChudW0gPCAweDQwMDAwMDApO1xuICAgIGlmIChudW0gPCAwKSByZXR1cm4gdGhpcy5pYWRkbigtbnVtKTtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZG4obnVtKTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdGhpcy53b3Jkc1swXSAtPSBudW07XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEgJiYgdGhpcy53b3Jkc1swXSA8IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAtdGhpcy53b3Jkc1swXTtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDYXJyeVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aCAmJiB0aGlzLndvcmRzW2ldIDwgMDsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gKz0gMHg0MDAwMDAwO1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSAtPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFkZG4gPSBmdW5jdGlvbiBhZGRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlhZGRuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnN1Ym4gPSBmdW5jdGlvbiBzdWJuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzdWJuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlhYnMgPSBmdW5jdGlvbiBpYWJzICgpIHtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5hYnMgPSBmdW5jdGlvbiBhYnMgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFicygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faXNobG5zdWJtdWwgPSBmdW5jdGlvbiBfaXNobG5zdWJtdWwgKG51bSwgbXVsLCBzaGlmdCkge1xuICAgIHZhciBsZW4gPSBudW0ubGVuZ3RoICsgc2hpZnQ7XG4gICAgdmFyIGk7XG5cbiAgICB0aGlzLl9leHBhbmQobGVuKTtcblxuICAgIHZhciB3O1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdyA9ICh0aGlzLndvcmRzW2kgKyBzaGlmdF0gfCAwKSArIGNhcnJ5O1xuICAgICAgdmFyIHJpZ2h0ID0gKG51bS53b3Jkc1tpXSB8IDApICogbXVsO1xuICAgICAgdyAtPSByaWdodCAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gKHcgPj4gMjYpIC0gKChyaWdodCAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgdGhpcy5sZW5ndGggLSBzaGlmdDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICBjYXJyeSA9IHcgPj4gMjY7XG4gICAgICB0aGlzLndvcmRzW2kgKyBzaGlmdF0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSA9PT0gMCkgcmV0dXJuIHRoaXMuc3RyaXAoKTtcblxuICAgIC8vIFN1YnRyYWN0aW9uIG92ZXJmbG93XG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAtMSk7XG4gICAgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gLSh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3ICYgMHgzZmZmZmZmO1xuICAgIH1cbiAgICB0aGlzLm5lZ2F0aXZlID0gMTtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl93b3JkRGl2ID0gZnVuY3Rpb24gX3dvcmREaXYgKG51bSwgbW9kZSkge1xuICAgIHZhciBzaGlmdCA9IHRoaXMubGVuZ3RoIC0gbnVtLmxlbmd0aDtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtO1xuXG4gICAgLy8gTm9ybWFsaXplXG4gICAgdmFyIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgdmFyIGJoaUJpdHMgPSB0aGlzLl9jb3VudEJpdHMoYmhpKTtcbiAgICBzaGlmdCA9IDI2IC0gYmhpQml0cztcbiAgICBpZiAoc2hpZnQgIT09IDApIHtcbiAgICAgIGIgPSBiLnVzaGxuKHNoaWZ0KTtcbiAgICAgIGEuaXVzaGxuKHNoaWZ0KTtcbiAgICAgIGJoaSA9IGIud29yZHNbYi5sZW5ndGggLSAxXSB8IDA7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBxdW90aWVudFxuICAgIHZhciBtID0gYS5sZW5ndGggLSBiLmxlbmd0aDtcbiAgICB2YXIgcTtcblxuICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgcSA9IG5ldyBCTihudWxsKTtcbiAgICAgIHEubGVuZ3RoID0gbSArIDE7XG4gICAgICBxLndvcmRzID0gbmV3IEFycmF5KHEubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcS5sZW5ndGg7IGkrKykge1xuICAgICAgICBxLndvcmRzW2ldID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlmZiA9IGEuY2xvbmUoKS5faXNobG5zdWJtdWwoYiwgMSwgbSk7XG4gICAgaWYgKGRpZmYubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIGEgPSBkaWZmO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1ttXSA9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaiA9IG0gLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgdmFyIHFqID0gKGEud29yZHNbYi5sZW5ndGggKyBqXSB8IDApICogMHg0MDAwMDAwICtcbiAgICAgICAgKGEud29yZHNbYi5sZW5ndGggKyBqIC0gMV0gfCAwKTtcblxuICAgICAgLy8gTk9URTogKHFqIC8gYmhpKSBpcyAoMHgzZmZmZmZmICogMHg0MDAwMDAwICsgMHgzZmZmZmZmKSAvIDB4MjAwMDAwMCBtYXhcbiAgICAgIC8vICgweDdmZmZmZmYpXG4gICAgICBxaiA9IE1hdGgubWluKChxaiAvIGJoaSkgfCAwLCAweDNmZmZmZmYpO1xuXG4gICAgICBhLl9pc2hsbnN1Ym11bChiLCBxaiwgaik7XG4gICAgICB3aGlsZSAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBxai0tO1xuICAgICAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICAgICAgYS5faXNobG5zdWJtdWwoYiwgMSwgaik7XG4gICAgICAgIGlmICghYS5pc1plcm8oKSkge1xuICAgICAgICAgIGEubmVnYXRpdmUgXj0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHEpIHtcbiAgICAgICAgcS53b3Jkc1tqXSA9IHFqO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocSkge1xuICAgICAgcS5zdHJpcCgpO1xuICAgIH1cbiAgICBhLnN0cmlwKCk7XG5cbiAgICAvLyBEZW5vcm1hbGl6ZVxuICAgIGlmIChtb2RlICE9PSAnZGl2JyAmJiBzaGlmdCAhPT0gMCkge1xuICAgICAgYS5pdXNocm4oc2hpZnQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkaXY6IHEgfHwgbnVsbCxcbiAgICAgIG1vZDogYVxuICAgIH07XG4gIH07XG5cbiAgLy8gTk9URTogMSkgYG1vZGVgIGNhbiBiZSBzZXQgdG8gYG1vZGAgdG8gcmVxdWVzdCBtb2Qgb25seSxcbiAgLy8gICAgICAgdG8gYGRpdmAgdG8gcmVxdWVzdCBkaXYgb25seSwgb3IgYmUgYWJzZW50IHRvXG4gIC8vICAgICAgIHJlcXVlc3QgYm90aCBkaXYgJiBtb2RcbiAgLy8gICAgICAgMikgYHBvc2l0aXZlYCBpcyB0cnVlIGlmIHVuc2lnbmVkIG1vZCBpcyByZXF1ZXN0ZWRcbiAgQk4ucHJvdG90eXBlLmRpdm1vZCA9IGZ1bmN0aW9uIGRpdm1vZCAobnVtLCBtb2RlLCBwb3NpdGl2ZSkge1xuICAgIGFzc2VydCghbnVtLmlzWmVybygpKTtcblxuICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiBuZXcgQk4oMClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGRpdiwgbW9kLCByZXM7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSB7XG4gICAgICByZXMgPSB0aGlzLm5lZygpLmRpdm1vZChudW0sIG1vZGUpO1xuXG4gICAgICBpZiAobW9kZSAhPT0gJ21vZCcpIHtcbiAgICAgICAgZGl2ID0gcmVzLmRpdi5uZWcoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaWFkZChudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IG1vZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSA9PT0gMCAmJiBudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IGRpdixcbiAgICAgICAgbW9kOiByZXMubW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICgodGhpcy5uZWdhdGl2ZSAmIG51bS5uZWdhdGl2ZSkgIT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bS5uZWcoKSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnZGl2Jykge1xuICAgICAgICBtb2QgPSByZXMubW9kLm5lZygpO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgbW9kLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgICAgbW9kLmlzdWIobnVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IHJlcy5kaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmUgYXQgdGhpcyBwb2ludFxuXG4gICAgLy8gU3RyaXAgYm90aCBudW1iZXJzIHRvIGFwcHJveGltYXRlIHNoaWZ0IHZhbHVlXG4gICAgaWYgKG51bS5sZW5ndGggPiB0aGlzLmxlbmd0aCB8fCB0aGlzLmNtcChudW0pIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBuZXcgQk4oMCksXG4gICAgICAgIG1vZDogdGhpc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBWZXJ5IHNob3J0IHJlZHVjdGlvblxuICAgIGlmIChudW0ubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAobW9kZSA9PT0gJ2RpdicpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IHRoaXMuZGl2bihudW0ud29yZHNbMF0pLFxuICAgICAgICAgIG1vZDogbnVsbFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSA9PT0gJ21vZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkaXY6IG51bGwsXG4gICAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgIG1vZDogbmV3IEJOKHRoaXMubW9kbihudW0ud29yZHNbMF0pKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fd29yZERpdihudW0sIG1vZGUpO1xuICB9O1xuXG4gIC8vIEZpbmQgYHRoaXNgIC8gYG51bWBcbiAgQk4ucHJvdG90eXBlLmRpdiA9IGZ1bmN0aW9uIGRpdiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ2RpdicsIGZhbHNlKS5kaXY7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgJSBgbnVtYFxuICBCTi5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnbW9kJywgZmFsc2UpLm1vZDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uIHVtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCB0cnVlKS5tb2Q7XG4gIH07XG5cbiAgLy8gRmluZCBSb3VuZChgdGhpc2AgLyBgbnVtYClcbiAgQk4ucHJvdG90eXBlLmRpdlJvdW5kID0gZnVuY3Rpb24gZGl2Um91bmQgKG51bSkge1xuICAgIHZhciBkbSA9IHRoaXMuZGl2bW9kKG51bSk7XG5cbiAgICAvLyBGYXN0IGNhc2UgLSBleGFjdCBkaXZpc2lvblxuICAgIGlmIChkbS5tb2QuaXNaZXJvKCkpIHJldHVybiBkbS5kaXY7XG5cbiAgICB2YXIgbW9kID0gZG0uZGl2Lm5lZ2F0aXZlICE9PSAwID8gZG0ubW9kLmlzdWIobnVtKSA6IGRtLm1vZDtcblxuICAgIHZhciBoYWxmID0gbnVtLnVzaHJuKDEpO1xuICAgIHZhciByMiA9IG51bS5hbmRsbigxKTtcbiAgICB2YXIgY21wID0gbW9kLmNtcChoYWxmKTtcblxuICAgIC8vIFJvdW5kIGRvd25cbiAgICBpZiAoY21wIDwgMCB8fCByMiA9PT0gMSAmJiBjbXAgPT09IDApIHJldHVybiBkbS5kaXY7XG5cbiAgICAvLyBSb3VuZCB1cFxuICAgIHJldHVybiBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5kaXYuaXN1Ym4oMSkgOiBkbS5kaXYuaWFkZG4oMSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLm1vZG4gPSBmdW5jdGlvbiBtb2RuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG4gICAgdmFyIHAgPSAoMSA8PCAyNikgJSBudW07XG5cbiAgICB2YXIgYWNjID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgYWNjID0gKHAgKiBhY2MgKyAodGhpcy53b3Jkc1tpXSB8IDApKSAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjO1xuICB9O1xuXG4gIC8vIEluLXBsYWNlIGRpdmlzaW9uIGJ5IG51bWJlclxuICBCTi5wcm90b3R5cGUuaWRpdm4gPSBmdW5jdGlvbiBpZGl2biAobnVtKSB7XG4gICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYpO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIHcgPSAodGhpcy53b3Jkc1tpXSB8IDApICsgY2FycnkgKiAweDQwMDAwMDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKHcgLyBudW0pIHwgMDtcbiAgICAgIGNhcnJ5ID0gdyAlIG51bTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5kaXZuID0gZnVuY3Rpb24gZGl2biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pZGl2bihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lZ2NkID0gZnVuY3Rpb24gZWdjZCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIHggPSB0aGlzO1xuICAgIHZhciB5ID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKHgubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHggPSB4LnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSB4LmNsb25lKCk7XG4gICAgfVxuXG4gICAgLy8gQSAqIHggKyBCICogeSA9IHhcbiAgICB2YXIgQSA9IG5ldyBCTigxKTtcbiAgICB2YXIgQiA9IG5ldyBCTigwKTtcblxuICAgIC8vIEMgKiB4ICsgRCAqIHkgPSB5XG4gICAgdmFyIEMgPSBuZXcgQk4oMCk7XG4gICAgdmFyIEQgPSBuZXcgQk4oMSk7XG5cbiAgICB2YXIgZyA9IDA7XG5cbiAgICB3aGlsZSAoeC5pc0V2ZW4oKSAmJiB5LmlzRXZlbigpKSB7XG4gICAgICB4Lml1c2hybigxKTtcbiAgICAgIHkuaXVzaHJuKDEpO1xuICAgICAgKytnO1xuICAgIH1cblxuICAgIHZhciB5cCA9IHkuY2xvbmUoKTtcbiAgICB2YXIgeHAgPSB4LmNsb25lKCk7XG5cbiAgICB3aGlsZSAoIXguaXNaZXJvKCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7ICh4LndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgeC5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEEuaXNPZGQoKSB8fCBCLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEEuaWFkZCh5cCk7XG4gICAgICAgICAgICBCLmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEEuaXVzaHJuKDEpO1xuICAgICAgICAgIEIuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7ICh5LndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgeS5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKEMuaXNPZGQoKSB8fCBELmlzT2RkKCkpIHtcbiAgICAgICAgICAgIEMuaWFkZCh5cCk7XG4gICAgICAgICAgICBELmlzdWIoeHApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEMuaXVzaHJuKDEpO1xuICAgICAgICAgIEQuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh4LmNtcCh5KSA+PSAwKSB7XG4gICAgICAgIHguaXN1Yih5KTtcbiAgICAgICAgQS5pc3ViKEMpO1xuICAgICAgICBCLmlzdWIoRCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5LmlzdWIoeCk7XG4gICAgICAgIEMuaXN1YihBKTtcbiAgICAgICAgRC5pc3ViKEIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhOiBDLFxuICAgICAgYjogRCxcbiAgICAgIGdjZDogeS5pdXNobG4oZylcbiAgICB9O1xuICB9O1xuXG4gIC8vIFRoaXMgaXMgcmVkdWNlZCBpbmNhcm5hdGlvbiBvZiB0aGUgYmluYXJ5IEVFQVxuICAvLyBhYm92ZSwgZGVzaWduYXRlZCB0byBpbnZlcnQgbWVtYmVycyBvZiB0aGVcbiAgLy8gX3ByaW1lXyBmaWVsZHMgRihwKSBhdCBhIG1heGltYWwgc3BlZWRcbiAgQk4ucHJvdG90eXBlLl9pbnZtcCA9IGZ1bmN0aW9uIF9pbnZtcCAocCkge1xuICAgIGFzc2VydChwLm5lZ2F0aXZlID09PSAwKTtcbiAgICBhc3NlcnQoIXAuaXNaZXJvKCkpO1xuXG4gICAgdmFyIGEgPSB0aGlzO1xuICAgIHZhciBiID0gcC5jbG9uZSgpO1xuXG4gICAgaWYgKGEubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGEgPSBhLnVtb2QocCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGEgPSBhLmNsb25lKCk7XG4gICAgfVxuXG4gICAgdmFyIHgxID0gbmV3IEJOKDEpO1xuICAgIHZhciB4MiA9IG5ldyBCTigwKTtcblxuICAgIHZhciBkZWx0YSA9IGIuY2xvbmUoKTtcblxuICAgIHdoaWxlIChhLmNtcG4oMSkgPiAwICYmIGIuY21wbigxKSA+IDApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpbSA9IDE7IChhLndvcmRzWzBdICYgaW0pID09PSAwICYmIGkgPCAyNjsgKytpLCBpbSA8PD0gMSk7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgYS5pdXNocm4oaSk7XG4gICAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgxLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgxLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgxLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBqID0gMCwgam0gPSAxOyAoYi53b3Jkc1swXSAmIGptKSA9PT0gMCAmJiBqIDwgMjY7ICsraiwgam0gPDw9IDEpO1xuICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgIGIuaXVzaHJuKGopO1xuICAgICAgICB3aGlsZSAoai0tID4gMCkge1xuICAgICAgICAgIGlmICh4Mi5pc09kZCgpKSB7XG4gICAgICAgICAgICB4Mi5pYWRkKGRlbHRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB4Mi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGEuY21wKGIpID49IDApIHtcbiAgICAgICAgYS5pc3ViKGIpO1xuICAgICAgICB4MS5pc3ViKHgyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIuaXN1YihhKTtcbiAgICAgICAgeDIuaXN1Yih4MSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlcztcbiAgICBpZiAoYS5jbXBuKDEpID09PSAwKSB7XG4gICAgICByZXMgPSB4MTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0geDI7XG4gICAgfVxuXG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQocCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ2NkID0gZnVuY3Rpb24gZ2NkIChudW0pIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIG51bS5hYnMoKTtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gdGhpcy5hYnMoKTtcblxuICAgIHZhciBhID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBiID0gbnVtLmNsb25lKCk7XG4gICAgYS5uZWdhdGl2ZSA9IDA7XG4gICAgYi5uZWdhdGl2ZSA9IDA7XG5cbiAgICAvLyBSZW1vdmUgY29tbW9uIGZhY3RvciBvZiB0d29cbiAgICBmb3IgKHZhciBzaGlmdCA9IDA7IGEuaXNFdmVuKCkgJiYgYi5pc0V2ZW4oKTsgc2hpZnQrKykge1xuICAgICAgYS5pdXNocm4oMSk7XG4gICAgICBiLml1c2hybigxKTtcbiAgICB9XG5cbiAgICBkbyB7XG4gICAgICB3aGlsZSAoYS5pc0V2ZW4oKSkge1xuICAgICAgICBhLml1c2hybigxKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChiLmlzRXZlbigpKSB7XG4gICAgICAgIGIuaXVzaHJuKDEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgciA9IGEuY21wKGIpO1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIC8vIFN3YXAgYGFgIGFuZCBgYmAgdG8gbWFrZSBgYWAgYWx3YXlzIGJpZ2dlciB0aGFuIGBiYFxuICAgICAgICB2YXIgdCA9IGE7XG4gICAgICAgIGEgPSBiO1xuICAgICAgICBiID0gdDtcbiAgICAgIH0gZWxzZSBpZiAociA9PT0gMCB8fCBiLmNtcG4oMSkgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGEuaXN1YihiKTtcbiAgICB9IHdoaWxlICh0cnVlKTtcblxuICAgIHJldHVybiBiLml1c2hsbihzaGlmdCk7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IG51bWJlciBpbiB0aGUgZmllbGQgRihudW0pXG4gIEJOLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZWdjZChudW0pLmEudW1vZChudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc0V2ZW4gPSBmdW5jdGlvbiBpc0V2ZW4gKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc09kZCA9IGZ1bmN0aW9uIGlzT2RkICgpIHtcbiAgICByZXR1cm4gKHRoaXMud29yZHNbMF0gJiAxKSA9PT0gMTtcbiAgfTtcblxuICAvLyBBbmQgZmlyc3Qgd29yZCBhbmQgbnVtXG4gIEJOLnByb3RvdHlwZS5hbmRsbiA9IGZ1bmN0aW9uIGFuZGxuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy53b3Jkc1swXSAmIG51bTtcbiAgfTtcblxuICAvLyBJbmNyZW1lbnQgYXQgdGhlIGJpdCBwb3NpdGlvbiBpbi1saW5lXG4gIEJOLnByb3RvdHlwZS5iaW5jbiA9IGZ1bmN0aW9uIGJpbmNuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicpO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHtcbiAgICAgIHRoaXMuX2V4cGFuZChzICsgMSk7XG4gICAgICB0aGlzLndvcmRzW3NdIHw9IHE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgYml0IGFuZCBwcm9wYWdhdGUsIGlmIG5lZWRlZFxuICAgIHZhciBjYXJyeSA9IHE7XG4gICAgZm9yICh2YXIgaSA9IHM7IGNhcnJ5ICE9PSAwICYmIGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdyArPSBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+Pj4gMjY7XG4gICAgICB3ICY9IDB4M2ZmZmZmZjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB3O1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSBjYXJyeTtcbiAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc1plcm8gPSBmdW5jdGlvbiBpc1plcm8gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdID09PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5jbXBuID0gZnVuY3Rpb24gY21wbiAobnVtKSB7XG4gICAgdmFyIG5lZ2F0aXZlID0gbnVtIDwgMDtcblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmICFuZWdhdGl2ZSkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG5lZ2F0aXZlKSByZXR1cm4gMTtcblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIHZhciByZXM7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG5lZ2F0aXZlKSB7XG4gICAgICAgIG51bSA9IC1udW07XG4gICAgICB9XG5cbiAgICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmLCAnTnVtYmVyIGlzIHRvbyBiaWcnKTtcblxuICAgICAgdmFyIHcgPSB0aGlzLndvcmRzWzBdIHwgMDtcbiAgICAgIHJlcyA9IHcgPT09IG51bSA/IDAgOiB3IDwgbnVtID8gLTEgOiAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29tcGFyZSB0d28gbnVtYmVycyBhbmQgcmV0dXJuOlxuICAvLyAxIC0gaWYgYHRoaXNgID4gYG51bWBcbiAgLy8gMCAtIGlmIGB0aGlzYCA9PSBgbnVtYFxuICAvLyAtMSAtIGlmIGB0aGlzYCA8IGBudW1gXG4gIEJOLnByb3RvdHlwZS5jbXAgPSBmdW5jdGlvbiBjbXAgKG51bSkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwICYmIG51bS5uZWdhdGl2ZSA9PT0gMCkgcmV0dXJuIC0xO1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIDE7XG5cbiAgICB2YXIgcmVzID0gdGhpcy51Y21wKG51bSk7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHJldHVybiAtcmVzIHwgMDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFVuc2lnbmVkIGNvbXBhcmlzb25cbiAgQk4ucHJvdG90eXBlLnVjbXAgPSBmdW5jdGlvbiB1Y21wIChudW0pIHtcbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBoYXZlIHRoZSBzYW1lIHNpZ25cbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSByZXR1cm4gLTE7XG5cbiAgICB2YXIgcmVzID0gMDtcbiAgICBmb3IgKHZhciBpID0gdGhpcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGEgPSB0aGlzLndvcmRzW2ldIHwgMDtcbiAgICAgIHZhciBiID0gbnVtLndvcmRzW2ldIHwgMDtcblxuICAgICAgaWYgKGEgPT09IGIpIGNvbnRpbnVlO1xuICAgICAgaWYgKGEgPCBiKSB7XG4gICAgICAgIHJlcyA9IC0xO1xuICAgICAgfSBlbHNlIGlmIChhID4gYikge1xuICAgICAgICByZXMgPSAxO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0biA9IGZ1bmN0aW9uIGd0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndCA9IGZ1bmN0aW9uIGd0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RlbiA9IGZ1bmN0aW9uIGd0ZW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA+PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGUgPSBmdW5jdGlvbiBndGUgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0biA9IGZ1bmN0aW9uIGx0biAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID09PSAtMTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHQgPSBmdW5jdGlvbiBsdCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdGVuID0gZnVuY3Rpb24gbHRlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pIDw9IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZSA9IGZ1bmN0aW9uIGx0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXFuID0gZnVuY3Rpb24gZXFuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAwO1xuICB9O1xuXG4gIC8vXG4gIC8vIEEgcmVkdWNlIGNvbnRleHQsIGNvdWxkIGJlIHVzaW5nIG1vbnRnb21lcnkgb3Igc29tZXRoaW5nIGJldHRlciwgZGVwZW5kaW5nXG4gIC8vIG9uIHRoZSBgbWAgaXRzZWxmLlxuICAvL1xuICBCTi5yZWQgPSBmdW5jdGlvbiByZWQgKG51bSkge1xuICAgIHJldHVybiBuZXcgUmVkKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvUmVkID0gZnVuY3Rpb24gdG9SZWQgKGN0eCkge1xuICAgIGFzc2VydCghdGhpcy5yZWQsICdBbHJlYWR5IGEgbnVtYmVyIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIHJldHVybiBjdHguY29udmVydFRvKHRoaXMpLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mcm9tUmVkID0gZnVuY3Rpb24gZnJvbVJlZCAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAnZnJvbVJlZCB3b3JrcyBvbmx5IHdpdGggbnVtYmVycyBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLnJlZC5jb252ZXJ0RnJvbSh0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2ZvcmNlUmVkID0gZnVuY3Rpb24gX2ZvcmNlUmVkIChjdHgpIHtcbiAgICB0aGlzLnJlZCA9IGN0eDtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZm9yY2VSZWQgPSBmdW5jdGlvbiBmb3JjZVJlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICByZXR1cm4gdGhpcy5fZm9yY2VSZWQoY3R4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkQWRkID0gZnVuY3Rpb24gcmVkQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRBZGQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJQWRkID0gZnVuY3Rpb24gcmVkSUFkZCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSUFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaWFkZCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTdWIgPSBmdW5jdGlvbiByZWRTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFN1YiB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTdWIgPSBmdW5jdGlvbiByZWRJU3ViIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3ViKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNobCA9IGZ1bmN0aW9uIHJlZFNobCAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU2hsIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zaGwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkTXVsID0gZnVuY3Rpb24gcmVkTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElNdWwgPSBmdW5jdGlvbiByZWRJTXVsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRNdWwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTIodGhpcywgbnVtKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW11bCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRTcXIgPSBmdW5jdGlvbiByZWRTcXIgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuc3FyKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJU3FyID0gZnVuY3Rpb24gcmVkSVNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSVNxciB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaXNxcih0aGlzKTtcbiAgfTtcblxuICAvLyBTcXVhcmUgcm9vdCBvdmVyIHBcbiAgQk4ucHJvdG90eXBlLnJlZFNxcnQgPSBmdW5jdGlvbiByZWRTcXJ0ICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTcXJ0IHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXJ0KHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRJbnZtID0gZnVuY3Rpb24gcmVkSW52bSAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkSW52bSB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuaW52bSh0aGlzKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgICUgYHJlZCBtb2R1bG9gXG4gIEJOLnByb3RvdHlwZS5yZWROZWcgPSBmdW5jdGlvbiByZWROZWcgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE5lZyB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQubmVnKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRQb3cgPSBmdW5jdGlvbiByZWRQb3cgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCAmJiAhbnVtLnJlZCwgJ3JlZFBvdyhub3JtYWxOdW0pJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnBvdyh0aGlzLCBudW0pO1xuICB9O1xuXG4gIC8vIFByaW1lIG51bWJlcnMgd2l0aCBlZmZpY2llbnQgcmVkdWN0aW9uXG4gIHZhciBwcmltZXMgPSB7XG4gICAgazI1NjogbnVsbCxcbiAgICBwMjI0OiBudWxsLFxuICAgIHAxOTI6IG51bGwsXG4gICAgcDI1NTE5OiBudWxsXG4gIH07XG5cbiAgLy8gUHNldWRvLU1lcnNlbm5lIHByaW1lXG4gIGZ1bmN0aW9uIE1QcmltZSAobmFtZSwgcCkge1xuICAgIC8vIFAgPSAyIF4gTiAtIEtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMucCA9IG5ldyBCTihwLCAxNik7XG4gICAgdGhpcy5uID0gdGhpcy5wLmJpdExlbmd0aCgpO1xuICAgIHRoaXMuayA9IG5ldyBCTigxKS5pdXNobG4odGhpcy5uKS5pc3ViKHRoaXMucCk7XG5cbiAgICB0aGlzLnRtcCA9IHRoaXMuX3RtcCgpO1xuICB9XG5cbiAgTVByaW1lLnByb3RvdHlwZS5fdG1wID0gZnVuY3Rpb24gX3RtcCAoKSB7XG4gICAgdmFyIHRtcCA9IG5ldyBCTihudWxsKTtcbiAgICB0bXAud29yZHMgPSBuZXcgQXJyYXkoTWF0aC5jZWlsKHRoaXMubiAvIDEzKSk7XG4gICAgcmV0dXJuIHRtcDtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmlyZWR1Y2UgPSBmdW5jdGlvbiBpcmVkdWNlIChudW0pIHtcbiAgICAvLyBBc3N1bWVzIHRoYXQgYG51bWAgaXMgbGVzcyB0aGFuIGBQXjJgXG4gICAgLy8gbnVtID0gSEkgKiAoMiBeIE4gLSBLKSArIEhJICogSyArIExPID0gSEkgKiBLICsgTE8gKG1vZCBQKVxuICAgIHZhciByID0gbnVtO1xuICAgIHZhciBybGVuO1xuXG4gICAgZG8ge1xuICAgICAgdGhpcy5zcGxpdChyLCB0aGlzLnRtcCk7XG4gICAgICByID0gdGhpcy5pbXVsSyhyKTtcbiAgICAgIHIgPSByLmlhZGQodGhpcy50bXApO1xuICAgICAgcmxlbiA9IHIuYml0TGVuZ3RoKCk7XG4gICAgfSB3aGlsZSAocmxlbiA+IHRoaXMubik7XG5cbiAgICB2YXIgY21wID0gcmxlbiA8IHRoaXMubiA/IC0xIDogci51Y21wKHRoaXMucCk7XG4gICAgaWYgKGNtcCA9PT0gMCkge1xuICAgICAgci53b3Jkc1swXSA9IDA7XG4gICAgICByLmxlbmd0aCA9IDE7XG4gICAgfSBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgICByLmlzdWIodGhpcy5wKTtcbiAgICB9IGVsc2Uge1xuICAgICAgci5zdHJpcCgpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dCkge1xuICAgIGlucHV0Lml1c2hybih0aGlzLm4sIDAsIG91dCk7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICByZXR1cm4gbnVtLmltdWwodGhpcy5rKTtcbiAgfTtcblxuICBmdW5jdGlvbiBLMjU2ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnazI1NicsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmUgZmZmZmZjMmYnKTtcbiAgfVxuICBpbmhlcml0cyhLMjU2LCBNUHJpbWUpO1xuXG4gIEsyNTYucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gc3BsaXQgKGlucHV0LCBvdXRwdXQpIHtcbiAgICAvLyAyNTYgPSA5ICogMjYgKyAyMlxuICAgIHZhciBtYXNrID0gMHgzZmZmZmY7XG5cbiAgICB2YXIgb3V0TGVuID0gTWF0aC5taW4oaW5wdXQubGVuZ3RoLCA5KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dExlbjsgaSsrKSB7XG4gICAgICBvdXRwdXQud29yZHNbaV0gPSBpbnB1dC53b3Jkc1tpXTtcbiAgICB9XG4gICAgb3V0cHV0Lmxlbmd0aCA9IG91dExlbjtcblxuICAgIGlmIChpbnB1dC5sZW5ndGggPD0gOSkge1xuICAgICAgaW5wdXQud29yZHNbMF0gPSAwO1xuICAgICAgaW5wdXQubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBTaGlmdCBieSA5IGxpbWJzXG4gICAgdmFyIHByZXYgPSBpbnB1dC53b3Jkc1s5XTtcbiAgICBvdXRwdXQud29yZHNbb3V0cHV0Lmxlbmd0aCsrXSA9IHByZXYgJiBtYXNrO1xuXG4gICAgZm9yIChpID0gMTA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG5leHQgPSBpbnB1dC53b3Jkc1tpXSB8IDA7XG4gICAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gKChuZXh0ICYgbWFzaykgPDwgNCkgfCAocHJldiA+Pj4gMjIpO1xuICAgICAgcHJldiA9IG5leHQ7XG4gICAgfVxuICAgIHByZXYgPj4+PSAyMjtcbiAgICBpbnB1dC53b3Jkc1tpIC0gMTBdID0gcHJldjtcbiAgICBpZiAocHJldiA9PT0gMCAmJiBpbnB1dC5sZW5ndGggPiAxMCkge1xuICAgICAgaW5wdXQubGVuZ3RoIC09IDEwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gOTtcbiAgICB9XG4gIH07XG5cbiAgSzI1Ni5wcm90b3R5cGUuaW11bEsgPSBmdW5jdGlvbiBpbXVsSyAobnVtKSB7XG4gICAgLy8gSyA9IDB4MTAwMDAwM2QxID0gWyAweDQwLCAweDNkMSBdXG4gICAgbnVtLndvcmRzW251bS5sZW5ndGhdID0gMDtcbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aCArIDFdID0gMDtcbiAgICBudW0ubGVuZ3RoICs9IDI7XG5cbiAgICAvLyBib3VuZGVkIGF0OiAweDQwICogMHgzZmZmZmZmICsgMHgzZDAgPSAweDEwMDAwMDM5MFxuICAgIHZhciBsbyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gbnVtLndvcmRzW2ldIHwgMDtcbiAgICAgIGxvICs9IHcgKiAweDNkMTtcbiAgICAgIG51bS53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgICAgbG8gPSB3ICogMHg0MCArICgobG8gLyAweDQwMDAwMDApIHwgMCk7XG4gICAgfVxuXG4gICAgLy8gRmFzdCBsZW5ndGggcmVkdWN0aW9uXG4gICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIGlmIChudW0ud29yZHNbbnVtLmxlbmd0aCAtIDFdID09PSAwKSB7XG4gICAgICAgIG51bS5sZW5ndGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICBmdW5jdGlvbiBQMjI0ICgpIHtcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAncDIyNCcsXG4gICAgICAnZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgZmZmZmZmZmYgMDAwMDAwMDAgMDAwMDAwMDAgMDAwMDAwMDEnKTtcbiAgfVxuICBpbmhlcml0cyhQMjI0LCBNUHJpbWUpO1xuXG4gIGZ1bmN0aW9uIFAxOTIgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMTkyJyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmZmZiBmZmZmZmZmZicpO1xuICB9XG4gIGluaGVyaXRzKFAxOTIsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDI1NTE5ICgpIHtcbiAgICAvLyAyIF4gMjU1IC0gMTlcbiAgICBNUHJpbWUuY2FsbChcbiAgICAgIHRoaXMsXG4gICAgICAnMjU1MTknLFxuICAgICAgJzdmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZWQnKTtcbiAgfVxuICBpbmhlcml0cyhQMjU1MTksIE1QcmltZSk7XG5cbiAgUDI1NTE5LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxM1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoaSA9IChudW0ud29yZHNbaV0gfCAwKSAqIDB4MTMgKyBjYXJyeTtcbiAgICAgIHZhciBsbyA9IGhpICYgMHgzZmZmZmZmO1xuICAgICAgaGkgPj4+PSAyNjtcblxuICAgICAgbnVtLndvcmRzW2ldID0gbG87XG4gICAgICBjYXJyeSA9IGhpO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoKytdID0gY2Fycnk7XG4gICAgfVxuICAgIHJldHVybiBudW07XG4gIH07XG5cbiAgLy8gRXhwb3J0ZWQgbW9zdGx5IGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB1c2UgcGxhaW4gbmFtZSBpbnN0ZWFkXG4gIEJOLl9wcmltZSA9IGZ1bmN0aW9uIHByaW1lIChuYW1lKSB7XG4gICAgLy8gQ2FjaGVkIHZlcnNpb24gb2YgcHJpbWVcbiAgICBpZiAocHJpbWVzW25hbWVdKSByZXR1cm4gcHJpbWVzW25hbWVdO1xuXG4gICAgdmFyIHByaW1lO1xuICAgIGlmIChuYW1lID09PSAnazI1NicpIHtcbiAgICAgIHByaW1lID0gbmV3IEsyNTYoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjI0Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDIyNCgpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AxOTInKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMTkyKCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDI1NTE5Jykge1xuICAgICAgcHJpbWUgPSBuZXcgUDI1NTE5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBwcmltZSAnICsgbmFtZSk7XG4gICAgfVxuICAgIHByaW1lc1tuYW1lXSA9IHByaW1lO1xuXG4gICAgcmV0dXJuIHByaW1lO1xuICB9O1xuXG4gIC8vXG4gIC8vIEJhc2UgcmVkdWN0aW9uIGVuZ2luZVxuICAvL1xuICBmdW5jdGlvbiBSZWQgKG0pIHtcbiAgICBpZiAodHlwZW9mIG0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YXIgcHJpbWUgPSBCTi5fcHJpbWUobSk7XG4gICAgICB0aGlzLm0gPSBwcmltZS5wO1xuICAgICAgdGhpcy5wcmltZSA9IHByaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NlcnQobS5ndG4oMSksICdtb2R1bHVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLnByaW1lID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBSZWQucHJvdG90eXBlLl92ZXJpZnkxID0gZnVuY3Rpb24gX3ZlcmlmeTEgKGEpIHtcbiAgICBhc3NlcnQoYS5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgYXNzZXJ0KGEucmVkLCAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTIgPSBmdW5jdGlvbiBfdmVyaWZ5MiAoYSwgYikge1xuICAgIGFzc2VydCgoYS5uZWdhdGl2ZSB8IGIubmVnYXRpdmUpID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQgJiYgYS5yZWQgPT09IGIucmVkLFxuICAgICAgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmltb2QgPSBmdW5jdGlvbiBpbW9kIChhKSB7XG4gICAgaWYgKHRoaXMucHJpbWUpIHJldHVybiB0aGlzLnByaW1lLmlyZWR1Y2UoYSkuX2ZvcmNlUmVkKHRoaXMpO1xuICAgIHJldHVybiBhLnVtb2QodGhpcy5tKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkge1xuICAgICAgcmV0dXJuIGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tLnN1YihhKS5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuXG4gICAgdmFyIHJlcyA9IGEuYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pYWRkID0gZnVuY3Rpb24gaWFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pYWRkKGIpO1xuICAgIGlmIChyZXMuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzLmlzdWIodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnN1YiA9IGZ1bmN0aW9uIHN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5zdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcy5fZm9yY2VSZWQodGhpcyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3ViID0gZnVuY3Rpb24gaXN1YiAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5pc3ViKGIpO1xuICAgIGlmIChyZXMuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcy5pYWRkKHRoaXMubSk7XG4gICAgfVxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5zaGwgPSBmdW5jdGlvbiBzaGwgKGEsIG51bSkge1xuICAgIHRoaXMuX3ZlcmlmeTEoYSk7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLnVzaGxuKG51bSkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICB0aGlzLl92ZXJpZnkyKGEsIGIpO1xuICAgIHJldHVybiB0aGlzLmltb2QoYS5pbXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLm11bChiKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pc3FyID0gZnVuY3Rpb24gaXNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLmltdWwoYSwgYS5jbG9uZSgpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoYSkge1xuICAgIHJldHVybiB0aGlzLm11bChhLCBhKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0IChhKSB7XG4gICAgaWYgKGEuaXNaZXJvKCkpIHJldHVybiBhLmNsb25lKCk7XG5cbiAgICB2YXIgbW9kMyA9IHRoaXMubS5hbmRsbigzKTtcbiAgICBhc3NlcnQobW9kMyAlIDIgPT09IDEpO1xuXG4gICAgLy8gRmFzdCBjYXNlXG4gICAgaWYgKG1vZDMgPT09IDMpIHtcbiAgICAgIHZhciBwb3cgPSB0aGlzLm0uYWRkKG5ldyBCTigxKSkuaXVzaHJuKDIpO1xuICAgICAgcmV0dXJuIHRoaXMucG93KGEsIHBvdyk7XG4gICAgfVxuXG4gICAgLy8gVG9uZWxsaS1TaGFua3MgYWxnb3JpdGhtIChUb3RhbGx5IHVub3B0aW1pemVkIGFuZCBzbG93KVxuICAgIC8vXG4gICAgLy8gRmluZCBRIGFuZCBTLCB0aGF0IFEgKiAyIF4gUyA9IChQIC0gMSlcbiAgICB2YXIgcSA9IHRoaXMubS5zdWJuKDEpO1xuICAgIHZhciBzID0gMDtcbiAgICB3aGlsZSAoIXEuaXNaZXJvKCkgJiYgcS5hbmRsbigxKSA9PT0gMCkge1xuICAgICAgcysrO1xuICAgICAgcS5pdXNocm4oMSk7XG4gICAgfVxuICAgIGFzc2VydCghcS5pc1plcm8oKSk7XG5cbiAgICB2YXIgb25lID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHZhciBuT25lID0gb25lLnJlZE5lZygpO1xuXG4gICAgLy8gRmluZCBxdWFkcmF0aWMgbm9uLXJlc2lkdWVcbiAgICAvLyBOT1RFOiBNYXggaXMgc3VjaCBiZWNhdXNlIG9mIGdlbmVyYWxpemVkIFJpZW1hbm4gaHlwb3RoZXNpcy5cbiAgICB2YXIgbHBvdyA9IHRoaXMubS5zdWJuKDEpLml1c2hybigxKTtcbiAgICB2YXIgeiA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICB6ID0gbmV3IEJOKDIgKiB6ICogeikudG9SZWQodGhpcyk7XG5cbiAgICB3aGlsZSAodGhpcy5wb3coeiwgbHBvdykuY21wKG5PbmUpICE9PSAwKSB7XG4gICAgICB6LnJlZElBZGQobk9uZSk7XG4gICAgfVxuXG4gICAgdmFyIGMgPSB0aGlzLnBvdyh6LCBxKTtcbiAgICB2YXIgciA9IHRoaXMucG93KGEsIHEuYWRkbigxKS5pdXNocm4oMSkpO1xuICAgIHZhciB0ID0gdGhpcy5wb3coYSwgcSk7XG4gICAgdmFyIG0gPSBzO1xuICAgIHdoaWxlICh0LmNtcChvbmUpICE9PSAwKSB7XG4gICAgICB2YXIgdG1wID0gdDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0bXAuY21wKG9uZSkgIT09IDA7IGkrKykge1xuICAgICAgICB0bXAgPSB0bXAucmVkU3FyKCk7XG4gICAgICB9XG4gICAgICBhc3NlcnQoaSA8IG0pO1xuICAgICAgdmFyIGIgPSB0aGlzLnBvdyhjLCBuZXcgQk4oMSkuaXVzaGxuKG0gLSBpIC0gMSkpO1xuXG4gICAgICByID0gci5yZWRNdWwoYik7XG4gICAgICBjID0gYi5yZWRTcXIoKTtcbiAgICAgIHQgPSB0LnJlZE11bChjKTtcbiAgICAgIG0gPSBpO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uIGludm0gKGEpIHtcbiAgICB2YXIgaW52ID0gYS5faW52bXAodGhpcy5tKTtcbiAgICBpZiAoaW52Lm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICBpbnYubmVnYXRpdmUgPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW1vZChpbnYpLnJlZE5lZygpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludik7XG4gICAgfVxuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChhLCBudW0pIHtcbiAgICBpZiAobnVtLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIGlmIChudW0uY21wbigxKSA9PT0gMCkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciB3aW5kb3dTaXplID0gNDtcbiAgICB2YXIgd25kID0gbmV3IEFycmF5KDEgPDwgd2luZG93U2l6ZSk7XG4gICAgd25kWzBdID0gbmV3IEJOKDEpLnRvUmVkKHRoaXMpO1xuICAgIHduZFsxXSA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCB3bmQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHduZFtpXSA9IHRoaXMubXVsKHduZFtpIC0gMV0sIGEpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB3bmRbMF07XG4gICAgdmFyIGN1cnJlbnQgPSAwO1xuICAgIHZhciBjdXJyZW50TGVuID0gMDtcbiAgICB2YXIgc3RhcnQgPSBudW0uYml0TGVuZ3RoKCkgJSAyNjtcbiAgICBpZiAoc3RhcnQgPT09IDApIHtcbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbnVtLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd29yZCA9IG51bS53b3Jkc1tpXTtcbiAgICAgIGZvciAodmFyIGogPSBzdGFydCAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIHZhciBiaXQgPSAod29yZCA+PiBqKSAmIDE7XG4gICAgICAgIGlmIChyZXMgIT09IHduZFswXSkge1xuICAgICAgICAgIHJlcyA9IHRoaXMuc3FyKHJlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYml0ID09PSAwICYmIGN1cnJlbnQgPT09IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuID0gMDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPDw9IDE7XG4gICAgICAgIGN1cnJlbnQgfD0gYml0O1xuICAgICAgICBjdXJyZW50TGVuKys7XG4gICAgICAgIGlmIChjdXJyZW50TGVuICE9PSB3aW5kb3dTaXplICYmIChpICE9PSAwIHx8IGogIT09IDApKSBjb250aW51ZTtcblxuICAgICAgICByZXMgPSB0aGlzLm11bChyZXMsIHduZFtjdXJyZW50XSk7XG4gICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gMjY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRUbyA9IGZ1bmN0aW9uIGNvbnZlcnRUbyAobnVtKSB7XG4gICAgdmFyIHIgPSBudW0udW1vZCh0aGlzLm0pO1xuXG4gICAgcmV0dXJuIHIgPT09IG51bSA/IHIuY2xvbmUoKSA6IHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgcmVzID0gbnVtLmNsb25lKCk7XG4gICAgcmVzLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvL1xuICAvLyBNb250Z29tZXJ5IG1ldGhvZCBlbmdpbmVcbiAgLy9cblxuICBCTi5tb250ID0gZnVuY3Rpb24gbW9udCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBNb250KG51bSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTW9udCAobSkge1xuICAgIFJlZC5jYWxsKHRoaXMsIG0pO1xuXG4gICAgdGhpcy5zaGlmdCA9IHRoaXMubS5iaXRMZW5ndGgoKTtcbiAgICBpZiAodGhpcy5zaGlmdCAlIDI2ICE9PSAwKSB7XG4gICAgICB0aGlzLnNoaWZ0ICs9IDI2IC0gKHRoaXMuc2hpZnQgJSAyNik7XG4gICAgfVxuXG4gICAgdGhpcy5yID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLnNoaWZ0KTtcbiAgICB0aGlzLnIyID0gdGhpcy5pbW9kKHRoaXMuci5zcXIoKSk7XG4gICAgdGhpcy5yaW52ID0gdGhpcy5yLl9pbnZtcCh0aGlzLm0pO1xuXG4gICAgdGhpcy5taW52ID0gdGhpcy5yaW52Lm11bCh0aGlzLnIpLmlzdWJuKDEpLmRpdih0aGlzLm0pO1xuICAgIHRoaXMubWludiA9IHRoaXMubWludi51bW9kKHRoaXMucik7XG4gICAgdGhpcy5taW52ID0gdGhpcy5yLnN1Yih0aGlzLm1pbnYpO1xuICB9XG4gIGluaGVyaXRzKE1vbnQsIFJlZCk7XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5pbW9kKG51bS51c2hsbih0aGlzLnNoaWZ0KSk7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuY29udmVydEZyb20gPSBmdW5jdGlvbiBjb252ZXJ0RnJvbSAobnVtKSB7XG4gICAgdmFyIHIgPSB0aGlzLmltb2QobnVtLm11bCh0aGlzLnJpbnYpKTtcbiAgICByLnJlZCA9IG51bGw7XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTW9udC5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSB7XG4gICAgICBhLndvcmRzWzBdID0gMDtcbiAgICAgIGEubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIHZhciB0ID0gYS5pbXVsKGIpO1xuICAgIHZhciBjID0gdC5tYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5taW52KS5pbWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubSk7XG4gICAgdmFyIHUgPSB0LmlzdWIoYykuaXVzaHJuKHRoaXMuc2hpZnQpO1xuICAgIHZhciByZXMgPSB1O1xuXG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKGEsIGIpIHtcbiAgICBpZiAoYS5pc1plcm8oKSB8fCBiLmlzWmVybygpKSByZXR1cm4gbmV3IEJOKDApLl9mb3JjZVJlZCh0aGlzKTtcblxuICAgIHZhciB0ID0gYS5tdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG4gICAgaWYgKHUuY21wKHRoaXMubSkgPj0gMCkge1xuICAgICAgcmVzID0gdS5pc3ViKHRoaXMubSk7XG4gICAgfSBlbHNlIGlmICh1LmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMgPSB1LmlhZGQodGhpcy5tKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIC8vIChBUileLTEgKiBSXjIgPSAoQV4tMSAqIFJeLTEpICogUl4yID0gQV4tMSAqIFJcbiAgICB2YXIgcmVzID0gdGhpcy5pbW9kKGEuX2ludm1wKHRoaXMubSkubXVsKHRoaXMucjIpKTtcbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcbn0pKCBmYWxzZSB8fCBtb2R1bGUsIHRoaXMpO1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwodGhpcywgX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi8uLi8uLi93ZWJwYWNrL2J1aWxkaW4vbW9kdWxlLmpzICovIFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qc1wiKShtb2R1bGUpKSlcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvanNzaGEvc3JjL3NoYS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL2pzc2hhL3NyYy9zaGEuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbnZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvKlxuIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgU0hBIGZhbWlseSBvZiBoYXNoZXMsIGFzXG4gZGVmaW5lZCBpbiBGSVBTIFBVQiAxODAtNCBhbmQgRklQUyBQVUIgMjAyLCBhcyB3ZWxsIGFzIHRoZSBjb3JyZXNwb25kaW5nXG4gSE1BQyBpbXBsZW1lbnRhdGlvbiBhcyBkZWZpbmVkIGluIEZJUFMgUFVCIDE5OGFcblxuIENvcHlyaWdodCBCcmlhbiBUdXJlayAyMDA4LTIwMTdcbiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcbiBTZWUgaHR0cDovL2NhbGlnYXRpby5naXRodWIuY29tL2pzU0hBLyBmb3IgbW9yZSBpbmZvcm1hdGlvblxuXG4gU2V2ZXJhbCBmdW5jdGlvbnMgdGFrZW4gZnJvbSBQYXVsIEpvaG5zdG9uXG4qL1xuKGZ1bmN0aW9uKFkpe2Z1bmN0aW9uIEMoYyxhLGIpe3ZhciBlPTAsaD1bXSxuPTAsZyxsLGQsZixtLHEsdSxyLEk9ITEsdj1bXSx3PVtdLHQseT0hMSx6PSExLHg9LTE7Yj1ifHx7fTtnPWIuZW5jb2Rpbmd8fFwiVVRGOFwiO3Q9Yi5udW1Sb3VuZHN8fDE7aWYodCE9PXBhcnNlSW50KHQsMTApfHwxPnQpdGhyb3cgRXJyb3IoXCJudW1Sb3VuZHMgbXVzdCBhIGludGVnZXIgPj0gMVwiKTtpZihcIlNIQS0xXCI9PT1jKW09NTEyLHE9Syx1PVosZj0xNjAscj1mdW5jdGlvbihhKXtyZXR1cm4gYS5zbGljZSgpfTtlbHNlIGlmKDA9PT1jLmxhc3RJbmRleE9mKFwiU0hBLVwiLDApKWlmKHE9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gTChhLGIsYyl9LHU9ZnVuY3Rpb24oYSxiLGgsZSl7dmFyIGssZjtpZihcIlNIQS0yMjRcIj09PWN8fFwiU0hBLTI1NlwiPT09YylrPShiKzY1Pj4+OTw8NCkrMTUsZj0xNjtlbHNlIGlmKFwiU0hBLTM4NFwiPT09Y3x8XCJTSEEtNTEyXCI9PT1jKWs9KGIrMTI5Pj4+MTA8PFxuNSkrMzEsZj0zMjtlbHNlIHRocm93IEVycm9yKFwiVW5leHBlY3RlZCBlcnJvciBpbiBTSEEtMiBpbXBsZW1lbnRhdGlvblwiKTtmb3IoO2EubGVuZ3RoPD1rOylhLnB1c2goMCk7YVtiPj4+NV18PTEyODw8MjQtYiUzMjtiPWIraDthW2tdPWImNDI5NDk2NzI5NTthW2stMV09Yi80Mjk0OTY3Mjk2fDA7aD1hLmxlbmd0aDtmb3IoYj0wO2I8aDtiKz1mKWU9TChhLnNsaWNlKGIsYitmKSxlLGMpO2lmKFwiU0hBLTIyNFwiPT09YylhPVtlWzBdLGVbMV0sZVsyXSxlWzNdLGVbNF0sZVs1XSxlWzZdXTtlbHNlIGlmKFwiU0hBLTI1NlwiPT09YylhPWU7ZWxzZSBpZihcIlNIQS0zODRcIj09PWMpYT1bZVswXS5hLGVbMF0uYixlWzFdLmEsZVsxXS5iLGVbMl0uYSxlWzJdLmIsZVszXS5hLGVbM10uYixlWzRdLmEsZVs0XS5iLGVbNV0uYSxlWzVdLmJdO2Vsc2UgaWYoXCJTSEEtNTEyXCI9PT1jKWE9W2VbMF0uYSxlWzBdLmIsZVsxXS5hLGVbMV0uYixlWzJdLmEsZVsyXS5iLGVbM10uYSxlWzNdLmIsZVs0XS5hLFxuZVs0XS5iLGVbNV0uYSxlWzVdLmIsZVs2XS5hLGVbNl0uYixlWzddLmEsZVs3XS5iXTtlbHNlIHRocm93IEVycm9yKFwiVW5leHBlY3RlZCBlcnJvciBpbiBTSEEtMiBpbXBsZW1lbnRhdGlvblwiKTtyZXR1cm4gYX0scj1mdW5jdGlvbihhKXtyZXR1cm4gYS5zbGljZSgpfSxcIlNIQS0yMjRcIj09PWMpbT01MTIsZj0yMjQ7ZWxzZSBpZihcIlNIQS0yNTZcIj09PWMpbT01MTIsZj0yNTY7ZWxzZSBpZihcIlNIQS0zODRcIj09PWMpbT0xMDI0LGY9Mzg0O2Vsc2UgaWYoXCJTSEEtNTEyXCI9PT1jKW09MTAyNCxmPTUxMjtlbHNlIHRocm93IEVycm9yKFwiQ2hvc2VuIFNIQSB2YXJpYW50IGlzIG5vdCBzdXBwb3J0ZWRcIik7ZWxzZSBpZigwPT09Yy5sYXN0SW5kZXhPZihcIlNIQTMtXCIsMCl8fDA9PT1jLmxhc3RJbmRleE9mKFwiU0hBS0VcIiwwKSl7dmFyIEY9NjtxPUQ7cj1mdW5jdGlvbihhKXt2YXIgYz1bXSxlO2ZvcihlPTA7NT5lO2UrPTEpY1tlXT1hW2VdLnNsaWNlKCk7cmV0dXJuIGN9O3g9MTtpZihcIlNIQTMtMjI0XCI9PT1cbmMpbT0xMTUyLGY9MjI0O2Vsc2UgaWYoXCJTSEEzLTI1NlwiPT09YyltPTEwODgsZj0yNTY7ZWxzZSBpZihcIlNIQTMtMzg0XCI9PT1jKW09ODMyLGY9Mzg0O2Vsc2UgaWYoXCJTSEEzLTUxMlwiPT09YyltPTU3NixmPTUxMjtlbHNlIGlmKFwiU0hBS0UxMjhcIj09PWMpbT0xMzQ0LGY9LTEsRj0zMSx6PSEwO2Vsc2UgaWYoXCJTSEFLRTI1NlwiPT09YyltPTEwODgsZj0tMSxGPTMxLHo9ITA7ZWxzZSB0aHJvdyBFcnJvcihcIkNob3NlbiBTSEEgdmFyaWFudCBpcyBub3Qgc3VwcG9ydGVkXCIpO3U9ZnVuY3Rpb24oYSxjLGUsYixoKXtlPW07dmFyIGs9RixmLGc9W10sbj1lPj4+NSxsPTAsZD1jPj4+NTtmb3IoZj0wO2Y8ZCYmYz49ZTtmKz1uKWI9RChhLnNsaWNlKGYsZituKSxiKSxjLT1lO2E9YS5zbGljZShmKTtmb3IoYyU9ZTthLmxlbmd0aDxuOylhLnB1c2goMCk7Zj1jPj4+MzthW2Y+PjJdXj1rPDxmJTQqODthW24tMV1ePTIxNDc0ODM2NDg7Zm9yKGI9RChhLGIpOzMyKmcubGVuZ3RoPGg7KXthPWJbbCVcbjVdW2wvNXwwXTtnLnB1c2goYS5iKTtpZigzMipnLmxlbmd0aD49aClicmVhaztnLnB1c2goYS5hKTtsKz0xOzA9PT02NCpsJWUmJkQobnVsbCxiKX1yZXR1cm4gZ319ZWxzZSB0aHJvdyBFcnJvcihcIkNob3NlbiBTSEEgdmFyaWFudCBpcyBub3Qgc3VwcG9ydGVkXCIpO2Q9TShhLGcseCk7bD1BKGMpO3RoaXMuc2V0SE1BQ0tleT1mdW5jdGlvbihhLGIsaCl7dmFyIGs7aWYoITA9PT1JKXRocm93IEVycm9yKFwiSE1BQyBrZXkgYWxyZWFkeSBzZXRcIik7aWYoITA9PT15KXRocm93IEVycm9yKFwiQ2Fubm90IHNldCBITUFDIGtleSBhZnRlciBjYWxsaW5nIHVwZGF0ZVwiKTtpZighMD09PXopdGhyb3cgRXJyb3IoXCJTSEFLRSBpcyBub3Qgc3VwcG9ydGVkIGZvciBITUFDXCIpO2c9KGh8fHt9KS5lbmNvZGluZ3x8XCJVVEY4XCI7Yj1NKGIsZyx4KShhKTthPWIuYmluTGVuO2I9Yi52YWx1ZTtrPW0+Pj4zO2g9ay80LTE7aWYoazxhLzgpe2ZvcihiPXUoYixhLDAsQShjKSxmKTtiLmxlbmd0aDw9aDspYi5wdXNoKDApO1xuYltoXSY9NDI5NDk2NzA0MH1lbHNlIGlmKGs+YS84KXtmb3IoO2IubGVuZ3RoPD1oOyliLnB1c2goMCk7YltoXSY9NDI5NDk2NzA0MH1mb3IoYT0wO2E8PWg7YSs9MSl2W2FdPWJbYV1eOTA5NTIyNDg2LHdbYV09YlthXV4xNTQ5NTU2ODI4O2w9cSh2LGwpO2U9bTtJPSEwfTt0aGlzLnVwZGF0ZT1mdW5jdGlvbihhKXt2YXIgYyxiLGssZj0wLGc9bT4+PjU7Yz1kKGEsaCxuKTthPWMuYmluTGVuO2I9Yy52YWx1ZTtjPWE+Pj41O2ZvcihrPTA7azxjO2srPWcpZittPD1hJiYobD1xKGIuc2xpY2UoayxrK2cpLGwpLGYrPW0pO2UrPWY7aD1iLnNsaWNlKGY+Pj41KTtuPWElbTt5PSEwfTt0aGlzLmdldEhhc2g9ZnVuY3Rpb24oYSxiKXt2YXIgayxnLGQsbTtpZighMD09PUkpdGhyb3cgRXJyb3IoXCJDYW5ub3QgY2FsbCBnZXRIYXNoIGFmdGVyIHNldHRpbmcgSE1BQyBrZXlcIik7ZD1OKGIpO2lmKCEwPT09eil7aWYoLTE9PT1kLnNoYWtlTGVuKXRocm93IEVycm9yKFwic2hha2VMZW4gbXVzdCBiZSBzcGVjaWZpZWQgaW4gb3B0aW9uc1wiKTtcbmY9ZC5zaGFrZUxlbn1zd2l0Y2goYSl7Y2FzZSBcIkhFWFwiOms9ZnVuY3Rpb24oYSl7cmV0dXJuIE8oYSxmLHgsZCl9O2JyZWFrO2Nhc2UgXCJCNjRcIjprPWZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZix4LGQpfTticmVhaztjYXNlIFwiQllURVNcIjprPWZ1bmN0aW9uKGEpe3JldHVybiBRKGEsZix4KX07YnJlYWs7Y2FzZSBcIkFSUkFZQlVGRkVSXCI6dHJ5e2c9bmV3IEFycmF5QnVmZmVyKDApfWNhdGNoKHApe3Rocm93IEVycm9yKFwiQVJSQVlCVUZGRVIgbm90IHN1cHBvcnRlZCBieSB0aGlzIGVudmlyb25tZW50XCIpO31rPWZ1bmN0aW9uKGEpe3JldHVybiBSKGEsZix4KX07YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImZvcm1hdCBtdXN0IGJlIEhFWCwgQjY0LCBCWVRFUywgb3IgQVJSQVlCVUZGRVJcIik7fW09dShoLnNsaWNlKCksbixlLHIobCksZik7Zm9yKGc9MTtnPHQ7Zys9MSkhMD09PXomJjAhPT1mJTMyJiYobVttLmxlbmd0aC0xXSY9MTY3NzcyMTU+Pj4yNC1mJTMyKSxtPXUobSxmLFxuMCxBKGMpLGYpO3JldHVybiBrKG0pfTt0aGlzLmdldEhNQUM9ZnVuY3Rpb24oYSxiKXt2YXIgayxnLGQscDtpZighMT09PUkpdGhyb3cgRXJyb3IoXCJDYW5ub3QgY2FsbCBnZXRITUFDIHdpdGhvdXQgZmlyc3Qgc2V0dGluZyBITUFDIGtleVwiKTtkPU4oYik7c3dpdGNoKGEpe2Nhc2UgXCJIRVhcIjprPWZ1bmN0aW9uKGEpe3JldHVybiBPKGEsZix4LGQpfTticmVhaztjYXNlIFwiQjY0XCI6az1mdW5jdGlvbihhKXtyZXR1cm4gUChhLGYseCxkKX07YnJlYWs7Y2FzZSBcIkJZVEVTXCI6az1mdW5jdGlvbihhKXtyZXR1cm4gUShhLGYseCl9O2JyZWFrO2Nhc2UgXCJBUlJBWUJVRkZFUlwiOnRyeXtrPW5ldyBBcnJheUJ1ZmZlcigwKX1jYXRjaCh2KXt0aHJvdyBFcnJvcihcIkFSUkFZQlVGRkVSIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBlbnZpcm9ubWVudFwiKTt9az1mdW5jdGlvbihhKXtyZXR1cm4gUihhLGYseCl9O2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJvdXRwdXRGb3JtYXQgbXVzdCBiZSBIRVgsIEI2NCwgQllURVMsIG9yIEFSUkFZQlVGRkVSXCIpO1xufWc9dShoLnNsaWNlKCksbixlLHIobCksZik7cD1xKHcsQShjKSk7cD11KGcsZixtLHAsZik7cmV0dXJuIGsocCl9fWZ1bmN0aW9uIGIoYyxhKXt0aGlzLmE9Yzt0aGlzLmI9YX1mdW5jdGlvbiBPKGMsYSxiLGUpe3ZhciBoPVwiXCI7YS89ODt2YXIgbixnLGQ7ZD0tMT09PWI/MzowO2ZvcihuPTA7bjxhO24rPTEpZz1jW24+Pj4yXT4+PjgqKGQrbiU0KmIpLGgrPVwiMDEyMzQ1Njc4OWFiY2RlZlwiLmNoYXJBdChnPj4+NCYxNSkrXCIwMTIzNDU2Nzg5YWJjZGVmXCIuY2hhckF0KGcmMTUpO3JldHVybiBlLm91dHB1dFVwcGVyP2gudG9VcHBlckNhc2UoKTpofWZ1bmN0aW9uIFAoYyxhLGIsZSl7dmFyIGg9XCJcIixuPWEvOCxnLGQscCxmO2Y9LTE9PT1iPzM6MDtmb3IoZz0wO2c8bjtnKz0zKWZvcihkPWcrMTxuP2NbZysxPj4+Ml06MCxwPWcrMjxuP2NbZysyPj4+Ml06MCxwPShjW2c+Pj4yXT4+PjgqKGYrZyU0KmIpJjI1NSk8PDE2fChkPj4+OCooZisoZysxKSU0KmIpJjI1NSk8PDh8cD4+PjgqKGYrXG4oZysyKSU0KmIpJjI1NSxkPTA7ND5kO2QrPTEpOCpnKzYqZDw9YT9oKz1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIi5jaGFyQXQocD4+PjYqKDMtZCkmNjMpOmgrPWUuYjY0UGFkO3JldHVybiBofWZ1bmN0aW9uIFEoYyxhLGIpe3ZhciBlPVwiXCI7YS89ODt2YXIgaCxkLGc7Zz0tMT09PWI/MzowO2ZvcihoPTA7aDxhO2grPTEpZD1jW2g+Pj4yXT4+PjgqKGcraCU0KmIpJjI1NSxlKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGQpO3JldHVybiBlfWZ1bmN0aW9uIFIoYyxhLGIpe2EvPTg7dmFyIGUsaD1uZXcgQXJyYXlCdWZmZXIoYSksZCxnO2c9bmV3IFVpbnQ4QXJyYXkoaCk7ZD0tMT09PWI/MzowO2ZvcihlPTA7ZTxhO2UrPTEpZ1tlXT1jW2U+Pj4yXT4+PjgqKGQrZSU0KmIpJjI1NTtyZXR1cm4gaH1mdW5jdGlvbiBOKGMpe3ZhciBhPXtvdXRwdXRVcHBlcjohMSxiNjRQYWQ6XCI9XCIsc2hha2VMZW46LTF9O2M9Y3x8e307XG5hLm91dHB1dFVwcGVyPWMub3V0cHV0VXBwZXJ8fCExOyEwPT09Yy5oYXNPd25Qcm9wZXJ0eShcImI2NFBhZFwiKSYmKGEuYjY0UGFkPWMuYjY0UGFkKTtpZighMD09PWMuaGFzT3duUHJvcGVydHkoXCJzaGFrZUxlblwiKSl7aWYoMCE9PWMuc2hha2VMZW4lOCl0aHJvdyBFcnJvcihcInNoYWtlTGVuIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA4XCIpO2Euc2hha2VMZW49Yy5zaGFrZUxlbn1pZihcImJvb2xlYW5cIiE9PXR5cGVvZiBhLm91dHB1dFVwcGVyKXRocm93IEVycm9yKFwiSW52YWxpZCBvdXRwdXRVcHBlciBmb3JtYXR0aW5nIG9wdGlvblwiKTtpZihcInN0cmluZ1wiIT09dHlwZW9mIGEuYjY0UGFkKXRocm93IEVycm9yKFwiSW52YWxpZCBiNjRQYWQgZm9ybWF0dGluZyBvcHRpb25cIik7cmV0dXJuIGF9ZnVuY3Rpb24gTShjLGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJVVEY4XCI6Y2FzZSBcIlVURjE2QkVcIjpjYXNlIFwiVVRGMTZMRVwiOmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJlbmNvZGluZyBtdXN0IGJlIFVURjgsIFVURjE2QkUsIG9yIFVURjE2TEVcIik7XG59c3dpdGNoKGMpe2Nhc2UgXCJIRVhcIjpjPWZ1bmN0aW9uKGEsYyxkKXt2YXIgZz1hLmxlbmd0aCxsLHAsZixtLHEsdTtpZigwIT09ZyUyKXRocm93IEVycm9yKFwiU3RyaW5nIG9mIEhFWCB0eXBlIG11c3QgYmUgaW4gYnl0ZSBpbmNyZW1lbnRzXCIpO2M9Y3x8WzBdO2Q9ZHx8MDtxPWQ+Pj4zO3U9LTE9PT1iPzM6MDtmb3IobD0wO2w8ZztsKz0yKXtwPXBhcnNlSW50KGEuc3Vic3RyKGwsMiksMTYpO2lmKGlzTmFOKHApKXRocm93IEVycm9yKFwiU3RyaW5nIG9mIEhFWCB0eXBlIGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVyc1wiKTttPShsPj4+MSkrcTtmb3IoZj1tPj4+MjtjLmxlbmd0aDw9ZjspYy5wdXNoKDApO2NbZl18PXA8PDgqKHUrbSU0KmIpfXJldHVybnt2YWx1ZTpjLGJpbkxlbjo0KmcrZH19O2JyZWFrO2Nhc2UgXCJURVhUXCI6Yz1mdW5jdGlvbihjLGgsZCl7dmFyIGcsbCxwPTAsZixtLHEsdSxyLHQ7aD1ofHxbMF07ZD1kfHwwO3E9ZD4+PjM7aWYoXCJVVEY4XCI9PT1hKWZvcih0PS0xPT09XG5iPzM6MCxmPTA7ZjxjLmxlbmd0aDtmKz0xKWZvcihnPWMuY2hhckNvZGVBdChmKSxsPVtdLDEyOD5nP2wucHVzaChnKToyMDQ4Pmc/KGwucHVzaCgxOTJ8Zz4+PjYpLGwucHVzaCgxMjh8ZyY2MykpOjU1Mjk2Pmd8fDU3MzQ0PD1nP2wucHVzaCgyMjR8Zz4+PjEyLDEyOHxnPj4+NiY2MywxMjh8ZyY2Myk6KGYrPTEsZz02NTUzNisoKGcmMTAyMyk8PDEwfGMuY2hhckNvZGVBdChmKSYxMDIzKSxsLnB1c2goMjQwfGc+Pj4xOCwxMjh8Zz4+PjEyJjYzLDEyOHxnPj4+NiY2MywxMjh8ZyY2MykpLG09MDttPGwubGVuZ3RoO20rPTEpe3I9cCtxO2Zvcih1PXI+Pj4yO2gubGVuZ3RoPD11OyloLnB1c2goMCk7aFt1XXw9bFttXTw8OCoodCtyJTQqYik7cCs9MX1lbHNlIGlmKFwiVVRGMTZCRVwiPT09YXx8XCJVVEYxNkxFXCI9PT1hKWZvcih0PS0xPT09Yj8yOjAsbD1cIlVURjE2TEVcIj09PWEmJjEhPT1ifHxcIlVURjE2TEVcIiE9PWEmJjE9PT1iLGY9MDtmPGMubGVuZ3RoO2YrPTEpe2c9Yy5jaGFyQ29kZUF0KGYpO1xuITA9PT1sJiYobT1nJjI1NSxnPW08PDh8Zz4+PjgpO3I9cCtxO2Zvcih1PXI+Pj4yO2gubGVuZ3RoPD11OyloLnB1c2goMCk7aFt1XXw9Zzw8OCoodCtyJTQqYik7cCs9Mn1yZXR1cm57dmFsdWU6aCxiaW5MZW46OCpwK2R9fTticmVhaztjYXNlIFwiQjY0XCI6Yz1mdW5jdGlvbihhLGMsZCl7dmFyIGc9MCxsLHAsZixtLHEsdSxyLHQ7aWYoLTE9PT1hLnNlYXJjaCgvXlthLXpBLVowLTk9K1xcL10rJC8pKXRocm93IEVycm9yKFwiSW52YWxpZCBjaGFyYWN0ZXIgaW4gYmFzZS02NCBzdHJpbmdcIik7cD1hLmluZGV4T2YoXCI9XCIpO2E9YS5yZXBsYWNlKC9cXD0vZyxcIlwiKTtpZigtMSE9PXAmJnA8YS5sZW5ndGgpdGhyb3cgRXJyb3IoXCJJbnZhbGlkICc9JyBmb3VuZCBpbiBiYXNlLTY0IHN0cmluZ1wiKTtjPWN8fFswXTtkPWR8fDA7dT1kPj4+Mzt0PS0xPT09Yj8zOjA7Zm9yKHA9MDtwPGEubGVuZ3RoO3ArPTQpe3E9YS5zdWJzdHIocCw0KTtmb3IoZj1tPTA7ZjxxLmxlbmd0aDtmKz0xKWw9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCIuaW5kZXhPZihxW2ZdKSxcbm18PWw8PDE4LTYqZjtmb3IoZj0wO2Y8cS5sZW5ndGgtMTtmKz0xKXtyPWcrdTtmb3IobD1yPj4+MjtjLmxlbmd0aDw9bDspYy5wdXNoKDApO2NbbF18PShtPj4+MTYtOCpmJjI1NSk8PDgqKHQrciU0KmIpO2crPTF9fXJldHVybnt2YWx1ZTpjLGJpbkxlbjo4KmcrZH19O2JyZWFrO2Nhc2UgXCJCWVRFU1wiOmM9ZnVuY3Rpb24oYSxjLGQpe3ZhciBnLGwscCxmLG0scTtjPWN8fFswXTtkPWR8fDA7cD1kPj4+MztxPS0xPT09Yj8zOjA7Zm9yKGw9MDtsPGEubGVuZ3RoO2wrPTEpZz1hLmNoYXJDb2RlQXQobCksbT1sK3AsZj1tPj4+MixjLmxlbmd0aDw9ZiYmYy5wdXNoKDApLGNbZl18PWc8PDgqKHErbSU0KmIpO3JldHVybnt2YWx1ZTpjLGJpbkxlbjo4KmEubGVuZ3RoK2R9fTticmVhaztjYXNlIFwiQVJSQVlCVUZGRVJcIjp0cnl7Yz1uZXcgQXJyYXlCdWZmZXIoMCl9Y2F0Y2goZSl7dGhyb3cgRXJyb3IoXCJBUlJBWUJVRkZFUiBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgZW52aXJvbm1lbnRcIik7fWM9XG5mdW5jdGlvbihhLGMsZCl7dmFyIGcsbCxwLGYsbSxxO2M9Y3x8WzBdO2Q9ZHx8MDtsPWQ+Pj4zO209LTE9PT1iPzM6MDtxPW5ldyBVaW50OEFycmF5KGEpO2ZvcihnPTA7ZzxhLmJ5dGVMZW5ndGg7Zys9MSlmPWcrbCxwPWY+Pj4yLGMubGVuZ3RoPD1wJiZjLnB1c2goMCksY1twXXw9cVtnXTw8OCoobStmJTQqYik7cmV0dXJue3ZhbHVlOmMsYmluTGVuOjgqYS5ieXRlTGVuZ3RoK2R9fTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwiZm9ybWF0IG11c3QgYmUgSEVYLCBURVhULCBCNjQsIEJZVEVTLCBvciBBUlJBWUJVRkZFUlwiKTt9cmV0dXJuIGN9ZnVuY3Rpb24geShjLGEpe3JldHVybiBjPDxhfGM+Pj4zMi1hfWZ1bmN0aW9uIFMoYyxhKXtyZXR1cm4gMzI8YT8oYS09MzIsbmV3IGIoYy5iPDxhfGMuYT4+PjMyLWEsYy5hPDxhfGMuYj4+PjMyLWEpKTowIT09YT9uZXcgYihjLmE8PGF8Yy5iPj4+MzItYSxjLmI8PGF8Yy5hPj4+MzItYSk6Y31mdW5jdGlvbiB3KGMsYSl7cmV0dXJuIGM+Pj5cbmF8Yzw8MzItYX1mdW5jdGlvbiB0KGMsYSl7dmFyIGs9bnVsbCxrPW5ldyBiKGMuYSxjLmIpO3JldHVybiBrPTMyPj1hP25ldyBiKGsuYT4+PmF8ay5iPDwzMi1hJjQyOTQ5NjcyOTUsay5iPj4+YXxrLmE8PDMyLWEmNDI5NDk2NzI5NSk6bmV3IGIoay5iPj4+YS0zMnxrLmE8PDY0LWEmNDI5NDk2NzI5NSxrLmE+Pj5hLTMyfGsuYjw8NjQtYSY0Mjk0OTY3Mjk1KX1mdW5jdGlvbiBUKGMsYSl7dmFyIGs9bnVsbDtyZXR1cm4gaz0zMj49YT9uZXcgYihjLmE+Pj5hLGMuYj4+PmF8Yy5hPDwzMi1hJjQyOTQ5NjcyOTUpOm5ldyBiKDAsYy5hPj4+YS0zMil9ZnVuY3Rpb24gYWEoYyxhLGIpe3JldHVybiBjJmFefmMmYn1mdW5jdGlvbiBiYShjLGEsayl7cmV0dXJuIG5ldyBiKGMuYSZhLmFefmMuYSZrLmEsYy5iJmEuYl5+Yy5iJmsuYil9ZnVuY3Rpb24gVShjLGEsYil7cmV0dXJuIGMmYV5jJmJeYSZifWZ1bmN0aW9uIGNhKGMsYSxrKXtyZXR1cm4gbmV3IGIoYy5hJmEuYV5jLmEmay5hXmEuYSZcbmsuYSxjLmImYS5iXmMuYiZrLmJeYS5iJmsuYil9ZnVuY3Rpb24gZGEoYyl7cmV0dXJuIHcoYywyKV53KGMsMTMpXncoYywyMil9ZnVuY3Rpb24gZWEoYyl7dmFyIGE9dChjLDI4KSxrPXQoYywzNCk7Yz10KGMsMzkpO3JldHVybiBuZXcgYihhLmFeay5hXmMuYSxhLmJeay5iXmMuYil9ZnVuY3Rpb24gZmEoYyl7cmV0dXJuIHcoYyw2KV53KGMsMTEpXncoYywyNSl9ZnVuY3Rpb24gZ2EoYyl7dmFyIGE9dChjLDE0KSxrPXQoYywxOCk7Yz10KGMsNDEpO3JldHVybiBuZXcgYihhLmFeay5hXmMuYSxhLmJeay5iXmMuYil9ZnVuY3Rpb24gaGEoYyl7cmV0dXJuIHcoYyw3KV53KGMsMTgpXmM+Pj4zfWZ1bmN0aW9uIGlhKGMpe3ZhciBhPXQoYywxKSxrPXQoYyw4KTtjPVQoYyw3KTtyZXR1cm4gbmV3IGIoYS5hXmsuYV5jLmEsYS5iXmsuYl5jLmIpfWZ1bmN0aW9uIGphKGMpe3JldHVybiB3KGMsMTcpXncoYywxOSleYz4+PjEwfWZ1bmN0aW9uIGthKGMpe3ZhciBhPXQoYywxOSksaz10KGMsNjEpO1xuYz1UKGMsNik7cmV0dXJuIG5ldyBiKGEuYV5rLmFeYy5hLGEuYl5rLmJeYy5iKX1mdW5jdGlvbiBHKGMsYSl7dmFyIGI9KGMmNjU1MzUpKyhhJjY1NTM1KTtyZXR1cm4oKGM+Pj4xNikrKGE+Pj4xNikrKGI+Pj4xNikmNjU1MzUpPDwxNnxiJjY1NTM1fWZ1bmN0aW9uIGxhKGMsYSxiLGUpe3ZhciBoPShjJjY1NTM1KSsoYSY2NTUzNSkrKGImNjU1MzUpKyhlJjY1NTM1KTtyZXR1cm4oKGM+Pj4xNikrKGE+Pj4xNikrKGI+Pj4xNikrKGU+Pj4xNikrKGg+Pj4xNikmNjU1MzUpPDwxNnxoJjY1NTM1fWZ1bmN0aW9uIEgoYyxhLGIsZSxoKXt2YXIgZD0oYyY2NTUzNSkrKGEmNjU1MzUpKyhiJjY1NTM1KSsoZSY2NTUzNSkrKGgmNjU1MzUpO3JldHVybigoYz4+PjE2KSsoYT4+PjE2KSsoYj4+PjE2KSsoZT4+PjE2KSsoaD4+PjE2KSsoZD4+PjE2KSY2NTUzNSk8PDE2fGQmNjU1MzV9ZnVuY3Rpb24gbWEoYyxhKXt2YXIgZCxlLGg7ZD0oYy5iJjY1NTM1KSsoYS5iJjY1NTM1KTtlPShjLmI+Pj4xNikrXG4oYS5iPj4+MTYpKyhkPj4+MTYpO2g9KGUmNjU1MzUpPDwxNnxkJjY1NTM1O2Q9KGMuYSY2NTUzNSkrKGEuYSY2NTUzNSkrKGU+Pj4xNik7ZT0oYy5hPj4+MTYpKyhhLmE+Pj4xNikrKGQ+Pj4xNik7cmV0dXJuIG5ldyBiKChlJjY1NTM1KTw8MTZ8ZCY2NTUzNSxoKX1mdW5jdGlvbiBuYShjLGEsZCxlKXt2YXIgaCxuLGc7aD0oYy5iJjY1NTM1KSsoYS5iJjY1NTM1KSsoZC5iJjY1NTM1KSsoZS5iJjY1NTM1KTtuPShjLmI+Pj4xNikrKGEuYj4+PjE2KSsoZC5iPj4+MTYpKyhlLmI+Pj4xNikrKGg+Pj4xNik7Zz0obiY2NTUzNSk8PDE2fGgmNjU1MzU7aD0oYy5hJjY1NTM1KSsoYS5hJjY1NTM1KSsoZC5hJjY1NTM1KSsoZS5hJjY1NTM1KSsobj4+PjE2KTtuPShjLmE+Pj4xNikrKGEuYT4+PjE2KSsoZC5hPj4+MTYpKyhlLmE+Pj4xNikrKGg+Pj4xNik7cmV0dXJuIG5ldyBiKChuJjY1NTM1KTw8MTZ8aCY2NTUzNSxnKX1mdW5jdGlvbiBvYShjLGEsZCxlLGgpe3ZhciBuLGcsbDtuPShjLmImXG42NTUzNSkrKGEuYiY2NTUzNSkrKGQuYiY2NTUzNSkrKGUuYiY2NTUzNSkrKGguYiY2NTUzNSk7Zz0oYy5iPj4+MTYpKyhhLmI+Pj4xNikrKGQuYj4+PjE2KSsoZS5iPj4+MTYpKyhoLmI+Pj4xNikrKG4+Pj4xNik7bD0oZyY2NTUzNSk8PDE2fG4mNjU1MzU7bj0oYy5hJjY1NTM1KSsoYS5hJjY1NTM1KSsoZC5hJjY1NTM1KSsoZS5hJjY1NTM1KSsoaC5hJjY1NTM1KSsoZz4+PjE2KTtnPShjLmE+Pj4xNikrKGEuYT4+PjE2KSsoZC5hPj4+MTYpKyhlLmE+Pj4xNikrKGguYT4+PjE2KSsobj4+PjE2KTtyZXR1cm4gbmV3IGIoKGcmNjU1MzUpPDwxNnxuJjY1NTM1LGwpfWZ1bmN0aW9uIEIoYyxhKXtyZXR1cm4gbmV3IGIoYy5hXmEuYSxjLmJeYS5iKX1mdW5jdGlvbiBBKGMpe3ZhciBhPVtdLGQ7aWYoXCJTSEEtMVwiPT09YylhPVsxNzMyNTg0MTkzLDQwMjMyMzM0MTcsMjU2MjM4MzEwMiwyNzE3MzM4NzgsMzI4NTM3NzUyMF07ZWxzZSBpZigwPT09Yy5sYXN0SW5kZXhPZihcIlNIQS1cIiwwKSlzd2l0Y2goYT1cblszMjM4MzcxMDMyLDkxNDE1MDY2Myw4MTI3MDI5OTksNDE0NDkxMjY5Nyw0MjkwNzc1ODU3LDE3NTA2MDMwMjUsMTY5NDA3NjgzOSwzMjA0MDc1NDI4XSxkPVsxNzc5MDMzNzAzLDMxNDQxMzQyNzcsMTAxMzkwNDI0MiwyNzczNDgwNzYyLDEzNTk4OTMxMTksMjYwMDgyMjkyNCw1Mjg3MzQ2MzUsMTU0MTQ1OTIyNV0sYyl7Y2FzZSBcIlNIQS0yMjRcIjpicmVhaztjYXNlIFwiU0hBLTI1NlwiOmE9ZDticmVhaztjYXNlIFwiU0hBLTM4NFwiOmE9W25ldyBiKDM0MTgwNzAzNjUsYVswXSksbmV3IGIoMTY1NDI3MDI1MCxhWzFdKSxuZXcgYigyNDM4NTI5MzcwLGFbMl0pLG5ldyBiKDM1NTQ2MjM2MCxhWzNdKSxuZXcgYigxNzMxNDA1NDE1LGFbNF0pLG5ldyBiKDQxMDQ4ODg1ODk1LGFbNV0pLG5ldyBiKDM2NzUwMDg1MjUsYVs2XSksbmV3IGIoMTIwMzA2MjgxMyxhWzddKV07YnJlYWs7Y2FzZSBcIlNIQS01MTJcIjphPVtuZXcgYihkWzBdLDQwODkyMzU3MjApLG5ldyBiKGRbMV0sMjIyNzg3MzU5NSksXG5uZXcgYihkWzJdLDQyNzExNzU3MjMpLG5ldyBiKGRbM10sMTU5NTc1MDEyOSksbmV3IGIoZFs0XSwyOTE3NTY1MTM3KSxuZXcgYihkWzVdLDcyNTUxMTE5OSksbmV3IGIoZFs2XSw0MjE1Mzg5NTQ3KSxuZXcgYihkWzddLDMyNzAzMzIwOSldO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJVbmtub3duIFNIQSB2YXJpYW50XCIpO31lbHNlIGlmKDA9PT1jLmxhc3RJbmRleE9mKFwiU0hBMy1cIiwwKXx8MD09PWMubGFzdEluZGV4T2YoXCJTSEFLRVwiLDApKWZvcihjPTA7NT5jO2MrPTEpYVtjXT1bbmV3IGIoMCwwKSxuZXcgYigwLDApLG5ldyBiKDAsMCksbmV3IGIoMCwwKSxuZXcgYigwLDApXTtlbHNlIHRocm93IEVycm9yKFwiTm8gU0hBIHZhcmlhbnRzIHN1cHBvcnRlZFwiKTtyZXR1cm4gYX1mdW5jdGlvbiBLKGMsYSl7dmFyIGI9W10sZSxkLG4sZyxsLHAsZjtlPWFbMF07ZD1hWzFdO249YVsyXTtnPWFbM107bD1hWzRdO2ZvcihmPTA7ODA+ZjtmKz0xKWJbZl09MTY+Zj9jW2ZdOnkoYltmLVxuM11eYltmLThdXmJbZi0xNF1eYltmLTE2XSwxKSxwPTIwPmY/SCh5KGUsNSksZCZuXn5kJmcsbCwxNTE4NTAwMjQ5LGJbZl0pOjQwPmY/SCh5KGUsNSksZF5uXmcsbCwxODU5Nzc1MzkzLGJbZl0pOjYwPmY/SCh5KGUsNSksVShkLG4sZyksbCwyNDAwOTU5NzA4LGJbZl0pOkgoeShlLDUpLGRebl5nLGwsMzM5NTQ2OTc4MixiW2ZdKSxsPWcsZz1uLG49eShkLDMwKSxkPWUsZT1wO2FbMF09RyhlLGFbMF0pO2FbMV09RyhkLGFbMV0pO2FbMl09RyhuLGFbMl0pO2FbM109RyhnLGFbM10pO2FbNF09RyhsLGFbNF0pO3JldHVybiBhfWZ1bmN0aW9uIFooYyxhLGIsZSl7dmFyIGQ7Zm9yKGQ9KGErNjU+Pj45PDw0KSsxNTtjLmxlbmd0aDw9ZDspYy5wdXNoKDApO2NbYT4+PjVdfD0xMjg8PDI0LWElMzI7YSs9YjtjW2RdPWEmNDI5NDk2NzI5NTtjW2QtMV09YS80Mjk0OTY3Mjk2fDA7YT1jLmxlbmd0aDtmb3IoZD0wO2Q8YTtkKz0xNillPUsoYy5zbGljZShkLGQrMTYpLGUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYyxcbmEsayl7dmFyIGUsaCxuLGcsbCxwLGYsbSxxLHUscix0LHYsdyx5LEEseix4LEYsQixDLEQsRT1bXSxKO2lmKFwiU0hBLTIyNFwiPT09a3x8XCJTSEEtMjU2XCI9PT1rKXU9NjQsdD0xLEQ9TnVtYmVyLHY9Ryx3PWxhLHk9SCxBPWhhLHo9amEseD1kYSxGPWZhLEM9VSxCPWFhLEo9ZDtlbHNlIGlmKFwiU0hBLTM4NFwiPT09a3x8XCJTSEEtNTEyXCI9PT1rKXU9ODAsdD0yLEQ9Yix2PW1hLHc9bmEseT1vYSxBPWlhLHo9a2EseD1lYSxGPWdhLEM9Y2EsQj1iYSxKPVY7ZWxzZSB0aHJvdyBFcnJvcihcIlVuZXhwZWN0ZWQgZXJyb3IgaW4gU0hBLTIgaW1wbGVtZW50YXRpb25cIik7az1hWzBdO2U9YVsxXTtoPWFbMl07bj1hWzNdO2c9YVs0XTtsPWFbNV07cD1hWzZdO2Y9YVs3XTtmb3Iocj0wO3I8dTtyKz0xKTE2PnI/KHE9cip0LG09Yy5sZW5ndGg8PXE/MDpjW3FdLHE9Yy5sZW5ndGg8PXErMT8wOmNbcSsxXSxFW3JdPW5ldyBEKG0scSkpOkVbcl09dyh6KEVbci0yXSksRVtyLTddLEEoRVtyLTE1XSksRVtyLVxuMTZdKSxtPXkoZixGKGcpLEIoZyxsLHApLEpbcl0sRVtyXSkscT12KHgoayksQyhrLGUsaCkpLGY9cCxwPWwsbD1nLGc9dihuLG0pLG49aCxoPWUsZT1rLGs9dihtLHEpO2FbMF09dihrLGFbMF0pO2FbMV09dihlLGFbMV0pO2FbMl09dihoLGFbMl0pO2FbM109dihuLGFbM10pO2FbNF09dihnLGFbNF0pO2FbNV09dihsLGFbNV0pO2FbNl09dihwLGFbNl0pO2FbN109dihmLGFbN10pO3JldHVybiBhfWZ1bmN0aW9uIEQoYyxhKXt2YXIgZCxlLGgsbixnPVtdLGw9W107aWYobnVsbCE9PWMpZm9yKGU9MDtlPGMubGVuZ3RoO2UrPTIpYVsoZT4+PjEpJTVdWyhlPj4+MSkvNXwwXT1CKGFbKGU+Pj4xKSU1XVsoZT4+PjEpLzV8MF0sbmV3IGIoY1tlKzFdLGNbZV0pKTtmb3IoZD0wOzI0PmQ7ZCs9MSl7bj1BKFwiU0hBMy1cIik7Zm9yKGU9MDs1PmU7ZSs9MSl7aD1hW2VdWzBdO3ZhciBwPWFbZV1bMV0sZj1hW2VdWzJdLG09YVtlXVszXSxxPWFbZV1bNF07Z1tlXT1uZXcgYihoLmFecC5hXmYuYV5cbm0uYV5xLmEsaC5iXnAuYl5mLmJebS5iXnEuYil9Zm9yKGU9MDs1PmU7ZSs9MSlsW2VdPUIoZ1soZSs0KSU1XSxTKGdbKGUrMSklNV0sMSkpO2ZvcihlPTA7NT5lO2UrPTEpZm9yKGg9MDs1Pmg7aCs9MSlhW2VdW2hdPUIoYVtlXVtoXSxsW2VdKTtmb3IoZT0wOzU+ZTtlKz0xKWZvcihoPTA7NT5oO2grPTEpbltoXVsoMiplKzMqaCklNV09UyhhW2VdW2hdLFdbZV1baF0pO2ZvcihlPTA7NT5lO2UrPTEpZm9yKGg9MDs1Pmg7aCs9MSlhW2VdW2hdPUIobltlXVtoXSxuZXcgYih+blsoZSsxKSU1XVtoXS5hJm5bKGUrMiklNV1baF0uYSx+blsoZSsxKSU1XVtoXS5iJm5bKGUrMiklNV1baF0uYikpO2FbMF1bMF09QihhWzBdWzBdLFhbZF0pfXJldHVybiBhfXZhciBkLFYsVyxYO2Q9WzExMTYzNTI0MDgsMTg5OTQ0NzQ0MSwzMDQ5MzIzNDcxLDM5MjEwMDk1NzMsOTYxOTg3MTYzLDE1MDg5NzA5OTMsMjQ1MzYzNTc0OCwyODcwNzYzMjIxLDM2MjQzODEwODAsMzEwNTk4NDAxLDYwNzIyNTI3OCxcbjE0MjY4ODE5ODcsMTkyNTA3ODM4OCwyMTYyMDc4MjA2LDI2MTQ4ODgxMDMsMzI0ODIyMjU4MCwzODM1MzkwNDAxLDQwMjIyMjQ3NzQsMjY0MzQ3MDc4LDYwNDgwNzYyOCw3NzAyNTU5ODMsMTI0OTE1MDEyMiwxNTU1MDgxNjkyLDE5OTYwNjQ5ODYsMjU1NDIyMDg4MiwyODIxODM0MzQ5LDI5NTI5OTY4MDgsMzIxMDMxMzY3MSwzMzM2NTcxODkxLDM1ODQ1Mjg3MTEsMTEzOTI2OTkzLDMzODI0MTg5NSw2NjYzMDcyMDUsNzczNTI5OTEyLDEyOTQ3NTczNzIsMTM5NjE4MjI5MSwxNjk1MTgzNzAwLDE5ODY2NjEwNTEsMjE3NzAyNjM1MCwyNDU2OTU2MDM3LDI3MzA0ODU5MjEsMjgyMDMwMjQxMSwzMjU5NzMwODAwLDMzNDU3NjQ3NzEsMzUxNjA2NTgxNywzNjAwMzUyODA0LDQwOTQ1NzE5MDksMjc1NDIzMzQ0LDQzMDIyNzczNCw1MDY5NDg2MTYsNjU5MDYwNTU2LDg4Mzk5Nzg3Nyw5NTgxMzk1NzEsMTMyMjgyMjIxOCwxNTM3MDAyMDYzLDE3NDc4NzM3NzksMTk1NTU2MjIyMiwyMDI0MTA0ODE1LFxuMjIyNzczMDQ1MiwyMzYxODUyNDI0LDI0Mjg0MzY0NzQsMjc1NjczNDE4NywzMjA0MDMxNDc5LDMzMjkzMjUyOThdO1Y9W25ldyBiKGRbMF0sMzYwOTc2NzQ1OCksbmV3IGIoZFsxXSw2MDI4OTE3MjUpLG5ldyBiKGRbMl0sMzk2NDQ4NDM5OSksbmV3IGIoZFszXSwyMTczMjk1NTQ4KSxuZXcgYihkWzRdLDQwODE2Mjg0NzIpLG5ldyBiKGRbNV0sMzA1MzgzNDI2NSksbmV3IGIoZFs2XSwyOTM3NjcxNTc5KSxuZXcgYihkWzddLDM2NjQ2MDk1NjApLG5ldyBiKGRbOF0sMjczNDg4MzM5NCksbmV3IGIoZFs5XSwxMTY0OTk2NTQyKSxuZXcgYihkWzEwXSwxMzIzNjEwNzY0KSxuZXcgYihkWzExXSwzNTkwMzA0OTk0KSxuZXcgYihkWzEyXSw0MDY4MTgyMzgzKSxuZXcgYihkWzEzXSw5OTEzMzYxMTMpLG5ldyBiKGRbMTRdLDYzMzgwMzMxNyksbmV3IGIoZFsxNV0sMzQ3OTc3NDg2OCksbmV3IGIoZFsxNl0sMjY2NjYxMzQ1OCksbmV3IGIoZFsxN10sOTQ0NzExMTM5KSxuZXcgYihkWzE4XSwyMzQxMjYyNzczKSxcbm5ldyBiKGRbMTldLDIwMDc4MDA5MzMpLG5ldyBiKGRbMjBdLDE0OTU5OTA5MDEpLG5ldyBiKGRbMjFdLDE4NTY0MzEyMzUpLG5ldyBiKGRbMjJdLDMxNzUyMTgxMzIpLG5ldyBiKGRbMjNdLDIxOTg5NTA4MzcpLG5ldyBiKGRbMjRdLDM5OTk3MTkzMzkpLG5ldyBiKGRbMjVdLDc2Njc4NDAxNiksbmV3IGIoZFsyNl0sMjU2NjU5NDg3OSksbmV3IGIoZFsyN10sMzIwMzMzNzk1NiksbmV3IGIoZFsyOF0sMTAzNDQ1NzAyNiksbmV3IGIoZFsyOV0sMjQ2Njk0ODkwMSksbmV3IGIoZFszMF0sMzc1ODMyNjM4MyksbmV3IGIoZFszMV0sMTY4NzE3OTM2KSxuZXcgYihkWzMyXSwxMTg4MTc5OTY0KSxuZXcgYihkWzMzXSwxNTQ2MDQ1NzM0KSxuZXcgYihkWzM0XSwxNTIyODA1NDg1KSxuZXcgYihkWzM1XSwyNjQzODMzODIzKSxuZXcgYihkWzM2XSwyMzQzNTI3MzkwKSxuZXcgYihkWzM3XSwxMDE0NDc3NDgwKSxuZXcgYihkWzM4XSwxMjA2NzU5MTQyKSxuZXcgYihkWzM5XSwzNDQwNzc2MjcpLFxubmV3IGIoZFs0MF0sMTI5MDg2MzQ2MCksbmV3IGIoZFs0MV0sMzE1ODQ1NDI3MyksbmV3IGIoZFs0Ml0sMzUwNTk1MjY1NyksbmV3IGIoZFs0M10sMTA2MjE3MDA4KSxuZXcgYihkWzQ0XSwzNjA2MDA4MzQ0KSxuZXcgYihkWzQ1XSwxNDMyNzI1Nzc2KSxuZXcgYihkWzQ2XSwxNDY3MDMxNTk0KSxuZXcgYihkWzQ3XSw4NTExNjk3MjApLG5ldyBiKGRbNDhdLDMxMDA4MjM3NTIpLG5ldyBiKGRbNDldLDEzNjMyNTgxOTUpLG5ldyBiKGRbNTBdLDM3NTA2ODU1OTMpLG5ldyBiKGRbNTFdLDM3ODUwNTAyODApLG5ldyBiKGRbNTJdLDMzMTgzMDc0MjcpLG5ldyBiKGRbNTNdLDM4MTI3MjM0MDMpLG5ldyBiKGRbNTRdLDIwMDMwMzQ5OTUpLG5ldyBiKGRbNTVdLDM2MDIwMzY4OTkpLG5ldyBiKGRbNTZdLDE1NzU5OTAwMTIpLG5ldyBiKGRbNTddLDExMjU1OTI5MjgpLG5ldyBiKGRbNThdLDI3MTY5MDQzMDYpLG5ldyBiKGRbNTldLDQ0Mjc3NjA0NCksbmV3IGIoZFs2MF0sNTkzNjk4MzQ0KSxuZXcgYihkWzYxXSxcbjM3MzMxMTAyNDkpLG5ldyBiKGRbNjJdLDI5OTkzNTE1NzMpLG5ldyBiKGRbNjNdLDM4MTU5MjA0MjcpLG5ldyBiKDMzOTE1Njk2MTQsMzkyODM4MzkwMCksbmV3IGIoMzUxNTI2NzI3MSw1NjYyODA3MTEpLG5ldyBiKDM5NDAxODc2MDYsMzQ1NDA2OTUzNCksbmV3IGIoNDExODYzMDI3MSw0MDAwMjM5OTkyKSxuZXcgYigxMTY0MTg0NzQsMTkxNDEzODU1NCksbmV3IGIoMTc0MjkyNDIxLDI3MzEwNTUyNzApLG5ldyBiKDI4OTM4MDM1NiwzMjAzOTkzMDA2KSxuZXcgYig0NjAzOTMyNjksMzIwNjIwMzE1KSxuZXcgYig2ODU0NzE3MzMsNTg3NDk2ODM2KSxuZXcgYig4NTIxNDI5NzEsMTA4Njc5Mjg1MSksbmV3IGIoMTAxNzAzNjI5OCwzNjU1NDMxMDApLG5ldyBiKDExMjYwMDA1ODAsMjYxODI5NzY3NiksbmV3IGIoMTI4ODAzMzQ3MCwzNDA5ODU1MTU4KSxuZXcgYigxNTAxNTA1OTQ4LDQyMzQ1MDk4NjYpLG5ldyBiKDE2MDcxNjc5MTUsOTg3MTY3NDY4KSxuZXcgYigxODE2NDAyMzE2LFxuMTI0NjE4OTU5MSldO1g9W25ldyBiKDAsMSksbmV3IGIoMCwzMjg5OCksbmV3IGIoMjE0NzQ4MzY0OCwzMjkwNiksbmV3IGIoMjE0NzQ4MzY0OCwyMTQ3NTE2NDE2KSxuZXcgYigwLDMyOTA3KSxuZXcgYigwLDIxNDc0ODM2NDkpLG5ldyBiKDIxNDc0ODM2NDgsMjE0NzUxNjU0NSksbmV3IGIoMjE0NzQ4MzY0OCwzMjc3NyksbmV3IGIoMCwxMzgpLG5ldyBiKDAsMTM2KSxuZXcgYigwLDIxNDc1MTY0MjUpLG5ldyBiKDAsMjE0NzQ4MzY1OCksbmV3IGIoMCwyMTQ3NTE2NTU1KSxuZXcgYigyMTQ3NDgzNjQ4LDEzOSksbmV3IGIoMjE0NzQ4MzY0OCwzMjkwNSksbmV3IGIoMjE0NzQ4MzY0OCwzMjc3MSksbmV3IGIoMjE0NzQ4MzY0OCwzMjc3MCksbmV3IGIoMjE0NzQ4MzY0OCwxMjgpLG5ldyBiKDAsMzI3NzgpLG5ldyBiKDIxNDc0ODM2NDgsMjE0NzQ4MzY1OCksbmV3IGIoMjE0NzQ4MzY0OCwyMTQ3NTE2NTQ1KSxuZXcgYigyMTQ3NDgzNjQ4LDMyODk2KSxuZXcgYigwLDIxNDc0ODM2NDkpLFxubmV3IGIoMjE0NzQ4MzY0OCwyMTQ3NTE2NDI0KV07Vz1bWzAsMzYsMyw0MSwxOF0sWzEsNDQsMTAsNDUsMl0sWzYyLDYsNDMsMTUsNjFdLFsyOCw1NSwyNSwyMSw1Nl0sWzI3LDIwLDM5LDgsMTRdXTsgdHJ1ZT8hKF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKGZ1bmN0aW9uKCl7cmV0dXJuIEN9KS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18sIGV4cG9ydHMsIG1vZHVsZSksXG5cdFx0XHRcdF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTp1bmRlZmluZWR9KSh0aGlzKTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gICB0cnVlID8gbW9kdWxlLmV4cG9ydHMgOiB1bmRlZmluZWRcbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgRnVuY3Rpb24oXCJyXCIsIFwicmVnZW5lcmF0b3JSdW50aW1lID0gclwiKShydW50aW1lKTtcbn1cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vbW9kdWxlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9DYXNob3V0LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvQ2FzaG91dC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IENhc2hvdXRPbmx5UmVxdWVzdCwgQ2FzaG91dE9ubHlSZXNwb25zZSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJDYXNob3V0T25seVJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBDYXNob3V0T25seVJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkNhc2hvdXRPbmx5UmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBDYXNob3V0T25seVJlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwaU1vZGVscyAqLyBcIi4vc3JjL1NwaU1vZGVscy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1JlcXVlc3RJZEhlbHBlciAqLyBcIi4vc3JjL1JlcXVlc3RJZEhlbHBlci5qc1wiKTtcblxuXG5cblxuXG52YXIgQ2FzaG91dE9ubHlSZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2FzaG91dE9ubHlSZXF1ZXN0KGFtb3VudENlbnRzLCBwb3NSZWZJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgQ2FzaG91dE9ubHlSZXF1ZXN0KTtcblxuICAgIHRoaXMuUG9zUmVmSWQgPSBwb3NSZWZJZDtcbiAgICB0aGlzLkNhc2hvdXRBbW91bnQgPSBhbW91bnRDZW50cztcbiAgICB0aGlzLlN1cmNoYXJnZUFtb3VudCA9IG51bGw7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5PcHRpb25zID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShDYXNob3V0T25seVJlcXVlc3QsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgXCJwb3NfcmVmX2lkXCI6IHRoaXMuUG9zUmVmSWQsXG4gICAgICAgIFwiY2FzaF9hbW91bnRcIjogdGhpcy5DYXNob3V0QW1vdW50LFxuICAgICAgICBcInN1cmNoYXJnZV9hbW91bnRcIjogdGhpcy5TdXJjaGFyZ2VBbW91bnRcbiAgICAgIH07XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRTaWduYXR1cmVGbG93T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuQWRkUmVjZWlwdENvbmZpZyhkYXRhKTtcbiAgICAgIHRoaXMuT3B0aW9ucy5BZGRPcHRpb25zKGRhdGEpO1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwiY3Nob3V0XCIpLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5DYXNob3V0T25seVJlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDYXNob3V0T25seVJlcXVlc3Q7XG59KCk7XG52YXIgQ2FzaG91dE9ubHlSZXNwb25zZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENhc2hvdXRPbmx5UmVzcG9uc2UobSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgQ2FzaG91dE9ubHlSZXNwb25zZSk7XG5cbiAgICB0aGlzLl9tID0gbTtcbiAgICB0aGlzLlJlcXVlc3RJZCA9IG0uSWQ7XG4gICAgdGhpcy5Qb3NSZWZJZCA9IG0uRGF0YS5wb3NfcmVmX2lkO1xuICAgIHRoaXMuU2NoZW1lTmFtZSA9IG0uRGF0YS5zY2hlbWVfbmFtZTtcbiAgICB0aGlzLlN1Y2Nlc3MgPSBtLkdldFN1Y2Nlc3NTdGF0ZSgpID09IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiU3VjY2Vzc1N0YXRlXCJdLlN1Y2Nlc3M7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKENhc2hvdXRPbmx5UmVzcG9uc2UsIFt7XG4gICAga2V5OiBcIkdldFJSTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSUk4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wicnJuXCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRDYXNob3V0QW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldENhc2hvdXRBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiY2FzaF9hbW91bnRcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEJhbmtOb25DYXNoQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbmtOb25DYXNoQW1vdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImJhbmtfbm9uY2FzaF9hbW91bnRcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEJhbmtDYXNoQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbmtDYXNoQW1vdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImJhbmtfY2FzaF9hbW91bnRcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEN1c3RvbWVyUmVjZWlwdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRDdXN0b21lclJlY2VpcHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiY3VzdG9tZXJfcmVjZWlwdFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0TWVyY2hhbnRSZWNlaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldE1lcmNoYW50UmVjZWlwdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJtZXJjaGFudF9yZWNlaXB0XCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSZXNwb25zZVRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UmVzcG9uc2VUZXh0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImhvc3RfcmVzcG9uc2VfdGV4dFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlQ29kZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJob3N0X3Jlc3BvbnNlX2NvZGVcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRlcm1pbmFsUmVmZXJlbmNlSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VGVybWluYWxSZWZlcmVuY2VJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJ0ZXJtaW5hbF9yZWZfaWRcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEFjY291bnRUeXBlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEFjY291bnRUeXBlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImFjY291bnRfdHlwZVwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QXV0aENvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QXV0aENvZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiYXV0aF9jb2RlXCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRCYW5rRGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRCYW5rRGF0ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJiYW5rX2RhdGVcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEJhbmtUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbmtUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImJhbmtfdGltZVwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0TWFza2VkUGFuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldE1hc2tlZFBhbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJtYXNrZWRfcGFuXCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRUZXJtaW5hbElkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFRlcm1pbmFsSWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1widGVybWluYWxfaWRcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc01lcmNoYW50UmVjZWlwdFByaW50ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gV2FzTWVyY2hhbnRSZWNlaXB0UHJpbnRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJtZXJjaGFudF9yZWNlaXB0X3ByaW50ZWRcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc0N1c3RvbWVyUmVjZWlwdFByaW50ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gV2FzQ3VzdG9tZXJSZWNlaXB0UHJpbnRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJjdXN0b21lcl9yZWNlaXB0X3ByaW50ZWRcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFN1cmNoYXJnZUFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTdXJjaGFyZ2VBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wic3VyY2hhcmdlX2Ftb3VudFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZXNwb25zZVZhbHVlKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVthdHRyaWJ1dGVdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDYXNob3V0T25seVJlc3BvbnNlO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9Db25uZWN0aW9uLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvQ29ubmVjdGlvbi5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IENvbm5lY3Rpb25TdGF0ZSwgU1BJX1BST1RPQ09MLCBDb25uZWN0aW9uU3RhdGVFdmVudEFyZ3MsIE1lc3NhZ2VFdmVudEFyZ3MsIENvbm5lY3Rpb24gKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQ29ubmVjdGlvblN0YXRlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQ29ubmVjdGlvblN0YXRlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTUElfUFJPVE9DT0xcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTUElfUFJPVE9DT0w7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkNvbm5lY3Rpb25TdGF0ZUV2ZW50QXJnc1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIENvbm5lY3Rpb25TdGF0ZUV2ZW50QXJnczsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTWVzc2FnZUV2ZW50QXJnc1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1lc3NhZ2VFdmVudEFyZ3M7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkNvbm5lY3Rpb25cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBDb25uZWN0aW9uOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcblxuXG52YXIgQ29ubmVjdGlvblN0YXRlID0ge1xuICBEaXNjb25uZWN0ZWQ6ICdEaXNjb25uZWN0ZWQnLFxuICBDb25uZWN0aW5nOiAnQ29ubmVjdGluZycsXG4gIENvbm5lY3RlZDogJ0Nvbm5lY3RlZCdcbn07XG52YXIgU1BJX1BST1RPQ09MID0gJ3NwaS4yLjYuMCc7XG52YXIgQ29ubmVjdGlvblN0YXRlRXZlbnRBcmdzID0gZnVuY3Rpb24gQ29ubmVjdGlvblN0YXRlRXZlbnRBcmdzKGNvbm5lY3Rpb25TdGF0ZSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIENvbm5lY3Rpb25TdGF0ZUV2ZW50QXJncyk7XG5cbiAgdGhpcy5Db25uZWN0aW9uU3RhdGUgPSBjb25uZWN0aW9uU3RhdGU7XG59O1xudmFyIE1lc3NhZ2VFdmVudEFyZ3MgPSBmdW5jdGlvbiBNZXNzYWdlRXZlbnRBcmdzKG1lc3NhZ2UpIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKSh0aGlzLCBNZXNzYWdlRXZlbnRBcmdzKTtcblxuICB0aGlzLk1lc3NhZ2UgPSBtZXNzYWdlO1xufTtcbnZhciBDb25uZWN0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ29ubmVjdGlvbigpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIENvbm5lY3Rpb24pO1xuXG4gICAgdGhpcy5BZGRyZXNzID0gbnVsbDtcbiAgICB0aGlzLkNvbm5lY3RlZCA9IGZhbHNlO1xuICAgIHRoaXMuU3RhdGUgPSBDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkO1xuICAgIHRoaXMuU3BpUHJvdG9jb2wgPSBTUElfUFJPVE9DT0w7XG4gICAgdGhpcy5fd3MgPSBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBXZWJTb2NrZXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgV2ViU29ja2V0cycpO1xuICAgIH1cbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkoQ29ubmVjdGlvbiwgW3tcbiAgICBrZXk6IFwiQ29ubmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDb25uZWN0KFVzZVNlY3VyZVdlYlNvY2tldHMpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLlN0YXRlID09PSBDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkIHx8IHRoaXMuU3RhdGUgPT09IENvbm5lY3Rpb25TdGF0ZS5Db25uZWN0aW5nKSB7XG4gICAgICAgIC8vIGFscmVhZHkgY29ubmVjdGVkIG9yIGNvbm5lY3RpbmcuIGRpc2Nvbm5lY3QgZmlyc3QuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5TdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5Db25uZWN0aW5nOyAvL0NyZWF0ZSBhIG5ldyBzb2NrZXQgaW5zdGFuY2Ugc3BlY2lmeWluZyB0aGUgdXJsLCBTUEkgcHJvdG9jb2wgYW5kIFdlYnNvY2tldCB0byB1c2UuXG4gICAgICAvL1RoZSB3aWxsIGNyZWF0ZSBhIFRDUC9JUCBzb2NrZXQgY29ubmVjdGlvbiB0byB0aGUgcHJvdmlkZWQgVVJMIGFuZCBwZXJmb3JtIEhUVFAgd2Vic29ja2V0IG5lZ290aWF0aW9uXG5cbiAgICAgIHRoaXMuX3dzID0gbmV3IFdlYlNvY2tldCh0aGlzLkFkZHJlc3MsIHRoaXMuU3BpUHJvdG9jb2wpO1xuXG4gICAgICB0aGlzLl93cy5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5wb2xsV2ViU29ja2V0Q29ubmVjdGlvbigpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fd3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm9uTWVzc2FnZVJlY2VpdmVkKHBheWxvYWQpO1xuICAgICAgfTtcblxuICAgICAgdGhpcy5fd3Mub25jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLm9uQ2xvc2VkKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl93cy5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gX3RoaXMub25FcnJvcihlcnIpO1xuICAgICAgfTtcblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ0Nvbm5lY3Rpb25TdGF0dXNDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IG5ldyBDb25uZWN0aW9uU3RhdGVFdmVudEFyZ3MoQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RpbmcpXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkRpc2Nvbm5lY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gRGlzY29ubmVjdCgpIHtcbiAgICAgIGlmICh0aGlzLlN0YXRlID09IENvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQpIHJldHVybjtcblxuICAgICAgaWYgKHRoaXMuX3dzICYmIHRoaXMuX3dzLnJlYWR5U3RhdGUgIT0gdGhpcy5fd3MuQ0xPU0VEKSB7XG4gICAgICAgIHRoaXMuX3dzLmNsb3NlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl93cykge1xuICAgICAgICB0aGlzLl93cy5vbm9wZW4gPSBudWxsO1xuICAgICAgICB0aGlzLl93cy5vbm1lc3NhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl93cy5vbmNsb3NlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fd3Mub25lcnJvciA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRoaXMub25DbG9zZWQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiU2VuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTZW5kKG1lc3NhZ2UpIHtcbiAgICAgIHRoaXMuX3dzLnNlbmQobWVzc2FnZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uT3BlbmVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uT3BlbmVkKCkge1xuICAgICAgdGhpcy5TdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQ7XG4gICAgICB0aGlzLkNvbm5lY3RlZCA9IHRydWU7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnQ29ubmVjdGlvblN0YXR1c0NoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogbmV3IENvbm5lY3Rpb25TdGF0ZUV2ZW50QXJncyhDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGVkKVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbkNsb3NlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsb3NlZCgpIHtcbiAgICAgIHRoaXMuQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLlN0YXRlID0gQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZDtcbiAgICAgIHRoaXMuX3dzID0gbnVsbDtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdDb25uZWN0aW9uU3RhdHVzQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiBuZXcgQ29ubmVjdGlvblN0YXRlRXZlbnRBcmdzKENvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQpXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInBvbGxXZWJTb2NrZXRDb25uZWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvbGxXZWJTb2NrZXRDb25uZWN0aW9uKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogMDtcblxuICAgICAgLy8gVGltZW91dCB0cnlpbmcgdG8gY29ubmVjdCBhZnRlciAyMCAqIDIwMG1zID0gNDAwMCBtc1xuICAgICAgaWYgKHRoaXMuX3dzLnJlYWR5U3RhdGUgPT09IHRoaXMuX3dzLk9QRU4pIHtcbiAgICAgICAgdGhpcy5vbk9wZW5lZCgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY291bnQgPCAyMCkge1xuICAgICAgICBjb3VudCsrO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLnBvbGxXZWJTb2NrZXRDb25uZWN0aW9uKGNvdW50KTtcbiAgICAgICAgfSwgMjAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuRGlzY29ubmVjdCgpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uTWVzc2FnZVJlY2VpdmVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVzc2FnZVJlY2VpdmVkKG1lc3NhZ2UpIHtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdNZXNzYWdlUmVjZWl2ZWQnLCB7XG4gICAgICAgIGRldGFpbDogbmV3IE1lc3NhZ2VFdmVudEFyZ3MobWVzc2FnZS5kYXRhKVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvbkVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uRXJyb3IoZXJyKSB7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnRXJyb3JSZWNlaXZlZCcsIHtcbiAgICAgICAgZGV0YWlsOiBuZXcgTWVzc2FnZUV2ZW50QXJncyhlcnIpXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENvbm5lY3Rpb247XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0NyeXB0by5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvQ3J5cHRvLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBDcnlwdG8gKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQ3J5cHRvXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQ3J5cHRvOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBqc3NoYV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEganNzaGEgKi8gXCIuL25vZGVfbW9kdWxlcy9qc3NoYS9zcmMvc2hhLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGpzc2hhX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oanNzaGFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgYWVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBhZXMtanMgKi8gXCIuL25vZGVfbW9kdWxlcy9hZXMtanMvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgYWVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oYWVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18pO1xuXG5cblxuXG52YXIgQ3J5cHRvID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ3J5cHRvKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgQ3J5cHRvKTtcbiAgfSAvLyA8c3VtbWFyeT5cbiAgLy8gRW5jcnlwdCBhIGJsb2NrIHVzaW5nIENCQyBhbmQgUEtDUzcuXG4gIC8vIDwvc3VtbWFyeT5cbiAgLy8gPHBhcmFtIG5hbWU9XCJrZXlcIj5UaGUga2V5IHZhbHVlPC9wYXJhbT5cbiAgLy8gPHBhcmFtIG5hbWU9XCJkYXRhXCI+VGhlIG1lc3NhZ2UgdG8gZW5jcnlwdDwvcGFyYW0+XG4gIC8vIDxyZXR1cm5zPlJldHVybnMgdGhlIHJlc3VsdGluZyBlbmNyeXB0ZWQgc3RyaW5nIGRhdGEgYXMgSEVYLjwvcmV0dXJucz5cblxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoQ3J5cHRvLCBudWxsLCBbe1xuICAgIGtleTogXCJBZXNFbmNyeXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEFlc0VuY3J5cHQoa2V5LCBkYXRhKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBhZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0LmEudXRpbHMuaGV4LnRvQnl0ZXMoa2V5KTtcbiAgICAgIHZhciBpdiA9IFsweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwXTtcbiAgICAgIHZhciB0ZXh0Qnl0ZXMgPSBhZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0LmEucGFkZGluZy5wa2NzNy5wYWQoYWVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdC5hLnV0aWxzLnV0ZjgudG9CeXRlcyhkYXRhKSk7XG4gICAgICB2YXIgYWVzQ2JjID0gbmV3IGFlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQuYS5Nb2RlT2ZPcGVyYXRpb24uY2JjKGJ5dGVzLCBpdik7XG4gICAgICB2YXIgZW5jcnlwdGVkQnl0ZXMgPSBhZXNDYmMuZW5jcnlwdCh0ZXh0Qnl0ZXMpO1xuICAgICAgdmFyIGVuY3J5cHRlZFN0cmluZyA9IGFlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQuYS51dGlscy5oZXguZnJvbUJ5dGVzKGVuY3J5cHRlZEJ5dGVzKTtcbiAgICAgIHJldHVybiBlbmNyeXB0ZWRTdHJpbmc7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBEZWNyeXB0IGEgYmxvY2sgdXNpbmcgYSBDQkMgYW5kIFBLQ1M3LlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cImtleVwiPlRoZSBrZXkgdmFsdWU8L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwiZGF0YVwiPnRoZSBkYXRhIHRvIGRlY3J5cHQ8L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPlJldHVybnMgdGhlIHJlc3VsdGluZyBkYXRhIGRlY3J5cHRlZCBpbiBwbGFpbnRleHQuPC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiQWVzRGVjcnlwdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBBZXNEZWNyeXB0KGtleSwgZGF0YSkge1xuICAgICAgdmFyIGJ5dGVzID0gYWVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdC5hLnV0aWxzLmhleC50b0J5dGVzKGtleSk7XG4gICAgICB2YXIgaXYgPSBbMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwMF07XG4gICAgICB2YXIgZW5jcnlwdGVkQnl0ZXMgPSBhZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0LmEudXRpbHMuaGV4LnRvQnl0ZXMoZGF0YSk7XG4gICAgICB2YXIgYWVzQ2JjID0gbmV3IGFlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQuYS5Nb2RlT2ZPcGVyYXRpb24uY2JjKGJ5dGVzLCBpdik7XG4gICAgICB2YXIgZGVjcnlwdGVkQnl0ZXMgPSBhZXNDYmMuZGVjcnlwdChlbmNyeXB0ZWRCeXRlcyk7XG4gICAgICB2YXIgZGVjcnlwdGVkID0gYWVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdC5hLnV0aWxzLnV0ZjguZnJvbUJ5dGVzKGFlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQuYS5wYWRkaW5nLnBrY3M3LnN0cmlwKGRlY3J5cHRlZEJ5dGVzKSk7XG4gICAgICByZXR1cm4gZGVjcnlwdGVkO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gQ2FsY3VsYXRlcyB0aGUgSE1BQ1NIQTI1NiBzaWduYXR1cmUgb2YgYSBtZXNzYWdlLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cImtleVwiPlRoZSBIbWFjIEtleSBhcyBIRVg8L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibWVzc2FnZVRvU2lnblwiPlRoZSBtZXNzYWdlIHRvIHNpZ248L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPlRoZSBITUFDU0hBMjU2IHNpZ25hdHVyZSBhcyBhIGhleCBzdHJpbmc8L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJIbWFjU2lnbmF0dXJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEhtYWNTaWduYXR1cmUoa2V5LCBtZXNzYWdlVG9TaWduKSB7XG4gICAgICB2YXIgc2hhT2JqID0gbmV3IGpzc2hhX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hKFwiU0hBLTI1NlwiLCBcIlRFWFRcIik7XG4gICAgICBzaGFPYmouc2V0SE1BQ0tleShrZXksICdIRVgnKTtcbiAgICAgIHNoYU9iai51cGRhdGUobWVzc2FnZVRvU2lnbik7XG4gICAgICByZXR1cm4gc2hhT2JqLmdldEhNQUMoXCJIRVhcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgdXRpbGl0eSBmdW5jdGlvbiBjYWxjdWxhdGVzIHRoZSBTSEEtMjU2IHZhbHVlIGluIGhleGFkZWNpbWFsIGZvcm1hdFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSB0aGUgdmFsdWUgdG8gYmUgaGFzaGVkXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJHZW5lcmF0ZUhhc2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2VuZXJhdGVIYXNoKHZhbHVlKSB7XG4gICAgICB2YXIgc2hhT2JqID0gbmV3IGpzc2hhX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hKCdTSEEtMjU2JywgJ0hFWCcpO1xuICAgICAgc2hhT2JqLnVwZGF0ZSh2YWx1ZSk7XG4gICAgICB2YXIgc2hhSGFzaCA9IHNoYU9iai5nZXRIYXNoKCdIRVgnKTtcbiAgICAgIHJldHVybiBzaGFIYXNoO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBDcnlwdG87XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0RpZmZpZUhlbGxtYW4uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9EaWZmaWVIZWxsbWFuLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogRGlmZmllSGVsbG1hbiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJEaWZmaWVIZWxsbWFuXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRGlmZmllSGVsbG1hbjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgYm5fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGJuLmpzICovIFwiLi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGJuX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oYm5fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyk7XG5cblxuIC8vIFRoaXMgY3JlYXRlcyB0aGUgcHJpdmF0ZSBhbmQgcHVibGljIGtleXMgZm9yIGRpZmZpZS1oZWxsbWFuIChodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9EaWZmaWUlRTIlODAlOTNIZWxsbWFuX2tleV9leGNoYW5nZSNDcnlwdG9ncmFwaGljX2V4cGxhbmF0aW9uKVxuLy8gUkVRVUlSRU1FTlRTOiBibi5qc1xuLy8gQVNTVU1QVElPTlM6IElucHV0cyB0byB0aGUgZnVuY3Rpb25zIGFyZSBoZXhhZGVjaW1hbCBzdHJpbmdzXG4vLyA8c3VtbWFyeT5cbi8vIFRoaXMgY2xhc3MgaW1wbGVtZW50cyB0aGUgRGlmZmllLUhlbGxtYW4gYWxnb3JpdGhtIHVzaW5nIEJpZ0ludGVnZXJzLlxuLy8gSXQgY2FuIGRvIHRoZSAzIG1haW4gdGhpbmdzOlxuLy8gMS4gR2VuZXJhdGUgYSByYW5kb20gUHJpdmF0ZSBLZXkgZm9yIHlvdS5cbi8vIDIuIEdlbmVyYXRlIHlvdXIgUHVibGljIEtleSBiYXNlZCBvbiB5b3VyIFByaXZhdGUgS2V5LlxuLy8gMy4gR2VuZXJhdGUgdGhlIFNlY3JldCBnaXZlbiB0aGVpciBQdWJsaWMgS2V5IGFuZCB5b3VyIFByaXZhdGUgS2V5XG4vLyBwIGFuZCBnIGFyZSB0aGUgc2hhcmVkIGNvbnN0YW50cyBmb3IgdGhlIGFsZ29yaXRobSwgYWthIHByaW1lUCBhbmQgcHJpbWVHLlxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgRGlmZmllSGVsbG1hbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERpZmZpZUhlbGxtYW4oKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBEaWZmaWVIZWxsbWFuKTtcbiAgfSAvLyA8c3VtbWFyeT5cbiAgLy8gR2VuZXJhdGVzIGEgcmFuZG9tIFByaXZhdGUgS2V5IHRoYXQgeW91IGNhbiB1c2UuXG4gIC8vIDwvc3VtbWFyeT5cbiAgLy8gPHBhcmFtIG5hbWU9XCJwXCI+PC9wYXJhbT5cbiAgLy8gPHJldHVybnM+UmFuZG9tIFByaXZhdGUgS2V5PC9yZXR1cm5zPlxuXG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShEaWZmaWVIZWxsbWFuLCBbe1xuICAgIGtleTogXCJSYW5kb21Qcml2YXRlS2V5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFJhbmRvbVByaXZhdGVLZXkobWF4VmFsdWUpIHtcbiAgICAgIHZhciBtYXhWYWx1ZUJOID0gbmV3IGJuX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hKG1heFZhbHVlKTtcbiAgICAgIHZhciBzaGlmdERpc3RhbmNlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCArIDEpO1xuICAgICAgdmFyIHJhbmRCaXRJbnQgPSBtYXhWYWx1ZUJOLnNocm4oc2hpZnREaXN0YW5jZSk7IC8vIFJpZ2h0IHNoaWZ0IGRpdmlkZXMgYnkgYSBwb3dlciBvZiAyXG5cbiAgICAgIHZhciBtaW4gPSBuZXcgYm5fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEoMik7XG5cbiAgICAgIGlmIChyYW5kQml0SW50LmNtcChtaW4pID09IC0xKSB7XG4gICAgICAgIHJldHVybiBtaW47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByYW5kQml0SW50O1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gQ2FsY3VsYXRlcyB0aGUgUHVibGljIEtleSBmcm9tIGEgUHJpdmF0ZSBLZXkuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwicFwiPjwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJnXCI+PC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInByaXZhdGVLZXlcIj48L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPlB1YmxpYyBLZXkgKEhleCk8L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJQdWJsaWNLZXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gUHVibGljS2V5KHAsIGcsIHByaXZhdGVLZXkpIHtcbiAgICAgIHZhciBhSGV4ID0gbmV3IGJuX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hKHByaXZhdGVLZXksIDE2KTtcbiAgICAgIHZhciBnSGV4ID0gbmV3IGJuX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hKGcsIDE2KTtcbiAgICAgIHZhciBtb250UHJpbWUgPSBibl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5tb250KG5ldyBibl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYShwLCAxNikpO1xuICAgICAgdmFyIGdSZWQgPSBnSGV4LnRvUmVkKG1vbnRQcmltZSk7XG4gICAgICB2YXIgc2VjcmV0ID0gZ1JlZC5yZWRQb3coYUhleCkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2KTtcbiAgICAgIHJldHVybiBzZWNyZXQ7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBDYWxjdWxhdGVzIHRoZSBzaGFyZWQgc2VjcmV0IGdpdmVuIHRoZWlyIFB1YmxpYyBLZXkgKEEpIGFuZCB5b3VyIFByaXZhdGUgS2V5IChiKVxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInBcIj48L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwidGhlaXJQdWJsaWNLZXlcIj48L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwieW91clByaXZhdGVLZXlcIj48L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPjwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIlNlY3JldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTZWNyZXQocCwgdGhlaXJQdWJsaWNLZXksIHlvdXJQcml2YXRlS2V5KSB7XG4gICAgICB2YXIgYkhleCA9IG5ldyBibl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYSh0aGVpclB1YmxpY0tleSwgMTYpO1xuICAgICAgdmFyIEFIZXggPSBuZXcgYm5fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEoeW91clByaXZhdGVLZXksIDE2KTtcbiAgICAgIHZhciBtb250UHJpbWUgPSBibl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5tb250KG5ldyBibl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYShwLCAxNikpO1xuICAgICAgdmFyIEJSZWQgPSBiSGV4LnRvUmVkKG1vbnRQcmltZSk7XG4gICAgICByZXR1cm4gQlJlZC5yZWRQb3coQUhleCkuZnJvbVJlZCgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEaWZmaWVIZWxsbWFuO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9LZXlSb2xsaW5nSGVscGVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvS2V5Um9sbGluZ0hlbHBlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IEtleVJvbGxpbmdIZWxwZXIsIEtleVJvbGxpbmdSZXN1bHQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiS2V5Um9sbGluZ0hlbHBlclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEtleVJvbGxpbmdIZWxwZXI7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIktleVJvbGxpbmdSZXN1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBLZXlSb2xsaW5nUmVzdWx0OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ3J5cHRvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NyeXB0byAqLyBcIi4vc3JjL0NyeXB0by5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU2VjcmV0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZWNyZXRzICovIFwiLi9zcmMvU2VjcmV0cy5qc1wiKTtcblxuXG5cblxuXG52YXIgS2V5Um9sbGluZ0hlbHBlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleVJvbGxpbmdIZWxwZXIoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBLZXlSb2xsaW5nSGVscGVyKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoS2V5Um9sbGluZ0hlbHBlciwgbnVsbCwgW3tcbiAgICBrZXk6IFwiUGVyZm9ybUtleVJvbGxpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gUGVyZm9ybUtleVJvbGxpbmcoa3JSZXF1ZXN0LCBjdXJyZW50U2VjcmV0cykge1xuICAgICAgdmFyIG0gPSBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKGtyUmVxdWVzdC5JZCwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uS2V5Um9sbFJlc3BvbnNlLCB7XG4gICAgICAgIFwic3RhdHVzXCI6IFwiY29uZmlybWVkXCJcbiAgICAgIH0sIHRydWUpO1xuICAgICAgdmFyIG5ld1NlY3JldHMgPSBuZXcgX1NlY3JldHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlNlY3JldHNcIl0oX0NyeXB0b19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiQ3J5cHRvXCJdLkdlbmVyYXRlSGFzaChjdXJyZW50U2VjcmV0cy5FbmNLZXkpLnRvVXBwZXJDYXNlKCksIF9DcnlwdG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIkNyeXB0b1wiXS5HZW5lcmF0ZUhhc2goY3VycmVudFNlY3JldHMuSG1hY0tleSkudG9VcHBlckNhc2UoKSk7XG4gICAgICByZXR1cm4gbmV3IEtleVJvbGxpbmdSZXN1bHQobSwgbmV3U2VjcmV0cyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEtleVJvbGxpbmdIZWxwZXI7XG59KCk7XG52YXIgS2V5Um9sbGluZ1Jlc3VsdCA9IGZ1bmN0aW9uIEtleVJvbGxpbmdSZXN1bHQoa2V5Um9sbGluZ0NvbmZpcm1hdGlvbiwgbmV3U2VjcmV0cykge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIEtleVJvbGxpbmdSZXN1bHQpO1xuXG4gIHRoaXMuS2V5Um9sbGluZ0NvbmZpcm1hdGlvbiA9IGtleVJvbGxpbmdDb25maXJtYXRpb247XG4gIHRoaXMuTmV3U2VjcmV0cyA9IG5ld1NlY3JldHM7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9Mb2dnZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0xvZ2dlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogTG9nZ2VyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkxvZ2dlclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIExvZ2dlcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG5cblxudmFyIExvZ2dlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExvZ2dlcihlbGVtZW50KSB7XG4gICAgdmFyIGxpbmVTZXBlcmF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdcXG4nO1xuXG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBMb2dnZXIpO1xuXG4gICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMubGluZVNlcGVyYXRvciA9IGxpbmVTZXBlcmF0b3I7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKExvZ2dlciwgW3tcbiAgICBrZXk6IFwiSW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJbmZvKCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVmZmVyLnB1c2goYXJncy5qb2luKCcgJykpO1xuXG4gICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiRGVidWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gRGVidWcoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKGFyZ3Muam9pbignICcpKTtcblxuICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhcm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gV2FybigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVmZmVyLnB1c2goYXJncy5qb2luKCcgJykpO1xuXG4gICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiRXJyb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gRXJyb3IoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKGFyZ3Muam9pbignICcpKTtcblxuICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkNvbnNvbGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQ29uc29sZSgpIHtcbiAgICAgIGZvciAodmFyIF9sZW41ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNSksIF9rZXk1ID0gMDsgX2tleTUgPCBfbGVuNTsgX2tleTUrKykge1xuICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUubG9nKGFyZ3Muam9pbignICcpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3JlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyKCkge1xuICAgICAgdGhpcy5lbGVtZW50LmlubmVyVGV4dCA9IHRoaXMuYnVmZmVyLmpvaW4odGhpcy5saW5lU2VwZXJhdG9yKTtcbiAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSB0aGlzLmVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJDbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDbGVhcigpIHtcbiAgICAgIHRoaXMuYnVmZmVyID0gW107XG5cbiAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBMb2dnZXI7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL01lc3NhZ2VzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL01lc3NhZ2VzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IEV2ZW50cywgU3VjY2Vzc1N0YXRlLCBNZXNzYWdlU3RhbXAsIE1lc3NhZ2VFbnZlbG9wZSwgTWVzc2FnZSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJFdmVudHNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBFdmVudHM7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlN1Y2Nlc3NTdGF0ZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFN1Y2Nlc3NTdGF0ZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTWVzc2FnZVN0YW1wXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWVzc2FnZVN0YW1wOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJNZXNzYWdlRW52ZWxvcGVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNZXNzYWdlRW52ZWxvcGU7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIk1lc3NhZ2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNZXNzYWdlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ3J5cHRvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0NyeXB0byAqLyBcIi4vc3JjL0NyeXB0by5qc1wiKTtcblxuXG4gLy8gPHN1bW1hcnk+XG4vLyBFdmVudHMgc3RhdGljYWxseSBkZWNsYXJlcyB0aGUgdmFyaW91cyBldmVudCBuYW1lcyBpbiBtZXNzYWdlcy5cbi8vIDwvc3VtbWFyeT5cblxudmFyIEV2ZW50cyA9IHtcbiAgUGFpclJlcXVlc3Q6IFwicGFpcl9yZXF1ZXN0XCIsXG4gIEtleVJlcXVlc3Q6IFwia2V5X3JlcXVlc3RcIixcbiAgS2V5UmVzcG9uc2U6IFwia2V5X3Jlc3BvbnNlXCIsXG4gIEtleUNoZWNrOiBcImtleV9jaGVja1wiLFxuICBQYWlyUmVzcG9uc2U6IFwicGFpcl9yZXNwb25zZVwiLFxuICBEcm9wS2V5c0FkdmljZTogXCJkcm9wX2tleXNcIixcbiAgTG9naW5SZXF1ZXN0OiBcImxvZ2luX3JlcXVlc3RcIixcbiAgTG9naW5SZXNwb25zZTogXCJsb2dpbl9yZXNwb25zZVwiLFxuICBQaW5nOiBcInBpbmdcIixcbiAgUG9uZzogXCJwb25nXCIsXG4gIFB1cmNoYXNlUmVxdWVzdDogXCJwdXJjaGFzZVwiLFxuICBQdXJjaGFzZVJlc3BvbnNlOiBcInB1cmNoYXNlX3Jlc3BvbnNlXCIsXG4gIENhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdDogXCJjYW5jZWxfdHJhbnNhY3Rpb25cIixcbiAgQ2FuY2VsVHJhbnNhY3Rpb25SZXNwb25zZTogXCJjYW5jZWxfcmVzcG9uc2VcIixcbiAgR2V0TGFzdFRyYW5zYWN0aW9uUmVxdWVzdDogXCJnZXRfbGFzdF90cmFuc2FjdGlvblwiLFxuICBHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZTogXCJsYXN0X3RyYW5zYWN0aW9uXCIsXG4gIFJlZnVuZFJlcXVlc3Q6IFwicmVmdW5kXCIsXG4gIFJlZnVuZFJlc3BvbnNlOiBcInJlZnVuZF9yZXNwb25zZVwiLFxuICBTaWduYXR1cmVSZXF1aXJlZDogXCJzaWduYXR1cmVfcmVxdWlyZWRcIixcbiAgU2lnbmF0dXJlRGVjbGluZWQ6IFwic2lnbmF0dXJlX2RlY2xpbmVcIixcbiAgU2lnbmF0dXJlQWNjZXB0ZWQ6IFwic2lnbmF0dXJlX2FjY2VwdFwiLFxuICBBdXRoQ29kZVJlcXVpcmVkOiBcImF1dGhvcmlzYXRpb25fY29kZV9yZXF1aXJlZFwiLFxuICBBdXRoQ29kZUFkdmljZTogXCJhdXRob3Jpc2F0aW9uX2NvZGVfYWR2aWNlXCIsXG4gIENhc2hvdXRPbmx5UmVxdWVzdDogXCJjYXNoXCIsXG4gIENhc2hvdXRPbmx5UmVzcG9uc2U6IFwiY2FzaF9yZXNwb25zZVwiLFxuICBNb3RvUHVyY2hhc2VSZXF1ZXN0OiBcIm1vdG9fcHVyY2hhc2VcIixcbiAgTW90b1B1cmNoYXNlUmVzcG9uc2U6IFwibW90b19wdXJjaGFzZV9yZXNwb25zZVwiLFxuICBTZXR0bGVSZXF1ZXN0OiBcInNldHRsZVwiLFxuICBTZXR0bGVSZXNwb25zZTogXCJzZXR0bGVfcmVzcG9uc2VcIixcbiAgU2V0dGxlbWVudEVucXVpcnlSZXF1ZXN0OiBcInNldHRsZW1lbnRfZW5xdWlyeVwiLFxuICBTZXR0bGVtZW50RW5xdWlyeVJlc3BvbnNlOiBcInNldHRsZW1lbnRfZW5xdWlyeV9yZXNwb25zZVwiLFxuICBTZXRQb3NJbmZvUmVxdWVzdDogXCJzZXRfcG9zX2luZm9cIixcbiAgU2V0UG9zSW5mb1Jlc3BvbnNlOiBcInNldF9wb3NfaW5mb19yZXNwb25zZVwiLFxuICBLZXlSb2xsUmVxdWVzdDogXCJyZXF1ZXN0X3VzZV9uZXh0X2tleXNcIixcbiAgS2V5Um9sbFJlc3BvbnNlOiBcInJlc3BvbnNlX3VzZV9uZXh0X2tleXNcIixcbiAgRXJyb3I6IFwiZXJyb3JcIixcbiAgSW52YWxpZEhtYWNTaWduYXR1cmU6IFwiX0lOVkFMSURfU0lHTkFUVVJFX1wiLFxuICAvLyBQYXkgQXQgVGFibGUgUmVsYXRlZCBNZXNzYWdlc1xuICBQYXlBdFRhYmxlR2V0VGFibGVDb25maWc6IFwiZ2V0X3RhYmxlX2NvbmZpZ1wiLFxuICAvLyBpbmNvbWluZy4gV2hlbiBlZnRwb3Mgd2FudHMgdG8gYXNrIHVzIGZvciBQQFQgY29uZmlndXJhdGlvbi5cbiAgUGF5QXRUYWJsZVNldFRhYmxlQ29uZmlnOiBcInNldF90YWJsZV9jb25maWdcIixcbiAgLy8gb3V0Z29pbmcuIFdoZW4gd2Ugd2FudCB0byBpbnN0cnVjdCBlZnRwb3Mgd2l0aCB0aGUgUEBUIGNvbmZpZ3VyYXRpb24uXG4gIFBheUF0VGFibGVHZXRCaWxsRGV0YWlsczogXCJnZXRfYmlsbF9kZXRhaWxzXCIsXG4gIC8vIGluY29taW5nLiBXaGVuIGVmdHBvcyB3YW50cyB0byBhcmV0cmlldmUgdGhlIGJpbGwgZm9yIGEgdGFibGUuXG4gIFBheUF0VGFibGVCaWxsRGV0YWlsczogXCJiaWxsX2RldGFpbHNcIixcbiAgLy8gb3V0Z29pbmcuIFdlIHJlcGx5IHdpdGggdGhpcyB3aGVuIGVmdHBvcyByZXF1ZXN0cyB0byB1cyBnZXRfYmlsbF9kZXRhaWxzLlxuICBQYXlBdFRhYmxlQmlsbFBheW1lbnQ6IFwiYmlsbF9wYXltZW50XCIsXG4gIC8vIGluY29taW5nLiBXaGVuIHRoZSBlZnRwb3MgYWR2aWNlcyBcbiAgUHJpbnRpbmdSZXF1ZXN0OiBcInByaW50XCIsXG4gIFByaW50aW5nUmVzcG9uc2U6IFwicHJpbnRfcmVzcG9uc2VcIixcbiAgVGVybWluYWxTdGF0dXNSZXF1ZXN0OiBcImdldF90ZXJtaW5hbF9zdGF0dXNcIixcbiAgVGVybWluYWxTdGF0dXNSZXNwb25zZTogXCJ0ZXJtaW5hbF9zdGF0dXNcIixcbiAgQmF0dGVyeUxldmVsQ2hhbmdlZDogXCJiYXR0ZXJ5X2xldmVsX2NoYW5nZWRcIixcbiAgUGF5QXRUYWJsZUdldE9wZW5UYWJsZXM6IFwiZ2V0X29wZW5fdGFibGVzXCIsXG4gIFBheUF0VGFibGVPcGVuVGFibGVzOiBcIm9wZW5fdGFibGVzXCIsXG4gIFBheUF0VGFibGVCaWxsUGF5bWVudEZsb3dFbmRlZDogXCJiaWxsX3BheW1lbnRfZmxvd19lbmRlZFwiXG59O1xudmFyIFN1Y2Nlc3NTdGF0ZSA9IHtcbiAgVW5rbm93bjogJ1Vua25vd24nLFxuICBTdWNjZXNzOiAnU3VjY2VzcycsXG4gIEZhaWxlZDogJ0ZhaWxlZCdcbn07IC8vIDxzdW1tYXJ5PlxuLy8gTWVzc2FnZVN0YW1wIHJlcHJlc2VudHMgd2hhdCBpcyByZXF1aXJlZCB0byB0dXJuIGFuIG91dGdvaW5nIE1lc3NhZ2UgaW50byBKc29uXG4vLyBpbmNsdWRpbmcgZW5jcnlwdGlvbiBhbmQgZGF0ZSBzZXR0aW5nLlxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgTWVzc2FnZVN0YW1wID0gZnVuY3Rpb24gTWVzc2FnZVN0YW1wKHBvc0lkLCBzZWNyZXRzLCBzZXJ2ZXJUaW1lRGVsdGEpIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKSh0aGlzLCBNZXNzYWdlU3RhbXApO1xuXG4gIHRoaXMuUG9zSWQgPSBwb3NJZDtcbiAgdGhpcy5TZWNyZXRzID0gc2VjcmV0cztcbiAgdGhpcy5TZXJ2ZXJUaW1lRGVsdGEgPSBzZXJ2ZXJUaW1lRGVsdGE7XG59OyAvLyA8c3VtbWFyeT5cbi8vIE1lc3NhZ2VFbnZlbG9wZSByZXByZXNlbnRzIHRoZSBvdXRlciBzdHJ1Y3R1cmUgb2YgYW55IG1lc3NhZ2UgdGhhdCBpcyBleGNoYW5nZWRcbi8vIGJldHdlZW4gdGhlIFBvcyBhbmQgdGhlIFBpblBhZCBhbmQgdmljZS12ZXJzYS5cbi8vIFNlZSBodHRwOi8vd3d3LnNpbXBsZXBheW1lbnRhcGkuY29tLyMvYXBpL21lc3NhZ2UtZW5jcnlwdGlvblxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgTWVzc2FnZUVudmVsb3BlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWVzc2FnZUVudmVsb3BlKG1lc3NhZ2UsIGVuYywgaG1hYywgcG9zSWQpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIE1lc3NhZ2VFbnZlbG9wZSk7XG5cbiAgICAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgTWVzc2FnZSBmaWVsZCBpcyBzZXQgb25seSB3aGVuIGluIFVuLWVuY3J5cHRlZCBmb3JtLlxuICAgIC8vIEluIGZhY3QgaXQgaXMgdGhlIG9ubHkgZmllbGQgaW4gYW4gZW52ZWxvcGUgaW4gdGhlIFVuLUVuY3J5cHRlZCBmb3JtLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICB0aGlzLk1lc3NhZ2UgPSBtZXNzYWdlOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgZW5jIGZpZWxkIGlzIHNldCBvbmx5IHdoZW4gaW4gRW5jcnlwdGVkIGZvcm0uXG4gICAgLy8gSXQgY29udGFpbnMgdGhlIGVuY3J5cHRlZCBKc29uIG9mIGFub3RoZXIgTWVzc2FnZUVudmVsb3BlIFxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuRW5jID0gZW5jOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgaG1hYyBmaWVsZCBpcyBzZXQgb25seSB3aGVuIGluIEVuY3J5cHRlZCBmb3JtLlxuICAgIC8vIEl0IGlzIHRoZSBzaWduYXR1cmUgb2YgdGhlIFwiZW5jXCIgZmllbGQuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5IbWFjID0gaG1hYzsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIHBvc19pZCBmaWVsZCBpcyBvbmx5IGZpbGxlZCBmb3Igb3V0Z29pbmcgRW5jcnlwdGVkIG1lc3NhZ2VzLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuUG9zSWQgPSBwb3NJZDtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkoTWVzc2FnZUVudmVsb3BlLCBbe1xuICAgIGtleTogXCJ0b0pTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWVzc2FnZTogdGhpcy5NZXNzYWdlLFxuICAgICAgICBlbmM6IHRoaXMuRW5jLFxuICAgICAgICBobWFjOiB0aGlzLkhtYWMsXG4gICAgICAgIHBvc19pZDogdGhpcy5Qb3NJZFxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWVzc2FnZUVudmVsb3BlO1xufSgpOyAvLyA8c3VtbWFyeT5cbi8vIE1lc3NhZ2UgcmVwcmVzZW50cyB0aGUgY29udGVudHMgb2YgYSBNZXNzYWdlLlxuLy8gU2VlIGh0dHA6Ly93d3cuc2ltcGxlcGF5bWVudGFwaS5jb20vIy9hcGkvbWVzc2FnZS1lbmNyeXB0aW9uXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBNZXNzYWdlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWVzc2FnZShpZCwgZXZlbnROYW1lLCBkYXRhLCBuZWVkc0VuY3J5cHRpb24pIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIE1lc3NhZ2UpO1xuXG4gICAgdGhpcy5JZCA9IGlkO1xuICAgIHRoaXMuRXZlbnROYW1lID0gZXZlbnROYW1lO1xuICAgIHRoaXMuRGF0YSA9IGRhdGE7XG4gICAgdGhpcy5EYXRlVGltZVN0YW1wID0gJyc7XG4gICAgdGhpcy5Qb3NJZCA9ICcnOyAvLyBQb3NfaWQgaXMgc2V0IGhlcmUgb25seSBmb3Igb3V0Z29pbmcgVW4tZW5jcnlwdGVkIG1lc3NhZ2VzLiBcblxuICAgIHRoaXMuSW5jb21taW5nSG1hYyA9ICcnOyAvLyBTb21ldGltZXMgdGhlIGxvZ2ljIGFyb3VuZCB0aGUgaW5jb21pbmcgbWVzc2FnZSBtaWdodCBuZWVkIGFjY2VzcyB0byB0aGUgc3VnbmF0dXJlLCBmb3IgZXhhbXBsZSBpbiB0aGUga2V5X2NoZWNrLlxuXG4gICAgdGhpcy5fbmVlZHNFbmNyeXB0aW9uID0gbmVlZHNFbmNyeXB0aW9uOyAvLyBEZW5vdGVzIHdoZXRoZXIgYW4gb3V0Z29pbmcgbWVzc2FnZSBuZWVkcyB0byBiZSBlbmNyeXB0ZWQgaW4gVG9Kc29uKClcblxuICAgIHRoaXMuRGVjcnlwdGVkSnNvbiA9ICcnOyAvLyBTZXQgb24gYW4gaW5jb21pbmcgbWVzc2FnZSBqdXN0IHNvIHlvdSBjYW4gaGF2ZSBhIGxvb2sgYXQgd2hhdCBpdCBsb29rZWQgbGlrZSBpbiBpdHMganNvbiBmb3JtLlxuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKShNZXNzYWdlLCBbe1xuICAgIGtleTogXCJHZXRTdWNjZXNzU3RhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0U3VjY2Vzc1N0YXRlKCkge1xuICAgICAgaWYgKCF0aGlzLkRhdGEgfHwgdHlwZW9mIHRoaXMuRGF0YS5zdWNjZXNzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBTdWNjZXNzU3RhdGUuVW5rbm93bjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuRGF0YS5zdWNjZXNzID8gU3VjY2Vzc1N0YXRlLlN1Y2Nlc3MgOiBTdWNjZXNzU3RhdGUuRmFpbGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRFcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRFcnJvcigpIHtcbiAgICAgIHJldHVybiB0aGlzLkRhdGEuZXJyb3JfcmVhc29uID8gdGhpcy5EYXRhLmVycm9yX3JlYXNvbiA6IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEVycm9yRGV0YWlsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEVycm9yRGV0YWlsKCkge1xuICAgICAgcmV0dXJuIHRoaXMuRGF0YS5lcnJvcl9kZXRhaWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFNlcnZlclRpbWVEZWx0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTZXJ2ZXJUaW1lRGVsdGEoKSB7XG4gICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTsgLy8gU3RhbXAgZm9ybWF0OiAyMDE4LTA0LTE5VDAxOjQyOjM4LjI3OVxuXG4gICAgICB2YXIgZHRzID0gdGhpcy5EYXRlVGltZVN0YW1wLnNwbGl0KC9bXFwtXFwrXFwuIDpUXS8pO1xuICAgICAgdmFyIG1zZ1RpbWUgPSBuZXcgRGF0ZSggLy8geWVhciwgbW9udGgsIGRhdGVcbiAgICAgIGR0c1swXSwgZHRzWzFdIC0gMSwgZHRzWzJdLCAvLyBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzXG4gICAgICBkdHNbM10sIGR0c1s0XSwgZHRzWzVdLCBkdHNbNl0pLmdldFRpbWUoKTsgLy8gTG9jYWwgdGltZSB6b25lXG5cbiAgICAgIHJldHVybiBtc2dUaW1lIC0gbm93O1xuICAgIH0gLy8gSGVscGVyIG1ldGhvZCB0byBwYXJzZSBiYW5rIGRhdGUgZm9ybWF0IDIwMDQyMDE4IChkZE1NeXl5eSlcblxuICB9LCB7XG4gICAga2V5OiBcIlRvSnNvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb0pzb24oc3RhbXApIHtcbiAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgdmFyIHR6b2Zmc2V0ID0gbmV3IERhdGUoKS5nZXRUaW1lem9uZU9mZnNldCgpICogNjAgKiAxMDAwO1xuICAgICAgdmFyIGFkanVzdGVkVGltZSA9IG5ldyBEYXRlKG5vdyAtIHR6b2Zmc2V0ICsgc3RhbXAuU2VydmVyVGltZURlbHRhKTsgLy8gRm9ybWF0IGRhdGU6IFwieXl5eS1NTS1kZFRISDptbTpzcy5mZmZcIlxuXG4gICAgICB0aGlzLkRhdGVUaW1lU3RhbXAgPSBhZGp1c3RlZFRpbWUudG9JU09TdHJpbmcoKS5zbGljZSgwLCAtMSk7XG4gICAgICB0aGlzLlBvc0lkID0gc3RhbXAuUG9zSWQ7XG4gICAgICB2YXIgZW52ZWxvcGUgPSB7XG4gICAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgICBpZDogdGhpcy5JZCxcbiAgICAgICAgICBldmVudDogdGhpcy5FdmVudE5hbWUsXG4gICAgICAgICAgZGF0YTogdGhpcy5EYXRhLFxuICAgICAgICAgIGRhdGV0aW1lOiB0aGlzLkRhdGVUaW1lU3RhbXBcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKCF0aGlzLl9uZWVkc0VuY3J5cHRpb24pIHtcbiAgICAgICAgLy8gVW5lbmNyeXB0ZWQgTWVzc2FnZXMgbmVlZCBQb3NJRCBpbnNpZGUgdGhlIG1lc3NhZ2VcbiAgICAgICAgZW52ZWxvcGUubWVzc2FnZS5wb3NfaWQgPSB0aGlzLlBvc0lkO1xuICAgICAgfVxuXG4gICAgICB0aGlzLkRlY3J5cHRlZEpzb24gPSBKU09OLnN0cmluZ2lmeShlbnZlbG9wZSk7XG5cbiAgICAgIGlmICghdGhpcy5fbmVlZHNFbmNyeXB0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkRlY3J5cHRlZEpzb247XG4gICAgICB9XG5cbiAgICAgIHZhciBlbmNNc2cgPSBfQ3J5cHRvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJDcnlwdG9cIl0uQWVzRW5jcnlwdChzdGFtcC5TZWNyZXRzLkVuY0tleSwgdGhpcy5EZWNyeXB0ZWRKc29uKTtcbiAgICAgIHZhciBobWFjU2lnID0gX0NyeXB0b19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiQ3J5cHRvXCJdLkhtYWNTaWduYXR1cmUoc3RhbXAuU2VjcmV0cy5IbWFjS2V5LCBlbmNNc2cpO1xuICAgICAgdmFyIGVuY3JNZXNzYWdlRW52ZWxvcGUgPSB7XG4gICAgICAgIGVuYzogZW5jTXNnLFxuICAgICAgICBobWFjOiBobWFjU2lnLnRvVXBwZXJDYXNlKCksXG4gICAgICAgIHBvc19pZDogc3RhbXAuUG9zSWRcbiAgICAgIH07XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZW5jck1lc3NhZ2VFbnZlbG9wZSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiUGFyc2VCYW5rRGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBQYXJzZUJhbmtEYXRlKGJhbmtEYXRlKSB7XG4gICAgICBpZiAoYmFua0RhdGUubGVuZ3RoICE9PSA4KSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShcIlwiLmNvbmNhdChiYW5rRGF0ZS5zdWJzdHIoNCwgNCksIFwiLVwiKS5jb25jYXQoYmFua0RhdGUuc3Vic3RyKDIsIDIpLCBcIi1cIikuY29uY2F0KGJhbmtEYXRlLnN1YnN0cigwLCAyKSkpO1xuICAgIH0gLy8gUGFyc2VzIGEgYmFuayBkYXRlICYgdGltZSBzdHIgZnJvbSBcIjA1T2N0MTdcIiAvIFwiMDU6MDBcIiAoXCJkZE1NTXl5L0hIOm1tXCIpIGludG8gZGF0ZSBvYmpcblxuICB9LCB7XG4gICAga2V5OiBcIlBhcnNlQmFua0RhdGVUaW1lU3RyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFBhcnNlQmFua0RhdGVUaW1lU3RyKGRhdGUsIHRpbWUpIHtcbiAgICAgIHJldHVybiBuZXcgRGF0ZShcIlwiLmNvbmNhdChkYXRlLnN1YnN0cigwLCAyKSwgXCIgXCIpLmNvbmNhdChkYXRlLnN1YnN0cigyLCAzKSwgXCIgXCIpLmNvbmNhdChkYXRlLnN1YnN0cig1LCAyKSwgXCIgXCIpLmNvbmNhdCh0aW1lKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkZyb21Kc29uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEZyb21Kc29uKG1zZ0pzb24sIHNlY3JldHMpIHtcbiAgICAgIHZhciBlbnYgPSBKU09OLnBhcnNlKG1zZ0pzb24pO1xuXG4gICAgICBpZiAoZW52Lm1lc3NhZ2UgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKGVudi5tZXNzYWdlLmlkLCBlbnYubWVzc2FnZS5ldmVudCwgZW52Lm1lc3NhZ2UuZGF0YSwgZmFsc2UpO1xuICAgICAgICBtZXNzYWdlLkRlY3J5cHRlZEpzb24gPSBtc2dKc29uO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlY3JldHMgPT0gbnVsbCkge1xuICAgICAgICAvLyBUaGlzIG1heSBoYXBwZW4gaWYgd2Ugc29tZWhvdyByZWNlaXZlZCBhbiBlbmNyeXB0ZWQgbWVzc2FnZSBmcm9tIGVmdHBvcyBidXQgd2UncmUgbm90IGNvbmZpZ2VyZWQgd2l0aCBzZWNyZXRzLlxuICAgICAgICAvLyBGb3IgZXhhbXBsZSwgaWYgd2UgY2FuY2VsIHRoZSBwYWlyaW5nIHByb2Nlc3MgYSBsaXR0bGUgbGF0ZSBpbiB0aGUgZ2FtZSBhbmQgd2UgZ2V0IGFuIGVuY3J5cHRlZCBrZXlfY2hlY2sgbWVzc2FnZSBhZnRlciB3ZSd2ZSBkcm9wcGVkIHRoZSBrZXlzLlxuICAgICAgICByZXR1cm4gbmV3IE1lc3NhZ2UoXCJVTktOT1dOXCIsIFwiTk9TRUNSRVRTXCIsIG51bGwsIGZhbHNlKTtcbiAgICAgIH0gLy8gSXRzIGVuY3J5cHRlZCwgdmVyaWZ5IHNpZ1xuXG5cbiAgICAgIHZhciBzaWcgPSBfQ3J5cHRvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJDcnlwdG9cIl0uSG1hY1NpZ25hdHVyZShzZWNyZXRzLkhtYWNLZXksIGVudi5lbmMpO1xuXG4gICAgICBpZiAoc2lnLnRvVXBwZXJDYXNlKCkgIT0gZW52LmhtYWMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNZXNzYWdlKFwiX1wiLCBFdmVudHMuSW52YWxpZEhtYWNTaWduYXR1cmUsIG51bGwsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlY3J5cHRlZEpzb24gPSBfQ3J5cHRvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJDcnlwdG9cIl0uQWVzRGVjcnlwdChzZWNyZXRzLkVuY0tleSwgZW52LmVuYyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBkZWNyeXB0ZWRNc2cgPSBKU09OLnBhcnNlKGRlY3J5cHRlZEpzb24pO1xuXG4gICAgICAgIHZhciBfbWVzc2FnZSA9IG5ldyBNZXNzYWdlKGRlY3J5cHRlZE1zZy5tZXNzYWdlLmlkLCBkZWNyeXB0ZWRNc2cubWVzc2FnZS5ldmVudCwgZGVjcnlwdGVkTXNnLm1lc3NhZ2UuZGF0YSwgdHJ1ZSk7XG5cbiAgICAgICAgX21lc3NhZ2UuRGF0ZVRpbWVTdGFtcCA9IGRlY3J5cHRlZE1zZy5tZXNzYWdlLmRhdGV0aW1lO1xuICAgICAgICBfbWVzc2FnZS5Qb3NJZCA9IGRlY3J5cHRlZE1zZy5tZXNzYWdlLnBvc19pZDtcbiAgICAgICAgX21lc3NhZ2UuSW5jb21pbmdIbWFjID0gZW52LmhtYWM7XG4gICAgICAgIF9tZXNzYWdlLkRlY3J5cHRlZEpzb24gPSBkZWNyeXB0ZWRKc29uO1xuICAgICAgICByZXR1cm4gX21lc3NhZ2U7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWVzc2FnZShcIlVOS05PV05cIiwgXCJVTlBBUlNFQUJMRVwiLCB7XG4gICAgICAgICAgXCJtc2dcIjogZGVjcnlwdGVkSnNvblxuICAgICAgICB9LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1lc3NhZ2U7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1BhaXJpbmcuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9QYWlyaW5nLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogUGFpclJlcXVlc3QsIEtleVJlcXVlc3QsIEtleVJlc3BvbnNlLCBLZXlDaGVjaywgUGFpclJlc3BvbnNlLCBTZWNyZXRzQW5kS2V5UmVzcG9uc2UsIERyb3BLZXlzUmVxdWVzdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQYWlyUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBhaXJSZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJLZXlSZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gS2V5UmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiS2V5UmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBLZXlSZXNwb25zZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiS2V5Q2hlY2tcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBLZXlDaGVjazsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUGFpclJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUGFpclJlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTZWNyZXRzQW5kS2V5UmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTZWNyZXRzQW5kS2V5UmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkRyb3BLZXlzUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIERyb3BLZXlzUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01lc3NhZ2VzICovIFwiLi9zcmMvTWVzc2FnZXMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9SZXF1ZXN0SWRIZWxwZXIgKi8gXCIuL3NyYy9SZXF1ZXN0SWRIZWxwZXIuanNcIik7XG5cblxuXG4gLy8gPHN1bW1hcnk+XG4vLyBQYWlyaW5nIEludGVyYWN0aW9uIDE6IE91dGdvaW5nXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBQYWlyUmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBhaXJSZXF1ZXN0KCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUGFpclJlcXVlc3QpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQYWlyUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBwYWRkaW5nOiB0cnVlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicHJcIiksIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLlBhaXJSZXF1ZXN0LCBkYXRhLCBmYWxzZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBhaXJSZXF1ZXN0O1xufSgpOyAvLyBQYWlyaW5nIEludGVyYWN0aW9uIDI6IEluY29taW5nXG5cbnZhciBLZXlSZXF1ZXN0ID0gZnVuY3Rpb24gS2V5UmVxdWVzdChtKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgS2V5UmVxdWVzdCk7XG5cbiAgdGhpcy5SZXF1ZXN0SWQgPSBtLklkO1xuICB0aGlzLkFlbmMgPSBtLkRhdGEuZW5jLkE7XG4gIHRoaXMuQWhtYWMgPSBtLkRhdGEuaG1hYy5BO1xufTsgLy8gUGFpcmluZyBJbnRlcmFjdGlvbiAzOiBPdXRnb2luZ1xuXG52YXIgS2V5UmVzcG9uc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBLZXlSZXNwb25zZShyZXF1ZXN0SWQsIEJlbmMsIEJobWFjKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBLZXlSZXNwb25zZSk7XG5cbiAgICB0aGlzLlJlcXVlc3RJZCA9IHJlcXVlc3RJZDtcbiAgICB0aGlzLkJlbmMgPSBCZW5jO1xuICAgIHRoaXMuQmhtYWMgPSBCaG1hYztcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoS2V5UmVzcG9uc2UsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgZW5jOiB7XG4gICAgICAgICAgQjogdGhpcy5CZW5jXG4gICAgICAgIH0sXG4gICAgICAgIGhtYWM6IHtcbiAgICAgICAgICBCOiB0aGlzLkJobWFjXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXSh0aGlzLlJlcXVlc3RJZCwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uS2V5UmVzcG9uc2UsIGRhdGEsIGZhbHNlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gS2V5UmVzcG9uc2U7XG59KCk7IC8vIFBhaXJpbmcgSW50ZXJhY3Rpb24gNDogSW5jb21pbmdcblxudmFyIEtleUNoZWNrID0gZnVuY3Rpb24gS2V5Q2hlY2sobSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIEtleUNoZWNrKTtcblxuICB0aGlzLkNvbmZpcm1hdGlvbkNvZGUgPSBtLkluY29taW5nSG1hYy5zdWJzdHJpbmcoMCwgNik7XG59OyAvLyBQYWlyaW5nIEludGVyYWN0aW9uIDU6IEluY29taW5nXG5cbnZhciBQYWlyUmVzcG9uc2UgPSBmdW5jdGlvbiBQYWlyUmVzcG9uc2UobSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFBhaXJSZXNwb25zZSk7XG5cbiAgdGhpcy5TdWNjZXNzID0gbS5EYXRhLnN1Y2Nlc3M7XG59OyAvLyBIb2xkZXIgY2xhc3MgZm9yIFNlY3JldHMgYW5kIEtleVJlc3BvbnNlLCBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSB0b2dldGhlciBpbiBtZXRob2Qgc2lnbmF0dXJlcy5cblxudmFyIFNlY3JldHNBbmRLZXlSZXNwb25zZSA9IGZ1bmN0aW9uIFNlY3JldHNBbmRLZXlSZXNwb25zZShzZWNyZXRzLCBrZXlSZXNwb25zZSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFNlY3JldHNBbmRLZXlSZXNwb25zZSk7XG5cbiAgdGhpcy5TZWNyZXRzID0gc2VjcmV0cztcbiAgdGhpcy5LZXlSZXNwb25zZSA9IGtleVJlc3BvbnNlO1xufTtcbnZhciBEcm9wS2V5c1JlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEcm9wS2V5c1JlcXVlc3QoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBEcm9wS2V5c1JlcXVlc3QpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShEcm9wS2V5c1JlcXVlc3QsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJkcnBreXNcIiksIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLkRyb3BLZXlzQWR2aWNlLCBudWxsLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRHJvcEtleXNSZXF1ZXN0O1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QYWlyaW5nSGVscGVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGFpcmluZ0hlbHBlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IEdFTkVSQVRPUiwgR1JPVVAxNF8yMDQ4X0JJVF9NT0RQLCBQYWlyaW5nSGVscGVyLCBQdWJsaWNLZXlBbmRTZWNyZXQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiR0VORVJBVE9SXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gR0VORVJBVE9SOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJHUk9VUDE0XzIwNDhfQklUX01PRFBcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBHUk9VUDE0XzIwNDhfQklUX01PRFA7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBhaXJpbmdIZWxwZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQYWlyaW5nSGVscGVyOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQdWJsaWNLZXlBbmRTZWNyZXRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQdWJsaWNLZXlBbmRTZWNyZXQ7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QYWlyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1BhaXJpbmcgKi8gXCIuL3NyYy9QYWlyaW5nLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZWNyZXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NlY3JldHMgKi8gXCIuL3NyYy9TZWNyZXRzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9DcnlwdG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ3J5cHRvICovIFwiLi9zcmMvQ3J5cHRvLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9EaWZmaWVIZWxsbWFuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0RpZmZpZUhlbGxtYW4gKi8gXCIuL3NyYy9EaWZmaWVIZWxsbWFuLmpzXCIpO1xuXG5cblxuXG5cbiAvLyBUaGlzIGlzIHRoZSBnZW5lcmF0b3IgdXNlZCBmb3IgZGlmZmllLWhlbGxtYW4gaW4gMjA0OC1iaXQgTU9EUCBHcm91cCAxNCBhcyBwZXIgKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNTI2I3NlY3Rpb24tMylcblxudmFyIEdFTkVSQVRPUiA9IDI7IC8vIFRoaXMgaXMgdGhlIHByaW1lIHVzZWQgZm9yIGRpZmZpZS1oZWxsbWFuIHVzaW5nIDIwNDgtYml0IE1PRFAgR3JvdXAgMTQgYXMgcGVyIChodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzUyNiNzZWN0aW9uLTMpXG5cbnZhciBHUk9VUDE0XzIwNDhfQklUX01PRFAgPSAnRkZGRkZGRkZGRkZGRkZGRkM5MEZEQUEyMjE2OEMyMzRDNEM2NjI4QjgwREMxQ0QxMjkwMjRFMDg4QTY3Q0M3NDAyMEJCRUE2M0IxMzlCMjI1MTRBMDg3OThFMzQwNERERUY5NTE5QjNDRDNBNDMxQjMwMkIwQTZERjI1RjE0Mzc0RkUxMzU2RDZENTFDMjQ1RTQ4NUI1NzY2MjVFN0VDNkY0NEM0MkU5QTYzN0VENkIwQkZGNUNCNkY0MDZCN0VERUUzODZCRkI1QTg5OUZBNUFFOUYyNDExN0M0QjFGRTY0OTI4NjY1MUVDRTQ1QjNEQzIwMDdDQjhBMTYzQkYwNTk4REE0ODM2MUM1NUQzOUE2OTE2M0ZBOEZEMjRDRjVGODM2NTVEMjNEQ0EzQUQ5NjFDNjJGMzU2MjA4NTUyQkI5RUQ1MjkwNzcwOTY5NjZENjcwQzM1NEU0QUJDOTgwNEYxNzQ2QzA4Q0ExODIxN0MzMjkwNUU0NjJFMzZDRTNCRTM5RTc3MkMxODBFODYwMzlCMjc4M0EyRUMwN0EyOEZCNUM1NURGMDZGNEM1MkM5REUyQkNCRjY5NTU4MTcxODM5OTU0OTdDRUE5NTZBRTUxNUQyMjYxODk4RkEwNTEwMTU3MjhFNUE4QUFDQUE2OEZGRkZGRkZGRkZGRkZGRkYnOyAvLyA8c3VtbWFyeT5cbi8vIFRoaXMgc3RhdGljIGNsYXNzIGhlbHBzIHlvdSB3aXRoIHRoZSBwYWlyaW5nIHByb2Nlc3MgYXMgZG9jdW1lbnRlZCBoZXJlOlxuLy8gaHR0cDovL3d3dy5zaW1wbGVwYXltZW50YXBpLmNvbS8jL2FwaS9wYWlyaW5nLXByb2Nlc3Ncbi8vIDwvc3VtbWFyeT5cblxudmFyIFBhaXJpbmdIZWxwZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQYWlyaW5nSGVscGVyKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUGFpcmluZ0hlbHBlcik7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFBhaXJpbmdIZWxwZXIsIFt7XG4gICAga2V5OiBcIkdlbmVyYXRlU2VjcmV0c0FuZEtleVJlc3BvbnNlXCIsXG4gICAgLy8gPHN1bW1hcnk+XG4gICAgLy8gQ2FsY3VsYXRlcy9HZW5lcmF0ZXMgU2VjcmV0cyBhbmQgS2V5UmVzcG9uc2UgZ2l2ZW4gYW4gaW5jb21pbmcgS2V5UmVxdWVzdC5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJrZXlSZXF1ZXN0XCI+PC9wYXJhbT5cbiAgICAvLyA8cmV0dXJucz5TZWNyZXRzIGFuZCBLZXlSZXNwb25zZSB0byBzZW5kIGJhY2suPC9yZXR1cm5zPlxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZW5lcmF0ZVNlY3JldHNBbmRLZXlSZXNwb25zZShrZXlSZXF1ZXN0KSB7XG4gICAgICB2YXIgZW5jUHViQW5kU2VjID0gdGhpcy5fY2FsY3VsYXRlTXlQdWJsaWNLZXlBbmRTZWNyZXQoa2V5UmVxdWVzdC5BZW5jKTtcblxuICAgICAgdmFyIEJlbmMgPSBlbmNQdWJBbmRTZWMuTXlQdWJsaWNLZXk7XG4gICAgICB2YXIgU2VuYyA9IGVuY1B1YkFuZFNlYy5TaGFyZWRTZWNyZXRLZXk7XG5cbiAgICAgIHZhciBobWFjUHViQW5kU2VjID0gdGhpcy5fY2FsY3VsYXRlTXlQdWJsaWNLZXlBbmRTZWNyZXQoa2V5UmVxdWVzdC5BaG1hYyk7XG5cbiAgICAgIHZhciBCaG1hYyA9IGhtYWNQdWJBbmRTZWMuTXlQdWJsaWNLZXk7XG4gICAgICB2YXIgU2htYWMgPSBobWFjUHViQW5kU2VjLlNoYXJlZFNlY3JldEtleTtcbiAgICAgIHZhciBzZWNyZXRzID0gbmV3IF9TZWNyZXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJTZWNyZXRzXCJdKFNlbmMsIFNobWFjKTtcbiAgICAgIHZhciBrZXlSZXNwb25zZSA9IG5ldyBfUGFpcmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiS2V5UmVzcG9uc2VcIl0oa2V5UmVxdWVzdC5SZXF1ZXN0SWQsIEJlbmMsIEJobWFjKTtcbiAgICAgIHJldHVybiBuZXcgX1BhaXJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlNlY3JldHNBbmRLZXlSZXNwb25zZVwiXShzZWNyZXRzLCBrZXlSZXNwb25zZSk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBUdXJucyBhbiBpbmNvbWluZyBcIkFcIiB2YWx1ZSBmcm9tIHRoZSBQaW5QYWQgaW50byB0aGUgb3V0Z29pbmcgXCJCXCIgdmFsdWUgXG4gICAgLy8gYW5kIHRoZSBzZWNyZXQgdmFsdWUgdXNpbmcgRGlmZmllSGVsbW1hbiBoZWxwZXIuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwidGhlaXJQdWJsaWNLZXlcIj5UaGUgaW5jb21pbmcgQSB2YWx1ZTwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+WW91ciBCIHZhbHVlIGFuZCB0aGUgU2VjcmV0PC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2NhbGN1bGF0ZU15UHVibGljS2V5QW5kU2VjcmV0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jYWxjdWxhdGVNeVB1YmxpY0tleUFuZFNlY3JldCh0aGVpclB1YmxpY0tleSkge1xuICAgICAgdmFyIGRpZmZpZUhlbGxtYW4gPSBuZXcgX0RpZmZpZUhlbGxtYW5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkRpZmZpZUhlbGxtYW5cIl0oKTtcbiAgICAgIHZhciBteVByaXZhdGVCSSA9IGRpZmZpZUhlbGxtYW4uUmFuZG9tUHJpdmF0ZUtleShHUk9VUDE0XzIwNDhfQklUX01PRFApO1xuICAgICAgdmFyIG15UHVibGljQkkgPSBkaWZmaWVIZWxsbWFuLlB1YmxpY0tleShHUk9VUDE0XzIwNDhfQklUX01PRFAsIEdFTkVSQVRPUiwgbXlQcml2YXRlQkkpO1xuICAgICAgdmFyIHNlY3JldEJJID0gZGlmZmllSGVsbG1hbi5TZWNyZXQoR1JPVVAxNF8yMDQ4X0JJVF9NT0RQLCB0aGVpclB1YmxpY0tleSwgbXlQcml2YXRlQkkpO1xuICAgICAgdmFyIHNlY3JldCA9IHRoaXMuREhTZWNyZXRUb1NQSVNlY3JldChzZWNyZXRCSSk7XG4gICAgICByZXR1cm4gbmV3IFB1YmxpY0tleUFuZFNlY3JldChteVB1YmxpY0JJLCBzZWNyZXQpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gQ29udmVydHMgdGhlIERIIHNlY3JldCBCaWdJbnRlZ2VyIGludG8gdGhlIGhleC1zdHJpbmcgdG8gYmUgdXNlZCBhcyB0aGUgc2VjcmV0LlxuICAgIC8vIFRoZXJlIGFyZSBzb21lIFwiZ290Y2h5YXNcIiBoZXJlIHdoaWNoIGlzIHdoeSB0aGlzIHBpZWNlIG9mIHdvcmsgaXMgYWJzdHJhY3RlZCBzbyBpdCBjYW4gYmUgdGVzdGVkIHNlcGFyYXRlbHkuXG4gICAgLy8gU2VlOiBodHRwOi8vd3d3LnNpbXBsZXBheW1lbnRhcGkuY29tLyMvYXBpL3BhaXJpbmctcHJvY2Vzc1xuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInNlY3JldEJJXCI+U2VjcmV0IGFzIEJpZ0ludGVnZXI8L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPlNlY3JldCBhcyBIZXgtU3RyaW5nPC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiREhTZWNyZXRUb1NQSVNlY3JldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBESFNlY3JldFRvU1BJU2VjcmV0KHNlY3JldCkge1xuICAgICAgLy8gSWYgdGhlIGNhbGN1bGF0ZWQgaGV4YWRlY2ltYWwgc2VjcmV0IGRvZXNuJ3QgaGF2ZSBhbiBldmVuIG51bWJlciBvZiBjaGFyYWN0ZXJzLCB3ZSBhZGQgYW4gZXh0cmEgMCB0byB0aGUgc3RhcnQuIFRoaXMgYWxsb3dzIFNIQS0yNTYgdG8gb3BlcmF0ZSBvbiB0aGUgaGV4YWRlY2ltYWwgc2VjcmV0IGFzIGlmIGl0IHdlcmUgYSBoZXhhZGVjaW1hbCByZXByZXNlbnRhdGlvbiBvZiBhIHN0cmluZy5cbiAgICAgIGlmIChzZWNyZXQubGVuZ3RoICUgMiA9PT0gMSkge1xuICAgICAgICBzZWNyZXQgPSAnMCcgKyBzZWNyZXQ7XG4gICAgICB9XG5cbiAgICAgIHNlY3JldCA9IHNlY3JldC5wYWRTdGFydCg1MTIsICcwJyk7IC8vIFdlIHNoYTI1NiB0aGF0IGJ5dGUgYXJyYXkgYW5kIHJldHVybiB0aGUgaGV4IHN0cmluZyByZXN1bHRcblxuICAgICAgcmV0dXJuIF9DcnlwdG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkNyeXB0b1wiXS5HZW5lcmF0ZUhhc2goc2VjcmV0KTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJOZXdQYWlyUmVxdWVzdFwiLFxuICAgIC8vIDxzdW1tYXJ5PlxuICAgIC8vIEdlbmVyYXRlcyBhIHBhaXJpbmcgUmVxdWVzdC5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHJldHVybnM+TmV3IFBhaXJSZXF1ZXN0PC9yZXR1cm5zPlxuICAgIHZhbHVlOiBmdW5jdGlvbiBOZXdQYWlyUmVxdWVzdCgpIHtcbiAgICAgIHJldHVybiBuZXcgX1BhaXJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlBhaXJSZXF1ZXN0XCJdKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBhaXJpbmdIZWxwZXI7XG59KCk7IC8vIDxzdW1tYXJ5PlxuLy8gSW50ZXJuYWwgSG9sZGVyIGNsYXNzIGZvciBQdWJsaWMgYW5kIFNlY3JldCwgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gdG9nZXRoZXIgaW4gbWV0aG9kIHNpZ25hdHVyZXMuIFxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgUHVibGljS2V5QW5kU2VjcmV0ID0gZnVuY3Rpb24gUHVibGljS2V5QW5kU2VjcmV0KG15UHVibGljS2V5LCBzaGFyZWRTZWNyZXRLZXkpIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQdWJsaWNLZXlBbmRTZWNyZXQpO1xuXG4gIHRoaXMuTXlQdWJsaWNLZXkgPSBteVB1YmxpY0tleTtcbiAgdGhpcy5TaGFyZWRTZWNyZXRLZXkgPSBzaGFyZWRTZWNyZXRLZXk7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QYXlBdFRhYmxlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGF5QXRUYWJsZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IEJpbGxTdGF0dXNSZXNwb25zZSwgQmlsbFJldHJpZXZhbFJlc3VsdCwgUGF5bWVudFR5cGUsIEJpbGxQYXltZW50LCBQYXltZW50SGlzdG9yeUVudHJ5LCBQYXlBdFRhYmxlQ29uZmlnLCBHZXRPcGVuVGFibGVzUmVzcG9uc2UsIE9wZW5UYWJsZXNFbnRyeSwgQmlsbFBheW1lbnRGbG93RW5kZWRSZXNwb25zZSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJCaWxsU3RhdHVzUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBCaWxsU3RhdHVzUmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkJpbGxSZXRyaWV2YWxSZXN1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBCaWxsUmV0cmlldmFsUmVzdWx0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQYXltZW50VHlwZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBheW1lbnRUeXBlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJCaWxsUGF5bWVudFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEJpbGxQYXltZW50OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQYXltZW50SGlzdG9yeUVudHJ5XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUGF5bWVudEhpc3RvcnlFbnRyeTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUGF5QXRUYWJsZUNvbmZpZ1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBheUF0VGFibGVDb25maWc7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkdldE9wZW5UYWJsZXNSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEdldE9wZW5UYWJsZXNSZXNwb25zZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiT3BlblRhYmxlc0VudHJ5XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gT3BlblRhYmxlc0VudHJ5OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJCaWxsUGF5bWVudEZsb3dFbmRlZFJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQmlsbFBheW1lbnRGbG93RW5kZWRSZXNwb25zZTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01lc3NhZ2VzICovIFwiLi9zcmMvTWVzc2FnZXMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1B1cmNoYXNlICovIFwiLi9zcmMvUHVyY2hhc2UuanNcIik7XG5cblxuXG4gLy8gPHN1bW1hcnk+XG4vLyBUaGlzIGNsYXNzIHJlcHJlc2VudHMgdGhlIEJpbGxEZXRhaWxzIHRoYXQgdGhlIFBPUyB3aWxsIGJlIGFza2VkIGZvciB0aHJvdWdob3V0IGEgUGF5QXRUYWJsZSBmbG93LlxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgQmlsbFN0YXR1c1Jlc3BvbnNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQmlsbFN0YXR1c1Jlc3BvbnNlKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgQmlsbFN0YXR1c1Jlc3BvbnNlKTtcblxuICAgIC8vIDxzdW1tYXJ5PlxuICAgIC8vIFNldCB0aGlzIEVycm9yIGFjY29yZGluZ2x5IGlmIHlvdSBhcmUgbm90IGFibGUgdG8gcmV0dXJuIHRoZSBCaWxsRGV0YWlscyB0aGF0IHdlcmUgYXNrZWQgZnJvbSB5b3UuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIHRoaXMuUmVzdWx0ID0gbnVsbDsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhpcyBpcyBhIHVuaXF1ZSBpZGVudGlmaWVyIHRoYXQgeW91IGFzc2lnbiB0byBlYWNoIGJpbGwuXG4gICAgLy8gSXQgbWlndCBiZSBmb3IgZXhhbXBsZSwgdGhlIHRpbWVzdGFtcCBvZiB3aGVuIHRoZSBjb3ZlciB3YXMgb3BlbmVkLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuQmlsbElkID0gbnVsbDsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhpcyBpcyB0aGUgdGFibGUgaWQgdGhhdCB0aGlzIGJpbGwgd2FzIGZvci5cbiAgICAvLyBUaGUgd2FpdGVyIHdpbGwgZW50ZXIgaXQgb24gdGhlIEVmdHBvcyBhdCB0aGUgc3RhcnQgb2YgdGhlIFBheUF0VGFibGUgZmxvdyBhbmQgdGhlIEVmdHBvcyB3aWxsIFxuICAgIC8vIHJldHJpZXZlIHRoZSBiaWxsIHVzaW5nIHRoZSB0YWJsZSBpZC4gXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5UYWJsZUlkID0gbnVsbDtcbiAgICB0aGlzLk9wZXJhdG9ySWQgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgVG90YWwgQW1vdW50IG9uIHRoaXMgYmlsbCwgaW4gY2VudHMuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5Ub3RhbEFtb3VudCA9IDA7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBjdXJyZW50bHkgb3V0c2FuZGluZyBhbW91bnQgb24gdGhpcyBiaWxsLCBpbiBjZW50cy5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLk91dHN0YW5kaW5nQW1vdW50ID0gMDsgLy8gPHN1bW1hcnk+XG4gICAgLy8gWW91ciBQT1MgaXMgcmVxdWlyZWQgdG8gcGVyc2lzdCBzb21lIHN0YXRlIG9uIGJlaGFsZiBvZiB0aGUgRWZ0cG9zIHNvIHRoZSBFZnRwb3MgY2FuIHJlY292ZXIgc3RhdGUuXG4gICAgLy8gSXQgaXMganVzdCBhIHBpZWNlIG9mIHN0cmluZyB0aGF0IHlvdSBzYXZlIGFnYWluc3QgeW91ciBiaWxsSWQuXG4gICAgLy8gV0hlbmV2ZXIgeW91J3JlIGFza2VkIGZvciBCaWxsRGV0YWlscywgbWFrZSBzdXJlIHlvdSByZXR1cm4gdGhpcyBwaWVjZSBvZiBkYXRhIGlmIHlvdSBoYXZlIGl0LlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuQmlsbERhdGEgPSBcIlwiO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShCaWxsU3RhdHVzUmVzcG9uc2UsIFt7XG4gICAga2V5OiBcImdldEJpbGxQYXltZW50SGlzdG9yeVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCaWxsUGF5bWVudEhpc3RvcnkoKSB7XG4gICAgICBpZiAoIXRoaXMuQmlsbERhdGEpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmlsbFBheW1lbnRIaXN0b3J5ID0gW107XG4gICAgICB2YXIgc2F2ZWRCaWxsRGF0YSA9IEpTT04ucGFyc2UodGhpcy5CaWxsRGF0YSk7XG4gICAgICByZXR1cm4gc2F2ZWRCaWxsRGF0YS5tYXAoZnVuY3Rpb24gKGJpbGwpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXltZW50SGlzdG9yeUVudHJ5KGJpbGwucGF5bWVudF90eXBlLCBiaWxsLnBheW1lbnRfc3VtbWFyeSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZShtZXNzYWdlSWQpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBcInN1Y2Nlc3NcIjogdGhpcy5SZXN1bHQgPT0gQmlsbFJldHJpZXZhbFJlc3VsdC5TVUNDRVNTXG4gICAgICB9O1xuICAgICAgaWYgKHRoaXMuQmlsbElkKSBkYXRhLmJpbGxfaWQgPSB0aGlzLkJpbGxJZDtcbiAgICAgIGlmICh0aGlzLlRhYmxlSWQpIGRhdGEudGFibGVfaWQgPSB0aGlzLlRhYmxlSWQ7XG5cbiAgICAgIGlmICh0aGlzLlJlc3VsdCA9PSBCaWxsUmV0cmlldmFsUmVzdWx0LlNVQ0NFU1MpIHtcbiAgICAgICAgZGF0YS5iaWxsX3RvdGFsX2Ftb3VudCA9IHRoaXMuVG90YWxBbW91bnQ7XG4gICAgICAgIGRhdGEuYmlsbF9vdXRzdGFuZGluZ19hbW91bnQgPSB0aGlzLk91dHN0YW5kaW5nQW1vdW50O1xuICAgICAgICBkYXRhLmJpbGxfcGF5bWVudF9oaXN0b3J5ID0gdGhpcy5nZXRCaWxsUGF5bWVudEhpc3RvcnkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEuZXJyb3JfcmVhc29uID0gdGhpcy5SZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgZGF0YS5lcnJvcl9kZXRhaWwgPSB0aGlzLlJlc3VsdC50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShtZXNzYWdlSWQsIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLlBheUF0VGFibGVCaWxsRGV0YWlscywgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiVG9CaWxsRGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb0JpbGxEYXRhKHBoKSB7XG4gICAgICBpZiAocGgubGVuZ3RoIDwgMSkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHBoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQmlsbFN0YXR1c1Jlc3BvbnNlO1xufSgpO1xudmFyIEJpbGxSZXRyaWV2YWxSZXN1bHQgPSB7XG4gIFNVQ0NFU1M6ICdTVUNDRVNTJyxcbiAgSU5WQUxJRF9UQUJMRV9JRDogJ0lOVkFMSURfVEFCTEVfSUQnLFxuICBJTlZBTElEX0JJTExfSUQ6ICdJTlZBTElEX0JJTExfSUQnLFxuICBJTlZBTElEX09QRVJBVE9SX0lEOiAnSU5WQUxJRF9PUEVSQVRPUl9JRCdcbn07XG52YXIgUGF5bWVudFR5cGUgPSB7XG4gIENBUkQ6ICdDQVJEJyxcbiAgQ0FTSDogJ0NBU0gnXG59O1xudmFyIEJpbGxQYXltZW50ID0gZnVuY3Rpb24gQmlsbFBheW1lbnQobSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIEJpbGxQYXltZW50KTtcblxuICB0aGlzLl9pbmNvbWluZ0FkdmljZSA9IG07XG4gIHRoaXMuQmlsbElkID0gdGhpcy5faW5jb21pbmdBZHZpY2UuRGF0YVtcImJpbGxfaWRcIl07XG4gIHRoaXMuVGFibGVJZCA9IHRoaXMuX2luY29taW5nQWR2aWNlLkRhdGFbXCJ0YWJsZV9pZFwiXTtcbiAgdGhpcy5PcGVyYXRvcklkID0gdGhpcy5faW5jb21pbmdBZHZpY2UuRGF0YVtcIm9wZXJhdG9yX2lkXCJdO1xuICB0aGlzLlBheW1lbnRGbG93U3RhcnRlZCA9IG51bGw7XG4gIHZhciBwdCA9IHRoaXMuX2luY29taW5nQWR2aWNlLkRhdGFbXCJwYXltZW50X3R5cGVcIl07XG4gIHRoaXMuUGF5bWVudFR5cGUgPSBwdDsgLy8gdGhpcyBpcyB3aGVuIHdlIHBseSB0aGUgc3ViIG9iamVjdCBcInBheW1lbnRfZGV0YWlsc1wiIGludG8gYSBwdXJjaGFzZSByZXNwb25zZSBmb3IgY29udmVuaWVuY2UuXG5cbiAgdmFyIHB1cmNoYXNlTXNnID0gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShtLklkLCBcInBheW1lbnRfZGV0YWlsc1wiLCBtLkRhdGFbXCJwYXltZW50X2RldGFpbHNcIl0sIGZhbHNlKTtcbiAgdGhpcy5QdXJjaGFzZVJlc3BvbnNlID0gbmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiUHVyY2hhc2VSZXNwb25zZVwiXShwdXJjaGFzZU1zZyk7XG4gIHRoaXMuUHVyY2hhc2VBbW91bnQgPSB0aGlzLlB1cmNoYXNlUmVzcG9uc2UuR2V0UHVyY2hhc2VBbW91bnQoKTtcbiAgdGhpcy5UaXBBbW91bnQgPSB0aGlzLlB1cmNoYXNlUmVzcG9uc2UuR2V0VGlwQW1vdW50KCk7XG4gIHRoaXMuU3VyY2hhcmdlQW1vdW50ID0gdGhpcy5QdXJjaGFzZVJlc3BvbnNlLkdldFN1cmNoYXJnZUFtb3VudCgpO1xufTtcbnZhciBQYXltZW50SGlzdG9yeUVudHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGF5bWVudEhpc3RvcnlFbnRyeShwYXltZW50VHlwZSwgcGF5bWVudFN1bW1hcnkpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFBheW1lbnRIaXN0b3J5RW50cnkpO1xuXG4gICAgdGhpcy5QYXltZW50VHlwZSA9IHBheW1lbnRUeXBlO1xuICAgIHRoaXMuUGF5bWVudFN1bW1hcnkgPSBwYXltZW50U3VtbWFyeTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUGF5bWVudEhpc3RvcnlFbnRyeSwgW3tcbiAgICBrZXk6IFwidG9KU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBheW1lbnRfdHlwZTogdGhpcy5QYXltZW50VHlwZSxcbiAgICAgICAgcGF5bWVudF9zdW1tYXJ5OiB0aGlzLlBheW1lbnRTdW1tYXJ5XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRUZXJtaW5hbFJlZklkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFRlcm1pbmFsUmVmSWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5QYXltZW50U3VtbWFyeVtcInRlcm1pbmFsX3JlZl9pZFwiXTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGF5bWVudEhpc3RvcnlFbnRyeTtcbn0oKTtcbnZhciBQYXlBdFRhYmxlQ29uZmlnID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGF5QXRUYWJsZUNvbmZpZygpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFBheUF0VGFibGVDb25maWcpO1xuXG4gICAgdGhpcy5QYXlBdFRhYmxlRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuT3BlcmF0b3JJZEVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLlNwbGl0QnlBbW91bnRFbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5FcXVhbFNwbGl0RW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuVGFibGVSZXRyaWV2YWxFbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5UaXBwaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuU3VtbWFyeVJlcG9ydEVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLkxhYmVsUGF5QnV0dG9uID0gJyc7XG4gICAgdGhpcy5MYWJlbE9wZXJhdG9ySWQgPSAnJztcbiAgICB0aGlzLkxhYmVsVGFibGVJZCA9ICcnOyAvLyBcbiAgICAvLyA8c3VtbWFyeT5cbiAgICAvLyBGaWxsIGluIHdpdGggb3BlcmF0b3IgaWRzIHRoYXQgdGhlIGVmdHBvcyB0ZXJtaW5hbCB3aWxsIHZhbGlkYXRlIGFnYWluc3QuIFxuICAgIC8vIExlYXZlIEVtcHR5IHRvIGFsbG93IGFueSBvcGVyYXRvcl9pZCB0aHJvdWdoLiBcbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkFsbG93ZWRPcGVyYXRvcklkcyA9IFtdO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQYXlBdFRhYmxlQ29uZmlnLCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKG1lc3NhZ2VJZCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIFwicGF5X2F0X3RhYmxlX2VuYWJsZWRcIjogdGhpcy5QYXlBdFRhYmxlRW5hYmxlZCxcbiAgICAgICAgXCJvcGVyYXRvcl9pZF9lbmFibGVkXCI6IHRoaXMuT3BlcmF0b3JJZEVuYWJsZWQsXG4gICAgICAgIFwic3BsaXRfYnlfYW1vdW50X2VuYWJsZWRcIjogdGhpcy5TcGxpdEJ5QW1vdW50RW5hYmxlZCxcbiAgICAgICAgXCJlcXVhbF9zcGxpdF9lbmFibGVkXCI6IHRoaXMuRXF1YWxTcGxpdEVuYWJsZWQsXG4gICAgICAgIFwidGlwcGluZ19lbmFibGVkXCI6IHRoaXMuVGlwcGluZ0VuYWJsZWQsXG4gICAgICAgIFwic3VtbWFyeV9yZXBvcnRfZW5hYmxlZFwiOiB0aGlzLlN1bW1hcnlSZXBvcnRFbmFibGVkLFxuICAgICAgICBcInBheV9idXR0b25fbGFiZWxcIjogdGhpcy5MYWJlbFBheUJ1dHRvbixcbiAgICAgICAgXCJvcGVyYXRvcl9pZF9sYWJlbFwiOiB0aGlzLkxhYmVsT3BlcmF0b3JJZCxcbiAgICAgICAgXCJ0YWJsZV9pZF9sYWJlbFwiOiB0aGlzLkxhYmVsVGFibGVJZCxcbiAgICAgICAgXCJvcGVyYXRvcl9pZF9saXN0XCI6IHRoaXMuQWxsb3dlZE9wZXJhdG9ySWRzLFxuICAgICAgICBcInRhYmxlX3JldHJpZXZhbF9lbmFibGVkXCI6IHRoaXMuVGFibGVSZXRyaWV2YWxFbmFibGVkXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0obWVzc2FnZUlkLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5QYXlBdFRhYmxlU2V0VGFibGVDb25maWcsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcIkZlYXR1cmVEaXNhYmxlTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBGZWF0dXJlRGlzYWJsZU1lc3NhZ2UobWVzc2FnZUlkKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgXCJwYXlfYXRfdGFibGVfZW5hYmxlZFwiOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKG1lc3NhZ2VJZCwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uUGF5QXRUYWJsZVNldFRhYmxlQ29uZmlnLCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGF5QXRUYWJsZUNvbmZpZztcbn0oKTsgLy8gPHN1bW1hcnk+XG4vLyBUaGVzZSBhdHRyaWJ1dGVzIHdvcmsgZm9yIENPTSBpbnRlcm9wLlxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgR2V0T3BlblRhYmxlc1Jlc3BvbnNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2V0T3BlblRhYmxlc1Jlc3BvbnNlKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgR2V0T3BlblRhYmxlc1Jlc3BvbnNlKTtcblxuICAgIC8vLyA8c3VtbWFyeT5cbiAgICAvLy8gWW91ciBQT1MgaXMgcmVxdWlyZWQgdG8gcGVyc2lzdCBzb21lIHN0YXRlIG9uIGJlaGFsZiBvZiB0aGUgRWZ0cG9zIHNvIHRoZSBFZnRwb3MgY2FuIHJlY292ZXIgc3RhdGUuXG4gICAgLy8vIEl0IGlzIGp1c3QgYSBwaWVjZSBvZiBzdHJpbmcgdGhhdCB5b3Ugc2F2ZSBhZ2FpbnN0IHlvdXIgb3BlcmF0b3JJZC5cbiAgICAvLy8gV2hlbmV2ZXIgeW91J3JlIGFza2VkIGZvciBPcGVuVGFibGVzLCBtYWtlIHN1cmUgeW91IHJldHVybiB0aGlzIHBpZWNlIG9mIGRhdGEgaWYgeW91IGhhdmUgaXQuXG4gICAgLy8vIDwvc3VtbWFyeT5cbiAgICB0aGlzLlRhYmxlRGF0YSA9IG51bGw7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKEdldE9wZW5UYWJsZXNSZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiR2V0T3BlblRhYmxlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRPcGVuVGFibGVzKCkge1xuICAgICAgaWYgKCF0aGlzLlRhYmxlRGF0YSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBKU09OLnBhcnNlKHRoaXMuVGFibGVEYXRhKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZShtZXNzYWdlSWQpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICB0YWJsZXM6IHRoaXMuR2V0T3BlblRhYmxlcygpXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0obWVzc2FnZUlkLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5QYXlBdFRhYmxlT3BlblRhYmxlcywgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdldE9wZW5UYWJsZXNSZXNwb25zZTtcbn0oKTsgLy8gPHN1bW1hcnk+XG4vLyBUaGVzZSBhdHRyaWJ1dGVzIHdvcmsgZm9yIENPTSBpbnRlcm9wLlxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgT3BlblRhYmxlc0VudHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gT3BlblRhYmxlc0VudHJ5KCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgT3BlblRhYmxlc0VudHJ5KTtcblxuICAgIHRoaXMuVGFibGVJZCA9IG51bGw7XG4gICAgdGhpcy5MYWJlbCA9IG51bGw7XG4gICAgdGhpcy5CaWxsT3V0c3RhbmRpbmdBbW91bnQgPSBudWxsO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShPcGVuVGFibGVzRW50cnksIFt7XG4gICAga2V5OiBcInRvSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0YWJsZV9pZDogdGhpcy5UYWJsZUlkLFxuICAgICAgICBsYWJlbDogdGhpcy5MYWJlbCxcbiAgICAgICAgYmlsbF9vdXRzdGFuZGluZ19hbW91bnQ6IHRoaXMuQmlsbE91dHN0YW5kaW5nQW1vdW50XG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBPcGVuVGFibGVzRW50cnk7XG59KCk7IC8vLyA8c3VtbWFyeT5cbi8vLyBUaGVzZSBhdHRyaWJ1dGVzIHdvcmsgZm9yIENPTSBpbnRlcm9wLlxuLy8vIDwvc3VtbWFyeT5cblxudmFyIEJpbGxQYXltZW50Rmxvd0VuZGVkUmVzcG9uc2UgPSBmdW5jdGlvbiBCaWxsUGF5bWVudEZsb3dFbmRlZFJlc3BvbnNlKG0pIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBCaWxsUGF5bWVudEZsb3dFbmRlZFJlc3BvbnNlKTtcblxuICB0aGlzLkJpbGxJZCA9IG0uRGF0YS5iaWxsX2lkO1xuICB0aGlzLkJpbGxPdXRzdGFuZGluZ0Ftb3VudCA9IG0uRGF0YS5iaWxsX291dHN0YW5kaW5nX2Ftb3VudDtcbiAgdGhpcy5CaWxsVG90YWxBbW91bnQgPSBtLkRhdGEuYmlsbF90b3RhbF9hbW91bnQ7XG4gIHRoaXMuT3BlcmF0b3JJZCA9IG0uRGF0YS5vcGVyYXRvcl9pZDtcbiAgdGhpcy5UYWJsZUlkID0gbS5EYXRhLnRhYmxlX2lkO1xuICB0aGlzLkNhcmRUb3RhbENvdW50ID0gbS5EYXRhLmNhcmRfdG90YWxfY291bnQ7XG4gIHRoaXMuQ2FyZFRvdGFsQW1vdW50ID0gbS5EYXRhLmNhcmRfdG90YWxfYW1vdW50O1xuICB0aGlzLkNhc2hUb3RhbENvdW50ID0gbS5EYXRhLmNhc2hfdG90YWxfY291bnQ7XG4gIHRoaXMuQ2FzaFRvdGFsQW1vdW50ID0gbS5EYXRhLmNhc2hfdG90YWxfYW1vdW50O1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGluZ0hlbHBlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1BpbmdIZWxwZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBQb25nSGVscGVyLCBQaW5nSGVscGVyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBvbmdIZWxwZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQb25nSGVscGVyOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQaW5nSGVscGVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUGluZ0hlbHBlcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9SZXF1ZXN0SWRIZWxwZXIgKi8gXCIuL3NyYy9SZXF1ZXN0SWRIZWxwZXIuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01lc3NhZ2VzICovIFwiLi9zcmMvTWVzc2FnZXMuanNcIik7XG5cblxuXG5cbnZhciBQb25nSGVscGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUG9uZ0hlbHBlcigpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFBvbmdIZWxwZXIpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQb25nSGVscGVyLCBudWxsLCBbe1xuICAgIGtleTogXCJHZW5lcmF0ZVBvbmdSZXNzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2VuZXJhdGVQb25nUmVzc3BvbnNlKHBpbmcpIHtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJNZXNzYWdlXCJdKHBpbmcuSWQsIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiRXZlbnRzXCJdLlBvbmcsIG51bGwsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb25nSGVscGVyO1xufSgpO1xudmFyIFBpbmdIZWxwZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQaW5nSGVscGVyKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUGluZ0hlbHBlcik7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFBpbmdIZWxwZXIsIG51bGwsIFt7XG4gICAga2V5OiBcIkdlbmVyYXRlUGluZ1JlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2VuZXJhdGVQaW5nUmVxdWVzdCgpIHtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInBpbmdcIiksIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiRXZlbnRzXCJdLlBpbmcsIG51bGwsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQaW5nSGVscGVyO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9Qb3NJbmZvLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUG9zSW5mby5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IFNldFBvc0luZm9SZXF1ZXN0LCBTZXRQb3NJbmZvUmVzcG9uc2UsIERldmljZUluZm8gKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU2V0UG9zSW5mb1JlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTZXRQb3NJbmZvUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU2V0UG9zSW5mb1Jlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU2V0UG9zSW5mb1Jlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJEZXZpY2VJbmZvXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRGV2aWNlSW5mbzsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01lc3NhZ2VzICovIFwiLi9zcmMvTWVzc2FnZXMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9SZXF1ZXN0SWRIZWxwZXIgKi8gXCIuL3NyYy9SZXF1ZXN0SWRIZWxwZXIuanNcIik7XG5cblxuXG5cbnZhciBTZXRQb3NJbmZvUmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNldFBvc0luZm9SZXF1ZXN0KHZlcnNpb24sIHZlbmRvcklkLCBsaWJyYXJ5TGFuZ3VhZ2UsIGxpYnJhcnlWZXJzaW9uLCBvdGhlckluZm8pIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFNldFBvc0luZm9SZXF1ZXN0KTtcblxuICAgIHRoaXMuX3ZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIHRoaXMuX3ZlbmRvcklkID0gdmVuZG9ySWQ7XG4gICAgdGhpcy5fbGlicmFyeUxhbmd1YWdlID0gbGlicmFyeUxhbmd1YWdlO1xuICAgIHRoaXMuX2xpYnJhcnlWZXJzaW9uID0gbGlicmFyeVZlcnNpb247XG4gICAgdGhpcy5fb3RoZXJJbmZvID0gb3RoZXJJbmZvO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShTZXRQb3NJbmZvUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwidG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBwb3NfdmVyc2lvbjogdGhpcy5fdmVyc2lvbixcbiAgICAgICAgcG9zX3ZlbmRvcl9pZDogdGhpcy5fdmVuZG9ySWQsXG4gICAgICAgIGxpYnJhcnlfbGFuZ3VhZ2U6IHRoaXMuX2xpYnJhcnlMYW5ndWFnZSxcbiAgICAgICAgbGlicmFyeV92ZXJzaW9uOiB0aGlzLl9saWJyYXJ5VmVyc2lvbixcbiAgICAgICAgb3RoZXJfaW5mbzogdGhpcy5fb3RoZXJJbmZvXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicHJhdlwiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uU2V0UG9zSW5mb1JlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZXRQb3NJbmZvUmVxdWVzdDtcbn0oKTtcbnZhciBTZXRQb3NJbmZvUmVzcG9uc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZXRQb3NJbmZvUmVzcG9uc2UobSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2V0UG9zSW5mb1Jlc3BvbnNlKTtcblxuICAgIHRoaXMuX3N1Y2Nlc3MgPSBtLkdldFN1Y2Nlc3NTdGF0ZSgpID09IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiU3VjY2Vzc1N0YXRlXCJdLlN1Y2Nlc3M7XG4gICAgdGhpcy5fbSA9IG07XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFNldFBvc0luZm9SZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiaXNTdWNjZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzU3VjY2VzcygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdWNjZXNzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRFcnJvclJlYXNvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFcnJvclJlYXNvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuZXJyb3JfcmVhc29uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRFcnJvckRldGFpbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFcnJvckRldGFpbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuZXJyb3JfZGV0YWlsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRSZXNwb25zZVZhbHVlV2l0aEF0dHJpYnV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZXNwb25zZVZhbHVlV2l0aEF0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbYXR0cmlidXRlXTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2V0UG9zSW5mb1Jlc3BvbnNlO1xufSgpO1xudmFyIERldmljZUluZm8gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEZXZpY2VJbmZvKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgRGV2aWNlSW5mbyk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKERldmljZUluZm8sIG51bGwsIFt7XG4gICAga2V5OiBcIkdldEFwcERldmljZUluZm9cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QXBwRGV2aWNlSW5mbygpIHtcbiAgICAgIHZhciBkZXZpY2VJbmZvID0ge307XG4gICAgICBkZXZpY2VJbmZvWydkZXZpY2Vfc3lzdGVtJ10gPSBuYXZpZ2F0b3IudXNlckFnZW50OyAvLyBkZXZpY2VJbmZvLkFkZChcImRldmljZV9zeXN0ZW1cIiwgRW52aXJvbm1lbnQuT1NWZXJzaW9uLlBsYXRmb3JtLlRvU3RyaW5nKCkgKyBcIiBcIiArIEVudmlyb25tZW50Lk9TVmVyc2lvbi5WZXJzaW9uLlRvU3RyaW5nKCkpO1xuXG4gICAgICByZXR1cm4gZGV2aWNlSW5mbztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRGV2aWNlSW5mbztcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUHJlYXV0aC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1ByZWF1dGguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBQcmVhdXRoRXZlbnRzLCBBY2NvdW50VmVyaWZ5UmVxdWVzdCwgQWNjb3VudFZlcmlmeVJlc3BvbnNlLCBQcmVhdXRoT3BlblJlcXVlc3QsIFByZWF1dGhUb3B1cFJlcXVlc3QsIFByZWF1dGhQYXJ0aWFsQ2FuY2VsbGF0aW9uUmVxdWVzdCwgUHJlYXV0aEV4dGVuZFJlcXVlc3QsIFByZWF1dGhDYW5jZWxSZXF1ZXN0LCBQcmVhdXRoQ29tcGxldGlvblJlcXVlc3QsIFByZWF1dGhSZXNwb25zZSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQcmVhdXRoRXZlbnRzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUHJlYXV0aEV2ZW50czsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQWNjb3VudFZlcmlmeVJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBBY2NvdW50VmVyaWZ5UmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQWNjb3VudFZlcmlmeVJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQWNjb3VudFZlcmlmeVJlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQcmVhdXRoT3BlblJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQcmVhdXRoT3BlblJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlByZWF1dGhUb3B1cFJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQcmVhdXRoVG9wdXBSZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlByZWF1dGhFeHRlbmRSZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUHJlYXV0aEV4dGVuZFJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlByZWF1dGhDYW5jZWxSZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUHJlYXV0aENhbmNlbFJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlByZWF1dGhDb21wbGV0aW9uUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFByZWF1dGhDb21wbGV0aW9uUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHJlYXV0aFJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUHJlYXV0aFJlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1JlcXVlc3RJZEhlbHBlciAqLyBcIi4vc3JjL1JlcXVlc3RJZEhlbHBlci5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUHVyY2hhc2UgKi8gXCIuL3NyYy9QdXJjaGFzZS5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwaU1vZGVscyAqLyBcIi4vc3JjL1NwaU1vZGVscy5qc1wiKTtcblxuXG5cblxuXG5cbnZhciBQcmVhdXRoRXZlbnRzID0ge1xuICBBY2NvdW50VmVyaWZ5UmVxdWVzdDogXCJhY2NvdW50X3ZlcmlmeVwiLFxuICBBY2NvdW50VmVyaWZ5UmVzcG9uc2U6IFwiYWNjb3VudF92ZXJpZnlfcmVzcG9uc2VcIixcbiAgUHJlYXV0aE9wZW5SZXF1ZXN0OiBcInByZWF1dGhcIixcbiAgUHJlYXV0aE9wZW5SZXNwb25zZTogXCJwcmVhdXRoX3Jlc3BvbnNlXCIsXG4gIFByZWF1dGhUb3B1cFJlcXVlc3Q6IFwicHJlYXV0aF90b3B1cFwiLFxuICBQcmVhdXRoVG9wdXBSZXNwb25zZTogXCJwcmVhdXRoX3RvcHVwX3Jlc3BvbnNlXCIsXG4gIFByZWF1dGhFeHRlbmRSZXF1ZXN0OiBcInByZWF1dGhfZXh0ZW5kXCIsXG4gIFByZWF1dGhFeHRlbmRSZXNwb25zZTogXCJwcmVhdXRoX2V4dGVuZF9yZXNwb25zZVwiLFxuICBQcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlcXVlc3Q6IFwicHJlYXV0aF9wYXJ0aWFsX2NhbmNlbGxhdGlvblwiLFxuICBQcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlc3BvbnNlOiBcInByZWF1dGhfcGFydGlhbF9jYW5jZWxsYXRpb25fcmVzcG9uc2VcIixcbiAgUHJlYXV0aENhbmNlbGxhdGlvblJlcXVlc3Q6IFwicHJlYXV0aF9jYW5jZWxsYXRpb25cIixcbiAgUHJlYXV0aENhbmNlbGxhdGlvblJlc3BvbnNlOiBcInByZWF1dGhfY2FuY2VsbGF0aW9uX3Jlc3BvbnNlXCIsXG4gIFByZWF1dGhDb21wbGV0ZVJlcXVlc3Q6IFwiY29tcGxldGlvblwiLFxuICBQcmVhdXRoQ29tcGxldGVSZXNwb25zZTogXCJjb21wbGV0aW9uX3Jlc3BvbnNlXCJcbn07XG52YXIgQWNjb3VudFZlcmlmeVJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBY2NvdW50VmVyaWZ5UmVxdWVzdChwb3NSZWZJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgQWNjb3VudFZlcmlmeVJlcXVlc3QpO1xuXG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShBY2NvdW50VmVyaWZ5UmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBcInBvc19yZWZfaWRcIjogdGhpcy5Qb3NSZWZJZFxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInByYXZcIiksIFByZWF1dGhFdmVudHMuQWNjb3VudFZlcmlmeVJlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBY2NvdW50VmVyaWZ5UmVxdWVzdDtcbn0oKTtcbnZhciBBY2NvdW50VmVyaWZ5UmVzcG9uc2UgPSBmdW5jdGlvbiBBY2NvdW50VmVyaWZ5UmVzcG9uc2UobSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIEFjY291bnRWZXJpZnlSZXNwb25zZSk7XG5cbiAgdGhpcy5EZXRhaWxzID0gbmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiUHVyY2hhc2VSZXNwb25zZVwiXShtKTtcbiAgdGhpcy5Qb3NSZWZJZCA9IHRoaXMuRGV0YWlscy5Qb3NSZWZJZDtcbiAgdGhpcy5fbSA9IG07XG59O1xudmFyIFByZWF1dGhPcGVuUmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByZWF1dGhPcGVuUmVxdWVzdChhbW91bnRDZW50cywgcG9zUmVmSWQpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFByZWF1dGhPcGVuUmVxdWVzdCk7XG5cbiAgICB0aGlzLlBvc1JlZklkID0gcG9zUmVmSWQ7XG4gICAgdGhpcy5QcmVhdXRoQW1vdW50ID0gYW1vdW50Q2VudHM7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5PcHRpb25zID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQcmVhdXRoT3BlblJlcXVlc3QsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgXCJwb3NfcmVmX2lkXCI6IHRoaXMuUG9zUmVmSWQsXG4gICAgICAgIFwicHJlYXV0aF9hbW91bnRcIjogdGhpcy5QcmVhdXRoQW1vdW50XG4gICAgICB9O1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkFkZFJlY2VpcHRDb25maWcoZGF0YSk7XG4gICAgICB0aGlzLk9wdGlvbnMuQWRkT3B0aW9ucyhkYXRhKTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInByYWNcIiksIFByZWF1dGhFdmVudHMuUHJlYXV0aE9wZW5SZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJlYXV0aE9wZW5SZXF1ZXN0O1xufSgpO1xudmFyIFByZWF1dGhUb3B1cFJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcmVhdXRoVG9wdXBSZXF1ZXN0KHByZWF1dGhJZCwgdG9wdXBBbW91bnRDZW50cywgcG9zUmVmSWQpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFByZWF1dGhUb3B1cFJlcXVlc3QpO1xuXG4gICAgdGhpcy5QcmVhdXRoSWQgPSBwcmVhdXRoSWQ7XG4gICAgdGhpcy5Ub3B1cEFtb3VudCA9IHRvcHVwQW1vdW50Q2VudHM7XG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuQ29uZmlnID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUNvbmZpZ1wiXSgpO1xuICAgIHRoaXMuT3B0aW9ucyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUHJlYXV0aFRvcHVwUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBcInBvc19yZWZfaWRcIjogdGhpcy5Qb3NSZWZJZCxcbiAgICAgICAgXCJwcmVhdXRoX2lkXCI6IHRoaXMuUHJlYXV0aElkLFxuICAgICAgICBcInRvcHVwX2Ftb3VudFwiOiB0aGlzLlRvcHVwQW1vdW50XG4gICAgICB9O1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkFkZFJlY2VpcHRDb25maWcoZGF0YSk7XG4gICAgICB0aGlzLk9wdGlvbnMuQWRkT3B0aW9ucyhkYXRhKTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInBydHVcIiksIFByZWF1dGhFdmVudHMuUHJlYXV0aFRvcHVwUmVxdWVzdCwgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByZWF1dGhUb3B1cFJlcXVlc3Q7XG59KCk7XG52YXIgUHJlYXV0aFBhcnRpYWxDYW5jZWxsYXRpb25SZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJlYXV0aFBhcnRpYWxDYW5jZWxsYXRpb25SZXF1ZXN0KHByZWF1dGhJZCwgcGFydGlhbENhbmNlbGxhdGlvbkFtb3VudENlbnRzLCBwb3NSZWZJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHJlYXV0aFBhcnRpYWxDYW5jZWxsYXRpb25SZXF1ZXN0KTtcblxuICAgIHRoaXMuUHJlYXV0aElkID0gcHJlYXV0aElkO1xuICAgIHRoaXMuUGFydGlhbENhbmNlbGxhdGlvbkFtb3VudCA9IHBhcnRpYWxDYW5jZWxsYXRpb25BbW91bnRDZW50cztcbiAgICB0aGlzLlBvc1JlZklkID0gcG9zUmVmSWQ7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5PcHRpb25zID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlcXVlc3QsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgXCJwb3NfcmVmX2lkXCI6IHRoaXMuUG9zUmVmSWQsXG4gICAgICAgIFwicHJlYXV0aF9pZFwiOiB0aGlzLlByZWF1dGhJZCxcbiAgICAgICAgXCJwcmVhdXRoX2NhbmNlbF9hbW91bnRcIjogdGhpcy5QYXJ0aWFsQ2FuY2VsbGF0aW9uQW1vdW50XG4gICAgICB9O1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkFkZFJlY2VpcHRDb25maWcoZGF0YSk7XG4gICAgICB0aGlzLk9wdGlvbnMuQWRkT3B0aW9ucyhkYXRhKTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInBycGNcIiksIFByZWF1dGhFdmVudHMuUHJlYXV0aFBhcnRpYWxDYW5jZWxsYXRpb25SZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJlYXV0aFBhcnRpYWxDYW5jZWxsYXRpb25SZXF1ZXN0O1xufSgpO1xudmFyIFByZWF1dGhFeHRlbmRSZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJlYXV0aEV4dGVuZFJlcXVlc3QocHJlYXV0aElkLCBwb3NSZWZJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHJlYXV0aEV4dGVuZFJlcXVlc3QpO1xuXG4gICAgdGhpcy5QcmVhdXRoSWQgPSBwcmVhdXRoSWQ7XG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuQ29uZmlnID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUNvbmZpZ1wiXSgpO1xuICAgIHRoaXMuT3B0aW9ucyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUHJlYXV0aEV4dGVuZFJlcXVlc3QsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgXCJwb3NfcmVmX2lkXCI6IHRoaXMuUG9zUmVmSWQsXG4gICAgICAgIFwicHJlYXV0aF9pZFwiOiB0aGlzLlByZWF1dGhJZFxuICAgICAgfTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcmludE1lcmNoYW50Q29weSA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJvbXB0Rm9yQ3VzdG9tZXJDb3B5T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFNpZ25hdHVyZUZsb3dPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5BZGRSZWNlaXB0Q29uZmlnKGRhdGEpO1xuICAgICAgdGhpcy5PcHRpb25zLkFkZE9wdGlvbnMoZGF0YSk7XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJwcmV4dFwiKSwgUHJlYXV0aEV2ZW50cy5QcmVhdXRoRXh0ZW5kUmVxdWVzdCwgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByZWF1dGhFeHRlbmRSZXF1ZXN0O1xufSgpO1xudmFyIFByZWF1dGhDYW5jZWxSZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJlYXV0aENhbmNlbFJlcXVlc3QocHJlYXV0aElkLCBwb3NSZWZJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHJlYXV0aENhbmNlbFJlcXVlc3QpO1xuXG4gICAgdGhpcy5QcmVhdXRoSWQgPSBwcmVhdXRoSWQ7XG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuQ29uZmlnID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUNvbmZpZ1wiXSgpO1xuICAgIHRoaXMuT3B0aW9ucyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUHJlYXV0aENhbmNlbFJlcXVlc3QsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgXCJwb3NfcmVmX2lkXCI6IHRoaXMuUG9zUmVmSWQsXG4gICAgICAgIFwicHJlYXV0aF9pZFwiOiB0aGlzLlByZWF1dGhJZFxuICAgICAgfTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcmludE1lcmNoYW50Q29weSA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJvbXB0Rm9yQ3VzdG9tZXJDb3B5T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFNpZ25hdHVyZUZsb3dPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5BZGRSZWNlaXB0Q29uZmlnKGRhdGEpO1xuICAgICAgdGhpcy5PcHRpb25zLkFkZE9wdGlvbnMoZGF0YSk7XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJwcmFjXCIpLCBQcmVhdXRoRXZlbnRzLlByZWF1dGhDYW5jZWxsYXRpb25SZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJlYXV0aENhbmNlbFJlcXVlc3Q7XG59KCk7XG52YXIgUHJlYXV0aENvbXBsZXRpb25SZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJlYXV0aENvbXBsZXRpb25SZXF1ZXN0KHByZWF1dGhJZCwgY29tcGxldGlvbkFtb3VudENlbnRzLCBwb3NSZWZJZCwgc3VyY2hhcmdlQW1vdW50KSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQcmVhdXRoQ29tcGxldGlvblJlcXVlc3QpO1xuXG4gICAgdGhpcy5QcmVhdXRoSWQgPSBwcmVhdXRoSWQ7XG4gICAgdGhpcy5Db21wbGV0aW9uQW1vdW50ID0gY29tcGxldGlvbkFtb3VudENlbnRzO1xuICAgIHRoaXMuUG9zUmVmSWQgPSBwb3NSZWZJZDtcbiAgICB0aGlzLlN1cmNoYXJnZUFtb3VudCA9IHN1cmNoYXJnZUFtb3VudDtcbiAgICB0aGlzLkNvbmZpZyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlDb25maWdcIl0oKTtcbiAgICB0aGlzLk9wdGlvbnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFByZWF1dGhDb21wbGV0aW9uUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBcInBvc19yZWZfaWRcIjogdGhpcy5Qb3NSZWZJZCxcbiAgICAgICAgXCJwcmVhdXRoX2lkXCI6IHRoaXMuUHJlYXV0aElkLFxuICAgICAgICBcImNvbXBsZXRpb25fYW1vdW50XCI6IHRoaXMuQ29tcGxldGlvbkFtb3VudCxcbiAgICAgICAgXCJzdXJjaGFyZ2VfYW1vdW50XCI6IHRoaXMuU3VyY2hhcmdlQW1vdW50XG4gICAgICB9O1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkFkZFJlY2VpcHRDb25maWcoZGF0YSk7XG4gICAgICB0aGlzLk9wdGlvbnMuQWRkT3B0aW9ucyhkYXRhKTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInByYWNcIiksIFByZWF1dGhFdmVudHMuUHJlYXV0aENvbXBsZXRlUmVxdWVzdCwgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFByZWF1dGhDb21wbGV0aW9uUmVxdWVzdDtcbn0oKTtcbnZhciBQcmVhdXRoUmVzcG9uc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcmVhdXRoUmVzcG9uc2UobSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHJlYXV0aFJlc3BvbnNlKTtcblxuICAgIHRoaXMuUHJlYXV0aElkID0gbS5EYXRhW1wicHJlYXV0aF9pZFwiXTtcbiAgICB0aGlzLkRldGFpbHMgPSBuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJQdXJjaGFzZVJlc3BvbnNlXCJdKG0pO1xuICAgIHRoaXMuUG9zUmVmSWQgPSB0aGlzLkRldGFpbHMuUG9zUmVmSWQ7XG4gICAgdGhpcy5fbSA9IG07XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFByZWF1dGhSZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiR2V0QmFsYW5jZUFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRCYWxhbmNlQW1vdW50KCkge1xuICAgICAgdmFyIHR4VHlwZSA9IHRoaXMuX20uRGF0YVtcInRyYW5zYWN0aW9uX3R5cGVcIl07XG5cbiAgICAgIHN3aXRjaCAodHhUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJQUkUtQVVUSFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJwcmVhdXRoX2Ftb3VudFwiXTtcblxuICAgICAgICBjYXNlIFwiVE9QVVBcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiYmFsYW5jZV9hbW91bnRcIl07XG5cbiAgICAgICAgY2FzZSBcIkNBTkNFTFwiOlxuICAgICAgICAgIC8vIFBBUlRJQUwgQ0FOQ0VMTEFUSU9OXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImJhbGFuY2VfYW1vdW50XCJdO1xuXG4gICAgICAgIGNhc2UgXCJQUkUtQVVUSCBFWFRcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiYmFsYW5jZV9hbW91bnRcIl07XG5cbiAgICAgICAgY2FzZSBcIlBDT01QXCI6XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIC8vIEJhbGFuY2UgaXMgMCBhZnRlciBjb21wbGV0aW9uXG5cbiAgICAgICAgY2FzZSBcIlBSRS1BVVRIIENBTkNFTFwiOlxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAvLyBCYWxhbmNlIGlzIDAgYWZ0ZXIgY2FuY2VsbGF0aW9uXG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UHJldmlvdXNCYWxhbmNlQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFByZXZpb3VzQmFsYW5jZUFtb3VudCgpIHtcbiAgICAgIHZhciB0eFR5cGUgPSB0aGlzLl9tLkRhdGFbXCJ0cmFuc2FjdGlvbl90eXBlXCJdO1xuXG4gICAgICBzd2l0Y2ggKHR4VHlwZSkge1xuICAgICAgICBjYXNlIFwiUFJFLUFVVEhcIjpcbiAgICAgICAgICByZXR1cm4gMDtcblxuICAgICAgICBjYXNlIFwiVE9QVVBcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiZXhpc3RpbmdfcHJlYXV0aF9hbW91bnRcIl07XG5cbiAgICAgICAgY2FzZSBcIkNBTkNFTFwiOlxuICAgICAgICAgIC8vIFBBUlRJQUwgQ0FOQ0VMTEFUSU9OXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImV4aXN0aW5nX3ByZWF1dGhfYW1vdW50XCJdO1xuXG4gICAgICAgIGNhc2UgXCJQUkUtQVVUSCBFWFRcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiZXhpc3RpbmdfcHJlYXV0aF9hbW91bnRcIl07XG5cbiAgICAgICAgY2FzZSBcIlBDT01QXCI6XG4gICAgICAgICAgLy8gVEhJUyBJUyBURUNITklDQUxMWSBOT1QgQ09SUkVDVCBXSEVOIENPTVBMRVRJT04gSEFQUEVOUyBGT1IgQSBQQVJUSUFMIEFNT1VOVC5cbiAgICAgICAgICAvLyBCVVQgVU5GT1JUVU5BVEVMWSwgVEhJUyBSRVNQT05TRSBET0VTIE5PVCBDT05UQUlOIFwiZXhpc3RpbmdfcHJlYXV0aF9hbW91bnRcIi5cbiAgICAgICAgICAvLyBTTyBcImNvbXBsZXRpb25fYW1vdW50XCIgSVMgVEhFIENMT1NFU1QgV0UgSEFWRS5cbiAgICAgICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiY29tcGxldGlvbl9hbW91bnRcIl07XG5cbiAgICAgICAgY2FzZSBcIlBSRS1BVVRIIENBTkNFTFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJwcmVhdXRoX2Ftb3VudFwiXTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRDb21wbGV0aW9uQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldENvbXBsZXRpb25BbW91bnQoKSB7XG4gICAgICB2YXIgdHhUeXBlID0gdGhpcy5fbS5EYXRhW1widHJhbnNhY3Rpb25fdHlwZVwiXTtcblxuICAgICAgc3dpdGNoICh0eFR5cGUpIHtcbiAgICAgICAgY2FzZSBcIlBDT01QXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImNvbXBsZXRpb25fYW1vdW50XCJdO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFN1cmNoYXJnZUFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTdXJjaGFyZ2VBbW91bnQoKSB7XG4gICAgICB2YXIgdHhUeXBlID0gdGhpcy5fbS5EYXRhW1widHJhbnNhY3Rpb25fdHlwZVwiXTtcblxuICAgICAgc3dpdGNoICh0eFR5cGUpIHtcbiAgICAgICAgY2FzZSBcIlBDT01QXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcInN1cmNoYXJnZV9hbW91bnRcIl07XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2FzTWVyY2hhbnRSZWNlaXB0UHJpbnRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNNZXJjaGFudFJlY2VpcHRQcmludGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcIm1lcmNoYW50X3JlY2VpcHRfcHJpbnRlZFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2FzQ3VzdG9tZXJSZWNlaXB0UHJpbnRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNDdXN0b21lclJlY2VpcHRQcmludGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImN1c3RvbWVyX3JlY2VpcHRfcHJpbnRlZFwiXTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJlYXV0aFJlc3BvbnNlO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QcmludGluZy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9QcmludGluZy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBQcmludGluZ1JlcXVlc3QsIFByaW50aW5nUmVzcG9uc2UsIFByaW50ZXIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHJpbnRpbmdSZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUHJpbnRpbmdSZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQcmludGluZ1Jlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUHJpbnRpbmdSZXNwb25zZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHJpbnRlclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFByaW50ZXI7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NZXNzYWdlcyAqLyBcIi4vc3JjL01lc3NhZ2VzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUmVxdWVzdElkSGVscGVyICovIFwiLi9zcmMvUmVxdWVzdElkSGVscGVyLmpzXCIpO1xuXG5cblxuXG52YXIgUHJpbnRpbmdSZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJpbnRpbmdSZXF1ZXN0KGtleSwgcGF5bG9hZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHJpbnRpbmdSZXF1ZXN0KTtcblxuICAgIHRoaXMuX2tleSA9IGtleTtcbiAgICB0aGlzLl9wYXlsb2FkID0gcGF5bG9hZDtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUHJpbnRpbmdSZXF1ZXN0LCBbe1xuICAgIGtleTogXCJ0b01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIFwia2V5XCI6IHRoaXMuX2tleSxcbiAgICAgICAgXCJwYXlsb2FkXCI6IHRoaXMuX3BheWxvYWRcbiAgICAgIH07XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJwcmludFwiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uUHJpbnRpbmdSZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJpbnRpbmdSZXF1ZXN0O1xufSgpO1xudmFyIFByaW50aW5nUmVzcG9uc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcmludGluZ1Jlc3BvbnNlKG0pIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFByaW50aW5nUmVzcG9uc2UpO1xuXG4gICAgdGhpcy5fc3VjY2VzcyA9IG0uR2V0U3VjY2Vzc1N0YXRlKCkgPT0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJTdWNjZXNzU3RhdGVcIl0uU3VjY2VzcztcbiAgICB0aGlzLl9tID0gbTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUHJpbnRpbmdSZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiaXNTdWNjZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzU3VjY2VzcygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdWNjZXNzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRFcnJvclJlYXNvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFcnJvclJlYXNvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuZXJyb3JfcmVhc29uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRFcnJvckRldGFpbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFcnJvckRldGFpbCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuZXJyb3JfZGV0YWlsO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRSZXNwb25zZVZhbHVlV2l0aEF0dHJpYnV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSZXNwb25zZVZhbHVlV2l0aEF0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbYXR0cmlidXRlXTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJpbnRpbmdSZXNwb25zZTtcbn0oKTtcbi8qKlxuICogVGhpcyBjbGFzcyBpcyBhIG1vY2sgcHJpbnRlciBmb3IgdGhlIHRlcm1pbmFsIHRvIHByaW50IFJlY2VpcHRzXG4gKi9cblxudmFyIFByaW50ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcmludGVyKGVsZW1lbnQpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFByaW50ZXIpO1xuXG4gICAgdGhpcy5idWZmZXIgPSBbXTtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQcmludGVyLCBbe1xuICAgIGtleTogXCJwcmludFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwcmludCgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmJ1ZmZlci5wdXNoKGFyZ3Muam9pbignICcpKTtcblxuICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9yZW5kZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbmRlcigpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5pbm5lclRleHQgPSB0aGlzLmJ1ZmZlci5qb2luKFwiXFxuXFxuIFxcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcLyBcXG5cXG5cIik7XG4gICAgICB0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wID0gdGhpcy5lbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiQ2xlYXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQ2xlYXIoKSB7XG4gICAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuXG4gICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJpbnRlcjtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUHVyY2hhc2UuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUHVyY2hhc2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogUHVyY2hhc2VSZXF1ZXN0LCBQdXJjaGFzZVJlc3BvbnNlLCBDYW5jZWxUcmFuc2FjdGlvblJlcXVlc3QsIENhbmNlbFRyYW5zYWN0aW9uUmVzcG9uc2UsIEdldExhc3RUcmFuc2FjdGlvblJlcXVlc3QsIEdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlLCBSZWZ1bmRSZXF1ZXN0LCBSZWZ1bmRSZXNwb25zZSwgU2lnbmF0dXJlUmVxdWlyZWQsIFNpZ25hdHVyZURlY2xpbmUsIFNpZ25hdHVyZUFjY2VwdCwgTW90b1B1cmNoYXNlUmVxdWVzdCwgTW90b1B1cmNoYXNlUmVzcG9uc2UsIFBob25lRm9yQXV0aFJlcXVpcmVkLCBBdXRoQ29kZUFkdmljZSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQdXJjaGFzZVJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQdXJjaGFzZVJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlB1cmNoYXNlUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQdXJjaGFzZVJlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJDYW5jZWxUcmFuc2FjdGlvblJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBDYW5jZWxUcmFuc2FjdGlvblJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkNhbmNlbFRyYW5zYWN0aW9uUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBDYW5jZWxUcmFuc2FjdGlvblJlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJHZXRMYXN0VHJhbnNhY3Rpb25SZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gR2V0TGFzdFRyYW5zYWN0aW9uUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUmVmdW5kUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFJlZnVuZFJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlJlZnVuZFJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUmVmdW5kUmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNpZ25hdHVyZVJlcXVpcmVkXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU2lnbmF0dXJlUmVxdWlyZWQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNpZ25hdHVyZURlY2xpbmVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTaWduYXR1cmVEZWNsaW5lOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTaWduYXR1cmVBY2NlcHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTaWduYXR1cmVBY2NlcHQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIk1vdG9QdXJjaGFzZVJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNb3RvUHVyY2hhc2VSZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJNb3RvUHVyY2hhc2VSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1vdG9QdXJjaGFzZVJlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQaG9uZUZvckF1dGhSZXF1aXJlZFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBob25lRm9yQXV0aFJlcXVpcmVkOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJBdXRoQ29kZUFkdmljZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEF1dGhDb2RlQWR2aWNlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1JlcXVlc3RJZEhlbHBlciAqLyBcIi4vc3JjL1JlcXVlc3RJZEhlbHBlci5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwaU1vZGVscyAqLyBcIi4vc3JjL1NwaU1vZGVscy5qc1wiKTtcblxuXG5cblxuXG52YXIgUHVyY2hhc2VSZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHVyY2hhc2VSZXF1ZXN0KGFtb3VudENlbnRzLCBwb3NSZWZJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHVyY2hhc2VSZXF1ZXN0KTtcblxuICAgIHRoaXMuUG9zUmVmSWQgPSBwb3NSZWZJZDtcbiAgICB0aGlzLlB1cmNoYXNlQW1vdW50ID0gYW1vdW50Q2VudHM7XG4gICAgdGhpcy5UaXBBbW91bnQgPSAwO1xuICAgIHRoaXMuQ2FzaG91dEFtb3VudCA9IDA7XG4gICAgdGhpcy5Qcm9tcHRGb3JDYXNob3V0ID0gZmFsc2U7XG4gICAgdGhpcy5TdXJjaGFyZ2VBbW91bnQgPSAwO1xuICAgIHRoaXMuQ29uZmlnID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlNwaUNvbmZpZ1wiXSgpO1xuICAgIHRoaXMuT3B0aW9ucyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTsgLy8gTGlicmFyeSBCYWNrd2FyZHMgQ29tcGF0aWJpbGl0eVxuXG4gICAgdGhpcy5JZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuQW1vdW50Q2VudHMgPSBhbW91bnRDZW50cztcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUHVyY2hhc2VSZXF1ZXN0LCBbe1xuICAgIGtleTogXCJBbW91bnRTdW1tYXJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEFtb3VudFN1bW1hcnkoKSB7XG4gICAgICByZXR1cm4gXCJQdXJjaGFzZTogXCIuY29uY2F0KCh0aGlzLlB1cmNoYXNlQW1vdW50IC8gMTAwLjApLnRvRml4ZWQoMiksIFwiOyBcXG4gICAgICAgICAgICBUaXA6IFwiKS5jb25jYXQoKHRoaXMuVGlwQW1vdW50IC8gMTAwLjApLnRvRml4ZWQoMiksIFwiOyBcXG4gICAgICAgICAgICBDYXNob3V0OiBcIikuY29uY2F0KCh0aGlzLkNhc2hvdXRBbW91bnQgLyAxMDAuMCkudG9GaXhlZCgyKSwgXCI7XCIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIHBvc19yZWZfaWQ6IHRoaXMuUG9zUmVmSWQsXG4gICAgICAgIHB1cmNoYXNlX2Ftb3VudDogdGhpcy5QdXJjaGFzZUFtb3VudCxcbiAgICAgICAgdGlwX2Ftb3VudDogdGhpcy5UaXBBbW91bnQsXG4gICAgICAgIGNhc2hfYW1vdW50OiB0aGlzLkNhc2hvdXRBbW91bnQsXG4gICAgICAgIHByb21wdF9mb3JfY2FzaG91dDogdGhpcy5Qcm9tcHRGb3JDYXNob3V0LFxuICAgICAgICBzdXJjaGFyZ2VfYW1vdW50OiB0aGlzLlN1cmNoYXJnZUFtb3VudFxuICAgICAgfTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcmludE1lcmNoYW50Q29weSA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJvbXB0Rm9yQ3VzdG9tZXJDb3B5T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFNpZ25hdHVyZUZsb3dPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5BZGRSZWNlaXB0Q29uZmlnKGRhdGEpO1xuICAgICAgdGhpcy5PcHRpb25zLkFkZE9wdGlvbnMoZGF0YSk7XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJwcmNoc1wiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uUHVyY2hhc2VSZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHVyY2hhc2VSZXF1ZXN0O1xufSgpO1xudmFyIFB1cmNoYXNlUmVzcG9uc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQdXJjaGFzZVJlc3BvbnNlKG0pIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFB1cmNoYXNlUmVzcG9uc2UpO1xuXG4gICAgdGhpcy5fbSA9IG07XG4gICAgdGhpcy5SZXF1ZXN0SWQgPSBtLklkO1xuICAgIHRoaXMuUG9zUmVmSWQgPSBtLkRhdGEucG9zX3JlZl9pZDtcbiAgICB0aGlzLlNjaGVtZU5hbWUgPSBtLkRhdGEuc2NoZW1lX25hbWU7XG4gICAgdGhpcy5TY2hlbWVBcHBOYW1lID0gbS5EYXRhLnNjaGVtZV9uYW1lO1xuICAgIHRoaXMuU3VjY2VzcyA9IG0uR2V0U3VjY2Vzc1N0YXRlKCkgPT0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJTdWNjZXNzU3RhdGVcIl0uU3VjY2VzcztcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUHVyY2hhc2VSZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiR2V0UlJOXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJSTigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEucnJuO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRQdXJjaGFzZUFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRQdXJjaGFzZUFtb3VudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEucHVyY2hhc2VfYW1vdW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRUaXBBbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VGlwQW1vdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS50aXBfYW1vdW50IHx8IDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFN1cmNoYXJnZUFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTdXJjaGFyZ2VBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnN1cmNoYXJnZV9hbW91bnQgfHwgMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0Q2FzaG91dEFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRDYXNob3V0QW1vdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5jYXNoX2Ftb3VudDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmFua05vbkNhc2hBbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmFua05vbkNhc2hBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmJhbmtfbm9uY2FzaF9hbW91bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEJhbmtDYXNoQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbmtDYXNoQW1vdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5iYW5rX2Nhc2hfYW1vdW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRDdXN0b21lclJlY2VpcHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0Q3VzdG9tZXJSZWNlaXB0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5jdXN0b21lcl9yZWNlaXB0IHx8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldE1lcmNoYW50UmVjZWlwdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRNZXJjaGFudFJlY2VpcHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLm1lcmNoYW50X3JlY2VpcHQgfHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VUZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlVGV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuaG9zdF9yZXNwb25zZV90ZXh0IHx8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFJlc3BvbnNlQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZXNwb25zZUNvZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmhvc3RfcmVzcG9uc2VfY29kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0VGVybWluYWxSZWZlcmVuY2VJZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRUZXJtaW5hbFJlZmVyZW5jZUlkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS50ZXJtaW5hbF9yZWZfaWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldENhcmRFbnRyeVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRDYXJkRW50cnkoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmNhcmRfZW50cnk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEFjY291bnRUeXBlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEFjY291bnRUeXBlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5hY2NvdW50X3R5cGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEF1dGhDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEF1dGhDb2RlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5hdXRoX2NvZGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEJhbmtEYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbmtEYXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5iYW5rX2RhdGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEJhbmtUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbmtUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5iYW5rX3RpbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldE1hc2tlZFBhblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRNYXNrZWRQYW4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLm1hc2tlZF9wYW47XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRlcm1pbmFsSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VGVybWluYWxJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEudGVybWluYWxfaWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc01lcmNoYW50UmVjZWlwdFByaW50ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gV2FzTWVyY2hhbnRSZWNlaXB0UHJpbnRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEubWVyY2hhbnRfcmVjZWlwdF9wcmludGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJXYXNDdXN0b21lclJlY2VpcHRQcmludGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFdhc0N1c3RvbWVyUmVjZWlwdFByaW50ZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmN1c3RvbWVyX3JlY2VpcHRfcHJpbnRlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0U2V0dGxlbWVudERhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0U2V0dGxlbWVudERhdGUoKSB7XG4gICAgICAvL1wiYmFua19zZXR0bGVtZW50X2RhdGVcIjpcIjIwMDQyMDE4XCJcbiAgICAgIHZhciBkYXRlU3RyID0gdGhpcy5fbS5EYXRhLmJhbmtfc2V0dGxlbWVudF9kYXRlO1xuICAgICAgaWYgKCFkYXRlU3RyKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0uUGFyc2VCYW5rRGF0ZShkYXRlU3RyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZXNwb25zZVZhbHVlKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVthdHRyaWJ1dGVdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJUb1BheW1lbnRTdW1tYXJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvUGF5bWVudFN1bW1hcnkoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhY2NvdW50X3R5cGU6IHRoaXMuR2V0QWNjb3VudFR5cGUoKSxcbiAgICAgICAgYXV0aF9jb2RlOiB0aGlzLkdldEF1dGhDb2RlKCksXG4gICAgICAgIGJhbmtfZGF0ZTogdGhpcy5HZXRCYW5rRGF0ZSgpLFxuICAgICAgICBiYW5rX3RpbWU6IHRoaXMuR2V0QmFua1RpbWUoKSxcbiAgICAgICAgaG9zdF9yZXNwb25zZV9jb2RlOiB0aGlzLkdldFJlc3BvbnNlQ29kZSgpLFxuICAgICAgICBob3N0X3Jlc3BvbnNlX3RleHQ6IHRoaXMuR2V0UmVzcG9uc2VUZXh0KCksXG4gICAgICAgIG1hc2tlZF9wYW46IHRoaXMuR2V0TWFza2VkUGFuKCksXG4gICAgICAgIHB1cmNoYXNlX2Ftb3VudDogdGhpcy5HZXRQdXJjaGFzZUFtb3VudCgpLFxuICAgICAgICBycm46IHRoaXMuR2V0UlJOKCksXG4gICAgICAgIHNjaGVtZV9uYW1lOiB0aGlzLlNjaGVtZU5hbWUsXG4gICAgICAgIHRlcm1pbmFsX2lkOiB0aGlzLkdldFRlcm1pbmFsSWQoKSxcbiAgICAgICAgdGVybWluYWxfcmVmX2lkOiB0aGlzLkdldFRlcm1pbmFsUmVmZXJlbmNlSWQoKSxcbiAgICAgICAgdGlwX2Ftb3VudDogdGhpcy5HZXRUaXBBbW91bnQoKSxcbiAgICAgICAgc3VyY2hhcmdlX2Ftb3VudDogdGhpcy5HZXRTdXJjaGFyZ2VBbW91bnQoKVxuICAgICAgfTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHVyY2hhc2VSZXNwb25zZTtcbn0oKTtcbnZhciBDYW5jZWxUcmFuc2FjdGlvblJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDYW5jZWxUcmFuc2FjdGlvblJlcXVlc3QoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBDYW5jZWxUcmFuc2FjdGlvblJlcXVlc3QpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShDYW5jZWxUcmFuc2FjdGlvblJlcXVlc3QsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJjdHhcIiksIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLkNhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdCwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdDtcbn0oKTtcbnZhciBDYW5jZWxUcmFuc2FjdGlvblJlc3BvbnNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2FuY2VsVHJhbnNhY3Rpb25SZXNwb25zZShtKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBDYW5jZWxUcmFuc2FjdGlvblJlc3BvbnNlKTtcblxuICAgIHRoaXMuX20gPSBtO1xuICAgIHRoaXMuUG9zUmVmSWQgPSB0aGlzLl9tLkRhdGEucG9zX3JlZl9pZDtcbiAgICB0aGlzLlN1Y2Nlc3MgPSB0aGlzLl9tLkdldFN1Y2Nlc3NTdGF0ZSgpID09IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiU3VjY2Vzc1N0YXRlXCJdLlN1Y2Nlc3M7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKENhbmNlbFRyYW5zYWN0aW9uUmVzcG9uc2UsIFt7XG4gICAga2V5OiBcIkdldEVycm9yUmVhc29uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEVycm9yUmVhc29uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5lcnJvcl9yZWFzb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEVycm9yRGV0YWlsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEVycm9yRGV0YWlsKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5lcnJvcl9kZXRhaWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc1R4blBhc3RQb2ludE9mTm9SZXR1cm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gV2FzVHhuUGFzdFBvaW50T2ZOb1JldHVybigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkdldEVycm9yKCkuc3RhcnRzV2l0aChcIlRYTl9QQVNUX1BPSU5UX09GX05PX1JFVFVSTlwiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VWYWx1ZVdpdGhBdHRyaWJ1dGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UmVzcG9uc2VWYWx1ZVdpdGhBdHRyaWJ1dGUoYXR0cmlidXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW2F0dHJpYnV0ZV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENhbmNlbFRyYW5zYWN0aW9uUmVzcG9uc2U7XG59KCk7XG52YXIgR2V0TGFzdFRyYW5zYWN0aW9uUmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdldExhc3RUcmFuc2FjdGlvblJlcXVlc3QoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBHZXRMYXN0VHJhbnNhY3Rpb25SZXF1ZXN0KTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoR2V0TGFzdFRyYW5zYWN0aW9uUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcImdsdFwiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uR2V0TGFzdFRyYW5zYWN0aW9uUmVxdWVzdCwgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdldExhc3RUcmFuc2FjdGlvblJlcXVlc3Q7XG59KCk7XG52YXIgR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZShtKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZSk7XG5cbiAgICB0aGlzLl9tID0gbTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2UsIFt7XG4gICAga2V5OiBcIldhc1JldHJpZXZlZFN1Y2Nlc3NmdWxseVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNSZXRyaWV2ZWRTdWNjZXNzZnVsbHkoKSB7XG4gICAgICAvLyBXZSBjYW4ndCByZWx5IG9uIGNoZWNraW5nIFwic3VjY2Vzc1wiIGZsYWcgb3IgXCJlcnJvclwiIGZpZWxkcyBoZXJlLFxuICAgICAgLy8gYXMgcmV0cmlldmFsIG1heSBiZSBzdWNjZXNzZnVsLCBidXQgdGhlIHJldHJpZXZlZCB0cmFuc2FjdGlvbiB3YXMgYSBmYWlsLlxuICAgICAgLy8gU28gd2UgY2hlY2sgaWYgd2UgZ290IGJhY2sgYW4gUmVzcG9uc2VDb2RlLlxuICAgICAgLy8gKGFzIG9wcG9zZWQgdG8gc2F5IGFuIG9wZXJhdGlvbl9pbl9wcm9ncmVzc19lcnJvcilcbiAgICAgIHJldHVybiAhIXRoaXMuR2V0UmVzcG9uc2VDb2RlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc1RpbWVPdXRPZlN5bmNFcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNUaW1lT3V0T2ZTeW5jRXJyb3IoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5HZXRFcnJvcigpLnN0YXJ0c1dpdGgoXCJUSU1FX09VVF9PRl9TWU5DXCIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJXYXNPcGVyYXRpb25JblByb2dyZXNzRXJyb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gV2FzT3BlcmF0aW9uSW5Qcm9ncmVzc0Vycm9yKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uR2V0RXJyb3IoKS5zdGFydHNXaXRoKFwiT1BFUkFUSU9OX0lOX1BST0dSRVNTXCIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJJc1dhaXRpbmdGb3JTaWduYXR1cmVSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJc1dhaXRpbmdGb3JTaWduYXR1cmVSZXNwb25zZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkdldEVycm9yKCkuc3RhcnRzV2l0aChcIk9QRVJBVElPTl9JTl9QUk9HUkVTU19BV0FJVElOR19TSUdOQVRVUkVcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIklzV2FpdGluZ0ZvckF1dGhDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIElzV2FpdGluZ0ZvckF1dGhDb2RlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uR2V0RXJyb3IoKS5zdGFydHNXaXRoKFwiT1BFUkFUSU9OX0lOX1BST0dSRVNTX0FXQUlUSU5HX1BIT05FX0FVVEhfQ09ERVwiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiSXNTdGlsbEluUHJvZ3Jlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSXNTdGlsbEluUHJvZ3Jlc3MocG9zUmVmSWQpIHtcbiAgICAgIHJldHVybiB0aGlzLldhc09wZXJhdGlvbkluUHJvZ3Jlc3NFcnJvcigpICYmICh0aGlzLkdldFBvc1JlZklkKCkgPT0gcG9zUmVmSWQgfHwgdGhpcy5HZXRQb3NSZWZJZCgpID09IG51bGwpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRTdWNjZXNzU3RhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0U3VjY2Vzc1N0YXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uR2V0U3VjY2Vzc1N0YXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc1N1Y2Nlc3NmdWxUeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNTdWNjZXNzZnVsVHgoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5HZXRTdWNjZXNzU3RhdGUoKSA9PSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlN1Y2Nlc3NTdGF0ZVwiXS5TdWNjZXNzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRUeFR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VHhUeXBlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS50cmFuc2FjdGlvbl90eXBlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRQb3NSZWZJZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRQb3NSZWZJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEucG9zX3JlZl9pZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmFua05vbkNhc2hBbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmFua05vbkNhc2hBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmJhbmtfbm9uY2FzaF9hbW91bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFNjaGVtZUFwcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTY2hlbWVBcHAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnNjaGVtZV9uYW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRTY2hlbWVOYW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFNjaGVtZU5hbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnNjaGVtZV9uYW1lO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRBbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QW1vdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5hbW91bnRfcHVyY2hhc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRyYW5zYWN0aW9uQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFRyYW5zYWN0aW9uQW1vdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5hbW91bnRfdHJhbnNhY3Rpb25fdHlwZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmFua0RhdGVUaW1lU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbmtEYXRlVGltZVN0cmluZygpIHtcbiAgICAgIHZhciBkcyA9IHRoaXMuX20uRGF0YS5iYW5rX2RhdGUgKyB0aGlzLl9tLkRhdGEuYmFua190aW1lO1xuICAgICAgcmV0dXJuIGRzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSUk5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UlJOKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5ycm47XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFJlc3BvbnNlVGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZXNwb25zZVRleHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmhvc3RfcmVzcG9uc2VfdGV4dCB8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFJlc3BvbnNlQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZXNwb25zZUNvZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmhvc3RfcmVzcG9uc2VfY29kZTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZXJlIGlzIGEgYnVnLCBWU1YtOTIwLCB3aGVyZWJ5IHRoZSBjdXN0b21lcl9yZWNlaXB0IGlzIG1pc3NpbmcgZnJvbSBhIGdsdCByZXNwb25zZS5cbiAgICAvLyBUaGUgY3VycmVudCByZWNvbW1lbmRhdGlvbiBpcyB0byB1c2UgdGhlIG1lcmNoYW50IHJlY2VpcHQgaW4gcGxhY2Ugb2YgaXQgaWYgcmVxdWlyZWQuXG4gICAgLy8gVGhpcyBtZXRob2QgbW9kaWZpZXMgdGhlIHVuZGVybHlpbmcgaW5jb21pbmcgbWVzc2FnZSBkYXRhIGJ5IGNvcHlpbmdcbiAgICAvLyB0aGUgbWVyY2hhbnQgcmVjZWlwdCBpbnRvIHRoZSBjdXN0b21lciByZWNlaXB0IG9ubHkgaWYgdGhlcmUgXG4gICAgLy8gaXMgYSBtZXJjaGFudF9yZWNlaXB0IGFuZCB0aGVyZSBpcyBub3QgYSBjdXN0b21lcl9yZWNlaXB0LiAgIFxuICAgIC8vIDwvc3VtbWFyeT5cblxuICB9LCB7XG4gICAga2V5OiBcIkNvcHlNZXJjaGFudFJlY2VpcHRUb0N1c3RvbWVyUmVjZWlwdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDb3B5TWVyY2hhbnRSZWNlaXB0VG9DdXN0b21lclJlY2VpcHQoKSB7XG4gICAgICB2YXIgY3IgPSB0aGlzLl9tLkRhdGEuY3VzdG9tZXJfcmVjZWlwdDtcbiAgICAgIHZhciBtciA9IHRoaXMuX20uRGF0YS5tZXJjaGFudF9yZWNlaXB0O1xuXG4gICAgICBpZiAobXIgIT0gXCJcIiAmJiAhY3IpIHtcbiAgICAgICAgdGhpcy5fbS5EYXRhLmN1c3RvbWVyX3JlY2VpcHQgPSBtcjtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2U7XG59KCk7XG52YXIgUmVmdW5kUmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlZnVuZFJlcXVlc3QoYW1vdW50Q2VudHMsIHBvc1JlZklkLCBzdXBwcmVzc01lcmNoYW50UGFzc3dvcmQpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFJlZnVuZFJlcXVlc3QpO1xuXG4gICAgdGhpcy5BbW91bnRDZW50cyA9IGFtb3VudENlbnRzO1xuICAgIHRoaXMuSWQgPSBfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJyZWZ1bmRcIik7XG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuU3VwcHJlc3NNZXJjaGFudFBhc3N3b3JkID0gc3VwcHJlc3NNZXJjaGFudFBhc3N3b3JkO1xuICAgIHRoaXMuQ29uZmlnID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlNwaUNvbmZpZ1wiXSgpO1xuICAgIHRoaXMuT3B0aW9ucyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUmVmdW5kUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICByZWZ1bmRfYW1vdW50OiB0aGlzLkFtb3VudENlbnRzLFxuICAgICAgICBwb3NfcmVmX2lkOiB0aGlzLlBvc1JlZklkLFxuICAgICAgICBzdXBwcmVzc19tZXJjaGFudF9wYXNzd29yZDogdGhpcy5TdXBwcmVzc01lcmNoYW50UGFzc3dvcmRcbiAgICAgIH07XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRTaWduYXR1cmVGbG93T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuQWRkUmVjZWlwdENvbmZpZyhkYXRhKTtcbiAgICAgIHRoaXMuT3B0aW9ucy5BZGRPcHRpb25zKGRhdGEpO1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicmVmdW5kXCIpLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5SZWZ1bmRSZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVmdW5kUmVxdWVzdDtcbn0oKTtcbnZhciBSZWZ1bmRSZXNwb25zZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlZnVuZFJlc3BvbnNlKG0pIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFJlZnVuZFJlc3BvbnNlKTtcblxuICAgIHRoaXMuX20gPSBtO1xuICAgIHRoaXMuUmVxdWVzdElkID0gbS5JZDtcbiAgICB0aGlzLlBvc1JlZklkID0gbS5EYXRhLnBvc19yZWZfaWQ7XG4gICAgdGhpcy5TY2hlbWVOYW1lID0gbS5EYXRhLnNjaGVtZV9uYW1lO1xuICAgIHRoaXMuU2NoZW1lQXBwTmFtZSA9IG0uRGF0YS5zY2hlbWVfbmFtZTtcbiAgICB0aGlzLlN1Y2Nlc3MgPSBtLkdldFN1Y2Nlc3NTdGF0ZSgpID09IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiU3VjY2Vzc1N0YXRlXCJdLlN1Y2Nlc3M7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFJlZnVuZFJlc3BvbnNlLCBbe1xuICAgIGtleTogXCJHZXRSZWZ1bmRBbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UmVmdW5kQW1vdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5yZWZ1bmRfYW1vdW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSUk5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UlJOKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5ycm47XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEN1c3RvbWVyUmVjZWlwdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRDdXN0b21lclJlY2VpcHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmN1c3RvbWVyX3JlY2VpcHQgfHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0TWVyY2hhbnRSZWNlaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldE1lcmNoYW50UmVjZWlwdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEubWVyY2hhbnRfcmVjZWlwdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VUZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlVGV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuaG9zdF9yZXNwb25zZV90ZXh0IHx8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFJlc3BvbnNlQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZXNwb25zZUNvZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmhvc3RfcmVzcG9uc2VfY29kZSB8fCBcIlwiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRUZXJtaW5hbFJlZmVyZW5jZUlkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFRlcm1pbmFsUmVmZXJlbmNlSWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnRlcm1pbmFsX3JlZl9pZCB8fCBcIlwiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRDYXJkRW50cnlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0Q2FyZEVudHJ5KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5jYXJkX2VudHJ5IHx8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEFjY291bnRUeXBlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEFjY291bnRUeXBlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5hY2NvdW50X3R5cGUgfHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QXV0aENvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QXV0aENvZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmF1dGhfY29kZSB8fCBcIlwiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRCYW5rRGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRCYW5rRGF0ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuYmFua19kYXRlIHx8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEJhbmtUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbmtUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5iYW5rX3RpbWUgfHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0TWFza2VkUGFuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldE1hc2tlZFBhbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEubWFza2VkX3BhbiB8fCBcIlwiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRUZXJtaW5hbElkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFRlcm1pbmFsSWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnRlcm1pbmFsX2lkIHx8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc01lcmNoYW50UmVjZWlwdFByaW50ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gV2FzTWVyY2hhbnRSZWNlaXB0UHJpbnRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEubWVyY2hhbnRfcmVjZWlwdF9wcmludGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJXYXNDdXN0b21lclJlY2VpcHRQcmludGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFdhc0N1c3RvbWVyUmVjZWlwdFByaW50ZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmN1c3RvbWVyX3JlY2VpcHRfcHJpbnRlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0U2V0dGxlbWVudERhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0U2V0dGxlbWVudERhdGUoKSB7XG4gICAgICAvL1wiYmFua19zZXR0bGVtZW50X2RhdGVcIjpcIjIwMDQyMDE4XCJcbiAgICAgIHZhciBkYXRlU3RyID0gdGhpcy5fbS5EYXRhLmJhbmtfc2V0dGxlbWVudF9kYXRlO1xuICAgICAgaWYgKCFkYXRlU3RyKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0uUGFyc2VCYW5rRGF0ZShkYXRlU3RyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZXNwb25zZVZhbHVlKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVthdHRyaWJ1dGVdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZWZ1bmRSZXNwb25zZTtcbn0oKTtcbnZhciBTaWduYXR1cmVSZXF1aXJlZCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNpZ25hdHVyZVJlcXVpcmVkKG0pIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFNpZ25hdHVyZVJlcXVpcmVkKTtcblxuICAgIHRoaXMuUmVxdWVzdElkID0gbS5JZDtcbiAgICB0aGlzLlBvc1JlZklkID0gbS5EYXRhLnBvc19yZWZfaWQ7XG4gICAgdGhpcy5fcmVjZWlwdFRvU2lnbiA9IG0uRGF0YS5tZXJjaGFudF9yZWNlaXB0O1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShTaWduYXR1cmVSZXF1aXJlZCwgW3tcbiAgICBrZXk6IFwiU2lnbmF0dXJlUmVxdWlyZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2lnbmF0dXJlUmVxdWlyZWQocG9zUmVmSWQsIHJlcXVlc3RJZCwgcmVjZWlwdFRvU2lnbikge1xuICAgICAgdGhpcy5SZXF1ZXN0SWQgPSByZXF1ZXN0SWQ7XG4gICAgICB0aGlzLlBvc1JlZklkID0gcG9zUmVmSWQ7XG4gICAgICB0aGlzLl9yZWNlaXB0VG9TaWduID0gcmVjZWlwdFRvU2lnbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0TWVyY2hhbnRSZWNlaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldE1lcmNoYW50UmVjZWlwdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZWNlaXB0VG9TaWduO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaWduYXR1cmVSZXF1aXJlZDtcbn0oKTtcbnZhciBTaWduYXR1cmVEZWNsaW5lID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2lnbmF0dXJlRGVjbGluZShwb3NSZWZJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2lnbmF0dXJlRGVjbGluZSk7XG5cbiAgICB0aGlzLlBvc1JlZklkID0gcG9zUmVmSWQ7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFNpZ25hdHVyZURlY2xpbmUsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgcG9zX3JlZl9pZDogdGhpcy5Qb3NSZWZJZFxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInNpZ2RlY1wiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uU2lnbmF0dXJlRGVjbGluZWQsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaWduYXR1cmVEZWNsaW5lO1xufSgpO1xudmFyIFNpZ25hdHVyZUFjY2VwdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNpZ25hdHVyZUFjY2VwdChwb3NSZWZJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2lnbmF0dXJlQWNjZXB0KTtcblxuICAgIHRoaXMuUG9zUmVmSWQgPSBwb3NSZWZJZDtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoU2lnbmF0dXJlQWNjZXB0LCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIHBvc19yZWZfaWQ6IHRoaXMuUG9zUmVmSWRcbiAgICAgIH07XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJzaWdhY2NcIiksIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLlNpZ25hdHVyZUFjY2VwdGVkLCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2lnbmF0dXJlQWNjZXB0O1xufSgpO1xudmFyIE1vdG9QdXJjaGFzZVJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNb3RvUHVyY2hhc2VSZXF1ZXN0KGFtb3VudENlbnRzLCBwb3NSZWZJZCwgc3VyY2hhcmdlQW1vdW50KSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBNb3RvUHVyY2hhc2VSZXF1ZXN0KTtcblxuICAgIHRoaXMuUG9zUmVmSWQgPSBwb3NSZWZJZDtcbiAgICB0aGlzLlB1cmNoYXNlQW1vdW50ID0gYW1vdW50Q2VudHM7XG4gICAgdGhpcy5TdXJjaGFyZ2VBbW91bnQgPSBzdXJjaGFyZ2VBbW91bnQ7XG4gICAgdGhpcy5TdXBwcmVzc01lcmNoYW50UGFzc3dvcmQgPSBmYWxzZTtcbiAgICB0aGlzLkNvbmZpZyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJTcGlDb25maWdcIl0oKTtcbiAgICB0aGlzLk9wdGlvbnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKE1vdG9QdXJjaGFzZVJlcXVlc3QsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgcG9zX3JlZl9pZDogdGhpcy5Qb3NSZWZJZCxcbiAgICAgICAgcHVyY2hhc2VfYW1vdW50OiB0aGlzLlB1cmNoYXNlQW1vdW50LFxuICAgICAgICBzdXJjaGFyZ2VfYW1vdW50OiB0aGlzLlN1cmNoYXJnZUFtb3VudCxcbiAgICAgICAgc3VwcHJlc3NfbWVyY2hhbnRfcGFzc3dvcmQ6IHRoaXMuU3VwcHJlc3NNZXJjaGFudFBhc3N3b3JkXG4gICAgICB9O1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkFkZFJlY2VpcHRDb25maWcoZGF0YSk7XG4gICAgICB0aGlzLk9wdGlvbnMuQWRkT3B0aW9ucyhkYXRhKTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcIm1vdG9cIiksIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLk1vdG9QdXJjaGFzZVJlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNb3RvUHVyY2hhc2VSZXF1ZXN0O1xufSgpO1xudmFyIE1vdG9QdXJjaGFzZVJlc3BvbnNlID0gZnVuY3Rpb24gTW90b1B1cmNoYXNlUmVzcG9uc2UobSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIE1vdG9QdXJjaGFzZVJlc3BvbnNlKTtcblxuICB0aGlzLlB1cmNoYXNlUmVzcG9uc2UgPSBuZXcgUHVyY2hhc2VSZXNwb25zZShtKTtcbiAgdGhpcy5Qb3NSZWZJZCA9IFB1cmNoYXNlUmVzcG9uc2UuUG9zUmVmSWQ7XG59O1xudmFyIFBob25lRm9yQXV0aFJlcXVpcmVkID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGhvbmVGb3JBdXRoUmVxdWlyZWQoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQaG9uZUZvckF1dGhSZXF1aXJlZCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSA0KSB7XG4gICAgICB0aGlzLlBvc1JlZklkID0gYXJnc1swXTtcbiAgICAgIHRoaXMuUmVxdWVzdElkID0gYXJnc1sxXTtcbiAgICAgIHRoaXMuX3Bob25lTnVtYmVyID0gYXJnc1syXTtcbiAgICAgIHRoaXMuX21lcmNoYW50SWQgPSBhcmdzWzNdO1xuICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuUmVxdWVzdElkID0gYXJnc1swXS5JZDtcbiAgICAgIHRoaXMuUG9zUmVmSWQgPSBhcmdzWzBdLkRhdGEucG9zX3JlZl9pZDtcbiAgICAgIHRoaXMuX3Bob25lTnVtYmVyID0gYXJnc1swXS5EYXRhLmF1dGhfY2VudHJlX3Bob25lX251bWJlcjtcbiAgICAgIHRoaXMuX21lcmNoYW50SWQgPSBhcmdzWzBdLkRhdGEubWVyY2hhbnRfaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjYWxsIHNpZyBmb3IgUGhvbmUgYXV0aCByZXF1aXJlZCBjbGFzcycpO1xuICAgIH1cbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUGhvbmVGb3JBdXRoUmVxdWlyZWQsIFt7XG4gICAga2V5OiBcIkdldFBob25lTnVtYmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFBob25lTnVtYmVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Bob25lTnVtYmVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRNZXJjaGFudElkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldE1lcmNoYW50SWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbWVyY2hhbnRJZDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGhvbmVGb3JBdXRoUmVxdWlyZWQ7XG59KCk7XG52YXIgQXV0aENvZGVBZHZpY2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBdXRoQ29kZUFkdmljZShwb3NSZWZJZCwgYXV0aENvZGUpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIEF1dGhDb2RlQWR2aWNlKTtcblxuICAgIHRoaXMuUG9zUmVmSWQgPSBwb3NSZWZJZDtcbiAgICB0aGlzLkF1dGhDb2RlID0gYXV0aENvZGU7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKEF1dGhDb2RlQWR2aWNlLCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIHBvc19yZWZfaWQ6IHRoaXMuUG9zUmVmSWQsXG4gICAgICAgIGF1dGhfY29kZTogdGhpcy5BdXRoQ29kZVxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcImF1dGhhZFwiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uQXV0aENvZGVBZHZpY2UsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBdXRoQ29kZUFkdmljZTtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUHVyY2hhc2VIZWxwZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUHVyY2hhc2VIZWxwZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogUHVyY2hhc2VIZWxwZXIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHVyY2hhc2VIZWxwZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQdXJjaGFzZUhlbHBlcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1B1cmNoYXNlICovIFwiLi9zcmMvUHVyY2hhc2UuanNcIik7XG5cblxuXG52YXIgUHVyY2hhc2VIZWxwZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQdXJjaGFzZUhlbHBlcigpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFB1cmNoYXNlSGVscGVyKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUHVyY2hhc2VIZWxwZXIsIG51bGwsIFt7XG4gICAga2V5OiBcIkNyZWF0ZVB1cmNoYXNlUmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDcmVhdGVQdXJjaGFzZVJlcXVlc3QoYW1vdW50Q2VudHMsIHB1cmNoYXNlSWQpIHtcbiAgICAgIHJldHVybiBuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJQdXJjaGFzZVJlcXVlc3RcIl0oYW1vdW50Q2VudHMsIHB1cmNoYXNlSWQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJDcmVhdGVQdXJjaGFzZVJlcXVlc3RWMlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDcmVhdGVQdXJjaGFzZVJlcXVlc3RWMihwb3NSZWZJZCwgcHVyY2hhc2VBbW91bnQsIHRpcEFtb3VudCwgY2FzaG91dEFtb3VudCwgcHJvbXB0Rm9yQ2FzaG91dCwgc3VyY2hhcmdlQW1vdW50KSB7XG4gICAgICB2YXIgcHIgPSBPYmplY3QuYXNzaWduKG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlB1cmNoYXNlUmVxdWVzdFwiXShwdXJjaGFzZUFtb3VudCwgcG9zUmVmSWQpLCB7XG4gICAgICAgIENhc2hvdXRBbW91bnQ6IGNhc2hvdXRBbW91bnQsXG4gICAgICAgIFRpcEFtb3VudDogdGlwQW1vdW50LFxuICAgICAgICBQcm9tcHRGb3JDYXNob3V0OiBwcm9tcHRGb3JDYXNob3V0LFxuICAgICAgICBTdXJjaGFyZ2VBbW91bnQ6IHN1cmNoYXJnZUFtb3VudFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcHI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkNyZWF0ZVJlZnVuZFJlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQ3JlYXRlUmVmdW5kUmVxdWVzdChhbW91bnRDZW50cywgcHVyY2hhc2VJZCwgc3VwcHJlc3NNZXJjaGFudFBhc3N3b3JkKSB7XG4gICAgICByZXR1cm4gbmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUmVmdW5kUmVxdWVzdFwiXShhbW91bnRDZW50cywgcHVyY2hhc2VJZCwgc3VwcHJlc3NNZXJjaGFudFBhc3N3b3JkKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHVyY2hhc2VIZWxwZXI7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1JlcXVlc3RJZEhlbHBlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUmVxdWVzdElkSGVscGVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBSZXF1ZXN0SWRIZWxwZXIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUmVxdWVzdElkSGVscGVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUmVxdWVzdElkSGVscGVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcblxuXG52YXIgX19SZXF1ZXN0SWRIZWxwZXJDb3VudGVyID0gMTtcbnZhciBSZXF1ZXN0SWRIZWxwZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZXF1ZXN0SWRIZWxwZXIoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBSZXF1ZXN0SWRIZWxwZXIpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShSZXF1ZXN0SWRIZWxwZXIsIG51bGwsIFt7XG4gICAga2V5OiBcIklkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIElkKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIF9fUmVxdWVzdElkSGVscGVyQ291bnRlcisrO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXF1ZXN0SWRIZWxwZXI7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1NlY3JldHMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9TZWNyZXRzLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogU2VjcmV0cyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTZWNyZXRzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU2VjcmV0czsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG5cblxudmFyIFNlY3JldHMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZWNyZXRzKGVuY0tleSwgaG1hY0tleSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2VjcmV0cyk7XG5cbiAgICB0aGlzLkVuY0tleSA9IGVuY0tleTtcbiAgICB0aGlzLkhtYWNLZXkgPSBobWFjS2V5O1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShTZWNyZXRzLCBudWxsLCBbe1xuICAgIGtleTogXCJzYXZlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmUoRW5jS2V5LCBIbWFjS2V5KSB7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnRW5jS2V5JywgRW5jS2V5KTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdIbWFjS2V5JywgSG1hY0tleSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc3RvcmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICAgIHJldHVybiBuZXcgU2VjcmV0cyhsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRW5jS2V5JyksIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdIbWFjS2V5JykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1NhdmVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzU2F2ZWQoKSB7XG4gICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0VuY0tleScpICYmIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdIbWFjS2V5Jyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlJlc2V0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFJlc2V0KCkge1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ0VuY0tleScpO1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ0htYWNLZXknKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2VjcmV0cztcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvU2VydmljZS9EZXZpY2VTZXJ2aWNlLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9TZXJ2aWNlL0RldmljZVNlcnZpY2UuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IERldmljZUFkZHJlc3NTdGF0dXMsIERldmljZUFkZHJlc3NSZXNwb25zZUNvZGUsIEh0dHBTdGF0dXNDb2RlLCBEZXZpY2VBZGRyZXNzU2VydmljZSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJEZXZpY2VBZGRyZXNzU3RhdHVzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRGV2aWNlQWRkcmVzc1N0YXR1czsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIERldmljZUFkZHJlc3NSZXNwb25zZUNvZGU7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkh0dHBTdGF0dXNDb2RlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gSHR0cFN0YXR1c0NvZGU7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkRldmljZUFkZHJlc3NTZXJ2aWNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRGV2aWNlQWRkcmVzc1NlcnZpY2U7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX3JlZ2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvciAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX3JlZ2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfcmVnZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19hc3luY1RvR2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19hc3luY1RvR2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19hc3luY1RvR2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18pO1xuXG5cblxuXG52YXIgRGV2aWNlQWRkcmVzc1N0YXR1cyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0KCkoRGV2aWNlQWRkcmVzc1N0YXR1cywgW3tcbiAgICBrZXk6IFwiQWRkcmVzc1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuVXNlU2VjdXJlV2ViU29ja2V0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcWRuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXA7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChhZGRyZXNzKSB7XG4gICAgICBpZiAodGhpcy5Vc2VTZWN1cmVXZWJTb2NrZXRzKSB7XG4gICAgICAgIHRoaXMuZnFkbiA9IGFkZHJlc2VzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5pcCA9IGFkZHJlc3M7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gRGV2aWNlQWRkcmVzc1N0YXR1cyh1c2VTZWN1cmVXZWJTb2NrZXRzKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQoKSh0aGlzLCBEZXZpY2VBZGRyZXNzU3RhdHVzKTtcblxuICAgIHRoaXMuVXNlU2VjdXJlV2ViU29ja2V0cyA9IHVzZVNlY3VyZVdlYlNvY2tldHM7XG4gICAgdGhpcy5pcCA9IG51bGw7XG4gICAgdGhpcy5mcWRuID0gbnVsbDtcbiAgICB0aGlzLkxhc3RVcGRhdGVkID0gbnVsbDtcbiAgICB0aGlzLkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGUgPSBudWxsO1xuICAgIHRoaXMuUmVzcG9uc2VTdGF0dXNEZXNjcmlwdGlvbiA9IG51bGw7XG4gICAgdGhpcy5SZXNwb25zZU1lc3NhZ2UgPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIERldmljZUFkZHJlc3NTdGF0dXM7XG59KCk7XG52YXIgRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZSA9IHtcbiAgU1VDQ0VTUzogJ1NVQ0NFU1MnLFxuICBJTlZBTElEX1NFUklBTF9OVU1CRVI6ICdJTlZBTElEX1NFUklBTF9OVU1CRVInLFxuICBBRERSRVNTX05PVF9DSEFOR0VEOiAnQUREUkVTU19OT1RfQ0hBTkdFRCcsXG4gIFNFUklBTF9OVU1CRVJfTk9UX0NIQU5HRUQ6ICdTRVJJQUxfTlVNQkVSX05PVF9DSEFOR0VEJyxcbiAgREVWSUNFX1NFUlZJQ0VfRVJST1I6ICdERVZJQ0VfU0VSVklDRV9FUlJPUidcbn07XG52YXIgSHR0cFN0YXR1c0NvZGUgPSB7XG4gIE5vdEZvdW5kOiA0MDRcbn07XG52YXIgRGV2aWNlQWRkcmVzc1NlcnZpY2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBEZXZpY2VBZGRyZXNzU2VydmljZSgpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCgpKHRoaXMsIERldmljZUFkZHJlc3NTZXJ2aWNlKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0KCkoRGV2aWNlQWRkcmVzc1NlcnZpY2UsIFt7XG4gICAga2V5OiBcIlJldHJpZXZlU2VydmljZVwiLFxuICAgIC8vIFJldHJpZXZlU2VydmljZShzZXJpYWxOdW1iZXIsIGFwaUtleSA9ICdzcGktc2FtcGxlLXBvczEnLCBhY3F1aXJlckNvZGUsIHVzZVNlY3VyZVdlYlNvY2tldHMsIGlzVGVzdE1vZGUpXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfUmV0cmlldmVTZXJ2aWNlID0gX2JhYmVsX3J1bnRpbWVfaGVscGVyc19hc3luY1RvR2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFxuICAgICAgLyojX19QVVJFX18qL1xuICAgICAgX2JhYmVsX3J1bnRpbWVfcmVnZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0LmEubWFyayhmdW5jdGlvbiBfY2FsbGVlKHNlcmlhbE51bWJlcikge1xuICAgICAgICB2YXIgYXBpS2V5LFxuICAgICAgICAgICAgYWNxdWlyZXJDb2RlLFxuICAgICAgICAgICAgaXNTZWN1cmVDb25uZWN0aW9uLFxuICAgICAgICAgICAgaXNUZXN0TW9kZSxcbiAgICAgICAgICAgIENPTk5FQ1RJT05fVElNRU9VVCxcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBkZXZpY2VBZGRyZXNzVXJpLFxuICAgICAgICAgICAgX2FyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiBfYmFiZWxfcnVudGltZV9yZWdlbmVyYXRvcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGFwaUtleSA9IF9hcmdzLmxlbmd0aCA+IDEgJiYgX2FyZ3NbMV0gIT09IHVuZGVmaW5lZCA/IF9hcmdzWzFdIDogJ3NwaS1zYW1wbGUtcG9zMSc7XG4gICAgICAgICAgICAgICAgYWNxdWlyZXJDb2RlID0gX2FyZ3MubGVuZ3RoID4gMiA/IF9hcmdzWzJdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlzU2VjdXJlQ29ubmVjdGlvbiA9IF9hcmdzLmxlbmd0aCA+IDMgPyBfYXJnc1szXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBpc1Rlc3RNb2RlID0gX2FyZ3MubGVuZ3RoID4gNCA/IF9hcmdzWzRdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIENPTk5FQ1RJT05fVElNRU9VVCA9IDgwMDA7XG4gICAgICAgICAgICAgICAgcGF0aCA9IGlzU2VjdXJlQ29ubmVjdGlvbiA/ICdmcWRuJyA6ICdpcCc7XG4gICAgICAgICAgICAgICAgZGV2aWNlQWRkcmVzc1VyaSA9IGlzVGVzdE1vZGUgPyBcImh0dHBzOi8vZGV2aWNlLWFkZHJlc3MtYXBpLXNiLlwiLmNvbmNhdChhY3F1aXJlckNvZGUsIFwiLm1zcC5hc3NlbWJseXBheW1lbnRzLmNvbS92MS9cIikuY29uY2F0KHNlcmlhbE51bWJlciwgXCIvXCIpLmNvbmNhdChwYXRoKSA6IFwiaHR0cHM6Ly9kZXZpY2UtYWRkcmVzcy1hcGkuXCIuY29uY2F0KGFjcXVpcmVyQ29kZSwgXCIubXNwLmFzc2VtYmx5cGF5bWVudHMuY29tL3YxL1wiKS5jb25jYXQoc2VyaWFsTnVtYmVyLCBcIi9cIikuY29uY2F0KHBhdGgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgUHJvbWlzZS5yYWNlKFtmZXRjaChkZXZpY2VBZGRyZXNzVXJpLCB7XG4gICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICAgICAnQVNNLU1TUC1ERVZJQ0UtQUREUkVTUy1BUEktS0VZJzogYXBpS2V5XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChfLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoJ1RpbWVvdXQgd2hpbGUgdHJ5aW5nIHRvIHJldHJpZXZlIElQIGFkZHJlc3MnKSk7XG4gICAgICAgICAgICAgICAgICB9LCBDT05ORUNUSU9OX1RJTUVPVVQpO1xuICAgICAgICAgICAgICAgIH0pXSkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gUmV0cmlldmVTZXJ2aWNlKF94KSB7XG4gICAgICAgIHJldHVybiBfUmV0cmlldmVTZXJ2aWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZXRyaWV2ZVNlcnZpY2U7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gRGV2aWNlQWRkcmVzc1NlcnZpY2U7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1NldHRsZW1lbnQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9TZXR0bGVtZW50LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogU2V0dGxlUmVxdWVzdCwgU2V0dGxlbWVudCwgU2NoZW1lU2V0dGxlbWVudEVudHJ5LCBTZXR0bGVtZW50RW5xdWlyeVJlcXVlc3QgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU2V0dGxlUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNldHRsZVJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNldHRsZW1lbnRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTZXR0bGVtZW50OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTY2hlbWVTZXR0bGVtZW50RW50cnlcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTY2hlbWVTZXR0bGVtZW50RW50cnk7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNldHRsZW1lbnRFbnF1aXJ5UmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNldHRsZW1lbnRFbnF1aXJ5UmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01lc3NhZ2VzICovIFwiLi9zcmMvTWVzc2FnZXMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TcGlNb2RlbHMgKi8gXCIuL3NyYy9TcGlNb2RlbHMuanNcIik7XG5cblxuXG5cbnZhciBTZXR0bGVSZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2V0dGxlUmVxdWVzdChpZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2V0dGxlUmVxdWVzdCk7XG5cbiAgICB0aGlzLklkID0gaWQ7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5PcHRpb25zID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShTZXR0bGVSZXF1ZXN0LCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcmludE1lcmNoYW50Q29weSA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJvbXB0Rm9yQ3VzdG9tZXJDb3B5T25FZnRwb3MgPSBmYWxzZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRTaWduYXR1cmVGbG93T25FZnRwb3MgPSBmYWxzZTtcbiAgICAgIHRoaXMuQ29uZmlnLkFkZFJlY2VpcHRDb25maWcoZGF0YSk7XG4gICAgICB0aGlzLk9wdGlvbnMuQWRkT3B0aW9ucyhkYXRhKTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKHRoaXMuSWQsIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLlNldHRsZVJlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZXR0bGVSZXF1ZXN0O1xufSgpO1xudmFyIFNldHRsZW1lbnQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZXR0bGVtZW50KG0pIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFNldHRsZW1lbnQpO1xuXG4gICAgdGhpcy5SZXF1ZXN0SWQgPSBtLklkO1xuICAgIHRoaXMuX20gPSBtO1xuICAgIHRoaXMuU3VjY2VzcyA9IG0uR2V0U3VjY2Vzc1N0YXRlKCkgPT0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJTdWNjZXNzU3RhdGVcIl0uU3VjY2VzcztcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoU2V0dGxlbWVudCwgW3tcbiAgICBrZXk6IFwiR2V0U2V0dGxlQnlBY3F1aXJlckNvdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFNldHRsZUJ5QWNxdWlyZXJDb3VudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuYWNjdW11bGF0ZWRfc2V0dGxlX2J5X2FjcXVpcmVyX2NvdW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRTZXR0bGVCeUFjcXVpcmVyVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0U2V0dGxlQnlBY3F1aXJlclZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5hY2N1bXVsYXRlZF9zZXR0bGVfYnlfYWNxdWlyZXJfdmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRvdGFsQ291bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VG90YWxDb3VudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuYWNjdW11bGF0ZWRfdG90YWxfY291bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRvdGFsVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VG90YWxWYWx1ZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuYWNjdW11bGF0ZWRfdG90YWxfdmFsdWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFBlcmlvZFN0YXJ0VGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRQZXJpb2RTdGFydFRpbWUoKSB7XG4gICAgICB2YXIgdGltZVN0ciA9IHRoaXMuX20uRGF0YS5zZXR0bGVtZW50X3BlcmlvZF9zdGFydF90aW1lOyAvLyBcIjA1OjAwXCJcblxuICAgICAgdmFyIGRhdGVTdHIgPSB0aGlzLl9tLkRhdGEuc2V0dGxlbWVudF9wZXJpb2Rfc3RhcnRfZGF0ZTsgLy8gXCIwNU9jdDE3XCJcblxuICAgICAgcmV0dXJuIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXS5QYXJzZUJhbmtEYXRlVGltZVN0cihkYXRlU3RyLCB0aW1lU3RyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UGVyaW9kRW5kVGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRQZXJpb2RFbmRUaW1lKCkge1xuICAgICAgdmFyIHRpbWVTdHIgPSB0aGlzLl9tLkRhdGEuc2V0dGxlbWVudF9wZXJpb2RfZW5kX3RpbWU7IC8vIFwiMDU6MDBcIlxuXG4gICAgICB2YXIgZGF0ZVN0ciA9IHRoaXMuX20uRGF0YS5zZXR0bGVtZW50X3BlcmlvZF9lbmRfZGF0ZTsgLy8gXCIwNU9jdDE3XCJcblxuICAgICAgcmV0dXJuIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXS5QYXJzZUJhbmtEYXRlVGltZVN0cihkYXRlU3RyLCB0aW1lU3RyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0VHJpZ2dlcmVkVGltZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRUcmlnZ2VyZWRUaW1lKCkge1xuICAgICAgdmFyIHRpbWVTdHIgPSB0aGlzLl9tLkRhdGEuc2V0dGxlbWVudF90cmlnZ2VyZWRfdGltZTsgLy8gXCIwNTowMDo0NVwiXG5cbiAgICAgIHZhciBkYXRlU3RyID0gdGhpcy5fbS5EYXRhLnNldHRsZW1lbnRfdHJpZ2dlcmVkX2RhdGU7IC8vIFwiMDVPY3QxN1wiXG5cbiAgICAgIHJldHVybiBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0uUGFyc2VCYW5rRGF0ZVRpbWVTdHIoZGF0ZVN0ciwgdGltZVN0cik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFJlc3BvbnNlVGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZXNwb25zZVRleHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmhvc3RfcmVzcG9uc2VfdGV4dDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVjZWlwdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZWNlaXB0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5tZXJjaGFudF9yZWNlaXB0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRUcmFuc2FjdGlvblJhbmdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFRyYW5zYWN0aW9uUmFuZ2UoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnRyYW5zYWN0aW9uX3JhbmdlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRUZXJtaW5hbElkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFRlcm1pbmFsSWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnRlcm1pbmFsX2lkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJXYXNNZXJjaGFudFJlY2VpcHRQcmludGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFdhc01lcmNoYW50UmVjZWlwdFByaW50ZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLm1lcmNoYW50X3JlY2VpcHRfcHJpbnRlZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0U2NoZW1lU2V0dGxlbWVudEVudHJpZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0U2NoZW1lU2V0dGxlbWVudEVudHJpZXMoKSB7XG4gICAgICB2YXIgc2NoZW1lcyA9IHRoaXMuX20uRGF0YS5zY2hlbWVzO1xuICAgICAgaWYgKCFzY2hlbWVzKSByZXR1cm4gW107XG4gICAgICByZXR1cm4gc2NoZW1lcy5tYXAoZnVuY3Rpb24gKHNjaGVtZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNjaGVtZVNldHRsZW1lbnRFbnRyeShzY2hlbWUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNldHRsZW1lbnQ7XG59KCk7XG52YXIgU2NoZW1lU2V0dGxlbWVudEVudHJ5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLy8gU2NoZW1lU2V0dGxlbWVudEVudHJ5KHN0cmluZyBzY2hlbWVOYW1lLCBib29sIHNldHRsZUJ5QWNxdWlyZXIsIGludCB0b3RhbENvdW50LCBpbnQgdG90YWxWYWx1ZSlcbiAgLy8gU2NoZW1lU2V0dGxlbWVudEVudHJ5KE9iamVjdCBzY2hlbWVPYmopXG4gIGZ1bmN0aW9uIFNjaGVtZVNldHRsZW1lbnRFbnRyeSgpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFNjaGVtZVNldHRsZW1lbnRFbnRyeSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICB0aGlzLlNjaGVtZU5hbWUgPSBhcmdzWzBdLnNjaGVtZV9uYW1lO1xuICAgICAgdGhpcy5TZXR0bGVCeUFjcXVpcmVyID0gYXJnc1swXS5zZXR0bGVfYnlfYWNxdWlyZXIudG9Mb3dlckNhc2UoKSA9PSBcInllc1wiO1xuICAgICAgdGhpcy5Ub3RhbFZhbHVlID0gcGFyc2VJbnQoYXJnc1swXS50b3RhbF92YWx1ZSwgMTApO1xuICAgICAgdGhpcy5Ub3RhbENvdW50ID0gcGFyc2VJbnQoYXJnc1swXS50b3RhbF9jb3VudCwgMTApO1xuICAgIH0gZWxzZSBpZiAoYXJncy5sZW5ndGggPT09IDQpIHtcbiAgICAgIHRoaXMuU2NoZW1lTmFtZSA9IGFyZ3NbMF07XG4gICAgICB0aGlzLlNldHRsZUJ5QWNxdWlyZXIgPSBhcmdzWzFdO1xuICAgICAgdGhpcy5Ub3RhbENvdW50ID0gYXJnc1syXTtcbiAgICAgIHRoaXMuVG90YWxWYWx1ZSA9IGFyZ3NbM107XG4gICAgfVxuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShTY2hlbWVTZXR0bGVtZW50RW50cnksIFt7XG4gICAga2V5OiBcIlRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiU2NoZW1lTmFtZTogXCIuY29uY2F0KHRoaXMuU2NoZW1lTmFtZSwgXCIsIFNldHRsZUJ5QWNxdWlyZXI6IFwiKS5jb25jYXQodGhpcy5TZXR0bGVCeUFjcXVpcmVyLCBcIiwgVG90YWxDb3VudDogXCIpLmNvbmNhdCh0aGlzLlRvdGFsQ291bnQsIFwiLCBUb3RhbFZhbHVlOiBcIikuY29uY2F0KHRoaXMuVG90YWxWYWx1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNjaGVtZVNldHRsZW1lbnRFbnRyeTtcbn0oKTtcbnZhciBTZXR0bGVtZW50RW5xdWlyeVJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZXR0bGVtZW50RW5xdWlyeVJlcXVlc3QoaWQpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFNldHRsZW1lbnRFbnF1aXJ5UmVxdWVzdCk7XG5cbiAgICB0aGlzLklkID0gaWQ7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5PcHRpb25zID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShTZXR0bGVtZW50RW5xdWlyeVJlcXVlc3QsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IGZhbHNlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFNpZ25hdHVyZUZsb3dPbkVmdHBvcyA9IGZhbHNlO1xuICAgICAgdGhpcy5Db25maWcuQWRkUmVjZWlwdENvbmZpZyhkYXRhKTtcbiAgICAgIHRoaXMuT3B0aW9ucy5BZGRPcHRpb25zKGRhdGEpO1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0odGhpcy5JZCwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uU2V0dGxlbWVudEVucXVpcnlSZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2V0dGxlbWVudEVucXVpcnlSZXF1ZXN0O1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9TcGkuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1NwaS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogU3BpLCBTUElfVkVSU0lPTiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTcGlcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTcGk7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNQSV9WRVJTSU9OXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU1BJX1ZFUlNJT047IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX3JlZ2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvciAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX3JlZ2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfcmVnZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19hc3luY1RvR2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19hc3luY1RvR2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19hc3luY1RvR2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NZXNzYWdlcyAqLyBcIi4vc3JjL01lc3NhZ2VzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU3BpTW9kZWxzICovIFwiLi9zcmMvU3BpTW9kZWxzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUmVxdWVzdElkSGVscGVyICovIFwiLi9zcmMvUmVxdWVzdElkSGVscGVyLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QYWlyaW5nSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1BhaXJpbmdIZWxwZXIgKi8gXCIuL3NyYy9QYWlyaW5nSGVscGVyLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9Db25uZWN0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0Nvbm5lY3Rpb24gKi8gXCIuL3NyYy9Db25uZWN0aW9uLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TcGlQYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwaVBheUF0VGFibGUgKi8gXCIuL3NyYy9TcGlQYXlBdFRhYmxlLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QYXlBdFRhYmxlICovIFwiLi9zcmMvUGF5QXRUYWJsZS5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU3BpUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU3BpUHJlYXV0aCAqLyBcIi4vc3JjL1NwaVByZWF1dGguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0Nhc2hvdXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL0Nhc2hvdXQgKi8gXCIuL3NyYy9DYXNob3V0LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZXR0bGVtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXR0bGVtZW50ICovIFwiLi9zcmMvU2V0dGxlbWVudC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUGFpcmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUGFpcmluZyAqLyBcIi4vc3JjL1BhaXJpbmcuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1Bvc0luZm9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1Bvc0luZm8gKi8gXCIuL3NyYy9Qb3NJbmZvLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QdXJjaGFzZUhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUHVyY2hhc2VIZWxwZXIgKi8gXCIuL3NyYy9QdXJjaGFzZUhlbHBlci5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfS2V5Um9sbGluZ0hlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vS2V5Um9sbGluZ0hlbHBlciAqLyBcIi4vc3JjL0tleVJvbGxpbmdIZWxwZXIuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BpbmdIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE4X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1BpbmdIZWxwZXIgKi8gXCIuL3NyYy9QaW5nSGVscGVyLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUHVyY2hhc2UgKi8gXCIuL3NyYy9QdXJjaGFzZS5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU2VydmljZV9EZXZpY2VTZXJ2aWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TZXJ2aWNlL0RldmljZVNlcnZpY2UgKi8gXCIuL3NyYy9TZXJ2aWNlL0RldmljZVNlcnZpY2UuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1ByaW50aW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QcmludGluZyAqLyBcIi4vc3JjL1ByaW50aW5nLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9UZXJtaW5hbFN0YXR1c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vVGVybWluYWxTdGF0dXMgKi8gXCIuL3NyYy9UZXJtaW5hbFN0YXR1cy5qc1wiKTtcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgU1BJX1ZFUlNJT04gPSAnMi42LjAnO1xuXG52YXIgU3BpID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQoKShTcGksIFt7XG4gICAga2V5OiBcIkN1cnJlbnRTdGF0dXNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50U3RhdHVzO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLl9jdXJyZW50U3RhdHVzID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2N1cnJlbnRTdGF0dXMgPSB2YWx1ZTtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdTdGF0dXNDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHZhbHVlXG4gICAgICB9KSk7XG4gICAgfVxuICB9XSk7XG5cbiAgZnVuY3Rpb24gU3BpKHBvc0lkLCBzZXJpYWxOdW1iZXIsIGVmdHBvc0FkZHJlc3MsIHNlY3JldHMpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCgpKHRoaXMsIFNwaSk7XG5cbiAgICB0aGlzLl9wb3NJZCA9IHBvc0lkO1xuICAgIHRoaXMuX3NlcmlhbE51bWJlciA9IHNlcmlhbE51bWJlcjtcbiAgICB0aGlzLl9zZWNyZXRzID0gc2VjcmV0cztcbiAgICB0aGlzLl9mb3JjZVNlY3VyZVdlYlNvY2tldHMgPSBmYWxzZTtcbiAgICB0aGlzLl9lZnRwb3NBZGRyZXNzID0gXCJ3czovL1wiICsgZWZ0cG9zQWRkcmVzcztcbiAgICB0aGlzLl9sb2cgPSBjb25zb2xlO1xuICAgIHRoaXMuQ29uZmlnID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUNvbmZpZ1wiXSgpO1xuICAgIHRoaXMuX2Nvbm4gPSBuZXcgX0Nvbm5lY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX1tcIkNvbm5lY3Rpb25cIl0oKTtcbiAgICB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXMgPSBudWxsO1xuICAgIHRoaXMuX2RldmljZUFwaUtleSA9IG51bGw7XG4gICAgdGhpcy5fYWNxdWlyZXJDb2RlID0gbnVsbDtcbiAgICB0aGlzLl9pblRlc3RNb2RlID0gZmFsc2U7XG4gICAgdGhpcy5fYXV0b0FkZHJlc3NSZXNvbHV0aW9uRW5hYmxlZCA9IGZhbHNlOyAvLyBPdXIgc3RhbXAgZm9yIHNpZ25pbmcgb3V0Z29pbmcgbWVzc2FnZXNcblxuICAgIHRoaXMuX3NwaU1lc3NhZ2VTdGFtcCA9IG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIk1lc3NhZ2VTdGFtcFwiXSh0aGlzLl9wb3NJZCwgdGhpcy5fc2VjcmV0cywgMCk7XG4gICAgdGhpcy5fcG9zVmVuZG9ySWQgPSBudWxsO1xuICAgIHRoaXMuX3Bvc1ZlcnNpb24gPSBudWxsO1xuICAgIHRoaXMuX2hhc1NldEluZm8gPSBudWxsOyAvLyBXZSB3aWxsIG1haW50YWluIHNvbWUgc3RhdGVcblxuICAgIHRoaXMuX21vc3RSZWNlbnRQaW5nU2VudCA9IG51bGw7XG4gICAgdGhpcy5fbW9zdFJlY2VudFBvbmdSZWNlaXZlZCA9IG51bGw7XG4gICAgdGhpcy5fbWlzc2VkUG9uZ3NDb3VudCA9IDA7XG4gICAgdGhpcy5fcmV0cmllc1NpbmNlTGFzdERldmljZUFkZHJlc3NSZXNvbHV0aW9uID0gMDtcbiAgICB0aGlzLl9tb3N0UmVjZW50TG9naW5SZXNwb25zZSA9IG51bGw7XG4gICAgdGhpcy5fcG9uZ1RpbWVvdXQgPSA1MDAwO1xuICAgIHRoaXMuX3BpbmdGcmVxdWVuY3kgPSAxODAwMDtcbiAgICB0aGlzLl9yZWFkeVRvVHJhbnNhY3QgPSBudWxsO1xuICAgIHRoaXMuX3BlcmlvZGljUGluZ1RocmVhZCA9IG51bGw7XG4gICAgdGhpcy5fdHhNb25pdG9yQ2hlY2tGcmVxdWVuY3kgPSAxMDAwO1xuICAgIHRoaXMuX2NoZWNrT25UeEZyZXF1ZW5jeSA9IDIwMDAwO1xuICAgIHRoaXMuX21heFdhaXRGb3JDYW5jZWxUeCA9IDEwMDAwO1xuICAgIHRoaXMuX3NsZWVwQmVmb3JlUmVjb25uZWN0TXMgPSAzMDAwO1xuICAgIHRoaXMuX21pc3NlZFBvbmdzVG9EaXNjb25uZWN0ID0gMjtcbiAgICB0aGlzLl9yZXRyaWVzQmVmb3JlUmVzb2x2aW5nRGV2aWNlQWRkcmVzcyA9IDM7XG4gICAgdGhpcy5fcmV0cmllc1NpbmNlTGFzdFBhaXJpbmcgPSAwO1xuICAgIHRoaXMuX3JldHJpZXNCZWZvcmVQYWlyaW5nID0gMztcbiAgICB0aGlzLl9yZWdleEl0ZW1zRm9yRWZ0cG9zQWRkcmVzcyA9IC9eWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfSQvO1xuICAgIHRoaXMuX3JlZ2V4SXRlbXNGb3JGcWRuRWZ0cG9zQWRkcmVzcyA9IC9eW2EtekEtWjAtOVxcLi1dKyQvO1xuICAgIHRoaXMuX3JlZ2V4SXRlbXNGb3JQb3NJZCA9IC9eW2EtekEtWjAtOV0qJC87XG4gICAgdGhpcy5DdXJyZW50RmxvdyA9IG51bGw7XG4gICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZSA9IG51bGw7XG4gICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUgPSBudWxsO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQoKShTcGksIFt7XG4gICAga2V5OiBcIkVuYWJsZVBheUF0VGFibGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gRW5hYmxlUGF5QXRUYWJsZSgpIHtcbiAgICAgIHRoaXMuX3NwaVBhdCA9IG5ldyBfU3BpUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOV9fW1wiU3BpUGF5QXRUYWJsZVwiXSh0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzLl9zcGlQYXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkRpc2FibGVQYXlBdFRhYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIERpc2FibGVQYXlBdFRhYmxlKCkge1xuICAgICAgdGhpcy5fc3BpUGF0ID0gbmV3IF9TcGlQYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19bXCJTcGlQYXlBdFRhYmxlXCJdKHRoaXMpO1xuICAgICAgdGhpcy5fc3BpUGF0LkNvbmZpZy5QYXlBdFRhYmxlRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXMuX3NwaVBhdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiRW5hYmxlUHJlYXV0aFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBFbmFibGVQcmVhdXRoKCkge1xuICAgICAgdGhpcy5fc3BpUHJlYXV0aCA9IG5ldyBfU3BpUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfX1tcIlNwaVByZWF1dGhcIl0odGhpcyk7XG4gICAgICByZXR1cm4gdGhpcy5fc3BpUHJlYXV0aDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiU3RhcnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU3RhcnQoKSB7XG4gICAgICBpZiAoIXRoaXMuX3Bvc1ZlbmRvcklkIHx8ICF0aGlzLl9wb3NWZXJzaW9uKSB7XG4gICAgICAgIC8vIFBPUyBpbmZvcm1hdGlvbiBpcyBub3cgcmVxdWlyZWQgdG8gYmUgc2V0XG4gICAgICAgIHRoaXMuX2xvZy53YXJuKFwiTWlzc2luZyBQT1MgdmVuZG9yIElEIGFuZCB2ZXJzaW9uLiBwb3NWZW5kb3JJZCBhbmQgcG9zVmVyc2lvbiBhcmUgcmVxdWlyZWQgYmVmb3JlIHN0YXJ0aW5nXCIpO1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgUE9TIHZlbmRvciBJRCBhbmQgdmVyc2lvbi4gcG9zVmVuZG9ySWQgYW5kIHBvc1ZlcnNpb24gYXJlIHJlcXVpcmVkIGJlZm9yZSBzdGFydGluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pc1Bvc0lkVmFsaWQodGhpcy5fcG9zSWQpKSB7XG4gICAgICAgIC8vIGNvbnRpbnVlLCBhcyB0aGV5IGNhbiBzZXQgdGhlIHBvc0lkIGxhdGVyIG9uXG4gICAgICAgIHRoaXMuX3Bvc0lkID0gXCJcIjtcblxuICAgICAgICB0aGlzLl9sb2cud2FybihcIkludmFsaWQgcGFyYW1ldGVyLCBwbGVhc2UgY29ycmVjdCB0aGVtIGJlZm9yZSBwYWlyaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzRWZ0cG9zQWRkcmVzc1ZhbGlkKHRoaXMuX2VmdHBvc0FkZHJlc3MpKSB7XG4gICAgICAgIC8vIGNvbnRpbnVlLCBhcyB0aGV5IGNhbiBzZXQgdGhlIGVmdHBvc0FkZHJlc3MgbGF0ZXIgb25cbiAgICAgICAgdGhpcy5fZWZ0cG9zQWRkcmVzcyA9IFwiXCI7XG5cbiAgICAgICAgdGhpcy5fbG9nLndhcm4oXCJJbnZhbGlkIHBhcmFtZXRlciwgcGxlYXNlIGNvcnJlY3QgdGhlbSBiZWZvcmUgcGFpcmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVzZXRDb25uKCk7XG5cbiAgICAgIHRoaXMuX3N0YXJ0VHJhbnNhY3Rpb25Nb25pdG9yaW5nVGhyZWFkKCk7XG5cbiAgICAgIHRoaXMuQ3VycmVudEZsb3cgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGU7XG5cbiAgICAgIGlmICh0aGlzLl9zZWNyZXRzICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJTdGFydGluZyBpbiBQYWlyZWQgU3RhdGVcIik7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFN0YXR1cyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5QYWlyZWRDb25uZWN0aW5nO1xuXG4gICAgICAgIHRoaXMuX2Nvbm4uQ29ubmVjdCgpOyAvLyBUaGlzIGlzIG5vbi1ibG9ja2luZ1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlN0YXJ0aW5nIGluIFVucGFpcmVkIFN0YXRlXCIpO1xuXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTdGF0dXMgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQ7XG4gICAgICB9XG4gICAgfSAvLy8gPHN1bW1hcnk+XG4gICAgLy8vIFNldCB0aGUgYWNxdWlyZXIgY29kZSBvZiB5b3VyIGJhbmssIHBsZWFzZSBjb250YWN0IEFzc2VtYmx5J3MgSW50ZWdyYXRpb24gRW5naW5lZXJzIGZvciBhY3F1aXJlciBjb2RlLlxuICAgIC8vLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJTZXRBY3F1aXJlckNvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2V0QWNxdWlyZXJDb2RlKGFjcXVpcmVyQ29kZSkge1xuICAgICAgdGhpcy5fYWNxdWlyZXJDb2RlID0gYWNxdWlyZXJDb2RlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLy8gPHN1bW1hcnk+XG4gICAgLy8vIFNldCB0aGUgYXBpIGtleSB1c2VkIGZvciBhdXRvIGFkZHJlc3MgZGlzY292ZXJ5IGZlYXR1cmVcbiAgICAvLy8gPC9zdW1tYXJ5PlxuICAgIC8vLyA8cmV0dXJucz48L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJTZXREZXZpY2VBcGlLZXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2V0RGV2aWNlQXBpS2V5KGRldmljZUFwaUtleSkge1xuICAgICAgdGhpcy5fZGV2aWNlQXBpS2V5ID0gZGV2aWNlQXBpS2V5O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLy8gPHN1bW1hcnk+XG4gICAgLy8vIEFsbG93cyB5b3UgdG8gc2V0IHRoZSBzZXJpYWwgbnVtYmVyIG9mIHRoZSBFZnRwb3NcbiAgICAvLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiU2V0U2VyaWFsTnVtYmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNldFNlcmlhbE51bWJlcihzZXJpYWxOdW1iZXIpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSByZXR1cm4gZmFsc2U7XG4gICAgICB2YXIgd2FzID0gdGhpcy5fc2VyaWFsTnVtYmVyO1xuICAgICAgdGhpcy5fc2VyaWFsTnVtYmVyID0gc2VyaWFsTnVtYmVyO1xuXG4gICAgICBpZiAodGhpcy5IYXNTZXJpYWxOdW1iZXJDaGFuZ2VkKHdhcykpIHtcbiAgICAgICAgdGhpcy5fYXV0b1Jlc29sdmVFZnRwb3NBZGRyZXNzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzID09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXMgPSBuZXcgX1NlcnZpY2VfRGV2aWNlU2VydmljZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfX1tcIkRldmljZUFkZHJlc3NTdGF0dXNcIl0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuQ3VycmVudERldmljZVN0YXR1cy5EZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlID0gX1NlcnZpY2VfRGV2aWNlU2VydmljZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfX1tcIkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGVcIl0uU0VSSUFMX05VTUJFUl9OT1RfQ0hBTkdFRDtcbiAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ0RldmljZUFkZHJlc3NDaGFuZ2VkJywge1xuICAgICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzXG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLy8gPHN1bW1hcnk+XG4gICAgLy8vIEFsbG93cyB5b3UgdG8gc2V0IHRoZSBhdXRvIGFkZHJlc3MgZGlzY292ZXJ5IGZlYXR1cmUuIFxuICAgIC8vLyA8L3N1bW1hcnk+XG4gICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIlNldEF1dG9BZGRyZXNzUmVzb2x1dGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTZXRBdXRvQWRkcmVzc1Jlc29sdXRpb24oYXV0b0FkZHJlc3NSZXNvbHV0aW9uRW5hYmxlKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5QYWlyZWRDb25uZWN0ZWQpIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciB3YXMgPSB0aGlzLl9hdXRvQWRkcmVzc1Jlc29sdXRpb25FbmFibGVkO1xuICAgICAgdGhpcy5fYXV0b0FkZHJlc3NSZXNvbHV0aW9uRW5hYmxlZCA9IGF1dG9BZGRyZXNzUmVzb2x1dGlvbkVuYWJsZTtcblxuICAgICAgaWYgKGF1dG9BZGRyZXNzUmVzb2x1dGlvbkVuYWJsZSAmJiAhd2FzKSB7XG4gICAgICAgIC8vIHdlJ3JlIHR1cm5pbmcgaXQgb25cbiAgICAgICAgdGhpcy5fYXV0b1Jlc29sdmVFZnRwb3NBZGRyZXNzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8vIDxzdW1tYXJ5PlxuICAgIC8vLyBDYWxsIHRoaXMgbWV0aG9kIHRvIHNldCB0aGUgY2xpZW50IGxpYnJhcnkgdGVzdCBtb2RlLlxuICAgIC8vLyBTZXQgaXQgdG8gdHJ1ZSBvbmx5IHdoaWxlIHlvdSBhcmUgZGV2ZWxvcGluZyB0aGUgaW50ZWdyYXRpb24uIFxuICAgIC8vLyBJdCBkZWZhdWx0cyB0byBmYWxzZS4gRm9yIGEgcmVhbCBtZXJjaGFudCwgYWx3YXlzIGxlYXZlIGl0IHNldCB0byBmYWxzZS4gXG4gICAgLy8vIDwvc3VtbWFyeT5cbiAgICAvLy8gPHBhcmFtIG5hbWU9XCJ0ZXN0TW9kZVwiPjwvcGFyYW0+XG4gICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIlNldFRlc3RNb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNldFRlc3RNb2RlKHRlc3RNb2RlKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzICYmIHRoaXMuQ3VycmVudFN0YXR1cyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmICh0ZXN0TW9kZSA9PSB0aGlzLl9pblRlc3RNb2RlKSByZXR1cm4gdHJ1ZTsgLy8gd2UncmUgY2hhbmdpbmcgbW9kZVxuXG4gICAgICB0aGlzLl9pblRlc3RNb2RlID0gdGVzdE1vZGU7XG5cbiAgICAgIHRoaXMuX2F1dG9SZXNvbHZlRWZ0cG9zQWRkcmVzcygpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vLyA8c3VtbWFyeT5cbiAgICAvLy8gU2V0IHRoZSBjbGllbnQgbGlicmFyeSB0byB1c2Ugc2VjdXJlIHdlYiBzb2NrZXRzIFRMUyAod3NzIHByb3RvY29sKVxuICAgIC8vLyA8L3N1bW1hcnk+XG4gICAgLy8vIDxwYXJhbSBuYW1lPVwiaXNTZWN1cmVcIj48L3BhcmFtPlxuICAgIC8vLyA8cmV0dXJucz48L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJTZXRTZWN1cmVXZWJTb2NrZXRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNldFNlY3VyZVdlYlNvY2tldHModXNlU2VjdXJlV2ViU29ja2V0cykge1xuICAgICAgdGhpcy5fZm9yY2VTZWN1cmVXZWJTb2NrZXRzID0gdXNlU2VjdXJlV2ViU29ja2V0cztcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEFsbG93cyB5b3UgdG8gc2V0IHRoZSBQb3NJZCB3aGljaCBpZGVudGlmaWVzIHRoaXMgaW5zdGFuY2Ugb2YgeW91ciBQT1MuXG4gICAgLy8gQ2FuIG9ubHkgYmUgY2FsbGVkIGluIHRoZ2UgVW5wYWlyZWQgc3RhdGUuIFxuICAgIC8vIDwvc3VtbWFyeT5cblxuICB9LCB7XG4gICAga2V5OiBcIlNldFBvc0lkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNldFBvc0lkKHBvc0lkKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgdGhpcy5fcG9zSWQgPSBcIlwiOyAvLyByZXNldCBwb3NJZCB0byBnaXZlIG1vcmUgZXhwbGljaXQgZmVlZGJhY2tcblxuICAgICAgaWYgKCF0aGlzLl9pc1Bvc0lkVmFsaWQocG9zSWQpKSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiUG9zIElkIHNldCB0byBudWxsXCIpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcG9zSWQgPSBwb3NJZDtcbiAgICAgIHRoaXMuX3NwaU1lc3NhZ2VTdGFtcC5Qb3NJZCA9IHBvc0lkO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBBbGxvd3MgeW91IHRvIHNldCB0aGUgUGluUGFkIGFkZHJlc3MuIFNvbWV0aW1lcyB0aGUgUGluUGFkIG1pZ2h0IGNoYW5nZSBJUCBhZGRyZXNzIFxuICAgIC8vICh3ZSByZWNvbW1lbmQgcmVzZXJ2aW5nIHN0YXRpYyBJUHMgaWYgcG9zc2libGUpLlxuICAgIC8vIEVpdGhlciB3YXkgeW91IG5lZWQgdG8gYWxsb3cgeW91ciBVc2VyIHRvIGVudGVyIHRoZSBJUCBhZGRyZXNzIG9mIHRoZSBQaW5QYWQuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiU2V0RWZ0cG9zQWRkcmVzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTZXRFZnRwb3NBZGRyZXNzKGFkZHJlc3MpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlBhaXJlZENvbm5lY3RlZCB8fCB0aGlzLl9hdXRvQWRkcmVzc1Jlc29sdXRpb25FbmFibGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWZ0cG9zQWRkcmVzcyA9IFwiXCI7IC8vIHJlc2V0IGVmdHBvc0FkZHJlc3MgdG8gZ2l2ZSBtb3JlIGV4cGxpY2l0IGZlZWRiYWNrXG5cbiAgICAgIGlmICghdGhpcy5faXNFZnRwb3NBZGRyZXNzVmFsaWQoYWRkcmVzcykpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJFZnRwb3MgQWRkcmVzcyBzZXQgdG8gbnVsbFwiKTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VmdHBvc0FkZHJlc3MgPSBcIndzOi8vXCIgKyBhZGRyZXNzO1xuICAgICAgdGhpcy5fY29ubi5BZGRyZXNzID0gdGhpcy5fZWZ0cG9zQWRkcmVzcztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJTZXRQb3NJbmZvXCIsXG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHZhbHVlcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBQT1Mgc29mdHdhcmUgdG8gdGhlIEVGVFBPUyB0ZXJtaW5hbC5cbiAgICAgKiBNdXN0IGJlIHNldCBiZWZvcmUgc3RhcnRpbmchXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcG9zVmVuZG9ySWQgVmVuZG9yIGlkZW50aWZpZXIgb2YgdGhlIFBPUyBpdHNlbGYuXG4gICAgICogQHBhcmFtIHBvc1ZlcnNpb24gIFZlcnNpb24gc3RyaW5nIG9mIHRoZSBQT1MgaXRzZWxmLlxuICAgICAqL1xuICAgIHZhbHVlOiBmdW5jdGlvbiBTZXRQb3NJbmZvKHBvc1ZlbmRvcklkLCBwb3NWZXJzaW9uKSB7XG4gICAgICB0aGlzLl9wb3NWZW5kb3JJZCA9IHBvc1ZlbmRvcklkO1xuICAgICAgdGhpcy5fcG9zVmVyc2lvbiA9IHBvc1ZlcnNpb247XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBDYWxsIHRoaXMgb25lIHdoZW4gYSBmbG93IGlzIGZpbmlzaGVkIGFuZCB5b3Ugd2FudCB0byBnbyBiYWNrIHRvIGlkbGUgc3RhdGUuXG4gICAgLy8gVHlwaWNhbGx5IHdoZW4geW91ciB1c2VyIGNsaWNrcyB0aGUgXCJPS1wiIGJ1YnR0b24gdG8gYWNrbm93bGRnZSB0aGF0IHBhaXJpbmcgaXNcbiAgICAvLyBmaW5pc2hlZCwgb3IgdGhhdCB0cmFuc2FjdGlvbiBpcyBmaW5pc2hlZC5cbiAgICAvLyBXaGVuIHRydWUsIHlvdSBjYW4gZGlzbWlzcyB0aGUgZmxvdyBzY3JlZW4gYW5kIHNob3cgYmFjayB0aGUgaWRsZSBzY3JlZW4uXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxyZXR1cm5zPnRydWUgbWVhbnMgd2UgaGF2ZSBtb3ZlZCBiYWNrIHRvIHRoZSBJZGxlIHN0YXRlLiBmYWxzZSBtZWFucyBjdXJyZW50IGZsb3cgd2FzIG5vdCBmaW5pc2hlZCB5ZXQuPC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiQWNrRmxvd0VuZGVkQW5kQmFja1RvSWRsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBBY2tGbG93RW5kZWRBbmRCYWNrVG9JZGxlKCkge1xuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5JZGxlKSByZXR1cm4gdHJ1ZTsgLy8gYWxyZWFkeSBpZGxlXG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uUGFpcmluZyAmJiB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkZpbmlzaGVkKSB7XG4gICAgICAgIHRoaXMuQ3VycmVudEZsb3cgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uICYmIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkKSB7XG4gICAgICAgIHRoaXMuQ3VycmVudEZsb3cgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBlbmRyZWdpb25cbiAgICAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGlzIHdpbGwgY29ubmVjdCB0byB0aGUgRWZ0cG9zIGFuZCBzdGFydCB0aGUgcGFpcmluZyBwcm9jZXNzLlxuICAgIC8vIE9ubHkgY2FsbCB0aGlzIGlmIHlvdSBhcmUgaW4gdGhlIFVucGFpcmVkIHN0YXRlLlxuICAgIC8vIFN1YnNjcmliZSB0byB0aGUgUGFpcmluZ0Zsb3dTdGF0ZUNoYW5nZWQgZXZlbnQgdG8gZ2V0IHVwZGF0ZXMgb24gdGhlIHBhaXJpbmcgcHJvY2Vzcy5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHJldHVybnM+V2hldGhlciBwYWlyaW5nIGhhcyBpbml0aWF0ZWQgb3Igbm90PC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiUGFpclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBQYWlyKCkge1xuICAgICAgdGhpcy5fbG9nLmxvZyhcIlRyeWluZyB0byBwYWlyIC4uLi5cIik7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSB7XG4gICAgICAgIHRoaXMuX2xvZy53YXJuKFwiVHJpZWQgdG8gUGFpciwgYnV0IHdlJ3JlIGFscmVhZHkgcGFpcmVkLiBTdG9wIHBhaXJpbmcuXCIpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pc1Bvc0lkVmFsaWQodGhpcy5fcG9zSWQpIHx8ICF0aGlzLl9pc0VmdHBvc0FkZHJlc3NWYWxpZCh0aGlzLl9lZnRwb3NBZGRyZXNzKSkge1xuICAgICAgICB0aGlzLl9sb2cud2FybihcIkludmFsaWQgUG9zIElkIG9yIEVmdHBvcyBhZGRyZXNzLCBzdG9wIHBhaXJpbmcuXCIpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uUGFpcmluZztcbiAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiUGFpcmluZ0Zsb3dTdGF0ZVwiXSh7XG4gICAgICAgIFN1Y2Nlc3NmdWw6IGZhbHNlLFxuICAgICAgICBGaW5pc2hlZDogZmFsc2UsXG4gICAgICAgIE1lc3NhZ2U6IFwiQ29ubmVjdGluZy4uLlwiLFxuICAgICAgICBBd2FpdGluZ0NoZWNrRnJvbUVmdHBvczogZmFsc2UsXG4gICAgICAgIEF3YWl0aW5nQ2hlY2tGcm9tUG9zOiBmYWxzZSxcbiAgICAgICAgQ29uZmlybWF0aW9uQ29kZTogXCJcIlxuICAgICAgfSk7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnUGFpcmluZ0Zsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZVxuICAgICAgfSkpO1xuXG4gICAgICB0aGlzLl9jb25uLkNvbm5lY3QoKTsgLy8gTm9uLUJsb2NraW5nXG5cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBDYWxsIHRoaXMgd2hlbiB5b3VyIHVzZXIgY2xpY2tzIHllcyB0byBjb25maXJtIHRoZSBwYWlyaW5nIGNvZGUgb24geW91ciBcbiAgICAvLyBzY3JlZW4gbWF0Y2hlcyB0aGUgb25lIG9uIHRoZSBFZnRwb3MuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiUGFpcmluZ0NvbmZpcm1Db2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFBhaXJpbmdDb25maXJtQ29kZSgpIHtcbiAgICAgIGlmICghdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5Bd2FpdGluZ0NoZWNrRnJvbVBvcykge1xuICAgICAgICAvLyBXZSB3ZXJlbid0IGV4cGVjdGluZyB0aGlzXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5Bd2FpdGluZ0NoZWNrRnJvbVBvcyA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5Bd2FpdGluZ0NoZWNrRnJvbUVmdHBvcykge1xuICAgICAgICAvLyBCdXQgd2UgYXJlIHN0aWxsIHdhaXRpbmcgZm9yIGNvbmZpcm1hdGlvbiBmcm9tIEVmdHBvcyBzaWRlLlxuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlBhaXIgQ29kZSBDb25maXJtZWQgZnJvbSBQT1Mgc2lkZSwgYnV0IGFtIHN0aWxsIHdhaXRpbmcgZm9yIGNvbmZpcm1hdGlvbiBmcm9tIEVmdHBvcy5cIik7XG5cbiAgICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5NZXNzYWdlID0gXCJDbGljayBZRVMgb24gRUZUUE9TIGlmIGNvZGUgaXM6IFwiICsgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5Db25maXJtYXRpb25Db2RlO1xuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnUGFpcmluZ0Zsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFscmVhZHkgY29uZmlybWVkIGZyb20gRWZ0cG9zIC0gU28gYWxsIGdvb2Qgbm93LiBXZSdyZSBQYWlyZWQgYWxzbyBmcm9tIHRoZSBQT1MgcGVyc3BlY3RpdmUuXG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiUGFpciBDb2RlIENvbmZpcm1lZCBmcm9tIFBPUyBzaWRlLCBhbmQgd2FzIGFscmVhZHkgY29uZmlybWVkIGZyb20gRWZ0cG9zIHNpZGUuIFBhaXJpbmcgZmluYWxpc2VkLlwiKTtcblxuICAgICAgICB0aGlzLl9vblBhaXJpbmdTdWNjZXNzKCk7XG5cbiAgICAgICAgdGhpcy5fb25SZWFkeVRvVHJhbnNhY3QoKTtcbiAgICAgIH1cbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIENhbGwgdGhpcyBpZiB5b3VyIHVzZXIgY2xpY2tzIENBTkNFTCBvciBOTyBkdXJpbmcgdGhlIHBhaXJpbmcgcHJvY2Vzcy5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJQYWlyaW5nQ2FuY2VsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFBhaXJpbmdDYW5jZWwoKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlBhaXJpbmcgfHwgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5GaW5pc2hlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tUG9zICYmICF0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tRWZ0cG9zKSB7XG4gICAgICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB0aGUgRWZ0cG9zIGFscmVhZHkgdGhpbmtzIGl0J3MgcGFpcmVkLlxuICAgICAgICAvLyBMZXQncyB0ZWxsIGl0IHRvIGRyb3Aga2V5c1xuICAgICAgICB0aGlzLl9zZW5kKG5ldyBfUGFpcmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTRfX1tcIkRyb3BLZXlzUmVxdWVzdFwiXSgpLlRvTWVzc2FnZSgpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fb25QYWlyaW5nRmFpbGVkKCk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBDYWxsIHRoaXMgd2hlbiB5b3VyIHVzZXMgY2xpY2tzIHRoZSBVbnBhaXIgYnV0dG9uLlxuICAgIC8vIFRoaXMgd2lsbCBkaXNjb25uZWN0IGZyb20gdGhlIEVmdHBvcyBhbmQgZm9yZ2V0IHRoZSBzZWNyZXRzLlxuICAgIC8vIFRoZSBDdXJyZW50U3RhdGUgaXMgdGhlbiBjaGFuZ2VkIHRvIFVucGFpcmVkLlxuICAgIC8vIENhbGwgdGhpcyBvbmx5IGlmIHlvdSBhcmUgbm90IHlldCBpbiB0aGUgVW5wYWlyZWQgc3RhdGUuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiVW5wYWlyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFVucGFpcigpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5JZGxlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gLy8gQmVzdCBlZmZvcnQgbGV0dGluZyB0aGUgZWZ0cG9zIGtub3cgdGhhdCB3ZSdyZSBkcm9wcGluZyB0aGUga2V5cywgc28gaXQgY2FuIGRyb3AgdGhlbSBhcyB3ZWxsLlxuXG5cbiAgICAgIHRoaXMuX3NlbmQobmV3IF9QYWlyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fW1wiRHJvcEtleXNSZXF1ZXN0XCJdKCkuVG9NZXNzYWdlKCkpO1xuXG4gICAgICB0aGlzLl9kb1VucGFpcigpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIGVuZHJlZ2lvblxuICAgIC8vIHJlZ2lvbiBUcmFuc2FjdGlvbiBNZXRob2RzXG4gICAgLy8gPHN1bW1hcnk+XG4gICAgLy8gSW5pdGlhdGVzIGEgcHVyY2hhc2UgdHJhbnNhY3Rpb24uIEJlIHN1YnNjcmliZWQgdG8gVHhGbG93U3RhdGVDaGFuZ2VkIGV2ZW50IHRvIGdldCB1cGRhdGVzIG9uIHRoZSBwcm9jZXNzLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInBvc1JlZklkXCI+QWxwaGFudW1lcmljIElkZW50aWZpZXIgZm9yIHlvdXIgcHVyY2hhc2UuPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cImFtb3VudENlbnRzXCI+QW1vdW50IGluIENlbnRzIHRvIGNoYXJnZTwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+SW5pdGlhdGVUeFJlc3VsdDwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlUHVyY2hhc2VUeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJbml0aWF0ZVB1cmNoYXNlVHgocG9zUmVmSWQsIGFtb3VudENlbnRzKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkge1xuICAgICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiTm90IFBhaXJlZFwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5JZGxlKSB7XG4gICAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgSWRsZVwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHB1cmNoYXNlUmVxdWVzdCA9IF9QdXJjaGFzZUhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfX1tcIlB1cmNoYXNlSGVscGVyXCJdLkNyZWF0ZVB1cmNoYXNlUmVxdWVzdChhbW91bnRDZW50cywgcG9zUmVmSWQpO1xuICAgICAgcHVyY2hhc2VSZXF1ZXN0LkNvbmZpZyA9IHRoaXMuQ29uZmlnO1xuICAgICAgdmFyIHB1cmNoYXNlTXNnID0gcHVyY2hhc2VSZXF1ZXN0LlRvTWVzc2FnZSgpO1xuICAgICAgdGhpcy5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb247XG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZSA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbkZsb3dTdGF0ZVwiXShwb3NSZWZJZCwgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25UeXBlXCJdLlB1cmNoYXNlLCBhbW91bnRDZW50cywgcHVyY2hhc2VNc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gbWFrZSBwYXltZW50IHJlcXVlc3QgZm9yIFwiLmNvbmNhdChhbW91bnRDZW50cyAvIDEwMC4wKSk7XG5cbiAgICAgIGlmICh0aGlzLl9zZW5kKHB1cmNoYXNlTXNnKSkge1xuICAgICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5TZW50KFwiQXNrZWQgRUZUUE9TIHRvIGFjY2VwdCBwYXltZW50IGZvciBcIi5jb25jYXQoYW1vdW50Q2VudHMgLyAxMDAuMCkpO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0odHJ1ZSwgXCJQdXJjaGFzZSBJbml0aWF0ZWRcIik7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBJbml0aWF0ZXMgYSBwdXJjaGFzZSB0cmFuc2FjdGlvbi4gQmUgc3Vic2NyaWJlZCB0byBUeEZsb3dTdGF0ZUNoYW5nZWQgZXZlbnQgdG8gZ2V0IHVwZGF0ZXMgb24gdGhlIHByb2Nlc3MuXG4gICAgLy8gPHBhcmE+VGlwIGFuZCBjYXNob3V0IGFyZSBub3QgYWxsb3dlZCBzaW11bHRhbmVvdXNseS48L3BhcmE+XG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwicG9zUmVmSWRcIj5BbiBVbmlxdWUgSWRlbnRpZmllciBmb3IgeW91ciBPcmRlci9QdXJjaGFzZTwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJwdXJjaGFzZUFtb3VudFwiPlRoZSBQdXJjaGFzZSBBbW91bnQgaW4gQ2VudHMuPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInRpcEFtb3VudFwiPlRoZSBUaXAgQW1vdW50IGluIENlbnRzPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cImNhc2hvdXRBbW91bnRcIj5UaGUgQ2FzaG91dCBBbW91bnQgaW4gQ2VudHM8L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwicHJvbXB0Rm9yQ2FzaG91dFwiPldoZXRoZXIgdG8gcHJvbXB0IHlvdXIgY3VzdG9tZXIgZm9yIGNhc2hvdXQgb24gdGhlIEVmdHBvczwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJvcHRpb25zXCI+VGhlIFNldHRpbmcgdG8gc2V0IEhlYWRlciBhbmQgRm9vdGVyIGZvciB0aGUgUmVjZWlwdDwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJzdXJjaGFyZ2VBbW91bnRcIj5UaGUgU3VyY2hhcmdlIEFtb3VudCBpbiBDZW50czwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+SW5pdGlhdGVUeFJlc3VsdDwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlUHVyY2hhc2VUeFYyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlUHVyY2hhc2VUeFYyKHBvc1JlZklkLCBwdXJjaGFzZUFtb3VudCwgdGlwQW1vdW50LCBjYXNob3V0QW1vdW50LCBwcm9tcHRGb3JDYXNob3V0KSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICAgICAgdmFyIHN1cmNoYXJnZUFtb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogMDtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiTm90IFBhaXJlZFwiKTtcbiAgICAgIGlmICh0aXBBbW91bnQgPiAwICYmIChjYXNob3V0QW1vdW50ID4gMCB8fCBwcm9tcHRGb3JDYXNob3V0KSkgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIkNhbm5vdCBBY2NlcHQgVGlwcyBhbmQgQ2FzaG91dCBhdCB0aGUgc2FtZSB0aW1lLlwiKTtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uSWRsZSkgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBJZGxlXCIpO1xuICAgICAgdGhpcy5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb247XG4gICAgICB2YXIgcHVyY2hhc2UgPSBfUHVyY2hhc2VIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE2X19bXCJQdXJjaGFzZUhlbHBlclwiXS5DcmVhdGVQdXJjaGFzZVJlcXVlc3RWMihwb3NSZWZJZCwgcHVyY2hhc2VBbW91bnQsIHRpcEFtb3VudCwgY2FzaG91dEFtb3VudCwgcHJvbXB0Rm9yQ2FzaG91dCwgc3VyY2hhcmdlQW1vdW50KTtcbiAgICAgIHB1cmNoYXNlLkNvbmZpZyA9IHRoaXMuQ29uZmlnO1xuICAgICAgcHVyY2hhc2UuT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICB2YXIgcHVyY2hhc2VNc2cgPSBwdXJjaGFzZS5Ub01lc3NhZ2UoKTtcbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvblR5cGVcIl0uUHVyY2hhc2UsIHB1cmNoYXNlQW1vdW50LCBwdXJjaGFzZU1zZywgXCJXYWl0aW5nIGZvciBFRlRQT1MgY29ubmVjdGlvbiB0byBtYWtlIHBheW1lbnQgcmVxdWVzdC4gXCIuY29uY2F0KHB1cmNoYXNlLkFtb3VudFN1bW1hcnkoKSkpO1xuXG4gICAgICBpZiAodGhpcy5fc2VuZChwdXJjaGFzZU1zZykpIHtcbiAgICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuU2VudChcIkFza2VkIEVGVFBPUyB0byBhY2NlcHQgcGF5bWVudCBmb3IgXCIuY29uY2F0KHB1cmNoYXNlLkFtb3VudFN1bW1hcnkoKSkpO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0odHJ1ZSwgXCJQdXJjaGFzZSBJbml0aWF0ZWRcIik7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBJbml0aWF0ZXMgYSByZWZ1bmQgdHJhbnNhY3Rpb24uIEJlIHN1YnNjcmliZWQgdG8gVHhGbG93U3RhdGVDaGFuZ2VkIGV2ZW50IHRvIGdldCB1cGRhdGVzIG9uIHRoZSBwcm9jZXNzLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInBvc1JlZklkXCI+QWxwaGFudW1lcmljIElkZW50aWZpZXIgZm9yIHlvdXIgcmVmdW5kLjwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJhbW91bnRDZW50c1wiPkFtb3VudCBpbiBDZW50cyB0byBjaGFyZ2U8L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwic3VwcHJlc3NNZXJjaGFudFBhc3N3b3JkXCI+TWVyY2hhbnQgUGFzc3dvcmQgY29udHJvbCBpbiBWQUE8L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwib3B0aW9uc1wiPlRoZSBTZXR0aW5nIHRvIHNldCBIZWFkZXIgYW5kIEZvb3RlciBmb3IgdGhlIFJlY2VpcHQ8L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPkluaXRpYXRlVHhSZXN1bHQ8L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZVJlZnVuZFR4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlUmVmdW5kVHgocG9zUmVmSWQsIGFtb3VudENlbnRzKSB7XG4gICAgICB2YXIgc3VwcHJlc3NNZXJjaGFudFBhc3N3b3JkID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgUGFpcmVkXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBJZGxlXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVmdW5kUmVxdWVzdCA9IF9QdXJjaGFzZUhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfX1tcIlB1cmNoYXNlSGVscGVyXCJdLkNyZWF0ZVJlZnVuZFJlcXVlc3QoYW1vdW50Q2VudHMsIHBvc1JlZklkLCBzdXBwcmVzc01lcmNoYW50UGFzc3dvcmQpO1xuICAgICAgcmVmdW5kUmVxdWVzdC5Db25maWcgPSB0aGlzLkNvbmZpZztcbiAgICAgIHJlZnVuZFJlcXVlc3QuT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICB2YXIgcmVmdW5kTXNnID0gcmVmdW5kUmVxdWVzdC5Ub01lc3NhZ2UoKTtcbiAgICAgIHRoaXMuQ3VycmVudEZsb3cgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uO1xuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5SZWZ1bmQsIGFtb3VudENlbnRzLCByZWZ1bmRNc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gbWFrZSByZWZ1bmQgcmVxdWVzdCBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMC4wKS50b0ZpeGVkKDIpKSk7XG5cbiAgICAgIGlmICh0aGlzLl9zZW5kKHJlZnVuZE1zZykpIHtcbiAgICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuU2VudChcIkFza2VkIEVGVFBPUyB0byByZWZ1bmQgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMC4wKS50b0ZpeGVkKDIpKSk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXSh0cnVlLCBcIlJlZnVuZCBJbml0aWF0ZWRcIik7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBMZXQgdGhlIEVGVFBPUyBrbm93IHdoZXRoZXIgbWVyY2hhbnQgYWNjZXB0ZWQgb3IgZGVjbGluZWQgdGhlIHNpZ25hdHVyZVxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cImFjY2VwdGVkXCI+d2hldGhlciBtZXJjaGFudCBhY2NlcHRlZCB0aGUgc2lnbmF0dXJlIGZyb20gY3VzdG9tZXIgb3Igbm90PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIkFjY2VwdFNpZ25hdHVyZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBBY2NlcHRTaWduYXR1cmUoYWNjZXB0ZWQpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gfHwgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuRmluaXNoZWQgfHwgIXRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkF3YWl0aW5nU2lnbmF0dXJlQ2hlY2spIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJBc2tlZCB0byBhY2NlcHQgc2lnbmF0dXJlIGJ1dCBJIHdhcyBub3Qgd2FpdGluZyBmb3Igb25lLlwiKTtcblxuICAgICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIk1pZFR4UmVzdWx0XCJdKGZhbHNlLCBcIkFza2VkIHRvIGFjY2VwdCBzaWduYXR1cmUgYnV0IEkgd2FzIG5vdCB3YWl0aW5nIGZvciBvbmUuXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5TaWduYXR1cmVSZXNwb25kZWQoYWNjZXB0ZWQgPyBcIkFjY2VwdGluZyBTaWduYXR1cmUuLi5cIiA6IFwiRGVjbGluaW5nIFNpZ25hdHVyZS4uLlwiKTtcbiAgICAgIHZhciBzaWdSZXFNc2cgPSB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5TaWduYXR1cmVSZXF1aXJlZE1lc3NhZ2U7XG5cbiAgICAgIHRoaXMuX3NlbmQoYWNjZXB0ZWQgPyBuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOV9fW1wiU2lnbmF0dXJlQWNjZXB0XCJdKHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlBvc1JlZklkKS5Ub01lc3NhZ2UoKSA6IG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJTaWduYXR1cmVEZWNsaW5lXCJdKHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlBvc1JlZklkKS5Ub01lc3NhZ2UoKSk7XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiTWlkVHhSZXN1bHRcIl0odHJ1ZSwgXCJcIik7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBTdWJtaXQgdGhlIENvZGUgb2J0YWluZWQgYnkgeW91ciB1c2VyIHdoZW4gcGhvbmluZyBmb3IgYXV0aC4gXG4gICAgLy8gSXQgd2lsbCByZXR1cm4gaW1tZWRpYXRlbHkgdG8gdGVsbCB5b3Ugd2hldGhlciB0aGUgY29kZSBoYXMgYSB2YWxpZCBmb3JtYXQgb3Igbm90LiBcbiAgICAvLyBJZiB2YWxpZD09dHJ1ZSBpcyByZXR1cm5lZCwgbm8gbmVlZCB0byBkbyBhbnl0aGluZyBlbHNlLiBFeHBlY3QgdXBkYXRlcyB2aWEgc3RhbmRhcmQgY2FsbGJhY2suXG4gICAgLy8gSWYgdmFsaWQ9PWZhbHNlIGlzIHJldHVybmVkLCB5b3UgY2FuIHNob3cgeW91ciB1c2VyIHRoZSBhY2NvbXBhbnlpbmcgbWVzc2FnZSwgYW5kIGludml0ZSB0aGVtIHRvIGVudGVyIGFub3RoZXIgY29kZS4gXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwiYXV0aENvZGVcIj5UaGUgY29kZSBvYnRhaW5lZCBieSB5b3VyIHVzZXIgZnJvbSB0aGUgbWVyY2hhbnQgY2FsbCBjZW50cmUuIEl0IHNob3VsZCBiZSBhIDYtY2hhcmFjdGVyIGFscGhhLW51bWVyaWMgdmFsdWUuPC9wYXJhbT5cbiAgICAvLyA8cmV0dXJucz5XaGV0aGVyIGNvZGUgaGFzIGEgdmFsaWQgZm9ybWF0IG9yIG5vdC48L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJTdWJtaXRBdXRoQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTdWJtaXRBdXRoQ29kZShhdXRoQ29kZSkge1xuICAgICAgaWYgKGF1dGhDb2RlLmxlbmd0aCAhPSA2KSB7XG4gICAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3VibWl0QXV0aENvZGVSZXN1bHRcIl0oZmFsc2UsIFwiTm90IGEgNi1kaWdpdCBjb2RlLlwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiB8fCB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCB8fCAhdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuQXdhaXRpbmdQaG9uZUZvckF1dGgpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJBc2tlZCB0byBzZW5kIGF1dGggY29kZSBidXQgSSB3YXMgbm90IHdhaXRpbmcgZm9yIG9uZS5cIik7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTdWJtaXRBdXRoQ29kZVJlc3VsdFwiXShmYWxzZSwgXCJXYXMgbm90IHdhaXRpbmcgZm9yIG9uZS5cIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkF1dGhDb2RlU2VudChcIlN1Ym1pdHRpbmcgQXV0aCBDb2RlIFwiLmNvbmNhdChhdXRoQ29kZSkpO1xuXG4gICAgICB0aGlzLl9zZW5kKG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJBdXRoQ29kZUFkdmljZVwiXSh0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5Qb3NSZWZJZCwgYXV0aENvZGUpLlRvTWVzc2FnZSgpKTtcblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTdWJtaXRBdXRoQ29kZVJlc3VsdFwiXSh0cnVlLCBcIlZhbGlkIENvZGUuXCIpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gQXR0ZW1wdHMgdG8gY2FuY2VsIGEgVHJhbnNhY3Rpb24uIFxuICAgIC8vIEJlIHN1YnNjcmliZWQgdG8gVHhGbG93U3RhdGVDaGFuZ2VkIGV2ZW50IHRvIHNlZSBob3cgaXQgZ29lcy5cbiAgICAvLyBXYWl0IGZvciB0aGUgdHJhbnNhY3Rpb24gdG8gYmUgZmluaXNoZWQgYW5kIHRoZW4gc2VlIHdoZXRoZXIgY2FuY2VsbGF0aW9uIHdhcyBzdWNjZXNzZnVsIG9yIG5vdC5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHJldHVybnM+TWlkVHhSZXN1bHQgLSBmYWxzZSBvbmx5IGlmIHlvdSBjYWxsZWQgaXQgaW4gdGhlIHdyb25nIHN0YXRlPC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiQ2FuY2VsVHJhbnNhY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQ2FuY2VsVHJhbnNhY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkKSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiQXNrZWQgdG8gY2FuY2VsIHRyYW5zYWN0aW9uIGJ1dCBJIHdhcyBub3QgaW4gdGhlIG1pZGRsZSBvZiBvbmUuXCIpO1xuXG4gICAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiTWlkVHhSZXN1bHRcIl0oZmFsc2UsIFwiQXNrZWQgdG8gY2FuY2VsIHRyYW5zYWN0aW9uIGJ1dCBJIHdhcyBub3QgaW4gdGhlIG1pZGRsZSBvZiBvbmUuXCIpO1xuICAgICAgfSAvLyBUSC0xQywgVEgtM0MgLSBNZXJjaGFudCBwcmVzc2VkIGNhbmNlbFxuXG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5SZXF1ZXN0U2VudCkge1xuICAgICAgICB2YXIgY2FuY2VsUmVxID0gbmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfX1tcIkNhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdFwiXSgpO1xuICAgICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5DYW5jZWxsaW5nKFwiQXR0ZW1wdGluZyB0byBDYW5jZWwgVHJhbnNhY3Rpb24uLi5cIik7XG5cbiAgICAgICAgdGhpcy5fc2VuZChjYW5jZWxSZXEuVG9NZXNzYWdlKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gV2UgSGFkIE5vdCBFdmVuIFNlbnQgUmVxdWVzdCBZZXQuIENvbnNpZGVyIGFzIGtub3duIGZhaWxlZC5cbiAgICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuRmFpbGVkKG51bGwsIFwiVHJhbnNhY3Rpb24gQ2FuY2VsbGVkLiBSZXF1ZXN0IEhhZCBub3QgZXZlbiBiZWVuIHNlbnQgeWV0LlwiKTtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJNaWRUeFJlc3VsdFwiXSh0cnVlLCBcIlwiKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEluaXRpYXRlcyBhIGNhc2hvdXQgb25seSB0cmFuc2FjdGlvbi4gQmUgc3Vic2NyaWJlZCB0byBUeEZsb3dTdGF0ZUNoYW5nZWQgZXZlbnQgdG8gZ2V0IHVwZGF0ZXMgb24gdGhlIHByb2Nlc3MuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwicG9zUmVmSWRcIj5BbHBoYW51bWVyaWMgSWRlbnRpZmllciBmb3IgeW91ciB0cmFuc2FjdGlvbi48L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwiYW1vdW50Q2VudHNcIj5BbW91bnQgaW4gQ2VudHMgdG8gY2FzaCBvdXQ8L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwic3VyY2hhcmdlQW1vdW50XCI+VGhlIFN1cmNoYXJnZSBBbW91bnQgaW4gQ2VudHM8L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPkluaXRpYXRlVHhSZXN1bHQ8L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZUNhc2hvdXRPbmx5VHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVDYXNob3V0T25seVR4KHBvc1JlZklkLCBhbW91bnRDZW50cykge1xuICAgICAgdmFyIHN1cmNoYXJnZUFtb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBQYWlyZWRcIik7XG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGUpIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgSWRsZVwiKTtcbiAgICAgIHZhciBjYXNob3V0TXNnID0gT2JqZWN0LmFzc2lnbihuZXcgX0Nhc2hvdXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX19bXCJDYXNob3V0T25seVJlcXVlc3RcIl0oYW1vdW50Q2VudHMsIHBvc1JlZklkKSwge1xuICAgICAgICBTdXJjaGFyZ2VBbW91bnQ6IHN1cmNoYXJnZUFtb3VudCxcbiAgICAgICAgT3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgQ29uZmlnOiB0aGlzLkNvbmZpZ1xuICAgICAgfSkuVG9NZXNzYWdlKCk7XG4gICAgICB0aGlzLkN1cnJlbnRGbG93ID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbjtcbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvblR5cGVcIl0uQ2FzaG91dE9ubHksIGFtb3VudENlbnRzLCBjYXNob3V0TXNnLCBcIldhaXRpbmcgZm9yIEVGVFBPUyBjb25uZWN0aW9uIHRvIHNlbmQgY2FzaG91dCByZXF1ZXN0IGZvciBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwKS50b0ZpeGVkKDIpKSk7XG5cbiAgICAgIGlmICh0aGlzLl9zZW5kKGNhc2hvdXRNc2cpKSB7XG4gICAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNlbnQoXCJBc2tlZCBFRlRQT1MgdG8gZG8gY2FzaG91dCBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMCkudG9GaXhlZCgyKSkpO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0odHJ1ZSwgXCJDYXNob3V0IEluaXRpYXRlZFwiKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEluaXRpYXRlcyBhIE1haWwgT3JkZXIgLyBUZWxlcGhvbmUgT3JkZXIgUHVyY2hhc2UgVHJhbnNhY3Rpb25cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJwb3NSZWZJZFwiPkFscGhhbnVtZXJpYyBJZGVudGlmaWVyIGZvciB5b3VyIHRyYW5zYWN0aW9uLjwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJhbW91bnRDZW50c1wiPkFtb3VudCBpbiBDZW50czwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJzdXJjaGFyZ2VBbW91bnRcIj5UaGUgU3VyY2hhcmdlIEFtb3VudCBpbiBDZW50czwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJzdXBwcmVzc01lcmNoYW50UGFzc3dvcmRcIj4+TWVyY2hhbnQgUGFzc3dvcmQgY29udHJvbCBpbiBWQUE8L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwib3B0aW9uc1wiPlRoZSBTZXR0aW5nIHRvIHNldCBIZWFkZXIgYW5kIEZvb3RlciBmb3IgdGhlIFJlY2VpcHQ8L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPkluaXRpYXRlVHhSZXN1bHQ8L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZU1vdG9QdXJjaGFzZVR4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlTW90b1B1cmNoYXNlVHgocG9zUmVmSWQsIGFtb3VudENlbnRzKSB7XG4gICAgICB2YXIgc3VyY2hhcmdlQW1vdW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgICAgdmFyIHN1cHByZXNzTWVyY2hhbnRQYXNzd29yZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICAgICAgaWYgKHRoaXMuQ3VycmVudFN0YXR1cyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgUGFpcmVkXCIpO1xuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5JZGxlKSByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiTm90IElkbGVcIik7XG4gICAgICB2YXIgbW90b1B1cmNoYXNlTXNnID0gT2JqZWN0LmFzc2lnbihuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOV9fW1wiTW90b1B1cmNoYXNlUmVxdWVzdFwiXShhbW91bnRDZW50cywgcG9zUmVmSWQpLCB7XG4gICAgICAgIFN1cmNoYXJnZUFtb3VudDogc3VyY2hhcmdlQW1vdW50LFxuICAgICAgICBTdXBwcmVzc01lcmNoYW50UGFzc3dvcmQ6IHN1cHByZXNzTWVyY2hhbnRQYXNzd29yZCxcbiAgICAgICAgQ29uZmlnOiB0aGlzLkNvbmZpZyxcbiAgICAgICAgT3B0aW9uczogb3B0aW9uc1xuICAgICAgfSkuVG9NZXNzYWdlKCk7XG4gICAgICB0aGlzLkN1cnJlbnRGbG93ID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbjtcbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvblR5cGVcIl0uTU9UTywgYW1vdW50Q2VudHMsIG1vdG9QdXJjaGFzZU1zZywgXCJXYWl0aW5nIGZvciBFRlRQT1MgY29ubmVjdGlvbiB0byBzZW5kIE1PVE8gcmVxdWVzdCBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMCkudG9GaXhlZCgyKSkpO1xuXG4gICAgICBpZiAodGhpcy5fc2VuZChtb3RvUHVyY2hhc2VNc2cpKSB7XG4gICAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNlbnQoXCJBc2tlZCBFRlRQT1MgZG8gTU9UTyBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMCkudG9GaXhlZCgyKSkpO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0odHJ1ZSwgXCJNT1RPIEluaXRpYXRlZFwiKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEluaXRpYXRlcyBhIHNldHRsZW1lbnQgdHJhbnNhY3Rpb24uXG4gICAgLy8gQmUgc3Vic2NyaWJlZCB0byBUeEZsb3dTdGF0ZUNoYW5nZWQgZXZlbnQgdG8gZ2V0IHVwZGF0ZXMgb24gdGhlIHByb2Nlc3MuXG4gICAgLy8gPHBhcmFtIG5hbWU9XCJvcHRpb25zXCI+VGhlIFNldHRpbmcgdG8gc2V0IEhlYWRlciBhbmQgRm9vdGVyIGZvciB0aGUgUmVjZWlwdDwvcGFyYW0+XG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiSW5pdGlhdGVTZXR0bGVUeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJbml0aWF0ZVNldHRsZVR4KHBvc1JlZklkKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuXG4gICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkge1xuICAgICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiTm90IFBhaXJlZFwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5JZGxlKSB7XG4gICAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgSWRsZVwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNldHRsZU1zZyA9IE9iamVjdC5hc3NpZ24obmV3IF9TZXR0bGVtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fW1wiU2V0dGxlUmVxdWVzdFwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJzZXR0bGVcIikpLCB7XG4gICAgICAgIENvbmZpZzogdGhpcy5Db25maWcsXG4gICAgICAgIE9wdGlvbnM6IG9wdGlvbnNcbiAgICAgIH0pLlRvTWVzc2FnZSgpO1xuICAgICAgdGhpcy5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb247XG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZSA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbkZsb3dTdGF0ZVwiXShwb3NSZWZJZCwgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25UeXBlXCJdLlNldHRsZSwgMCwgc2V0dGxlTXNnLCBcIldhaXRpbmcgZm9yIEVGVFBPUyBjb25uZWN0aW9uIHRvIG1ha2UgYSBzZXR0bGUgcmVxdWVzdFwiKTtcblxuICAgICAgaWYgKHRoaXMuX3NlbmQoc2V0dGxlTXNnKSkge1xuICAgICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5TZW50KFwiQXNrZWQgRUZUUE9TIHRvIHNldHRsZS5cIik7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXSh0cnVlLCBcIlNldHRsZSBJbml0aWF0ZWRcIik7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm9wdGlvbnNcIj5UaGUgU2V0dGluZyB0byBzZXQgSGVhZGVyIGFuZCBGb290ZXIgZm9yIHRoZSBSZWNlaXB0PC9wYXJhbT5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZVNldHRsZW1lbnRFbnF1aXJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlU2V0dGxlbWVudEVucXVpcnkocG9zUmVmSWQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBQYWlyZWRcIik7XG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGUpIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgSWRsZVwiKTtcbiAgICAgIHZhciBzdGxFbnFNc2cgPSBPYmplY3QuYXNzaWduKG5ldyBfU2V0dGxlbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTNfX1tcIlNldHRsZW1lbnRFbnF1aXJ5UmVxdWVzdFwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJzdGxlbnFcIikpLCB7XG4gICAgICAgIENvbmZpZzogdGhpcy5Db25maWcsXG4gICAgICAgIE9wdGlvbnM6IG9wdGlvbnNcbiAgICAgIH0pLlRvTWVzc2FnZSgpO1xuICAgICAgdGhpcy5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb247XG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZSA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbkZsb3dTdGF0ZVwiXShwb3NSZWZJZCwgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25UeXBlXCJdLlNldHRsZW1lbnRFbnF1aXJ5LCAwLCBzdGxFbnFNc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gbWFrZSBhIHNldHRsZW1lbnQgZW5xdWlyeVwiKTtcblxuICAgICAgaWYgKHRoaXMuX3NlbmQoc3RsRW5xTXNnKSkge1xuICAgICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5TZW50KFwiQXNrZWQgRUZUUE9TIHRvIG1ha2UgYSBzZXR0bGVtZW50IGVucXVpcnkuXCIpO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0odHJ1ZSwgXCJTZXR0bGUgSW5pdGlhdGVkXCIpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gSW5pdGlhdGVzIGEgR2V0IExhc3QgVHJhbnNhY3Rpb24uIFVzZSB0aGlzIHdoZW4geW91IHdhbnQgdG8gcmV0cmlldmUgdGhlIG1vc3QgcmVjZW50IHRyYW5zYWN0aW9uXG4gICAgLy8gdGhhdCB3YXMgcHJvY2Vzc2VkIGJ5IHRoZSBFZnRwb3MuXG4gICAgLy8gQmUgc3Vic2NyaWJlZCB0byBUeEZsb3dTdGF0ZUNoYW5nZWQgZXZlbnQgdG8gZ2V0IHVwZGF0ZXMgb24gdGhlIHByb2Nlc3MuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiSW5pdGlhdGVHZXRMYXN0VHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVHZXRMYXN0VHgoKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkge1xuICAgICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiTm90IFBhaXJlZFwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5JZGxlKSB7XG4gICAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgSWRsZVwiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGdsdFJlcXVlc3RNc2cgPSBuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOV9fW1wiR2V0TGFzdFRyYW5zYWN0aW9uUmVxdWVzdFwiXSgpLlRvTWVzc2FnZSgpO1xuICAgICAgdGhpcy5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb247XG4gICAgICB2YXIgcG9zUmVmSWQgPSBnbHRSZXF1ZXN0TXNnLklkOyAvLyBHZXRMYXN0VHggaXMgbm90IHRyeWluZyB0byBnZXQgYW55dGhpbmcgc3BlY2lmaWMgYmFjay4gU28gd2UganVzdCB1c2UgdGhlIG1lc3NhZ2UgaWQuXG5cbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvblR5cGVcIl0uR2V0TGFzdFRyYW5zYWN0aW9uLCAwLCBnbHRSZXF1ZXN0TXNnLCBcIldhaXRpbmcgZm9yIEVGVFBPUyBjb25uZWN0aW9uIHRvIG1ha2UgYSBHZXQtTGFzdC1UcmFuc2FjdGlvbiByZXF1ZXN0LlwiKTtcbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkNhbGxpbmdHbHQoZ2x0UmVxdWVzdE1zZy5JZCk7XG5cbiAgICAgIGlmICh0aGlzLl9zZW5kKGdsdFJlcXVlc3RNc2cpKSB7XG4gICAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNlbnQoXCJBc2tlZCBFRlRQT1MgZm9yIGxhc3QgdHJhbnNhY3Rpb24uXCIpO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0odHJ1ZSwgXCJHTFQgSW5pdGlhdGVkXCIpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhpcyBpcyB1c2VmdWwgdG8gcmVjb3ZlciBmcm9tIHlvdXIgUE9TIGNyYXNoaW5nIGluIHRoZSBtaWRkbGUgb2YgYSB0cmFuc2FjdGlvbi5cbiAgICAvLyBXaGVuIHlvdSByZXN0YXJ0IHlvdXIgUE9TLCBpZiB5b3UgaGFkIHNhdmVkIGVub3VnaCBzdGF0ZSwgeW91IGNhbiBjYWxsIHRoaXMgbWV0aG9kIHRvIHJlY292ZXIgdGhlIGNsaWVudCBsaWJyYXJ5IHN0YXRlLlxuICAgIC8vIFlvdSBuZWVkIHRvIGhhdmUgdGhlIHBvc1JlZklkIHRoYXQgeW91IHBhc3NlZCBpbiB3aXRoIHRoZSBvcmlnaW5hbCB0cmFuc2FjdGlvbiwgYW5kIHRoZSB0cmFuc2FjdGlvbiB0eXBlLlxuICAgIC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGltbWVkaWF0ZWx5IHdoZXRoZXIgcmVjb3ZlcnkgaGFzIHN0YXJ0ZWQgb3Igbm90LlxuICAgIC8vIElmIHJlY292ZXJ5IGhhcyBzdGFydGVkLCB5b3UgbmVlZCB0byBicmluZyB1cCB0aGUgdHJhbnNhY3Rpb24gbW9kYWwgdG8geW91ciB1c2VyIGEgYmUgbGlzdGVuaW5nIHRvIFR4Rmxvd1N0YXRlQ2hhbmdlZC5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJwb3NSZWZJZFwiPlRoZSBpcyB0aGF0IHlvdSBoYWQgYXNzaWduZWQgdG8gdGhlIHRyYW5zYWN0aW9uIHRoYXQgeW91IGFyZSB0cnlpbmcgdG8gcmVjb3Zlci48L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwidHhUeXBlXCI+VGhlIHRyYW5zYWN0aW9uIHR5cGUuPC9wYXJhbT5cbiAgICAvLyA8cmV0dXJucz48L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZVJlY292ZXJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlUmVjb3ZlcnkocG9zUmVmSWQsIHR4VHlwZSkge1xuICAgICAgaWYgKHRoaXMuQ3VycmVudFN0YXR1cyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgUGFpcmVkXCIpO1xuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5JZGxlKSByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiTm90IElkbGVcIik7XG4gICAgICB0aGlzLkN1cnJlbnRGbG93ID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbjtcbiAgICAgIHZhciBnbHRSZXF1ZXN0TXNnID0gbmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfX1tcIkdldExhc3RUcmFuc2FjdGlvblJlcXVlc3RcIl0oKS5Ub01lc3NhZ2UoKTtcbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCB0eFR5cGUsIDAsIGdsdFJlcXVlc3RNc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gYXR0ZW1wdCByZWNvdmVyeS5cIik7XG5cbiAgICAgIGlmICh0aGlzLl9zZW5kKGdsdFJlcXVlc3RNc2cpKSB7XG4gICAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNlbnQoXCJBc2tlZCBFRlRQT1MgdG8gcmVjb3ZlciBzdGF0ZS5cIik7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXSh0cnVlLCBcIlJlY292ZXJ5IEluaXRpYXRlZFwiKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEdsdE1hdGNoIGF0dGVtcHRzIHRvIGNvbmNsdWRlIHdoZXRoZXIgYSBnbHRSZXNwb25zZSBtYXRjaGVzIGFuIGV4cGVjdGVkIHRyYW5zYWN0aW9uIGFuZCByZXR1cm5zXG4gICAgLy8gdGhlIG91dGNvbWUuIFxuICAgIC8vIElmIFN1Y2Nlc3MvRmFpbGVkIGlzIHJldHVybmVkLCBpdCBtZWFucyB0aGF0IHRoZSBndGxSZXNwb25zZSBkaWQgbWF0Y2gsIGFuZCB0aGF0IHRyYW5zYWN0aW9uIHdhcyBzdWNjZXNmdWwvZmFpbGVkLlxuICAgIC8vIElmIFVua25vd24gaXMgcmV0dXJuZWQsIGl0IG1lYW5zIHRoYXQgdGhlIGdsdFJlc3BvbnNlIGRvZXMgbm90IG1hdGNoIHRoZSBleHBlY3RlZCB0cmFuc2FjdGlvbi4gXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwiZ2x0UmVzcG9uc2VcIj5UaGUgR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2UgbWVzc2FnZSB0byBjaGVjazwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJwb3NSZWZJZFwiPlRoZSBSZWZlcmVuY2UgSWQgdGhhdCB5b3UgcGFzc2VkIGluIHdpdGggdGhlIG9yaWdpbmFsIHJlcXVlc3QuPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cImV4cGVjdGVkQW1vdW50XCI+VGhlIHRvdGFsIGFtb3VudCBpbiB0aGUgb3JpZ2luYWwgcmVxdWVzdDwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJyZXF1ZXN0VGltZVwiPlRoZSByZXF1ZXN0IHRpbWU8L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPjwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIkdsdE1hdGNoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdsdE1hdGNoKGdsdFJlc3BvbnNlLCBwb3NSZWZJZCwgZXhwZWN0ZWRBbW91bnQsIHJlcXVlc3RUaW1lKSB7XG4gICAgICAvLyBPYnNvbGV0ZSBtZXRob2QgY2FsbCBjaGVja1xuICAgICAgLy8gT2xkIGludGVyZmFjZTogR2x0TWF0Y2goR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2UgZ2x0UmVzcG9uc2UsIFRyYW5zYWN0aW9uVHlwZSBleHBlY3RlZFR5cGUsIGludCBleHBlY3RlZEFtb3VudCwgRGF0ZVRpbWUgcmVxdWVzdFRpbWUsIHN0cmluZyBwb3NSZWZJZClcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyAwIDogYXJndW1lbnRzLmxlbmd0aCAtIDQpIHtcbiAgICAgICAgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyAwIDogYXJndW1lbnRzLmxlbmd0aCAtIDQpID09PSAxKSB7XG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJPYnNvbGV0ZSBtZXRob2QgY2FsbCBkZXRlY3RlZDogVXNlIEdsdE1hdGNoKGdsdFJlc3BvbnNlLCBwb3NSZWZJZClcIik7XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5HbHRNYXRjaChnbHRSZXNwb25zZSwgYXJndW1lbnRzLmxlbmd0aCA8PSA0ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzRdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPYnNvbGV0ZSBtZXRob2QgY2FsbCB3aXRoIHVua25vd24gYXJnczogVXNlIEdsdE1hdGNoKEdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlIGdsdFJlc3BvbnNlLCBzdHJpbmcgcG9zUmVmSWQpXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2xvZy5pbmZvKFwiR0xUIENIRUNLOiBQb3NSZWZJZDogXCIuY29uY2F0KHBvc1JlZklkLCBcIi0+XCIpLmNvbmNhdChnbHRSZXNwb25zZS5HZXRQb3NSZWZJZCgpKSk7XG5cbiAgICAgIHZhciBnbHRCYW5rRGF0ZVRpbWVTdHIgPSBnbHRSZXNwb25zZS5HZXRCYW5rRGF0ZVRpbWVTdHJpbmcoKTsgLy8gZGRNTXl5eXlISG1tc3NcblxuICAgICAgdmFyIGdsdEJhbmtEYXRlVGltZSA9IG5ldyBEYXRlKFwiXCIuY29uY2F0KGdsdEJhbmtEYXRlVGltZVN0ci5zdWJzdHIoNCwgNCksIFwiLVwiKS5jb25jYXQoZ2x0QmFua0RhdGVUaW1lU3RyLnN1YnN0cigyLCAyKSwgXCItXCIpLmNvbmNhdChnbHRCYW5rRGF0ZVRpbWVTdHIuc3Vic3RyKDAsIDIpLCBcIiBcIikuY29uY2F0KGdsdEJhbmtEYXRlVGltZVN0ci5zdWJzdHIoOCwgMiksIFwiOlwiKS5jb25jYXQoZ2x0QmFua0RhdGVUaW1lU3RyLnN1YnN0cigxMCwgMiksIFwiOlwiKS5jb25jYXQoZ2x0QmFua0RhdGVUaW1lU3RyLnN1YnN0cigxMiwgMikpKTtcbiAgICAgIHZhciBjb21wYXJlID0gcGFyc2VJbnQocmVxdWVzdFRpbWUpIC0gZ2x0QmFua0RhdGVUaW1lLmdldFRpbWUoKTtcblxuICAgICAgaWYgKCFwb3NSZWZJZCA9PSBnbHRSZXNwb25zZS5HZXRQb3NSZWZJZCgpKSB7XG4gICAgICAgIHJldHVybiBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlN1Y2Nlc3NTdGF0ZVwiXS5Vbmtub3duO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2x0UmVzcG9uc2UuR2V0VHhUeXBlKCkudG9VcHBlckNhc2UoKSA9PSBcIlBVUkNIQVNFXCIgJiYgZ2x0UmVzcG9uc2UuR2V0QmFua05vbkNhc2hBbW91bnQoKSAhPSBleHBlY3RlZEFtb3VudCAmJiBjb21wYXJlID4gMCkge1xuICAgICAgICByZXR1cm4gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJNZXNzYWdlXCJdLlN1Y2Nlc3NTdGF0ZS5Vbmtub3duO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2x0UmVzcG9uc2UuR2V0U3VjY2Vzc1N0YXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlByaW50UmVjZWlwdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBQcmludFJlY2VpcHQoa2V5LCBwYXlsb2FkKSB7XG4gICAgICB0aGlzLl9zZW5kKG5ldyBfUHJpbnRpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIxX19bXCJQcmludGluZ1JlcXVlc3RcIl0oa2V5LCBwYXlsb2FkKS50b01lc3NhZ2UoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRlcm1pbmFsU3RhdHVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFRlcm1pbmFsU3RhdHVzKCkge1xuICAgICAgdGhpcy5fc2VuZChuZXcgX1Rlcm1pbmFsU3RhdHVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMl9fW1wiVGVybWluYWxTdGF0dXNSZXF1ZXN0XCJdKCkuVG9NZXNzYWdlKCkpO1xuICAgIH0gLy8gZW5kcmVnaW9uXG4gICAgLy8gcmVnaW9uIEludGVybmFscyBmb3IgUGFpcmluZyBGbG93XG4gICAgLy8gPHN1bW1hcnk+XG4gICAgLy8gSGFuZGxpbmcgdGhlIDJuZCBpbnRlcmFjdGlvbiBvZiB0aGUgcGFpcmluZyBwcm9jZXNzLCBpLmUuIGFuIGluY29taW5nIEtleVJlcXVlc3QuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPmluY29taW5nIG1lc3NhZ2U8L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUtleVJlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUtleVJlcXVlc3QobSkge1xuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5NZXNzYWdlID0gXCJOZWdvdGlhdGluZyBQYWlyaW5nLi4uXCI7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnUGFpcmluZ0Zsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZVxuICAgICAgfSkpOyAvLyBVc2UgdGhlIGhlbHBlci4gSXQgdGFrZXMgdGhlIGluY29taW5nIHJlcXVlc3QsIGFuZCBnZW5lcmF0ZXMgdGhlIHNlY3JldHMgYW5kIHRoZSByZXNwb25zZS5cblxuICAgICAgdmFyIHBoID0gbmV3IF9QYWlyaW5nSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19bXCJQYWlyaW5nSGVscGVyXCJdKCk7XG4gICAgICB2YXIgcmVzdWx0ID0gcGguR2VuZXJhdGVTZWNyZXRzQW5kS2V5UmVzcG9uc2UobmV3IF9QYWlyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fW1wiS2V5UmVxdWVzdFwiXShtKSk7XG4gICAgICB0aGlzLl9zZWNyZXRzID0gcmVzdWx0LlNlY3JldHM7IC8vIHdlIG5vdyBoYXZlIHNlY3JldHMsIGFsdGhvdWdoIHBhaXJpbmcgaXMgbm90IGZ1bGx5IGZpbmlzaGVkIHlldC5cblxuICAgICAgdGhpcy5fc3BpTWVzc2FnZVN0YW1wLlNlY3JldHMgPSB0aGlzLl9zZWNyZXRzOyAvLyB1cGRhdGluZyBvdXIgc3RhbXAgd2l0aCB0aGUgc2VjcmV0cyBzbyBjYW4gZW5jcnlwdCBtZXNzYWdlcyBsYXRlci5cblxuICAgICAgdGhpcy5fc2VuZChyZXN1bHQuS2V5UmVzcG9uc2UuVG9NZXNzYWdlKCkpOyAvLyBzZW5kIHRoZSBrZXlfcmVzcG9uc2UsIGkuZS4gaW50ZXJhY3Rpb24gMyBvZiBwYWlyaW5nLlxuXG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBIYW5kbGluZyB0aGUgNHRoIGludGVyYWN0aW9uIG9mIHRoZSBwYWlyaW5nIHByb2Nlc3MgaS5lLiBhbiBpbmNvbWluZyBLZXlDaGVjay5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtXCI+PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVLZXlDaGVja1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlS2V5Q2hlY2sobSkge1xuICAgICAgdmFyIGtleUNoZWNrID0gbmV3IF9QYWlyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fW1wiS2V5Q2hlY2tcIl0obSk7XG4gICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkNvbmZpcm1hdGlvbkNvZGUgPSBrZXlDaGVjay5Db25maXJtYXRpb25Db2RlO1xuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5Bd2FpdGluZ0NoZWNrRnJvbUVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tUG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuTWVzc2FnZSA9IFwiQ29uZmlybSB0aGF0IHRoZSBmb2xsb3dpbmcgQ29kZSBpcyBzaG93aW5nIG9uIHRoZSBUZXJtaW5hbFwiO1xuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1BhaXJpbmdGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEhhbmRsaW5nIHRoZSA1dGggYW5kIGZpbmFsIGludGVyYWN0aW9uIG9mIHRoZSBwYWlyaW5nIHByb2Nlc3MsIGkuZS4gYW4gaW5jb21pbmcgUGFpclJlc3BvbnNlXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlUGFpclJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVQYWlyUmVzcG9uc2UobSkge1xuICAgICAgdmFyIHBhaXJSZXNwID0gbmV3IF9QYWlyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fW1wiUGFpclJlc3BvbnNlXCJdKG0pO1xuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5Bd2FpdGluZ0NoZWNrRnJvbUVmdHBvcyA9IGZhbHNlO1xuXG4gICAgICBpZiAocGFpclJlc3AuU3VjY2Vzcykge1xuICAgICAgICBpZiAodGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5Bd2FpdGluZ0NoZWNrRnJvbVBvcykge1xuICAgICAgICAgIC8vIFN0aWxsIFdhaXRpbmcgZm9yIFVzZXIgdG8gc2F5IHllcyBvbiBQT1NcbiAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkdvdCBQYWlyIENvbmZpcm0gZnJvbSBFZnRwb3MsIGJ1dCBzdGlsbCB3YWl0aW5nIGZvciB1c2UgdG8gY29uZmlybSBmcm9tIFBPUy5cIik7XG5cbiAgICAgICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLk1lc3NhZ2UgPSBcIkNvbmZpcm0gdGhhdCB0aGUgZm9sbG93aW5nIENvZGUgaXMgd2hhdCB0aGUgRUZUUE9TIHNob3dlZFwiO1xuICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdQYWlyaW5nRmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkdvdCBQYWlyIENvbmZpcm0gZnJvbSBFZnRwb3MsIGFuZCBhbHJlYWR5IGhhZCBjb25maXJtIGZyb20gUE9TLiBOb3cganVzdCB3YWl0aW5nIGZvciBmaXJzdCBwb25nLlwiKTtcblxuICAgICAgICAgIHRoaXMuX29uUGFpcmluZ1N1Y2Nlc3MoKTtcbiAgICAgICAgfSAvLyBJIG5lZWQgdG8gcGluZy9sb2dpbiBldmVuIGlmIHRoZSBwb3MgdXNlciBoYXMgbm90IHNhaWQgeWVzIHlldCwgXG4gICAgICAgIC8vIGJlY2F1c2Ugb3RoZXJ3aXNlIHdpdGhpbiA1IHNlY29uZHMgY29ubmVjdGlvbmcgd2lsbCBiZSBkcm9wcGVkIGJ5IGVmdHBvcy5cblxuXG4gICAgICAgIHRoaXMuX3N0YXJ0UGVyaW9kaWNQaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9vblBhaXJpbmdGYWlsZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZURyb3BLZXlzQWR2aWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVEcm9wS2V5c0FkdmljZShtKSB7XG4gICAgICB0aGlzLl9sb2cuaW5mbyhcIkVmdHBvcyB3YXMgVW5wYWlyZWQuIEkgc2hhbGwgdW5wYWlyIGZyb20gbXkgZW5kIGFzIHdlbGwuXCIpO1xuXG4gICAgICB0aGlzLl9kb1VucGFpcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfb25QYWlyaW5nU3VjY2Vzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25QYWlyaW5nU3VjY2VzcygpIHtcbiAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuU3VjY2Vzc2Z1bCA9IHRydWU7XG4gICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuTWVzc2FnZSA9IFwiUGFpcmluZyBTdWNjZXNzZnVsIVwiO1xuICAgICAgdGhpcy5DdXJyZW50U3RhdHVzID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlBhaXJlZENvbm5lY3RlZDtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdTZWNyZXRzQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLl9zZWNyZXRzXG4gICAgICB9KSk7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnUGFpcmluZ0Zsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfb25QYWlyaW5nRmFpbGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblBhaXJpbmdGYWlsZWQoKSB7XG4gICAgICB0aGlzLl9zZWNyZXRzID0gbnVsbDtcbiAgICAgIHRoaXMuX3NwaU1lc3NhZ2VTdGFtcC5TZWNyZXRzID0gbnVsbDtcblxuICAgICAgdGhpcy5fY29ubi5EaXNjb25uZWN0KCk7XG5cbiAgICAgIHRoaXMuQ3VycmVudFN0YXR1cyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZDtcbiAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuTWVzc2FnZSA9IFwiUGFpcmluZyBGYWlsZWRcIjtcbiAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuRmluaXNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5TdWNjZXNzZnVsID0gZmFsc2U7XG4gICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tUG9zID0gZmFsc2U7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnUGFpcmluZ0Zsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZG9VbnBhaXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2RvVW5wYWlyKCkge1xuICAgICAgdGhpcy5DdXJyZW50U3RhdHVzID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkO1xuXG4gICAgICB0aGlzLl9jb25uLkRpc2Nvbm5lY3QoKTtcblxuICAgICAgdGhpcy5fc2VjcmV0cyA9IG51bGw7XG4gICAgICB0aGlzLl9zcGlNZXNzYWdlU3RhbXAuU2VjcmV0cyA9IG51bGw7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnU2VjcmV0c0NoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5fc2VjcmV0c1xuICAgICAgfSkpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gU29tZXRpbWVzIHRoZSBzZXJ2ZXIgYXNrcyB1cyB0byByb2xsIG91ciBzZWNyZXRzLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUtleVJvbGxpbmdSZXF1ZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVLZXlSb2xsaW5nUmVxdWVzdChtKSB7XG4gICAgICAvLyB3ZSBjYWxjdWxhdGUgdGhlIG5ldyBvbmVzLi4uXG4gICAgICB2YXIga3JSZXMgPSBfS2V5Um9sbGluZ0hlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTdfX1tcIktleVJvbGxpbmdIZWxwZXJcIl0uUGVyZm9ybUtleVJvbGxpbmcobSwgdGhpcy5fc2VjcmV0cyk7XG4gICAgICB0aGlzLl9zZWNyZXRzID0ga3JSZXMuTmV3U2VjcmV0czsgLy8gYW5kIHVwZGF0ZSBvdXIgc2VjcmV0cyB3aXRoIHRoZW1cblxuICAgICAgdGhpcy5fc3BpTWVzc2FnZVN0YW1wLlNlY3JldHMgPSB0aGlzLl9zZWNyZXRzOyAvLyBhbmQgb3VyIHN0YW1wXG5cbiAgICAgIHRoaXMuX3NlbmQoa3JSZXMuS2V5Um9sbGluZ0NvbmZpcm1hdGlvbik7IC8vIGFuZCB3ZSB0ZWxsIHRoZSBzZXJ2ZXIgdGhhdCBhbGwgaXMgd2VsbC5cblxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnU2VjcmV0c0NoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5fc2VjcmV0c1xuICAgICAgfSkpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIFBpblBhZCBzZXJ2ZXIgd2lsbCBzZW5kIHVzIHRoaXMgbWVzc2FnZSB3aGVuIGEgY3VzdG9tZXIgc2lnbmF0dXJlIGlzIHJlcWlyZWQuXG4gICAgLy8gV2UgbmVlZCB0byBhc2sgdGhlIGN1c3RvbWVyIHRvIHNpZ24gdGhlIGluY29taW5nIHJlY2VpcHQuXG4gICAgLy8gQW5kIHRoZW4gdGVsbCB0aGUgcGlucGFkIHdoZXRoZXIgdGhlIHNpZ25hdHVyZSBpcyBvayBvciBub3QuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlU2lnbmF0dXJlUmVxdWlyZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVNpZ25hdHVyZVJlcXVpcmVkKG0pIHtcbiAgICAgIHZhciBpbmNvbWluZ1Bvc1JlZklkID0gbS5EYXRhLnBvc19yZWZfaWQ7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gfHwgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuRmluaXNoZWQgfHwgIXRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlBvc1JlZklkID09IGluY29taW5nUG9zUmVmSWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZWNlaXZlZCBTaWduYXR1cmUgUmVxdWlyZWQgYnV0IEkgd2FzIG5vdCB3YWl0aW5nIGZvciBvbmUuIEluY29taW5nIFBvcyBSZWYgSUQ6IFwiLmNvbmNhdChpbmNvbWluZ1Bvc1JlZklkKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5TaWduYXR1cmVSZXF1aXJlZChuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOV9fW1wiU2lnbmF0dXJlUmVxdWlyZWRcIl0obSksIFwiQXNrIEN1c3RvbWVyIHRvIFNpZ24gdGhlIFJlY2VpcHRcIik7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgUGluUGFkIHNlcnZlciB3aWxsIHNlbmQgdXMgdGhpcyBtZXNzYWdlIHdoZW4gYW4gYXV0aCBjb2RlIGlzIHJlcXVpcmVkLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUF1dGhDb2RlUmVxdWlyZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUF1dGhDb2RlUmVxdWlyZWQobSkge1xuICAgICAgdmFyIGluY29taW5nUG9zUmVmSWQgPSBtLkRhdGEucG9zX3JlZl9pZDtcblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiB8fCB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCB8fCAhdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuUG9zUmVmSWQgPT0gaW5jb21pbmdQb3NSZWZJZCkge1xuICAgICAgICBfbG9nLmluZm8oXCJSZWNlaXZlZCBBdXRoIENvZGUgUmVxdWlyZWQgYnV0IEkgd2FzIG5vdCB3YWl0aW5nIGZvciBvbmUuIEluY29taW5nIFBvcyBSZWYgSUQ6IFwiLmNvbmNhdChpbmNvbWluZ1Bvc1JlZklkKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgcGhvbmVGb3JBdXRoUmVxdWlyZWQgPSBuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOV9fW1wiUGhvbmVGb3JBdXRoUmVxdWlyZWRcIl0obSk7XG4gICAgICB2YXIgbXNnID0gXCJBdXRoIENvZGUgUmVxdWlyZWQuIENhbGwgXCIuY29uY2F0KHBob25lRm9yQXV0aFJlcXVpcmVkLkdldFBob25lTnVtYmVyKCksIFwiIGFuZCBxdW90ZSBtZXJjaGFudCBpZCBcIikuY29uY2F0KHBob25lRm9yQXV0aFJlcXVpcmVkLkdldE1lcmNoYW50SWQoKSk7XG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5QaG9uZUZvckF1dGhSZXF1aXJlZChwaG9uZUZvckF1dGhSZXF1aXJlZCwgbXNnKTtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBQaW5QYWQgc2VydmVyIHdpbGwgcmVwbHkgdG8gb3VyIFB1cmNoYXNlUmVxdWVzdCB3aXRoIGEgUHVyY2hhc2VSZXNwb25zZS5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtXCI+PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVQdXJjaGFzZVJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVQdXJjaGFzZVJlc3BvbnNlKG0pIHtcbiAgICAgIHZhciBpbmNvbWluZ1Bvc1JlZklkID0gbS5EYXRhLnBvc19yZWZfaWQ7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gfHwgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuRmluaXNoZWQgfHwgIXRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlBvc1JlZklkID09IGluY29taW5nUG9zUmVmSWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZWNlaXZlZCBQdXJjaGFzZSByZXNwb25zZSBidXQgSSB3YXMgbm90IHdhaXRpbmcgZm9yIG9uZS4gSW5jb21pbmcgUG9zIFJlZiBJRDogXCIuY29uY2F0KGluY29taW5nUG9zUmVmSWQsIFwiXFxcIlwiKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUSC0xQSwgVEgtMkFcblxuXG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5Db21wbGV0ZWQobS5HZXRTdWNjZXNzU3RhdGUoKSwgbSwgXCJQdXJjaGFzZSBUcmFuc2FjdGlvbiBFbmRlZC5cIik7IC8vIFRILTZBLCBUSC02RVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgUGluUGFkIHNlcnZlciB3aWxsIHJlcGx5IHRvIG91ciBDYXNob3V0T25seVJlcXVlc3Qgd2l0aCBhIENhc2hvdXRPbmx5UmVzcG9uc2UuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlQ2FzaG91dE9ubHlSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlQ2FzaG91dE9ubHlSZXNwb25zZShtKSB7XG4gICAgICB2YXIgaW5jb21pbmdQb3NSZWZJZCA9IG0uRGF0YS5wb3NfcmVmX2lkO1xuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkIHx8ICF0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5Qb3NSZWZJZCA9PSBpbmNvbWluZ1Bvc1JlZklkKSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiUmVjZWl2ZWQgQ2FzaG91dCBSZXNwb25zZSBidXQgSSB3YXMgbm90IHdhaXRpbmcgZm9yIG9uZS4gSW5jb21pbmcgUG9zIFJlZiBJRDogXCIuY29uY2F0KGluY29taW5nUG9zUmVmSWQpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFRILTFBLCBUSC0yQVxuXG5cbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkNvbXBsZXRlZChtLkdldFN1Y2Nlc3NTdGF0ZSgpLCBtLCBcIkNhc2hvdXQgVHJhbnNhY3Rpb24gRW5kZWQuXCIpOyAvLyBUSC02QSwgVEgtNkVcblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIFBpblBhZCBzZXJ2ZXIgd2lsbCByZXBseSB0byBvdXIgTW90b1B1cmNoYXNlUmVxdWVzdCB3aXRoIGEgTW90b1B1cmNoYXNlUmVzcG9uc2UuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlTW90b1B1cmNoYXNlUmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZU1vdG9QdXJjaGFzZVJlc3BvbnNlKG0pIHtcbiAgICAgIHZhciBpbmNvbWluZ1Bvc1JlZklkID0gbS5EYXRhLnBvc19yZWZfaWQ7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gfHwgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuRmluaXNoZWQgfHwgIXRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlBvc1JlZklkID09IGluY29taW5nUG9zUmVmSWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZWNlaXZlZCBNb3RvIFJlc3BvbnNlIGJ1dCBJIHdhcyBub3Qgd2FpdGluZyBmb3Igb25lLiBJbmNvbWluZyBQb3MgUmVmIElEOiBcIi5jb25jYXQoaW5jb21pbmdQb3NSZWZJZCkpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVEgtMUEsIFRILTJBXG5cblxuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuQ29tcGxldGVkKG0uR2V0U3VjY2Vzc1N0YXRlKCksIG0sIFwiTW90byBUcmFuc2FjdGlvbiBFbmRlZC5cIik7IC8vIFRILTZBLCBUSC02RVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgUGluUGFkIHNlcnZlciB3aWxsIHJlcGx5IHRvIG91ciBSZWZ1bmRSZXF1ZXN0IHdpdGggYSBSZWZ1bmRSZXNwb25zZS5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtXCI+PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVSZWZ1bmRSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlUmVmdW5kUmVzcG9uc2UobSkge1xuICAgICAgdmFyIGluY29taW5nUG9zUmVmSWQgPSBtLkRhdGEucG9zX3JlZl9pZDtcblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiB8fCB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCB8ICF0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5Qb3NSZWZJZCA9PSBpbmNvbWluZ1Bvc1JlZklkKSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiUmVjZWl2ZWQgUmVmdW5kIHJlc3BvbnNlIGJ1dCBJIHdhcyBub3Qgd2FpdGluZyBmb3IgdGhpcyBvbmUuIEluY29taW5nIFBvcyBSZWYgSUQ6IFwiLmNvbmNhdChpbmNvbWluZ1Bvc1JlZklkKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUSC0xQSwgVEgtMkFcblxuXG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5Db21wbGV0ZWQobS5HZXRTdWNjZXNzU3RhdGUoKSwgbSwgXCJSZWZ1bmQgVHJhbnNhY3Rpb24gRW5kZWQuXCIpOyAvLyBUSC02QSwgVEgtNkVcblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gVE9ETzogSGFuZGxlIHRoZSBTZXR0bGVtZW50IFJlc3BvbnNlIHJlY2VpdmVkIGZyb20gdGhlIFBpblBhZFxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiSGFuZGxlU2V0dGxlUmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSGFuZGxlU2V0dGxlUmVzcG9uc2UobSkge1xuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiB8fCB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlJlY2VpdmVkIFNldHRsZSByZXNwb25zZSBidXQgSSB3YXMgbm90IHdhaXRpbmcgZm9yIG9uZS4gXCIuY29uY2F0KG0uRGVjcnlwdGVkSnNvbikpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVEgtMUEsIFRILTJBXG5cblxuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuQ29tcGxldGVkKG0uR2V0U3VjY2Vzc1N0YXRlKCksIG0sIFwiU2V0dGxlIFRyYW5zYWN0aW9uIEVuZGVkLlwiKTsgLy8gVEgtNkEsIFRILTZFXG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEhhbmRsZSB0aGUgU2V0dGxlbWVudCBFbnF1aXJ5IFJlc3BvbnNlIHJlY2VpdmVkIGZyb20gdGhlIFBpblBhZFxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZVNldHRsZW1lbnRFbnF1aXJ5UmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVNldHRsZW1lbnRFbnF1aXJ5UmVzcG9uc2UobSkge1xuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiB8fCB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlJlY2VpdmVkIFNldHRsZW1lbnQgRW5xdWlyeSByZXNwb25zZSBidXQgSSB3YXMgbm90IHdhaXRpbmcgZm9yIG9uZS4gXCIuY29uY2F0KG0uRGVjcnlwdGVkSnNvbikpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVEgtMUEsIFRILTJBXG5cblxuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuQ29tcGxldGVkKG0uR2V0U3VjY2Vzc1N0YXRlKCksIG0sIFwiU2V0dGxlbWVudCBFbnF1aXJ5IEVuZGVkLlwiKTsgLy8gVEgtNkEsIFRILTZFXG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFNvbWV0aW1lcyB3ZSByZWNlaXZlIGV2ZW50IHR5cGUgXCJlcnJvclwiIGZyb20gdGhlIHNlcnZlciwgc3VjaCBhcyB3aGVuIGNhbGxpbmcgY2FuY2VsX3RyYW5zYWN0aW9uIGFuZCB0aGVyZSBpcyBubyB0cmFuc2FjdGlvbiBpbiBwcm9ncmVzcy5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtXCI+PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVFcnJvckV2ZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVFcnJvckV2ZW50KG0pIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gJiYgIXRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkICYmIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkF0dGVtcHRpbmdUb0NhbmNlbCAmJiBtLkdldEVycm9yKCkgPT0gXCJOT19UUkFOU0FDVElPTlwiKSB7XG4gICAgICAgIC8vIFRILTJFXG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiV2FzIHRyeWluZyB0byBjYW5jZWwgYSB0cmFuc2FjdGlvbiBidXQgdGhlcmUgaXMgbm90aGluZyB0byBjYW5jZWwuIENhbGxpbmcgR0xUIHRvIHNlZSB3aGF0J3MgdXBcIik7XG5cbiAgICAgICAgdGhpcy5fY2FsbEdldExhc3RUcmFuc2FjdGlvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZWNlaXZlZCBFcnJvciBFdmVudCBCdXQgRG9uJ3Qga25vdyB3aGF0IHRvIGRvIHdpdGggaXQuIFwiLmNvbmNhdChtLkRlY3J5cHRlZEpzb24pKTtcbiAgICAgIH1cbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFdoZW4gdGhlIFBpblBhZCByZXR1cm5zIHRvIHVzIHdoYXQgdGhlIExhc3QgVHJhbnNhY3Rpb24gd2FzLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZShtKSB7XG4gICAgICB2YXIgdHhTdGF0ZSA9IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlO1xuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IHR4U3RhdGUuRmluaXNoZWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZWNlaXZlZCBnbHQgcmVzcG9uc2UgYnV0IHdlIHdlcmUgbm90IGluIHRoZSBtaWRkbGUgb2YgYSB0eC4gaWdub3JpbmcuXCIpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0eFN0YXRlLkF3YWl0aW5nR2x0UmVzcG9uc2UpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJyZWNlaXZlZCBhIGdsdCByZXNwb25zZSBidXQgd2UgaGFkIG5vdCBhc2tlZCBmb3Igb25lIHdpdGhpbiB0aGlzIHRyYW5zYWN0aW9uLiBQZXJoYXBzIGxlZnRvdmVyIGZyb20gcHJldmlvdXMgb25lLiBpZ25vcmluZy5cIik7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodHhTdGF0ZS5MYXN0R2x0UmVxdWVzdElkICE9IG0uSWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJyZWNlaXZlZCBhIGdsdCByZXNwb25zZSBidXQgdGhlIG1lc3NhZ2UgaWQgZG9lcyBub3QgbWF0Y2ggdGhlIGdsdCByZXF1ZXN0IHRoYXQgd2Ugc2VudC4gc3RyYW5nZS4gaWdub3JpbmcuXCIpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVEgtNCBXZSB3ZXJlIGluIHRoZSBtaWRkbGUgb2YgYSB0cmFuc2FjdGlvbi5cbiAgICAgIC8vIExldCdzIGF0dGVtcHQgcmVjb3ZlcnkuIFRoaXMgaXMgc3RlcCA0IG9mIFRyYW5zYWN0aW9uIFByb2Nlc3NpbmcgSGFuZGxpbmdcblxuXG4gICAgICB0aGlzLl9sb2cuaW5mbyhcIkdvdCBMYXN0IFRyYW5zYWN0aW9uLi5cIik7XG5cbiAgICAgIHR4U3RhdGUuR290R2x0UmVzcG9uc2UoKTtcbiAgICAgIHZhciBndGxSZXNwb25zZSA9IG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZVwiXShtKTtcbiAgICAgIHR4U3RhdGUuR0xUUmVzcG9uc2VQb3NSZWZJZCA9IGd0bFJlc3BvbnNlLkdldFBvc1JlZklkKCk7XG5cbiAgICAgIGlmICghZ3RsUmVzcG9uc2UuV2FzUmV0cmlldmVkU3VjY2Vzc2Z1bGx5KCkpIHtcbiAgICAgICAgaWYgKGd0bFJlc3BvbnNlLklzU3RpbGxJblByb2dyZXNzKHR4U3RhdGUuUG9zUmVmSWQpKSB7XG4gICAgICAgICAgLy8gVEgtNEUgLSBPcGVyYXRpb24gSW4gUHJvZ3Jlc3NcbiAgICAgICAgICBpZiAoZ3RsUmVzcG9uc2UuSXNXYWl0aW5nRm9yU2lnbmF0dXJlUmVzcG9uc2UoKSAmJiAhdHhTdGF0ZS5Bd2FpdGluZ1NpZ25hdHVyZUNoZWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkVmdHBvcyBpcyB3YWl0aW5nIGZvciB1cyB0byBzZW5kIGl0IHNpZ25hdHVyZSBhY2NlcHQvZGVjbGluZSwgYnV0IHdlIHdlcmUgbm90IGF3YXJlIG9mIHRoaXMuIFwiICsgXCJUaGUgdXNlciBjYW4gb25seSByZWFsbHkgZGVjbGluZSBhdCB0aGlzIHN0YWdlIGFzIHRoZXJlIGlzIG5vIHJlY2VpcHQgdG8gcHJpbnQgZm9yIHNpZ25pbmcuXCIpO1xuXG4gICAgICAgICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5TaWduYXR1cmVSZXF1aXJlZChuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOV9fW1wiU2lnbmF0dXJlUmVxdWlyZWRcIl0odHhTdGF0ZS5Qb3NSZWZJZCwgbS5JZCwgXCJNSVNTSU5HIFJFQ0VJUFRcXG4gREVDTElORSBBTkQgVFJZIEFHQUlOLlwiKSwgXCJSZWNvdmVyZWQgaW4gU2lnbmF0dXJlIFJlcXVpcmVkIGJ1dCB3ZSBkb24ndCBoYXZlIHJlY2VpcHQuIFlvdSBtYXkgRGVjbGluZSB0aGVuIFJldHJ5LlwiKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGd0bFJlc3BvbnNlLklzV2FpdGluZ0ZvckF1dGhDb2RlKCkgJiYgIXR4U3RhdGUuQXdhaXRpbmdQaG9uZUZvckF1dGgpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiRWZ0cG9zIGlzIHdhaXRpbmcgZm9yIHVzIHRvIHNlbmQgaXQgYXV0aCBjb2RlLCBidXQgd2Ugd2VyZSBub3QgYXdhcmUgb2YgdGhpcy4gXCIgKyBcIldlIGNhbiBvbmx5IGNhbmNlbCB0aGUgdHJhbnNhY3Rpb24gYXQgdGhpcyBzdGFnZSBhcyB3ZSBkb24ndCBoYXZlIGVub3VnaCBpbmZvcm1hdGlvbiB0byByZWNvdmVyIGZyb20gdGhpcy5cIik7XG5cbiAgICAgICAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlBob25lRm9yQXV0aFJlcXVpcmVkKG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJQaG9uZUZvckF1dGhSZXF1aXJlZFwiXSh0eFN0YXRlLlBvc1JlZklkLCBtLklkLCBcIlVOS05PV05cIiwgXCJVTktOT1dOXCIpLCBcIlJlY292ZXJlZCBtaWQgUGhvbmUtRm9yLUF1dGggYnV0IGRvbid0IGhhdmUgZGV0YWlscy4gWW91IG1heSBDYW5jZWwgdGhlbiBSZXRyeS5cIik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiT3BlcmF0aW9uIHN0aWxsIGluIHByb2dyZXNzLi4uIHN0YXkgd2FpdGluZy5cIik7IC8vIE5vIG5lZWQgdG8gcHVibGlzaCB0eEZsb3dTdGF0ZUNoYW5nZWQuIENhbiByZXR1cm47XG5cblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChndGxSZXNwb25zZS5XYXNUaW1lT3V0T2ZTeW5jRXJyb3IoKSkge1xuICAgICAgICAgIC8vIExldCdzIG5vdCBnaXZlIHVwIGJhc2VkIG9uIGEgVE9PUyBlcnJvci5cbiAgICAgICAgICAvLyBMZXQncyBsb2cgaXQsIGFuZCBpZ25vcmUgaXQuIFxuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiVGltZS1PdXQtT2YtU3luYyBlcnJvciBpbiBHZXQgTGFzdCBUcmFuc2FjdGlvbiByZXNwb25zZS4gTGV0J3MgaWdub3JlIGl0IGFuZCB3ZSdsbCB0cnkgYWdhaW4uXCIpOyAvLyBObyBuZWVkIHRvIHB1Ymxpc2ggdHhGbG93U3RhdGVDaGFuZ2VkLiBDYW4gcmV0dXJuO1xuXG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVEgtNFggLSBVbmV4cGVjdGVkIFJlc3BvbnNlIHdoZW4gcmVjb3ZlcmluZ1xuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiVW5leHBlY3RlZCBSZXNwb25zZSBpbiBHZXQgTGFzdCBUcmFuc2FjdGlvbiBkdXJpbmcgLSBSZWNlaXZlZCBwb3NSZWZJZDpcIi5jb25jYXQoZ3RsUmVzcG9uc2UuR2V0UG9zUmVmSWQoKSwgXCIgRXJyb3I6XCIpLmNvbmNhdChtLkdldEVycm9yKCksIFwiLiBJZ25vcmluZy5cIikpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHhTdGF0ZS5UeXBlID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5HZXRMYXN0VHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAvLyBUSElTIFdBUyBBIFBMQUlOIEdFVCBMQVNUIFRSQU5TQUNUSU9OIFJFUVVFU1QsIE5PVCBGT1IgUkVDT1ZFUlkgUFVSUE9TRVMuXG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZXRyaWV2ZWQgTGFzdCBUcmFuc2FjdGlvbiBhcyBhc2tlZCBkaXJlY3RseSBieSB0aGUgdXNlci5cIik7XG5cbiAgICAgICAgICBndGxSZXNwb25zZS5Db3B5TWVyY2hhbnRSZWNlaXB0VG9DdXN0b21lclJlY2VpcHQoKTtcbiAgICAgICAgICB0eFN0YXRlLkNvbXBsZXRlZChtLkdldFN1Y2Nlc3NTdGF0ZSgpLCBtLCBcIkxhc3QgVHJhbnNhY3Rpb24gUmV0cmlldmVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRILTRBIC0gTGV0J3MgdHJ5IHRvIG1hdGNoIHRoZSByZWNlaXZlZCBsYXN0IHRyYW5zYWN0aW9uIGFnYWluc3QgdGhlIGN1cnJlbnQgdHJhbnNhY3Rpb25cbiAgICAgICAgICB2YXIgc3VjY2Vzc1N0YXRlID0gdGhpcy5HbHRNYXRjaChndGxSZXNwb25zZSwgdHhTdGF0ZS5Qb3NSZWZJZCwgdHhTdGF0ZS5BbW91bnRDZW50cywgdHhTdGF0ZS5SZXF1ZXN0VGltZSk7XG5cbiAgICAgICAgICBpZiAoc3VjY2Vzc1N0YXRlID09IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiU3VjY2Vzc1N0YXRlXCJdLlVua25vd24pIHtcbiAgICAgICAgICAgIC8vIFRILTROOiBEaWRuJ3QgTWF0Y2ggb3VyIHRyYW5zYWN0aW9uLiBDb25zaWRlciBVbmtub3duIFN0YXRlLlxuICAgICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJEaWQgbm90IG1hdGNoIHRyYW5zYWN0aW9uLlwiKTtcblxuICAgICAgICAgICAgdHhTdGF0ZS5Vbmtub3duQ29tcGxldGVkKFwiRmFpbGVkIHRvIHJlY292ZXIgVHJhbnNhY3Rpb24gU3RhdHVzLiBDaGVjayBFRlRQT1MuIFwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVEgtNFk6IFdlIE1hdGNoZWQsIHRyYW5zYWN0aW9uIGZpbmlzaGVkLCBsZXQncyB1cGRhdGUgb3Vyc2VsdmVzXG4gICAgICAgICAgICBndGxSZXNwb25zZS5Db3B5TWVyY2hhbnRSZWNlaXB0VG9DdXN0b21lclJlY2VpcHQoKTtcbiAgICAgICAgICAgIHR4U3RhdGUuQ29tcGxldGVkKHN1Y2Nlc3NTdGF0ZSwgbSwgXCJUcmFuc2FjdGlvbiBFbmRlZC5cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdHhTdGF0ZVxuICAgICAgfSkpO1xuICAgIH0gLy9XaGVuIHRoZSB0cmFuc2FjdGlvbiBjYW5jZWwgcmVzcG9uc2UgaXMgcmV0dXJuZWQuXG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlQ2FuY2VsVHJhbnNhY3Rpb25SZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlQ2FuY2VsVHJhbnNhY3Rpb25SZXNwb25zZShtKSB7XG4gICAgICB2YXIgaW5jb21pbmdQb3NSZWZJZCA9IG0uRGF0YS5wb3NfcmVmX2lkO1xuICAgICAgdmFyIHR4U3RhdGUgPSB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZTtcbiAgICAgIHZhciBjYW5jZWxSZXNwb25zZSA9IG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJDYW5jZWxUcmFuc2FjdGlvblJlc3BvbnNlXCJdKG0pO1xuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IHR4U3RhdGUuRmluaXNoZWQgfHwgIXR4U3RhdGUuUG9zUmVmSWQgPT0gaW5jb21pbmdQb3NSZWZJZCkge1xuICAgICAgICBpZiAoIWNhbmNlbFJlc3BvbnNlLldhc1R4blBhc3RQb2ludE9mTm9SZXR1cm4oKSkge1xuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiUmVjZWl2ZWQgQ2FuY2VsIFJlcXVpcmVkIGJ1dCBJIHdhcyBub3Qgd2FpdGluZyBmb3Igb25lLiBJbmNvbWluZyBQb3MgUmVmIElEOiBcIi5jb25jYXQoaW5jb21pbmdQb3NSZWZJZCkpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjYW5jZWxSZXNwb25zZS5TdWNjZXNzKSByZXR1cm47XG5cbiAgICAgIHRoaXMuX2xvZy53YXJuKFwiRmFpbGVkIHRvIGNhbmNlbCB0cmFuc2FjdGlvbjogcmVhc29uPVwiICsgY2FuY2VsUmVzcG9uc2UuR2V0RXJyb3JSZWFzb24oKSArIFwiLCBkZXRhaWw9XCIgKyBjYW5jZWxSZXNwb25zZS5HZXRFcnJvckRldGFpbCgpKTtcblxuICAgICAgdHhTdGF0ZS5DYW5jZWxGYWlsZWQoXCJGYWlsZWQgdG8gY2FuY2VsIHRyYW5zYWN0aW9uOiBcIiArIGNhbmNlbFJlc3BvbnNlLkdldEVycm9yRGV0YWlsKCkgKyBcIi4gQ2hlY2sgRUZUUE9TLlwiKTtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdHhTdGF0ZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlU2V0UG9zSW5mb1Jlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVTZXRQb3NJbmZvUmVzcG9uc2UobSkge1xuICAgICAgdmFyIHJlc3BvbnNlID0gbmV3IF9Qb3NJbmZvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNV9fW1wiU2V0UG9zSW5mb1Jlc3BvbnNlXCJdKG0pO1xuXG4gICAgICBpZiAocmVzcG9uc2UuaXNTdWNjZXNzKCkpIHtcbiAgICAgICAgdGhpcy5faGFzU2V0SW5mbyA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJTZXR0aW5nIFBPUyBpbmZvIHN1Y2Nlc3NmdWxcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9sb2cud2FybihcIlNldHRpbmcgUE9TIGluZm8gZmFpbGVkOiByZWFzb249XCIgKyByZXNwb25zZS5nZXRFcnJvclJlYXNvbigpICsgXCIsIGRldGFpbD1cIiArIHJlc3BvbnNlLmdldEVycm9yRGV0YWlsKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfc3RhcnRUcmFuc2FjdGlvbk1vbml0b3JpbmdUaHJlYWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0YXJ0VHJhbnNhY3Rpb25Nb25pdG9yaW5nVGhyZWFkKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG5lZWRzUHVibGlzaGluZyA9IGZhbHNlO1xuICAgICAgdmFyIHR4U3RhdGUgPSB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZTtcblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiAmJiAhdHhTdGF0ZS5GaW5pc2hlZCkge1xuICAgICAgICB2YXIgc3RhdGUgPSB0eFN0YXRlO1xuXG4gICAgICAgIGlmIChzdGF0ZS5BdHRlbXB0aW5nVG9DYW5jZWwgJiYgRGF0ZS5ub3coKSA+IHN0YXRlLkNhbmNlbEF0dGVtcHRUaW1lICsgdGhpcy5fbWF4V2FpdEZvckNhbmNlbFR4KSB7XG4gICAgICAgICAgLy8gVEgtMlQgLSB0b28gbG9uZyBzaW5jZSBjYW5jZWwgYXR0ZW1wdCAtIENvbnNpZGVyIHVua25vd25cbiAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkJlZW4gdG9vIGxvbmcgd2FpdGluZyBmb3IgdHJhbnNhY3Rpb24gdG8gY2FuY2VsLlwiKTtcblxuICAgICAgICAgIHR4U3RhdGUuVW5rbm93bkNvbXBsZXRlZChcIldhaXRlZCBsb25nIGVub3VnaCBmb3IgQ2FuY2VsIFRyYW5zYWN0aW9uIHJlc3VsdC4gQ2hlY2sgRUZUUE9TLiBcIik7XG4gICAgICAgICAgbmVlZHNQdWJsaXNoaW5nID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5SZXF1ZXN0U2VudCAmJiBEYXRlLm5vdygpID4gc3RhdGUuTGFzdFN0YXRlUmVxdWVzdFRpbWUgKyB0aGlzLl9jaGVja09uVHhGcmVxdWVuY3kpIHtcbiAgICAgICAgICAvLyBUSC0xVCwgVEgtNFQgLSBJdCdzIGJlZW4gYSB3aGlsZSBzaW5jZSB3ZSByZWNlaXZlZCBhbiB1cGRhdGUsIGxldCdzIGNhbGwgYSBHTFRcbiAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkNoZWNraW5nIG9uIG91ciB0cmFuc2FjdGlvbi4gTGFzdCB3ZSBhc2tlZCB3YXMgYXQgXCIuY29uY2F0KHN0YXRlLkxhc3RTdGF0ZVJlcXVlc3RUaW1lLCBcIi4uLlwiKSk7XG5cbiAgICAgICAgICB0aGlzLl9jYWxsR2V0TGFzdFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5lZWRzUHVibGlzaGluZykge1xuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9zdGFydFRyYW5zYWN0aW9uTW9uaXRvcmluZ1RocmVhZCgpO1xuICAgICAgfSwgdGhpcy5fdHhNb25pdG9yQ2hlY2tGcmVxdWVuY3kpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJQcmludGluZ1Jlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFByaW50aW5nUmVzcG9uc2UobSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLiBQbGVhc2Ugb3ZlcndyaXRlIHRoaXMgbWV0aG9kIGluIHlvdXIgUE9TJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlRlcm1pbmFsU3RhdHVzUmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVGVybWluYWxTdGF0dXNSZXNwb25zZShtKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuIFBsZWFzZSBvdmVyd3JpdGUgdGhpcyBtZXRob2QgaW4geW91ciBQT1MnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiQmF0dGVyeUxldmVsQ2hhbmdlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBCYXR0ZXJ5TGV2ZWxDaGFuZ2VkKG0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4gUGxlYXNlIG92ZXJ3cml0ZSB0aGlzIG1ldGhvZCBpbiB5b3VyIFBPUycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlUHJpbnRpbmdSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlUHJpbnRpbmdSZXNwb25zZShtKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuUHJpbnRpbmdSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5QcmludGluZ1Jlc3BvbnNlKG0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlVGVybWluYWxTdGF0dXNSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlVGVybWluYWxTdGF0dXNSZXNwb25zZShtKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuVGVybWluYWxTdGF0dXNSZXNwb25zZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5UZXJtaW5hbFN0YXR1c1Jlc3BvbnNlKG0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlQmF0dGVyeUxldmVsQ2hhbmdlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlQmF0dGVyeUxldmVsQ2hhbmdlZChtKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuQmF0dGVyeUxldmVsQ2hhbmdlZCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5CYXR0ZXJ5TGV2ZWxDaGFuZ2VkKG0pO1xuICAgIH0gLy8gZW5kcmVnaW9uXG4gICAgLy8gcmVnaW9uIEludGVybmFscyBmb3IgQ29ubmVjdGlvbiBNYW5hZ2VtZW50XG5cbiAgfSwge1xuICAgIGtleTogXCJfcmVzZXRDb25uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZXNldENvbm4oKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gU2V0dXAgdGhlIENvbm5lY3Rpb25cbiAgICAgIHRoaXMuX2Nvbm4gPSBuZXcgX0Nvbm5lY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX1tcIkNvbm5lY3Rpb25cIl0oKTtcblxuICAgICAgaWYgKHRoaXMuX2lzVXNpbmdIdHRwcygpIHx8IHRoaXMuX2ZvcmNlU2VjdXJlV2ViU29ja2V0cykge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlNlY3VyZSBjb25uZWN0aW9uIGRldGVjdGVkLlwiKTtcblxuICAgICAgICB0aGlzLl9lZnRwb3NBZGRyZXNzID0gdGhpcy5fZWZ0cG9zQWRkcmVzcy5yZXBsYWNlKFwid3M6Ly9cIiwgXCJ3c3M6Ly9cIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2Nvbm4uQWRkcmVzcyA9IHRoaXMuX2VmdHBvc0FkZHJlc3M7IC8vIFJlZ2lzdGVyIG91ciBFdmVudCBIYW5kbGVyc1xuXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdDb25uZWN0aW9uU3RhdHVzQ2hhbmdlZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuX29uU3BpQ29ubmVjdGlvblN0YXR1c0NoYW5nZWQoZS5kZXRhaWwpO1xuICAgICAgfSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdNZXNzYWdlUmVjZWl2ZWQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLl9vblNwaU1lc3NhZ2VSZWNlaXZlZChlLmRldGFpbCk7XG4gICAgICB9KTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0Vycm9yUmVjZWl2ZWQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLl9vbldzRXJyb3JSZWNlaXZlZChlLmRldGFpbCk7XG4gICAgICB9KTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGNvbm5lY3Rpb24gc3RhdHVzIGNoYW5nZXMuXG4gICAgLy8gWW91IGFyZSBlbmNvdXJhZ2VkIHRvIGRpc3BsYXkgYSBQaW5QYWQgQ29ubmVjdGlvbiBJbmRpY2F0b3Igb24gdGhlIFBPUyBzY3JlZW4uXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwic3RhdGVcIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX29uU3BpQ29ubmVjdGlvblN0YXR1c0NoYW5nZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uU3BpQ29ubmVjdGlvblN0YXR1c0NoYW5nZWQoc3RhdGUpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBzd2l0Y2ggKHN0YXRlLkNvbm5lY3Rpb25TdGF0ZSkge1xuICAgICAgICBjYXNlIF9Db25uZWN0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19bXCJDb25uZWN0aW9uU3RhdGVcIl0uQ29ubmVjdGluZzpcbiAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkknbSBDb25uZWN0aW5nIHRvIHRoZSBFZnRwb3MgYXQgXCIuY29uY2F0KHRoaXMuX2VmdHBvc0FkZHJlc3MsIFwiLi4uXCIpKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX0Nvbm5lY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX1tcIkNvbm5lY3Rpb25TdGF0ZVwiXS5Db25uZWN0ZWQ6XG4gICAgICAgICAgdGhpcy5fcmV0cmllc1NpbmNlTGFzdERldmljZUFkZHJlc3NSZXNvbHV0aW9uID0gMDtcblxuICAgICAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uUGFpcmluZyAmJiB0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSB7XG4gICAgICAgICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLk1lc3NhZ2UgPSBcIlJlcXVlc3RpbmcgdG8gUGFpci4uLlwiO1xuICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1BhaXJpbmdGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGVcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHZhciBwciA9IF9QYWlyaW5nSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19bXCJQYWlyaW5nSGVscGVyXCJdLk5ld1BhaXJSZXF1ZXN0KCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3NlbmQocHIuVG9NZXNzYWdlKCkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkknbSBDb25uZWN0ZWQgdG8gXCIuY29uY2F0KHRoaXMuX2VmdHBvc0FkZHJlc3MsIFwiLi4uXCIpKTtcblxuICAgICAgICAgICAgdGhpcy5fc3BpTWVzc2FnZVN0YW1wLlNlY3JldHMgPSB0aGlzLl9zZWNyZXRzO1xuXG4gICAgICAgICAgICB0aGlzLl9zdGFydFBlcmlvZGljUGluZygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX0Nvbm5lY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX1tcIkNvbm5lY3Rpb25TdGF0ZVwiXS5EaXNjb25uZWN0ZWQ6XG4gICAgICAgICAgLy8gTGV0J3MgcmVzZXQgc29tZSBsaWZlY3ljbGUgcmVsYXRlZCB0byBjb25uZWN0aW9uIHN0YXRlLCByZWFkeSBmb3IgbmV4dCBjb25uZWN0aW9uXG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJJJ20gZGlzY29ubmVjdGVkIGZyb20gXCIuY29uY2F0KHRoaXMuX2VmdHBvc0FkZHJlc3MsIFwiLi4uXCIpKTtcblxuICAgICAgICAgIHRoaXMuX21vc3RSZWNlbnRQaW5nU2VudCA9IG51bGw7XG4gICAgICAgICAgdGhpcy5fbW9zdFJlY2VudFBvbmdSZWNlaXZlZCA9IG51bGw7XG4gICAgICAgICAgdGhpcy5fbWlzc2VkUG9uZ3NDb3VudCA9IDA7XG5cbiAgICAgICAgICB0aGlzLl9zdG9wUGVyaW9kaWNQaW5nKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkge1xuICAgICAgICAgICAgdGhpcy5DdXJyZW50U3RhdHVzID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlBhaXJlZENvbm5lY3Rpbmc7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gJiYgIXRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkKSB7XG4gICAgICAgICAgICAgIC8vIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB0cmFuc2FjdGlvbiwganVzdCBzbyB5b3Uga25vdyFcbiAgICAgICAgICAgICAgLy8gVEgtMURcbiAgICAgICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJMb3N0IGNvbm5lY3Rpb24gaW4gdGhlIG1pZGRsZSBvZiBhIHRyYW5zYWN0aW9uLi4uXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5fY29ubiA9PSBudWxsKSByZXR1cm47IC8vIFRoaXMgbWVhbnMgdGhlIGluc3RhbmNlIGhhcyBiZWVuIGRpc3Bvc2VkLiBBYm9ydGluZy5cblxuICAgICAgICAgICAgaWYgKHRoaXMuX2F1dG9BZGRyZXNzUmVzb2x1dGlvbkVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuX3JldHJpZXNTaW5jZUxhc3REZXZpY2VBZGRyZXNzUmVzb2x1dGlvbiA+PSB0aGlzLl9yZXRyaWVzQmVmb3JlUmVzb2x2aW5nRGV2aWNlQWRkcmVzcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2F1dG9SZXNvbHZlRWZ0cG9zQWRkcmVzcygpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fcmV0cmllc1NpbmNlTGFzdERldmljZUFkZHJlc3NSZXNvbHV0aW9uID0gMDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXRyaWVzU2luY2VMYXN0RGV2aWNlQWRkcmVzc1Jlc29sdXRpb24gKz0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIldpbGwgdHJ5IHRvIHJlY29ubmVjdCBpbiBcIi5jb25jYXQodGhpcy5fc2xlZXBCZWZvcmVSZWNvbm5lY3RNcywgXCJtcy4uLlwiKSk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoX3RoaXMzLkN1cnJlbnRTdGF0dXMgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBub24tYmxvY2tpbmdcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMzLl9jb25uKSB7XG4gICAgICAgICAgICAgICAgICBfdGhpczMuX2Nvbm4uQ29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5fc2xlZXBCZWZvcmVSZWNvbm5lY3RNcyk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLkN1cnJlbnRGbG93ID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uUGFpcmluZykge1xuICAgICAgICAgICAgaWYgKHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuRmluaXNoZWQpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3JldHJpZXNTaW5jZUxhc3RQYWlyaW5nID49IHRoaXMuX3JldHJpZXNCZWZvcmVQYWlyaW5nKSB7XG4gICAgICAgICAgICAgIHRoaXMuX3JldHJpZXNTaW5jZUxhc3RQYWlyaW5nID0gMDtcblxuICAgICAgICAgICAgICB0aGlzLl9sb2cud2FybihcIkxvc3QgQ29ubmVjdGlvbiBkdXJpbmcgcGFpcmluZy5cIik7XG5cbiAgICAgICAgICAgICAgdGhpcy5fb25QYWlyaW5nRmFpbGVkKCk7XG5cbiAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1BhaXJpbmdGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZVxuICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiV2lsbCB0cnkgdG8gcmUtcGFpciBpbiBcIi5jb25jYXQodGhpcy5fc2xlZXBCZWZvcmVSZWNvbm5lY3RNcywgXCJtcyAuLi5cIikpO1xuXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpczMuQ3VycmVudFN0YXR1cyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uUGFpcmVkQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIG5vbi1ibG9ja2luZ1xuICAgICAgICAgICAgICAgICAgaWYgKF90aGlzMy5fY29ubikgX3RoaXMzLl9jb25uLkNvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBfdGhpczMuX3JldHJpZXNTaW5jZUxhc3RQYWlyaW5nICs9IDE7XG4gICAgICAgICAgICAgIH0sIHRoaXMuX3NsZWVwQmVmb3JlUmVjb25uZWN0TXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHN0YXRlOiAnICsgc3RhdGUpO1xuICAgICAgfVxuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhpcyBpcyBhbiBpbXBvcnRhbnQgcGllY2Ugb2YgdGhlIHB1enpsZS4gSXQncyBhIGJhY2tncm91bmQgdGhyZWFkIHRoYXQgcGVyaW9kaWNhbGx5XG4gICAgLy8gc2VuZHMgUGluZ3MgdG8gdGhlIHNlcnZlci4gSWYgaXQgZG9lc24ndCByZWNlaXZlIFBvbmdzLCBpdCBjb25zaWRlcnMgdGhlIGNvbm5lY3Rpb24gYXMgYnJva2VuXG4gICAgLy8gc28gaXQgZGlzY29ubmVjdHMuIFxuICAgIC8vIDwvc3VtbWFyeT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9zdGFydFBlcmlvZGljUGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc3RhcnRQZXJpb2RpY1BpbmcoKSB7XG4gICAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgICAgdGhpcy5fc3RvcFBlcmlvZGljUGluZygpO1xuXG4gICAgICB0aGlzLl9wZXJpb2RpY1BpbmdUaHJlYWQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczQuX3BlcmlvZGljUGluZygpO1xuICAgICAgfSwgdGhpcy5fcGluZ0ZyZXF1ZW5jeSk7XG5cbiAgICAgIHRoaXMuX3BlcmlvZGljUGluZygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfcGVyaW9kaWNQaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9wZXJpb2RpY1BpbmcoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgLy8gd2hpbGUgaSdtIHN0aWxsIGNvbm5lY3RlZCBBTkQgcGFpcmVkLi4uXG4gICAgICBpZiAodGhpcy5fY29ubi5Db25uZWN0ZWQgJiYgdGhpcy5fc2VjcmV0cyAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMuX2RvUGluZygpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfdGhpczUuX21vc3RSZWNlbnRQaW5nU2VudCAhPSBudWxsICYmIChfdGhpczUuX21vc3RSZWNlbnRQb25nUmVjZWl2ZWQgPT0gbnVsbCB8fCBfdGhpczUuX21vc3RSZWNlbnRQb25nUmVjZWl2ZWQuSWQgIT0gX3RoaXM1Ll9tb3N0UmVjZW50UGluZ1NlbnQuSWQpKSB7XG4gICAgICAgICAgICBfdGhpczUuX21pc3NlZFBvbmdzQ291bnQgKz0gMTtcblxuICAgICAgICAgICAgX3RoaXM1Ll9sb2cuaW5mbyhcIkVmdHBvcyBkaWRuJ3QgcmVwbHkgdG8gbXkgUGluZy4gTWlzc2VkIENvdW50OiBcIi5jb25jYXQoX3RoaXM1Ll9taXNzZWRQb25nc0NvdW50LCBcIi9cIikuY29uY2F0KF90aGlzNS5fbWlzc2VkUG9uZ3NUb0Rpc2Nvbm5lY3QsIFwiLlwiKSk7XG5cbiAgICAgICAgICAgIGlmIChfdGhpczUuX21pc3NlZFBvbmdzQ291bnQgPCBfdGhpczUuX21pc3NlZFBvbmdzVG9EaXNjb25uZWN0KSB7XG4gICAgICAgICAgICAgIF90aGlzNS5fbG9nLmluZm8oXCJUcnlpbmcgYW5vdGhlciBwaW5nLi4uXCIpO1xuXG4gICAgICAgICAgICAgIF90aGlzNS5fc3RhcnRQZXJpb2RpY1BpbmcoKTtcblxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IC8vIFRoaXMgbWVhbnMgdGhhdCB3ZSBoYXZlIG5vdCByZWNlaXZlZCBhIHBvbmcgZm9yIG91ciBtb3N0IHJlY2VudCBwaW5nLlxuICAgICAgICAgICAgLy8gV2UgY29uc2lkZXIgdGhpcyBjb25uZWN0aW9uIGFzIGJyb2tlbi5cbiAgICAgICAgICAgIC8vIExldCdzIERpc2Nvbm5lY3QuXG5cblxuICAgICAgICAgICAgX3RoaXM1Ll9sb2cuaW5mbyhcIkRpc2Nvbm5lY3RpbmcuLi5cIik7XG5cbiAgICAgICAgICAgIF90aGlzNS5fY29ubi5EaXNjb25uZWN0KCk7XG5cbiAgICAgICAgICAgIF90aGlzNS5fc3RvcFBlcmlvZGljUGluZygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzNS5fbWlzc2VkUG9uZ3NDb3VudCA9IDA7XG4gICAgICAgIH0sIHRoaXMuX3BvbmdUaW1lb3V0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0b3BQZXJpb2RpY1BpbmcoKTtcblxuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkNhbmNlbGxpbmcgcGVyaW9kaWMgcGluZyBhcyB3ZXJlIGRpc2Nvbm5lY3RlZCBvciBub3QgcGFpcmVkXCIpO1xuICAgICAgfVxuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gV2UgY2FsbCB0aGlzIG91cnNlbHZlcyBhcyBzb29uIGFzIHdlJ3JlIHJlYWR5IHRvIHRyYW5zYWN0IHdpdGggdGhlIFBpblBhZCBhZnRlciBhIGNvbm5lY3Rpb24gaXMgZXN0YWJsaXNoZWQuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBlZmZlY3RpdmVseSBjYWxsZWQgYWZ0ZXIgd2UgcmVjZWl2ZWQgdGhlIGZpcnN0IExvZ2luIFJlc3BvbnNlIGZyb20gdGhlIFBpblBhZC5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJfb25SZWFkeVRvVHJhbnNhY3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVhZHlUb1RyYW5zYWN0KCkge1xuICAgICAgdGhpcy5fbG9nLmluZm8oXCJPbiBSZWFkeSBUbyBUcmFuc2FjdCFcIik7IC8vIFNvLCB3ZSBoYXZlIGp1c3QgbWFkZSBhIGNvbm5lY3Rpb24sIHBpbmdlZCBhbmQgbG9nZ2VkIGluIHN1Y2Nlc3NmdWxseS5cblxuXG4gICAgICB0aGlzLkN1cnJlbnRTdGF0dXMgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uUGFpcmVkQ29ubmVjdGVkO1xuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uICYmICF0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCkge1xuICAgICAgICBpZiAodGhpcy5DdXJyZW50VHhGbG93U3RhdGUuUmVxdWVzdFNlbnQpIHtcbiAgICAgICAgICAvLyBUSC0zQSAtIFdlJ3ZlIGp1c3QgcmVjb25uZWN0ZWQgYW5kIHdlcmUgaW4gdGhlIG1pZGRsZSBvZiBUeC5cbiAgICAgICAgICAvLyBMZXQncyBnZXQgdGhlIGxhc3QgdHJhbnNhY3Rpb24gdG8gY2hlY2sgd2hhdCB3ZSBtaWdodCBoYXZlIG1pc3NlZCBvdXQgb24uXG4gICAgICAgICAgdGhpcy5fY2FsbEdldExhc3RUcmFuc2FjdGlvbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFRILTNBUiAtIFdlIGhhZCBub3QgZXZlbiBzZW50IHRoZSByZXF1ZXN0IHlldC4gTGV0J3MgZG8gdGhhdCBub3dcbiAgICAgICAgICB0aGlzLl9zZW5kKHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlJlcXVlc3QpO1xuXG4gICAgICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuU2VudChcIlNlbmRpbmcgUmVxdWVzdCBOb3cuLi5cIik7XG4gICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5faGFzU2V0SW5mbykge1xuICAgICAgICAgIHRoaXMuX2NhbGxTZXRQb3NJbmZvKCk7XG4gICAgICAgIH0gLy8gbGV0J3MgYWxzbyB0ZWxsIHRoZSBlZnRwb3Mgb3VyIGxhdGVzdCB0YWJsZSBjb25maWd1cmF0aW9uLlxuXG5cbiAgICAgICAgaWYgKHRoaXMuX3NwaVBhdCkge1xuICAgICAgICAgIHRoaXMuX3NwaVBhdC5QdXNoUGF5QXRUYWJsZUNvbmZpZygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9jYWxsU2V0UG9zSW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2FsbFNldFBvc0luZm8oKSB7XG4gICAgICB2YXIgc2V0UG9zSW5mb1JlcXVlc3QgPSBuZXcgX1Bvc0luZm9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X19bXCJTZXRQb3NJbmZvUmVxdWVzdFwiXSh0aGlzLl9wb3NWZXJzaW9uLCB0aGlzLl9wb3NWZW5kb3JJZCwgXCJqc1wiLCBTUElfVkVSU0lPTiwgX1Bvc0luZm9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X19bXCJEZXZpY2VJbmZvXCJdLkdldEFwcERldmljZUluZm8oKSk7XG5cbiAgICAgIHRoaXMuX3NlbmQoc2V0UG9zSW5mb1JlcXVlc3QudG9NZXNzYWdlKCkpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gV2hlbiB3ZSBkaXNjb25uZWN0LCB3ZSBzaG91bGQgYWxzbyBzdG9wIHRoZSBwZXJpb2RpYyBwaW5nLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9zdG9wUGVyaW9kaWNQaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zdG9wUGVyaW9kaWNQaW5nKCkge1xuICAgICAgaWYgKHRoaXMuX3BlcmlvZGljUGluZ1RocmVhZCkge1xuICAgICAgICAvLyBJZiB3ZSB3ZXJlIGFscmVhZHkgc2V0IHVwLCBjbGVhbiB1cCBiZWZvcmUgcmVzdGFydGluZy5cbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9wZXJpb2RpY1BpbmdUaHJlYWQpO1xuICAgICAgICB0aGlzLl9wZXJpb2RpY1BpbmdUaHJlYWQgPSBudWxsO1xuICAgICAgfVxuICAgIH0gLy8gU2VuZCBhIFBpbmcgdG8gdGhlIFNlcnZlclxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2RvUGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZG9QaW5nKCkge1xuICAgICAgdmFyIHBpbmcgPSBfUGluZ0hlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfX1tcIlBpbmdIZWxwZXJcIl0uR2VuZXJhdGVQaW5nUmVxdWVzdCgpO1xuICAgICAgdGhpcy5fbW9zdFJlY2VudFBpbmdTZW50ID0gcGluZztcblxuICAgICAgdGhpcy5fc2VuZChwaW5nKTtcblxuICAgICAgdGhpcy5fbW9zdFJlY2VudFBpbmdTZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBSZWNlaXZlZCBhIFBvbmcgZnJvbSB0aGUgc2VydmVyXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlSW5jb21pbmdQb25nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVJbmNvbWluZ1BvbmcobSkge1xuICAgICAgLy8gV2UgbmVlZCB0byBtYWludGFpbiB0aGlzIHRpbWUgZGVsdGEgb3RoZXJ3aXNlIHRoZSBzZXJ2ZXIgd2lsbCBub3QgYWNjZXB0IG91ciBtZXNzYWdlcy5cbiAgICAgIHRoaXMuX3NwaU1lc3NhZ2VTdGFtcC5TZXJ2ZXJUaW1lRGVsdGEgPSBtLkdldFNlcnZlclRpbWVEZWx0YSgpO1xuXG4gICAgICBpZiAodGhpcy5fbW9zdFJlY2VudFBvbmdSZWNlaXZlZCA9PSBudWxsKSB7XG4gICAgICAgIC8vIEZpcnN0IHBvbmcgcmVjZWl2ZWQgYWZ0ZXIgYSBjb25uZWN0aW9uLCBhbmQgYWZ0ZXIgdGhlIHBhaXJpbmcgcHJvY2VzcyBpcyBmdWxseSBmaW5hbGlzZWQuXG4gICAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSB7XG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJGaXJzdCBwb25nIG9mIGNvbm5lY3Rpb24gYW5kIGluIHBhaXJlZCBzdGF0ZS5cIik7XG5cbiAgICAgICAgICB0aGlzLl9vblJlYWR5VG9UcmFuc2FjdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiRmlyc3QgcG9uZyBvZiBjb25uZWN0aW9uIGJ1dCBwYWlyaW5nIHByb2Nlc3Mgbm90IGZpbmFsaXNlZCB5ZXQuXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX21vc3RSZWNlbnRQb25nUmVjZWl2ZWQgPSBtO1xuXG4gICAgICB0aGlzLl9sb2cuZGVidWcoXCJQb25nTGF0ZW5jeTpcIi5jb25jYXQoRGF0ZS5ub3coKSAtIHRoaXMuX21vc3RSZWNlbnRQaW5nU2VudFRpbWUpKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBzZXJ2ZXIgd2lsbCBhbHNvIHNlbmQgdXMgcGluZ3MuIFdlIG5lZWQgdG8gcmVwbHkgd2l0aCBhIHBvbmcgc28gaXQgZG9lc24ndCBkaXNjb25uZWN0IHVzLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUluY29taW5nUGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlSW5jb21pbmdQaW5nKG0pIHtcbiAgICAgIHZhciBwb25nID0gX1BpbmdIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE4X19bXCJQb25nSGVscGVyXCJdLkdlbmVyYXRlUG9uZ1Jlc3Nwb25zZShtKTtcblxuICAgICAgdGhpcy5fc2VuZChwb25nKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEFzayB0aGUgUGluUGFkIHRvIHRlbGwgdXMgd2hhdCB0aGUgTW9zdCBSZWNlbnQgVHJhbnNhY3Rpb24gd2FzXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2NhbGxHZXRMYXN0VHJhbnNhY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NhbGxHZXRMYXN0VHJhbnNhY3Rpb24oKSB7XG4gICAgICB2YXIgZ2x0UmVxdWVzdE1zZyA9IG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJHZXRMYXN0VHJhbnNhY3Rpb25SZXF1ZXN0XCJdKCkuVG9NZXNzYWdlKCk7XG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5DYWxsaW5nR2x0KGdsdFJlcXVlc3RNc2cuSWQpO1xuXG4gICAgICB0aGlzLl9zZW5kKGdsdFJlcXVlc3RNc2cpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXIgd2UgcmVjZWl2ZSBhIG1lc3NhZ2UgZnJvbSB0aGUgQ29ubmVjdGlvblxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1lc3NhZ2VKc29uXCI+PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9vblNwaU1lc3NhZ2VSZWNlaXZlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25TcGlNZXNzYWdlUmVjZWl2ZWQobWVzc2FnZUpzb24pIHtcbiAgICAgIC8vIEZpcnN0IHdlIHBhcnNlIHRoZSBpbmNvbWluZyBtZXNzYWdlXG4gICAgICB2YXIgbSA9IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiTWVzc2FnZVwiXS5Gcm9tSnNvbihtZXNzYWdlSnNvbi5NZXNzYWdlLCB0aGlzLl9zZWNyZXRzKTtcblxuICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZWNlaXZlZDpcIiArIG0uRGVjcnlwdGVkSnNvbik7XG5cbiAgICAgIGlmIChfU3BpUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfX1tcIlNwaVByZWF1dGhcIl0uSXNQcmVhdXRoRXZlbnQobS5FdmVudE5hbWUpKSB7XG4gICAgICAgIHRoaXMuX3NwaVByZWF1dGguX2hhbmRsZVByZWF1dGhNZXNzYWdlKG0pO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gQW5kIHRoZW4gd2Ugc3dpdGNoIG9uIHRoZSBldmVudCB0eXBlLlxuXG5cbiAgICAgIHN3aXRjaCAobS5FdmVudE5hbWUpIHtcbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5LZXlSZXF1ZXN0OlxuICAgICAgICAgIHRoaXMuX2hhbmRsZUtleVJlcXVlc3QobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLktleUNoZWNrOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZUtleUNoZWNrKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5QYWlyUmVzcG9uc2U6XG4gICAgICAgICAgdGhpcy5faGFuZGxlUGFpclJlc3BvbnNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5Ecm9wS2V5c0FkdmljZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVEcm9wS2V5c0FkdmljZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uUHVyY2hhc2VSZXNwb25zZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVQdXJjaGFzZVJlc3BvbnNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5SZWZ1bmRSZXNwb25zZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVSZWZ1bmRSZXNwb25zZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uQ2FzaG91dE9ubHlSZXNwb25zZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVDYXNob3V0T25seVJlc3BvbnNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5Nb3RvUHVyY2hhc2VSZXNwb25zZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVNb3RvUHVyY2hhc2VSZXNwb25zZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uU2lnbmF0dXJlUmVxdWlyZWQ6XG4gICAgICAgICAgdGhpcy5faGFuZGxlU2lnbmF0dXJlUmVxdWlyZWQobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLkF1dGhDb2RlUmVxdWlyZWQ6XG4gICAgICAgICAgdGhpcy5faGFuZGxlQXV0aENvZGVSZXF1aXJlZChtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2U6XG4gICAgICAgICAgdGhpcy5faGFuZGxlR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2UobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLlNldHRsZVJlc3BvbnNlOlxuICAgICAgICAgIHRoaXMuSGFuZGxlU2V0dGxlUmVzcG9uc2UobSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5TZXR0bGVtZW50RW5xdWlyeVJlc3BvbnNlOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZVNldHRsZW1lbnRFbnF1aXJ5UmVzcG9uc2UobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLlBpbmc6XG4gICAgICAgICAgdGhpcy5faGFuZGxlSW5jb21pbmdQaW5nKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5Qb25nOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZUluY29taW5nUG9uZyhtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uS2V5Um9sbFJlcXVlc3Q6XG4gICAgICAgICAgdGhpcy5faGFuZGxlS2V5Um9sbGluZ1JlcXVlc3QobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLkNhbmNlbFRyYW5zYWN0aW9uUmVzcG9uc2U6XG4gICAgICAgICAgdGhpcy5faGFuZGxlQ2FuY2VsVHJhbnNhY3Rpb25SZXNwb25zZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uU2V0UG9zSW5mb1Jlc3BvbnNlOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZVNldFBvc0luZm9SZXNwb25zZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uUGF5QXRUYWJsZUdldFRhYmxlQ29uZmlnOlxuICAgICAgICAgIGlmICh0aGlzLl9zcGlQYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5fc2VuZChfUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX1tcIlBheUF0VGFibGVDb25maWdcIl0uRmVhdHVyZURpc2FibGVNZXNzYWdlKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInBhdGNvbmZcIikpKTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fc3BpUGF0Ll9oYW5kbGVHZXRUYWJsZUNvbmZpZyhtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uUGF5QXRUYWJsZUdldEJpbGxEZXRhaWxzOlxuICAgICAgICAgIHRoaXMuX3NwaVBhdC5faGFuZGxlR2V0QmlsbERldGFpbHNSZXF1ZXN0KG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5QYXlBdFRhYmxlQmlsbFBheW1lbnQ6XG4gICAgICAgICAgdGhpcy5fc3BpUGF0Ll9oYW5kbGVCaWxsUGF5bWVudEFkdmljZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uUGF5QXRUYWJsZUdldE9wZW5UYWJsZXM6XG4gICAgICAgICAgdGhpcy5fc3BpUGF0Ll9oYW5kbGVHZXRPcGVuVGFibGVzUmVxdWVzdChtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uUGF5QXRUYWJsZUJpbGxQYXltZW50Rmxvd0VuZGVkOlxuICAgICAgICAgIHRoaXMuX3NwaVBhdC5faGFuZGxlQmlsbFBheW1lbnRGbG93RW5kZWQobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLlByaW50aW5nUmVzcG9uc2U6XG4gICAgICAgICAgdGhpcy5faGFuZGxlUHJpbnRpbmdSZXNwb25zZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uVGVybWluYWxTdGF0dXNSZXNwb25zZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5CYXR0ZXJ5TGV2ZWxDaGFuZ2VkOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZUJhdHRlcnlMZXZlbENoYW5nZWQobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLkVycm9yOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZUVycm9yRXZlbnQobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLkludmFsaWRIbWFjU2lnbmF0dXJlOlxuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiSSBjb3VsZCBub3QgdmVyaWZ5IG1lc3NhZ2UgZnJvbSBFZnRwb3MuIFlvdSBtaWdodCBoYXZlIHRvIFVuLXBhaXIgRWZ0cG9zIGFuZCB0aGVuIHJlY29ubmVjdC5cIik7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiSSBkb24ndCBVbmRlcnN0YW5kIEV2ZW50OiBcIi5jb25jYXQobS5FdmVudE5hbWUsIFwiLCBcIikuY29uY2F0KG0uRGF0YSwgXCIuIFBlcmhhcHMgSSBoYXZlIG5vdCBpbXBsZW1lbnRlZCBpdCB5ZXQuXCIpKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfb25Xc0Vycm9yUmVjZWl2ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uV3NFcnJvclJlY2VpdmVkKGVycm9yKSB7XG4gICAgICB0aGlzLl9sb2cud2FybihcIlJlY2VpdmVkIFdTIEVycm9yXCIsIGVycm9yLk1lc3NhZ2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfc2VuZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZChtZXNzYWdlKSB7XG4gICAgICB2YXIganNvbiA9IG1lc3NhZ2UuVG9Kc29uKHRoaXMuX3NwaU1lc3NhZ2VTdGFtcCk7XG5cbiAgICAgIGlmICh0aGlzLl9jb25uLkNvbm5lY3RlZCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlNlbmRpbmc6IFwiICsgbWVzc2FnZS5EZWNyeXB0ZWRKc29uKTtcblxuICAgICAgICB0aGlzLl9jb25uLlNlbmQoanNvbik7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkFza2VkIHRvIHNlbmQsIGJ1dCBub3QgY29ubmVjdGVkOiBcIiArIG1lc3NhZ2UuRGVjcnlwdGVkSnNvbik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaXNQb3NJZFZhbGlkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1Bvc0lkVmFsaWQocG9zSWQpIHtcbiAgICAgIGlmICghcG9zSWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLndhcm4oXCJQb3MgSWQgY2Fubm90IGJlIG51bGwgb3IgZW1wdHlcIik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAocG9zSWQubGVuZ3RoID4gMTYpIHtcbiAgICAgICAgdGhpcy5fbG9nLndhcm4oXCJQb3MgSWQgaXMgZ3JlYXRlciB0aGFuIDE2IGNoYXJhY3RlcnNcIik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXBvc0lkLm1hdGNoKHRoaXMuX3JlZ2V4SXRlbXNGb3JQb3NJZCkpIHtcbiAgICAgICAgdGhpcy5fbG9nLndhcm4oXCJQb3MgSWQgY2Fubm90IGluY2x1ZGUgc3BlY2lhbCBjaGFyYWN0ZXJzXCIpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9pc0VmdHBvc0FkZHJlc3NWYWxpZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNFZnRwb3NBZGRyZXNzVmFsaWQoZWZ0cG9zQWRkcmVzcykge1xuICAgICAgaWYgKCFlZnRwb3NBZGRyZXNzKSB7XG4gICAgICAgIHRoaXMuX2xvZy53YXJuKFwiVGhlIEVmdHBvcyBhZGRyZXNzIGNhbm5vdCBiZSBudWxsIG9yIGVtcHR5XCIpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNhbml0aXNlZEVmdHBvc0FkZHJlc3MgPSBlZnRwb3NBZGRyZXNzLnJlcGxhY2UoL153W3NdP3M6XFwvXFwvLywgXCJcIik7IC8vIFRoZSBlZnRwb3NBZGRyZXNzIG1heSBiZSBhbiBJUCBhZGRyZXNzIG9yIGlmIGF1dG9BZGRyZXNzUmVzb2x1dGlvbkVuYWJsZWQgaXMgdHJ1ZSwgYSBGUUROXG5cbiAgICAgIGlmICghdGhpcy5fYXV0b0FkZHJlc3NSZXNvbHV0aW9uRW5hYmxlZCAmJiAhc2FuaXRpc2VkRWZ0cG9zQWRkcmVzcy5tYXRjaCh0aGlzLl9yZWdleEl0ZW1zRm9yRWZ0cG9zQWRkcmVzcykgfHwgdGhpcy5fYXV0b0FkZHJlc3NSZXNvbHV0aW9uRW5hYmxlZCAmJiAhc2FuaXRpc2VkRWZ0cG9zQWRkcmVzcy5tYXRjaCh0aGlzLl9yZWdleEl0ZW1zRm9yRnFkbkVmdHBvc0FkZHJlc3MpKSB7XG4gICAgICAgIHRoaXMuX2xvZy53YXJuKFwiVGhlIEVmdHBvcyBhZGRyZXNzIGlzIG5vdCBpbiB0aGUgcmlnaHQgZm9ybWF0XCIpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkhhc1NlcmlhbE51bWJlckNoYW5nZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSGFzU2VyaWFsTnVtYmVyQ2hhbmdlZCh1cGRhdGVkU2VyaWFsTnVtYmVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2VyaWFsTnVtYmVyICE9IHVwZGF0ZWRTZXJpYWxOdW1iZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkhhc0VmdHBvc0FkZHJlc3NDaGFuZ2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEhhc0VmdHBvc0FkZHJlc3NDaGFuZ2VkKHVwZGF0ZWRFZnRwb3NBZGRyZXNzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZWZ0cG9zQWRkcmVzcyAhPSB1cGRhdGVkRWZ0cG9zQWRkcmVzcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2F1dG9SZXNvbHZlRWZ0cG9zQWRkcmVzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX2F1dG9SZXNvbHZlRWZ0cG9zQWRkcmVzczIgPSBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2FzeW5jVG9HZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICBfYmFiZWxfcnVudGltZV9yZWdlbmVyYXRvcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgIHZhciBpc1NlY3VyZUNvbm5lY3Rpb24sIHNlcnZpY2UsIGFkZHJlc3NSZXNwb25zZSwgYWRkcmVzc1Jlc3BvbnNlSnNvbiwgcHJvdG9jb2w7XG4gICAgICAgIHJldHVybiBfYmFiZWxfcnVudGltZV9yZWdlbmVyYXRvcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7XG4gICAgICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hdXRvQWRkcmVzc1Jlc29sdXRpb25FbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIik7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmICghKCF0aGlzLl9zZXJpYWxOdW1iZXIgfHwgIXRoaXMuX2RldmljZUFwaUtleSkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nLndhcm4oXCJNaXNzaW5nIHNlcmlhbE51bWJlciBhbmQvb3IgZGV2aWNlQXBpS2V5LiBOZWVkIHRvIHNldCB0aGVtIGJlZm9yZSBmb3IgQXV0byBBZGRyZXNzIHRvIHdvcmsuXCIpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiKTtcblxuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgaXNTZWN1cmVDb25uZWN0aW9uID0gdGhpcy5faXNTZWN1cmVDb25uZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgc2VydmljZSA9IG5ldyBfU2VydmljZV9EZXZpY2VTZXJ2aWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fW1wiRGV2aWNlQWRkcmVzc1NlcnZpY2VcIl0oKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gNztcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2UuUmV0cmlldmVTZXJ2aWNlKHRoaXMuX3NlcmlhbE51bWJlciwgdGhpcy5fZGV2aWNlQXBpS2V5LCB0aGlzLl9hY3F1aXJlckNvZGUsIGlzU2VjdXJlQ29ubmVjdGlvbiwgdGhpcy5faW5UZXN0TW9kZSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICBhZGRyZXNzUmVzcG9uc2UgPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMztcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRkcmVzc1Jlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgIGFkZHJlc3NSZXNwb25zZUpzb24gPSBfY29udGV4dC5zZW50O1xuICAgICAgICAgICAgICAgIHRoaXMuQ3VycmVudERldmljZVN0YXR1cyA9IE9iamVjdC5hc3NpZ24obmV3IF9TZXJ2aWNlX0RldmljZVNlcnZpY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIwX19bXCJEZXZpY2VBZGRyZXNzU3RhdHVzXCJdKGlzU2VjdXJlQ29ubmVjdGlvbiksIHtcbiAgICAgICAgICAgICAgICAgIGlwOiBhZGRyZXNzUmVzcG9uc2VKc29uLmlwLFxuICAgICAgICAgICAgICAgICAgZnFkbjogYWRkcmVzc1Jlc3BvbnNlSnNvbi5mcWRuLFxuICAgICAgICAgICAgICAgICAgRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZTogYWRkcmVzc1Jlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICAgIFJlc3BvbnNlU3RhdHVzRGVzY3JpcHRpb246IGFkZHJlc3NSZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2VNZXNzYWdlOiBhZGRyZXNzUmVzcG9uc2Uuc3RhdHVzVGV4dCxcbiAgICAgICAgICAgICAgICAgIExhc3RVcGRhdGVkOiBhZGRyZXNzUmVzcG9uc2VKc29uLmxhc3RfdXBkYXRlZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNjtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxNztcbiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0W1wiY2F0Y2hcIl0oNyk7XG4gICAgICAgICAgICAgICAgdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzID0gdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzIHx8IG5ldyBfU2VydmljZV9EZXZpY2VTZXJ2aWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fW1wiRGV2aWNlQWRkcmVzc1N0YXR1c1wiXShpc1NlY3VyZUNvbm5lY3Rpb24pO1xuICAgICAgICAgICAgICAgIHRoaXMuQ3VycmVudERldmljZVN0YXR1cy5EZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlID0gX1NlcnZpY2VfRGV2aWNlU2VydmljZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfX1tcIkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGVcIl0uREVWSUNFX1NFUlZJQ0VfRVJST1I7XG4gICAgICAgICAgICAgICAgdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzLlJlc3BvbnNlU3RhdHVzRGVzY3JpcHRpb24gPSBfY29udGV4dC50MDtcbiAgICAgICAgICAgICAgICB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXMuUmVzcG9uc2VNZXNzYWdlID0gX2NvbnRleHQudDA7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9sb2cud2FybihfY29udGV4dC50MC5tZXNzYWdlKTtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdEZXZpY2VBZGRyZXNzQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIik7XG5cbiAgICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgICBpZiAoIShhZGRyZXNzUmVzcG9uc2Uuc3RhdHVzID09IF9TZXJ2aWNlX0RldmljZVNlcnZpY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIwX19bXCJIdHRwU3RhdHVzQ29kZVwiXS5Ob3RGb3VuZCkpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzMDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuQ3VycmVudERldmljZVN0YXR1cy5EZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlID0gX1NlcnZpY2VfRGV2aWNlU2VydmljZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfX1tcIkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGVcIl0uSU5WQUxJRF9TRVJJQUxfTlVNQkVSO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdEZXZpY2VBZGRyZXNzQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIik7XG5cbiAgICAgICAgICAgICAgY2FzZSAzMDpcbiAgICAgICAgICAgICAgICBpZiAoISghYWRkcmVzc1Jlc3BvbnNlLm9rIHx8ICFhZGRyZXNzUmVzcG9uc2VKc29uIHx8ICF0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXMuQWRkcmVzcykpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuQ3VycmVudERldmljZVN0YXR1cy5EZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlID0gX1NlcnZpY2VfRGV2aWNlU2VydmljZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfX1tcIkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGVcIl0uREVWSUNFX1NFUlZJQ0VfRVJST1I7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ0RldmljZUFkZHJlc3NDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXNcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiKTtcblxuICAgICAgICAgICAgICBjYXNlIDM0OlxuICAgICAgICAgICAgICAgIGlmICh0aGlzLkhhc0VmdHBvc0FkZHJlc3NDaGFuZ2VkKHRoaXMuQ3VycmVudERldmljZVN0YXR1cy5BZGRyZXNzKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM4O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzLkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGUgPSBfU2VydmljZV9EZXZpY2VTZXJ2aWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fW1wiRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZVwiXS5BRERSRVNTX05PVF9DSEFOR0VEO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdEZXZpY2VBZGRyZXNzQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzXG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIik7XG5cbiAgICAgICAgICAgICAgY2FzZSAzODpcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgZGV2aWNlIGFuZCBjb25uZWN0aW9uIGFkZHJlc3NcbiAgICAgICAgICAgICAgICBwcm90b2NvbCA9IGlzU2VjdXJlQ29ubmVjdGlvbiA/IFwid3NzXCIgOiBcIndzXCI7XG4gICAgICAgICAgICAgICAgdGhpcy5fZWZ0cG9zQWRkcmVzcyA9IHByb3RvY29sICsgXCI6Ly9cIiArIHRoaXMuQ3VycmVudERldmljZVN0YXR1cy5BZGRyZXNzO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm4uQWRkcmVzcyA9IHRoaXMuX2VmdHBvc0FkZHJlc3M7XG4gICAgICAgICAgICAgICAgdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzLkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGUgPSBfU2VydmljZV9EZXZpY2VTZXJ2aWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fW1wiRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZVwiXS5TVUNDRVNTO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdEZXZpY2VBZGRyZXNzQ2hhbmdlZCcsIHtcbiAgICAgICAgICAgICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzXG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNDM6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcywgW1s3LCAxN11dKTtcbiAgICAgIH0pKTtcblxuICAgICAgZnVuY3Rpb24gX2F1dG9SZXNvbHZlRWZ0cG9zQWRkcmVzcygpIHtcbiAgICAgICAgcmV0dXJuIF9hdXRvUmVzb2x2ZUVmdHBvc0FkZHJlc3MyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfYXV0b1Jlc29sdmVFZnRwb3NBZGRyZXNzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiBcIl9pc1VzaW5nSHR0cHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzVXNpbmdIdHRwcygpIHtcbiAgICAgIHJldHVybiAnaHR0cHM6JyA9PSBkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCA/IHRydWUgOiBmYWxzZTtcbiAgICB9IC8vIGRldGVybWluZSB3aGV0aGVyIHRvIHVzZSB3c3Mgb3Igbm90XG5cbiAgfSwge1xuICAgIGtleTogXCJfaXNTZWN1cmVDb25uZWN0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pc1NlY3VyZUNvbm5lY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5faXNVc2luZ0h0dHBzKCkgfHwgdGhpcy5fZm9yY2VTZWN1cmVXZWJTb2NrZXRzO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcIkdldFZlcnNpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VmVyc2lvbigpIHtcbiAgICAgIHJldHVybiBTUElfVkVSU0lPTjtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3BpO1xufSgpO1xuXG5cblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvU3BpTW9kZWxzLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9TcGlNb2RlbHMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IFNwaVN0YXR1cywgU3BpRmxvdywgUGFpcmluZ0Zsb3dTdGF0ZSwgVHJhbnNhY3Rpb25UeXBlLCBJbml0aWF0ZVR4UmVzdWx0LCBNaWRUeFJlc3VsdCwgVHJhbnNhY3Rpb25GbG93U3RhdGUsIFN1Ym1pdEF1dGhDb2RlUmVzdWx0LCBTcGlDb25maWcsIFRyYW5zYWN0aW9uT3B0aW9ucyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTcGlTdGF0dXNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTcGlTdGF0dXM7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNwaUZsb3dcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTcGlGbG93OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQYWlyaW5nRmxvd1N0YXRlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUGFpcmluZ0Zsb3dTdGF0ZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVHJhbnNhY3Rpb25UeXBlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gVHJhbnNhY3Rpb25UeXBlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJJbml0aWF0ZVR4UmVzdWx0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gSW5pdGlhdGVUeFJlc3VsdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTWlkVHhSZXN1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNaWRUeFJlc3VsdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVHJhbnNhY3Rpb25GbG93U3RhdGVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUcmFuc2FjdGlvbkZsb3dTdGF0ZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU3VibWl0QXV0aENvZGVSZXN1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTdWJtaXRBdXRoQ29kZVJlc3VsdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU3BpQ29uZmlnXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU3BpQ29uZmlnOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJUcmFuc2FjdGlvbk9wdGlvbnNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUcmFuc2FjdGlvbk9wdGlvbnM7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NZXNzYWdlcyAqLyBcIi4vc3JjL01lc3NhZ2VzLmpzXCIpO1xuXG5cbiAvLyA8c3VtbWFyeT5cbi8vIFJlcHJlc2VudHMgdGhlIDMgUGFpcmluZyBzdGF0dXNlcyB0aGF0IHRoZSBTcGkgaW5zdGFueGNlIGNhbiBiZSBpbi5cbi8vIDwvc3VtbWFyeT5cblxudmFyIFNwaVN0YXR1cyA9IHtcbiAgLy8gPHN1bW1hcnk+XG4gIC8vIFBhaXJlZCBhbmQgQ29ubmVjdGVkXG4gIC8vIDwvc3VtbWFyeT5cbiAgUGFpcmVkQ29ubmVjdGVkOiAnUGFpcmVkQ29ubmVjdGVkJyxcbiAgLy8gPHN1bW1hcnk+XG4gIC8vIFBhaXJlZCBidXQgdHJ5aW5nIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gXG4gIC8vIDwvc3VtbWFyeT5cbiAgUGFpcmVkQ29ubmVjdGluZzogJ1BhaXJlZENvbm5lY3RpbmcnLFxuICAvLyA8c3VtbWFyeT5cbiAgLy8gVW5wYWlyZWRcbiAgLy8gPC9zdW1tYXJ5PlxuICBVbnBhaXJlZDogJ1VucGFpcmVkJ1xufTsgLy8gPHN1bW1hcnk+XG4vLyBUaGUgU3BpIGluc3RhbmNlIGNhbiBiZSBpbiBvbmUgb2YgdGhlc2UgZmxvd3MgYXQgYW55IHBvaW50IGluIHRpbWUuXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBTcGlGbG93ID0ge1xuICAvLyA8c3VtbWFyeT5cbiAgLy8gQ3VycmVudGx5IGdvaW5nIHRocm91Z2ggdGhlIFBhaXJpbmcgUHJvY2VzcyBGbG93LlxuICAvLyBIYXBwZW5zIGR1cmluZyB0aGUgVW5wYWlyZWQgU3BpU3RhdHVzLlxuICAvLyA8L3N1bW1hcnk+XG4gIFBhaXJpbmc6ICdQYWlyaW5nJyxcbiAgLy8gPHN1bW1hcnk+XG4gIC8vIEN1cnJlbnRseSBnb2luZyB0aHJvdWdoIHRoZSB0cmFuc2FjdGlvbiBQcm9jZXNzIEZsb3cuXG4gIC8vIENhbm5vdCBoYXBwZW4gaW4gdGhlIFVucGFpcmVkIFNwaVN0YXR1cy5cbiAgLy8gPC9zdW1tYXJ5PlxuICBUcmFuc2FjdGlvbjogJ1RyYW5zYWN0aW9uJyxcbiAgLy8gPHN1bW1hcnk+XG4gIC8vIE5vdCBpbiBhbnkgb2YgdGhlIG90aGVyIHN0YXRlcy5cbiAgLy8gPC9zdW1tYXJ5PlxuICBJZGxlOiAnSWRsZSdcbn07IC8vIDxzdW1tYXJ5PlxuLy8gUmVwcmVzZW50cyB0aGUgUGFpcmluZyBGbG93IFN0YXRlIGR1cmluZyB0aGUgcGFpcmluZyBwcm9jZXNzIFxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgUGFpcmluZ0Zsb3dTdGF0ZSA9IGZ1bmN0aW9uIFBhaXJpbmdGbG93U3RhdGUoc3RhdGUpIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKSh0aGlzLCBQYWlyaW5nRmxvd1N0YXRlKTtcblxuICAvLyA8c3VtbWFyeT5cbiAgLy8gU29tZSB0ZXh0IHRoYXQgY2FuIGJlIGRpc3BsYXllZCBpbiB0aGUgUGFpcmluZyBQcm9jZXNzIFNjcmVlblxuICAvLyB0aGF0IGluZGljYXRlcyB3aGF0IHRoZSBwYWlyaW5nIHByb2Nlc3MgaXMgdXAgdG8uXG4gIC8vIDwvc3VtbWFyeT5cbiAgdGhpcy5NZXNzYWdlID0gbnVsbDsgLy8gPHN1bW1hcnk+XG4gIC8vIFdoZW4gdHJ1ZSwgaXQgbWVhbnMgdGhhdCB0aGUgRUZUUE9TIGlzIHNob2luZyB0aGUgY29uZmlybWF0aW9uIGNvZGUsXG4gIC8vIGFuZCB5b3VyIHVzZXIgbmVlZHMgdG8gcHJlc3MgWUVTIG9yIE5PIG9uIHRoZSBFRlRQT1MuXG4gIC8vIDwvc3VtbWFyeT5cblxuICB0aGlzLkF3YWl0aW5nQ2hlY2tGcm9tRWZ0cG9zID0gbnVsbDsgLy8gPHN1bW1hcnk+XG4gIC8vIFdoZW4gdHJ1ZSwgeW91IG5lZWQgdG8gZGlzcGxheSB0aGUgWUVTL05PIGJ1dHRvbnMgb24geW91IHBhaXJpbmcgc2NyZWVuXG4gIC8vIGZvciB5b3VyIHVzZXIgdG8gY29uZmlybSB0aGUgY29kZS5cbiAgLy8gPC9zdW1tYXJ5PlxuXG4gIHRoaXMuQXdhaXRpbmdDaGVja0Zyb21Qb3MgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgLy8gVGhpcyBpcyB0aGUgY29uZmlybWF0aW9uIGNvZGUgZm9yIHRoZSBwYWlyaW5nIHByb2Nlc3MuXG4gIC8vIDwvc3VtbWFyeT5cblxuICB0aGlzLkNvbmZpcm1hdGlvbkNvZGUgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgLy8gSW5kaWNhdGVzIHdoZXRoZXIgdGhlIFBhaXJpbmcgRmxvdyBoYXMgZmluaXNoZWQgaXRzIGpvYi5cbiAgLy8gPC9zdW1tYXJ5PlxuXG4gIHRoaXMuRmluaXNoZWQgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgLy8gSW5kaWNhdGVzIHdoZXRoZXIgcGFpcmluZyB3YXMgc3VjY2Vzc2Z1bCBvciBub3QuXG4gIC8vIDwvc3VtbWFyeT5cblxuICB0aGlzLlN1Y2Nlc3NmdWwgPSBudWxsO1xuXG4gIGlmIChzdGF0ZSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgc3RhdGUpO1xuICB9XG59O1xudmFyIFRyYW5zYWN0aW9uVHlwZSA9IHtcbiAgUHVyY2hhc2U6ICdQdXJjaGFzZScsXG4gIFJlZnVuZDogJ1JlZnVuZCcsXG4gIENhc2hvdXRPbmx5OiAnQ2FzaG91dE9ubHknLFxuICBNT1RPOiAnTU9UTycsXG4gIFNldHRsZTogJ1NldHRsZScsXG4gIFNldHRsZW1lbnRFbnF1aXJ5OiAnU2V0dGxlbWVudEVucXVpcnknLFxuICBHZXRMYXN0VHJhbnNhY3Rpb246ICdHZXRMYXN0VHJhbnNhY3Rpb24nLFxuICBQcmVhdXRoOiAnUHJlYXV0aCcsXG4gIEFjY291bnRWZXJpZnk6ICdBY2NvdW50VmVyaWZ5J1xufTsgLy8gPHN1bW1hcnk+XG4vLyBVc2VkIGFzIGEgcmV0dXJuIGluIHRoZSBJbml0aWF0ZVR4IG1ldGhvZHMgdG8gc2lnbmlmeSB3aGV0aGVyIFxuLy8gdGhlIHRyYW5zYWN0aW9uIHdhcyBpbml0aWF0ZWQgb3Igbm90LCBhbmQgYSByZWFzb24gdG8gZ28gd2l0aCBpdC5cbi8vIDwvc3VtbWFyeT5cblxudmFyIEluaXRpYXRlVHhSZXN1bHQgPSBmdW5jdGlvbiBJbml0aWF0ZVR4UmVzdWx0KGluaXRpYXRlZCwgbWVzc2FnZSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIEluaXRpYXRlVHhSZXN1bHQpO1xuXG4gIC8vIDxzdW1tYXJ5PlxuICAvLyBXaGV0aGVyIHRoZSB0eCB3YXMgaW5pdGlhdGVkLlxuICAvLyBXaGVuIHRydWUsIHlvdSBjYW4gZXhwZWN0IHVwZGF0ZWQgdG8geW91ciByZWdpc3RlcmVkIGNhbGxiYWNrLlxuICAvLyBXaGVuIGZhbHNlLCB5b3UgY2FuIHJldHJ5IGNhbGxpbmcgdGhlIEluaXRpYXRlWCBtZXRob2QuXG4gIC8vIDwvc3VtbWFyeT5cbiAgdGhpcy5Jbml0aWF0ZWQgPSBpbml0aWF0ZWQ7IC8vIDxzdW1tYXJ5PlxuICAvLyBUZXh0IHRoYXQgZ2l2ZXMgcmVhc29uIGZvciB0aGUgSW5pdGlhdGVkIGZsYWcsIGVzcGVjaWFsbHkgaW4gY2FzZSBvZiBmYWxzZS4gXG4gIC8vIDwvc3VtbWFyeT5cblxuICB0aGlzLk1lc3NhZ2UgPSBtZXNzYWdlO1xufTsgLy8gPHN1bW1hcnk+XG4vLyBVc2VkIGFzIGEgcmV0dXJuIGluIGNhbGxzIG1pZCB0cmFuc2FjdGlvbiB0byBsZXQgeW91IGtub3dcbi8vIHdoZXRoZXIgdGhlIGNhbGwgd2FzIHZhbGlkIG9yIG5vdC5cbi8vIFRoZXNlIGF0dHJpYnV0ZXMgd29yayBmb3IgQ09NIGludGVyb3AuXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBNaWRUeFJlc3VsdCA9IC8vIDxzdW1tYXJ5PlxuLy8gVGhpcyBkZWZhdWx0IHN0dWN0dXJlIHdvcmtzIGZvciBDT00gaW50ZXJvcC5cbi8vIDwvc3VtbWFyeT5cbmZ1bmN0aW9uIE1pZFR4UmVzdWx0KHZhbGlkLCBtZXNzYWdlKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkodGhpcywgTWlkVHhSZXN1bHQpO1xuXG4gIHRoaXMuVmFsaWQgPSB2YWxpZDtcbiAgdGhpcy5NZXNzYWdlID0gbWVzc2FnZTtcbn07IC8vIDxzdW1tYXJ5PlxuLy8gUmVwcmVzZW50cyB0aGUgU3RhdGUgZHVyaW5nIGEgVHJhbnNhY3Rpb25GbG93XG4vLyA8L3N1bW1hcnk+XG5cbnZhciBUcmFuc2FjdGlvbkZsb3dTdGF0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRyYW5zYWN0aW9uRmxvd1N0YXRlKHBvc1JlZklkLCB0eXBlLCBhbW91bnRDZW50cywgbWVzc2FnZSwgbXNnKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKSh0aGlzLCBUcmFuc2FjdGlvbkZsb3dTdGF0ZSk7XG5cbiAgICAvLyA8c3VtbWFyeT5cbiAgICAvLyAgVGhlIGlkIGdpdmVuIHRvIHRoaXMgdHJhbnNhY3Rpb25cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuSWQgPSBwb3NSZWZJZDsgLy8gb2Jzb2xldGUsIGJ1dCBsZXQncyBtYWludGFpbiBpdCBmb3Igbm93LCB0byBtZWFuIHNhbWUgYXMgUG9zUmVmSWQuXG4gICAgLy8gPHN1bW1hcnk+XG4gICAgLy8gUHVyY2hhc2UvUmVmdW5kL1NldHRsZS8uLi5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLlR5cGUgPSB0eXBlOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBBIHRleHQgbWVzc2FnZSB0byBkaXNwbGF5IG9uIHlvdXIgVHJhbnNhY3Rpb24gRmxvdyBTY3JlZW5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkRpc3BsYXlNZXNzYWdlID0gbXNnOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBBbW91bnQgaW4gY2VudHMgZm9yIHRoaXMgdHJhbnNhY3Rpb25cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkFtb3VudENlbnRzID0gYW1vdW50Q2VudHM7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFdodGhlciB0aGUgcmVxdWVzdCBoYXMgYmVlbiBzZW50IHRvIHRoZSBFRlRQT1MgeWV0IG9yIG5vdC5cbiAgICAvLyBJbiB0aGUgUGFpcmVkQ29ubmVjdGluZyBzdGF0ZSwgdGhlIHRyYW5zYWN0aW9uIGlzIGluaXRpYXRlZFxuICAgIC8vIGJ1dCB0aGUgcmVxdWVzdCBpcyBvbmx5IHNlbnQgb25jZSB0aGUgY29ubmVjdGlvbiBpcyByZWNvdmVyZWQuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5SZXF1ZXN0U2VudCA9IGZhbHNlOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgdGltZSB3aGVuIHRoZSByZXF1ZXN0IHdhcyBzZW50IHRvIHRoZSBFRlRQT1MuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5SZXF1ZXN0VGltZSA9IG51bGw7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSB0aW1lIHdoZW4gd2UgbGFzdCBhc2tlZCBmb3IgYW4gdXBkYXRlLCBpbmNsdWRpbmcgdGhlIG9yaWdpbmFsIHJlcXVlc3QgYXQgZmlyc3RcbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkxhc3RTdGF0ZVJlcXVlc3RUaW1lID0gbnVsbDsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIGlkIG9mIHRoZSBsYXN0IGdsdCByZXF1ZXN0IG1lc3NhZ2UgdGhhdCB3YXMgc2VudC4gdXNlZCB0byBtYXRjaCB3aXRoIHRoZSByZXNwb25zZS5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkxhc3RHbHRSZXF1ZXN0SWQgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBXaGV0aGVyIHdlJ3JlIGN1cnJlbnRseSBhdHRlbXB0aW5nIHRvIENhbmNlbCB0aGUgdHJhbnNhY3Rpb24uXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5BdHRlbXB0aW5nVG9DYW5jZWwgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBXaGVuIHRoaXMgZmxhZyBpcyBvbiwgeW91IG5lZWQgdG8gZGlzcGxheSB0aGUgZGlnbmF0dXJlIGFjY2VwdC9kZWNsaW5lIGJ1dHRvbnMgaW4geW91ciBcbiAgICAvLyB0cmFuc2FjdGlvbiBmbG93IHNjcmVlbi5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkF3YWl0aW5nU2lnbmF0dXJlQ2hlY2sgPSBmYWxzZTsgLy8gPHN1bW1hcnk+XG4gICAgLy8gV2hlbiB0aGlzIGZsYWcgaXMgb24sIHlvdSBuZWVkIHRvIHNob3cgeW91ciB1c2VyIHRoZSBwaG9uZSBudW1iZXIgdG8gY2FsbCB0byBnZXQgdGhlIGF1dGhvcmlzYXRpb24gY29kZS5cbiAgICAvLyBUaGVuIHlvdSBuZWVkIHRvIHByb3ZpZGUgeW91ciB1c2VyIG1lYW5zIHRvIGVudGVyIHRoYXQgZ2l2ZW4gY29kZSBhbmQgc3VibWl0IGl0IHZpYSBTdWJtaXRBdXRoQ29kZSgpLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuQXdhaXRpbmdQaG9uZUZvckF1dGggPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBXaGV0aGVyIHRoaXMgdHJhbnNhY3Rpb24gZmxvdyBpcyBvdmVyIG9yIG5vdC5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkZpbmlzaGVkID0gZmFsc2U7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBzdWNjZXNzIHN0YXRlIG9mIHRoaXMgdHJhbnNhY3Rpb24uIFN0YXJ0cyBvZmYgYXMgVW5rbm93bi5cbiAgICAvLyBXaGVuIGZpbmlzaGVkLCBjYW4gYmUgU3VjY2VzcywgRmFpbGVkIE9SIFVua25vd24uXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5TdWNjZXNzID0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJTdWNjZXNzU3RhdGVcIl0uVW5rbm93bjsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIHJlc3BvbnNlIGF0IHRoZSBlbmQgb2YgdGhlIHRyYW5zYWN0aW9uLiBcbiAgICAvLyBNaWdodCBub3QgYmUgcHJlc2VudCBpbiBhbGwgZWRnZSBjYXNlcy5cbiAgICAvLyBZb3UgY2FuIHRoZW4gdHVybiB0aGlzIE1lc3NhZ2UgaW50byB0aGUgYXBwcm9wcmlhdGUgc3RydWN0dXJlLFxuICAgIC8vIHN1Y2ggYXMgUHVyY2hhc2VSZXNwb25zZSwgUmVmdW5kUmVzcG9uc2UsIGV0Y1xuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuUmVzcG9uc2UgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgbWVzc2FnZSB0aGUgd2UgcmVjZWl2ZWQgZnJvbSBFRlRQT1MgdGhhdCB0b2xkIHVzIHRoYXQgc2lnbmF0dXJlIGlzIHJlcXVpcmVkLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuU2lnbmF0dXJlUmVxdWlyZWRNZXNzYWdlID0gbnVsbDsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIG1lc3NhZ2UgdGhlIHdlIHJlY2VpdmVkIGZyb20gRUZUUE9TIHRoYXQgdG9sZCB1cyB0aGF0IFBob25lIEZvciBBdXRoIGlzIHJlcXVpcmVkLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuUGhvbmVGb3JBdXRoUmVxdWlyZWRNZXNzYWdlID0gbnVsbDsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIHRpbWUgd2hlbiB0aGUgY2FuY2VsIGF0dGVtcHQgd2FzIG1hZGUuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5DYW5jZWxBdHRlbXB0VGltZSA9IG51bGw7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSByZXF1ZXN0IG1lc3NhZ2UgdGhhdCB3ZSBhcmUgc2VuZGluZy9zZW50IHRvIHRoZSBzZXJ2ZXIuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5SZXF1ZXN0ID0gbWVzc2FnZTsgLy8gPHN1bW1hcnk+XG4gICAgLy8gV2hldGhlciB3ZSdyZSBjdXJyZW50bHkgd2FpdGluZyBmb3IgYSBHZXQgTGFzdCBUcmFuc2FjdGlvbiBSZXNwb25zZSB0byBnZXQgYW4gdXBkYXRlLiBcbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkF3YWl0aW5nR2x0UmVzcG9uc2UgPSBudWxsO1xuICAgIHRoaXMuR0xUUmVzcG9uc2VQb3NSZWZJZCA9IG51bGw7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKFRyYW5zYWN0aW9uRmxvd1N0YXRlLCBbe1xuICAgIGtleTogXCJTZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNlbnQobXNnKSB7XG4gICAgICB0aGlzLlJlcXVlc3RTZW50ID0gdHJ1ZTtcbiAgICAgIHRoaXMuUmVxdWVzdFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgdGhpcy5MYXN0U3RhdGVSZXF1ZXN0VGltZSA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLkRpc3BsYXlNZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJDYW5jZWxsaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIENhbmNlbGxpbmcobXNnKSB7XG4gICAgICB0aGlzLkF0dGVtcHRpbmdUb0NhbmNlbCA9IHRydWU7XG4gICAgICB0aGlzLkNhbmNlbEF0dGVtcHRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIHRoaXMuRGlzcGxheU1lc3NhZ2UgPSBtc2c7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkNhbmNlbEZhaWxlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDYW5jZWxGYWlsZWQobXNnKSB7XG4gICAgICB0aGlzLkF0dGVtcHRpbmdUb0NhbmNlbCA9IGZhbHNlO1xuICAgICAgdGhpcy5EaXNwbGF5TWVzc2FnZSA9IG1zZztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiQ2FsbGluZ0dsdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDYWxsaW5nR2x0KGdsdFJlcXVlc3RJZCkge1xuICAgICAgdGhpcy5Bd2FpdGluZ0dsdFJlc3BvbnNlID0gdHJ1ZTtcbiAgICAgIHRoaXMuTGFzdFN0YXRlUmVxdWVzdFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgdGhpcy5MYXN0R2x0UmVxdWVzdElkID0gZ2x0UmVxdWVzdElkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHb3RHbHRSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHb3RHbHRSZXNwb25zZSgpIHtcbiAgICAgIHRoaXMuQXdhaXRpbmdHbHRSZXNwb25zZSA9IGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJGYWlsZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gRmFpbGVkKHJlc3BvbnNlLCBtc2cpIHtcbiAgICAgIHRoaXMuU3VjY2VzcyA9IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiU3VjY2Vzc1N0YXRlXCJdLkZhaWxlZDtcbiAgICAgIHRoaXMuRmluaXNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5SZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgdGhpcy5EaXNwbGF5TWVzc2FnZSA9IG1zZztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiU2lnbmF0dXJlUmVxdWlyZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2lnbmF0dXJlUmVxdWlyZWQoc3BpTWVzc2FnZSwgbXNnKSB7XG4gICAgICB0aGlzLlNpZ25hdHVyZVJlcXVpcmVkTWVzc2FnZSA9IHNwaU1lc3NhZ2U7XG4gICAgICB0aGlzLkF3YWl0aW5nU2lnbmF0dXJlQ2hlY2sgPSB0cnVlO1xuICAgICAgdGhpcy5EaXNwbGF5TWVzc2FnZSA9IG1zZztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiU2lnbmF0dXJlUmVzcG9uZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNpZ25hdHVyZVJlc3BvbmRlZChtc2cpIHtcbiAgICAgIHRoaXMuQXdhaXRpbmdTaWduYXR1cmVDaGVjayA9IGZhbHNlO1xuICAgICAgdGhpcy5EaXNwbGF5TWVzc2FnZSA9IG1zZztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiUGhvbmVGb3JBdXRoUmVxdWlyZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gUGhvbmVGb3JBdXRoUmVxdWlyZWQoc3BpTWVzc2FnZSwgbXNnKSB7XG4gICAgICB0aGlzLlBob25lRm9yQXV0aFJlcXVpcmVkTWVzc2FnZSA9IHNwaU1lc3NhZ2U7XG4gICAgICB0aGlzLkF3YWl0aW5nUGhvbmVGb3JBdXRoID0gdHJ1ZTtcbiAgICAgIHRoaXMuRGlzcGxheU1lc3NhZ2UgPSBtc2c7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkF1dGhDb2RlU2VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBBdXRoQ29kZVNlbnQobXNnKSB7XG4gICAgICB0aGlzLkF3YWl0aW5nUGhvbmVGb3JBdXRoID0gZmFsc2U7XG4gICAgICB0aGlzLkRpc3BsYXlNZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJDb21wbGV0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQ29tcGxldGVkKHN0YXRlLCByZXNwb25zZSwgbXNnKSB7XG4gICAgICB0aGlzLlN1Y2Nlc3MgPSBzdGF0ZTtcbiAgICAgIHRoaXMuUmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgIHRoaXMuRmluaXNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5BdHRlbXB0aW5nVG9DYW5jZWwgPSBmYWxzZTtcbiAgICAgIHRoaXMuQXdhaXRpbmdHbHRSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgdGhpcy5Bd2FpdGluZ1NpZ25hdHVyZUNoZWNrID0gZmFsc2U7XG4gICAgICB0aGlzLkF3YWl0aW5nUGhvbmVGb3JBdXRoID0gZmFsc2U7XG4gICAgICB0aGlzLkRpc3BsYXlNZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJVbmtub3duQ29tcGxldGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFVua25vd25Db21wbGV0ZWQobXNnKSB7XG4gICAgICB0aGlzLlN1Y2Nlc3MgPSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlN1Y2Nlc3NTdGF0ZVwiXS5Vbmtub3duO1xuICAgICAgdGhpcy5SZXNwb25zZSA9IG51bGw7XG4gICAgICB0aGlzLkZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuQXR0ZW1wdGluZ1RvQ2FuY2VsID0gZmFsc2U7XG4gICAgICB0aGlzLkF3YWl0aW5nR2x0UmVzcG9uc2UgPSBmYWxzZTtcbiAgICAgIHRoaXMuQXdhaXRpbmdTaWduYXR1cmVDaGVjayA9IGZhbHNlO1xuICAgICAgdGhpcy5Bd2FpdGluZ1Bob25lRm9yQXV0aCA9IGZhbHNlO1xuICAgICAgdGhpcy5EaXNwbGF5TWVzc2FnZSA9IG1zZztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVHJhbnNhY3Rpb25GbG93U3RhdGU7XG59KCk7IC8vIDxzdW1tYXJ5PlxuLy8gVXNlZCBhcyBhIHJldHVybiBpbiB0aGUgU3VibWl0QXV0aENvZGUgbWV0aG9kIHRvIHNpZ25pZnkgd2hldGhlciBDb2RlIGlzIHZhbGlkXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBTdWJtaXRBdXRoQ29kZVJlc3VsdCA9IGZ1bmN0aW9uIFN1Ym1pdEF1dGhDb2RlUmVzdWx0KHZhbGlkRm9ybWF0LCBtZXNzYWdlKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkodGhpcywgU3VibWl0QXV0aENvZGVSZXN1bHQpO1xuXG4gIHRoaXMuVmFsaWRGb3JtYXQgPSB2YWxpZEZvcm1hdDsgLy8gPHN1bW1hcnk+XG4gIC8vIFRleHQgdGhhdCBnaXZlcyByZWFzb24gZm9yIEludmFsaWRpdHlcbiAgLy8gPC9zdW1tYXJ5PlxuXG4gIHRoaXMuTWVzc2FnZSA9IG1lc3NhZ2U7XG59O1xudmFyIFNwaUNvbmZpZyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNwaUNvbmZpZygpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIFNwaUNvbmZpZyk7XG5cbiAgICB0aGlzLlByaW50TWVyY2hhbnRDb3B5ID0gZmFsc2U7XG4gICAgdGhpcy5Qcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IGZhbHNlO1xuICAgIHRoaXMuU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gZmFsc2U7XG4gICAgdGhpcy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkgPSBmYWxzZTtcbiAgICB0aGlzLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IGZhbHNlO1xuICAgIHRoaXMuRW5hYmxlZFNpZ25hdHVyZUZsb3dPbkVmdHBvcyA9IGZhbHNlO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKShTcGlDb25maWcsIFt7XG4gICAga2V5OiBcIkFkZFJlY2VpcHRDb25maWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQWRkUmVjZWlwdENvbmZpZyhtZXNzYWdlRGF0YSkge1xuICAgICAgaWYgKHRoaXMuUHJvbXB0Rm9yQ3VzdG9tZXJDb3B5T25FZnRwb3MgJiYgdGhpcy5FbmFibGVkUHJvbXB0Rm9yQ3VzdG9tZXJDb3B5T25FZnRwb3MpIHtcbiAgICAgICAgbWVzc2FnZURhdGEucHJvbXB0X2Zvcl9jdXN0b21lcl9jb3B5ID0gdGhpcy5Qcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuU2lnbmF0dXJlRmxvd09uRWZ0cG9zICYmIHRoaXMuRW5hYmxlZFNpZ25hdHVyZUZsb3dPbkVmdHBvcykge1xuICAgICAgICBtZXNzYWdlRGF0YS5wcmludF9mb3Jfc2lnbmF0dXJlX3JlcXVpcmVkX3RyYW5zYWN0aW9ucyA9IHRoaXMuU2lnbmF0dXJlRmxvd09uRWZ0cG9zO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5QcmludE1lcmNoYW50Q29weSAmJiB0aGlzLkVuYWJsZWRQcmludE1lcmNoYW50Q29weSkge1xuICAgICAgICBtZXNzYWdlRGF0YS5wcmludF9tZXJjaGFudF9jb3B5ID0gdGhpcy5QcmludE1lcmNoYW50Q29weTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1lc3NhZ2VEYXRhO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJUb1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb1N0cmluZygpIHtcbiAgICAgIHJldHVybiBcIlByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zOlwiLmNvbmNhdCh0aGlzLlByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zLCBcIiBTaWduYXR1cmVGbG93T25FZnRwb3M6XCIpLmNvbmNhdCh0aGlzLlNpZ25hdHVyZUZsb3dPbkVmdHBvcywgXCIgUHJpbnRNZXJjaGFudENvcHk6IFwiKS5jb25jYXQodGhpcy5QcmludE1lcmNoYW50Q29weSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNwaUNvbmZpZztcbn0oKTtcbnZhciBUcmFuc2FjdGlvbk9wdGlvbnMgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUcmFuc2FjdGlvbk9wdGlvbnMoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKSh0aGlzLCBUcmFuc2FjdGlvbk9wdGlvbnMpO1xuXG4gICAgdGhpcy5fY3VzdG9tZXJSZWNlaXB0SGVhZGVyID0gXCJcIjtcbiAgICB0aGlzLl9jdXN0b21lclJlY2VpcHRGb290ZXIgPSBcIlwiO1xuICAgIHRoaXMuX21lcmNoYW50UmVjZWlwdEhlYWRlciA9IFwiXCI7XG4gICAgdGhpcy5fbWVyY2hhbnRSZWNlaXB0Rm9vdGVyID0gXCJcIjtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkoVHJhbnNhY3Rpb25PcHRpb25zLCBbe1xuICAgIGtleTogXCJTZXRDdXN0b21lclJlY2VpcHRIZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2V0Q3VzdG9tZXJSZWNlaXB0SGVhZGVyKGN1c3RvbWVyUmVjZWlwdEhlYWRlcikge1xuICAgICAgdGhpcy5fY3VzdG9tZXJSZWNlaXB0SGVhZGVyID0gY3VzdG9tZXJSZWNlaXB0SGVhZGVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJTZXRDdXN0b21lclJlY2VpcHRGb290ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2V0Q3VzdG9tZXJSZWNlaXB0Rm9vdGVyKGN1c3RvbWVyUmVjZWlwdEZvb3Rlcikge1xuICAgICAgdGhpcy5fY3VzdG9tZXJSZWNlaXB0Rm9vdGVyID0gY3VzdG9tZXJSZWNlaXB0Rm9vdGVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJTZXRNZXJjaGFudFJlY2VpcHRIZWFkZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2V0TWVyY2hhbnRSZWNlaXB0SGVhZGVyKG1lcmNoYW50UmVjZWlwdEhlYWRlcikge1xuICAgICAgdGhpcy5fbWVyY2hhbnRSZWNlaXB0SGVhZGVyID0gbWVyY2hhbnRSZWNlaXB0SGVhZGVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJTZXRNZXJjaGFudFJlY2VpcHRGb290ZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2V0TWVyY2hhbnRSZWNlaXB0Rm9vdGVyKG1lcmNoYW50UmVjZWlwdEZvb3Rlcikge1xuICAgICAgdGhpcy5fbWVyY2hhbnRSZWNlaXB0Rm9vdGVyID0gbWVyY2hhbnRSZWNlaXB0Rm9vdGVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJBZGRPcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEFkZE9wdGlvbnMobWVzc2FnZURhdGEpIHtcbiAgICAgIG1lc3NhZ2VEYXRhLmN1c3RvbWVyX3JlY2VpcHRfaGVhZGVyID0gdGhpcy5fY3VzdG9tZXJSZWNlaXB0SGVhZGVyO1xuICAgICAgbWVzc2FnZURhdGEuY3VzdG9tZXJfcmVjZWlwdF9mb290ZXIgPSB0aGlzLl9jdXN0b21lclJlY2VpcHRGb290ZXI7XG4gICAgICBtZXNzYWdlRGF0YS5tZXJjaGFudF9yZWNlaXB0X2hlYWRlciA9IHRoaXMuX21lcmNoYW50UmVjZWlwdEhlYWRlcjtcbiAgICAgIG1lc3NhZ2VEYXRhLm1lcmNoYW50X3JlY2VpcHRfZm9vdGVyID0gdGhpcy5fbWVyY2hhbnRSZWNlaXB0Rm9vdGVyO1xuICAgICAgcmV0dXJuIG1lc3NhZ2VEYXRhO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUcmFuc2FjdGlvbk9wdGlvbnM7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1NwaVBheUF0VGFibGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9TcGlQYXlBdFRhYmxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogU3BpUGF5QXRUYWJsZSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTcGlQYXlBdFRhYmxlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU3BpUGF5QXRUYWJsZTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19yZWFkT25seUVycm9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlYWRPbmx5RXJyb3IgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlYWRPbmx5RXJyb3IuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19yZWFkT25seUVycm9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19yZWFkT25seUVycm9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUmVxdWVzdElkSGVscGVyICovIFwiLi9zcmMvUmVxdWVzdElkSGVscGVyLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1BheUF0VGFibGUgKi8gXCIuL3NyYy9QYXlBdFRhYmxlLmpzXCIpO1xuXG5cblxuXG5cbnZhciBTcGlQYXlBdFRhYmxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3BpUGF5QXRUYWJsZShzcGkpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIFNwaVBheUF0VGFibGUpO1xuXG4gICAgdGhpcy5fc3BpID0gc3BpO1xuICAgIHRoaXMuX2xvZyA9IGNvbnNvbGU7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1BheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlBheUF0VGFibGVDb25maWdcIl0oKTtcbiAgfSAvLyA8c3VtbWFyeT5cbiAgLy8gVGhpcyBkZWxlZ2F0ZSB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBFZnRwb3MgbmVlZHMgdG8ga25vdyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhIGJpbGwgZm9yIGEgdGFibGUuIFxuICAvLyA8cGFyYSAvPlxuICAvLyBQYXJhbWV0ZXJzOjxwYXJhIC8+XG4gIC8vIGJpbGxJZCAtIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvZiB0aGUgYmlsbC4gSWYgZW1wdHksIGl0IG1lYW5zIHRoYXQgdGhlIFBheUF0VGFibGUgZmxvdyBvbiB0aGUgRWZ0cG9zIGlzIGp1c3Qgc3RhcnRpbmcsIGFuZCB0aGUgbG9va3VwIGlzIGJ5IHRhYmxlSWQuPHBhcmEgLz5cbiAgLy8gdGFibGVJZCAtIFRoZSBpZGVudGlmaWVyIG9mIHRoZSB0YWJsZSB0aGF0IHRoZSBiaWxsIGlzIGZvci4gPHBhcmEgLz5cbiAgLy8gb3BlcmF0b3JJZCAtIFRoZSBpZCBvZiB0aGUgb3BlcmF0b3IgZW50ZXJlZCBvbiB0aGUgZWZ0cG9zLiA8cGFyYSAvPlxuICAvLyA8cGFyYSAvPlxuICAvLyBSZXR1cm46PHBhcmEgLz5cbiAgLy8gWW91IG5lZWQgdG8gcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBiaWxsLlxuICAvLyA8L3N1bW1hcnk+XG5cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCgpKFNwaVBheUF0VGFibGUsIFt7XG4gICAga2V5OiBcIkdldEJpbGxTdGF0dXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmlsbFN0YXR1cyhiaWxsSWQsIHRhYmxlSWQsIG9wZXJhdG9ySWQsIHBheW1lbnRGbG93U3RhcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLiBQbGVhc2Ugb3ZlcndyaXRlIHRoaXMgbWV0aG9kIGluIHlvdXIgUE9TJyk7XG4gICAgfSAvLyBBYnN0cmFjdCBtZXRob2QsIG11c3QgaW1wbGVtZW50IGluIFBPUyBzeXN0ZW1cblxuICB9LCB7XG4gICAga2V5OiBcIkJpbGxQYXltZW50UmVjZWl2ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQmlsbFBheW1lbnRSZWNlaXZlZChiaWxsUGF5bWVudCwgdXBkYXRlZEJpbGxEYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuIFBsZWFzZSBvdmVyd3JpdGUgdGhpcyBtZXRob2QgaW4geW91ciBQT1MnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0T3BlblRhYmxlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRPcGVuVGFibGVzKG9wZXJhdG9ySWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4gUGxlYXNlIG92ZXJ3cml0ZSB0aGlzIG1ldGhvZCBpbiB5b3VyIFBPUycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJCaWxsUGF5bWVudEZsb3dFbmRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBCaWxsUGF5bWVudEZsb3dFbmRlZChtZXNzYWdlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuIFBsZWFzZSBvdmVyd3JpdGUgdGhpcyBtZXRob2QgaW4geW91ciBQT1MnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiUHVzaFBheUF0VGFibGVDb25maWdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gUHVzaFBheUF0VGFibGVDb25maWcoKSB7XG4gICAgICB0aGlzLl9zcGkuX3NlbmQodGhpcy5Db25maWcuVG9NZXNzYWdlKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInBhdGNvbmZcIikpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUdldEJpbGxEZXRhaWxzUmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlR2V0QmlsbERldGFpbHNSZXF1ZXN0KG0pIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBvcGVyYXRvcklkID0gbS5EYXRhW1wib3BlcmF0b3JfaWRcIl07XG4gICAgICB2YXIgdGFibGVJZCA9IG0uRGF0YVtcInRhYmxlX2lkXCJdO1xuICAgICAgdmFyIHBheW1lbnRGbG93U3RhcnRlZCA9IG0uRGF0YVtcInBheW1lbnRfZmxvd19zdGFydGVkXCJdOyAvLyBBc2sgUE9TIGZvciBCaWxsIERldGFpbHMgZm9yIHRoaXMgdGFibGVJZCwgaW5sdWRpbmcgZW5jb2RlZCBQYXltZW50RGF0YVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuR2V0QmlsbFN0YXR1cyhcIlwiLCB0YWJsZUlkLCBvcGVyYXRvcklkLCBwYXltZW50Rmxvd1N0YXJ0ZWQpKS50aGVuKGZ1bmN0aW9uIChiaWxsU3RhdHVzKSB7XG4gICAgICAgIGJpbGxTdGF0dXMuVGFibGVJZCA9IHRhYmxlSWQ7XG5cbiAgICAgICAgaWYgKGJpbGxTdGF0dXMuVG90YWxBbW91bnQgPD0gMCkge1xuICAgICAgICAgIF90aGlzLl9sb2cuaW5mbyhcIlRhYmxlIGhhcyAwIHRvdGFsIGFtb3VudC4gbm90IHNlbmRpbmcgaXQgdG8gZWZ0cG9zLlwiKTtcblxuICAgICAgICAgIGJpbGxTdGF0dXMuUmVzdWx0ID0gX1BheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkJpbGxSZXRyaWV2YWxSZXN1bHRcIl0uSU5WQUxJRF9UQUJMRV9JRDtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLl9zcGkuX3NlbmQoYmlsbFN0YXR1cy5Ub01lc3NhZ2UobS5JZCkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVCaWxsUGF5bWVudEFkdmljZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlQmlsbFBheW1lbnRBZHZpY2UobSkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBiaWxsUGF5bWVudCA9IG5ldyBfUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiQmlsbFBheW1lbnRcIl0obSk7IC8vIEFzayBQT1MgZm9yIEJpbGwgRGV0YWlscywgaW5sdWRpbmcgZW5jb2RlZCBQYXltZW50RGF0YVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuR2V0QmlsbFN0YXR1cyhiaWxsUGF5bWVudC5CaWxsSWQsIGJpbGxQYXltZW50LlRhYmxlSWQsIGJpbGxQYXltZW50Lk9wZXJhdG9ySWQsIGJpbGxQYXltZW50LlBheW1lbnRGbG93U3RhcnRlZCkpLnRoZW4oZnVuY3Rpb24gKGV4aXN0aW5nQmlsbFN0YXR1cykge1xuICAgICAgICBpZiAoZXhpc3RpbmdCaWxsU3RhdHVzLlJlc3VsdCAhPSBfUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiQmlsbFJldHJpZXZhbFJlc3VsdFwiXS5TVUNDRVNTKSB7XG4gICAgICAgICAgX3RoaXMyLl9sb2cud2FybihcIkNvdWxkIG5vdCByZXRyaWV2ZSBCaWxsIFN0YXR1cyBmb3IgUGF5bWVudCBBZHZpY2UuIFNlbmRpbmcgRXJyb3IgdG8gRWZ0cG9zLlwiKTtcblxuICAgICAgICAgIF90aGlzMi5fc3BpLl9zZW5kKGV4aXN0aW5nQmlsbFN0YXR1cy5Ub01lc3NhZ2UobS5JZCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGV4aXN0aW5nUGF5bWVudEhpc3RvcnkgPSBleGlzdGluZ0JpbGxTdGF0dXMuZ2V0QmlsbFBheW1lbnRIaXN0b3J5KCk7XG4gICAgICAgIHZhciBmb3VuZEV4aXN0aW5nRW50cnkgPSBleGlzdGluZ1BheW1lbnRIaXN0b3J5LmZpbmQoZnVuY3Rpb24gKHBoZSkge1xuICAgICAgICAgIHJldHVybiBwaGUuR2V0VGVybWluYWxSZWZJZCgpID09IGJpbGxQYXltZW50LlB1cmNoYXNlUmVzcG9uc2UuR2V0VGVybWluYWxSZWZlcmVuY2VJZCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZm91bmRFeGlzdGluZ0VudHJ5KSB7XG4gICAgICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IHByb2Nlc3NlZCB0aGlzIHBheW1lbnQuXG4gICAgICAgICAgLy8gcGVyaGFwcyBFZnRwb3MgZGlkIGdldCBvdXIgYWNrbm93bGVkZ2VtZW50LlxuICAgICAgICAgIC8vIExldCdzIHVwZGF0ZSBFZnRwb3MuXG4gICAgICAgICAgX3RoaXMyLl9sb2cud2FybihcIkhhZCBhbHJlYWR5IHJlY2VpdmVkIHRoaXMgYmlsbF9wYXltZW1udCBhZHZpY2UgZnJvbSBlZnRwb3MuIElnbm9yaW5nLlwiKTtcblxuICAgICAgICAgIF90aGlzMi5fc3BpLl9zZW5kKGV4aXN0aW5nQmlsbFN0YXR1cy5Ub01lc3NhZ2UobS5JZCkpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIExldCdzIGFkZCB0aGUgbmV3IGVudHJ5IHRvIHRoZSBoaXN0b3J5XG5cblxuICAgICAgICB2YXIgdXBkYXRlZEhpc3RvcnlFbnRyaWVzID0gZXhpc3RpbmdQYXltZW50SGlzdG9yeTtcbiAgICAgICAgdXBkYXRlZEhpc3RvcnlFbnRyaWVzLnB1c2gobmV3IF9QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJQYXltZW50SGlzdG9yeUVudHJ5XCJdKGJpbGxQYXltZW50LlBheW1lbnRUeXBlLnRvTG93ZXJDYXNlKCksIGJpbGxQYXltZW50LlB1cmNoYXNlUmVzcG9uc2UuVG9QYXltZW50U3VtbWFyeSgpKSk7XG4gICAgICAgIHZhciB1cGRhdGVkQmlsbERhdGEgPSBfUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiQmlsbFN0YXR1c1Jlc3BvbnNlXCJdLlRvQmlsbERhdGEodXBkYXRlZEhpc3RvcnlFbnRyaWVzKTsgLy8gQWR2aXNlIFBPUyBvZiBuZXcgcGF5bWVudCBhZ2FpbnN0IHRoaXMgYmlsbCwgYW5kIHRoZSB1cGRhdGVkIEJpbGxEYXRhIHRvIFNhdmUuXG5cbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKF90aGlzMi5CaWxsUGF5bWVudFJlY2VpdmVkKGJpbGxQYXltZW50LCB1cGRhdGVkQmlsbERhdGEpKS50aGVuKGZ1bmN0aW9uICh1cGRhdGVkQmlsbFN0YXR1cykge1xuICAgICAgICAgIC8vIEp1c3QgaW4gY2FzZSBjbGllbnQgZm9yZ290IHRvIHNldCB0aGVzZTpcbiAgICAgICAgICB1cGRhdGVkQmlsbFN0YXR1cy5CaWxsSWQgPSBiaWxsUGF5bWVudC5CaWxsSWQ7XG4gICAgICAgICAgdXBkYXRlZEJpbGxTdGF0dXMuVGFibGVJZCA9IGJpbGxQYXltZW50LlRhYmxlSWQ7XG5cbiAgICAgICAgICBpZiAodXBkYXRlZEJpbGxTdGF0dXMuUmVzdWx0ICE9IF9QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJCaWxsUmV0cmlldmFsUmVzdWx0XCJdLlNVQ0NFU1MpIHtcbiAgICAgICAgICAgIF90aGlzMi5fbG9nLndhcm4oXCJQT1MgRXJyb3JlZCB3aGVuIGJlaW5nIEFkdmlzZWQgb2YgUGF5bWVudC4gTGV0dGluZyBFRlRQT1Mga25vdywgYW5kIHNlbmRpbmcgZXhpc3RpbmcgYmlsbCBkYXRhLlwiKTtcblxuICAgICAgICAgICAgdXBkYXRlZEJpbGxTdGF0dXMuQmlsbERhdGEgPSBleGlzdGluZ0JpbGxTdGF0dXMuQmlsbERhdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZWRCaWxsU3RhdHVzLkJpbGxEYXRhID0gdXBkYXRlZEJpbGxEYXRhO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF90aGlzMi5fc3BpLl9zZW5kKHVwZGF0ZWRCaWxsU3RhdHVzLlRvTWVzc2FnZShtLklkKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVHZXRUYWJsZUNvbmZpZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlR2V0VGFibGVDb25maWcobSkge1xuICAgICAgdGhpcy5fc3BpLl9zZW5kKHRoaXMuQ29uZmlnLlRvTWVzc2FnZShtLklkKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVHZXRPcGVuVGFibGVzUmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlR2V0T3BlblRhYmxlc1JlcXVlc3QobSkge1xuICAgICAgdmFyIG9wZXJhdG9ySWQgPSBtLkRhdGFbXCJvcGVyYXRvcl9pZFwiXTsgLy8gQXNrIFBPUyBmb3IgQmlsbCBEZXRhaWxzIGZvciB0aGlzIHRhYmxlSWQsIGlubHVkaW5nIGVuY29kZWQgUGF5bWVudERhdGFcblxuICAgICAgdmFyIG9wZW5UYWJsZXNSZXNwb25zZSA9IHR5cGVvZiB0aGlzLkdldE9wZW5UYWJsZXMgPT09ICdmdW5jdGlvbicgPyB0aGlzLkdldE9wZW5UYWJsZXMob3BlcmF0b3JJZCkgOiBudWxsO1xuXG4gICAgICBpZiAoIW9wZW5UYWJsZXNSZXNwb25zZSB8fCAhb3BlblRhYmxlc1Jlc3BvbnNlLlRhYmxlRGF0YSB8fCAhb3BlblRhYmxlc1Jlc3BvbnNlLlRhYmxlRGF0YS5sZW5ndGgpIHtcbiAgICAgICAgb3BlblRhYmxlc1Jlc3BvbnNlID0gKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfcmVhZE9ubHlFcnJvcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKShcIm9wZW5UYWJsZXNSZXNwb25zZVwiKSwgbmV3IEdldE9wZW5UYWJsZXNSZXNwb25zZSgpKTtcblxuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlRoZXJlIGlzIG5vIG9wZW4gdGFibGUuXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9zcGkuX3NlbmQob3BlblRhYmxlc1Jlc3BvbnNlLlRvTWVzc2FnZShtLklkKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVCaWxsUGF5bWVudEZsb3dFbmRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlQmlsbFBheW1lbnRGbG93RW5kZWQobSkge1xuICAgICAgdGhpcy5CaWxsUGF5bWVudEZsb3dFbmRlZChtKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3BpUGF5QXRUYWJsZTtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvU3BpUHJlYXV0aC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1NwaVByZWF1dGguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBTcGlQcmVhdXRoICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNwaVByZWF1dGhcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTcGlQcmVhdXRoOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QcmVhdXRoICovIFwiLi9zcmMvUHJlYXV0aC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwaU1vZGVscyAqLyBcIi4vc3JjL1NwaU1vZGVscy5qc1wiKTtcblxuXG5cblxudmFyIFNwaVByZWF1dGggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTcGlQcmVhdXRoKHNwaSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU3BpUHJlYXV0aCk7XG5cbiAgICB0aGlzLl9zcGkgPSBzcGk7XG4gICAgdGhpcy5fbG9nID0gY29uc29sZTtcbiAgICB0aGlzLkNvbmZpZyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJTcGlDb25maWdcIl0oKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoU3BpUHJlYXV0aCwgW3tcbiAgICBrZXk6IFwiSW5pdGlhdGVBY2NvdW50VmVyaWZ5VHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVBY2NvdW50VmVyaWZ5VHgocG9zUmVmSWQpIHtcbiAgICAgIHZhciB2ZXJpZnlNc2cgPSBuZXcgX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkFjY291bnRWZXJpZnlSZXF1ZXN0XCJdKHBvc1JlZklkKS5Ub01lc3NhZ2UoKTtcbiAgICAgIHZhciB0ZnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5BY2NvdW50VmVyaWZ5LCAwLCB2ZXJpZnlNc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gbWFrZSBhY2NvdW50IHZlcmlmeSByZXF1ZXN0XCIpO1xuICAgICAgdmFyIHNlbnRNc2cgPSBcIkFza2VkIEVGVFBPUyB0byB2ZXJpZnkgYWNjb3VudFwiO1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRpYXRlUHJlYXV0aFR4KHRmcywgc2VudE1zZyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlT3BlblR4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlT3BlblR4KHBvc1JlZklkLCBhbW91bnRDZW50cykge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgICAgIHZhciBtc2cgPSBPYmplY3QuYXNzaWduKG5ldyBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aE9wZW5SZXF1ZXN0XCJdKGFtb3VudENlbnRzLCBwb3NSZWZJZCksIHtcbiAgICAgICAgQ29uZmlnOiB0aGlzLkNvbmZpZyxcbiAgICAgICAgT3B0aW9uczogb3B0aW9uc1xuICAgICAgfSkuVG9NZXNzYWdlKCk7XG4gICAgICB2YXIgdGZzID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvblR5cGVcIl0uUHJlYXV0aCwgYW1vdW50Q2VudHMsIG1zZywgXCJXYWl0aW5nIGZvciBFRlRQT1MgY29ubmVjdGlvbiB0byBtYWtlIHByZWF1dGggcmVxdWVzdCBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMC4wKS50b0ZpeGVkKDIpKSk7XG4gICAgICB2YXIgc2VudE1zZyA9IFwiQXNrZWQgRUZUUE9TIHRvIGNyZWF0ZSBwcmVhdXRoIGZvciBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwLjApLnRvRml4ZWQoMikpO1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRpYXRlUHJlYXV0aFR4KHRmcywgc2VudE1zZyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlVG9wdXBUeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJbml0aWF0ZVRvcHVwVHgocG9zUmVmSWQsIHByZWF1dGhJZCwgYW1vdW50Q2VudHMpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gICAgICB2YXIgbXNnID0gT2JqZWN0LmFzc2lnbihuZXcgX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhUb3B1cFJlcXVlc3RcIl0ocHJlYXV0aElkLCBhbW91bnRDZW50cywgcG9zUmVmSWQpLCB7XG4gICAgICAgIENvbmZpZzogdGhpcy5Db25maWcsXG4gICAgICAgIE9wdGlvbnM6IG9wdGlvbnNcbiAgICAgIH0pLlRvTWVzc2FnZSgpO1xuICAgICAgdmFyIHRmcyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvbkZsb3dTdGF0ZVwiXShwb3NSZWZJZCwgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25UeXBlXCJdLlByZWF1dGgsIGFtb3VudENlbnRzLCBtc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gbWFrZSBwcmVhdXRoIHRvcHVwIHJlcXVlc3QgZm9yIFwiLmNvbmNhdCgoYW1vdW50Q2VudHMgLyAxMDAuMCkudG9GaXhlZCgyKSkpO1xuICAgICAgdmFyIHNlbnRNc2cgPSBcIkFza2VkIEVGVFBPUyB0byBtYWtlIHByZWF1dGggdG9wdXAgZm9yIFwiLmNvbmNhdCgoYW1vdW50Q2VudHMgLyAxMDAuMCkudG9GaXhlZCgyKSk7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdGlhdGVQcmVhdXRoVHgodGZzLCBzZW50TXNnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiSW5pdGlhdGVQYXJ0aWFsQ2FuY2VsbGF0aW9uVHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVQYXJ0aWFsQ2FuY2VsbGF0aW9uVHgocG9zUmVmSWQsIHByZWF1dGhJZCwgYW1vdW50Q2VudHMpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gICAgICB2YXIgbXNnID0gT2JqZWN0LmFzc2lnbihuZXcgX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhQYXJ0aWFsQ2FuY2VsbGF0aW9uUmVxdWVzdFwiXShwcmVhdXRoSWQsIGFtb3VudENlbnRzLCBwb3NSZWZJZCksIHtcbiAgICAgICAgQ29uZmlnOiB0aGlzLkNvbmZpZyxcbiAgICAgICAgT3B0aW9uczogb3B0aW9uc1xuICAgICAgfSkuVG9NZXNzYWdlKCk7XG4gICAgICB2YXIgdGZzID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvblR5cGVcIl0uUHJlYXV0aCwgYW1vdW50Q2VudHMsIG1zZywgXCJXYWl0aW5nIGZvciBFRlRQT1MgY29ubmVjdGlvbiB0byBtYWtlIHByZWF1dGggcGFydGlhbCBjYW5jZWxsYXRpb24gcmVxdWVzdCBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMC4wKS50b0ZpeGVkKDIpKSk7XG4gICAgICB2YXIgc2VudE1zZyA9IFwiQXNrZWQgRUZUUE9TIHRvIG1ha2UgcHJlYXV0aCBwYXJ0aWFsIGNhbmNlbGxhdGlvbiBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMC4wKS50b0ZpeGVkKDIpKTtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0aWF0ZVByZWF1dGhUeCh0ZnMsIHNlbnRNc2cpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZUV4dGVuZFR4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlRXh0ZW5kVHgocG9zUmVmSWQsIHByZWF1dGhJZCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgICAgIHZhciBtc2cgPSBPYmplY3QuYXNzaWduKG5ldyBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aEV4dGVuZFJlcXVlc3RcIl0ocHJlYXV0aElkLCBwb3NSZWZJZCksIHtcbiAgICAgICAgQ29uZmlnOiB0aGlzLkNvbmZpZyxcbiAgICAgICAgT3B0aW9uczogb3B0aW9uc1xuICAgICAgfSkuVG9NZXNzYWdlKCk7XG4gICAgICB2YXIgdGZzID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvblR5cGVcIl0uUHJlYXV0aCwgMCwgbXNnLCBcIldhaXRpbmcgZm9yIEVGVFBPUyBjb25uZWN0aW9uIHRvIG1ha2UgcHJlYXV0aCBFeHRlbmQgcmVxdWVzdFwiKTtcbiAgICAgIHZhciBzZW50TXNnID0gXCJBc2tlZCBFRlRQT1MgdG8gbWFrZSBwcmVhdXRoIEV4dGVuZCByZXF1ZXN0XCI7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdGlhdGVQcmVhdXRoVHgodGZzLCBzZW50TXNnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiSW5pdGlhdGVDb21wbGV0aW9uVHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVDb21wbGV0aW9uVHgocG9zUmVmSWQsIHByZWF1dGhJZCwgYW1vdW50Q2VudHMpIHtcbiAgICAgIHZhciBzdXJjaGFyZ2VBbW91bnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICAgICAgdmFyIG1zZyA9IE9iamVjdC5hc3NpZ24obmV3IF9QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJQcmVhdXRoQ29tcGxldGlvblJlcXVlc3RcIl0ocHJlYXV0aElkLCBhbW91bnRDZW50cywgcG9zUmVmSWQpLCB7XG4gICAgICAgIENvbmZpZzogdGhpcy5Db25maWcsXG4gICAgICAgIFN1cmNoYXJnZUFtb3VudDogc3VyY2hhcmdlQW1vdW50LFxuICAgICAgICBPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KS5Ub01lc3NhZ2UoKTtcbiAgICAgIHZhciB0ZnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5QcmVhdXRoLCBhbW91bnRDZW50cywgbXNnLCBcIldhaXRpbmcgZm9yIEVGVFBPUyBjb25uZWN0aW9uIHRvIG1ha2UgcHJlYXV0aCBjb21wbGV0aW9uIHJlcXVlc3QgZm9yIFwiLmNvbmNhdCgoYW1vdW50Q2VudHMgLyAxMDAuMCkudG9GaXhlZCgyKSkpO1xuICAgICAgdmFyIHNlbnRNc2cgPSBcIkFza2VkIEVGVFBPUyB0byBtYWtlIHByZWF1dGggY29tcGxldGlvbiBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMC4wKS50b0ZpeGVkKDIpKTtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0aWF0ZVByZWF1dGhUeCh0ZnMsIHNlbnRNc2cpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZUNhbmNlbFR4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlQ2FuY2VsVHgocG9zUmVmSWQsIHByZWF1dGhJZCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgICAgIHZhciBtc2cgPSBPYmplY3QuYXNzaWduKG5ldyBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aENhbmNlbFJlcXVlc3RcIl0ocHJlYXV0aElkLCBwb3NSZWZJZCksIHtcbiAgICAgICAgQ29uZmlnOiB0aGlzLkNvbmZpZyxcbiAgICAgICAgT3B0aW9uczogb3B0aW9uc1xuICAgICAgfSkuVG9NZXNzYWdlKCk7XG4gICAgICB2YXIgdGZzID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvblR5cGVcIl0uUHJlYXV0aCwgMCwgbXNnLCBcIldhaXRpbmcgZm9yIEVGVFBPUyBjb25uZWN0aW9uIHRvIG1ha2UgcHJlYXV0aCBjYW5jZWxsYXRpb24gcmVxdWVzdFwiKTtcbiAgICAgIHZhciBzZW50TXNnID0gXCJBc2tlZCBFRlRQT1MgdG8gbWFrZSBwcmVhdXRoIGNhbmNlbGxhdGlvbiByZXF1ZXN0XCI7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdGlhdGVQcmVhdXRoVHgodGZzLCBzZW50TXNnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2luaXRpYXRlUHJlYXV0aFR4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0aWF0ZVByZWF1dGhUeCh0ZnMsIHNlbnRNc2cpIHtcbiAgICAgIGlmICh0aGlzLl9zcGkuQ3VycmVudFN0YXR1cyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgUGFpcmVkXCIpO1xuICAgICAgaWYgKHRoaXMuX3NwaS5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJTcGlGbG93XCJdLklkbGUpIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgSWRsZVwiKTtcbiAgICAgIHRoaXMuX3NwaS5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb247XG4gICAgICB0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlID0gdGZzO1xuXG4gICAgICBpZiAodGhpcy5fc3BpLl9zZW5kKHRmcy5SZXF1ZXN0KSkge1xuICAgICAgICB0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlLlNlbnQoc2VudE1zZyk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5fc3BpLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKHRydWUsIFwiUHJlYXV0aCBJbml0aWF0ZWRcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVQcmVhdXRoTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlUHJlYXV0aE1lc3NhZ2UobSkge1xuICAgICAgc3dpdGNoIChtLkV2ZW50TmFtZSkge1xuICAgICAgICBjYXNlIF9QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJQcmVhdXRoRXZlbnRzXCJdLkFjY291bnRWZXJpZnlSZXNwb25zZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVBY2NvdW50VmVyaWZ5UmVzcG9uc2UobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJQcmVhdXRoRXZlbnRzXCJdLlByZWF1dGhPcGVuUmVzcG9uc2U6XG4gICAgICAgIGNhc2UgX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhFdmVudHNcIl0uUHJlYXV0aFRvcHVwUmVzcG9uc2U6XG4gICAgICAgIGNhc2UgX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhFdmVudHNcIl0uUHJlYXV0aFBhcnRpYWxDYW5jZWxsYXRpb25SZXNwb25zZTpcbiAgICAgICAgY2FzZSBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aEV2ZW50c1wiXS5QcmVhdXRoRXh0ZW5kUmVzcG9uc2U6XG4gICAgICAgIGNhc2UgX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhFdmVudHNcIl0uUHJlYXV0aENvbXBsZXRlUmVzcG9uc2U6XG4gICAgICAgIGNhc2UgX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhFdmVudHNcIl0uUHJlYXV0aENhbmNlbGxhdGlvblJlc3BvbnNlOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZVByZWF1dGhSZXNwb25zZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJJIGRvbid0IFVuZGVyc3RhbmQgUHJlYXV0aCBFdmVudDogXCIuY29uY2F0KG0uRXZlbnROYW1lLCBcIiwgXCIpLmNvbmNhdChtLkRhdGEsIFwiLiBQZXJoYXBzIEkgaGF2ZSBub3QgaW1wbGVtZW50ZWQgaXQgeWV0LlwiKSk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUFjY291bnRWZXJpZnlSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlQWNjb3VudFZlcmlmeVJlc3BvbnNlKG0pIHtcbiAgICAgIHZhciBpbmNvbWluZ1Bvc1JlZklkID0gbS5EYXRhLnBvc19yZWZfaWQ7XG4gICAgICB2YXIgY3VycmVudFR4Rmxvd1N0YXRlID0gdGhpcy5fc3BpLkN1cnJlbnRUeEZsb3dTdGF0ZTtcblxuICAgICAgaWYgKHRoaXMuX3NwaS5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IGN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCB8fCAhY3VycmVudFR4Rmxvd1N0YXRlLlBvc1JlZklkID09PSBpbmNvbWluZ1Bvc1JlZklkKSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiUmVjZWl2ZWQgQWNjb3VudCBWZXJpZnkgcmVzcG9uc2UgYnV0IEkgd2FzIG5vdCB3YWl0aW5nIGZvciBvbmUuIEluY29taW5nIFBvcyBSZWYgSUQ6IFwiLmNvbmNhdChpbmNvbWluZ1Bvc1JlZklkKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUSC0xQSwgVEgtMkFcblxuXG4gICAgICBjdXJyZW50VHhGbG93U3RhdGUuQ29tcGxldGVkKG0uR2V0U3VjY2Vzc1N0YXRlKCksIG0sIFwiQWNjb3VudCBWZXJpZnkgVHJhbnNhY3Rpb24gRW5kZWQuXCIpOyAvLyBUSC02QSwgVEgtNkVcblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVQcmVhdXRoUmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVByZWF1dGhSZXNwb25zZShtKSB7XG4gICAgICB2YXIgaW5jb21pbmdQb3NSZWZJZCA9IG0uRGF0YS5wb3NfcmVmX2lkO1xuICAgICAgdmFyIGN1cnJlbnRUeEZsb3dTdGF0ZSA9IHRoaXMuX3NwaS5DdXJyZW50VHhGbG93U3RhdGU7XG5cbiAgICAgIGlmICh0aGlzLl9zcGkuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiB8fCBjdXJyZW50VHhGbG93U3RhdGUuRmluaXNoZWQgfHwgIWN1cnJlbnRUeEZsb3dTdGF0ZS5Qb3NSZWZJZCA9PT0gaW5jb21pbmdQb3NSZWZJZCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlJlY2VpdmVkIFByZWF1dGggcmVzcG9uc2UgYnV0IEkgd2FzIG5vdCB3YWl0aW5nIGZvciBvbmUuIEluY29taW5nIFBvcyBSZWYgSUQ6IFwiLmNvbmNhdChpbmNvbWluZ1Bvc1JlZklkKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUSC0xQSwgVEgtMkFcblxuXG4gICAgICBjdXJyZW50VHhGbG93U3RhdGUuQ29tcGxldGVkKG0uR2V0U3VjY2Vzc1N0YXRlKCksIG0sIFwiUHJlYXV0aCBUcmFuc2FjdGlvbiBFbmRlZC5cIik7IC8vIFRILTZBLCBUSC02RVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuX3NwaS5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJJc1ByZWF1dGhFdmVudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJc1ByZWF1dGhFdmVudChldmVudE5hbWUpIHtcbiAgICAgIHJldHVybiBldmVudE5hbWUubGFzdEluZGV4T2YoXCJwcmVhdXRoXCIsIDApID09PSAwIHx8IGV2ZW50TmFtZSA9PSBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aEV2ZW50c1wiXS5QcmVhdXRoQ29tcGxldGVSZXNwb25zZSB8fCBldmVudE5hbWUgPT0gX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhFdmVudHNcIl0uUHJlYXV0aENvbXBsZXRlUmVxdWVzdCB8fCBldmVudE5hbWUgPT0gX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhFdmVudHNcIl0uQWNjb3VudFZlcmlmeVJlcXVlc3QgfHwgZXZlbnROYW1lID09IF9QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJQcmVhdXRoRXZlbnRzXCJdLkFjY291bnRWZXJpZnlSZXNwb25zZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3BpUHJlYXV0aDtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvVGVybWluYWxTdGF0dXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvVGVybWluYWxTdGF0dXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogVGVybWluYWxTdGF0dXNSZXF1ZXN0LCBUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlLCBUZXJtaW5hbEJhdHRlcnkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVGVybWluYWxTdGF0dXNSZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gVGVybWluYWxTdGF0dXNSZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gVGVybWluYWxTdGF0dXNSZXNwb25zZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVGVybWluYWxCYXR0ZXJ5XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gVGVybWluYWxCYXR0ZXJ5OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1JlcXVlc3RJZEhlbHBlciAqLyBcIi4vc3JjL1JlcXVlc3RJZEhlbHBlci5qc1wiKTtcblxuXG5cblxudmFyIFRlcm1pbmFsU3RhdHVzUmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRlcm1pbmFsU3RhdHVzUmVxdWVzdCgpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFRlcm1pbmFsU3RhdHVzUmVxdWVzdCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFRlcm1pbmFsU3RhdHVzUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge307XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJ0cm1ubFwiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uVGVybWluYWxTdGF0dXNSZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGVybWluYWxTdGF0dXNSZXF1ZXN0O1xufSgpO1xudmFyIFRlcm1pbmFsU3RhdHVzUmVzcG9uc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlKG0pIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFRlcm1pbmFsU3RhdHVzUmVzcG9uc2UpO1xuXG4gICAgdGhpcy5fbSA9IG07XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFRlcm1pbmFsU3RhdHVzUmVzcG9uc2UsIFt7XG4gICAga2V5OiBcIkdldFN0YXR1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTdGF0dXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnN0YXR1cztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmF0dGVyeUxldmVsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhdHRlcnlMZXZlbCgpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLl9tLkRhdGEuYmF0dGVyeV9sZXZlbCwgMTApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJJc0NoYXJnaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIElzQ2hhcmdpbmcoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLl9tLkRhdGEuY2hhcmdpbmc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRlcm1pbmFsU3RhdHVzUmVzcG9uc2U7XG59KCk7XG52YXIgVGVybWluYWxCYXR0ZXJ5ID0gZnVuY3Rpb24gVGVybWluYWxCYXR0ZXJ5KG0pIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBUZXJtaW5hbEJhdHRlcnkpO1xuXG4gIHRoaXMuQmF0dGVyeUxldmVsID0gcGFyc2VJbnQobS5EYXRhLmJhdHRlcnlfbGV2ZWwsIDEwKTtcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyAwOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIGJ1ZmZlciAoaWdub3JlZCkgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vKiAoaWdub3JlZCkgKi9cblxuLyoqKi8gfSlcblxuLyoqKioqKi8gfSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OXpjR2t0WTJ4cFpXNTBMV3B6TDNkbFluQmhZMnN2ZFc1cGRtVnljMkZzVFc5a2RXeGxSR1ZtYVc1cGRHbHZiaUlzSW5kbFluQmhZMnM2THk5emNHa3RZMnhwWlc1MExXcHpMM2RsWW5CaFkyc3ZZbTl2ZEhOMGNtRndJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZMaTlwYm1SbGVDNXFjeUlzSW5kbFluQmhZMnM2THk5emNHa3RZMnhwWlc1MExXcHpMeTR2Ym05a1pWOXRiMlIxYkdWekwwQmlZV0psYkM5eWRXNTBhVzFsTDJobGJIQmxjbk12WVhONWJtTlViMGRsYm1WeVlYUnZjaTVxY3lJc0luZGxZbkJoWTJzNkx5OXpjR2t0WTJ4cFpXNTBMV3B6THk0dmJtOWtaVjl0YjJSMWJHVnpMMEJpWVdKbGJDOXlkVzUwYVcxbEwyaGxiSEJsY25NdlkyeGhjM05EWVd4c1EyaGxZMnN1YW5NaUxDSjNaV0p3WVdOck9pOHZjM0JwTFdOc2FXVnVkQzFxY3k4dUwyNXZaR1ZmYlc5a2RXeGxjeTlBWW1GaVpXd3ZjblZ1ZEdsdFpTOW9aV3h3WlhKekwyTnlaV0YwWlVOc1lYTnpMbXB6SWl3aWQyVmljR0ZqYXpvdkwzTndhUzFqYkdsbGJuUXRhbk12TGk5dWIyUmxYMjF2WkhWc1pYTXZRR0poWW1Wc0wzSjFiblJwYldVdmFHVnNjR1Z5Y3k5eVpXRmtUMjVzZVVWeWNtOXlMbXB6SWl3aWQyVmljR0ZqYXpvdkwzTndhUzFqYkdsbGJuUXRhbk12TGk5dWIyUmxYMjF2WkhWc1pYTXZRR0poWW1Wc0wzSjFiblJwYldVdmNtVm5aVzVsY21GMGIzSXZhVzVrWlhndWFuTWlMQ0ozWldKd1lXTnJPaTh2YzNCcExXTnNhV1Z1ZEMxcWN5OHVMMjV2WkdWZmJXOWtkV3hsY3k5aFpYTXRhbk12YVc1a1pYZ3Vhbk1pTENKM1pXSndZV05yT2k4dmMzQnBMV05zYVdWdWRDMXFjeTh1TDI1dlpHVmZiVzlrZFd4bGN5OWliaTVxY3k5c2FXSXZZbTR1YW5NaUxDSjNaV0p3WVdOck9pOHZjM0JwTFdOc2FXVnVkQzFxY3k4dUwyNXZaR1ZmYlc5a2RXeGxjeTlxYzNOb1lTOXpjbU12YzJoaExtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZMaTl1YjJSbFgyMXZaSFZzWlhNdmNtVm5aVzVsY21GMGIzSXRjblZ1ZEdsdFpTOXlkVzUwYVcxbExtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZLSGRsWW5CaFkyc3BMMkoxYVd4a2FXNHZiVzlrZFd4bExtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZMaTl6Y21NdlEyRnphRzkxZEM1cWN5SXNJbmRsWW5CaFkyczZMeTl6Y0drdFkyeHBaVzUwTFdwekx5NHZjM0pqTDBOdmJtNWxZM1JwYjI0dWFuTWlMQ0ozWldKd1lXTnJPaTh2YzNCcExXTnNhV1Z1ZEMxcWN5OHVMM055WXk5RGNubHdkRzh1YW5NaUxDSjNaV0p3WVdOck9pOHZjM0JwTFdOc2FXVnVkQzFxY3k4dUwzTnlZeTlFYVdabWFXVklaV3hzYldGdUxtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZMaTl6Y21NdlMyVjVVbTlzYkdsdVowaGxiSEJsY2k1cWN5SXNJbmRsWW5CaFkyczZMeTl6Y0drdFkyeHBaVzUwTFdwekx5NHZjM0pqTDB4dloyZGxjaTVxY3lJc0luZGxZbkJoWTJzNkx5OXpjR2t0WTJ4cFpXNTBMV3B6THk0dmMzSmpMMDFsYzNOaFoyVnpMbXB6SWl3aWQyVmljR0ZqYXpvdkwzTndhUzFqYkdsbGJuUXRhbk12TGk5emNtTXZVR0ZwY21sdVp5NXFjeUlzSW5kbFluQmhZMnM2THk5emNHa3RZMnhwWlc1MExXcHpMeTR2YzNKakwxQmhhWEpwYm1kSVpXeHdaWEl1YW5NaUxDSjNaV0p3WVdOck9pOHZjM0JwTFdOc2FXVnVkQzFxY3k4dUwzTnlZeTlRWVhsQmRGUmhZbXhsTG1weklpd2lkMlZpY0dGamF6b3ZMM053YVMxamJHbGxiblF0YW5NdkxpOXpjbU12VUdsdVowaGxiSEJsY2k1cWN5SXNJbmRsWW5CaFkyczZMeTl6Y0drdFkyeHBaVzUwTFdwekx5NHZjM0pqTDFCdmMwbHVabTh1YW5NaUxDSjNaV0p3WVdOck9pOHZjM0JwTFdOc2FXVnVkQzFxY3k4dUwzTnlZeTlRY21WaGRYUm9MbXB6SWl3aWQyVmljR0ZqYXpvdkwzTndhUzFqYkdsbGJuUXRhbk12TGk5emNtTXZVSEpwYm5ScGJtY3Vhbk1pTENKM1pXSndZV05yT2k4dmMzQnBMV05zYVdWdWRDMXFjeTh1TDNOeVl5OVFkWEpqYUdGelpTNXFjeUlzSW5kbFluQmhZMnM2THk5emNHa3RZMnhwWlc1MExXcHpMeTR2YzNKakwxQjFjbU5vWVhObFNHVnNjR1Z5TG1weklpd2lkMlZpY0dGamF6b3ZMM053YVMxamJHbGxiblF0YW5NdkxpOXpjbU12VW1WeGRXVnpkRWxrU0dWc2NHVnlMbXB6SWl3aWQyVmljR0ZqYXpvdkwzTndhUzFqYkdsbGJuUXRhbk12TGk5emNtTXZVMlZqY21WMGN5NXFjeUlzSW5kbFluQmhZMnM2THk5emNHa3RZMnhwWlc1MExXcHpMeTR2YzNKakwxTmxjblpwWTJVdlJHVjJhV05sVTJWeWRtbGpaUzVxY3lJc0luZGxZbkJoWTJzNkx5OXpjR2t0WTJ4cFpXNTBMV3B6THk0dmMzSmpMMU5sZEhSc1pXMWxiblF1YW5NaUxDSjNaV0p3WVdOck9pOHZjM0JwTFdOc2FXVnVkQzFxY3k4dUwzTnlZeTlUY0drdWFuTWlMQ0ozWldKd1lXTnJPaTh2YzNCcExXTnNhV1Z1ZEMxcWN5OHVMM055WXk5VGNHbE5iMlJsYkhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2YzNCcExXTnNhV1Z1ZEMxcWN5OHVMM055WXk5VGNHbFFZWGxCZEZSaFlteGxMbXB6SWl3aWQyVmljR0ZqYXpvdkwzTndhUzFqYkdsbGJuUXRhbk12TGk5emNtTXZVM0JwVUhKbFlYVjBhQzVxY3lJc0luZGxZbkJoWTJzNkx5OXpjR2t0WTJ4cFpXNTBMV3B6THk0dmMzSmpMMVJsY20xcGJtRnNVM1JoZEhWekxtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZZblZtWm1WeUlDaHBaMjV2Y21Wa0tTSmRMQ0p1WVcxbGN5STZXeUpEWVhOb2IzVjBUMjVzZVZKbGNYVmxjM1FpTENKaGJXOTFiblJEWlc1MGN5SXNJbkJ2YzFKbFprbGtJaXdpVUc5elVtVm1TV1FpTENKRFlYTm9iM1YwUVcxdmRXNTBJaXdpVTNWeVkyaGhjbWRsUVcxdmRXNTBJaXdpUTI5dVptbG5JaXdpVTNCcFEyOXVabWxuSWl3aVQzQjBhVzl1Y3lJc0lsUnlZVzV6WVdOMGFXOXVUM0IwYVc5dWN5SXNJbVJoZEdFaUxDSkZibUZpYkdWa1VISnBiblJOWlhKamFHRnVkRU52Y0hraUxDSkZibUZpYkdWa1VISnZiWEIwUm05eVEzVnpkRzl0WlhKRGIzQjVUMjVGWm5Sd2IzTWlMQ0pGYm1GaWJHVmtVMmxuYm1GMGRYSmxSbXh2ZDA5dVJXWjBjRzl6SWl3aVFXUmtVbVZqWldsd2RFTnZibVpwWnlJc0lrRmtaRTl3ZEdsdmJuTWlMQ0pOWlhOellXZGxJaXdpVW1WeGRXVnpkRWxrU0dWc2NHVnlJaXdpU1dRaUxDSkZkbVZ1ZEhNaUxDSkRZWE5vYjNWMFQyNXNlVkpsYzNCdmJuTmxJaXdpYlNJc0lsOXRJaXdpVW1WeGRXVnpkRWxrSWl3aVJHRjBZU0lzSW5CdmMxOXlaV1pmYVdRaUxDSlRZMmhsYldWT1lXMWxJaXdpYzJOb1pXMWxYMjVoYldVaUxDSlRkV05qWlhOeklpd2lSMlYwVTNWalkyVnpjMU4wWVhSbElpd2lVM1ZqWTJWemMxTjBZWFJsSWl3aVlYUjBjbWxpZFhSbElpd2lRMjl1Ym1WamRHbHZibE4wWVhSbElpd2lSR2x6WTI5dWJtVmpkR1ZrSWl3aVEyOXVibVZqZEdsdVp5SXNJa052Ym01bFkzUmxaQ0lzSWxOUVNWOVFVazlVVDBOUFRDSXNJa052Ym01bFkzUnBiMjVUZEdGMFpVVjJaVzUwUVhKbmN5SXNJbU52Ym01bFkzUnBiMjVUZEdGMFpTSXNJazFsYzNOaFoyVkZkbVZ1ZEVGeVozTWlMQ0p0WlhOellXZGxJaXdpUTI5dWJtVmpkR2x2YmlJc0lrRmtaSEpsYzNNaUxDSlRkR0YwWlNJc0lsTndhVkJ5YjNSdlkyOXNJaXdpWDNkeklpd2lWMlZpVTI5amEyVjBJaXdpUlhKeWIzSWlMQ0pWYzJWVFpXTjFjbVZYWldKVGIyTnJaWFJ6SWl3aWIyNXZjR1Z1SWl3aWNHOXNiRmRsWWxOdlkydGxkRU52Ym01bFkzUnBiMjRpTENKdmJtMWxjM05oWjJVaUxDSndZWGxzYjJGa0lpd2liMjVOWlhOellXZGxVbVZqWldsMlpXUWlMQ0p2Ym1Oc2IzTmxJaXdpYjI1RGJHOXpaV1FpTENKdmJtVnljbTl5SWl3aVpYSnlJaXdpYjI1RmNuSnZjaUlzSW1SdlkzVnRaVzUwSWl3aVpHbHpjR0YwWTJoRmRtVnVkQ0lzSWtOMWMzUnZiVVYyWlc1MElpd2laR1YwWVdsc0lpd2ljbVZoWkhsVGRHRjBaU0lzSWtOTVQxTkZSQ0lzSW1Oc2IzTmxJaXdpYzJWdVpDSXNJbU52ZFc1MElpd2lUMUJGVGlJc0ltOXVUM0JsYm1Wa0lpd2ljMlYwVkdsdFpXOTFkQ0lzSWtScGMyTnZibTVsWTNRaUxDSkRjbmx3ZEc4aUxDSnJaWGtpTENKaWVYUmxjeUlzSW1GbGMycHpJaXdpZFhScGJITWlMQ0pvWlhnaUxDSjBiMEo1ZEdWeklpd2lhWFlpTENKMFpYaDBRbmwwWlhNaUxDSndZV1JrYVc1bklpd2ljR3RqY3pjaUxDSndZV1FpTENKMWRHWTRJaXdpWVdWelEySmpJaXdpVFc5a1pVOW1UM0JsY21GMGFXOXVJaXdpWTJKaklpd2laVzVqY25sd2RHVmtRbmwwWlhNaUxDSmxibU55ZVhCMElpd2laVzVqY25sd2RHVmtVM1J5YVc1bklpd2labkp2YlVKNWRHVnpJaXdpWkdWamNubHdkR1ZrUW5sMFpYTWlMQ0prWldOeWVYQjBJaXdpWkdWamNubHdkR1ZrSWl3aWMzUnlhWEFpTENKdFpYTnpZV2RsVkc5VGFXZHVJaXdpYzJoaFQySnFJaXdpYW5OVFNFRWlMQ0p6WlhSSVRVRkRTMlY1SWl3aWRYQmtZWFJsSWl3aVoyVjBTRTFCUXlJc0luWmhiSFZsSWl3aWMyaGhTR0Z6YUNJc0ltZGxkRWhoYzJnaUxDSkVhV1ptYVdWSVpXeHNiV0Z1SWl3aWJXRjRWbUZzZFdVaUxDSnRZWGhXWVd4MVpVSk9JaXdpUWs0aUxDSnphR2xtZEVScGMzUmhibU5sSWl3aVRXRjBhQ0lzSW1ac2IyOXlJaXdpY21GdVpHOXRJaXdpY21GdVpFSnBkRWx1ZENJc0luTm9jbTRpTENKdGFXNGlMQ0pqYlhBaUxDSndJaXdpWnlJc0luQnlhWFpoZEdWTFpYa2lMQ0poU0dWNElpd2laMGhsZUNJc0ltMXZiblJRY21sdFpTSXNJbTF2Ym5RaUxDSm5VbVZrSWl3aWRHOVNaV1FpTENKelpXTnlaWFFpTENKeVpXUlFiM2NpTENKbWNtOXRVbVZrSWl3aWRHOVRkSEpwYm1jaUxDSjBhR1ZwY2xCMVlteHBZMHRsZVNJc0lubHZkWEpRY21sMllYUmxTMlY1SWl3aVlraGxlQ0lzSWtGSVpYZ2lMQ0pDVW1Wa0lpd2lkRzlWY0hCbGNrTmhjMlVpTENKTFpYbFNiMnhzYVc1blNHVnNjR1Z5SWl3aWEzSlNaWEYxWlhOMElpd2lZM1Z5Y21WdWRGTmxZM0psZEhNaUxDSkxaWGxTYjJ4c1VtVnpjRzl1YzJVaUxDSnVaWGRUWldOeVpYUnpJaXdpVTJWamNtVjBjeUlzSWtkbGJtVnlZWFJsU0dGemFDSXNJa1Z1WTB0bGVTSXNJa2h0WVdOTFpYa2lMQ0pMWlhsU2IyeHNhVzVuVW1WemRXeDBJaXdpYTJWNVVtOXNiR2x1WjBOdmJtWnBjbTFoZEdsdmJpSXNJa3RsZVZKdmJHeHBibWREYjI1bWFYSnRZWFJwYjI0aUxDSk9aWGRUWldOeVpYUnpJaXdpVEc5bloyVnlJaXdpWld4bGJXVnVkQ0lzSW14cGJtVlRaWEJsY21GMGIzSWlMQ0ppZFdabVpYSWlMQ0poY21keklpd2ljSFZ6YUNJc0ltcHZhVzRpTENKZmNtVnVaR1Z5SWl3aVkyOXVjMjlzWlNJc0lteHZaeUlzSW1sdWJtVnlWR1Y0ZENJc0luTmpjbTlzYkZSdmNDSXNJbk5qY205c2JFaGxhV2RvZENJc0lsQmhhWEpTWlhGMVpYTjBJaXdpUzJWNVVtVnhkV1Z6ZENJc0lrdGxlVkpsYzNCdmJuTmxJaXdpUzJWNVEyaGxZMnNpTENKUVlXbHlVbVZ6Y0c5dWMyVWlMQ0pFY205d1MyVjVjMEZrZG1salpTSXNJa3h2WjJsdVVtVnhkV1Z6ZENJc0lreHZaMmx1VW1WemNHOXVjMlVpTENKUWFXNW5JaXdpVUc5dVp5SXNJbEIxY21Ob1lYTmxVbVZ4ZFdWemRDSXNJbEIxY21Ob1lYTmxVbVZ6Y0c5dWMyVWlMQ0pEWVc1alpXeFVjbUZ1YzJGamRHbHZibEpsY1hWbGMzUWlMQ0pEWVc1alpXeFVjbUZ1YzJGamRHbHZibEpsYzNCdmJuTmxJaXdpUjJWMFRHRnpkRlJ5WVc1ellXTjBhVzl1VW1WeGRXVnpkQ0lzSWtkbGRFeGhjM1JVY21GdWMyRmpkR2x2YmxKbGMzQnZibk5sSWl3aVVtVm1kVzVrVW1WeGRXVnpkQ0lzSWxKbFpuVnVaRkpsYzNCdmJuTmxJaXdpVTJsbmJtRjBkWEpsVW1WeGRXbHlaV1FpTENKVGFXZHVZWFIxY21WRVpXTnNhVzVsWkNJc0lsTnBaMjVoZEhWeVpVRmpZMlZ3ZEdWa0lpd2lRWFYwYUVOdlpHVlNaWEYxYVhKbFpDSXNJa0YxZEdoRGIyUmxRV1IyYVdObElpd2lUVzkwYjFCMWNtTm9ZWE5sVW1WeGRXVnpkQ0lzSWsxdmRHOVFkWEpqYUdGelpWSmxjM0J2Ym5ObElpd2lVMlYwZEd4bFVtVnhkV1Z6ZENJc0lsTmxkSFJzWlZKbGMzQnZibk5sSWl3aVUyVjBkR3hsYldWdWRFVnVjWFZwY25sU1pYRjFaWE4wSWl3aVUyVjBkR3hsYldWdWRFVnVjWFZwY25sU1pYTndiMjV6WlNJc0lsTmxkRkJ2YzBsdVptOVNaWEYxWlhOMElpd2lVMlYwVUc5elNXNW1iMUpsYzNCdmJuTmxJaXdpUzJWNVVtOXNiRkpsY1hWbGMzUWlMQ0pKYm5aaGJHbGtTRzFoWTFOcFoyNWhkSFZ5WlNJc0lsQmhlVUYwVkdGaWJHVkhaWFJVWVdKc1pVTnZibVpwWnlJc0lsQmhlVUYwVkdGaWJHVlRaWFJVWVdKc1pVTnZibVpwWnlJc0lsQmhlVUYwVkdGaWJHVkhaWFJDYVd4c1JHVjBZV2xzY3lJc0lsQmhlVUYwVkdGaWJHVkNhV3hzUkdWMFlXbHNjeUlzSWxCaGVVRjBWR0ZpYkdWQ2FXeHNVR0Y1YldWdWRDSXNJbEJ5YVc1MGFXNW5VbVZ4ZFdWemRDSXNJbEJ5YVc1MGFXNW5VbVZ6Y0c5dWMyVWlMQ0pVWlhKdGFXNWhiRk4wWVhSMWMxSmxjWFZsYzNRaUxDSlVaWEp0YVc1aGJGTjBZWFIxYzFKbGMzQnZibk5sSWl3aVFtRjBkR1Z5ZVV4bGRtVnNRMmhoYm1kbFpDSXNJbEJoZVVGMFZHRmliR1ZIWlhSUGNHVnVWR0ZpYkdWeklpd2lVR0Y1UVhSVVlXSnNaVTl3Wlc1VVlXSnNaWE1pTENKUVlYbEJkRlJoWW14bFFtbHNiRkJoZVcxbGJuUkdiRzkzUlc1a1pXUWlMQ0pWYm10dWIzZHVJaXdpUm1GcGJHVmtJaXdpVFdWemMyRm5aVk4wWVcxd0lpd2ljRzl6U1dRaUxDSnpaV055WlhSeklpd2ljMlZ5ZG1WeVZHbHRaVVJsYkhSaElpd2lVRzl6U1dRaUxDSlRaWEoyWlhKVWFXMWxSR1ZzZEdFaUxDSk5aWE56WVdkbFJXNTJaV3h2Y0dVaUxDSmxibU1pTENKb2JXRmpJaXdpUlc1aklpd2lTRzFoWXlJc0luQnZjMTlwWkNJc0ltbGtJaXdpWlhabGJuUk9ZVzFsSWl3aWJtVmxaSE5GYm1OeWVYQjBhVzl1SWl3aVJYWmxiblJPWVcxbElpd2lSR0YwWlZScGJXVlRkR0Z0Y0NJc0lrbHVZMjl0YldsdVowaHRZV01pTENKZmJtVmxaSE5GYm1OeWVYQjBhVzl1SWl3aVJHVmpjbmx3ZEdWa1NuTnZiaUlzSW5OMVkyTmxjM01pTENKbGNuSnZjbDl5WldGemIyNGlMQ0psY25KdmNsOWtaWFJoYVd3aUxDSnViM2NpTENKRVlYUmxJaXdpWkhSeklpd2ljM0JzYVhRaUxDSnRjMmRVYVcxbElpd2laMlYwVkdsdFpTSXNJbk4wWVcxd0lpd2lkSHB2Wm1aelpYUWlMQ0puWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ0lzSW1Ga2FuVnpkR1ZrVkdsdFpTSXNJblJ2U1ZOUFUzUnlhVzVuSWl3aWMyeHBZMlVpTENKbGJuWmxiRzl3WlNJc0ltVjJaVzUwSWl3aVpHRjBaWFJwYldVaUxDSktVMDlPSWl3aWMzUnlhVzVuYVdaNUlpd2laVzVqVFhObklpd2lRV1Z6Ulc1amNubHdkQ0lzSW1odFlXTlRhV2NpTENKSWJXRmpVMmxuYm1GMGRYSmxJaXdpWlc1amNrMWxjM05oWjJWRmJuWmxiRzl3WlNJc0ltSmhibXRFWVhSbElpd2liR1Z1WjNSb0lpd2ljM1ZpYzNSeUlpd2laR0YwWlNJc0luUnBiV1VpTENKdGMyZEtjMjl1SWl3aVpXNTJJaXdpY0dGeWMyVWlMQ0p6YVdjaUxDSmtaV055ZVhCMFpXUktjMjl1SWl3aVFXVnpSR1ZqY25sd2RDSXNJbVJsWTNKNWNIUmxaRTF6WnlJc0lrbHVZMjl0YVc1blNHMWhZeUlzSW1VaUxDSkJaVzVqSWl3aVFTSXNJa0ZvYldGaklpd2ljbVZ4ZFdWemRFbGtJaXdpUW1WdVl5SXNJa0pvYldGaklpd2lRaUlzSWtOdmJtWnBjbTFoZEdsdmJrTnZaR1VpTENKemRXSnpkSEpwYm1jaUxDSlRaV055WlhSelFXNWtTMlY1VW1WemNHOXVjMlVpTENKclpYbFNaWE53YjI1elpTSXNJa1J5YjNCTFpYbHpVbVZ4ZFdWemRDSXNJa2RGVGtWU1FWUlBVaUlzSWtkU1QxVlFNVFJmTWpBME9GOUNTVlJmVFU5RVVDSXNJbEJoYVhKcGJtZElaV3h3WlhJaUxDSnJaWGxTWlhGMVpYTjBJaXdpWlc1alVIVmlRVzVrVTJWaklpd2lYMk5oYkdOMWJHRjBaVTE1VUhWaWJHbGpTMlY1UVc1a1UyVmpjbVYwSWl3aVRYbFFkV0pzYVdOTFpYa2lMQ0pUWlc1aklpd2lVMmhoY21Wa1UyVmpjbVYwUzJWNUlpd2lhRzFoWTFCMVlrRnVaRk5sWXlJc0lsTm9iV0ZqSWl3aVpHbG1abWxsU0dWc2JHMWhiaUlzSW0xNVVISnBkbUYwWlVKSklpd2lVbUZ1Wkc5dFVISnBkbUYwWlV0bGVTSXNJbTE1VUhWaWJHbGpRa2tpTENKUWRXSnNhV05MWlhraUxDSnpaV055WlhSQ1NTSXNJbE5sWTNKbGRDSXNJa1JJVTJWamNtVjBWRzlUVUVsVFpXTnlaWFFpTENKUWRXSnNhV05MWlhsQmJtUlRaV055WlhRaUxDSndZV1JUZEdGeWRDSXNJbTE1VUhWaWJHbGpTMlY1SWl3aWMyaGhjbVZrVTJWamNtVjBTMlY1SWl3aVFtbHNiRk4wWVhSMWMxSmxjM0J2Ym5ObElpd2lVbVZ6ZFd4MElpd2lRbWxzYkVsa0lpd2lWR0ZpYkdWSlpDSXNJazl3WlhKaGRHOXlTV1FpTENKVWIzUmhiRUZ0YjNWdWRDSXNJazkxZEhOMFlXNWthVzVuUVcxdmRXNTBJaXdpUW1sc2JFUmhkR0VpTENKaWFXeHNVR0Y1YldWdWRFaHBjM1J2Y25raUxDSnpZWFpsWkVKcGJHeEVZWFJoSWl3aWJXRndJaXdpWW1sc2JDSXNJbEJoZVcxbGJuUklhWE4wYjNKNVJXNTBjbmtpTENKd1lYbHRaVzUwWDNSNWNHVWlMQ0p3WVhsdFpXNTBYM04xYlcxaGNua2lMQ0p0WlhOellXZGxTV1FpTENKQ2FXeHNVbVYwY21sbGRtRnNVbVZ6ZFd4MElpd2lVMVZEUTBWVFV5SXNJbUpwYkd4ZmFXUWlMQ0owWVdKc1pWOXBaQ0lzSW1KcGJHeGZkRzkwWVd4ZllXMXZkVzUwSWl3aVltbHNiRjl2ZFhSemRHRnVaR2x1WjE5aGJXOTFiblFpTENKaWFXeHNYM0JoZVcxbGJuUmZhR2x6ZEc5eWVTSXNJbWRsZEVKcGJHeFFZWGx0Wlc1MFNHbHpkRzl5ZVNJc0luQm9JaXdpU1U1V1FVeEpSRjlVUVVKTVJWOUpSQ0lzSWtsT1ZrRk1TVVJmUWtsTVRGOUpSQ0lzSWtsT1ZrRk1TVVJmVDFCRlVrRlVUMUpmU1VRaUxDSlFZWGx0Wlc1MFZIbHdaU0lzSWtOQlVrUWlMQ0pEUVZOSUlpd2lRbWxzYkZCaGVXMWxiblFpTENKZmFXNWpiMjFwYm1kQlpIWnBZMlVpTENKUVlYbHRaVzUwUm14dmQxTjBZWEowWldRaUxDSndkQ0lzSW5CMWNtTm9ZWE5sVFhObklpd2lVSFZ5WTJoaGMyVkJiVzkxYm5RaUxDSkhaWFJRZFhKamFHRnpaVUZ0YjNWdWRDSXNJbFJwY0VGdGIzVnVkQ0lzSWtkbGRGUnBjRUZ0YjNWdWRDSXNJa2RsZEZOMWNtTm9ZWEpuWlVGdGIzVnVkQ0lzSW5CaGVXMWxiblJVZVhCbElpd2ljR0Y1YldWdWRGTjFiVzFoY25raUxDSlFZWGx0Wlc1MFUzVnRiV0Z5ZVNJc0lsQmhlVUYwVkdGaWJHVkRiMjVtYVdjaUxDSlFZWGxCZEZSaFlteGxSVzVoWW14bFpDSXNJazl3WlhKaGRHOXlTV1JGYm1GaWJHVmtJaXdpVTNCc2FYUkNlVUZ0YjNWdWRFVnVZV0pzWldRaUxDSkZjWFZoYkZOd2JHbDBSVzVoWW14bFpDSXNJbFJoWW14bFVtVjBjbWxsZG1Gc1JXNWhZbXhsWkNJc0lsUnBjSEJwYm1kRmJtRmliR1ZrSWl3aVUzVnRiV0Z5ZVZKbGNHOXlkRVZ1WVdKc1pXUWlMQ0pNWVdKbGJGQmhlVUoxZEhSdmJpSXNJa3hoWW1Wc1QzQmxjbUYwYjNKSlpDSXNJa3hoWW1Wc1ZHRmliR1ZKWkNJc0lrRnNiRzkzWldSUGNHVnlZWFJ2Y2tsa2N5SXNJa2RsZEU5d1pXNVVZV0pzWlhOU1pYTndiMjV6WlNJc0lsUmhZbXhsUkdGMFlTSXNJblJoWW14bGN5SXNJa2RsZEU5d1pXNVVZV0pzWlhNaUxDSlBjR1Z1VkdGaWJHVnpSVzUwY25raUxDSk1ZV0psYkNJc0lrSnBiR3hQZFhSemRHRnVaR2x1WjBGdGIzVnVkQ0lzSW14aFltVnNJaXdpUW1sc2JGQmhlVzFsYm5SR2JHOTNSVzVrWldSU1pYTndiMjV6WlNJc0lrSnBiR3hVYjNSaGJFRnRiM1Z1ZENJc0ltOXdaWEpoZEc5eVgybGtJaXdpUTJGeVpGUnZkR0ZzUTI5MWJuUWlMQ0pqWVhKa1gzUnZkR0ZzWDJOdmRXNTBJaXdpUTJGeVpGUnZkR0ZzUVcxdmRXNTBJaXdpWTJGeVpGOTBiM1JoYkY5aGJXOTFiblFpTENKRFlYTm9WRzkwWVd4RGIzVnVkQ0lzSW1OaGMyaGZkRzkwWVd4ZlkyOTFiblFpTENKRFlYTm9WRzkwWVd4QmJXOTFiblFpTENKallYTm9YM1J2ZEdGc1gyRnRiM1Z1ZENJc0lsQnZibWRJWld4d1pYSWlMQ0p3YVc1bklpd2lVR2x1WjBobGJIQmxjaUlzSW5abGNuTnBiMjRpTENKMlpXNWtiM0pKWkNJc0lteHBZbkpoY25sTVlXNW5kV0ZuWlNJc0lteHBZbkpoY25sV1pYSnphVzl1SWl3aWIzUm9aWEpKYm1adklpd2lYM1psY25OcGIyNGlMQ0pmZG1WdVpHOXlTV1FpTENKZmJHbGljbUZ5ZVV4aGJtZDFZV2RsSWl3aVgyeHBZbkpoY25sV1pYSnphVzl1SWl3aVgyOTBhR1Z5U1c1bWJ5SXNJbkJ2YzE5MlpYSnphVzl1SWl3aWNHOXpYM1psYm1SdmNsOXBaQ0lzSW14cFluSmhjbmxmYkdGdVozVmhaMlVpTENKc2FXSnlZWEo1WDNabGNuTnBiMjRpTENKdmRHaGxjbDlwYm1adklpd2lYM04xWTJObGMzTWlMQ0pFWlhacFkyVkpibVp2SWl3aVpHVjJhV05sU1c1bWJ5SXNJbTVoZG1sbllYUnZjaUlzSW5WelpYSkJaMlZ1ZENJc0lsQnlaV0YxZEdoRmRtVnVkSE1pTENKQlkyTnZkVzUwVm1WeWFXWjVVbVZ4ZFdWemRDSXNJa0ZqWTI5MWJuUldaWEpwWm5sU1pYTndiMjV6WlNJc0lsQnlaV0YxZEdoUGNHVnVVbVZ4ZFdWemRDSXNJbEJ5WldGMWRHaFBjR1Z1VW1WemNHOXVjMlVpTENKUWNtVmhkWFJvVkc5d2RYQlNaWEYxWlhOMElpd2lVSEpsWVhWMGFGUnZjSFZ3VW1WemNHOXVjMlVpTENKUWNtVmhkWFJvUlhoMFpXNWtVbVZ4ZFdWemRDSXNJbEJ5WldGMWRHaEZlSFJsYm1SU1pYTndiMjV6WlNJc0lsQnlaV0YxZEdoUVlYSjBhV0ZzUTJGdVkyVnNiR0YwYVc5dVVtVnhkV1Z6ZENJc0lsQnlaV0YxZEdoUVlYSjBhV0ZzUTJGdVkyVnNiR0YwYVc5dVVtVnpjRzl1YzJVaUxDSlFjbVZoZFhSb1EyRnVZMlZzYkdGMGFXOXVVbVZ4ZFdWemRDSXNJbEJ5WldGMWRHaERZVzVqWld4c1lYUnBiMjVTWlhOd2IyNXpaU0lzSWxCeVpXRjFkR2hEYjIxd2JHVjBaVkpsY1hWbGMzUWlMQ0pRY21WaGRYUm9RMjl0Y0d4bGRHVlNaWE53YjI1elpTSXNJa1JsZEdGcGJITWlMQ0pRY21WaGRYUm9RVzF2ZFc1MElpd2ljSEpsWVhWMGFFbGtJaXdpZEc5d2RYQkJiVzkxYm5SRFpXNTBjeUlzSWxCeVpXRjFkR2hKWkNJc0lsUnZjSFZ3UVcxdmRXNTBJaXdpY0dGeWRHbGhiRU5oYm1ObGJHeGhkR2x2YmtGdGIzVnVkRU5sYm5Seklpd2lVR0Z5ZEdsaGJFTmhibU5sYkd4aGRHbHZia0Z0YjNWdWRDSXNJbEJ5WldGMWRHaERZVzVqWld4U1pYRjFaWE4wSWl3aVVISmxZWFYwYUVOdmJYQnNaWFJwYjI1U1pYRjFaWE4wSWl3aVkyOXRjR3hsZEdsdmJrRnRiM1Z1ZEVObGJuUnpJaXdpYzNWeVkyaGhjbWRsUVcxdmRXNTBJaXdpUTI5dGNHeGxkR2x2YmtGdGIzVnVkQ0lzSWxCeVpXRjFkR2hTWlhOd2IyNXpaU0lzSW5SNFZIbHdaU0lzSWw5clpYa2lMQ0pmY0dGNWJHOWhaQ0lzSWxCeWFXNTBaWElpTENKUWNtOXRjSFJHYjNKRFlYTm9iM1YwSWl3aVFXMXZkVzUwUTJWdWRITWlMQ0owYjBacGVHVmtJaXdpY0hWeVkyaGhjMlZmWVcxdmRXNTBJaXdpZEdsd1gyRnRiM1Z1ZENJc0ltTmhjMmhmWVcxdmRXNTBJaXdpY0hKdmJYQjBYMlp2Y2w5allYTm9iM1YwSWl3aWMzVnlZMmhoY21kbFgyRnRiM1Z1ZENJc0lsTmphR1Z0WlVGd2NFNWhiV1VpTENKeWNtNGlMQ0ppWVc1clgyNXZibU5oYzJoZllXMXZkVzUwSWl3aVltRnVhMTlqWVhOb1gyRnRiM1Z1ZENJc0ltTjFjM1J2YldWeVgzSmxZMlZwY0hRaUxDSnRaWEpqYUdGdWRGOXlaV05sYVhCMElpd2lhRzl6ZEY5eVpYTndiMjV6WlY5MFpYaDBJaXdpYUc5emRGOXlaWE53YjI1elpWOWpiMlJsSWl3aWRHVnliV2x1WVd4ZmNtVm1YMmxrSWl3aVkyRnlaRjlsYm5SeWVTSXNJbUZqWTI5MWJuUmZkSGx3WlNJc0ltRjFkR2hmWTI5a1pTSXNJbUpoYm10ZlpHRjBaU0lzSW1KaGJtdGZkR2x0WlNJc0ltMWhjMnRsWkY5d1lXNGlMQ0owWlhKdGFXNWhiRjlwWkNJc0ltMWxjbU5vWVc1MFgzSmxZMlZwY0hSZmNISnBiblJsWkNJc0ltTjFjM1J2YldWeVgzSmxZMlZwY0hSZmNISnBiblJsWkNJc0ltUmhkR1ZUZEhJaUxDSmlZVzVyWDNObGRIUnNaVzFsYm5SZlpHRjBaU0lzSWxCaGNuTmxRbUZ1YTBSaGRHVWlMQ0pIWlhSQlkyTnZkVzUwVkhsd1pTSXNJa2RsZEVGMWRHaERiMlJsSWl3aVIyVjBRbUZ1YTBSaGRHVWlMQ0pIWlhSQ1lXNXJWR2x0WlNJc0lrZGxkRkpsYzNCdmJuTmxRMjlrWlNJc0lrZGxkRkpsYzNCdmJuTmxWR1Y0ZENJc0lrZGxkRTFoYzJ0bFpGQmhiaUlzSWtkbGRGSlNUaUlzSWtkbGRGUmxjbTFwYm1Gc1NXUWlMQ0pIWlhSVVpYSnRhVzVoYkZKbFptVnlaVzVqWlVsa0lpd2lSMlYwUlhKeWIzSWlMQ0p6ZEdGeWRITlhhWFJvSWl3aVYyRnpUM0JsY21GMGFXOXVTVzVRY205bmNtVnpjMFZ5Y205eUlpd2lSMlYwVUc5elVtVm1TV1FpTENKMGNtRnVjMkZqZEdsdmJsOTBlWEJsSWl3aVlXMXZkVzUwWDNCMWNtTm9ZWE5sSWl3aVlXMXZkVzUwWDNSeVlXNXpZV04wYVc5dVgzUjVjR1VpTENKa2N5SXNJbU55SWl3aWJYSWlMQ0p6ZFhCd2NtVnpjMDFsY21Ob1lXNTBVR0Z6YzNkdmNtUWlMQ0pUZFhCd2NtVnpjMDFsY21Ob1lXNTBVR0Z6YzNkdmNtUWlMQ0p5WldaMWJtUmZZVzF2ZFc1MElpd2ljM1Z3Y0hKbGMzTmZiV1Z5WTJoaGJuUmZjR0Z6YzNkdmNtUWlMQ0pmY21WalpXbHdkRlJ2VTJsbmJpSXNJbkpsWTJWcGNIUlViMU5wWjI0aUxDSlRhV2R1WVhSMWNtVkVaV05zYVc1bElpd2lVMmxuYm1GMGRYSmxRV05qWlhCMElpd2lVR2h2Ym1WR2IzSkJkWFJvVW1WeGRXbHlaV1FpTENKZmNHaHZibVZPZFcxaVpYSWlMQ0pmYldWeVkyaGhiblJKWkNJc0ltRjFkR2hmWTJWdWRISmxYM0JvYjI1bFgyNTFiV0psY2lJc0ltMWxjbU5vWVc1MFgybGtJaXdpWVhWMGFFTnZaR1VpTENKQmRYUm9RMjlrWlNJc0lsQjFjbU5vWVhObFNHVnNjR1Z5SWl3aWNIVnlZMmhoYzJWSlpDSXNJbkIxY21Ob1lYTmxRVzF2ZFc1MElpd2lkR2x3UVcxdmRXNTBJaXdpWTJGemFHOTFkRUZ0YjNWdWRDSXNJbkJ5YjIxd2RFWnZja05oYzJodmRYUWlMQ0p3Y2lJc0lrOWlhbVZqZENJc0ltRnpjMmxuYmlJc0lsOWZVbVZ4ZFdWemRFbGtTR1ZzY0dWeVEyOTFiblJsY2lJc0luQnlaV1pwZUNJc0ltVnVZMHRsZVNJc0ltaHRZV05MWlhraUxDSnNiMk5oYkZOMGIzSmhaMlVpTENKelpYUkpkR1Z0SWl3aVoyVjBTWFJsYlNJc0luSmxiVzkyWlVsMFpXMGlMQ0pFWlhacFkyVkJaR1J5WlhOelUzUmhkSFZ6SWl3aVpuRmtiaUlzSW1sd0lpd2lZV1JrY21WemN5SXNJbUZrWkhKbGMyVnpJaXdpZFhObFUyVmpkWEpsVjJWaVUyOWphMlYwY3lJc0lreGhjM1JWY0dSaGRHVmtJaXdpUkdWMmFXTmxRV1JrY21WemMxSmxjM0J2Ym5ObFEyOWtaU0lzSWxKbGMzQnZibk5sVTNSaGRIVnpSR1Z6WTNKcGNIUnBiMjRpTENKU1pYTndiMjV6WlUxbGMzTmhaMlVpTENKSlRsWkJURWxFWDFORlVrbEJURjlPVlUxQ1JWSWlMQ0pCUkVSU1JWTlRYMDVQVkY5RFNFRk9SMFZFSWl3aVUwVlNTVUZNWDA1VlRVSkZVbDlPVDFSZlEwaEJUa2RGUkNJc0lrUkZWa2xEUlY5VFJWSldTVU5GWDBWU1VrOVNJaXdpU0hSMGNGTjBZWFIxYzBOdlpHVWlMQ0pPYjNSR2IzVnVaQ0lzSWtSbGRtbGpaVUZrWkhKbGMzTlRaWEoyYVdObElpd2ljMlZ5YVdGc1RuVnRZbVZ5SWl3aVlYQnBTMlY1SWl3aVlXTnhkV2x5WlhKRGIyUmxJaXdpYVhOVFpXTjFjbVZEYjI1dVpXTjBhVzl1SWl3aWFYTlVaWE4wVFc5a1pTSXNJa05QVGs1RlExUkpUMDVmVkVsTlJVOVZWQ0lzSW5CaGRHZ2lMQ0prWlhacFkyVkJaR1J5WlhOelZYSnBJaXdpVUhKdmJXbHpaU0lzSW5KaFkyVWlMQ0ptWlhSamFDSXNJbTFsZEdodlpDSXNJbWhsWVdSbGNuTWlMQ0pmSWl3aWNtVnFaV04wSWl3aVUyVjBkR3hsYldWdWRDSXNJbUZqWTNWdGRXeGhkR1ZrWDNObGRIUnNaVjlpZVY5aFkzRjFhWEpsY2w5amIzVnVkQ0lzSW1GalkzVnRkV3hoZEdWa1gzTmxkSFJzWlY5aWVWOWhZM0YxYVhKbGNsOTJZV3gxWlNJc0ltRmpZM1Z0ZFd4aGRHVmtYM1J2ZEdGc1gyTnZkVzUwSWl3aVlXTmpkVzExYkdGMFpXUmZkRzkwWVd4ZmRtRnNkV1VpTENKMGFXMWxVM1J5SWl3aWMyVjBkR3hsYldWdWRGOXdaWEpwYjJSZmMzUmhjblJmZEdsdFpTSXNJbk5sZEhSc1pXMWxiblJmY0dWeWFXOWtYM04wWVhKMFgyUmhkR1VpTENKUVlYSnpaVUpoYm10RVlYUmxWR2x0WlZOMGNpSXNJbk5sZEhSc1pXMWxiblJmY0dWeWFXOWtYMlZ1WkY5MGFXMWxJaXdpYzJWMGRHeGxiV1Z1ZEY5d1pYSnBiMlJmWlc1a1gyUmhkR1VpTENKelpYUjBiR1Z0Wlc1MFgzUnlhV2RuWlhKbFpGOTBhVzFsSWl3aWMyVjBkR3hsYldWdWRGOTBjbWxuWjJWeVpXUmZaR0YwWlNJc0luUnlZVzV6WVdOMGFXOXVYM0poYm1kbElpd2ljMk5vWlcxbGN5SXNJbk5qYUdWdFpTSXNJbE5qYUdWdFpWTmxkSFJzWlcxbGJuUkZiblJ5ZVNJc0lsTmxkSFJzWlVKNVFXTnhkV2x5WlhJaUxDSnpaWFIwYkdWZllubGZZV054ZFdseVpYSWlMQ0owYjB4dmQyVnlRMkZ6WlNJc0lsUnZkR0ZzVm1Gc2RXVWlMQ0p3WVhKelpVbHVkQ0lzSW5SdmRHRnNYM1poYkhWbElpd2lWRzkwWVd4RGIzVnVkQ0lzSW5SdmRHRnNYMk52ZFc1MElpd2lVMUJKWDFaRlVsTkpUMDRpTENKVGNHa2lMQ0pmWTNWeWNtVnVkRk4wWVhSMWN5SXNJbVZtZEhCdmMwRmtaSEpsYzNNaUxDSmZjRzl6U1dRaUxDSmZjMlZ5YVdGc1RuVnRZbVZ5SWl3aVgzTmxZM0psZEhNaUxDSmZabTl5WTJWVFpXTjFjbVZYWldKVGIyTnJaWFJ6SWl3aVgyVm1kSEJ2YzBGa1pISmxjM01pTENKZmJHOW5JaXdpWDJOdmJtNGlMQ0pEZFhKeVpXNTBSR1YyYVdObFUzUmhkSFZ6SWl3aVgyUmxkbWxqWlVGd2FVdGxlU0lzSWw5aFkzRjFhWEpsY2tOdlpHVWlMQ0pmYVc1VVpYTjBUVzlrWlNJc0lsOWhkWFJ2UVdSa2NtVnpjMUpsYzI5c2RYUnBiMjVGYm1GaWJHVmtJaXdpWDNOd2FVMWxjM05oWjJWVGRHRnRjQ0lzSWw5d2IzTldaVzVrYjNKSlpDSXNJbDl3YjNOV1pYSnphVzl1SWl3aVgyaGhjMU5sZEVsdVptOGlMQ0pmYlc5emRGSmxZMlZ1ZEZCcGJtZFRaVzUwSWl3aVgyMXZjM1JTWldObGJuUlFiMjVuVW1WalpXbDJaV1FpTENKZmJXbHpjMlZrVUc5dVozTkRiM1Z1ZENJc0lsOXlaWFJ5YVdWelUybHVZMlZNWVhOMFJHVjJhV05sUVdSa2NtVnpjMUpsYzI5c2RYUnBiMjRpTENKZmJXOXpkRkpsWTJWdWRFeHZaMmx1VW1WemNHOXVjMlVpTENKZmNHOXVaMVJwYldWdmRYUWlMQ0pmY0dsdVowWnlaWEYxWlc1amVTSXNJbDl5WldGa2VWUnZWSEpoYm5OaFkzUWlMQ0pmY0dWeWFXOWthV05RYVc1blZHaHlaV0ZrSWl3aVgzUjRUVzl1YVhSdmNrTm9aV05yUm5KbGNYVmxibU41SWl3aVgyTm9aV05yVDI1VWVFWnlaWEYxWlc1amVTSXNJbDl0WVhoWFlXbDBSbTl5UTJGdVkyVnNWSGdpTENKZmMyeGxaWEJDWldadmNtVlNaV052Ym01bFkzUk5jeUlzSWw5dGFYTnpaV1JRYjI1bmMxUnZSR2x6WTI5dWJtVmpkQ0lzSWw5eVpYUnlhV1Z6UW1WbWIzSmxVbVZ6YjJ4MmFXNW5SR1YyYVdObFFXUmtjbVZ6Y3lJc0lsOXlaWFJ5YVdWelUybHVZMlZNWVhOMFVHRnBjbWx1WnlJc0lsOXlaWFJ5YVdWelFtVm1iM0psVUdGcGNtbHVaeUlzSWw5eVpXZGxlRWwwWlcxelJtOXlSV1owY0c5elFXUmtjbVZ6Y3lJc0lsOXlaV2RsZUVsMFpXMXpSbTl5Um5Ga2JrVm1kSEJ2YzBGa1pISmxjM01pTENKZmNtVm5aWGhKZEdWdGMwWnZjbEJ2YzBsa0lpd2lRM1Z5Y21WdWRFWnNiM2NpTENKRGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaU0lzSWtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlNJc0lsOXpjR2xRWVhRaUxDSlRjR2xRWVhsQmRGUmhZbXhsSWl3aVgzTndhVkJ5WldGMWRHZ2lMQ0pUY0dsUWNtVmhkWFJvSWl3aWQyRnliaUlzSWw5cGMxQnZjMGxrVm1Gc2FXUWlMQ0pmYVhORlpuUndiM05CWkdSeVpYTnpWbUZzYVdRaUxDSmZjbVZ6WlhSRGIyNXVJaXdpWDNOMFlYSjBWSEpoYm5OaFkzUnBiMjVOYjI1cGRHOXlhVzVuVkdoeVpXRmtJaXdpVTNCcFJteHZkeUlzSWtsa2JHVWlMQ0pwYm1adklpd2lVM0JwVTNSaGRIVnpJaXdpVUdGcGNtVmtRMjl1Ym1WamRHbHVaeUlzSWtOdmJtNWxZM1FpTENKVmJuQmhhWEpsWkNJc0ltUmxkbWxqWlVGd2FVdGxlU0lzSWtOMWNuSmxiblJUZEdGMGRYTWlMQ0ozWVhNaUxDSklZWE5UWlhKcFlXeE9kVzFpWlhKRGFHRnVaMlZrSWl3aVgyRjFkRzlTWlhOdmJIWmxSV1owY0c5elFXUmtjbVZ6Y3lJc0ltRjFkRzlCWkdSeVpYTnpVbVZ6YjJ4MWRHbHZia1Z1WVdKc1pTSXNJbEJoYVhKbFpFTnZibTVsWTNSbFpDSXNJblJsYzNSTmIyUmxJaXdpY0c5elZtVnVaRzl5U1dRaUxDSndiM05XWlhKemFXOXVJaXdpVUdGcGNtbHVaeUlzSWtacGJtbHphR1ZrSWl3aVZISmhibk5oWTNScGIyNGlMQ0pRWVdseWFXNW5SbXh2ZDFOMFlYUmxJaXdpVTNWalkyVnpjMloxYkNJc0lrRjNZV2wwYVc1blEyaGxZMnRHY205dFJXWjBjRzl6SWl3aVFYZGhhWFJwYm1kRGFHVmphMFp5YjIxUWIzTWlMQ0pmYjI1UVlXbHlhVzVuVTNWalkyVnpjeUlzSWw5dmJsSmxZV1I1Vkc5VWNtRnVjMkZqZENJc0lsOXpaVzVrSWl3aVZHOU5aWE56WVdkbElpd2lYMjl1VUdGcGNtbHVaMFpoYVd4bFpDSXNJbDlrYjFWdWNHRnBjaUlzSWtsdWFYUnBZWFJsVkhoU1pYTjFiSFFpTENKd2RYSmphR0Z6WlZKbGNYVmxjM1FpTENKRGNtVmhkR1ZRZFhKamFHRnpaVkpsY1hWbGMzUWlMQ0pVY21GdWMyRmpkR2x2Ymtac2IzZFRkR0YwWlNJc0lsUnlZVzV6WVdOMGFXOXVWSGx3WlNJc0lsQjFjbU5vWVhObElpd2lVMlZ1ZENJc0ltOXdkR2x2Ym5NaUxDSndkWEpqYUdGelpTSXNJa055WldGMFpWQjFjbU5vWVhObFVtVnhkV1Z6ZEZZeUlpd2lRVzF2ZFc1MFUzVnRiV0Z5ZVNJc0luSmxablZ1WkZKbGNYVmxjM1FpTENKRGNtVmhkR1ZTWldaMWJtUlNaWEYxWlhOMElpd2ljbVZtZFc1a1RYTm5JaXdpVW1WbWRXNWtJaXdpWVdOalpYQjBaV1FpTENKQmQyRnBkR2x1WjFOcFoyNWhkSFZ5WlVOb1pXTnJJaXdpVFdsa1ZIaFNaWE4xYkhRaUxDSlRhV2R1WVhSMWNtVlNaWE53YjI1a1pXUWlMQ0p6YVdkU1pYRk5jMmNpTENKVGFXZHVZWFIxY21WU1pYRjFhWEpsWkUxbGMzTmhaMlVpTENKVGRXSnRhWFJCZFhSb1EyOWtaVkpsYzNWc2RDSXNJa0YzWVdsMGFXNW5VR2h2Ym1WR2IzSkJkWFJvSWl3aVFYVjBhRU52WkdWVFpXNTBJaXdpVW1WeGRXVnpkRk5sYm5RaUxDSmpZVzVqWld4U1pYRWlMQ0pEWVc1alpXeHNhVzVuSWl3aVkyRnphRzkxZEUxelp5SXNJa05oYzJodmRYUlBibXg1SWl3aWJXOTBiMUIxY21Ob1lYTmxUWE5uSWl3aVRVOVVUeUlzSW5ObGRIUnNaVTF6WnlJc0lsTmxkSFJzWlNJc0luTjBiRVZ1Y1Uxelp5SXNJbE5sZEhSc1pXMWxiblJGYm5GMWFYSjVJaXdpWjJ4MFVtVnhkV1Z6ZEUxelp5SXNJa2RsZEV4aGMzUlVjbUZ1YzJGamRHbHZiaUlzSWtOaGJHeHBibWRIYkhRaUxDSm5iSFJTWlhOd2IyNXpaU0lzSW1WNGNHVmpkR1ZrUVcxdmRXNTBJaXdpY21WeGRXVnpkRlJwYldVaUxDSkhiSFJOWVhSamFDSXNJbWRzZEVKaGJtdEVZWFJsVkdsdFpWTjBjaUlzSWtkbGRFSmhibXRFWVhSbFZHbHRaVk4wY21sdVp5SXNJbWRzZEVKaGJtdEVZWFJsVkdsdFpTSXNJbU52YlhCaGNtVWlMQ0pIWlhSVWVGUjVjR1VpTENKSFpYUkNZVzVyVG05dVEyRnphRUZ0YjNWdWRDSXNJblJ2VFdWemMyRm5aU0lzSW5KbGMzVnNkQ0lzSWtkbGJtVnlZWFJsVTJWamNtVjBjMEZ1WkV0bGVWSmxjM0J2Ym5ObElpd2lhMlY1UTJobFkyc2lMQ0p3WVdseVVtVnpjQ0lzSWw5emRHRnlkRkJsY21sdlpHbGpVR2x1WnlJc0ltdHlVbVZ6SWl3aVVHVnlabTl5YlV0bGVWSnZiR3hwYm1jaUxDSnBibU52YldsdVoxQnZjMUpsWmtsa0lpd2ljR2h2Ym1WR2IzSkJkWFJvVW1WeGRXbHlaV1FpTENKdGMyY2lMQ0pIWlhSUWFHOXVaVTUxYldKbGNpSXNJa2RsZEUxbGNtTm9ZVzUwU1dRaUxDSkRiMjF3YkdWMFpXUWlMQ0pCZEhSbGJYQjBhVzVuVkc5RFlXNWpaV3dpTENKZlkyRnNiRWRsZEV4aGMzUlVjbUZ1YzJGamRHbHZiaUlzSW5SNFUzUmhkR1VpTENKQmQyRnBkR2x1WjBkc2RGSmxjM0J2Ym5ObElpd2lUR0Z6ZEVkc2RGSmxjWFZsYzNSSlpDSXNJa2R2ZEVkc2RGSmxjM0J2Ym5ObElpd2laM1JzVW1WemNHOXVjMlVpTENKSFRGUlNaWE53YjI1elpWQnZjMUpsWmtsa0lpd2lWMkZ6VW1WMGNtbGxkbVZrVTNWalkyVnpjMloxYkd4NUlpd2lTWE5UZEdsc2JFbHVVSEp2WjNKbGMzTWlMQ0pKYzFkaGFYUnBibWRHYjNKVGFXZHVZWFIxY21WU1pYTndiMjV6WlNJc0lrbHpWMkZwZEdsdVowWnZja0YxZEdoRGIyUmxJaXdpVjJGelZHbHRaVTkxZEU5bVUzbHVZMFZ5Y205eUlpd2lWSGx3WlNJc0lrTnZjSGxOWlhKamFHRnVkRkpsWTJWcGNIUlViME4xYzNSdmJXVnlVbVZqWldsd2RDSXNJbk4xWTJObGMzTlRkR0YwWlNJc0lsSmxjWFZsYzNSVWFXMWxJaXdpVlc1cmJtOTNia052YlhCc1pYUmxaQ0lzSW1OaGJtTmxiRkpsYzNCdmJuTmxJaXdpVjJGelZIaHVVR0Z6ZEZCdmFXNTBUMlpPYjFKbGRIVnliaUlzSWtkbGRFVnljbTl5VW1WaGMyOXVJaXdpUjJWMFJYSnliM0pFWlhSaGFXd2lMQ0pEWVc1alpXeEdZV2xzWldRaUxDSnlaWE53YjI1elpTSXNJbWx6VTNWalkyVnpjeUlzSW1kbGRFVnljbTl5VW1WaGMyOXVJaXdpWjJWMFJYSnliM0pFWlhSaGFXd2lMQ0p1WldWa2MxQjFZbXhwYzJocGJtY2lMQ0p6ZEdGMFpTSXNJa05oYm1ObGJFRjBkR1Z0Y0hSVWFXMWxJaXdpVEdGemRGTjBZWFJsVW1WeGRXVnpkRlJwYldVaUxDSmZhWE5WYzJsdVowaDBkSEJ6SWl3aWNtVndiR0ZqWlNJc0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxDSmZiMjVUY0dsRGIyNXVaV04wYVc5dVUzUmhkSFZ6UTJoaGJtZGxaQ0lzSWw5dmJsTndhVTFsYzNOaFoyVlNaV05sYVhabFpDSXNJbDl2YmxkelJYSnliM0pTWldObGFYWmxaQ0lzSWs1bGQxQmhhWEpTWlhGMVpYTjBJaXdpWDNOMGIzQlFaWEpwYjJScFkxQnBibWNpTENKelpYUkpiblJsY25aaGJDSXNJbDl3WlhKcGIyUnBZMUJwYm1jaUxDSmZaRzlRYVc1bklpd2lVbVZ4ZFdWemRDSXNJbDlqWVd4c1UyVjBVRzl6U1c1bWJ5SXNJbEIxYzJoUVlYbEJkRlJoWW14bFEyOXVabWxuSWl3aWMyVjBVRzl6U1c1bWIxSmxjWFZsYzNRaUxDSkhaWFJCY0hCRVpYWnBZMlZKYm1adklpd2lZMnhsWVhKSmJuUmxjblpoYkNJc0lrZGxibVZ5WVhSbFVHbHVaMUpsY1hWbGMzUWlMQ0pmYlc5emRGSmxZMlZ1ZEZCcGJtZFRaVzUwVkdsdFpTSXNJa2RsZEZObGNuWmxjbFJwYldWRVpXeDBZU0lzSW1SbFluVm5JaXdpY0c5dVp5SXNJa2RsYm1WeVlYUmxVRzl1WjFKbGMzTndiMjV6WlNJc0ltMWxjM05oWjJWS2MyOXVJaXdpUm5KdmJVcHpiMjRpTENKSmMxQnlaV0YxZEdoRmRtVnVkQ0lzSWw5b1lXNWtiR1ZRY21WaGRYUm9UV1Z6YzJGblpTSXNJbDlvWVc1a2JHVkxaWGxTWlhGMVpYTjBJaXdpWDJoaGJtUnNaVXRsZVVOb1pXTnJJaXdpWDJoaGJtUnNaVkJoYVhKU1pYTndiMjV6WlNJc0lsOW9ZVzVrYkdWRWNtOXdTMlY1YzBGa2RtbGpaU0lzSWw5b1lXNWtiR1ZRZFhKamFHRnpaVkpsYzNCdmJuTmxJaXdpWDJoaGJtUnNaVkpsWm5WdVpGSmxjM0J2Ym5ObElpd2lYMmhoYm1Sc1pVTmhjMmh2ZFhSUGJteDVVbVZ6Y0c5dWMyVWlMQ0pmYUdGdVpHeGxUVzkwYjFCMWNtTm9ZWE5sVW1WemNHOXVjMlVpTENKZmFHRnVaR3hsVTJsbmJtRjBkWEpsVW1WeGRXbHlaV1FpTENKZmFHRnVaR3hsUVhWMGFFTnZaR1ZTWlhGMWFYSmxaQ0lzSWw5b1lXNWtiR1ZIWlhSTVlYTjBWSEpoYm5OaFkzUnBiMjVTWlhOd2IyNXpaU0lzSWtoaGJtUnNaVk5sZEhSc1pWSmxjM0J2Ym5ObElpd2lYMmhoYm1Sc1pWTmxkSFJzWlcxbGJuUkZibkYxYVhKNVVtVnpjRzl1YzJVaUxDSmZhR0Z1Wkd4bFNXNWpiMjFwYm1kUWFXNW5JaXdpWDJoaGJtUnNaVWx1WTI5dGFXNW5VRzl1WnlJc0lsOW9ZVzVrYkdWTFpYbFNiMnhzYVc1blVtVnhkV1Z6ZENJc0lsOW9ZVzVrYkdWRFlXNWpaV3hVY21GdWMyRmpkR2x2YmxKbGMzQnZibk5sSWl3aVgyaGhibVJzWlZObGRGQnZjMGx1Wm05U1pYTndiMjV6WlNJc0lrWmxZWFIxY21WRWFYTmhZbXhsVFdWemMyRm5aU0lzSWw5b1lXNWtiR1ZIWlhSVVlXSnNaVU52Ym1acFp5SXNJbDlvWVc1a2JHVkhaWFJDYVd4c1JHVjBZV2xzYzFKbGNYVmxjM1FpTENKZmFHRnVaR3hsUW1sc2JGQmhlVzFsYm5SQlpIWnBZMlVpTENKZmFHRnVaR3hsUjJWMFQzQmxibFJoWW14bGMxSmxjWFZsYzNRaUxDSmZhR0Z1Wkd4bFFtbHNiRkJoZVcxbGJuUkdiRzkzUlc1a1pXUWlMQ0pmYUdGdVpHeGxVSEpwYm5ScGJtZFNaWE53YjI1elpTSXNJbDlvWVc1a2JHVlVaWEp0YVc1aGJGTjBZWFIxYzFKbGMzQnZibk5sSWl3aVgyaGhibVJzWlVKaGRIUmxjbmxNWlhabGJFTm9ZVzVuWldRaUxDSmZhR0Z1Wkd4bFJYSnliM0pGZG1WdWRDSXNJbVZ5Y205eUlpd2lhbk52YmlJc0lsUnZTbk52YmlJc0lsTmxibVFpTENKdFlYUmphQ0lzSW5OaGJtbDBhWE5sWkVWbWRIQnZjMEZrWkhKbGMzTWlMQ0oxY0dSaGRHVmtVMlZ5YVdGc1RuVnRZbVZ5SWl3aWRYQmtZWFJsWkVWbWRIQnZjMEZrWkhKbGMzTWlMQ0pmYVhOVFpXTjFjbVZEYjI1dVpXTjBhVzl1SWl3aWMyVnlkbWxqWlNJc0lsSmxkSEpwWlhabFUyVnlkbWxqWlNJc0ltRmtaSEpsYzNOU1pYTndiMjV6WlNJc0ltRmtaSEpsYzNOU1pYTndiMjV6WlVwemIyNGlMQ0p6ZEdGMGRYTWlMQ0p6ZEdGMGRYTlVaWGgwSWl3aWJHRnpkRjkxY0dSaGRHVmtJaXdpYjJzaUxDSklZWE5GWm5Sd2IzTkJaR1J5WlhOelEyaGhibWRsWkNJc0luQnliM1J2WTI5c0lpd2liRzlqWVhScGIyNGlMQ0pRY21WaGRYUm9JaXdpUVdOamIzVnVkRlpsY21sbWVTSXNJbWx1YVhScFlYUmxaQ0lzSWtsdWFYUnBZWFJsWkNJc0luWmhiR2xrSWl3aVZtRnNhV1FpTENKMGVYQmxJaXdpUkdsemNHeGhlVTFsYzNOaFoyVWlMQ0pTWlhOd2IyNXpaU0lzSWxCb2IyNWxSbTl5UVhWMGFGSmxjWFZwY21Wa1RXVnpjMkZuWlNJc0ltZHNkRkpsY1hWbGMzUkpaQ0lzSW5Od2FVMWxjM05oWjJVaUxDSjJZV3hwWkVadmNtMWhkQ0lzSWxaaGJHbGtSbTl5YldGMElpd2lVSEpwYm5STlpYSmphR0Z1ZEVOdmNIa2lMQ0pRY205dGNIUkdiM0pEZFhOMGIyMWxja052Y0hsUGJrVm1kSEJ2Y3lJc0lsTnBaMjVoZEhWeVpVWnNiM2RQYmtWbWRIQnZjeUlzSW0xbGMzTmhaMlZFWVhSaElpd2ljSEp2YlhCMFgyWnZjbDlqZFhOMGIyMWxjbDlqYjNCNUlpd2ljSEpwYm5SZlptOXlYM05wWjI1aGRIVnlaVjl5WlhGMWFYSmxaRjkwY21GdWMyRmpkR2x2Ym5NaUxDSndjbWx1ZEY5dFpYSmphR0Z1ZEY5amIzQjVJaXdpWDJOMWMzUnZiV1Z5VW1WalpXbHdkRWhsWVdSbGNpSXNJbDlqZFhOMGIyMWxjbEpsWTJWcGNIUkdiMjkwWlhJaUxDSmZiV1Z5WTJoaGJuUlNaV05sYVhCMFNHVmhaR1Z5SWl3aVgyMWxjbU5vWVc1MFVtVmpaV2x3ZEVadmIzUmxjaUlzSW1OMWMzUnZiV1Z5VW1WalpXbHdkRWhsWVdSbGNpSXNJbU4xYzNSdmJXVnlVbVZqWldsd2RFWnZiM1JsY2lJc0ltMWxjbU5vWVc1MFVtVmpaV2x3ZEVobFlXUmxjaUlzSW0xbGNtTm9ZVzUwVW1WalpXbHdkRVp2YjNSbGNpSXNJbU4xYzNSdmJXVnlYM0psWTJWcGNIUmZhR1ZoWkdWeUlpd2lZM1Z6ZEc5dFpYSmZjbVZqWldsd2RGOW1iMjkwWlhJaUxDSnRaWEpqYUdGdWRGOXlaV05sYVhCMFgyaGxZV1JsY2lJc0ltMWxjbU5vWVc1MFgzSmxZMlZwY0hSZlptOXZkR1Z5SWl3aWMzQnBJaXdpWDNOd2FTSXNJbUpwYkd4SlpDSXNJblJoWW14bFNXUWlMQ0p2Y0dWeVlYUnZja2xrSWl3aWNHRjViV1Z1ZEVac2IzZFRkR0Z5ZEdWa0lpd2lZbWxzYkZCaGVXMWxiblFpTENKMWNHUmhkR1ZrUW1sc2JFUmhkR0VpTENKeVpYTnZiSFpsSWl3aVIyVjBRbWxzYkZOMFlYUjFjeUlzSW5Sb1pXNGlMQ0ppYVd4c1UzUmhkSFZ6SWl3aVpYaHBjM1JwYm1kQ2FXeHNVM1JoZEhWeklpd2laWGhwYzNScGJtZFFZWGx0Wlc1MFNHbHpkRzl5ZVNJc0ltWnZkVzVrUlhocGMzUnBibWRGYm5SeWVTSXNJbVpwYm1RaUxDSndhR1VpTENKSFpYUlVaWEp0YVc1aGJGSmxaa2xrSWl3aWRYQmtZWFJsWkVocGMzUnZjbmxGYm5SeWFXVnpJaXdpVkc5UVlYbHRaVzUwVTNWdGJXRnllU0lzSWxSdlFtbHNiRVJoZEdFaUxDSkNhV3hzVUdGNWJXVnVkRkpsWTJWcGRtVmtJaXdpZFhCa1lYUmxaRUpwYkd4VGRHRjBkWE1pTENKdmNHVnVWR0ZpYkdWelVtVnpjRzl1YzJVaUxDSkNhV3hzVUdGNWJXVnVkRVpzYjNkRmJtUmxaQ0lzSW5abGNtbG1lVTF6WnlJc0luUm1jeUlzSW5ObGJuUk5jMmNpTENKZmFXNXBkR2xoZEdWUWNtVmhkWFJvVkhnaUxDSmZhR0Z1Wkd4bFFXTmpiM1Z1ZEZabGNtbG1lVkpsYzNCdmJuTmxJaXdpWDJoaGJtUnNaVkJ5WldGMWRHaFNaWE53YjI1elpTSXNJbU4xY25KbGJuUlVlRVpzYjNkVGRHRjBaU0lzSW14aGMzUkpibVJsZUU5bUlpd2lZbUYwZEdWeWVWOXNaWFpsYkNJc0ltTm9ZWEpuYVc1bklpd2lWR1Z5YldsdVlXeENZWFIwWlhKNUlpd2lRbUYwZEdWeWVVeGxkbVZzSWwwc0ltMWhjSEJwYm1keklqb2lRVUZCUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRc1R6dFJRMVpCTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeEhRVUZIT3p0UlFVVklPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdPMUZCUlVFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeExRVUZMTzFGQlEwdzdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRXNUVUZCVFR0UlFVTk9PMUZCUTBFN1VVRkRRU3hOUVVGTk8xRkJRMDQ3VVVGRFFUdFJRVU5CTEUxQlFVMDdVVUZEVGp0UlFVTkJPMUZCUTBFN1VVRkRRU3hQUVVGUE8xRkJRMUE3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFc1NVRkJTVHRSUVVOS096dFJRVVZCTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFc1RVRkJUVHRSUVVOT08xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJMRXRCUVVzN1VVRkRURHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJMRTFCUVUwN1VVRkRUanRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEVzUzBGQlN6czdVVUZGVER0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdPMUZCUlVFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTdzJRa0ZCTmtJN1VVRkROMElzTmtKQlFUWkNPMUZCUXpkQ08xRkJRMEU3VVVGRFFUdFJRVU5CT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTEhGQ1FVRnhRaXhuUWtGQlowSTdVVUZEY2tNN1VVRkRRVHRSUVVOQkxFdEJRVXM3VVVGRFREdFJRVU5CTzFGQlEwRTdVVUZEUVN4eFFrRkJjVUlzWjBKQlFXZENPMUZCUTNKRE8xRkJRMEU3VVVGRFFTeExRVUZMTzFGQlEwdzdVVUZEUVR0UlFVTkJMRXRCUVVzN1VVRkRURHRSUVVOQk8xRkJRMEVzUzBGQlN6dFJRVU5NTzFGQlEwRTdVVUZEUVR0UlFVTkJMRXRCUVVzN08xRkJSVXc3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFc1MwRkJTenRSUVVOTU8xRkJRMEU3VVVGRFFTeExRVUZMTzFGQlEwdzdVVUZEUVR0UlFVTkJPMUZCUTBFc1MwRkJTenM3VVVGRlREdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN08xRkJSVUU3VVVGRFFUczdVVUZGUVR0UlFVTkJPMUZCUTBFc2EwSkJRV3RDTERoQ1FVRTRRanRSUVVOb1JEdFJRVU5CT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CT3p0UlFVVkJPMUZCUTBFN08xRkJSVUU3VVVGRFFUdFJRVU5CTzFGQlEwRTdPMUZCUlVFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTEV0QlFVczdVVUZEVER0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeEpRVUZKTzFGQlEwbzdPMUZCUlVFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUczdVVUZGUVR0UlFVTkJPMUZCUTBFN1VVRkRRU3hKUVVGSk8xRkJRMG83VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeE5RVUZOTzFGQlEwNDdVVUZEUVR0UlFVTkJPMUZCUTBFc1QwRkJUenRSUVVOUU8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRXNTVUZCU1R0UlFVTktPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3VVVGRFFUczdVVUZGUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk96dFJRVVZCTzFGQlEwRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRXNTMEZCU3p0UlFVTk1PMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRU3h2UWtGQmIwSXNNa0pCUVRKQ08xRkJReTlETzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRU3hQUVVGUE8xRkJRMUE3VVVGRFFUczdVVUZGUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUczdVVUZGUVR0UlFVTkJMRzFDUVVGdFFpeGpRVUZqTzFGQlEycERPMUZCUTBFN1VVRkRRVHRSUVVOQk96dFJRVVZCTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN08xRkJSVUU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeG5Ra0ZCWjBJc1MwRkJTenRSUVVOeVFqdFJRVU5CTzFGQlEwRTdVVUZEUVN4TlFVRk5PMUZCUTA0N1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTEdkQ1FVRm5RaXhaUVVGWk8xRkJRelZDTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEVzWTBGQll5dzBRa0ZCTkVJN1VVRkRNVU03VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeE5RVUZOTzFGQlEwNDdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVN4SlFVRkpPenRSUVVWS08xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVRzN1VVRkZRVHM3VVVGRlFUdFJRVU5CTzFGQlEwRXNaVUZCWlN3MFFrRkJORUk3VVVGRE0wTTdVVUZEUVR0UlFVTkJPMUZCUTBFN08xRkJSVUU3VVVGRFFUczdVVUZGUVR0UlFVTkJPenRSUVVWQk8xRkJRMEU3TzFGQlJVRTdVVUZEUVN4bFFVRmxMRFJDUVVFMFFqdFJRVU16UXp0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFc2FVSkJRV2xDTEhWRFFVRjFRenRSUVVONFJEdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHM3VVVGRlFUdFJRVU5CT3p0UlFVVkJPenRSUVVWQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQkxHbENRVUZwUWl4MVEwRkJkVU03VVVGRGVFUTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeHBRa0ZCYVVJc2MwSkJRWE5DTzFGQlEzWkRPMUZCUTBFN1VVRkRRVHRSUVVOQkxGRkJRVkU3VVVGRFVqdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRU3hWUVVGVk8xRkJRMVk3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk96dFJRVVZCTzFGQlEwRXNZMEZCWXl4M1EwRkJkME03VVVGRGRFUTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQkxFdEJRVXM3VVVGRFREdFJRVU5CTzFGQlEwRTdVVUZEUVN4UFFVRlBPMUZCUTFBN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRXNVMEZCVXp0UlFVTlVPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTEUxQlFVMDdVVUZEVGp0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEVzVVVGQlVUdFJRVU5TTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk96dFJRVVZCTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN08xRkJSVUU3VVVGRFFUdFJRVU5CTzFGQlEwRXNTVUZCU1R0UlFVTktPenRSUVVWQk8xRkJRMEU3TzFGQlJVRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFc1pVRkJaVHRSUVVObU8xRkJRMEU3VVVGRFFUdFJRVU5CT3p0UlFVVkJPMUZCUTBFN08xRkJSVUU3VVVGRFFUczdVVUZGUVR0UlFVTkJPMUZCUTBFN096dFJRVWRCTzFGQlEwRTdPMUZCUlVFN1VVRkRRVHM3VVVGRlFUdFJRVU5CTzFGQlEwRTdVVUZEUVN3d1EwRkJNRU1zWjBOQlFXZERPMUZCUXpGRk8xRkJRMEU3TzFGQlJVRTdVVUZEUVR0UlFVTkJPMUZCUTBFc2QwUkJRWGRFTEd0Q1FVRnJRanRSUVVNeFJUdFJRVU5CTEdsRVFVRnBSQ3hqUVVGak8xRkJReTlFT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRU3g1UTBGQmVVTXNhVU5CUVdsRE8xRkJRekZGTEdkSVFVRm5TQ3h0UWtGQmJVSXNSVUZCUlR0UlFVTnlTVHRSUVVOQk96dFJRVVZCTzFGQlEwRTdVVUZEUVR0UlFVTkJMREpDUVVFeVFpd3dRa0ZCTUVJc1JVRkJSVHRSUVVOMlJDeHBRMEZCYVVNc1pVRkJaVHRSUVVOb1JEdFJRVU5CTzFGQlEwRTdPMUZCUlVFN1VVRkRRU3h6UkVGQmMwUXNLMFJCUVN0RU96dFJRVVZ5U0R0UlFVTkJPenRSUVVWQk8xRkJRMEVzYzBOQlFYTkRMSFZDUVVGMVFqczdPMUZCUnpkRU8xRkJRMEU3T3pzN096czdPenM3T3pzN1FVTjRlRUpCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenM3T3pzN096czdPMEZEWWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdPMEZCUlVFc2JVTTdPenM3T3pzN096czdPMEZEY0VOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc2FVTTdPenM3T3pzN096czdPMEZEVGtFN1FVRkRRU3hwUWtGQmFVSXNhMEpCUVd0Q08wRkJRMjVETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzT0VJN096czdPenM3T3pzN08wRkRhRUpCTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3huUXpzN096czdPenM3T3pzN1FVTktRU3hwUWtGQmFVSXNiVUpCUVU4c1EwRkJReXd3UlVGQmNVSTdPenM3T3pzN096czdPenRCUTBFNVF6dEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNlVU5CUVhsRExHTkJRV003TzBGQlJYWkVMSFZDUVVGMVFpeHhRa0ZCY1VJN1FVRkROVU03UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdsQ1FVRnBRanRCUVVOcVFqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFTeDVRa0ZCZVVJN1FVRkRla0k3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEdGQlFXRTdRVUZEWWp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMEZCU1VFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNhVUpCUVdsQ08wRkJRMnBDTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4cFFrRkJhVUk3UVVGRGFrSTdRVUZEUVR0QlFVTkJMR2xDUVVGcFFqdEJRVU5xUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFN1FVRkRRU3d5UWtGQk1rSXNhVUpCUVdsQ08wRkJRelZETzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3dyUWtGQkswSXNhMEpCUVd0Q08wRkJRMnBFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPenM3UVVGSFREdEJRVU5CTERCQ1FVRXdRanM3UVVGRk1VSTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxIVkNRVUYxUWl4clFrRkJhMEk3UVVGRGVrTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4VFFVRlRPenRCUVVWVU8wRkJRMEU3T3p0QlFVZEJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVN4MVFrRkJkVUlzWVVGQllUdEJRVU53UXp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeDFRa0ZCZFVJc1VVRkJVVHRCUVVNdlFqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN3clFrRkJLMElzVVVGQlVUdEJRVU4yUXp0QlFVTkJPenRCUVVWQk8wRkJRMEVzWVVGQllUdEJRVU5pTEN0Q1FVRXJRaXhqUVVGak8wRkJRemRETzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN3d1EwRkJNRU1zVVVGQlVUdEJRVU5zUkR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4MVFrRkJkVUlzV1VGQldUdEJRVU51UXl3eVFrRkJNa0lzVDBGQlR6dEJRVU5zUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxIVkNRVUYxUWl4UFFVRlBPMEZCUXpsQ08wRkJRMEU3TzBGQlJVRTdRVUZEUVN4MVFrRkJkVUlzV1VGQldUdEJRVU51UXl3eVFrRkJNa0lzVDBGQlR6dEJRVU5zUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3gxUWtGQmRVSXNUMEZCVHp0QlFVTTVRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4MVFrRkJkVUlzVDBGQlR6dEJRVU01UWp0QlFVTkJPenRCUVVWQk8wRkJRMEVzZFVKQlFYVkNMRmxCUVZrN1FVRkRia01zTWtKQlFUSkNMRTlCUVU4N1FVRkRiRU03UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNkVUpCUVhWQ0xFOUJRVTg3UVVGRE9VSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPenRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTEhWQ1FVRjFRaXh6UWtGQmMwSTdRVUZETjBNN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTEhWQ1FVRjFRaXgxUWtGQmRVSTdRVUZET1VNN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN08wRkJSMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQkxGTkJRVk03UVVGRFZEdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRU3gxUWtGQmRVSXNjMEpCUVhOQ08wRkJRemRET3p0QlFVVkJMREpDUVVFeVFpeFJRVUZSTzBGQlEyNURPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVN4MVFrRkJkVUlzZFVKQlFYVkNPMEZCUXpsRE8wRkJRMEU3TzBGQlJVRXNNa0pCUVRKQ0xGRkJRVkU3UVVGRGJrTTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPenRCUVVkQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRU3hUUVVGVE8wRkJRMVE3UVVGRFFUczdRVUZGUVN3eVFrRkJNa0lzYVVKQlFXbENPenRCUVVVMVF6czdRVUZGUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRXNkVUpCUVhWQ0xITkNRVUZ6UWp0QlFVTTNRenRCUVVOQkxESkNRVUV5UWl4elFrRkJjMEk3UVVGRGFrUTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEVzZFVKQlFYVkNMSE5DUVVGelFqdEJRVU0zUXpzN1FVRkZRU3d5UWtGQk1rSXNjMEpCUVhOQ08wRkJRMnBFTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFc1UwRkJVenRCUVVOVU8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFc2RVSkJRWFZDTEhOQ1FVRnpRanRCUVVNM1F6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenM3UVVGSFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEd0RVFVRnJSQ3hyUWtGQmEwSTdPMEZCUlhCRk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRFJDUVVFMFFpeFpRVUZaTzBGQlEzaERPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3gzUWtGQmQwSXNVVUZCVVR0QlFVTm9RenRCUVVOQk8wRkJRMEVzWVVGQllUdEJRVU5pTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQkxIVkNRVUYxUWl4elFrRkJjMEk3UVVGRE4wTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2xEUVVGcFF5eHRRa0ZCYlVJN1FVRkRjRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxDdENRVUVyUWl3d1EwRkJNRU03TzBGQlJYcEZPMEZCUTBFc01FSkJRVEJDTEhGRVFVRnhSRHM3UVVGRkwwVTdRVUZEUVN4MVFrRkJkVUlzV1VGQldUdEJRVU51UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE96dEJRVVZVTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN08wRkJSVlE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVZNN08wRkJSVlE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3UVVGSFFUdEJRVU5CTEZGQlFWRXNTVUZCT0VJN1FVRkRkRU03TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTeXhOUVVGTkxFVkJXVTQ3T3p0QlFVZE1MRU5CUVVNN096czdPenM3T3pzN096dEJRMng1UWtRN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1lVRkJZU3h0UWtGQlR5eERRVUZETEdWQlFWRTdRVUZETjBJc1IwRkJSenRCUVVOSU96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTUxIZERRVUYzUXp0QlFVTjRRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzYlVKQlFXMUNMR2xDUVVGcFFqdEJRVU53UXp0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhkRFFVRjNReXhSUVVGUk8wRkJRMmhFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVEN4M1FrRkJkMElzYlVKQlFXMUNPMEZCUXpORE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3gxUWtGQmRVSXNVMEZCVXp0QlFVTm9RenM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFBRVUZQTzBGQlExQTdPMEZCUlVFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEcxQ1FVRnRRaXhwUWtGQmFVSTdRVUZEY0VNN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4elEwRkJjME1zV1VGQldUdEJRVU5zUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIVkNRVUYxUWl4VFFVRlRPMEZCUTJoRE96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEU5QlFVODdRVUZEVURzN1FVRkZRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2MwTkJRWE5ETEhOQ1FVRnpRanRCUVVNMVJEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4MVFrRkJkVUlzVTBGQlV6dEJRVU5vUXpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4cFFrRkJhVUlzVTBGQlV6dEJRVU14UWp0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNiVUpCUVcxQ0xHbENRVUZwUWp0QlFVTndRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNjVUpCUVhGQ0xHbENRVUZwUWp0QlFVTjBRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCVXp0QlFVTlVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNhVUpCUVdsQ0xEUkNRVUUwUWp0QlFVTTNRenRCUVVOQk96dEJRVVZCTEdsQ1FVRnBRaXhoUVVGaE8wRkJRemxDTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFRDeHBRa0ZCYVVJc1lVRkJZVHRCUVVNNVFqdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUVzV1VGQldTeGxRVUZsTzBGQlF6TkNPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMSEZDUVVGeFFpeG5Ra0ZCWjBJN1FVRkRja003UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzYlVKQlFXMUNMR2xDUVVGcFFqdEJRVU53UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3h0UWtGQmJVSXNaMEpCUVdkQ08wRkJRMjVETzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CT3p0QlFVVkJMRzFDUVVGdFFpeGpRVUZqTzBGQlEycERPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRzFDUVVGdFFpeGpRVUZqTzBGQlEycERPMEZCUTBFN08wRkJSVUU3UVVGRFFTeFpRVUZaTEdOQlFXTTdRVUZETVVJN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEcxQ1FVRnRRaXhwUWtGQmFVSTdRVUZEY0VNN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRzFDUVVGdFFpeGpRVUZqTzBGQlEycERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVlVGQlZTdzJRa0ZCTmtJN1FVRkRka003UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVEN4WlFVRlpMR05CUVdNN1FVRkRNVUk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3h0UWtGQmJVSXNZMEZCWXp0QlFVTnFRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZWQlFWVXNOa0pCUVRaQ08wRkJRM1pETzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeFpRVUZaTEdOQlFXTTdRVUZETVVJN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEcxQ1FVRnRRaXhUUVVGVE8wRkJRelZDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h2UkVGQmIwUXNWMEZCVnp0QlFVTXZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHMUNRVUZ0UWl4dlFrRkJiMEk3UVVGRGRrTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYjBSQlFXOUVMRmRCUVZjN1FVRkRMMFE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYlVKQlFXMUNMRTlCUVU4N1FVRkRNVUk3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRzFDUVVGdFFpeFBRVUZQTzBGQlF6RkNPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHMUNRVUZ0UWl4UFFVRlBPMEZCUXpGQ08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUVzYlVKQlFXMUNMRTlCUVU4N1FVRkRNVUk3TzBGQlJVRTdRVUZEUVRzN1FVRkZRU3h4UWtGQmNVSXNUMEZCVHp0QlFVTTFRanRCUVVOQk96dEJRVVZCTEhWQ1FVRjFRaXhQUVVGUE8wRkJRemxDTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3gxUWtGQmRVSXNSMEZCUnp0QlFVTXhRanRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFTeHRRa0ZCYlVJc1YwRkJWenRCUVVNNVFqczdRVUZGUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeHRRa0ZCYlVJc1YwRkJWenRCUVVNNVFqdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2JVSkJRVzFDTEZOQlFWTTdRVUZETlVJN08wRkJSVUVzYTBOQlFXdERPMEZCUTJ4RExITkRRVUZ6UXp0QlFVTjBRenM3UVVGRlFUdEJRVU5CTEhGQ1FVRnhRaXhQUVVGUE8wRkJRelZDTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4dFFrRkJiVUlzVDBGQlR6dEJRVU14UWp0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQkxHMUNRVUZ0UWl4UFFVRlBPMEZCUXpGQ08wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeHRRa0ZCYlVJc2FVSkJRV2xDTzBGQlEzQkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRzFDUVVGdFFpeGpRVUZqTzBGQlEycERPMEZCUTBFN08wRkJSVUU3UVVGRFFTdzJRa0ZCTmtJc1kwRkJZenRCUVVNelF6czdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQkxHbENRVUZwUWl4cFFrRkJhVUk3UVVGRGJFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzSzBKQlFTdENMRkZCUVZFN1FVRkRka003UVVGRFFUczdRVUZGUVN4cFFrRkJhVUlzVDBGQlR6dEJRVU40UWp0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4eFFrRkJjVUlzVDBGQlR6dEJRVU0xUWp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFc2FVSkJRV2xDTEdsQ1FVRnBRanRCUVVOc1F6dEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTERaQ1FVRTJRaXh0UTBGQmJVTTdRVUZEYUVVN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNiVUpCUVcxQ0xDdERRVUVyUXp0QlFVTnNSVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFTeHhRa0ZCY1VJc2MwTkJRWE5ETzBGQlF6TkVPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNaVUZCWlN4blFrRkJaMEk3UVVGREwwSTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVlVGQlZTeDVRa0ZCZVVJN1FVRkRia003UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNaVUZCWlN4cFFrRkJhVUk3UVVGRGFFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2NVSkJRWEZDTEdOQlFXTTdRVUZEYmtNN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEhWQ1FVRjFRaXhSUVVGUk8wRkJReTlDTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEdsRFFVRnBReXhSUVVGUk8wRkJRM3BETzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hwUTBGQmFVTXNVVUZCVVR0QlFVTjZRenRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTdzJRa0ZCTmtJc2JVTkJRVzFETzBGQlEyaEZPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTERaQ1FVRTJRaXh0UTBGQmJVTTdRVUZEYUVVN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRU3cyUWtGQk5rSXNiVU5CUVcxRE8wRkJRMmhGTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc05rSkJRVFpDTEcxRFFVRnRRenRCUVVOb1JUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVTg3UVVGRFVEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeDFRa0ZCZFVJc01FSkJRVEJDTzBGQlEycEVPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUczdRVUZGUVR0QlFVTkJMRXRCUVVzN08wRkJSVXc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHMUNRVUZ0UWl4blEwRkJaME03UVVGRGJrUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMR2xEUVVGcFF5eFJRVUZSTzBGQlEzcERPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMT3p0QlFVVk1PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEcxQ1FVRnRRaXhaUVVGWk8wRkJReTlDTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeG5Ra0ZCWjBJc2EwSkJRV3RDTzBGQlEyeERPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEcxQ1FVRnRRaXhuUWtGQlowSTdRVUZEYmtNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHRRa0ZCYlVJc1owSkJRV2RDTzBGQlEyNURPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4eFFrRkJjVUlzYjBKQlFXOUNPMEZCUTNwRE8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHRRa0ZCYlVJc1owSkJRV2RDTzBGQlEyNURPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzTkVKQlFUUkNMRkZCUVZFN1FVRkRjRU03UVVGRFFTdzJRa0ZCTmtJc1VVRkJVVHRCUVVOeVF6dEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1EwRkJReXhGUVVGRkxFMUJRVFpDT3pzN096czdPenM3T3pzN096dEJRMnd5UjJoRE8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEyRXNZVUZCWVN4clFrRkJhMElzYVVWQlFXbEZMRkZCUVZFc2NVSkJRWEZDTEdsQ1FVRnBRaXgzUlVGQmQwVXNhVVJCUVdsRUxHdENRVUZyUWl4MVJFRkJkVVFzWjBKQlFXZENMSEZDUVVGeFFpeFJRVUZSTEhkRVFVRjNSRHRCUVVOc1l5eFhRVUZYTERaRVFVRTJSQ3hMUVVGTExGbEJRVmtzVjBGQlZ5eDFRa0ZCZFVJc1RVRkJUU3hyUWtGQmEwSXNjMEpCUVhOQ0xGZEJRVmNzVVVGQlVTeEpRVUZKTERaQ1FVRTJRaXgzUkVGQmQwUXNNRUpCUVRCQ0xEaEhRVUU0Unp0QlFVTTNXaXhyUkVGQmEwUXNOa1JCUVRaRUxGTkJRVk1zWlVGQlpTeHBRa0ZCYVVJc01rSkJRVEpDTEd0RFFVRnJReXh0UTBGQmJVTXNiVU5CUVcxRExIZEVRVUYzUkN4dlJVRkJiMFVzVVVGQlVTeEpRVUZKTEdOQlFXTXNWMEZCVnl4UlFVRlJMRWxCUVVrc2RVSkJRWFZDTEZWQlFWVXNTVUZCU1R0QlFVTTNaU3hsUVVGbExHOURRVUZ2UXl4dFEwRkJiVU1zYlVOQlFXMURMRFpEUVVFMlF5dzJRMEZCTmtNc2QwUkJRWGRFTEhOQ1FVRnpRaXhKUVVGSkxHMURRVUZ0UXl4UlFVRlJMRlZCUVZVc1owTkJRV2RETEdGQlFXRXNVMEZCVXl4WFFVRlhMRmRCUVZjc1VVRkJVU3hyUWtGQmEwSXNiVUpCUVcxQ0xHRkJRV0VzWTBGQll5eEZRVUZGTzBGQlEyaG1MRlZCUVZVc1dVRkJXU3gzUWtGQmQwSXNXVUZCV1N4TFFVRkxMSE5DUVVGelFpeFZRVUZWTEhkRVFVRjNSQ3hYUVVGWExFOUJRVThzWjBOQlFXZERMRTFCUVUwc09FTkJRVGhETEd0RlFVRnJSU3g1UkVGQmVVUXNVVUZCVVN4dFFrRkJiVUlzWTBGQll5eFhRVUZYTEZWQlFWVXNVVUZCVVN4UlFVRlJMRlZCUVZVc2MwSkJRWE5DTEZsQlFWazdRVUZEYkdZc2FVSkJRV2xDTEdWQlFXVXNTMEZCU3l4WlFVRlpMRmRCUVZjc2FVSkJRV2xDTEZGQlFWRXNTMEZCU3l3NFEwRkJPRU1zVTBGQlV5eEpRVUZKTEUxQlFVMHNkMEpCUVhkQ0xITkNRVUZ6UWl4WFFVRlhMRmRCUVZjc1ZVRkJWU3hSUVVGUkxGRkJRVkVzU1VGQlNTd3dRMEZCTUVNc1MwRkJTeXhwUWtGQmFVSXNUVUZCVFN4TlFVRk5MREpDUVVFeVFpeFpRVUZaTEc5RlFVRnZSU3hQUVVGUExGZEJRVmM3UVVGRGRHTXNZVUZCWVN4VlFVRlZMSGxDUVVGNVFpeHRRa0ZCYlVJc1RVRkJUU3g1UWtGQmVVSXNiVUpCUVcxQ0xFMUJRVTBzTWtKQlFUSkNMR2xDUVVGcFFpeE5RVUZOTEhWQ1FVRjFRaXh4UWtGQmNVSXNVMEZCVXl3NFJFRkJPRVFzWTBGQll5eHBRa0ZCYVVJc1RVRkJUU3gxUlVGQmRVVXNNRUpCUVRCQ0xGRkJRVkVzU1VGQlNUdEJRVU5zWWl4VlFVRlZMR0ZCUVdFc01rSkJRVEpDTEZsQlFWa3NORVZCUVRSRkxFOUJRVThzVlVGQlZTeDVRa0ZCZVVJc2JVSkJRVzFDTEUxQlFVMHNlVUpCUVhsQ0xHMUNRVUZ0UWl4TlFVRk5MREpDUVVFeVFpeHBRa0ZCYVVJc1RVRkJUU3gxUWtGQmRVSXNjVUpCUVhGQ0xGTkJRVk1zT0VSQlFUaEVMR05CUVdNc2FVSkJRV2xDTEUxQlFVMDdRVUZEZW1Nc1EwRkJReXd3UWtGQk1FSXNXVUZCV1N4bFFVRmxMR0ZCUVdFc1owSkJRV2RDTEZOQlFWTXNVMEZCVXl4dlFrRkJiMElzVTBGQlV5eExRVUZMTEZWQlFWVXNZVUZCWVN4UlFVRlJMRWxCUVVrc2NVZEJRWEZITEhWRFFVRjFReXh2UWtGQmIwSXNkVUpCUVhWQ0xHRkJRV0VzVVVGQlVTeEpRVUZKTzBGQlF6RllMRzFDUVVGdFFpeEpRVUZKTEhsSVFVRjVTQ3hUUVVGVExHdENRVUZyUWl4VFFVRlRMRXRCUVVzc1ZVRkJWU3hoUVVGaExGRkJRVkVzU1VGQlNTdzBSRUZCTkVRc1UwRkJVeXhyUWtGQmEwSXNTMEZCU3l3clFrRkJLMElzYjBKQlFXOUNMR0ZCUVdFc1VVRkJVU3hKUVVGSkxIRkRRVUZ4UXl4VFFVRlRMR05CUVdNc1QwRkJUeXgxUTBGQmRVTTdRVUZET1dVc1owTkJRV2RETEhGRVFVRnhSQ3h6UTBGQmMwTXNiMFZCUVc5RkxITkNRVUZ6UWl4NVJrRkJlVVlzT0VWQlFUaEZMRk5CUVZNc2EwSkJRV3RDTEZWQlFWVXNaMFJCUVdkRU8wRkJRMnBrTEVOQlFVTXNWVUZCVlN3MlFrRkJOa0lzTWtKQlFUSkNMSGRGUVVGM1JTeFRRVUZUTEU5QlFVOHNVVUZCVVN4aFFVRmhMRkZCUVZFc1NVRkJTU3hOUVVGTkxEWkNRVUUyUWl3d1JVRkJNRVVzV1VGQldTeFpRVUZaTEZsQlFWa3NWMEZCVnl4eFFrRkJjVUlzVDBGQlR5eDFRa0ZCZFVJc1RVRkJUU3c0UWtGQk9FSXNkMEpCUVhkQ0xGTkJRVk1zVDBGQlR5eFJRVUZSTzBGQlF5OWtMRlZCUVZVc1YwRkJWeXh4VVVGQmNWRXNWMEZCVnl4TlFVRk5MRTFCUVUwc1dVRkJXU3haUVVGWkxGZEJRVmNzZDBKQlFYZENMRXRCUVVzc2RVZEJRWFZITEZkQlFWY3NUVUZCVFR0QlFVTjZaU3dyUWtGQkswSXNUVUZCVFN4WlFVRlpMRmxCUVZrc1YwRkJWeXh4UWtGQmNVSXNTMEZCU3l4UFFVRlBMSFZDUVVGMVFpeE5RVUZOTERaQ1FVRTJRaXgzUWtGQmQwSXNNRVpCUVRCR0xHbENRVUZwUWl4elFrRkJjMElzZVVWQlFYbEZMRk5CUVZNc1QwRkJUeXhSUVVGUkxHRkJRV0VzVVVGQlVTeFhRVUZYTEUxQlFVMHNaMEpCUVdkQ0xGVkJRVlVzVjBGQlZ6dEJRVU40WlN4aFFVRmhMRkZCUVZFc1lVRkJZU3hOUVVGTkxFMUJRVTBzV1VGQldTeFpRVUZaTEZkQlFWY3NiME5CUVc5RExFMUJRVTBzVDBGQlR5eDFRa0ZCZFVJc1RVRkJUU3dyUWtGQkswSXNaMEpCUVdkQ0xGTkJRVk1zVDBGQlR5eFJRVUZSTEdGQlFXRXNVVUZCVVN4WFFVRlhMR2xHUVVGcFJpeFBRVUZQTERoQ1FVRTRRaXhOUVVGTkxIVkNRVUYxUWl4eFFrRkJjVUlzVTBGQlV5dzRSRUZCT0VRN1FVRkRjbVlzWjBKQlFXZENMR2RDUVVGblFpeFRRVUZUTEU5QlFVOHNVVUZCVVN4aFFVRmhMRzlDUVVGdlFpeFJRVUZSTEdWQlFXVXNhMFZCUVd0RkxFOUJRVThzYTBOQlFXdERMRTFCUVUwc05rVkJRVFpGTEZOQlFWTXNaMEpCUVdkQ0xIRkNRVUZ4UWl4blFrRkJaMElzYTBoQlFXdElMR2RDUVVGblFqdEJRVU01WlN4VlFVRlZMR2RDUVVGblFpdzBRa0ZCTkVJc2RVcEJRWFZLTEdkQ1FVRm5RaXhYUVVGWExDdEZRVUVyUlN4dFFrRkJiVUlzWjBKQlFXZENMRzFDUVVGdFFpeG5SRUZCWjBRc2EwSkJRV3RDTEcxQ1FVRnRRaXh0UWtGQmJVSTdRVUZEY21Rc05rSkJRVFpDTEdWQlFXVXNPRUpCUVRoQ0xHVkJRV1VzZDBKQlFYZENMRlZCUVZVc2MwTkJRWE5ETEdWQlFXVXNPRUpCUVRoQ0xHVkJRV1VzZDBKQlFYZENMRlZCUVZVc2MwTkJRWE5ETEdWQlFXVXNORUpCUVRSQ0xHVkJRV1VzYzBKQlFYTkNMRk5CUVZNc2MwTkJRWE5ETEdWQlFXVXNPRUpCUVRoQ0xHVkJRV1U3UVVGRGFHVXNVMEZCVXl4elEwRkJjME1zWjBKQlFXZENMREJDUVVFd1FpeHhSRUZCY1VRc2NVSkJRWEZDTERoRFFVRTRReXgxUlVGQmRVVXNjMEpCUVhOQ0xIZEVRVUYzUkN4blJrRkJaMFlzYVVKQlFXbENMRlZCUVZVc01FSkJRVEJDTzBGQlF6TmxMRzlDUVVGdlFpeDNRa0ZCZDBJc2JVTkJRVzFETEdsRFFVRnBReXh6UTBGQmMwTXNjVUpCUVhGQ0xGVkJRVlVzYTBSQlFXdEVMSFZFUVVGMVJDeDNRa0ZCZDBJc01rUkJRVEpFTEhWRVFVRjFSQ3h6UTBGQmMwTXNkVUpCUVhWQ0xGVkJRVlU3UVVGREwyVXNkVVJCUVhWRUxHdEZRVUZyUlN4M1FrRkJkMElzZFVWQlFYVkZMR3RGUVVGclJTeHpRMEZCYzBNc1owSkJRV2RDTERoQ1FVRTRRaXhqUVVGakxGZEJRVmNzZVVWQlFYbEZPMEZCUTJoa0xITk1RVUZ6VEN4eFFrRkJjVUlzYlVKQlFXMUNMRTFCUVUwc01rMUJRVEpOTEUxQlFVMDdRVUZEY21Jc2VVbEJRWGxKTEUxQlFVMHNORU5CUVRSRExESkZRVUV5UlN4SlFVRkpMRzFGUVVGdFJTdzRRMEZCT0VNc1UwRkJVeXhuUWtGQlowSXNkVUpCUVhWQ0xFOUJRVThzVDBGQlR5eFBRVUZQTEU5QlFVOHNUMEZCVHl4UlFVRlJMRXRCUVVzN1FVRkRNMlFzYzA1QlFYTk9MR1ZCUVdVc1pVRkJaU3hsUVVGbExHVkJRV1VzWlVGQlpTeFRRVUZUTEc5Q1FVRnZRaXhOUVVGTkxIVkNRVUYxUWl4WlFVRlpMRmRCUVZjc2RVSkJRWFZDTEV0QlFVc3NhMEpCUVd0Q0xITkNRVUZ6UWl4WFFVRlhMRkZCUVZFc1NVRkJTU3cyUWtGQk5rSXNVMEZCVXp0QlFVTnVaaXhMUVVGTExIVkVRVUYxUkN4blIwRkJaMGNzYlVkQlFXMUhMRFpFUVVFMlJDeFBRVUZQTEU5QlFVOHNUMEZCVHl4UFFVRlBMRTlCUVU4c1QwRkJUeXhQUVVGUExFOUJRVThzVVVGQlVTeEpRVUZKTzBGQlEyaFpMR2xIUVVGcFJ5eGxRVUZsTEdWQlFXVXNaVUZCWlN4bFFVRmxMR1ZCUVdVc1pVRkJaU3hsUVVGbExHVkJRV1VzVTBGQlV5eG5Ra0ZCWjBJc2MwSkJRWE5DTEc5Q1FVRnZRaXhYUVVGWExDdEZRVUVyUlN4UlFVRlJMRXRCUVVzc1RVRkJUU3hoUVVGaExGRkJRVkVzU1VGQlNTeE5RVUZOTEZWQlFWVXNORU5CUVRSRE8wRkJRemxrTERaQ1FVRTJRaXhSUVVGUkxFbEJRVWtzZDBOQlFYZERMRkZCUVZFc1NVRkJTU3hoUVVGaExFbEJRVWtzTmtKQlFUWkNMRkZCUVZFc1NVRkJTU3hoUVVGaExFbEJRVWtzTUVOQlFUQkRMRkZCUVZFc1NVRkJTU3hoUVVGaExFbEJRVWtzYVVkQlFXbEhMSGRDUVVGM1FpeFRRVUZUTEZsQlFWazdRVUZETjFnN1FVRkRRU3h0UlVGQmJVVTdRVUZEYmtVN1FVRkRRVHRCUVVOQk8wRkJRMEVzWVVGQllUdEJRVU5pTERoQ1FVRTRRaXh0UmtGQmJVWXNTMEZCYzBNc1EwRkJReXh0UTBGQlR5eFhRVUZYTEZOQlFWTTdRVUZCUVN4dlIwRkJReXhEUVVGRExGTkJRV3RJTEVOQlFVTTdPenM3T3pzN096czdPenRCUXpWRGVGTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHZENRVUZuUWp0QlFVTm9RanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1kwRkJZenRCUVVOa0xFdEJRVXM3UVVGRFRDeGpRVUZqTzBGQlEyUTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4NVJFRkJlVVE3UVVGRGVrUTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRmxCUVZrN1FVRkRXanM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1YwRkJWenRCUVVOWU8wRkJRMEVzVjBGQlZ6dEJRVU5ZT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3gzUTBGQmQwTXNWMEZCVnp0QlFVTnVSRHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc01rSkJRVEpDTzBGQlF6TkNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGVE8wRkJRMVE3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeFRRVUZUTzBGQlExUTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRXNVMEZCVXp0QlFVTlVPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRk5CUVZNN1FVRkRWRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHZRMEZCYjBNc1kwRkJZenRCUVVOc1JEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hwUTBGQmFVTXNhMEpCUVd0Q08wRkJRMjVFTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hwUWtGQmFVSTdPMEZCUldwQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIZENRVUYzUWl4cFFrRkJhVUk3UVVGRGVrTTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4WlFVRlpPMEZCUTFvN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEZsQlFWazdRVUZEV2pzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdPMEZCUlV3N1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTERoRFFVRTRReXhSUVVGUk8wRkJRM1JFTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4aFFVRmhPMEZCUTJJN1FVRkRRVHM3UVVGRlFTeFhRVUZYTzBGQlExZzdRVUZEUVR0QlFVTkJPenRCUVVWQkxGZEJRVmM3UVVGRFdEdEJRVU5CTzBGQlEwRTdPMEZCUlVFc1YwRkJWenRCUVVOWU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQkxEaERRVUU0UXl4UlFVRlJPMEZCUTNSRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4TFFVRkxPenRCUVVWTU8wRkJRMEVzT0VOQlFUaERMRkZCUVZFN1FVRkRkRVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRXNPRU5CUVRoRExGRkJRVkU3UVVGRGRFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4RFFVRkRPMEZCUTBRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEZRVUZGTEV0QlFUQkNMRzlDUVVGdlFpeFRRVUZGTzBGQlEyeEVPenRCUVVWQk8wRkJRMEU3UVVGRFFTeERRVUZETzBGQlEwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3pzN08wRkRjblJDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU55UWtFN1FVRkRRVHRCUVVOQk8wRkJSVThzU1VGQlRVRXNhMEpCUVdJN1FVRkJRVHRCUVVGQk8wRkJSVWtzT0VKQlFWbERMRmRCUVZvc1JVRkJlVUpETEZGQlFYcENMRVZCUTBFN1FVRkJRVHM3UVVGRFNTeFRRVUZMUXl4UlFVRk1MRWRCUVdkQ1JDeFJRVUZvUWp0QlFVTkJMRk5CUVV0RkxHRkJRVXdzUjBGQmNVSklMRmRCUVhKQ08wRkJSVUVzVTBGQlMwa3NaVUZCVEN4SFFVRjFRaXhKUVVGMlFqdEJRVU5CTEZOQlFVdERMRTFCUVV3c1IwRkJZeXhKUVVGSlF5eHZSRUZCU2l4RlFVRmtPMEZCUTBFc1UwRkJTME1zVDBGQlRDeEhRVUZsTEVsQlFVbERMRFpFUVVGS0xFVkJRV1k3UVVGRFNEczdRVUZXVER0QlFVRkJPMEZCUVVFc1owTkJZVWs3UVVGRFNTeFZRVUZKUXl4SlFVRkpMRWRCUVVjN1FVRkRVQ3h6UWtGQll5eExRVUZMVUN4UlFVUmFPMEZCUlZBc2RVSkJRV1VzUzBGQlMwTXNZVUZHWWp0QlFVZFFMRFJDUVVGdlFpeExRVUZMUXp0QlFVaHNRaXhQUVVGWU8wRkJUVUVzVjBGQlMwTXNUVUZCVEN4RFFVRlpTeXgzUWtGQldpeEhRVUYxUXl4SlFVRjJRenRCUVVOQkxGZEJRVXRNTEUxQlFVd3NRMEZCV1Uwc2IwTkJRVm9zUjBGQmJVUXNTVUZCYmtRN1FVRkRRU3hYUVVGTFRpeE5RVUZNTEVOQlFWbFBMRFJDUVVGYUxFZEJRVEpETEVsQlFUTkRPMEZCUTBFc1YwRkJTMUFzVFVGQlRDeERRVUZaVVN4blFrRkJXaXhEUVVFMlFrb3NTVUZCTjBJN1FVRkRRU3hYUVVGTFJpeFBRVUZNTEVOQlFXRlBMRlZCUVdJc1EwRkJkMEpNTEVsQlFYaENPMEZCUlVFc1lVRkJUeXhKUVVGSlRTeHBSRUZCU2l4RFFVRlpReXhuUlVGQlpTeERRVUZEUXl4RlFVRm9RaXhEUVVGdFFpeFJRVUZ1UWl4RFFVRmFMRVZCUVRCRFF5eG5SRUZCVFN4RFFVRkRia0lzYTBKQlFXcEVMRVZCUVhGRlZTeEpRVUZ5UlN4RlFVRXlSU3hKUVVFelJTeERRVUZRTzBGQlEwZzdRVUV6UWt3N08wRkJRVUU3UVVGQlFUdEJRVGhDVHl4SlFVRk5WU3h0UWtGQllqdEJRVUZCTzBGQlFVRTdRVUZGU1N3clFrRkJXVU1zUTBGQldpeEZRVU5CTzBGQlFVRTdPMEZCUTBrc1UwRkJTME1zUlVGQlRDeEhRVUZWUkN4RFFVRldPMEZCUTBFc1UwRkJTMFVzVTBGQlRDeEhRVUZwUWtZc1EwRkJReXhEUVVGRFNDeEZRVUZ1UWp0QlFVTkJMRk5CUVV0bUxGRkJRVXdzUjBGQlowSnJRaXhEUVVGRExFTkJRVU5ITEVsQlFVWXNRMEZCVDBNc1ZVRkJka0k3UVVGRFFTeFRRVUZMUXl4VlFVRk1MRWRCUVd0Q1RDeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUMGNzVjBGQmVrSTdRVUZEUVN4VFFVRkxReXhQUVVGTUxFZEJRV1ZRTEVOQlFVTXNRMEZCUTFFc1pVRkJSaXhOUVVGMVFrTXNjMFJCUVZrc1EwRkJRMFlzVDBGQmJrUTdRVUZEU0RzN1FVRlVURHRCUVVGQk8wRkJRVUVzTmtKQldVazdRVUZEU1N4aFFVRlBMRXRCUVV0T0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhMRXRCUVdJc1EwRkJVRHRCUVVOSU8wRkJaRXc3UVVGQlFUdEJRVUZCTEhWRFFXbENTVHRCUVVOSkxHRkJRVThzUzBGQlMwWXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VzWVVGQllpeERRVUZRTzBGQlEwZzdRVUZ1UWt3N1FVRkJRVHRCUVVGQkxESkRRWE5DU1R0QlFVTkpMR0ZCUVU4c1MwRkJTMFlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFc2NVSkJRV0lzUTBGQlVEdEJRVU5JTzBGQmVFSk1PMEZCUVVFN1FVRkJRU3gzUTBFeVFrazdRVUZEU1N4aFFVRlBMRXRCUVV0R0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhMR3RDUVVGaUxFTkJRVkE3UVVGRFNEdEJRVGRDVER0QlFVRkJPMEZCUVVFc2VVTkJaME5KTzBGQlEwa3NZVUZCVHl4TFFVRkxSaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVN4clFrRkJZaXhEUVVGUU8wRkJRMGc3UVVGc1EwdzdRVUZCUVR0QlFVRkJMSGxEUVhGRFNUdEJRVU5KTEdGQlFVOHNTMEZCUzBZc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRXNhMEpCUVdJc1EwRkJVRHRCUVVOSU8wRkJka05NTzBGQlFVRTdRVUZCUVN4elEwRXdRMGs3UVVGRFNTeGhRVUZQTEV0QlFVdEdMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTEc5Q1FVRmlMRU5CUVZBN1FVRkRTRHRCUVRWRFREdEJRVUZCTzBGQlFVRXNjME5CSzBOSk8wRkJRMGtzWVVGQlR5eExRVUZMUml4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllTeHZRa0ZCWWl4RFFVRlFPMEZCUTBnN1FVRnFSRXc3UVVGQlFUdEJRVUZCTERaRFFXOUVTVHRCUVVOSkxHRkJRVThzUzBGQlMwWXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VzYVVKQlFXSXNRMEZCVUR0QlFVTklPMEZCZEVSTU8wRkJRVUU3UVVGQlFTeHhRMEY1UkVrN1FVRkRTU3hoUVVGUExFdEJRVXRHTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaExHTkJRV0lzUTBGQlVEdEJRVU5JTzBGQk0wUk1PMEZCUVVFN1FVRkJRU3hyUTBFNFJFazdRVUZEU1N4aFFVRlBMRXRCUVV0R0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhMRmRCUVdJc1EwRkJVRHRCUVVOSU8wRkJhRVZNTzBGQlFVRTdRVUZCUVN4clEwRnRSVWs3UVVGRFNTeGhRVUZQTEV0QlFVdEdMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTEZkQlFXSXNRMEZCVUR0QlFVTklPMEZCY2tWTU8wRkJRVUU3UVVGQlFTeHJRMEYzUlVrN1FVRkRTU3hoUVVGUExFdEJRVXRHTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaExGZEJRV0lzUTBGQlVEdEJRVU5JTzBGQk1VVk1PMEZCUVVFN1FVRkJRU3h0UTBFMlJVazdRVUZEU1N4aFFVRlBMRXRCUVV0R0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhMRmxCUVdJc1EwRkJVRHRCUVVOSU8wRkJMMFZNTzBGQlFVRTdRVUZCUVN4dlEwRnJSa2s3UVVGRFNTeGhRVUZQTEV0QlFVdEdMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTEdGQlFXSXNRMEZCVUR0QlFVTklPMEZCY0VaTU8wRkJRVUU3UVVGQlFTeG5SRUYxUmtrN1FVRkRTU3hoUVVGUExFdEJRVXRHTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaExEQkNRVUZpTEVOQlFWQTdRVUZEU0R0QlFYcEdURHRCUVVGQk8wRkJRVUVzWjBSQk5FWkpPMEZCUTBrc1lVRkJUeXhMUVVGTFJpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZU3d3UWtGQllpeERRVUZRTzBGQlEwZzdRVUU1Umt3N1FVRkJRVHRCUVVGQkxIbERRV2xIU1R0QlFVTkpMR0ZCUVU4c1MwRkJTMFlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFc2EwSkJRV0lzUTBGQlVEdEJRVU5JTzBGQmJrZE1PMEZCUVVFN1FVRkJRU3h4UTBGeFIzRkNUeXhUUVhKSGNrSXNSVUZ6UjBrN1FVRkRTU3hoUVVGUExFdEJRVXRVTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaFR5eFRRVUZpTEVOQlFWQTdRVUZEU0R0QlFYaEhURHM3UVVGQlFUdEJRVUZCTEVrN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJ4RFR5eEpRVUZOUXl4bFFVRmxMRWRCUVVjN1FVRkRNMEpETEdOQlFWa3NSVUZCUlN4alFVUmhPMEZCUlROQ1F5eFpRVUZWTEVWQlFVVXNXVUZHWlR0QlFVY3pRa01zVjBGQlV5eEZRVUZGTzBGQlNHZENMRU5CUVhoQ08wRkJUVUVzU1VGQlRVTXNXVUZCV1N4SFFVRkxMRmRCUVhaQ08wRkJSVUVzU1VGQlRVTXNkMEpCUVdJc1IwRkZTU3hyUTBGQldVTXNaVUZCV2l4RlFVRTJRanRCUVVGQk96dEJRVU42UWl4UFFVRkxUaXhsUVVGTUxFZEJRWFZDVFN4bFFVRjJRanRCUVVOSUxFTkJTa3c3UVVGUFR5eEpRVUZOUXl4blFrRkJZaXhIUVVWSkxEQkNRVUZaUXl4UFFVRmFMRVZCUVhGQ08wRkJRVUU3TzBGQlEycENMRTlCUVV0NFFpeFBRVUZNTEVkQlFXVjNRaXhQUVVGbU8wRkJRMGdzUTBGS1REdEJRVTlQTEVsQlFVMURMRlZCUVdJN1FVRkJRVHRCUVVGQk8wRkJRMGtzZDBKQlFXTTdRVUZCUVRzN1FVRkRWaXhUUVVGTFF5eFBRVUZNTEVkQlFXdENMRWxCUVd4Q08wRkJRMEVzVTBGQlMxQXNVMEZCVEN4SFFVRnJRaXhMUVVGc1FqdEJRVU5CTEZOQlFVdFJMRXRCUVV3c1IwRkJhMEpZTEdWQlFXVXNRMEZCUTBNc1dVRkJiRU03UVVGRFFTeFRRVUZMVnl4WFFVRk1MRWRCUVcxQ1VpeFpRVUZ1UWp0QlFVTkJMRk5CUVV0VExFZEJRVXdzUjBGQmEwSXNTVUZCYkVJN08wRkJSVUVzVVVGQlJ5eFBRVUZQUXl4VFFVRlFMRXRCUVhGQ0xGZEJRWGhDTEVWQlFYRkRPMEZCUTJwRExGbEJRVTBzU1VGQlNVTXNTMEZCU2l4RFFVRlZMSGxEUVVGV0xFTkJRVTQ3UVVGRFNEdEJRVU5LT3p0QlFWaE1PMEZCUVVFN1FVRkJRU3cwUWtGaFdVTXNiVUpCWWxvc1JVRmhhVU03UVVGQlFUczdRVUZEZWtJc1ZVRkJSeXhMUVVGTFRDeExRVUZNTEV0QlFXVllMR1ZCUVdVc1EwRkJRMGNzVTBGQkwwSXNTVUZCTkVNc1MwRkJTMUVzUzBGQlRDeExRVUZsV0N4bFFVRmxMRU5CUVVORkxGVkJRVGxGTEVWQlFUQkdPMEZCUTNSR08wRkJRMEU3UVVGRFNEczdRVUZGUkN4WFFVRkxVeXhMUVVGTUxFZEJRV0ZZTEdWQlFXVXNRMEZCUTBVc1ZVRkJOMElzUTBGT2VVSXNRMEZSZWtJN1FVRkRRVHM3UVVGRFFTeFhRVUZMVnl4SFFVRk1MRWRCUVhGQ0xFbEJRVWxETEZOQlFVb3NRMEZCWXl4TFFVRkxTaXhQUVVGdVFpeEZRVUUwUWl4TFFVRkxSU3hYUVVGcVF5eERRVUZ5UWpzN1FVRkRRU3hYUVVGTFF5eEhRVUZNTEVOQlFWTkpMRTFCUVZRc1IwRkJjVUk3UVVGQlFTeGxRVUZOTEV0QlFVa3NRMEZCUTBNc2RVSkJRVXdzUlVGQlRqdEJRVUZCTEU5QlFYSkNPenRCUVVOQkxGZEJRVXRNTEVkQlFVd3NRMEZCVTAwc1UwRkJWQ3hIUVVGeFFpeFZRVUZEUXl4UFFVRkVPMEZCUVVFc1pVRkJZU3hMUVVGSkxFTkJRVU5ETEdsQ1FVRk1MRU5CUVhWQ1JDeFBRVUYyUWl4RFFVRmlPMEZCUVVFc1QwRkJja0k3TzBGQlEwRXNWMEZCUzFBc1IwRkJUQ3hEUVVGVFV5eFBRVUZVTEVkQlFYRkNPMEZCUVVFc1pVRkJUU3hMUVVGSkxFTkJRVU5ETEZGQlFVd3NSVUZCVGp0QlFVRkJMRTlCUVhKQ096dEJRVU5CTEZkQlFVdFdMRWRCUVV3c1EwRkJVMWNzVDBGQlZDeEhRVUZ4UWl4VlFVRkRReXhIUVVGRU8wRkJRVUVzWlVGQlV5eExRVUZKTEVOQlFVTkRMRTlCUVV3c1EwRkJZVVFzUjBGQllpeERRVUZVTzBGQlFVRXNUMEZCY2tJN08wRkJSVUZGTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xIbENRVUZvUWl4RlFVRXlRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTVUZCU1hwQ0xIZENRVUZLTEVOQlFUWkNUQ3hsUVVGbExFTkJRVU5GTEZWQlFUZERPMEZCUVZRc1QwRkJNME1zUTBGQmRrSTdRVUZEU0R0QlFUbENURHRCUVVGQk8wRkJRVUVzYVVOQlowTnBRanRCUVVOVUxGVkJRVWtzUzBGQlMxTXNTMEZCVEN4SlFVRmpXQ3hsUVVGbExFTkJRVU5ETEZsQlFXeERMRVZCUVdkRU96dEJRVVZvUkN4VlFVRkhMRXRCUVV0WkxFZEJRVXdzU1VGQldTeExRVUZMUVN4SFFVRk1MRU5CUVZOclFpeFZRVUZVTEVsQlFYVkNMRXRCUVV0c1FpeEhRVUZNTEVOQlFWTnRRaXhOUVVFdlF5eEZRVUYxUkR0QlFVTnVSQ3hoUVVGTGJrSXNSMEZCVEN4RFFVRlRiMElzUzBGQlZEdEJRVU5JT3p0QlFVVkVMRlZCUVVrc1MwRkJTM0JDTEVkQlFWUXNSVUZCWXp0QlFVTldMR0ZCUVV0QkxFZEJRVXdzUTBGQlUwa3NUVUZCVkN4SFFVRnhRaXhKUVVGeVFqdEJRVU5CTEdGQlFVdEtMRWRCUVV3c1EwRkJVMDBzVTBGQlZDeEhRVUZ4UWl4SlFVRnlRanRCUVVOQkxHRkJRVXRPTEVkQlFVd3NRMEZCVTFNc1QwRkJWQ3hIUVVGeFFpeEpRVUZ5UWp0QlFVTkJMR0ZCUVV0VUxFZEJRVXdzUTBGQlUxY3NUMEZCVkN4SFFVRnhRaXhKUVVGeVFqdEJRVU5JT3p0QlFVVkVMRmRCUVV0RUxGRkJRVXc3UVVGRFNEdEJRUzlEVER0QlFVRkJPMEZCUVVFc2VVSkJhVVJUWml4UFFXcEVWQ3hGUVdsRWEwSTdRVUZEVml4WFFVRkxTeXhIUVVGTUxFTkJRVk54UWl4SlFVRlVMRU5CUVdNeFFpeFBRVUZrTzBGQlEwZzdRVUZ1UkV3N1FVRkJRVHRCUVVGQkxDdENRWEZFWlR0QlFVTlFMRmRCUVV0SExFdEJRVXdzUjBGQllWZ3NaVUZCWlN4RFFVRkRSeXhUUVVFM1FqdEJRVU5CTEZkQlFVdEJMRk5CUVV3c1IwRkJhVUlzU1VGQmFrSTdRVUZEUVhkQ0xHTkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMSGxDUVVGb1FpeEZRVUV5UXp0QlFVRkRReXhqUVVGTkxFVkJRVVVzU1VGQlNYcENMSGRDUVVGS0xFTkJRVFpDVEN4bFFVRmxMRU5CUVVOSExGTkJRVGRETzBGQlFWUXNUMEZCTTBNc1EwRkJka0k3UVVGRFNEdEJRWHBFVER0QlFVRkJPMEZCUVVFc0swSkJNa1JsTzBGQlExQXNWMEZCUzBFc1UwRkJUQ3hIUVVGcFFpeExRVUZxUWp0QlFVTkJMRmRCUVV0UkxFdEJRVXdzUjBGQllWZ3NaVUZCWlN4RFFVRkRReXhaUVVFM1FqdEJRVU5CTEZkQlFVdFpMRWRCUVV3c1IwRkJWeXhKUVVGWU8wRkJRMEZqTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xIbENRVUZvUWl4RlFVRXlRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTVUZCU1hwQ0xIZENRVUZLTEVOQlFUWkNUQ3hsUVVGbExFTkJRVU5ETEZsQlFUZERPMEZCUVZRc1QwRkJNME1zUTBGQmRrSTdRVUZEU0R0QlFXaEZURHRCUVVGQk8wRkJRVUVzT0VOQmEwVjFRenRCUVVGQk96dEJRVUZCTEZWQlFWaHJReXhMUVVGWExIVkZRVUZJTEVOQlFVYzdPMEZCUXk5Q08wRkJSVUVzVlVGQlJ5eExRVUZMZEVJc1IwRkJUQ3hEUVVGVGEwSXNWVUZCVkN4TFFVRjNRaXhMUVVGTGJFSXNSMEZCVEN4RFFVRlRkVUlzU1VGQmNFTXNSVUZCTUVNN1FVRkRkRU1zWVVGQlMwTXNVVUZCVER0QlFVTkJMR1ZCUVU4c1NVRkJVRHRCUVVOSUxFOUJTRVFzVFVGSFR5eEpRVUZIUml4TFFVRkxMRWRCUVVjc1JVRkJXQ3hGUVVGbE8wRkJRMnhDUVN4aFFVRkxPMEZCUTB4SExHdENRVUZWTEVOQlFVTTdRVUZCUVN4cFFrRkJUU3hOUVVGSkxFTkJRVU53UWl4MVFrRkJUQ3hEUVVFMlFtbENMRXRCUVRkQ0xFTkJRVTQ3UVVGQlFTeFRRVUZFTEVWQlFUUkRMRWRCUVRWRExFTkJRVlk3UVVGRFNDeFBRVWhOTEUxQlIwRTdRVUZEU0N4aFFVRkxTU3hWUVVGTU8wRkJRMEVzWlVGQlR5eExRVUZRTzBGQlEwZzdRVUZEU2p0QlFTOUZURHRCUVVGQk8wRkJRVUVzYzBOQmFVWnpRaTlDTEU5QmFrWjBRaXhGUVdsR0swSTdRVUZEZGtKdFFpeGpRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXhwUWtGQmFFSXNSVUZCYlVNN1FVRkJRME1zWTBGQlRTeEZRVUZGTEVsQlFVbDJRaXhuUWtGQlNpeERRVUZ4UWtNc1QwRkJUeXhEUVVGRE9VSXNTVUZCTjBJN1FVRkJWQ3hQUVVGdVF5eERRVUYyUWp0QlFVTklPMEZCYmtaTU8wRkJRVUU3UVVGQlFTdzBRa0Z4UmxrclF5eEhRWEpHV2l4RlFYRkdhVUk3UVVGRFZFVXNZMEZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzWlVGQmFFSXNSVUZCYVVNN1FVRkJRME1zWTBGQlRTeEZRVUZGTEVsQlFVbDJRaXhuUWtGQlNpeERRVUZ4UW10Q0xFZEJRWEpDTzBGQlFWUXNUMEZCYWtNc1EwRkJka0k3UVVGRFNEdEJRWFpHVERzN1FVRkJRVHRCUVVGQkxFazdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEzUkNRVHRCUVVOQk8wRkJSVThzU1VGQlRXVXNUVUZCWWp0QlFVRkJPMEZCUVVFN1FVRkZTU3h2UWtGQll6dEJRVUZCTzBGQlJXSXNSMEZLVEN4RFFVMUpPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPMEZCV0VvN1FVRkJRVHRCUVVGQkxDdENRVmwxUWtNc1IwRmFka0lzUlVGWk5FSXZSQ3hKUVZvMVFpeEZRVmxyUXp0QlFVTXhRaXhWUVVGSlowVXNTMEZCU3l4SFFVRkhReXcyUTBGQlN5eERRVUZEUXl4TFFVRk9MRU5CUVZsRExFZEJRVm9zUTBGQlowSkRMRTlCUVdoQ0xFTkJRWGRDVEN4SFFVRjRRaXhEUVVGYU8wRkJRMEVzVlVGQlRVMHNSVUZCUlN4SFFVRkhMRU5CUVVNc1NVRkJSQ3hGUVVGUExFbEJRVkFzUlVGQllTeEpRVUZpTEVWQlFXMUNMRWxCUVc1Q0xFVkJRWGxDTEVsQlFYcENMRVZCUVN0Q0xFbEJRUzlDTEVWQlFYRkRMRWxCUVhKRExFVkJRVEpETEVsQlFUTkRMRVZCUVdsRUxFbEJRV3BFTEVWQlFYVkVMRWxCUVhaRUxFVkJRVFpFTEVsQlFUZEVMRVZCUVcxRkxFbEJRVzVGTEVWQlFYbEZMRWxCUVhwRkxFVkJRU3RGTEVsQlFTOUZMRVZCUVhGR0xFbEJRWEpHTEVWQlFUSkdMRWxCUVROR0xFTkJRVmc3UVVGRFFTeFZRVUZOUXl4VFFVRlRMRWRCUVVkTUxEWkRRVUZMTEVOQlFVTk5MRTlCUVU0c1EwRkJZME1zUzBGQlpDeERRVUZ2UWtNc1IwRkJjRUlzUTBGQmQwSlNMRFpEUVVGTExFTkJRVU5ETEV0QlFVNHNRMEZCV1ZFc1NVRkJXaXhEUVVGcFFrNHNUMEZCYWtJc1EwRkJlVUp3UlN4SlFVRjZRaXhEUVVGNFFpeERRVUZzUWp0QlFVTkJMRlZCUVUweVJTeE5RVUZOTEVkQlFVY3NTVUZCU1ZZc05rTkJRVXNzUTBGQlExY3NaVUZCVGl4RFFVRnpRa01zUjBGQk1VSXNRMEZCT0VKaUxFdEJRVGxDTEVWQlFYRkRTeXhGUVVGeVF5eERRVUZtTzBGQlEwRXNWVUZCVFZNc1kwRkJZeXhIUVVGSFNDeE5RVUZOTEVOQlFVTkpMRTlCUVZBc1EwRkJaVlFzVTBGQlppeERRVUYyUWp0QlFVTkJMRlZCUVUxVkxHVkJRV1VzUjBGQlIyWXNOa05CUVVzc1EwRkJRME1zUzBGQlRpeERRVUZaUXl4SFFVRmFMRU5CUVdkQ1l5eFRRVUZvUWl4RFFVRXdRa2dzWTBGQk1VSXNRMEZCZUVJN1FVRkZRU3hoUVVGUFJTeGxRVUZRTzBGQlEwZ3NTMEZ5UWt3c1EwRjFRa2s3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVRWQ1NqdEJRVUZCTzBGQlFVRXNLMEpCTmtKelFtcENMRWRCTjBKMFFpeEZRVFpDTWtJdlJDeEpRVGRDTTBJc1JVRTJRbWxETzBGQlEzcENMRlZCUVVsblJTeExRVUZMTEVkQlFVZERMRFpEUVVGTExFTkJRVU5ETEV0QlFVNHNRMEZCV1VNc1IwRkJXaXhEUVVGblFrTXNUMEZCYUVJc1EwRkJkMEpNTEVkQlFYaENMRU5CUVZvN1FVRkRRU3hWUVVGTlRTeEZRVUZGTEVkQlFVY3NRMEZCUXl4SlFVRkVMRVZCUVU4c1NVRkJVQ3hGUVVGaExFbEJRV0lzUlVGQmJVSXNTVUZCYmtJc1JVRkJlVUlzU1VGQmVrSXNSVUZCSzBJc1NVRkJMMElzUlVGQmNVTXNTVUZCY2tNc1JVRkJNa01zU1VGQk0wTXNSVUZCYVVRc1NVRkJha1FzUlVGQmRVUXNTVUZCZGtRc1JVRkJOa1FzU1VGQk4wUXNSVUZCYlVVc1NVRkJia1VzUlVGQmVVVXNTVUZCZWtVc1JVRkJLMFVzU1VGQkwwVXNSVUZCY1VZc1NVRkJja1lzUlVGQk1rWXNTVUZCTTBZc1EwRkJXRHRCUVVOQkxGVkJRVTFUTEdOQlFXTXNSMEZCUjJJc05rTkJRVXNzUTBGQlEwTXNTMEZCVGl4RFFVRlpReXhIUVVGYUxFTkJRV2RDUXl4UFFVRm9RaXhEUVVGM1FuQkZMRWxCUVhoQ0xFTkJRWFpDTzBGQlEwRXNWVUZCVFRKRkxFMUJRVTBzUjBGQlJ5eEpRVUZKVml3MlEwRkJTeXhEUVVGRFZ5eGxRVUZPTEVOQlFYTkNReXhIUVVFeFFpeERRVUU0UW1Jc1MwRkJPVUlzUlVGQmNVTkxMRVZCUVhKRExFTkJRV1k3UVVGRFFTeFZRVUZOWVN4alFVRmpMRWRCUVVkUUxFMUJRVTBzUTBGQlExRXNUMEZCVUN4RFFVRmxUQ3hqUVVGbUxFTkJRWFpDTzBGQlEwRXNWVUZCVFUwc1UwRkJVeXhIUVVGSGJrSXNOa05CUVVzc1EwRkJRME1zUzBGQlRpeERRVUZaVVN4SlFVRmFMRU5CUVdsQ1R5eFRRVUZxUWl4RFFVRXlRbWhDTERaRFFVRkxMRU5CUVVOTkxFOUJRVTRzUTBGQlkwTXNTMEZCWkN4RFFVRnZRbUVzUzBGQmNFSXNRMEZCTUVKSUxHTkJRVEZDTEVOQlFUTkNMRU5CUVd4Q08wRkJSVUVzWVVGQlQwVXNVMEZCVUR0QlFVTklMRXRCZEVOTUxFTkJkME5KTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVFM1EwbzdRVUZCUVR0QlFVRkJMR3REUVRoRGVVSnlRaXhIUVRsRGVrSXNSVUU0UXpoQ2RVSXNZVUU1UXpsQ0xFVkJPRU0yUXp0QlFVTnlReXhWUVVGSlF5eE5RVUZOTEVkQlFVY3NTVUZCU1VNc05FTkJRVW9zUTBGQlZTeFRRVUZXTEVWQlFYRkNMRTFCUVhKQ0xFTkJRV0k3UVVGRlFVUXNXVUZCVFN4RFFVRkRSU3hWUVVGUUxFTkJRV3RDTVVJc1IwRkJiRUlzUlVGQmMwSXNTMEZCZEVJN1FVRkRRWGRDTEZsQlFVMHNRMEZCUTBjc1RVRkJVQ3hEUVVGalNpeGhRVUZrTzBGQlJVRXNZVUZCVDBNc1RVRkJUU3hEUVVGRFNTeFBRVUZRTEVOQlFXVXNTMEZCWml4RFFVRlFPMEZCUTBnN1FVRkhSRHM3T3pzN1FVRjRSRW83UVVGQlFUdEJRVUZCTEdsRFFUUkVkMEpETEV0Qk5VUjRRaXhGUVRSRUswSTdRVUZEZGtJc1ZVRkJTVXdzVFVGQlRTeEhRVUZITEVsQlFVbERMRFJEUVVGS0xFTkJRVlVzVTBGQlZpeEZRVUZ4UWl4TFFVRnlRaXhEUVVGaU8wRkJRMEZFTEZsQlFVMHNRMEZCUTBjc1RVRkJVQ3hEUVVGalJTeExRVUZrTzBGQlEwRXNWVUZCVFVNc1QwRkJUeXhIUVVGSFRpeE5RVUZOTEVOQlFVTlBMRTlCUVZBc1EwRkJaU3hMUVVGbUxFTkJRV2hDTzBGQlEwRXNZVUZCVDBRc1QwRkJVRHRCUVVOSU8wRkJha1ZNT3p0QlFVRkJPMEZCUVVFc1NUczdPenM3T3pzN096czdPenM3T3pzN096czdPenREUTBSQk8wRkJRMEU3UVVGRFFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwOHNTVUZCVFVVc1lVRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNTd3lRa0ZCWlR0QlFVRkJPMEZCUldRc1IwRktUQ3hEUVUxSk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenRCUVZaS08wRkJRVUU3UVVGQlFTeHhRMEZYY1VKRExGRkJXSEpDTEVWQlZ5dENPMEZCUTNaQ0xGVkJRVWxETEZWQlFWVXNSMEZCVVN4SlFVRkpReXcwUTBGQlNpeERRVUZQUml4UlFVRlFMRU5CUVhSQ08wRkJRMEVzVlVGQlNVY3NZVUZCWVN4SFFVRkxReXhKUVVGSkxFTkJRVU5ETEV0QlFVd3NRMEZCV1VRc1NVRkJTU3hEUVVGRFJTeE5RVUZNTEV0QlFXZENMRWxCUVdwQ0xFZEJRWGxDTEVOQlFYQkRMRU5CUVhSQ08wRkJRMEVzVlVGQlNVTXNWVUZCVlN4SFFVRlJUaXhWUVVGVkxFTkJRVU5QTEVsQlFWZ3NRMEZCWjBKTUxHRkJRV2hDTEVOQlFYUkNMRU5CU0hWQ0xFTkJSeXRDT3p0QlFVTjBSQ3hWUVVGSlRTeEhRVUZITEVkQlFXVXNTVUZCU1ZBc05FTkJRVW9zUTBGQlR5eERRVUZRTEVOQlFYUkNPenRCUVVWQkxGVkJRVWRMTEZWQlFWVXNRMEZCUTBjc1IwRkJXQ3hEUVVGbFJDeEhRVUZtTEV0QlFYVkNMRU5CUVVNc1EwRkJNMElzUlVGQk9FSTdRVUZETVVJc1pVRkJUMEVzUjBGQlVEdEJRVU5JT3p0QlFVVkVMR0ZCUVU5R0xGVkJRVkE3UVVGRFNDeExRWFJDVEN4RFFYZENTVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRTVRa283UVVGQlFUdEJRVUZCTERoQ1FTdENZMGtzUTBFdlFtUXNSVUVyUW1sQ1F5eERRUzlDYWtJc1JVRXJRbTlDUXl4VlFTOUNjRUlzUlVFclFtZERPMEZCUTNoQ0xGVkJRVTFETEVsQlFVa3NSMEZCUnl4SlFVRkpXaXcwUTBGQlNpeERRVUZQVnl4VlFVRlFMRVZCUVcxQ0xFVkJRVzVDTEVOQlFXSTdRVUZEUVN4VlFVRk5SU3hKUVVGSkxFZEJRVWNzU1VGQlNXSXNORU5CUVVvc1EwRkJUMVVzUTBGQlVDeEZRVUZWTEVWQlFWWXNRMEZCWWp0QlFVTkJMRlZCUVUxSkxGTkJRVk1zUjBGQlIyUXNORU5CUVVVc1EwRkJRMlVzU1VGQlNDeERRVUZSTEVsQlFVbG1MRFJEUVVGS0xFTkJRVTlUTEVOQlFWQXNSVUZCVlN4RlFVRldMRU5CUVZJc1EwRkJiRUk3UVVGRFFTeFZRVUZOVHl4SlFVRkpMRWRCUVVkSUxFbEJRVWtzUTBGQlEwa3NTMEZCVEN4RFFVRlhTQ3hUUVVGWUxFTkJRV0k3UVVGRFFTeFZRVUZOU1N4TlFVRk5MRWRCUVVkR0xFbEJRVWtzUTBGQlEwY3NUVUZCVEN4RFFVRlpVQ3hKUVVGYUxFVkJRV3RDVVN4UFFVRnNRaXhIUVVFMFFrTXNVVUZCTlVJc1EwRkJjVU1zUlVGQmNrTXNRMEZCWmp0QlFVVkJMR0ZCUVU5SUxFMUJRVkE3UVVGRFNDeExRWFpEVEN4RFFYbERTVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRXZRMG83UVVGQlFUdEJRVUZCTERKQ1FXZEVWMVFzUTBGb1JGZ3NSVUZuUkdOaExHTkJhRVJrTEVWQlowUTRRa01zWTBGb1JEbENMRVZCWjBRNFF6dEJRVU4wUXl4VlFVRk5ReXhKUVVGSkxFZEJRVWNzU1VGQlNYaENMRFJEUVVGS0xFTkJRVTl6UWl4alFVRlFMRVZCUVhWQ0xFVkJRWFpDTEVOQlFXSTdRVUZEUVN4VlFVRk5SeXhKUVVGSkxFZEJRVWNzU1VGQlNYcENMRFJEUVVGS0xFTkJRVTkxUWl4alFVRlFMRVZCUVhWQ0xFVkJRWFpDTEVOQlFXSTdRVUZEUVN4VlFVRk5WQ3hUUVVGVExFZEJRVWRrTERSRFFVRkZMRU5CUVVObExFbEJRVWdzUTBGQlVTeEpRVUZKWml3MFEwRkJTaXhEUVVGUFV5eERRVUZRTEVWQlFWVXNSVUZCVml4RFFVRlNMRU5CUVd4Q08wRkJRMEVzVlVGQlRXbENMRWxCUVVrc1IwRkJSMFlzU1VGQlNTeERRVUZEVUN4TFFVRk1MRU5CUVZkSUxGTkJRVmdzUTBGQllqdEJRVVZCTEdGQlFVOVpMRWxCUVVrc1EwRkJRMUFzVFVGQlRDeERRVUZaVFN4SlFVRmFMRVZCUVd0Q1RDeFBRVUZzUWl4SFFVRTBRa01zVVVGQk5VSXNRMEZCY1VNc1JVRkJja01zUlVGQmVVTk5MRmRCUVhwRExFVkJRVkE3UVVGRFNEdEJRWFpFVERzN1FVRkJRVHRCUVVGQkxFazdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlEyUkJPMEZCUTBFN1FVRkRRVHRCUVVWUExFbEJRVTFETEdkQ1FVRmlPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFc2MwTkJRelpDUXl4VFFVUTNRaXhGUVVOM1EwTXNZMEZFZUVNc1JVRkZTVHRCUVVOSkxGVkJRVWx5U0N4RFFVRkRMRWRCUVVjc1NVRkJTVXdzYVVSQlFVb3NRMEZCV1hsSUxGTkJRVk1zUTBGQlEzWklMRVZCUVhSQ0xFVkJRVEJDUXl4blJFRkJUU3hEUVVGRGQwZ3NaVUZCYWtNc1JVRkJhMFE3UVVGQlF5eHJRa0ZCVlR0QlFVRllMRTlCUVd4RUxFVkJRVEpGTEVsQlFUTkZMRU5CUVZJN1FVRkRRU3hWUVVGSlF5eFZRVUZWTEVkQlFVY3NTVUZCU1VNc1owUkJRVW9zUTBGQldYSkZMRGhEUVVGTkxFTkJRVU56UlN4WlFVRlFMRU5CUVc5Q1NpeGpRVUZqTEVOQlFVTkxMRTFCUVc1RExFVkJRVEpEVWl4WFFVRXpReXhGUVVGYUxFVkJRWEZGTDBRc09FTkJRVTBzUTBGQlEzTkZMRmxCUVZBc1EwRkJiMEpLTEdOQlFXTXNRMEZCUTAwc1QwRkJia01zUlVGQk5FTlVMRmRCUVRWRExFVkJRWEpGTEVOQlFXcENPMEZCUTBFc1lVRkJUeXhKUVVGSlZTeG5Ra0ZCU2l4RFFVRnhRalZJTEVOQlFYSkNMRVZCUVhkQ2RVZ3NWVUZCZUVJc1EwRkJVRHRCUVVOSU8wRkJUa3c3TzBGQlFVRTdRVUZCUVR0QlFWTlBMRWxCUVUxTExHZENRVUZpTEVkQlEwa3NNRUpCUVZsRExITkNRVUZhTEVWQlFXOURUaXhWUVVGd1F5eEZRVUZuUkR0QlFVRkJPenRCUVVNMVF5eFBRVUZMVHl4elFrRkJUQ3hIUVVFNFFrUXNjMEpCUVRsQ08wRkJRMEVzVDBGQlMwVXNWVUZCVEN4SFFVRnJRbElzVlVGQmJFSTdRVUZEU0N4RFFVcE1MRU03T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFlrOHNTVUZCVFZNc1RVRkJZanRCUVVGQk8wRkJRVUU3UVVGRFNTeHJRa0ZCV1VNc1QwRkJXaXhGUVVFeVF6dEJRVUZCTEZGQlFYUkNReXhoUVVGelFpeDFSVUZCVGl4SlFVRk5PenRCUVVGQk96dEJRVU4yUXl4VFFVRkxReXhOUVVGTUxFZEJRV3RDTEVWQlFXeENPMEZCUTBFc1UwRkJTMFlzVDBGQlRDeEhRVUZyUWtFc1QwRkJiRUk3UVVGRFFTeFRRVUZMUXl4aFFVRk1MRWRCUVhGQ1FTeGhRVUZ5UWp0QlFVTklPenRCUVV4TU8wRkJRVUU3UVVGQlFTd3lRa0ZQYTBJN1FVRkJRU3gzUTBGQlRrVXNTVUZCVFR0QlFVRk9RU3haUVVGTk8wRkJRVUU3TzBGQlExWXNWMEZCUzBRc1RVRkJUQ3hEUVVGWlJTeEpRVUZhTEVOQlFXbENSQ3hKUVVGSkxFTkJRVU5GTEVsQlFVd3NRMEZCVlN4SFFVRldMRU5CUVdwQ096dEJRVU5CTEZkQlFVdERMRTlCUVV3N1FVRkRTRHRCUVZaTU8wRkJRVUU3UVVGQlFTdzBRa0ZaYlVJN1FVRkJRU3g1UTBGQlRrZ3NTVUZCVFR0QlFVRk9RU3haUVVGTk8wRkJRVUU3TzBGQlExZ3NWMEZCUzBRc1RVRkJUQ3hEUVVGWlJTeEpRVUZhTEVOQlFXbENSQ3hKUVVGSkxFTkJRVU5GTEVsQlFVd3NRMEZCVlN4SFFVRldMRU5CUVdwQ096dEJRVU5CTEZkQlFVdERMRTlCUVV3N1FVRkRTRHRCUVdaTU8wRkJRVUU3UVVGQlFTd3lRa0ZwUW10Q08wRkJRVUVzZVVOQlFVNUlMRWxCUVUwN1FVRkJUa0VzV1VGQlRUdEJRVUZCT3p0QlFVTldMRmRCUVV0RUxFMUJRVXdzUTBGQldVVXNTVUZCV2l4RFFVRnBRa1FzU1VGQlNTeERRVUZEUlN4SlFVRk1MRU5CUVZVc1IwRkJWaXhEUVVGcVFqczdRVUZEUVN4WFFVRkxReXhQUVVGTU8wRkJRMGc3UVVGd1FrdzdRVUZCUVR0QlFVRkJMRFJDUVhOQ2JVSTdRVUZCUVN4NVEwRkJUa2dzU1VGQlRUdEJRVUZPUVN4WlFVRk5PMEZCUVVFN08wRkJRMWdzVjBGQlMwUXNUVUZCVEN4RFFVRlpSU3hKUVVGYUxFTkJRV2xDUkN4SlFVRkpMRU5CUVVORkxFbEJRVXdzUTBGQlZTeEhRVUZXTEVOQlFXcENPenRCUVVOQkxGZEJRVXRETEU5QlFVdzdRVUZEU0R0QlFYcENURHRCUVVGQk8wRkJRVUVzT0VKQk1rSnhRanRCUVVGQkxIbERRVUZPU0N4SlFVRk5PMEZCUVU1QkxGbEJRVTA3UVVGQlFUczdRVUZEWWtrc1lVRkJUeXhEUVVGRFF5eEhRVUZTTEVOQlFWbE1MRWxCUVVrc1EwRkJRMFVzU1VGQlRDeERRVUZWTEVkQlFWWXNRMEZCV2p0QlFVTklPMEZCTjBKTU8wRkJRVUU3UVVGQlFTdzRRa0VyUW1NN1FVRkRUaXhYUVVGTFRDeFBRVUZNTEVOQlFXRlRMRk5CUVdJc1IwRkJlVUlzUzBGQlMxQXNUVUZCVEN4RFFVRlpSeXhKUVVGYUxFTkJRV2xDTEV0QlFVdEtMR0ZCUVhSQ0xFTkJRWHBDTzBGQlEwRXNWMEZCUzBRc1QwRkJUQ3hEUVVGaFZTeFRRVUZpTEVkQlFYbENMRXRCUVV0V0xFOUJRVXdzUTBGQllWY3NXVUZCZEVNN1FVRkRTRHRCUVd4RFREdEJRVUZCTzBGQlFVRXNORUpCYjBOWk8wRkJRMG9zVjBGQlMxUXNUVUZCVEN4SFFVRmpMRVZCUVdRN08wRkJRMEVzVjBGQlMwa3NUMEZCVER0QlFVTklPMEZCZGtOTU96dEJRVUZCTzBGQlFVRXNTVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dERRMFZCTzBGQlEwRTdRVUZEUVRzN1FVRkRUeXhKUVVGTmVra3NUVUZCVFN4SFFVRkhPMEZCUTJwQ0swa3NZVUZCVnl4RlFVRkhMR05CUkVjN1FVRkZha0pETEZsQlFWVXNSVUZCUnl4aFFVWkpPMEZCUjJwQ1F5eGhRVUZYTEVWQlFVY3NZMEZJUnp0QlFVbHFRa01zVlVGQlVTeEZRVUZITEZkQlNrMDdRVUZMYWtKRExHTkJRVmtzUlVGQlJ5eGxRVXhGTzBGQlRXcENReXhuUWtGQll5eEZRVUZITEZkQlRrRTdRVUZSYWtKRExHTkJRVmtzUlVGQlJ5eGxRVkpGTzBGQlUycENReXhsUVVGaExFVkJRVWNzWjBKQlZFTTdRVUZYYWtKRExFMUJRVWtzUlVGQlJ5eE5RVmhWTzBGQldXcENReXhOUVVGSkxFVkJRVWNzVFVGYVZUdEJRV05xUWtNc2FVSkJRV1VzUlVGQlJ5eFZRV1JFTzBGQlpXcENReXhyUWtGQlowSXNSVUZCUnl4dFFrRm1SanRCUVdkQ2FrSkRMREJDUVVGM1FpeEZRVUZITEc5Q1FXaENWanRCUVdsQ2FrSkRMREpDUVVGNVFpeEZRVUZITEdsQ1FXcENXRHRCUVd0Q2FrSkRMREpDUVVGNVFpeEZRVUZITEhOQ1FXeENXRHRCUVcxQ2FrSkRMRFJDUVVFd1FpeEZRVUZITEd0Q1FXNUNXanRCUVc5Q2FrSkRMR1ZCUVdFc1JVRkJSeXhSUVhCQ1F6dEJRWEZDYWtKRExHZENRVUZqTEVWQlFVY3NhVUpCY2tKQk8wRkJjMEpxUWtNc2JVSkJRV2xDTEVWQlFVY3NiMEpCZEVKSU8wRkJkVUpxUWtNc2JVSkJRV2xDTEVWQlFVY3NiVUpCZGtKSU8wRkJkMEpxUWtNc2JVSkJRV2xDTEVWQlFVY3NhMEpCZUVKSU8wRkJlVUpxUWtNc2EwSkJRV2RDTEVWQlFVY3NOa0pCZWtKR08wRkJNRUpxUWtNc1owSkJRV01zUlVGQlJ5d3lRa0V4UWtFN1FVRTBRbXBDZUV3c2IwSkJRV3RDTEVWQlFVY3NUVUUxUWtvN1FVRTJRbXBDYjBJc2NVSkJRVzFDTEVWQlFVY3NaVUUzUWt3N1FVRXJRbXBDY1Vzc2NVSkJRVzFDTEVWQlFVY3NaVUV2UWt3N1FVRm5RMnBDUXl4elFrRkJiMElzUlVGQlJ5eDNRa0ZvUTA0N1FVRnJRMnBDUXl4bFFVRmhMRVZCUVVjc1VVRnNRME03UVVGdFEycENReXhuUWtGQll5eEZRVUZITEdsQ1FXNURRVHRCUVc5RGFrSkRMREJDUVVGM1FpeEZRVUZITEc5Q1FYQkRWanRCUVhGRGFrSkRMREpDUVVGNVFpeEZRVUZITERaQ1FYSkRXRHRCUVhWRGFrSkRMRzFDUVVGcFFpeEZRVUZITEdOQmRrTklPMEZCZDBOcVFrTXNiMEpCUVd0Q0xFVkJRVWNzZFVKQmVFTktPMEZCTUVOcVFrTXNaMEpCUVdNc1JVRkJSeXgxUWtFeFEwRTdRVUV5UTJwQ2RFUXNhVUpCUVdVc1JVRkJSeXgzUWtFelEwUTdRVUUyUTJwQ05VWXNUMEZCU3l4RlFVRkhMRTlCTjBOVE8wRkJLME5xUW0xS0xITkNRVUZ2UWl4RlFVRkhMSEZDUVM5RFRqdEJRV2xFYkVJN1FVRkRRVU1zTUVKQlFYZENMRVZCUVVjc2EwSkJiRVJVTzBGQmEwUTJRanRCUVVNdlEwTXNNRUpCUVhkQ0xFVkJRVWNzYTBKQmJrUlVPMEZCYlVRMlFqdEJRVU12UTBNc01FSkJRWGRDTEVWQlFVY3NhMEpCY0VSVU8wRkJiMFEyUWp0QlFVTXZRME1zZFVKQlFYRkNMRVZCUVVjc1kwRnlSRTQ3UVVGeFJEWkNPMEZCUXk5RFF5eDFRa0ZCY1VJc1JVRkJSeXhqUVhSRVRqdEJRWE5FTmtJN1FVRkZMME5ETEdsQ1FVRmxMRVZCUVVjc1QwRjRSRUU3UVVGNVJHeENReXhyUWtGQlowSXNSVUZCUnl4blFrRjZSRVE3UVVFeVJHeENReXgxUWtGQmNVSXNSVUZCUnl4eFFrRXpSRTQ3UVVFMFJHeENReXgzUWtGQmMwSXNSVUZCUnl4cFFrRTFSRkE3UVVFNFJHeENReXh4UWtGQmJVSXNSVUZCUnl4MVFrRTVSRW83UVVGblJXeENReXg1UWtGQmRVSXNSVUZCUlN4cFFrRm9SVkE3UVVGcFJXeENReXh6UWtGQmIwSXNSVUZCUlN4aFFXcEZTanRCUVcxRmJFSkRMR2REUVVFNFFpeEZRVUZGTzBGQmJrVmtMRU5CUVdZN1FVRnpSVUVzU1VGQlRXcE1MRmxCUVZrc1IwRkJSenRCUVVONFFtdE1MRk5CUVU4c1JVRkJSU3hUUVVSbE8wRkJRMHB3VEN4VFFVRlBMRVZCUVVVc1UwRkVURHRCUVVOblFuRk1MRkZCUVUwc1JVRkJSVHRCUVVSNFFpeERRVUZ5UWl4RExFTkJTVkE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTA4c1NVRkJUVU1zV1VGQllpeEhRVU5KTEhOQ1FVRlpReXhMUVVGYUxFVkJRVzFDUXl4UFFVRnVRaXhGUVVFMFFrTXNaVUZCTlVJc1JVRkJOa003UVVGQlFUczdRVUZEZWtNc1QwRkJTME1zUzBGQlRDeEhRVUZoU0N4TFFVRmlPMEZCUTBFc1QwRkJTM1JGTEU5QlFVd3NSMEZCWlhWRkxFOUJRV1k3UVVGRFFTeFBRVUZMUnl4bFFVRk1MRWRCUVhWQ1JpeGxRVUYyUWp0QlFVTklMRU5CVEV3c1F5eERRVkZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMDhzU1VGQlRVY3NaVUZCWWp0QlFVRkJPMEZCUVVFN1FVRkRTU3d5UWtGQldXaE1MRTlCUVZvc1JVRkJjVUpwVEN4SFFVRnlRaXhGUVVFd1FrTXNTVUZCTVVJc1JVRkJaME5RTEV0QlFXaERMRVZCUVhWRE8wRkJRVUU3TzBGQlEyNURPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlMyNU5MRTlCUVV3c1IwRkJaWGRDTEU5QlFXWXNRMEZNYlVNc1EwRlBia003UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFc1UwRkJTMjFNTEVkQlFVd3NSMEZCVjBZc1IwRkJXQ3hEUVZodFF5eERRV0Z1UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRFFTeFRRVUZMUnl4SlFVRk1MRWRCUVZsR0xFbEJRVm9zUTBGcVFtMURMRU5CYlVKdVF6dEJRVU5CTzBGQlEwRTdPMEZCUTBFc1UwRkJTMG9zUzBGQlRDeEhRVUZoU0N4TFFVRmlPMEZCUTBnN08wRkJlRUpNTzBGQlFVRTdRVUZCUVN3MlFrRXdRbUU3UVVGRFRDeGhRVUZQTzBGQlEwZ3pTeXhsUVVGUExFVkJRVVVzUzBGQlMzaENMRTlCUkZnN1FVRkZTSGxOTEZkQlFVY3NSVUZCUlN4TFFVRkxSU3hIUVVaUU8wRkJSMGhFTEZsQlFVa3NSVUZCUlN4TFFVRkxSU3hKUVVoU08wRkJTVWhETEdOQlFVMHNSVUZCUlN4TFFVRkxVRHRCUVVwV0xFOUJRVkE3UVVGTlNEdEJRV3BEVERzN1FVRkJRVHRCUVVGQkxFa3NRMEZ2UTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwOHNTVUZCVFhSTkxFOUJRV0k3UVVGQlFUdEJRVUZCTzBGQlEwa3NiVUpCUVZrNFRTeEZRVUZhTEVWQlFXZENReXhUUVVGb1FpeEZRVUV5UW5KT0xFbEJRVE5DTEVWQlFXbERjMDRzWlVGQmFrTXNSVUZCYTBRN1FVRkJRVHM3UVVGRE9VTXNVMEZCU3psTkxFVkJRVXdzUjBGQlZUUk5MRVZCUVZZN1FVRkRRU3hUUVVGTFJ5eFRRVUZNTEVkQlFXbENSaXhUUVVGcVFqdEJRVU5CTEZOQlFVdDJUU3hKUVVGTUxFZEJRVmxrTEVsQlFWbzdRVUZEUVN4VFFVRkxkMDRzWVVGQlRDeEhRVUZ4UWl4RlFVRnlRanRCUVVOQkxGTkJRVXRhTEV0QlFVd3NSMEZCWVN4RlFVRmlMRU5CVERoRExFTkJTemRDT3p0QlFVTnFRaXhUUVVGTFlTeGhRVUZNTEVkQlFYRkNMRVZCUVhKQ0xFTkJUamhETEVOQlRYSkNPenRCUVVONlFpeFRRVUZMUXl4blFrRkJUQ3hIUVVGM1Frb3NaVUZCZUVJc1EwRlFPRU1zUTBGUFREczdRVUZEZWtNc1UwRkJTMHNzWVVGQlRDeEhRVUZ4UWl4RlFVRnlRaXhEUVZJNFF5eERRVkZ5UWp0QlFVTTFRanM3UVVGV1REdEJRVUZCTzBGQlFVRXNjME5CV1hOQ08wRkJRMlFzVlVGQlJ5eERRVUZETEV0QlFVczNUU3hKUVVGT0xFbEJRV01zVDBGQlR5eExRVUZMUVN4SlFVRk1MRU5CUVZVNFRTeFBRVUZxUWl4TFFVRTJRaXhYUVVFNVF5eEZRVUV5UkR0QlFVTjJSQ3hsUVVGUGVFMHNXVUZCV1N4RFFVRkRhMHdzVDBGQmNFSTdRVUZEU0RzN1FVRkZSQ3hoUVVGUExFdEJRVXQ0VEN4SlFVRk1MRU5CUVZVNFRTeFBRVUZXTEVkQlFXOUNlRTBzV1VGQldTeERRVUZEUml4UFFVRnFReXhIUVVFeVEwVXNXVUZCV1N4RFFVRkRiVXdzVFVGQkwwUTdRVUZEU0R0QlFXeENURHRCUVVGQk8wRkJRVUVzSzBKQmIwSmxPMEZCUTFBc1lVRkJUeXhMUVVGTGVrd3NTVUZCVEN4RFFVRlZLMDBzV1VGQlZpeEhRVUY1UWl4TFFVRkxMMDBzU1VGQlRDeERRVUZWSzAwc1dVRkJia01zUjBGQmEwUXNSVUZCZWtRN1FVRkRTRHRCUVhSQ1REdEJRVUZCTzBGQlFVRXNjVU5CZDBKeFFqdEJRVU5pTEdGQlFVOHNTMEZCU3k5TkxFbEJRVXdzUTBGQlZXZE9MRmxCUVdwQ08wRkJRMGc3UVVFeFFrdzdRVUZCUVR0QlFVRkJMSGxEUVRaQ1NUdEJRVU5KTEZWQlFVbERMRWRCUVVjc1IwRkJSME1zU1VGQlNTeERRVUZEUkN4SFFVRk1MRVZCUVZZc1EwRkVTaXhEUVVkSk96dEJRVU5CTEZWQlFVbEZMRWRCUVVjc1IwRkJSeXhMUVVGTFZDeGhRVUZNTEVOQlFXMUNWU3hMUVVGdVFpeERRVUY1UWl4aFFVRjZRaXhEUVVGV08wRkJRMEVzVlVGQlNVTXNUMEZCVHl4SFFVRkhMRWxCUVVsSUxFbEJRVW9zUlVGRFZqdEJRVU5CUXl4VFFVRkhMRU5CUVVNc1EwRkJSQ3hEUVVaUExFVkJSVVpCTEVkQlFVY3NRMEZCUXl4RFFVRkVMRU5CUVVnc1IwRkJVeXhEUVVaUUxFVkJSVlZCTEVkQlFVY3NRMEZCUXl4RFFVRkVMRU5CUm1Jc1JVRkhWanRCUVVOQlFTeFRRVUZITEVOQlFVTXNRMEZCUkN4RFFVcFBMRVZCU1VaQkxFZEJRVWNzUTBGQlF5eERRVUZFTEVOQlNrUXNSVUZKVFVFc1IwRkJSeXhEUVVGRExFTkJRVVFzUTBGS1ZDeEZRVWxqUVN4SFFVRkhMRU5CUVVNc1EwRkJSQ3hEUVVwcVFpeEZRVXRhUnl4UFFVeFpMRVZCUVdRc1EwRk1TaXhEUVZWcFFqczdRVUZGWWl4aFFVRlBSQ3hQUVVGUExFZEJRVWRLTEVkQlFXcENPMEZCUTBnc1MwRXhRMHdzUTBFMFEwazdPMEZCTlVOS08wRkJRVUU3UVVGQlFTd3lRa0ZwUjFkTkxFdEJha2RZTEVWQmFVZHJRanRCUVVOV0xGVkJRVWxPTEVkQlFVY3NSMEZCUjBNc1NVRkJTU3hEUVVGRFJDeEhRVUZNTEVWQlFWWTdRVUZEUVN4VlFVRkpUeXhSUVVGUkxFZEJRVWNzU1VGQlNVNHNTVUZCU2l4SFFVRlhUeXhwUWtGQldDeExRVUZwUXl4RlFVRnFReXhIUVVGelF5eEpRVUZ5UkR0QlFVTkJMRlZCUVVsRExGbEJRVmtzUjBGQlJ5eEpRVUZKVWl4SlFVRktMRU5CUVZORUxFZEJRVWNzUjBGQlIwOHNVVUZCVGl4SFFVRnBRa1FzUzBGQlN5eERRVUZEZUVJc1pVRkJhRU1zUTBGQmJrSXNRMEZJVlN4RFFVdFdPenRCUVVOQkxGZEJRVXRYTEdGQlFVd3NSMEZCY1VKblFpeFpRVUZaTEVOQlFVTkRMRmRCUVdJc1IwRkJNa0pETEV0QlFUTkNMRU5CUVdsRExFTkJRV3BETEVWQlFXMURMRU5CUVVNc1EwRkJjRU1zUTBGQmNrSTdRVUZEUVN4WFFVRkxPVUlzUzBGQlRDeEhRVUZoZVVJc1MwRkJTeXhEUVVGRGVrSXNTMEZCYmtJN1FVRkZRU3hWUVVGSkswSXNVVUZCVVN4SFFVRkhPMEZCUTFnM1RTeGxRVUZQTEVWQlFVVTdRVUZEVEhOTUxGbEJRVVVzUlVGQlJTeExRVUZMTlUwc1JVRkVTanRCUVVWTWIwOHNaVUZCU3l4RlFVRkZMRXRCUVV0eVFpeFRRVVpRTzBGQlIweDJUaXhqUVVGSkxFVkJRVVVzUzBGQlMyTXNTVUZJVGp0QlFVbE1LMDRzYTBKQlFWRXNSVUZCUlN4TFFVRkxja0k3UVVGS1ZqdEJRVVJGTEU5QlFXWTdPMEZCVTBFc1ZVRkJTU3hEUVVGRExFdEJRVXRGTEdkQ1FVRldMRVZCUVRSQ08wRkJRM2hDTzBGQlEwRnBRaXhuUWtGQlVTeERRVUZETjAwc1QwRkJWQ3hEUVVGcFFuRk1MRTFCUVdwQ0xFZEJRVEJDTEV0QlFVdFFMRXRCUVM5Q08wRkJRMGc3TzBGQlEwUXNWMEZCUzJVc1lVRkJUQ3hIUVVGeFFtMUNMRWxCUVVrc1EwRkJRME1zVTBGQlRDeERRVUZsU2l4UlFVRm1MRU5CUVhKQ096dEJRVVZCTEZWQlFVa3NRMEZCUXl4TFFVRkxha0lzWjBKQlFWWXNSVUZCTkVJN1FVRkRlRUlzWlVGQlR5eExRVUZMUXl4aFFVRmFPMEZCUTBnN08wRkJSVVFzVlVGQlNYRkNMRTFCUVUwc1IwRkJSMnhNTERoRFFVRk5MRU5CUVVOdFRDeFZRVUZRTEVOQlFXdENXaXhMUVVGTExFTkJRVU5zUnl4UFFVRk9MRU5CUVdORkxFMUJRV2hETEVWQlFYZERMRXRCUVV0elJpeGhRVUUzUXl4RFFVRmlPMEZCUTBFc1ZVRkJTWFZDTEU5QlFVOHNSMEZCUjNCTUxEaERRVUZOTEVOQlFVTnhUQ3hoUVVGUUxFTkJRWEZDWkN4TFFVRkxMRU5CUVVOc1J5eFBRVUZPTEVOQlFXTkhMRTlCUVc1RExFVkJRVFJETUVjc1RVRkJOVU1zUTBGQlpEdEJRVU5CTEZWQlFVbEpMRzFDUVVGdFFpeEhRVUZITzBGQlFVTnlReXhYUVVGSExFVkJRVVZwUXl4TlFVRk9PMEZCUVdOb1F5eFpRVUZKTEVWQlFVVnJReXhQUVVGUExFTkJRVU55U0N4WFFVRlNMRVZCUVhCQ08wRkJRVEpEYzBZc1kwRkJUU3hGUVVGRmEwSXNTMEZCU3l4RFFVRkRla0k3UVVGQmVrUXNUMEZCTVVJN1FVRkZRU3hoUVVGUGEwTXNTVUZCU1N4RFFVRkRReXhUUVVGTUxFTkJRV1ZMTEcxQ1FVRm1MRU5CUVZBN1FVRkRTRHRCUVd4SlREdEJRVUZCTzBGQlFVRXNhME5CTmtONVFrTXNVVUUzUTNwQ0xFVkJOa050UXp0QlFVTXpRaXhWUVVGSFFTeFJRVUZSTEVOQlFVTkRMRTFCUVZRc1MwRkJiMElzUTBGQmRrSXNSVUZCTUVJc1QwRkJUeXhKUVVGUU8wRkJSVEZDTEdGQlFVOHNTVUZCU1hSQ0xFbEJRVW9zVjBGQldYRkNMRkZCUVZFc1EwRkJRMFVzVFVGQlZDeERRVUZuUWl4RFFVRm9RaXhGUVVGclFpeERRVUZzUWl4RFFVRmFMR05CUVc5RFJpeFJRVUZSTEVOQlFVTkZMRTFCUVZRc1EwRkJaMElzUTBGQmFFSXNSVUZCYTBJc1EwRkJiRUlzUTBGQmNFTXNZMEZCTkVSR0xGRkJRVkVzUTBGQlEwVXNUVUZCVkN4RFFVRm5RaXhEUVVGb1FpeEZRVUZyUWl4RFFVRnNRaXhEUVVFMVJDeEZRVUZRTzBGQlEwZ3NTMEZxUkV3c1EwRnRSRWs3TzBGQmJrUktPMEZCUVVFN1FVRkJRU3g1UTBGdlJHZERReXhKUVhCRWFFTXNSVUZ2UkhORFF5eEpRWEJFZEVNc1JVRnZSRFJETzBGQlEzQkRMR0ZCUVU4c1NVRkJTWHBDTEVsQlFVb3NWMEZCV1hkQ0xFbEJRVWtzUTBGQlEwUXNUVUZCVEN4RFFVRlpMRU5CUVZvc1JVRkJZeXhEUVVGa0xFTkJRVm9zWTBGQlowTkRMRWxCUVVrc1EwRkJRMFFzVFVGQlRDeERRVUZaTEVOQlFWb3NSVUZCWXl4RFFVRmtMRU5CUVdoRExHTkJRVzlFUXl4SlFVRkpMRU5CUVVORUxFMUJRVXdzUTBGQldTeERRVUZhTEVWQlFXTXNRMEZCWkN4RFFVRndSQ3hqUVVGM1JVVXNTVUZCZUVVc1JVRkJVRHRCUVVOSU8wRkJkRVJNTzBGQlFVRTdRVUZCUVN3MlFrRjNSRzlDUXl4UFFYaEVjRUlzUlVGM1JEWkNhRVFzVDBGNFJEZENMRVZCZDBSelF6dEJRVU01UWl4VlFVRkphVVFzUjBGQlJ5eEhRVUZIWWl4SlFVRkpMRU5CUVVOakxFdEJRVXdzUTBGQlYwWXNUMEZCV0N4RFFVRldPenRCUVVWQkxGVkJRVWRETEVkQlFVY3NRMEZCUXpkT0xFOUJRVW9zU1VGQlpTeEpRVUZzUWl4RlFVRjNRanRCUVVOd1FpeFpRVUZKUVN4UFFVRlBMRWRCUVVjc1NVRkJTWGhDTEU5QlFVb3NRMEZCV1hGUUxFZEJRVWNzUTBGQlF6ZE9MRTlCUVVvc1EwRkJXWE5NTEVWQlFYaENMRVZCUVRSQ2RVTXNSMEZCUnl4RFFVRkROMDRzVDBGQlNpeERRVUZaT0Uwc1MwRkJlRU1zUlVGQkswTmxMRWRCUVVjc1EwRkJRemRPTEU5QlFVb3NRMEZCV1RsQ0xFbEJRVE5FTEVWQlFXbEZMRXRCUVdwRkxFTkJRV1E3UVVGRFFUaENMR1ZCUVU4c1EwRkJRelpNTEdGQlFWSXNSMEZCZDBJclFpeFBRVUY0UWp0QlFVTkJMR1ZCUVU4MVRpeFBRVUZRTzBGQlEwZzdPMEZCUlVRc1ZVRkJTVFJMTEU5QlFVOHNTVUZCU1N4SlFVRm1MRVZCUTBFN1FVRkRTVHRCUVVOQk8wRkJRMEVzWlVGQlR5eEpRVUZKY0Uwc1QwRkJTaXhEUVVGWkxGTkJRVm9zUlVGQmRVSXNWMEZCZGtJc1JVRkJiME1zU1VGQmNFTXNSVUZCTUVNc1MwRkJNVU1zUTBGQlVEdEJRVU5JTEU5QlpEWkNMRU5CWjBJNVFqczdPMEZCUTBFc1ZVRkJTWFZRTEVkQlFVY3NSMEZCUnk5TUxEaERRVUZOTEVOQlFVTnhUQ3hoUVVGUUxFTkJRWEZDZWtNc1QwRkJUeXhEUVVGRGNFVXNUMEZCTjBJc1JVRkJjME54U0N4SFFVRkhMRU5CUVVNMVF5eEhRVUV4UXl4RFFVRldPenRCUVVOQkxGVkJRVWs0UXl4SFFVRkhMRU5CUVVOb1NTeFhRVUZLTEUxQlFYRkNPRWdzUjBGQlJ5eERRVUZETTBNc1NVRkJOMElzUlVGQmJVTTdRVUZETDBJc1pVRkJUeXhKUVVGSk1VMHNUMEZCU2l4RFFVRlpMRWRCUVZvc1JVRkJhVUpITEUxQlFVMHNRMEZCUXl0TExHOUNRVUY0UWl4RlFVRTRReXhKUVVFNVF5eEZRVUZ2UkN4TFFVRndSQ3hEUVVGUU8wRkJRMGc3TzBGQlJVUXNWVUZCU1hORkxHRkJRV0VzUjBGQlIyaE5MRGhEUVVGTkxFTkJRVU5wVFN4VlFVRlFMRU5CUVd0Q2NrUXNUMEZCVHl4RFFVRkRja1VzVFVGQk1VSXNSVUZCYTBOelNDeEhRVUZITEVOQlFVTTFReXhIUVVGMFF5eERRVUZ3UWpzN1FVRkZRU3hWUVVGSk8wRkJRMEVzV1VGQlNXbEVMRmxCUVZrc1IwRkJSMnhDTEVsQlFVa3NRMEZCUTJNc1MwRkJUQ3hEUVVGWFJTeGhRVUZZTEVOQlFXNUNPenRCUVVWQkxGbEJRVWxvVHl4UlFVRlBMRWRCUVVjc1NVRkJTWGhDTEU5QlFVb3NRMEZCV1RCUUxGbEJRVmtzUTBGQlEyeFBMRTlCUVdJc1EwRkJjVUp6VEN4RlFVRnFReXhGUVVGeFF6UkRMRmxCUVZrc1EwRkJRMnhQTEU5QlFXSXNRMEZCY1VJNFRTeExRVUV4UkN4RlFVRnBSVzlDTEZsQlFWa3NRMEZCUTJ4UExFOUJRV0lzUTBGQmNVSTVRaXhKUVVGMFJpeEZRVUUwUml4SlFVRTFSaXhEUVVGa096dEJRVVZCT0VJc1owSkJRVThzUTBGQlF6Qk1MR0ZCUVZJc1IwRkJkMEozUXl4WlFVRlpMRU5CUVVOc1R5eFBRVUZpTEVOQlFYRkNLMDBzVVVGQk4wTTdRVUZEUVM5TkxHZENRVUZQTEVOQlFVTTRTeXhMUVVGU0xFZEJRV2RDYjBRc1dVRkJXU3hEUVVGRGJFOHNUMEZCWWl4RFFVRnhRbkZNTEUxQlFYSkRPMEZCUTBGeVRDeG5Ra0ZCVHl4RFFVRkRiVThzV1VGQlVpeEhRVUYxUWs0c1IwRkJSeXhEUVVGRE0wTXNTVUZCTTBJN1FVRkRRV3hNTEdkQ1FVRlBMRU5CUVVNMlRDeGhRVUZTTEVkQlFYZENiVU1zWVVGQmVFSTdRVUZGUVN4bFFVRlBhRThzVVVGQlVEdEJRVVZJTEU5QldrUXNRMEZaUlN4UFFVRk5iMDhzUTBGQlRpeEZRVUZUTzBGQlExQXNaVUZCVHl4SlFVRkpOVkFzVDBGQlNpeERRVUZaTEZOQlFWb3NSVUZCZFVJc1lVRkJka0lzUlVGQmMwTTdRVUZCUXl4cFFrRkJUM2RRTzBGQlFWSXNVMEZCZEVNc1JVRkJPRVFzUzBGQk9VUXNRMEZCVUR0QlFVTklPMEZCUTBvN1FVRXZSa3c3TzBGQlFVRTdRVUZCUVN4Sk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRlRWxCTzBOQlIwRTdRVUZEUVR0QlFVTkJPenRCUVVOUExFbEJRVTEwUnl4WFFVRmlPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFc1owTkJRMmRDTzBGQlExSXNWVUZCU1hoS0xFbEJRVWtzUjBGQlJ6dEJRVUZEZFVVc1pVRkJUeXhGUVVGRk8wRkJRVllzVDBGQldEdEJRVU5CTEdGQlFVOHNTVUZCU1dwRkxHbEVRVUZLTEVOQlFWbERMR2RGUVVGbExFTkJRVU5ETEVWQlFXaENMRU5CUVcxQ0xFbEJRVzVDTEVOQlFWb3NSVUZCYzBORExHZEVRVUZOTEVOQlFVTXJTU3hYUVVFM1F5eEZRVUV3UkhoS0xFbEJRVEZFTEVWQlFXZEZMRXRCUVdoRkxFTkJRVkE3UVVGRFNEdEJRVXBNT3p0QlFVRkJPMEZCUVVFc1NTeERRVTlCT3p0QlFVTlBMRWxCUVUxNVNpeFZRVUZpTEVkQlEwa3NiMEpCUVZrNVNTeERRVUZhTEVWQlFXVTdRVUZCUVRzN1FVRkRXQ3hQUVVGTFJTeFRRVUZNTEVkQlFXbENSaXhEUVVGRExFTkJRVU5JTEVWQlFXNUNPMEZCUTBFc1QwRkJTekpRTEVsQlFVd3NSMEZCV1hoUUxFTkJRVU1zUTBGQlEwY3NTVUZCUml4RFFVRlBhVTBzUjBGQlVDeERRVUZYY1VRc1EwRkJka0k3UVVGRFFTeFBRVUZMUXl4TFFVRk1MRWRCUVdFeFVDeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUMnROTEVsQlFWQXNRMEZCV1c5RUxFTkJRWHBDTzBGQlEwZ3NRMEZNVEN4RExFTkJVVUU3TzBGQlEwOHNTVUZCVFRGSExGZEJRV0k3UVVGQlFUdEJRVUZCTzBGQlEwa3NkVUpCUVZrMFJ5eFRRVUZhTEVWQlFYVkNReXhKUVVGMlFpeEZRVUUyUWtNc1MwRkJOMElzUlVGQmIwTTdRVUZCUVRzN1FVRkRhRU1zVTBGQlN6TlFMRk5CUVV3c1IwRkJhVUo1VUN4VFFVRnFRanRCUVVOQkxGTkJRVXRETEVsQlFVd3NSMEZCV1VFc1NVRkJXanRCUVVOQkxGTkJRVXRETEV0QlFVd3NSMEZCWVVFc1MwRkJZanRCUVVOSU96dEJRVXhNTzBGQlFVRTdRVUZCUVN4blEwRlBaMEk3UVVGRFVpeFZRVUZKZUZFc1NVRkJTU3hIUVVGSE8wRkJRMUFyVFN4WFFVRkhMRVZCUVVVN1FVRkRSREJFTEZkQlFVTXNSVUZCUlN4TFFVRkxSanRCUVVSUUxGTkJSRVU3UVVGSlVIWkVMRmxCUVVrc1JVRkJSVHRCUVVOR2VVUXNWMEZCUXl4RlFVRkZMRXRCUVV0RU8wRkJSRTQ3UVVGS1F5eFBRVUZZTzBGQlUwRXNZVUZCVHl4SlFVRkpiRkVzYVVSQlFVb3NRMEZCV1N4TFFVRkxUeXhUUVVGcVFpeEZRVUUwUWtvc1owUkJRVTBzUTBGQlEybEtMRmRCUVc1RExFVkJRV2RFTVVvc1NVRkJhRVFzUlVGQmMwUXNTMEZCZEVRc1EwRkJVRHRCUVVOSU8wRkJiRUpNT3p0QlFVRkJPMEZCUVVFc1NTeERRWEZDUVRzN1FVRkRUeXhKUVVGTk1rb3NVVUZCWWl4SFFVTkpMR3RDUVVGWmFFb3NRMEZCV2l4RlFVRmxPMEZCUVVFN08wRkJRMWdzVDBGQlN5dFFMR2RDUVVGTUxFZEJRWGRDTDFBc1EwRkJReXhEUVVGRGMxQXNXVUZCUml4RFFVRmxWU3hUUVVGbUxFTkJRWGxDTEVOQlFYcENMRVZCUVRKQ0xFTkJRVE5DTEVOQlFYaENPMEZCUTBnc1EwRklUQ3hETEVOQlRVRTdPMEZCUTA4c1NVRkJUUzlITEZsQlFXSXNSMEZEU1N4elFrRkJXV3BLTEVOQlFWb3NSVUZCWlR0QlFVRkJPenRCUVVOWUxFOUJRVXRQTEU5QlFVd3NSMEZCWlZBc1EwRkJReXhEUVVGRFJ5eEpRVUZHTEVOQlFVODRUU3hQUVVGMFFqdEJRVU5JTEVOQlNFd3NReXhEUVUxQk96dEJRVU5QTEVsQlFVMW5SQ3h4UWtGQllpeEhRVU5KTEN0Q1FVRlpiRVVzVDBGQldpeEZRVUZ4UW0xRkxGZEJRWEpDTEVWQlFXdERPMEZCUVVFN08wRkJRemxDTEU5QlFVc3hTU3hQUVVGTUxFZEJRV1YxUlN4UFFVRm1PMEZCUTBFc1QwRkJTMmhFTEZkQlFVd3NSMEZCYlVKdFNDeFhRVUZ1UWp0QlFVTklMRU5CU2t3N1FVRlBUeXhKUVVGTlF5eGxRVUZpTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRXNaME5CUjBrN1FVRkRTU3hoUVVGUExFbEJRVWw0VVN4cFJFRkJTaXhEUVVGWlF5eG5SVUZCWlN4RFFVRkRReXhGUVVGb1FpeERRVUZ0UWl4UlFVRnVRaXhEUVVGYUxFVkJRVEJEUXl4blJFRkJUU3hEUVVGRGIwb3NZMEZCYWtRc1JVRkJhVVVzU1VGQmFrVXNSVUZCZFVVc1NVRkJka1VzUTBGQlVEdEJRVU5JTzBGQlRFdzdPMEZCUVVFN1FVRkJRU3hKT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOc1JVRTdRVUZEUVR0QlFVTkJPME5CUjBFN08wRkJRMDhzU1VGQlRXdElMRk5CUVZNc1IwRkJSeXhEUVVGc1FpeERMRU5CUlZBN08wRkJRMDhzU1VGQlRVTXNjVUpCUVhGQ0xFZEJRVWNzYTJkQ1FVRTVRaXhETEVOQlJWQTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMDhzU1VGQlRVTXNZVUZCWWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFWTkpPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGaVNpeHJSRUZqYTBORExGVkJaR3hETEVWQll6aERPMEZCUTNSRExGVkJRVWxETEZsQlFWa3NSMEZCUnl4TFFVRkxReXc0UWtGQlRDeERRVUZ2UTBZc1ZVRkJWU3hEUVVGRFppeEpRVUV2UXl4RFFVRnVRanM3UVVGRFFTeFZRVUZKU1N4SlFVRkpMRWRCUVVkWkxGbEJRVmtzUTBGQlEwVXNWMEZCZUVJN1FVRkRRU3hWUVVGSlF5eEpRVUZKTEVkQlFVZElMRmxCUVZrc1EwRkJRMGtzWlVGQmVFSTdPMEZCUlVFc1ZVRkJTVU1zWVVGQllTeEhRVUZITEV0QlFVdEtMRGhDUVVGTUxFTkJRVzlEUml4VlFVRlZMRU5CUVVOaUxFdEJRUzlETEVOQlFYQkNPenRCUVVOQkxGVkJRVWxITEV0QlFVc3NSMEZCUjJkQ0xHRkJRV0VzUTBGQlEwZ3NWMEZCTVVJN1FVRkRRU3hWUVVGSlNTeExRVUZMTEVkQlFVZEVMR0ZCUVdFc1EwRkJRMFFzWlVGQk1VSTdRVUZGUVN4VlFVRkpOMFVzVDBGQlR5eEhRVUZITEVsQlFVbDJSU3huUkVGQlNpeERRVUZaYlVvc1NVRkJXaXhGUVVGclFrY3NTMEZCYkVJc1EwRkJaRHRCUVVOQkxGVkJRVWxhTEZkQlFWY3NSMEZCUnl4SlFVRkpia2dzYjBSQlFVb3NRMEZCWjBKM1NDeFZRVUZWTEVOQlFVTnlVU3hUUVVFelFpeEZRVUZ6UXpCUUxFbEJRWFJETEVWQlFUUkRReXhMUVVFMVF5eERRVUZzUWp0QlFVVkJMR0ZCUVU4c1NVRkJTVWtzT0VSQlFVb3NRMEZCTUVKc1JTeFBRVUV4UWl4RlFVRnRRMjFGTEZkQlFXNURMRU5CUVZBN1FVRkRTQ3hMUVROQ1RDeERRVFpDU1R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQmJFTktPMEZCUVVFN1FVRkJRU3h0UkVGdFEyMURja29zWTBGdVEyNURMRVZCYlVOdFJEdEJRVVV6UXl4VlFVRkphMHNzWVVGQllTeEhRVUZITEVsQlFVa3pUQ3cwUkVGQlNpeEZRVUZ3UWp0QlFVTkJMRlZCUVVrMFRDeFhRVUZYTEVkQlFVZEVMR0ZCUVdFc1EwRkJRMFVzWjBKQlFXUXNRMEZCSzBKYUxIRkNRVUV2UWl4RFFVRnNRanRCUVVOQkxGVkJRVWxoTEZWQlFWVXNSMEZCUjBnc1lVRkJZU3hEUVVGRFNTeFRRVUZrTEVOQlFYZENaQ3h4UWtGQmVFSXNSVUZCSzBORUxGTkJRUzlETEVWQlFUQkVXU3hYUVVFeFJDeERRVUZxUWp0QlFVTkJMRlZCUVVsSkxGRkJRVkVzUjBGQlIwd3NZVUZCWVN4RFFVRkRUU3hOUVVGa0xFTkJRWEZDYUVJc2NVSkJRWEpDTEVWQlFUUkRlRW9zWTBGQk5VTXNSVUZCTkVSdFN5eFhRVUUxUkN4RFFVRm1PMEZCUlVFc1ZVRkJTWFpMTEUxQlFVMHNSMEZCUnl4TFFVRkxOa3NzYlVKQlFVd3NRMEZCZVVKR0xGRkJRWHBDTEVOQlFXSTdRVUZGUVN4aFFVRlBMRWxCUVVsSExHdENRVUZLTEVOQlFYVkNUQ3hWUVVGMlFpeEZRVUZ0UTNwTExFMUJRVzVETEVOQlFWQTdRVUZEU0N4TFFUZERUQ3hEUVN0RFNUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGeVJFbzdRVUZCUVR0QlFVRkJMSGREUVhORWQwSkJMRTFCZEVSNFFpeEZRWFZFU1R0QlFVTkpPMEZCUTBFc1ZVRkJTVUVzVFVGQlRTeERRVUZEYTBrc1RVRkJVQ3hIUVVGblFpeERRVUZvUWl4TFFVRnpRaXhEUVVFeFFpeEZRVUUwUWp0QlFVTjRRbXhKTEdOQlFVMHNSMEZCUnl4TlFVRk5RU3hOUVVGbU8wRkJRMGc3TzBGQlJVUkJMRmxCUVUwc1IwRkJSMEVzVFVGQlRTeERRVUZESzBzc1VVRkJVQ3hEUVVGblFpeEhRVUZvUWl4RlFVRnhRaXhIUVVGeVFpeERRVUZVTEVOQlRrb3NRMEZSU1RzN1FVRkRRU3hoUVVGUGNrOHNPRU5CUVUwc1EwRkJRM05GTEZsQlFWQXNRMEZCYjBKb1FpeE5RVUZ3UWl4RFFVRlFPMEZCUTBnN1FVRnFSVXc3UVVGQlFUdEJRVU5KTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCU2tvc2NVTkJTelJDTzBGQlEzQkNMR0ZCUVU4c1NVRkJTVzlETEc5RVFVRktMRVZCUVZBN1FVRkRTRHRCUVZCTU96dEJRVUZCTzBGQlFVRXNTU3hEUVc5RlFUdEJRVU5CTzBGQlEwRTdPMEZCUTA4c1NVRkJUVEJKTEd0Q1FVRmlMRWRCUTBrc05FSkJRVmxGTEZkQlFWb3NSVUZCZVVKRExHVkJRWHBDTEVWQlFUQkRPMEZCUVVFN08wRkJRM1JETEU5QlFVdG9RaXhYUVVGTUxFZEJRVzFDWlN4WFFVRnVRanRCUVVOQkxFOUJRVXRpTEdWQlFVd3NSMEZCZFVKakxHVkJRWFpDTzBGQlEwZ3NRMEZLVEN4RE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU4wUmtFN1EwRkhRVHRCUVVOQk8wRkJRMEU3TzBGQlEwOHNTVUZCVFVNc2EwSkJRV0k3UVVGQlFUdEJRVUZCTzBGQlJVa3NaME5CUVdNN1FVRkJRVHM3UVVGRFZqdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRkxReXhOUVVGTUxFZEJRV01zU1VGQlpDeERRVXBWTEVOQlRWWTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEVzVTBGQlMwTXNUVUZCVEN4SFFVRmpMRWxCUVdRc1EwRldWU3hEUVZsV08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFc1UwRkJTME1zVDBGQlRDeEhRVUZsTEVsQlFXWTdRVUZGUVN4VFFVRkxReXhWUVVGTUxFZEJRV3RDTEVsQlFXeENMRU5CYmtKVkxFTkJjVUpXTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hUUVVGTFF5eFhRVUZNTEVkQlFXMUNMRU5CUVc1Q0xFTkJlRUpWTEVOQk1FSldPMEZCUTBFN1FVRkRRVHM3UVVGRFFTeFRRVUZMUXl4cFFrRkJUQ3hIUVVGNVFpeERRVUY2UWl4RFFUZENWU3hEUVN0Q1ZqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVOQkxGTkJRVXRETEZGQlFVd3NSMEZCWjBJc1JVRkJhRUk3UVVGRFNEczdRVUYyUTB3N1FVRkJRVHRCUVVGQkxEUkRRVEJEU1R0QlFVTkpMRlZCUVVrc1EwRkJReXhMUVVGTFFTeFJRVUZXTEVWQlEwRTdRVUZEU1N4bFFVRlBMRVZCUVZBN1FVRkRTRHM3UVVGRlJDeFZRVUZKUXl4clFrRkJhMElzUjBGQlJ5eEZRVUY2UWp0QlFVTkJMRlZCUVVsRExHRkJRV0VzUjBGQlIycEZMRWxCUVVrc1EwRkJRMk1zUzBGQlRDeERRVUZYTEV0QlFVdHBSQ3hSUVVGb1FpeERRVUZ3UWp0QlFVVkJMR0ZCUVU5RkxHRkJRV0VzUTBGQlEwTXNSMEZCWkN4RFFVRnJRaXhWUVVGRFF5eEpRVUZFTEVWQlFWVTdRVUZETDBJc1pVRkJUeXhKUVVGSlF5eHRRa0ZCU2l4RFFVRjNRa1FzU1VGQlNTeERRVUZEUlN4WlFVRTNRaXhGUVVFeVEwWXNTVUZCU1N4RFFVRkRSeXhsUVVGb1JDeERRVUZRTzBGQlEwZ3NUMEZHVFN4RFFVRlFPMEZCUjBnN1FVRjBSRXc3UVVGQlFUdEJRVUZCTERoQ1FXdEZZME1zVTBGc1JXUXNSVUZ0UlVrN1FVRkRTU3hWUVVGSmNsUXNTVUZCU1N4SFFVRkhPMEZCUTFBc2JVSkJRVmNzUzBGQlMzVlRMRTFCUVV3c1NVRkJZV1VzYlVKQlFXMUNMRU5CUVVORE8wRkJSSEpETEU5QlFWZzdRVUZKUVN4VlFVRkpMRXRCUVV0bUxFMUJRVlFzUlVGQmFVSjRVeXhKUVVGSkxFTkJRVU4zVkN4UFFVRk1MRWRCUVdVc1MwRkJTMmhDTEUxQlFYQkNPMEZCUTJwQ0xGVkJRVWtzUzBGQlMwTXNUMEZCVkN4RlFVRnJRbnBUTEVsQlFVa3NRMEZCUTNsVUxGRkJRVXdzUjBGQlowSXNTMEZCUzJoQ0xFOUJRWEpDT3p0QlFVVnNRaXhWUVVGSkxFdEJRVXRHTEUxQlFVd3NTVUZCWldVc2JVSkJRVzFDTEVOQlFVTkRMRTlCUVhaRExFVkJRMEU3UVVGRFNYWlVMRmxCUVVrc1EwRkJRekJVTEdsQ1FVRk1MRWRCUVhsQ0xFdEJRVXRtTEZkQlFUbENPMEZCUTBFelV5eFpRVUZKTEVOQlFVTXlWQ3gxUWtGQlRDeEhRVUVyUWl4TFFVRkxaaXhwUWtGQmNFTTdRVUZEUVRWVExGbEJRVWtzUTBGQlF6UlVMRzlDUVVGTUxFZEJRVFJDTEV0QlFVdERMSEZDUVVGTUxFVkJRVFZDTzBGQlEwZ3NUMEZNUkN4TlFVOUJPMEZCUTBrM1ZDeFpRVUZKTEVOQlFVTTJUaXhaUVVGTUxFZEJRVzlDTEV0QlFVc3dSU3hOUVVGTUxFTkJRVmxvVEN4UlFVRmFMRVZCUVhCQ08wRkJRMEYyU0N4WlFVRkpMRU5CUVVNNFRpeFpRVUZNTEVkQlFXOUNMRXRCUVV0NVJTeE5RVUZNTEVOQlFWbG9UQ3hSUVVGYUxFVkJRWEJDTzBGQlEwZzdPMEZCUlVRc1lVRkJUeXhKUVVGSmFrZ3NhVVJCUVVvc1EwRkJXU3RUTEZOQlFWb3NSVUZCZFVJMVV5eG5SRUZCVFN4RFFVRkRiVXdzY1VKQlFUbENMRVZCUVhGRU5Vd3NTVUZCY2tRc1JVRkJNa1FzU1VGQk0wUXNRMEZCVUR0QlFVTklPMEZCZUVaTU8wRkJRVUU3UVVGQlFTd3JRa0YzUkhOQ09GUXNSVUY0UkhSQ0xFVkJlVVJKTzBGQlEwa3NWVUZCU1VFc1JVRkJSU3hEUVVGRGVFVXNUVUZCU0N4SFFVRlpMRU5CUVdoQ0xFVkJRMEU3UVVGRFNTeGxRVUZQTEVWQlFWQTdRVUZEU0RzN1FVRkZSQ3hoUVVGUFVpeEpRVUZKTEVOQlFVTkRMRk5CUVV3c1EwRkJaU3RGTEVWQlFXWXNRMEZCVUR0QlFVTklPMEZCYUVWTU96dEJRVUZCTzBGQlFVRTdRVUV5Ums4c1NVRkJUVklzYlVKQlFXMUNMRWRCUTJoRE8wRkJRMGxETEZOQlFVOHNSVUZCUlN4VFFVUmlPMEZCUlVsUkxHdENRVUZuUWl4RlFVRkZMR3RDUVVaMFFqdEJRVWRKUXl4cFFrRkJaU3hGUVVGRkxHbENRVWh5UWp0QlFVbEpReXh4UWtGQmJVSXNSVUZCUlR0QlFVcDZRaXhEUVVSUE8wRkJVVUVzU1VGQlRVTXNWMEZCVnl4SFFVTjRRanRCUVVOSlF5eE5RVUZKTEVWQlFVVXNUVUZFVmp0QlFVVkpReXhOUVVGSkxFVkJRVVU3UVVGR1ZpeERRVVJQTzBGQlRVRXNTVUZCVFVNc1YwRkJZaXhIUVVWSkxIRkNRVUZaTVZRc1EwRkJXaXhGUVVOQk8wRkJRVUU3TzBGQlEwa3NUMEZCU3pKVUxHVkJRVXdzUjBGQmRVSXpWQ3hEUVVGMlFqdEJRVU5CTEU5QlFVczJVaXhOUVVGTUxFZEJRV01zUzBGQlN6aENMR1ZCUVV3c1EwRkJjVUo0VkN4SlFVRnlRaXhEUVVFd1FpeFRRVUV4UWl4RFFVRmtPMEZCUTBFc1QwRkJTekpTTEU5QlFVd3NSMEZCWlN4TFFVRkxOa0lzWlVGQlRDeERRVUZ4UW5oVUxFbEJRWEpDTEVOQlFUQkNMRlZCUVRGQ0xFTkJRV1k3UVVGRFFTeFBRVUZMTkZJc1ZVRkJUQ3hIUVVGclFpeExRVUZMTkVJc1pVRkJUQ3hEUVVGeFFuaFVMRWxCUVhKQ0xFTkJRVEJDTEdGQlFURkNMRU5CUVd4Q08wRkJRMEVzVDBGQlMzbFVMR3RDUVVGTUxFZEJRVEJDTEVsQlFURkNPMEZCUlVFc1RVRkJTVU1zUlVGQlJTeEhRVUZITEV0QlFVdEdMR1ZCUVV3c1EwRkJjVUo0VkN4SlFVRnlRaXhEUVVFd1FpeGpRVUV4UWl4RFFVRlVPMEZCUTBFc1QwRkJTMjlVTEZkQlFVd3NSMEZCYlVKTkxFVkJRVzVDTEVOQlVrb3NRMEZWU1RzN1FVRkRRU3hOUVVGSlF5eFhRVUZYTEVkQlFVY3NTVUZCU1c1VkxHbEVRVUZLTEVOQlFWbExMRU5CUVVNc1EwRkJRMGdzUlVGQlpDeEZRVUZyUWl4cFFrRkJiRUlzUlVGQmNVTkhMRU5CUVVNc1EwRkJRMGNzU1VGQlJpeERRVUZQTEdsQ1FVRlFMRU5CUVhKRExFVkJRV2RGTEV0QlFXaEZMRU5CUVd4Q08wRkJRMEVzVDBGQlMzRktMR2RDUVVGTUxFZEJRWGRDTEVsQlFVbEJMREJFUVVGS0xFTkJRWEZDYzBzc1YwRkJja0lzUTBGQmVFSTdRVUZGUVN4UFFVRkxReXhqUVVGTUxFZEJRWE5DTEV0QlFVdDJTeXhuUWtGQlRDeERRVUZ6UW5kTExHbENRVUYwUWl4RlFVRjBRanRCUVVOQkxFOUJRVXRETEZOQlFVd3NSMEZCYVVJc1MwRkJTM3BMTEdkQ1FVRk1MRU5CUVhOQ01Fc3NXVUZCZEVJc1JVRkJha0k3UVVGRFFTeFBRVUZMYkZZc1pVRkJUQ3hIUVVGMVFpeExRVUZMZDBzc1owSkJRVXdzUTBGQmMwSXlTeXhyUWtGQmRFSXNSVUZCZGtJN1FVRkRTQ3hEUVhCQ1REdEJRWFZDVHl4SlFVRk5OVUlzYlVKQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc0swSkJRVmsyUWl4WFFVRmFMRVZCUVhsQ1F5eGpRVUY2UWl4RlFVTkJPMEZCUVVFN08wRkJRMGtzVTBGQlMyUXNWMEZCVEN4SFFVRnRRbUVzVjBGQmJrSTdRVUZEUVN4VFFVRkxSU3hqUVVGTUxFZEJRWE5DUkN4alFVRjBRanRCUVVOSU96dEJRVTVNTzBGQlFVRTdRVUZCUVN3MlFrRlJZVHRCUVVOTUxHRkJRVTg3UVVGRFNEZENMRzlDUVVGWkxFVkJRVVVzUzBGQlMyVXNWMEZFYUVJN1FVRkZTR1FzZFVKQlFXVXNSVUZCUlN4TFFVRkxOa0k3UVVGR2JrSXNUMEZCVUR0QlFVbElPMEZCWWt3N1FVRkJRVHRCUVVGQkxIVkRRV2RDU1R0QlFVTkpMR0ZCUVU4c1MwRkJTMEVzWTBGQlRDeERRVUZ2UWl4cFFrRkJjRUlzUTBGQlVEdEJRVU5JTzBGQmJFSk1PenRCUVVGQk8wRkJRVUU3UVVGeFFrOHNTVUZCVFVNc1owSkJRV0k3UVVGQlFUdEJRVUZCTzBGQlJVa3NPRUpCUVdNN1FVRkJRVHM3UVVGRFZpeFRRVUZMUXl4cFFrRkJUQ3hIUVVGNVFpeExRVUY2UWp0QlFVTkJMRk5CUVV0RExHbENRVUZNTEVkQlFYbENMRXRCUVhwQ08wRkJRMEVzVTBGQlMwTXNiMEpCUVV3c1IwRkJORUlzUzBGQk5VSTdRVUZEUVN4VFFVRkxReXhwUWtGQlRDeEhRVUY1UWl4TFFVRjZRanRCUVVOQkxGTkJRVXRETEhGQ1FVRk1MRWRCUVRaQ0xFdEJRVGRDTzBGQlJVRXNVMEZCUzBNc1kwRkJUQ3hIUVVGelFpeExRVUYwUWp0QlFVVkJMRk5CUVV0RExHOUNRVUZNTEVkQlFUUkNMRXRCUVRWQ08wRkJSVUVzVTBGQlMwTXNZMEZCVEN4SFFVRnpRaXhGUVVGMFFqdEJRVU5CTEZOQlFVdERMR1ZCUVV3c1IwRkJkVUlzUlVGQmRrSTdRVUZEUVN4VFFVRkxReXhaUVVGTUxFZEJRVzlDTEVWQlFYQkNMRU5CWWxVc1EwRmxWanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTkVMRk5CUVV0RExHdENRVUZNTEVkQlFUQkNMRVZCUVRGQ08wRkJRMFk3TzBGQmRrSk1PMEZCUVVFN1FVRkJRU3c0UWtGNVFtTjRReXhUUVhwQ1pDeEZRVEJDU1R0QlFVTkpMRlZCUVVseVZDeEpRVUZKTEVkQlFVYzdRVUZEVUN4blEwRkJkMElzUzBGQlMyMVdMR2xDUVVSMFFqdEJRVVZRTEN0Q1FVRjFRaXhMUVVGTFF5eHBRa0ZHY2tJN1FVRkhVQ3h0UTBGQk1rSXNTMEZCUzBNc2IwSkJTSHBDTzBGQlNWQXNLMEpCUVhWQ0xFdEJRVXRETEdsQ1FVcHlRanRCUVV0UUxESkNRVUZ0UWl4TFFVRkxSU3hqUVV4cVFqdEJRVTFRTEd0RFFVRXdRaXhMUVVGTFF5eHZRa0ZPZUVJN1FVRlBVQ3cwUWtGQmIwSXNTMEZCUzBNc1kwRlFiRUk3UVVGUlVDdzJRa0ZCY1VJc1MwRkJTME1zWlVGU2JrSTdRVUZUVUN3d1FrRkJhMElzUzBGQlMwTXNXVUZVYUVJN1FVRlZVQ3cwUWtGQmIwSXNTMEZCUzBNc2EwSkJWbXhDTzBGQlYxQXNiVU5CUVRKQ0xFdEJRVXRPTzBGQldIcENMRTlCUVZnN1FVRmpRU3hoUVVGUExFbEJRVWxxVml4cFJFRkJTaXhEUVVGWksxTXNVMEZCV2l4RlFVRjFRalZUTEdkRVFVRk5MRU5CUVVOcFRDeDNRa0ZCT1VJc1JVRkJkMFF4VEN4SlFVRjRSQ3hGUVVFNFJDeEpRVUU1UkN4RFFVRlFPMEZCUTBnN1FVRXhRMHc3UVVGQlFUdEJRVUZCTERCRFFUUkRhVU54VkN4VFFUVkRha01zUlVFMFF6UkRPMEZCUTNCRExGVkJRVWx5VkN4SlFVRkpMRWRCUVVjN1FVRkRVQ3huUTBGQmQwSTdRVUZFYWtJc1QwRkJXRHRCUVVkQkxHRkJRVThzU1VGQlNVMHNhVVJCUVVvc1EwRkJXU3RUTEZOQlFWb3NSVUZCZFVJMVV5eG5SRUZCVFN4RFFVRkRhVXdzZDBKQlFUbENMRVZCUVhkRU1Vd3NTVUZCZUVRc1JVRkJPRVFzU1VGQk9VUXNRMEZCVUR0QlFVTklPMEZCYWtSTU96dEJRVUZCTzBGQlFVRXNTU3hEUVc5RVFUdEJRVU5CTzBGQlEwRTdPMEZCUTA4c1NVRkJUVGhXTEhGQ1FVRmlPMEZCUVVFN1FVRkJRVHRCUVVWSkxHMURRVUZqTzBGQlFVRTdPMEZCUTFZN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFVdERMRk5CUVV3c1IwRkJhVUlzU1VGQmFrSTdRVUZEU0RzN1FVRlVURHRCUVVGQk8wRkJRVUVzYjBOQldVazdRVUZEU1N4VlFVRkpMRU5CUVVNc1MwRkJTMEVzVTBGQlZpeEZRVU5CTzBGQlEwa3NaVUZCVHl4RlFVRlFPMEZCUTBnN08wRkJSVVFzWVVGQlQycElMRWxCUVVrc1EwRkJRMk1zUzBGQlRDeERRVUZYTEV0QlFVdHRSeXhUUVVGb1FpeERRVUZRTzBGQlEwZzdRVUZ1UWt3N1FVRkJRVHRCUVVGQkxEaENRWEZDWXpGRExGTkJja0prTEVWQmMwSkpPMEZCUTBrc1ZVRkJTWEpVTEVsQlFVa3NSMEZCUnp0QlFVTlFaMWNzWTBGQlRTeEZRVUZGTEV0QlFVdERMR0ZCUVV3N1FVRkVSQ3hQUVVGWU8wRkJTVUVzWVVGQlR5eEpRVUZKTTFZc2FVUkJRVW9zUTBGQldTdFRMRk5CUVZvc1JVRkJkVUkxVXl4blJFRkJUU3hEUVVGRE1rd3NiMEpCUVRsQ0xFVkJRVzlFY0Uwc1NVRkJjRVFzUlVGQk1FUXNTVUZCTVVRc1EwRkJVRHRCUVVOSU8wRkJOVUpNT3p0QlFVRkJPMEZCUVVFc1NTeERRU3RDUVR0QlFVTkJPMEZCUTBFN08wRkJRMDhzU1VGQlRXdFhMR1ZCUVdJN1FVRkJRVHRCUVVGQk8wRkJSVWtzTmtKQlFXTTdRVUZCUVRzN1FVRkRWaXhUUVVGTGVrUXNUMEZCVEN4SFFVRmxMRWxCUVdZN1FVRkRRU3hUUVVGTE1FUXNTMEZCVEN4SFFVRmhMRWxCUVdJN1FVRkRRU3hUUVVGTFF5eHhRa0ZCVEN4SFFVRTJRaXhKUVVFM1FqdEJRVU5JT3p0QlFVNU1PMEZCUVVFN1FVRkJRU3cyUWtGUllUdEJRVU5NTEdGQlFVODdRVUZEU0RORExHZENRVUZSTEVWQlFVVXNTMEZCUzJoQ0xFOUJSRm83UVVGRlNEUkVMR0ZCUVVzc1JVRkJSU3hMUVVGTFJpeExRVVpVTzBGQlIwaDRReXdyUWtGQmRVSXNSVUZCUlN4TFFVRkxlVU03UVVGSU0wSXNUMEZCVUR0QlFVdElPMEZCWkV3N08wRkJRVUU3UVVGQlFTeEpMRU5CYVVKQk8wRkJRMEU3UVVGRFFUczdRVUZGVHl4SlFVRk5SU3cwUWtGQllpeEhRVVZKTEhORFFVRlpNMVlzUTBGQldpeEZRVU5CTzBGQlFVRTdPMEZCUTBrc1QwRkJTelpTTEUxQlFVd3NSMEZCWXpkU0xFTkJRVU1zUTBGQlEwY3NTVUZCUml4RFFVRlBNRk1zVDBGQmNrSTdRVUZEUVN4UFFVRkxORU1zY1VKQlFVd3NSMEZCTmtKNlZpeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUelpUTEhWQ1FVRndRenRCUVVOQkxFOUJRVXMwUXl4bFFVRk1MRWRCUVhWQ05WWXNRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVTgwVXl4cFFrRkJPVUk3UVVGRFFTeFBRVUZMYUVJc1ZVRkJUQ3hIUVVGclFpOVNMRU5CUVVNc1EwRkJRMGNzU1VGQlJpeERRVUZQTUZZc1YwRkJla0k3UVVGRFFTeFBRVUZMTDBRc1QwRkJUQ3hIUVVGbE9WSXNRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVTh5VXl4UlFVRjBRanRCUVVOQkxFOUJRVXRuUkN4alFVRk1MRWRCUVhOQ09WWXNRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVTgwVml4blFrRkJOMEk3UVVGRFFTeFBRVUZMUXl4bFFVRk1MRWRCUVhWQ2FGY3NRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVTg0Vml4cFFrRkJPVUk3UVVGRFFTeFBRVUZMUXl4alFVRk1MRWRCUVhOQ2JGY3NRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVTluVnl4blFrRkJOMEk3UVVGRFFTeFBRVUZMUXl4bFFVRk1MRWRCUVhWQ2NGY3NRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVTlyVnl4cFFrRkJPVUk3UVVGRFNDeERRV0pNTEVNN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZWxGQk8wRkJRMEU3UVVGRlR5eEpRVUZOUXl4VlFVRmlPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFc01FTkJSV2xEUXl4SlFVWnFReXhGUVVkSk8wRkJRMGtzWVVGQlR5eEpRVUZKTlZjc2FVUkJRVW9zUTBGQldUUlhMRWxCUVVrc1EwRkJRekZYTEVWQlFXcENMRVZCUVhGQ1F5eG5SRUZCVFN4RFFVRkRkMG9zU1VGQk5VSXNSVUZCYTBNc1NVRkJiRU1zUlVGQmQwTXNTVUZCZUVNc1EwRkJVRHRCUVVOSU8wRkJURXc3TzBGQlFVRTdRVUZCUVR0QlFWRlBMRWxCUVUxclRpeFZRVUZpTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRXNNRU5CUjBrN1FVRkRTU3hoUVVGUExFbEJRVWszVnl4cFJFRkJTaXhEUVVGWlF5eG5SVUZCWlN4RFFVRkRReXhGUVVGb1FpeERRVUZ0UWl4TlFVRnVRaXhEUVVGYUxFVkJRWGREUXl4blJFRkJUU3hEUVVGRGRVb3NTVUZCTDBNc1JVRkJjVVFzU1VGQmNrUXNSVUZCTWtRc1NVRkJNMFFzUTBGQlVEdEJRVU5JTzBGQlRFdzdPMEZCUVVFN1FVRkJRU3hKT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5ZUVR0QlFVTkJPMEZCUlU4c1NVRkJUWEZDTEdsQ1FVRmlPMEZCUVVFN1FVRkJRVHRCUVVWSkxEWkNRVUZaSzB3c1QwRkJXaXhGUVVGeFFrTXNVVUZCY2tJc1JVRkJLMEpETEdWQlFTOUNMRVZCUVdkRVF5eGpRVUZvUkN4RlFVRm5SVU1zVTBGQmFFVXNSVUZEUVR0QlFVRkJPenRCUVVOSkxGTkJRVXRETEZGQlFVd3NSMEZCWjBKTUxFOUJRV2hDTzBGQlEwRXNVMEZCUzAwc1UwRkJUQ3hIUVVGcFFrd3NVVUZCYWtJN1FVRkRRU3hUUVVGTFRTeG5Ra0ZCVEN4SFFVRjNRa3dzWlVGQmVFSTdRVUZEUVN4VFFVRkxUU3hsUVVGTUxFZEJRWFZDVEN4alFVRjJRanRCUVVOQkxGTkJRVXROTEZWQlFVd3NSMEZCYTBKTUxGTkJRV3hDTzBGQlEwZzdPMEZCVkV3N1FVRkJRVHRCUVVGQkxHZERRVmxKTzBGQlEwa3NWVUZCU1hoWUxFbEJRVWtzUjBGQlJ6dEJRVU5RT0Znc2JVSkJRVmNzUlVGQlJTeExRVUZMVEN4UlFVUllPMEZCUlZCTkxIRkNRVUZoTEVWQlFVVXNTMEZCUzB3c1UwRkdZanRCUVVkUVRTeDNRa0ZCWjBJc1JVRkJSU3hMUVVGTFRDeG5Ra0ZJYUVJN1FVRkpVRTBzZFVKQlFXVXNSVUZCUlN4TFFVRkxUQ3hsUVVwbU8wRkJTMUJOTEd0Q1FVRlZMRVZCUVVVc1MwRkJTMHc3UVVGTVZpeFBRVUZZTzBGQlVVRXNZVUZCVHl4SlFVRkpkbGdzYVVSQlFVb3NRMEZCV1VNc1owVkJRV1VzUTBGQlEwTXNSVUZCYUVJc1EwRkJiVUlzVFVGQmJrSXNRMEZCV2l4RlFVRjNRME1zWjBSQlFVMHNRMEZCUXpSTExHbENRVUV2UXl4RlFVRnJSWEpNTEVsQlFXeEZMRVZCUVhkRkxFbEJRWGhGTEVOQlFWQTdRVUZEU0R0QlFYUkNURHM3UVVGQlFUdEJRVUZCTzBGQmVVSlBMRWxCUVUxelRDeHJRa0ZCWWp0QlFVRkJPMEZCUVVFN1FVRkZTU3c0UWtGQldUTkxMRU5CUVZvc1JVRkRRVHRCUVVGQk96dEJRVU5KTEZOQlFVdDNXQ3hSUVVGTUxFZEJRV2RDZUZnc1EwRkJReXhEUVVGRFVTeGxRVUZHTEUxQlFYVkNReXh6UkVGQldTeERRVUZEUml4UFFVRndSRHRCUVVOQkxGTkJRVXRPTEVWQlFVd3NSMEZCVlVRc1EwRkJWanRCUVVOSU96dEJRVTVNTzBGQlFVRTdRVUZCUVN4blEwRlJTVHRCUVVOSkxHRkJRVThzUzBGQlMzZFlMRkZCUVZvN1FVRkRTRHRCUVZaTU8wRkJRVUU3UVVGQlFTeHhRMEZaU1R0QlFVTkpMR0ZCUVU4c1MwRkJTM1pZTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaEswMHNXVUZCY0VJN1FVRkRTRHRCUVdSTU8wRkJRVUU3UVVGQlFTeHhRMEZuUWtrN1FVRkRTU3hoUVVGUExFdEJRVXRxVGl4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllXZE9MRmxCUVhCQ08wRkJRMGc3UVVGc1FrdzdRVUZCUVR0QlFVRkJMR3RFUVcxQ2EwTjZUU3hUUVc1Q2JFTXNSVUZ2UWtrN1FVRkRTU3hoUVVGUExFdEJRVXRVTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaFR5eFRRVUZpTEVOQlFWQTdRVUZEU0R0QlFYUkNURHM3UVVGQlFUdEJRVUZCTzBGQmVVSlBMRWxCUVUwclZ5eFZRVUZpTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRXNkVU5CUjBrN1FVRkRTU3hWUVVGSlF5eFZRVUZWTEVkQlFVY3NSVUZCYWtJN1FVRkRRVUVzWjBKQlFWVXNRMEZCUXl4bFFVRkVMRU5CUVZZc1IwRkJPRUpETEZOQlFWTXNRMEZCUTBNc1UwRkJlRU1zUTBGR1NpeERRVWRKT3p0QlFVTkJMR0ZCUVU5R0xGVkJRVkE3UVVGRFNEdEJRVkpNT3p0QlFVRkJPMEZCUVVFc1NUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGNrUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVThzU1VGQlRVY3NZVUZCWVN4SFFVTXhRanRCUVVOSlF5eHpRa0ZCYjBJc1JVRkJSU3huUWtGRU1VSTdRVUZGU1VNc2RVSkJRWEZDTEVWQlFVVXNlVUpCUmpOQ08wRkJTVWxETEc5Q1FVRnJRaXhGUVVGSExGTkJTbnBDTzBGQlMwbERMSEZDUVVGdFFpeEZRVUZITEd0Q1FVd3hRanRCUVU5SlF5eHhRa0ZCYlVJc1JVRkJSU3hsUVZCNlFqdEJRVkZKUXl4elFrRkJiMElzUlVGQlJTeDNRa0ZTTVVJN1FVRlZTVU1zYzBKQlFXOUNMRVZCUVVVc1owSkJWakZDTzBGQlYwbERMSFZDUVVGeFFpeEZRVUZGTEhsQ1FWZ3pRanRCUVdGSlF5eHRRMEZCYVVNc1JVRkJSeXc0UWtGaWVFTTdRVUZqU1VNc2IwTkJRV3RETEVWQlFVY3NkVU5CWkhwRE8wRkJaMEpKUXl3MFFrRkJNRUlzUlVGQlJ5eHpRa0ZvUW1wRE8wRkJhVUpKUXl3MlFrRkJNa0lzUlVGQlJ5d3JRa0ZxUW14RE8wRkJiVUpKUXl4M1FrRkJjMElzUlVGQlJ5eFpRVzVDTjBJN1FVRnZRa2xETEhsQ1FVRjFRaXhGUVVGSE8wRkJjRUk1UWl4RFFVUlBPMEZCZDBKQkxFbEJRVTFpTEc5Q1FVRmlPMEZCUVVFN1FVRkJRVHRCUVVWSkxHZERRVUZaYWxvc1VVRkJXaXhGUVVOQk8wRkJRVUU3TzBGQlEwa3NVMEZCUzBNc1VVRkJUQ3hIUVVGblFrUXNVVUZCYUVJN1FVRkRTRHM3UVVGTVREdEJRVUZCTzBGQlFVRXNaME5CVVVrN1FVRkRTU3hWUVVGSlVTeEpRVUZKTEVkQlFVYzdRVUZEVUN4elFrRkJZeXhMUVVGTFVEdEJRVVJhTEU5QlFWZzdRVUZKUVN4aFFVRlBMRWxCUVVsaExHbEVRVUZLTEVOQlFWbERMR2RGUVVGbExFTkJRVU5ETEVWQlFXaENMRU5CUVcxQ0xFMUJRVzVDTEVOQlFWb3NSVUZCZDBObldTeGhRVUZoTEVOQlFVTkRMRzlDUVVGMFJDeEZRVUUwUlhwWkxFbEJRVFZGTEVWQlFXdEdMRWxCUVd4R0xFTkJRVkE3UVVGRFNEdEJRV1JNT3p0QlFVRkJPMEZCUVVFN1FVRnBRazhzU1VGQlRUQlpMSEZDUVVGaUxFZEJSVWtzSzBKQlFWa3ZXQ3hEUVVGYUxFVkJRMEU3UVVGQlFUczdRVUZEU1N4UFFVRkxORmtzVDBGQlRDeEhRVUZsTEVsQlFVbHdVQ3d3UkVGQlNpeERRVUZ4UW5oS0xFTkJRWEpDTEVOQlFXWTdRVUZEUVN4UFFVRkxiRUlzVVVGQlRDeEhRVUZuUWl4TFFVRkxPRm9zVDBGQlRDeERRVUZoT1Zvc1VVRkJOMEk3UVVGRFFTeFBRVUZMYlVJc1JVRkJUQ3hIUVVGVlJDeERRVUZXTzBGQlEwZ3NRMEZRVER0QlFWVlBMRWxCUVUxbldTeHJRa0ZCWWp0QlFVRkJPMEZCUVVFN1FVRkZTU3c0UWtGQldYQmFMRmRCUVZvc1JVRkJlVUpETEZGQlFYcENMRVZCUTBFN1FVRkJRVHM3UVVGRFNTeFRRVUZMUXl4UlFVRk1MRWRCUVdkQ1JDeFJRVUZvUWp0QlFVTkJMRk5CUVV0bllTeGhRVUZNTEVkQlFYRkNhbUVzVjBGQmNrSTdRVUZEUVN4VFFVRkxTeXhOUVVGTUxFZEJRV01zU1VGQlNVTXNiMFJCUVVvc1JVRkJaRHRCUVVOQkxGTkJRVXRETEU5QlFVd3NSMEZCWlN4SlFVRkpReXcyUkVGQlNpeEZRVUZtTzBGQlEwZzdPMEZCVWt3N1FVRkJRVHRCUVVGQkxHZERRVmRKTzBGQlEwa3NWVUZCU1VNc1NVRkJTU3hIUVVGSE8wRkJRMUFzYzBKQlFXTXNTMEZCUzFBc1VVRkVXanRCUVVWUUxEQkNRVUZyUWl4TFFVRkxLMW83UVVGR2FFSXNUMEZCV0R0QlFVdEJMRmRCUVVzMVdpeE5RVUZNTEVOQlFWbExMSGRDUVVGYUxFZEJRWFZETEVsQlFYWkRPMEZCUTBFc1YwRkJTMHdzVFVGQlRDeERRVUZaVFN4dlEwRkJXaXhIUVVGdFJDeEpRVUZ1UkR0QlFVTkJMRmRCUVV0T0xFMUJRVXdzUTBGQldVOHNORUpCUVZvc1IwRkJNa01zU1VGQk0wTTdRVUZEUVN4WFFVRkxVQ3hOUVVGTUxFTkJRVmxSTEdkQ1FVRmFMRU5CUVRaQ1NpeEpRVUUzUWp0QlFVTkJMRmRCUVV0R0xFOUJRVXdzUTBGQllVOHNWVUZCWWl4RFFVRjNRa3dzU1VGQmVFSTdRVUZEUVN4aFFVRlBMRWxCUVVsTkxHbEVRVUZLTEVOQlFWbERMR2RGUVVGbExFTkJRVU5ETEVWQlFXaENMRU5CUVcxQ0xFMUJRVzVDTEVOQlFWb3NSVUZCZDBObldTeGhRVUZoTEVOQlFVTkhMR3RDUVVGMFJDeEZRVUV3UlROWkxFbEJRVEZGTEVWQlFXZEdMRWxCUVdoR0xFTkJRVkE3UVVGRFNEdEJRWFpDVERzN1FVRkJRVHRCUVVGQk8wRkJNRUpQTEVsQlFVMDJXU3h0UWtGQllqdEJRVUZCTzBGQlFVRTdRVUZGU1N3clFrRkJXVmtzVTBGQldpeEZRVUYxUWtNc1owSkJRWFpDTEVWQlFYbERiR0VzVVVGQmVrTXNSVUZEUVR0QlFVRkJPenRCUVVOSkxGTkJRVXR0WVN4VFFVRk1MRWRCUVdsQ1JpeFRRVUZxUWp0QlFVTkJMRk5CUVV0SExGZEJRVXdzUjBGQmJVSkdMR2RDUVVGdVFqdEJRVU5CTEZOQlFVdHFZU3hSUVVGTUxFZEJRV2RDUkN4UlFVRm9RanRCUVVOQkxGTkJRVXRKTEUxQlFVd3NSMEZCWXl4SlFVRkpReXh2UkVGQlNpeEZRVUZrTzBGQlEwRXNVMEZCUzBNc1QwRkJUQ3hIUVVGbExFbEJRVWxETERaRVFVRktMRVZCUVdZN1FVRkRTRHM3UVVGVVREdEJRVUZCTzBGQlFVRXNaME5CV1VrN1FVRkRTU3hWUVVGSlF5eEpRVUZKTEVkQlFVYzdRVUZEVUN4elFrRkJZeXhMUVVGTFVDeFJRVVJhTzBGQlJWQXNjMEpCUVdNc1MwRkJTMnRoTEZOQlJsbzdRVUZIVUN4M1FrRkJaMElzUzBGQlMwTTdRVUZJWkN4UFFVRllPMEZCVFVFc1YwRkJTMmhoTEUxQlFVd3NRMEZCV1Vzc2QwSkJRVm9zUjBGQmRVTXNTVUZCZGtNN1FVRkRRU3hYUVVGTFRDeE5RVUZNTEVOQlFWbE5MRzlEUVVGYUxFZEJRVzFFTEVsQlFXNUVPMEZCUTBFc1YwRkJTMDRzVFVGQlRDeERRVUZaVHl3MFFrRkJXaXhIUVVFeVF5eEpRVUV6UXp0QlFVTkJMRmRCUVV0UUxFMUJRVXdzUTBGQldWRXNaMEpCUVZvc1EwRkJOa0pLTEVsQlFUZENPMEZCUTBFc1YwRkJTMFlzVDBGQlRDeERRVUZoVHl4VlFVRmlMRU5CUVhkQ1RDeEpRVUY0UWp0QlFVTkJMR0ZCUVU4c1NVRkJTVTBzYVVSQlFVb3NRMEZCV1VNc1owVkJRV1VzUTBGQlEwTXNSVUZCYUVJc1EwRkJiVUlzVFVGQmJrSXNRMEZCV2l4RlFVRjNRMmRaTEdGQlFXRXNRMEZCUTBzc2JVSkJRWFJFTEVWQlFUSkZOMWtzU1VGQk0wVXNSVUZCYVVZc1NVRkJha1lzUTBGQlVEdEJRVU5JTzBGQmVrSk1PenRCUVVGQk8wRkJRVUU3UVVFMFFrOHNTVUZCVFdsYUxHbERRVUZpTzBGQlFVRTdRVUZCUVR0QlFVVkpMRFpEUVVGWlVTeFRRVUZhTEVWQlFYVkNTU3c0UWtGQmRrSXNSVUZCZFVSeVlTeFJRVUYyUkN4RlFVTkJPMEZCUVVFN08wRkJRMGtzVTBGQlMyMWhMRk5CUVV3c1IwRkJhVUpHTEZOQlFXcENPMEZCUTBFc1UwRkJTMHNzZVVKQlFVd3NSMEZCYVVORUxEaENRVUZxUXp0QlFVTkJMRk5CUVV0d1lTeFJRVUZNTEVkQlFXZENSQ3hSUVVGb1FqdEJRVU5CTEZOQlFVdEpMRTFCUVV3c1IwRkJZeXhKUVVGSlF5eHZSRUZCU2l4RlFVRmtPMEZCUTBFc1UwRkJTME1zVDBGQlRDeEhRVUZsTEVsQlFVbERMRFpFUVVGS0xFVkJRV1k3UVVGRFNEczdRVUZVVER0QlFVRkJPMEZCUVVFc1owTkJXVWs3UVVGRFNTeFZRVUZKUXl4SlFVRkpMRWRCUVVjN1FVRkRVQ3h6UWtGQll5eExRVUZMVUN4UlFVUmFPMEZCUlZBc2MwSkJRV01zUzBGQlMydGhMRk5CUmxvN1FVRkhVQ3hwUTBGQmVVSXNTMEZCUzBjN1FVRklka0lzVDBGQldEdEJRVTFCTEZkQlFVdHNZU3hOUVVGTUxFTkJRVmxMTEhkQ1FVRmFMRWRCUVhWRExFbEJRWFpETzBGQlEwRXNWMEZCUzB3c1RVRkJUQ3hEUVVGWlRTeHZRMEZCV2l4SFFVRnRSQ3hKUVVGdVJEdEJRVU5CTEZkQlFVdE9MRTFCUVV3c1EwRkJXVThzTkVKQlFWb3NSMEZCTWtNc1NVRkJNME03UVVGRFFTeFhRVUZMVUN4TlFVRk1MRU5CUVZsUkxHZENRVUZhTEVOQlFUWkNTaXhKUVVFM1FqdEJRVU5CTEZkQlFVdEdMRTlCUVV3c1EwRkJZVThzVlVGQllpeERRVUYzUWt3c1NVRkJlRUk3UVVGRFFTeGhRVUZQTEVsQlFVbE5MR2xFUVVGS0xFTkJRVmxETEdkRlFVRmxMRU5CUVVORExFVkJRV2hDTEVOQlFXMUNMRTFCUVc1Q0xFTkJRVm9zUlVGQmQwTm5XU3hoUVVGaExFTkJRVU5UTEdsRFFVRjBSQ3hGUVVGNVJtcGFMRWxCUVhwR0xFVkJRU3RHTEVsQlFTOUdMRU5CUVZBN1FVRkRTRHRCUVhwQ1REczdRVUZCUVR0QlFVRkJPMEZCTkVKUExFbEJRVTByV1N4dlFrRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNTeG5RMEZCV1ZVc1UwRkJXaXhGUVVGMVFtcGhMRkZCUVhaQ0xFVkJRMEU3UVVGQlFUczdRVUZEU1N4VFFVRkxiV0VzVTBGQlRDeEhRVUZwUWtZc1UwRkJha0k3UVVGRFFTeFRRVUZMYUdFc1VVRkJUQ3hIUVVGblFrUXNVVUZCYUVJN1FVRkRRU3hUUVVGTFNTeE5RVUZNTEVkQlFXTXNTVUZCU1VNc2IwUkJRVW9zUlVGQlpEdEJRVU5CTEZOQlFVdERMRTlCUVV3c1IwRkJaU3hKUVVGSlF5dzJSRUZCU2l4RlFVRm1PMEZCUTBnN08wRkJVa3c3UVVGQlFUdEJRVUZCTEdkRFFWZEpPMEZCUTBrc1ZVRkJTVU1zU1VGQlNTeEhRVUZITzBGQlExQXNjMEpCUVdNc1MwRkJTMUFzVVVGRVdqdEJRVVZRTEhOQ1FVRmpMRXRCUVV0cllUdEJRVVphTEU5QlFWZzdRVUZMUVN4WFFVRkxMMW9zVFVGQlRDeERRVUZaU3l4M1FrRkJXaXhIUVVGMVF5eEpRVUYyUXp0QlFVTkJMRmRCUVV0TUxFMUJRVXdzUTBGQldVMHNiME5CUVZvc1IwRkJiVVFzU1VGQmJrUTdRVUZEUVN4WFFVRkxUaXhOUVVGTUxFTkJRVmxQTERSQ1FVRmFMRWRCUVRKRExFbEJRVE5ETzBGQlEwRXNWMEZCUzFBc1RVRkJUQ3hEUVVGWlVTeG5Ra0ZCV2l4RFFVRTJRa29zU1VGQk4wSTdRVUZEUVN4WFFVRkxSaXhQUVVGTUxFTkJRV0ZQTEZWQlFXSXNRMEZCZDBKTUxFbEJRWGhDTzBGQlEwRXNZVUZCVHl4SlFVRkpUU3hwUkVGQlNpeERRVUZaUXl4blJVRkJaU3hEUVVGRFF5eEZRVUZvUWl4RFFVRnRRaXhQUVVGdVFpeERRVUZhTEVWQlFYbERaMWtzWVVGQllTeERRVUZEVHl4dlFrRkJka1FzUlVGQk5rVXZXU3hKUVVFM1JTeEZRVUZ0Uml4SlFVRnVSaXhEUVVGUU8wRkJRMGc3UVVGMlFrdzdPMEZCUVVFN1FVRkJRVHRCUVRCQ1R5eEpRVUZOSzFvc2IwSkJRV0k3UVVGQlFUdEJRVUZCTzBGQlJVa3NaME5CUVZsT0xGTkJRVm9zUlVGQmRVSnFZU3hSUVVGMlFpeEZRVU5CTzBGQlFVRTdPMEZCUTBrc1UwRkJTMjFoTEZOQlFVd3NSMEZCYVVKR0xGTkJRV3BDTzBGQlEwRXNVMEZCUzJoaExGRkJRVXdzUjBGQlowSkVMRkZCUVdoQ08wRkJRMEVzVTBGQlMwa3NUVUZCVEN4SFFVRmpMRWxCUVVsRExHOUVRVUZLTEVWQlFXUTdRVUZEUVN4VFFVRkxReXhQUVVGTUxFZEJRV1VzU1VGQlNVTXNOa1JCUVVvc1JVRkJaanRCUVVOSU96dEJRVkpNTzBGQlFVRTdRVUZCUVN4blEwRlhTVHRCUVVOSkxGVkJRVWxETEVsQlFVa3NSMEZCUnp0QlFVTlFMSE5DUVVGakxFdEJRVXRRTEZGQlJGbzdRVUZGVUN4elFrRkJZeXhMUVVGTGEyRTdRVUZHV2l4UFFVRllPMEZCUzBFc1YwRkJTeTlhTEUxQlFVd3NRMEZCV1Vzc2QwSkJRVm9zUjBGQmRVTXNTVUZCZGtNN1FVRkRRU3hYUVVGTFRDeE5RVUZNTEVOQlFWbE5MRzlEUVVGYUxFZEJRVzFFTEVsQlFXNUVPMEZCUTBFc1YwRkJTMDRzVFVGQlRDeERRVUZaVHl3MFFrRkJXaXhIUVVFeVF5eEpRVUV6UXp0QlFVTkJMRmRCUVV0UUxFMUJRVXdzUTBGQldWRXNaMEpCUVZvc1EwRkJOa0pLTEVsQlFUZENPMEZCUTBFc1YwRkJTMFlzVDBGQlRDeERRVUZoVHl4VlFVRmlMRU5CUVhkQ1RDeEpRVUY0UWp0QlFVTkJMR0ZCUVU4c1NVRkJTVTBzYVVSQlFVb3NRMEZCV1VNc1owVkJRV1VzUTBGQlEwTXNSVUZCYUVJc1EwRkJiVUlzVFVGQmJrSXNRMEZCV2l4RlFVRjNRMmRaTEdGQlFXRXNRMEZCUTFjc01FSkJRWFJFTEVWQlFXdEdibG9zU1VGQmJFWXNSVUZCZDBZc1NVRkJlRVlzUTBGQlVEdEJRVU5JTzBGQmRrSk1PenRCUVVGQk8wRkJRVUU3UVVFd1FrOHNTVUZCVFdkaExIZENRVUZpTzBGQlFVRTdRVUZCUVR0QlFVVkpMRzlEUVVGWlVDeFRRVUZhTEVWQlFYVkNVU3h4UWtGQmRrSXNSVUZCT0VONllTeFJRVUU1UXl4RlFVRjNSREJoTEdWQlFYaEVMRVZCUTBFN1FVRkJRVHM3UVVGRFNTeFRRVUZMVUN4VFFVRk1MRWRCUVdsQ1JpeFRRVUZxUWp0QlFVTkJMRk5CUVV0VkxHZENRVUZNTEVkQlFYZENSaXh4UWtGQmVFSTdRVUZEUVN4VFFVRkxlR0VzVVVGQlRDeEhRVUZuUWtRc1VVRkJhRUk3UVVGRFFTeFRRVUZMUnl4bFFVRk1MRWRCUVhWQ2RXRXNaVUZCZGtJN1FVRkRRU3hUUVVGTGRHRXNUVUZCVEN4SFFVRmpMRWxCUVVsRExHOUVRVUZLTEVWQlFXUTdRVUZEUVN4VFFVRkxReXhQUVVGTUxFZEJRV1VzU1VGQlNVTXNOa1JCUVVvc1JVRkJaanRCUVVOSU96dEJRVlpNTzBGQlFVRTdRVUZCUVN4blEwRmhTVHRCUVVOSkxGVkJRVWxETEVsQlFVa3NSMEZCUnp0QlFVTlFMSE5DUVVGakxFdEJRVXRRTEZGQlJGbzdRVUZGVUN4elFrRkJZeXhMUVVGTGEyRXNVMEZHV2p0QlFVZFFMRFpDUVVGeFFpeExRVUZMVVN4blFrRklia0k3UVVGSlVDdzBRa0ZCYjBJc1MwRkJTM2hoTzBGQlNteENMRTlCUVZnN1FVRlBRU3hYUVVGTFF5eE5RVUZNTEVOQlFWbExMSGRDUVVGYUxFZEJRWFZETEVsQlFYWkRPMEZCUTBFc1YwRkJTMHdzVFVGQlRDeERRVUZaVFN4dlEwRkJXaXhIUVVGdFJDeEpRVUZ1UkR0QlFVTkJMRmRCUVV0T0xFMUJRVXdzUTBGQldVOHNORUpCUVZvc1IwRkJNa01zU1VGQk0wTTdRVUZEUVN4WFFVRkxVQ3hOUVVGTUxFTkJRVmxSTEdkQ1FVRmFMRU5CUVRaQ1NpeEpRVUUzUWp0QlFVTkJMRmRCUVV0R0xFOUJRVXdzUTBGQllVOHNWVUZCWWl4RFFVRjNRa3dzU1VGQmVFSTdRVUZEUVN4aFFVRlBMRWxCUVVsTkxHbEVRVUZLTEVOQlFWbERMR2RGUVVGbExFTkJRVU5ETEVWQlFXaENMRU5CUVcxQ0xFMUJRVzVDTEVOQlFWb3NSVUZCZDBObldTeGhRVUZoTEVOQlFVTmhMSE5DUVVGMFJDeEZRVUU0UlhKYUxFbEJRVGxGTEVWQlFXOUdMRWxCUVhCR0xFTkJRVkE3UVVGRFNEdEJRVE5DVERzN1FVRkJRVHRCUVVGQk8wRkJPRUpQTEVsQlFVMXZZU3hsUVVGaU8wRkJRVUU3UVVGQlFUdEJRVVZKTERKQ1FVRlplbG9zUTBGQldpeEZRVU5CTzBGQlFVRTdPMEZCUTBrc1UwRkJTMmRhTEZOQlFVd3NSMEZCYVVKb1dpeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUeXhaUVVGUUxFTkJRV3BDTzBGQlEwRXNVMEZCUzNsWkxFOUJRVXdzUjBGQlpTeEpRVUZKY0ZBc01FUkJRVW9zUTBGQmNVSjRTaXhEUVVGeVFpeERRVUZtTzBGQlEwRXNVMEZCUzJ4Q0xGRkJRVXdzUjBGQlowSXNTMEZCU3poYUxFOUJRVXdzUTBGQllUbGFMRkZCUVRkQ08wRkJRMEVzVTBGQlMyMUNMRVZCUVV3c1IwRkJWVVFzUTBGQlZqdEJRVU5JT3p0QlFWSk1PMEZCUVVFN1FVRkJRU3gxUTBGWFNUdEJRVU5KTEZWQlFVa3dXaXhOUVVGTkxFZEJRVWNzUzBGQlMzcGFMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTEd0Q1FVRmlMRU5CUVdJN08wRkJRMEVzWTBGQlVYVmFMRTFCUVZJN1FVRkZTU3hoUVVGTExGVkJRVXc3UVVGRFNTeHBRa0ZCVHl4TFFVRkxlbG9zUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFc1owSkJRV0lzUTBGQlVEczdRVUZEU2l4aFFVRkxMRTlCUVV3N1FVRkRTU3hwUWtGQlR5eExRVUZMUml4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllTeG5Ra0ZCWWl4RFFVRlFPenRCUVVOS0xHRkJRVXNzVVVGQlREdEJRVUZsTzBGQlExZ3NhVUpCUVU4c1MwRkJTMFlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFc1owSkJRV0lzUTBGQlVEczdRVUZEU2l4aFFVRkxMR05CUVV3N1FVRkRTU3hwUWtGQlR5eExRVUZMUml4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllTeG5Ra0ZCWWl4RFFVRlFPenRCUVVOS0xHRkJRVXNzVDBGQlREdEJRVU5KTEdsQ1FVRlBMRU5CUVZBN1FVRkJWVHM3UVVGRFpDeGhRVUZMTEdsQ1FVRk1PMEZCUTBrc2FVSkJRVThzUTBGQlVEdEJRVUZWT3p0QlFVTmtPMEZCUTBrc2FVSkJRVThzUTBGQlVEdEJRV1pTTzBGQmFVSklPMEZCT1VKTU8wRkJRVUU3UVVGQlFTd3JRMEZwUTBrN1FVRkRTU3hWUVVGSmRWb3NUVUZCVFN4SFFVRkhMRXRCUVV0NldpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZU3hyUWtGQllpeERRVUZpT3p0QlFVTkJMR05CUVZGMVdpeE5RVUZTTzBGQlJVa3NZVUZCU3l4VlFVRk1PMEZCUTBrc2FVSkJRVThzUTBGQlVEczdRVUZEU2l4aFFVRkxMRTlCUVV3N1FVRkRTU3hwUWtGQlR5eExRVUZMZWxvc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRXNlVUpCUVdJc1EwRkJVRHM3UVVGRFNpeGhRVUZMTEZGQlFVdzdRVUZCWlR0QlFVTllMR2xDUVVGUExFdEJRVXRHTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaExIbENRVUZpTEVOQlFWQTdPMEZCUTBvc1lVRkJTeXhqUVVGTU8wRkJRMGtzYVVKQlFVOHNTMEZCUzBZc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRXNlVUpCUVdJc1EwRkJVRHM3UVVGRFNpeGhRVUZMTEU5QlFVdzdRVUZEU1R0QlFVTkJPMEZCUTBFN1FVRkRRU3hwUWtGQlR5eExRVUZMUml4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllTeHRRa0ZCWWl4RFFVRlFPenRCUVVOS0xHRkJRVXNzYVVKQlFVdzdRVUZEU1N4cFFrRkJUeXhMUVVGTFJpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZU3huUWtGQllpeERRVUZRT3p0QlFVTktPMEZCUTBrc2FVSkJRVThzUTBGQlVEdEJRV3hDVWp0QlFXOUNTRHRCUVhaRVREdEJRVUZCTzBGQlFVRXNNRU5CTUVSSk8wRkJRMGtzVlVGQlNYVmFMRTFCUVUwc1IwRkJSeXhMUVVGTGVsb3NSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VzYTBKQlFXSXNRMEZCWWpzN1FVRkRRU3hqUVVGUmRWb3NUVUZCVWp0QlFVVkpMR0ZCUVVzc1QwRkJURHRCUVVOSkxHbENRVUZQTEV0QlFVdDZXaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVN4dFFrRkJZaXhEUVVGUU96dEJRVU5LTzBGQlEwa3NhVUpCUVU4c1EwRkJVRHRCUVV4U08wRkJVVWc3UVVGd1JVdzdRVUZCUVR0QlFVRkJMSGxEUVhWRlNUdEJRVU5KTEZWQlFVbDFXaXhOUVVGTkxFZEJRVWNzUzBGQlMzcGFMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTEd0Q1FVRmlMRU5CUVdJN08wRkJRMEVzWTBGQlVYVmFMRTFCUVZJN1FVRkZTU3hoUVVGTExFOUJRVXc3UVVGRFNTeHBRa0ZCVHl4TFFVRkxlbG9zUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFc2EwSkJRV0lzUTBGQlVEczdRVUZEU2p0QlFVTkpMR2xDUVVGUExFTkJRVkE3UVVGTVVqdEJRVTlJTzBGQmFFWk1PMEZCUVVFN1FVRkJRU3huUkVGdFJrazdRVUZEU1N4aFFVRlBMRXRCUVV0R0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhMREJDUVVGaUxFTkJRVkE3UVVGRFNEdEJRWEpHVER0QlFVRkJPMEZCUVVFc1owUkJkMFpKTzBGQlEwa3NZVUZCVHl4TFFVRkxSaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVN3d1FrRkJZaXhEUVVGUU8wRkJRMGc3UVVFeFJrdzdPMEZCUVVFN1FVRkJRU3hKT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU0xVGtFN1FVRkRRVHRCUVVWUExFbEJRVTFuVEN4bFFVRmlPMEZCUVVFN1FVRkJRVHRCUVVWSkxESkNRVUZaTDBnc1IwRkJXaXhGUVVGcFFuSkNMRTlCUVdwQ0xFVkJRMEU3UVVGQlFUczdRVUZEU1N4VFFVRkxORmdzU1VGQlRDeEhRVUZaZGxjc1IwRkJXanRCUVVOQkxGTkJRVXQzVnl4UlFVRk1MRWRCUVdkQ04xZ3NUMEZCYUVJN1FVRkRTRHM3UVVGT1REdEJRVUZCTzBGQlFVRXNaME5CVTBrN1FVRkRTU3hWUVVGSk1VTXNTVUZCU1N4SFFVRkhPMEZCUTFBc1pVRkJUeXhMUVVGTGMyRXNTVUZFVER0QlFVVlFMRzFDUVVGWExFdEJRVXRETzBGQlJsUXNUMEZCV0R0QlFVdEJMR0ZCUVU4c1NVRkJTV3BoTEdsRVFVRktMRU5CUVZsRExHZEZRVUZsTEVOQlFVTkRMRVZCUVdoQ0xFTkJRVzFDTEU5QlFXNUNMRU5CUVZvc1JVRkJlVU5ETEdkRVFVRk5MRU5CUVVOeFRDeGxRVUZvUkN4RlFVRnBSVGxNTEVsQlFXcEZMRVZCUVhWRkxFbEJRWFpGTEVOQlFWQTdRVUZEU0R0QlFXaENURHM3UVVGQlFUdEJRVUZCTzBGQmJVSlBMRWxCUVUwclRDeG5Ra0ZCWWp0QlFVRkJPMEZCUVVFN1FVRkZTU3cwUWtGQldYQk1MRU5CUVZvc1JVRkRRVHRCUVVGQk96dEJRVU5KTEZOQlFVdDNXQ3hSUVVGTUxFZEJRV2RDZUZnc1EwRkJReXhEUVVGRFVTeGxRVUZHTEUxQlFYVkNReXh6UkVGQldTeERRVUZEUml4UFFVRndSRHRCUVVOQkxGTkJRVXRPTEVWQlFVd3NSMEZCVlVRc1EwRkJWanRCUVVOSU96dEJRVTVNTzBGQlFVRTdRVUZCUVN4blEwRlJTVHRCUVVOSkxHRkJRVThzUzBGQlMzZFlMRkZCUVZvN1FVRkRTRHRCUVZaTU8wRkJRVUU3UVVGQlFTeHhRMEZaU1R0QlFVTkpMR0ZCUVU4c1MwRkJTM1pZTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaEswMHNXVUZCY0VJN1FVRkRTRHRCUVdSTU8wRkJRVUU3UVVGQlFTeHhRMEZuUWtrN1FVRkRTU3hoUVVGUExFdEJRVXRxVGl4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllXZE9MRmxCUVhCQ08wRkJRMGc3UVVGc1FrdzdRVUZCUVR0QlFVRkJMR3RFUVcxQ2EwTjZUU3hUUVc1Q2JFTXNSVUZ2UWtrN1FVRkRTU3hoUVVGUExFdEJRVXRVTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaFR5eFRRVUZpTEVOQlFWQTdRVUZEU0R0QlFYUkNURHM3UVVGQlFUdEJRVUZCTzBGQmVVSkJPenM3TzBGQlIwOHNTVUZCVFcxYUxFOUJRV0k3UVVGQlFUdEJRVUZCTzBGQlEwa3NiVUpCUVZrMVVpeFBRVUZhTEVWQlFYRkNPMEZCUVVFN08wRkJRMnBDTEZOQlFVdEZMRTFCUVV3c1IwRkJhMElzUlVGQmJFSTdRVUZEUVN4VFFVRkxSaXhQUVVGTUxFZEJRV3RDUVN4UFFVRnNRanRCUVVOSU96dEJRVXBNTzBGQlFVRTdRVUZCUVN3MFFrRk5iVUk3UVVGQlFTeDNRMEZCVGtjc1NVRkJUVHRCUVVGT1FTeFpRVUZOTzBGQlFVRTdPMEZCUTFnc1YwRkJTMFFzVFVGQlRDeERRVUZaUlN4SlFVRmFMRU5CUVdsQ1JDeEpRVUZKTEVOQlFVTkZMRWxCUVV3c1EwRkJWU3hIUVVGV0xFTkJRV3BDT3p0QlFVTkJMRmRCUVV0RExFOUJRVXc3UVVGRFNEdEJRVlJNTzBGQlFVRTdRVUZCUVN3NFFrRlhZenRCUVVOT0xGZEJRVXRPTEU5QlFVd3NRMEZCWVZNc1UwRkJZaXhIUVVGNVFpeExRVUZMVUN4TlFVRk1MRU5CUVZsSExFbEJRVm9zTWtSQlFYcENPMEZCUTBFc1YwRkJTMHdzVDBGQlRDeERRVUZoVlN4VFFVRmlMRWRCUVhsQ0xFdEJRVXRXTEU5QlFVd3NRMEZCWVZjc1dVRkJkRU03UVVGRFNEdEJRV1JNTzBGQlFVRTdRVUZCUVN3MFFrRm5RbGs3UVVGRFNpeFhRVUZMVkN4TlFVRk1MRWRCUVdNc1JVRkJaRHM3UVVGRFFTeFhRVUZMU1N4UFFVRk1PMEZCUTBnN1FVRnVRa3c3TzBGQlFVRTdRVUZCUVN4Sk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRiRVJCTzBGQlEwRTdRVUZEUVR0QlFVVlBMRWxCUVUxblFpeGxRVUZpTzBGQlFVRTdRVUZCUVR0QlFVTkpMREpDUVVGWk0wc3NWMEZCV2l4RlFVRjVRa01zVVVGQmVrSXNSVUZCYlVNN1FVRkJRVHM3UVVGREwwSXNVMEZCUzBNc1VVRkJUQ3hIUVVGblFrUXNVVUZCYUVJN1FVRkRRU3hUUVVGTGExWXNZMEZCVEN4SFFVRnpRbTVXTEZkQlFYUkNPMEZCUTBFc1UwRkJTM0ZXTEZOQlFVd3NSMEZCYVVJc1EwRkJha0k3UVVGRFFTeFRRVUZMYkZZc1lVRkJUQ3hIUVVGeFFpeERRVUZ5UWp0QlFVTkJMRk5CUVVzcllTeG5Ra0ZCVEN4SFFVRjNRaXhMUVVGNFFqdEJRVU5CTEZOQlFVczVZU3hsUVVGTUxFZEJRWFZDTEVOQlFYWkNPMEZCUTBFc1UwRkJTME1zVFVGQlRDeEhRVUZqTEVsQlFVbERMRzlFUVVGS0xFVkJRV1E3UVVGRFFTeFRRVUZMUXl4UFFVRk1MRWRCUVdVc1NVRkJTVU1zTmtSQlFVb3NSVUZCWml4RFFWSXJRaXhEUVZVdlFqczdRVUZEUVN4VFFVRkxVeXhGUVVGTUxFZEJRVlZvUWl4UlFVRldPMEZCUTBFc1UwRkJTMnRpTEZkQlFVd3NSMEZCYlVKdVlpeFhRVUZ1UWp0QlFVTklPenRCUVdSTU8wRkJRVUU3UVVGQlFTeHZRMEZwUWtrN1FVRkRTU3hwUTBGQmIwSXNRMEZCUXl4TFFVRkxiVllzWTBGQlRDeEhRVUZ6UWl4TFFVRjJRaXhGUVVFNFFtbEhMRTlCUVRsQ0xFTkJRWE5ETEVOQlFYUkRMRU5CUVhCQ0xHdERRVU5YTEVOQlFVTXNTMEZCU3k5R0xGTkJRVXdzUjBGQmFVSXNTMEZCYkVJc1JVRkJlVUlyUml4UFFVRjZRaXhEUVVGcFF5eERRVUZxUXl4RFFVUllMSE5EUVVWbExFTkJRVU1zUzBGQlMycGlMR0ZCUVV3c1IwRkJjVUlzUzBGQmRFSXNSVUZCTmtKcFlpeFBRVUUzUWl4RFFVRnhReXhEUVVGeVF5eERRVVptTzBGQlIwZzdRVUZ5UWt3N1FVRkJRVHRCUVVGQkxHZERRWFZDWjBJN1FVRkRVaXhWUVVGSk0yRXNTVUZCU1N4SFFVRkhPMEZCUTFCbExHdENRVUZWTEVWQlFVVXNTMEZCUzNSQ0xGRkJSRlk3UVVGRlVHMWlMSFZDUVVGbExFVkJRVVVzUzBGQlMyeEhMR05CUm1ZN1FVRkhVRzFITEd0Q1FVRlZMRVZCUVVVc1MwRkJTMnBITEZOQlNGWTdRVUZKVUd0SExHMUNRVUZYTEVWQlFVVXNTMEZCUzNCaUxHRkJTbGc3UVVGTFVIRmlMREJDUVVGclFpeEZRVUZGTEV0QlFVdE9MR2RDUVV4c1FqdEJRVTFRVHl4M1FrRkJaMElzUlVGQlJTeExRVUZMY21JN1FVRk9hRUlzVDBGQldEdEJRVk5CTEZkQlFVdERMRTFCUVV3c1EwRkJXVXNzZDBKQlFWb3NSMEZCZFVNc1NVRkJka003UVVGRFFTeFhRVUZMVEN4TlFVRk1MRU5CUVZsTkxHOURRVUZhTEVkQlFXMUVMRWxCUVc1RU8wRkJRMEVzVjBGQlMwNHNUVUZCVEN4RFFVRlpUeXcwUWtGQldpeEhRVUV5UXl4SlFVRXpRenRCUVVOQkxGZEJRVXRRTEUxQlFVd3NRMEZCV1ZFc1owSkJRVm9zUTBGQk5rSktMRWxCUVRkQ08wRkJRMEVzVjBGQlMwWXNUMEZCVEN4RFFVRmhUeXhWUVVGaUxFTkJRWGRDVEN4SlFVRjRRanRCUVVOQkxHRkJRVThzU1VGQlNVMHNhVVJCUVVvc1EwRkJXVU1zWjBWQlFXVXNRMEZCUTBNc1JVRkJhRUlzUTBGQmJVSXNUMEZCYmtJc1EwRkJXaXhGUVVGNVEwTXNaMFJCUVUwc1EwRkJRM2xLTEdWQlFXaEVMRVZCUVdsRmJFc3NTVUZCYWtVc1JVRkJkVVVzU1VGQmRrVXNRMEZCVUR0QlFVTklPMEZCZGtOTU96dEJRVUZCTzBGQlFVRTdRVUV3UTA4c1NVRkJUVzFMTEdkQ1FVRmlPMEZCUVVFN1FVRkJRVHRCUVVWSkxEUkNRVUZaZUVvc1EwRkJXaXhGUVVOQk8wRkJRVUU3TzBGQlEwa3NVMEZCUzBNc1JVRkJUQ3hIUVVGVlJDeERRVUZXTzBGQlEwRXNVMEZCUzBVc1UwRkJUQ3hIUVVGcFFrWXNRMEZCUXl4RFFVRkRTQ3hGUVVGdVFqdEJRVU5CTEZOQlFVdG1MRkZCUVV3c1IwRkJaMEpyUWl4RFFVRkRMRU5CUVVOSExFbEJRVVlzUTBGQlQwTXNWVUZCZGtJN1FVRkRRU3hUUVVGTFF5eFZRVUZNTEVkQlFXdENUQ3hEUVVGRExFTkJRVU5ITEVsQlFVWXNRMEZCVDBjc1YwRkJla0k3UVVGRFFTeFRRVUZMWjJFc1lVRkJUQ3hIUVVGeFFuUmhMRU5CUVVNc1EwRkJRMGNzU1VGQlJpeERRVUZQUnl4WFFVRTFRanRCUVVOQkxGTkJRVXRETEU5QlFVd3NSMEZCWlZBc1EwRkJReXhEUVVGRFVTeGxRVUZHTEUxQlFYVkNReXh6UkVGQldTeERRVUZEUml4UFFVRnVSRHRCUVVOSU96dEJRVlpNTzBGQlFVRTdRVUZCUVN3MlFrRmhTVHRCUVVOSkxHRkJRVThzUzBGQlMwNHNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0Z2WVN4SFFVRndRanRCUVVOSU8wRkJaa3c3UVVGQlFUdEJRVUZCTEhkRFFXdENTVHRCUVVOSkxHRkJRVThzUzBGQlMzUmhMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoT0Zvc1pVRkJjRUk3UVVGRFNEdEJRWEJDVER0QlFVRkJPMEZCUVVFc2JVTkJkVUpKTzBGQlEwa3NZVUZCVHl4TFFVRkxhR0VzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFcldpeFZRVUZpTEVsQlFUSkNMRU5CUVd4RE8wRkJRMGc3UVVGNlFrdzdRVUZCUVR0QlFVRkJMSGxEUVRSQ1NUdEJRVU5KTEdGQlFVOHNTMEZCUzJwaExFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhhMkVzWjBKQlFXSXNTVUZCYVVNc1EwRkJlRU03UVVGRFNEdEJRVGxDVER0QlFVRkJPMEZCUVVFc2RVTkJhVU5KTzBGQlEwa3NZVUZCVHl4TFFVRkxjR0VzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGbllTeFhRVUZ3UWp0QlFVTklPMEZCYmtOTU8wRkJRVUU3UVVGQlFTd3lRMEZ6UTBrN1FVRkRTU3hoUVVGUExFdEJRVXRzWVN4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllYRmhMRzFDUVVGd1FqdEJRVU5JTzBGQmVFTk1PMEZCUVVFN1FVRkJRU3gzUTBFeVEwazdRVUZEU1N4aFFVRlBMRXRCUVV0MllTeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZWE5oTEdkQ1FVRndRanRCUVVOSU8wRkJOME5NTzBGQlFVRTdRVUZCUVN4NVEwRm5SRWs3UVVGRFNTeGhRVUZQTEV0QlFVdDRZU3hGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVhWaExHZENRVUZpTEVsQlFXbERMRVZCUVhoRE8wRkJRMGc3UVVGc1JFdzdRVUZCUVR0QlFVRkJMSGxEUVhGRVNUdEJRVU5KTEdGQlFVOHNTMEZCUzNwaExFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhkMkVzWjBKQlFXSXNTVUZCYVVNc1JVRkJlRU03UVVGRFNEdEJRWFpFVER0QlFVRkJPMEZCUVVFc2MwTkJNRVJKTzBGQlEwa3NZVUZCVHl4TFFVRkxNV0VzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGNVlTeHJRa0ZCWWl4SlFVRnRReXhGUVVFeFF6dEJRVU5JTzBGQk5VUk1PMEZCUVVFN1FVRkJRU3h6UTBFclJFazdRVUZEU1N4aFFVRlBMRXRCUVVzellTeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVEJoTEd0Q1FVRndRanRCUVVOSU8wRkJha1ZNTzBGQlFVRTdRVUZCUVN3MlEwRnZSVWs3UVVGRFNTeGhRVUZQTEV0QlFVczFZU3hGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVRKaExHVkJRWEJDTzBGQlEwZzdRVUYwUlV3N1FVRkJRVHRCUVVGQkxHMURRWGxGU1R0QlFVTkpMR0ZCUVU4c1MwRkJTemRoTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaE5HRXNWVUZCY0VJN1FVRkRTRHRCUVRORlREdEJRVUZCTzBGQlFVRXNjVU5CT0VWSk8wRkJRMGtzWVVGQlR5eExRVUZMT1dFc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRTJZU3haUVVGd1FqdEJRVU5JTzBGQmFFWk1PMEZCUVVFN1FVRkJRU3hyUTBGdFJrazdRVUZEU1N4aFFVRlBMRXRCUVVzdllTeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVGhoTEZOQlFYQkNPMEZCUTBnN1FVRnlSa3c3UVVGQlFUdEJRVUZCTEd0RFFYZEdTVHRCUVVOSkxHRkJRVThzUzBGQlMyaGlMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoSzJFc1UwRkJjRUk3UVVGRFNEdEJRVEZHVER0QlFVRkJPMEZCUVVFc2EwTkJOa1pKTzBGQlEwa3NZVUZCVHl4TFFVRkxhbUlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGbllpeFRRVUZ3UWp0QlFVTklPMEZCTDBaTU8wRkJRVUU3UVVGQlFTeHRRMEZyUjBrN1FVRkRTU3hoUVVGUExFdEJRVXRzWWl4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllXbGlMRlZCUVhCQ08wRkJRMGc3UVVGd1IwdzdRVUZCUVR0QlFVRkJMRzlEUVhWSFNUdEJRVU5KTEdGQlFVOHNTMEZCUzI1aUxFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhhMklzVjBGQmNFSTdRVUZEU0R0QlFYcEhURHRCUVVGQk8wRkJRVUVzWjBSQk5FZEpPMEZCUTBrc1lVRkJUeXhMUVVGTGNHSXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0Z0WWl4M1FrRkJjRUk3UVVGRFNEdEJRVGxIVER0QlFVRkJPMEZCUVVFc1owUkJhVWhKTzBGQlEwa3NZVUZCVHl4TFFVRkxjbUlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGdllpeDNRa0ZCY0VJN1FVRkRTRHRCUVc1SVREdEJRVUZCTzBGQlFVRXNkME5CYzBoSk8wRkJRMGs3UVVGRFFTeFZRVUZKUXl4UFFVRlBMRWRCUVVjc1MwRkJTM1ppTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGMySXNiMEpCUVROQ08wRkJRMEVzVlVGQlNTeERRVUZEUkN4UFFVRk1MRVZCUVdNc1QwRkJUeXhKUVVGUU8wRkJRMlFzWVVGQlR6ZGlMR2xFUVVGUExFTkJRVU1yWWl4aFFVRlNMRU5CUVhOQ1JpeFBRVUYwUWl4RFFVRlFPMEZCUTBnN1FVRXpTRXc3UVVGQlFUdEJRVUZCTEhGRFFUWkljVUk1WVN4VFFUZElja0lzUlVFNFNFazdRVUZEU1N4aFFVRlBMRXRCUVV0VUxFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhUeXhUUVVGaUxFTkJRVkE3UVVGRFNEdEJRV2hKVER0QlFVRkJPMEZCUVVFc2RVTkJiVWxKTzBGQlEwa3NZVUZCVHp0QlFVTkljMkVzYjBKQlFWa3NSVUZCUlN4TFFVRkxWeXhqUVVGTUxFVkJSRmc3UVVGRlNGWXNhVUpCUVZNc1JVRkJSU3hMUVVGTFZ5eFhRVUZNTEVWQlJsSTdRVUZIU0ZZc2FVSkJRVk1zUlVGQlJTeExRVUZMVnl4WFFVRk1MRVZCU0ZJN1FVRkpTRllzYVVKQlFWTXNSVUZCUlN4TFFVRkxWeXhYUVVGTUxFVkJTbEk3UVVGTFNHcENMREJDUVVGclFpeEZRVUZGTEV0QlFVdHJRaXhsUVVGTUxFVkJUR3BDTzBGQlRVaHVRaXd3UWtGQmEwSXNSVUZCUlN4TFFVRkxiMElzWlVGQlRDeEZRVTVxUWp0QlFVOUlXaXhyUWtGQlZTeEZRVUZGTEV0QlFVdGhMRmxCUVV3c1JVRlFWRHRCUVZGSWFFTXNkVUpCUVdVc1JVRkJSU3hMUVVGTGFrY3NhVUpCUVV3c1JVRlNaRHRCUVZOSWRVY3NWMEZCUnl4RlFVRkZMRXRCUVVzeVFpeE5RVUZNTEVWQlZFWTdRVUZWU0RWaUxHMUNRVUZYTEVWQlFVVXNTMEZCUzBRc1ZVRldaanRCUVZkSVoySXNiVUpCUVZjc1JVRkJSU3hMUVVGTFl5eGhRVUZNTEVWQldGWTdRVUZaU0hKQ0xIVkNRVUZsTEVWQlFVVXNTMEZCUzNOQ0xITkNRVUZNTEVWQldtUTdRVUZoU0d4RExHdENRVUZWTEVWQlFVVXNTMEZCUzJoSExGbEJRVXdzUlVGaVZEdEJRV05JYlVjc2QwSkJRV2RDTEVWQlFVVXNTMEZCUzJ4SExHdENRVUZNTzBGQlpHWXNUMEZCVUR0QlFXZENTRHRCUVhCS1REczdRVUZCUVR0QlFVRkJPMEZCZFVwUExFbEJRVTB4U3l4M1FrRkJZanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRkJRVHRCUVVGQkxHZERRVWxKTzBGQlEwa3NZVUZCVHl4SlFVRkpPVW9zYVVSQlFVb3NRMEZCV1VNc1owVkJRV1VzUTBGQlEwTXNSVUZCYUVJc1EwRkJiVUlzUzBGQmJrSXNRMEZCV2l4RlFVRjFRME1zWjBSQlFVMHNRMEZCUXpKS0xIZENRVUU1UXl4RlFVRjNSU3hKUVVGNFJTeEZRVUU0UlN4SlFVRTVSU3hEUVVGUU8wRkJRMGc3UVVGT1REczdRVUZCUVR0QlFVRkJPMEZCVTA4c1NVRkJUVU1zZVVKQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc2NVTkJRVmt4U2l4RFFVRmFMRVZCUTBFN1FVRkJRVHM3UVVGRFNTeFRRVUZMUXl4RlFVRk1MRWRCUVZWRUxFTkJRVlk3UVVGRFFTeFRRVUZMYkVJc1VVRkJUQ3hIUVVGblFpeExRVUZMYlVJc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRkRMRlZCUVRkQ08wRkJRMEVzVTBGQlMwY3NUMEZCVEN4SFFVRmxMRXRCUVV0T0xFVkJRVXdzUTBGQlVVOHNaVUZCVWl4TlFVRTJRa01zYzBSQlFWa3NRMEZCUTBZc1QwRkJla1E3UVVGRFNEczdRVUZRVER0QlFVRkJPMEZCUVVFc2NVTkJWVWs3UVVGRFNTeGhRVUZQTEV0QlFVdE9MRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoSzAwc1dVRkJjRUk3UVVGRFNEdEJRVnBNTzBGQlFVRTdRVUZCUVN4eFEwRmxTVHRCUVVOSkxHRkJRVThzUzBGQlMycE9MRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoWjA0c1dVRkJjRUk3UVVGRFNEdEJRV3BDVER0QlFVRkJPMEZCUVVFc1owUkJiMEpKTzBGQlEwa3NZVUZCVHl4TFFVRkxiRTRzUlVGQlRDeERRVUZSYjJNc1VVRkJVaXhIUVVGdFFrTXNWVUZCYmtJc1EwRkJPRUlzTmtKQlFUbENMRU5CUVZBN1FVRkRTRHRCUVhSQ1REdEJRVUZCTzBGQlFVRXNhMFJCZDBKclF6VmlMRk5CZUVKc1F5eEZRWGxDU1R0QlFVTkpMR0ZCUVU4c1MwRkJTMVFzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGUExGTkJRV0lzUTBGQlVEdEJRVU5JTzBGQk0wSk1PenRCUVVGQk8wRkJRVUU3UVVFNFFrOHNTVUZCVFdsS0xIbENRVUZpTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRXNaME5CUjBrN1FVRkRTU3hoUVVGUExFbEJRVWxvU3l4cFJFRkJTaXhEUVVGWlF5eG5SVUZCWlN4RFFVRkRReXhGUVVGb1FpeERRVUZ0UWl4TFFVRnVRaXhEUVVGYUxFVkJRWFZEUXl4blJFRkJUU3hEUVVGRE5rb3NlVUpCUVRsRExFVkJRWGxGTEVsQlFYcEZMRVZCUVN0RkxFbEJRUzlGTEVOQlFWQTdRVUZEU0R0QlFVeE1PenRCUVVGQk8wRkJRVUU3UVVGUlR5eEpRVUZOUXl3d1FrRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNTeHpRMEZCV1RWS0xFTkJRVm9zUlVGRFFUdEJRVUZCT3p0QlFVTkpMRk5CUVV0RExFVkJRVXdzUjBGQlZVUXNRMEZCVmp0QlFVTklPenRCUVV4TU8wRkJRVUU3UVVGQlFTd3JRMEZSU1R0QlFVTkpPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWVVGQlR5eERRVUZETEVOQlFVTXNTMEZCU3l0aUxHVkJRVXdzUlVGQlZEdEJRVU5JTzBGQlpFdzdRVUZCUVR0QlFVRkJMRFJEUVdsQ1NUdEJRVU5KTEdGQlFVOHNTMEZCU3psaUxFVkJRVXdzUTBGQlVXOWpMRkZCUVZJc1IwRkJiVUpETEZWQlFXNUNMRU5CUVRoQ0xHdENRVUU1UWl4RFFVRlFPMEZCUTBnN1FVRnVRa3c3UVVGQlFUdEJRVUZCTEd0RVFYTkNTVHRCUVVOSkxHRkJRVThzUzBGQlMzSmpMRVZCUVV3c1EwRkJVVzlqTEZGQlFWSXNSMEZCYlVKRExGVkJRVzVDTEVOQlFUaENMSFZDUVVFNVFpeERRVUZRTzBGQlEwZzdRVUY0UWt3N1FVRkJRVHRCUVVGQkxHOUVRVEpDU1R0QlFVTkpMR0ZCUVU4c1MwRkJTM0pqTEVWQlFVd3NRMEZCVVc5akxGRkJRVklzUjBGQmJVSkRMRlZCUVc1Q0xFTkJRVGhDTERCRFFVRTVRaXhEUVVGUU8wRkJRMGc3UVVFM1FrdzdRVUZCUVR0QlFVRkJMREpEUVdkRFNUdEJRVU5KTEdGQlFVOHNTMEZCUzNKakxFVkJRVXdzUTBGQlVXOWpMRkZCUVZJc1IwRkJiVUpETEZWQlFXNUNMRU5CUVRoQ0xHZEVRVUU1UWl4RFFVRlFPMEZCUTBnN1FVRnNRMHc3UVVGQlFUdEJRVUZCTEhORFFXOURjMEo2WkN4UlFYQkRkRUlzUlVGeFEwazdRVUZEU1N4aFFVRlBMRXRCUVVzd1pDd3lRa0ZCVEN4UFFVRjFReXhMUVVGTFF5eFhRVUZNTEUxQlFYTkNNMlFzVVVGQmRFSXNTVUZCYTBNc1MwRkJTekprTEZkQlFVd3NUVUZCYzBJc1NVRkJMMFlzUTBGQlVEdEJRVU5JTzBGQmRrTk1PMEZCUVVFN1FVRkJRU3h6UTBFd1EwazdRVUZEU1N4aFFVRlBMRXRCUVV0Mll5eEZRVUZNTEVOQlFWRlBMR1ZCUVZJc1JVRkJVRHRCUVVOSU8wRkJOVU5NTzBGQlFVRTdRVUZCUVN4elEwRXJRMGs3UVVGRFNTeGhRVUZQTEV0QlFVdFFMRVZCUVV3c1EwRkJVVThzWlVGQlVpeE5RVUUyUWtNc2MwUkJRVmtzUTBGQlEwWXNUMEZCYWtRN1FVRkRTRHRCUVdwRVREdEJRVUZCTzBGQlFVRXNaME5CYjBSSk8wRkJRMGtzWVVGQlR5eExRVUZMVGl4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllYTmpMR2RDUVVGd1FqdEJRVU5JTzBGQmRFUk1PMEZCUVVFN1FVRkJRU3hyUTBGNVJFazdRVUZEU1N4aFFVRlBMRXRCUVV0NFl5eEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVU1zVlVGQmNFSTdRVUZEU0R0QlFUTkVURHRCUVVGQk8wRkJRVUVzTWtOQk9FUkpPMEZCUTBrc1lVRkJUeXhMUVVGTFNDeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZWEZoTEcxQ1FVRndRanRCUVVOSU8wRkJhRVZNTzBGQlFVRTdRVUZCUVN4dFEwRnRSVWs3UVVGRFNTeGhRVUZQTEV0QlFVdDJZU3hGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVVjc1YwRkJjRUk3UVVGRFNEdEJRWEpGVER0QlFVRkJPMEZCUVVFc2IwTkJkMFZKTzBGQlEwa3NZVUZCVHl4TFFVRkxUQ3hGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVVjc1YwRkJjRUk3UVVGRFNEdEJRVEZGVER0QlFVRkJPMEZCUVVFc1owTkJOa1ZKTzBGQlEwa3NZVUZCVHl4TFFVRkxUQ3hGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVhWakxHVkJRWEJDTzBGQlEwZzdRVUV2UlV3N1FVRkJRVHRCUVVGQkxESkRRV3RHU1R0QlFVTkpMR0ZCUVU4c1MwRkJTM3BqTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGQyTXNkVUpCUVhCQ08wRkJRMGc3UVVGd1JrdzdRVUZCUVR0QlFVRkJMRFJEUVhWR1NUdEJRVU5KTEZWQlFVbERMRVZCUVVVc1IwRkJSeXhMUVVGTE0yTXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VyWVN4VFFVRmlMRWRCUVhsQ0xFdEJRVXRxWWl4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllXZGlMRk5CUVM5RE8wRkJRMEVzWVVGQlQzbENMRVZCUVZBN1FVRkRTRHRCUVRGR1REdEJRVUZCTzBGQlFVRXNOa0pCTmtaSk8wRkJRMGtzWVVGQlR5eExRVUZMTTJNc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRnZZU3hIUVVGd1FqdEJRVU5JTzBGQkwwWk1PMEZCUVVFN1FVRkJRU3h6UTBGclIwazdRVUZEU1N4aFFVRlBMRXRCUVV0MFlTeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZWGxoTEd0Q1FVRmlMRWRCUVd0RExFVkJRWHBETzBGQlEwZzdRVUZ3UjB3N1FVRkJRVHRCUVVGQkxITkRRWFZIU1R0QlFVTkpMR0ZCUVU4c1MwRkJTek5oTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaE1HRXNhMEpCUVhCQ08wRkJRMGdzUzBGNlIwd3NRMEV5UjBrN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCYWtoS08wRkJRVUU3UVVGQlFTd3lSRUZ0U0VrN1FVRkRTU3hWUVVGSlowTXNSVUZCUlN4SFFVRkhMRXRCUVVzMVl5eEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZWFZoTEdkQ1FVRjBRanRCUVVOQkxGVkJRVWx2UXl4RlFVRkZMRWRCUVVjc1MwRkJTemRqTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGQyRXNaMEpCUVhSQ096dEJRVU5CTEZWQlFVbHRReXhGUVVGRkxFbEJRVWtzUlVGQlRpeEpRVUZaTEVOQlFVVkVMRVZCUVd4Q0xFVkJRMEU3UVVGRFNTeGhRVUZMTldNc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRjFZU3huUWtGQllpeEhRVUZuUTI5RExFVkJRV2hETzBGQlEwZzdRVUZEU2p0QlFURklURHM3UVVGQlFUdEJRVUZCTzBGQk5raFBMRWxCUVUxcVZDeGhRVUZpTzBGQlFVRTdRVUZCUVR0QlFVVkpMSGxDUVVGWmFrd3NWMEZCV2l4RlFVRjVRa01zVVVGQmVrSXNSVUZCYlVOclpTeDNRa0ZCYmtNc1JVRkRRVHRCUVVGQk96dEJRVU5KTEZOQlFVdG9SQ3hYUVVGTUxFZEJRVzFDYm1Jc1YwRkJia0k3UVVGRFFTeFRRVUZMYVVJc1JVRkJUQ3hIUVVGVlJDeG5SVUZCWlN4RFFVRkRReXhGUVVGb1FpeERRVUZ0UWl4UlFVRnVRaXhEUVVGV08wRkJRMEVzVTBGQlMyWXNVVUZCVEN4SFFVRm5Ra1FzVVVGQmFFSTdRVUZEUVN4VFFVRkxiV1VzZDBKQlFVd3NSMEZCWjBORUxIZENRVUZvUXp0QlFVTkJMRk5CUVVzNVpDeE5RVUZNTEVkQlFXTXNTVUZCU1VNc2IwUkJRVW9zUlVGQlpEdEJRVU5CTEZOQlFVdERMRTlCUVV3c1IwRkJaU3hKUVVGSlF5dzJSRUZCU2l4RlFVRm1PMEZCUTBnN08wRkJWa3c3UVVGQlFUdEJRVUZCTEdkRFFXRkpPMEZCUTBrc1ZVRkJTVU1zU1VGQlNTeEhRVUZITzBGQlExQTBaQ3h4UWtGQllTeEZRVUZGTEV0QlFVdHNSQ3hYUVVSaU8wRkJSVkF6V2l4clFrRkJWU3hGUVVGRkxFdEJRVXQwUWl4UlFVWldPMEZCUjFCdlpTeHJRMEZCTUVJc1JVRkJSU3hMUVVGTFJqdEJRVWd4UWl4UFFVRllPMEZCVFVFc1YwRkJTeTlrTEUxQlFVd3NRMEZCV1Vzc2QwSkJRVm9zUjBGQmRVTXNTVUZCZGtNN1FVRkRRU3hYUVVGTFRDeE5RVUZNTEVOQlFWbE5MRzlEUVVGYUxFZEJRVzFFTEVsQlFXNUVPMEZCUTBFc1YwRkJTMDRzVFVGQlRDeERRVUZaVHl3MFFrRkJXaXhIUVVFeVF5eEpRVUV6UXp0QlFVTkJMRmRCUVV0UUxFMUJRVXdzUTBGQldWRXNaMEpCUVZvc1EwRkJOa0pLTEVsQlFUZENPMEZCUTBFc1YwRkJTMFlzVDBGQlRDeERRVUZoVHl4VlFVRmlMRU5CUVhkQ1RDeEpRVUY0UWp0QlFVTkJMR0ZCUVU4c1NVRkJTVTBzYVVSQlFVb3NRMEZCV1VNc1owVkJRV1VzUTBGQlEwTXNSVUZCYUVJc1EwRkJiVUlzVVVGQmJrSXNRMEZCV2l4RlFVRXdRME1zWjBSQlFVMHNRMEZCUXl0S0xHRkJRV3BFTEVWQlFXZEZlRXNzU1VGQmFFVXNSVUZCYzBVc1NVRkJkRVVzUTBGQlVEdEJRVU5JTzBGQk1VSk1PenRCUVVGQk8wRkJRVUU3UVVFMlFrOHNTVUZCVFhsTExHTkJRV0k3UVVGQlFUdEJRVUZCTzBGQlJVa3NNRUpCUVZrNVNpeERRVUZhTEVWQlEwRTdRVUZCUVRzN1FVRkRTU3hUUVVGTFF5eEZRVUZNTEVkQlFWVkVMRU5CUVZZN1FVRkRRU3hUUVVGTFJTeFRRVUZNTEVkQlFXbENSaXhEUVVGRExFTkJRVU5JTEVWQlFXNUNPMEZCUTBFc1UwRkJTMllzVVVGQlRDeEhRVUZuUW10Q0xFTkJRVU1zUTBGQlEwY3NTVUZCUml4RFFVRlBReXhWUVVGMlFqdEJRVU5CTEZOQlFVdERMRlZCUVV3c1IwRkJhMEpNTEVOQlFVTXNRMEZCUTBjc1NVRkJSaXhEUVVGUFJ5eFhRVUY2UWp0QlFVTkJMRk5CUVV0bllTeGhRVUZNTEVkQlFYRkNkR0VzUTBGQlF5eERRVUZEUnl4SlFVRkdMRU5CUVU5SExGZEJRVFZDTzBGQlEwRXNVMEZCUzBNc1QwRkJUQ3hIUVVGbFVDeERRVUZETEVOQlFVTlJMR1ZCUVVZc1RVRkJkVUpETEhORVFVRlpMRU5CUVVOR0xFOUJRVzVFTzBGQlEwZzdPMEZCVmt3N1FVRkJRVHRCUVVGQkxITkRRV0ZKTzBGQlEwa3NZVUZCVHl4TFFVRkxUaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVRoakxHRkJRWEJDTzBGQlEwZzdRVUZtVER0QlFVRkJPMEZCUVVFc05rSkJhMEpKTzBGQlEwa3NZVUZCVHl4TFFVRkxhR1FzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGdllTeEhRVUZ3UWp0QlFVTklPMEZCY0VKTU8wRkJRVUU3UVVGQlFTeDVRMEYxUWtrN1FVRkRTU3hoUVVGUExFdEJRVXQwWVN4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllYVmhMR2RDUVVGaUxFbEJRV2xETEVWQlFYaERPMEZCUTBnN1FVRjZRa3c3UVVGQlFUdEJRVUZCTEhsRFFUUkNTVHRCUVVOSkxHRkJRVThzUzBGQlMzcGhMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoZDJFc1owSkJRWEJDTzBGQlEwZzdRVUU1UWt3N1FVRkJRVHRCUVVGQkxITkRRV2xEU1R0QlFVTkpMR0ZCUVU4c1MwRkJTekZoTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGVXRXNhMEpCUVdJc1NVRkJiVU1zUlVGQk1VTTdRVUZEU0R0QlFXNURURHRCUVVGQk8wRkJRVUVzYzBOQmMwTkpPMEZCUTBrc1lVRkJUeXhMUVVGTE0yRXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0V3WVN4clFrRkJZaXhKUVVGdFF5eEZRVUV4UXp0QlFVTklPMEZCZUVOTU8wRkJRVUU3UVVGQlFTdzJRMEUwUTBrN1FVRkRTU3hoUVVGUExFdEJRVXMxWVN4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllUSmhMR1ZCUVdJc1NVRkJaME1zUlVGQmRrTTdRVUZEU0R0QlFUbERURHRCUVVGQk8wRkJRVUVzYlVOQlowUkpPMEZCUTBrc1lVRkJUeXhMUVVGTE4yRXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0UwWVN4VlFVRmlMRWxCUVRKQ0xFVkJRV3hETzBGQlEwZzdRVUZzUkV3N1FVRkJRVHRCUVVGQkxIRkRRVzlFU1R0QlFVTkpMR0ZCUVU4c1MwRkJTemxoTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaE5tRXNXVUZCWWl4SlFVRTJRaXhGUVVGd1F6dEJRVU5JTzBGQmRFUk1PMEZCUVVFN1FVRkJRU3hyUTBGM1JFazdRVUZEU1N4aFFVRlBMRXRCUVVzdllTeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVGhoTEZOQlFXSXNTVUZCTUVJc1JVRkJha003UVVGRFNEdEJRVEZFVER0QlFVRkJPMEZCUVVFc2EwTkJORVJKTzBGQlEwa3NZVUZCVHl4TFFVRkxhR0lzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFcllTeFRRVUZpTEVsQlFUQkNMRVZCUVdwRE8wRkJRMGc3UVVFNVJFdzdRVUZCUVR0QlFVRkJMR3REUVdkRlNUdEJRVU5KTEdGQlFVOHNTMEZCUzJwaUxFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhaMklzVTBGQllpeEpRVUV3UWl4RlFVRnFRenRCUVVOSU8wRkJiRVZNTzBGQlFVRTdRVUZCUVN4dFEwRnZSVWs3UVVGRFNTeGhRVUZQTEV0QlFVdHNZaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVdsaUxGVkJRV0lzU1VGQk1rSXNSVUZCYkVNN1FVRkRTRHRCUVhSRlREdEJRVUZCTzBGQlFVRXNiME5CZDBWSk8wRkJRMGtzWVVGQlR5eExRVUZMYm1Jc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRnJZaXhYUVVGaUxFbEJRVFJDTEVWQlFXNURPMEZCUTBnN1FVRXhSVXc3UVVGQlFUdEJRVUZCTEdkRVFUUkZTVHRCUVVOSkxHRkJRVThzUzBGQlMzQmlMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoYldJc2QwSkJRWEJDTzBGQlEwZzdRVUU1UlV3N1FVRkJRVHRCUVVGQkxHZEVRV2RHU1R0QlFVTkpMR0ZCUVU4c1MwRkJTM0ppTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGIySXNkMEpCUVhCQ08wRkJRMGc3UVVGc1JrdzdRVUZCUVR0QlFVRkJMSGREUVc5R1NUdEJRVU5KTzBGQlEwRXNWVUZCU1VNc1QwRkJUeXhIUVVGSExFdEJRVXQyWWl4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllYTmlMRzlDUVVFelFqdEJRVU5CTEZWQlFVa3NRMEZCUTBRc1QwRkJUQ3hGUVVGakxFOUJRVThzU1VGQlVEdEJRVU5rTEdGQlFVODNZaXhwUkVGQlR5eERRVUZESzJJc1lVRkJVaXhEUVVGelFrWXNUMEZCZEVJc1EwRkJVRHRCUVVOSU8wRkJla1pNTzBGQlFVRTdRVUZCUVN4eFEwRXlSbkZDT1dFc1UwRXpSbkpDTEVWQk5FWkpPMEZCUTBrc1lVRkJUeXhMUVVGTFZDeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVThzVTBGQllpeERRVUZRTzBGQlEwZzdRVUU1Umt3N08wRkJRVUU3UVVGQlFUdEJRV2xIVHl4SlFVRk5jVW9zYVVKQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc05rSkJRVmt2U2l4RFFVRmFMRVZCUTBFN1FVRkJRVHM3UVVGRFNTeFRRVUZMUlN4VFFVRk1MRWRCUVdsQ1JpeERRVUZETEVOQlFVTklMRVZCUVc1Q08wRkJRMEVzVTBGQlMyWXNVVUZCVEN4SFFVRm5RbXRDTEVOQlFVTXNRMEZCUTBjc1NVRkJSaXhEUVVGUFF5eFZRVUYyUWp0QlFVTkJMRk5CUVVzcll5eGpRVUZNTEVkQlFYTkNibVFzUTBGQlF5eERRVUZEUnl4SlFVRkdMRU5CUVU5M1lTeG5Ra0ZCTjBJN1FVRkRTRHM3UVVGUVREdEJRVUZCTzBGQlFVRXNjME5CVTNOQ09XSXNVVUZVZEVJc1JVRlRaME00VVN4VFFWUm9ReXhGUVZNeVEzbE9MR0ZCVkRORExFVkJWVWs3UVVGRFNTeFhRVUZMYkdRc1UwRkJUQ3hIUVVGcFFubFFMRk5CUVdwQ08wRkJRMEVzVjBGQlN6ZFJMRkZCUVV3c1IwRkJaMEpFTEZGQlFXaENPMEZCUTBFc1YwRkJTM05sTEdOQlFVd3NSMEZCYzBKRExHRkJRWFJDTzBGQlEwZzdRVUZrVER0QlFVRkJPMEZCUVVFc2VVTkJhVUpKTzBGQlEwa3NZVUZCVHl4TFFVRkxSQ3hqUVVGYU8wRkJRMGc3UVVGdVFrdzdPMEZCUVVFN1FVRkJRVHRCUVhOQ1R5eEpRVUZOUlN4blFrRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNTdzBRa0ZCV1hobExGRkJRVm9zUlVGRFFUdEJRVUZCT3p0QlFVTkpMRk5CUVV0RExGRkJRVXdzUjBGQlowSkVMRkZCUVdoQ08wRkJRMGc3TzBGQlRFdzdRVUZCUVR0QlFVRkJMR2REUVZGSk8wRkJRMGtzVlVGQlNWRXNTVUZCU1N4SFFVRkhPMEZCUTFCbExHdENRVUZWTEVWQlFVVXNTMEZCUzNSQ08wRkJSRllzVDBGQldEdEJRVWRCTEdGQlFVOHNTVUZCU1dFc2FVUkJRVW9zUTBGQldVTXNaMFZCUVdVc1EwRkJRME1zUlVGQmFFSXNRMEZCYlVJc1VVRkJia0lzUTBGQldpeEZRVUV3UTBNc1owUkJRVTBzUTBGQlEydExMR2xDUVVGcVJDeEZRVUZ2UlROTExFbEJRWEJGTEVWQlFUQkZMRWxCUVRGRkxFTkJRVkE3UVVGRFNEdEJRV0pNT3p0QlFVRkJPMEZCUVVFN1FVRm5RazhzU1VGQlRXbGxMR1ZCUVdJN1FVRkJRVHRCUVVGQk8wRkJSVWtzTWtKQlFWbDZaU3hSUVVGYUxFVkJRMEU3UVVGQlFUczdRVUZEU1N4VFFVRkxReXhSUVVGTUxFZEJRV2RDUkN4UlFVRm9RanRCUVVOSU96dEJRVXhNTzBGQlFVRTdRVUZCUVN4blEwRlJTVHRCUVVOSkxGVkJRVWxSTEVsQlFVa3NSMEZCUnp0QlFVTlFaU3hyUWtGQlZTeEZRVUZGTEV0QlFVdDBRanRCUVVSV0xFOUJRVmc3UVVGSFFTeGhRVUZQTEVsQlFVbGhMR2xFUVVGS0xFTkJRVmxETEdkRlFVRmxMRU5CUVVORExFVkJRV2hDTEVOQlFXMUNMRkZCUVc1Q0xFTkJRVm9zUlVGQk1FTkRMR2RFUVVGTkxFTkJRVU50U3l4cFFrRkJha1FzUlVGQmIwVTFTeXhKUVVGd1JTeEZRVUV3UlN4SlFVRXhSU3hEUVVGUU8wRkJRMGc3UVVGaVREczdRVUZCUVR0QlFVRkJPMEZCWjBKUExFbEJRVTByU3l4dFFrRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNTd3JRa0ZCV1hoTUxGZEJRVm9zUlVGQmVVSkRMRkZCUVhwQ0xFVkJRVzFETUdFc1pVRkJia01zUlVGRFFUdEJRVUZCT3p0QlFVTkpMRk5CUVV0NllTeFJRVUZNTEVkQlFXZENSQ3hSUVVGb1FqdEJRVU5CTEZOQlFVdHJWaXhqUVVGTUxFZEJRWE5DYmxZc1YwRkJkRUk3UVVGRFFTeFRRVUZMU1N4bFFVRk1MRWRCUVhWQ2RXRXNaVUZCZGtJN1FVRkRRU3hUUVVGTGVVUXNkMEpCUVV3c1IwRkJaME1zUzBGQmFFTTdRVUZEUVN4VFFVRkxMMlFzVFVGQlRDeEhRVUZqTEVsQlFVbERMRzlFUVVGS0xFVkJRV1E3UVVGRFFTeFRRVUZMUXl4UFFVRk1MRWRCUVdVc1NVRkJTVU1zTmtSQlFVb3NSVUZCWmp0QlFVTklPenRCUVZaTU8wRkJRVUU3UVVGQlFTeG5RMEZoU1R0QlFVTkpMRlZCUVVsRExFbEJRVWtzUjBGQlJ6dEJRVU5RWlN4clFrRkJWU3hGUVVGRkxFdEJRVXQwUWl4UlFVUldPMEZCUlZCdFlpeDFRa0ZCWlN4RlFVRkZMRXRCUVV0c1J5eGpRVVptTzBGQlIxQnpSeXgzUWtGQlowSXNSVUZCUlN4TFFVRkxjbUlzWlVGSWFFSTdRVUZKVUd0bExHdERRVUV3UWl4RlFVRkZMRXRCUVV0R08wRkJTakZDTEU5QlFWZzdRVUZQUVN4WFFVRkxMMlFzVFVGQlRDeERRVUZaU3l4M1FrRkJXaXhIUVVGMVF5eEpRVUYyUXp0QlFVTkJMRmRCUVV0TUxFMUJRVXdzUTBGQldVMHNiME5CUVZvc1IwRkJiVVFzU1VGQmJrUTdRVUZEUVN4WFFVRkxUaXhOUVVGTUxFTkJRVmxQTERSQ1FVRmFMRWRCUVRKRExFbEJRVE5ETzBGQlEwRXNWMEZCUzFBc1RVRkJUQ3hEUVVGWlVTeG5Ra0ZCV2l4RFFVRTJRa29zU1VGQk4wSTdRVUZEUVN4WFFVRkxSaXhQUVVGTUxFTkJRV0ZQTEZWQlFXSXNRMEZCZDBKTUxFbEJRWGhDTzBGQlEwRXNZVUZCVHl4SlFVRkpUU3hwUkVGQlNpeERRVUZaUXl4blJVRkJaU3hEUVVGRFF5eEZRVUZvUWl4RFFVRnRRaXhOUVVGdVFpeERRVUZhTEVWQlFYZERReXhuUkVGQlRTeERRVUZEYzBzc2JVSkJRUzlETEVWQlFXOUZMMHNzU1VGQmNFVXNSVUZCTUVVc1NVRkJNVVVzUTBGQlVEdEJRVU5JTzBGQk0wSk1PenRCUVVGQk8wRkJRVUU3UVVFNFFrOHNTVUZCVFdkTUxHOUNRVUZpTEVkQlJVa3NPRUpCUVZseVN5eERRVUZhTEVWQlEwRTdRVUZCUVRzN1FVRkRTU3hQUVVGTGQwb3NaMEpCUVV3c1IwRkJkMElzU1VGQlNVRXNaMEpCUVVvc1EwRkJjVUo0U2l4RFFVRnlRaXhEUVVGNFFqdEJRVU5CTEU5QlFVdHNRaXhSUVVGTUxFZEJRV2RDTUVzc1owSkJRV2RDTEVOQlFVTXhTeXhSUVVGcVF6dEJRVU5JTEVOQlRrdzdRVUZUVHl4SlFVRk5lV1VzYjBKQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc2EwTkJRMEU3UVVGQlFUczdRVUZCUVN4elEwRkVaVzVXTEVsQlEyWTdRVUZFWlVFc1ZVRkRaanRCUVVGQk96dEJRVU5KTEZGQlFVZEJMRWxCUVVrc1EwRkJRM1ZITEUxQlFVd3NTMEZCWjBJc1EwRkJia0lzUlVGQmMwSTdRVUZEYkVJc1YwRkJTemRRTEZGQlFVd3NSMEZCWjBKelNpeEpRVUZKTEVOQlFVTXNRMEZCUkN4RFFVRndRanRCUVVOQkxGZEJRVXRzU1N4VFFVRk1MRWRCUVdsQ2Ewa3NTVUZCU1N4RFFVRkRMRU5CUVVRc1EwRkJja0k3UVVGRFFTeFhRVUZMYjFZc1dVRkJUQ3hIUVVGdlFuQldMRWxCUVVrc1EwRkJReXhEUVVGRUxFTkJRWGhDTzBGQlEwRXNWMEZCUzNGV0xGZEJRVXdzUjBGQmJVSnlWaXhKUVVGSkxFTkJRVU1zUTBGQlJDeERRVUYyUWp0QlFVTklMRXRCVEVRc1RVRkxUeXhKUVVGSFFTeEpRVUZKTEVOQlFVTjFSeXhOUVVGTUxFdEJRV2RDTEVOQlFXNUNMRVZCUVhOQ08wRkJRM3BDTEZkQlFVdDZUeXhUUVVGTUxFZEJRV2xDYTBrc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQlNpeERRVUZSZGtrc1JVRkJla0k3UVVGRFFTeFhRVUZMWml4UlFVRk1MRWRCUVdkQ2Mwb3NTVUZCU1N4RFFVRkRMRU5CUVVRc1EwRkJTaXhEUVVGUmFra3NTVUZCVWl4RFFVRmhReXhWUVVFM1FqdEJRVU5CTEZkQlFVdHZaQ3haUVVGTUxFZEJRVzlDY0ZZc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQlNpeERRVUZSYWtrc1NVRkJVaXhEUVVGaGRXUXNkMEpCUVdwRE8wRkJRMEVzVjBGQlMwUXNWMEZCVEN4SFFVRnRRbkpXTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVVvc1EwRkJVV3BKTEVsQlFWSXNRMEZCWVhka0xGZEJRV2hETzBGQlEwZ3NTMEZNVFN4TlFVdEJPMEZCUTBnc1dVRkJUU3hKUVVGSmFtTXNTMEZCU2l4RFFVRlZMR2RFUVVGV0xFTkJRVTQ3UVVGRFNEdEJRVU5LT3p0QlFXcENURHRCUVVGQk8wRkJRVUVzY1VOQmIwSkpPMEZCUTBrc1lVRkJUeXhMUVVGTE9HSXNXVUZCV2p0QlFVTklPMEZCZEVKTU8wRkJRVUU3UVVGQlFTeHZRMEY1UWtrN1FVRkRTU3hoUVVGUExFdEJRVXRETEZkQlFWbzdRVUZEU0R0QlFUTkNURHM3UVVGQlFUdEJRVUZCTzBGQk9FSlBMRWxCUVUxMFZDeGpRVUZpTzBGQlFVRTdRVUZCUVR0QlFVVkpMREJDUVVGWmRFd3NVVUZCV2l4RlFVRnpRaXRsTEZGQlFYUkNMRVZCUTBFN1FVRkJRVHM3UVVGRFNTeFRRVUZMT1dVc1VVRkJUQ3hIUVVGblFrUXNVVUZCYUVJN1FVRkRRU3hUUVVGTFoyWXNVVUZCVEN4SFFVRm5Ra1FzVVVGQmFFSTdRVUZEU0RzN1FVRk9URHRCUVVGQk8wRkJRVUVzWjBOQlUwazdRVUZEU1N4VlFVRkpkbVVzU1VGQlNTeEhRVUZITzBGQlExQmxMR3RDUVVGVkxFVkJRVVVzUzBGQlMzUkNMRkZCUkZZN1FVRkZVRzFqTEdsQ1FVRlRMRVZCUVVVc1MwRkJTelJETzBGQlJsUXNUMEZCV0R0QlFVbEJMR0ZCUVU4c1NVRkJTV3hsTEdsRVFVRktMRU5CUVZsRExHZEZRVUZsTEVOQlFVTkRMRVZCUVdoQ0xFTkJRVzFDTEZGQlFXNUNMRU5CUVZvc1JVRkJNRU5ETEdkRVFVRk5MRU5CUVVOeFN5eGpRVUZxUkN4RlFVRnBSVGxMTEVsQlFXcEZMRVZCUVhWRkxFbEJRWFpGTEVOQlFWQTdRVUZEU0R0QlFXWk1PenRCUVVGQk8wRkJRVUVzU1RzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRNVzFDUVR0QlFVVlBMRWxCUVUxNVpTeGpRVUZpTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRXNNRU5CUldsRGJHWXNWMEZHYWtNc1JVRkZPRU50Wml4VlFVWTVReXhGUVVkSk8wRkJRMGtzWVVGQlR5eEpRVUZKZUZVc2VVUkJRVW9zUTBGQmIwSXpTeXhYUVVGd1FpeEZRVUZwUTIxbUxGVkJRV3BETEVOQlFWQTdRVUZEU0R0QlFVeE1PMEZCUVVFN1FVRkJRU3cwUTBGUGJVTnNaaXhSUVZCdVF5eEZRVTgyUTIxbUxHTkJVRGRETEVWQlR6WkVReXhUUVZBM1JDeEZRVTkzUlVNc1lVRlFlRVVzUlVGUGRVWkRMR2RDUVZCMlJpeEZRVTk1UnpWRkxHVkJVSHBITEVWQlVVazdRVUZEU1N4VlFVRkpOa1VzUlVGQlJTeEhRVUZIUXl4TlFVRk5MRU5CUVVORExFMUJRVkFzUTBGQll5eEpRVUZKTDFVc2VVUkJRVW9zUTBGQmIwSjVWU3hqUVVGd1FpeEZRVUZ2UTI1bUxGRkJRWEJETEVOQlFXUXNSVUZEVkR0QlFVTkpSU3h4UWtGQllTeEZRVUZGYldZc1lVRkVia0k3UVVGRlNXcExMR2xDUVVGVExFVkJRVVZuU3l4VFFVWm1PMEZCUjBsdVJTeDNRa0ZCWjBJc1JVRkJSWEZGTEdkQ1FVaDBRanRCUVVsSmJtWXNkVUpCUVdVc1JVRkJSWFZoTzBGQlNuSkNMRTlCUkZNc1EwRkJWRHRCUVZGQkxHRkJRVTgyUlN4RlFVRlFPMEZCUTBnN1FVRnNRa3c3UVVGQlFUdEJRVUZCTEhkRFFXOUNLMEo0Wml4WFFYQkNMMElzUlVGdlFqUkRiV1lzVlVGd1FqVkRMRVZCYjBKM1JHaENMSGRDUVhCQ2VFUXNSVUZ4UWtrN1FVRkRTU3hoUVVGUExFbEJRVWxzVkN4MVJFRkJTaXhEUVVGclFtcE1MRmRCUVd4Q0xFVkJRU3RDYldZc1ZVRkJMMElzUlVGQk1rTm9RaXgzUWtGQk0wTXNRMEZCVUR0QlFVTklPMEZCZGtKTU96dEJRVUZCTzBGQlFVRXNTVHM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOR1FTeEpRVUZKZDBJc2QwSkJRWGRDTEVkQlFVY3NRMEZCTDBJN1FVRkZUeXhKUVVGTk0yVXNaVUZCWWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJMSFZDUVVOak5HVXNUVUZFWkN4RlFVTnpRanRCUVVOa0xHRkJRVTlCTEUxQlFVMHNSMEZCUjBRc2QwSkJRWGRDTEVWQlFYaERPMEZCUTBnN1FVRklURHM3UVVGQlFUdEJRVUZCTEVrN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRSazhzU1VGQlRTOVhMRTlCUVdJN1FVRkJRVHRCUVVGQk8wRkJRMGtzYlVKQlFWbHBXQ3hOUVVGYUxFVkJRVzlDUXl4UFFVRndRaXhGUVVFMlFqdEJRVUZCT3p0QlFVTjZRaXhUUVVGTGFGZ3NUVUZCVEN4SFFVRnJRaXRYTEUxQlFXeENPMEZCUTBFc1UwRkJTemxYTEU5QlFVd3NSMEZCYTBJclZ5eFBRVUZzUWp0QlFVTklPenRCUVVwTU8wRkJRVUU3UVVGQlFTeDVRa0ZOWjBKb1dDeE5RVTVvUWl4RlFVMTNRa01zVDBGT2VFSXNSVUZOYVVNN1FVRkRla0puV0N4clFrRkJXU3hEUVVGRFF5eFBRVUZpTEVOQlFYRkNMRkZCUVhKQ0xFVkJRU3RDYkZnc1RVRkJMMEk3UVVGRFFXbFlMR3RDUVVGWkxFTkJRVU5ETEU5QlFXSXNRMEZCY1VJc1UwRkJja0lzUlVGQlowTnFXQ3hQUVVGb1F6dEJRVU5JTzBGQlZFdzdRVUZCUVR0QlFVRkJMRGhDUVZkeFFqdEJRVU5pTEdGQlFVOHNTVUZCU1Vnc1QwRkJTaXhEUVVGWmJWZ3NXVUZCV1N4RFFVRkRSU3hQUVVGaUxFTkJRWEZDTEZGQlFYSkNMRU5CUVZvc1JVRkJORU5HTEZsQlFWa3NRMEZCUTBVc1QwRkJZaXhEUVVGeFFpeFRRVUZ5UWl4RFFVRTFReXhEUVVGUU8wRkJRMGc3UVVGaVREdEJRVUZCTzBGQlFVRXNPRUpCWlhGQ08wRkJRMklzWVVGQlQwWXNXVUZCV1N4RFFVRkRSU3hQUVVGaUxFTkJRWEZDTEZGQlFYSkNMRXRCUVd0RFJpeFpRVUZaTEVOQlFVTkZMRTlCUVdJc1EwRkJjVUlzVTBGQmNrSXNRMEZCZWtNN1FVRkRTRHRCUVdwQ1REdEJRVUZCTzBGQlFVRXNORUpCYlVKdFFqdEJRVU5ZUml4clFrRkJXU3hEUVVGRFJ5eFZRVUZpTEVOQlFYZENMRkZCUVhoQ08wRkJRMEZJTEd0Q1FVRlpMRU5CUVVOSExGVkJRV0lzUTBGQmQwSXNVMEZCZUVJN1FVRkRTRHRCUVhSQ1REczdRVUZCUVR0QlFVRkJMRWs3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFFVOHNTVUZCVFVNc2JVSkJRV0k3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJMSGRDUVVkSk8wRkJRMGtzVlVGQlJ5eExRVUZMY0dRc2JVSkJRVklzUlVGRFFUdEJRVU5KTEdWQlFVOHNTMEZCUzNGa0xFbEJRVm83UVVGRFNDeFBRVWhFTEUxQlMwRTdRVUZEU1N4bFFVRlBMRXRCUVV0RExFVkJRVm83UVVGRFNEdEJRVU5LTEV0QldrdzdRVUZCUVN4elFrRmpaMEpETEU5QlpHaENMRVZCWlVrN1FVRkRTU3hWUVVGSExFdEJRVXQyWkN4dFFrRkJVaXhGUVVOQk8wRkJRMGtzWVVGQlMzRmtMRWxCUVV3c1IwRkJXVWNzVVVGQldqdEJRVU5JTEU5QlNFUXNUVUZMUVR0QlFVTkpMR0ZCUVV0R0xFVkJRVXdzUjBGQlZVTXNUMEZCVmp0QlFVTklPMEZCUTBvN1FVRjRRa3c3TzBGQk1FSkpMQ3RDUVVGWlJTeHRRa0ZCV2l4RlFVTkJPMEZCUVVFN08wRkJRMGtzVTBGQlMzcGtMRzFDUVVGTUxFZEJRVEpDZVdRc2JVSkJRVE5DTzBGQlJVRXNVMEZCUzBnc1JVRkJUQ3hIUVVGVkxFbEJRVlk3UVVGRFFTeFRRVUZMUkN4SlFVRk1MRWRCUVZrc1NVRkJXanRCUVVOQkxGTkJRVXRMTEZkQlFVd3NSMEZCYlVJc1NVRkJia0k3UVVGRlFTeFRRVUZMUXl4NVFrRkJUQ3hIUVVGcFF5eEpRVUZxUXp0QlFVTkJMRk5CUVV0RExIbENRVUZNTEVkQlFXbERMRWxCUVdwRE8wRkJRMEVzVTBGQlMwTXNaVUZCVEN4SFFVRjFRaXhKUVVGMlFqdEJRVU5JT3p0QlFYSkRURHRCUVVGQk8wRkJkME5QTEVsQlFVMUdMSGxDUVVGNVFpeEhRVU4wUXp0QlFVTkpNVTBzVTBGQlR5eEZRVUZGTEZOQlJHSTdRVUZGU1RaTkxIVkNRVUZ4UWl4RlFVRkZMSFZDUVVZelFqdEJRVWRKUXl4eFFrRkJiVUlzUlVGQlJTeHhRa0ZJZWtJN1FVRkpTVU1zTWtKQlFYbENMRVZCUVVVc01rSkJTaTlDTzBGQlMwbERMSE5DUVVGdlFpeEZRVUZGTzBGQlRERkNMRU5CUkU4N1FVRlRRU3hKUVVGTlF5eGpRVUZqTEVkQlF6TkNPMEZCUTBsRExGVkJRVkVzUlVGQlJUdEJRVVJrTEVOQlJFODdRVUZMUVN4SlFVRk5ReXh2UWtGQllqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVVZKTzBGQlJrbzdRVUZCUVR0QlFVRkJPMEZCUVVFc09FWkJSekJDUXl4WlFVZ3hRanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVWQzUTBNc2MwSkJTSGhETERKRVFVZHBSQ3hwUWtGSWFrUTdRVUZIYjBWRExEUkNRVWh3UlR0QlFVZHJSa01zYTBOQlNHeEdPMEZCUjNOSFF5d3dRa0ZJZEVjN1FVRkxZME1zYTBOQlRHUXNSMEZMYlVNc1NVRk1ia003UVVGTldVTXNiMEpCVGxvc1IwRk5iVUpJTEd0Q1FVRnJRaXhIUVVGSExFMUJRVWdzUjBGQldTeEpRVTVxUkR0QlFVOVpTU3huUTBGUVdpeEhRVThyUWtnc1ZVRkJWU3d5UTBGQmIwTkdMRmxCUVhCRExEQkRRVUZuUmtZc1dVRkJhRVlzWTBGQlowZE5MRWxCUVdoSExIbERRVUYxU1Vvc1dVRkJka2tzTUVOQlFXMU1SaXhaUVVGdVRDeGpRVUZ0VFUwc1NVRkJiazBzUTBGUWVrTTdRVUZCUVN4cFJFRlRaVVVzVDBGQlR5eERRVUZEUXl4SlFVRlNMRU5CUVdFc1EwRkRhRUpETEV0QlFVc3NRMEZCUTBnc1owSkJRVVFzUlVGQmJVSTdRVUZEZEVKSkxIZENRVUZOTEVWQlFVVXNTMEZFWXp0QlFVVjBRa01zZVVKQlFVOHNSVUZCUlR0QlFVTlFMSE5FUVVGclExZzdRVUZFTTBJN1FVRkdZU3hwUWtGQmJrSXNRMEZFVnl4RlFVOW9RaXhKUVVGSlR5eFBRVUZLTEVOQlFWa3NWVUZCUTBzc1EwRkJSQ3hGUVVGSlF5eE5RVUZLTzBGQlFVRXNlVUpCUTFZM1pDeFZRVUZWTEVOQlFVTTdRVUZCUVN3eVFrRkJUVFprTEUxQlFVMHNRMEZCUXl4SlFVRkpjR1lzUzBGQlNpeERRVUZWTERaRFFVRldMRU5CUVVRc1EwRkJXanRCUVVGQkxHMUNRVUZFTEVWQlFYbEZNbVVzYTBKQlFYcEZMRU5CUkVFN1FVRkJRU3hwUWtGQldpeERRVkJuUWl4RFFVRmlMRU5CVkdZN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHM3UVVGQlFUdEJRVUZCTEVrN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOMFJFRTdRVUZEUVR0QlFVVlBMRWxCUVUwdlZpeGhRVUZpTzBGQlFVRTdRVUZCUVR0QlFVTkpMSGxDUVVGWmJVTXNSVUZCV2l4RlFVRm5RanRCUVVGQk96dEJRVU5hTEZOQlFVczFUU3hGUVVGTUxFZEJRVlUwVFN4RlFVRldPMEZCUTBFc1UwRkJTM2hPTEUxQlFVd3NSMEZCWXl4SlFVRkpReXh2UkVGQlNpeEZRVUZrTzBGQlEwRXNVMEZCUzBNc1QwRkJUQ3hIUVVGbExFbEJRVWxETERaRVFVRktMRVZCUVdZN1FVRkRTRHM3UVVGTVREdEJRVUZCTzBGQlFVRXNaME5CVDJkQ08wRkJRMUlzVlVGQlNVTXNTVUZCU1N4SFFVRkhMRVZCUVZnN1FVRkZRU3hYUVVGTFNpeE5RVUZNTEVOQlFWbExMSGRDUVVGYUxFZEJRWFZETEVsQlFYWkRPMEZCUTBFc1YwRkJTMHdzVFVGQlRDeERRVUZaVFN4dlEwRkJXaXhIUVVGdFJDeExRVUZ1UkR0QlFVTkJMRmRCUVV0T0xFMUJRVXdzUTBGQldVOHNORUpCUVZvc1IwRkJNa01zUzBGQk0wTTdRVUZEUVN4WFFVRkxVQ3hOUVVGTUxFTkJRVmxSTEdkQ1FVRmFMRU5CUVRaQ1NpeEpRVUUzUWp0QlFVTkJMRmRCUVV0R0xFOUJRVXdzUTBGQllVOHNWVUZCWWl4RFFVRjNRa3dzU1VGQmVFSTdRVUZEUVN4aFFVRlBMRWxCUVVsTkxHbEVRVUZLTEVOQlFWa3NTMEZCUzBVc1JVRkJha0lzUlVGQmNVSkRMR2RFUVVGTkxFTkJRVU4zU3l4aFFVRTFRaXhGUVVFeVEycE1MRWxCUVRORExFVkJRV2xFTEVsQlFXcEVMRU5CUVZBN1FVRkRTRHRCUVdoQ1REczdRVUZCUVR0QlFVRkJPMEZCYlVKUExFbEJRVTB3YUVJc1ZVRkJZanRCUVVGQk8wRkJRVUU3UVVGRFNTeHpRa0ZCV1M5blFpeERRVUZhTEVWQlFXVTdRVUZCUVRzN1FVRkRXQ3hUUVVGTFJTeFRRVUZNTEVkQlFXbENSaXhEUVVGRExFTkJRVU5JTEVWQlFXNUNPMEZCUTBFc1UwRkJTMGtzUlVGQlRDeEhRVUZWUkN4RFFVRldPMEZCUTBFc1UwRkJTMDhzVDBGQlRDeEhRVUZsVUN4RFFVRkRMRU5CUVVOUkxHVkJRVVlzVFVGQmRVSkRMSE5FUVVGWkxFTkJRVU5HTEU5QlFXNUVPMEZCUTBnN08wRkJURXc3UVVGQlFUdEJRVUZCTEN0RFFWRkpPMEZCUTBrc1lVRkJUeXhMUVVGTFRpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVFpuUWl4dlEwRkJjRUk3UVVGRFNEdEJRVlpNTzBGQlFVRTdRVUZCUVN3clEwRmhTVHRCUVVOSkxHRkJRVThzUzBGQlN5OW5RaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVRoblFpeHZRMEZCY0VJN1FVRkRTRHRCUVdaTU8wRkJRVUU3UVVGQlFTeHZRMEZyUWtrN1FVRkRTU3hoUVVGUExFdEJRVXRvYUVJc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRXJaMElzZFVKQlFYQkNPMEZCUTBnN1FVRndRa3c3UVVGQlFUdEJRVUZCTEc5RFFYVkNTVHRCUVVOSkxHRkJRVThzUzBGQlMycG9RaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVdkb1FpeDFRa0ZCY0VJN1FVRkRTRHRCUVhwQ1REdEJRVUZCTzBGQlFVRXNlVU5CTkVKSk8wRkJRMGtzVlVGQlNVTXNUMEZCVHl4SFFVRkhMRXRCUVV0dWFFSXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0ZyYUVJc05FSkJRVE5DTEVOQlJFb3NRMEZETmtRN08wRkJRM3BFTEZWQlFVazNSaXhQUVVGUExFZEJRVWNzUzBGQlMzWmlMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoYldoQ0xEUkNRVUV6UWl4RFFVWktMRU5CUlRaRU96dEJRVU42UkN4aFFVRlBNMmhDTEdsRVFVRlBMRU5CUVVNMGFFSXNiMEpCUVZJc1EwRkJOa0l2Uml4UFFVRTNRaXhGUVVGelF6UkdMRTlCUVhSRExFTkJRVkE3UVVGRFNEdEJRV2hEVER0QlFVRkJPMEZCUVVFc2RVTkJiVU5KTzBGQlEwa3NWVUZCU1VFc1QwRkJUeXhIUVVGSExFdEJRVXR1YUVJc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRnhhRUlzTUVKQlFUTkNMRU5CUkVvc1EwRkRNa1E3TzBGQlEzWkVMRlZCUVVsb1J5eFBRVUZQTEVkQlFVY3NTMEZCUzNaaUxFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhjMmhDTERCQ1FVRXpRaXhEUVVaS0xFTkJSVEpFT3p0QlFVTjJSQ3hoUVVGUE9XaENMR2xFUVVGUExFTkJRVU0wYUVJc2IwSkJRVklzUTBGQk5rSXZSaXhQUVVFM1FpeEZRVUZ6UXpSR0xFOUJRWFJETEVOQlFWQTdRVUZEU0R0QlFYWkRURHRCUVVGQk8wRkJRVUVzZFVOQk1FTkpPMEZCUTBrc1ZVRkJTVUVzVDBGQlR5eEhRVUZITEV0QlFVdHVhRUlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGMWFFSXNlVUpCUVROQ0xFTkJSRW9zUTBGRE1FUTdPMEZCUTNSRUxGVkJRVWxzUnl4UFFVRlBMRWRCUVVjc1MwRkJTM1ppTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGQyaENMSGxDUVVFelFpeERRVVpLTEVOQlJUQkVPenRCUVVOMFJDeGhRVUZQYUdsQ0xHbEVRVUZQTEVOQlFVTTBhRUlzYjBKQlFWSXNRMEZCTmtJdlJpeFBRVUUzUWl4RlFVRnpRelJHTEU5QlFYUkRMRU5CUVZBN1FVRkRTRHRCUVRsRFREdEJRVUZCTzBGQlFVRXNjME5CYVVSSk8wRkJRMGtzWVVGQlR5eExRVUZMYm1oQ0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhlV0VzYTBKQlFYQkNPMEZCUTBnN1FVRnVSRXc3UVVGQlFUdEJRVUZCTEdsRFFYTkVTVHRCUVVOSkxHRkJRVThzUzBGQlN6TmhMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoZDJFc1owSkJRWEJDTzBGQlEwZzdRVUY0UkV3N1FVRkJRVHRCUVVGQkxEQkRRVEpFU1R0QlFVTkpMR0ZCUVU4c1MwRkJTekZoTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGVXaENMR2xDUVVGd1FqdEJRVU5JTzBGQk4wUk1PMEZCUVVFN1FVRkJRU3h2UTBGblJVazdRVUZEU1N4aFFVRlBMRXRCUVVzemFFSXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0ZyWWl4WFFVRndRanRCUVVOSU8wRkJiRVZNTzBGQlFVRTdRVUZCUVN4blJFRnhSVWs3UVVGRFNTeGhRVUZQTEV0QlFVdHdZaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVcxaUxIZENRVUZ3UWp0QlFVTklPMEZCZGtWTU8wRkJRVUU3UVVGQlFTeHBSRUV3UlVrN1FVRkRTU3hWUVVGSmRVY3NUMEZCVHl4SFFVRkhMRXRCUVVzMWFFSXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0V3YUVJc1QwRkJNMEk3UVVGRFFTeFZRVUZKTEVOQlFVTkJMRTlCUVV3c1JVRkJZeXhQUVVGUExFVkJRVkE3UVVGRlpDeGhRVUZQUVN4UFFVRlBMRU5CUVVONFVDeEhRVUZTTEVOQlFWa3NWVUZCUTNsUUxFMUJRVVFzUlVGQldUdEJRVU16UWl4bFFVRlBMRWxCUVVsRExIRkNRVUZLTEVOQlFUQkNSQ3hOUVVFeFFpeERRVUZRTzBGQlEwZ3NUMEZHVFN4RFFVRlFPMEZCUjBnN1FVRnFSa3c3TzBGQlFVRTdRVUZCUVR0QlFXOUdUeXhKUVVGTlF5eHhRa0ZCWWp0QlFVRkJPMEZCUVVFN1FVRkZTVHRCUVVOQk8wRkJRMEVzYlVOQlEwRTdRVUZCUVRzN1FVRkJRU3h6UTBGRVpUTmFMRWxCUTJZN1FVRkVaVUVzVlVGRFpqdEJRVUZCT3p0QlFVTkpMRkZCUVVkQkxFbEJRVWtzUTBGQlEzVkhMRTFCUVV3c1MwRkJaMElzUTBGQmJrSXNSVUZCYzBJN1FVRkRiRUlzVjBGQlMzUlBMRlZCUVV3c1IwRkJhMElyU0N4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGS0xFTkJRVkU1U0N4WFFVRXhRanRCUVVOQkxGZEJRVXN3YUVJc1owSkJRVXdzUjBGQmQwSTFXaXhKUVVGSkxFTkJRVU1zUTBGQlJDeERRVUZLTEVOQlFWRTJXaXhyUWtGQlVpeERRVUV5UWtNc1YwRkJNMElzVFVGQk5FTXNTMEZCY0VVN1FVRkRRU3hYUVVGTFF5eFZRVUZNTEVkQlFXdENReXhSUVVGUkxFTkJRVU5vWVN4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGS0xFTkJRVkZwWVN4WFFVRlVMRVZCUVhGQ0xFVkJRWEpDTEVOQlFURkNPMEZCUTBFc1YwRkJTME1zVlVGQlRDeEhRVUZyUWtZc1VVRkJVU3hEUVVGRGFHRXNTVUZCU1N4RFFVRkRMRU5CUVVRc1EwRkJTaXhEUVVGUmJXRXNWMEZCVkN4RlFVRnhRaXhGUVVGeVFpeERRVUV4UWp0QlFVTklMRXRCVEVRc1RVRkxUeXhKUVVGSGJtRXNTVUZCU1N4RFFVRkRkVWNzVFVGQlRDeExRVUZuUWl4RFFVRnVRaXhGUVVGelFqdEJRVU42UWl4WFFVRkxkRThzVlVGQlRDeEhRVUZyUWl0SUxFbEJRVWtzUTBGQlF5eERRVUZFTEVOQlFYUkNPMEZCUTBFc1YwRkJTelJhTEdkQ1FVRk1MRWRCUVhkQ05Wb3NTVUZCU1N4RFFVRkRMRU5CUVVRc1EwRkJOVUk3UVVGRFFTeFhRVUZMYTJFc1ZVRkJUQ3hIUVVGclFteGhMRWxCUVVrc1EwRkJReXhEUVVGRUxFTkJRWFJDTzBGQlEwRXNWMEZCU3l0YUxGVkJRVXdzUjBGQmEwSXZXaXhKUVVGSkxFTkJRVU1zUTBGQlJDeERRVUYwUWp0QlFVTklPMEZCUTBvN08wRkJha0pNTzBGQlFVRTdRVUZCUVN3clFrRnZRa2s3UVVGRFNTeHRRMEZCYzBJc1MwRkJTeTlJTEZWQlFUTkNMR2xEUVVFMFJDeExRVUZMTW1oQ0xHZENRVUZxUlN3eVFrRkJhMGNzUzBGQlMwMHNWVUZCZGtjc01rSkJRV3RKTEV0QlFVdElMRlZCUVhaSk8wRkJRMGc3UVVGMFFrdzdPMEZCUVVFN1FVRkJRVHRCUVhsQ1R5eEpRVUZOTTFnc2QwSkJRV0k3UVVGQlFUdEJRVUZCTzBGQlJVa3NiME5CUVZscFF5eEZRVUZhTEVWQlEwRTdRVUZCUVRzN1FVRkRTU3hUUVVGTE5VMHNSVUZCVEN4SFFVRlZORTBzUlVGQlZqdEJRVU5CTEZOQlFVdDRUaXhOUVVGTUxFZEJRV01zU1VGQlNVTXNiMFJCUVVvc1JVRkJaRHRCUVVOQkxGTkJRVXRETEU5QlFVd3NSMEZCWlN4SlFVRkpReXcyUkVGQlNpeEZRVUZtTzBGQlEwZzdPMEZCVUV3N1FVRkJRVHRCUVVGQkxHZERRVlZKTzBGQlEwa3NWVUZCU1VNc1NVRkJTU3hIUVVGSExFVkJRVmc3UVVGRlFTeFhRVUZMU2l4TlFVRk1MRU5CUVZsTExIZENRVUZhTEVkQlFYVkRMRWxCUVhaRE8wRkJRMEVzVjBGQlMwd3NUVUZCVEN4RFFVRlpUU3h2UTBGQldpeEhRVUZ0UkN4TFFVRnVSRHRCUVVOQkxGZEJRVXRPTEUxQlFVd3NRMEZCV1U4c05FSkJRVm9zUjBGQk1rTXNTMEZCTTBNN1FVRkRRU3hYUVVGTFVDeE5RVUZNTEVOQlFWbFJMR2RDUVVGYUxFTkJRVFpDU2l4SlFVRTNRanRCUVVOQkxGZEJRVXRHTEU5QlFVd3NRMEZCWVU4c1ZVRkJZaXhEUVVGM1Frd3NTVUZCZUVJN1FVRkRRU3hoUVVGUExFbEJRVWxOTEdsRVFVRktMRU5CUVZrc1MwRkJTMFVzUlVGQmFrSXNSVUZCY1VKRExHZEVRVUZOTEVOQlFVTXdTeXgzUWtGQk5VSXNSVUZCYzBSdVRDeEpRVUYwUkN4RlFVRTBSQ3hKUVVFMVJDeERRVUZRTzBGQlEwZzdRVUZ1UWt3N08wRkJRVUU3UVVGQlFTeEpPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEYmtsQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJSVUVzU1VGQlRXMXFRaXhYUVVGWExFZEJRVWNzVDBGQmNFSTdPMGxCUlUxRExFYzdPenM3TzNkQ1FVVnJRanRCUVVOb1FpeGhRVUZQTEV0QlFVdERMR05CUVZvN1FVRkRTQ3hMTzNOQ1FVVnBRbnBrTEVzc1JVRkJUenRCUVVOeVFpeFZRVUZITEV0QlFVdDVaQ3hqUVVGTUxFdEJRWGRDZW1Rc1MwRkJNMElzUlVGQmEwTTdRVUZET1VJN1FVRkRTRHM3UVVGRlJDeFhRVUZMZVdRc1kwRkJUQ3hIUVVGelFucGtMRXRCUVhSQ08wRkJRMEV6UXl4alFVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSXNTVUZCU1VNc1YwRkJTaXhEUVVGblFpeGxRVUZvUWl4RlFVRnBRenRCUVVGRFF5eGpRVUZOTEVWQlFVVjNRenRCUVVGVUxFOUJRV3BETEVOQlFYWkNPMEZCUTBnN096dEJRVVZFTEdWQlFWazJSeXhMUVVGYUxFVkJRVzFDYTFVc1dVRkJia0lzUlVGQmFVTXlReXhoUVVGcVF5eEZRVUZuUkRWWExFOUJRV2hFTEVWQlEwRTdRVUZCUVRzN1FVRkRTU3hUUVVGTE5sY3NUVUZCVEN4SFFVRmpPVmNzUzBGQlpEdEJRVU5CTEZOQlFVc3JWeXhoUVVGTUxFZEJRWEZDTjBNc1dVRkJja0k3UVVGRFFTeFRRVUZMT0VNc1VVRkJUQ3hIUVVGblFpOVhMRTlCUVdoQ08wRkJRMEVzVTBGQlMyZFlMSE5DUVVGTUxFZEJRVGhDTEV0QlFUbENPMEZCUTBFc1UwRkJTME1zWTBGQlRDeEhRVUZ6UWl4VlFVRlZUQ3hoUVVGb1F6dEJRVU5CTEZOQlFVdE5MRWxCUVV3c1IwRkJXWHBoTEU5QlFWbzdRVUZEUVN4VFFVRkxka29zVFVGQlRDeEhRVUZqTEVsQlFVbERMRzlFUVVGS0xFVkJRV1E3UVVGRFFTeFRRVUZMWjJ0Q0xFdEJRVXdzUjBGQllTeEpRVUZKT1doQ0xITkVRVUZLTEVWQlFXSTdRVUZGUVN4VFFVRkxLMmhDTEcxQ1FVRk1MRWRCUVRKQ0xFbEJRVE5DTzBGQlEwRXNVMEZCUzBNc1lVRkJUQ3hIUVVGelFpeEpRVUYwUWp0QlFVTkJMRk5CUVV0RExHRkJRVXdzUjBGQmMwSXNTVUZCZEVJN1FVRkRRU3hUUVVGTFF5eFhRVUZNTEVkQlFYTkNMRXRCUVhSQ08wRkJRMEVzVTBGQlMwTXNOa0pCUVV3c1IwRkJjVU1zUzBGQmNrTXNRMEZrU2l4RFFXZENTVHM3UVVGRFFTeFRRVUZMUXl4blFrRkJUQ3hIUVVGM1FpeEpRVUZKTTFnc2MwUkJRVW9zUTBGQmFVSXNTMEZCU3l0WExFMUJRWFJDTEVWQlFUaENMRXRCUVV0RkxGRkJRVzVETEVWQlFUWkRMRU5CUVRkRExFTkJRWGhDTzBGQlJVRXNVMEZCUzFjc1dVRkJUQ3hIUVVGdlFpeEpRVUZ3UWp0QlFVTkJMRk5CUVV0RExGZEJRVXdzUjBGQmJVSXNTVUZCYmtJN1FVRkRRU3hUUVVGTFF5eFhRVUZNTEVkQlFXMUNMRWxCUVc1Q0xFTkJja0pLTEVOQmRVSkpPenRCUVVOQkxGTkJRVXRETEcxQ1FVRk1MRWRCUVRKQ0xFbEJRVE5DTzBGQlEwRXNVMEZCUzBNc2RVSkJRVXdzUjBGQkswSXNTVUZCTDBJN1FVRkRRU3hUUVVGTFF5eHBRa0ZCVEN4SFFVRjVRaXhEUVVGNlFqdEJRVU5CTEZOQlFVdERMSGREUVVGTUxFZEJRV2RFTEVOQlFXaEVPMEZCUTBFc1UwRkJTME1zZDBKQlFVd3NSMEZCWjBNc1NVRkJhRU03UVVGRlFTeFRRVUZMUXl4WlFVRk1MRWRCUVc5Q0xFbEJRWEJDTzBGQlEwRXNVMEZCUzBNc1kwRkJUQ3hIUVVGelFpeExRVUYwUWp0QlFVVkJMRk5CUVV0RExHZENRVUZNTEVkQlFYZENMRWxCUVhoQ08wRkJRMEVzVTBGQlMwTXNiVUpCUVV3c1IwRkJNa0lzU1VGQk0wSTdRVUZGUVN4VFFVRkxReXgzUWtGQlRDeEhRVUZuUXl4SlFVRm9RenRCUVVOQkxGTkJRVXRETEcxQ1FVRk1MRWRCUVRKQ0xFdEJRVE5DTzBGQlEwRXNVMEZCUzBNc2JVSkJRVXdzUjBGQk1rSXNTMEZCTTBJN1FVRkRRU3hUUVVGTFF5eDFRa0ZCVEN4SFFVRXJRaXhKUVVFdlFqdEJRVU5CTEZOQlFVdERMSGRDUVVGTUxFZEJRV2RETEVOQlFXaERPMEZCUTBFc1UwRkJTME1zYjBOQlFVd3NSMEZCTkVNc1EwRkJOVU03UVVGRFFTeFRRVUZMUXl4M1FrRkJUQ3hIUVVGblF5eERRVUZvUXp0QlFVTkJMRk5CUVV0RExIRkNRVUZNTEVkQlFUWkNMRU5CUVRkQ08wRkJSVUVzVTBGQlMwTXNNa0pCUVV3c1IwRkJiVU1zYTBSQlFXNURPMEZCUTBFc1UwRkJTME1zSzBKQlFVd3NSMEZCZFVNc2JVSkJRWFpETzBGQlEwRXNVMEZCUzBNc2JVSkJRVXdzUjBGQk1rSXNaMEpCUVROQ08wRkJSVUVzVTBGQlMwTXNWMEZCVEN4SFFVRnJReXhKUVVGc1F6dEJRVU5CTEZOQlFVdERMSFZDUVVGTUxFZEJRV3RETEVsQlFXeERPMEZCUTBFc1UwRkJTME1zYTBKQlFVd3NSMEZCYTBNc1NVRkJiRU03UVVGRFNEczdPenQxUTBGSFJEdEJRVU5KTEZkQlFVdERMRTlCUVV3c1IwRkJaU3hKUVVGSlF5dzBSRUZCU2l4RFFVRnJRaXhKUVVGc1FpeERRVUZtTzBGQlEwRXNZVUZCVHl4TFFVRkxSQ3hQUVVGYU8wRkJRMGc3T3p0M1EwRkhSRHRCUVVOSkxGZEJRVXRCTEU5QlFVd3NSMEZCWlN4SlFVRkpReXcwUkVGQlNpeERRVUZyUWl4SlFVRnNRaXhEUVVGbU8wRkJRMEVzVjBGQlMwUXNUMEZCVEN4RFFVRmhiRzFDTEUxQlFXSXNRMEZCYjBKMVZpeHBRa0ZCY0VJc1IwRkJkME1zUzBGQmVFTTdRVUZEUVN4aFFVRlBMRXRCUVVzeVVTeFBRVUZhTzBGQlEwZzdPenR2UTBGSFJEdEJRVU5KTEZkQlFVdEZMRmRCUVV3c1IwRkJiVUlzU1VGQlNVTXNkVVJCUVVvc1EwRkJaU3hKUVVGbUxFTkJRVzVDTzBGQlEwRXNZVUZCVHl4TFFVRkxSQ3hYUVVGYU8wRkJRMGc3T3pzMFFrRkZUenRCUVVWS0xGVkJRVWtzUTBGQlF5eExRVUZMTlVJc1dVRkJUaXhKUVVGelFpeERRVUZETEV0QlFVdERMRmRCUVdoRExFVkJRMEU3UVVGRFNUdEJRVU5CTEdGQlFVdFVMRWxCUVV3c1EwRkJWWE5ETEVsQlFWWXNRMEZCWlN3MFJrRkJaanM3UVVGRFFTeGpRVUZOTEVsQlFVazNha0lzUzBGQlNpeERRVUZWTERSR1FVRldMRU5CUVU0N1FVRkRTRHM3UVVGRlJDeFZRVUZKTEVOQlFVTXNTMEZCU3pocVFpeGhRVUZNTEVOQlFXMUNMRXRCUVVzMVF5eE5RVUY0UWl4RFFVRk1MRVZCUTBFN1FVRkRTVHRCUVVOQkxHRkJRVXRCTEUxQlFVd3NSMEZCWXl4RlFVRmtPenRCUVVOQkxHRkJRVXRMTEVsQlFVd3NRMEZCVlhORExFbEJRVllzUTBGQlpTeDFSRUZCWmp0QlFVTklPenRCUVVWRUxGVkJRVWtzUTBGQlF5eExRVUZMUlN4eFFrRkJUQ3hEUVVFeVFpeExRVUZMZWtNc1kwRkJhRU1zUTBGQlRDeEZRVU5CTzBGQlEwazdRVUZEUVN4aFFVRkxRU3hqUVVGTUxFZEJRWE5DTEVWQlFYUkNPenRCUVVOQkxHRkJRVXRETEVsQlFVd3NRMEZCVlhORExFbEJRVllzUTBGQlpTeDFSRUZCWmp0QlFVTklPenRCUVVWRUxGZEJRVXRITEZWQlFVdzdPMEZCUTBFc1YwRkJTME1zYVVOQlFVdzdPMEZCUlVFc1YwRkJTMWdzVjBGQlRDeEhRVUZ0UWxrc2EwUkJRVThzUTBGQlEwTXNTVUZCTTBJN08wRkJRMEVzVlVGQlNTeExRVUZMTDBNc1VVRkJUQ3hKUVVGcFFpeEpRVUZ5UWl4RlFVTkJPMEZCUTBrc1lVRkJTMGNzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExEQkNRVUZtT3p0QlFVTkJMR0ZCUVV0d1JDeGpRVUZNTEVkQlFYTkNjVVFzYjBSQlFWTXNRMEZCUTBNc1owSkJRV2hET3p0QlFVTkJMR0ZCUVVzNVF5eExRVUZNTEVOQlFWY3JReXhQUVVGWUxFZEJTRW9zUTBGSE1FSTdPMEZCUTNwQ0xFOUJURVFzVFVGUFFUdEJRVU5KTEdGQlFVdG9SQ3hKUVVGTUxFTkJRVlUyUXl4SlFVRldMRU5CUVdVc05FSkJRV1k3TzBGQlEwRXNZVUZCUzNCRUxHTkJRVXdzUjBGQmMwSnhSQ3h2UkVGQlV5eERRVUZEUnl4UlFVRm9RenRCUVVOSU8wRkJRMG9zU3l4RFFVVkVPMEZCUTBFN1FVRkRRVHM3T3p0dlEwRkRaMEpvUnl4WkxFVkJRMmhDTzBGQlEwa3NWMEZCUzIxRUxHRkJRVXdzUjBGQmNVSnVSQ3haUVVGeVFqdEJRVU5CTEdGQlFVOHNTVUZCVUR0QlFVTklMRXNzUTBGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dHZRMEZEWjBKcFJ5eFpMRVZCUTJoQ08wRkJRMGtzVjBGQlN5OURMR0ZCUVV3c1IwRkJjVUlyUXl4WlFVRnlRanRCUVVOQkxHRkJRVThzU1VGQlVEdEJRVU5JTEVzc1EwRkZSRHRCUVVOQk8wRkJRMEU3T3pzN2IwTkJRMmRDYmtjc1dTeEZRVU5vUWp0QlFVTkpMRlZCUVVrc1MwRkJTMjlITEdGQlFVd3NTVUZCYzBKTUxHOUVRVUZUTEVOQlFVTkhMRkZCUVhCRExFVkJRMGtzVDBGQlR5eExRVUZRTzBGQlJVb3NWVUZCU1Vjc1IwRkJSeXhIUVVGSExFdEJRVXQ0UkN4aFFVRm1PMEZCUTBFc1YwRkJTMEVzWVVGQlRDeEhRVUZ4UWpkRExGbEJRWEpDT3p0QlFVTkJMRlZCUVVrc1MwRkJTM05ITEhOQ1FVRk1MRU5CUVRSQ1JDeEhRVUUxUWl4RFFVRktMRVZCUTBFN1FVRkRTU3hoUVVGTFJTeDVRa0ZCVER0QlFVTklMRTlCU0VRc1RVRkxRVHRCUVVOSkxGbEJRVWtzUzBGQlMzQkVMRzFDUVVGTUxFbEJRVFJDTEVsQlFXaERMRVZCUTBFN1FVRkRTU3hsUVVGTFFTeHRRa0ZCVEN4SFFVRXlRaXhKUVVGSmNFVXNNa1ZCUVVvc1JVRkJNMEk3UVVGRFNEczdRVUZGUkN4aFFVRkxiMFVzYlVKQlFVd3NRMEZCZVVJM1JDeDVRa0ZCZWtJc1IwRkJjVVJCTEdsR1FVRjVRaXhEUVVGRFN5eDVRa0ZCTDBVN1FVRkRRWEprTEdkQ1FVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSXNTVUZCU1VNc1YwRkJTaXhEUVVGblFpeHpRa0ZCYUVJc1JVRkJkME03UVVGQlEwTXNaMEpCUVUwc1JVRkJSU3hMUVVGTE1HZENPMEZCUVdRc1UwRkJlRU1zUTBGQmRrSTdRVUZEU0RzN1FVRkZSQ3hoUVVGUExFbEJRVkE3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN05rTkJRM2xDY1VRc01rSXNSVUZEZWtJN1FVRkRTU3hWUVVGSkxFdEJRVXRLTEdGQlFVd3NTVUZCYzBKTUxHOUVRVUZUTEVOQlFVTlZMR1ZCUVhCRExFVkJRMGtzVDBGQlR5eExRVUZRTzBGQlJVb3NWVUZCU1Vvc1IwRkJSeXhIUVVGSExFdEJRVXM1UXl3MlFrRkJaanRCUVVOQkxGZEJRVXRCTERaQ1FVRk1MRWRCUVhGRGFVUXNNa0pCUVhKRE96dEJRVU5CTEZWQlFVbEJMREpDUVVFeVFpeEpRVUZKTEVOQlFVTklMRWRCUVhCRExFVkJRMEU3UVVGRFNUdEJRVU5CTEdGQlFVdEZMSGxDUVVGTU8wRkJRMGc3TzBGQlJVUXNZVUZCVHl4SlFVRlFPMEZCUTBnc1N5eERRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMmREUVVOWlJ5eFJMRVZCUTFvN1FVRkRTU3hWUVVGSkxFdEJRVXRPTEdGQlFVd3NTVUZCYzBJc1MwRkJTMEVzWVVGQlRDeEpRVUZ6UWt3c2IwUkJRVk1zUTBGQlEwY3NVVUZCTVVRc1JVRkRTU3hQUVVGUExFdEJRVkE3UVVGRlNpeFZRVUZKVVN4UlFVRlJMRWxCUVVrc1MwRkJTM0JFTEZkQlFYSkNMRVZCUTBrc1QwRkJUeXhKUVVGUUxFTkJURklzUTBGUFNUczdRVUZEUVN4WFFVRkxRU3hYUVVGTUxFZEJRVzFDYjBRc1VVRkJia0k3TzBGQlEwRXNWMEZCUzBnc2VVSkJRVXc3TzBGQlJVRXNZVUZCVHl4SlFVRlFPMEZCUTBnc1N5eERRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdkME5CUTI5Q2JrZ3NiVUlzUlVGRGNFSTdRVUZEU1N4WFFVRkxNa1FzYzBKQlFVd3NSMEZCT0VJelJDeHRRa0ZCT1VJN1FVRkRTQ3hMTEVOQlJVUTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdOa0pCUTFOMFZDeExMRVZCUTFRN1FVRkRTU3hWUVVGSkxFdEJRVXR6WVN4aFFVRk1MRWxCUVhOQ1RDeHZSRUZCVXl4RFFVRkRSeXhSUVVGd1F5eEZRVU5KTEU5QlFVOHNTMEZCVUR0QlFVVktMRmRCUVV0MFJDeE5RVUZNTEVkQlFXTXNSVUZCWkN4RFFVcEtMRU5CU1hOQ096dEJRVVZzUWl4VlFVRkpMRU5CUVVNc1MwRkJTelJETEdGQlFVd3NRMEZCYlVJeFdpeExRVUZ1UWl4RFFVRk1MRVZCUTBFN1FVRkRTU3hoUVVGTGJWZ3NTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTEc5Q1FVRm1PenRCUVVOQkxHVkJRVThzUzBGQlVEdEJRVU5JT3p0QlFVVkVMRmRCUVV0c1JDeE5RVUZNTEVkQlFXTTVWeXhMUVVGa08wRkJRMEVzVjBGQlN6QllMR2RDUVVGTUxFTkJRWE5DZGxnc1MwRkJkRUlzUjBGQk9FSklMRXRCUVRsQ08wRkJRMEVzWVVGQlR5eEpRVUZRTzBGQlEwZ3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3Y1VOQlEybENiMVFzVHl4RlFVTnFRanRCUVVOSkxGVkJRVWtzUzBGQlMydElMR0ZCUVV3c1NVRkJjMEpNTEc5RVFVRlRMRU5CUVVOVkxHVkJRV2hETEVsQlFXMUVMRXRCUVV0c1JDdzJRa0ZCTlVRc1JVRkJNa1k3UVVGRGRrWXNaVUZCVHl4TFFVRlFPMEZCUTBnN08wRkJSVVFzVjBGQlMxQXNZMEZCVEN4SFFVRnpRaXhGUVVGMFFpeERRVXhLTEVOQlN6aENPenRCUVVVeFFpeFZRVUZKTEVOQlFVTXNTMEZCUzNsRExIRkNRVUZNTEVOQlFUSkNka2NzVDBGQk0wSXNRMEZCVEN4RlFVTkJPMEZCUTBrc1lVRkJTeXRFTEVsQlFVd3NRMEZCVlRaRExFbEJRVllzUTBGQlpTdzBRa0ZCWmpzN1FVRkRRU3hsUVVGUExFdEJRVkE3UVVGRFNEczdRVUZGUkN4WFFVRkxPVU1zWTBGQlRDeEhRVUZ6UWl4VlFVRlZPVVFzVDBGQmFFTTdRVUZEUVN4WFFVRkxaMFVzUzBGQlRDeERRVUZYTjJoQ0xFOUJRVmdzUjBGQmNVSXNTMEZCU3pKb1FpeGpRVUV4UWp0QlFVTkJMR0ZCUVU4c1NVRkJVRHRCUVVOSU96czdPMEZCVDBRN096czdPenM3SzBKQlQxY3lSQ3hYTEVWQlFXRkRMRlVzUlVGRGVFSTdRVUZEU1N4WFFVRkxia1FzV1VGQlRDeEhRVUZ2UW10RUxGZEJRWEJDTzBGQlEwRXNWMEZCUzJwRUxGZEJRVXdzUjBGQmJVSnJSQ3hWUVVGdVFqdEJRVU5JTEVzc1EwRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dG5SRUZGUVR0QlFVTkpMRlZCUVVrc1MwRkJTelZDTEZkQlFVd3NTVUZCYjBKWkxHdEVRVUZQTEVOQlFVTkRMRWxCUVdoRExFVkJRMGtzVDBGQlR5eEpRVUZRTEVOQlJsSXNRMEZGY1VJN08wRkJSV3BDTEZWQlFVa3NTMEZCUzJJc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRMmxDTEU5QlFUVkNMRWxCUVhWRExFdEJRVXMxUWl4MVFrRkJUQ3hEUVVFMlFqWkNMRkZCUVhoRkxFVkJRMEU3UVVGRFNTeGhRVUZMT1VJc1YwRkJUQ3hIUVVGdFFsa3NhMFJCUVU4c1EwRkJRME1zU1VGQk0wSTdRVUZEUVN4bFFVRlBMRWxCUVZBN1FVRkRTRHM3UVVGRlJDeFZRVUZKTEV0QlFVdGlMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVOdFFpeFhRVUUxUWl4SlFVRXlReXhMUVVGTE4wSXNhMEpCUVV3c1EwRkJkMEkwUWl4UlFVRjJSU3hGUVVOQk8wRkJRMGtzWVVGQlN6bENMRmRCUVV3c1IwRkJiVUpaTEd0RVFVRlBMRU5CUVVORExFbEJRVE5DTzBGQlEwRXNaVUZCVHl4SlFVRlFPMEZCUTBnN08wRkJSVVFzWVVGQlR5eExRVUZRTzBGQlEwZ3NTeXhEUVVWRU8wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3pKQ1FVVkJPMEZCUTBrc1YwRkJTelZETEVsQlFVd3NRMEZCVlhoaExFZEJRVllzUTBGQll5eHhRa0ZCWkRzN1FVRkZRU3hWUVVGSkxFdEJRVXN5WkN4aFFVRk1MRWxCUVhOQ1RDeHZSRUZCVXl4RFFVRkRSeXhSUVVGd1F5eEZRVUU0UXp0QlFVTXhReXhoUVVGTGFrUXNTVUZCVEN4RFFVRlZjME1zU1VGQlZpeERRVUZsTEhkRVFVRm1PenRCUVVOQkxHVkJRVThzUzBGQlVEdEJRVU5JT3p0QlFVVkVMRlZCUVVrc1EwRkJReXhMUVVGTFF5eGhRVUZNTEVOQlFXMUNMRXRCUVVzMVF5eE5RVUY0UWl4RFFVRkVMRWxCUVc5RExFTkJRVU1zUzBGQlN6WkRMSEZDUVVGTUxFTkJRVEpDTEV0QlFVdDZReXhqUVVGb1F5eERRVUY2UXl4RlFVTkJPMEZCUTBrc1lVRkJTME1zU1VGQlRDeERRVUZWYzBNc1NVRkJWaXhEUVVGbExHbEVRVUZtT3p0QlFVTkJMR1ZCUVU4c1MwRkJVRHRCUVVOSU96dEJRVVZFTEZkQlFVdFFMRmRCUVV3c1IwRkJiVUpaTEd0RVFVRlBMRU5CUVVOcFFpeFBRVUV6UWp0QlFVTkJMRmRCUVVzMVFpeDFRa0ZCVEN4SFFVRXJRaXhKUVVGSkswSXNNa1JCUVVvc1EwRkRPVUk3UVVGRFIwTXNhMEpCUVZVc1JVRkJSU3hMUVVSbU8wRkJSVWRJTEdkQ1FVRlJMRVZCUVVVc1MwRkdZanRCUVVkSGJtNUNMR1ZCUVU4c1JVRkJSU3hsUVVoYU8wRkJTVWQxYmtJc0swSkJRWFZDTEVWQlFVVXNTMEZLTlVJN1FVRkxSME1zTkVKQlFXOUNMRVZCUVVVc1MwRk1la0k3UVVGTlIzQllMSGRDUVVGblFpeEZRVUZGTzBGQlRuSkNMRTlCUkRoQ0xFTkJRUzlDTzBGQlZVRjZUaXhqUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4NVFrRkJhRUlzUlVGQk1rTTdRVUZCUTBNc1kwRkJUU3hGUVVGRkxFdEJRVXQzYVVJN1FVRkJaQ3hQUVVFelF5eERRVUYyUWpzN1FVRkRRU3hYUVVGTEwwSXNTMEZCVEN4RFFVRlhLME1zVDBGQldDeEhRVEZDU2l4RFFUQkNNRUk3T3p0QlFVTjBRaXhoUVVGUExFbEJRVkE3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN2VVTkJSVUU3UVVGRFNTeFZRVUZKTEVOQlFVTXNTMEZCUzJoQ0xIVkNRVUZNTEVOQlFUWkNhME1zYjBKQlFXeERMRVZCUTBFN1FVRkRTVHRCUVVOQk8wRkJRMGc3TzBGQlJVUXNWMEZCUzJ4RExIVkNRVUZNTEVOQlFUWkNhME1zYjBKQlFUZENMRWRCUVc5RUxFdEJRWEJFT3p0QlFVTkJMRlZCUVVrc1MwRkJTMnhETEhWQ1FVRk1MRU5CUVRaQ2FVTXNkVUpCUVdwRExFVkJRMEU3UVVGRFNUdEJRVU5CTEdGQlFVdHFSU3hKUVVGTUxFTkJRVlUyUXl4SlFVRldMRU5CUVdVc2RVWkJRV1k3TzBGQlEwRXNZVUZCUzJJc2RVSkJRVXdzUTBGQk5rSjBiRUlzVDBGQk4wSXNSMEZEU1N4eFEwRkJjVU1zUzBGQlMzTnNRaXgxUWtGQlRDeERRVUUyUW14V0xHZENRVVIwUlR0QlFVVkJlazRzWjBKQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xIbENRVUZvUWl4RlFVRXlRenRCUVVGRFF5eG5Ra0ZCVFN4RlFVRkZMRXRCUVV0M2FVSTdRVUZCWkN4VFFVRXpReXhEUVVGMlFqdEJRVU5JTEU5QlVFUXNUVUZUUVR0QlFVTkpPMEZCUTBFc1lVRkJTMmhETEVsQlFVd3NRMEZCVlRaRExFbEJRVllzUTBGQlpTeHRSMEZCWmpzN1FVRkRRU3hoUVVGTGMwSXNhVUpCUVV3N08wRkJRMEVzWVVGQlMwTXNhMEpCUVV3N1FVRkRTRHRCUVVOS0xFc3NRMEZGUkR0QlFVTkJPMEZCUTBFN096czdiME5CUlVFN1FVRkRTU3hWUVVGSkxFdEJRVXR5UXl4WFFVRk1MRWxCUVc5Q1dTeHJSRUZCVHl4RFFVRkRhVUlzVDBGQk5VSXNTVUZCZFVNc1MwRkJTelZDTEhWQ1FVRk1MRU5CUVRaQ05rSXNVVUZCZUVVc1JVRkJhMFk3UVVGRE9VVTdRVUZEU0RzN1FVRkZSQ3hWUVVGSkxFdEJRVXMzUWl4MVFrRkJUQ3hEUVVFMlFtdERMRzlDUVVFM1FpeEpRVUZ4UkN4RFFVRkRMRXRCUVV0c1F5eDFRa0ZCVEN4RFFVRTJRbWxETEhWQ1FVRjJSaXhGUVVOQk8wRkJRMGs3UVVGRFFUdEJRVU5CTEdGQlFVdEpMRXRCUVV3c1EwRkJWeXhKUVVGSmJsZ3NlVVJCUVVvc1IwRkJjMEp2V0N4VFFVRjBRaXhGUVVGWU8wRkJRMGc3TzBGQlEwUXNWMEZCUzBNc1owSkJRVXc3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096WkNRVVZCTzBGQlEwa3NWVUZCU1N4TFFVRkxjRUlzWVVGQlRDeEpRVUZ6UWt3c2IwUkJRVk1zUTBGQlEwY3NVVUZCY0VNc1JVRkJPRU03UVVGRE1VTXNaVUZCVHl4TFFVRlFPMEZCUTBnN08wRkJSVVFzVlVGQlNTeExRVUZMYkVJc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRME1zU1VGQmFFTXNSVUZCYzBNN1FVRkRiRU1zWlVGQlR5eExRVUZRTzBGQlEwZ3NUMEZRVEN4RFFWTkpPenM3UVVGRFFTeFhRVUZMZVVJc1MwRkJUQ3hEUVVGWExFbEJRVWx1V0N4NVJFRkJTaXhIUVVGelFtOVlMRk5CUVhSQ0xFVkJRVmc3TzBGQlEwRXNWMEZCUzBVc1UwRkJURHM3UVVGRFFTeGhRVUZQTEVsQlFWQTdRVUZEU0N4TExFTkJSVVE3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0MVEwRkRiVUkxYjBJc1VTeEZRVUZWUkN4WExFVkJRemRDTzBGQlEwa3NWVUZCU1N4TFFVRkxkMjVDTEdGQlFVd3NTVUZCYzBKTUxHOUVRVUZUTEVOQlFVTkhMRkZCUVhCRExFVkJRVGhETzBGQlF6RkRMR1ZCUVU4c1NVRkJTWGRDTERKRVFVRktMRU5CUVhGQ0xFdEJRWEpDTEVWQlFUUkNMRmxCUVRWQ0xFTkJRVkE3UVVGRFNEczdRVUZGUkN4VlFVRkpMRXRCUVVzeFF5eFhRVUZNTEVsQlFXOUNXU3hyUkVGQlR5eERRVUZEUXl4SlFVRm9ReXhGUVVGelF6dEJRVU5zUXl4bFFVRlBMRWxCUVVrMlFpd3lSRUZCU2l4RFFVRnhRaXhMUVVGeVFpeEZRVUUwUWl4VlFVRTFRaXhEUVVGUU8wRkJRMGc3TzBGQlJVUXNWVUZCU1VNc1pVRkJaU3hIUVVGSE4wb3NLMFJCUVdNc1EwRkJRemhLTEhGQ1FVRm1MRU5CUVhGRGFIQkNMRmRCUVhKRExFVkJRV3RFUXl4UlFVRnNSQ3hEUVVGMFFqdEJRVU5CT0c5Q0xIRkNRVUZsTEVOQlFVTXhiMElzVFVGQmFFSXNSMEZCZVVJc1MwRkJTMEVzVFVGQk9VSTdRVUZEUVN4VlFVRkpObFVzVjBGQlZ5eEhRVUZITmxRc1pVRkJaU3hEUVVGRFNpeFRRVUZvUWl4RlFVRnNRanRCUVVOQkxGZEJRVXQyUXl4WFFVRk1MRWRCUVcxQ1dTeHJSRUZCVHl4RFFVRkRiVUlzVjBGQk0wSTdRVUZEUVN4WFFVRkxOMElzYTBKQlFVd3NSMEZCTUVJc1NVRkJTVEpETEN0RVFVRktMRU5CUTNSQ2FIQkNMRkZCUkhOQ0xFVkJRMXBwY0VJc01FUkJRV1VzUTBGQlEwTXNVVUZFU2l4RlFVTmpibkJDTEZkQlJHUXNSVUZETWtKclZpeFhRVVF6UWl4elJVRkZkVU5zVml4WFFVRlhMRWRCUVVjc1MwRkdja1FzUlVGQk1VSTdPMEZCUjBFc1ZVRkJTU3hMUVVGTE1HOUNMRXRCUVV3c1EwRkJWM2hVTEZkQlFWZ3NRMEZCU2l4RlFVTkJPMEZCUTBrc1lVRkJTMjlTTEd0Q1FVRk1MRU5CUVhkQ09FTXNTVUZCZUVJc09FTkJRVzFGY0hCQ0xGZEJRVmNzUjBGQlJ5eExRVUZxUmp0QlFVTklPenRCUVVWRU1FUXNZMEZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzYjBKQlFXaENMRVZCUVhORE8wRkJRVU5ETEdOQlFVMHNSVUZCUlN4TFFVRkxlV2xDTzBGQlFXUXNUMEZCZEVNc1EwRkJka0k3UVVGRFFTeGhRVUZQTEVsQlFVbDNReXd5UkVGQlNpeERRVUZ4UWl4SlFVRnlRaXhGUVVFeVFpeHZRa0ZCTTBJc1EwRkJVRHRCUVVOSUxFc3NRMEZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdlVU5CUTNGQ04yOUNMRkVzUlVGQlZXMW1MR01zUlVGQlowSkRMRk1zUlVGQlYwTXNZU3hGUVVGbFF5eG5RaXhGUVVONlJUdEJRVUZCTEZWQlJESkdPRW9zVDBGRE0wWXNkVVZCUkhGSExFbEJRVWszYjBJc05rUkJRVW9zUlVGRGNrYzdRVUZCUVN4VlFVUXJTRzFoTEdWQlF5OUlMSFZGUVVScFNpeERRVU5xU2p0QlFVTkpMRlZCUVVrc1MwRkJTelpOTEdGQlFVd3NTVUZCYzBKTUxHOUVRVUZUTEVOQlFVTkhMRkZCUVhCRExFVkJRVGhETEU5QlFVOHNTVUZCU1hkQ0xESkVRVUZLTEVOQlFYRkNMRXRCUVhKQ0xFVkJRVFJDTEZsQlFUVkNMRU5CUVZBN1FVRkZPVU1zVlVGQlNYcEtMRk5CUVZNc1IwRkJSeXhEUVVGYUxFdEJRV3RDUXl4aFFVRmhMRWRCUVVjc1EwRkJhRUlzU1VGQmNVSkRMR2RDUVVGMlF5eERRVUZLTEVWQlFUaEVMRTlCUVU4c1NVRkJTWFZLTERKRVFVRktMRU5CUVhGQ0xFdEJRWEpDTEVWQlFUUkNMR3RFUVVFMVFpeERRVUZRTzBGQlJUbEVMRlZCUVVrc1MwRkJTekZETEZkQlFVd3NTVUZCYjBKWkxHdEVRVUZQTEVOQlFVTkRMRWxCUVdoRExFVkJRWE5ETEU5QlFVOHNTVUZCU1RaQ0xESkVRVUZLTEVOQlFYRkNMRXRCUVhKQ0xFVkJRVFJDTEZWQlFUVkNMRU5CUVZBN1FVRkRkRU1zVjBGQlN6RkRMRmRCUVV3c1IwRkJiVUpaTEd0RVFVRlBMRU5CUVVOdFFpeFhRVUV6UWp0QlFVVkJMRlZCUVVsdFFpeFJRVUZSTEVkQlFVZHdTeXdyUkVGQll5eERRVUZEY1Vzc2RVSkJRV1lzUTBGQmRVTjBjRUlzVVVGQmRrTXNSVUZCYVVSdFppeGpRVUZxUkN4RlFVRnBSVU1zVTBGQmFrVXNSVUZCTkVWRExHRkJRVFZGTEVWQlFUSkdReXhuUWtGQk0wWXNSVUZCTmtjMVJTeGxRVUUzUnl4RFFVRm1PMEZCUTBFeVR5eGpRVUZSTEVOQlFVTnFjRUlzVFVGQlZDeEhRVUZyUWl4TFFVRkxRU3hOUVVGMlFqdEJRVU5CYVhCQ0xHTkJRVkVzUTBGQlF5OXZRaXhQUVVGVUxFZEJRVzFDT0c5Q0xFOUJRVzVDTzBGQlEwRXNWVUZCU1c1VkxGZEJRVmNzUjBGQlIyOVZMRkZCUVZFc1EwRkJRMWdzVTBGQlZDeEZRVUZzUWp0QlFVTkJMRmRCUVV0eVF5eHJRa0ZCVEN4SFFVRXdRaXhKUVVGSk1rTXNLMFJCUVVvc1EwRkRkRUpvY0VJc1VVRkVjMElzUlVGRFdtbHdRaXd3UkVGQlpTeERRVUZEUXl4UlFVUktMRVZCUTJNdlNpeGpRVVJrTEVWQlF6aENiRXNzVjBGRU9VSXNiVVZCUlc5RGIxVXNVVUZCVVN4RFFVRkRSU3hoUVVGVUxFVkJSbkJETEVWQlFURkNPenRCUVVkQkxGVkJRVWtzUzBGQlMyUXNTMEZCVEN4RFFVRlhlRlFzVjBGQldDeERRVUZLTEVWQlEwRTdRVUZEU1N4aFFVRkxiMUlzYTBKQlFVd3NRMEZCZDBJNFF5eEpRVUY0UWl3NFEwRkJiVVZGTEZGQlFWRXNRMEZCUTBVc1lVRkJWQ3hGUVVGdVJUdEJRVU5JT3p0QlFVVkVPV3hDTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xHOUNRVUZvUWl4RlFVRnpRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTMEZCUzNscFFqdEJRVUZrTEU5QlFYUkRMRU5CUVhaQ08wRkJRMEVzWVVGQlR5eEpRVUZKZDBNc01rUkJRVW9zUTBGQmNVSXNTVUZCY2tJc1JVRkJNa0lzYjBKQlFUTkNMRU5CUVZBN1FVRkRTQ3hMTEVOQlJVUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenR4UTBGRGFVSTNiMElzVVN4RlFVRlZSQ3hYTEVWQlF6TkNPMEZCUVVFc1ZVRkVkME50WlN4M1FrRkRlRU1zZFVWQlJHMUZMRXRCUTI1Rk8wRkJRVUVzVlVGRU1FVnJUQ3hQUVVNeFJTeDFSVUZFYjBZc1NVRkJTVGR2UWl3MlJFRkJTaXhGUVVOd1JqczdRVUZEU1N4VlFVRkpMRXRCUVV0bmJrSXNZVUZCVEN4SlFVRnpRa3dzYjBSQlFWTXNRMEZCUTBjc1VVRkJjRU1zUlVGQk9FTTdRVUZETVVNc1pVRkJUeXhKUVVGSmQwSXNNa1JCUVVvc1EwRkJjVUlzUzBGQmNrSXNSVUZCTkVJc1dVRkJOVUlzUTBGQlVEdEJRVU5JT3p0QlFVVkVMRlZCUVVrc1MwRkJTekZETEZkQlFVd3NTVUZCYjBKWkxHdEVRVUZQTEVOQlFVTkRMRWxCUVdoRExFVkJRWE5ETzBGQlEyeERMR1ZCUVU4c1NVRkJTVFpDTERKRVFVRktMRU5CUVhGQ0xFdEJRWEpDTEVWQlFUUkNMRlZCUVRWQ0xFTkJRVkE3UVVGRFNEczdRVUZGUkN4VlFVRkpWeXhoUVVGaExFZEJRVWQyU3l3clJFRkJZeXhEUVVGRGQwc3NiVUpCUVdZc1EwRkJiVU14Y0VJc1YwRkJia01zUlVGQlowUkRMRkZCUVdoRUxFVkJRVEJFYTJVc2QwSkJRVEZFTEVOQlFYQkNPMEZCUTBGelRDeHRRa0ZCWVN4RFFVRkRjSEJDTEUxQlFXUXNSMEZCZFVJc1MwRkJTMEVzVFVGQk5VSTdRVUZEUVc5d1FpeHRRa0ZCWVN4RFFVRkRiSEJDTEU5QlFXUXNSMEZCZDBJNGIwSXNUMEZCZUVJN1FVRkRRU3hWUVVGSlRTeFRRVUZUTEVkQlFVZEdMR0ZCUVdFc1EwRkJRMlFzVTBGQlpDeEZRVUZvUWp0QlFVTkJMRmRCUVV0MlF5eFhRVUZNTEVkQlFXMUNXU3hyUkVGQlR5eERRVUZEYlVJc1YwRkJNMEk3UVVGRFFTeFhRVUZMTjBJc2EwSkJRVXdzUjBGQk1FSXNTVUZCU1RKRExDdEVRVUZLTEVOQlEzUkNhSEJDTEZGQlJITkNMRVZCUTFwcGNFSXNNRVJCUVdVc1EwRkJRMVVzVFVGRVNpeEZRVU5aTlhCQ0xGZEJSRm9zUlVGRGVVSXljRUlzVTBGRWVrSXNjVVZCUlhORExFTkJRVU16Y0VJc1YwRkJWeXhIUVVGSExFdEJRV1lzUlVGQmMwSnZZaXhQUVVGMFFpeERRVUU0UWl4RFFVRTVRaXhEUVVaMFF5eEZRVUV4UWpzN1FVRkhRU3hWUVVGSkxFdEJRVXR6VGl4TFFVRk1MRU5CUVZkcFFpeFRRVUZZTEVOQlFVb3NSVUZEUVR0QlFVTkpMR0ZCUVV0eVJDeHJRa0ZCVEN4RFFVRjNRamhETEVsQlFYaENMR3REUVVGMVJDeERRVUZEY0hCQ0xGZEJRVmNzUjBGQlJ5eExRVUZtTEVWQlFYTkNiMklzVDBGQmRFSXNRMEZCT0VJc1EwRkJPVUlzUTBGQmRrUTdRVUZEU0RzN1FVRkZSREZZTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xHOUNRVUZvUWl4RlFVRnpRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTMEZCUzNscFFqdEJRVUZrTEU5QlFYUkRMRU5CUVhaQ08wRkJRMEVzWVVGQlR5eEpRVUZKZDBNc01rUkJRVW9zUTBGQmNVSXNTVUZCY2tJc1JVRkJNa0lzYTBKQlFUTkNMRU5CUVZBN1FVRkRTQ3hMTEVOQlJVUTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdiME5CUTJkQ1pTeFJMRVZCUTJoQ08wRkJRMGtzVlVGQlNTeExRVUZMZWtRc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRMjFDTEZkQlFUVkNMRWxCUVRKRExFdEJRVXMzUWl4clFrRkJUQ3hEUVVGM1FqUkNMRkZCUVc1RkxFbEJRU3RGTEVOQlFVTXNTMEZCU3pWQ0xHdENRVUZNTEVOQlFYZENkMFFzYzBKQlFUVkhMRVZCUTBFN1FVRkRTU3hoUVVGTGVrWXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTERCRVFVRm1PenRCUVVOQkxHVkJRVThzU1VGQlNUWkRMSE5FUVVGS0xFTkJRV2RDTEV0QlFXaENMRVZCUVhWQ0xEQkVRVUYyUWl4RFFVRlFPMEZCUTBnN08wRkJSVVFzVjBGQlMzcEVMR3RDUVVGTUxFTkJRWGRDTUVRc2EwSkJRWGhDTEVOQlFUSkRTQ3hSUVVGUkxFZEJRVWNzZDBKQlFVZ3NSMEZCT0VJc2QwSkJRV3BHTzBGQlEwRXNWVUZCU1Vrc1UwRkJVeXhIUVVGSExFdEJRVXN6UkN4clFrRkJUQ3hEUVVGM1FqUkVMSGRDUVVGNFF6czdRVUZEUVN4WFFVRkxlRUlzUzBGQlRDeERRVUZYYlVJc1VVRkJVU3hIUVVOaUxFbEJRVWx1VEN3d1JFRkJTaXhEUVVGdlFpeExRVUZMTkVnc2EwSkJRVXdzUTBGQmQwSndiVUlzVVVGQk5VTXNSVUZCYzBSNWIwSXNVMEZCZEVRc1JVRkVZU3hIUVVWaUxFbEJRVWxzU3l3eVJFRkJTaXhEUVVGeFFpeExRVUZMTmtnc2EwSkJRVXdzUTBGQmQwSndiVUlzVVVGQk4wTXNSVUZCZFVSNWIwSXNVMEZCZGtRc1JVRkdUanM3UVVGSlFXcHNRaXhqUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4dlFrRkJhRUlzUlVGQmMwTTdRVUZCUTBNc1kwRkJUU3hGUVVGRkxFdEJRVXQ1YVVJN1FVRkJaQ3hQUVVGMFF5eERRVUYyUWp0QlFVTkJMR0ZCUVU4c1NVRkJTWGxFTEhORVFVRktMRU5CUVdkQ0xFbEJRV2hDTEVWQlFYTkNMRVZCUVhSQ0xFTkJRVkE3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dHRRMEZEWlM5TExGRXNSVUZEWmp0QlFVTkpMRlZCUVVsQkxGRkJRVkVzUTBGQlEycFFMRTFCUVZRc1NVRkJiVUlzUTBGQmRrSXNSVUZEUVR0QlFVTkpMR1ZCUVU4c1NVRkJTVzloTEN0RVFVRktMRU5CUVhsQ0xFdEJRWHBDTEVWQlFXZERMSEZDUVVGb1F5eERRVUZRTzBGQlEwZzdPMEZCUlVRc1ZVRkJTU3hMUVVGTEwwUXNWMEZCVEN4SlFVRnZRbGtzYTBSQlFVOHNRMEZCUTIxQ0xGZEJRVFZDTEVsQlFUSkRMRXRCUVVzM1FpeHJRa0ZCVEN4RFFVRjNRalJDTEZGQlFXNUZMRWxCUVN0RkxFTkJRVU1zUzBGQlN6VkNMR3RDUVVGTUxFTkJRWGRDT0VRc2IwSkJRVFZITEVWQlEwRTdRVUZEU1N4aFFVRkxMMFlzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExIZEVRVUZtT3p0QlFVTkJMR1ZCUVU4c1NVRkJTV2xFTEN0RVFVRktMRU5CUVhsQ0xFdEJRWHBDTEVWQlFXZERMREJDUVVGb1F5eERRVUZRTzBGQlEwZzdPMEZCUlVRc1YwRkJTemRFTEd0Q1FVRk1MRU5CUVhkQ0swUXNXVUZCZUVJc1owTkJRVFpFY2t3c1VVRkJOMFE3TzBGQlEwRXNWMEZCU3pCS0xFdEJRVXdzUTBGQlZ5eEpRVUZKYm1Rc2VVUkJRVW9zUTBGQmJVSXNTMEZCU3l0aExHdENRVUZNTEVOQlFYZENjRzFDTEZGQlFUTkRMRVZCUVhGRU9HVXNVVUZCY2tRc1JVRkJLMFF5U2l4VFFVRXZSQ3hGUVVGWU96dEJRVVZCYW14Q0xHTkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMRzlDUVVGb1FpeEZRVUZ6UXp0QlFVRkRReXhqUVVGTkxFVkJRVVVzUzBGQlMzbHBRanRCUVVGa0xFOUJRWFJETEVOQlFYWkNPMEZCUTBFc1lVRkJUeXhKUVVGSk5rUXNLMFJCUVVvc1EwRkJlVUlzU1VGQmVrSXNSVUZCSzBJc1lVRkJMMElzUTBGQlVEdEJRVU5JTEVzc1EwRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3ZDBOQlJVRTdRVUZEU1N4VlFVRkpMRXRCUVVzdlJDeFhRVUZNTEVsQlFXOUNXU3hyUkVGQlR5eERRVUZEYlVJc1YwRkJOVUlzU1VGQk1rTXNTMEZCU3pkQ0xHdENRVUZNTEVOQlFYZENORUlzVVVGQmRrVXNSVUZEUVR0QlFVTkpMR0ZCUVVzM1JDeEpRVUZNTEVOQlFWVTJReXhKUVVGV0xFTkJRV1VzYVVWQlFXWTdPMEZCUTBFc1pVRkJUeXhKUVVGSk5rTXNjMFJCUVVvc1EwRkJaMElzUzBGQmFFSXNSVUZCZFVJc2FVVkJRWFpDTEVOQlFWQTdRVUZEU0N4UFFVeE1MRU5CVDBrN096dEJRVU5CTEZWQlFVa3NTMEZCUzNwRUxHdENRVUZNTEVOQlFYZENaMFVzVjBGQk5VSXNSVUZEUVR0QlFVTkpMRmxCUVVsRExGTkJRVk1zUjBGQlJ5eEpRVUZKTVdZc2JVVkJRVW9zUlVGQmFFSTdRVUZEUVN4aFFVRkxlV0lzYTBKQlFVd3NRMEZCZDBKclJTeFZRVUY0UWl4RFFVRnRReXh4UTBGQmJrTTdPMEZCUTBFc1lVRkJTemxDTEV0QlFVd3NRMEZCVnpaQ0xGTkJRVk1zUTBGQlF6VkNMRk5CUVZZc1JVRkJXRHRCUVVOSUxFOUJURVFzVFVGUFFUdEJRVU5KTzBGQlEwRXNZVUZCUzNKRExHdENRVUZNTEVOQlFYZENkRm9zVFVGQmVFSXNRMEZCSzBJc1NVRkJMMElzUlVGQmNVTXNORVJCUVhKRE8wRkJRMGc3TzBGQlJVUjBTaXhqUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4dlFrRkJhRUlzUlVGQmMwTTdRVUZCUTBNc1kwRkJUU3hGUVVGRkxFdEJRVXQ1YVVJN1FVRkJaQ3hQUVVGMFF5eERRVUYyUWp0QlFVTkJMR0ZCUVU4c1NVRkJTWGxFTEhORVFVRktMRU5CUVdkQ0xFbEJRV2hDTEVWQlFYTkNMRVZCUVhSQ0xFTkJRVkE3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TUVOQlEzTkNPWEJDTEZFc1JVRkJWVVFzVnl4RlFVTm9RenRCUVVGQkxGVkJSRFpETW1Fc1pVRkROME1zZFVWQlJDdEVMRU5CUXk5RU8wRkJRVUVzVlVGRWEwVXdUeXhQUVVOc1JTeDFSVUZFTkVVc1NVRkJTVGR2UWl3MlJFRkJTaXhGUVVNMVJUdEJRVU5KTEZWQlFVa3NTMEZCUzJkdVFpeGhRVUZNTEVsQlFYTkNUQ3h2UkVGQlV5eERRVUZEUnl4UlFVRndReXhGUVVFNFF5eFBRVUZQTEVsQlFVbDNRaXd5UkVGQlNpeERRVUZ4UWl4TFFVRnlRaXhGUVVFMFFpeFpRVUUxUWl4RFFVRlFPMEZCUlRsRExGVkJRVWtzUzBGQlN6RkRMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVORExFbEJRV2hETEVWQlFYTkRMRTlCUVU4c1NVRkJTVFpDTERKRVFVRktMRU5CUVhGQ0xFdEJRWEpDTEVWQlFUUkNMRlZCUVRWQ0xFTkJRVkE3UVVGRmRFTXNWVUZCU1RKQ0xGVkJRVlVzUjBGQlIyaE1MRTFCUVUwc1EwRkJRME1zVFVGQlVDeERRVUZqTEVsQlFVa3paaXcwUkVGQlNpeERRVUYxUWtNc1YwRkJka0lzUlVGQmIwTkRMRkZCUVhCRExFTkJRV1FzUlVGQk5rUTdRVUZETVVWSExIVkNRVUZsTEVWQlFVVjFZU3hsUVVSNVJEdEJRVVV4UlhCaExHVkJRVThzUlVGQlJUaHZRaXhQUVVacFJUdEJRVWN4Uldod1FpeGpRVUZOTEVWQlFVVXNTMEZCUzBFN1FVRklOa1FzVDBGQk4wUXNSVUZKWkhOdlFpeFRRVXBqTEVWQlFXcENPMEZCVFVFc1YwRkJTM1pETEZkQlFVd3NSMEZCYlVKWkxHdEVRVUZQTEVOQlFVTnRRaXhYUVVFelFqdEJRVU5CTEZkQlFVczNRaXhyUWtGQlRDeEhRVUV3UWl4SlFVRkpNa01zSzBSQlFVb3NRMEZEZEVKb2NFSXNVVUZFYzBJc1JVRkRXbWx3UWl3d1JFRkJaU3hEUVVGRGQwSXNWMEZFU2l4RlFVTnBRakZ4UWl4WFFVUnFRaXhGUVVNNFFubHhRaXhWUVVRNVFpeHpSVUZGZFVNc1EwRkJRM3B4UWl4WFFVRlhMRWRCUVVjc1IwRkJaaXhGUVVGdlFtOWlMRTlCUVhCQ0xFTkJRVFJDTEVOQlFUVkNMRU5CUm5aRExFVkJRVEZDT3p0QlFVZEJMRlZCUVVrc1MwRkJTM05PTEV0QlFVd3NRMEZCVnl0Q0xGVkJRVmdzUTBGQlNpeEZRVU5CTzBGQlEwa3NZVUZCUzI1RkxHdENRVUZNTEVOQlFYZENPRU1zU1VGQmVFSXNNRU5CUVN0RUxFTkJRVU53Y0VJc1YwRkJWeXhIUVVGSExFZEJRV1lzUlVGQmIwSnZZaXhQUVVGd1FpeERRVUUwUWl4RFFVRTFRaXhEUVVFdlJEdEJRVU5JT3p0QlFVVkVNVmdzWTBGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xFbEJRVWxETEZkQlFVb3NRMEZCWjBJc2IwSkJRV2hDTEVWQlFYTkRPMEZCUVVORExHTkJRVTBzUlVGQlJTeExRVUZMZVdsQ08wRkJRV1FzVDBGQmRFTXNRMEZCZGtJN1FVRkRRU3hoUVVGUExFbEJRVWwzUXl3eVJFRkJTaXhEUVVGeFFpeEpRVUZ5UWl4RlFVRXlRaXh0UWtGQk0wSXNRMEZCVUR0QlFVTklMRXNzUTBGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN01rTkJRM1ZDTjI5Q0xGRXNSVUZCVlVRc1Z5eEZRVU5xUXp0QlFVRkJMRlZCUkRoRE1tRXNaVUZET1VNc2RVVkJSR2RGTEVOQlEyaEZPMEZCUVVFc1ZVRkViVVYzUkN4M1FrRkRia1VzZFVWQlJEaEdMRXRCUXpsR08wRkJRVUVzVlVGRWNVZHJUQ3hQUVVOeVJ5eDFSVUZFSzBjc1NVRkJTVGR2UWl3MlJFRkJTaXhGUVVNdlJ6dEJRVU5KTEZWQlFVa3NTMEZCUzJkdVFpeGhRVUZNTEVsQlFYTkNUQ3h2UkVGQlV5eERRVUZEUnl4UlFVRndReXhGUVVFNFF5eFBRVUZQTEVsQlFVbDNRaXd5UkVGQlNpeERRVUZ4UWl4TFFVRnlRaXhGUVVFMFFpeFpRVUUxUWl4RFFVRlFPMEZCUlRsRExGVkJRVWtzUzBGQlN6RkRMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVORExFbEJRV2hETEVWQlFYTkRMRTlCUVU4c1NVRkJTVFpDTERKRVFVRktMRU5CUVhGQ0xFdEJRWEpDTEVWQlFUUkNMRlZCUVRWQ0xFTkJRVkE3UVVGRGRFTXNWVUZCU1RaQ0xHVkJRV1VzUjBGQlIyeE1MRTFCUVUwc1EwRkJRME1zVFVGQlVDeERRVUZqTEVsQlFVbHNWU3c0UkVGQlNpeERRVUYzUW5oTUxGZEJRWGhDTEVWQlFYRkRReXhSUVVGeVF5eERRVUZrTEVWQlEzUkNPMEZCUTBsSExIVkNRVUZsTEVWQlFVVjFZU3hsUVVSeVFqdEJRVVZKZVVRc1owTkJRWGRDTEVWQlFVVkVMSGRDUVVZNVFqdEJRVWRKT1dRc1kwRkJUU3hGUVVGRkxFdEJRVXRCTEUxQlNHcENPMEZCU1VsRkxHVkJRVThzUlVGQlJUaHZRanRCUVVwaUxFOUJSSE5DTEVWQlRXNUNWaXhUUVU1dFFpeEZRVUYwUWp0QlFWRkJMRmRCUVV0MlF5eFhRVUZNTEVkQlFXMUNXU3hyUkVGQlR5eERRVUZEYlVJc1YwRkJNMEk3UVVGRFFTeFhRVUZMTjBJc2EwSkJRVXdzUjBGQk1FSXNTVUZCU1RKRExDdEVRVUZLTEVOQlEzUkNhSEJDTEZGQlJITkNMRVZCUTFwcGNFSXNNRVJCUVdVc1EwRkJRekJDTEVsQlJFb3NSVUZEVlRWeFFpeFhRVVJXTEVWQlEzVkNNbkZDTEdWQlJIWkNMRzFGUVVWdlF5eERRVUZETTNGQ0xGZEJRVmNzUjBGQlJ5eEhRVUZtTEVWQlFXOUNiMklzVDBGQmNFSXNRMEZCTkVJc1EwRkJOVUlzUTBGR2NFTXNSVUZCTVVJN08wRkJSMEVzVlVGQlNTeExRVUZMYzA0c1MwRkJUQ3hEUVVGWGFVTXNaVUZCV0N4RFFVRktMRVZCUTBFN1FVRkRTU3hoUVVGTGNrVXNhMEpCUVV3c1EwRkJkMEk0UXl4SlFVRjRRaXh2UTBGQmVVUXNRMEZCUTNCd1FpeFhRVUZYTEVkQlFVY3NSMEZCWml4RlFVRnZRbTlpTEU5QlFYQkNMRU5CUVRSQ0xFTkJRVFZDTEVOQlFYcEVPMEZCUTBnN08wRkJSVVF4V0N4alFVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSXNTVUZCU1VNc1YwRkJTaXhEUVVGblFpeHZRa0ZCYUVJc1JVRkJjME03UVVGQlEwTXNZMEZCVFN4RlFVRkZMRXRCUVV0NWFVSTdRVUZCWkN4UFFVRjBReXhEUVVGMlFqdEJRVU5CTEdGQlFVOHNTVUZCU1hkRExESkVRVUZLTEVOQlFYRkNMRWxCUVhKQ0xFVkJRVEpDTEdkQ1FVRXpRaXhEUVVGUU8wRkJRMGdzU3l4RFFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN2NVTkJRMmxDTjI5Q0xGRXNSVUZEYWtJN1FVRkJRU3hWUVVReVFtOXdRaXhQUVVNelFpeDFSVUZFY1VNc1NVRkJTVGR2UWl3MlJFRkJTaXhGUVVOeVF6czdRVUZEU1N4VlFVRkpMRXRCUVV0bmJrSXNZVUZCVEN4SlFVRnpRa3dzYjBSQlFWTXNRMEZCUTBjc1VVRkJjRU1zUlVGQk9FTTdRVUZETVVNc1pVRkJUeXhKUVVGSmQwSXNNa1JCUVVvc1EwRkJjVUlzUzBGQmNrSXNSVUZCTkVJc1dVRkJOVUlzUTBGQlVEdEJRVU5JT3p0QlFVVkVMRlZCUVVrc1MwRkJTekZETEZkQlFVd3NTVUZCYjBKWkxHdEVRVUZQTEVOQlFVTkRMRWxCUVdoRExFVkJRWE5ETzBGQlEyeERMR1ZCUVU4c1NVRkJTVFpDTERKRVFVRktMRU5CUVhGQ0xFdEJRWEpDTEVWQlFUUkNMRlZCUVRWQ0xFTkJRVkE3UVVGRFNEczdRVUZGUkN4VlFVRkpLMElzVTBGQlV5eEhRVUZIY0V3c1RVRkJUU3hEUVVGRFF5eE5RVUZRTEVOQlFXTXNTVUZCU1doVkxEQkVRVUZLTEVOQlFXdENNVXNzWjBWQlFXVXNRMEZCUTBNc1JVRkJhRUlzUTBGQmJVSXNVVUZCYmtJc1EwRkJiRUlzUTBGQlpDeEZRVU5vUWp0QlFVTkpXaXhqUVVGTkxFVkJRVVVzUzBGQlMwRXNUVUZFYWtJN1FVRkZTVVVzWlVGQlR5eEZRVUZGT0c5Q08wRkJSbUlzVDBGRVowSXNSVUZKWWxZc1UwRktZU3hGUVVGb1FqdEJRVTFCTEZkQlFVdDJReXhYUVVGTUxFZEJRVzFDV1N4clJFRkJUeXhEUVVGRGJVSXNWMEZCTTBJN1FVRkRRU3hYUVVGTE4wSXNhMEpCUVV3c1IwRkJNRUlzU1VGQlNUSkRMQ3RFUVVGS0xFTkJRM1JDYUhCQ0xGRkJSSE5DTEVWQlExcHBjRUlzTUVSQlFXVXNRMEZCUXpSQ0xFMUJSRW9zUlVGRFdTeERRVVJhTEVWQlEyVkVMRk5CUkdZc01rUkJRVEZDT3p0QlFVbEJMRlZCUVVrc1MwRkJTMjVETEV0QlFVd3NRMEZCVjIxRExGTkJRVmdzUTBGQlNpeEZRVU5CTzBGQlEwa3NZVUZCUzNaRkxHdENRVUZNTEVOQlFYZENPRU1zU1VGQmVFSTdRVUZEU0RzN1FVRkZSREZzUWl4alFVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSXNTVUZCU1VNc1YwRkJTaXhEUVVGblFpeHZRa0ZCYUVJc1JVRkJjME03UVVGQlEwTXNZMEZCVFN4RlFVRkZMRXRCUVV0NWFVSTdRVUZCWkN4UFFVRjBReXhEUVVGMlFqdEJRVU5CTEdGQlFVOHNTVUZCU1hkRExESkVRVUZLTEVOQlFYRkNMRWxCUVhKQ0xFVkJRVEpDTEd0Q1FVRXpRaXhEUVVGUU8wRkJRMGdzU3l4RFFVVkVPMEZCUTBFN1FVRkRRVHM3T3pzNFEwRkRNRUkzYjBJc1VTeEZRVU14UWp0QlFVRkJMRlZCUkc5RGIzQkNMRTlCUTNCRExIVkZRVVE0UXl4SlFVRkpOMjlDTERaRVFVRktMRVZCUXpsRE8wRkJRMGtzVlVGQlNTeExRVUZMWjI1Q0xHRkJRVXdzU1VGQmMwSk1MRzlFUVVGVExFTkJRVU5ITEZGQlFYQkRMRVZCUVRoRExFOUJRVThzU1VGQlNYZENMREpFUVVGS0xFTkJRWEZDTEV0QlFYSkNMRVZCUVRSQ0xGbEJRVFZDTEVOQlFWQTdRVUZGT1VNc1ZVRkJTU3hMUVVGTE1VTXNWMEZCVEN4SlFVRnZRbGtzYTBSQlFVOHNRMEZCUTBNc1NVRkJhRU1zUlVGQmMwTXNUMEZCVHl4SlFVRkpOa0lzTWtSQlFVb3NRMEZCY1VJc1MwRkJja0lzUlVGQk5FSXNWVUZCTlVJc1EwRkJVRHRCUVVOMFF5eFZRVUZKYVVNc1UwRkJVeXhIUVVGSGRFd3NUVUZCVFN4RFFVRkRReXhOUVVGUUxFTkJRV01zU1VGQlNUbFVMSEZGUVVGS0xFTkJRVFpDTlVzc1owVkJRV1VzUTBGQlEwTXNSVUZCYUVJc1EwRkJiVUlzVVVGQmJrSXNRMEZCTjBJc1EwRkJaQ3hGUVVOb1FqdEJRVU5KV2l4alFVRk5MRVZCUVVVc1MwRkJTMEVzVFVGRWFrSTdRVUZGU1VVc1pVRkJUeXhGUVVGRk9HOUNPMEZCUm1Jc1QwRkVaMElzUlVGSllsWXNVMEZLWVN4RlFVRm9RanRCUVUxQkxGZEJRVXQyUXl4WFFVRk1MRWRCUVcxQ1dTeHJSRUZCVHl4RFFVRkRiVUlzVjBGQk0wSTdRVUZEUVN4WFFVRkxOMElzYTBKQlFVd3NSMEZCTUVJc1NVRkJTVEpETEN0RVFVRktMRU5CUTNSQ2FIQkNMRkZCUkhOQ0xFVkJRMXBwY0VJc01FUkJRV1VzUTBGQlF6aENMR2xDUVVSS0xFVkJRM1ZDTEVOQlJIWkNMRVZCUXpCQ1JDeFRRVVF4UWl4RlFVVjBRaXcwUkVGR2MwSXNRMEZCTVVJN08wRkJSMEVzVlVGQlNTeExRVUZMY2tNc1MwRkJUQ3hEUVVGWGNVTXNVMEZCV0N4RFFVRktMRVZCUTBFN1FVRkRTU3hoUVVGTGVrVXNhMEpCUVV3c1EwRkJkMEk0UXl4SlFVRjRRaXhEUVVFMlFpdzBRMEZCTjBJN1FVRkRTRHM3UVVGRlJERnNRaXhqUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4dlFrRkJhRUlzUlVGQmMwTTdRVUZCUTBNc1kwRkJUU3hGUVVGRkxFdEJRVXQ1YVVJN1FVRkJaQ3hQUVVGMFF5eERRVUYyUWp0QlFVTkJMR0ZCUVU4c1NVRkJTWGRETERKRVFVRktMRU5CUVhGQ0xFbEJRWEpDTEVWQlFUSkNMR3RDUVVFelFpeERRVUZRTzBGQlEwZ3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3ZDBOQlJVRTdRVUZEU1N4VlFVRkpMRXRCUVV0MFFpeGhRVUZNTEVsQlFYTkNUQ3h2UkVGQlV5eERRVUZEUnl4UlFVRndReXhGUVVFNFF6dEJRVU14UXl4bFFVRlBMRWxCUVVsM1Fpd3lSRUZCU2l4RFFVRnhRaXhMUVVGeVFpeEZRVUUwUWl4WlFVRTFRaXhEUVVGUU8wRkJRMGc3TzBGQlJVUXNWVUZCU1N4TFFVRkxNVU1zVjBGQlRDeEpRVUZ2UWxrc2EwUkJRVThzUTBGQlEwTXNTVUZCYUVNc1JVRkJjME03UVVGRGJFTXNaVUZCVHl4SlFVRkpOa0lzTWtSQlFVb3NRMEZCY1VJc1MwRkJja0lzUlVGQk5FSXNWVUZCTlVJc1EwRkJVRHRCUVVOSU96dEJRVVZFTEZWQlFVbHRReXhoUVVGaExFZEJRVWNzU1VGQlNXeG5RaXh2UlVGQlNpeEhRVUZuUXpSa0xGTkJRV2hETEVWQlFYQkNPMEZCUTBFc1YwRkJTM1pETEZkQlFVd3NSMEZCYlVKWkxHdEVRVUZQTEVOQlFVTnRRaXhYUVVFelFqdEJRVU5CTEZWQlFVbHNiMElzVVVGQlVTeEhRVUZIWjNKQ0xHRkJRV0VzUTBGQlEyaHhRaXhGUVVFM1FpeERRVmhLTEVOQlYzRkRPenRCUVVOcVF5eFhRVUZMY1d4Q0xHdENRVUZNTEVkQlFUQkNMRWxCUVVreVF5d3JSRUZCU2l4RFFVTjBRbWh3UWl4UlFVUnpRaXhGUVVOYWFYQkNMREJFUVVGbExFTkJRVU5uUXl4clFrRkVTaXhGUVVOM1FpeERRVVI0UWl4RlFVTXlRa1FzWVVGRU0wSXNSVUZGZEVJc2RVVkJSbk5DTEVOQlFURkNPMEZCUjBFc1YwRkJTek5GTEd0Q1FVRk1MRU5CUVhkQ05rVXNWVUZCZUVJc1EwRkJiVU5HTEdGQlFXRXNRMEZCUTJoeFFpeEZRVUZxUkRzN1FVRkRRU3hWUVVGSkxFdEJRVXQ1YmtJc1MwRkJUQ3hEUVVGWGRVTXNZVUZCV0N4RFFVRktMRVZCUTBFN1FVRkRTU3hoUVVGTE0wVXNhMEpCUVV3c1EwRkJkMEk0UXl4SlFVRjRRanRCUVVOSU96dEJRVVZFTVd4Q0xHTkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMRzlDUVVGb1FpeEZRVUZ6UXp0QlFVRkRReXhqUVVGTkxFVkJRVVVzUzBGQlMzbHBRanRCUVVGa0xFOUJRWFJETEVOQlFYWkNPMEZCUTBFc1lVRkJUeXhKUVVGSmQwTXNNa1JCUVVvc1EwRkJjVUlzU1VGQmNrSXNSVUZCTWtJc1pVRkJNMElzUTBGQlVEdEJRVU5JTEVzc1EwRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0eFEwRkRhVUkzYjBJc1VTeEZRVUZWTm1Fc1RTeEZRVU16UWp0QlFVTkpMRlZCUVVrc1MwRkJTekJOTEdGQlFVd3NTVUZCYzBKTUxHOUVRVUZUTEVOQlFVTkhMRkZCUVhCRExFVkJRVGhETEU5QlFVOHNTVUZCU1hkQ0xESkVRVUZLTEVOQlFYRkNMRXRCUVhKQ0xFVkJRVFJDTEZsQlFUVkNMRU5CUVZBN1FVRkZPVU1zVlVGQlNTeExRVUZMTVVNc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRME1zU1VGQmFFTXNSVUZCYzBNc1QwRkJUeXhKUVVGSk5rSXNNa1JCUVVvc1EwRkJjVUlzUzBGQmNrSXNSVUZCTkVJc1ZVRkJOVUlzUTBGQlVEdEJRVVYwUXl4WFFVRkxNVU1zVjBGQlRDeEhRVUZ0UWxrc2EwUkJRVThzUTBGQlEyMUNMRmRCUVROQ08wRkJSVUVzVlVGQlNUaERMR0ZCUVdFc1IwRkJSeXhKUVVGSmJHZENMRzlGUVVGS0xFZEJRV2RETkdRc1UwRkJhRU1zUlVGQmNFSTdRVUZEUVN4WFFVRkxja01zYTBKQlFVd3NSMEZCTUVJc1NVRkJTVEpETEN0RVFVRktMRU5CUTNSQ2FIQkNMRkZCUkhOQ0xFVkJRMW8yWVN4TlFVUlpMRVZCUTBvc1EwRkVTU3hGUVVORWJWRXNZVUZFUXl4RlFVVjBRaXh2UkVGR2MwSXNRMEZCTVVJN08wRkJTVUVzVlVGQlNTeExRVUZMZGtNc1MwRkJUQ3hEUVVGWGRVTXNZVUZCV0N4RFFVRktMRVZCUTBFN1FVRkRTU3hoUVVGTE0wVXNhMEpCUVV3c1EwRkJkMEk0UXl4SlFVRjRRanRCUVVOSU96dEJRVVZFTVd4Q0xHTkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMRzlDUVVGb1FpeEZRVUZ6UXp0QlFVRkRReXhqUVVGTkxFVkJRVVVzUzBGQlMzbHBRanRCUVVGa0xFOUJRWFJETEVOQlFYWkNPMEZCUTBFc1lVRkJUeXhKUVVGSmQwTXNNa1JCUVVvc1EwRkJjVUlzU1VGQmNrSXNSVUZCTWtJc2IwSkJRVE5DTEVOQlFWQTdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenMyUWtGRFUzTkRMRmNzUlVGQllXNXlRaXhSTEVWQlFWVnZja0lzWXl4RlFVRm5Ra01zVnl4RlFVTm9SRHRCUVVOSk8wRkJRMEU3UVVGRFFTdzBSRUZCTUVJN1FVRkRkRUlzV1VGQlJ5eDFSRUZCTUVJc1EwRkJOMElzUlVGQlowTTdRVUZETlVJc1pVRkJTMnBJTEVsQlFVd3NRMEZCVlRaRExFbEJRVllzUTBGQlpTeHZSVUZCWmpzN1FVRkRRU3hwUWtGQlR5eExRVUZMY1VVc1VVRkJUQ3hEUVVGalNDeFhRVUZrTEcxRVFVRlFPMEZCUTBnc1UwRklSQ3hOUVVkUE8wRkJRMGdzWjBKQlFVMHNTVUZCU1hSdlFpeExRVUZLTEVOQlFWVXNLMGRCUVZZc1EwRkJUanRCUVVOSU8wRkJRMG83TzBGQlJVUXNWMEZCUzNWb1FpeEpRVUZNTEVOQlFWVTJReXhKUVVGV0xHZERRVUYxUTJwdVFpeFJRVUYyUXl4bFFVRnZSRzF5UWl4WFFVRlhMRU5CUVVONFRpeFhRVUZhTEVWQlFYQkVPenRCUVVWQkxGVkJRVWswVGl4clFrRkJhMElzUjBGQlIwb3NWMEZCVnl4RFFVRkRTeXh4UWtGQldpeEZRVUY2UWl4RFFXUktMRU5CWTJ0Rk96dEJRVU01UkN4VlFVRkpReXhsUVVGbExFZEJRVWNzU1VGQlNXcGtMRWxCUVVvc1YwRkJXU3RqTEd0Q1FVRnJRaXhEUVVGRGVHSXNUVUZCYmtJc1EwRkJNRUlzUTBGQk1VSXNSVUZCTkVJc1EwRkJOVUlzUTBGQldpeGpRVUU0UTNkaUxHdENRVUZyUWl4RFFVRkRlR0lzVFVGQmJrSXNRMEZCTUVJc1EwRkJNVUlzUlVGQk5FSXNRMEZCTlVJc1EwRkJPVU1zWTBGQlowWjNZaXhyUWtGQmEwSXNRMEZCUTNoaUxFMUJRVzVDTEVOQlFUQkNMRU5CUVRGQ0xFVkJRVFJDTEVOQlFUVkNMRU5CUVdoR0xHTkJRV3RJZDJJc2EwSkJRV3RDTEVOQlFVTjRZaXhOUVVGdVFpeERRVUV3UWl4RFFVRXhRaXhGUVVFMFFpeERRVUUxUWl4RFFVRnNTQ3hqUVVGdlNuZGlMR3RDUVVGclFpeERRVUZEZUdJc1RVRkJia0lzUTBGQk1FSXNSVUZCTVVJc1JVRkJOa0lzUTBGQk4wSXNRMEZCY0Vvc1kwRkJkVXgzWWl4clFrRkJhMElzUTBGQlEzaGlMRTFCUVc1Q0xFTkJRVEJDTEVWQlFURkNMRVZCUVRaQ0xFTkJRVGRDTEVOQlFYWk1MRVZCUVhSQ08wRkJRMEVzVlVGQlNUSmlMRTlCUVU4c1IwRkJSMjVKTEZGQlFWRXNRMEZCUXpoSUxGZEJRVVFzUTBGQlVpeEhRVUYzUWtrc1pVRkJaU3hEUVVGRE4yTXNUMEZCYUVJc1JVRkJkRU03TzBGQlJVRXNWVUZCU1N4RFFVRkROVThzVVVGQlJDeEpRVUZoYlhKQ0xGZEJRVmNzUTBGQlEzaE9MRmRCUVZvc1JVRkJha0lzUlVGRFFUdEJRVU5KTEdWQlFVOHZZaXh6UkVGQldTeERRVUZEYTB3c1QwRkJjRUk3UVVGRFNEczdRVUZGUkN4VlFVRkpjV1VzVjBGQlZ5eERRVUZEVVN4VFFVRmFMRWRCUVhkQ2RHcENMRmRCUVhoQ0xFMUJRWGxETEZWQlFYcERMRWxCUVhWRU9HbENMRmRCUVZjc1EwRkJRMU1zYjBKQlFWb3NUVUZCYzBOU0xHTkJRVGRHTEVsQlFTdEhUU3hQUVVGUExFZEJRVWNzUTBGQk4wZ3NSVUZEUVR0QlFVTkpMR1ZCUVU4MWNVSXNhVVJCUVU4c1EwRkJRMk1zV1VGQlVpeERRVUZ4UW10TUxFOUJRVFZDTzBGQlEwZzdPMEZCUlVRc1lVRkJUM0ZsTEZkQlFWY3NRMEZCUTNod1FpeGxRVUZhTEVWQlFWQTdRVUZEU0RzN08ybERRVVZaTkVNc1J5eEZRVUZMY2tJc1R5eEZRVU5zUWp0QlFVTkpMRmRCUVV0MWJFSXNTMEZCVEN4RFFVRlhMRWxCUVVsdVl5d3dSRUZCU2l4RFFVRnZRaTlJTEVkQlFYQkNMRVZCUVhsQ2NrSXNUMEZCZWtJc1JVRkJhME15YjBJc1UwRkJiRU1zUlVGQldEdEJRVU5JT3pzN2QwTkJSMFE3UVVGRFNTeFhRVUZMY0VRc1MwRkJUQ3hEUVVGWExFbEJRVWxxWXl4elJVRkJTaXhIUVVFMFFtdGpMRk5CUVRWQ0xFVkJRVmc3UVVGRFNDeExMRU5CUlVRN1FVRkZRVHRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08zTkRRVU5yUW5adVFpeERMRVZCUTJ4Q08wRkJRMGtzVjBGQlMybHNRaXgxUWtGQlRDeERRVUUyUW5Sc1FpeFBRVUUzUWl4SFFVRjFReXgzUWtGQmRrTTdRVUZEUVRKRExHTkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMSGxDUVVGb1FpeEZRVUV5UXp0QlFVRkRReXhqUVVGTkxFVkJRVVVzUzBGQlMzZHBRanRCUVVGa0xFOUJRVE5ETEVOQlFYWkNMRVZCUmtvc1EwRkpTVHM3UVVGRFFTeFZRVUZKT1ZJc1JVRkJSU3hIUVVGUkxFbEJRVWszUXl3MFJFRkJTaXhGUVVGa08wRkJRMEVzVlVGQlNYRmhMRTFCUVUwc1IwRkJTWGhZTEVWQlFVVXNRMEZCUTNsWUxEWkNRVUZJTEVOQlFXbERMRWxCUVVrNWFFSXNiMFJCUVVvc1EwRkJaVGxKTEVOQlFXWXNRMEZCYWtNc1EwRkJaRHRCUVVOQkxGZEJRVXM0YVVJc1VVRkJUQ3hIUVVGblFqWklMRTFCUVUwc1EwRkJRMjVxUWl4UFFVRjJRaXhEUVZCS0xFTkJUMjlET3p0QlFVTm9ReXhYUVVGTFoyTXNaMEpCUVV3c1EwRkJjMEpvWXl4UFFVRjBRaXhIUVVGblF5eExRVUZMYzJJc1VVRkJja01zUTBGU1NpeERRVkZ0UkRzN1FVRkRMME1zVjBGQlMzZEZMRXRCUVV3c1EwRkJWM0ZFTEUxQlFVMHNRMEZCUXpWb1FpeFhRVUZRTEVOQlFXMUNkMlVzVTBGQmJrSXNSVUZCV0N4RlFWUktMRU5CVTJkRU96dEJRVU12UXl4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3YjBOQlEyZENkbTVDTEVNc1JVRkRhRUk3UVVGRFNTeFZRVUZKTm5GQ0xGRkJRVkVzUjBGQlJ5eEpRVUZKTjJoQ0xHdEVRVUZLTEVOQlFXRm9TaXhEUVVGaUxFTkJRV1k3UVVGRFFTeFhRVUZMYVd4Q0xIVkNRVUZNTEVOQlFUWkNiRllzWjBKQlFUZENMRWRCUVdkRU9HRXNVVUZCVVN4RFFVRkRPV0VzWjBKQlFYcEVPMEZCUTBFc1YwRkJTMnRXTEhWQ1FVRk1MRU5CUVRaQ2FVTXNkVUpCUVRkQ0xFZEJRWFZFTEVsQlFYWkVPMEZCUTBFc1YwRkJTMnBETEhWQ1FVRk1MRU5CUVRaQ2EwTXNiMEpCUVRkQ0xFZEJRVzlFTEVsQlFYQkVPMEZCUTBFc1YwRkJTMnhETEhWQ1FVRk1MRU5CUVRaQ2RHeENMRTlCUVRkQ0xFZEJRWFZETERSRVFVRjJRenRCUVVOQk1rTXNZMEZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzZVVKQlFXaENMRVZCUVRKRE8wRkJRVU5ETEdOQlFVMHNSVUZCUlN4TFFVRkxkMmxDTzBGQlFXUXNUMEZCTTBNc1EwRkJka0k3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN2QwTkJRMjlDYW14Q0xFTXNSVUZEY0VJN1FVRkRTU3hWUVVGSk9IRkNMRkZCUVZFc1IwRkJSeXhKUVVGSk4yaENMSE5FUVVGS0xFTkJRV2xDYWtvc1EwRkJha0lzUTBGQlpqdEJRVVZCTEZkQlFVdHBiRUlzZFVKQlFVd3NRMEZCTmtKcFF5eDFRa0ZCTjBJc1IwRkJkVVFzUzBGQmRrUTdPMEZCUTBFc1ZVRkJTVFJFTEZGQlFWRXNRMEZCUTNaeFFpeFBRVUZpTEVWQlEwRTdRVUZEU1N4WlFVRkpMRXRCUVVzd2EwSXNkVUpCUVV3c1EwRkJOa0pyUXl4dlFrRkJha01zUlVGRFFUdEJRVU5KTzBGQlEwRXNaVUZCUzJ4RkxFbEJRVXdzUTBGQlZUWkRMRWxCUVZZc1EwRkJaU3c0UlVGQlpqczdRVUZEUVN4bFFVRkxZaXgxUWtGQlRDeERRVUUyUW5Sc1FpeFBRVUUzUWl4SFFVRjFReXd5UkVGQmRrTTdRVUZEUVRKRExHdENRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXg1UWtGQmFFSXNSVUZCTWtNN1FVRkJRME1zYTBKQlFVMHNSVUZCUlN4TFFVRkxkMmxDTzBGQlFXUXNWMEZCTTBNc1EwRkJka0k3UVVGRFNDeFRRVTVFTEUxQlVVRTdRVUZEU1N4bFFVRkxhRU1zU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExHdEhRVUZtT3p0QlFVTkJMR1ZCUVV0elFpeHBRa0ZCVER0QlFVTklMRk5CV2t3c1EwRmhTVHRCUVVOQk96czdRVUZEUVN4aFFVRkxNa1FzYTBKQlFVdzdRVUZEU0N4UFFXcENSQ3hOUVcxQ1FUdEJRVU5KTEdGQlFVdDJSQ3huUWtGQlREdEJRVU5JTzBGQlEwbzdPenN3UTBGRmNVSjRia0lzUXl4RlFVTjBRanRCUVVOSkxGZEJRVXRwYWtJc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml4RFFVRmxMREJFUVVGbU96dEJRVU5CTEZkQlFVc3lRaXhUUVVGTU8wRkJRMGc3T3p0M1EwRkhSRHRCUVVOSkxGZEJRVXQ0UXl4MVFrRkJUQ3hEUVVFMlFtZERMRlZCUVRkQ0xFZEJRVEJETEVsQlFURkRPMEZCUTBFc1YwRkJTMmhETEhWQ1FVRk1MRU5CUVRaQ05rSXNVVUZCTjBJc1IwRkJkME1zU1VGQmVFTTdRVUZEUVN4WFFVRkxOMElzZFVKQlFVd3NRMEZCTmtKMGJFSXNUMEZCTjBJc1IwRkJkVU1zY1VKQlFYWkRPMEZCUTBFc1YwRkJTM2x0UWl4aFFVRk1MRWRCUVhGQ1RDeHZSRUZCVXl4RFFVRkRWU3hsUVVFdlFqdEJRVU5CYm10Q0xHTkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMR2RDUVVGb1FpeEZRVUZyUXp0QlFVRkRReXhqUVVGTkxFVkJRVVVzUzBGQlMzRm5RanRCUVVGa0xFOUJRV3hETEVOQlFYWkNPMEZCUTBGNFowSXNZMEZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzZVVKQlFXaENMRVZCUVRKRE8wRkJRVU5ETEdOQlFVMHNSVUZCUlN4TFFVRkxkMmxDTzBGQlFXUXNUMEZCTTBNc1EwRkJka0k3UVVGRFNEczdPM1ZEUVVkRU8wRkJRMGtzVjBGQlMyNURMRkZCUVV3c1IwRkJaMElzU1VGQmFFSTdRVUZEUVN4WFFVRkxWU3huUWtGQlRDeERRVUZ6UW1oakxFOUJRWFJDTEVkQlFXZERMRWxCUVdoRE96dEJRVU5CTEZkQlFVc3dZaXhMUVVGTUxFTkJRVmRvWjBJc1ZVRkJXRHM3UVVGRlFTeFhRVUZMYTJwQ0xHRkJRVXdzUjBGQmNVSk1MRzlFUVVGVExFTkJRVU5ITEZGQlFTOUNPMEZCUTBFc1YwRkJTMnBDTEhWQ1FVRk1MRU5CUVRaQ2RHeENMRTlCUVRkQ0xFZEJRWFZETEdkQ1FVRjJRenRCUVVOQkxGZEJRVXR6YkVJc2RVSkJRVXdzUTBGQk5rSTJRaXhSUVVFM1FpeEhRVUYzUXl4SlFVRjRRenRCUVVOQkxGZEJRVXMzUWl4MVFrRkJUQ3hEUVVFMlFtZERMRlZCUVRkQ0xFZEJRVEJETEV0QlFURkRPMEZCUTBFc1YwRkJTMmhETEhWQ1FVRk1MRU5CUVRaQ2EwTXNiMEpCUVRkQ0xFZEJRVzlFTEV0QlFYQkVPMEZCUTBFM2EwSXNZMEZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzZVVKQlFXaENMRVZCUVRKRE8wRkJRVU5ETEdOQlFVMHNSVUZCUlN4TFFVRkxkMmxDTzBGQlFXUXNUMEZCTTBNc1EwRkJka0k3UVVGRFNEczdPMmREUVVkRU8wRkJRMGtzVjBGQlMyMUNMR0ZCUVV3c1IwRkJjVUpNTEc5RVFVRlRMRU5CUVVOSExGRkJRUzlDT3p0QlFVTkJMRmRCUVV0b1JDeExRVUZNTEVOQlFWZG9aMElzVlVGQldEczdRVUZEUVN4WFFVRkxOR1lzVVVGQlRDeEhRVUZuUWl4SlFVRm9RanRCUVVOQkxGZEJRVXRWTEdkQ1FVRk1MRU5CUVhOQ2FHTXNUMEZCZEVJc1IwRkJaME1zU1VGQmFFTTdRVUZEUVd4R0xHTkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMR2RDUVVGb1FpeEZRVUZyUXp0QlFVRkRReXhqUVVGTkxFVkJRVVVzUzBGQlMzRm5RanRCUVVGa0xFOUJRV3hETEVOQlFYWkNPMEZCUTBnc1N5eERRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3paRFFVTjVRamxwUWl4RExFVkJRM3BDTzBGQlEwazdRVUZEUVN4VlFVRkpaM0pDTEV0QlFVc3NSMEZCUnpkcVFpeHRSVUZCWjBJc1EwRkJRemhxUWl4cFFrRkJha0lzUTBGQmJVTnFja0lzUTBGQmJrTXNSVUZCYzBNc1MwRkJTemhwUWl4UlFVRXpReXhEUVVGYU8wRkJRMEVzVjBGQlMwRXNVVUZCVEN4SFFVRm5RbXRKTEV0QlFVc3NRMEZCUTJwcVFpeFZRVUYwUWl4RFFVaEtMRU5CUjNORE96dEJRVU5zUXl4WFFVRkxlV0lzWjBKQlFVd3NRMEZCYzBKb1l5eFBRVUYwUWl4SFFVRm5ReXhMUVVGTGMySXNVVUZCY2tNc1EwRktTaXhEUVVsdFJEczdRVUZETDBNc1YwRkJTM2RGTEV0QlFVd3NRMEZCVnpCRUxFdEJRVXNzUTBGQlEyeHFRaXh6UWtGQmFrSXNSVUZNU2l4RFFVczRRenM3TzBGQlF6RkRlRVlzWTBGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xFbEJRVWxETEZkQlFVb3NRMEZCWjBJc1owSkJRV2hDTEVWQlFXdERPMEZCUVVORExHTkJRVTBzUlVGQlJTeExRVUZMY1dkQ08wRkJRV1FzVDBGQmJFTXNRMEZCZGtJN1FVRkRTQ3hMTEVOQlJVUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPelpEUVVONVFqbHBRaXhETEVWQlEzcENPMEZCUTBrc1ZVRkJTV3R5UWl4blFrRkJaMElzUjBGQlIyeHlRaXhEUVVGRExFTkJRVU5ITEVsQlFVWXNRMEZCVDBNc1ZVRkJPVUk3TzBGQlEwRXNWVUZCU1N4TFFVRkxOR3RDTEZkQlFVd3NTVUZCYjBKWkxHdEVRVUZQTEVOQlFVTnRRaXhYUVVFMVFpeEpRVUV5UXl4TFFVRkxOMElzYTBKQlFVd3NRMEZCZDBJMFFpeFJRVUZ1UlN4SlFVRXJSU3hEUVVGRExFdEJRVXMxUWl4clFrRkJUQ3hEUVVGM1FuQnRRaXhSUVVGNlFpeEpRVUZ4UTI5elFpeG5Ra0ZCZUVnc1JVRkRRVHRCUVVOSkxHRkJRVXRxU1N4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTERKR1FVRnJSMjlHTEdkQ1FVRnNSenM3UVVGRFFUdEJRVU5JT3p0QlFVTkVMRmRCUVV0b1J5eHJRa0ZCVEN4RFFVRjNRbTVpTEdsQ1FVRjRRaXhEUVVFd1F5eEpRVUZKUVN3MFJFRkJTaXhEUVVGelFpOUtMRU5CUVhSQ0xFTkJRVEZETEVWQlFXOUZMR3REUVVGd1JUdEJRVVZCYzBNc1kwRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNiMEpCUVdoQ0xFVkJRWE5ETzBGQlFVTkRMR05CUVUwc1JVRkJSU3hMUVVGTGVXbENPMEZCUVdRc1QwRkJkRU1zUTBGQmRrSTdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TkVOQlEzZENiR3hDTEVNc1JVRkRlRUk3UVVGRFNTeFZRVUZKYTNKQ0xHZENRVUZuUWl4SFFVRkhiSEpDTEVOQlFVTXNRMEZCUTBjc1NVRkJSaXhEUVVGUFF5eFZRVUU1UWpzN1FVRkRRU3hWUVVGSkxFdEJRVXMwYTBJc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRMjFDTEZkQlFUVkNMRWxCUVRKRExFdEJRVXMzUWl4clFrRkJUQ3hEUVVGM1FqUkNMRkZCUVc1RkxFbEJRU3RGTEVOQlFVTXNTMEZCU3pWQ0xHdENRVUZNTEVOQlFYZENjRzFDTEZGQlFYcENMRWxCUVhGRGIzTkNMR2RDUVVGNFNDeEZRVU5CTzBGQlEwbHFTU3haUVVGSkxFTkJRVU0yUXl4SlFVRk1MREpHUVVFMlJtOUdMR2RDUVVFM1JqczdRVUZEUVR0QlFVTklPenRCUVVORUxGVkJRVWxETEc5Q1FVRnZRaXhIUVVGSExFbEJRVWsxVGl3clJFRkJTaXhEUVVGNVFuWmtMRU5CUVhwQ0xFTkJRVE5DTzBGQlEwRXNWVUZCU1c5eVFpeEhRVUZITEhORFFVRXJRa1FzYjBKQlFXOUNMRU5CUVVORkxHTkJRWEpDTEVWQlFTOUNMRzlEUVVFNFJrWXNiMEpCUVc5Q0xFTkJRVU5ITEdGQlFYSkNMRVZCUVRsR0xFTkJRVkE3UVVGRFFTeFhRVUZMY0Vjc2EwSkJRVXdzUTBGQmQwSXpTQ3h2UWtGQmVFSXNRMEZCTmtNMFRpeHZRa0ZCTjBNc1JVRkJiVVZETEVkQlFXNUZPMEZCUlVFNWIwSXNZMEZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzYjBKQlFXaENMRVZCUVhORE8wRkJRVU5ETEdOQlFVMHNSVUZCUlN4TFFVRkxlV2xDTzBGQlFXUXNUMEZCZEVNc1EwRkJka0k3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN05FTkJRM2RDYkd4Q0xFTXNSVUZEZUVJN1FVRkRTU3hWUVVGSmEzSkNMR2RDUVVGblFpeEhRVUZIYkhKQ0xFTkJRVU1zUTBGQlEwY3NTVUZCUml4RFFVRlBReXhWUVVFNVFqczdRVUZEUVN4VlFVRkpMRXRCUVVzMGEwSXNWMEZCVEN4SlFVRnZRbGtzYTBSQlFVOHNRMEZCUTIxQ0xGZEJRVFZDTEVsQlFUSkRMRXRCUVVzM1FpeHJRa0ZCVEN4RFFVRjNRalJDTEZGQlFXNUZMRWxCUVN0RkxFTkJRVU1zUzBGQlN6VkNMR3RDUVVGTUxFTkJRWGRDY0cxQ0xGRkJRWHBDTEVsQlFYRkRiM05DTEdkQ1FVRjRTQ3hGUVVOQk8wRkJRMGtzWVVGQlMycEpMRWxCUVV3c1EwRkJWVFpETEVsQlFWWXNNRVpCUVdsSGIwWXNaMEpCUVdwSE96dEJRVU5CTzBGQlEwZ3NUMEZPVEN4RFFVOUpPenM3UVVGRlFTeFhRVUZMYUVjc2EwSkJRVXdzUTBGQmQwSnhSeXhUUVVGNFFpeERRVUZyUTNaeVFpeERRVUZETEVOQlFVTlJMR1ZCUVVZc1JVRkJiRU1zUlVGQmRVUlNMRU5CUVhaRUxFVkJRVEJFTERaQ1FVRXhSQ3hGUVZSS0xFTkJWVWs3TzBGQlJVRnpReXhqUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4dlFrRkJhRUlzUlVGQmMwTTdRVUZCUTBNc1kwRkJUU3hGUVVGRkxFdEJRVXQ1YVVJN1FVRkJaQ3hQUVVGMFF5eERRVUYyUWp0QlFVTklMRXNzUTBGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096c3JRMEZETWtKc2JFSXNReXhGUVVNelFqdEJRVU5KTEZWQlFVbHJja0lzWjBKQlFXZENMRWRCUVVkc2NrSXNRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVTlETEZWQlFUbENPenRCUVVOQkxGVkJRVWtzUzBGQlN6UnJRaXhYUVVGTUxFbEJRVzlDV1N4clJFRkJUeXhEUVVGRGJVSXNWMEZCTlVJc1NVRkJNa01zUzBGQlN6ZENMR3RDUVVGTUxFTkJRWGRDTkVJc1VVRkJia1VzU1VGQkswVXNRMEZCUXl4TFFVRkxOVUlzYTBKQlFVd3NRMEZCZDBKd2JVSXNVVUZCZWtJc1NVRkJjVU52YzBJc1owSkJRWGhJTEVWQlEwRTdRVUZEU1N4aFFVRkxha2tzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXg1UmtGQlowZHZSaXhuUWtGQmFFYzdPMEZCUTBFN1FVRkRTQ3hQUVU1TUxFTkJUMGs3T3p0QlFVVkJMRmRCUVV0b1J5eHJRa0ZCVEN4RFFVRjNRbkZITEZOQlFYaENMRU5CUVd0RGRuSkNMRU5CUVVNc1EwRkJRMUVzWlVGQlJpeEZRVUZzUXl4RlFVRjFSRklzUTBGQmRrUXNSVUZCTUVRc05FSkJRVEZFTEVWQlZFb3NRMEZWU1RzN1FVRkZRWE5ETEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xHOUNRVUZvUWl4RlFVRnpRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTMEZCUzNscFFqdEJRVUZrTEU5QlFYUkRMRU5CUVhaQ08wRkJRMGdzU3l4RFFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPMmRFUVVNMFFteHNRaXhETEVWQlF6VkNPMEZCUTBrc1ZVRkJTV3R5UWl4blFrRkJaMElzUjBGQlIyeHlRaXhEUVVGRExFTkJRVU5ITEVsQlFVWXNRMEZCVDBNc1ZVRkJPVUk3TzBGQlEwRXNWVUZCU1N4TFFVRkxOR3RDTEZkQlFVd3NTVUZCYjBKWkxHdEVRVUZQTEVOQlFVTnRRaXhYUVVFMVFpeEpRVUV5UXl4TFFVRkxOMElzYTBKQlFVd3NRMEZCZDBJMFFpeFJRVUZ1UlN4SlFVRXJSU3hEUVVGRExFdEJRVXMxUWl4clFrRkJUQ3hEUVVGM1FuQnRRaXhSUVVGNlFpeEpRVUZ4UTI5elFpeG5Ra0ZCZUVnc1JVRkRRVHRCUVVOSkxHRkJRVXRxU1N4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEhOR1FVRTJSbTlHTEdkQ1FVRTNSanM3UVVGRFFUdEJRVU5JTEU5QlRrd3NRMEZQU1RzN08wRkJSVUVzVjBGQlMyaEhMR3RDUVVGTUxFTkJRWGRDY1Vjc1UwRkJlRUlzUTBGQmEwTjJja0lzUTBGQlF5eERRVUZEVVN4bFFVRkdMRVZCUVd4RExFVkJRWFZFVWl4RFFVRjJSQ3hGUVVFd1JDeDVRa0ZCTVVRc1JVRlVTaXhEUVZWSk96dEJRVVZCYzBNc1kwRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNiMEpCUVdoQ0xFVkJRWE5ETzBGQlFVTkRMR05CUVUwc1JVRkJSU3hMUVVGTGVXbENPMEZCUVdRc1QwRkJkRU1zUTBGQmRrSTdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TUVOQlEzTkNiR3hDTEVNc1JVRkRkRUk3UVVGRFNTeFZRVUZKYTNKQ0xHZENRVUZuUWl4SFFVRkhiSEpDTEVOQlFVTXNRMEZCUTBjc1NVRkJSaXhEUVVGUFF5eFZRVUU1UWpzN1FVRkRRU3hWUVVGSkxFdEJRVXMwYTBJc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRMjFDTEZkQlFUVkNMRWxCUVRKRExFdEJRVXMzUWl4clFrRkJUQ3hEUVVGM1FqUkNMRkZCUVhoQ0xFZEJRVzFETEVOQlFVTXNTMEZCU3pWQ0xHdENRVUZNTEVOQlFYZENjRzFDTEZGQlFYcENMRWxCUVhGRGIzTkNMR2RDUVVGMlNDeEZRVU5CTzBGQlEwa3NZVUZCUzJwSkxFbEJRVXdzUTBGQlZUWkRMRWxCUVZZc05rWkJRVzlIYjBZc1owSkJRWEJIT3p0QlFVTkJPMEZCUTBnc1QwRk9UQ3hEUVU5Sk96czdRVUZGUVN4WFFVRkxhRWNzYTBKQlFVd3NRMEZCZDBKeFJ5eFRRVUY0UWl4RFFVRnJRM1p5UWl4RFFVRkRMRU5CUVVOUkxHVkJRVVlzUlVGQmJFTXNSVUZCZFVSU0xFTkJRWFpFTEVWQlFUQkVMREpDUVVFeFJDeEZRVlJLTEVOQlZVazdPMEZCUlVGelF5eGpRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh2UWtGQmFFSXNSVUZCYzBNN1FVRkJRME1zWTBGQlRTeEZRVUZGTEV0QlFVdDVhVUk3UVVGQlpDeFBRVUYwUXl4RFFVRjJRanRCUVVOSUxFc3NRMEZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0NVEwRkRjVUpzYkVJc1F5eEZRVU55UWp0QlFVTkpMRlZCUVVrc1MwRkJTMmRzUWl4WFFVRk1MRWxCUVc5Q1dTeHJSRUZCVHl4RFFVRkRiVUlzVjBGQk5VSXNTVUZCTWtNc1MwRkJTemRDTEd0Q1FVRk1MRU5CUVhkQ05FSXNVVUZCZGtVc1JVRkRRVHRCUVVOSkxHRkJRVXMzUkN4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEcxRlFVRXdSVGxzUWl4RFFVRkRMRU5CUVVOblRpeGhRVUUxUlRzN1FVRkRRVHRCUVVOSUxFOUJURXdzUTBGTlNUczdPMEZCUlVFc1YwRkJTMnRaTEd0Q1FVRk1MRU5CUVhkQ2NVY3NVMEZCZUVJc1EwRkJhME4yY2tJc1EwRkJReXhEUVVGRFVTeGxRVUZHTEVWQlFXeERMRVZCUVhWRVVpeERRVUYyUkN4RlFVRXdSQ3d5UWtGQk1VUXNSVUZTU2l4RFFWTkpPenRCUVVWQmMwTXNZMEZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzYjBKQlFXaENMRVZCUVhORE8wRkJRVU5ETEdOQlFVMHNSVUZCUlN4TFFVRkxlV2xDTzBGQlFXUXNUMEZCZEVNc1EwRkJka0k3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN2NVUkJRMmxEYkd4Q0xFTXNSVUZEYWtNN1FVRkRTU3hWUVVGSkxFdEJRVXRuYkVJc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRMjFDTEZkQlFUVkNMRWxCUVRKRExFdEJRVXMzUWl4clFrRkJUQ3hEUVVGM1FqUkNMRkZCUVhaRkxFVkJRMEU3UVVGRFNTeGhRVUZMTjBRc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml3clJVRkJjMFk1YkVJc1EwRkJReXhEUVVGRFowNHNZVUZCZUVZN08wRkJRMEU3UVVGRFNDeFBRVXhNTEVOQlRVazdPenRCUVVWQkxGZEJRVXRyV1N4clFrRkJUQ3hEUVVGM1FuRkhMRk5CUVhoQ0xFTkJRV3REZG5KQ0xFTkJRVU1zUTBGQlExRXNaVUZCUml4RlFVRnNReXhGUVVGMVJGSXNRMEZCZGtRc1JVRkJNRVFzTWtKQlFURkVMRVZCVWtvc1EwRlRTVHM3UVVGRlFYTkRMR05CUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4SlFVRkpReXhYUVVGS0xFTkJRV2RDTEc5Q1FVRm9RaXhGUVVGelF6dEJRVUZEUXl4alFVRk5MRVZCUVVVc1MwRkJTM2xwUWp0QlFVRmtMRTlCUVhSRExFTkJRWFpDTzBGQlEwZ3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08zTkRRVU5yUW14c1FpeERMRVZCUTJ4Q08wRkJRMGtzVlVGQlNTeExRVUZMWjJ4Q0xGZEJRVXdzU1VGQmIwSlpMR3RFUVVGUExFTkJRVU50UWl4WFFVRTFRaXhKUVVOSExFTkJRVU1zUzBGQlN6ZENMR3RDUVVGTUxFTkJRWGRDTkVJc1VVRkVOVUlzU1VGRlJ5eExRVUZMTlVJc2EwSkJRVXdzUTBGQmQwSnpSeXhyUWtGR00wSXNTVUZIUjNoeVFpeERRVUZETEVOQlFVTnhZeXhSUVVGR0xFMUJRV2RDTEdkQ1FVaDJRaXhGUVVsQk8wRkJRMGs3UVVGRFFTeGhRVUZMTkVjc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVmpzN1FVRkRRU3hoUVVGTE1rWXNkVUpCUVV3N1FVRkRTQ3hQUVZKRUxFMUJWVUU3UVVGRFNTeGhRVUZMZUVrc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml4dFJVRkJNRVU1YkVJc1EwRkJReXhEUVVGRFowNHNZVUZCTlVVN1FVRkRTRHRCUVVOS0xFc3NRMEZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0elJFRkRhME5vVGl4RExFVkJRMnhETzBGQlEwa3NWVUZCU1RCeVFpeFBRVUZQTEVkQlFVY3NTMEZCUzNoSExHdENRVUZ1UWpzN1FVRkRRU3hWUVVGSkxFdEJRVXRHTEZkQlFVd3NTVUZCYjBKWkxHdEVRVUZQTEVOQlFVTnRRaXhYUVVFMVFpeEpRVUV5UXpKRkxFOUJRVThzUTBGQlF6VkZMRkZCUVhaRUxFVkJRMEU3UVVGRFNTeGhRVUZMTjBRc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml4RFFVRmxMSGRGUVVGbU96dEJRVU5CTzBGQlEwZzdPMEZCUlVRc1ZVRkJTU3hEUVVGRE5FWXNUMEZCVHl4RFFVRkRReXh0UWtGQllpeEZRVU5CTzBGQlEwa3NZVUZCU3pGSkxFbEJRVXdzUTBGQlZUWkRMRWxCUVZZc1EwRkJaU3cyU0VGQlpqczdRVUZEUVR0QlFVTklPenRCUVVWRUxGVkJRVWswUml4UFFVRlBMRU5CUVVORkxHZENRVUZTTEVsQlFUUkNOWEpDTEVOQlFVTXNRMEZCUTBnc1JVRkJiRU1zUlVGRFFUdEJRVU5KTEdGQlFVdHZha0lzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExEUkhRVUZtT3p0QlFVTkJPMEZCUTBnc1QwRnNRa3dzUTBGdlFrazdRVUZEUVRzN08wRkJRMEVzVjBGQlN6ZERMRWxCUVV3c1EwRkJWVFpETEVsQlFWWTdPMEZCUTBFMFJpeGhRVUZQTEVOQlFVTkhMR05CUVZJN1FVRkRRU3hWUVVGSlF5eFhRVUZYTEVkQlFVY3NTVUZCU1d4cFFpeHhSVUZCU2l4RFFVRXJRalZLTEVOQlFTOUNMRU5CUVd4Q08wRkJRMEV3Y2tJc1lVRkJUeXhEUVVGRFN5eHRRa0ZCVWl4SFFVRTRRa1FzVjBGQlZ5eERRVUZEZEZBc1YwRkJXaXhGUVVFNVFqczdRVUZEUVN4VlFVRkpMRU5CUVVOelVDeFhRVUZYTEVOQlFVTkZMSGRDUVVGYUxFVkJRVXdzUlVGRFFUdEJRVU5KTEZsQlFVbEdMRmRCUVZjc1EwRkJRMGNzYVVKQlFWb3NRMEZCT0VKUUxFOUJRVThzUTBGQlF6VnpRaXhSUVVGMFF5eERRVUZLTEVWQlEwRTdRVUZEU1R0QlFVVkJMR05CUVVsbmRFSXNWMEZCVnl4RFFVRkRTU3cyUWtGQldpeE5RVUVyUXl4RFFVRkRVaXhQUVVGUExFTkJRVU5vUkN4elFrRkJOVVFzUlVGRFFUdEJRVU5KTEdsQ1FVRkxla1lzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExHdEhRVU5NTERaR1FVUldPenRCUVVWQkxHbENRVUZMV2l4clFrRkJUQ3hEUVVGM1FtNWlMR2xDUVVGNFFpeERRVUV3UXl4SlFVRkpRU3cwUkVGQlNpeERRVUZ6UWpKb1FpeFBRVUZQTEVOQlFVTTFjMElzVVVGQk9VSXNSVUZCZDBOclFpeERRVUZETEVOQlFVTklMRVZCUVRGRExFVkJRVGhETERCRFFVRTVReXhEUVVFeFF5eEZRVUZ4U1N4M1JrRkJja2s3UVVGRFNDeFhRVXhFTEUxQlRVc3NTVUZCU1dselFpeFhRVUZYTEVOQlFVTkxMRzlDUVVGYUxFMUJRWE5ETEVOQlFVTlVMRTlCUVU4c1EwRkJRekZETEc5Q1FVRnVSQ3hGUVVOTU8wRkJRMGtzYVVKQlFVc3ZSaXhKUVVGTUxFTkJRVlUyUXl4SlFVRldMRU5CUVdVc2JVWkJRMHdzTkVkQlJGWTdPMEZCUlVFc2FVSkJRVXRhTEd0Q1FVRk1MRU5CUVhkQ00wZ3NiMEpCUVhoQ0xFTkJRVFpETEVsQlFVbEJMQ3RFUVVGS0xFTkJRWGxDYlU4c1QwRkJUeXhEUVVGRE5YTkNMRkZCUVdwRExFVkJRVEpEYTBJc1EwRkJReXhEUVVGRFNDeEZRVUUzUXl4RlFVRnBSQ3hUUVVGcVJDeEZRVUUwUkN4VFFVRTFSQ3hEUVVFM1F5eEZRVUZ4U0N4cFJrRkJja2c3UVVGRFNDeFhRVXhKTEUxQlQwdzdRVUZEU1N4cFFrRkJTMjlxUWl4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEVOQlFXVXNPRU5CUVdZc1JVRkVTaXhEUVVWSk96czdRVUZEUVR0QlFVTklPMEZCUTBvc1UwRjBRa1FzVFVGMVFrc3NTVUZCU1dkSExGZEJRVmNzUTBGQlEwMHNjVUpCUVZvc1JVRkJTaXhGUVVOTU8wRkJRMGs3UVVGRFFUdEJRVU5CTEdWQlFVdHVTaXhKUVVGTUxFTkJRVlUyUXl4SlFVRldMR3RIUVVoS0xFTkJTVWs3T3p0QlFVTkJPMEZCUTBnc1UwRlFTU3hOUVZOTU8wRkJRMGs3UVVGRFFTeGxRVUZMTjBNc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml4clJrRkJlVVpuUnl4WFFVRlhMRU5CUVVOMFVDeFhRVUZhTEVWQlFYcEdMRzlDUVVFMFNIaGpMRU5CUVVNc1EwRkJRM0ZqTEZGQlFVWXNSVUZCTlVnN08wRkJRMEU3UVVGRFNEdEJRVU5LTEU5QmRrTkVMRTFCZVVOQk8wRkJRMGtzV1VGQlNYRlFMRTlCUVU4c1EwRkJRMWNzU1VGQlVpeEpRVUZuUW5aRkxEQkVRVUZsTEVOQlFVTm5ReXhyUWtGQmNFTXNSVUZEUVR0QlFVTkpPMEZCUTBFc1pVRkJTemRITEVsQlFVd3NRMEZCVlRaRExFbEJRVllzUTBGQlpTd3lSRUZCWmpzN1FVRkRRV2RITEhGQ1FVRlhMRU5CUVVOUkxHOURRVUZhTzBGQlEwRmFMR2xDUVVGUExFTkJRVU5JTEZOQlFWSXNRMEZCYTBKMmNrSXNRMEZCUXl4RFFVRkRVU3hsUVVGR0xFVkJRV3hDTEVWQlFYVkRVaXhEUVVGMlF5eEZRVUV3UXl3MFFrRkJNVU03UVVGRFNDeFRRVTVFTEUxQlVVRTdRVUZEU1R0QlFVTkJMR05CUVVsMWMwSXNXVUZCV1N4SFFVRkhMRXRCUVV0d1F5eFJRVUZNTEVOQlFXTXlRaXhYUVVGa0xFVkJRVEpDU2l4UFFVRlBMRU5CUVVNMWMwSXNVVUZCYmtNc1JVRkJOa00wYzBJc1QwRkJUeXhEUVVGRE0xSXNWMEZCY2tRc1JVRkJhMFV5VWl4UFFVRlBMRU5CUVVOakxGZEJRVEZGTEVOQlFXNUNPenRCUVVOQkxHTkJRVWxFTEZsQlFWa3NTVUZCU1RseVFpeHpSRUZCV1N4RFFVRkRhMHdzVDBGQmFrTXNSVUZEUVR0QlFVTkpPMEZCUTBFc2FVSkJRVXR6V0N4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEVOQlFXVXNORUpCUVdZN08wRkJRMEUwUml4dFFrRkJUeXhEUVVGRFpTeG5Ra0ZCVWl4RFFVRjVRaXh6UkVGQmVrSTdRVUZEU0N4WFFVeEVMRTFCVDBFN1FVRkRTVHRCUVVOQldDeDFRa0ZCVnl4RFFVRkRVU3h2UTBGQldqdEJRVU5CV2l4dFFrRkJUeXhEUVVGRFNDeFRRVUZTTEVOQlFXdENaMElzV1VGQmJFSXNSVUZCWjBOMmMwSXNRMEZCYUVNc1JVRkJiVU1zYjBKQlFXNURPMEZCUTBnN1FVRkRTanRCUVVOS096dEJRVU5FYzBNc1kwRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNiMEpCUVdoQ0xFVkJRWE5ETzBGQlFVTkRMR05CUVUwc1JVRkJSV2x3UWp0QlFVRlVMRTlCUVhSRExFTkJRWFpDTzBGQlEwZ3NTeXhEUVVWRU96czdPM0ZFUVVOcFF6RnlRaXhETEVWQlEycERPMEZCUTBrc1ZVRkJUV3R5UWl4blFrRkJaMElzUjBGQlIyeHlRaXhEUVVGRExFTkJRVU5ITEVsQlFVWXNRMEZCVDBNc1ZVRkJhRU03UVVGRFFTeFZRVUZOYzNKQ0xFOUJRVThzUjBGQlJ5eExRVUZMZUVjc2EwSkJRWEpDTzBGQlEwRXNWVUZCVFhkSUxHTkJRV01zUjBGQlJ5eEpRVUZKYUdwQ0xHOUZRVUZLTEVOQlFUaENNVW9zUTBGQk9VSXNRMEZCZGtJN08wRkJSVUVzVlVGQlNTeExRVUZMWjJ4Q0xGZEJRVXdzU1VGQmIwSlpMR3RFUVVGUExFTkJRVU50UWl4WFFVRTFRaXhKUVVFeVF6SkZMRTlCUVU4c1EwRkJRelZGTEZGQlFXNUVMRWxCUVN0RUxFTkJRVU0wUlN4UFFVRlBMRU5CUVVNMWMwSXNVVUZCVkN4SlFVRnhRbTl6UWl4blFrRkJlRVlzUlVGRFFUdEJRVU5KTEZsQlFVa3NRMEZCUTNkQ0xHTkJRV01zUTBGQlEwTXNlVUpCUVdZc1JVRkJUQ3hGUVVGcFJEdEJRVU0zUXl4bFFVRkxNVW9zU1VGQlRDeERRVUZWTmtNc1NVRkJWaXgzUmtGQkswWnZSaXhuUWtGQkwwWTdPMEZCUTBFN1FVRkRTRHRCUVVOS096dEJRVVZFTEZWQlFVbDNRaXhqUVVGakxFTkJRVU51YzBJc1QwRkJia0lzUlVGQk5FSTdPMEZCUlRWQ0xGZEJRVXN3YVVJc1NVRkJUQ3hEUVVGVmMwTXNTVUZCVml4RFFVRmxMREJEUVVFd1EyMUlMR05CUVdNc1EwRkJRMFVzWTBGQlppeEZRVUV4UXl4SFFVRTBSU3hYUVVFMVJTeEhRVUV3UmtZc1kwRkJZeXhEUVVGRFJ5eGpRVUZtTEVWQlFYcEhPenRCUVVWQmJrSXNZVUZCVHl4RFFVRkRiMElzV1VGQlVpeERRVUZ4UWl4dFEwRkJiVU5LTEdOQlFXTXNRMEZCUTBjc1kwRkJaaXhGUVVGdVF5eEhRVUZ4UlN4cFFrRkJNVVk3UVVGRlFYWnhRaXhqUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4dlFrRkJhRUlzUlVGQmMwTTdRVUZCUTBNc1kwRkJUU3hGUVVGRmFYQkNPMEZCUVZRc1QwRkJkRU1zUTBGQmRrSTdRVUZEU0RzN096aERRVVY1UWpGeVFpeERMRVZCUXpGQ08wRkJRMGtzVlVGQlNTdHpRaXhSUVVGUkxFZEJRVWNzU1VGQlNYQnBRaXcwUkVGQlNpeERRVUYxUWpOTExFTkJRWFpDTEVOQlFXWTdPMEZCUTBFc1ZVRkJTU3R6UWl4UlFVRlJMRU5CUVVORExGTkJRVlFzUlVGQlNpeEZRVU5CTzBGQlEwa3NZVUZCUzNKS0xGZEJRVXdzUjBGQmJVSXNTVUZCYmtJN08wRkJRMEVzWVVGQlMxWXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTERaQ1FVRm1PMEZCUTBnc1QwRktSQ3hOUVUxQk8wRkJRMGtzWVVGQlN6ZERMRWxCUVV3c1EwRkJWWE5ETEVsQlFWWXNRMEZCWlN4eFEwRkJjVU4zU0N4UlFVRlJMRU5CUVVORkxHTkJRVlFzUlVGQmNrTXNSMEZCYVVVc1YwRkJha1VzUjBGQkswVkdMRkZCUVZFc1EwRkJRMGNzWTBGQlZDeEZRVUU1Ump0QlFVTklPMEZCUTBvN096dDNSRUZIUkR0QlFVRkJPenRCUVVOSkxGVkJRVWxETEdWQlFXVXNSMEZCUnl4TFFVRjBRanRCUVVWQkxGVkJRVWw2UWl4UFFVRlBMRWRCUVVjc1MwRkJTM2hITEd0Q1FVRnVRanM3UVVGRFFTeFZRVUZKTEV0QlFVdEdMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVOdFFpeFhRVUUxUWl4SlFVRXlReXhEUVVGRE1rVXNUMEZCVHl4RFFVRkROVVVzVVVGQmVFUXNSVUZEUVR0QlFVTkpMRmxCUVVselJ5eExRVUZMTEVkQlFVY3hRaXhQUVVGYU96dEJRVU5CTEZsQlFVa3dRaXhMUVVGTExFTkJRVU0xUWl4clFrRkJUaXhKUVVFMFFtNWxMRWxCUVVrc1EwRkJRMFFzUjBGQlRDeExRVUZoWjJkQ0xFdEJRVXNzUTBGQlEwTXNhVUpCUVU0c1IwRkJNRUlzUzBGQlN6bEpMRzFDUVVFMVJTeEZRVU5CTzBGQlEwazdRVUZEUVN4bFFVRkxkRUlzU1VGQlRDeERRVUZWTmtNc1NVRkJWanM3UVVGRFFUUkdMR2xDUVVGUExFTkJRVU5sTEdkQ1FVRlNPMEZCUTBGVkxIbENRVUZsTEVkQlFVY3NTVUZCYkVJN1FVRkRTQ3hUUVU1RUxFMUJUMHNzU1VGQlNVTXNTMEZCU3l4RFFVRkRiRVVzVjBGQlRpeEpRVUZ4UWpkaUxFbEJRVWtzUTBGQlEwUXNSMEZCVEN4TFFVRmhaMmRDTEV0QlFVc3NRMEZCUTBVc2IwSkJRVTRzUjBGQk5rSXNTMEZCUzJoS0xHMUNRVUY0UlN4RlFVTk1PMEZCUTBrN1FVRkRRU3hsUVVGTGNrSXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpdzJSRUZCYjBWelNDeExRVUZMTEVOQlFVTkZMRzlDUVVFeFJUczdRVUZEUVN4bFFVRkxOMElzZFVKQlFVdzdRVUZEU0R0QlFVTktPenRCUVVWRUxGVkJRVWt3UWl4bFFVRktMRVZCUVhGQ08wRkJRMnBDTjNGQ0xHZENRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh2UWtGQmFFSXNSVUZCYzBNN1FVRkJRME1zWjBKQlFVMHNSVUZCUlN4TFFVRkxlV2xDTzBGQlFXUXNVMEZCZEVNc1EwRkJka0k3UVVGRFNEczdRVUZGUkdwcFFpeG5Ra0ZCVlN4RFFVRkRPMEZCUVVFc1pVRkJUU3hMUVVGSkxFTkJRVU13YVVJc2FVTkJRVXdzUlVGQlRqdEJRVUZCTEU5QlFVUXNSVUZCYVVRc1MwRkJTM1JDTEhkQ1FVRjBSQ3hEUVVGV08wRkJRMGc3T3p0eFEwRkZaMEp5YTBJc1F5eEZRVUZITzBGQlEyaENMRmxCUVUwc1NVRkJTVEJDTEV0QlFVb3NRMEZCVlN4clJVRkJWaXhEUVVGT08wRkJRMGc3T3pzeVEwRkZjMEl4UWl4RExFVkJRVWM3UVVGRGRFSXNXVUZCVFN4SlFVRkpNRUlzUzBGQlNpeERRVUZWTEd0RlFVRldMRU5CUVU0N1FVRkRTRHM3TzNkRFFVVnRRakZDTEVNc1JVRkJSenRCUVVOdVFpeFpRVUZOTEVsQlFVa3dRaXhMUVVGS0xFTkJRVlVzYTBWQlFWWXNRMEZCVGp0QlFVTklPenM3TkVOQlJYVkNNVUlzUXl4RlFVTjRRanRCUVVOSkxGVkJRVWtzVDBGQlR5eExRVUZMYjB3c1owSkJRVm9zUzBGQmFVTXNWVUZCY2tNc1JVRkJhVVFzUzBGQlMwRXNaMEpCUVV3c1EwRkJjMEp3VEN4RFFVRjBRanRCUVVOd1JEczdPMnRFUVVVMlFrRXNReXhGUVVNNVFqdEJRVU5KTEZWQlFVa3NUMEZCVHl4TFFVRkxjMHdzYzBKQlFWb3NTMEZCZFVNc1ZVRkJNME1zUlVGQmRVUXNTMEZCUzBFc2MwSkJRVXdzUTBGQk5FSjBUQ3hEUVVFMVFqdEJRVU14UkRzN095dERRVVV3UWtFc1F5eEZRVU16UWp0QlFVTkpMRlZCUVVrc1QwRkJUeXhMUVVGTGRVd3NiVUpCUVZvc1MwRkJiME1zVlVGQmVFTXNSVUZCYjBRc1MwRkJTMEVzYlVKQlFVd3NRMEZCZVVKMlRDeERRVUY2UWp0QlFVTjJSQ3hMTEVOQlJVUTdRVUZGUVRzN096dHBRMEZIUVR0QlFVRkJPenRCUVVOSk8wRkJRMEVzVjBGQlMydHFRaXhMUVVGTUxFZEJRV0VzU1VGQlNUbG9RaXh6UkVGQlNpeEZRVUZpT3p0QlFVVkJMRlZCUVVrc1MwRkJTMjF6UWl4aFFVRk1MRTFCUVhkQ0xFdEJRVXQ0U3l4elFrRkJha01zUlVGQmVVUTdRVUZEY2tRc1lVRkJTMFVzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExEWkNRVUZtT3p0QlFVTkJMR0ZCUVVzNVF5eGpRVUZNTEVkQlFYTkNMRXRCUVV0QkxHTkJRVXdzUTBGQmIwSjNTeXhQUVVGd1FpeERRVUUwUWl4UFFVRTFRaXhGUVVGeFF5eFJRVUZ5UXl4RFFVRjBRanRCUVVORU96dEJRVU5FTEZkQlFVdDBTeXhMUVVGTUxFTkJRVmMzYUVJc1QwRkJXQ3hIUVVGeFFpeExRVUZMTW1oQ0xHTkJRVEZDTEVOQlVrNHNRMEZWU1RzN1FVRkRRVEZuUWl4alFVRlJMRU5CUVVOdGNrSXNaMEpCUVZRc1EwRkJNRUlzZVVKQlFURkNMRVZCUVhGRUxGVkJRVU5zWlN4RFFVRkVPMEZCUVVFc1pVRkJUeXhOUVVGSkxFTkJRVU50WlN3MlFrRkJUQ3hEUVVGdFEyNWxMRU5CUVVNc1EwRkJRemxOTEUxQlFYSkRMRU5CUVZBN1FVRkJRU3hQUVVGeVJEdEJRVU5CU0N4alFVRlJMRU5CUVVOdGNrSXNaMEpCUVZRc1EwRkJNRUlzYVVKQlFURkNMRVZCUVRaRExGVkJRVU5zWlN4RFFVRkVPMEZCUVVFc1pVRkJUeXhOUVVGSkxFTkJRVU52WlN4eFFrRkJUQ3hEUVVFeVFuQmxMRU5CUVVNc1EwRkJRemxOTEUxQlFUZENMRU5CUVZBN1FVRkJRU3hQUVVFM1F6dEJRVU5CU0N4alFVRlJMRU5CUVVOdGNrSXNaMEpCUVZRc1EwRkJNRUlzWlVGQk1VSXNSVUZCTWtNc1ZVRkJRMnhsTEVOQlFVUTdRVUZCUVN4bFFVRlBMRTFCUVVrc1EwRkJRM0ZsTEd0Q1FVRk1MRU5CUVhkQ2NtVXNRMEZCUXl4RFFVRkRPVTBzVFVGQk1VSXNRMEZCVUR0QlFVRkJMRTlCUVRORE8wRkJRMGdzU3l4RFFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN2EwUkJRemhDTW5GQ0xFc3NSVUZET1VJN1FVRkJRVHM3UVVGRFNTeGpRVUZSUVN4TFFVRkxMRU5CUVVONmMwSXNaVUZCWkR0QlFVVkpMR0ZCUVV0QkxESkVRVUZsTEVOQlFVTkZMRlZCUVhKQ08wRkJRMGtzWlVGQlMyOXBRaXhKUVVGTUxFTkJRVlUyUXl4SlFVRldMREpEUVVGclJDeExRVUZMT1VNc1kwRkJka1E3TzBGQlEwRTdPMEZCUlVvc1lVRkJTM0pwUWl3eVJFRkJaU3hEUVVGRFJ5eFRRVUZ5UWp0QlFVTkpMR1ZCUVV0cGFrSXNkME5CUVV3c1IwRkJaMFFzUTBGQmFFUTdPMEZCUlVFc1kwRkJTU3hMUVVGTGFVSXNWMEZCVEN4SlFVRnZRbGtzYTBSQlFVOHNRMEZCUTJsQ0xFOUJRVFZDTEVsQlFYVkRMRXRCUVV0VUxHRkJRVXdzU1VGQmMwSk1MRzlFUVVGVExFTkJRVU5ITEZGQlFUTkZMRVZCUTBFN1FVRkRTU3hwUWtGQlMycENMSFZDUVVGTUxFTkJRVFpDZEd4Q0xFOUJRVGRDTEVkQlFYVkRMSFZDUVVGMlF6dEJRVU5CTWtNc2IwSkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMSGxDUVVGb1FpeEZRVUV5UXp0QlFVRkRReXh2UWtGQlRTeEZRVUZGTEV0QlFVdDNhVUk3UVVGQlpDeGhRVUV6UXl4RFFVRjJRanRCUVVOQkxHZENRVUZKTjBjc1JVRkJSU3hIUVVGSE9VNHNORVJCUVdFc1EwRkJRM1ZrTEdOQlFXUXNSVUZCVkRzN1FVRkRRU3hwUWtGQlMzWkhMRXRCUVV3c1EwRkJWMnhLTEVWQlFVVXNRMEZCUTIxS0xGTkJRVWdzUlVGQldEdEJRVU5JTEZkQlRrUXNUVUZSUVR0QlFVTkpMR2xDUVVGTGRFVXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpdzBRa0ZCYlVNc1MwRkJTemxETEdOQlFYaERPenRCUVVOQkxHbENRVUZMVVN4blFrRkJUQ3hEUVVGelFtaGpMRTlCUVhSQ0xFZEJRV2RETEV0QlFVdHpZaXhSUVVGeVF6czdRVUZEUVN4cFFrRkJTMmxKTEd0Q1FVRk1PMEZCUTBnN08wRkJRMFE3TzBGQlJVb3NZVUZCUzNCeFFpd3lSRUZCWlN4RFFVRkRReXhaUVVGeVFqdEJRVU5KTzBGQlEwRXNaVUZCUzNGcFFpeEpRVUZNTEVOQlFWVTJReXhKUVVGV0xHbERRVUYzUXl4TFFVRkxPVU1zWTBGQk4wTTdPMEZCUTBFc1pVRkJTMWtzYlVKQlFVd3NSMEZCTWtJc1NVRkJNMEk3UVVGRFFTeGxRVUZMUXl4MVFrRkJUQ3hIUVVFclFpeEpRVUV2UWp0QlFVTkJMR1ZCUVV0RExHbENRVUZNTEVkQlFYbENMRU5CUVhwQ096dEJRVU5CTEdWQlFVdG5TeXhwUWtGQlREczdRVUZGUVN4alFVRkpMRXRCUVVzeFNDeGhRVUZNTEVsQlFYTkNUQ3h2UkVGQlV5eERRVUZEUnl4UlFVRndReXhGUVVOQk8wRkJRMGtzYVVKQlFVdEZMR0ZCUVV3c1IwRkJjVUpNTEc5RVFVRlRMRU5CUVVORExHZENRVUV2UWpzN1FVRkZRU3huUWtGQlNTeExRVUZMYUVJc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRMjFDTEZkQlFUVkNMRWxCUVRKRExFTkJRVU1zUzBGQlN6ZENMR3RDUVVGTUxFTkJRWGRDTkVJc1VVRkJlRVVzUlVGRFFUdEJRVU5KTzBGQlEwRTdRVUZEUVN4dFFrRkJTemRFTEVsQlFVd3NRMEZCVlRaRExFbEJRVlk3UVVGRFNEczdRVUZGUkN4blFrRkJTU3hMUVVGTE5VTXNTMEZCVEN4SlFVRmpMRWxCUVd4Q0xFVkJRWGRDTEU5QlZqVkNMRU5CVlc5RE96dEJRVVZvUXl4blFrRkJTU3hMUVVGTFN5dzJRa0ZCVkN4RlFVTkJPMEZCUTBrc2EwSkJRVWtzUzBGQlMxRXNkME5CUVV3c1NVRkJhVVFzUzBGQlMxY3NiME5CUVRGRUxFVkJRMEU3UVVGRFNTeHhRa0ZCU3paQ0xIbENRVUZNT3p0QlFVTkJMSEZDUVVGTGVFTXNkME5CUVV3c1IwRkJaMFFzUTBGQmFFUTdRVUZEU0N4bFFVcEVMRTFCVFVFN1FVRkRTU3h4UWtGQlMwRXNkME5CUVV3c1NVRkJhVVFzUTBGQmFrUTdRVUZEU0R0QlFVTktPenRCUVVWRUxHbENRVUZMWkN4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEc5RFFVRXlReXhMUVVGTGRFSXNkVUpCUVdoRU96dEJRVU5CZG1oQ0xITkNRVUZWTEVOQlFVTXNXVUZCVFR0QlFVTmlMR3RDUVVGSkxFMUJRVWtzUTBGQlEyMXFRaXhoUVVGTUxFbEJRWE5DVEN4dlJFRkJVeXhEUVVGRFJ5eFJRVUZ3UXl4RlFVTkJPMEZCUTBrN1FVRkRRU3h2UWtGQlJ5eE5RVUZKTEVOQlFVTm9SQ3hMUVVGU0xFVkJRMEU3UVVGRFNTeDNRa0ZCU1N4RFFVRkRRU3hMUVVGTUxFTkJRVmNyUXl4UFFVRllPMEZCUTBnN1FVRkRTanRCUVVOS0xHRkJWRk1zUlVGVFVDeExRVUZMZWtJc2RVSkJWRVVzUTBGQlZqdEJRVlZJTEZkQmNrTkVMRTFCYzBOTExFbEJRVWtzUzBGQlMxRXNWMEZCVEN4SlFVRnZRbGtzYTBSQlFVOHNRMEZCUTJsQ0xFOUJRV2hETEVWQlEwdzdRVUZEU1N4blFrRkJTU3hMUVVGTE5VSXNkVUpCUVV3c1EwRkJOa0kyUWl4UlFVRnFReXhGUVVFeVF6czdRVUZGTTBNc1owSkJRVWtzUzBGQlMyNURMSGRDUVVGTUxFbEJRV2xETEV0QlFVdERMSEZDUVVFeFF5eEZRVU5CTzBGQlEwa3NiVUpCUVV0RUxIZENRVUZNTEVkQlFXZERMRU5CUVdoRE96dEJRVU5CTEcxQ1FVRkxNVUlzU1VGQlRDeERRVUZWYzBNc1NVRkJWaXhEUVVGbExHbERRVUZtT3p0QlFVTkJMRzFDUVVGTGFVTXNaMEpCUVV3N08wRkJRMEZzYkVJc2MwSkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMSGxDUVVGb1FpeEZRVUV5UXp0QlFVRkRReXh6UWtGQlRTeEZRVUZGTEV0QlFVdDNhVUk3UVVGQlpDeGxRVUV6UXl4RFFVRjJRanRCUVVOQk8wRkJRMGdzWVVGUVJDeE5RVk5CTzBGQlEwa3NiVUpCUVV0b1F5eEpRVUZNTEVOQlFWVTJReXhKUVVGV0xHdERRVUY1UXl4TFFVRkxkRUlzZFVKQlFUbERPenRCUVVOQmRtaENMSGRDUVVGVkxFTkJRVU1zV1VGQlRUdEJRVU5pTEc5Q1FVRkpMRTFCUVVrc1EwRkJRMjFxUWl4aFFVRk1MRWxCUVhOQ1RDeHZSRUZCVXl4RFFVRkRWU3hsUVVGd1F5eEZRVU5CTzBGQlEwazdRVUZEUVN4elFrRkJTU3hOUVVGSkxFTkJRVU4yUkN4TFFVRlVMRVZCUVdkQ0xFMUJRVWtzUTBGQlEwRXNTMEZCVEN4RFFVRlhLME1zVDBGQldEdEJRVU51UWpzN1FVRkZSQ3h6UWtGQlNTeERRVUZEZEVJc2QwSkJRVXdzU1VGQmFVTXNRMEZCYWtNN1FVRkRTQ3hsUVZKVExFVkJVVkFzUzBGQlMwZ3NkVUpCVWtVc1EwRkJWanRCUVZOSU8wRkJRMG83TzBGQlEwUTdPMEZCUTBvN1FVRkRTU3huUWtGQlRTeEpRVUZKT1dsQ0xFdEJRVW9zUTBGQlZTeHZRa0ZCYjBJd2NrSXNTMEZCT1VJc1EwRkJUanRCUVd4SFVqdEJRVzlIU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dDVRMEZEY1VJN1FVRkJRVHM3UVVGRGFrSXNWMEZCUzFVc2FVSkJRVXc3TzBGQlEwRXNWMEZCU3pGS0xHMUNRVUZNTEVkQlFUSkNNa29zVjBGQlZ5eERRVUZETzBGQlFVRXNaVUZCVFN4TlFVRkpMRU5CUVVORExHRkJRVXdzUlVGQlRqdEJRVUZCTEU5QlFVUXNSVUZCTkVJc1MwRkJTemxLTEdOQlFXcERMRU5CUVhSRE96dEJRVU5CTEZkQlFVczRTaXhoUVVGTU8wRkJRMGc3T3p0dlEwRkZaVHRCUVVGQk96dEJRVU5hTzBGQlEwRXNWVUZCUnl4TFFVRkxPVXNzUzBGQlRDeERRVUZYY0dsQ0xGTkJRVmdzU1VGQmQwSXNTMEZCUzJkcFFpeFJRVUZNTEVsQlFXbENMRWxCUVRWRExFVkJRV3RFTzBGQlF6bERMR0ZCUVV0dFRDeFBRVUZNT3p0QlFVVkJhSEpDTEd0Q1FVRlZMRU5CUVVNc1dVRkJUVHRCUVVOaUxHTkJRVWtzVFVGQlNTeERRVUZETW1kQ0xHMUNRVUZNTEVsQlFUUkNMRWxCUVRWQ0xFdEJRME1zVFVGQlNTeERRVUZEUXl4MVFrRkJUQ3hKUVVGblF5eEpRVUZvUXl4SlFVRjNReXhOUVVGSkxFTkJRVU5CTEhWQ1FVRk1MRU5CUVRaQ2FHdENMRVZCUVRkQ0xFbEJRVzFETEUxQlFVa3NRMEZCUXl0cVFpeHRRa0ZCVEN4RFFVRjVRaTlxUWl4RlFVUnlSeXhEUVVGS0xFVkJSVUU3UVVGRFNTeHJRa0ZCU1N4RFFVRkRhV3RDTEdsQ1FVRk1MRWxCUVRCQ0xFTkJRVEZDT3p0QlFVVkJMR3RDUVVGSkxFTkJRVU5pTEVsQlFVd3NRMEZCVlRaRExFbEJRVllzZVVSQlFXZEZMRTFCUVVrc1EwRkJRMmhETEdsQ1FVRnlSU3hqUVVFd1JpeE5RVUZKTEVOQlFVTlhMSGRDUVVFdlJqczdRVUZGUVN4blFrRkJTU3hOUVVGSkxFTkJRVU5ZTEdsQ1FVRk1MRWRCUVhsQ0xFMUJRVWtzUTBGQlExY3NkMEpCUVd4RExFVkJRMEU3UVVGRFNTeHZRa0ZCU1N4RFFVRkRlRUlzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExIZENRVUZtT3p0QlFVTkJMRzlDUVVGSkxFTkJRVU5wUml4clFrRkJURHM3UVVGRFFUdEJRVU5JTEdGQlZrd3NRMEZaU1R0QlFVTkJPMEZCUTBFN096dEJRVU5CTEd0Q1FVRkpMRU5CUVVNNVNDeEpRVUZNTEVOQlFWVTJReXhKUVVGV0xFTkJRV1VzYTBKQlFXWTdPMEZCUTBFc2EwSkJRVWtzUTBGQlF6VkRMRXRCUVV3c1EwRkJWMmhuUWl4VlFVRllPenRCUVVOQkxHdENRVUZKTEVOQlFVTTBjVUlzYVVKQlFVdzdRVUZEU0RzN1FVRkZSQ3huUWtGQlNTeERRVUZEYUVzc2FVSkJRVXdzUjBGQmVVSXNRMEZCZWtJN1FVRkZTQ3hUUVhwQ1V5eEZRWGxDVWl4TFFVRkxSeXhaUVhwQ1J5eERRVUZXTzBGQk1rSklMRTlCT1VKRUxFMUJPRUpQTzBGQlEwZ3NZVUZCU3paS0xHbENRVUZNT3p0QlFVTkJMR0ZCUVVzM1N5eEpRVUZNTEVOQlFWVTJReXhKUVVGV0xFTkJRV1VzTmtSQlFXWTdRVUZEU0R0QlFVTktMRXNzUTBGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dDVRMEZGUVR0QlFVTkpMRmRCUVVzM1F5eEpRVUZNTEVOQlFWVTJReXhKUVVGV0xFTkJRV1VzZFVKQlFXWXNSVUZFU2l4RFFVZEpPenM3UVVGRFFTeFhRVUZMVFN4aFFVRk1MRWRCUVhGQ1RDeHZSRUZCVXl4RFFVRkRWU3hsUVVFdlFqczdRVUZGUVN4VlFVRkpMRXRCUVV0NlFpeFhRVUZNTEVsQlFXOUNXU3hyUkVGQlR5eERRVUZEYlVJc1YwRkJOVUlzU1VGQk1rTXNRMEZCUXl4TFFVRkxOMElzYTBKQlFVd3NRMEZCZDBJMFFpeFJRVUY0UlN4RlFVTkJPMEZCUTBrc1dVRkJTU3hMUVVGTE5VSXNhMEpCUVV3c1EwRkJkMEpuUlN4WFFVRTFRaXhGUVVOQk8wRkJRMGs3UVVGRFFUdEJRVU5CTEdWQlFVdDFReXgxUWtGQlREdEJRVU5JTEZOQlRFUXNUVUZQUVR0QlFVTkpPMEZCUTBFc1pVRkJTMjVGTEV0QlFVd3NRMEZCVnl4TFFVRkxjRU1zYTBKQlFVd3NRMEZCZDBKblNpeFBRVUZ1UXpzN1FVRkRRU3hsUVVGTGFFb3NhMEpCUVV3c1EwRkJkMEk0UXl4SlFVRjRRanRCUVVOQk1XeENMR3RDUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4dlFrRkJhRUlzUlVGQmMwTTdRVUZCUTBNc2EwSkJRVTBzUlVGQlJTeExRVUZMZVdsQ08wRkJRV1FzVjBGQmRFTXNRMEZCZGtJN1FVRkRTRHRCUVVOS0xFOUJaa1FzVFVGcFFrRTdRVUZEU1N4WlFVRkpMRU5CUVVNc1MwRkJTM1pDTEZkQlFWWXNSVUZCZFVJN1FVRkRia0lzWlVGQlMzZExMR1ZCUVV3N1FVRkRTQ3hUUVVoTUxFTkJTMGs3T3p0QlFVTkJMRmxCUVVjc1MwRkJTMmhLTEU5QlFWSXNSVUZCYVVJN1FVRkRZaXhsUVVGTFFTeFBRVUZNTEVOQlFXRnBTaXh2UWtGQllqdEJRVU5JTzBGQlEwbzdRVUZEU2pzN08zTkRRVWRFTzBGQlEwa3NWVUZCU1VNc2FVSkJRV2xDTEVkQlFVY3NTVUZCU1ROcVFpd3lSRUZCU2l4RFFVRnpRaXhMUVVGTFoxb3NWMEZCTTBJc1JVRkJkME1zUzBGQlMwUXNXVUZCTjBNc1JVRkJNa1FzU1VGQk0wUXNSVUZCYVVWcVFpeFhRVUZxUlN4RlFVRTRSUzlMTEc5RVFVRlZMRU5CUVVNMlZ5eG5Ra0ZCV0N4RlFVRTVSU3hEUVVGNFFqczdRVUZEUVN4WFFVRkxhRWdzUzBGQlRDeERRVUZYSzBjc2FVSkJRV2xDTEVOQlFVTXpSQ3hUUVVGc1FpeEZRVUZZTzBGQlEwZ3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUczdPenQzUTBGRGIwSTdRVUZEYUVJc1ZVRkJSeXhMUVVGTGRFY3NiVUpCUVZJc1JVRkJOa0k3UVVGRGVrSTdRVUZEUVcxTExIRkNRVUZoTEVOQlFVTXNTMEZCUzI1TExHMUNRVUZPTEVOQlFXSTdRVUZEUVN4aFFVRkxRU3h0UWtGQlRDeEhRVUV5UWl4SlFVRXpRanRCUVVOSU8wRkJRMG9zU3l4RFFVVkVPenM3T3poQ1FVVkJPMEZCUTBrc1ZVRkJTVGRPTEVsQlFVa3NSMEZCUjBNc2RVUkJRVlVzUTBGQlEyZFpMRzFDUVVGWUxFVkJRVmc3UVVGRFFTeFhRVUZMTlVzc2JVSkJRVXdzUjBGQk1rSnlUaXhKUVVFelFqczdRVUZEUVN4WFFVRkxLMUVzUzBGQlRDeERRVUZYTDFFc1NVRkJXRHM3UVVGRFFTeFhRVUZMYTFrc2RVSkJRVXdzUjBGQkswSndhRUlzU1VGQlNTeERRVUZEUkN4SFFVRk1MRVZCUVM5Q08wRkJRMGdzU3l4RFFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPM2REUVVOdlFuQk9MRU1zUlVGRGNFSTdRVUZEU1R0QlFVTkJMRmRCUVV0M2FrSXNaMEpCUVV3c1EwRkJjMEowV0N4bFFVRjBRaXhIUVVGM1EyeE5MRU5CUVVNc1EwRkJRekIxUWl4clFrRkJSaXhGUVVGNFF6czdRVUZGUVN4VlFVRkpMRXRCUVVzM1N5eDFRa0ZCVEN4SlFVRm5ReXhKUVVGd1F5eEZRVU5CTzBGQlEwazdRVUZEUVN4WlFVRkpMRXRCUVV0MVF5eGhRVUZNTEVsQlFYTkNUQ3h2UkVGQlV5eERRVUZEUnl4UlFVRndReXhGUVVOQk8wRkJRMGtzWlVGQlMycEVMRWxCUVV3c1EwRkJWVFpETEVsQlFWWXNRMEZCWlN3clEwRkJaanM3UVVGRFFTeGxRVUZMZFVJc2EwSkJRVXc3UVVGRFNDeFRRVXBFTEUxQlRVRTdRVUZEU1N4bFFVRkxjRVVzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExHbEZRVUZtTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3hYUVVGTGFrTXNkVUpCUVV3c1IwRkJLMEkzYWtJc1EwRkJMMEk3TzBGQlEwRXNWMEZCUzJscVFpeEpRVUZNTEVOQlFWVXdUQ3hMUVVGV0xIVkNRVUVyUW5Sb1FpeEpRVUZKTEVOQlFVTkVMRWRCUVV3c1MwRkJZU3hMUVVGTGNXaENMSFZDUVVGcVJEdEJRVU5JTEVzc1EwRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenQzUTBGRGIwSjZkVUlzUXl4RlFVTndRanRCUVVOSkxGVkJRVWswZFVJc1NVRkJTU3hIUVVGSGRGa3NkVVJCUVZVc1EwRkJRM1ZaTEhGQ1FVRllMRU5CUVdsRE4zVkNMRU5CUVdwRExFTkJRVmc3TzBGQlEwRXNWMEZCUzNOdVFpeExRVUZNTEVOQlFWZHpTQ3hKUVVGWU8wRkJRMGdzU3l4RFFVVkVPMEZCUTBFN1FVRkRRVHM3T3pzNFEwRkZRVHRCUVVOSkxGVkJRVWt2UlN4aFFVRmhMRWRCUVVjc1NVRkJTV3huUWl4dlJVRkJTaXhIUVVGblF6UmtMRk5CUVdoRExFVkJRWEJDTzBGQlEwRXNWMEZCUzNKRExHdENRVUZNTEVOQlFYZENOa1VzVlVGQmVFSXNRMEZCYlVOR0xHRkJRV0VzUTBGQlEyaHhRaXhGUVVGcVJEczdRVUZEUVN4WFFVRkxlVzVDTEV0QlFVd3NRMEZCVjNWRExHRkJRVmc3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN01FTkJRM05DYVVZc1Z5eEZRVU4wUWp0QlFVTkpPMEZCUTBFc1ZVRkJTVGwxUWl4RFFVRkRMRWRCUVVkTUxHbEVRVUZQTEVOQlFVTnZka0lzVVVGQlVpeERRVUZwUWtRc1YwRkJWeXhEUVVGRGJuWkNMRTlCUVRkQ0xFVkJRWE5ETEV0QlFVdHRha0lzVVVGQk0wTXNRMEZCVWpzN1FVRkRRU3hYUVVGTFJ5eEpRVUZNTEVOQlFWVTJReXhKUVVGV0xFTkJRV1VzWTBGQll6bHNRaXhEUVVGRExFTkJRVU5uVGl4aFFVRXZRanM3UVVGRlFTeFZRVUZKYzFrc2RVUkJRVlVzUTBGQlF6QktMR05CUVZnc1EwRkJNRUpvZGtJc1EwRkJReXhEUVVGRE5FMHNVMEZCTlVJc1EwRkJTaXhGUVVOQk8wRkJRMGtzWVVGQlMzbFpMRmRCUVV3c1EwRkJhVUkwU2l4eFFrRkJha0lzUTBGQmRVTnFka0lzUTBGQmRrTTdPMEZCUTBFN1FVRkRTQ3hQUVZSTUxFTkJWMGs3T3p0QlFVTkJMR05CUVZGQkxFTkJRVU1zUTBGQlF6Uk5MRk5CUVZZN1FVRkZTU3hoUVVGTE9VMHNaMFJCUVUwc1EwRkJRMmRLTEZWQlFWbzdRVUZEU1N4bFFVRkxiMjFDTEdsQ1FVRk1MRU5CUVhWQ2JIWkNMRU5CUVhaQ096dEJRVU5CT3p0QlFVTktMR0ZCUVV0R0xHZEVRVUZOTEVOQlFVTnJTaXhSUVVGYU8wRkJRMGtzWlVGQlMyMXRRaXhsUVVGTUxFTkJRWEZDYm5aQ0xFTkJRWEpDT3p0QlFVTkJPenRCUVVOS0xHRkJRVXRHTEdkRVFVRk5MRU5CUVVOdFNpeFpRVUZhTzBGQlEwa3NaVUZCUzIxdFFpeHRRa0ZCVEN4RFFVRjVRbkIyUWl4RFFVRjZRanM3UVVGRFFUczdRVUZEU2l4aFFVRkxSaXhuUkVGQlRTeERRVUZEYjBvc1kwRkJXanRCUVVOSkxHVkJRVXR0YlVJc2NVSkJRVXdzUTBGQk1rSnlka0lzUTBGQk0wSTdPMEZCUTBFN08wRkJRMG9zWVVGQlMwWXNaMFJCUVUwc1EwRkJRekJLTEdkQ1FVRmFPMEZCUTBrc1pVRkJTemhzUWl4MVFrRkJUQ3hEUVVFMlFuUjJRaXhEUVVFM1FqczdRVUZEUVRzN1FVRkRTaXhoUVVGTFJpeG5SRUZCVFN4RFFVRkRaMHNzWTBGQldqdEJRVU5KTEdWQlFVdDViRUlzY1VKQlFVd3NRMEZCTWtKMmRrSXNRMEZCTTBJN08wRkJRMEU3TzBGQlEwb3NZVUZCUzBZc1owUkJRVTBzUTBGQlEwTXNiVUpCUVZvN1FVRkRTU3hsUVVGTGVYWkNMREJDUVVGTUxFTkJRV2REZUhaQ0xFTkJRV2hET3p0QlFVTkJPenRCUVVOS0xHRkJRVXRHTEdkRVFVRk5MRU5CUVVOMVN5eHZRa0ZCV2p0QlFVTkpMR1ZCUVV0dmJFSXNNa0pCUVV3c1EwRkJhVU42ZGtJc1EwRkJha003TzBGQlEwRTdPMEZCUTBvc1lVRkJTMFlzWjBSQlFVMHNRMEZCUTJsTExHbENRVUZhTzBGQlEwa3NaVUZCU3pKc1FpeDNRa0ZCVEN4RFFVRTRRakYyUWl4RFFVRTVRanM3UVVGRFFUczdRVUZEU2l4aFFVRkxSaXhuUkVGQlRTeERRVUZEYjBzc1owSkJRVm83UVVGRFNTeGxRVUZMZVd4Q0xIVkNRVUZNTEVOQlFUWkNNM1pDTEVOQlFUZENPenRCUVVOQk96dEJRVU5LTEdGQlFVdEdMR2RFUVVGTkxFTkJRVU00U2l3d1FrRkJXanRCUVVOSkxHVkJRVXRuYlVJc2FVTkJRVXdzUTBGQmRVTTFka0lzUTBGQmRrTTdPMEZCUTBFN08wRkJRMG9zWVVGQlMwWXNaMFJCUVUwc1EwRkJRM2xMTEdOQlFWbzdRVUZEU1N4bFFVRkxjMnhDTEc5Q1FVRk1MRU5CUVRCQ04zWkNMRU5CUVRGQ08wRkJRMEU3TzBGQlEwb3NZVUZCUzBZc1owUkJRVTBzUTBGQlF6SkxMSGxDUVVGYU8wRkJRMGtzWlVGQlMzRnNRaXhuUTBGQlRDeERRVUZ6UXpsMlFpeERRVUYwUXpzN1FVRkRRVHM3UVVGRFNpeGhRVUZMUml4blJFRkJUU3hEUVVGRGRVb3NTVUZCV2p0QlFVTkpMR1ZCUVVzd2JVSXNiVUpCUVV3c1EwRkJlVUl2ZGtJc1EwRkJla0k3TzBGQlEwRTdPMEZCUTBvc1lVRkJTMFlzWjBSQlFVMHNRMEZCUTNkS0xFbEJRVm83UVVGRFNTeGxRVUZMTUcxQ0xHMUNRVUZNTEVOQlFYbENhSGRDTEVOQlFYcENPenRCUVVOQk96dEJRVU5LTEdGQlFVdEdMR2RFUVVGTkxFTkJRVU00U3l4alFVRmFPMEZCUTBrc1pVRkJTM0ZzUWl4M1FrRkJUQ3hEUVVFNFFtcDNRaXhEUVVFNVFqczdRVUZEUVRzN1FVRkRTaXhoUVVGTFJpeG5SRUZCVFN4RFFVRkRORW9zZVVKQlFWbzdRVUZEU1N4bFFVRkxkMjFDTEdkRFFVRk1MRU5CUVhORGJIZENMRU5CUVhSRE96dEJRVU5CT3p0QlFVTktMR0ZCUVV0R0xHZEVRVUZOTEVOQlFVTTJTeXhyUWtGQldqdEJRVU5KTEdWQlFVdDNiRUlzZVVKQlFVd3NRMEZCSzBKdWQwSXNRMEZCTDBJN08wRkJRMEU3TzBGQlEwb3NZVUZCUzBZc1owUkJRVTBzUTBGQlEyZE1MSGRDUVVGYU8wRkJRMGtzWTBGQlNTeExRVUZMY1dFc1QwRkJUQ3hKUVVGblFpeEpRVUZ3UWl4RlFVTkJPMEZCUTBrc2FVSkJRVXR0UXl4TFFVRk1MRU5CUVZjdlV5dzJSRUZCWjBJc1EwRkJRelppTEhGQ1FVRnFRaXhEUVVGMVEzaDNRaXhuUlVGQlpTeERRVUZEUXl4RlFVRm9RaXhEUVVGdFFpeFRRVUZ1UWl4RFFVRjJReXhEUVVGWU96dEJRVU5CTzBGQlEwZzdPMEZCUTBRc1pVRkJTM05zUWl4UFFVRk1MRU5CUVdGclRDeHhRa0ZCWWl4RFFVRnRRM0ozUWl4RFFVRnVRenM3UVVGRFFUczdRVUZEU2l4aFFVRkxSaXhuUkVGQlRTeERRVUZEYTB3c2QwSkJRVm83UVVGRFNTeGxRVUZMYldFc1QwRkJUQ3hEUVVGaGJVd3NORUpCUVdJc1EwRkJNRU4wZDBJc1EwRkJNVU03TzBGQlEwRTdPMEZCUTBvc1lVRkJTMFlzWjBSQlFVMHNRMEZCUTI5TUxIRkNRVUZhTzBGQlEwa3NaVUZCUzJsaExFOUJRVXdzUTBGQllXOU1MSGRDUVVGaUxFTkJRWE5EZG5kQ0xFTkJRWFJET3p0QlFVTkJPenRCUVVOS0xHRkJRVXRHTEdkRVFVRk5MRU5CUVVNd1RDeDFRa0ZCV2p0QlFVTkpMR1ZCUVVzeVdpeFBRVUZNTEVOQlFXRnhUQ3d5UWtGQllpeERRVUY1UTNoM1FpeERRVUY2UXpzN1FVRkRRVHM3UVVGRFNpeGhRVUZMUml4blJFRkJUU3hEUVVGRE5Fd3NPRUpCUVZvN1FVRkRTU3hsUVVGTGVWb3NUMEZCVEN4RFFVRmhjMHdzTWtKQlFXSXNRMEZCZVVONmQwSXNRMEZCZWtNN08wRkJRMEU3TzBGQlEwb3NZVUZCUzBZc1owUkJRVTBzUTBGQlEzTk1MR2RDUVVGYU8wRkJRMGtzWlVGQlMzTnNRaXgxUWtGQlRDeERRVUUyUWpGM1FpeERRVUUzUWpzN1FVRkRRVHM3UVVGRFNpeGhRVUZMUml4blJFRkJUU3hEUVVGRGQwd3NjMEpCUVZvN1FVRkRTU3hsUVVGTGNXeENMRFpDUVVGTUxFTkJRVzFETTNkQ0xFTkJRVzVET3p0QlFVTkJPenRCUVVOS0xHRkJRVXRHTEdkRVFVRk5MRU5CUVVONVRDeHRRa0ZCV2p0QlFVTkpMR1ZCUVV0eGJFSXNNRUpCUVV3c1EwRkJaME0xZDBJc1EwRkJhRU03TzBGQlEwRTdPMEZCUTBvc1lVRkJTMFlzWjBSQlFVMHNRMEZCUXpSQ0xFdEJRVm83UVVGRFNTeGxRVUZMYlhaQ0xHbENRVUZNTEVOQlFYVkNOM2RDTEVOQlFYWkNPenRCUVVOQk96dEJRVU5LTEdGQlFVdEdMR2RFUVVGTkxFTkJRVU1yU3l4dlFrRkJXanRCUVVOSkxHVkJRVXR2V1N4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEVOQlFXVXNPRVpCUVdZN08wRkJRMEU3TzBGQlEwbzdRVUZEU1N4bFFVRkxOME1zU1VGQlRDeERRVUZWTmtNc1NVRkJWaXh4UTBGQk5FTTViRUlzUTBGQlF5eERRVUZETkUwc1UwRkJPVU1zWlVGQk5FUTFUU3hEUVVGRExFTkJRVU5ITEVsQlFUbEVPenRCUVVOQk8wRkJOMFpTTzBGQkswWklPenM3ZFVOQlJXdENNbmRDTEVzc1JVRkRia0k3UVVGRFNTeFhRVUZMTjA0c1NVRkJUQ3hEUVVGVmMwTXNTVUZCVml4RFFVRmxMRzFDUVVGbUxFVkJRVzlEZFV3c1MwRkJTeXhEUVVGRGJuaENMRTlCUVRGRE8wRkJRMGc3T3pzd1FrRkZTM2RDTEU4c1JVRkRUanRCUVVOSkxGVkJRVWswZGtJc1NVRkJTU3hIUVVGSE5YWkNMRTlCUVU4c1EwRkJReloyUWl4TlFVRlNMRU5CUVdVc1MwRkJTM2hPTEdkQ1FVRndRaXhEUVVGWU96dEJRVU5CTEZWQlFVa3NTMEZCUzA0c1MwRkJUQ3hEUVVGWGNHbENMRk5CUVdZc1JVRkRRVHRCUVVOSkxHRkJRVXR0YVVJc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml4RFFVRmxMR05CUVdNemEwSXNUMEZCVHl4RFFVRkROa3dzWVVGQmNrTTdPMEZCUTBFc1lVRkJTMnRYTEV0QlFVd3NRMEZCVnl0T0xFbEJRVmdzUTBGQlowSkdMRWxCUVdoQ096dEJRVU5CTEdWQlFVOHNTVUZCVUR0QlFVTklMRTlCVEVRc1RVRlBRVHRCUVVOSkxHRkJRVXM1VGl4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEVOQlFXVXNkVU5CUVhWRE0ydENMRTlCUVU4c1EwRkJRelpNTEdGQlFUbEVPenRCUVVOQkxHVkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwbzdPenRyUTBGRllXeENMRXNzUlVGRFpEdEJRVU5KTEZWQlFVa3NRMEZCUTBFc1MwRkJUQ3hGUVVOQk8wRkJRMGtzWVVGQlMyMVlMRWxCUVV3c1EwRkJWWE5ETEVsQlFWWXNRMEZCWlN4blEwRkJaanM3UVVGRFFTeGxRVUZQTEV0QlFWQTdRVUZEU0RzN1FVRkZSQ3hWUVVGSmVsb3NTMEZCU3l4RFFVRkROa01zVFVGQlRpeEhRVUZsTEVWQlFXNUNMRVZCUTBFN1FVRkRTU3hoUVVGTGMxVXNTVUZCVEN4RFFVRlZjME1zU1VGQlZpeERRVUZsTEhORFFVRm1PenRCUVVOQkxHVkJRVThzUzBGQlVEdEJRVU5JT3p0QlFVVkVMRlZCUVVrc1EwRkJRM3BhTEV0QlFVc3NRMEZCUTI5c1FpeExRVUZPTEVOQlFWa3NTMEZCUzI1TkxHMUNRVUZxUWl4RFFVRk1MRVZCUTBFN1FVRkRTU3hoUVVGTE9VSXNTVUZCVEN4RFFVRlZjME1zU1VGQlZpeERRVUZsTERCRFFVRm1PenRCUVVOQkxHVkJRVThzUzBGQlVEdEJRVU5JT3p0QlFVVkVMR0ZCUVU4c1NVRkJVRHRCUVVOSU96czdNRU5CUlhGQ05VTXNZU3hGUVVOMFFqdEJRVU5KTEZWQlFVa3NRMEZCUTBFc1lVRkJUQ3hGUVVOQk8wRkJRMGtzWVVGQlMwMHNTVUZCVEN4RFFVRlZjME1zU1VGQlZpeERRVUZsTERSRFFVRm1PenRCUVVOQkxHVkJRVThzUzBGQlVEdEJRVU5JT3p0QlFVVkVMRlZCUVUwMFRDeHpRa0ZCYzBJc1IwRkJSM2hQTEdGQlFXRXNRMEZCUXpaTExFOUJRV1FzUTBGQmMwSXNZMEZCZEVJc1JVRkJjME1zUlVGQmRFTXNRMEZCTDBJc1EwRlFTaXhEUVZOSk96dEJRVU5CTEZWQlEwc3NRMEZCUXl4TFFVRkxha3NzTmtKQlFVNHNTVUZCZFVNc1EwRkJRelJPTEhOQ1FVRnpRaXhEUVVGRFJDeExRVUYyUWl4RFFVRTJRaXhMUVVGTGNrMHNNa0pCUVd4RExFTkJRWHBETEVsQlEwTXNTMEZCUzNSQ0xEWkNRVUZNTEVsQlFYTkRMRU5CUVVNMFRpeHpRa0ZCYzBJc1EwRkJRMFFzUzBGQmRrSXNRMEZCTmtJc1MwRkJTM0JOTEN0Q1FVRnNReXhEUVVZMVF5eEZRVWxCTzBGQlEwa3NZVUZCU3pkQ0xFbEJRVXdzUTBGQlZYTkRMRWxCUVZZc1EwRkJaU3dyUTBGQlpqczdRVUZEUVN4bFFVRlBMRXRCUVZBN1FVRkRTRHM3UVVGRlJDeGhRVUZQTEVsQlFWQTdRVUZEU0RzN096SkRRVVZ6UWpaTUxHMUNMRVZCUTNaQ08wRkJRMGtzWVVGQlR5eExRVUZMZGs4c1lVRkJUQ3hKUVVGelFuVlBMRzFDUVVFM1FqdEJRVU5JT3pzN05FTkJSWFZDUXl4dlFpeEZRVU40UWp0QlFVTkpMR0ZCUVU4c1MwRkJTM0pQTEdOQlFVd3NTVUZCZFVKeFR5eHZRa0ZCT1VJN1FVRkRTRHM3T3pzN096czdPenM3TzI5Q1FVbFJMRXRCUVVzNVRpdzJRanM3T3pzN096czdjMEpCUjA0c1EwRkJReXhMUVVGTFZpeGhRVUZPTEVsQlFYVkNMRU5CUVVNc1MwRkJTMDhzWVRzN096czdRVUZETjBJc2NVSkJRVXRJTEVsQlFVd3NRMEZCVlhORExFbEJRVllzUTBGQlpTdzJSa0ZCWmpzN096czdRVUZKUVhCR0xHdERMRWRCUVhGQ0xFdEJRVXR0VWl4dFFrRkJUQ3hGTzBGQlJYSkNReXgxUWl4SFFVRlZMRWxCUVVsNFVpdzBSVUZCU2l4Rk96czdkVUpCU1hOQ2QxSXNUMEZCVHl4RFFVRkRReXhsUVVGU0xFTkJRWGRDTEV0QlFVc3pUeXhoUVVFM1FpeEZRVUUwUXl4TFFVRkxUeXhoUVVGcVJDeEZRVUZuUlN4TFFVRkxReXhoUVVGeVJTeEZRVUZ2Um14RUxHdENRVUZ3Uml4RlFVRjNSeXhMUVVGTGJVUXNWMEZCTjBjc1F6czdPMEZCUVRWQ2JVOHNLMEk3TzNWQ1FVTTBRa0VzWlVGQlpTeERRVUZEVml4SlFVRm9RaXhGT3pzN1FVRkJOVUpYTEcxRE8wRkJSVW9zY1VKQlFVdDJUeXh0UWtGQlRDeEhRVUV5UWpsRkxFMUJRVTBzUTBGQlEwTXNUVUZCVUN4RFFVRmpMRWxCUVVsVExESkZRVUZLTEVOQlFYZENiMElzYTBKQlFYaENMRU5CUVdRc1JVRkRNMEk3UVVGRFNXeENMRzlDUVVGRkxFVkJRVVY1VXl4dFFrRkJiVUlzUTBGQlEzcFRMRVZCUkRWQ08wRkJSVWxFTEhOQ1FVRkpMRVZCUVVVd1V5eHRRa0ZCYlVJc1EwRkJRekZUTEVsQlJqbENPMEZCUjBsTkxESkRRVUY1UWl4RlFVRkZiVk1zWlVGQlpTeERRVUZEUlN4TlFVZ3ZRenRCUVVsSmNGTXNNa05CUVhsQ0xFVkJRVVZyVXl4bFFVRmxMRU5CUVVOSExGVkJTaTlETzBGQlMwbHdVeXhwUTBGQlpTeEZRVUZGYVZNc1pVRkJaU3hEUVVGRFJ5eFZRVXh5UXp0QlFVMUpkbE1zTmtKQlFWY3NSVUZCUlhGVExHMUNRVUZ0UWl4RFFVRkRSenRCUVU1eVF5eHBRa0ZFTWtJc1EwRkJNMEk3T3pzN096czdRVUZaUVN4eFFrRkJTekZQTEcxQ1FVRk1MRWRCUVRKQ0xFdEJRVXRCTEcxQ1FVRk1MRWxCUVRSQ0xFbEJRVWx3UlN3eVJVRkJTaXhEUVVGM1FtOUNMR3RDUVVGNFFpeERRVUYyUkR0QlFVTkJMSEZDUVVGTFowUXNiVUpCUVV3c1EwRkJlVUkzUkN4NVFrRkJla0lzUjBGQmNVUkJMR2xHUVVGNVFpeERRVUZEVFN4dlFrRkJMMFU3UVVGRFFTeHhRa0ZCUzNWRUxHMUNRVUZNTEVOQlFYbENOVVFzZVVKQlFYcENPMEZCUTBFc2NVSkJRVXMwUkN4dFFrRkJUQ3hEUVVGNVFqTkVMR1ZCUVhwQ096dEJRVVZCTEhGQ1FVRkxlVVFzU1VGQlRDeERRVUZWYzBNc1NVRkJWaXhEUVVGbExGbEJRVWx3YTBJc1QwRkJia0k3TzBGQlEwRnRRaXgzUWtGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xFbEJRVWxETEZkQlFVb3NRMEZCWjBJc2MwSkJRV2hDTEVWQlFYZERPMEZCUVVORExIZENRVUZOTEVWQlFVVXNTMEZCU3pCblFqdEJRVUZrTEdsQ1FVRjRReXhEUVVGMlFqczdPenR6UWtGSlFYTlBMR1ZCUVdVc1EwRkJRMFVzVFVGQmFFSXNTVUZCTUVJNVVpeHpSVUZCWXl4RFFVRkRReXhST3pzN096dEJRVVY2UXl4eFFrRkJTM0ZFTEcxQ1FVRk1MRU5CUVhsQ04wUXNlVUpCUVhwQ0xFZEJRWEZFUVN4cFJrRkJlVUlzUTBGQlEwY3NjVUpCUVM5Rk8wRkJSVUZ1WkN4M1FrRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNjMEpCUVdoQ0xFVkJRWGRETzBGQlFVTkRMSGRDUVVGTkxFVkJRVVVzUzBGQlN6Qm5RanRCUVVGa0xHbENRVUY0UXl4RFFVRjJRanM3T3p0elFrRkpSQ3hEUVVGRGMwOHNaVUZCWlN4RFFVRkRTeXhGUVVGcVFpeEpRVUYxUWl4RFFVRkRTaXh0UWtGQmVFSXNTVUZCSzBNc1EwRkJReXhMUVVGTGRrOHNiVUpCUVV3c1EwRkJlVUk1YUVJc1R6czdPenM3UVVGRGVFVXNjVUpCUVVzNGFFSXNiVUpCUVV3c1EwRkJlVUkzUkN4NVFrRkJla0lzUjBGQmNVUkJMR2xHUVVGNVFpeERRVUZEVFN4dlFrRkJMMFU3UVVGRlFYUmtMSGRDUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4elFrRkJhRUlzUlVGQmQwTTdRVUZCUTBNc2QwSkJRVTBzUlVGQlJTeExRVUZMTUdkQ08wRkJRV1FzYVVKQlFYaERMRU5CUVhaQ096czdPMjlDUVVsRExFdEJRVXMwVHl4MVFrRkJUQ3hEUVVFMlFpeExRVUZMTlU4c2JVSkJRVXdzUTBGQmVVSTVhRUlzVDBGQmRFUXNRenM3T3pzN1FVRkZSQ3h4UWtGQlN6aG9RaXh0UWtGQlRDeERRVUY1UWpkRUxIbENRVUY2UWl4SFFVRnhSRUVzYVVaQlFYbENMRU5CUVVOSkxHMUNRVUV2UlR0QlFVVkJjR1FzZDBKQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xITkNRVUZvUWl4RlFVRjNRenRCUVVGRFF5eDNRa0ZCVFN4RlFVRkZMRXRCUVVzd1owSTdRVUZCWkN4cFFrRkJlRU1zUTBGQmRrSTdPenM3UVVGSlNqdEJRVU5KTms4c2QwSXNSMEZCVnpkU0xHdENRVUZyUWl4SFFVRkhMRXRCUVVnc1IwRkJWeXhKTzBGQlF6VkRMSEZDUVVGTE5rTXNZMEZCVEN4SFFVRnpRbWRRTEZGQlFWRXNSMEZCUnl4TFFVRllMRWRCUVcxQ0xFdEJRVXMzVHl4dFFrRkJUQ3hEUVVGNVFqbG9RaXhQUVVGc1JUdEJRVU5CTEhGQ1FVRkxObWhDTEV0QlFVd3NRMEZCVnpkb1FpeFBRVUZZTEVkQlFYRkNMRXRCUVVzeWFFSXNZMEZCTVVJN1FVRkRRU3h4UWtGQlMwY3NiVUpCUVV3c1EwRkJlVUkzUkN4NVFrRkJla0lzUjBGQmNVUkJMR2xHUVVGNVFpeERRVUZETVUwc1QwRkJMMFU3UVVGRlFYUlJMSGRDUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4elFrRkJhRUlzUlVGQmQwTTdRVUZCUTBNc2QwSkJRVTBzUlVGQlJTeExRVUZMTUdkQ08wRkJRV1FzYVVKQlFYaERMRU5CUVhaQ096czdPenM3T3pzN096czdPenM3T3pzN2IwTkJTVW83UVVGRFNTeGhRVUZQTEZsQlFWazNaMElzVVVGQlVTeERRVUZETW5aQ0xGRkJRVlFzUTBGQmEwSkVMRkZCUVRsQ0xFZEJRWGxETEVsQlFYcERMRWRCUVdkRUxFdEJRWFpFTzBGQlEwZ3NTeXhEUVVWRU96czdPekJEUVVWQk8wRkJRMGtzWVVGQlR5eExRVUZMZWtVc1lVRkJUQ3hOUVVGM1FpeExRVUZMZUVzc2MwSkJRWEJETzBGQlEwZzdPenRwUTBFNWJVUkVPMEZCUTBrc1lVRkJUMUFzVjBGQlVEdEJRVU5JT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UTBONlUwdzdRVUZEUVR0QlFVTkJPenRCUVVOUExFbEJRVTExUkN4VFFVRlRMRWRCUTNSQ08wRkJRMGs3UVVGRFFUdEJRVU5CTzBGQlEwRlZMR2xDUVVGbExFVkJRVVVzYVVKQlNuSkNPMEZCVFVrN1FVRkRRVHRCUVVOQk8wRkJRMEZVTEd0Q1FVRm5RaXhGUVVGRkxHdENRVlIwUWp0QlFWZEpPMEZCUTBFN1FVRkRRVHRCUVVOQlJTeFZRVUZSTEVWQlFVVTdRVUZrWkN4RFFVUlBMRU1zUTBGclFsQTdRVUZEUVR0QlFVTkJPenRCUVVOUExFbEJRVTFPTEU5QlFVOHNSMEZEY0VJN1FVRkRTVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CYVVJc1UwRkJUeXhGUVVGRkxGTkJUR0k3UVVGUFNUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJSU3hoUVVGWExFVkJRVVVzWVVGWWFrSTdRVUZoU1R0QlFVTkJPMEZCUTBFN1FVRkRRV3hDTEUxQlFVa3NSVUZCUlR0QlFXaENWaXhEUVVSUExFTXNRMEZ2UWxBN1FVRkRRVHRCUVVOQk96dEJRVU5QTEVsQlFVMXRRaXhuUWtGQllpeEhRVVZKTERCQ1FVRlpiMGNzUzBGQldpeEZRVUZ0UWp0QlFVRkJPenRCUVVObU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCUzNwMFFpeFBRVUZNTEVkQlFXVXNTVUZCWml4RFFVeGxMRU5CVDJZN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNUMEZCUzNWdVFpeDFRa0ZCVEN4SFFVRXJRaXhKUVVFdlFpeERRVmhsTEVOQllXWTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEVzVDBGQlMwTXNiMEpCUVV3c1IwRkJORUlzU1VGQk5VSXNRMEZxUW1Vc1EwRnRRbVk3UVVGRFFUdEJRVU5CT3p0QlFVTkJMRTlCUVV0d1dDeG5Ra0ZCVEN4SFFVRjNRaXhKUVVGNFFpeERRWFJDWlN4RFFYZENaanRCUVVOQk8wRkJRMEU3TzBGQlEwRXNUMEZCU3l0WExGRkJRVXdzUjBGQlowSXNTVUZCYUVJc1EwRXpRbVVzUTBFMlFtWTdRVUZEUVR0QlFVTkJPenRCUVVOQkxFOUJRVXRITEZWQlFVd3NSMEZCYTBJc1NVRkJiRUk3TzBGQlJVRXNUVUZCUjIxSExFdEJRVWdzUlVGQlZUdEJRVU5PTDA4c1ZVRkJUU3hEUVVGRFF5eE5RVUZRTEVOQlFXTXNTVUZCWkN4RlFVRnZRamhQTEV0QlFYQkNPMEZCUTBnN1FVRkRTaXhEUVhaRFREdEJRVEJEVHl4SlFVRk5kRVlzWlVGQlpTeEhRVU0xUWp0QlFVTkpReXhWUVVGUkxFVkJRVVVzVlVGRVpEdEJRVVZKVXl4UlFVRk5MRVZCUVVVc1VVRkdXanRCUVVkSll5eGhRVUZYTEVWQlFVVXNZVUZJYWtJN1FVRkpTVVVzVFVGQlNTeEZRVUZGTEUxQlNsWTdRVUZMU1VVc1VVRkJUU3hGUVVGRkxGRkJURm83UVVGTlNVVXNiVUpCUVdsQ0xFVkJRVVVzYlVKQlRuWkNPMEZCVDBsRkxHOUNRVUZyUWl4RlFVRkZMRzlDUVZCNFFqdEJRVkZKYjBrc1UwRkJUeXhGUVVGRkxGTkJVbUk3UVVGVFNVTXNaVUZCWVN4RlFVRkZPMEZCVkc1Q0xFTkJSRThzUXl4RFFXRlFPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVU5QTEVsQlFVMTZTeXhuUWtGQllpeEhRVVZKTERCQ1FVRlpNRXNzVTBGQldpeEZRVUYxUW1wNFFpeFBRVUYyUWl4RlFVTkJPMEZCUVVFN08wRkJRMGs3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVV0cmVFSXNVMEZCVEN4SFFVRnBRa1FzVTBGQmFrSXNRMEZPU2l4RFFWRkpPMEZCUTBFN1FVRkRRVHM3UVVGRFFTeFBRVUZMZW5sQ0xFOUJRVXdzUjBGQlpYZENMRTlCUVdZN1FVRkRTQ3hEUVdaTUxFTXNRMEZyUWtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZEVHl4SlFVRk5kMjVDTEZkQlFXSXNSMEZGU1R0QlFVTkJPMEZCUTBFN1FVRkRRU3h4UWtGQldUSktMRXRCUVZvc1JVRkJiVUp1ZUVJc1QwRkJia0lzUlVGRFFUdEJRVUZCT3p0QlFVTkpMRTlCUVV0dmVFSXNTMEZCVEN4SFFVRmhSQ3hMUVVGaU8wRkJRMEVzVDBGQlN6TjVRaXhQUVVGTUxFZEJRV1YzUWl4UFFVRm1PMEZCUTBnc1EwRlVUQ3hETEVOQldVRTdRVUZEUVR0QlFVTkJPenRCUVVOUExFbEJRVTB3YlVJc2IwSkJRV0k3UVVGQlFUdEJRVUZCTzBGQlJVa3NaME5CUVZsb2NFSXNVVUZCV2l4RlFVRnpRako2UWl4SlFVRjBRaXhGUVVFMFFqVjZRaXhYUVVFMVFpeEZRVUY1UTNWRExFOUJRWHBETEVWQlFXdEVhWEZDTEVkQlFXeEVMRVZCUTBFN1FVRkJRVHM3UVVGRFNUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRkxkSE5DTEZGQlFVd3NSMEZCYTBKRUxGRkJRV3hDTzBGQlEwRXNVMEZCUzJkQ0xFVkJRVXdzUjBGQmEwSm9RaXhSUVVGc1FpeERRVXhLTEVOQlMyZERPMEZCUlRWQ08wRkJRMEU3UVVGRFFUczdRVUZEUVN4VFFVRkxkM1JDTEVsQlFVd3NSMEZCV1cxSExFbEJRVm9zUTBGV1NpeERRVmxKTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hUUVVGTFF5eGpRVUZNTEVkQlFYTkNja2dzUjBGQmRFSXNRMEZtU2l4RFFXbENTVHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNVMEZCUzNKU0xGZEJRVXdzUjBGQmJVSnVZaXhYUVVGdVFpeERRWEJDU2l4RFFYTkNTVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTkJMRk5CUVV0emNVSXNWMEZCVEN4SFFVRnRRaXhMUVVGdVFpeERRVE5DU2l4RFFUWkNTVHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNVMEZCUzNORUxGZEJRVXdzUjBGQmJVSXNTVUZCYmtJc1EwRm9RMG9zUTBGclEwazdRVUZEUVR0QlFVTkJPenRCUVVOQkxGTkJRVXRqTEc5Q1FVRk1MRWRCUVRSQ0xFbEJRVFZDTEVOQmNrTktMRU5CZFVOSk8wRkJRMEU3UVVGRFFUczdRVUZEUVN4VFFVRkxNVUlzWjBKQlFVd3NSMEZCZDBJc1NVRkJlRUlzUTBFeFEwb3NRMEUwUTBrN1FVRkRRVHRCUVVOQk96dEJRVU5CTEZOQlFVdEtMR3RDUVVGTUxFZEJRVEJDTEVsQlFURkNMRU5CTDBOS0xFTkJhVVJKTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVOQkxGTkJRVXM1UXl4elFrRkJUQ3hIUVVFNFFpeExRVUU1UWl4RFFYSkVTaXhEUVhWRVNUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hUUVVGTFRTeHZRa0ZCVEN4SFFVRTBRaXhKUVVFMVFpeERRVE5FU2l4RFFUWkVTVHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNVMEZCUzJ4RExGRkJRVXdzUjBGQlowSXNTMEZCYUVJc1EwRm9SVW9zUTBGclJVazdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEVzVTBGQlMzWnRRaXhQUVVGTUxFZEJRV1ZGTEhORVFVRlpMRU5CUVVOclRDeFBRVUUxUWl4RFFYUkZTaXhEUVhkRlNUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEVzVTBGQlN5dHRRaXhSUVVGTUxFZEJRV2RDTEVsQlFXaENMRU5CT1VWS0xFTkJaMFpKTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hUUVVGTE5Vb3NkMEpCUVV3c1IwRkJaME1zU1VGQmFFTXNRMEZ1Umtvc1EwRnhSa2s3UVVGRFFUdEJRVU5CT3p0QlFVTkJMRk5CUVVzMlNpd3lRa0ZCVEN4SFFVRnRReXhKUVVGdVF5eERRWGhHU2l4RFFUQkdTVHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNVMEZCUzNSR0xHbENRVUZNTEVkQlFYbENMRWxCUVhwQ0xFTkJOMFpLTEVOQkswWkpPMEZCUTBFN1FVRkRRVHM3UVVGRFFTeFRRVUZMWVN4UFFVRk1MRWRCUVdVdmMwSXNUMEZCWml4RFFXeEhTaXhEUVc5SFNUdEJRVU5CTzBGQlEwRTdPMEZCUTBFc1UwRkJTM2R4UWl4dFFrRkJUQ3hIUVVFeVFpeEpRVUV6UWp0QlFVVkJMRk5CUVV0SkxHMUNRVUZNTEVkQlFUSkNMRWxCUVROQ08wRkJRMGc3TzBGQk4wZE1PMEZCUVVFN1FVRkJRU3g1UWtFclIxTllMRWRCTDBkVUxFVkJaMGhKTzBGQlEwa3NWMEZCUzJ4RExGZEJRVXdzUjBGQmJVSXNTVUZCYmtJN1FVRkRRU3hYUVVGTGMwUXNWMEZCVEN4SFFVRnRRbTVtTEVsQlFVa3NRMEZCUTBRc1IwRkJUQ3hGUVVGdVFqdEJRVU5CTEZkQlFVdHJaMElzYjBKQlFVd3NSMEZCTkVKcVowSXNTVUZCU1N4RFFVRkRSQ3hIUVVGTUxFVkJRVFZDTzBGQlEwRXNWMEZCUzNGc1FpeGpRVUZNTEVkQlFYTkNja2dzUjBGQmRFSTdRVUZEU0R0QlFYSklURHRCUVVGQk8wRkJRVUVzSzBKQmRVaGxRU3hIUVhaSVppeEZRWGRJU1R0QlFVTkpMRmRCUVV0SkxHdENRVUZNTEVkQlFUQkNMRWxCUVRGQ08wRkJRMEVzVjBGQlN6WkNMR2xDUVVGTUxFZEJRWGxDYUdkQ0xFbEJRVWtzUTBGQlEwUXNSMEZCVEN4RlFVRjZRanRCUVVOQkxGZEJRVXR4YkVJc1kwRkJUQ3hIUVVGelFuSklMRWRCUVhSQ08wRkJRMGc3UVVFMVNFdzdRVUZCUVR0QlFVRkJMR2xEUVRoSWFVSkJMRWRCT1VocVFpeEZRU3RJU1R0QlFVTkpMRmRCUVV0SkxHdENRVUZNTEVkQlFUQkNMRXRCUVRGQ08wRkJRMEVzVjBGQlMybElMR05CUVV3c1IwRkJjMEp5U0N4SFFVRjBRanRCUVVOSU8wRkJiRWxNTzBGQlFVRTdRVUZCUVN3clFrRnZTV1YzU0N4WlFYQkpaaXhGUVhGSlNUdEJRVU5KTEZkQlFVdHFTQ3h0UWtGQlRDeEhRVUV5UWl4SlFVRXpRanRCUVVOQkxGZEJRVXN5UWl4dlFrRkJUQ3hIUVVFMFFtcG5RaXhKUVVGSkxFTkJRVU5FTEVkQlFVd3NSVUZCTlVJN1FVRkRRU3hYUVVGTGQyVXNaMEpCUVV3c1IwRkJkMEpuU0N4WlFVRjRRanRCUVVOSU8wRkJla2xNTzBGQlFVRTdRVUZCUVN4eFEwRTBTVWs3UVVGRFNTeFhRVUZMYWtnc2JVSkJRVXdzUjBGQk1rSXNTMEZCTTBJN1FVRkRTRHRCUVRsSlREdEJRVUZCTzBGQlFVRXNNa0pCWjBwWGIwSXNVVUZvU2xnc1JVRm5TbkZDTTBJc1IwRm9TbkpDTEVWQmFVcEpPMEZCUTBrc1YwRkJTemR4UWl4UFFVRk1MRWRCUVdWRkxITkVRVUZaTEVOQlFVTnRUQ3hOUVVFMVFqdEJRVU5CTEZkQlFVdHJZaXhSUVVGTUxFZEJRV2RDTEVsQlFXaENPMEZCUTBFc1YwRkJTelJNTEZGQlFVd3NSMEZCWjBJelJpeFJRVUZvUWp0QlFVTkJMRmRCUVVzd1JpeGpRVUZNTEVkQlFYTkNja2dzUjBGQmRFSTdRVUZEU0R0QlFYUktURHRCUVVGQk8wRkJRVUVzYzBOQmQwcHpRbmxJTEZWQmVFcDBRaXhGUVhkS2EwTjZTQ3hIUVhoS2JFTXNSVUY1U2trN1FVRkRTU3hYUVVGTGRFTXNkMEpCUVV3c1IwRkJaME1yU2l4VlFVRm9RenRCUVVOQkxGZEJRVXR1U3l4elFrRkJUQ3hIUVVFNFFpeEpRVUU1UWp0QlFVTkJMRmRCUVVzclNpeGpRVUZNTEVkQlFYTkNja2dzUjBGQmRFSTdRVUZEU0R0QlFUZEtURHRCUVVGQk8wRkJRVUVzZFVOQkswcDFRa0VzUjBFdlNuWkNMRVZCWjB0Sk8wRkJRMGtzVjBGQlN6RkRMSE5DUVVGTUxFZEJRVGhDTEV0QlFUbENPMEZCUTBFc1YwRkJTeXRLTEdOQlFVd3NSMEZCYzBKeVNDeEhRVUYwUWp0QlFVTklPMEZCYmt0TU8wRkJRVUU3UVVGQlFTeDVRMEZ4UzNsQ2VVZ3NWVUZ5UzNwQ0xFVkJjVXR4UTNwSUxFZEJja3R5UXl4RlFYTkxTVHRCUVVOSkxGZEJRVXQxU0N3eVFrRkJUQ3hIUVVGdFEwVXNWVUZCYmtNN1FVRkRRU3hYUVVGTE4wb3NiMEpCUVV3c1IwRkJORUlzU1VGQk5VSTdRVUZEUVN4WFFVRkxlVW9zWTBGQlRDeEhRVUZ6UW5KSUxFZEJRWFJDTzBGQlEwZzdRVUV4UzB3N1FVRkJRVHRCUVVGQkxHbERRVFJMYVVKQkxFZEJOVXRxUWl4RlFUWkxTVHRCUVVOSkxGZEJRVXR3UXl4dlFrRkJUQ3hIUVVFMFFpeExRVUUxUWp0QlFVTkJMRmRCUVV0NVNpeGpRVUZNTEVkQlFYTkNja2dzUjBGQmRFSTdRVUZEU0R0QlFXaE1URHRCUVVGQk8wRkJRVUVzT0VKQmEweGpaME1zUzBGc1RHUXNSVUZyVEhGQ1RDeFJRV3hNY2tJc1JVRnJUQ3RDTTBJc1IwRnNUQzlDTEVWQmJVeEpPMEZCUTBrc1YwRkJTemR4UWl4UFFVRk1MRWRCUVdVMmMwSXNTMEZCWmp0QlFVTkJMRmRCUVV0elJpeFJRVUZNTEVkQlFXZENNMFlzVVVGQmFFSTdRVUZEUVN4WFFVRkxha2NzVVVGQlRDeEhRVUZuUWl4SlFVRm9RanRCUVVOQkxGZEJRVXN3UlN4clFrRkJUQ3hIUVVFd1FpeExRVUV4UWp0QlFVTkJMRmRCUVV0SExHMUNRVUZNTEVkQlFUSkNMRXRCUVROQ08wRkJRMEVzVjBGQlMycEVMSE5DUVVGTUxFZEJRVGhDTEV0QlFUbENPMEZCUTBFc1YwRkJTMDBzYjBKQlFVd3NSMEZCTkVJc1MwRkJOVUk3UVVGRFFTeFhRVUZMZVVvc1kwRkJUQ3hIUVVGelFuSklMRWRCUVhSQ08wRkJRMGc3UVVFMVRFdzdRVUZCUVR0QlFVRkJMSEZEUVRoTWNVSkJMRWRCT1V4eVFpeEZRU3RNU1R0QlFVTkpMRmRCUVVzM2NVSXNUMEZCVEN4SFFVRmxSU3h6UkVGQldTeERRVUZEYTB3c1QwRkJOVUk3UVVGRFFTeFhRVUZMSzIxQ0xGRkJRVXdzUjBGQlowSXNTVUZCYUVJN1FVRkRRU3hYUVVGTE5Vd3NVVUZCVEN4SFFVRm5RaXhKUVVGb1FqdEJRVU5CTEZkQlFVc3dSU3hyUWtGQlRDeEhRVUV3UWl4TFFVRXhRanRCUVVOQkxGZEJRVXRITEcxQ1FVRk1MRWRCUVRKQ0xFdEJRVE5DTzBGQlEwRXNWMEZCUzJwRUxITkNRVUZNTEVkQlFUaENMRXRCUVRsQ08wRkJRMEVzVjBGQlMwMHNiMEpCUVV3c1IwRkJORUlzUzBGQk5VSTdRVUZEUVN4WFFVRkxlVW9zWTBGQlRDeEhRVUZ6UW5KSUxFZEJRWFJDTzBGQlEwZzdRVUY0VFV3N08wRkJRVUU3UVVGQlFTeEpMRU5CTWsxQk8wRkJRMEU3UVVGRFFUczdRVUZEVHl4SlFVRk5ja01zYjBKQlFXSXNSMEZGU1N3NFFrRkJXU3RLTEZkQlFWb3NSVUZCZVVJemVFSXNUMEZCZWtJc1JVRkRRVHRCUVVGQk96dEJRVU5KTEU5QlFVczBlRUlzVjBGQlRDeEhRVUZ0UWtRc1YwRkJia0lzUTBGRVNpeERRVWRKTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hQUVVGTGJucENMRTlCUVV3c1IwRkJaWGRDTEU5QlFXWTdRVUZEU0N4RFFWWk1PMEZCWVU4c1NVRkJUV3BETEZOQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc2RVSkJRV003UVVGQlFUczdRVUZEVml4VFFVRkxPSHBDTEdsQ1FVRk1MRWRCUVhsQ0xFdEJRWHBDTzBGQlEwRXNVMEZCUzBNc05rSkJRVXdzUjBGQmNVTXNTMEZCY2tNN1FVRkRRU3hUUVVGTFF5eHhRa0ZCVEN4SFFVRTJRaXhMUVVFM1FqdEJRVVZCTEZOQlFVczFla0lzZDBKQlFVd3NSMEZCWjBNc1MwRkJhRU03UVVGRFFTeFRRVUZMUXl4dlEwRkJUQ3hIUVVFMFF5eExRVUUxUXp0QlFVTkJMRk5CUVV0RExEUkNRVUZNTEVkQlFXOURMRXRCUVhCRE8wRkJRMGc3TzBGQlZrdzdRVUZCUVR0QlFVRkJMSEZEUVZseFFqSjZRaXhYUVZweVFpeEZRV0ZKTzBGQlEwa3NWVUZCU1N4TFFVRkxSaXcyUWtGQlRDeEpRVUZ6UXl4TFFVRkxNWHBDTEc5RFFVRXZReXhGUVVOQk8wRkJRMGswZWtJc2JVSkJRVmNzUTBGQlEwTXNkMEpCUVZvc1IwRkJkVU1zUzBGQlMwZ3NOa0pCUVRWRE8wRkJRMGc3TzBGQlEwUXNWVUZCU1N4TFFVRkxReXh4UWtGQlRDeEpRVUU0UWl4TFFVRkxNWHBDTERSQ1FVRjJReXhGUVVOQk8wRkJRMGt5ZWtJc2JVSkJRVmNzUTBGQlEwVXNlVU5CUVZvc1IwRkJkMFFzUzBGQlMwZ3NjVUpCUVRkRU8wRkJRMGc3TzBGQlEwUXNWVUZCU1N4TFFVRkxSaXhwUWtGQlRDeEpRVUV3UWl4TFFVRkxNWHBDTEhkQ1FVRnVReXhGUVVOQk8wRkJRMGsyZWtJc2JVSkJRVmNzUTBGQlEwY3NiVUpCUVZvc1IwRkJhME1zUzBGQlMwNHNhVUpCUVhaRE8wRkJRMGc3TzBGQlEwUXNZVUZCVDBjc1YwRkJVRHRCUVVOSU8wRkJNMEpNTzBGQlFVRTdRVUZCUVN3clFrRTRRa2s3UVVGRFNTeHhSRUZCZDBNc1MwRkJTMFlzTmtKQlFUZERMRzlEUVVGdlJ5eExRVUZMUXl4eFFrRkJla2NzYVVOQlFYRktMRXRCUVV0R0xHbENRVUV4U2p0QlFVTklPMEZCYUVOTU96dEJRVUZCTzBGQlFVRTdRVUZ0UTA4c1NVRkJUVFY2UWl4clFrRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNTeG5RMEZCWXp0QlFVRkJPenRCUVVOV0xGTkJRVXR0TUVJc2MwSkJRVXdzUjBGQk9FSXNSVUZCT1VJN1FVRkRRU3hUUVVGTFF5eHpRa0ZCVEN4SFFVRTRRaXhGUVVFNVFqdEJRVU5CTEZOQlFVdERMSE5DUVVGTUxFZEJRVGhDTEVWQlFUbENPMEZCUTBFc1UwRkJTME1zYzBKQlFVd3NSMEZCT0VJc1JVRkJPVUk3UVVGRFNEczdRVUZRVER0QlFVRkJPMEZCUVVFc05rTkJVelpDUXl4eFFrRlVOMElzUlVGVlNUdEJRVU5KTEZkQlFVdEtMSE5DUVVGTUxFZEJRVGhDU1N4eFFrRkJPVUk3UVVGRFNEdEJRVnBNTzBGQlFVRTdRVUZCUVN3MlEwRmpOa0pETEhGQ1FXUTNRaXhGUVdWSk8wRkJRMGtzVjBGQlMwb3NjMEpCUVV3c1IwRkJPRUpKTEhGQ1FVRTVRanRCUVVOSU8wRkJha0pNTzBGQlFVRTdRVUZCUVN3MlEwRnJRalpDUXl4eFFrRnNRamRDTEVWQmJVSkpPMEZCUTBrc1YwRkJTMG9zYzBKQlFVd3NSMEZCT0VKSkxIRkNRVUU1UWp0QlFVTklPMEZCY2tKTU8wRkJRVUU3UVVGQlFTdzJRMEZ6UWpaQ1F5eHhRa0YwUWpkQ0xFVkJkVUpKTzBGQlEwa3NWMEZCUzBvc2MwSkJRVXdzUjBGQk9FSkpMSEZDUVVFNVFqdEJRVU5JTzBGQmVrSk1PMEZCUVVFN1FVRkJRU3dyUWtFd1FtVllMRmRCTVVKbUxFVkJNa0pKTzBGQlEwbEJMR2xDUVVGWExFTkJRVU5aTEhWQ1FVRmFMRWRCUVhORExFdEJRVXRTTEhOQ1FVRXpRenRCUVVOQlNpeHBRa0ZCVnl4RFFVRkRZU3gxUWtGQldpeEhRVUZ6UXl4TFFVRkxVaXh6UWtGQk0wTTdRVUZEUVV3c2FVSkJRVmNzUTBGQlEyTXNkVUpCUVZvc1IwRkJjME1zUzBGQlMxSXNjMEpCUVRORE8wRkJRMEZPTEdsQ1FVRlhMRU5CUVVObExIVkNRVUZhTEVkQlFYTkRMRXRCUVV0U0xITkNRVUV6UXp0QlFVVkJMR0ZCUVU5UUxGZEJRVkE3UVVGRFNEdEJRV3hEVERzN1FVRkJRVHRCUVVGQkxFazdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTm9Xa0U3UVVGRFFUdEJRVVZQTEVsQlFVMHZUaXhoUVVGaU8wRkJRVUU3UVVGQlFUdEJRVVZKTEhsQ1FVRlpLMDhzUjBGQldpeEZRVU5CTzBGQlFVRTdPMEZCUTBrc1UwRkJTME1zU1VGQlRDeEhRVUZaUkN4SFFVRmFPMEZCUTBFc1UwRkJTMnhTTEVsQlFVd3NSMEZCV1hwaExFOUJRVm83UVVGRlFTeFRRVUZMZGtvc1RVRkJUQ3hIUVVGakxFbEJRVWx6Vml3MFJFRkJTaXhGUVVGa08wRkJRMGdzUjBGU1RDeERRVlZKTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenRCUVhCQ1NqdEJRVUZCTzBGQlFVRXNhME5CY1VKclFqaG1MRTFCY2tKc1FpeEZRWEZDTUVKRExFOUJja0l4UWl4RlFYRkNiVU5ETEZWQmNrSnVReXhGUVhGQ0swTkRMR3RDUVhKQ0wwTXNSVUZ4UW0xRk8wRkJRek5FTEZsQlFVMHNTVUZCU1RsNVFpeExRVUZLTEVOQlFWVXNhMFZCUVZZc1EwRkJUanRCUVVOSUxFdEJka0pNTEVOQmVVSkpPenRCUVhwQ1NqdEJRVUZCTzBGQlFVRXNkME5CTUVKM1FpdDVRaXhYUVRGQ2VFSXNSVUV3UW5GRFF5eGxRVEZDY2tNc1JVRXdRbk5FTzBGQlF6bERMRmxCUVUwc1NVRkJTV2g2UWl4TFFVRktMRU5CUVZVc2EwVkJRVllzUTBGQlRqdEJRVU5JTzBGQk5VSk1PMEZCUVVFN1FVRkJRU3hyUTBFNFFtdENObmxDTEZWQk9VSnNRaXhGUVRoQ09FSTdRVUZEZEVJc1dVRkJUU3hKUVVGSk4zbENMRXRCUVVvc1EwRkJWU3hyUlVGQlZpeERRVUZPTzBGQlEwZzdRVUZvUTB3N1FVRkJRVHRCUVVGQkxIbERRV3REZVVKUUxFOUJiRU42UWl4RlFXdERhME03UVVGRE1VSXNXVUZCVFN4SlFVRkpUeXhMUVVGS0xFTkJRVlVzYTBWQlFWWXNRMEZCVGp0QlFVTklPMEZCY0VOTU8wRkJRVUU3UVVGQlFTd3lRMEYxUTBrN1FVRkRTU3hYUVVGTE1IbENMRWxCUVV3c1EwRkJWVGxOTEV0QlFWWXNRMEZCWjBJc1MwRkJTM0p2UWl4TlFVRk1MRU5CUVZsemIwSXNVMEZCV2l4RFFVRnpRak51UWl4blJVRkJaU3hEUVVGRFF5eEZRVUZvUWl4RFFVRnRRaXhUUVVGdVFpeERRVUYwUWl4RFFVRm9RanRCUVVOSU8wRkJla05NTzBGQlFVRTdRVUZCUVN4cFJFRXlRMmxEUnl4RFFUTkRha01zUlVFMFEwazdRVUZCUVRzN1FVRkRTU3hWUVVGSmRUQkNMRlZCUVZVc1IwRkJSM1l3UWl4RFFVRkRMRU5CUVVOSExFbEJRVVlzUTBGQlR5eGhRVUZRTEVOQlFXcENPMEZCUTBFc1ZVRkJTVzB3UWl4UFFVRlBMRWRCUVVkME1FSXNRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVThzVlVGQlVDeERRVUZrTzBGQlEwRXNWVUZCU1hFd1FpeHJRa0ZCYTBJc1IwRkJSM2d3UWl4RFFVRkRMRU5CUVVOSExFbEJRVVlzUTBGQlR5eHpRa0ZCVUN4RFFVRjZRaXhEUVVoS0xFTkJTMGs3TzBGQlEwRXNZVUZCVDNGblFpeFBRVUZQTEVOQlFVTnRWU3hQUVVGU0xFTkJRV2RDTEV0QlFVdERMR0ZCUVV3c1EwRkJiVUlzUlVGQmJrSXNSVUZCZFVKT0xFOUJRWFpDTEVWQlFXZERReXhWUVVGb1F5eEZRVUUwUTBNc2EwSkJRVFZETEVOQlFXaENMRVZCUVdsR1N5eEpRVUZxUml4RFFVRnpSaXhWUVVGQlF5eFZRVUZWTEVWQlFVazdRVUZEZGtkQkxHdENRVUZWTEVOQlFVTm9ha0lzVDBGQldDeEhRVUZ4UW5kcFFpeFBRVUZ5UWpzN1FVRkRRU3haUVVGSlVTeFZRVUZWTEVOQlFVTTVhVUlzVjBGQldDeEpRVUV3UWl4RFFVRTVRaXhGUVVOQk8wRkJRMFVzWlVGQlNTeERRVUZEYVZJc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml4RFFVRmxMSEZFUVVGbU96dEJRVU5CWjFBc2IwSkJRVlVzUTBGQlEyeHFRaXhOUVVGWUxFZEJRVzlDWlN3clJFRkJiVUlzUTBGQlExTXNaMEpCUVhoRE8wRkJRMFE3TzBGQlJVUXNZVUZCU1N4RFFVRkRaMmhDTEVsQlFVd3NRMEZCVlRsTkxFdEJRVllzUTBGQlowSjNUaXhWUVVGVkxFTkJRVU4yVGl4VFFVRllMRU5CUVhGQ2RtNUNMRU5CUVVNc1EwRkJRMGdzUlVGQmRrSXNRMEZCYUVJN1FVRkRTQ3hQUVZSTkxFTkJRVkE3UVVGVlNEdEJRVFZFVER0QlFVRkJPMEZCUVVFc05rTkJPRVEyUWtjc1EwRTVSRGRDTEVWQkswUkpPMEZCUVVFN08wRkJRMGtzVlVGQlNYa3dRaXhYUVVGWExFZEJRVWNzU1VGQlNTOW5RaXgxUkVGQlNpeERRVUZuUWpGVUxFTkJRV2hDTEVOQlFXeENMRU5CUkVvc1EwRkhTVHM3UVVGRFFTeGhRVUZQZDJkQ0xFOUJRVThzUTBGQlEyMVZMRTlCUVZJc1EwRkJaMElzUzBGQlMwTXNZVUZCVEN4RFFVRnRRa2dzVjBGQlZ5eERRVUZETldsQ0xFMUJRUzlDTEVWQlFYVkROR2xDTEZkQlFWY3NRMEZCUXpOcFFpeFBRVUZ1UkN4RlFVRTBSREpwUWl4WFFVRlhMRU5CUVVNeGFVSXNWVUZCZUVVc1JVRkJiMFl3YVVJc1YwRkJWeXhEUVVGRE4yZENMR3RDUVVGb1J5eERRVUZvUWl4RlFVRnhTV2xvUWl4SlFVRnlTU3hEUVVFd1NTeFZRVUZCUlN4clFrRkJhMElzUlVGQlNUdEJRVU51U3l4WlFVRkpRU3hyUWtGQmEwSXNRMEZCUTI1cVFpeE5RVUZ1UWl4SlFVRTJRbVVzSzBSQlFXMUNMRU5CUVVORExFOUJRWEpFTEVWQlEwRTdRVUZEU1N4blFrRkJTU3hEUVVGRGNWRXNTVUZCVEN4RFFVRlZjME1zU1VGQlZpeERRVUZsTERaRlFVRm1PenRCUVVOQkxHZENRVUZKTEVOQlFVTTJUeXhKUVVGTUxFTkJRVlU1VFN4TFFVRldMRU5CUVdkQ2VVNHNhMEpCUVd0Q0xFTkJRVU40VGl4VFFVRnVRaXhEUVVFMlFuWnVRaXhEUVVGRExFTkJRVU5JTEVWQlFTOUNMRU5CUVdoQ08wRkJRMGc3TzBGQlJVUXNXVUZCU1cweFFpeHpRa0ZCYzBJc1IwRkJSMFFzYTBKQlFXdENMRU5CUVVNM2FFSXNjVUpCUVc1Q0xFVkJRVGRDTzBGQlJVRXNXVUZCU1N0b1FpeHJRa0ZCYTBJc1IwRkJSMFFzYzBKQlFYTkNMRU5CUVVORkxFbEJRWFpDTEVOQlFUUkNMRlZCUVVGRExFZEJRVWM3UVVGQlFTeHBRa0ZCU1VFc1IwRkJSeXhEUVVGRFF5eG5Ra0ZCU2l4TlFVRXdRbGdzVjBGQlZ5eERRVUZEYW5KQ0xHZENRVUZhTEVOQlFUWkNORk1zYzBKQlFUZENMRVZCUVRsQ08wRkJRVUVzVTBGQkwwSXNRMEZCZWtJN08wRkJRMEVzV1VGQlNUWlpMR3RDUVVGS0xFVkJRMEU3UVVGRFNUdEJRVU5CTzBGQlEwRTdRVUZEUVN4blFrRkJTU3hEUVVGRGFGTXNTVUZCVEN4RFFVRlZjME1zU1VGQlZpeERRVUZsTEhWRlFVRm1PenRCUVVOQkxHZENRVUZKTEVOQlFVTTJUeXhKUVVGTUxFTkJRVlU1VFN4TFFVRldMRU5CUVdkQ2VVNHNhMEpCUVd0Q0xFTkJRVU40VGl4VFFVRnVRaXhEUVVFMlFuWnVRaXhEUVVGRExFTkJRVU5JTEVWQlFTOUNMRU5CUVdoQ096dEJRVU5CTzBGQlEwZ3NVMEZzUW10TExFTkJiMEp1U3pzN08wRkJRMEVzV1VGQlNYY3hRaXh4UWtGQmNVSXNSMEZCUjB3c2MwSkJRVFZDTzBGQlEwRkxMRFpDUVVGeFFpeERRVUZEYUhSQ0xFbEJRWFJDTEVOQlEwa3NTVUZCU1d0TExDdEVRVUZLTEVOQlFYZENhMmxDTEZkQlFWY3NRMEZCUTJ4b1FpeFhRVUZhTEVOQlFYZENNazhzVjBGQmVFSXNSVUZCZUVJc1JVRkJLMFIxVXl4WFFVRlhMRU5CUVVOcWNrSXNaMEpCUVZvc1EwRkJOa0k0Y2tJc1owSkJRVGRDTEVWQlFTOUVMRU5CUkVvN1FVRkpRU3haUVVGSldpeGxRVUZsTEVkQlFVY3ZhVUlzT0VSQlFXdENMRU5CUVVNMGFrSXNWVUZCYmtJc1EwRkJPRUpHTEhGQ1FVRTVRaXhEUVVGMFFpeERRVEZDYlVzc1EwRTBRbTVMT3p0QlFVTkJOMVVzWlVGQlR5eERRVUZEYlZVc1QwRkJVaXhEUVVGblFpeE5RVUZKTEVOQlFVTmhMRzFDUVVGTUxFTkJRWGxDWml4WFFVRjZRaXhGUVVGelEwTXNaVUZCZEVNc1EwRkJhRUlzUlVGQmQwVkhMRWxCUVhoRkxFTkJRVFpGTEZWQlFVRlpMR2xDUVVGcFFpeEZRVUZKTzBGQlJUbEdPMEZCUTBGQkxESkNRVUZwUWl4RFFVRkROV3BDTEUxQlFXeENMRWRCUVRKQ05HbENMRmRCUVZjc1EwRkJRelZwUWl4TlFVRjJRenRCUVVOQk5HcENMREpDUVVGcFFpeERRVUZETTJwQ0xFOUJRV3hDTEVkQlFUUkNNbWxDTEZkQlFWY3NRMEZCUXpOcFFpeFBRVUY0UXpzN1FVRkZRU3hqUVVGSk1tcENMR2xDUVVGcFFpeERRVUZETjJwQ0xFMUJRV3hDTEVsQlFUUkNaU3dyUkVGQmJVSXNRMEZCUTBNc1QwRkJjRVFzUlVGRFFUdEJRVU5GTEd0Q1FVRkpMRU5CUVVOeFVTeEpRVUZNTEVOQlFWVnpReXhKUVVGV0xFTkJRV1VzYVVkQlFXWTdPMEZCUTBGclVTdzJRa0ZCYVVJc1EwRkJRM1pxUWl4UlFVRnNRaXhIUVVFMlFqWnBRaXhyUWtGQmEwSXNRMEZCUXpkcFFpeFJRVUZvUkR0QlFVTkVMRmRCU2tRc1RVRk5RVHRCUVVORmRXcENMRFpDUVVGcFFpeERRVUZEZG1wQ0xGRkJRV3hDTEVkQlFUWkNkMmxDTEdWQlFUZENPMEZCUTBRN08wRkJSVVFzWjBKQlFVa3NRMEZCUTA0c1NVRkJUQ3hEUVVGVk9VMHNTMEZCVml4RFFVRm5RbTFQTEdsQ1FVRnBRaXhEUVVGRGJFOHNVMEZCYkVJc1EwRkJORUoyYmtJc1EwRkJReXhEUVVGRFNDeEZRVUU1UWl4RFFVRm9RanRCUVVOSUxGTkJha0pFTzBGQmEwSklMRTlCTDBOTkxFTkJRVkE3UVVGblJFZzdRVUZ1U0V3N1FVRkJRVHRCUVVGQkxEQkRRWEZJTUVKSExFTkJja2d4UWl4RlFYTklTVHRCUVVOSkxGZEJRVXR2TUVJc1NVRkJUQ3hEUVVGVk9VMHNTMEZCVml4RFFVRm5RaXhMUVVGTGNtOUNMRTFCUVV3c1EwRkJXWE52UWl4VFFVRmFMRU5CUVhOQ2RtNUNMRU5CUVVNc1EwRkJRMGdzUlVGQmVFSXNRMEZCYUVJN1FVRkRTRHRCUVhoSVREdEJRVUZCTzBGQlFVRXNaMFJCTUVoblEwY3NRMEV4U0doRExFVkJNa2hKTzBGQlEwa3NWVUZCVFhVd1FpeFZRVUZWTEVkQlFVZDJNRUlzUTBGQlF5eERRVUZEUnl4SlFVRkdMRU5CUVU4c1lVRkJVQ3hEUVVGdVFpeERRVVJLTEVOQlIwazdPMEZCUTBFc1ZVRkJUWFV4UWl4clFrRkJhMElzUjBGQlJ5eFBRVUZQTEV0QlFVdHdaMElzWVVGQldpeExRVUU0UWl4VlFVRTVRaXhIUVVOeVFpeExRVUZMUVN4aFFVRk1MRU5CUVcxQ2FXWXNWVUZCYmtJc1EwRkVjVUlzUjBGRmNrSXNTVUZHVGpzN1FVRkhRU3hWUVVGSkxFTkJRVU50UWl4clFrRkJSQ3hKUVVGMVFpeERRVUZEUVN4clFrRkJhMElzUTBGQlEzUm5RaXhUUVVFelF5eEpRVUYzUkN4RFFVRkRjMmRDTEd0Q1FVRnJRaXhEUVVGRGRHZENMRk5CUVc1Q0xFTkJRVFpDZWtjc1RVRkJNVVlzUlVGRFFUdEJRVU5KSzIxQ0xEQkNRVUZyUWl4MVIwRkJSeXhKUVVGSmRtZENMSEZDUVVGS0xFVkJRVWdzUTBGQmJFSTdPMEZCUTBFc1lVRkJTemhPTEVsQlFVd3NRMEZCVlRaRExFbEJRVllzUTBGQlpTeDVRa0ZCWmp0QlFVTklPenRCUVVWRUxGZEJRVXR6VHl4SlFVRk1MRU5CUVZVNVRTeExRVUZXTEVOQlFXZENiMDhzYTBKQlFXdENMRU5CUVVOdVR5eFRRVUZ1UWl4RFFVRTJRblp1UWl4RFFVRkRMRU5CUVVOSUxFVkJRUzlDTEVOQlFXaENPMEZCUTBnN1FVRjZTVXc3UVVGQlFUdEJRVUZCTEdkRVFUSkpaME5ITEVOQk0wbG9ReXhGUVRSSlNUdEJRVU5KTEZkQlFVc3lNVUlzYjBKQlFVd3NRMEZCTUVJek1VSXNRMEZCTVVJN1FVRkRTRHRCUVRsSlREczdRVUZCUVR0QlFVRkJMRWs3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTklRVHRCUVZkQk8wRkJSVThzU1VGQlRYTnNRaXhWUVVGaU8wRkJRVUU3UVVGQlFUdEJRVVZKTEhOQ1FVRlpOazhzUjBGQldpeEZRVU5CTzBGQlFVRTdPMEZCUTBrc1UwRkJTME1zU1VGQlRDeEhRVUZaUkN4SFFVRmFPMEZCUTBFc1UwRkJTMnhTTEVsQlFVd3NSMEZCV1hwaExFOUJRVm83UVVGRlFTeFRRVUZMZGtvc1RVRkJUQ3hIUVVGakxFbEJRVWxETEc5RVFVRktMRVZCUVdRN1FVRkRTRHM3UVVGU1REdEJRVUZCTzBGQlFVRXNORU5CVlRSQ1RDeFJRVlkxUWl4RlFWZEpPMEZCUTBrc1ZVRkJTU3N5UWl4VFFVRlRMRWRCUVVjc1NVRkJTVGxrTERaRVFVRktMRU5CUVhsQ2Fsb3NVVUZCZWtJc1JVRkJiVU13YjBJc1UwRkJia01zUlVGQmFFSTdRVUZGUVN4VlFVRkpjMDhzUjBGQlJ5eEhRVUZITEVsQlFVbG9UeXdyUkVGQlNpeERRVU5PYUhCQ0xGRkJSRTBzUlVGRFNXbHdRaXd3UkVGQlpTeERRVUZEY1Vzc1lVRkVjRUlzUlVGRGJVTXNRMEZFYmtNc1JVRkRjME41UkN4VFFVUjBReXhGUVVWT0xEaEVRVVpOTEVOQlFWWTdRVUZIUVN4VlFVRkpSU3hQUVVGUExFZEJRVWNzWjBOQlFXUTdRVUZEUVN4aFFVRlBMRXRCUVV0RExHdENRVUZNTEVOQlFYZENSaXhIUVVGNFFpeEZRVUUyUWtNc1QwRkJOMElzUTBGQlVEdEJRVU5JTzBGQmJrSk1PMEZCUVVFN1FVRkJRU3h0UTBGeFFtMUNhak5DTEZGQmNrSnVRaXhGUVhGQ05rSkVMRmRCY2tJM1FpeEZRWE5DU1R0QlFVRkJMRlZCUkhORGNYQkNMRTlCUTNSRExIVkZRVVJuUkN4SlFVRkpOMjlDTERaRVFVRktMRVZCUTJoRU8wRkJRMGtzVlVGQlNXZHpRaXhIUVVGSExFZEJRVWN2VFN4TlFVRk5MRU5CUVVORExFMUJRVkFzUTBGQll5eEpRVUZKZEVjc01rUkJRVW9zUTBGQmRVSndXaXhYUVVGMlFpeEZRVUZ2UTBNc1VVRkJjRU1zUTBGQlpDeEZRVU5XTzBGQlEwbEpMR05CUVUwc1JVRkJSU3hMUVVGTFFTeE5RVVJxUWp0QlFVVkpSU3hsUVVGUExFVkJRVVU0YjBJN1FVRkdZaXhQUVVSVkxFVkJTVkJXTEZOQlNrOHNSVUZCVmp0QlFVMUJMRlZCUVVselR5eEhRVUZITEVkQlFVY3NTVUZCU1doUExDdEVRVUZLTEVOQlEwNW9jRUlzVVVGRVRTeEZRVU5KYVhCQ0xEQkVRVUZsTEVOQlFVTnZTeXhQUVVSd1FpeEZRVU0yUW5SNlFpeFhRVVEzUWl4RlFVTXdRM2R6UWl4SFFVUXhReXh6UlVGRmRVUXNRMEZCUTNoelFpeFhRVUZYTEVkQlFVY3NTMEZCWml4RlFVRnpRbTlpTEU5QlFYUkNMRU5CUVRoQ0xFTkJRVGxDTEVOQlJuWkVMRVZCUVZZN1FVRkhRU3hWUVVGSk9HSXNUMEZCVHl4blJFRkJlVU1zUTBGQlEyd3pRaXhYUVVGWExFZEJRVWNzUzBGQlppeEZRVUZ6UW05aUxFOUJRWFJDTEVOQlFUaENMRU5CUVRsQ0xFTkJRWHBETEVOQlFWZzdRVUZEUVN4aFFVRlBMRXRCUVVzcllpeHJRa0ZCVEN4RFFVRjNRa1lzUjBGQmVFSXNSVUZCTmtKRExFOUJRVGRDTEVOQlFWQTdRVUZEU0R0QlFXeERURHRCUVVGQk8wRkJRVUVzYjBOQmIwTnZRbW96UWl4UlFYQkRjRUlzUlVGdlF6aENhV0VzVTBGd1F6bENMRVZCYjBONVEyeGhMRmRCY0VONlF5eEZRWEZEU1R0QlFVRkJMRlZCUkd0RWNYQkNMRTlCUTJ4RUxIVkZRVVEwUkN4SlFVRkpOMjlDTERaRVFVRktMRVZCUXpWRU8wRkJRMGtzVlVGQlNXZHpRaXhIUVVGSExFZEJRVWN2VFN4TlFVRk5MRU5CUVVORExFMUJRVkFzUTBGQll5eEpRVUZKY0Vjc05FUkJRVW9zUTBGQmQwSlpMRk5CUVhoQ0xFVkJRVzFEYkdFc1YwRkJia01zUlVGQlowUkRMRkZCUVdoRUxFTkJRV1FzUlVGRFZqdEJRVU5KU1N4alFVRk5MRVZCUVVVc1MwRkJTMEVzVFVGRWFrSTdRVUZGU1VVc1pVRkJUeXhGUVVGRk9HOUNPMEZCUm1Jc1QwRkVWU3hGUVVsUVZpeFRRVXBQTEVWQlFWWTdRVUZOUVN4VlFVRkpjMDhzUjBGQlJ5eEhRVUZITEVsQlFVbG9UeXdyUkVGQlNpeERRVU5PYUhCQ0xGRkJSRTBzUlVGRFNXbHdRaXd3UkVGQlpTeERRVUZEYjBzc1QwRkVjRUlzUlVGRE5rSjBla0lzVjBGRU4wSXNSVUZETUVOM2MwSXNSMEZFTVVNc05FVkJSVFpFTEVOQlFVTjRjMElzVjBGQlZ5eEhRVUZITEV0QlFXWXNSVUZCYzBKdllpeFBRVUYwUWl4RFFVRTRRaXhEUVVFNVFpeERRVVkzUkN4RlFVRldPMEZCUjBFc1ZVRkJTVGhpTEU5QlFVOHNiMFJCUVRaRExFTkJRVU5zTTBJc1YwRkJWeXhIUVVGSExFdEJRV1lzUlVGQmMwSnZZaXhQUVVGMFFpeERRVUU0UWl4RFFVRTVRaXhEUVVFM1F5eERRVUZZTzBGQlEwRXNZVUZCVHl4TFFVRkxLMklzYTBKQlFVd3NRMEZCZDBKR0xFZEJRWGhDTEVWQlFUWkNReXhQUVVFM1FpeERRVUZRTzBGQlEwZzdRVUZxUkV3N1FVRkJRVHRCUVVGQkxHdEVRVzFFYTBOcU0wSXNVVUZ1Ukd4RExFVkJiVVEwUTJsaExGTkJia1ExUXl4RlFXMUVkVVJzWVN4WFFXNUVka1FzUlVGdlJFazdRVUZCUVN4VlFVUm5SWEZ3UWl4UFFVTm9SU3gxUlVGRU1FVXNTVUZCU1RkdlFpdzJSRUZCU2l4RlFVTXhSVHRCUVVOSkxGVkJRVWxuYzBJc1IwRkJSeXhIUVVGSEwwMHNUVUZCVFN4RFFVRkRReXhOUVVGUUxFTkJRV01zU1VGQlNXaEhMREJGUVVGS0xFTkJRWE5EVVN4VFFVRjBReXhGUVVGcFJHeGhMRmRCUVdwRUxFVkJRVGhFUXl4UlFVRTVSQ3hEUVVGa0xFVkJRMVk3UVVGRFNVa3NZMEZCVFN4RlFVRkZMRXRCUVV0QkxFMUJSR3BDTzBGQlJVbEZMR1ZCUVU4c1JVRkJSVGh2UWp0QlFVWmlMRTlCUkZVc1JVRkpVRllzVTBGS1R5eEZRVUZXTzBGQlRVRXNWVUZCU1hOUExFZEJRVWNzUjBGQlJ5eEpRVUZKYUU4c0swUkJRVW9zUTBGRFRtaHdRaXhSUVVSTkxFVkJRMGxwY0VJc01FUkJRV1VzUTBGQlEyOUxMRTlCUkhCQ0xFVkJRelpDZEhwQ0xGZEJSRGRDTEVWQlF6QkRkM05DTEVkQlJERkRMREpHUVVVMFJTeERRVUZEZUhOQ0xGZEJRVmNzUjBGQlJ5eExRVUZtTEVWQlFYTkNiMklzVDBGQmRFSXNRMEZCT0VJc1EwRkJPVUlzUTBGR05VVXNSVUZCVmp0QlFVZEJMRlZCUVVrNFlpeFBRVUZQTEcxRlFVRTBSQ3hEUVVGRGJETkNMRmRCUVZjc1IwRkJSeXhMUVVGbUxFVkJRWE5DYjJJc1QwRkJkRUlzUTBGQk9FSXNRMEZCT1VJc1EwRkJOVVFzUTBGQldEdEJRVU5CTEdGQlFVOHNTMEZCU3l0aUxHdENRVUZNTEVOQlFYZENSaXhIUVVGNFFpeEZRVUUyUWtNc1QwRkJOMElzUTBGQlVEdEJRVU5JTzBGQmFFVk1PMEZCUVVFN1FVRkJRU3h4UTBGclJYRkNhak5DTEZGQmJFVnlRaXhGUVd0RkswSnBZU3hUUVd4RkwwSXNSVUZ0UlVrN1FVRkJRU3hWUVVSelEyMVFMRTlCUTNSRExIVkZRVVJuUkN4SlFVRkpOMjlDTERaRVFVRktMRVZCUTJoRU8wRkJRMGtzVlVGQlNXZHpRaXhIUVVGSExFZEJRVWN2VFN4TlFVRk5MRU5CUVVORExFMUJRVkFzUTBGQll5eEpRVUZKYkVjc05rUkJRVW9zUTBGQmVVSlZMRk5CUVhwQ0xFVkJRVzlEYW1Fc1VVRkJjRU1zUTBGQlpDeEZRVU5XTzBGQlEwbEpMR05CUVUwc1JVRkJSU3hMUVVGTFFTeE5RVVJxUWp0QlFVVkpSU3hsUVVGUExFVkJRVVU0YjBJN1FVRkdZaXhQUVVSVkxFVkJTVkJXTEZOQlNrOHNSVUZCVmp0QlFVMUJMRlZCUVVselR5eEhRVUZITEVkQlFVY3NTVUZCU1doUExDdEVRVUZLTEVOQlEwNW9jRUlzVVVGRVRTeEZRVU5KYVhCQ0xEQkVRVUZsTEVOQlFVTnZTeXhQUVVSd1FpeEZRVU0yUWl4RFFVUTNRaXhGUVVOblF6bEhMRWRCUkdoRExFVkJSVTRzT0VSQlJrMHNRMEZCVmp0QlFVZEJMRlZCUVVrd1N5eFBRVUZQTEVkQlFVY3NOa05CUVdRN1FVRkRRU3hoUVVGUExFdEJRVXRETEd0Q1FVRk1MRU5CUVhkQ1JpeEhRVUY0UWl4RlFVRTJRa01zVDBGQk4wSXNRMEZCVUR0QlFVTklPMEZCTDBWTU8wRkJRVUU3UVVGQlFTeDVRMEZwUm5sQ2FqTkNMRkZCYWtaNlFpeEZRV2xHYlVOcFlTeFRRV3BHYmtNc1JVRnBSamhEYkdFc1YwRnFSamxETEVWQmEwWkpPMEZCUVVFc1ZVRkVkVVF5WVN4bFFVTjJSQ3gxUlVGRWVVVXNRMEZEZWtVN1FVRkJRU3hWUVVRMFJUQlBMRTlCUXpWRkxIVkZRVVJ6Uml4SlFVRkpOMjlDTERaRVFVRktMRVZCUTNSR08wRkJRMGtzVlVGQlNXZHpRaXhIUVVGSExFZEJRVWN2VFN4TlFVRk5MRU5CUVVORExFMUJRVkFzUTBGQll5eEpRVUZKYWtZc2FVVkJRVW9zUTBGQk5rSlFMRk5CUVRkQ0xFVkJRWGREYkdFc1YwRkJlRU1zUlVGQmNVUkRMRkZCUVhKRUxFTkJRV1FzUlVGRFZqdEJRVU5KU1N4alFVRk5MRVZCUVVVc1MwRkJTMEVzVFVGRWFrSTdRVUZGU1VRc2RVSkJRV1VzUlVGQlJYVmhMR1ZCUm5KQ08wRkJSMGx3WVN4bFFVRlBMRVZCUVVVNGIwSTdRVUZJWWl4UFFVUlZMRVZCUzFCV0xGTkJURThzUlVGQlZqdEJRVTlCTEZWQlFVbHpUeXhIUVVGSExFZEJRVWNzU1VGQlNXaFBMQ3RFUVVGS0xFTkJRMDVvY0VJc1VVRkVUU3hGUVVOSmFYQkNMREJFUVVGbExFTkJRVU52U3l4UFFVUndRaXhGUVVNMlFuUjZRaXhYUVVRM1FpeEZRVU13UTNkelFpeEhRVVF4UXl4cFJrRkZhMFVzUTBGQlEzaHpRaXhYUVVGWExFZEJRVWNzUzBGQlppeEZRVUZ6UW05aUxFOUJRWFJDTEVOQlFUaENMRU5CUVRsQ0xFTkJSbXhGTEVWQlFWWTdRVUZIUVN4VlFVRkpPR0lzVDBGQlR5eDVSRUZCYTBRc1EwRkJRMnd6UWl4WFFVRlhMRWRCUVVjc1MwRkJaaXhGUVVGelFtOWlMRTlCUVhSQ0xFTkJRVGhDTEVOQlFUbENMRU5CUVd4RUxFTkJRVmc3UVVGRFFTeGhRVUZQTEV0QlFVc3JZaXhyUWtGQlRDeERRVUYzUWtZc1IwRkJlRUlzUlVGQk5rSkRMRTlCUVRkQ0xFTkJRVkE3UVVGRFNEdEJRUzlHVER0QlFVRkJPMEZCUVVFc2NVTkJhVWR4UW1velFpeFJRV3BIY2tJc1JVRnBSeXRDYVdFc1UwRnFSeTlDTEVWQmEwZEpPMEZCUVVFc1ZVRkVjME50VUN4UFFVTjBReXgxUlVGRVowUXNTVUZCU1RkdlFpdzJSRUZCU2l4RlFVTm9SRHRCUVVOSkxGVkJRVWxuYzBJc1IwRkJSeXhIUVVGSEwwMHNUVUZCVFN4RFFVRkRReXhOUVVGUUxFTkJRV01zU1VGQlNXeEdMRFpFUVVGS0xFTkJRWGxDVGl4VFFVRjZRaXhGUVVGdlEycGhMRkZCUVhCRExFTkJRV1FzUlVGRFZqdEJRVU5KU1N4alFVRk5MRVZCUVVVc1MwRkJTMEVzVFVGRWFrSTdRVUZGU1VVc1pVRkJUeXhGUVVGRk9HOUNPMEZCUm1Jc1QwRkVWU3hGUVVsUVZpeFRRVXBQTEVWQlFWWTdRVUZOUVN4VlFVRkpjMDhzUjBGQlJ5eEhRVUZITEVsQlFVbG9UeXdyUkVGQlNpeERRVU5PYUhCQ0xGRkJSRTBzUlVGRFNXbHdRaXd3UkVGQlpTeERRVUZEYjBzc1QwRkVjRUlzUlVGRE5rSXNRMEZFTjBJc1JVRkRaME01Unl4SFFVUm9ReXhGUVVWT0xHOUZRVVpOTEVOQlFWWTdRVUZIUVN4VlFVRkpNRXNzVDBGQlR5eEhRVUZITEcxRVFVRmtPMEZCUTBFc1lVRkJUeXhMUVVGTFF5eHJRa0ZCVEN4RFFVRjNRa1lzUjBGQmVFSXNSVUZCTmtKRExFOUJRVGRDTEVOQlFWQTdRVUZEU0R0QlFUbEhURHRCUVVGQk8wRkJRVUVzZFVOQlowaDFRa1FzUjBGb1NIWkNMRVZCWjBnMFFrTXNUMEZvU0RWQ0xFVkJhVWhKTzBGQlEwa3NWVUZCU1N4TFFVRkxNVUlzU1VGQlRDeERRVUZWYUU4c1lVRkJWaXhKUVVFeVFrd3NiMFJCUVZNc1EwRkJRMGNzVVVGQmVrTXNSVUZCYlVRc1QwRkJUeXhKUVVGSmQwSXNNa1JCUVVvc1EwRkJjVUlzUzBGQmNrSXNSVUZCTkVJc1dVRkJOVUlzUTBGQlVEdEJRVVZ1UkN4VlFVRkpMRXRCUVVzd1RTeEpRVUZNTEVOQlFWVndVQ3hYUVVGV0xFbEJRWGxDV1N4clJFRkJUeXhEUVVGRFF5eEpRVUZ5UXl4RlFVRXlReXhQUVVGUExFbEJRVWsyUWl3eVJFRkJTaXhEUVVGeFFpeExRVUZ5UWl4RlFVRTBRaXhWUVVFMVFpeERRVUZRTzBGQlJUTkRMRmRCUVVzd1RTeEpRVUZNTEVOQlFWVndVQ3hYUVVGV0xFZEJRWGRDV1N4clJFRkJUeXhEUVVGRGJVSXNWMEZCYUVNN1FVRkRRU3hYUVVGTGNVNHNTVUZCVEN4RFFVRlZiRkFzYTBKQlFWWXNSMEZCSzBJeVVTeEhRVUV2UWpzN1FVRkRRU3hWUVVGSkxFdEJRVXQ2UWl4SlFVRk1MRU5CUVZVNVRTeExRVUZXTEVOQlFXZENkVThzUjBGQlJ5eERRVUZETTBnc1QwRkJjRUlzUTBGQlNpeEZRVU5CTzBGQlEwa3NZVUZCUzJ0SExFbEJRVXdzUTBGQlZXeFFMR3RDUVVGV0xFTkJRVFpDT0VNc1NVRkJOMElzUTBGQmEwTTRUaXhQUVVGc1F6dEJRVU5JT3p0QlFVVkVlSHBDTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xHOUNRVUZvUWl4RlFVRnpRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTMEZCU3pKNFFpeEpRVUZNTEVOQlFWVnNVRHRCUVVGdVFpeFBRVUYwUXl4RFFVRjJRanRCUVVOQkxHRkJRVThzU1VGQlNYZERMREpFUVVGS0xFTkJRWEZDTEVsQlFYSkNMRVZCUVRKQ0xHMUNRVUV6UWl4RFFVRlFPMEZCUTBnN1FVRXZTRXc3UVVGQlFUdEJRVUZCTERCRFFXbEpNRUl4YmtJc1EwRnFTVEZDTEVWQmEwbEpPMEZCUTBrc1kwRkJVVUVzUTBGQlF5eERRVUZETkUwc1UwRkJWanRCUVVWSkxHRkJRVXRwVEN4elJFRkJZU3hEUVVGRFJTeHhRa0ZCYmtJN1FVRkRTU3hsUVVGTGFXVXNORUpCUVV3c1EwRkJhME5vTWtJc1EwRkJiRU03TzBGQlEwRTdPMEZCUTBvc1lVRkJTelpZTEhORVFVRmhMRU5CUVVOSkxHMUNRVUZ1UWp0QlFVTkJMR0ZCUVV0S0xITkVRVUZoTEVOQlFVTk5MRzlDUVVGdVFqdEJRVU5CTEdGQlFVdE9MSE5FUVVGaExFTkJRVU5WTEd0RFFVRnVRanRCUVVOQkxHRkJRVXRXTEhORVFVRmhMRU5CUVVOUkxIRkNRVUZ1UWp0QlFVTkJMR0ZCUVV0U0xITkVRVUZoTEVOQlFVTmpMSFZDUVVGdVFqdEJRVU5CTEdGQlFVdGtMSE5FUVVGaExFTkJRVU5aTERKQ1FVRnVRanRCUVVOSkxHVkJRVXQzWkN4elFrRkJUQ3hEUVVFMFFtb3lRaXhEUVVFMVFqczdRVUZEUVRzN1FVRkRTanRCUVVOSkxHVkJRVXRwYWtJc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml3MlEwRkJiMFE1YkVJc1EwRkJReXhEUVVGRE5FMHNVMEZCZEVRc1pVRkJiMFUxVFN4RFFVRkRMRU5CUVVOSExFbEJRWFJGT3p0QlFVTkJPMEZCWmxJN1FVRnBRa2c3UVVGd1NrdzdRVUZCUVR0QlFVRkJMR2xFUVhOS2FVTklMRU5CZEVwcVF5eEZRWFZLU1R0QlFVTkpMRlZCUVVscmNrSXNaMEpCUVdkQ0xFZEJRVWRzY2tJc1EwRkJReXhEUVVGRFJ5eEpRVUZHTEVOQlFVOURMRlZCUVRsQ08wRkJRMEVzVlVGQlNUZ3hRaXhyUWtGQmEwSXNSMEZCUnl4TFFVRkxPVUlzU1VGQlRDeERRVUZWYkZBc2EwSkJRVzVET3p0QlFVTkJMRlZCUVVrc1MwRkJTMnRRTEVsQlFVd3NRMEZCVlhCUUxGZEJRVllzU1VGQmVVSlpMR3RFUVVGUExFTkJRVU50UWl4WFFVRnFReXhKUVVGblJHMVFMR3RDUVVGclFpeERRVUZEY0ZBc1VVRkJia1VzU1VGQkswVXNRMEZCUTI5UUxHdENRVUZyUWl4RFFVRkRjRE5DTEZGQlFYQkNMRXRCUVdsRGIzTkNMR2RDUVVGd1NDeEZRVU5CTzBGQlEwa3NZVUZCUzJwSkxFbEJRVXdzUTBGQlZUWkRMRWxCUVZZc1owZEJRWFZIYjBZc1owSkJRWFpIT3p0QlFVTkJPMEZCUTBnc1QwRlFUQ3hEUVZGSk96czdRVUZGUVdkTUxIZENRVUZyUWl4RFFVRkRNMHNzVTBGQmJrSXNRMEZCTmtKMmNrSXNRMEZCUXl4RFFVRkRVU3hsUVVGR0xFVkJRVGRDTEVWQlFXdEVVaXhEUVVGc1JDeEZRVUZ4UkN4dFEwRkJja1FzUlVGV1NpeERRVmRKT3p0QlFVVkJjME1zWTBGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xFbEJRVWxETEZkQlFVb3NRMEZCWjBJc2IwSkJRV2hDTEVWQlFYTkRPMEZCUVVORExHTkJRVTBzUlVGQlJTeExRVUZMTW5oQ0xFbEJRVXdzUTBGQlZXeFFPMEZCUVc1Q0xFOUJRWFJETEVOQlFYWkNPMEZCUTBnN1FVRnlTMHc3UVVGQlFUdEJRVUZCTERKRFFYVkxNa0pzYkVJc1EwRjJTek5DTEVWQmQwdEpPMEZCUTBrc1ZVRkJTV3R5UWl4blFrRkJaMElzUjBGQlIyeHlRaXhEUVVGRExFTkJRVU5ITEVsQlFVWXNRMEZCVDBNc1ZVRkJPVUk3UVVGRFFTeFZRVUZKT0RGQ0xHdENRVUZyUWl4SFFVRkhMRXRCUVVzNVFpeEpRVUZNTEVOQlFWVnNVQ3hyUWtGQmJrTTdPMEZCUTBFc1ZVRkJTU3hMUVVGTGExQXNTVUZCVEN4RFFVRlZjRkFzVjBGQlZpeEpRVUY1UWxrc2EwUkJRVThzUTBGQlEyMUNMRmRCUVdwRExFbEJRV2RFYlZBc2EwSkJRV3RDTEVOQlFVTndVQ3hSUVVGdVJTeEpRVUVyUlN4RFFVRkRiMUFzYTBKQlFXdENMRU5CUVVOd00wSXNVVUZCY0VJc1MwRkJhVU52YzBJc1owSkJRWEJJTEVWQlEwRTdRVUZEU1N4aFFVRkxha2tzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXg1UmtGQlowZHZSaXhuUWtGQmFFYzdPMEZCUTBFN1FVRkRTQ3hQUVZCTUxFTkJVVWs3T3p0QlFVVkJaMHdzZDBKQlFXdENMRU5CUVVNelN5eFRRVUZ1UWl4RFFVRTJRblp5UWl4RFFVRkRMRU5CUVVOUkxHVkJRVVlzUlVGQk4wSXNSVUZCYTBSU0xFTkJRV3hFTEVWQlFYRkVMRFJDUVVGeVJDeEZRVlpLTEVOQlYwazdPMEZCUlVGelF5eGpRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh2UWtGQmFFSXNSVUZCYzBNN1FVRkJRME1zWTBGQlRTeEZRVUZGTEV0QlFVc3llRUlzU1VGQlRDeERRVUZWYkZBN1FVRkJia0lzVDBGQmRFTXNRMEZCZGtJN1FVRkRTRHRCUVhSTVREdEJRVUZCTzBGQlFVRXNiVU5CZDB3d1FuaFpMRk5CZUV3eFFpeEZRWGxNU1R0QlFVTkpMR0ZCUVU5QkxGTkJRVk1zUTBGQlEzbHdRaXhYUVVGV0xFTkJRWE5DTEZOQlFYUkNMRVZCUVdkRExFTkJRV2hETEUxQlFYVkRMRU5CUVhaRExFbEJRMGw2Y0VJc1UwRkJVeXhKUVVGSmJVd3NjMFJCUVdFc1EwRkJRMk1zZFVKQlJDOUNMRWxCUlVscVRTeFRRVUZUTEVsQlFVbHRUQ3h6UkVGQllTeERRVUZEWVN4elFrRkdMMElzU1VGSFNXaE5MRk5CUVZNc1NVRkJTVzFNTEhORVFVRmhMRU5CUVVORExHOUNRVWd2UWl4SlFVbEpjRXdzVTBGQlV5eEpRVUZKYlV3c2MwUkJRV0VzUTBGQlEwVXNjVUpCU25SRE8wRkJTMGc3UVVFdlRFdzdPMEZCUVVFN1FVRkJRU3hKT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5pUVR0QlFVTkJPMEZCUlU4c1NVRkJUVEZOTEhGQ1FVRmlPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFc1owTkJSMGs3UVVGRFNTeFZRVUZKYUUwc1NVRkJTU3hIUVVGSExFVkJRVmc3UVVGRlFTeGhRVUZQTEVsQlFVbE5MR2xFUVVGS0xFTkJRVmxETEdkRlFVRmxMRU5CUVVORExFVkJRV2hDTEVOQlFXMUNMRTlCUVc1Q0xFTkJRVm9zUlVGQmVVTkRMR2RFUVVGTkxFTkJRVU4xVEN4eFFrRkJhRVFzUlVGQmRVVm9UU3hKUVVGMlJTeEZRVUUyUlN4SlFVRTNSU3hEUVVGUU8wRkJRMGc3UVVGUVREczdRVUZCUVR0QlFVRkJPMEZCVlU4c1NVRkJUV2xOTEhOQ1FVRmlPMEZCUVVFN1FVRkJRVHRCUVVWSkxHdERRVUZaZEV3c1EwRkJXaXhGUVVOQk8wRkJRVUU3TzBGQlEwa3NVMEZCUzBNc1JVRkJUQ3hIUVVGVlJDeERRVUZXTzBGQlEwZzdPMEZCVEV3N1FVRkJRVHRCUVVGQkxHZERRVTlKTzBGQlEwa3NZVUZCVHl4TFFVRkxReXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVhkNFFpeE5RVUZ3UWp0QlFVTklPMEZCVkV3N1FVRkJRVHRCUVVGQkxITkRRVmRKTzBGQlEwa3NZVUZCVDNaUUxGRkJRVkVzUTBGQlF5eExRVUZMYm1sQ0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhhVEpDTEdGQlFXUXNSVUZCTkVJc1JVRkJOVUlzUTBGQlpqdEJRVU5JTzBGQllrdzdRVUZCUVR0QlFVRkJMR2xEUVdWSk8wRkJRMGtzWVVGQlR5eERRVUZETEVOQlFVTXNTMEZCUzI0eVFpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZV3N5UWl4UlFVRjBRanRCUVVOSU8wRkJha0pNT3p0QlFVRkJPMEZCUVVFN1FVRnZRazhzU1VGQlRVTXNaVUZCWWl4SFFVVkpMSGxDUVVGWmRESkNMRU5CUVZvc1JVRkRRVHRCUVVGQk96dEJRVU5KTEU5QlFVdDFNa0lzV1VGQlRDeEhRVUZ2UW01VkxGRkJRVkVzUTBGQlEzQnBRaXhEUVVGRExFTkJRVU5ITEVsQlFVWXNRMEZCVDJreVFpeGhRVUZTTEVWQlFYTkNMRVZCUVhSQ0xFTkJRVFZDTzBGQlEwZ3NRMEZNVEN4RE96czdPenM3T3pzN096dEJRMnBEUVN4bElpd2labWxzWlNJNkluTndhUzFqYkdsbGJuUXRhbk11YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SW9ablZ1WTNScGIyNGdkMlZpY0dGamExVnVhWFpsY25OaGJFMXZaSFZzWlVSbFptbHVhWFJwYjI0b2NtOXZkQ3dnWm1GamRHOXllU2tnZTF4dVhIUnBaaWgwZVhCbGIyWWdaWGh3YjNKMGN5QTlQVDBnSjI5aWFtVmpkQ2NnSmlZZ2RIbHdaVzltSUcxdlpIVnNaU0E5UFQwZ0oyOWlhbVZqZENjcFhHNWNkRngwYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtWVdOMGIzSjVLQ2s3WEc1Y2RHVnNjMlVnYVdZb2RIbHdaVzltSUdSbFptbHVaU0E5UFQwZ0oyWjFibU4wYVc5dUp5QW1KaUJrWldacGJtVXVZVzFrS1Z4dVhIUmNkR1JsWm1sdVpTaGJYU3dnWm1GamRHOXllU2s3WEc1Y2RHVnNjMlVnYVdZb2RIbHdaVzltSUdWNGNHOXlkSE1nUFQwOUlDZHZZbXBsWTNRbktWeHVYSFJjZEdWNGNHOXlkSE5iWENKemNHa3RZMnhwWlc1MExXcHpYQ0pkSUQwZ1ptRmpkRzl5ZVNncE8xeHVYSFJsYkhObFhHNWNkRngwY205dmRGdGNJbk53YVMxamJHbGxiblF0YW5OY0lsMGdQU0JtWVdOMGIzSjVLQ2s3WEc1OUtTaDNhVzVrYjNjc0lHWjFibU4wYVc5dUtDa2dlMXh1Y21WMGRYSnVJQ0lzSWlCY2RHWjFibU4wYVc5dUlHaHZkRVJwYzNCdmMyVkRhSFZ1YXloamFIVnVhMGxrS1NCN1hHNGdYSFJjZEdSbGJHVjBaU0JwYm5OMFlXeHNaV1JEYUhWdWEzTmJZMmgxYm10SlpGMDdYRzRnWEhSOVhHNGdYSFIyWVhJZ2NHRnlaVzUwU0c5MFZYQmtZWFJsUTJGc2JHSmhZMnNnUFNCM2FXNWtiM2RiWENKM1pXSndZV05yU0c5MFZYQmtZWFJsYzNCcFgyTnNhV1Z1ZEY5cWMxd2lYVHRjYmlCY2RIZHBibVJ2ZDF0Y0luZGxZbkJoWTJ0SWIzUlZjR1JoZEdWemNHbGZZMnhwWlc1MFgycHpYQ0pkSUQwZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMWFZ1ZFhObFpDMTJZWEp6WEc0Z1hIUm1kVzVqZEdsdmJpQjNaV0p3WVdOclNHOTBWWEJrWVhSbFEyRnNiR0poWTJzb1kyaDFibXRKWkN3Z2JXOXlaVTF2WkhWc1pYTXBJSHRjYmlCY2RGeDBhRzkwUVdSa1ZYQmtZWFJsUTJoMWJtc29ZMmgxYm10SlpDd2diVzl5WlUxdlpIVnNaWE1wTzF4dUlGeDBYSFJwWmlBb2NHRnlaVzUwU0c5MFZYQmtZWFJsUTJGc2JHSmhZMnNwSUhCaGNtVnVkRWh2ZEZWd1pHRjBaVU5oYkd4aVlXTnJLR05vZFc1clNXUXNJRzF2Y21WTmIyUjFiR1Z6S1R0Y2JpQmNkSDBnTzF4dVhHNGdYSFF2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dGRXNTFjMlZrTFhaaGNuTmNiaUJjZEdaMWJtTjBhVzl1SUdodmRFUnZkMjVzYjJGa1ZYQmtZWFJsUTJoMWJtc29ZMmgxYm10SlpDa2dlMXh1SUZ4MFhIUjJZWElnYzJOeWFYQjBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaGNJbk5qY21sd2RGd2lLVHRjYmlCY2RGeDBjMk55YVhCMExtTm9ZWEp6WlhRZ1BTQmNJblYwWmkwNFhDSTdYRzRnWEhSY2RITmpjbWx3ZEM1emNtTWdQU0JmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5BZ0t5QmNJbHdpSUNzZ1kyaDFibXRKWkNBcklGd2lMbHdpSUNzZ2FHOTBRM1Z5Y21WdWRFaGhjMmdnS3lCY0lpNW9iM1F0ZFhCa1lYUmxMbXB6WENJN1hHNGdYSFJjZEdsbUlDaHVkV3hzS1NCelkzSnBjSFF1WTNKdmMzTlBjbWxuYVc0Z1BTQnVkV3hzTzF4dUlGeDBYSFJrYjJOMWJXVnVkQzVvWldGa0xtRndjR1Z1WkVOb2FXeGtLSE5qY21sd2RDazdYRzRnWEhSOVhHNWNiaUJjZEM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCdWJ5MTFiblZ6WldRdGRtRnljMXh1SUZ4MFpuVnVZM1JwYjI0Z2FHOTBSRzkzYm14dllXUk5ZVzVwWm1WemRDaHlaWEYxWlhOMFZHbHRaVzkxZENrZ2UxeHVJRngwWEhSeVpYRjFaWE4wVkdsdFpXOTFkQ0E5SUhKbGNYVmxjM1JVYVcxbGIzVjBJSHg4SURFd01EQXdPMXh1SUZ4MFhIUnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnWEhSY2RGeDBhV1lnS0hSNWNHVnZaaUJZVFV4SWRIUndVbVZ4ZFdWemRDQTlQVDBnWENKMWJtUmxabWx1WldSY0lpa2dlMXh1SUZ4MFhIUmNkRngwY21WMGRYSnVJSEpsYW1WamRDaHVaWGNnUlhKeWIzSW9YQ0pPYnlCaWNtOTNjMlZ5SUhOMWNIQnZjblJjSWlrcE8xeHVJRngwWEhSY2RIMWNiaUJjZEZ4MFhIUjBjbmtnZTF4dUlGeDBYSFJjZEZ4MGRtRnlJSEpsY1hWbGMzUWdQU0J1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1FvS1R0Y2JpQmNkRngwWEhSY2RIWmhjaUJ5WlhGMVpYTjBVR0YwYUNBOUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjQ0FySUZ3aVhDSWdLeUJvYjNSRGRYSnlaVzUwU0dGemFDQXJJRndpTG1odmRDMTFjR1JoZEdVdWFuTnZibHdpTzF4dUlGeDBYSFJjZEZ4MGNtVnhkV1Z6ZEM1dmNHVnVLRndpUjBWVVhDSXNJSEpsY1hWbGMzUlFZWFJvTENCMGNuVmxLVHRjYmlCY2RGeDBYSFJjZEhKbGNYVmxjM1F1ZEdsdFpXOTFkQ0E5SUhKbGNYVmxjM1JVYVcxbGIzVjBPMXh1SUZ4MFhIUmNkRngwY21WeGRXVnpkQzV6Wlc1a0tHNTFiR3dwTzF4dUlGeDBYSFJjZEgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUZ4MFhIUmNkRngwY21WMGRYSnVJSEpsYW1WamRDaGxjbklwTzF4dUlGeDBYSFJjZEgxY2JpQmNkRngwWEhSeVpYRjFaWE4wTG05dWNtVmhaSGx6ZEdGMFpXTm9ZVzVuWlNBOUlHWjFibU4wYVc5dUtDa2dlMXh1SUZ4MFhIUmNkRngwYVdZZ0tISmxjWFZsYzNRdWNtVmhaSGxUZEdGMFpTQWhQVDBnTkNrZ2NtVjBkWEp1TzF4dUlGeDBYSFJjZEZ4MGFXWWdLSEpsY1hWbGMzUXVjM1JoZEhWeklEMDlQU0F3S1NCN1hHNGdYSFJjZEZ4MFhIUmNkQzh2SUhScGJXVnZkWFJjYmlCY2RGeDBYSFJjZEZ4MGNtVnFaV04wS0Z4dUlGeDBYSFJjZEZ4MFhIUmNkRzVsZHlCRmNuSnZjaWhjSWsxaGJtbG1aWE4wSUhKbGNYVmxjM1FnZEc4Z1hDSWdLeUJ5WlhGMVpYTjBVR0YwYUNBcklGd2lJSFJwYldWa0lHOTFkQzVjSWlsY2JpQmNkRngwWEhSY2RGeDBLVHRjYmlCY2RGeDBYSFJjZEgwZ1pXeHpaU0JwWmlBb2NtVnhkV1Z6ZEM1emRHRjBkWE1nUFQwOUlEUXdOQ2tnZTF4dUlGeDBYSFJjZEZ4MFhIUXZMeUJ1YnlCMWNHUmhkR1VnWVhaaGFXeGhZbXhsWEc0Z1hIUmNkRngwWEhSY2RISmxjMjlzZG1Vb0tUdGNiaUJjZEZ4MFhIUmNkSDBnWld4elpTQnBaaUFvY21WeGRXVnpkQzV6ZEdGMGRYTWdJVDA5SURJd01DQW1KaUJ5WlhGMVpYTjBMbk4wWVhSMWN5QWhQVDBnTXpBMEtTQjdYRzRnWEhSY2RGeDBYSFJjZEM4dklHOTBhR1Z5SUdaaGFXeDFjbVZjYmlCY2RGeDBYSFJjZEZ4MGNtVnFaV04wS0c1bGR5QkZjbkp2Y2loY0lrMWhibWxtWlhOMElISmxjWFZsYzNRZ2RHOGdYQ0lnS3lCeVpYRjFaWE4wVUdGMGFDQXJJRndpSUdaaGFXeGxaQzVjSWlrcE8xeHVJRngwWEhSY2RGeDBmU0JsYkhObElIdGNiaUJjZEZ4MFhIUmNkRngwTHk4Z2MzVmpZMlZ6YzF4dUlGeDBYSFJjZEZ4MFhIUjBjbmtnZTF4dUlGeDBYSFJjZEZ4MFhIUmNkSFpoY2lCMWNHUmhkR1VnUFNCS1UwOU9MbkJoY25ObEtISmxjWFZsYzNRdWNtVnpjRzl1YzJWVVpYaDBLVHRjYmlCY2RGeDBYSFJjZEZ4MGZTQmpZWFJqYUNBb1pTa2dlMXh1SUZ4MFhIUmNkRngwWEhSY2RISmxhbVZqZENobEtUdGNiaUJjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTQ3WEc0Z1hIUmNkRngwWEhSY2RIMWNiaUJjZEZ4MFhIUmNkRngwY21WemIyeDJaU2gxY0dSaGRHVXBPMXh1SUZ4MFhIUmNkRngwZlZ4dUlGeDBYSFJjZEgwN1hHNGdYSFJjZEgwcE8xeHVJRngwZlZ4dVhHNGdYSFIyWVhJZ2FHOTBRWEJ3YkhsUGJsVndaR0YwWlNBOUlIUnlkV1U3WEc0Z1hIUXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdibTh0ZFc1MWMyVmtMWFpoY25OY2JpQmNkSFpoY2lCb2IzUkRkWEp5Wlc1MFNHRnphQ0E5SUZ3aU1qTmlNVE00TkdRNU1URXdOalF6WXpjMU1UVmNJanRjYmlCY2RIWmhjaUJvYjNSU1pYRjFaWE4wVkdsdFpXOTFkQ0E5SURFd01EQXdPMXh1SUZ4MGRtRnlJR2h2ZEVOMWNuSmxiblJOYjJSMWJHVkVZWFJoSUQwZ2UzMDdYRzRnWEhSMllYSWdhRzkwUTNWeWNtVnVkRU5vYVd4a1RXOWtkV3hsTzF4dUlGeDBMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRibVY0ZEMxc2FXNWxJRzV2TFhWdWRYTmxaQzEyWVhKelhHNGdYSFIyWVhJZ2FHOTBRM1Z5Y21WdWRGQmhjbVZ1ZEhNZ1BTQmJYVHRjYmlCY2RDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTExYm5WelpXUXRkbUZ5YzF4dUlGeDBkbUZ5SUdodmRFTjFjbkpsYm5SUVlYSmxiblJ6VkdWdGNDQTlJRnRkTzF4dVhHNGdYSFF2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dGRXNTFjMlZrTFhaaGNuTmNiaUJjZEdaMWJtTjBhVzl1SUdodmRFTnlaV0YwWlZKbGNYVnBjbVVvYlc5a2RXeGxTV1FwSUh0Y2JpQmNkRngwZG1GeUlHMWxJRDBnYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjA3WEc0Z1hIUmNkR2xtSUNnaGJXVXBJSEpsZEhWeWJpQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZPMXh1SUZ4MFhIUjJZWElnWm00Z1BTQm1kVzVqZEdsdmJpaHlaWEYxWlhOMEtTQjdYRzRnWEhSY2RGeDBhV1lnS0cxbExtaHZkQzVoWTNScGRtVXBJSHRjYmlCY2RGeDBYSFJjZEdsbUlDaHBibk4wWVd4c1pXUk5iMlIxYkdWelczSmxjWFZsYzNSZEtTQjdYRzRnWEhSY2RGeDBYSFJjZEdsbUlDaHBibk4wWVd4c1pXUk5iMlIxYkdWelczSmxjWFZsYzNSZExuQmhjbVZ1ZEhNdWFXNWtaWGhQWmlodGIyUjFiR1ZKWkNrZ1BUMDlJQzB4S1NCN1hHNGdYSFJjZEZ4MFhIUmNkRngwYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR5WlhGMVpYTjBYUzV3WVhKbGJuUnpMbkIxYzJnb2JXOWtkV3hsU1dRcE8xeHVJRngwWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwWEhSOUlHVnNjMlVnZTF4dUlGeDBYSFJjZEZ4MFhIUm9iM1JEZFhKeVpXNTBVR0Z5Wlc1MGN5QTlJRnR0YjJSMWJHVkpaRjA3WEc0Z1hIUmNkRngwWEhSY2RHaHZkRU4xY25KbGJuUkRhR2xzWkUxdlpIVnNaU0E5SUhKbGNYVmxjM1E3WEc0Z1hIUmNkRngwWEhSOVhHNGdYSFJjZEZ4MFhIUnBaaUFvYldVdVkyaHBiR1J5Wlc0dWFXNWtaWGhQWmloeVpYRjFaWE4wS1NBOVBUMGdMVEVwSUh0Y2JpQmNkRngwWEhSY2RGeDBiV1V1WTJocGJHUnlaVzR1Y0hWemFDaHlaWEYxWlhOMEtUdGNiaUJjZEZ4MFhIUmNkSDFjYmlCY2RGeDBYSFI5SUdWc2MyVWdlMXh1SUZ4MFhIUmNkRngwWTI5dWMyOXNaUzUzWVhKdUtGeHVJRngwWEhSY2RGeDBYSFJjSWx0SVRWSmRJSFZ1Wlhod1pXTjBaV1FnY21WeGRXbHlaU2hjSWlBclhHNGdYSFJjZEZ4MFhIUmNkRngwY21WeGRXVnpkQ0FyWEc0Z1hIUmNkRngwWEhSY2RGeDBYQ0lwSUdaeWIyMGdaR2x6Y0c5elpXUWdiVzlrZFd4bElGd2lJQ3RjYmlCY2RGeDBYSFJjZEZ4MFhIUnRiMlIxYkdWSlpGeHVJRngwWEhSY2RGeDBLVHRjYmlCY2RGeDBYSFJjZEdodmRFTjFjbkpsYm5SUVlYSmxiblJ6SUQwZ1cxMDdYRzRnWEhSY2RGeDBmVnh1SUZ4MFhIUmNkSEpsZEhWeWJpQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLSEpsY1hWbGMzUXBPMXh1SUZ4MFhIUjlPMXh1SUZ4MFhIUjJZWElnVDJKcVpXTjBSbUZqZEc5eWVTQTlJR1oxYm1OMGFXOXVJRTlpYW1WamRFWmhZM1J2Y25rb2JtRnRaU2tnZTF4dUlGeDBYSFJjZEhKbGRIVnliaUI3WEc0Z1hIUmNkRngwWEhSamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc1hHNGdYSFJjZEZ4MFhIUmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVJRngwWEhSY2RGeDBaMlYwT2lCbWRXNWpkR2x2YmlncElIdGNiaUJjZEZ4MFhIUmNkRngwY21WMGRYSnVJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTliYm1GdFpWMDdYRzRnWEhSY2RGeDBYSFI5TEZ4dUlGeDBYSFJjZEZ4MGMyVjBPaUJtZFc1amRHbHZiaWgyWVd4MVpTa2dlMXh1SUZ4MFhIUmNkRngwWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZlcyNWhiV1ZkSUQwZ2RtRnNkV1U3WEc0Z1hIUmNkRngwWEhSOVhHNGdYSFJjZEZ4MGZUdGNiaUJjZEZ4MGZUdGNiaUJjZEZ4MFptOXlJQ2gyWVhJZ2JtRnRaU0JwYmlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktTQjdYRzRnWEhSY2RGeDBhV1lnS0Z4dUlGeDBYSFJjZEZ4MFQySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHNJRzVoYldVcElDWW1YRzRnWEhSY2RGeDBYSFJ1WVcxbElDRTlQU0JjSW1WY0lpQW1KbHh1SUZ4MFhIUmNkRngwYm1GdFpTQWhQVDBnWENKMFhDSmNiaUJjZEZ4MFhIUXBJSHRjYmlCY2RGeDBYSFJjZEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaG1iaXdnYm1GdFpTd2dUMkpxWldOMFJtRmpkRzl5ZVNodVlXMWxLU2s3WEc0Z1hIUmNkRngwZlZ4dUlGeDBYSFI5WEc0Z1hIUmNkR1p1TG1VZ1BTQm1kVzVqZEdsdmJpaGphSFZ1YTBsa0tTQjdYRzRnWEhSY2RGeDBhV1lnS0dodmRGTjBZWFIxY3lBOVBUMGdYQ0p5WldGa2VWd2lLU0JvYjNSVFpYUlRkR0YwZFhNb1hDSndjbVZ3WVhKbFhDSXBPMXh1SUZ4MFhIUmNkR2h2ZEVOb2RXNXJjMHh2WVdScGJtY3JLenRjYmlCY2RGeDBYSFJ5WlhSMWNtNGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVsS0dOb2RXNXJTV1FwTG5Sb1pXNG9abWx1YVhOb1EyaDFibXRNYjJGa2FXNW5MQ0JtZFc1amRHbHZiaWhsY25JcElIdGNiaUJjZEZ4MFhIUmNkR1pwYm1semFFTm9kVzVyVEc5aFpHbHVaeWdwTzF4dUlGeDBYSFJjZEZ4MGRHaHliM2NnWlhKeU8xeHVJRngwWEhSY2RIMHBPMXh1WEc0Z1hIUmNkRngwWm5WdVkzUnBiMjRnWm1sdWFYTm9RMmgxYm10TWIyRmthVzVuS0NrZ2UxeHVJRngwWEhSY2RGeDBhRzkwUTJoMWJtdHpURzloWkdsdVp5MHRPMXh1SUZ4MFhIUmNkRngwYVdZZ0tHaHZkRk4wWVhSMWN5QTlQVDBnWENKd2NtVndZWEpsWENJcElIdGNiaUJjZEZ4MFhIUmNkRngwYVdZZ0tDRm9iM1JYWVdsMGFXNW5SbWxzWlhOTllYQmJZMmgxYm10SlpGMHBJSHRjYmlCY2RGeDBYSFJjZEZ4MFhIUm9iM1JGYm5OMWNtVlZjR1JoZEdWRGFIVnVheWhqYUhWdWEwbGtLVHRjYmlCY2RGeDBYSFJjZEZ4MGZWeHVJRngwWEhSY2RGeDBYSFJwWmlBb2FHOTBRMmgxYm10elRHOWhaR2x1WnlBOVBUMGdNQ0FtSmlCb2IzUlhZV2wwYVc1blJtbHNaWE1nUFQwOUlEQXBJSHRjYmlCY2RGeDBYSFJjZEZ4MFhIUm9iM1JWY0dSaGRHVkViM2R1Ykc5aFpHVmtLQ2s3WEc0Z1hIUmNkRngwWEhSY2RIMWNiaUJjZEZ4MFhIUmNkSDFjYmlCY2RGeDBYSFI5WEc0Z1hIUmNkSDA3WEc0Z1hIUmNkR1p1TG5RZ1BTQm1kVzVqZEdsdmJpaDJZV3gxWlN3Z2JXOWtaU2tnZTF4dUlGeDBYSFJjZEdsbUlDaHRiMlJsSUNZZ01Ta2dkbUZzZFdVZ1BTQm1iaWgyWVd4MVpTazdYRzRnWEhSY2RGeDBjbVYwZFhKdUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVkQ2gyWVd4MVpTd2diVzlrWlNBbUlINHhLVHRjYmlCY2RGeDBmVHRjYmlCY2RGeDBjbVYwZFhKdUlHWnVPMXh1SUZ4MGZWeHVYRzRnWEhRdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRkVzUxYzJWa0xYWmhjbk5jYmlCY2RHWjFibU4wYVc5dUlHaHZkRU55WldGMFpVMXZaSFZzWlNodGIyUjFiR1ZKWkNrZ2UxeHVJRngwWEhSMllYSWdhRzkwSUQwZ2UxeHVJRngwWEhSY2RDOHZJSEJ5YVhaaGRHVWdjM1IxWm1aY2JpQmNkRngwWEhSZllXTmpaWEIwWldSRVpYQmxibVJsYm1OcFpYTTZJSHQ5TEZ4dUlGeDBYSFJjZEY5a1pXTnNhVzVsWkVSbGNHVnVaR1Z1WTJsbGN6b2dlMzBzWEc0Z1hIUmNkRngwWDNObGJHWkJZMk5sY0hSbFpEb2dabUZzYzJVc1hHNGdYSFJjZEZ4MFgzTmxiR1pFWldOc2FXNWxaRG9nWm1Gc2MyVXNYRzRnWEhSY2RGeDBYMlJwYzNCdmMyVklZVzVrYkdWeWN6b2dXMTBzWEc0Z1hIUmNkRngwWDIxaGFXNDZJR2h2ZEVOMWNuSmxiblJEYUdsc1pFMXZaSFZzWlNBaFBUMGdiVzlrZFd4bFNXUXNYRzVjYmlCY2RGeDBYSFF2THlCTmIyUjFiR1VnUVZCSlhHNGdYSFJjZEZ4MFlXTjBhWFpsT2lCMGNuVmxMRnh1SUZ4MFhIUmNkR0ZqWTJWd2REb2dablZ1WTNScGIyNG9aR1Z3TENCallXeHNZbUZqYXlrZ2UxeHVJRngwWEhSY2RGeDBhV1lnS0dSbGNDQTlQVDBnZFc1a1pXWnBibVZrS1NCb2IzUXVYM05sYkdaQlkyTmxjSFJsWkNBOUlIUnlkV1U3WEc0Z1hIUmNkRngwWEhSbGJITmxJR2xtSUNoMGVYQmxiMllnWkdWd0lEMDlQU0JjSW1aMWJtTjBhVzl1WENJcElHaHZkQzVmYzJWc1prRmpZMlZ3ZEdWa0lEMGdaR1Z3TzF4dUlGeDBYSFJjZEZ4MFpXeHpaU0JwWmlBb2RIbHdaVzltSUdSbGNDQTlQVDBnWENKdlltcGxZM1JjSWlsY2JpQmNkRngwWEhSY2RGeDBabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JrWlhBdWJHVnVaM1JvT3lCcEt5c3BYRzRnWEhSY2RGeDBYSFJjZEZ4MGFHOTBMbDloWTJObGNIUmxaRVJsY0dWdVpHVnVZMmxsYzF0a1pYQmJhVjFkSUQwZ1kyRnNiR0poWTJzZ2ZId2dablZ1WTNScGIyNG9LU0I3ZlR0Y2JpQmNkRngwWEhSY2RHVnNjMlVnYUc5MExsOWhZMk5sY0hSbFpFUmxjR1Z1WkdWdVkybGxjMXRrWlhCZElEMGdZMkZzYkdKaFkyc2dmSHdnWm5WdVkzUnBiMjRvS1NCN2ZUdGNiaUJjZEZ4MFhIUjlMRnh1SUZ4MFhIUmNkR1JsWTJ4cGJtVTZJR1oxYm1OMGFXOXVLR1JsY0NrZ2UxeHVJRngwWEhSY2RGeDBhV1lnS0dSbGNDQTlQVDBnZFc1a1pXWnBibVZrS1NCb2IzUXVYM05sYkdaRVpXTnNhVzVsWkNBOUlIUnlkV1U3WEc0Z1hIUmNkRngwWEhSbGJITmxJR2xtSUNoMGVYQmxiMllnWkdWd0lEMDlQU0JjSW05aWFtVmpkRndpS1Z4dUlGeDBYSFJjZEZ4MFhIUm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR1JsY0M1c1pXNW5kR2c3SUdrckt5bGNiaUJjZEZ4MFhIUmNkRngwWEhSb2IzUXVYMlJsWTJ4cGJtVmtSR1Z3Wlc1a1pXNWphV1Z6VzJSbGNGdHBYVjBnUFNCMGNuVmxPMXh1SUZ4MFhIUmNkRngwWld4elpTQm9iM1F1WDJSbFkyeHBibVZrUkdWd1pXNWtaVzVqYVdWelcyUmxjRjBnUFNCMGNuVmxPMXh1SUZ4MFhIUmNkSDBzWEc0Z1hIUmNkRngwWkdsemNHOXpaVG9nWm5WdVkzUnBiMjRvWTJGc2JHSmhZMnNwSUh0Y2JpQmNkRngwWEhSY2RHaHZkQzVmWkdsemNHOXpaVWhoYm1Sc1pYSnpMbkIxYzJnb1kyRnNiR0poWTJzcE8xeHVJRngwWEhSY2RIMHNYRzRnWEhSY2RGeDBZV1JrUkdsemNHOXpaVWhoYm1Sc1pYSTZJR1oxYm1OMGFXOXVLR05oYkd4aVlXTnJLU0I3WEc0Z1hIUmNkRngwWEhSb2IzUXVYMlJwYzNCdmMyVklZVzVrYkdWeWN5NXdkWE5vS0dOaGJHeGlZV05yS1R0Y2JpQmNkRngwWEhSOUxGeHVJRngwWEhSY2RISmxiVzkyWlVScGMzQnZjMlZJWVc1a2JHVnlPaUJtZFc1amRHbHZiaWhqWVd4c1ltRmpheWtnZTF4dUlGeDBYSFJjZEZ4MGRtRnlJR2xrZUNBOUlHaHZkQzVmWkdsemNHOXpaVWhoYm1Sc1pYSnpMbWx1WkdWNFQyWW9ZMkZzYkdKaFkyc3BPMXh1SUZ4MFhIUmNkRngwYVdZZ0tHbGtlQ0ErUFNBd0tTQm9iM1F1WDJScGMzQnZjMlZJWVc1a2JHVnljeTV6Y0d4cFkyVW9hV1I0TENBeEtUdGNiaUJjZEZ4MFhIUjlMRnh1WEc0Z1hIUmNkRngwTHk4Z1RXRnVZV2RsYldWdWRDQkJVRWxjYmlCY2RGeDBYSFJqYUdWamF6b2dhRzkwUTJobFkyc3NYRzRnWEhSY2RGeDBZWEJ3YkhrNklHaHZkRUZ3Y0d4NUxGeHVJRngwWEhSY2RITjBZWFIxY3pvZ1puVnVZM1JwYjI0b2JDa2dlMXh1SUZ4MFhIUmNkRngwYVdZZ0tDRnNLU0J5WlhSMWNtNGdhRzkwVTNSaGRIVnpPMXh1SUZ4MFhIUmNkRngwYUc5MFUzUmhkSFZ6U0dGdVpHeGxjbk11Y0hWemFDaHNLVHRjYmlCY2RGeDBYSFI5TEZ4dUlGeDBYSFJjZEdGa1pGTjBZWFIxYzBoaGJtUnNaWEk2SUdaMWJtTjBhVzl1S0d3cElIdGNiaUJjZEZ4MFhIUmNkR2h2ZEZOMFlYUjFjMGhoYm1Sc1pYSnpMbkIxYzJnb2JDazdYRzRnWEhSY2RGeDBmU3hjYmlCY2RGeDBYSFJ5WlcxdmRtVlRkR0YwZFhOSVlXNWtiR1Z5T2lCbWRXNWpkR2x2Ymloc0tTQjdYRzRnWEhSY2RGeDBYSFIyWVhJZ2FXUjRJRDBnYUc5MFUzUmhkSFZ6U0dGdVpHeGxjbk11YVc1a1pYaFBaaWhzS1R0Y2JpQmNkRngwWEhSY2RHbG1JQ2hwWkhnZ1BqMGdNQ2tnYUc5MFUzUmhkSFZ6U0dGdVpHeGxjbk11YzNCc2FXTmxLR2xrZUN3Z01TazdYRzRnWEhSY2RGeDBmU3hjYmx4dUlGeDBYSFJjZEM4dmFXNW9aWEpwZENCbWNtOXRJSEJ5WlhacGIzVnpJR1JwYzNCdmMyVWdZMkZzYkZ4dUlGeDBYSFJjZEdSaGRHRTZJR2h2ZEVOMWNuSmxiblJOYjJSMWJHVkVZWFJoVzIxdlpIVnNaVWxrWFZ4dUlGeDBYSFI5TzF4dUlGeDBYSFJvYjNSRGRYSnlaVzUwUTJocGJHUk5iMlIxYkdVZ1BTQjFibVJsWm1sdVpXUTdYRzRnWEhSY2RISmxkSFZ5YmlCb2IzUTdYRzRnWEhSOVhHNWNiaUJjZEhaaGNpQm9iM1JUZEdGMGRYTklZVzVrYkdWeWN5QTlJRnRkTzF4dUlGeDBkbUZ5SUdodmRGTjBZWFIxY3lBOUlGd2lhV1JzWlZ3aU8xeHVYRzRnWEhSbWRXNWpkR2x2YmlCb2IzUlRaWFJUZEdGMGRYTW9ibVYzVTNSaGRIVnpLU0I3WEc0Z1hIUmNkR2h2ZEZOMFlYUjFjeUE5SUc1bGQxTjBZWFIxY3p0Y2JpQmNkRngwWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCb2IzUlRkR0YwZFhOSVlXNWtiR1Z5Y3k1c1pXNW5kR2c3SUdrckt5bGNiaUJjZEZ4MFhIUm9iM1JUZEdGMGRYTklZVzVrYkdWeWMxdHBYUzVqWVd4c0tHNTFiR3dzSUc1bGQxTjBZWFIxY3lrN1hHNGdYSFI5WEc1Y2JpQmNkQzh2SUhkb2FXeGxJR1J2ZDI1c2IyRmthVzVuWEc0Z1hIUjJZWElnYUc5MFYyRnBkR2x1WjBacGJHVnpJRDBnTUR0Y2JpQmNkSFpoY2lCb2IzUkRhSFZ1YTNOTWIyRmthVzVuSUQwZ01EdGNiaUJjZEhaaGNpQm9iM1JYWVdsMGFXNW5SbWxzWlhOTllYQWdQU0I3ZlR0Y2JpQmNkSFpoY2lCb2IzUlNaWEYxWlhOMFpXUkdhV3hsYzAxaGNDQTlJSHQ5TzF4dUlGeDBkbUZ5SUdodmRFRjJZV2xzWVdKc1pVWnBiR1Z6VFdGd0lEMGdlMzA3WEc0Z1hIUjJZWElnYUc5MFJHVm1aWEp5WldRN1hHNWNiaUJjZEM4dklGUm9aU0IxY0dSaGRHVWdhVzVtYjF4dUlGeDBkbUZ5SUdodmRGVndaR0YwWlN3Z2FHOTBWWEJrWVhSbFRtVjNTR0Z6YUR0Y2JseHVJRngwWm5WdVkzUnBiMjRnZEc5TmIyUjFiR1ZKWkNocFpDa2dlMXh1SUZ4MFhIUjJZWElnYVhOT2RXMWlaWElnUFNBcmFXUWdLeUJjSWx3aUlEMDlQU0JwWkR0Y2JpQmNkRngwY21WMGRYSnVJR2x6VG5WdFltVnlJRDhnSzJsa0lEb2dhV1E3WEc0Z1hIUjlYRzVjYmlCY2RHWjFibU4wYVc5dUlHaHZkRU5vWldOcktHRndjR3g1S1NCN1hHNGdYSFJjZEdsbUlDaG9iM1JUZEdGMGRYTWdJVDA5SUZ3aWFXUnNaVndpS1NCN1hHNGdYSFJjZEZ4MGRHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVkyaGxZMnNvS1NCcGN5QnZibXg1SUdGc2JHOTNaV1FnYVc0Z2FXUnNaU0J6ZEdGMGRYTmNJaWs3WEc0Z1hIUmNkSDFjYmlCY2RGeDBhRzkwUVhCd2JIbFBibFZ3WkdGMFpTQTlJR0Z3Y0d4NU8xeHVJRngwWEhSb2IzUlRaWFJUZEdGMGRYTW9YQ0pqYUdWamExd2lLVHRjYmlCY2RGeDBjbVYwZFhKdUlHaHZkRVJ2ZDI1c2IyRmtUV0Z1YVdabGMzUW9hRzkwVW1WeGRXVnpkRlJwYldWdmRYUXBMblJvWlc0b1puVnVZM1JwYjI0b2RYQmtZWFJsS1NCN1hHNGdYSFJjZEZ4MGFXWWdLQ0YxY0dSaGRHVXBJSHRjYmlCY2RGeDBYSFJjZEdodmRGTmxkRk4wWVhSMWN5aGNJbWxrYkdWY0lpazdYRzRnWEhSY2RGeDBYSFJ5WlhSMWNtNGdiblZzYkR0Y2JpQmNkRngwWEhSOVhHNGdYSFJjZEZ4MGFHOTBVbVZ4ZFdWemRHVmtSbWxzWlhOTllYQWdQU0I3ZlR0Y2JpQmNkRngwWEhSb2IzUlhZV2wwYVc1blJtbHNaWE5OWVhBZ1BTQjdmVHRjYmlCY2RGeDBYSFJvYjNSQmRtRnBiR0ZpYkdWR2FXeGxjMDFoY0NBOUlIVndaR0YwWlM1ak8xeHVJRngwWEhSY2RHaHZkRlZ3WkdGMFpVNWxkMGhoYzJnZ1BTQjFjR1JoZEdVdWFEdGNibHh1SUZ4MFhIUmNkR2h2ZEZObGRGTjBZWFIxY3loY0luQnlaWEJoY21WY0lpazdYRzRnWEhSY2RGeDBkbUZ5SUhCeWIyMXBjMlVnUFNCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUJjZEZ4MFhIUmNkR2h2ZEVSbFptVnljbVZrSUQwZ2UxeHVJRngwWEhSY2RGeDBYSFJ5WlhOdmJIWmxPaUJ5WlhOdmJIWmxMRnh1SUZ4MFhIUmNkRngwWEhSeVpXcGxZM1E2SUhKbGFtVmpkRnh1SUZ4MFhIUmNkRngwZlR0Y2JpQmNkRngwWEhSOUtUdGNiaUJjZEZ4MFhIUm9iM1JWY0dSaGRHVWdQU0I3ZlR0Y2JpQmNkRngwWEhSMllYSWdZMmgxYm10SlpDQTlJRndpYldGcGJsd2lPMXh1SUZ4MFhIUmNkQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0J1Ynkxc2IyNWxMV0pzYjJOcmMxeHVJRngwWEhSY2RIdGNiaUJjZEZ4MFhIUmNkQzhxWjJ4dlltRnNjeUJqYUhWdWEwbGtJQ292WEc0Z1hIUmNkRngwWEhSb2IzUkZibk4xY21WVmNHUmhkR1ZEYUhWdWF5aGphSFZ1YTBsa0tUdGNiaUJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBhV1lnS0Z4dUlGeDBYSFJjZEZ4MGFHOTBVM1JoZEhWeklEMDlQU0JjSW5CeVpYQmhjbVZjSWlBbUpseHVJRngwWEhSY2RGeDBhRzkwUTJoMWJtdHpURzloWkdsdVp5QTlQVDBnTUNBbUpseHVJRngwWEhSY2RGeDBhRzkwVjJGcGRHbHVaMFpwYkdWeklEMDlQU0F3WEc0Z1hIUmNkRngwS1NCN1hHNGdYSFJjZEZ4MFhIUm9iM1JWY0dSaGRHVkViM2R1Ykc5aFpHVmtLQ2s3WEc0Z1hIUmNkRngwZlZ4dUlGeDBYSFJjZEhKbGRIVnliaUJ3Y205dGFYTmxPMXh1SUZ4MFhIUjlLVHRjYmlCY2RIMWNibHh1SUZ4MEx5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMWFZ1ZFhObFpDMTJZWEp6WEc0Z1hIUm1kVzVqZEdsdmJpQm9iM1JCWkdSVmNHUmhkR1ZEYUhWdWF5aGphSFZ1YTBsa0xDQnRiM0psVFc5a2RXeGxjeWtnZTF4dUlGeDBYSFJwWmlBb0lXaHZkRUYyWVdsc1lXSnNaVVpwYkdWelRXRndXMk5vZFc1clNXUmRJSHg4SUNGb2IzUlNaWEYxWlhOMFpXUkdhV3hsYzAxaGNGdGphSFZ1YTBsa1hTbGNiaUJjZEZ4MFhIUnlaWFIxY200N1hHNGdYSFJjZEdodmRGSmxjWFZsYzNSbFpFWnBiR1Z6VFdGd1cyTm9kVzVyU1dSZElEMGdabUZzYzJVN1hHNGdYSFJjZEdadmNpQW9kbUZ5SUcxdlpIVnNaVWxrSUdsdUlHMXZjbVZOYjJSMWJHVnpLU0I3WEc0Z1hIUmNkRngwYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHRiM0psVFc5a2RXeGxjeXdnYlc5a2RXeGxTV1FwS1NCN1hHNGdYSFJjZEZ4MFhIUm9iM1JWY0dSaGRHVmJiVzlrZFd4bFNXUmRJRDBnYlc5eVpVMXZaSFZzWlhOYmJXOWtkV3hsU1dSZE8xeHVJRngwWEhSY2RIMWNiaUJjZEZ4MGZWeHVJRngwWEhScFppQW9MUzFvYjNSWFlXbDBhVzVuUm1sc1pYTWdQVDA5SURBZ0ppWWdhRzkwUTJoMWJtdHpURzloWkdsdVp5QTlQVDBnTUNrZ2UxeHVJRngwWEhSY2RHaHZkRlZ3WkdGMFpVUnZkMjVzYjJGa1pXUW9LVHRjYmlCY2RGeDBmVnh1SUZ4MGZWeHVYRzRnWEhSbWRXNWpkR2x2YmlCb2IzUkZibk4xY21WVmNHUmhkR1ZEYUhWdWF5aGphSFZ1YTBsa0tTQjdYRzRnWEhSY2RHbG1JQ2doYUc5MFFYWmhhV3hoWW14bFJtbHNaWE5OWVhCYlkyaDFibXRKWkYwcElIdGNiaUJjZEZ4MFhIUm9iM1JYWVdsMGFXNW5SbWxzWlhOTllYQmJZMmgxYm10SlpGMGdQU0IwY25WbE8xeHVJRngwWEhSOUlHVnNjMlVnZTF4dUlGeDBYSFJjZEdodmRGSmxjWFZsYzNSbFpFWnBiR1Z6VFdGd1cyTm9kVzVyU1dSZElEMGdkSEoxWlR0Y2JpQmNkRngwWEhSb2IzUlhZV2wwYVc1blJtbHNaWE1yS3p0Y2JpQmNkRngwWEhSb2IzUkViM2R1Ykc5aFpGVndaR0YwWlVOb2RXNXJLR05vZFc1clNXUXBPMXh1SUZ4MFhIUjlYRzRnWEhSOVhHNWNiaUJjZEdaMWJtTjBhVzl1SUdodmRGVndaR0YwWlVSdmQyNXNiMkZrWldRb0tTQjdYRzRnWEhSY2RHaHZkRk5sZEZOMFlYUjFjeWhjSW5KbFlXUjVYQ0lwTzF4dUlGeDBYSFIyWVhJZ1pHVm1aWEp5WldRZ1BTQm9iM1JFWldabGNuSmxaRHRjYmlCY2RGeDBhRzkwUkdWbVpYSnlaV1FnUFNCdWRXeHNPMXh1SUZ4MFhIUnBaaUFvSVdSbFptVnljbVZrS1NCeVpYUjFjbTQ3WEc0Z1hIUmNkR2xtSUNob2IzUkJjSEJzZVU5dVZYQmtZWFJsS1NCN1hHNGdYSFJjZEZ4MEx5OGdWM0poY0NCa1pXWmxjbkpsWkNCdlltcGxZM1FnYVc0Z1VISnZiV2x6WlNCMGJ5QnRZWEpySUdsMElHRnpJR0VnZDJWc2JDMW9ZVzVrYkdWa0lGQnliMjFwYzJVZ2RHOWNiaUJjZEZ4MFhIUXZMeUJoZG05cFpDQjBjbWxuWjJWeWFXNW5JSFZ1WTJGMVoyaDBJR1Y0WTJWd2RHbHZiaUIzWVhKdWFXNW5JR2x1SUVOb2NtOXRaUzVjYmlCY2RGeDBYSFF2THlCVFpXVWdhSFIwY0hNNkx5OWlkV2R6TG1Ob2NtOXRhWFZ0TG05eVp5OXdMMk5vY205dGFYVnRMMmx6YzNWbGN5OWtaWFJoYVd3L2FXUTlORFkxTmpZMlhHNGdYSFJjZEZ4MFVISnZiV2x6WlM1eVpYTnZiSFpsS0NsY2JpQmNkRngwWEhSY2RDNTBhR1Z1S0daMWJtTjBhVzl1S0NrZ2UxeHVJRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdhRzkwUVhCd2JIa29hRzkwUVhCd2JIbFBibFZ3WkdGMFpTazdYRzRnWEhSY2RGeDBYSFI5S1Z4dUlGeDBYSFJjZEZ4MExuUm9aVzRvWEc0Z1hIUmNkRngwWEhSY2RHWjFibU4wYVc5dUtISmxjM1ZzZENrZ2UxeHVJRngwWEhSY2RGeDBYSFJjZEdSbFptVnljbVZrTG5KbGMyOXNkbVVvY21WemRXeDBLVHRjYmlCY2RGeDBYSFJjZEZ4MGZTeGNiaUJjZEZ4MFhIUmNkRngwWm5WdVkzUnBiMjRvWlhKeUtTQjdYRzRnWEhSY2RGeDBYSFJjZEZ4MFpHVm1aWEp5WldRdWNtVnFaV04wS0dWeWNpazdYRzRnWEhSY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RDazdYRzRnWEhSY2RIMGdaV3h6WlNCN1hHNGdYSFJjZEZ4MGRtRnlJRzkxZEdSaGRHVmtUVzlrZFd4bGN5QTlJRnRkTzF4dUlGeDBYSFJjZEdadmNpQW9kbUZ5SUdsa0lHbHVJR2h2ZEZWd1pHRjBaU2tnZTF4dUlGeDBYSFJjZEZ4MGFXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hvYjNSVmNHUmhkR1VzSUdsa0tTa2dlMXh1SUZ4MFhIUmNkRngwWEhSdmRYUmtZWFJsWkUxdlpIVnNaWE11Y0hWemFDaDBiMDF2WkhWc1pVbGtLR2xrS1NrN1hHNGdYSFJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBmVnh1SUZ4MFhIUmNkR1JsWm1WeWNtVmtMbkpsYzI5c2RtVW9iM1YwWkdGMFpXUk5iMlIxYkdWektUdGNiaUJjZEZ4MGZWeHVJRngwZlZ4dVhHNGdYSFJtZFc1amRHbHZiaUJvYjNSQmNIQnNlU2h2Y0hScGIyNXpLU0I3WEc0Z1hIUmNkR2xtSUNob2IzUlRkR0YwZFhNZ0lUMDlJRndpY21WaFpIbGNJaWxjYmlCY2RGeDBYSFIwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0poY0hCc2VTZ3BJR2x6SUc5dWJIa2dZV3hzYjNkbFpDQnBiaUJ5WldGa2VTQnpkR0YwZFhOY0lpazdYRzRnWEhSY2RHOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1eklIeDhJSHQ5TzF4dVhHNGdYSFJjZEhaaGNpQmpZanRjYmlCY2RGeDBkbUZ5SUdrN1hHNGdYSFJjZEhaaGNpQnFPMXh1SUZ4MFhIUjJZWElnYlc5a2RXeGxPMXh1SUZ4MFhIUjJZWElnYlc5a2RXeGxTV1E3WEc1Y2JpQmNkRngwWm5WdVkzUnBiMjRnWjJWMFFXWm1aV04wWldSVGRIVm1aaWgxY0dSaGRHVk5iMlIxYkdWSlpDa2dlMXh1SUZ4MFhIUmNkSFpoY2lCdmRYUmtZWFJsWkUxdlpIVnNaWE1nUFNCYmRYQmtZWFJsVFc5a2RXeGxTV1JkTzF4dUlGeDBYSFJjZEhaaGNpQnZkWFJrWVhSbFpFUmxjR1Z1WkdWdVkybGxjeUE5SUh0OU8xeHVYRzRnWEhSY2RGeDBkbUZ5SUhGMVpYVmxJRDBnYjNWMFpHRjBaV1JOYjJSMWJHVnpMbTFoY0NobWRXNWpkR2x2YmlocFpDa2dlMXh1SUZ4MFhIUmNkRngwY21WMGRYSnVJSHRjYmlCY2RGeDBYSFJjZEZ4MFkyaGhhVzQ2SUZ0cFpGMHNYRzRnWEhSY2RGeDBYSFJjZEdsa09pQnBaRnh1SUZ4MFhIUmNkRngwZlR0Y2JpQmNkRngwWEhSOUtUdGNiaUJjZEZ4MFhIUjNhR2xzWlNBb2NYVmxkV1V1YkdWdVozUm9JRDRnTUNrZ2UxeHVJRngwWEhSY2RGeDBkbUZ5SUhGMVpYVmxTWFJsYlNBOUlIRjFaWFZsTG5CdmNDZ3BPMXh1SUZ4MFhIUmNkRngwZG1GeUlHMXZaSFZzWlVsa0lEMGdjWFZsZFdWSmRHVnRMbWxrTzF4dUlGeDBYSFJjZEZ4MGRtRnlJR05vWVdsdUlEMGdjWFZsZFdWSmRHVnRMbU5vWVdsdU8xeHVJRngwWEhSY2RGeDBiVzlrZFd4bElEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdWSlpGMDdYRzRnWEhSY2RGeDBYSFJwWmlBb0lXMXZaSFZzWlNCOGZDQnRiMlIxYkdVdWFHOTBMbDl6Wld4bVFXTmpaWEIwWldRcElHTnZiblJwYm5WbE8xeHVJRngwWEhSY2RGeDBhV1lnS0cxdlpIVnNaUzVvYjNRdVgzTmxiR1pFWldOc2FXNWxaQ2tnZTF4dUlGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z2UxeHVJRngwWEhSY2RGeDBYSFJjZEhSNWNHVTZJRndpYzJWc1ppMWtaV05zYVc1bFpGd2lMRnh1SUZ4MFhIUmNkRngwWEhSY2RHTm9ZV2x1T2lCamFHRnBiaXhjYmlCY2RGeDBYSFJjZEZ4MFhIUnRiMlIxYkdWSlpEb2diVzlrZFd4bFNXUmNiaUJjZEZ4MFhIUmNkRngwZlR0Y2JpQmNkRngwWEhSY2RIMWNiaUJjZEZ4MFhIUmNkR2xtSUNodGIyUjFiR1V1YUc5MExsOXRZV2x1S1NCN1hHNGdYSFJjZEZ4MFhIUmNkSEpsZEhWeWJpQjdYRzRnWEhSY2RGeDBYSFJjZEZ4MGRIbHdaVG9nWENKMWJtRmpZMlZ3ZEdWa1hDSXNYRzRnWEhSY2RGeDBYSFJjZEZ4MFkyaGhhVzQ2SUdOb1lXbHVMRnh1SUZ4MFhIUmNkRngwWEhSY2RHMXZaSFZzWlVsa09pQnRiMlIxYkdWSlpGeHVJRngwWEhSY2RGeDBYSFI5TzF4dUlGeDBYSFJjZEZ4MGZWeHVJRngwWEhSY2RGeDBabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J0YjJSMWJHVXVjR0Z5Wlc1MGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlGeDBYSFJjZEZ4MFhIUjJZWElnY0dGeVpXNTBTV1FnUFNCdGIyUjFiR1V1Y0dGeVpXNTBjMXRwWFR0Y2JpQmNkRngwWEhSY2RGeDBkbUZ5SUhCaGNtVnVkQ0E5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iY0dGeVpXNTBTV1JkTzF4dUlGeDBYSFJjZEZ4MFhIUnBaaUFvSVhCaGNtVnVkQ2tnWTI5dWRHbHVkV1U3WEc0Z1hIUmNkRngwWEhSY2RHbG1JQ2h3WVhKbGJuUXVhRzkwTGw5a1pXTnNhVzVsWkVSbGNHVnVaR1Z1WTJsbGMxdHRiMlIxYkdWSlpGMHBJSHRjYmlCY2RGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z2UxeHVJRngwWEhSY2RGeDBYSFJjZEZ4MGRIbHdaVG9nWENKa1pXTnNhVzVsWkZ3aUxGeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFkyaGhhVzQ2SUdOb1lXbHVMbU52Ym1OaGRDaGJjR0Z5Wlc1MFNXUmRLU3hjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkRzF2WkhWc1pVbGtPaUJ0YjJSMWJHVkpaQ3hjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkSEJoY21WdWRFbGtPaUJ3WVhKbGJuUkpaRnh1SUZ4MFhIUmNkRngwWEhSY2RIMDdYRzRnWEhSY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RGeDBhV1lnS0c5MWRHUmhkR1ZrVFc5a2RXeGxjeTVwYm1SbGVFOW1LSEJoY21WdWRFbGtLU0FoUFQwZ0xURXBJR052Ym5ScGJuVmxPMXh1SUZ4MFhIUmNkRngwWEhScFppQW9jR0Z5Wlc1MExtaHZkQzVmWVdOalpYQjBaV1JFWlhCbGJtUmxibU5wWlhOYmJXOWtkV3hsU1dSZEtTQjdYRzRnWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0Z2ZFhSa1lYUmxaRVJsY0dWdVpHVnVZMmxsYzF0d1lYSmxiblJKWkYwcFhHNGdYSFJjZEZ4MFhIUmNkRngwWEhSdmRYUmtZWFJsWkVSbGNHVnVaR1Z1WTJsbGMxdHdZWEpsYm5SSlpGMGdQU0JiWFR0Y2JpQmNkRngwWEhSY2RGeDBYSFJoWkdSQmJHeFViMU5sZENodmRYUmtZWFJsWkVSbGNHVnVaR1Z1WTJsbGMxdHdZWEpsYm5SSlpGMHNJRnR0YjJSMWJHVkpaRjBwTzF4dUlGeDBYSFJjZEZ4MFhIUmNkR052Ym5ScGJuVmxPMXh1SUZ4MFhIUmNkRngwWEhSOVhHNGdYSFJjZEZ4MFhIUmNkR1JsYkdWMFpTQnZkWFJrWVhSbFpFUmxjR1Z1WkdWdVkybGxjMXR3WVhKbGJuUkpaRjA3WEc0Z1hIUmNkRngwWEhSY2RHOTFkR1JoZEdWa1RXOWtkV3hsY3k1d2RYTm9LSEJoY21WdWRFbGtLVHRjYmlCY2RGeDBYSFJjZEZ4MGNYVmxkV1V1Y0hWemFDaDdYRzRnWEhSY2RGeDBYSFJjZEZ4MFkyaGhhVzQ2SUdOb1lXbHVMbU52Ym1OaGRDaGJjR0Z5Wlc1MFNXUmRLU3hjYmlCY2RGeDBYSFJjZEZ4MFhIUnBaRG9nY0dGeVpXNTBTV1JjYmlCY2RGeDBYSFJjZEZ4MGZTazdYRzRnWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwZlZ4dVhHNGdYSFJjZEZ4MGNtVjBkWEp1SUh0Y2JpQmNkRngwWEhSY2RIUjVjR1U2SUZ3aVlXTmpaWEIwWldSY0lpeGNiaUJjZEZ4MFhIUmNkRzF2WkhWc1pVbGtPaUIxY0dSaGRHVk5iMlIxYkdWSlpDeGNiaUJjZEZ4MFhIUmNkRzkxZEdSaGRHVmtUVzlrZFd4bGN6b2diM1YwWkdGMFpXUk5iMlIxYkdWekxGeHVJRngwWEhSY2RGeDBiM1YwWkdGMFpXUkVaWEJsYm1SbGJtTnBaWE02SUc5MWRHUmhkR1ZrUkdWd1pXNWtaVzVqYVdWelhHNGdYSFJjZEZ4MGZUdGNiaUJjZEZ4MGZWeHVYRzRnWEhSY2RHWjFibU4wYVc5dUlHRmtaRUZzYkZSdlUyVjBLR0VzSUdJcElIdGNiaUJjZEZ4MFhIUm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0l1YkdWdVozUm9PeUJwS3lzcElIdGNiaUJjZEZ4MFhIUmNkSFpoY2lCcGRHVnRJRDBnWWx0cFhUdGNiaUJjZEZ4MFhIUmNkR2xtSUNoaExtbHVaR1Y0VDJZb2FYUmxiU2tnUFQwOUlDMHhLU0JoTG5CMWMyZ29hWFJsYlNrN1hHNGdYSFJjZEZ4MGZWeHVJRngwWEhSOVhHNWNiaUJjZEZ4MEx5OGdZWFFnWW1WbmFXNGdZV3hzSUhWd1pHRjBaWE1nYlc5a2RXeGxjeUJoY21VZ2IzVjBaR0YwWldSY2JpQmNkRngwTHk4Z2RHaGxJRndpYjNWMFpHRjBaV1JjSWlCemRHRjBkWE1nWTJGdUlIQnliM0JoWjJGMFpTQjBieUJ3WVhKbGJuUnpJR2xtSUhSb1pYa2daRzl1SjNRZ1lXTmpaWEIwSUhSb1pTQmphR2xzWkhKbGJseHVJRngwWEhSMllYSWdiM1YwWkdGMFpXUkVaWEJsYm1SbGJtTnBaWE1nUFNCN2ZUdGNiaUJjZEZ4MGRtRnlJRzkxZEdSaGRHVmtUVzlrZFd4bGN5QTlJRnRkTzF4dUlGeDBYSFIyWVhJZ1lYQndiR2xsWkZWd1pHRjBaU0E5SUh0OU8xeHVYRzRnWEhSY2RIWmhjaUIzWVhKdVZXNWxlSEJsWTNSbFpGSmxjWFZwY21VZ1BTQm1kVzVqZEdsdmJpQjNZWEp1Vlc1bGVIQmxZM1JsWkZKbGNYVnBjbVVvS1NCN1hHNGdYSFJjZEZ4MFkyOXVjMjlzWlM1M1lYSnVLRnh1SUZ4MFhIUmNkRngwWENKYlNFMVNYU0IxYm1WNGNHVmpkR1ZrSUhKbGNYVnBjbVVvWENJZ0t5QnlaWE4xYkhRdWJXOWtkV3hsU1dRZ0t5QmNJaWtnZEc4Z1pHbHpjRzl6WldRZ2JXOWtkV3hsWENKY2JpQmNkRngwWEhRcE8xeHVJRngwWEhSOU8xeHVYRzRnWEhSY2RHWnZjaUFvZG1GeUlHbGtJR2x1SUdodmRGVndaR0YwWlNrZ2UxeHVJRngwWEhSY2RHbG1JQ2hQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYUc5MFZYQmtZWFJsTENCcFpDa3BJSHRjYmlCY2RGeDBYSFJjZEcxdlpIVnNaVWxrSUQwZ2RHOU5iMlIxYkdWSlpDaHBaQ2s3WEc0Z1hIUmNkRngwWEhRdktpb2dRSFI1Y0dVZ2UxUlBSRTk5SUNvdlhHNGdYSFJjZEZ4MFhIUjJZWElnY21WemRXeDBPMXh1SUZ4MFhIUmNkRngwYVdZZ0tHaHZkRlZ3WkdGMFpWdHBaRjBwSUh0Y2JpQmNkRngwWEhSY2RGeDBjbVZ6ZFd4MElEMGdaMlYwUVdabVpXTjBaV1JUZEhWbVppaHRiMlIxYkdWSlpDazdYRzRnWEhSY2RGeDBYSFI5SUdWc2MyVWdlMXh1SUZ4MFhIUmNkRngwWEhSeVpYTjFiSFFnUFNCN1hHNGdYSFJjZEZ4MFhIUmNkRngwZEhsd1pUb2dYQ0prYVhOd2IzTmxaRndpTEZ4dUlGeDBYSFJjZEZ4MFhIUmNkRzF2WkhWc1pVbGtPaUJwWkZ4dUlGeDBYSFJjZEZ4MFhIUjlPMXh1SUZ4MFhIUmNkRngwZlZ4dUlGeDBYSFJjZEZ4MEx5b3FJRUIwZVhCbElIdEZjbkp2Y254bVlXeHpaWDBnS2k5Y2JpQmNkRngwWEhSY2RIWmhjaUJoWW05eWRFVnljbTl5SUQwZ1ptRnNjMlU3WEc0Z1hIUmNkRngwWEhSMllYSWdaRzlCY0hCc2VTQTlJR1poYkhObE8xeHVJRngwWEhSY2RGeDBkbUZ5SUdSdlJHbHpjRzl6WlNBOUlHWmhiSE5sTzF4dUlGeDBYSFJjZEZ4MGRtRnlJR05vWVdsdVNXNW1ieUE5SUZ3aVhDSTdYRzRnWEhSY2RGeDBYSFJwWmlBb2NtVnpkV3gwTG1Ob1lXbHVLU0I3WEc0Z1hIUmNkRngwWEhSY2RHTm9ZV2x1U1c1bWJ5QTlJRndpWEZ4dVZYQmtZWFJsSUhCeWIzQmhaMkYwYVc5dU9pQmNJaUFySUhKbGMzVnNkQzVqYUdGcGJpNXFiMmx1S0Z3aUlDMCtJRndpS1R0Y2JpQmNkRngwWEhSY2RIMWNiaUJjZEZ4MFhIUmNkSE4zYVhSamFDQW9jbVZ6ZFd4MExuUjVjR1VwSUh0Y2JpQmNkRngwWEhSY2RGeDBZMkZ6WlNCY0luTmxiR1l0WkdWamJHbHVaV1JjSWpwY2JpQmNkRngwWEhSY2RGeDBYSFJwWmlBb2IzQjBhVzl1Y3k1dmJrUmxZMnhwYm1Wa0tTQnZjSFJwYjI1ekxtOXVSR1ZqYkdsdVpXUW9jbVZ6ZFd4MEtUdGNiaUJjZEZ4MFhIUmNkRngwWEhScFppQW9JVzl3ZEdsdmJuTXVhV2R1YjNKbFJHVmpiR2x1WldRcFhHNGdYSFJjZEZ4MFhIUmNkRngwWEhSaFltOXlkRVZ5Y205eUlEMGdibVYzSUVWeWNtOXlLRnh1SUZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjSWtGaWIzSjBaV1FnWW1WallYVnpaU0J2WmlCelpXeG1JR1JsWTJ4cGJtVTZJRndpSUN0Y2JpQmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnlaWE4xYkhRdWJXOWtkV3hsU1dRZ0sxeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkR05vWVdsdVNXNW1iMXh1SUZ4MFhIUmNkRngwWEhSY2RGeDBLVHRjYmlCY2RGeDBYSFJjZEZ4MFhIUmljbVZoYXp0Y2JpQmNkRngwWEhSY2RGeDBZMkZ6WlNCY0ltUmxZMnhwYm1Wa1hDSTZYRzRnWEhSY2RGeDBYSFJjZEZ4MGFXWWdLRzl3ZEdsdmJuTXViMjVFWldOc2FXNWxaQ2tnYjNCMGFXOXVjeTV2YmtSbFkyeHBibVZrS0hKbGMzVnNkQ2s3WEc0Z1hIUmNkRngwWEhSY2RGeDBhV1lnS0NGdmNIUnBiMjV6TG1sbmJtOXlaVVJsWTJ4cGJtVmtLVnh1SUZ4MFhIUmNkRngwWEhSY2RGeDBZV0p2Y25SRmNuSnZjaUE5SUc1bGR5QkZjbkp2Y2loY2JpQmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhDSkJZbTl5ZEdWa0lHSmxZMkYxYzJVZ2IyWWdaR1ZqYkdsdVpXUWdaR1Z3Wlc1a1pXNWplVG9nWENJZ0sxeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSEpsYzNWc2RDNXRiMlIxYkdWSlpDQXJYRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRngwWENJZ2FXNGdYQ0lnSzF4dUlGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RISmxjM1ZzZEM1d1lYSmxiblJKWkNBclhHNGdYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBZMmhoYVc1SmJtWnZYRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUXBPMXh1SUZ4MFhIUmNkRngwWEhSY2RHSnlaV0ZyTzF4dUlGeDBYSFJjZEZ4MFhIUmpZWE5sSUZ3aWRXNWhZMk5sY0hSbFpGd2lPbHh1SUZ4MFhIUmNkRngwWEhSY2RHbG1JQ2h2Y0hScGIyNXpMbTl1Vlc1aFkyTmxjSFJsWkNrZ2IzQjBhVzl1Y3k1dmJsVnVZV05qWlhCMFpXUW9jbVZ6ZFd4MEtUdGNiaUJjZEZ4MFhIUmNkRngwWEhScFppQW9JVzl3ZEdsdmJuTXVhV2R1YjNKbFZXNWhZMk5sY0hSbFpDbGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RHRmliM0owUlhKeWIzSWdQU0J1WlhjZ1JYSnliM0lvWEc0Z1hIUmNkRngwWEhSY2RGeDBYSFJjZEZ3aVFXSnZjblJsWkNCaVpXTmhkWE5sSUZ3aUlDc2diVzlrZFd4bFNXUWdLeUJjSWlCcGN5QnViM1FnWVdOalpYQjBaV1JjSWlBcklHTm9ZV2x1U1c1bWIxeHVJRngwWEhSY2RGeDBYSFJjZEZ4MEtUdGNiaUJjZEZ4MFhIUmNkRngwWEhSaWNtVmhhenRjYmlCY2RGeDBYSFJjZEZ4MFkyRnpaU0JjSW1GalkyVndkR1ZrWENJNlhHNGdYSFJjZEZ4MFhIUmNkRngwYVdZZ0tHOXdkR2x2Ym5NdWIyNUJZMk5sY0hSbFpDa2diM0IwYVc5dWN5NXZia0ZqWTJWd2RHVmtLSEpsYzNWc2RDazdYRzRnWEhSY2RGeDBYSFJjZEZ4MFpHOUJjSEJzZVNBOUlIUnlkV1U3WEc0Z1hIUmNkRngwWEhSY2RGeDBZbkpsWVdzN1hHNGdYSFJjZEZ4MFhIUmNkR05oYzJVZ1hDSmthWE53YjNObFpGd2lPbHh1SUZ4MFhIUmNkRngwWEhSY2RHbG1JQ2h2Y0hScGIyNXpMbTl1UkdsemNHOXpaV1FwSUc5d2RHbHZibk11YjI1RWFYTndiM05sWkNoeVpYTjFiSFFwTzF4dUlGeDBYSFJjZEZ4MFhIUmNkR1J2UkdsemNHOXpaU0E5SUhSeWRXVTdYRzRnWEhSY2RGeDBYSFJjZEZ4MFluSmxZV3M3WEc0Z1hIUmNkRngwWEhSY2RHUmxabUYxYkhRNlhHNGdYSFJjZEZ4MFhIUmNkRngwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpVlc1bGVHTmxjSFJwYjI0Z2RIbHdaU0JjSWlBcklISmxjM1ZzZEM1MGVYQmxLVHRjYmlCY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RHbG1JQ2hoWW05eWRFVnljbTl5S1NCN1hHNGdYSFJjZEZ4MFhIUmNkR2h2ZEZObGRGTjBZWFIxY3loY0ltRmliM0owWENJcE8xeHVJRngwWEhSY2RGeDBYSFJ5WlhSMWNtNGdVSEp2YldselpTNXlaV3BsWTNRb1lXSnZjblJGY25KdmNpazdYRzRnWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwWEhScFppQW9aRzlCY0hCc2VTa2dlMXh1SUZ4MFhIUmNkRngwWEhSaGNIQnNhV1ZrVlhCa1lYUmxXMjF2WkhWc1pVbGtYU0E5SUdodmRGVndaR0YwWlZ0dGIyUjFiR1ZKWkYwN1hHNGdYSFJjZEZ4MFhIUmNkR0ZrWkVGc2JGUnZVMlYwS0c5MWRHUmhkR1ZrVFc5a2RXeGxjeXdnY21WemRXeDBMbTkxZEdSaGRHVmtUVzlrZFd4bGN5azdYRzRnWEhSY2RGeDBYSFJjZEdadmNpQW9iVzlrZFd4bFNXUWdhVzRnY21WemRXeDBMbTkxZEdSaGRHVmtSR1Z3Wlc1a1pXNWphV1Z6S1NCN1hHNGdYSFJjZEZ4MFhIUmNkRngwYVdZZ0tGeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFQySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tGeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnlaWE4xYkhRdWIzVjBaR0YwWldSRVpYQmxibVJsYm1OcFpYTXNYRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRzF2WkhWc1pVbGtYRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUXBYRzRnWEhSY2RGeDBYSFJjZEZ4MEtTQjdYRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvSVc5MWRHUmhkR1ZrUkdWd1pXNWtaVzVqYVdWelcyMXZaSFZzWlVsa1hTbGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RGeDBiM1YwWkdGMFpXUkVaWEJsYm1SbGJtTnBaWE5iYlc5a2RXeGxTV1JkSUQwZ1cxMDdYRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUmhaR1JCYkd4VWIxTmxkQ2hjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkRngwYjNWMFpHRjBaV1JFWlhCbGJtUmxibU5wWlhOYmJXOWtkV3hsU1dSZExGeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFhIUnlaWE4xYkhRdWIzVjBaR0YwWldSRVpYQmxibVJsYm1OcFpYTmJiVzlrZFd4bFNXUmRYRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUXBPMXh1SUZ4MFhIUmNkRngwWEhSY2RIMWNiaUJjZEZ4MFhIUmNkRngwZlZ4dUlGeDBYSFJjZEZ4MGZWeHVJRngwWEhSY2RGeDBhV1lnS0dSdlJHbHpjRzl6WlNrZ2UxeHVJRngwWEhSY2RGeDBYSFJoWkdSQmJHeFViMU5sZENodmRYUmtZWFJsWkUxdlpIVnNaWE1zSUZ0eVpYTjFiSFF1Ylc5a2RXeGxTV1JkS1R0Y2JpQmNkRngwWEhSY2RGeDBZWEJ3YkdsbFpGVndaR0YwWlZ0dGIyUjFiR1ZKWkYwZ1BTQjNZWEp1Vlc1bGVIQmxZM1JsWkZKbGNYVnBjbVU3WEc0Z1hIUmNkRngwWEhSOVhHNGdYSFJjZEZ4MGZWeHVJRngwWEhSOVhHNWNiaUJjZEZ4MEx5OGdVM1J2Y21VZ2MyVnNaaUJoWTJObGNIUmxaQ0J2ZFhSa1lYUmxaQ0J0YjJSMWJHVnpJSFJ2SUhKbGNYVnBjbVVnZEdobGJTQnNZWFJsY2lCaWVTQjBhR1VnYlc5a2RXeGxJSE41YzNSbGJWeHVJRngwWEhSMllYSWdiM1YwWkdGMFpXUlRaV3htUVdOalpYQjBaV1JOYjJSMWJHVnpJRDBnVzEwN1hHNGdYSFJjZEdadmNpQW9hU0E5SURBN0lHa2dQQ0J2ZFhSa1lYUmxaRTF2WkhWc1pYTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQmNkRngwWEhSdGIyUjFiR1ZKWkNBOUlHOTFkR1JoZEdWa1RXOWtkV3hsYzF0cFhUdGNiaUJjZEZ4MFhIUnBaaUFvWEc0Z1hIUmNkRngwWEhScGJuTjBZV3hzWldSTmIyUjFiR1Z6VzIxdlpIVnNaVWxrWFNBbUpseHVJRngwWEhSY2RGeDBhVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdWSlpGMHVhRzkwTGw5elpXeG1RV05qWlhCMFpXUWdKaVpjYmlCY2RGeDBYSFJjZEM4dklISmxiVzkyWldRZ2MyVnNaaTFoWTJObGNIUmxaQ0J0YjJSMWJHVnpJSE5vYjNWc1pDQnViM1FnWW1VZ2NtVnhkV2x5WldSY2JpQmNkRngwWEhSY2RHRndjR3hwWldSVmNHUmhkR1ZiYlc5a2RXeGxTV1JkSUNFOVBTQjNZWEp1Vlc1bGVIQmxZM1JsWkZKbGNYVnBjbVZjYmlCY2RGeDBYSFFwSUh0Y2JpQmNkRngwWEhSY2RHOTFkR1JoZEdWa1UyVnNaa0ZqWTJWd2RHVmtUVzlrZFd4bGN5NXdkWE5vS0h0Y2JpQmNkRngwWEhSY2RGeDBiVzlrZFd4bE9pQnRiMlIxYkdWSlpDeGNiaUJjZEZ4MFhIUmNkRngwWlhKeWIzSklZVzVrYkdWeU9pQnBibk4wWVd4c1pXUk5iMlIxYkdWelcyMXZaSFZzWlVsa1hTNW9iM1F1WDNObGJHWkJZMk5sY0hSbFpGeHVJRngwWEhSY2RGeDBmU2s3WEc0Z1hIUmNkRngwZlZ4dUlGeDBYSFI5WEc1Y2JpQmNkRngwTHk4Z1RtOTNJR2x1SUZ3aVpHbHpjRzl6WlZ3aUlIQm9ZWE5sWEc0Z1hIUmNkR2h2ZEZObGRGTjBZWFIxY3loY0ltUnBjM0J2YzJWY0lpazdYRzRnWEhSY2RFOWlhbVZqZEM1clpYbHpLR2h2ZEVGMllXbHNZV0pzWlVacGJHVnpUV0Z3S1M1bWIzSkZZV05vS0daMWJtTjBhVzl1S0dOb2RXNXJTV1FwSUh0Y2JpQmNkRngwWEhScFppQW9hRzkwUVhaaGFXeGhZbXhsUm1sc1pYTk5ZWEJiWTJoMWJtdEpaRjBnUFQwOUlHWmhiSE5sS1NCN1hHNGdYSFJjZEZ4MFhIUm9iM1JFYVhOd2IzTmxRMmgxYm1zb1kyaDFibXRKWkNrN1hHNGdYSFJjZEZ4MGZWeHVJRngwWEhSOUtUdGNibHh1SUZ4MFhIUjJZWElnYVdSNE8xeHVJRngwWEhSMllYSWdjWFZsZFdVZ1BTQnZkWFJrWVhSbFpFMXZaSFZzWlhNdWMyeHBZMlVvS1R0Y2JpQmNkRngwZDJocGJHVWdLSEYxWlhWbExteGxibWQwYUNBK0lEQXBJSHRjYmlCY2RGeDBYSFJ0YjJSMWJHVkpaQ0E5SUhGMVpYVmxMbkJ2Y0NncE8xeHVJRngwWEhSY2RHMXZaSFZzWlNBOUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhOYmJXOWtkV3hsU1dSZE8xeHVJRngwWEhSY2RHbG1JQ2doYlc5a2RXeGxLU0JqYjI1MGFXNTFaVHRjYmx4dUlGeDBYSFJjZEhaaGNpQmtZWFJoSUQwZ2UzMDdYRzVjYmlCY2RGeDBYSFF2THlCRFlXeHNJR1JwYzNCdmMyVWdhR0Z1Wkd4bGNuTmNiaUJjZEZ4MFhIUjJZWElnWkdsemNHOXpaVWhoYm1Sc1pYSnpJRDBnYlc5a2RXeGxMbWh2ZEM1ZlpHbHpjRzl6WlVoaGJtUnNaWEp6TzF4dUlGeDBYSFJjZEdadmNpQW9haUE5SURBN0lHb2dQQ0JrYVhOd2IzTmxTR0Z1Wkd4bGNuTXViR1Z1WjNSb095QnFLeXNwSUh0Y2JpQmNkRngwWEhSY2RHTmlJRDBnWkdsemNHOXpaVWhoYm1Sc1pYSnpXMnBkTzF4dUlGeDBYSFJjZEZ4MFkySW9aR0YwWVNrN1hHNGdYSFJjZEZ4MGZWeHVJRngwWEhSY2RHaHZkRU4xY25KbGJuUk5iMlIxYkdWRVlYUmhXMjF2WkhWc1pVbGtYU0E5SUdSaGRHRTdYRzVjYmlCY2RGeDBYSFF2THlCa2FYTmhZbXhsSUcxdlpIVnNaU0FvZEdocGN5QmthWE5oWW14bGN5QnlaWEYxYVhKbGN5Qm1jbTl0SUhSb2FYTWdiVzlrZFd4bEtWeHVJRngwWEhSY2RHMXZaSFZzWlM1b2IzUXVZV04wYVhabElEMGdabUZzYzJVN1hHNWNiaUJjZEZ4MFhIUXZMeUJ5WlcxdmRtVWdiVzlrZFd4bElHWnliMjBnWTJGamFHVmNiaUJjZEZ4MFhIUmtaV3hsZEdVZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwN1hHNWNiaUJjZEZ4MFhIUXZMeUIzYUdWdUlHUnBjM0J2YzJsdVp5QjBhR1Z5WlNCcGN5QnVieUJ1WldWa0lIUnZJR05oYkd3Z1pHbHpjRzl6WlNCb1lXNWtiR1Z5WEc0Z1hIUmNkRngwWkdWc1pYUmxJRzkxZEdSaGRHVmtSR1Z3Wlc1a1pXNWphV1Z6VzIxdlpIVnNaVWxrWFR0Y2JseHVJRngwWEhSY2RDOHZJSEpsYlc5MlpTQmNJbkJoY21WdWRITmNJaUJ5WldabGNtVnVZMlZ6SUdaeWIyMGdZV3hzSUdOb2FXeGtjbVZ1WEc0Z1hIUmNkRngwWm05eUlDaHFJRDBnTURzZ2FpQThJRzF2WkhWc1pTNWphR2xzWkhKbGJpNXNaVzVuZEdnN0lHb3JLeWtnZTF4dUlGeDBYSFJjZEZ4MGRtRnlJR05vYVd4a0lEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdVdVkyaHBiR1J5Wlc1YmFsMWRPMXh1SUZ4MFhIUmNkRngwYVdZZ0tDRmphR2xzWkNrZ1kyOXVkR2x1ZFdVN1hHNGdYSFJjZEZ4MFhIUnBaSGdnUFNCamFHbHNaQzV3WVhKbGJuUnpMbWx1WkdWNFQyWW9iVzlrZFd4bFNXUXBPMXh1SUZ4MFhIUmNkRngwYVdZZ0tHbGtlQ0ErUFNBd0tTQjdYRzRnWEhSY2RGeDBYSFJjZEdOb2FXeGtMbkJoY21WdWRITXVjM0JzYVdObEtHbGtlQ3dnTVNrN1hHNGdYSFJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBmVnh1SUZ4MFhIUjlYRzVjYmlCY2RGeDBMeThnY21WdGIzWmxJRzkxZEdSaGRHVmtJR1JsY0dWdVpHVnVZM2tnWm5KdmJTQnRiMlIxYkdVZ1kyaHBiR1J5Wlc1Y2JpQmNkRngwZG1GeUlHUmxjR1Z1WkdWdVkzazdYRzRnWEhSY2RIWmhjaUJ0YjJSMWJHVlBkWFJrWVhSbFpFUmxjR1Z1WkdWdVkybGxjenRjYmlCY2RGeDBabTl5SUNodGIyUjFiR1ZKWkNCcGJpQnZkWFJrWVhSbFpFUmxjR1Z1WkdWdVkybGxjeWtnZTF4dUlGeDBYSFJjZEdsbUlDaGNiaUJjZEZ4MFhIUmNkRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2h2ZFhSa1lYUmxaRVJsY0dWdVpHVnVZMmxsY3l3Z2JXOWtkV3hsU1dRcFhHNGdYSFJjZEZ4MEtTQjdYRzRnWEhSY2RGeDBYSFJ0YjJSMWJHVWdQU0JwYm5OMFlXeHNaV1JOYjJSMWJHVnpXMjF2WkhWc1pVbGtYVHRjYmlCY2RGeDBYSFJjZEdsbUlDaHRiMlIxYkdVcElIdGNiaUJjZEZ4MFhIUmNkRngwYlc5a2RXeGxUM1YwWkdGMFpXUkVaWEJsYm1SbGJtTnBaWE1nUFNCdmRYUmtZWFJsWkVSbGNHVnVaR1Z1WTJsbGMxdHRiMlIxYkdWSlpGMDdYRzRnWEhSY2RGeDBYSFJjZEdadmNpQW9haUE5SURBN0lHb2dQQ0J0YjJSMWJHVlBkWFJrWVhSbFpFUmxjR1Z1WkdWdVkybGxjeTVzWlc1bmRHZzdJR29yS3lrZ2UxeHVJRngwWEhSY2RGeDBYSFJjZEdSbGNHVnVaR1Z1WTNrZ1BTQnRiMlIxYkdWUGRYUmtZWFJsWkVSbGNHVnVaR1Z1WTJsbGMxdHFYVHRjYmlCY2RGeDBYSFJjZEZ4MFhIUnBaSGdnUFNCdGIyUjFiR1V1WTJocGJHUnlaVzR1YVc1a1pYaFBaaWhrWlhCbGJtUmxibU41S1R0Y2JpQmNkRngwWEhSY2RGeDBYSFJwWmlBb2FXUjRJRDQ5SURBcElHMXZaSFZzWlM1amFHbHNaSEpsYmk1emNHeHBZMlVvYVdSNExDQXhLVHRjYmlCY2RGeDBYSFJjZEZ4MGZWeHVJRngwWEhSY2RGeDBmVnh1SUZ4MFhIUmNkSDFjYmlCY2RGeDBmVnh1WEc0Z1hIUmNkQzh2SUU1dmR5QnBiaUJjSW1Gd2NHeDVYQ0lnY0doaGMyVmNiaUJjZEZ4MGFHOTBVMlYwVTNSaGRIVnpLRndpWVhCd2JIbGNJaWs3WEc1Y2JpQmNkRngwYUc5MFEzVnljbVZ1ZEVoaGMyZ2dQU0JvYjNSVmNHUmhkR1ZPWlhkSVlYTm9PMXh1WEc0Z1hIUmNkQzh2SUdsdWMyVnlkQ0J1WlhjZ1kyOWtaVnh1SUZ4MFhIUm1iM0lnS0cxdlpIVnNaVWxrSUdsdUlHRndjR3hwWldSVmNHUmhkR1VwSUh0Y2JpQmNkRngwWEhScFppQW9UMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLR0Z3Y0d4cFpXUlZjR1JoZEdVc0lHMXZaSFZzWlVsa0tTa2dlMXh1SUZ4MFhIUmNkRngwYlc5a2RXeGxjMXR0YjJSMWJHVkpaRjBnUFNCaGNIQnNhV1ZrVlhCa1lYUmxXMjF2WkhWc1pVbGtYVHRjYmlCY2RGeDBYSFI5WEc0Z1hIUmNkSDFjYmx4dUlGeDBYSFF2THlCallXeHNJR0ZqWTJWd2RDQm9ZVzVrYkdWeWMxeHVJRngwWEhSMllYSWdaWEp5YjNJZ1BTQnVkV3hzTzF4dUlGeDBYSFJtYjNJZ0tHMXZaSFZzWlVsa0lHbHVJRzkxZEdSaGRHVmtSR1Z3Wlc1a1pXNWphV1Z6S1NCN1hHNGdYSFJjZEZ4MGFXWWdLRnh1SUZ4MFhIUmNkRngwVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0c5MWRHUmhkR1ZrUkdWd1pXNWtaVzVqYVdWekxDQnRiMlIxYkdWSlpDbGNiaUJjZEZ4MFhIUXBJSHRjYmlCY2RGeDBYSFJjZEcxdlpIVnNaU0E5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTzF4dUlGeDBYSFJjZEZ4MGFXWWdLRzF2WkhWc1pTa2dlMXh1SUZ4MFhIUmNkRngwWEhSdGIyUjFiR1ZQZFhSa1lYUmxaRVJsY0dWdVpHVnVZMmxsY3lBOUlHOTFkR1JoZEdWa1JHVndaVzVrWlc1amFXVnpXMjF2WkhWc1pVbGtYVHRjYmlCY2RGeDBYSFJjZEZ4MGRtRnlJR05oYkd4aVlXTnJjeUE5SUZ0ZE8xeHVJRngwWEhSY2RGeDBYSFJtYjNJZ0tHa2dQU0F3T3lCcElEd2diVzlrZFd4bFQzVjBaR0YwWldSRVpYQmxibVJsYm1OcFpYTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQmNkRngwWEhSY2RGeDBYSFJrWlhCbGJtUmxibU41SUQwZ2JXOWtkV3hsVDNWMFpHRjBaV1JFWlhCbGJtUmxibU5wWlhOYmFWMDdYRzRnWEhSY2RGeDBYSFJjZEZ4MFkySWdQU0J0YjJSMWJHVXVhRzkwTGw5aFkyTmxjSFJsWkVSbGNHVnVaR1Z1WTJsbGMxdGtaWEJsYm1SbGJtTjVYVHRjYmlCY2RGeDBYSFJjZEZ4MFhIUnBaaUFvWTJJcElIdGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RHbG1JQ2hqWVd4c1ltRmphM011YVc1a1pYaFBaaWhqWWlrZ0lUMDlJQzB4S1NCamIyNTBhVzUxWlR0Y2JpQmNkRngwWEhSY2RGeDBYSFJjZEdOaGJHeGlZV05yY3k1d2RYTm9LR05pS1R0Y2JpQmNkRngwWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwWEhSY2RIMWNiaUJjZEZ4MFhIUmNkRngwWm05eUlDaHBJRDBnTURzZ2FTQThJR05oYkd4aVlXTnJjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJRngwWEhSY2RGeDBYSFJjZEdOaUlEMGdZMkZzYkdKaFkydHpXMmxkTzF4dUlGeDBYSFJjZEZ4MFhIUmNkSFJ5ZVNCN1hHNGdYSFJjZEZ4MFhIUmNkRngwWEhSallpaHRiMlIxYkdWUGRYUmtZWFJsWkVSbGNHVnVaR1Z1WTJsbGN5azdYRzRnWEhSY2RGeDBYSFJjZEZ4MGZTQmpZWFJqYUNBb1pYSnlLU0I3WEc0Z1hIUmNkRngwWEhSY2RGeDBYSFJwWmlBb2IzQjBhVzl1Y3k1dmJrVnljbTl5WldRcElIdGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RGeDBiM0IwYVc5dWN5NXZia1Z5Y205eVpXUW9lMXh1SUZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEhSNWNHVTZJRndpWVdOalpYQjBMV1Z5Y205eVpXUmNJaXhjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSdGIyUjFiR1ZKWkRvZ2JXOWtkV3hsU1dRc1hHNGdYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBaR1Z3Wlc1a1pXNWplVWxrT2lCdGIyUjFiR1ZQZFhSa1lYUmxaRVJsY0dWdVpHVnVZMmxsYzF0cFhTeGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJsY25KdmNqb2daWEp5WEc0Z1hIUmNkRngwWEhSY2RGeDBYSFJjZEgwcE8xeHVJRngwWEhSY2RGeDBYSFJjZEZ4MGZWeHVJRngwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0Z2Y0hScGIyNXpMbWxuYm05eVpVVnljbTl5WldRcElIdGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RGeDBhV1lnS0NGbGNuSnZjaWtnWlhKeWIzSWdQU0JsY25JN1hHNGdYSFJjZEZ4MFhIUmNkRngwWEhSOVhHNGdYSFJjZEZ4MFhIUmNkRngwZlZ4dUlGeDBYSFJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwZlZ4dUlGeDBYSFI5WEc1Y2JpQmNkRngwTHk4Z1RHOWhaQ0J6Wld4bUlHRmpZMlZ3ZEdWa0lHMXZaSFZzWlhOY2JpQmNkRngwWm05eUlDaHBJRDBnTURzZ2FTQThJRzkxZEdSaGRHVmtVMlZzWmtGalkyVndkR1ZrVFc5a2RXeGxjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJRngwWEhSY2RIWmhjaUJwZEdWdElEMGdiM1YwWkdGMFpXUlRaV3htUVdOalpYQjBaV1JOYjJSMWJHVnpXMmxkTzF4dUlGeDBYSFJjZEcxdlpIVnNaVWxrSUQwZ2FYUmxiUzV0YjJSMWJHVTdYRzRnWEhSY2RGeDBhRzkwUTNWeWNtVnVkRkJoY21WdWRITWdQU0JiYlc5a2RXeGxTV1JkTzF4dUlGeDBYSFJjZEhSeWVTQjdYRzRnWEhSY2RGeDBYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0cxdlpIVnNaVWxrS1R0Y2JpQmNkRngwWEhSOUlHTmhkR05vSUNobGNuSXBJSHRjYmlCY2RGeDBYSFJjZEdsbUlDaDBlWEJsYjJZZ2FYUmxiUzVsY25KdmNraGhibVJzWlhJZ1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ2UxeHVJRngwWEhSY2RGeDBYSFIwY25rZ2UxeHVJRngwWEhSY2RGeDBYSFJjZEdsMFpXMHVaWEp5YjNKSVlXNWtiR1Z5S0dWeWNpazdYRzRnWEhSY2RGeDBYSFJjZEgwZ1kyRjBZMmdnS0dWeWNqSXBJSHRjYmlCY2RGeDBYSFJjZEZ4MFhIUnBaaUFvYjNCMGFXOXVjeTV2YmtWeWNtOXlaV1FwSUh0Y2JpQmNkRngwWEhSY2RGeDBYSFJjZEc5d2RHbHZibk11YjI1RmNuSnZjbVZrS0h0Y2JpQmNkRngwWEhSY2RGeDBYSFJjZEZ4MGRIbHdaVG9nWENKelpXeG1MV0ZqWTJWd2RDMWxjbkp2Y2kxb1lXNWtiR1Z5TFdWeWNtOXlaV1JjSWl4Y2JpQmNkRngwWEhSY2RGeDBYSFJjZEZ4MGJXOWtkV3hsU1dRNklHMXZaSFZzWlVsa0xGeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmxjbkp2Y2pvZ1pYSnlNaXhjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkRngwYjNKcFoybHVZV3hGY25KdmNqb2daWEp5WEc0Z1hIUmNkRngwWEhSY2RGeDBYSFI5S1R0Y2JpQmNkRngwWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwWEhSY2RGeDBhV1lnS0NGdmNIUnBiMjV6TG1sbmJtOXlaVVZ5Y205eVpXUXBJSHRjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkR2xtSUNnaFpYSnliM0lwSUdWeWNtOXlJRDBnWlhKeU1qdGNiaUJjZEZ4MFhIUmNkRngwWEhSOVhHNGdYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDRmxjbkp2Y2lrZ1pYSnliM0lnUFNCbGNuSTdYRzRnWEhSY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RIMGdaV3h6WlNCN1hHNGdYSFJjZEZ4MFhIUmNkR2xtSUNodmNIUnBiMjV6TG05dVJYSnliM0psWkNrZ2UxeHVJRngwWEhSY2RGeDBYSFJjZEc5d2RHbHZibk11YjI1RmNuSnZjbVZrS0h0Y2JpQmNkRngwWEhSY2RGeDBYSFJjZEhSNWNHVTZJRndpYzJWc1ppMWhZMk5sY0hRdFpYSnliM0psWkZ3aUxGeHVJRngwWEhSY2RGeDBYSFJjZEZ4MGJXOWtkV3hsU1dRNklHMXZaSFZzWlVsa0xGeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFpYSnliM0k2SUdWeWNseHVJRngwWEhSY2RGeDBYSFJjZEgwcE8xeHVJRngwWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwWEhSY2RHbG1JQ2doYjNCMGFXOXVjeTVwWjI1dmNtVkZjbkp2Y21Wa0tTQjdYRzRnWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0ZsY25KdmNpa2daWEp5YjNJZ1BTQmxjbkk3WEc0Z1hIUmNkRngwWEhSY2RIMWNiaUJjZEZ4MFhIUmNkSDFjYmlCY2RGeDBYSFI5WEc0Z1hIUmNkSDFjYmx4dUlGeDBYSFF2THlCb1lXNWtiR1VnWlhKeWIzSnpJR2x1SUdGalkyVndkQ0JvWVc1a2JHVnljeUJoYm1RZ2MyVnNaaUJoWTJObGNIUmxaQ0J0YjJSMWJHVWdiRzloWkZ4dUlGeDBYSFJwWmlBb1pYSnliM0lwSUh0Y2JpQmNkRngwWEhSb2IzUlRaWFJUZEdGMGRYTW9YQ0ptWVdsc1hDSXBPMXh1SUZ4MFhIUmNkSEpsZEhWeWJpQlFjbTl0YVhObExuSmxhbVZqZENobGNuSnZjaWs3WEc0Z1hIUmNkSDFjYmx4dUlGeDBYSFJvYjNSVFpYUlRkR0YwZFhNb1hDSnBaR3hsWENJcE8xeHVJRngwWEhSeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlNrZ2UxeHVJRngwWEhSY2RISmxjMjlzZG1Vb2IzVjBaR0YwWldSTmIyUjFiR1Z6S1R0Y2JpQmNkRngwZlNrN1hHNGdYSFI5WEc1Y2JpQmNkQzh2SUZSb1pTQnRiMlIxYkdVZ1kyRmphR1ZjYmlCY2RIWmhjaUJwYm5OMFlXeHNaV1JOYjJSMWJHVnpJRDBnZTMwN1hHNWNiaUJjZEM4dklGUm9aU0J5WlhGMWFYSmxJR1oxYm1OMGFXOXVYRzRnWEhSbWRXNWpkR2x2YmlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktHMXZaSFZzWlVsa0tTQjdYRzVjYmlCY2RGeDBMeThnUTJobFkyc2dhV1lnYlc5a2RXeGxJR2x6SUdsdUlHTmhZMmhsWEc0Z1hIUmNkR2xtS0dsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkS1NCN1hHNGdYSFJjZEZ4MGNtVjBkWEp1SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1WNGNHOXlkSE03WEc0Z1hIUmNkSDFjYmlCY2RGeDBMeThnUTNKbFlYUmxJR0VnYm1WM0lHMXZaSFZzWlNBb1lXNWtJSEIxZENCcGRDQnBiblJ2SUhSb1pTQmpZV05vWlNsY2JpQmNkRngwZG1GeUlHMXZaSFZzWlNBOUlHbHVjM1JoYkd4bFpFMXZaSFZzWlhOYmJXOWtkV3hsU1dSZElEMGdlMXh1SUZ4MFhIUmNkR2s2SUcxdlpIVnNaVWxrTEZ4dUlGeDBYSFJjZEd3NklHWmhiSE5sTEZ4dUlGeDBYSFJjZEdWNGNHOXlkSE02SUh0OUxGeHVJRngwWEhSY2RHaHZkRG9nYUc5MFEzSmxZWFJsVFc5a2RXeGxLRzF2WkhWc1pVbGtLU3hjYmlCY2RGeDBYSFJ3WVhKbGJuUnpPaUFvYUc5MFEzVnljbVZ1ZEZCaGNtVnVkSE5VWlcxd0lEMGdhRzkwUTNWeWNtVnVkRkJoY21WdWRITXNJR2h2ZEVOMWNuSmxiblJRWVhKbGJuUnpJRDBnVzEwc0lHaHZkRU4xY25KbGJuUlFZWEpsYm5SelZHVnRjQ2tzWEc0Z1hIUmNkRngwWTJocGJHUnlaVzQ2SUZ0ZFhHNGdYSFJjZEgwN1hHNWNiaUJjZEZ4MEx5OGdSWGhsWTNWMFpTQjBhR1VnYlc5a2RXeGxJR1oxYm1OMGFXOXVYRzRnWEhSY2RHMXZaSFZzWlhOYmJXOWtkV3hsU1dSZExtTmhiR3dvYlc5a2RXeGxMbVY0Y0c5eWRITXNJRzF2WkhWc1pTd2diVzlrZFd4bExtVjRjRzl5ZEhNc0lHaHZkRU55WldGMFpWSmxjWFZwY21Vb2JXOWtkV3hsU1dRcEtUdGNibHh1SUZ4MFhIUXZMeUJHYkdGbklIUm9aU0J0YjJSMWJHVWdZWE1nYkc5aFpHVmtYRzRnWEhSY2RHMXZaSFZzWlM1c0lEMGdkSEoxWlR0Y2JseHVJRngwWEhRdkx5QlNaWFIxY200Z2RHaGxJR1Y0Y0c5eWRITWdiMllnZEdobElHMXZaSFZzWlZ4dUlGeDBYSFJ5WlhSMWNtNGdiVzlrZFd4bExtVjRjRzl5ZEhNN1hHNGdYSFI5WEc1Y2JseHVJRngwTHk4Z1pYaHdiM05sSUhSb1pTQnRiMlIxYkdWeklHOWlhbVZqZENBb1gxOTNaV0p3WVdOclgyMXZaSFZzWlhOZlh5bGNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJTQTlJRzF2WkhWc1pYTTdYRzVjYmlCY2RDOHZJR1Y0Y0c5elpTQjBhR1VnYlc5a2RXeGxJR05oWTJobFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1NZ1BTQnBibk4wWVd4c1pXUk5iMlIxYkdWek8xeHVYRzRnWEhRdkx5QmtaV1pwYm1VZ1oyVjBkR1Z5SUdaMWJtTjBhVzl1SUdadmNpQm9ZWEp0YjI1NUlHVjRjRzl5ZEhOY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1WkNBOUlHWjFibU4wYVc5dUtHVjRjRzl5ZEhNc0lHNWhiV1VzSUdkbGRIUmxjaWtnZTF4dUlGeDBYSFJwWmlnaFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXZLR1Y0Y0c5eWRITXNJRzVoYldVcEtTQjdYRzRnWEhSY2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUc1aGJXVXNJSHNnWlc1MWJXVnlZV0pzWlRvZ2RISjFaU3dnWjJWME9pQm5aWFIwWlhJZ2ZTazdYRzRnWEhSY2RIMWNiaUJjZEgwN1hHNWNiaUJjZEM4dklHUmxabWx1WlNCZlgyVnpUVzlrZFd4bElHOXVJR1Y0Y0c5eWRITmNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWNpQTlJR1oxYm1OMGFXOXVLR1Y0Y0c5eWRITXBJSHRjYmlCY2RGeDBhV1lvZEhsd1pXOW1JRk41YldKdmJDQWhQVDBnSjNWdVpHVm1hVzVsWkNjZ0ppWWdVM2x0WW05c0xuUnZVM1J5YVc1blZHRm5LU0I3WEc0Z1hIUmNkRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGTjViV0p2YkM1MGIxTjBjbWx1WjFSaFp5d2dleUIyWVd4MVpUb2dKMDF2WkhWc1pTY2dmU2s3WEc0Z1hIUmNkSDFjYmlCY2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUNkZlgyVnpUVzlrZFd4bEp5d2dleUIyWVd4MVpUb2dkSEoxWlNCOUtUdGNiaUJjZEgwN1hHNWNiaUJjZEM4dklHTnlaV0YwWlNCaElHWmhhMlVnYm1GdFpYTndZV05sSUc5aWFtVmpkRnh1SUZ4MEx5OGdiVzlrWlNBbUlERTZJSFpoYkhWbElHbHpJR0VnYlc5a2RXeGxJR2xrTENCeVpYRjFhWEpsSUdsMFhHNGdYSFF2THlCdGIyUmxJQ1lnTWpvZ2JXVnlaMlVnWVd4c0lIQnliM0JsY25ScFpYTWdiMllnZG1Gc2RXVWdhVzUwYnlCMGFHVWdibk5jYmlCY2RDOHZJRzF2WkdVZ0ppQTBPaUJ5WlhSMWNtNGdkbUZzZFdVZ2QyaGxiaUJoYkhKbFlXUjVJRzV6SUc5aWFtVmpkRnh1SUZ4MEx5OGdiVzlrWlNBbUlEaDhNVG9nWW1Wb1lYWmxJR3hwYTJVZ2NtVnhkV2x5WlZ4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTUwSUQwZ1puVnVZM1JwYjI0b2RtRnNkV1VzSUcxdlpHVXBJSHRjYmlCY2RGeDBhV1lvYlc5a1pTQW1JREVwSUhaaGJIVmxJRDBnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHloMllXeDFaU2s3WEc0Z1hIUmNkR2xtS0cxdlpHVWdKaUE0S1NCeVpYUjFjbTRnZG1Gc2RXVTdYRzRnWEhSY2RHbG1LQ2h0YjJSbElDWWdOQ2tnSmlZZ2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmIySnFaV04wSnlBbUppQjJZV3gxWlNBbUppQjJZV3gxWlM1ZlgyVnpUVzlrZFd4bEtTQnlaWFIxY200Z2RtRnNkV1U3WEc0Z1hIUmNkSFpoY2lCdWN5QTlJRTlpYW1WamRDNWpjbVZoZEdVb2JuVnNiQ2s3WEc0Z1hIUmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1Y2lodWN5azdYRzRnWEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h1Y3l3Z0oyUmxabUYxYkhRbkxDQjdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNJSFpoYkhWbE9pQjJZV3gxWlNCOUtUdGNiaUJjZEZ4MGFXWW9iVzlrWlNBbUlESWdKaVlnZEhsd1pXOW1JSFpoYkhWbElDRTlJQ2R6ZEhKcGJtY25LU0JtYjNJb2RtRnlJR3RsZVNCcGJpQjJZV3gxWlNrZ1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NWtLRzV6TENCclpYa3NJR1oxYm1OMGFXOXVLR3RsZVNrZ2V5QnlaWFIxY200Z2RtRnNkV1ZiYTJWNVhUc2dmUzVpYVc1a0tHNTFiR3dzSUd0bGVTa3BPMXh1SUZ4MFhIUnlaWFIxY200Z2JuTTdYRzRnWEhSOU8xeHVYRzRnWEhRdkx5Qm5aWFJFWldaaGRXeDBSWGh3YjNKMElHWjFibU4wYVc5dUlHWnZjaUJqYjIxd1lYUnBZbWxzYVhSNUlIZHBkR2dnYm05dUxXaGhjbTF2Ym5rZ2JXOWtkV3hsYzF4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTV1SUQwZ1puVnVZM1JwYjI0b2JXOWtkV3hsS1NCN1hHNGdYSFJjZEhaaGNpQm5aWFIwWlhJZ1BTQnRiMlIxYkdVZ0ppWWdiVzlrZFd4bExsOWZaWE5OYjJSMWJHVWdQMXh1SUZ4MFhIUmNkR1oxYm1OMGFXOXVJR2RsZEVSbFptRjFiSFFvS1NCN0lISmxkSFZ5YmlCdGIyUjFiR1ZiSjJSbFptRjFiSFFuWFRzZ2ZTQTZYRzRnWEhSY2RGeDBablZ1WTNScGIyNGdaMlYwVFc5a2RXeGxSWGh3YjNKMGN5Z3BJSHNnY21WMGRYSnVJRzF2WkhWc1pUc2dmVHRjYmlCY2RGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVrS0dkbGRIUmxjaXdnSjJFbkxDQm5aWFIwWlhJcE8xeHVJRngwWEhSeVpYUjFjbTRnWjJWMGRHVnlPMXh1SUZ4MGZUdGNibHh1SUZ4MEx5OGdUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtOGdQU0JtZFc1amRHbHZiaWh2WW1wbFkzUXNJSEJ5YjNCbGNuUjVLU0I3SUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMbWhoYzA5M2JsQnliM0JsY25SNUxtTmhiR3dvYjJKcVpXTjBMQ0J3Y205d1pYSjBlU2s3SUgwN1hHNWNiaUJjZEM4dklGOWZkMlZpY0dGamExOXdkV0pzYVdOZmNHRjBhRjlmWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbkFnUFNCY0lsd2lPMXh1WEc0Z1hIUXZMeUJmWDNkbFluQmhZMnRmYUdGemFGOWZYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtZ2dQU0JtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SUdodmRFTjFjbkpsYm5SSVlYTm9PeUI5TzF4dVhHNWNiaUJjZEM4dklFeHZZV1FnWlc1MGNua2diVzlrZFd4bElHRnVaQ0J5WlhSMWNtNGdaWGh3YjNKMGMxeHVJRngwY21WMGRYSnVJR2h2ZEVOeVpXRjBaVkpsY1hWcGNtVW9YQ0l1TDJsdVpHVjRMbXB6WENJcEtGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjeUE5SUZ3aUxpOXBibVJsZUM1cWMxd2lLVHRjYmlJc0lpOHZJRkpsTFdWNGNHOXlkR1ZrSUcxdlpIVnNaWE1nY21WeGRXbHlaV1FnWm05eUlGQlBVeUIyWlc1a2IzSnpYRzVsZUhCdmNuUWdlMU53YVgwZ1puSnZiU0FuTGk5emNtTXZVM0JwSnp0Y2JtVjRjRzl5ZENCN1RHOW5aMlZ5ZlNCbWNtOXRJQ2N1TDNOeVl5OU1iMmRuWlhJbk8xeHVaWGh3YjNKMElIdFRaV055WlhSemZTQm1jbTl0SUNjdUwzTnlZeTlUWldOeVpYUnpKenRjYm1WNGNHOXlkQ0I3VTNWalkyVnpjMU4wWVhSbGZTQm1jbTl0SUNjdUwzTnlZeTlOWlhOellXZGxjeWM3WEc1bGVIQnZjblFnZTFSeVlXNXpZV04wYVc5dVQzQjBhVzl1Y3l3Z1ZISmhibk5oWTNScGIyNVVlWEJsTENCVGNHbEdiRzkzTENCVGNHbFRkR0YwZFhOOUlHWnliMjBnSnk0dmMzSmpMMU53YVUxdlpHVnNjeWM3WEc1bGVIQnZjblFnZTFCeWFXNTBhVzVuVW1WemNHOXVjMlY5SUdaeWIyMGdKeTR2YzNKakwxQnlhVzUwYVc1bkp6dGNibVY0Y0c5eWRDQjdVbVZtZFc1a1VtVnpjRzl1YzJVc0lGQjFjbU5vWVhObFVtVnpjRzl1YzJVc0lFZGxkRXhoYzNSVWNtRnVjMkZqZEdsdmJsSmxjM0J2Ym5ObExDQk5iM1J2VUhWeVkyaGhjMlZTWlhOd2IyNXpaWDBnWm5KdmJTQW5MaTl6Y21NdlVIVnlZMmhoYzJVbk8xeHVaWGh3YjNKMElIdFVaWEp0YVc1aGJGTjBZWFIxYzFKbGMzQnZibk5sTENCVVpYSnRhVzVoYkVKaGRIUmxjbmw5SUdaeWIyMGdKeTR2YzNKakwxUmxjbTFwYm1Gc1UzUmhkSFZ6Snp0Y2JtVjRjRzl5ZENCN1EyRnphRzkxZEU5dWJIbFNaWE53YjI1elpYMGdabkp2YlNBbkxpOXpjbU12UTJGemFHOTFkQ2M3WEc1bGVIQnZjblFnZTFObGRIUnNaVzFsYm5SOUlHWnliMjBnSnk0dmMzSmpMMU5sZEhSc1pXMWxiblFuTzF4dVpYaHdiM0owSUh0U1pYRjFaWE4wU1dSSVpXeHdaWEo5SUdaeWIyMGdKeTR2YzNKakwxSmxjWFZsYzNSSlpFaGxiSEJsY2ljN1hHNWxlSEJ2Y25RZ2UwUmxkbWxqWlVGa1pISmxjM05TWlhOd2IyNXpaVU52WkdWOUlHWnliMjBnSnk0dmMzSmpMMU5sY25acFkyVXZSR1YyYVdObFUyVnlkbWxqWlNjN1hHNWxlSEJ2Y25RZ2UwSnBiR3hUZEdGMGRYTlNaWE53YjI1elpTd2dRbWxzYkZKbGRISnBaWFpoYkZKbGMzVnNkQ3dnUjJWMFQzQmxibFJoWW14bGMxSmxjM0J2Ym5ObExDQlBjR1Z1VkdGaWJHVnpSVzUwY25rc0lFSnBiR3hRWVhsdFpXNTBSbXh2ZDBWdVpHVmtVbVZ6Y0c5dWMyVjlJR1p5YjIwZ0p5NHZjM0pqTDFCaGVVRjBWR0ZpYkdVbk8xeHVaWGh3YjNKMElIdEJZMk52ZFc1MFZtVnlhV1o1VW1WemNHOXVjMlVzSUZCeVpXRjFkR2hTWlhOd2IyNXpaWDBnWm5KdmJTQW5MaTl6Y21NdlVISmxZWFYwYUNjN1hHNGlMQ0ptZFc1amRHbHZiaUJoYzNsdVkwZGxibVZ5WVhSdmNsTjBaWEFvWjJWdUxDQnlaWE52YkhabExDQnlaV3BsWTNRc0lGOXVaWGgwTENCZmRHaHliM2NzSUd0bGVTd2dZWEpuS1NCN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnZG1GeUlHbHVabThnUFNCblpXNWJhMlY1WFNoaGNtY3BPMXh1SUNBZ0lIWmhjaUIyWVd4MVpTQTlJR2x1Wm04dWRtRnNkV1U3WEc0Z0lIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNGdJQ0FnY21WcVpXTjBLR1Z5Y205eUtUdGNiaUFnSUNCeVpYUjFjbTQ3WEc0Z0lIMWNibHh1SUNCcFppQW9hVzVtYnk1a2IyNWxLU0I3WEc0Z0lDQWdjbVZ6YjJ4MlpTaDJZV3gxWlNrN1hHNGdJSDBnWld4elpTQjdYRzRnSUNBZ1VISnZiV2x6WlM1eVpYTnZiSFpsS0haaGJIVmxLUzUwYUdWdUtGOXVaWGgwTENCZmRHaHliM2NwTzF4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlGOWhjM2x1WTFSdlIyVnVaWEpoZEc5eUtHWnVLU0I3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TEZ4dUlDQWdJQ0FnSUNCaGNtZHpJRDBnWVhKbmRXMWxiblJ6TzF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaUFvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1oyVnVJRDBnWm00dVlYQndiSGtvYzJWc1ppd2dZWEpuY3lrN1hHNWNiaUFnSUNBZ0lHWjFibU4wYVc5dUlGOXVaWGgwS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUdGemVXNWpSMlZ1WlhKaGRHOXlVM1JsY0NoblpXNHNJSEpsYzI5c2RtVXNJSEpsYW1WamRDd2dYMjVsZUhRc0lGOTBhSEp2ZHl3Z1hDSnVaWGgwWENJc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1puVnVZM1JwYjI0Z1gzUm9jbTkzS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0JoYzNsdVkwZGxibVZ5WVhSdmNsTjBaWEFvWjJWdUxDQnlaWE52YkhabExDQnlaV3BsWTNRc0lGOXVaWGgwTENCZmRHaHliM2NzSUZ3aWRHaHliM2RjSWl3Z1pYSnlLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWDI1bGVIUW9kVzVrWldacGJtVmtLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZUdGNibjFjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCZllYTjVibU5VYjBkbGJtVnlZWFJ2Y2pzaUxDSm1kVzVqZEdsdmJpQmZZMnhoYzNORFlXeHNRMmhsWTJzb2FXNXpkR0Z1WTJVc0lFTnZibk4wY25WamRHOXlLU0I3WEc0Z0lHbG1JQ2doS0dsdWMzUmhibU5sSUdsdWMzUmhibU5sYjJZZ1EyOXVjM1J5ZFdOMGIzSXBLU0I3WEc0Z0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhjSWtOaGJtNXZkQ0JqWVd4c0lHRWdZMnhoYzNNZ1lYTWdZU0JtZFc1amRHbHZibHdpS1R0Y2JpQWdmVnh1ZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGOWpiR0Z6YzBOaGJHeERhR1ZqYXpzaUxDSm1kVzVqZEdsdmJpQmZaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aDBZWEpuWlhRc0lIQnliM0J6S1NCN1hHNGdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY0hKdmNITXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0IyWVhJZ1pHVnpZM0pwY0hSdmNpQTlJSEJ5YjNCelcybGRPMXh1SUNBZ0lHUmxjMk55YVhCMGIzSXVaVzUxYldWeVlXSnNaU0E5SUdSbGMyTnlhWEIwYjNJdVpXNTFiV1Z5WVdKc1pTQjhmQ0JtWVd4elpUdGNiaUFnSUNCa1pYTmpjbWx3ZEc5eUxtTnZibVpwWjNWeVlXSnNaU0E5SUhSeWRXVTdYRzRnSUNBZ2FXWWdLRndpZG1Gc2RXVmNJaUJwYmlCa1pYTmpjbWx3ZEc5eUtTQmtaWE5qY21sd2RHOXlMbmR5YVhSaFlteGxJRDBnZEhKMVpUdGNiaUFnSUNCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29kR0Z5WjJWMExDQmtaWE5qY21sd2RHOXlMbXRsZVN3Z1pHVnpZM0pwY0hSdmNpazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWDJOeVpXRjBaVU5zWVhOektFTnZibk4wY25WamRHOXlMQ0J3Y205MGIxQnliM0J6TENCemRHRjBhV05RY205d2N5a2dlMXh1SUNCcFppQW9jSEp2ZEc5UWNtOXdjeWtnWDJSbFptbHVaVkJ5YjNCbGNuUnBaWE1vUTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbExDQndjbTkwYjFCeWIzQnpLVHRjYmlBZ2FXWWdLSE4wWVhScFkxQnliM0J6S1NCZlpHVm1hVzVsVUhKdmNHVnlkR2xsY3loRGIyNXpkSEoxWTNSdmNpd2djM1JoZEdsalVISnZjSE1wTzF4dUlDQnlaWFIxY200Z1EyOXVjM1J5ZFdOMGIzSTdYRzU5WEc1Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1gyTnlaV0YwWlVOc1lYTnpPeUlzSW1aMWJtTjBhVzl1SUY5eVpXRmtUMjVzZVVWeWNtOXlLRzVoYldVcElIdGNiaUFnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpWEZ4Y0lsd2lJQ3NnYm1GdFpTQXJJRndpWEZ4Y0lpQnBjeUJ5WldGa0xXOXViSGxjSWlrN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWDNKbFlXUlBibXg1UlhKeWIzSTdJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLRndpY21WblpXNWxjbUYwYjNJdGNuVnVkR2x0WlZ3aUtUdGNiaUlzSWk4cUlTQk5TVlFnVEdsalpXNXpaUzRnUTI5d2VYSnBaMmgwSURJd01UVXRNakF4T0NCU2FXTm9ZWEprSUUxdmIzSmxJRHh0WlVCeWFXTnRiMjh1WTI5dFBpNGdVMlZsSUV4SlEwVk9VMFV1ZEhoMExpQXFMMXh1S0daMWJtTjBhVzl1S0hKdmIzUXBJSHRjYmlBZ0lDQmNJblZ6WlNCemRISnBZM1JjSWp0Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUdOb1pXTnJTVzUwS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFvY0dGeWMyVkpiblFvZG1Gc2RXVXBJRDA5UFNCMllXeDFaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdablZ1WTNScGIyNGdZMmhsWTJ0SmJuUnpLR0Z5Y21GNWFYTm9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZMmhsWTJ0SmJuUW9ZWEp5WVhscGMyZ3ViR1Z1WjNSb0tTa2dleUJ5WlhSMWNtNGdabUZzYzJVN0lIMWNibHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdGeWNtRjVhWE5vTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV05vWldOclNXNTBLR0Z5Y21GNWFYTm9XMmxkS1NCOGZDQmhjbkpoZVdsemFGdHBYU0E4SURBZ2ZId2dZWEp5WVhscGMyaGJhVjBnUGlBeU5UVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQmpiMlZ5WTJWQmNuSmhlU2hoY21jc0lHTnZjSGtwSUh0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJCY25KaGVVSjFabVpsY2lCMmFXVjNYRzRnSUNBZ0lDQWdJR2xtSUNoaGNtY3VZblZtWm1WeUlDWW1JR0Z5Wnk1dVlXMWxJRDA5UFNBblZXbHVkRGhCY25KaGVTY3BJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dOdmNIa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYSm5Mbk5zYVdObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJR0Z5Wnk1emJHbGpaU2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnlaeUE5SUVGeWNtRjVMbkJ5YjNSdmRIbHdaUzV6YkdsalpTNWpZV3hzS0dGeVp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWVhKbk8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1NYUW5jeUJoYmlCaGNuSmhlVHNnWTJobFkyc2dhWFFnYVhNZ1lTQjJZV3hwWkNCeVpYQnlaWE5sYm5SaGRHbHZiaUJ2WmlCaElHSjVkR1ZjYmlBZ0lDQWdJQ0FnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWVhKbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqYUdWamEwbHVkSE1vWVhKbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25RWEp5WVhrZ1kyOXVkR0ZwYm5NZ2FXNTJZV3hwWkNCMllXeDFaVG9nSnlBcklHRnlaeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dWV2x1ZERoQmNuSmhlU2hoY21jcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1UyOXRaWFJvYVc1bklHVnNjMlVzSUdKMWRDQmlaV2hoZG1WeklHeHBhMlVnWVc0Z1lYSnlZWGtnS0cxaGVXSmxJR0VnUW5WbVptVnlQeUJCY21kMWJXVnVkSE0vS1Z4dUlDQWdJQ0FnSUNCcFppQW9ZMmhsWTJ0SmJuUW9ZWEpuTG14bGJtZDBhQ2tnSmlZZ1kyaGxZMnRKYm5SektHRnlaeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVldsdWREaEJjbkpoZVNoaGNtY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkMWJuTjFjSEJ2Y25SbFpDQmhjbkpoZVMxc2FXdGxJRzlpYW1WamRDY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHWjFibU4wYVc5dUlHTnlaV0YwWlVGeWNtRjVLR3hsYm1kMGFDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZWcGJuUTRRWEp5WVhrb2JHVnVaM1JvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJqYjNCNVFYSnlZWGtvYzI5MWNtTmxRWEp5WVhrc0lIUmhjbWRsZEVGeWNtRjVMQ0IwWVhKblpYUlRkR0Z5ZEN3Z2MyOTFjbU5sVTNSaGNuUXNJSE52ZFhKalpVVnVaQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9jMjkxY21ObFUzUmhjblFnSVQwZ2JuVnNiQ0I4ZkNCemIzVnlZMlZGYm1RZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITnZkWEpqWlVGeWNtRjVMbk5zYVdObEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMjkxY21ObFFYSnlZWGtnUFNCemIzVnlZMlZCY25KaGVTNXpiR2xqWlNoemIzVnlZMlZUZEdGeWRDd2djMjkxY21ObFJXNWtLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFjbU5sUVhKeVlYa2dQU0JCY25KaGVTNXdjbTkwYjNSNWNHVXVjMnhwWTJVdVkyRnNiQ2h6YjNWeVkyVkJjbkpoZVN3Z2MyOTFjbU5sVTNSaGNuUXNJSE52ZFhKalpVVnVaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZEdGeVoyVjBRWEp5WVhrdWMyVjBLSE52ZFhKalpVRnljbUY1TENCMFlYSm5aWFJUZEdGeWRDazdYRzRnSUNBZ2ZWeHVYRzVjYmx4dUlDQWdJSFpoY2lCamIyNTJaWEowVlhSbU9DQTlJQ2htZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z2RHOUNlWFJsY3loMFpYaDBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnVzEwc0lHa2dQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR1Y0ZENBOUlHVnVZMjlrWlZWU1NTaDBaWGgwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGRvYVd4bElDaHBJRHdnZEdWNGRDNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnWXlBOUlIUmxlSFF1WTJoaGNrTnZaR1ZCZENocEt5c3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FXWWdhWFFnYVhNZ1lTQWxJSE5wWjI0c0lHVnVZMjlrWlNCMGFHVWdabTlzYkc5M2FXNW5JRElnWW5sMFpYTWdZWE1nWVNCb1pYZ2dkbUZzZFdWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZeUE5UFQwZ016Y3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG5CMWMyZ29jR0Z5YzJWSmJuUW9kR1Y0ZEM1emRXSnpkSElvYVN3Z01pa3NJREUyS1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhU0FyUFNBeU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYjNSb1pYSjNhWE5sTENCcWRYTjBJSFJvWlNCaFkzUjFZV3dnWW5sMFpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXdkWE5vS0dNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMjlsY21ObFFYSnlZWGtvY21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlHWnliMjFDZVhSbGN5aGllWFJsY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlGdGRMQ0JwSUQwZ01EdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0drZ1BDQmllWFJsY3k1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZeUE5SUdKNWRHVnpXMmxkTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR01nUENBeE1qZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG5CMWMyZ29VM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2hqS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tyS3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHTWdQaUF4T1RFZ0ppWWdZeUE4SURJeU5Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1Y0hWemFDaFRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLQ2dvWXlBbUlEQjRNV1lwSUR3OElEWXBJSHdnS0dKNWRHVnpXMmtnS3lBeFhTQW1JREI0TTJZcEtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdrZ0t6MGdNanRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1Y0hWemFDaFRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLQ2dvWXlBbUlEQjRNR1lwSUR3OElERXlLU0I4SUNnb1lubDBaWE5iYVNBcklERmRJQ1lnTUhnelppa2dQRHdnTmlrZ2ZDQW9ZbmwwWlhOYmFTQXJJREpkSUNZZ01IZ3paaWtwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhU0FyUFNBek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2RDNXFiMmx1S0NjbktUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBiMEo1ZEdWek9pQjBiMEo1ZEdWekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWm5KdmJVSjVkR1Z6T2lCbWNtOXRRbmwwWlhNc1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUtTZ3BPMXh1WEc0Z0lDQWdkbUZ5SUdOdmJuWmxjblJJWlhnZ1BTQW9ablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUhSdlFubDBaWE1vZEdWNGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJRnRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwWlhoMExteGxibWQwYURzZ2FTQXJQU0F5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwTG5CMWMyZ29jR0Z5YzJWSmJuUW9kR1Y0ZEM1emRXSnpkSElvYVN3Z01pa3NJREUyS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCb2RIUndPaTh2YVhoMGFTNXVaWFF2WkdWMlpXeHZjRzFsYm5RdmFtRjJZWE5qY21sd2RDOHlNREV4THpFeEx6RXhMMkpoYzJVMk5DMWxibU52WkdWa1pXTnZaR1V0YjJZdGRYUm1PQzFwYmkxaWNtOTNjMlZ5TFhkcGRHZ3Rhbk11YUhSdGJGeHVJQ0FnSUNBZ0lDQjJZWElnU0dWNElEMGdKekF4TWpNME5UWTNPRGxoWW1Oa1pXWW5PMXh1WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdaeWIyMUNlWFJsY3loaWVYUmxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdKNWRHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMklEMGdZbmwwWlhOYmFWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQzV3ZFhOb0tFaGxlRnNvZGlBbUlEQjRaakFwSUQ0K0lEUmRJQ3NnU0dWNFczWWdKaUF3ZURCbVhTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRdWFtOXBiaWduSnlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHOUNlWFJsY3pvZ2RHOUNlWFJsY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p5YjIxQ2VYUmxjem9nWm5KdmJVSjVkR1Z6TEZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlNrb0tUdGNibHh1WEc0Z0lDQWdMeThnVG5WdFltVnlJRzltSUhKdmRXNWtjeUJpZVNCclpYbHphWHBsWEc0Z0lDQWdkbUZ5SUc1MWJXSmxjazltVW05MWJtUnpJRDBnZXpFMk9pQXhNQ3dnTWpRNklERXlMQ0F6TWpvZ01UUjlYRzVjYmlBZ0lDQXZMeUJTYjNWdVpDQmpiMjV6ZEdGdWRDQjNiM0prYzF4dUlDQWdJSFpoY2lCeVkyOXVJRDBnV3pCNE1ERXNJREI0TURJc0lEQjRNRFFzSURCNE1EZ3NJREI0TVRBc0lEQjRNakFzSURCNE5EQXNJREI0T0RBc0lEQjRNV0lzSURCNE16WXNJREI0Tm1Nc0lEQjRaRGdzSURCNFlXSXNJREI0TkdRc0lEQjRPV0VzSURCNE1tWXNJREI0TldVc0lEQjRZbU1zSURCNE5qTXNJREI0WXpZc0lEQjRPVGNzSURCNE16VXNJREI0Tm1Fc0lEQjRaRFFzSURCNFlqTXNJREI0TjJRc0lEQjRabUVzSURCNFpXWXNJREI0WXpVc0lEQjRPVEZkTzF4dVhHNGdJQ0FnTHk4Z1V5MWliM2dnWVc1a0lFbHVkbVZ5YzJVZ1V5MWliM2dnS0ZNZ2FYTWdabTl5SUZOMVluTjBhWFIxZEdsdmJpbGNiaUFnSUNCMllYSWdVeUE5SUZzd2VEWXpMQ0F3ZURkakxDQXdlRGMzTENBd2VEZGlMQ0F3ZUdZeUxDQXdlRFppTENBd2VEWm1MQ0F3ZUdNMUxDQXdlRE13TENBd2VEQXhMQ0F3ZURZM0xDQXdlREppTENBd2VHWmxMQ0F3ZUdRM0xDQXdlR0ZpTENBd2VEYzJMQ0F3ZUdOaExDQXdlRGd5TENBd2VHTTVMQ0F3ZURka0xDQXdlR1poTENBd2VEVTVMQ0F3ZURRM0xDQXdlR1l3TENBd2VHRmtMQ0F3ZUdRMExDQXdlR0V5TENBd2VHRm1MQ0F3ZURsakxDQXdlR0UwTENBd2VEY3lMQ0F3ZUdNd0xDQXdlR0kzTENBd2VHWmtMQ0F3ZURrekxDQXdlREkyTENBd2VETTJMQ0F3ZURObUxDQXdlR1kzTENBd2VHTmpMQ0F3ZURNMExDQXdlR0UxTENBd2VHVTFMQ0F3ZUdZeExDQXdlRGN4TENBd2VHUTRMQ0F3ZURNeExDQXdlREUxTENBd2VEQTBMQ0F3ZUdNM0xDQXdlREl6TENBd2VHTXpMQ0F3ZURFNExDQXdlRGsyTENBd2VEQTFMQ0F3ZURsaExDQXdlREEzTENBd2VERXlMQ0F3ZURnd0xDQXdlR1V5TENBd2VHVmlMQ0F3ZURJM0xDQXdlR0l5TENBd2VEYzFMQ0F3ZURBNUxDQXdlRGd6TENBd2VESmpMQ0F3ZURGaExDQXdlREZpTENBd2VEWmxMQ0F3ZURWaExDQXdlR0V3TENBd2VEVXlMQ0F3ZUROaUxDQXdlR1EyTENBd2VHSXpMQ0F3ZURJNUxDQXdlR1V6TENBd2VESm1MQ0F3ZURnMExDQXdlRFV6TENBd2VHUXhMQ0F3ZURBd0xDQXdlR1ZrTENBd2VESXdMQ0F3ZUdaakxDQXdlR0l4TENBd2VEVmlMQ0F3ZURaaExDQXdlR05pTENBd2VHSmxMQ0F3ZURNNUxDQXdlRFJoTENBd2VEUmpMQ0F3ZURVNExDQXdlR05tTENBd2VHUXdMQ0F3ZUdWbUxDQXdlR0ZoTENBd2VHWmlMQ0F3ZURRekxDQXdlRFJrTENBd2VETXpMQ0F3ZURnMUxDQXdlRFExTENBd2VHWTVMQ0F3ZURBeUxDQXdlRGRtTENBd2VEVXdMQ0F3ZUROakxDQXdlRGxtTENBd2VHRTRMQ0F3ZURVeExDQXdlR0V6TENBd2VEUXdMQ0F3ZURobUxDQXdlRGt5TENBd2VEbGtMQ0F3ZURNNExDQXdlR1kxTENBd2VHSmpMQ0F3ZUdJMkxDQXdlR1JoTENBd2VESXhMQ0F3ZURFd0xDQXdlR1ptTENBd2VHWXpMQ0F3ZUdReUxDQXdlR05rTENBd2VEQmpMQ0F3ZURFekxDQXdlR1ZqTENBd2VEVm1MQ0F3ZURrM0xDQXdlRFEwTENBd2VERTNMQ0F3ZUdNMExDQXdlR0UzTENBd2VEZGxMQ0F3ZUROa0xDQXdlRFkwTENBd2VEVmtMQ0F3ZURFNUxDQXdlRGN6TENBd2VEWXdMQ0F3ZURneExDQXdlRFJtTENBd2VHUmpMQ0F3ZURJeUxDQXdlREpoTENBd2VEa3dMQ0F3ZURnNExDQXdlRFEyTENBd2VHVmxMQ0F3ZUdJNExDQXdlREUwTENBd2VHUmxMQ0F3ZURWbExDQXdlREJpTENBd2VHUmlMQ0F3ZUdVd0xDQXdlRE15TENBd2VETmhMQ0F3ZURCaExDQXdlRFE1TENBd2VEQTJMQ0F3ZURJMExDQXdlRFZqTENBd2VHTXlMQ0F3ZUdRekxDQXdlR0ZqTENBd2VEWXlMQ0F3ZURreExDQXdlRGsxTENBd2VHVTBMQ0F3ZURjNUxDQXdlR1UzTENBd2VHTTRMQ0F3ZURNM0xDQXdlRFprTENBd2VEaGtMQ0F3ZUdRMUxDQXdlRFJsTENBd2VHRTVMQ0F3ZURaakxDQXdlRFUyTENBd2VHWTBMQ0F3ZUdWaExDQXdlRFkxTENBd2VEZGhMQ0F3ZUdGbExDQXdlREE0TENBd2VHSmhMQ0F3ZURjNExDQXdlREkxTENBd2VESmxMQ0F3ZURGakxDQXdlR0UyTENBd2VHSTBMQ0F3ZUdNMkxDQXdlR1U0TENBd2VHUmtMQ0F3ZURjMExDQXdlREZtTENBd2VEUmlMQ0F3ZUdKa0xDQXdlRGhpTENBd2VEaGhMQ0F3ZURjd0xDQXdlRE5sTENBd2VHSTFMQ0F3ZURZMkxDQXdlRFE0TENBd2VEQXpMQ0F3ZUdZMkxDQXdlREJsTENBd2VEWXhMQ0F3ZURNMUxDQXdlRFUzTENBd2VHSTVMQ0F3ZURnMkxDQXdlR014TENBd2VERmtMQ0F3ZURsbExDQXdlR1V4TENBd2VHWTRMQ0F3ZURrNExDQXdlREV4TENBd2VEWTVMQ0F3ZUdRNUxDQXdlRGhsTENBd2VEazBMQ0F3ZURsaUxDQXdlREZsTENBd2VEZzNMQ0F3ZUdVNUxDQXdlR05sTENBd2VEVTFMQ0F3ZURJNExDQXdlR1JtTENBd2VEaGpMQ0F3ZUdFeExDQXdlRGc1TENBd2VEQmtMQ0F3ZUdKbUxDQXdlR1UyTENBd2VEUXlMQ0F3ZURZNExDQXdlRFF4TENBd2VEazVMQ0F3ZURKa0xDQXdlREJtTENBd2VHSXdMQ0F3ZURVMExDQXdlR0ppTENBd2VERTJYVHRjYmlBZ0lDQjJZWElnVTJrZ1BWc3dlRFV5TENBd2VEQTVMQ0F3ZURaaExDQXdlR1ExTENBd2VETXdMQ0F3ZURNMkxDQXdlR0UxTENBd2VETTRMQ0F3ZUdKbUxDQXdlRFF3TENBd2VHRXpMQ0F3ZURsbExDQXdlRGd4TENBd2VHWXpMQ0F3ZUdRM0xDQXdlR1ppTENBd2VEZGpMQ0F3ZUdVekxDQXdlRE01TENBd2VEZ3lMQ0F3ZURsaUxDQXdlREptTENBd2VHWm1MQ0F3ZURnM0xDQXdlRE0wTENBd2VEaGxMQ0F3ZURRekxDQXdlRFEwTENBd2VHTTBMQ0F3ZUdSbExDQXdlR1U1TENBd2VHTmlMQ0F3ZURVMExDQXdlRGRpTENBd2VEazBMQ0F3ZURNeUxDQXdlR0UyTENBd2VHTXlMQ0F3ZURJekxDQXdlRE5rTENBd2VHVmxMQ0F3ZURSakxDQXdlRGsxTENBd2VEQmlMQ0F3ZURReUxDQXdlR1poTENBd2VHTXpMQ0F3ZURSbExDQXdlREE0TENBd2VESmxMQ0F3ZUdFeExDQXdlRFkyTENBd2VESTRMQ0F3ZUdRNUxDQXdlREkwTENBd2VHSXlMQ0F3ZURjMkxDQXdlRFZpTENBd2VHRXlMQ0F3ZURRNUxDQXdlRFprTENBd2VEaGlMQ0F3ZUdReExDQXdlREkxTENBd2VEY3lMQ0F3ZUdZNExDQXdlR1kyTENBd2VEWTBMQ0F3ZURnMkxDQXdlRFk0TENBd2VEazRMQ0F3ZURFMkxDQXdlR1EwTENBd2VHRTBMQ0F3ZURWakxDQXdlR05qTENBd2VEVmtMQ0F3ZURZMUxDQXdlR0kyTENBd2VEa3lMQ0F3ZURaakxDQXdlRGN3TENBd2VEUTRMQ0F3ZURVd0xDQXdlR1prTENBd2VHVmtMQ0F3ZUdJNUxDQXdlR1JoTENBd2VEVmxMQ0F3ZURFMUxDQXdlRFEyTENBd2VEVTNMQ0F3ZUdFM0xDQXdlRGhrTENBd2VEbGtMQ0F3ZURnMExDQXdlRGt3TENBd2VHUTRMQ0F3ZUdGaUxDQXdlREF3TENBd2VEaGpMQ0F3ZUdKakxDQXdlR1F6TENBd2VEQmhMQ0F3ZUdZM0xDQXdlR1UwTENBd2VEVTRMQ0F3ZURBMUxDQXdlR0k0TENBd2VHSXpMQ0F3ZURRMUxDQXdlREEyTENBd2VHUXdMQ0F3ZURKakxDQXdlREZsTENBd2VEaG1MQ0F3ZUdOaExDQXdlRE5tTENBd2VEQm1MQ0F3ZURBeUxDQXdlR014TENBd2VHRm1MQ0F3ZUdKa0xDQXdlREF6TENBd2VEQXhMQ0F3ZURFekxDQXdlRGhoTENBd2VEWmlMQ0F3ZUROaExDQXdlRGt4TENBd2VERXhMQ0F3ZURReExDQXdlRFJtTENBd2VEWTNMQ0F3ZUdSakxDQXdlR1ZoTENBd2VEazNMQ0F3ZUdZeUxDQXdlR05tTENBd2VHTmxMQ0F3ZUdZd0xDQXdlR0kwTENBd2VHVTJMQ0F3ZURjekxDQXdlRGsyTENBd2VHRmpMQ0F3ZURjMExDQXdlREl5TENBd2VHVTNMQ0F3ZUdGa0xDQXdlRE0xTENBd2VEZzFMQ0F3ZUdVeUxDQXdlR1k1TENBd2VETTNMQ0F3ZUdVNExDQXdlREZqTENBd2VEYzFMQ0F3ZUdSbUxDQXdlRFpsTENBd2VEUTNMQ0F3ZUdZeExDQXdlREZoTENBd2VEY3hMQ0F3ZURGa0xDQXdlREk1TENBd2VHTTFMQ0F3ZURnNUxDQXdlRFptTENBd2VHSTNMQ0F3ZURZeUxDQXdlREJsTENBd2VHRmhMQ0F3ZURFNExDQXdlR0psTENBd2VERmlMQ0F3ZUdaakxDQXdlRFUyTENBd2VETmxMQ0F3ZURSaUxDQXdlR00yTENBd2VHUXlMQ0F3ZURjNUxDQXdlREl3TENBd2VEbGhMQ0F3ZUdSaUxDQXdlR013TENBd2VHWmxMQ0F3ZURjNExDQXdlR05rTENBd2VEVmhMQ0F3ZUdZMExDQXdlREZtTENBd2VHUmtMQ0F3ZUdFNExDQXdlRE16TENBd2VEZzRMQ0F3ZURBM0xDQXdlR00zTENBd2VETXhMQ0F3ZUdJeExDQXdlREV5TENBd2VERXdMQ0F3ZURVNUxDQXdlREkzTENBd2VEZ3dMQ0F3ZUdWakxDQXdlRFZtTENBd2VEWXdMQ0F3ZURVeExDQXdlRGRtTENBd2VHRTVMQ0F3ZURFNUxDQXdlR0kxTENBd2VEUmhMQ0F3ZURCa0xDQXdlREprTENBd2VHVTFMQ0F3ZURkaExDQXdlRGxtTENBd2VEa3pMQ0F3ZUdNNUxDQXdlRGxqTENBd2VHVm1MQ0F3ZUdFd0xDQXdlR1V3TENBd2VETmlMQ0F3ZURSa0xDQXdlR0ZsTENBd2VESmhMQ0F3ZUdZMUxDQXdlR0l3TENBd2VHTTRMQ0F3ZUdWaUxDQXdlR0ppTENBd2VETmpMQ0F3ZURnekxDQXdlRFV6TENBd2VEazVMQ0F3ZURZeExDQXdlREUzTENBd2VESmlMQ0F3ZURBMExDQXdlRGRsTENBd2VHSmhMQ0F3ZURjM0xDQXdlR1EyTENBd2VESTJMQ0F3ZUdVeExDQXdlRFk1TENBd2VERTBMQ0F3ZURZekxDQXdlRFUxTENBd2VESXhMQ0F3ZURCakxDQXdlRGRrWFR0Y2JseHVJQ0FnSUM4dklGUnlZVzV6Wm05eWJXRjBhVzl1Y3lCbWIzSWdaVzVqY25sd2RHbHZibHh1SUNBZ0lIWmhjaUJVTVNBOUlGc3dlR00yTmpNMk0yRTFMQ0F3ZUdZNE4yTTNZemcwTENBd2VHVmxOemMzTnprNUxDQXdlR1kyTjJJM1lqaGtMQ0F3ZUdabVpqSm1NakJrTENBd2VHUTJObUkyWW1Ka0xDQXdlR1JsTm1ZMlptSXhMQ0F3ZURreFl6VmpOVFUwTENBd2VEWXdNekF6TURVd0xDQXdlREF5TURFd01UQXpMQ0F3ZUdObE5qYzJOMkU1TENBd2VEVTJNbUl5WWpka0xDQXdlR1UzWm1WbVpURTVMQ0F3ZUdJMVpEZGtOell5TENBd2VEUmtZV0poWW1VMkxDQXdlR1ZqTnpZM05qbGhMQ0F3ZURobVkyRmpZVFExTENBd2VERm1PREk0TWpsa0xDQXdlRGc1WXpsak9UUXdMQ0F3ZUdaaE4yUTNaRGczTENBd2VHVm1abUZtWVRFMUxDQXdlR0l5TlRrMU9XVmlMQ0F3ZURobE5EYzBOMk01TENBd2VHWmlaakJtTURCaUxDQXdlRFF4WVdSaFpHVmpMQ0F3ZUdJelpEUmtORFkzTENBd2VEVm1ZVEpoTW1aa0xDQXdlRFExWVdaaFptVmhMQ0F3ZURJek9XTTVZMkptTENBd2VEVXpZVFJoTkdZM0xDQXdlR1UwTnpJM01qazJMQ0F3ZURsaVl6QmpNRFZpTENBd2VEYzFZamRpTjJNeUxDQXdlR1V4Wm1SbVpERmpMQ0F3ZUROa09UTTVNMkZsTENBd2VEUmpNall5TmpaaExDQXdlRFpqTXpZek5qVmhMQ0F3ZURkbE0yWXpaalF4TENBd2VHWTFaamRtTnpBeUxDQXdlRGd6WTJOall6Um1MQ0F3ZURZNE16UXpORFZqTENBd2VEVXhZVFZoTldZMExDQXdlR1F4WlRWbE5UTTBMQ0F3ZUdZNVpqRm1NVEE0TENBd2VHVXlOekUzTVRrekxDQXdlR0ZpWkRoa09EY3pMQ0F3ZURZeU16RXpNVFV6TENBd2VESmhNVFV4TlRObUxDQXdlREE0TURRd05EQmpMQ0F3ZURrMVl6ZGpOelV5TENBd2VEUTJNak15TXpZMUxDQXdlRGxrWXpOak16VmxMQ0F3ZURNd01UZ3hPREk0TENBd2VETTNPVFk1Tm1FeExDQXdlREJoTURVd05UQm1MQ0F3ZURKbU9XRTVZV0kxTENBd2VEQmxNRGN3TnpBNUxDQXdlREkwTVRJeE1qTTJMQ0F3ZURGaU9EQTRNRGxpTENBd2VHUm1aVEpsTWpOa0xDQXdlR05rWldKbFlqSTJMQ0F3ZURSbE1qY3lOelk1TENBd2VEZG1ZakppTW1Oa0xDQXdlR1ZoTnpVM05UbG1MQ0F3ZURFeU1Ea3dPVEZpTENBd2VERmtPRE00TXpsbExDQXdlRFU0TW1NeVl6YzBMQ0F3ZURNME1XRXhZVEpsTENBd2VETTJNV0l4WWpKa0xDQXdlR1JqTm1VMlpXSXlMQ0F3ZUdJME5XRTFZV1ZsTENBd2VEVmlZVEJoTUdaaUxDQXdlR0UwTlRJMU1tWTJMQ0F3ZURjMk0ySXpZalJrTENBd2VHSTNaRFprTmpZeExDQXdlRGRrWWpOaU0yTmxMQ0F3ZURVeU1qa3lPVGRpTENBd2VHUmtaVE5sTXpObExDQXdlRFZsTW1ZeVpqY3hMQ0F3ZURFek9EUTRORGszTENBd2VHRTJOVE0xTTJZMUxDQXdlR0k1WkRGa01UWTRMQ0F3ZURBd01EQXdNREF3TENBd2VHTXhaV1JsWkRKakxDQXdlRFF3TWpBeU1EWXdMQ0F3ZUdVelptTm1ZekZtTENBd2VEYzVZakZpTVdNNExDQXdlR0kyTldJMVltVmtMQ0F3ZUdRME5tRTJZV0psTENBd2VEaGtZMkpqWWpRMkxDQXdlRFkzWW1WaVpXUTVMQ0F3ZURjeU16a3pPVFJpTENBd2VEazBOR0UwWVdSbExDQXdlRGs0TkdNMFkyUTBMQ0F3ZUdJd05UZzFPR1U0TENBd2VEZzFZMlpqWmpSaExDQXdlR0ppWkRCa01EWmlMQ0F3ZUdNMVpXWmxaakpoTENBd2VEUm1ZV0ZoWVdVMUxDQXdlR1ZrWm1KbVlqRTJMQ0F3ZURnMk5ETTBNMk0xTENBd2VEbGhOR1EwWkdRM0xDQXdlRFkyTXpNek16VTFMQ0F3ZURFeE9EVTROVGswTENBd2VEaGhORFUwTldObUxDQXdlR1U1WmpsbU9URXdMQ0F3ZURBME1ESXdNakEyTENBd2VHWmxOMlkzWmpneExDQXdlR0V3TlRBMU1HWXdMQ0F3ZURjNE0yTXpZelEwTENBd2VESTFPV1k1Wm1KaExDQXdlRFJpWVRoaE9HVXpMQ0F3ZUdFeU5URTFNV1l6TENBd2VEVmtZVE5oTTJabExDQXdlRGd3TkRBME1HTXdMQ0F3ZURBMU9HWTRaamhoTENBd2VETm1PVEk1TW1Ga0xDQXdlREl4T1dRNVpHSmpMQ0F3ZURjd016Z3pPRFE0TENBd2VHWXhaalZtTlRBMExDQXdlRFl6WW1OaVkyUm1MQ0F3ZURjM1lqWmlObU14TENBd2VHRm1aR0ZrWVRjMUxDQXdlRFF5TWpFeU1UWXpMQ0F3ZURJd01UQXhNRE13TENBd2VHVTFabVptWmpGaExDQXdlR1prWmpObU16QmxMQ0F3ZUdKbVpESmtNalprTENBd2VEZ3hZMlJqWkRSakxDQXdlREU0TUdNd1l6RTBMQ0F3ZURJMk1UTXhNek0xTENBd2VHTXpaV05sWXpKbUxDQXdlR0psTldZMVptVXhMQ0F3ZURNMU9UYzVOMkV5TENBd2VEZzRORFEwTkdOakxDQXdlREpsTVRjeE56TTVMQ0F3ZURrell6UmpORFUzTENBd2VEVTFZVGRoTjJZeUxDQXdlR1pqTjJVM1pUZ3lMQ0F3ZURkaE0yUXpaRFEzTENBd2VHTTROalEyTkdGakxDQXdlR0poTldRMVpHVTNMQ0F3ZURNeU1Ua3hPVEppTENBd2VHVTJOek0zTXprMUxDQXdlR013TmpBMk1HRXdMQ0F3ZURFNU9ERTRNVGs0TENBd2VEbGxOR1kwWm1ReExDQXdlR0V6WkdOa1l6ZG1MQ0F3ZURRME1qSXlNalkyTENBd2VEVTBNbUV5WVRkbExDQXdlRE5pT1RBNU1HRmlMQ0F3ZURCaU9EZzRPRGd6TENBd2VEaGpORFkwTm1OaExDQXdlR00zWldWbFpUSTVMQ0F3ZURaaVlqaGlPR1F6TENBd2VESTRNVFF4TkROakxDQXdlR0UzWkdWa1pUYzVMQ0F3ZUdKak5XVTFaV1V5TENBd2VERTJNR0l3WWpGa0xDQXdlR0ZrWkdKa1lqYzJMQ0F3ZUdSaVpUQmxNRE5pTENBd2VEWTBNekl6TWpVMkxDQXdlRGMwTTJFellUUmxMQ0F3ZURFME1HRXdZVEZsTENBd2VEa3lORGswT1dSaUxDQXdlREJqTURZd05qQmhMQ0F3ZURRNE1qUXlORFpqTENBd2VHSTROV00xWTJVMExDQXdlRGxtWXpKak1qVmtMQ0F3ZUdKa1pETmtNelpsTENBd2VEUXpZV05oWTJWbUxDQXdlR00wTmpJMk1tRTJMQ0F3ZURNNU9URTVNV0U0TENBd2VETXhPVFU1TldFMExDQXdlR1F6WlRSbE5ETTNMQ0F3ZUdZeU56azNPVGhpTENBd2VHUTFaVGRsTnpNeUxDQXdlRGhpWXpoak9EUXpMQ0F3ZURabE16Y3pOelU1TENBd2VHUmhObVEyWkdJM0xDQXdlREF4T0dRNFpEaGpMQ0F3ZUdJeFpEVmtOVFkwTENBd2VEbGpOR1UwWldReUxDQXdlRFE1WVRsaE9XVXdMQ0F3ZUdRNE5tTTJZMkkwTENBd2VHRmpOVFkxTm1aaExDQXdlR1l6WmpSbU5EQTNMQ0F3ZUdObVpXRmxZVEkxTENBd2VHTmhOalUyTldGbUxDQXdlR1kwTjJFM1lUaGxMQ0F3ZURRM1lXVmhaV1U1TENBd2VERXdNRGd3T0RFNExDQXdlRFptWW1GaVlXUTFMQ0F3ZUdZd056ZzNPRGc0TENBd2VEUmhNalV5TlRabUxDQXdlRFZqTW1VeVpUY3lMQ0F3ZURNNE1XTXhZekkwTENBd2VEVTNZVFpoTm1ZeExDQXdlRGN6WWpSaU5HTTNMQ0F3ZURrM1l6WmpOalV4TENBd2VHTmlaVGhsT0RJekxDQXdlR0V4WkdSa1pEZGpMQ0F3ZUdVNE56UTNORGxqTENBd2VETmxNV1l4WmpJeExDQXdlRGsyTkdJMFltUmtMQ0F3ZURZeFltUmlaR1JqTENBd2VEQmtPR0k0WWpnMkxDQXdlREJtT0dFNFlUZzFMQ0F3ZUdVd056QTNNRGt3TENBd2VEZGpNMlV6WlRReUxDQXdlRGN4WWpWaU5XTTBMQ0F3ZUdOak5qWTJObUZoTENBd2VEa3dORGcwT0dRNExDQXdlREEyTURNd016QTFMQ0F3ZUdZM1pqWm1OakF4TENBd2VERmpNR1V3WlRFeUxDQXdlR015TmpFMk1XRXpMQ0F3ZURaaE16VXpOVFZtTENBd2VHRmxOVGMxTjJZNUxDQXdlRFk1WWpsaU9XUXdMQ0F3ZURFM09EWTROamt4TENBd2VEazVZekZqTVRVNExDQXdlRE5oTVdReFpESTNMQ0F3ZURJM09XVTVaV0k1TENBd2VHUTVaVEZsTVRNNExDQXdlR1ZpWmpobU9ERXpMQ0F3ZURKaU9UZzVPR0l6TENBd2VESXlNVEV4TVRNekxDQXdlR1F5TmprMk9XSmlMQ0F3ZUdFNVpEbGtPVGN3TENBd2VEQTNPR1U0WlRnNUxDQXdlRE16T1RRNU5HRTNMQ0F3ZURKa09XSTVZbUkyTENBd2VETmpNV1V4WlRJeUxDQXdlREUxT0RjNE56a3lMQ0F3ZUdNNVpUbGxPVEl3TENBd2VEZzNZMlZqWlRRNUxDQXdlR0ZoTlRVMU5XWm1MQ0F3ZURVd01qZ3lPRGM0TENBd2VHRTFaR1prWmpkaExDQXdlREF6T0dNNFl6aG1MQ0F3ZURVNVlURmhNV1k0TENBd2VEQTVPRGs0T1Rnd0xDQXdlREZoTUdRd1pERTNMQ0F3ZURZMVltWmlabVJoTENBd2VHUTNaVFpsTmpNeExDQXdlRGcwTkRJME1tTTJMQ0F3ZUdRd05qZzJPR0k0TENBd2VEZ3lOREUwTVdNekxDQXdlREk1T1RrNU9XSXdMQ0F3ZURWaE1tUXlaRGMzTENBd2VERmxNR1l3WmpFeExDQXdlRGRpWWpCaU1HTmlMQ0F3ZUdFNE5UUTFOR1pqTENBd2VEWmtZbUppWW1RMkxDQXdlREpqTVRZeE5qTmhYVHRjYmlBZ0lDQjJZWElnVkRJZ1BTQmJNSGhoTldNMk5qTTJNeXdnTUhnNE5HWTROMk0zWXl3Z01IZzVPV1ZsTnpjM055d2dNSGc0WkdZMk4ySTNZaXdnTUhnd1pHWm1aakptTWl3Z01IaGlaR1EyTm1JMllpd2dNSGhpTVdSbE5tWTJaaXdnTUhnMU5Ea3hZelZqTlN3Z01IZzFNRFl3TXpBek1Dd2dNSGd3TXpBeU1ERXdNU3dnTUhoaE9XTmxOamMyTnl3Z01IZzNaRFUyTW1JeVlpd2dNSGd4T1dVM1ptVm1aU3dnTUhnMk1tSTFaRGRrTnl3Z01IaGxOalJrWVdKaFlpd2dNSGc1WVdWak56WTNOaXdnTUhnME5UaG1ZMkZqWVN3Z01IZzVaREZtT0RJNE1pd2dNSGcwTURnNVl6bGpPU3dnTUhnNE4yWmhOMlEzWkN3Z01IZ3hOV1ZtWm1GbVlTd2dNSGhsWW1JeU5UazFPU3dnTUhoak9UaGxORGMwTnl3Z01IZ3dZbVppWmpCbU1Dd2dNSGhsWXpReFlXUmhaQ3dnTUhnMk4ySXpaRFJrTkN3Z01IaG1aRFZtWVRKaE1pd2dNSGhsWVRRMVlXWmhaaXdnTUhoaVpqSXpPV001WXl3Z01IaG1OelV6WVRSaE5Dd2dNSGc1Tm1VME56STNNaXdnTUhnMVlqbGlZekJqTUN3Z01IaGpNamMxWWpkaU55d2dNSGd4WTJVeFptUm1aQ3dnTUhoaFpUTmtPVE01TXl3Z01IZzJZVFJqTWpZeU5pd2dNSGcxWVRaak16WXpOaXdnTUhnME1UZGxNMll6Wml3Z01IZ3dNbVkxWmpkbU55d2dNSGcwWmpnelkyTmpZeXdnTUhnMVl6WTRNelF6TkN3Z01IaG1ORFV4WVRWaE5Td2dNSGd6TkdReFpUVmxOU3dnTUhnd09HWTVaakZtTVN3Z01IZzVNMlV5TnpFM01Td2dNSGczTTJGaVpEaGtPQ3dnTUhnMU16WXlNekV6TVN3Z01IZ3paakpoTVRVeE5Td2dNSGd3WXpBNE1EUXdOQ3dnTUhnMU1qazFZemRqTnl3Z01IZzJOVFEyTWpNeU15d2dNSGcxWlRsa1l6TmpNeXdnTUhneU9ETXdNVGd4T0N3Z01IaGhNVE0zT1RZNU5pd2dNSGd3WmpCaE1EVXdOU3dnTUhoaU5USm1PV0U1WVN3Z01IZ3dPVEJsTURjd055d2dNSGd6TmpJME1USXhNaXdnTUhnNVlqRmlPREE0TUN3Z01IZ3paR1JtWlRKbE1pd2dNSGd5Tm1Oa1pXSmxZaXdnTUhnMk9UUmxNamN5Tnl3Z01IaGpaRGRtWWpKaU1pd2dNSGc1Wm1WaE56VTNOU3dnTUhneFlqRXlNRGt3T1N3Z01IZzVaVEZrT0RNNE15d2dNSGczTkRVNE1tTXlZeXdnTUhneVpUTTBNV0V4WVN3Z01IZ3laRE0yTVdJeFlpd2dNSGhpTW1Sak5tVTJaU3dnTUhobFpXSTBOV0UxWVN3Z01IaG1ZalZpWVRCaE1Dd2dNSGhtTm1FME5USTFNaXdnTUhnMFpEYzJNMkl6WWl3Z01IZzJNV0kzWkRaa05pd2dNSGhqWlRka1lqTmlNeXdnTUhnM1lqVXlNamt5T1N3Z01IZ3paV1JrWlRObE15d2dNSGczTVRWbE1tWXlaaXdnTUhnNU56RXpPRFE0TkN3Z01IaG1OV0UyTlRNMU15d2dNSGcyT0dJNVpERmtNU3dnTUhnd01EQXdNREF3TUN3Z01IZ3lZMk14WldSbFpDd2dNSGcyTURRd01qQXlNQ3dnTUhneFptVXpabU5tWXl3Z01IaGpPRGM1WWpGaU1Td2dNSGhsWkdJMk5XSTFZaXdnTUhoaVpXUTBObUUyWVN3Z01IZzBOamhrWTJKallpd2dNSGhrT1RZM1ltVmlaU3dnTUhnMFlqY3lNemt6T1N3Z01IaGtaVGswTkdFMFlTd2dNSGhrTkRrNE5HTTBZeXdnTUhobE9HSXdOVGcxT0N3Z01IZzBZVGcxWTJaalppd2dNSGcyWW1KaVpEQmtNQ3dnTUhneVlXTTFaV1psWml3Z01IaGxOVFJtWVdGaFlTd2dNSGd4Tm1Wa1ptSm1ZaXdnTUhoak5UZzJORE0wTXl3Z01IaGtOemxoTkdRMFpDd2dNSGcxTlRZMk16TXpNeXdnTUhnNU5ERXhPRFU0TlN3Z01IaGpaamhoTkRVME5Td2dNSGd4TUdVNVpqbG1PU3dnTUhnd05qQTBNREl3TWl3Z01IZzRNV1psTjJZM1ppd2dNSGhtTUdFd05UQTFNQ3dnTUhnME5EYzRNMk16WXl3Z01IaGlZVEkxT1dZNVppd2dNSGhsTXpSaVlUaGhPQ3dnTUhobU0yRXlOVEUxTVN3Z01IaG1aVFZrWVROaE15d2dNSGhqTURnd05EQTBNQ3dnTUhnNFlUQTFPR1k0Wml3Z01IaGhaRE5tT1RJNU1pd2dNSGhpWXpJeE9XUTVaQ3dnTUhnME9EY3dNemd6T0N3Z01IZ3dOR1l4WmpWbU5Td2dNSGhrWmpZelltTmlZeXdnTUhoak1UYzNZalppTml3Z01IZzNOV0ZtWkdGa1lTd2dNSGcyTXpReU1qRXlNU3dnTUhnek1ESXdNVEF4TUN3Z01IZ3hZV1UxWm1abVppd2dNSGd3Wldaa1pqTm1NeXdnTUhnMlpHSm1aREprTWl3Z01IZzBZemd4WTJSalpDd2dNSGd4TkRFNE1HTXdZeXdnTUhnek5USTJNVE14TXl3Z01IZ3labU16WldObFl5d2dNSGhsTVdKbE5XWTFaaXdnTUhoaE1qTTFPVGM1Tnl3Z01IaGpZemc0TkRRME5Dd2dNSGd6T1RKbE1UY3hOeXdnTUhnMU56a3pZelJqTkN3Z01IaG1NalUxWVRkaE55d2dNSGc0TW1aak4yVTNaU3dnTUhnME56ZGhNMlF6WkN3Z01IaGhZMk00TmpRMk5Dd2dNSGhsTjJKaE5XUTFaQ3dnTUhneVlqTXlNVGt4T1N3Z01IZzVOV1UyTnpNM015d2dNSGhoTUdNd05qQTJNQ3dnTUhnNU9ERTVPREU0TVN3Z01IaGtNVGxsTkdZMFppd2dNSGczWm1FelpHTmtZeXdnTUhnMk5qUTBNakl5TWl3Z01IZzNaVFUwTW1FeVlTd2dNSGhoWWpOaU9UQTVNQ3dnTUhnNE16QmlPRGc0T0N3Z01IaGpZVGhqTkRZME5pd2dNSGd5T1dNM1pXVmxaU3dnTUhoa016WmlZamhpT0N3Z01IZ3pZekk0TVRReE5Dd2dNSGczT1dFM1pHVmtaU3dnTUhobE1tSmpOV1UxWlN3Z01IZ3haREUyTUdJd1lpd2dNSGczTm1Ga1pHSmtZaXdnTUhnelltUmlaVEJsTUN3Z01IZzFOalkwTXpJek1pd2dNSGcwWlRjME0yRXpZU3dnTUhneFpURTBNR0V3WVN3Z01IaGtZamt5TkRrME9Td2dNSGd3WVRCak1EWXdOaXdnTUhnMll6UTRNalF5TkN3Z01IaGxOR0k0TldNMVl5d2dNSGcxWkRsbVl6SmpNaXdnTUhnMlpXSmtaRE5rTXl3Z01IaGxaalF6WVdOaFl5d2dNSGhoTm1NME5qSTJNaXdnTUhoaE9ETTVPVEU1TVN3Z01IaGhORE14T1RVNU5Td2dNSGd6TjJRelpUUmxOQ3dnTUhnNFltWXlOemszT1N3Z01IZ3pNbVExWlRkbE55d2dNSGcwTXpoaVl6aGpPQ3dnTUhnMU9UWmxNemN6Tnl3Z01IaGlOMlJoTm1RMlpDd2dNSGc0WXpBeE9HUTRaQ3dnTUhnMk5HSXhaRFZrTlN3Z01IaGtNamxqTkdVMFpTd2dNSGhsTURRNVlUbGhPU3dnTUhoaU5HUTRObU0yWXl3Z01IaG1ZV0ZqTlRZMU5pd2dNSGd3TjJZelpqUm1OQ3dnTUhneU5XTm1aV0ZsWVN3Z01IaGhabU5oTmpVMk5Td2dNSGc0WldZME4yRTNZU3dnTUhobE9UUTNZV1ZoWlN3Z01IZ3hPREV3TURnd09Dd2dNSGhrTlRabVltRmlZU3dnTUhnNE9HWXdOemczT0N3Z01IZzJaalJoTWpVeU5Td2dNSGczTWpWak1tVXlaU3dnTUhneU5ETTRNV014WXl3Z01IaG1NVFUzWVRaaE5pd2dNSGhqTnpjellqUmlOQ3dnTUhnMU1UazNZelpqTml3Z01IZ3lNMk5pWlRobE9Dd2dNSGczWTJFeFpHUmtaQ3dnTUhnNVkyVTROelEzTkN3Z01IZ3lNVE5sTVdZeFppd2dNSGhrWkRrMk5HSTBZaXdnTUhoa1l6WXhZbVJpWkN3Z01IZzROakJrT0dJNFlpd2dNSGc0TlRCbU9HRTRZU3dnTUhnNU1HVXdOekEzTUN3Z01IZzBNamRqTTJVelpTd2dNSGhqTkRjeFlqVmlOU3dnTUhoaFlXTmpOalkyTml3Z01IaGtPRGt3TkRnME9Dd2dNSGd3TlRBMk1ETXdNeXdnTUhnd01XWTNaalptTml3Z01IZ3hNakZqTUdVd1pTd2dNSGhoTTJNeU5qRTJNU3dnTUhnMVpqWmhNelV6TlN3Z01IaG1PV0ZsTlRjMU55d2dNSGhrTURZNVlqbGlPU3dnTUhnNU1URTNPRFk0Tml3Z01IZzFPRGs1WXpGak1Td2dNSGd5TnpOaE1XUXhaQ3dnTUhoaU9USTNPV1U1WlN3Z01IZ3pPR1E1WlRGbE1Td2dNSGd4TTJWaVpqaG1PQ3dnTUhoaU16SmlPVGc1T0N3Z01IZ3pNekl5TVRFeE1Td2dNSGhpWW1ReU5qazJPU3dnTUhnM01HRTVaRGxrT1N3Z01IZzRPVEEzT0dVNFpTd2dNSGhoTnpNek9UUTVOQ3dnTUhoaU5qSmtPV0k1WWl3Z01IZ3lNak5qTVdVeFpTd2dNSGc1TWpFMU9EYzROeXdnTUhneU1HTTVaVGxsT1N3Z01IZzBPVGczWTJWalpTd2dNSGhtWm1GaE5UVTFOU3dnTUhnM09EVXdNamd5T0N3Z01IZzNZV0UxWkdaa1ppd2dNSGc0WmpBek9HTTRZeXdnTUhobU9EVTVZVEZoTVN3Z01IZzRNREE1T0RrNE9Td2dNSGd4TnpGaE1HUXdaQ3dnTUhoa1lUWTFZbVppWml3Z01IZ3pNV1EzWlRabE5pd2dNSGhqTmpnME5ESTBNaXdnTUhoaU9HUXdOamcyT0N3Z01IaGpNemd5TkRFME1Td2dNSGhpTURJNU9UazVPU3dnTUhnM056VmhNbVF5WkN3Z01IZ3hNVEZsTUdZd1ppd2dNSGhqWWpkaVlqQmlNQ3dnTUhobVkyRTROVFExTkN3Z01IaGtOalprWW1KaVlpd2dNSGd6WVRKak1UWXhObDA3WEc0Z0lDQWdkbUZ5SUZReklEMGdXekI0TmpOaE5XTTJOak1zSURCNE4yTTROR1k0TjJNc0lEQjROemM1T1dWbE56Y3NJREI0TjJJNFpHWTJOMklzSURCNFpqSXdaR1ptWmpJc0lEQjRObUppWkdRMk5tSXNJREI0Tm1aaU1XUmxObVlzSURCNFl6VTFORGt4WXpVc0lEQjRNekExTURZd016QXNJREI0TURFd016QXlNREVzSURCNE5qZGhPV05sTmpjc0lEQjRNbUkzWkRVMk1tSXNJREI0Wm1VeE9XVTNabVVzSURCNFpEYzJNbUkxWkRjc0lEQjRZV0psTmpSa1lXSXNJREI0TnpZNVlXVmpOellzSURCNFkyRTBOVGhtWTJFc0lEQjRPREk1WkRGbU9ESXNJREI0WXprME1EZzVZemtzSURCNE4yUTROMlpoTjJRc0lEQjRabUV4TldWbVptRXNJREI0TlRsbFltSXlOVGtzSURCNE5EZGpPVGhsTkRjc0lEQjRaakF3WW1aaVpqQXNJREI0WVdSbFl6UXhZV1FzSURCNFpEUTJOMkl6WkRRc0lEQjRZVEptWkRWbVlUSXNJREI0WVdabFlUUTFZV1lzSURCNE9XTmlaakl6T1dNc0lEQjRZVFJtTnpVellUUXNJREI0TnpJNU5tVTBOeklzSURCNFl6QTFZamxpWXpBc0lEQjRZamRqTWpjMVlqY3NJREI0Wm1ReFkyVXhabVFzSURCNE9UTmhaVE5rT1RNc0lEQjRNalkyWVRSak1qWXNJREI0TXpZMVlUWmpNellzSURCNE0yWTBNVGRsTTJZc0lEQjRaamN3TW1ZMVpqY3NJREI0WTJNMFpqZ3pZMk1zSURCNE16UTFZelk0TXpRc0lEQjRZVFZtTkRVeFlUVXNJREI0WlRVek5HUXhaVFVzSURCNFpqRXdPR1k1WmpFc0lEQjROekU1TTJVeU56RXNJREI0WkRnM00yRmlaRGdzSURCNE16RTFNell5TXpFc0lEQjRNVFV6WmpKaE1UVXNJREI0TURRd1l6QTRNRFFzSURCNFl6YzFNamsxWXpjc0lEQjRNak0yTlRRMk1qTXNJREI0WXpNMVpUbGtZek1zSURCNE1UZ3lPRE13TVRnc0lEQjRPVFpoTVRNM09UWXNJREI0TURVd1pqQmhNRFVzSURCNE9XRmlOVEptT1dFc0lEQjRNRGN3T1RCbE1EY3NJREI0TVRJek5qSTBNVElzSURCNE9EQTVZakZpT0RBc0lEQjRaVEl6WkdSbVpUSXNJREI0WldJeU5tTmtaV0lzSURCNE1qYzJPVFJsTWpjc0lEQjRZakpqWkRkbVlqSXNJREI0TnpVNVptVmhOelVzSURCNE1Ea3hZakV5TURrc0lEQjRPRE01WlRGa09ETXNJREI0TW1NM05EVTRNbU1zSURCNE1XRXlaVE0wTVdFc0lEQjRNV0l5WkRNMk1XSXNJREI0Tm1WaU1tUmpObVVzSURCNE5XRmxaV0kwTldFc0lEQjRZVEJtWWpWaVlUQXNJREI0TlRKbU5tRTBOVElzSURCNE0ySTBaRGMyTTJJc0lEQjRaRFkyTVdJM1pEWXNJREI0WWpOalpUZGtZak1zSURCNE1qazNZalV5TWprc0lEQjRaVE16WldSa1pUTXNJREI0TW1ZM01UVmxNbVlzSURCNE9EUTVOekV6T0RRc0lEQjROVE5tTldFMk5UTXNJREI0WkRFMk9HSTVaREVzSURCNE1EQXdNREF3TURBc0lEQjRaV1F5WTJNeFpXUXNJREI0TWpBMk1EUXdNakFzSURCNFptTXhabVV6Wm1Nc0lEQjRZakZqT0RjNVlqRXNJREI0TldKbFpHSTJOV0lzSURCNE5tRmlaV1EwTm1Fc0lEQjRZMkkwTmpoa1kySXNJREI0WW1Wa09UWTNZbVVzSURCNE16azBZamN5TXprc0lEQjROR0ZrWlRrME5HRXNJREI0TkdOa05EazROR01zSURCNE5UaGxPR0l3TlRnc0lEQjRZMlkwWVRnMVkyWXNJREI0WkRBMlltSmlaREFzSURCNFpXWXlZV00xWldZc0lEQjRZV0ZsTlRSbVlXRXNJREI0Wm1JeE5tVmtabUlzSURCNE5ETmpOVGcyTkRNc0lEQjROR1JrTnpsaE5HUXNJREI0TXpNMU5UWTJNek1zSURCNE9EVTVOREV4T0RVc0lEQjRORFZqWmpoaE5EVXNJREI0WmpreE1HVTVaamtzSURCNE1ESXdOakEwTURJc0lEQjROMlk0TVdabE4yWXNJREI0TlRCbU1HRXdOVEFzSURCNE0yTTBORGM0TTJNc0lEQjRPV1ppWVRJMU9XWXNJREI0WVRobE16UmlZVGdzSURCNE5URm1NMkV5TlRFc0lEQjRZVE5tWlRWa1lUTXNJREI0TkRCak1EZ3dOREFzSURCNE9HWTRZVEExT0dZc0lEQjRPVEpoWkRObU9USXNJREI0T1dSaVl6SXhPV1FzSURCNE16ZzBPRGN3TXpnc0lEQjRaalV3TkdZeFpqVXNJREI0WW1Oa1pqWXpZbU1zSURCNFlqWmpNVGMzWWpZc0lEQjRaR0UzTldGbVpHRXNJREI0TWpFMk16UXlNakVzSURCNE1UQXpNREl3TVRBc0lEQjRabVl4WVdVMVptWXNJREI0WmpNd1pXWmtaak1zSURCNFpESTJaR0ptWkRJc0lEQjRZMlEwWXpneFkyUXNJREI0TUdNeE5ERTRNR01zSURCNE1UTXpOVEkyTVRNc0lEQjRaV015Wm1NelpXTXNJREI0TldabE1XSmxOV1lzSURCNE9UZGhNak0xT1Rjc0lEQjRORFJqWXpnNE5EUXNJREI0TVRjek9USmxNVGNzSURCNFl6UTFOemt6WXpRc0lEQjRZVGRtTWpVMVlUY3NJREI0TjJVNE1tWmpOMlVzSURCNE0yUTBOemRoTTJRc0lEQjROalJoWTJNNE5qUXNJREI0TldSbE4ySmhOV1FzSURCNE1Ua3lZak15TVRrc0lEQjROek01TldVMk56TXNJREI0TmpCaE1HTXdOakFzSURCNE9ERTVPREU1T0RFc0lEQjROR1prTVRsbE5HWXNJREI0WkdNM1ptRXpaR01zSURCNE1qSTJOalEwTWpJc0lEQjRNbUUzWlRVME1tRXNJREI0T1RCaFlqTmlPVEFzSURCNE9EZzRNekJpT0Rnc0lEQjRORFpqWVRoak5EWXNJREI0WldVeU9XTTNaV1VzSURCNFlqaGtNelppWWpnc0lEQjRNVFF6WXpJNE1UUXNJREI0WkdVM09XRTNaR1VzSURCNE5XVmxNbUpqTldVc0lEQjRNR0l4WkRFMk1HSXNJREI0WkdJM05tRmtaR0lzSURCNFpUQXpZbVJpWlRBc0lEQjRNekkxTmpZME16SXNJREI0TTJFMFpUYzBNMkVzSURCNE1HRXhaVEUwTUdFc0lEQjRORGxrWWpreU5Ea3NJREI0TURZd1lUQmpNRFlzSURCNE1qUTJZelE0TWpRc0lEQjROV05sTkdJNE5XTXNJREI0WXpJMVpEbG1ZeklzSURCNFpETTJaV0prWkRNc0lEQjRZV05sWmpRellXTXNJREI0TmpKaE5tTTBOaklzSURCNE9URmhPRE01T1RFc0lEQjRPVFZoTkRNeE9UVXNJREI0WlRRek4yUXpaVFFzSURCNE56azRZbVl5Tnprc0lEQjRaVGN6TW1RMVpUY3NJREI0WXpnME16aGlZemdzSURCNE16YzFPVFpsTXpjc0lEQjRObVJpTjJSaE5tUXNJREI0T0dRNFl6QXhPR1FzSURCNFpEVTJOR0l4WkRVc0lEQjROR1ZrTWpsak5HVXNJREI0WVRsbE1EUTVZVGtzSURCNE5tTmlOR1E0Tm1Nc0lEQjROVFptWVdGak5UWXNJREI0WmpRd04yWXpaalFzSURCNFpXRXlOV05tWldFc0lEQjROalZoWm1OaE5qVXNJREI0TjJFNFpXWTBOMkVzSURCNFlXVmxPVFEzWVdVc0lEQjRNRGd4T0RFd01EZ3NJREI0WW1Ga05UWm1ZbUVzSURCNE56ZzRPR1l3Tnpnc0lEQjRNalUyWmpSaE1qVXNJREI0TW1VM01qVmpNbVVzSURCNE1XTXlORE00TVdNc0lEQjRZVFptTVRVM1lUWXNJREI0WWpSak56Y3pZalFzSURCNFl6WTFNVGszWXpZc0lEQjRaVGd5TTJOaVpUZ3NJREI0WkdRM1kyRXhaR1FzSURCNE56UTVZMlU0TnpRc0lEQjRNV1l5TVRObE1XWXNJREI0TkdKa1pEazJOR0lzSURCNFltUmtZell4WW1Rc0lEQjRPR0k0TmpCa09HSXNJREI0T0dFNE5UQm1PR0VzSURCNE56QTVNR1V3TnpBc0lEQjRNMlUwTWpkak0yVXNJREI0WWpWak5EY3hZalVzSURCNE5qWmhZV05qTmpZc0lEQjRORGhrT0Rrd05EZ3NJREI0TURNd05UQTJNRE1zSURCNFpqWXdNV1kzWmpZc0lEQjRNR1V4TWpGak1HVXNJREI0TmpGaE0yTXlOakVzSURCNE16VTFaalpoTXpVc0lEQjROVGRtT1dGbE5UY3NJREI0WWpsa01EWTVZamtzSURCNE9EWTVNVEUzT0RZc0lEQjRZekUxT0RrNVl6RXNJREI0TVdReU56TmhNV1FzSURCNE9XVmlPVEkzT1dVc0lEQjRaVEV6T0dRNVpURXNJREI0WmpneE0yVmlaamdzSURCNE9UaGlNekppT1Rnc0lEQjRNVEV6TXpJeU1URXNJREI0TmpsaVltUXlOamtzSURCNFpEazNNR0U1WkRrc0lEQjRPR1U0T1RBM09HVXNJREI0T1RSaE56TXpPVFFzSURCNE9XSmlOakprT1dJc0lEQjRNV1V5TWpOak1XVXNJREI0T0RjNU1qRTFPRGNzSURCNFpUa3lNR001WlRrc0lEQjRZMlUwT1RnM1kyVXNJREI0TlRWbVptRmhOVFVzSURCNE1qZzNPRFV3TWpnc0lEQjRaR1kzWVdFMVpHWXNJREI0T0dNNFpqQXpPR01zSURCNFlURm1PRFU1WVRFc0lEQjRPRGs0TURBNU9Ea3NJREI0TUdReE56RmhNR1FzSURCNFltWmtZVFkxWW1Zc0lEQjRaVFl6TVdRM1pUWXNJREI0TkRKak5qZzBORElzSURCNE5qaGlPR1F3Tmpnc0lEQjROREZqTXpneU5ERXNJREI0T1RsaU1ESTVPVGtzSURCNE1tUTNOelZoTW1Rc0lEQjRNR1l4TVRGbE1HWXNJREI0WWpCallqZGlZakFzSURCNE5UUm1ZMkU0TlRRc0lEQjRZbUprTmpaa1ltSXNJREI0TVRZellUSmpNVFpkTzF4dUlDQWdJSFpoY2lCVU5DQTlJRnN3ZURZek5qTmhOV00yTENBd2VEZGpOMk00TkdZNExDQXdlRGMzTnpjNU9XVmxMQ0F3ZURkaU4ySTRaR1kyTENBd2VHWXlaakl3WkdabUxDQXdlRFppTm1KaVpHUTJMQ0F3ZURabU5tWmlNV1JsTENBd2VHTTFZelUxTkRreExDQXdlRE13TXpBMU1EWXdMQ0F3ZURBeE1ERXdNekF5TENBd2VEWTNOamRoT1dObExDQXdlREppTW1JM1pEVTJMQ0F3ZUdabFptVXhPV1UzTENBd2VHUTNaRGMyTW1JMUxDQXdlR0ZpWVdKbE5qUmtMQ0F3ZURjMk56WTVZV1ZqTENBd2VHTmhZMkUwTlRobUxDQXdlRGd5T0RJNVpERm1MQ0F3ZUdNNVl6azBNRGc1TENBd2VEZGtOMlE0TjJaaExDQXdlR1poWm1FeE5XVm1MQ0F3ZURVNU5UbGxZbUl5TENBd2VEUTNORGRqT1RobExDQXdlR1l3WmpBd1ltWmlMQ0F3ZUdGa1lXUmxZelF4TENBd2VHUTBaRFEyTjJJekxDQXdlR0V5WVRKbVpEVm1MQ0F3ZUdGbVlXWmxZVFExTENBd2VEbGpPV05pWmpJekxDQXdlR0UwWVRSbU56VXpMQ0F3ZURjeU56STVObVUwTENBd2VHTXdZekExWWpsaUxDQXdlR0kzWWpkak1qYzFMQ0F3ZUdaa1ptUXhZMlV4TENBd2VEa3pPVE5oWlROa0xDQXdlREkyTWpZMllUUmpMQ0F3ZURNMk16WTFZVFpqTENBd2VETm1NMlkwTVRkbExDQXdlR1kzWmpjd01tWTFMQ0F3ZUdOalkyTTBaamd6TENBd2VETTBNelExWXpZNExDQXdlR0UxWVRWbU5EVXhMQ0F3ZUdVMVpUVXpOR1F4TENBd2VHWXhaakV3T0dZNUxDQXdlRGN4TnpFNU0yVXlMQ0F3ZUdRNFpEZzNNMkZpTENBd2VETXhNekUxTXpZeUxDQXdlREUxTVRVelpqSmhMQ0F3ZURBME1EUXdZekE0TENBd2VHTTNZemMxTWprMUxDQXdlREl6TWpNMk5UUTJMQ0F3ZUdNell6TTFaVGxrTENBd2VERTRNVGd5T0RNd0xDQXdlRGsyT1RaaE1UTTNMQ0F3ZURBMU1EVXdaakJoTENBd2VEbGhPV0ZpTlRKbUxDQXdlREEzTURjd09UQmxMQ0F3ZURFeU1USXpOakkwTENBd2VEZ3dPREE1WWpGaUxDQXdlR1V5WlRJelpHUm1MQ0F3ZUdWaVpXSXlObU5rTENBd2VESTNNamMyT1RSbExDQXdlR0l5WWpKalpEZG1MQ0F3ZURjMU56VTVabVZoTENBd2VEQTVNRGt4WWpFeUxDQXdlRGd6T0RNNVpURmtMQ0F3ZURKak1tTTNORFU0TENBd2VERmhNV0V5WlRNMExDQXdlREZpTVdJeVpETTJMQ0F3ZURabE5tVmlNbVJqTENBd2VEVmhOV0ZsWldJMExDQXdlR0V3WVRCbVlqVmlMQ0F3ZURVeU5USm1ObUUwTENBd2VETmlNMkkwWkRjMkxDQXdlR1EyWkRZMk1XSTNMQ0F3ZUdJellqTmpaVGRrTENBd2VESTVNamszWWpVeUxDQXdlR1V6WlRNelpXUmtMQ0F3ZURKbU1tWTNNVFZsTENBd2VEZzBPRFE1TnpFekxDQXdlRFV6TlRObU5XRTJMQ0F3ZUdReFpERTJPR0k1TENBd2VEQXdNREF3TURBd0xDQXdlR1ZrWldReVkyTXhMQ0F3ZURJd01qQTJNRFF3TENBd2VHWmpabU14Wm1VekxDQXdlR0l4WWpGak9EYzVMQ0F3ZURWaU5XSmxaR0kyTENBd2VEWmhObUZpWldRMExDQXdlR05pWTJJME5qaGtMQ0F3ZUdKbFltVmtPVFkzTENBd2VETTVNemswWWpjeUxDQXdlRFJoTkdGa1pUazBMQ0F3ZURSak5HTmtORGs0TENBd2VEVTROVGhsT0dJd0xDQXdlR05tWTJZMFlUZzFMQ0F3ZUdRd1pEQTJZbUppTENBd2VHVm1aV1l5WVdNMUxDQXdlR0ZoWVdGbE5UUm1MQ0F3ZUdaaVptSXhObVZrTENBd2VEUXpORE5qTlRnMkxDQXdlRFJrTkdSa056bGhMQ0F3ZURNek16TTFOVFkyTENBd2VEZzFPRFU1TkRFeExDQXdlRFExTkRWalpqaGhMQ0F3ZUdZNVpqa3hNR1U1TENBd2VEQXlNREl3TmpBMExDQXdlRGRtTjJZNE1XWmxMQ0F3ZURVd05UQm1NR0V3TENBd2VETmpNMk0wTkRjNExDQXdlRGxtT1daaVlUSTFMQ0F3ZUdFNFlUaGxNelJpTENBd2VEVXhOVEZtTTJFeUxDQXdlR0V6WVRObVpUVmtMQ0F3ZURRd05EQmpNRGd3TENBd2VEaG1PR1k0WVRBMUxDQXdlRGt5T1RKaFpETm1MQ0F3ZURsa09XUmlZekl4TENBd2VETTRNemcwT0Rjd0xDQXdlR1kxWmpVd05HWXhMQ0F3ZUdKalltTmtaall6TENBd2VHSTJZalpqTVRjM0xDQXdlR1JoWkdFM05XRm1MQ0F3ZURJeE1qRTJNelF5TENBd2VERXdNVEF6TURJd0xDQXdlR1ptWm1ZeFlXVTFMQ0F3ZUdZelpqTXdaV1prTENBd2VHUXlaREkyWkdKbUxDQXdlR05rWTJRMFl6Z3hMQ0F3ZURCak1HTXhOREU0TENBd2VERXpNVE16TlRJMkxDQXdlR1ZqWldNeVptTXpMQ0F3ZURWbU5XWmxNV0psTENBd2VEazNPVGRoTWpNMUxDQXdlRFEwTkRSall6ZzRMQ0F3ZURFM01UY3pPVEpsTENBd2VHTTBZelExTnprekxDQXdlR0UzWVRkbU1qVTFMQ0F3ZURkbE4yVTRNbVpqTENBd2VETmtNMlEwTnpkaExDQXdlRFkwTmpSaFkyTTRMQ0F3ZURWa05XUmxOMkpoTENBd2VERTVNVGt5WWpNeUxDQXdlRGN6TnpNNU5XVTJMQ0F3ZURZd05qQmhNR013TENBd2VEZ3hPREU1T0RFNUxDQXdlRFJtTkdaa01UbGxMQ0F3ZUdSalpHTTNabUV6TENBd2VESXlNakkyTmpRMExDQXdlREpoTW1FM1pUVTBMQ0F3ZURrd09UQmhZak5pTENBd2VEZzRPRGc0TXpCaUxDQXdlRFEyTkRaallUaGpMQ0F3ZUdWbFpXVXlPV00zTENBd2VHSTRZamhrTXpaaUxDQXdlREUwTVRRell6STRMQ0F3ZUdSbFpHVTNPV0UzTENBd2VEVmxOV1ZsTW1KakxDQXdlREJpTUdJeFpERTJMQ0F3ZUdSaVpHSTNObUZrTENBd2VHVXdaVEF6WW1SaUxDQXdlRE15TXpJMU5qWTBMQ0F3ZUROaE0yRTBaVGMwTENBd2VEQmhNR0V4WlRFMExDQXdlRFE1TkRsa1lqa3lMQ0F3ZURBMk1EWXdZVEJqTENBd2VESTBNalEyWXpRNExDQXdlRFZqTldObE5HSTRMQ0F3ZUdNeVl6STFaRGxtTENBd2VHUXpaRE0yWldKa0xDQXdlR0ZqWVdObFpqUXpMQ0F3ZURZeU5qSmhObU0wTENBd2VEa3hPVEZoT0RNNUxDQXdlRGsxT1RWaE5ETXhMQ0F3ZUdVMFpUUXpOMlF6TENBd2VEYzVOems0WW1ZeUxDQXdlR1UzWlRjek1tUTFMQ0F3ZUdNNFl6ZzBNemhpTENBd2VETTNNemMxT1RabExDQXdlRFprTm1SaU4yUmhMQ0F3ZURoa09HUTRZekF4TENBd2VHUTFaRFUyTkdJeExDQXdlRFJsTkdWa01qbGpMQ0F3ZUdFNVlUbGxNRFE1TENBd2VEWmpObU5pTkdRNExDQXdlRFUyTlRabVlXRmpMQ0F3ZUdZMFpqUXdOMll6TENBd2VHVmhaV0V5TldObUxDQXdlRFkxTmpWaFptTmhMQ0F3ZURkaE4yRTRaV1kwTENBd2VHRmxZV1ZsT1RRM0xDQXdlREE0TURneE9ERXdMQ0F3ZUdKaFltRmtOVFptTENBd2VEYzROemc0T0dZd0xDQXdlREkxTWpVMlpqUmhMQ0F3ZURKbE1tVTNNalZqTENBd2VERmpNV015TkRNNExDQXdlR0UyWVRabU1UVTNMQ0F3ZUdJMFlqUmpOemN6TENBd2VHTTJZelkxTVRrM0xDQXdlR1U0WlRneU0yTmlMQ0F3ZUdSa1pHUTNZMkV4TENBd2VEYzBOelE1WTJVNExDQXdlREZtTVdZeU1UTmxMQ0F3ZURSaU5HSmtaRGsyTENBd2VHSmtZbVJrWXpZeExDQXdlRGhpT0dJNE5qQmtMQ0F3ZURoaE9HRTROVEJtTENBd2VEY3dOekE1TUdVd0xDQXdlRE5sTTJVME1qZGpMQ0F3ZUdJMVlqVmpORGN4TENBd2VEWTJOalpoWVdOakxDQXdlRFE0TkRoa09Ea3dMQ0F3ZURBek1ETXdOVEEyTENBd2VHWTJaall3TVdZM0xDQXdlREJsTUdVeE1qRmpMQ0F3ZURZeE5qRmhNMk15TENBd2VETTFNelUxWmpaaExDQXdlRFUzTlRkbU9XRmxMQ0F3ZUdJNVlqbGtNRFk1TENBd2VEZzJPRFk1TVRFM0xDQXdlR014WXpFMU9EazVMQ0F3ZURGa01XUXlOek5oTENBd2VEbGxPV1ZpT1RJM0xDQXdlR1V4WlRFek9HUTVMQ0F3ZUdZNFpqZ3hNMlZpTENBd2VEazRPVGhpTXpKaUxDQXdlREV4TVRFek16SXlMQ0F3ZURZNU5qbGlZbVF5TENBd2VHUTVaRGszTUdFNUxDQXdlRGhsT0dVNE9UQTNMQ0F3ZURrME9UUmhOek16TENBd2VEbGlPV0ppTmpKa0xDQXdlREZsTVdVeU1qTmpMQ0F3ZURnM09EYzVNakUxTENBd2VHVTVaVGt5TUdNNUxDQXdlR05sWTJVME9UZzNMQ0F3ZURVMU5UVm1abUZoTENBd2VESTRNamczT0RVd0xDQXdlR1JtWkdZM1lXRTFMQ0F3ZURoak9HTTRaakF6TENBd2VHRXhZVEZtT0RVNUxDQXdlRGc1T0RrNE1EQTVMQ0F3ZURCa01HUXhOekZoTENBd2VHSm1ZbVprWVRZMUxDQXdlR1UyWlRZek1XUTNMQ0F3ZURReU5ESmpOamcwTENBd2VEWTROamhpT0dRd0xDQXdlRFF4TkRGak16Z3lMQ0F3ZURrNU9UbGlNREk1TENBd2VESmtNbVEzTnpWaExDQXdlREJtTUdZeE1URmxMQ0F3ZUdJd1lqQmpZamRpTENBd2VEVTBOVFJtWTJFNExDQXdlR0ppWW1Ka05qWmtMQ0F3ZURFMk1UWXpZVEpqWFR0Y2JseHVJQ0FnSUM4dklGUnlZVzV6Wm05eWJXRjBhVzl1Y3lCbWIzSWdaR1ZqY25sd2RHbHZibHh1SUNBZ0lIWmhjaUJVTlNBOUlGc3dlRFV4WmpSaE56VXdMQ0F3ZURkbE5ERTJOVFV6TENBd2VERmhNVGRoTkdNekxDQXdlRE5oTWpjMVpUazJMQ0F3ZUROaVlXSTJZbU5pTENBd2VERm1PV1EwTldZeExDQXdlR0ZqWm1FMU9HRmlMQ0F3ZURSaVpUTXdNemt6TENBd2VESXdNekJtWVRVMUxDQXdlR0ZrTnpZMlpHWTJMQ0F3ZURnNFkyTTNOamt4TENBd2VHWTFNREkwWXpJMUxDQXdlRFJtWlRWa04yWmpMQ0F3ZUdNMU1tRmpZbVEzTENBd2VESTJNelUwTkRnd0xDQXdlR0kxTmpKaE16aG1MQ0F3ZUdSbFlqRTFZVFE1TENBd2VESTFZbUV4WWpZM0xDQXdlRFExWldFd1pUazRMQ0F3ZURWa1ptVmpNR1V4TENBd2VHTXpNbVkzTlRBeUxDQXdlRGd4TkdObU1ERXlMQ0F3ZURoa05EWTVOMkV6TENBd2VEWmlaRE5tT1dNMkxDQXdlREF6T0dZMVptVTNMQ0F3ZURFMU9USTVZemsxTENBd2VHSm1ObVEzWVdWaUxDQXdlRGsxTlRJMU9XUmhMQ0F3ZUdRMFltVTRNekprTENBd2VEVTROelF5TVdRekxDQXdlRFE1WlRBMk9USTVMQ0F3ZURobFl6bGpPRFEwTENBd2VEYzFZekk0T1RaaExDQXdlR1kwT0dVM09UYzRMQ0F3ZURrNU5UZ3paVFppTENBd2VESTNZamszTVdSa0xDQXdlR0psWlRFMFptSTJMQ0F3ZUdZd09EaGhaREUzTENBd2VHTTVNakJoWXpZMkxDQXdlRGRrWTJVellXSTBMQ0F3ZURZelpHWTBZVEU0TENBd2VHVTFNV0V6TVRneUxDQXdlRGszTlRFek16WXdMQ0F3ZURZeU5UTTNaalExTENBd2VHSXhOalEzTjJVd0xDQXdlR0ppTm1KaFpUZzBMQ0F3ZUdabE9ERmhNREZqTENBd2VHWTVNRGd5WWprMExDQXdlRGN3TkRnMk9EVTRMQ0F3ZURobU5EVm1aREU1TENBd2VEazBaR1UyWXpnM0xDQXdlRFV5TjJKbU9HSTNMQ0F3ZUdGaU56TmtNekl6TENBd2VEY3lOR0l3TW1VeUxDQXdlR1V6TVdZNFpqVTNMQ0F3ZURZMk5UVmhZakpoTENBd2VHSXlaV0l5T0RBM0xDQXdlREptWWpWak1qQXpMQ0F3ZURnMll6VTNZamxoTENBd2VHUXpNemN3T0dFMUxDQXdlRE13TWpnNE4yWXlMQ0F3ZURJelltWmhOV0l5TENBd2VEQXlNRE0yWVdKaExDQXdlR1ZrTVRZNE1qVmpMQ0F3ZURoaFkyWXhZekppTENBd2VHRTNOemxpTkRreUxDQXdlR1l6TURkbU1tWXdMQ0F3ZURSbE5qbGxNbUV4TENBd2VEWTFaR0ZtTkdOa0xDQXdlREEyTURWaVpXUTFMQ0F3ZUdReE16UTJNakZtTENBd2VHTTBZVFptWlRoaExDQXdlRE0wTW1VMU16bGtMQ0F3ZUdFeVpqTTFOV0V3TENBd2VEQTFPR0ZsTVRNeUxDQXdlR0UwWmpabFlqYzFMQ0F3ZURCaU9ETmxZek01TENBd2VEUXdOakJsWm1GaExDQXdlRFZsTnpFNVpqQTJMQ0F3ZUdKa05tVXhNRFV4TENBd2VETmxNakU0WVdZNUxDQXdlRGsyWkdRd05qTmtMQ0F3ZUdSa00yVXdOV0ZsTENBd2VEUmtaVFppWkRRMkxDQXdlRGt4TlRRNFpHSTFMQ0F3ZURjeFl6UTFaREExTENBd2VEQTBNRFprTkRabUxDQXdlRFl3TlRBeE5XWm1MQ0F3ZURFNU9UaG1ZakkwTENBd2VHUTJZbVJsT1RrM0xDQXdlRGc1TkRBME0yTmpMQ0F3ZURZM1pEazVaVGMzTENBd2VHSXdaVGcwTW1Ka0xDQXdlREEzT0RrNFlqZzRMQ0F3ZUdVM01UazFZak00TENBd2VEYzVZemhsWldSaUxDQXdlR0V4TjJNd1lUUTNMQ0F3ZURkak5ESXdabVU1TENBd2VHWTRPRFF4WldNNUxDQXdlREF3TURBd01EQXdMQ0F3ZURBNU9EQTROamd6TENBd2VETXlNbUpsWkRRNExDQXdlREZsTVRFM01HRmpMQ0F3ZURaak5XRTNNalJsTENBd2VHWmtNR1ZtWm1aaUxDQXdlREJtT0RVek9EVTJMQ0F3ZUROa1lXVmtOVEZsTENBd2VETTJNbVF6T1RJM0xDQXdlREJoTUdaa09UWTBMQ0F3ZURZNE5XTmhOakl4TENBd2VEbGlOV0kxTkdReExDQXdlREkwTXpZeVpUTmhMQ0F3ZURCak1HRTJOMkl4TENBd2VEa3pOVGRsTnpCbUxDQXdlR0kwWldVNU5tUXlMQ0F3ZURGaU9XSTVNVGxsTENBd2VEZ3dZekJqTlRSbUxDQXdlRFl4WkdNeU1HRXlMQ0F3ZURWaE56YzBZalk1TENBd2VERmpNVEl4WVRFMkxDQXdlR1V5T1ROaVlUQmhMQ0F3ZUdNd1lUQXlZV1UxTENBd2VETmpNakpsTURRekxDQXdlREV5TVdJeE56RmtMQ0F3ZURCbE1Ea3daREJpTENBd2VHWXlPR0pqTjJGa0xDQXdlREprWWpaaE9HSTVMQ0F3ZURFME1XVmhPV000TENBd2VEVTNaakV4T1RnMUxDQXdlR0ZtTnpVd056UmpMQ0F3ZUdWbE9UbGtaR0ppTENBd2VHRXpOMlkyTUdaa0xDQXdlR1kzTURFeU5qbG1MQ0F3ZURWak56Sm1OV0pqTENBd2VEUTBOall6WW1NMUxDQXdlRFZpWm1JM1pUTTBMQ0F3ZURoaU5ETXlPVGMyTENBd2VHTmlNak5qTm1SakxDQXdlR0kyWldSbVl6WTRMQ0F3ZUdJNFpUUm1NVFl6TENBd2VHUTNNekZrWTJOaExDQXdlRFF5TmpNNE5URXdMQ0F3ZURFek9UY3lNalF3TENBd2VEZzBZell4TVRJd0xDQXdlRGcxTkdFeU5EZGtMQ0F3ZUdReVltSXpaR1k0TENBd2VHRmxaamt6TWpFeExDQXdlR00zTWpsaE1UWmtMQ0F3ZURGa09XVXlaalJpTENBd2VHUmpZakl6TUdZekxDQXdlREJrT0RZMU1tVmpMQ0F3ZURjM1l6RmxNMlF3TENBd2VESmlZak14TmpaakxDQXdlR0U1TnpCaU9UazVMQ0F3ZURFeE9UUTBPR1poTENBd2VEUTNaVGsyTkRJeUxDQXdlR0U0Wm1NNFkyTTBMQ0F3ZUdFd1pqQXpaakZoTENBd2VEVTJOMlF5WTJRNExDQXdlREl5TXpNNU1HVm1MQ0F3ZURnM05EazBaV00zTENBd2VHUTVNemhrTVdNeExDQXdlRGhqWTJGaE1tWmxMQ0F3ZURrNFpEUXdZak0yTENBd2VHRTJaalU0TVdObUxDQXdlR0UxTjJGa1pUSTRMQ0F3ZUdSaFlqYzRaVEkyTENBd2VETm1ZV1JpWm1FMExDQXdlREpqTTJFNVpHVTBMQ0F3ZURVd056ZzVNakJrTENBd2VEWmhOV1pqWXpsaUxDQXdlRFUwTjJVME5qWXlMQ0F3ZUdZMk9HUXhNMk15TENBd2VEa3daRGhpT0dVNExDQXdlREpsTXpsbU56VmxMQ0F3ZURneVl6TmhabVkxTENBd2VEbG1OV1E0TUdKbExDQXdlRFk1WkRBNU16ZGpMQ0F3ZURabVpEVXlaR0U1TENBd2VHTm1NalV4TW1JekxDQXdlR000WVdNNU9UTmlMQ0F3ZURFd01UZzNaR0UzTENBd2VHVTRPV00yTXpabExDQXdlR1JpTTJKaVlqZGlMQ0F3ZUdOa01qWTNPREE1TENBd2VEWmxOVGt4T0dZMExDQXdlR1ZqT1dGaU56QXhMQ0F3ZURnek5HWTVZV0U0TENBd2VHVTJPVFUyWlRZMUxDQXdlR0ZoWm1abE5qZGxMQ0F3ZURJeFltTmpaakE0TENBd2VHVm1NVFZsT0dVMkxDQXdlR0poWlRjNVltUTVMQ0F3ZURSaE5tWXpObU5sTENBd2VHVmhPV1l3T1dRMExDQXdlREk1WWpBM1kyUTJMQ0F3ZURNeFlUUmlNbUZtTENBd2VESmhNMll5TXpNeExDQXdlR00yWVRVNU5ETXdMQ0F3ZURNMVlUSTJObU13TENBd2VEYzBOR1ZpWXpNM0xDQXdlR1pqT0RKallXRTJMQ0F3ZUdVd09UQmtNR0l3TENBd2VETXpZVGRrT0RFMUxDQXdlR1l4TURRNU9EUmhMQ0F3ZURReFpXTmtZV1kzTENBd2VEZG1ZMlExTURCbExDQXdlREUzT1RGbU5qSm1MQ0F3ZURjMk5HUmtOamhrTENBd2VEUXpaV1ppTURSa0xDQXdlR05qWVdFMFpEVTBMQ0F3ZUdVME9UWXdOR1JtTENBd2VEbGxaREZpTldVekxDQXdlRFJqTm1FNE9ERmlMQ0F3ZUdNeE1tTXhabUk0TENBd2VEUTJOalUxTVRkbUxDQXdlRGxrTldWbFlUQTBMQ0F3ZURBeE9HTXpOVFZrTENBd2VHWmhPRGMzTkRjekxDQXdlR1ppTUdJME1USmxMQ0F3ZUdJek5qY3haRFZoTENBd2VEa3laR0prTWpVeUxDQXdlR1U1TVRBMU5qTXpMQ0F3ZURaa1pEWTBOekV6TENBd2VEbGhaRGMyTVRoakxDQXdlRE0zWVRFd1l6ZGhMQ0F3ZURVNVpqZ3hORGhsTENBd2VHVmlNVE16WXpnNUxDQXdlR05sWVRreU4yVmxMQ0F3ZUdJM05qRmpPVE0xTENBd2VHVXhNV05sTldWa0xDQXdlRGRoTkRkaU1UTmpMQ0F3ZURsalpESmtaalU1TENBd2VEVTFaakkzTXpObUxDQXdlREU0TVRSalpUYzVMQ0F3ZURjell6Y3pOMkptTENBd2VEVXpaamRqWkdWaExDQXdlRFZtWm1SaFlUVmlMQ0F3ZUdSbU0yUTJaakUwTENBd2VEYzRORFJrWWpnMkxDQXdlR05oWVdabU16Z3hMQ0F3ZUdJNU5qaGpORE5sTENBd2VETTRNalF6TkRKakxDQXdlR015WVRNME1EVm1MQ0F3ZURFMk1XUmpNemN5TENBd2VHSmpaVEl5TlRCakxDQXdlREk0TTJNME9UaGlMQ0F3ZUdabU1HUTVOVFF4TENBd2VETTVZVGd3TVRjeExDQXdlREE0TUdOaU0yUmxMQ0F3ZUdRNFlqUmxORGxqTENBd2VEWTBOVFpqTVRrd0xDQXdlRGRpWTJJNE5EWXhMQ0F3ZUdRMU16SmlOamN3TENBd2VEUTRObU0xWXpjMExDQXdlR1F3WWpnMU56UXlYVHRjYmlBZ0lDQjJZWElnVkRZZ1BTQmJNSGcxTURVeFpqUmhOeXdnTUhnMU16ZGxOREUyTlN3Z01IaGpNekZoTVRkaE5Dd2dNSGc1TmpOaE1qYzFaU3dnTUhoallqTmlZV0kyWWl3Z01IaG1NVEZtT1dRME5Td2dNSGhoWW1GalptRTFPQ3dnTUhnNU16UmlaVE13TXl3Z01IZzFOVEl3TXpCbVlTd2dNSGhtTm1Ga056WTJaQ3dnTUhnNU1UZzRZMk0zTml3Z01IZ3lOV1kxTURJMFl5d2dNSGhtWXpSbVpUVmtOeXdnTUhoa04yTTFNbUZqWWl3Z01IZzRNREkyTXpVME5Dd2dNSGc0Wm1JMU5qSmhNeXdnTUhnME9XUmxZakUxWVN3Z01IZzJOekkxWW1FeFlpd2dNSGc1T0RRMVpXRXdaU3dnTUhobE1UVmtabVZqTUN3Z01IZ3dNbU16TW1ZM05Td2dNSGd4TWpneE5HTm1NQ3dnTUhoaE16aGtORFk1Tnl3Z01IaGpOalppWkRObU9Td2dNSGhsTnpBek9HWTFaaXdnTUhnNU5URTFPVEk1WXl3Z01IaGxZbUptTm1RM1lTd2dNSGhrWVRrMU5USTFPU3dnTUhneVpHUTBZbVU0TXl3Z01IaGtNelU0TnpReU1Td2dNSGd5T1RRNVpUQTJPU3dnTUhnME5EaGxZemxqT0N3Z01IZzJZVGMxWXpJNE9Td2dNSGczT0dZME9HVTNPU3dnTUhnMllqazVOVGd6WlN3Z01IaGtaREkzWWprM01Td2dNSGhpTm1KbFpURTBaaXdnTUhneE4yWXdPRGhoWkN3Z01IZzJObU01TWpCaFl5d2dNSGhpTkRka1kyVXpZU3dnTUhneE9EWXpaR1kwWVN3Z01IZzRNbVUxTVdFek1Td2dNSGcyTURrM05URXpNeXdnTUhnME5UWXlOVE0zWml3Z01IaGxNR0l4TmpRM055d2dNSGc0TkdKaU5tSmhaU3dnTUhneFkyWmxPREZoTUN3Z01IZzVOR1k1TURneVlpd2dNSGcxT0Rjd05EZzJPQ3dnTUhneE9UaG1ORFZtWkN3Z01IZzROemswWkdVMll5d2dNSGhpTnpVeU4ySm1PQ3dnTUhneU0yRmlOek5rTXl3Z01IaGxNamN5TkdJd01pd2dNSGcxTjJVek1XWTRaaXdnTUhneVlUWTJOVFZoWWl3Z01IZ3dOMkl5WldJeU9Dd2dNSGd3TXpKbVlqVmpNaXdnTUhnNVlUZzJZelUzWWl3Z01IaGhOV1F6TXpjd09Dd2dNSGhtTWpNd01qZzROeXdnTUhoaU1qSXpZbVpoTlN3Z01IaGlZVEF5TURNMllTd2dNSGcxWTJWa01UWTRNaXdnTUhneVlqaGhZMll4WXl3Z01IZzVNbUUzTnpsaU5Dd2dNSGhtTUdZek1EZG1NaXdnTUhoaE1UUmxOamxsTWl3Z01IaGpaRFkxWkdGbU5Dd2dNSGhrTlRBMk1EVmlaU3dnTUhneFptUXhNelEyTWl3Z01IZzRZV00wWVRabVpTd2dNSGc1WkRNME1tVTFNeXdnTUhoaE1HRXlaak0xTlN3Z01IZ3pNakExT0dGbE1Td2dNSGczTldFMFpqWmxZaXdnTUhnek9UQmlPRE5sWXl3Z01IaGhZVFF3TmpCbFppd2dNSGd3TmpWbE56RTVaaXdnTUhnMU1XSmtObVV4TUN3Z01IaG1PVE5sTWpFNFlTd2dNSGd6WkRrMlpHUXdOaXdnTUhoaFpXUmtNMlV3TlN3Z01IZzBOalJrWlRaaVpDd2dNSGhpTlRreE5UUTRaQ3dnTUhnd05UY3hZelExWkN3Z01IZzJaakEwTURaa05Dd2dNSGhtWmpZd05UQXhOU3dnTUhneU5ERTVPVGhtWWl3Z01IZzVOMlEyWW1SbE9Td2dNSGhqWXpnNU5EQTBNeXdnTUhnM056WTNaRGs1WlN3Z01IaGlaR0l3WlRnME1pd2dNSGc0T0RBM09EazRZaXdnTUhnek9HVTNNVGsxWWl3Z01IaGtZamM1WXpobFpTd2dNSGcwTjJFeE4yTXdZU3dnTUhobE9UZGpOREl3Wml3Z01IaGpPV1k0T0RReFpTd2dNSGd3TURBd01EQXdNQ3dnTUhnNE16QTVPREE0Tml3Z01IZzBPRE15TW1KbFpDd2dNSGhoWXpGbE1URTNNQ3dnTUhnMFpUWmpOV0UzTWl3Z01IaG1ZbVprTUdWbVppd2dNSGcxTmpCbU9EVXpPQ3dnTUhneFpUTmtZV1ZrTlN3Z01IZ3lOek0yTW1Rek9Td2dNSGcyTkRCaE1HWmtPU3dnTUhneU1UWTROV05oTml3Z01IaGtNVGxpTldJMU5Dd2dNSGd6WVRJME16WXlaU3dnTUhoaU1UQmpNR0UyTnl3Z01IZ3daamt6TlRkbE55d2dNSGhrTW1JMFpXVTVOaXdnTUhnNVpURmlPV0k1TVN3Z01IZzBaamd3WXpCak5Td2dNSGhoTWpZeFpHTXlNQ3dnTUhnMk9UVmhOemMwWWl3Z01IZ3hOakZqTVRJeFlTd2dNSGd3WVdVeU9UTmlZU3dnTUhobE5XTXdZVEF5WVN3Z01IZzBNek5qTWpKbE1Dd2dNSGd4WkRFeU1XSXhOeXdnTUhnd1lqQmxNRGt3WkN3Z01IaGhaR1l5T0dKak55d2dNSGhpT1RKa1lqWmhPQ3dnTUhoak9ERTBNV1ZoT1N3Z01IZzROVFUzWmpFeE9Td2dNSGcwWTJGbU56VXdOeXdnTUhoaVltVmxPVGxrWkN3Z01IaG1aR0V6TjJZMk1Dd2dNSGc1Wm1ZM01ERXlOaXdnTUhoaVl6VmpOekptTlN3Z01IaGpOVFEwTmpZellpd2dNSGd6TkRWaVptSTNaU3dnTUhnM05qaGlORE15T1N3Z01IaGtZMk5pTWpOak5pd2dNSGcyT0dJMlpXUm1ZeXdnTUhnMk0ySTRaVFJtTVN3Z01IaGpZV1EzTXpGa1l5d2dNSGd4TURReU5qTTROU3dnTUhnME1ERXpPVGN5TWl3Z01IZ3lNRGcwWXpZeE1Td2dNSGczWkRnMU5HRXlOQ3dnTUhobU9HUXlZbUl6WkN3Z01IZ3hNV0ZsWmprek1pd2dNSGcyWkdNM01qbGhNU3dnTUhnMFlqRmtPV1V5Wml3Z01IaG1NMlJqWWpJek1Dd2dNSGhsWXpCa09EWTFNaXdnTUhoa01EYzNZekZsTXl3Z01IZzJZekppWWpNeE5pd2dNSGc1T1dFNU56QmlPU3dnTUhobVlURXhPVFEwT0N3Z01IZ3lNalEzWlRrMk5Dd2dNSGhqTkdFNFptTTRZeXdnTUhneFlXRXdaakF6Wml3Z01IaGtPRFUyTjJReVl5d2dNSGhsWmpJeU16TTVNQ3dnTUhoak56ZzNORGswWlN3Z01IaGpNV1E1TXpoa01Td2dNSGhtWlRoalkyRmhNaXdnTUhnek5qazRaRFF3WWl3Z01IaGpabUUyWmpVNE1Td2dNSGd5T0dFMU4yRmtaU3dnTUhneU5tUmhZamM0WlN3Z01IaGhORE5tWVdSaVppd2dNSGhsTkRKak0yRTVaQ3dnTUhnd1pEVXdOemc1TWl3Z01IZzVZalpoTldaall5d2dNSGcyTWpVME4yVTBOaXdnTUhoak1tWTJPR1F4TXl3Z01IaGxPRGt3WkRoaU9Dd2dNSGcxWlRKbE16bG1OeXdnTUhobU5UZ3lZek5oWml3Z01IaGlaVGxtTldRNE1Dd2dNSGczWXpZNVpEQTVNeXdnTUhoaE9UWm1aRFV5WkN3Z01IaGlNMk5tTWpVeE1pd2dNSGd6WW1NNFlXTTVPU3dnTUhoaE56RXdNVGczWkN3Z01IZzJaV1U0T1dNMk15d2dNSGczWW1SaU0ySmlZaXdnTUhnd09XTmtNalkzT0N3Z01IaG1ORFpsTlRreE9Dd2dNSGd3TVdWak9XRmlOeXdnTUhoaE9EZ3pOR1k1WVN3Z01IZzJOV1UyT1RVMlpTd2dNSGczWldGaFptWmxOaXdnTUhnd09ESXhZbU5qWml3Z01IaGxObVZtTVRWbE9Dd2dNSGhrT1dKaFpUYzVZaXdnTUhoalpUUmhObVl6Tml3Z01IaGtOR1ZoT1dZd09Td2dNSGhrTmpJNVlqQTNZeXdnTUhoaFpqTXhZVFJpTWl3Z01IZ3pNVEpoTTJZeU15d2dNSGd6TUdNMllUVTVOQ3dnTUhoak1ETTFZVEkyTml3Z01IZ3pOemMwTkdWaVl5d2dNSGhoTm1aak9ESmpZU3dnTUhoaU1HVXdPVEJrTUN3Z01IZ3hOVE16WVRka09Dd2dNSGcwWVdZeE1EUTVPQ3dnTUhobU56UXhaV05rWVN3Z01IZ3daVGRtWTJRMU1Dd2dNSGd5WmpFM09URm1OaXdnTUhnNFpEYzJOR1JrTml3Z01IZzBaRFF6WldaaU1Dd2dNSGcxTkdOallXRTBaQ3dnTUhoa1ptVTBPVFl3TkN3Z01IaGxNemxsWkRGaU5Td2dNSGd4WWpSak5tRTRPQ3dnTUhoaU9HTXhNbU14Wml3Z01IZzNaalEyTmpVMU1Td2dNSGd3TkRsa05XVmxZU3dnTUhnMVpEQXhPR016TlN3Z01IZzNNMlpoT0RjM05Dd2dNSGd5WldaaU1HSTBNU3dnTUhnMVlXSXpOamN4WkN3Z01IZzFNamt5WkdKa01pd2dNSGd6TTJVNU1UQTFOaXdnTUhneE16WmtaRFkwTnl3Z01IZzRZemxoWkRjMk1Td2dNSGczWVRNM1lURXdZeXdnTUhnNFpUVTVaamd4TkN3Z01IZzRPV1ZpTVRNell5d2dNSGhsWldObFlUa3lOeXdnTUhnek5XSTNOakZqT1N3Z01IaGxaR1V4TVdObE5Td2dNSGd6WXpkaE5EZGlNU3dnTUhnMU9UbGpaREprWml3Z01IZ3paalUxWmpJM015d2dNSGczT1RFNE1UUmpaU3dnTUhoaVpqY3pZemN6Tnl3Z01IaGxZVFV6WmpkalpDd2dNSGcxWWpWbVptUmhZU3dnTUhneE5HUm1NMlEyWml3Z01IZzROamM0TkRSa1lpd2dNSGc0TVdOaFlXWm1NeXdnTUhnelpXSTVOamhqTkN3Z01IZ3lZek00TWpRek5Dd2dNSGcxWm1NeVlUTTBNQ3dnTUhnM01qRTJNV1JqTXl3Z01IZ3dZMkpqWlRJeU5Td2dNSGc0WWpJNE0yTTBPU3dnTUhnME1XWm1NR1E1TlN3Z01IZzNNVE01WVRnd01Td2dNSGhrWlRBNE1HTmlNeXdnTUhnNVkyUTRZalJsTkN3Z01IZzVNRFkwTlRaak1Td2dNSGcyTVRkaVkySTROQ3dnTUhnM01HUTFNekppTml3Z01IZzNORFE0Tm1NMVl5d2dNSGcwTW1Rd1lqZzFOMTA3WEc0Z0lDQWdkbUZ5SUZRM0lEMGdXekI0WVRjMU1EVXhaalFzSURCNE5qVTFNemRsTkRFc0lEQjRZVFJqTXpGaE1UY3NJREI0TldVNU5qTmhNamNzSURCNE5tSmpZak5pWVdJc0lEQjRORFZtTVRGbU9XUXNJREI0TlRoaFltRmpabUVzSURCNE1ETTVNelJpWlRNc0lEQjRabUUxTlRJd016QXNJREI0Tm1SbU5tRmtOellzSURCNE56WTVNVGc0WTJNc0lEQjROR015TldZMU1ESXNJREI0WkRkbVl6Um1aVFVzSURCNFkySmtOMk0xTW1Fc0lEQjRORFE0TURJMk16VXNJREI0WVRNNFptSTFOaklzSURCNE5XRTBPV1JsWWpFc0lEQjRNV0kyTnpJMVltRXNJREI0TUdVNU9EUTFaV0VzSURCNFl6QmxNVFZrWm1Vc0lEQjROelV3TW1Nek1tWXNJREI0WmpBeE1qZ3hOR01zSURCNE9UZGhNemhrTkRZc0lEQjRaamxqTmpaaVpETXNJREI0TldabE56QXpPR1lzSURCNE9XTTVOVEUxT1RJc0lEQjROMkZsWW1KbU5tUXNJREI0TlRsa1lUazFOVElzSURCNE9ETXlaR1EwWW1Vc0lEQjRNakZrTXpVNE56UXNJREI0TmpreU9UUTVaVEFzSURCNFl6ZzBORGhsWXprc0lEQjRPRGsyWVRjMVl6SXNJREI0TnprM09HWTBPR1VzSURCNE0yVTJZams1TlRnc0lEQjROekZrWkRJM1lqa3NJREI0TkdaaU5tSmxaVEVzSURCNFlXUXhOMll3T0Rnc0lEQjRZV00yTm1NNU1qQXNJREI0TTJGaU5EZGtZMlVzSURCNE5HRXhPRFl6WkdZc0lEQjRNekU0TW1VMU1XRXNJREI0TXpNMk1EazNOVEVzSURCNE4yWTBOVFl5TlRNc0lEQjROemRsTUdJeE5qUXNJREI0WVdVNE5HSmlObUlzSURCNFlUQXhZMlpsT0RFc0lEQjRNbUk1TkdZNU1EZ3NJREI0TmpnMU9EY3dORGdzSURCNFptUXhPVGhtTkRVc0lEQjRObU00TnprMFpHVXNJREI0WmpoaU56VXlOMklzSURCNFpETXlNMkZpTnpNc0lEQjRNREpsTWpjeU5HSXNJREI0T0dZMU4yVXpNV1lzSURCNFlXSXlZVFkyTlRVc0lEQjRNamd3TjJJeVpXSXNJREI0WXpJd016Sm1ZalVzSURCNE4ySTVZVGcyWXpVc0lEQjRNRGhoTldRek16Y3NJREI0T0RkbU1qTXdNamdzSURCNFlUVmlNakl6WW1Zc0lEQjRObUZpWVRBeU1ETXNJREI0T0RJMVkyVmtNVFlzSURCNE1XTXlZamhoWTJZc0lEQjRZalE1TW1FM056a3NJREI0WmpKbU1HWXpNRGNzSURCNFpUSmhNVFJsTmprc0lEQjRaalJqWkRZMVpHRXNJREI0WW1Wa05UQTJNRFVzSURCNE5qSXhabVF4TXpRc0lEQjRabVU0WVdNMFlUWXNJREI0TlRNNVpETTBNbVVzSURCNE5UVmhNR0V5WmpNc0lEQjRaVEV6TWpBMU9HRXNJREI0WldJM05XRTBaallzSURCNFpXTXpPVEJpT0RNc0lEQjRaV1poWVRRd05qQXNJREI0T1dZd05qVmxOekVzSURCNE1UQTFNV0prTm1Vc0lEQjRPR0ZtT1RObE1qRXNJREI0TURZelpEazJaR1FzSURCNE1EVmhaV1JrTTJVc0lEQjRZbVEwTmpSa1pUWXNJREI0T0dSaU5Ua3hOVFFzSURCNE5XUXdOVGN4WXpRc0lEQjRaRFEyWmpBME1EWXNJREI0TVRWbVpqWXdOVEFzSURCNFptSXlOREU1T1Rnc0lEQjRaVGs1TjJRMlltUXNJREI0TkROall6ZzVOREFzSURCNE9XVTNOelkzWkRrc0lEQjROREppWkdJd1pUZ3NJREI0T0dJNE9EQTNPRGtzSURCNE5XSXpPR1UzTVRrc0lEQjRaV1ZrWWpjNVl6Z3NJREI0TUdFME4yRXhOMk1zSURCNE1HWmxPVGRqTkRJc0lEQjRNV1ZqT1dZNE9EUXNJREI0TURBd01EQXdNREFzSURCNE9EWTRNekE1T0RBc0lEQjRaV1EwT0RNeU1tSXNJREI0TnpCaFl6RmxNVEVzSURCNE56STBaVFpqTldFc0lEQjRabVptWW1aa01HVXNJREI0TXpnMU5qQm1PRFVzSURCNFpEVXhaVE5rWVdVc0lEQjRNemt5TnpNMk1tUXNJREI0WkRrMk5EQmhNR1lzSURCNFlUWXlNVFk0TldNc0lEQjROVFJrTVRsaU5XSXNJREI0TW1VellUSTBNellzSURCNE5qZGlNVEJqTUdFc0lEQjRaVGN3Wmprek5UY3NJREI0T1Raa01tSTBaV1VzSURCNE9URTVaVEZpT1dJc0lEQjRZelUwWmpnd1l6QXNJREI0TWpCaE1qWXhaR01zSURCNE5HSTJPVFZoTnpjc0lEQjRNV0V4TmpGak1USXNJREI0WW1Fd1lXVXlPVE1zSURCNE1tRmxOV013WVRBc0lEQjRaVEEwTXpOak1qSXNJREI0TVRjeFpERXlNV0lzSURCNE1HUXdZakJsTURrc0lEQjRZemRoWkdZeU9HSXNJREI0WVRoaU9USmtZallzSURCNFlUbGpPREUwTVdVc0lEQjRNVGs0TlRVM1pqRXNJREI0TURjMFkyRm1OelVzSURCNFpHUmlZbVZsT1Rrc0lEQjROakJtWkdFek4yWXNJREI0TWpZNVptWTNNREVzSURCNFpqVmlZelZqTnpJc0lEQjRNMkpqTlRRME5qWXNJREI0TjJVek5EVmlabUlzSURCNE1qazNOamhpTkRNc0lEQjRZelprWTJOaU1qTXNJREI0Wm1NMk9HSTJaV1FzSURCNFpqRTJNMkk0WlRRc0lEQjRaR05qWVdRM016RXNJREI0T0RVeE1EUXlOak1zSURCNE1qSTBNREV6T1Rjc0lEQjRNVEV5TURnMFl6WXNJREI0TWpRM1pEZzFOR0VzSURCNE0yUm1PR1F5WW1Jc0lEQjRNekl4TVdGbFpqa3NJREI0WVRFMlpHTTNNamtzSURCNE1tWTBZakZrT1dVc0lEQjRNekJtTTJSallqSXNJREI0TlRKbFl6QmtPRFlzSURCNFpUTmtNRGMzWXpFc0lEQjRNVFkyWXpKaVlqTXNJREI0WWprNU9XRTVOekFzSURCNE5EaG1ZVEV4T1RRc0lEQjROalF5TWpRM1pUa3NJREI0T0dOak5HRTRabU1zSURCNE0yWXhZV0V3WmpBc0lEQjRNbU5rT0RVMk4yUXNJREI0T1RCbFpqSXlNek1zSURCNE5HVmpOemczTkRrc0lEQjRaREZqTVdRNU16Z3NJREI0WVRKbVpUaGpZMkVzSURCNE1HSXpOams0WkRRc0lEQjRPREZqWm1FMlpqVXNJREI0WkdVeU9HRTFOMkVzSURCNE9HVXlObVJoWWpjc0lEQjRZbVpoTkRObVlXUXNJREI0T1dSbE5ESmpNMkVzSURCNE9USXdaRFV3Tnpnc0lEQjRZMk01WWpaaE5XWXNJREI0TkRZMk1qVTBOMlVzSURCNE1UTmpNbVkyT0dRc0lEQjRZamhsT0Rrd1pEZ3NJREI0WmpjMVpUSmxNemtzSURCNFlXWm1OVGd5WXpNc0lEQjRPREJpWlRsbU5XUXNJREI0T1RNM1l6WTVaREFzSURCNE1tUmhPVFptWkRVc0lEQjRNVEppTTJObU1qVXNJREI0T1RrelltTTRZV01zSURCNE4yUmhOekV3TVRnc0lEQjROak0yWldVNE9XTXNJREI0WW1JM1ltUmlNMklzSURCNE56Z3dPV05rTWpZc0lEQjRNVGhtTkRabE5Ua3NJREI0WWpjd01XVmpPV0VzSURCNE9XRmhPRGd6TkdZc0lEQjRObVUyTldVMk9UVXNJREI0WlRZM1pXRmhabVlzSURCNFkyWXdPREl4WW1Nc0lEQjRaVGhsTm1WbU1UVXNJREI0T1dKa09XSmhaVGNzSURCNE16WmpaVFJoTm1Zc0lEQjRNRGxrTkdWaE9XWXNJREI0TjJOa05qSTVZakFzSURCNFlqSmhaak14WVRRc0lEQjRNak16TVRKaE0yWXNJREI0T1RRek1HTTJZVFVzSURCNE5qWmpNRE0xWVRJc0lEQjRZbU16TnpjME5HVXNJREI0WTJGaE5tWmpPRElzSURCNFpEQmlNR1V3T1RBc0lEQjRaRGd4TlRNellUY3NJREI0T1RnMFlXWXhNRFFzSURCNFpHRm1OelF4WldNc0lEQjROVEF3WlRkbVkyUXNJREI0WmpZeVpqRTNPVEVzSURCNFpEWTRaRGMyTkdRc0lEQjRZakEwWkRRelpXWXNJREI0TkdRMU5HTmpZV0VzSURCNE1EUmtabVUwT1RZc0lEQjRZalZsTXpsbFpERXNJREI0T0RneFlqUmpObUVzSURCNE1XWmlPR014TW1Nc0lEQjROVEUzWmpRMk5qVXNJREI0WldFd05EbGtOV1VzSURCNE16VTFaREF4T0dNc0lEQjROelEzTTJaaE9EY3NJREI0TkRFeVpXWmlNR0lzSURCNE1XUTFZV0l6Tmpjc0lEQjRaREkxTWpreVpHSXNJREI0TlRZek0yVTVNVEFzSURCNE5EY3hNelprWkRZc0lEQjROakU0WXpsaFpEY3NJREI0TUdNM1lUTTNZVEVzSURCNE1UUTRaVFU1Wmpnc0lEQjRNMk00T1dWaU1UTXNJREI0TWpkbFpXTmxZVGtzSURCNFl6a3pOV0kzTmpFc0lEQjRaVFZsWkdVeE1XTXNJREI0WWpFell6ZGhORGNzSURCNFpHWTFPVGxqWkRJc0lEQjROek16WmpVMVpqSXNJREI0WTJVM09URTRNVFFzSURCNE16ZGlaamN6WXpjc0lEQjRZMlJsWVRVelpqY3NJREI0WVdFMVlqVm1abVFzSURCNE5tWXhOR1JtTTJRc0lEQjRaR0k0TmpjNE5EUXNJREI0WmpNNE1XTmhZV1lzSURCNFl6UXpaV0k1Tmpnc0lEQjRNelF5WXpNNE1qUXNJREI0TkRBMVptTXlZVE1zSURCNFl6TTNNakUyTVdRc0lEQjRNalV3WTJKalpUSXNJREI0TkRrNFlqSTRNMk1zSURCNE9UVTBNV1ptTUdRc0lEQjRNREUzTVRNNVlUZ3NJREI0WWpOa1pUQTRNR01zSURCNFpUUTVZMlE0WWpRc0lEQjRZekU1TURZME5UWXNJREI0T0RRMk1UZGlZMklzSURCNFlqWTNNR1ExTXpJc0lEQjROV00zTkRRNE5tTXNJREI0TlRjME1tUXdZamhkTzF4dUlDQWdJSFpoY2lCVU9DQTlJRnN3ZUdZMFlUYzFNRFV4TENBd2VEUXhOalUxTXpkbExDQXdlREUzWVRSak16RmhMQ0F3ZURJM05XVTVOak5oTENBd2VHRmlObUpqWWpOaUxDQXdlRGxrTkRWbU1URm1MQ0F3ZUdaaE5UaGhZbUZqTENBd2VHVXpNRE01TXpSaUxDQXdlRE13Wm1FMU5USXdMQ0F3ZURjMk5tUm1ObUZrTENBd2VHTmpOelk1TVRnNExDQXdlREF5TkdNeU5XWTFMQ0F3ZUdVMVpEZG1ZelJtTENBd2VESmhZMkprTjJNMUxDQXdlRE0xTkRRNE1ESTJMQ0F3ZURZeVlUTTRabUkxTENBd2VHSXhOV0UwT1dSbExDQXdlR0poTVdJMk56STFMQ0F3ZUdWaE1HVTVPRFExTENBd2VHWmxZekJsTVRWa0xDQXdlREptTnpVd01tTXpMQ0F3ZURSalpqQXhNamd4TENBd2VEUTJPVGRoTXpoa0xDQXdlR1F6Wmpsak5qWmlMQ0F3ZURobU5XWmxOekF6TENBd2VEa3lPV001TlRFMUxDQXdlRFprTjJGbFltSm1MQ0F3ZURVeU5UbGtZVGsxTENBd2VHSmxPRE15WkdRMExDQXdlRGMwTWpGa016VTRMQ0F3ZUdVd05qa3lPVFE1TENBd2VHTTVZemcwTkRobExDQXdlR015T0RrMllUYzFMQ0F3ZURobE56azNPR1kwTENBd2VEVTRNMlUyWWprNUxDQXdlR0k1TnpGa1pESTNMQ0F3ZUdVeE5HWmlObUpsTENBd2VEZzRZV1F4TjJZd0xDQXdlREl3WVdNMk5tTTVMQ0F3ZUdObE0yRmlORGRrTENBd2VHUm1OR0V4T0RZekxDQXdlREZoTXpFNE1tVTFMQ0F3ZURVeE16TTJNRGszTENBd2VEVXpOMlkwTlRZeUxDQXdlRFkwTnpkbE1HSXhMQ0F3ZURaaVlXVTROR0ppTENBd2VEZ3hZVEF4WTJabExDQXdlREE0TW1JNU5HWTVMQ0F3ZURRNE5qZzFPRGN3TENBd2VEUTFabVF4T1RobUxDQXdlR1JsTm1NNE56azBMQ0F3ZURkaVpqaGlOelV5TENBd2VEY3paRE15TTJGaUxDQXdlRFJpTURKbE1qY3lMQ0F3ZURGbU9HWTFOMlV6TENBd2VEVTFZV0l5WVRZMkxDQXdlR1ZpTWpnd04ySXlMQ0F3ZUdJMVl6SXdNekptTENBd2VHTTFOMkk1WVRnMkxDQXdlRE0zTURoaE5XUXpMQ0F3ZURJNE9EZG1Nak13TENBd2VHSm1ZVFZpTWpJekxDQXdlREF6Tm1GaVlUQXlMQ0F3ZURFMk9ESTFZMlZrTENBd2VHTm1NV015WWpoaExDQXdlRGM1WWpRNU1tRTNMQ0F3ZURBM1pqSm1NR1l6TENBd2VEWTVaVEpoTVRSbExDQXdlR1JoWmpSalpEWTFMQ0F3ZURBMVltVmtOVEEyTENBd2VETTBOakl4Wm1ReExDQXdlR0UyWm1VNFlXTTBMQ0F3ZURKbE5UTTVaRE0wTENBd2VHWXpOVFZoTUdFeUxDQXdlRGhoWlRFek1qQTFMQ0F3ZUdZMlpXSTNOV0UwTENBd2VEZ3paV016T1RCaUxDQXdlRFl3WldaaFlUUXdMQ0F3ZURjeE9XWXdOalZsTENBd2VEWmxNVEExTVdKa0xDQXdlREl4T0dGbU9UTmxMQ0F3ZUdSa01EWXpaRGsyTENBd2VETmxNRFZoWldSa0xDQXdlR1UyWW1RME5qUmtMQ0F3ZURVME9HUmlOVGt4TENBd2VHTTBOV1F3TlRjeExDQXdlREEyWkRRMlpqQTBMQ0F3ZURVd01UVm1aall3TENBd2VEazRabUl5TkRFNUxDQXdlR0prWlRrNU4yUTJMQ0F3ZURRd05ETmpZemc1TENBd2VHUTVPV1UzTnpZM0xDQXdlR1U0TkRKaVpHSXdMQ0F3ZURnNU9HSTRPREEzTENBd2VERTVOV0l6T0dVM0xDQXdlR000WldWa1lqYzVMQ0F3ZURkak1HRTBOMkV4TENBd2VEUXlNR1psT1RkakxDQXdlRGcwTVdWak9XWTRMQ0F3ZURBd01EQXdNREF3TENBd2VEZ3dPRFk0TXpBNUxDQXdlREppWldRME9ETXlMQ0F3ZURFeE56QmhZekZsTENBd2VEVmhOekkwWlRaakxDQXdlREJsWm1abVltWmtMQ0F3ZURnMU16ZzFOakJtTENBd2VHRmxaRFV4WlROa0xDQXdlREprTXpreU56TTJMQ0F3ZURCbVpEazJOREJoTENBd2VEVmpZVFl5TVRZNExDQXdlRFZpTlRSa01UbGlMQ0F3ZURNMk1tVXpZVEkwTENBd2VEQmhOamRpTVRCakxDQXdlRFUzWlRjd1pqa3pMQ0F3ZUdWbE9UWmtNbUkwTENBd2VEbGlPVEU1WlRGaUxDQXdlR013WXpVMFpqZ3dMQ0F3ZUdSak1qQmhNall4TENBd2VEYzNOR0kyT1RWaExDQXdlREV5TVdFeE5qRmpMQ0F3ZURrelltRXdZV1V5TENBd2VHRXdNbUZsTldNd0xDQXdlREl5WlRBME16TmpMQ0F3ZURGaU1UY3haREV5TENBd2VEQTVNR1F3WWpCbExDQXdlRGhpWXpkaFpHWXlMQ0F3ZUdJMllUaGlPVEprTENBd2VERmxZVGxqT0RFMExDQXdlR1l4TVRrNE5UVTNMQ0F3ZURjMU1EYzBZMkZtTENBd2VEazVaR1JpWW1WbExDQXdlRGRtTmpCbVpHRXpMQ0F3ZURBeE1qWTVabVkzTENBd2VEY3laalZpWXpWakxDQXdlRFkyTTJKak5UUTBMQ0F3ZUdaaU4yVXpORFZpTENBd2VEUXpNamszTmpoaUxDQXdlREl6WXpaa1kyTmlMQ0F3ZUdWa1ptTTJPR0kyTENBd2VHVTBaakUyTTJJNExDQXdlRE14WkdOallXUTNMQ0F3ZURZek9EVXhNRFF5TENBd2VEazNNakkwTURFekxDQXdlR00yTVRFeU1EZzBMQ0F3ZURSaE1qUTNaRGcxTENBd2VHSmlNMlJtT0dReUxDQXdlR1k1TXpJeE1XRmxMQ0F3ZURJNVlURTJaR00zTENBd2VEbGxNbVkwWWpGa0xDQXdlR0l5TXpCbU0yUmpMQ0F3ZURnMk5USmxZekJrTENBd2VHTXhaVE5rTURjM0xDQXdlR0l6TVRZMll6SmlMQ0F3ZURjd1lqazVPV0U1TENBd2VEazBORGhtWVRFeExDQXdlR1U1TmpReU1qUTNMQ0F3ZUdaak9HTmpOR0U0TENBd2VHWXdNMll4WVdFd0xDQXdlRGRrTW1Oa09EVTJMQ0F3ZURNek9UQmxaakl5TENBd2VEUTVOR1ZqTnpnM0xDQXdlRE00WkRGak1XUTVMQ0F3ZUdOaFlUSm1aVGhqTENBd2VHUTBNR0l6TmprNExDQXdlR1kxT0RGalptRTJMQ0F3ZURkaFpHVXlPR0UxTENBd2VHSTNPR1V5Tm1SaExDQXdlR0ZrWW1aaE5ETm1MQ0F3ZUROaE9XUmxOREpqTENBd2VEYzRPVEl3WkRVd0xDQXdlRFZtWTJNNVlqWmhMQ0F3ZURkbE5EWTJNalUwTENBd2VEaGtNVE5qTW1ZMkxDQXdlR1E0WWpobE9Ea3dMQ0F3ZURNNVpqYzFaVEpsTENBd2VHTXpZV1ptTlRneUxDQXdlRFZrT0RCaVpUbG1MQ0F3ZUdRd09UTTNZelk1TENBd2VHUTFNbVJoT1RabUxDQXdlREkxTVRKaU0yTm1MQ0F3ZUdGak9Ua3pZbU00TENBd2VERTROMlJoTnpFd0xDQXdlRGxqTmpNMlpXVTRMQ0F3ZUROaVltSTNZbVJpTENBd2VESTJOemd3T1dOa0xDQXdlRFU1TVRobU5EWmxMQ0F3ZURsaFlqY3dNV1ZqTENBd2VEUm1PV0ZoT0RnekxDQXdlRGsxTm1VMk5XVTJMQ0F3ZUdabVpUWTNaV0ZoTENBd2VHSmpZMll3T0RJeExDQXdlREUxWlRobE5tVm1MQ0F3ZUdVM09XSmtPV0poTENBd2VEWm1NelpqWlRSaExDQXdlRGxtTURsa05HVmhMQ0F3ZUdJd04yTmtOakk1TENBd2VHRTBZakpoWmpNeExDQXdlRE5tTWpNek1USmhMQ0F3ZUdFMU9UUXpNR00yTENBd2VHRXlOalpqTURNMUxDQXdlRFJsWW1Nek56YzBMQ0F3ZURneVkyRmhObVpqTENBd2VEa3daREJpTUdVd0xDQXdlR0UzWkRneE5UTXpMQ0F3ZURBME9UZzBZV1l4TENBd2VHVmpaR0ZtTnpReExDQXdlR05rTlRBd1pUZG1MQ0F3ZURreFpqWXlaakUzTENBd2VEUmtaRFk0WkRjMkxDQXdlR1ZtWWpBMFpEUXpMQ0F3ZUdGaE5HUTFOR05qTENBd2VEazJNRFJrWm1VMExDQXdlR1F4WWpWbE16bGxMQ0F3ZURaaE9EZ3hZalJqTENBd2VESmpNV1ppT0dNeExDQXdlRFkxTlRFM1pqUTJMQ0F3ZURWbFpXRXdORGxrTENBd2VEaGpNelUxWkRBeExDQXdlRGczTnpRM00yWmhMQ0F3ZURCaU5ERXlaV1ppTENBd2VEWTNNV1ExWVdJekxDQXdlR1JpWkRJMU1qa3lMQ0F3ZURFd05UWXpNMlU1TENBd2VHUTJORGN4TXpaa0xDQXdlR1EzTmpFNFl6bGhMQ0F3ZUdFeE1HTTNZVE0zTENBd2VHWTRNVFE0WlRVNUxDQXdlREV6TTJNNE9XVmlMQ0F3ZUdFNU1qZGxaV05sTENBd2VEWXhZemt6TldJM0xDQXdlREZqWlRWbFpHVXhMQ0F3ZURRM1lqRXpZemRoTENBd2VHUXlaR1kxT1RsakxDQXdlR1l5TnpNelpqVTFMQ0F3ZURFMFkyVTNPVEU0TENBd2VHTTNNemRpWmpjekxDQXdlR1kzWTJSbFlUVXpMQ0F3ZUdaa1lXRTFZalZtTENBd2VETmtObVl4TkdSbUxDQXdlRFEwWkdJNE5qYzRMQ0F3ZUdGbVpqTTRNV05oTENBd2VEWTRZelF6WldJNUxDQXdlREkwTXpReVl6TTRMQ0F3ZUdFek5EQTFabU15TENBd2VERmtZek0zTWpFMkxDQXdlR1V5TWpVd1kySmpMQ0F3ZUROak5EazRZakk0TENBd2VEQmtPVFUwTVdabUxDQXdlR0U0TURFM01UTTVMQ0F3ZURCallqTmtaVEE0TENBd2VHSTBaVFE1WTJRNExDQXdlRFUyWXpFNU1EWTBMQ0F3ZUdOaU9EUTJNVGRpTENBd2VETXlZalkzTUdRMUxDQXdlRFpqTldNM05EUTRMQ0F3ZUdJNE5UYzBNbVF3WFR0Y2JseHVJQ0FnSUM4dklGUnlZVzV6Wm05eWJXRjBhVzl1Y3lCbWIzSWdaR1ZqY25sd2RHbHZiaUJyWlhrZ1pYaHdZVzV6YVc5dVhHNGdJQ0FnZG1GeUlGVXhJRDBnV3pCNE1EQXdNREF3TURBc0lEQjRNR1V3T1RCa01HSXNJREI0TVdNeE1qRmhNVFlzSURCNE1USXhZakUzTVdRc0lEQjRNemd5TkRNME1tTXNJREI0TXpZeVpETTVNamNzSURCNE1qUXpOakpsTTJFc0lEQjRNbUV6WmpJek16RXNJREI0TnpBME9EWTROVGdzSURCNE4yVTBNVFkxTlRNc0lEQjRObU0xWVRjeU5HVXNJREI0TmpJMU16ZG1ORFVzSURCNE5EZzJZelZqTnpRc0lEQjRORFkyTlRVeE4yWXNJREI0TlRRM1pUUTJOaklzSURCNE5XRTNOelJpTmprc0lEQjRaVEE1TUdRd1lqQXNJREI0WldVNU9XUmtZbUlzSURCNFptTTRNbU5oWVRZc0lEQjRaakk0WW1NM1lXUXNJREI0WkRoaU5HVTBPV01zSURCNFpEWmlaR1U1T1Rjc0lEQjRZelJoTm1abE9HRXNJREI0WTJGaFptWXpPREVzSURCNE9UQmtPR0k0WlRnc0lEQjRPV1ZrTVdJMVpUTXNJREI0T0dOallXRXlabVVzSURCNE9ESmpNMkZtWmpVc0lEQjRZVGhtWXpoall6UXNJREI0WVRabU5UZ3hZMllzSURCNFlqUmxaVGsyWkRJc0lEQjRZbUZsTnpsaVpEa3NJREI0WkdJelltSmlOMklzSURCNFpEVXpNbUkyTnpBc0lEQjRZemN5T1dFeE5tUXNJREI0WXpreU1HRmpOallzSURCNFpUTXhaamhtTlRjc0lEQjRaV1F4TmpneU5XTXNJREI0Wm1Zd1pEazFOREVzSURCNFpqRXdORGs0TkdFc0lEQjRZV0kzTTJRek1qTXNJREI0WVRVM1lXUmxNamdzSURCNFlqYzJNV001TXpVc0lEQjRZamsyT0dNME0yVXNJREI0T1RNMU4yVTNNR1lzSURCNE9XUTFaV1ZoTURRc0lEQjRPR1kwTldaa01Ua3NJREI0T0RFMFkyWXdNVElzSURCNE0ySmhZalppWTJJc0lEQjRNelZoTWpZMll6QXNJREI0TWpkaU9UY3haR1FzSURCNE1qbGlNRGRqWkRZc0lEQjRNRE00WmpWbVpUY3NJREI0TUdRNE5qVXlaV01zSURCNE1XWTVaRFExWmpFc0lEQjRNVEU1TkRRNFptRXNJREI0TkdKbE16QXpPVE1zSURCNE5EVmxZVEJsT1Rnc0lEQjROVGRtTVRFNU9EVXNJREI0TlRsbU9ERTBPR1VzSURCNE56TmpOek0zWW1Zc0lEQjROMlJqWlROaFlqUXNJREI0Tm1aa05USmtZVGtzSURCNE5qRmtZekl3WVRJc0lEQjRZV1EzTmpaa1pqWXNJREI0WVRNM1pqWXdabVFzSURCNFlqRTJORGMzWlRBc0lEQjRZbVkyWkRkaFpXSXNJREI0T1RVMU1qVTVaR0VzSURCNE9XSTFZalUwWkRFc0lEQjRPRGswTURRelkyTXNJREI0T0RjME9UUmxZemNzSURCNFpHUXpaVEExWVdVc0lEQjRaRE16TnpBNFlUVXNJREI0WXpFeVl6Rm1ZamdzSURCNFkyWXlOVEV5WWpNc0lEQjRaVFV4WVRNeE9ESXNJREI0WldJeE16TmpPRGtzSURCNFpqa3dPREppT1RRc0lEQjRaamN3TVRJMk9XWXNJREI0TkdSbE5tSmtORFlzSURCNE5ETmxabUl3TkdRc0lEQjROVEZtTkdFM05UQXNJREI0TldabVpHRmhOV0lzSURCNE56VmpNamc1Tm1Fc0lEQjROMkpqWWpnME5qRXNJREI0Tmpsa01Ea3pOMk1zSURCNE5qZGtPVGxsTnpjc0lEQjRNMlJoWldRMU1XVXNJREI0TXpOaE4yUTRNVFVzSURCNE1qRmlZMk5tTURnc0lEQjRNbVppTldNeU1ETXNJREI0TURVNFlXVXhNeklzSURCNE1HSTRNMlZqTXprc0lEQjRNVGs1T0daaU1qUXNJREI0TVRjNU1XWTJNbVlzSURCNE56WTBaR1EyT0dRc0lEQjROemcwTkdSaU9EWXNJREI0Tm1FMVptTmpPV0lzSURCNE5qUTFObU14T1RBc0lEQjROR1UyT1dVeVlURXNJREI0TkRBMk1HVm1ZV0VzSURCNE5USTNZbVk0WWpjc0lEQjROV00zTW1ZMVltTXNJREI0TURZd05XSmxaRFVzSURCNE1EZ3dZMkl6WkdVc0lEQjRNV0V4TjJFMFl6TXNJREI0TVRReFpXRTVZemdzSURCNE0yVXlNVGhoWmprc0lEQjRNekF5T0RnM1pqSXNJREI0TWpJek16a3daV1lzSURCNE1tTXpZVGxrWlRRc0lEQjRPVFprWkRBMk0yUXNJREI0T1Roa05EQmlNellzSURCNE9HRmpaakZqTW1Jc0lEQjRPRFJqTmpFeE1qQXNJREI0WVdWbU9UTXlNVEVzSURCNFlUQm1NRE5tTVdFc0lEQjRZakpsWWpJNE1EY3NJREI0WW1ObE1qSTFNR01zSURCNFpUWTVOVFpsTmpVc0lEQjRaVGc1WXpZek5tVXNJREI0Wm1FNE56YzBOek1zSURCNFpqUTRaVGM1Tnpnc0lEQjRaR1ZpTVRWaE5Ea3NJREI0WkRCaU9EVTNORElzSURCNFl6SmhNelF3TldZc0lEQjRZMk5oWVRSa05UUXNJREI0TkRGbFkyUmhaamNzSURCNE5HWmxOV1EzWm1Nc0lEQjROV1JtWldNd1pURXNJREI0TlRObU4yTmtaV0VzSURCNE56bGpPR1ZsWkdJc0lEQjROemRqTVdVelpEQXNJREI0TmpWa1lXWTBZMlFzSURCNE5tSmtNMlk1WXpZc0lEQjRNekZoTkdJeVlXWXNJREI0TTJaaFpHSm1ZVFFzSURCNE1tUmlObUU0WWprc0lEQjRNak5pWm1FMVlqSXNJREI0TURrNE1EZzJPRE1zSURCNE1EYzRPVGhpT0Rnc0lEQjRNVFU1TWpsak9UVXNJREI0TVdJNVlqa3hPV1VzSURCNFlURTNZekJoTkRjc0lEQjRZV1kzTlRBM05HTXNJREI0WW1RMlpURXdOVEVzSURCNFlqTTJOekZrTldFc0lEQjRPVGsxT0RObE5tSXNJREI0T1RjMU1UTXpOakFzSURCNE9EVTBZVEkwTjJRc0lEQjRPR0kwTXpJNU56WXNJREI0WkRFek5EWXlNV1lzSURCNFpHWXpaRFptTVRRc0lEQjRZMlF5TmpjNE1Ea3NJREI0WXpNeVpqYzFNRElzSURCNFpUa3hNRFUyTXpNc0lEQjRaVGN4T1RWaU16Z3NJREI0WmpVd01qUmpNalVzSURCNFptSXdZalF4TW1Vc0lEQjRPV0ZrTnpZeE9HTXNJREI0T1RSa1pUWmpPRGNzSURCNE9EWmpOVGRpT1dFc0lEQjRPRGhqWXpjMk9URXNJREI0WVRKbU16VTFZVEFzSURCNFlXTm1ZVFU0WVdJc0lEQjRZbVZsTVRSbVlqWXNJREI0WWpCbE9EUXlZbVFzSURCNFpXRTVaakE1WkRRc0lEQjRaVFE1TmpBMFpHWXNJREI0WmpZNFpERXpZeklzSURCNFpqZzROREZsWXprc0lEQjRaREppWWpOa1pqZ3NJREI0WkdOaU1qTXdaak1zSURCNFkyVmhPVEkzWldVc0lEQjRZekJoTURKaFpUVXNJREI0TjJFME4ySXhNMk1zSURCNE56UTBaV0pqTXpjc0lEQjROalkxTldGaU1tRXNJREI0TmpnMVkyRTJNakVzSURCNE5ESTJNemcxTVRBc0lEQjROR00yWVRnNE1XSXNJREI0TldVM01UbG1NRFlzSURCNE5UQTNPRGt5TUdRc0lEQjRNR0V3Wm1RNU5qUXNJREI0TURRd05tUTBObVlzSURCNE1UWXhaR016TnpJc0lEQjRNVGd4TkdObE56a3NJREI0TXpJeVltVmtORGdzSURCNE0yTXlNbVV3TkRNc0lEQjRNbVV6T1dZM05XVXNJREI0TWpBek1HWmhOVFVzSURCNFpXTTVZV0kzTURFc0lEQjRaVEk1TTJKaE1HRXNJREI0WmpBNE9HRmtNVGNzSURCNFptVTRNV0V3TVdNc0lEQjRaRFJpWlRnek1tUXNJREI0WkdGaU56aGxNallzSURCNFl6aGhZems1TTJJc0lEQjRZelpoTlRrME16QXNJREI0T1dOa01tUm1OVGtzSURCNE9USmtZbVF5TlRJc0lEQjRPREJqTUdNMU5HWXNJREI0T0dWak9XTTRORFFzSURCNFlUUm1ObVZpTnpVc0lEQjRZV0ZtWm1VMk4yVXNJREI0WWpobE5HWXhOak1zSURCNFlqWmxaR1pqTmpnc0lEQjRNR013WVRZM1lqRXNJREI0TURJd016WmhZbUVzSURCNE1UQXhPRGRrWVRjc0lEQjRNV1V4TVRjd1lXTXNJREI0TXpReVpUVXpPV1FzSURCNE0yRXlOelZsT1RZc0lEQjRNamd6WXpRNU9HSXNJREI0TWpZek5UUTBPREFzSURCNE4yTTBNakJtWlRrc0lEQjROekkwWWpBeVpUSXNJREI0TmpBMU1ERTFabVlzSURCNE5tVTFPVEU0WmpRc0lEQjRORFEyTmpOaVl6VXNJREI0TkdFMlpqTTJZMlVzSURCNE5UZzNOREl4WkRNc0lEQjROVFkzWkRKalpEZ3NJREI0TXpkaE1UQmpOMkVzSURCNE16bGhPREF4TnpFc0lEQjRNbUppTXpFMk5tTXNJREI0TWpWaVlURmlOamNzSURCNE1HWTROVE00TlRZc0lEQjRNREU0WXpNMU5XUXNJREI0TVRNNU56SXlOREFzSURCNE1XUTVaVEptTkdJc0lEQjRORGRsT1RZME1qSXNJREI0TkRsbE1EWTVNamtzSURCNE5XSm1ZamRsTXpRc0lEQjROVFZtTWpjek0yWXNJREI0TjJaalpEVXdNR1VzSURCNE56RmpORFZrTURVc0lEQjROak5rWmpSaE1UZ3NJREI0Tm1Sa05qUTNNVE1zSURCNFpEY3pNV1JqWTJFc0lEQjRaRGt6T0dReFl6RXNJREI0WTJJeU0yTTJaR01zSURCNFl6VXlZV05pWkRjc0lEQjRaV1l4TldVNFpUWXNJREI0WlRFeFkyVTFaV1FzSURCNFpqTXdOMll5WmpBc0lEQjRabVF3WldabVptSXNJREI0WVRjM09XSTBPVElzSURCNFlUazNNR0k1T1Rrc0lEQjRZbUkyWW1GbE9EUXNJREI0WWpVMk1tRXpPR1lzSURCNE9XWTFaRGd3WW1Vc0lEQjRPVEUxTkRoa1lqVXNJREI0T0RNMFpqbGhZVGdzSURCNE9HUTBOamszWVROZE8xeHVJQ0FnSUhaaGNpQlZNaUE5SUZzd2VEQXdNREF3TURBd0xDQXdlREJpTUdVd09UQmtMQ0F3ZURFMk1XTXhNakZoTENBd2VERmtNVEl4WWpFM0xDQXdlREpqTXpneU5ETTBMQ0F3ZURJM016WXlaRE01TENBd2VETmhNalF6TmpKbExDQXdlRE14TW1FelpqSXpMQ0F3ZURVNE56QTBPRFk0TENBd2VEVXpOMlUwTVRZMUxDQXdlRFJsTm1NMVlUY3lMQ0F3ZURRMU5qSTFNemRtTENBd2VEYzBORGcyWXpWakxDQXdlRGRtTkRZMk5UVXhMQ0F3ZURZeU5UUTNaVFEyTENBd2VEWTVOV0UzTnpSaUxDQXdlR0l3WlRBNU1HUXdMQ0F3ZUdKaVpXVTVPV1JrTENBd2VHRTJabU00TW1OaExDQXdlR0ZrWmpJNFltTTNMQ0F3ZURsalpEaGlOR1UwTENBd2VEazNaRFppWkdVNUxDQXdlRGhoWXpSaE5tWmxMQ0F3ZURneFkyRmhabVl6TENBd2VHVTRPVEJrT0dJNExDQXdlR1V6T1dWa01XSTFMQ0F3ZUdabE9HTmpZV0V5TENBd2VHWTFPREpqTTJGbUxDQXdlR00wWVRobVl6aGpMQ0F3ZUdObVlUWm1OVGd4TENBd2VHUXlZalJsWlRrMkxDQXdlR1E1WW1GbE56bGlMQ0F3ZURkaVpHSXpZbUppTENBd2VEY3daRFV6TW1JMkxDQXdlRFprWXpjeU9XRXhMQ0F3ZURZMll6a3lNR0ZqTENBd2VEVTNaVE14WmpobUxDQXdlRFZqWldReE5qZ3lMQ0F3ZURReFptWXdaRGsxTENBd2VEUmhaakV3TkRrNExDQXdlREl6WVdJM00yUXpMQ0F3ZURJNFlUVTNZV1JsTENBd2VETTFZamMyTVdNNUxDQXdlRE5sWWprMk9HTTBMQ0F3ZURCbU9UTTFOMlUzTENBd2VEQTBPV1ExWldWaExDQXdlREU1T0dZME5XWmtMQ0F3ZURFeU9ERTBZMll3TENBd2VHTmlNMkpoWWpaaUxDQXdlR013TXpWaE1qWTJMQ0F3ZUdSa01qZGlPVGN4TENBd2VHUTJNamxpTURkakxDQXdlR1UzTURNNFpqVm1MQ0F3ZUdWak1HUTROalV5TENBd2VHWXhNV1k1WkRRMUxDQXdlR1poTVRFNU5EUTRMQ0F3ZURrek5HSmxNekF6TENBd2VEazRORFZsWVRCbExDQXdlRGcxTlRkbU1URTVMQ0F3ZURobE5UbG1PREUwTENBd2VHSm1Oek5qTnpNM0xDQXdlR0kwTjJSalpUTmhMQ0F3ZUdFNU5tWmtOVEprTENBd2VHRXlOakZrWXpJd0xDQXdlR1kyWVdRM05qWmtMQ0F3ZUdaa1lUTTNaall3TENBd2VHVXdZakUyTkRjM0xDQXdlR1ZpWW1ZMlpEZGhMQ0F3ZUdSaE9UVTFNalU1TENBd2VHUXhPV0kxWWpVMExDQXdlR05qT0RrME1EUXpMQ0F3ZUdNM09EYzBPVFJsTENBd2VHRmxaR1F6WlRBMUxDQXdlR0UxWkRNek56QTRMQ0F3ZUdJNFl6RXlZekZtTENBd2VHSXpZMll5TlRFeUxDQXdlRGd5WlRVeFlUTXhMQ0F3ZURnNVpXSXhNek5qTENBd2VEazBaamt3T0RKaUxDQXdlRGxtWmpjd01USTJMQ0F3ZURRMk5HUmxObUprTENBd2VEUmtORE5sWm1Jd0xDQXdlRFV3TlRGbU5HRTNMQ0F3ZURWaU5XWm1aR0ZoTENBd2VEWmhOelZqTWpnNUxDQXdlRFl4TjJKallqZzBMQ0F3ZURkak5qbGtNRGt6TENBd2VEYzNOamRrT1RsbExDQXdlREZsTTJSaFpXUTFMQ0F3ZURFMU16TmhOMlE0TENBd2VEQTRNakZpWTJObUxDQXdlREF6TW1aaU5XTXlMQ0F3ZURNeU1EVTRZV1V4TENBd2VETTVNR0k0TTJWakxDQXdlREkwTVRrNU9HWmlMQ0F3ZURKbU1UYzVNV1kyTENBd2VEaGtOelkwWkdRMkxDQXdlRGcyTnpnME5HUmlMQ0F3ZURsaU5tRTFabU5qTENBd2VEa3dOalExTm1NeExDQXdlR0V4TkdVMk9XVXlMQ0F3ZUdGaE5EQTJNR1ZtTENBd2VHSTNOVEkzWW1ZNExDQXdlR0pqTldNM01tWTFMQ0F3ZUdRMU1EWXdOV0psTENBd2VHUmxNRGd3WTJJekxDQXdlR016TVdFeE4yRTBMQ0F3ZUdNNE1UUXhaV0U1TENBd2VHWTVNMlV5TVRoaExDQXdlR1l5TXpBeU9EZzNMQ0F3ZUdWbU1qSXpNemt3TENBd2VHVTBNbU16WVRsa0xDQXdlRE5rT1Raa1pEQTJMQ0F3ZURNMk9UaGtOREJpTENBd2VESmlPR0ZqWmpGakxDQXdlREl3T0RSak5qRXhMQ0F3ZURFeFlXVm1PVE15TENBd2VERmhZVEJtTURObUxDQXdlREEzWWpKbFlqSTRMQ0F3ZURCalltTmxNakkxTENBd2VEWTFaVFk1TlRabExDQXdlRFpsWlRnNVl6WXpMQ0F3ZURjelptRTROemMwTENBd2VEYzRaalE0WlRjNUxDQXdlRFE1WkdWaU1UVmhMQ0F3ZURReVpEQmlPRFUzTENBd2VEVm1ZekpoTXpRd0xDQXdlRFUwWTJOaFlUUmtMQ0F3ZUdZM05ERmxZMlJoTENBd2VHWmpOR1psTldRM0xDQXdlR1V4TldSbVpXTXdMQ0F3ZUdWaE5UTm1OMk5rTENBd2VHUmlOemxqT0dWbExDQXdlR1F3Tnpkak1XVXpMQ0F3ZUdOa05qVmtZV1kwTENBd2VHTTJObUprTTJZNUxDQXdlR0ZtTXpGaE5HSXlMQ0F3ZUdFME0yWmhaR0ptTENBd2VHSTVNbVJpTm1FNExDQXdlR0l5TWpOaVptRTFMQ0F3ZURnek1EazRNRGcyTENBd2VEZzRNRGM0T1RoaUxDQXdlRGsxTVRVNU1qbGpMQ0F3ZURsbE1XSTVZamt4TENBd2VEUTNZVEUzWXpCaExDQXdlRFJqWVdZM05UQTNMQ0F3ZURVeFltUTJaVEV3TENBd2VEVmhZak0yTnpGa0xDQXdlRFppT1RrMU9ETmxMQ0F3ZURZd09UYzFNVE16TENBd2VEZGtPRFUwWVRJMExDQXdlRGMyT0dJME16STVMQ0F3ZURGbVpERXpORFl5TENBd2VERTBaR1l6WkRabUxDQXdlREE1WTJReU5qYzRMQ0F3ZURBeVl6TXlaamMxTENBd2VETXpaVGt4TURVMkxDQXdlRE00WlRjeE9UVmlMQ0F3ZURJMVpqVXdNalJqTENBd2VESmxabUl3WWpReExDQXdlRGhqT1dGa056WXhMQ0F3ZURnM09UUmtaVFpqTENBd2VEbGhPRFpqTlRkaUxDQXdlRGt4T0Roall6YzJMQ0F3ZUdFd1lUSm1NelUxTENBd2VHRmlZV05tWVRVNExDQXdlR0kyWW1WbE1UUm1MQ0F3ZUdKa1lqQmxPRFF5TENBd2VHUTBaV0U1WmpBNUxDQXdlR1JtWlRRNU5qQTBMQ0F3ZUdNeVpqWTRaREV6TENBd2VHTTVaamc0TkRGbExDQXdlR1k0WkRKaVlqTmtMQ0F3ZUdZelpHTmlNak13TENBd2VHVmxZMlZoT1RJM0xDQXdlR1UxWXpCaE1ESmhMQ0F3ZUROak4yRTBOMkl4TENBd2VETTNOelEwWldKakxDQXdlREpoTmpZMU5XRmlMQ0F3ZURJeE5qZzFZMkUyTENBd2VERXdOREkyTXpnMUxDQXdlREZpTkdNMllUZzRMQ0F3ZURBMk5XVTNNVGxtTENBd2VEQmtOVEEzT0RreUxDQXdlRFkwTUdFd1ptUTVMQ0F3ZURabU1EUXdObVEwTENBd2VEY3lNVFl4WkdNekxDQXdlRGM1TVRneE5HTmxMQ0F3ZURRNE16SXlZbVZrTENBd2VEUXpNMk15TW1Vd0xDQXdlRFZsTW1Vek9XWTNMQ0F3ZURVMU1qQXpNR1poTENBd2VEQXhaV001WVdJM0xDQXdlREJoWlRJNU0ySmhMQ0F3ZURFM1pqQTRPR0ZrTENBd2VERmpabVU0TVdFd0xDQXdlREprWkRSaVpUZ3pMQ0F3ZURJMlpHRmlOemhsTENBd2VETmlZemhoWXprNUxDQXdlRE13WXpaaE5UazBMQ0F3ZURVNU9XTmtNbVJtTENBd2VEVXlPVEprWW1ReUxDQXdlRFJtT0RCak1HTTFMQ0F3ZURRME9HVmpPV000TENBd2VEYzFZVFJtTm1WaUxDQXdlRGRsWVdGbVptVTJMQ0F3ZURZellqaGxOR1l4TENBd2VEWTRZalpsWkdaakxDQXdlR0l4TUdNd1lUWTNMQ0F3ZUdKaE1ESXdNelpoTENBd2VHRTNNVEF4T0Rka0xDQXdlR0ZqTVdVeE1UY3dMQ0F3ZURsa016UXlaVFV6TENBd2VEazJNMkV5TnpWbExDQXdlRGhpTWpnell6UTVMQ0F3ZURnd01qWXpOVFEwTENBd2VHVTVOMk0wTWpCbUxDQXdlR1V5TnpJMFlqQXlMQ0F3ZUdabU5qQTFNREUxTENBd2VHWTBObVUxT1RFNExDQXdlR00xTkRRMk5qTmlMQ0F3ZUdObE5HRTJaak0yTENBd2VHUXpOVGczTkRJeExDQXdlR1E0TlRZM1pESmpMQ0F3ZURkaE16ZGhNVEJqTENBd2VEY3hNemxoT0RBeExDQXdlRFpqTW1KaU16RTJMQ0F3ZURZM01qVmlZVEZpTENBd2VEVTJNR1k0TlRNNExDQXdlRFZrTURFNFl6TTFMQ0F3ZURRd01UTTVOekl5TENBd2VEUmlNV1E1WlRKbUxDQXdlREl5TkRkbE9UWTBMQ0F3ZURJNU5EbGxNRFk1TENBd2VETTBOV0ptWWpkbExDQXdlRE5tTlRWbU1qY3pMQ0F3ZURCbE4yWmpaRFV3TENBd2VEQTFOekZqTkRWa0xDQXdlREU0TmpOa1pqUmhMQ0F3ZURFek5tUmtOalEzTENBd2VHTmhaRGN6TVdSakxDQXdlR014WkRrek9HUXhMQ0F3ZUdSalkySXlNMk0yTENBd2VHUTNZelV5WVdOaUxDQXdlR1UyWldZeE5XVTRMQ0F3ZUdWa1pURXhZMlUxTENBd2VHWXdaak13TjJZeUxDQXdlR1ppWm1Rd1pXWm1MQ0F3ZURreVlUYzNPV0kwTENBd2VEazVZVGszTUdJNUxDQXdlRGcwWW1JMlltRmxMQ0F3ZURobVlqVTJNbUV6TENBd2VHSmxPV1kxWkRnd0xDQXdlR0kxT1RFMU5EaGtMQ0F3ZUdFNE9ETTBaamxoTENBd2VHRXpPR1EwTmprM1hUdGNiaUFnSUNCMllYSWdWVE1nUFNCYk1IZ3dNREF3TURBd01Dd2dNSGd3WkRCaU1HVXdPU3dnTUhneFlURTJNV014TWl3Z01IZ3hOekZrTVRJeFlpd2dNSGd6TkRKak16Z3lOQ3dnTUhnek9USTNNell5WkN3Z01IZ3laVE5oTWpRek5pd2dNSGd5TXpNeE1tRXpaaXdnTUhnMk9EVTROekEwT0N3Z01IZzJOVFV6TjJVME1Td2dNSGczTWpSbE5tTTFZU3dnTUhnM1pqUTFOakkxTXl3Z01IZzFZemMwTkRnMll5d2dNSGcxTVRkbU5EWTJOU3dnTUhnME5qWXlOVFEzWlN3Z01IZzBZalk1TldFM055d2dNSGhrTUdJd1pUQTVNQ3dnTUhoa1pHSmlaV1U1T1N3Z01IaGpZV0UyWm1NNE1pd2dNSGhqTjJGa1pqSTRZaXdnTUhobE5EbGpaRGhpTkN3Z01IaGxPVGszWkRaaVpDd2dNSGhtWlRoaFl6UmhOaXdnTUhobU16Z3hZMkZoWml3Z01IaGlPR1U0T1RCa09Dd2dNSGhpTldVek9XVmtNU3dnTUhoaE1tWmxPR05qWVN3Z01IaGhabVkxT0RKak15d2dNSGc0WTJNMFlUaG1ZeXdnTUhnNE1XTm1ZVFptTlN3Z01IZzVObVF5WWpSbFpTd2dNSGc1WW1RNVltRmxOeXdnTUhoaVlqZGlaR0l6WWl3Z01IaGlOamN3WkRVek1pd2dNSGhoTVRaa1l6Y3lPU3dnTUhoaFl6WTJZemt5TUN3Z01IZzRaalUzWlRNeFppd2dNSGc0TWpWalpXUXhOaXdnTUhnNU5UUXhabVl3WkN3Z01IZzVPRFJoWmpFd05Dd2dNSGhrTXpJellXSTNNeXdnTUhoa1pUSTRZVFUzWVN3Z01IaGpPVE0xWWpjMk1Td2dNSGhqTkRObFlqazJPQ3dnTUhobE56Qm1PVE0xTnl3Z01IaGxZVEEwT1dRMVpTd2dNSGhtWkRFNU9HWTBOU3dnTUhobU1ERXlPREUwWXl3Z01IZzJZbU5pTTJKaFlpd2dNSGcyTm1Nd016VmhNaXdnTUhnM01XUmtNamRpT1N3Z01IZzNZMlEyTWpsaU1Dd2dNSGcxWm1VM01ETTRaaXdnTUhnMU1tVmpNR1E0Tml3Z01IZzBOV1l4TVdZNVpDd2dNSGcwT0daaE1URTVOQ3dnTUhnd016a3pOR0psTXl3Z01IZ3daVGs0TkRWbFlTd2dNSGd4T1RnMU5UZG1NU3dnTUhneE5EaGxOVGxtT0N3Z01IZ3pOMkptTnpOak55d2dNSGd6WVdJME4yUmpaU3dnTUhneVpHRTVObVprTlN3Z01IZ3lNR0V5TmpGa1l5d2dNSGcyWkdZMllXUTNOaXdnTUhnMk1HWmtZVE0zWml3Z01IZzNOMlV3WWpFMk5Dd2dNSGczWVdWaVltWTJaQ3dnTUhnMU9XUmhPVFUxTWl3Z01IZzFOR1F4T1dJMVlpd2dNSGcwTTJOak9EazBNQ3dnTUhnMFpXTTNPRGMwT1N3Z01IZ3dOV0ZsWkdRelpTd2dNSGd3T0dFMVpETXpOeXdnTUhneFptSTRZekV5WXl3Z01IZ3hNbUl6WTJZeU5Td2dNSGd6TVRneVpUVXhZU3dnTUhnell6ZzVaV0l4TXl3Z01IZ3lZamswWmprd09Dd2dNSGd5TmpsbVpqY3dNU3dnTUhoaVpEUTJOR1JsTml3Z01IaGlNRFJrTkRObFppd2dNSGhoTnpVd05URm1OQ3dnTUhoaFlUVmlOV1ptWkN3Z01IZzRPVFpoTnpWak1pd2dNSGc0TkRZeE4ySmpZaXdnTUhnNU16ZGpOamxrTUN3Z01IZzVaVGMzTmpka09Td2dNSGhrTlRGbE0yUmhaU3dnTUhoa09ERTFNek5oTnl3Z01IaGpaakE0TWpGaVl5d2dNSGhqTWpBek1tWmlOU3dnTUhobE1UTXlNRFU0WVN3Z01IaGxZek01TUdJNE15d2dNSGhtWWpJME1UazVPQ3dnTUhobU5qSm1NVGM1TVN3Z01IaGtOamhrTnpZMFpDd2dNSGhrWWpnMk56ZzBOQ3dnTUhoall6bGlObUUxWml3Z01IaGpNVGt3TmpRMU5pd2dNSGhsTW1FeE5HVTJPU3dnTUhobFptRmhOREEyTUN3Z01IaG1PR0kzTlRJM1lpd2dNSGhtTldKak5XTTNNaXdnTUhoaVpXUTFNRFl3TlN3Z01IaGlNMlJsTURnd1l5d2dNSGhoTkdNek1XRXhOeXdnTUhoaE9XTTRNVFF4WlN3Z01IZzRZV1k1TTJVeU1Td2dNSGc0TjJZeU16QXlPQ3dnTUhnNU1HVm1Nakl6TXl3Z01IZzVaR1UwTW1NellTd2dNSGd3TmpOa09UWmtaQ3dnTUhnd1lqTTJPVGhrTkN3Z01IZ3hZekppT0dGalppd2dNSGd4TVRJd09EUmpOaXdnTUhnek1qRXhZV1ZtT1N3Z01IZ3paakZoWVRCbU1Dd2dNSGd5T0RBM1lqSmxZaXdnTUhneU5UQmpZbU5sTWl3Z01IZzJaVFkxWlRZNU5Td2dNSGcyTXpabFpUZzVZeXdnTUhnM05EY3pabUU0Tnl3Z01IZzNPVGM0WmpRNFpTd2dNSGcxWVRRNVpHVmlNU3dnTUhnMU56UXlaREJpT0N3Z01IZzBNRFZtWXpKaE15d2dNSGcwWkRVMFkyTmhZU3dnTUhoa1lXWTNOREZsWXl3Z01IaGtOMlpqTkdabE5Td2dNSGhqTUdVeE5XUm1aU3dnTUhoalpHVmhOVE5tTnl3Z01IaGxaV1JpTnpsak9Dd2dNSGhsTTJRd056ZGpNU3dnTUhobU5HTmtOalZrWVN3Z01IaG1PV00yTm1Ka015d2dNSGhpTW1GbU16RmhOQ3dnTUhoaVptRTBNMlpoWkN3Z01IaGhPR0k1TW1SaU5pd2dNSGhoTldJeU1qTmlaaXdnTUhnNE5qZ3pNRGs0TUN3Z01IZzRZamc0TURjNE9Td2dNSGc1WXprMU1UVTVNaXdnTUhnNU1UbGxNV0k1WWl3Z01IZ3dZVFEzWVRFM1l5d2dNSGd3TnpSallXWTNOU3dnTUhneE1EVXhZbVEyWlN3Z01IZ3haRFZoWWpNMk55d2dNSGd6WlRaaU9UazFPQ3dnTUhnek16WXdPVGMxTVN3Z01IZ3lORGRrT0RVMFlTd2dNSGd5T1RjMk9HSTBNeXdnTUhnMk1qRm1aREV6TkN3Z01IZzJaakUwWkdZelpDd2dNSGczT0RBNVkyUXlOaXdnTUhnM05UQXlZek15Wml3Z01IZzFOak16WlRreE1Dd2dNSGcxWWpNNFpUY3hPU3dnTUhnMFl6STFaalV3TWl3Z01IZzBNVEpsWm1Jd1lpd2dNSGcyTVRoak9XRmtOeXdnTUhnMll6ZzNPVFJrWlN3Z01IZzNZamxoT0Raak5Td2dNSGczTmpreE9EaGpZeXdnTUhnMU5XRXdZVEptTXl3Z01IZzFPR0ZpWVdObVlTd2dNSGcwWm1JMlltVmxNU3dnTUhnME1tSmtZakJsT0N3Z01IZ3dPV1EwWldFNVppd2dNSGd3TkdSbVpUUTVOaXdnTUhneE0yTXlaalk0WkN3Z01IZ3haV001WmpnNE5Dd2dNSGd6WkdZNFpESmlZaXdnTUhnek1HWXpaR05pTWl3Z01IZ3lOMlZsWTJWaE9Td2dNSGd5WVdVMVl6QmhNQ3dnTUhoaU1UTmpOMkUwTnl3Z01IaGlZek0zTnpRMFpTd2dNSGhoWWpKaE5qWTFOU3dnTUhoaE5qSXhOamcxWXl3Z01IZzROVEV3TkRJMk15d2dNSGc0T0RGaU5HTTJZU3dnTUhnNVpqQTJOV1UzTVN3Z01IZzVNakJrTlRBM09Dd2dNSGhrT1RZME1HRXdaaXdnTUhoa05EWm1NRFF3Tml3Z01IaGpNemN5TVRZeFpDd2dNSGhqWlRjNU1UZ3hOQ3dnTUhobFpEUTRNekl5WWl3Z01IaGxNRFF6TTJNeU1pd2dNSGhtTnpWbE1tVXpPU3dnTUhobVlUVTFNakF6TUN3Z01IaGlOekF4WldNNVlTd2dNSGhpWVRCaFpUSTVNeXdnTUhoaFpERTNaakE0T0N3Z01IaGhNREZqWm1VNE1Td2dNSGc0TXpKa1pEUmlaU3dnTUhnNFpUSTJaR0ZpTnl3Z01IZzVPVE5pWXpoaFl5d2dNSGc1TkRNd1l6WmhOU3dnTUhoa1pqVTVPV05rTWl3Z01IaGtNalV5T1RKa1lpd2dNSGhqTlRSbU9EQmpNQ3dnTUhoak9EUTBPR1ZqT1N3Z01IaGxZamMxWVRSbU5pd2dNSGhsTmpkbFlXRm1aaXdnTUhobU1UWXpZamhsTkN3Z01IaG1Zelk0WWpabFpDd2dNSGcyTjJJeE1HTXdZU3dnTUhnMllXSmhNREl3TXl3Z01IZzNaR0UzTVRBeE9Dd2dNSGczTUdGak1XVXhNU3dnTUhnMU16bGtNelF5WlN3Z01IZzFaVGsyTTJFeU55d2dNSGcwT1RoaU1qZ3pZeXdnTUhnME5EZ3dNall6TlN3Z01IZ3dabVU1TjJNME1pd2dNSGd3TW1VeU56STBZaXdnTUhneE5XWm1OakExTUN3Z01IZ3hPR1kwTm1VMU9Td2dNSGd6WW1NMU5EUTJOaXdnTUhnek5tTmxOR0UyWml3Z01IZ3lNV1F6TlRnM05Dd2dNSGd5WTJRNE5UWTNaQ3dnTUhnd1l6ZGhNemRoTVN3Z01IZ3dNVGN4TXpsaE9Dd2dNSGd4Tmpaak1tSmlNeXdnTUhneFlqWTNNalZpWVN3Z01IZ3pPRFUyTUdZNE5Td2dNSGd6TlRWa01ERTRZeXdnTUhneU1qUXdNVE01Tnl3Z01IZ3laalJpTVdRNVpTd2dNSGcyTkRJeU5EZGxPU3dnTUhnMk9USTVORGxsTUN3Z01IZzNaVE0wTldKbVlpd2dNSGczTXpObU5UVm1NaXdnTUhnMU1EQmxOMlpqWkN3Z01IZzFaREExTnpGak5Dd2dNSGcwWVRFNE5qTmtaaXdnTUhnME56RXpObVJrTml3Z01IaGtZMk5oWkRjek1Td2dNSGhrTVdNeFpEa3pPQ3dnTUhoak5tUmpZMkl5TXl3Z01IaGpZbVEzWXpVeVlTd2dNSGhsT0dVMlpXWXhOU3dnTUhobE5XVmtaVEV4WXl3Z01IaG1NbVl3WmpNd055d2dNSGhtWm1aaVptUXdaU3dnTUhoaU5Ea3lZVGMzT1N3Z01IaGlPVGs1WVRrM01Dd2dNSGhoWlRnMFltSTJZaXdnTUhoaE16aG1ZalUyTWl3Z01IZzRNR0psT1dZMVpDd2dNSGc0WkdJMU9URTFOQ3dnTUhnNVlXRTRPRE0wWml3Z01IZzVOMkV6T0dRME5sMDdYRzRnSUNBZ2RtRnlJRlUwSUQwZ1d6QjRNREF3TURBd01EQXNJREI0TURrd1pEQmlNR1VzSURCNE1USXhZVEUyTVdNc0lEQjRNV0l4TnpGa01USXNJREI0TWpRek5ESmpNemdzSURCNE1tUXpPVEkzTXpZc0lEQjRNell5WlROaE1qUXNJREI0TTJZeU16TXhNbUVzSURCNE5EZzJPRFU0TnpBc0lEQjROREUyTlRVek4yVXNJREI0TldFM01qUmxObU1zSURCNE5UTTNaalExTmpJc0lEQjRObU0xWXpjME5EZ3NJREI0TmpVMU1UZG1ORFlzSURCNE4yVTBOall5TlRRc0lEQjROemMwWWpZNU5XRXNJREI0T1RCa01HSXdaVEFzSURCNE9UbGtaR0ppWldVc0lEQjRPREpqWVdFMlptTXNJREI0T0dKak4yRmtaaklzSURCNFlqUmxORGxqWkRnc0lEQjRZbVJsT1RrM1pEWXNJREI0WVRabVpUaGhZelFzSURCNFlXWm1Nemd4WTJFc0lEQjRaRGhpT0dVNE9UQXNJREI0WkRGaU5XVXpPV1VzSURCNFkyRmhNbVpsT0dNc0lEQjRZek5oWm1ZMU9ESXNJREI0Wm1NNFkyTTBZVGdzSURCNFpqVTRNV05tWVRZc0lEQjRaV1U1Tm1ReVlqUXNJREI0WlRjNVltUTVZbUVzSURCNE0ySmlZamRpWkdJc0lEQjRNekppTmpjd1pEVXNJREI0TWpsaE1UWmtZemNzSURCNE1qQmhZelkyWXprc0lEQjRNV1k0WmpVM1pUTXNJREI0TVRZNE1qVmpaV1FzSURCNE1HUTVOVFF4Wm1Zc0lEQjRNRFE1T0RSaFpqRXNJREI0TnpOa016SXpZV0lzSURCNE4yRmtaVEk0WVRVc0lEQjROakZqT1RNMVlqY3NJREI0Tmpoak5ETmxZamtzSURCNE5UZGxOekJtT1RNc0lEQjROV1ZsWVRBME9XUXNJREI0TkRWbVpERTVPR1lzSURCNE5HTm1NREV5T0RFc0lEQjRZV0kyWW1OaU0ySXNJREI0WVRJMk5tTXdNelVzSURCNFlqazNNV1JrTWpjc0lEQjRZakEzWTJRMk1qa3NJREI0T0dZMVptVTNNRE1zSURCNE9EWTFNbVZqTUdRc0lEQjRPV1EwTldZeE1XWXNJREI0T1RRME9HWmhNVEVzSURCNFpUTXdNemt6TkdJc0lEQjRaV0V3WlRrNE5EVXNJREI0WmpFeE9UZzFOVGNzSURCNFpqZ3hORGhsTlRrc0lEQjRZemN6TjJKbU56TXNJREI0WTJVellXSTBOMlFzSURCNFpEVXlaR0U1Tm1Zc0lEQjRaR015TUdFeU5qRXNJREI0TnpZMlpHWTJZV1FzSURCNE4yWTJNR1prWVRNc0lEQjROalEzTjJVd1lqRXNJREI0Tm1RM1lXVmlZbVlzSURCNE5USTFPV1JoT1RVc0lEQjROV0kxTkdReE9XSXNJREI0TkRBME0yTmpPRGtzSURCNE5EazBaV00zT0Rjc0lEQjRNMlV3TldGbFpHUXNJREI0TXpjd09HRTFaRE1zSURCNE1tTXhabUk0WXpFc0lEQjRNalV4TW1JelkyWXNJREI0TVdFek1UZ3laVFVzSURCNE1UTXpZemc1WldJc0lEQjRNRGd5WWprMFpqa3NJREI0TURFeU5qbG1aamNzSURCNFpUWmlaRFEyTkdRc0lEQjRaV1ppTURSa05ETXNJREI0WmpSaE56VXdOVEVzSURCNFptUmhZVFZpTldZc0lEQjRZekk0T1RaaE56VXNJREI0WTJJNE5EWXhOMklzSURCNFpEQTVNemRqTmprc0lEQjRaRGs1WlRjM05qY3NJREI0WVdWa05URmxNMlFzSURCNFlUZGtPREUxTXpNc0lEQjRZbU5qWmpBNE1qRXNJREI0WWpWak1qQXpNbVlzSURCNE9HRmxNVE15TURVc0lEQjRPRE5sWXpNNU1HSXNJREI0T1RobVlqSTBNVGtzSURCNE9URm1OakptTVRjc0lEQjROR1JrTmpoa056WXNJREI0TkRSa1lqZzJOemdzSURCNE5XWmpZemxpTm1Fc0lEQjROVFpqTVRrd05qUXNJREI0TmpsbE1tRXhOR1VzSURCNE5qQmxabUZoTkRBc0lEQjROMkptT0dJM05USXNJREI0TnpKbU5XSmpOV01zSURCNE1EVmlaV1ExTURZc0lEQjRNR05pTTJSbE1EZ3NJREI0TVRkaE5HTXpNV0VzSURCNE1XVmhPV000TVRRc0lEQjRNakU0WVdZNU0yVXNJREI0TWpnNE4yWXlNekFzSURCNE16TTVNR1ZtTWpJc0lEQjRNMkU1WkdVME1tTXNJREI0WkdRd05qTmtPVFlzSURCNFpEUXdZak0yT1Rnc0lEQjRZMll4WXpKaU9HRXNJREI0WXpZeE1USXdPRFFzSURCNFpqa3pNakV4WVdVc0lEQjRaakF6WmpGaFlUQXNJREI0WldJeU9EQTNZaklzSURCNFpUSXlOVEJqWW1Nc0lEQjRPVFUyWlRZMVpUWXNJREI0T1dNMk16WmxaVGdzSURCNE9EYzNORGN6Wm1Fc0lEQjRPR1UzT1RjNFpqUXNJREI0WWpFMVlUUTVaR1VzSURCNFlqZzFOelF5WkRBc0lEQjRZVE0wTURWbVl6SXNJREI0WVdFMFpEVTBZMk1zSURCNFpXTmtZV1kzTkRFc0lEQjRaVFZrTjJaak5HWXNJREI0Wm1Wak1HVXhOV1FzSURCNFpqZGpaR1ZoTlRNc0lEQjRZemhsWldSaU56a3NJREI0WXpGbE0yUXdOemNzSURCNFpHRm1OR05rTmpVc0lEQjRaRE5tT1dNMk5tSXNJREI0WVRSaU1tRm1NekVzSURCNFlXUmlabUUwTTJZc0lEQjRZalpoT0dJNU1tUXNJREI0WW1aaE5XSXlNak1zSURCNE9EQTROamd6TURrc0lEQjRPRGs0WWpnNE1EY3NJREI0T1RJNVl6azFNVFVzSURCNE9XSTVNVGxsTVdJc0lEQjROMk13WVRRM1lURXNJREI0TnpVd056UmpZV1lzSURCNE5tVXhNRFV4WW1Rc0lEQjROamN4WkRWaFlqTXNJREI0TlRnelpUWmlPVGtzSURCNE5URXpNell3T1Rjc0lEQjROR0V5TkRka09EVXNJREI0TkRNeU9UYzJPR0lzSURCNE16UTJNakZtWkRFc0lEQjRNMlEyWmpFMFpHWXNJREI0TWpZM09EQTVZMlFzSURCNE1tWTNOVEF5WXpNc0lEQjRNVEExTmpNelpUa3NJREI0TVRrMVlqTTRaVGNzSURCNE1ESTBZekkxWmpVc0lEQjRNR0kwTVRKbFptSXNJREI0WkRjMk1UaGpPV0VzSURCNFpHVTJZemczT1RRc0lEQjRZelUzWWpsaE9EWXNJREI0WTJNM05qa3hPRGdzSURCNFpqTTFOV0V3WVRJc0lEQjRabUUxT0dGaVlXTXNJREI0WlRFMFptSTJZbVVzSURCNFpUZzBNbUprWWpBc0lEQjRPV1l3T1dRMFpXRXNJREI0T1RZd05HUm1aVFFzSURCNE9HUXhNMk15WmpZc0lEQjRPRFF4WldNNVpqZ3NJREI0WW1JelpHWTRaRElzSURCNFlqSXpNR1l6WkdNc0lEQjRZVGt5TjJWbFkyVXNJREI0WVRBeVlXVTFZekFzSURCNE5EZGlNVE5qTjJFc0lEQjROR1ZpWXpNM056UXNJREI0TlRWaFlqSmhOallzSURCNE5XTmhOakl4Tmpnc0lEQjROak00TlRFd05ESXNJREI0Tm1FNE9ERmlOR01zSURCNE56RTVaakEyTldVc0lEQjROemc1TWpCa05UQXNJREI0TUdaa09UWTBNR0VzSURCNE1EWmtORFptTURRc0lEQjRNV1JqTXpjeU1UWXNJREI0TVRSalpUYzVNVGdzSURCNE1tSmxaRFE0TXpJc0lEQjRNakpsTURRek0yTXNJREI0TXpsbU56VmxNbVVzSURCNE16Qm1ZVFUxTWpBc0lEQjRPV0ZpTnpBeFpXTXNJREI0T1ROaVlUQmhaVElzSURCNE9EaGhaREUzWmpBc0lEQjRPREZoTURGalptVXNJREI0WW1VNE16SmtaRFFzSURCNFlqYzRaVEkyWkdFc0lEQjRZV001T1ROaVl6Z3NJREI0WVRVNU5ETXdZellzSURCNFpESmtaalU1T1dNc0lEQjRaR0prTWpVeU9USXNJREI0WXpCak5UUm1PREFzSURCNFl6bGpPRFEwT0dVc0lEQjRaalpsWWpjMVlUUXNJREI0Wm1abE5qZGxZV0VzSURCNFpUUm1NVFl6WWpnc0lEQjRaV1JtWXpZNFlqWXNJREI0TUdFMk4ySXhNR01zSURCNE1ETTJZV0poTURJc0lEQjRNVGczWkdFM01UQXNJREI0TVRFM01HRmpNV1VzSURCNE1tVTFNemxrTXpRc0lEQjRNamMxWlRrMk0yRXNJREI0TTJNME9UaGlNamdzSURCNE16VTBORGd3TWpZc0lEQjROREl3Wm1VNU4yTXNJREI0TkdJd01tVXlOeklzSURCNE5UQXhOV1ptTmpBc0lEQjROVGt4T0dZME5tVXNJREI0TmpZelltTTFORFFzSURCNE5tWXpObU5sTkdFc0lEQjROelF5TVdRek5UZ3NJREI0TjJReVkyUTROVFlzSURCNFlURXdZemRoTXpjc0lEQjRZVGd3TVRjeE16a3NJREI0WWpNeE5qWmpNbUlzSURCNFltRXhZalkzTWpVc0lEQjRPRFV6T0RVMk1HWXNJREI0T0dNek5UVmtNREVzSURCNE9UY3lNalF3TVRNc0lEQjRPV1V5WmpSaU1XUXNJREI0WlRrMk5ESXlORGNzSURCNFpUQTJPVEk1TkRrc0lEQjRabUkzWlRNME5XSXNJREI0WmpJM016Tm1OVFVzSURCNFkyUTFNREJsTjJZc0lEQjRZelExWkRBMU56RXNJREI0WkdZMFlURTROak1zSURCNFpEWTBOekV6Tm1Rc0lEQjRNekZrWTJOaFpEY3NJREI0TXpoa01XTXhaRGtzSURCNE1qTmpObVJqWTJJc0lEQjRNbUZqWW1RM1l6VXNJREI0TVRWbE9HVTJaV1lzSURCNE1XTmxOV1ZrWlRFc0lEQjRNRGRtTW1Zd1pqTXNJREI0TUdWbVptWmlabVFzSURCNE56bGlORGt5WVRjc0lEQjROekJpT1RrNVlUa3NJREI0Tm1KaFpUZzBZbUlzSURCNE5qSmhNemhtWWpVc0lEQjROV1E0TUdKbE9XWXNJREI0TlRRNFpHSTFPVEVzSURCNE5HWTVZV0U0T0RNc0lEQjRORFk1TjJFek9HUmRPMXh1WEc0Z0lDQWdablZ1WTNScGIyNGdZMjl1ZG1WeWRGUnZTVzUwTXpJb1lubDBaWE1wSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJRnRkTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHSjVkR1Z6TG14bGJtZDBhRHNnYVNBclBTQTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhRdWNIVnphQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvWW5sMFpYTmJhU0FnSUNCZElEdzhJREkwS1NCOFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tHSjVkR1Z6VzJrZ0t5QXhYU0E4UENBeE5pa2dmRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2hpZVhSbGMxdHBJQ3NnTWwwZ1BEd2dJRGdwSUh4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lubDBaWE5iYVNBcklETmRYRzRnSUNBZ0lDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlFRkZVeUE5SUdaMWJtTjBhVzl1S0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1FVVlRLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1JYSnliM0lvSjBGRlV5QnRkWE4wSUdKbElHbHVjM1JoYm1sMFlYUmxaQ0IzYVhSb0lHQnVaWGRnSnlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHaHBjeXdnSjJ0bGVTY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCamIyVnlZMlZCY25KaGVTaHJaWGtzSUhSeWRXVXBYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCeVpYQmhjbVVvS1R0Y2JpQWdJQ0I5WEc1Y2JseHVJQ0FnSUVGRlV5NXdjbTkwYjNSNWNHVXVYM0J5WlhCaGNtVWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnY205MWJtUnpJRDBnYm5WdFltVnlUMlpTYjNWdVpITmJkR2hwY3k1clpYa3ViR1Z1WjNSb1hUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKdmRXNWtjeUE5UFNCdWRXeHNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oybHVkbUZzYVdRZ2EyVjVJSE5wZW1VZ0tHMTFjM1FnWW1VZ01UWXNJREkwSUc5eUlETXlJR0o1ZEdWektTY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdaVzVqY25sd2RHbHZiaUJ5YjNWdVpDQnJaWGx6WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMHRsSUQwZ1cxMDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1pHVmpjbmx3ZEdsdmJpQnliM1Z1WkNCclpYbHpYRzRnSUNBZ0lDQWdJSFJvYVhNdVgwdGtJRDBnVzEwN1hHNWNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQRDBnY205MWJtUnpPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMHRsTG5CMWMyZ29XekFzSURBc0lEQXNJREJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgwdGtMbkIxYzJnb1d6QXNJREFzSURBc0lEQmRLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5YjNWdVpFdGxlVU52ZFc1MElEMGdLSEp2ZFc1a2N5QXJJREVwSUNvZ05EdGNiaUFnSUNBZ0lDQWdkbUZ5SUV0RElEMGdkR2hwY3k1clpYa3ViR1Z1WjNSb0lDOGdORHRjYmx4dUlDQWdJQ0FnSUNBdkx5QmpiMjUyWlhKMElIUm9aU0JyWlhrZ2FXNTBieUJwYm5SelhHNGdJQ0FnSUNBZ0lIWmhjaUIwYXlBOUlHTnZiblpsY25SVWIwbHVkRE15S0hSb2FYTXVhMlY1S1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJqYjNCNUlIWmhiSFZsY3lCcGJuUnZJSEp2ZFc1a0lHdGxlU0JoY25KaGVYTmNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVpHVjRPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUV0RE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2x1WkdWNElEMGdhU0ErUGlBeU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZTMlZiYVc1a1pYaGRXMmtnSlNBMFhTQTlJSFJyVzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZTMlJiY205MWJtUnpJQzBnYVc1a1pYaGRXMmtnSlNBMFhTQTlJSFJyVzJsZE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z2EyVjVJR1Y0Y0dGdWMybHZiaUFvWm1sd2N5MHhPVGNnYzJWamRHbHZiaUExTGpJcFhHNGdJQ0FnSUNBZ0lIWmhjaUJ5WTI5dWNHOXBiblJsY2lBOUlEQTdYRzRnSUNBZ0lDQWdJSFpoY2lCMElEMGdTME1zSUhSME8xeHVJQ0FnSUNBZ0lDQjNhR2xzWlNBb2RDQThJSEp2ZFc1a1MyVjVRMjkxYm5RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSMElEMGdkR3RiUzBNZ0xTQXhYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnJXekJkSUY0OUlDZ29VMXNvZEhRZ1BqNGdNVFlwSUNZZ01IaEdSbDBnUER3Z01qUXBJRjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9VMXNvZEhRZ1BqNGdJRGdwSUNZZ01IaEdSbDBnUER3Z01UWXBJRjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9VMXNnZEhRZ0lDQWdJQ0FnSUNZZ01IaEdSbDBnUER3Z0lEZ3BJRjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVMXNvZEhRZ1BqNGdNalFwSUNZZ01IaEdSbDBnSUNBZ0lDQWdJRjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9jbU52Ymx0eVkyOXVjRzlwYm5SbGNsMGdQRHdnTWpRcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKamIyNXdiMmx1ZEdWeUlDczlJREU3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUd0bGVTQmxlSEJoYm5OcGIyNGdLR1p2Y2lCdWIyNHRNalUySUdKcGRDbGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaExReUFoUFNBNEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQQ0JMUXpzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnJXMmxkSUY0OUlIUnJXMmtnTFNBeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR3RsZVNCbGVIQmhibk5wYjI0Z1ptOXlJREkxTmkxaWFYUWdhMlY1Y3lCcGN5QmNJbk5zYVdkb2RHeDVJR1JwWm1abGNtVnVkRndpSUNobWFYQnpMVEU1TnlsY2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURFN0lHa2dQQ0FvUzBNZ0x5QXlLVHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSclcybGRJRjQ5SUhSclcya2dMU0F4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIUWdQU0IwYTFzb1MwTWdMeUF5S1NBdElERmRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEd0YlMwTWdMeUF5WFNCZVBTQW9VMXNnZEhRZ0lDQWdJQ0FnSUNZZ01IaEdSbDBnSUNBZ0lDQWdJRjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaFRXeWgwZENBK1BpQWdPQ2tnSmlBd2VFWkdYU0E4UENBZ09Da2dYbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tGTmJLSFIwSUQ0K0lERTJLU0FtSURCNFJrWmRJRHc4SURFMktTQmVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1Uxc29kSFFnUGo0Z01qUXBJQ1lnTUhoR1JsMGdQRHdnTWpRcEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBb1MwTWdMeUF5S1NBcklERTdJR2tnUENCTFF6c2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJyVzJsZElGNDlJSFJyVzJrZ0xTQXhYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR052Y0hrZ2RtRnNkV1Z6SUdsdWRHOGdjbTkxYm1RZ2EyVjVJR0Z5Y21GNWMxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHa2dQU0F3TENCeUxDQmpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2QyaHBiR1VnS0drZ1BDQkxReUFtSmlCMElEd2djbTkxYm1STFpYbERiM1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISWdQU0IwSUQ0K0lESTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZeUE5SUhRZ0pTQTBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgwdGxXM0pkVzJOZElEMGdkR3RiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmUzJSYmNtOTFibVJ6SUMwZ2NsMWJZMTBnUFNCMGExdHBLeXRkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhRckt6dGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUdsdWRtVnljMlV0WTJsd2FHVnlMV2xtZVNCMGFHVWdaR1ZqY25sd2RHbHZiaUJ5YjNWdVpDQnJaWGtnS0dacGNITXRNVGszSUhObFkzUnBiMjRnTlM0ektWeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnlJRDBnTVRzZ2NpQThJSEp2ZFc1a2N6c2djaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJqSUQwZ01Ec2dZeUE4SURRN0lHTXJLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSMElEMGdkR2hwY3k1ZlMyUmJjbDFiWTEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmUzJSYmNsMWJZMTBnUFNBb1ZURmJLSFIwSUQ0K0lESTBLU0FtSURCNFJrWmRJRjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JWTWxzb2RIUWdQajRnTVRZcElDWWdNSGhHUmwwZ1hseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGVXpXeWgwZENBK1BpQWdPQ2tnSmlBd2VFWkdYU0JlWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVlRSYklIUjBJQ0FnSUNBZ0lDQW1JREI0UmtaZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUVGRlV5NXdjbTkwYjNSNWNHVXVaVzVqY25sd2RDQTlJR1oxYm1OMGFXOXVLSEJzWVdsdWRHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9jR3hoYVc1MFpYaDBMbXhsYm1kMGFDQWhQU0F4TmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RwYm5aaGJHbGtJSEJzWVdsdWRHVjRkQ0J6YVhwbElDaHRkWE4wSUdKbElERTJJR0o1ZEdWektTY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSEp2ZFc1a2N5QTlJSFJvYVhNdVgwdGxMbXhsYm1kMGFDQXRJREU3WEc0Z0lDQWdJQ0FnSUhaaGNpQmhJRDBnV3pBc0lEQXNJREFzSURCZE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUdOdmJuWmxjblFnY0d4aGFXNTBaWGgwSUhSdklDaHBiblJ6SUY0Z2EyVjVLVnh1SUNBZ0lDQWdJQ0IyWVhJZ2RDQTlJR052Ym5abGNuUlViMGx1ZERNeUtIQnNZV2x1ZEdWNGRDazdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnTkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBXMmxkSUY0OUlIUm9hWE11WDB0bFd6QmRXMmxkTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnWVhCd2JIa2djbTkxYm1RZ2RISmhibk5tYjNKdGMxeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnlJRDBnTVRzZ2NpQThJSEp2ZFc1a2N6c2djaXNyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SURRN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGYmFWMGdQU0FvVkRGYktIUmJJR2tnSUNBZ0lDQWdJQ0JkSUQ0K0lESTBLU0FtSURCNFptWmRJRjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlF5V3loMFd5aHBJQ3NnTVNrZ0pTQTBYU0ErUGlBeE5pa2dKaUF3ZUdabVhTQmVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVNMXNvZEZzb2FTQXJJRElwSUNVZ05GMGdQajRnSURncElDWWdNSGhtWmwwZ1hseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ZEUmJJSFJiS0drZ0t5QXpLU0FsSURSZElDQWdJQ0FnSUNBbUlEQjRabVpkSUY1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMHRsVzNKZFcybGRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhRZ1BTQmhMbk5zYVdObEtDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QjBhR1VnYkdGemRDQnliM1Z1WkNCcGN5QnpjR1ZqYVdGc1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhOMWJIUWdQU0JqY21WaGRHVkJjbkpoZVNneE5pa3NJSFIwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElEUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhRZ1BTQjBhR2x6TGw5TFpWdHliM1Z1WkhOZFcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkV3gwV3pRZ0tpQnBJQ0FnSUYwZ1BTQW9VMXNvZEZzZ2FTQWdJQ0FnSUNBZ0lGMGdQajRnTWpRcElDWWdNSGhtWmwwZ1hpQW9kSFFnUGo0Z01qUXBLU0FtSURCNFptWTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJiTkNBcUlHa2dLeUF4WFNBOUlDaFRXeWgwV3locElDc2dNU2tnSlNBMFhTQStQaUF4TmlrZ0ppQXdlR1ptWFNCZUlDaDBkQ0ErUGlBeE5pa3BJQ1lnTUhobVpqdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkRnMwSUNvZ2FTQXJJREpkSUQwZ0tGTmJLSFJiS0drZ0t5QXlLU0FsSURSZElENCtJQ0E0S1NBbUlEQjRabVpkSUY0Z0tIUjBJRDQrSUNBNEtTa2dKaUF3ZUdabU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBXelFnS2lCcElDc2dNMTBnUFNBb1Uxc2dkRnNvYVNBcklETXBJQ1VnTkYwZ0lDQWdJQ0FnSUNZZ01IaG1abDBnWGlBZ2RIUWdJQ0FnSUNBZ0tTQW1JREI0Wm1ZN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVGRlV5NXdjbTkwYjNSNWNHVXVaR1ZqY25sd2RDQTlJR1oxYm1OMGFXOXVLR05wY0dobGNuUmxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR05wY0dobGNuUmxlSFF1YkdWdVozUm9JQ0U5SURFMktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJsdWRtRnNhV1FnWTJsd2FHVnlkR1Y0ZENCemFYcGxJQ2h0ZFhOMElHSmxJREUySUdKNWRHVnpLU2NwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhKdmRXNWtjeUE5SUhSb2FYTXVYMHRrTG14bGJtZDBhQ0F0SURFN1hHNGdJQ0FnSUNBZ0lIWmhjaUJoSUQwZ1d6QXNJREFzSURBc0lEQmRPMXh1WEc0Z0lDQWdJQ0FnSUM4dklHTnZiblpsY25RZ2NHeGhhVzUwWlhoMElIUnZJQ2hwYm5SeklGNGdhMlY1S1Z4dUlDQWdJQ0FnSUNCMllYSWdkQ0E5SUdOdmJuWmxjblJVYjBsdWRETXlLR05wY0dobGNuUmxlSFFwTzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElEUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEZ0cFhTQmVQU0IwYUdsekxsOUxaRnN3WFZ0cFhUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklHRndjR3g1SUhKdmRXNWtJSFJ5WVc1elptOXliWE5jYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnY2lBOUlERTdJSElnUENCeWIzVnVaSE03SUhJckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQTBPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhXMmxkSUQwZ0tGUTFXeWgwV3lCcElDQWdJQ0FnSUNBZ0lGMGdQajRnTWpRcElDWWdNSGhtWmwwZ1hseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ZEWmJLSFJiS0drZ0t5QXpLU0FsSURSZElENCtJREUyS1NBbUlEQjRabVpkSUY1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZRM1d5aDBXeWhwSUNzZ01pa2dKU0EwWFNBK1BpQWdPQ2tnSmlBd2VHWm1YU0JlWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JVT0ZzZ2RGc29hU0FySURFcElDVWdORjBnSUNBZ0lDQWdJQ1lnTUhobVpsMGdYbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlMyUmJjbDFiYVYwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkQ0E5SUdFdWMyeHBZMlVvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUhSb1pTQnNZWE4wSUhKdmRXNWtJR2x6SUhOd1pXTnBZV3hjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlHTnlaV0YwWlVGeWNtRjVLREUyS1N3Z2RIUTdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnTkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBkQ0E5SUhSb2FYTXVYMHRrVzNKdmRXNWtjMTFiYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUmJOQ0FxSUdrZ0lDQWdYU0E5SUNoVGFWc29kRnNnYVNBZ0lDQWdJQ0FnSUYwZ1BqNGdNalFwSUNZZ01IaG1abDBnWGlBb2RIUWdQajRnTWpRcEtTQW1JREI0Wm1ZN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUmJOQ0FxSUdrZ0t5QXhYU0E5SUNoVGFWc29kRnNvYVNBcklETXBJQ1VnTkYwZ1BqNGdNVFlwSUNZZ01IaG1abDBnWGlBb2RIUWdQajRnTVRZcEtTQW1JREI0Wm1ZN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUmJOQ0FxSUdrZ0t5QXlYU0E5SUNoVGFWc29kRnNvYVNBcklESXBJQ1VnTkYwZ1BqNGdJRGdwSUNZZ01IaG1abDBnWGlBb2RIUWdQajRnSURncEtTQW1JREI0Wm1ZN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUmJOQ0FxSUdrZ0t5QXpYU0E5SUNoVGFWc2dkRnNvYVNBcklERXBJQ1VnTkYwZ0lDQWdJQ0FnSUNZZ01IaG1abDBnWGlBZ2RIUWdJQ0FnSUNBZ0tTQW1JREI0Wm1ZN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVJQ0FnSUgxY2JseHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJRTF2WkdVZ1QyWWdUM0JsY21GMGFXOXVJQzBnUld4bFkzUnZibWxqSUVOdlpHVmliMjlySUNoRlEwSXBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RtRnlJRTF2WkdWUFprOXdaWEpoZEdsdmJrVkRRaUE5SUdaMWJtTjBhVzl1S0d0bGVTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1RXOWtaVTltVDNCbGNtRjBhVzl1UlVOQ0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnUlhKeWIzSW9KMEZGVXlCdGRYTjBJR0psSUdsdWMzUmhibWwwWVhSbFpDQjNhWFJvSUdCdVpYZGdKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1SbGMyTnlhWEIwYVc5dUlEMGdYQ0pGYkdWamRISnZibWxqSUVOdlpHVWdRbXh2WTJ0Y0lqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dVlXMWxJRDBnWENKbFkySmNJanRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbDloWlhNZ1BTQnVaWGNnUVVWVEtHdGxlU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdUVzlrWlU5bVQzQmxjbUYwYVc5dVJVTkNMbkJ5YjNSdmRIbHdaUzVsYm1OeWVYQjBJRDBnWm5WdVkzUnBiMjRvY0d4aGFXNTBaWGgwS1NCN1hHNGdJQ0FnSUNBZ0lIQnNZV2x1ZEdWNGRDQTlJR052WlhKalpVRnljbUY1S0hCc1lXbHVkR1Y0ZENrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0Nod2JHRnBiblJsZUhRdWJHVnVaM1JvSUNVZ01UWXBJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJsdWRtRnNhV1FnY0d4aGFXNTBaWGgwSUhOcGVtVWdLRzExYzNRZ1ltVWdiWFZzZEdsd2JHVWdiMllnTVRZZ1lubDBaWE1wSnlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IyWVhJZ1kybHdhR1Z5ZEdWNGRDQTlJR055WldGMFpVRnljbUY1S0hCc1lXbHVkR1Y0ZEM1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnSUNCMllYSWdZbXh2WTJzZ1BTQmpjbVZoZEdWQmNuSmhlU2d4TmlrN1hHNWNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J3YkdGcGJuUmxlSFF1YkdWdVozUm9PeUJwSUNzOUlERTJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiM0I1UVhKeVlYa29jR3hoYVc1MFpYaDBMQ0JpYkc5amF5d2dNQ3dnYVN3Z2FTQXJJREUyS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0pzYjJOcklEMGdkR2hwY3k1ZllXVnpMbVZ1WTNKNWNIUW9ZbXh2WTJzcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5d2VVRnljbUY1S0dKc2IyTnJMQ0JqYVhCb1pYSjBaWGgwTENCcEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYVhCb1pYSjBaWGgwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRTF2WkdWUFprOXdaWEpoZEdsdmJrVkRRaTV3Y205MGIzUjVjR1V1WkdWamNubHdkQ0E5SUdaMWJtTjBhVzl1S0dOcGNHaGxjblJsZUhRcElIdGNiaUFnSUNBZ0lDQWdZMmx3YUdWeWRHVjRkQ0E5SUdOdlpYSmpaVUZ5Y21GNUtHTnBjR2hsY25SbGVIUXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ29ZMmx3YUdWeWRHVjRkQzVzWlc1bmRHZ2dKU0F4TmlrZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25hVzUyWVd4cFpDQmphWEJvWlhKMFpYaDBJSE5wZW1VZ0tHMTFjM1FnWW1VZ2JYVnNkR2x3YkdVZ2IyWWdNVFlnWW5sMFpYTXBKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjJZWElnY0d4aGFXNTBaWGgwSUQwZ1kzSmxZWFJsUVhKeVlYa29ZMmx3YUdWeWRHVjRkQzVzWlc1bmRHZ3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lteHZZMnNnUFNCamNtVmhkR1ZCY25KaGVTZ3hOaWs3WEc1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmphWEJvWlhKMFpYaDBMbXhsYm1kMGFEc2dhU0FyUFNBeE5pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXdlVUZ5Y21GNUtHTnBjR2hsY25SbGVIUXNJR0pzYjJOckxDQXdMQ0JwTENCcElDc2dNVFlwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZbXh2WTJzZ1BTQjBhR2x6TGw5aFpYTXVaR1ZqY25sd2RDaGliRzlqYXlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjNCNVFYSnlZWGtvWW14dlkyc3NJSEJzWVdsdWRHVjRkQ3dnYVNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjR3hoYVc1MFpYaDBPMXh1SUNBZ0lIMWNibHh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSUUxdlpHVWdUMllnVDNCbGNtRjBhVzl1SUMwZ1EybHdhR1Z5SUVKc2IyTnJJRU5vWVdsdWFXNW5JQ2hEUWtNcFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZG1GeUlFMXZaR1ZQWms5d1pYSmhkR2x2YmtOQ1F5QTlJR1oxYm1OMGFXOXVLR3RsZVN3Z2FYWXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRW9kR2hwY3lCcGJuTjBZVzVqWlc5bUlFMXZaR1ZQWms5d1pYSmhkR2x2YmtOQ1F5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUVWeWNtOXlLQ2RCUlZNZ2JYVnpkQ0JpWlNCcGJuTjBZVzVwZEdGMFpXUWdkMmwwYUNCZ2JtVjNZQ2NwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1a1pYTmpjbWx3ZEdsdmJpQTlJRndpUTJsd2FHVnlJRUpzYjJOcklFTm9ZV2x1YVc1blhDSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtRnRaU0E5SUZ3aVkySmpYQ0k3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZwZGlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhZZ1BTQmpjbVZoZEdWQmNuSmhlU2d4TmlrN1hHNWNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2hwZGk1c1pXNW5kR2dnSVQwZ01UWXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmFXNTJZV3hwWkNCcGJtbDBhV0ZzWVhScGIyNGdkbVZqZEc5eUlITnBlbVVnS0cxMWMzUWdZbVVnTVRZZ1lubDBaWE1wSnlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXNZWE4wUTJsd2FHVnlZbXh2WTJzZ1BTQmpiMlZ5WTJWQmNuSmhlU2hwZGl3Z2RISjFaU2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVdWeklEMGdibVYzSUVGRlV5aHJaWGtwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRTF2WkdWUFprOXdaWEpoZEdsdmJrTkNReTV3Y205MGIzUjVjR1V1Wlc1amNubHdkQ0E5SUdaMWJtTjBhVzl1S0hCc1lXbHVkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ0lDQndiR0ZwYm5SbGVIUWdQU0JqYjJWeVkyVkJjbkpoZVNod2JHRnBiblJsZUhRcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNnb2NHeGhhVzUwWlhoMExteGxibWQwYUNBbElERTJLU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkcGJuWmhiR2xrSUhCc1lXbHVkR1Y0ZENCemFYcGxJQ2h0ZFhOMElHSmxJRzExYkhScGNHeGxJRzltSURFMklHSjVkR1Z6S1NjcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlHTnBjR2hsY25SbGVIUWdQU0JqY21WaGRHVkJjbkpoZVNod2JHRnBiblJsZUhRdWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0pzYjJOcklEMGdZM0psWVhSbFFYSnlZWGtvTVRZcE8xeHVYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY0d4aGFXNTBaWGgwTG14bGJtZDBhRHNnYVNBclBTQXhOaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl3ZVVGeWNtRjVLSEJzWVdsdWRHVjRkQ3dnWW14dlkyc3NJREFzSUdrc0lHa2dLeUF4TmlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdvZ1BTQXdPeUJxSUR3Z01UWTdJR29yS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnNiMk5yVzJwZElGNDlJSFJvYVhNdVgyeGhjM1JEYVhCb1pYSmliRzlqYTF0cVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiR0Z6ZEVOcGNHaGxjbUpzYjJOcklEMGdkR2hwY3k1ZllXVnpMbVZ1WTNKNWNIUW9ZbXh2WTJzcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5d2VVRnljbUY1S0hSb2FYTXVYMnhoYzNSRGFYQm9aWEppYkc5amF5d2dZMmx3YUdWeWRHVjRkQ3dnYVNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMmx3YUdWeWRHVjRkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQk5iMlJsVDJaUGNHVnlZWFJwYjI1RFFrTXVjSEp2ZEc5MGVYQmxMbVJsWTNKNWNIUWdQU0JtZFc1amRHbHZiaWhqYVhCb1pYSjBaWGgwS1NCN1hHNGdJQ0FnSUNBZ0lHTnBjR2hsY25SbGVIUWdQU0JqYjJWeVkyVkJjbkpoZVNoamFYQm9aWEowWlhoMEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0tHTnBjR2hsY25SbGVIUXViR1Z1WjNSb0lDVWdNVFlwSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oybHVkbUZzYVdRZ1kybHdhR1Z5ZEdWNGRDQnphWHBsSUNodGRYTjBJR0psSUcxMWJIUnBjR3hsSUc5bUlERTJJR0o1ZEdWektTY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJzWVdsdWRHVjRkQ0E5SUdOeVpXRjBaVUZ5Y21GNUtHTnBjR2hsY25SbGVIUXViR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUdKc2IyTnJJRDBnWTNKbFlYUmxRWEp5WVhrb01UWXBPMXh1WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1kybHdhR1Z5ZEdWNGRDNXNaVzVuZEdnN0lHa2dLejBnTVRZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmNIbEJjbkpoZVNoamFYQm9aWEowWlhoMExDQmliRzlqYXl3Z01Dd2dhU3dnYVNBcklERTJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnNiMk5ySUQwZ2RHaHBjeTVmWVdWekxtUmxZM0o1Y0hRb1lteHZZMnNwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Ec2dhaUE4SURFMk95QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JHRnBiblJsZUhSYmFTQXJJR3BkSUQwZ1lteHZZMnRiYWwwZ1hpQjBhR2x6TGw5c1lYTjBRMmx3YUdWeVlteHZZMnRiYWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Y0hsQmNuSmhlU2hqYVhCb1pYSjBaWGgwTENCMGFHbHpMbDlzWVhOMFEybHdhR1Z5WW14dlkyc3NJREFzSUdrc0lHa2dLeUF4TmlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjR3hoYVc1MFpYaDBPMXh1SUNBZ0lIMWNibHh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nSUUxdlpHVWdUMllnVDNCbGNtRjBhVzl1SUMwZ1EybHdhR1Z5SUVabFpXUmlZV05ySUNoRFJrSXBYRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RtRnlJRTF2WkdWUFprOXdaWEpoZEdsdmJrTkdRaUE5SUdaMWJtTjBhVzl1S0d0bGVTd2dhWFlzSUhObFoyMWxiblJUYVhwbEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaEtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCTmIyUmxUMlpQY0dWeVlYUnBiMjVEUmtJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJGY25KdmNpZ25RVVZUSUcxMWMzUWdZbVVnYVc1emRHRnVhWFJoZEdWa0lIZHBkR2dnWUc1bGQyQW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WkdWelkzSnBjSFJwYjI0Z1BTQmNJa05wY0dobGNpQkdaV1ZrWW1GamExd2lPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNWhiV1VnUFNCY0ltTm1ZbHdpTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doYVhZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsMklEMGdZM0psWVhSbFFYSnlZWGtvTVRZcE8xeHVYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYVhZdWJHVnVaM1JvSUNFOUlERTJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oybHVkbUZzYVdRZ2FXNXBkR2xoYkdGMGFXOXVJSFpsWTNSdmNpQnphWHBsSUNodGRYTjBJR0psSURFMklITnBlbVVwSnlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYTmxaMjFsYm5SVGFYcGxLU0I3SUhObFoyMWxiblJUYVhwbElEMGdNVHNnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWbmJXVnVkRk5wZW1VZ1BTQnpaV2R0Wlc1MFUybDZaVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6YUdsbWRGSmxaMmx6ZEdWeUlEMGdZMjlsY21ObFFYSnlZWGtvYVhZc0lIUnlkV1VwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGbGN5QTlJRzVsZHlCQlJWTW9hMlY1S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JOYjJSbFQyWlBjR1Z5WVhScGIyNURSa0l1Y0hKdmRHOTBlWEJsTG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2Ymlod2JHRnBiblJsZUhRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0Nod2JHRnBiblJsZUhRdWJHVnVaM1JvSUNVZ2RHaHBjeTV6WldkdFpXNTBVMmw2WlNrZ0lUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHBiblpoYkdsa0lIQnNZV2x1ZEdWNGRDQnphWHBsSUNodGRYTjBJR0psSUhObFoyMWxiblJUYVhwbElHSjVkR1Z6S1NjcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlHVnVZM0o1Y0hSbFpDQTlJR052WlhKalpVRnljbUY1S0hCc1lXbHVkR1Y0ZEN3Z2RISjFaU2s3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSGh2Y2xObFoyMWxiblE3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1pXNWpjbmx3ZEdWa0xteGxibWQwYURzZ2FTQXJQU0IwYUdsekxuTmxaMjFsYm5SVGFYcGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjRiM0pUWldkdFpXNTBJRDBnZEdocGN5NWZZV1Z6TG1WdVkzSjVjSFFvZEdocGN5NWZjMmhwWm5SU1pXZHBjM1JsY2lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Ec2dhaUE4SUhSb2FYTXVjMlZuYldWdWRGTnBlbVU3SUdvckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1WTNKNWNIUmxaRnRwSUNzZ2FsMGdYajBnZUc5eVUyVm5iV1Z1ZEZ0cVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1UyaHBablFnZEdobElISmxaMmx6ZEdWeVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjNCNVFYSnlZWGtvZEdocGN5NWZjMmhwWm5SU1pXZHBjM1JsY2l3Z2RHaHBjeTVmYzJocFpuUlNaV2RwYzNSbGNpd2dNQ3dnZEdocGN5NXpaV2R0Wlc1MFUybDZaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiM0I1UVhKeVlYa29aVzVqY25sd2RHVmtMQ0IwYUdsekxsOXphR2xtZEZKbFoybHpkR1Z5TENBeE5pQXRJSFJvYVhNdWMyVm5iV1Z1ZEZOcGVtVXNJR2tzSUdrZ0t5QjBhR2x6TG5ObFoyMWxiblJUYVhwbEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsYm1OeWVYQjBaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdUVzlrWlU5bVQzQmxjbUYwYVc5dVEwWkNMbkJ5YjNSdmRIbHdaUzVrWldOeWVYQjBJRDBnWm5WdVkzUnBiMjRvWTJsd2FHVnlkR1Y0ZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvS0dOcGNHaGxjblJsZUhRdWJHVnVaM1JvSUNVZ2RHaHBjeTV6WldkdFpXNTBVMmw2WlNrZ0lUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHBiblpoYkdsa0lHTnBjR2hsY25SbGVIUWdjMmw2WlNBb2JYVnpkQ0JpWlNCelpXZHRaVzUwVTJsNlpTQmllWFJsY3lrbktUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQndiR0ZwYm5SbGVIUWdQU0JqYjJWeVkyVkJjbkpoZVNoamFYQm9aWEowWlhoMExDQjBjblZsS1R0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnZUc5eVUyVm5iV1Z1ZER0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndiR0ZwYm5SbGVIUXViR1Z1WjNSb095QnBJQ3M5SUhSb2FYTXVjMlZuYldWdWRGTnBlbVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGh2Y2xObFoyMWxiblFnUFNCMGFHbHpMbDloWlhNdVpXNWpjbmx3ZENoMGFHbHpMbDl6YUdsbWRGSmxaMmx6ZEdWeUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJREE3SUdvZ1BDQjBhR2x6TG5ObFoyMWxiblJUYVhwbE95QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2JHRnBiblJsZUhSYmFTQXJJR3BkSUY0OUlIaHZjbE5sWjIxbGJuUmJhbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk5vYVdaMElIUm9aU0J5WldkcGMzUmxjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXdlVUZ5Y21GNUtIUm9hWE11WDNOb2FXWjBVbVZuYVhOMFpYSXNJSFJvYVhNdVgzTm9hV1owVW1WbmFYTjBaWElzSURBc0lIUm9hWE11YzJWbmJXVnVkRk5wZW1VcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5d2VVRnljbUY1S0dOcGNHaGxjblJsZUhRc0lIUm9hWE11WDNOb2FXWjBVbVZuYVhOMFpYSXNJREUySUMwZ2RHaHBjeTV6WldkdFpXNTBVMmw2WlN3Z2FTd2dhU0FySUhSb2FYTXVjMlZuYldWdWRGTnBlbVVwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQnNZV2x1ZEdWNGREdGNiaUFnSUNCOVhHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQWdUVzlrWlNCUFppQlBjR1Z5WVhScGIyNGdMU0JQZFhSd2RYUWdSbVZsWkdKaFkyc2dLRTlHUWlsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IyWVhJZ1RXOWtaVTltVDNCbGNtRjBhVzl1VDBaQ0lEMGdablZ1WTNScGIyNG9hMlY1TENCcGRpa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lTaDBhR2x6SUdsdWMzUmhibU5sYjJZZ1RXOWtaVTltVDNCbGNtRjBhVzl1VDBaQ0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnUlhKeWIzSW9KMEZGVXlCdGRYTjBJR0psSUdsdWMzUmhibWwwWVhSbFpDQjNhWFJvSUdCdVpYZGdKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TG1SbGMyTnlhWEIwYVc5dUlEMGdYQ0pQZFhSd2RYUWdSbVZsWkdKaFkydGNJanRjYmlBZ0lDQWdJQ0FnZEdocGN5NXVZVzFsSUQwZ1hDSnZabUpjSWp0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVdsMktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRpQTlJR055WldGMFpVRnljbUY1S0RFMktUdGNibHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dsMkxteGxibWQwYUNBaFBTQXhOaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHBiblpoYkdsa0lHbHVhWFJwWVd4aGRHbHZiaUIyWldOMGIzSWdjMmw2WlNBb2JYVnpkQ0JpWlNBeE5pQmllWFJsY3lrbktUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnhoYzNSUWNtVmphWEJvWlhJZ1BTQmpiMlZ5WTJWQmNuSmhlU2hwZGl3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnhoYzNSUWNtVmphWEJvWlhKSmJtUmxlQ0E5SURFMk8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmxjeUE5SUc1bGR5QkJSVk1vYTJWNUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCTmIyUmxUMlpQY0dWeVlYUnBiMjVQUmtJdWNISnZkRzkwZVhCbExtVnVZM0o1Y0hRZ1BTQm1kVzVqZEdsdmJpaHdiR0ZwYm5SbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVnVZM0o1Y0hSbFpDQTlJR052WlhKalpVRnljbUY1S0hCc1lXbHVkR1Y0ZEN3Z2RISjFaU2s3WEc1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmxibU55ZVhCMFpXUXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlzWVhOMFVISmxZMmx3YUdWeVNXNWtaWGdnUFQwOUlERTJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiR0Z6ZEZCeVpXTnBjR2hsY2lBOUlIUm9hWE11WDJGbGN5NWxibU55ZVhCMEtIUm9hWE11WDJ4aGMzUlFjbVZqYVhCb1pYSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeGhjM1JRY21WamFYQm9aWEpKYm1SbGVDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJtTnllWEIwWldSYmFWMGdYajBnZEdocGN5NWZiR0Z6ZEZCeVpXTnBjR2hsY2x0MGFHbHpMbDlzWVhOMFVISmxZMmx3YUdWeVNXNWtaWGdySzEwN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaVzVqY25sd2RHVmtPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRVJsWTNKNWNIUnBiMjRnYVhNZ2MzbHRaWFJ5YVdOY2JpQWdJQ0JOYjJSbFQyWlBjR1Z5WVhScGIyNVBSa0l1Y0hKdmRHOTBlWEJsTG1SbFkzSjVjSFFnUFNCTmIyUmxUMlpQY0dWeVlYUnBiMjVQUmtJdWNISnZkRzkwZVhCbExtVnVZM0o1Y0hRN1hHNWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0JEYjNWdWRHVnlJRzlpYW1WamRDQm1iM0lnUTFSU0lHTnZiVzF2YmlCdGIyUmxJRzltSUc5d1pYSmhkR2x2Ymx4dUlDQWdJQ0FxTDF4dUlDQWdJSFpoY2lCRGIzVnVkR1Z5SUQwZ1puVnVZM1JwYjI0b2FXNXBkR2xoYkZaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hLSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQkRiM1Z1ZEdWeUtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnUlhKeWIzSW9KME52ZFc1MFpYSWdiWFZ6ZENCaVpTQnBibk4wWVc1cGRHRjBaV1FnZDJsMGFDQmdibVYzWUNjcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdZV3hzYjNjZ01Dd2dZblYwSUdGdWVYUm9hVzVuSUdaaGJITmxMV2x6YUNCMWMyVnpJSFJvWlNCa1pXWmhkV3gwSURGY2JpQWdJQ0FnSUNBZ2FXWWdLR2x1YVhScFlXeFdZV3gxWlNBaFBUMGdNQ0FtSmlBaGFXNXBkR2xoYkZaaGJIVmxLU0I3SUdsdWFYUnBZV3hXWVd4MVpTQTlJREU3SUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1LR2x1YVhScFlXeFdZV3gxWlNrZ1BUMDlJQ2R1ZFcxaVpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5amIzVnVkR1Z5SUQwZ1kzSmxZWFJsUVhKeVlYa29NVFlwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1elpYUldZV3gxWlNocGJtbDBhV0ZzVm1Gc2RXVXBPMXh1WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5ObGRFSjVkR1Z6S0dsdWFYUnBZV3hXWVd4MVpTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQkRiM1Z1ZEdWeUxuQnliM1J2ZEhsd1pTNXpaWFJXWVd4MVpTQTlJR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllvZG1Gc2RXVXBJQ0U5UFNBbmJuVnRZbVZ5SnlCOGZDQndZWEp6WlVsdWRDaDJZV3gxWlNrZ0lUMGdkbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduYVc1MllXeHBaQ0JqYjNWdWRHVnlJSFpoYkhWbElDaHRkWE4wSUdKbElHRnVJR2x1ZEdWblpYSXBKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJYWlNCallXNXViM1FnYzJGbVpXeDVJR2hoYm1Sc1pTQnVkVzFpWlhKeklHSmxlVzl1WkNCMGFHVWdjMkZtWlNCeVlXNW5aU0JtYjNJZ2FXNTBaV2RsY25OY2JpQWdJQ0FnSUNBZ2FXWWdLSFpoYkhWbElENGdUblZ0WW1WeUxrMUJXRjlUUVVaRlgwbE9WRVZIUlZJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduYVc1MFpXZGxjaUIyWVd4MVpTQnZkWFFnYjJZZ2MyRm1aU0J5WVc1blpTY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FXNWtaWGdnUFNBeE5Uc2dhVzVrWlhnZ1BqMGdNRHNnTFMxcGJtUmxlQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyOTFiblJsY2x0cGJtUmxlRjBnUFNCMllXeDFaU0FsSURJMU5qdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDBnY0dGeWMyVkpiblFvZG1Gc2RXVWdMeUF5TlRZcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1EyOTFiblJsY2k1d2NtOTBiM1I1Y0dVdWMyVjBRbmwwWlhNZ1BTQm1kVzVqZEdsdmJpaGllWFJsY3lrZ2UxeHVJQ0FnSUNBZ0lDQmllWFJsY3lBOUlHTnZaWEpqWlVGeWNtRjVLR0o1ZEdWekxDQjBjblZsS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvWW5sMFpYTXViR1Z1WjNSb0lDRTlJREUyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMmx1ZG1Gc2FXUWdZMjkxYm5SbGNpQmllWFJsY3lCemFYcGxJQ2h0ZFhOMElHSmxJREUySUdKNWRHVnpLU2NwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyOTFiblJsY2lBOUlHSjVkR1Z6TzF4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JEYjNWdWRHVnlMbkJ5YjNSdmRIbHdaUzVwYm1OeVpXMWxiblFnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURFMU95QnBJRDQ5SURBN0lHa3RMU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMk52ZFc1MFpYSmJhVjBnUFQwOUlESTFOU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk52ZFc1MFpYSmJhVjBnUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWpiM1Z1ZEdWeVcybGRLeXM3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJQ0JOYjJSbElFOW1JRTl3WlhKaGRHbHZiaUF0SUVOdmRXNTBaWElnS0VOVVVpbGNiaUFnSUNBZ0tpOWNiaUFnSUNCMllYSWdUVzlrWlU5bVQzQmxjbUYwYVc5dVExUlNJRDBnWm5WdVkzUnBiMjRvYTJWNUxDQmpiM1Z1ZEdWeUtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaEtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCTmIyUmxUMlpQY0dWeVlYUnBiMjVEVkZJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJGY25KdmNpZ25RVVZUSUcxMWMzUWdZbVVnYVc1emRHRnVhWFJoZEdWa0lIZHBkR2dnWUc1bGQyQW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WkdWelkzSnBjSFJwYjI0Z1BTQmNJa052ZFc1MFpYSmNJanRjYmlBZ0lDQWdJQ0FnZEdocGN5NXVZVzFsSUQwZ1hDSmpkSEpjSWp0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVNoamIzVnVkR1Z5SUdsdWMzUmhibU5sYjJZZ1EyOTFiblJsY2lrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmRXNTBaWElnUFNCdVpYY2dRMjkxYm5SbGNpaGpiM1Z1ZEdWeUtWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMjkxYm5SbGNpQTlJR052ZFc1MFpYSTdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ0WVdsdWFXNW5RMjkxYm5SbGNpQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGJXRnBibWx1WjBOdmRXNTBaWEpKYm1SbGVDQTlJREUyTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGbGN5QTlJRzVsZHlCQlJWTW9hMlY1S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JOYjJSbFQyWlBjR1Z5WVhScGIyNURWRkl1Y0hKdmRHOTBlWEJsTG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2Ymlod2JHRnBiblJsZUhRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdWdVkzSjVjSFJsWkNBOUlHTnZaWEpqWlVGeWNtRjVLSEJzWVdsdWRHVjRkQ3dnZEhKMVpTazdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCbGJtTnllWEIwWldRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXlaVzFoYVc1cGJtZERiM1Z1ZEdWeVNXNWtaWGdnUFQwOUlERTJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjbVZ0WVdsdWFXNW5RMjkxYm5SbGNpQTlJSFJvYVhNdVgyRmxjeTVsYm1OeWVYQjBLSFJvYVhNdVgyTnZkVzUwWlhJdVgyTnZkVzUwWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNKbGJXRnBibWx1WjBOdmRXNTBaWEpKYm1SbGVDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZMjkxYm5SbGNpNXBibU55WlcxbGJuUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdWdVkzSjVjSFJsWkZ0cFhTQmVQU0IwYUdsekxsOXlaVzFoYVc1cGJtZERiM1Z1ZEdWeVczUm9hWE11WDNKbGJXRnBibWx1WjBOdmRXNTBaWEpKYm1SbGVDc3JYVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbGJtTnllWEIwWldRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1JHVmpjbmx3ZEdsdmJpQnBjeUJ6ZVcxbGRISnBZMXh1SUNBZ0lFMXZaR1ZQWms5d1pYSmhkR2x2YmtOVVVpNXdjbTkwYjNSNWNHVXVaR1ZqY25sd2RDQTlJRTF2WkdWUFprOXdaWEpoZEdsdmJrTlVVaTV3Y205MGIzUjVjR1V1Wlc1amNubHdkRHRjYmx4dVhHNGdJQ0FnTHk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaUFnSUNBdkx5QlFZV1JrYVc1blhHNWNiaUFnSUNBdkx5QlRaV1U2YUhSMGNITTZMeTkwYjI5c2N5NXBaWFJtTG05eVp5OW9kRzFzTDNKbVl6SXpNVFZjYmlBZ0lDQm1kVzVqZEdsdmJpQndhMk56TjNCaFpDaGtZWFJoS1NCN1hHNGdJQ0FnSUNBZ0lHUmhkR0VnUFNCamIyVnlZMlZCY25KaGVTaGtZWFJoTENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlIQmhaR1JsY2lBOUlERTJJQzBnS0dSaGRHRXViR1Z1WjNSb0lDVWdNVFlwTzF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdZM0psWVhSbFFYSnlZWGtvWkdGMFlTNXNaVzVuZEdnZ0t5QndZV1JrWlhJcE8xeHVJQ0FnSUNBZ0lDQmpiM0I1UVhKeVlYa29aR0YwWVN3Z2NtVnpkV3gwS1R0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJR1JoZEdFdWJHVnVaM1JvT3lCcElEd2djbVZ6ZFd4MExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSYmFWMGdQU0J3WVdSa1pYSTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnSUNCOVhHNWNiaUFnSUNCbWRXNWpkR2x2YmlCd2EyTnpOM04wY21sd0tHUmhkR0VwSUh0Y2JpQWdJQ0FnSUNBZ1pHRjBZU0E5SUdOdlpYSmpaVUZ5Y21GNUtHUmhkR0VzSUhSeWRXVXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pHRjBZUzVzWlc1bmRHZ2dQQ0F4TmlrZ2V5QjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oxQkxRMU1qTnlCcGJuWmhiR2xrSUd4bGJtZDBhQ2NwT3lCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhCaFpHUmxjaUE5SUdSaGRHRmJaR0YwWVM1c1pXNW5kR2dnTFNBeFhUdGNiaUFnSUNBZ0lDQWdhV1lnS0hCaFpHUmxjaUErSURFMktTQjdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VRXREVXlNM0lIQmhaR1JwYm1jZ1lubDBaU0J2ZFhRZ2IyWWdjbUZ1WjJVbktUc2dmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnNaVzVuZEdnZ1BTQmtZWFJoTG14bGJtZDBhQ0F0SUhCaFpHUmxjanRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCd1lXUmtaWEk3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1JoZEdGYmJHVnVaM1JvSUNzZ2FWMGdJVDA5SUhCaFpHUmxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVUV0RFV5TTNJR2x1ZG1Gc2FXUWdjR0ZrWkdsdVp5QmllWFJsSnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjJZWElnY21WemRXeDBJRDBnWTNKbFlYUmxRWEp5WVhrb2JHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ1kyOXdlVUZ5Y21GNUtHUmhkR0VzSUhKbGMzVnNkQ3dnTUN3Z01Dd2diR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVJQ0FnSUM4dklFVjRjRzl5ZEdsdVoxeHVYRzVjYmlBZ0lDQXZMeUJVYUdVZ1lteHZZMnNnWTJsd2FHVnlYRzRnSUNBZ2RtRnlJR0ZsYzJweklEMGdlMXh1SUNBZ0lDQWdJQ0JCUlZNNklFRkZVeXhjYmlBZ0lDQWdJQ0FnUTI5MWJuUmxjam9nUTI5MWJuUmxjaXhjYmx4dUlDQWdJQ0FnSUNCTmIyUmxUMlpQY0dWeVlYUnBiMjQ2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1ZqWWpvZ1RXOWtaVTltVDNCbGNtRjBhVzl1UlVOQ0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJKak9pQk5iMlJsVDJaUGNHVnlZWFJwYjI1RFFrTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCalptSTZJRTF2WkdWUFprOXdaWEpoZEdsdmJrTkdRaXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHOW1Zam9nVFc5a1pVOW1UM0JsY21GMGFXOXVUMFpDTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZM1J5T2lCTmIyUmxUMlpQY0dWeVlYUnBiMjVEVkZKY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0IxZEdsc2N6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FHVjRPaUJqYjI1MlpYSjBTR1Y0TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkWFJtT0RvZ1kyOXVkbVZ5ZEZWMFpqaGNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCd1lXUmthVzVuT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YTJOek56b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoWkRvZ2NHdGpjemR3WVdRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MzUnlhWEE2SUhCclkzTTNjM1J5YVhCY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQmZZWEp5WVhsVVpYTjBPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMlZ5WTJWQmNuSmhlVG9nWTI5bGNtTmxRWEp5WVhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqY21WaGRHVkJjbkpoZVRvZ1kzSmxZWFJsUVhKeVlYa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCamIzQjVRWEp5WVhrNklHTnZjSGxCY25KaGVTeGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYmx4dUlDQWdJQzh2SUc1dlpHVXVhbk5jYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1Y0Y0c5eWRITWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdZV1Z6YW5OY2JseHVJQ0FnSUM4dklGSmxjWFZwY21WS1V5OUJUVVJjYmlBZ0lDQXZMeUJvZEhSd09pOHZkM2QzTG5KbGNYVnBjbVZxY3k1dmNtY3ZaRzlqY3k5aGNHa3VhSFJ0YkZ4dUlDQWdJQzh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5aGJXUnFjeTloYldScWN5MWhjR2t2ZDJscmFTOUJUVVJjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppaGtaV1pwYm1VcElEMDlQU0FuWm5WdVkzUnBiMjRuSUNZbUlHUmxabWx1WlM1aGJXUXBJSHRjYmlBZ0lDQWdJQ0FnWkdWbWFXNWxLRnRkTENCbWRXNWpkR2x2YmlncElIc2djbVYwZFhKdUlHRmxjMnB6T3lCOUtUdGNibHh1SUNBZ0lDOHZJRmRsWWlCQ2NtOTNjMlZ5YzF4dUlDQWdJSDBnWld4elpTQjdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1NXWWdkR2hsY21VZ2QyRnpJR0Z1SUdWNGFYTjBhVzVuSUd4cFluSmhjbmtnWVhRZ1hDSmhaWE5xYzF3aUlHMWhhMlVnYzNWeVpTQnBkQ2R6SUhOMGFXeHNJR0YyWVdsc1lXSnNaVnh1SUNBZ0lDQWdJQ0JwWmlBb2NtOXZkQzVoWlhOcWN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lXVnphbk11WDJGbGMycHpJRDBnY205dmRDNWhaWE5xY3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEp2YjNRdVlXVnphbk1nUFNCaFpYTnFjenRjYmlBZ0lDQjlYRzVjYmx4dWZTa29kR2hwY3lrN1hHNGlMQ0lvWm5WdVkzUnBiMjRnS0cxdlpIVnNaU3dnWlhod2IzSjBjeWtnZTF4dUlDQW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JpQWdMeThnVlhScGJITmNiaUFnWm5WdVkzUnBiMjRnWVhOelpYSjBJQ2gyWVd3c0lHMXpaeWtnZTF4dUlDQWdJR2xtSUNnaGRtRnNLU0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9iWE5uSUh4OElDZEJjM05sY25ScGIyNGdabUZwYkdWa0p5azdYRzRnSUgxY2JseHVJQ0F2THlCRGIzVnNaQ0IxYzJVZ1lHbHVhR1Z5YVhSellDQnRiMlIxYkdVc0lHSjFkQ0JrYjI0bmRDQjNZVzUwSUhSdklHMXZkbVVnWm5KdmJTQnphVzVuYkdVZ1ptbHNaVnh1SUNBdkx5QmhjbU5vYVhSbFkzUjFjbVVnZVdWMExseHVJQ0JtZFc1amRHbHZiaUJwYm1obGNtbDBjeUFvWTNSdmNpd2djM1Z3WlhKRGRHOXlLU0I3WEc0Z0lDQWdZM1J2Y2k1emRYQmxjbDhnUFNCemRYQmxja04wYjNJN1hHNGdJQ0FnZG1GeUlGUmxiWEJEZEc5eUlEMGdablZ1WTNScGIyNGdLQ2tnZTMwN1hHNGdJQ0FnVkdWdGNFTjBiM0l1Y0hKdmRHOTBlWEJsSUQwZ2MzVndaWEpEZEc5eUxuQnliM1J2ZEhsd1pUdGNiaUFnSUNCamRHOXlMbkJ5YjNSdmRIbHdaU0E5SUc1bGR5QlVaVzF3UTNSdmNpZ3BPMXh1SUNBZ0lHTjBiM0l1Y0hKdmRHOTBlWEJsTG1OdmJuTjBjblZqZEc5eUlEMGdZM1J2Y2p0Y2JpQWdmVnh1WEc0Z0lDOHZJRUpPWEc1Y2JpQWdablZ1WTNScGIyNGdRazRnS0c1MWJXSmxjaXdnWW1GelpTd2daVzVrYVdGdUtTQjdYRzRnSUNBZ2FXWWdLRUpPTG1selFrNG9iblZ0WW1WeUtTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNTFiV0psY2p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxtNWxaMkYwYVhabElEMGdNRHRjYmlBZ0lDQjBhR2x6TG5kdmNtUnpJRDBnYm5Wc2JEdGNiaUFnSUNCMGFHbHpMbXhsYm1kMGFDQTlJREE3WEc1Y2JpQWdJQ0F2THlCU1pXUjFZM1JwYjI0Z1kyOXVkR1Y0ZEZ4dUlDQWdJSFJvYVhNdWNtVmtJRDBnYm5Wc2JEdGNibHh1SUNBZ0lHbG1JQ2h1ZFcxaVpYSWdJVDA5SUc1MWJHd3BJSHRjYmlBZ0lDQWdJR2xtSUNoaVlYTmxJRDA5UFNBbmJHVW5JSHg4SUdKaGMyVWdQVDA5SUNkaVpTY3BJSHRjYmlBZ0lDQWdJQ0FnWlc1a2FXRnVJRDBnWW1GelpUdGNiaUFnSUNBZ0lDQWdZbUZ6WlNBOUlERXdPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IwYUdsekxsOXBibWwwS0c1MWJXSmxjaUI4ZkNBd0xDQmlZWE5sSUh4OElERXdMQ0JsYm1ScFlXNGdmSHdnSjJKbEp5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lHbG1JQ2gwZVhCbGIyWWdiVzlrZFd4bElEMDlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdRazQ3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnWlhod2IzSjBjeTVDVGlBOUlFSk9PMXh1SUNCOVhHNWNiaUFnUWs0dVFrNGdQU0JDVGp0Y2JpQWdRazR1ZDI5eVpGTnBlbVVnUFNBeU5qdGNibHh1SUNCMllYSWdRblZtWm1WeU8xeHVJQ0IwY25rZ2UxeHVJQ0FnSUVKMVptWmxjaUE5SUhKbGNYVnBjbVVvSjJKMVptWmxjaWNwTGtKMVptWmxjanRjYmlBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNCOVhHNWNiaUFnUWs0dWFYTkNUaUE5SUdaMWJtTjBhVzl1SUdselFrNGdLRzUxYlNrZ2UxeHVJQ0FnSUdsbUlDaHVkVzBnYVc1emRHRnVZMlZ2WmlCQ1Rpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHNTFiU0FoUFQwZ2JuVnNiQ0FtSmlCMGVYQmxiMllnYm5WdElEMDlQU0FuYjJKcVpXTjBKeUFtSmx4dUlDQWdJQ0FnYm5WdExtTnZibk4wY25WamRHOXlMbmR2Y21SVGFYcGxJRDA5UFNCQ1RpNTNiM0prVTJsNlpTQW1KaUJCY25KaGVTNXBjMEZ5Y21GNUtHNTFiUzUzYjNKa2N5azdYRzRnSUgwN1hHNWNiaUFnUWs0dWJXRjRJRDBnWm5WdVkzUnBiMjRnYldGNElDaHNaV1owTENCeWFXZG9kQ2tnZTF4dUlDQWdJR2xtSUNoc1pXWjBMbU50Y0NoeWFXZG9kQ2tnUGlBd0tTQnlaWFIxY200Z2JHVm1kRHRjYmlBZ0lDQnlaWFIxY200Z2NtbG5hSFE3WEc0Z0lIMDdYRzVjYmlBZ1FrNHViV2x1SUQwZ1puVnVZM1JwYjI0Z2JXbHVJQ2hzWldaMExDQnlhV2RvZENrZ2UxeHVJQ0FnSUdsbUlDaHNaV1owTG1OdGNDaHlhV2RvZENrZ1BDQXdLU0J5WlhSMWNtNGdiR1ZtZER0Y2JpQWdJQ0J5WlhSMWNtNGdjbWxuYUhRN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTGw5cGJtbDBJRDBnWm5WdVkzUnBiMjRnYVc1cGRDQW9iblZ0WW1WeUxDQmlZWE5sTENCbGJtUnBZVzRwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc1MWJXSmxjaUE5UFQwZ0oyNTFiV0psY2ljcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlwYm1sMFRuVnRZbVZ5S0c1MWJXSmxjaXdnWW1GelpTd2daVzVrYVdGdUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHNTFiV0psY2lBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cGJtbDBRWEp5WVhrb2JuVnRZbVZ5TENCaVlYTmxMQ0JsYm1ScFlXNHBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hpWVhObElEMDlQU0FuYUdWNEp5a2dlMXh1SUNBZ0lDQWdZbUZ6WlNBOUlERTJPMXh1SUNBZ0lIMWNiaUFnSUNCaGMzTmxjblFvWW1GelpTQTlQVDBnS0dKaGMyVWdmQ0F3S1NBbUppQmlZWE5sSUQ0OUlESWdKaVlnWW1GelpTQThQU0F6TmlrN1hHNWNiaUFnSUNCdWRXMWlaWElnUFNCdWRXMWlaWEl1ZEc5VGRISnBibWNvS1M1eVpYQnNZV05sS0M5Y1hITXJMMmNzSUNjbktUdGNiaUFnSUNCMllYSWdjM1JoY25RZ1BTQXdPMXh1SUNBZ0lHbG1JQ2h1ZFcxaVpYSmJNRjBnUFQwOUlDY3RKeWtnZTF4dUlDQWdJQ0FnYzNSaGNuUXJLenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWW1GelpTQTlQVDBnTVRZcElIdGNiaUFnSUNBZ0lIUm9hWE11WDNCaGNuTmxTR1Y0S0c1MWJXSmxjaXdnYzNSaGNuUXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbDl3WVhKelpVSmhjMlVvYm5WdFltVnlMQ0JpWVhObExDQnpkR0Z5ZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHNTFiV0psY2xzd1hTQTlQVDBnSnkwbktTQjdYRzRnSUNBZ0lDQjBhR2x6TG01bFoyRjBhWFpsSUQwZ01UdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbk4wY21sd0tDazdYRzVjYmlBZ0lDQnBaaUFvWlc1a2FXRnVJQ0U5UFNBbmJHVW5LU0J5WlhSMWNtNDdYRzVjYmlBZ0lDQjBhR2x6TGw5cGJtbDBRWEp5WVhrb2RHaHBjeTUwYjBGeWNtRjVLQ2tzSUdKaGMyVXNJR1Z1WkdsaGJpazdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExsOXBibWwwVG5WdFltVnlJRDBnWm5WdVkzUnBiMjRnWDJsdWFYUk9kVzFpWlhJZ0tHNTFiV0psY2l3Z1ltRnpaU3dnWlc1a2FXRnVLU0I3WEc0Z0lDQWdhV1lnS0c1MWJXSmxjaUE4SURBcElIdGNiaUFnSUNBZ0lIUm9hWE11Ym1WbllYUnBkbVVnUFNBeE8xeHVJQ0FnSUNBZ2JuVnRZbVZ5SUQwZ0xXNTFiV0psY2p0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0c1MWJXSmxjaUE4SURCNE5EQXdNREF3TUNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUzYjNKa2N5QTlJRnNnYm5WdFltVnlJQ1lnTUhnelptWm1abVptSUYwN1hHNGdJQ0FnSUNCMGFHbHpMbXhsYm1kMGFDQTlJREU3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h1ZFcxaVpYSWdQQ0F3ZURFd01EQXdNREF3TURBd01EQXdLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6SUQwZ1cxeHVJQ0FnSUNBZ0lDQnVkVzFpWlhJZ0ppQXdlRE5tWm1abVptWXNYRzRnSUNBZ0lDQWdJQ2h1ZFcxaVpYSWdMeUF3ZURRd01EQXdNREFwSUNZZ01IZ3pabVptWm1abVhHNGdJQ0FnSUNCZE8xeHVJQ0FnSUNBZ2RHaHBjeTVzWlc1bmRHZ2dQU0F5TzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmhjM05sY25Rb2JuVnRZbVZ5SUR3Z01IZ3lNREF3TURBd01EQXdNREF3TUNrN0lDOHZJRElnWGlBMU15QW9kVzV6WVdabEtWeHVJQ0FnSUNBZ2RHaHBjeTUzYjNKa2N5QTlJRnRjYmlBZ0lDQWdJQ0FnYm5WdFltVnlJQ1lnTUhnelptWm1abVptTEZ4dUlDQWdJQ0FnSUNBb2JuVnRZbVZ5SUM4Z01IZzBNREF3TURBd0tTQW1JREI0TTJabVptWm1aaXhjYmlBZ0lDQWdJQ0FnTVZ4dUlDQWdJQ0FnWFR0Y2JpQWdJQ0FnSUhSb2FYTXViR1Z1WjNSb0lEMGdNenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWlc1a2FXRnVJQ0U5UFNBbmJHVW5LU0J5WlhSMWNtNDdYRzVjYmlBZ0lDQXZMeUJTWlhabGNuTmxJSFJvWlNCaWVYUmxjMXh1SUNBZ0lIUm9hWE11WDJsdWFYUkJjbkpoZVNoMGFHbHpMblJ2UVhKeVlYa29LU3dnWW1GelpTd2daVzVrYVdGdUtUdGNiaUFnZlR0Y2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdVgybHVhWFJCY25KaGVTQTlJR1oxYm1OMGFXOXVJRjlwYm1sMFFYSnlZWGtnS0c1MWJXSmxjaXdnWW1GelpTd2daVzVrYVdGdUtTQjdYRzRnSUNBZ0x5OGdVR1Z5YUdGd2N5QmhJRlZwYm5RNFFYSnlZWGxjYmlBZ0lDQmhjM05sY25Rb2RIbHdaVzltSUc1MWJXSmxjaTVzWlc1bmRHZ2dQVDA5SUNkdWRXMWlaWEluS1R0Y2JpQWdJQ0JwWmlBb2JuVnRZbVZ5TG14bGJtZDBhQ0E4UFNBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG5kdmNtUnpJRDBnV3lBd0lGMDdYRzRnSUNBZ0lDQjBhR2x6TG14bGJtZDBhQ0E5SURFN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbXhsYm1kMGFDQTlJRTFoZEdndVkyVnBiQ2h1ZFcxaVpYSXViR1Z1WjNSb0lDOGdNeWs3WEc0Z0lDQWdkR2hwY3k1M2IzSmtjeUE5SUc1bGR5QkJjbkpoZVNoMGFHbHpMbXhsYm1kMGFDazdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXMmxkSUQwZ01EdGNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdhaXdnZHp0Y2JpQWdJQ0IyWVhJZ2IyWm1JRDBnTUR0Y2JpQWdJQ0JwWmlBb1pXNWthV0Z1SUQwOVBTQW5ZbVVuS1NCN1hHNGdJQ0FnSUNCbWIzSWdLR2tnUFNCdWRXMWlaWEl1YkdWdVozUm9JQzBnTVN3Z2FpQTlJREE3SUdrZ1BqMGdNRHNnYVNBdFBTQXpLU0I3WEc0Z0lDQWdJQ0FnSUhjZ1BTQnVkVzFpWlhKYmFWMGdmQ0FvYm5WdFltVnlXMmtnTFNBeFhTQThQQ0E0S1NCOElDaHVkVzFpWlhKYmFTQXRJREpkSUR3OElERTJLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNiM0prYzF0cVhTQjhQU0FvZHlBOFBDQnZabVlwSUNZZ01IZ3pabVptWm1abU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXMm9nS3lBeFhTQTlJQ2gzSUQ0K1BpQW9NallnTFNCdlptWXBLU0FtSURCNE0yWm1abVptWmp0Y2JpQWdJQ0FnSUNBZ2IyWm1JQ3M5SURJME8xeHVJQ0FnSUNBZ0lDQnBaaUFvYjJabUlENDlJREkyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiMlptSUMwOUlESTJPMXh1SUNBZ0lDQWdJQ0FnSUdvckt6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9aVzVrYVdGdUlEMDlQU0FuYkdVbktTQjdYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQXdMQ0JxSUQwZ01Ec2dhU0E4SUc1MWJXSmxjaTVzWlc1bmRHZzdJR2tnS3owZ015a2dlMXh1SUNBZ0lDQWdJQ0IzSUQwZ2JuVnRZbVZ5VzJsZElId2dLRzUxYldKbGNsdHBJQ3NnTVYwZ1BEd2dPQ2tnZkNBb2JuVnRZbVZ5VzJrZ0t5QXlYU0E4UENBeE5pazdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYWwwZ2ZEMGdLSGNnUER3Z2IyWm1LU0FtSURCNE0yWm1abVptWmp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzYjNKa2MxdHFJQ3NnTVYwZ1BTQW9keUErUGo0Z0tESTJJQzBnYjJabUtTa2dKaUF3ZURObVptWm1abVk3WEc0Z0lDQWdJQ0FnSUc5bVppQXJQU0F5TkR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzltWmlBK1BTQXlOaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHOW1aaUF0UFNBeU5qdGNiaUFnSUNBZ0lDQWdJQ0JxS3lzN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUnlhWEFvS1R0Y2JpQWdmVHRjYmx4dUlDQm1kVzVqZEdsdmJpQndZWEp6WlVobGVDQW9jM1J5TENCemRHRnlkQ3dnWlc1a0tTQjdYRzRnSUNBZ2RtRnlJSElnUFNBd08xeHVJQ0FnSUhaaGNpQnNaVzRnUFNCTllYUm9MbTFwYmloemRISXViR1Z1WjNSb0xDQmxibVFwTzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNCemRHRnlkRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZWElnWXlBOUlITjBjaTVqYUdGeVEyOWtaVUYwS0drcElDMGdORGc3WEc1Y2JpQWdJQ0FnSUhJZ1BEdzlJRFE3WEc1Y2JpQWdJQ0FnSUM4dklDZGhKeUF0SUNkbUoxeHVJQ0FnSUNBZ2FXWWdLR01nUGowZ05Ea2dKaVlnWXlBOFBTQTFOQ2tnZTF4dUlDQWdJQ0FnSUNCeUlIdzlJR01nTFNBME9TQXJJREI0WVR0Y2JseHVJQ0FnSUNBZ0x5OGdKMEVuSUMwZ0owWW5YRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR01nUGowZ01UY2dKaVlnWXlBOFBTQXlNaWtnZTF4dUlDQWdJQ0FnSUNCeUlIdzlJR01nTFNBeE55QXJJREI0WVR0Y2JseHVJQ0FnSUNBZ0x5OGdKekFuSUMwZ0p6a25YRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQnlJSHc5SUdNZ0ppQXdlR1k3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeU8xeHVJQ0I5WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTGw5d1lYSnpaVWhsZUNBOUlHWjFibU4wYVc5dUlGOXdZWEp6WlVobGVDQW9iblZ0WW1WeUxDQnpkR0Z5ZENrZ2UxeHVJQ0FnSUM4dklFTnlaV0YwWlNCd2IzTnphV0pzZVNCaWFXZG5aWElnWVhKeVlYa2dkRzhnWlc1emRYSmxJSFJvWVhRZ2FYUWdabWwwY3lCMGFHVWdiblZ0WW1WeVhHNGdJQ0FnZEdocGN5NXNaVzVuZEdnZ1BTQk5ZWFJvTG1ObGFXd29LRzUxYldKbGNpNXNaVzVuZEdnZ0xTQnpkR0Z5ZENrZ0x5QTJLVHRjYmlBZ0lDQjBhR2x6TG5kdmNtUnpJRDBnYm1WM0lFRnljbUY1S0hSb2FYTXViR1Z1WjNSb0tUdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnUFNBd08xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQnFMQ0IzTzF4dUlDQWdJQzh2SUZOallXNGdNalF0WW1sMElHTm9kVzVyY3lCaGJtUWdZV1JrSUhSb1pXMGdkRzhnZEdobElHNTFiV0psY2x4dUlDQWdJSFpoY2lCdlptWWdQU0F3TzF4dUlDQWdJR1p2Y2lBb2FTQTlJRzUxYldKbGNpNXNaVzVuZEdnZ0xTQTJMQ0JxSUQwZ01Ec2dhU0ErUFNCemRHRnlkRHNnYVNBdFBTQTJLU0I3WEc0Z0lDQWdJQ0IzSUQwZ2NHRnljMlZJWlhnb2JuVnRZbVZ5TENCcExDQnBJQ3NnTmlrN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21SelcycGRJSHc5SUNoM0lEdzhJRzltWmlrZ0ppQXdlRE5tWm1abVptWTdYRzRnSUNBZ0lDQXZMeUJPVDFSRk9pQmdNSGd6Wm1abVptWmdJR2x6SUdsdWRHVnVkR2x2Ym1Gc0lHaGxjbVVzSURJMlltbDBjeUJ0WVhnZ2MyaHBablFnS3lBeU5HSnBkQ0JvWlhnZ2JHbHRZbHh1SUNBZ0lDQWdkR2hwY3k1M2IzSmtjMXRxSUNzZ01WMGdmRDBnZHlBK1BqNGdLREkySUMwZ2IyWm1LU0FtSURCNE0yWm1abVptTzF4dUlDQWdJQ0FnYjJabUlDczlJREkwTzF4dUlDQWdJQ0FnYVdZZ0tHOW1aaUErUFNBeU5pa2dlMXh1SUNBZ0lDQWdJQ0J2Wm1ZZ0xUMGdNalk3WEc0Z0lDQWdJQ0FnSUdvckt6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tHa2dLeUEySUNFOVBTQnpkR0Z5ZENrZ2UxeHVJQ0FnSUNBZ2R5QTlJSEJoY25ObFNHVjRLRzUxYldKbGNpd2djM1JoY25Rc0lHa2dLeUEyS1R0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFsMGdmRDBnS0hjZ1BEd2diMlptS1NBbUlEQjRNMlptWm1abVpqdGNiaUFnSUNBZ0lIUm9hWE11ZDI5eVpITmJhaUFySURGZElIdzlJSGNnUGo0K0lDZ3lOaUF0SUc5bVppa2dKaUF3ZURObVptWm1aanRjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTV6ZEhKcGNDZ3BPMXh1SUNCOU8xeHVYRzRnSUdaMWJtTjBhVzl1SUhCaGNuTmxRbUZ6WlNBb2MzUnlMQ0J6ZEdGeWRDd2daVzVrTENCdGRXd3BJSHRjYmlBZ0lDQjJZWElnY2lBOUlEQTdYRzRnSUNBZ2RtRnlJR3hsYmlBOUlFMWhkR2d1YldsdUtITjBjaTVzWlc1bmRHZ3NJR1Z1WkNrN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlITjBZWEowT3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJSFpoY2lCaklEMGdjM1J5TG1Ob1lYSkRiMlJsUVhRb2FTa2dMU0EwT0R0Y2JseHVJQ0FnSUNBZ2NpQXFQU0J0ZFd3N1hHNWNiaUFnSUNBZ0lDOHZJQ2RoSjF4dUlDQWdJQ0FnYVdZZ0tHTWdQajBnTkRrcElIdGNiaUFnSUNBZ0lDQWdjaUFyUFNCaklDMGdORGtnS3lBd2VHRTdYRzVjYmlBZ0lDQWdJQzh2SUNkQkoxeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGpJRDQ5SURFM0tTQjdYRzRnSUNBZ0lDQWdJSElnS3owZ1l5QXRJREUzSUNzZ01IaGhPMXh1WEc0Z0lDQWdJQ0F2THlBbk1DY2dMU0FuT1NkY2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhJZ0t6MGdZenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhJN1hHNGdJSDFjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1WDNCaGNuTmxRbUZ6WlNBOUlHWjFibU4wYVc5dUlGOXdZWEp6WlVKaGMyVWdLRzUxYldKbGNpd2dZbUZ6WlN3Z2MzUmhjblFwSUh0Y2JpQWdJQ0F2THlCSmJtbDBhV0ZzYVhwbElHRnpJSHBsY205Y2JpQWdJQ0IwYUdsekxuZHZjbVJ6SUQwZ1d5QXdJRjA3WEc0Z0lDQWdkR2hwY3k1c1pXNW5kR2dnUFNBeE8xeHVYRzRnSUNBZ0x5OGdSbWx1WkNCc1pXNW5kR2dnYjJZZ2JHbHRZaUJwYmlCaVlYTmxYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2JHbHRZa3hsYmlBOUlEQXNJR3hwYldKUWIzY2dQU0F4T3lCc2FXMWlVRzkzSUR3OUlEQjRNMlptWm1abVpqc2diR2x0WWxCdmR5QXFQU0JpWVhObEtTQjdYRzRnSUNBZ0lDQnNhVzFpVEdWdUt5czdYRzRnSUNBZ2ZWeHVJQ0FnSUd4cGJXSk1aVzR0TFR0Y2JpQWdJQ0JzYVcxaVVHOTNJRDBnS0d4cGJXSlFiM2NnTHlCaVlYTmxLU0I4SURBN1hHNWNiaUFnSUNCMllYSWdkRzkwWVd3Z1BTQnVkVzFpWlhJdWJHVnVaM1JvSUMwZ2MzUmhjblE3WEc0Z0lDQWdkbUZ5SUcxdlpDQTlJSFJ2ZEdGc0lDVWdiR2x0WWt4bGJqdGNiaUFnSUNCMllYSWdaVzVrSUQwZ1RXRjBhQzV0YVc0b2RHOTBZV3dzSUhSdmRHRnNJQzBnYlc5a0tTQXJJSE4wWVhKME8xeHVYRzRnSUNBZ2RtRnlJSGR2Y21RZ1BTQXdPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0J6ZEdGeWREc2dhU0E4SUdWdVpEc2dhU0FyUFNCc2FXMWlUR1Z1S1NCN1hHNGdJQ0FnSUNCM2IzSmtJRDBnY0dGeWMyVkNZWE5sS0c1MWJXSmxjaXdnYVN3Z2FTQXJJR3hwYldKTVpXNHNJR0poYzJVcE8xeHVYRzRnSUNBZ0lDQjBhR2x6TG1sdGRXeHVLR3hwYldKUWIzY3BPMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVkMjl5WkhOYk1GMGdLeUIzYjNKa0lEd2dNSGcwTURBd01EQXdLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYk1GMGdLejBnZDI5eVpEdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJsaFpHUnVLSGR2Y21RcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHRiMlFnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJSFpoY2lCd2IzY2dQU0F4TzF4dUlDQWdJQ0FnZDI5eVpDQTlJSEJoY25ObFFtRnpaU2h1ZFcxaVpYSXNJR2tzSUc1MWJXSmxjaTVzWlc1bmRHZ3NJR0poYzJVcE8xeHVYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JXOWtPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdjRzkzSUNvOUlHSmhjMlU3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhSb2FYTXVhVzExYkc0b2NHOTNLVHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbmR2Y21Seld6QmRJQ3NnZDI5eVpDQThJREI0TkRBd01EQXdNQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbmR2Y21Seld6QmRJQ3M5SUhkdmNtUTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cFlXUmtiaWgzYjNKa0tUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG1OdmNIa2dQU0JtZFc1amRHbHZiaUJqYjNCNUlDaGtaWE4wS1NCN1hHNGdJQ0FnWkdWemRDNTNiM0prY3lBOUlHNWxkeUJCY25KaGVTaDBhR2x6TG14bGJtZDBhQ2s3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYUdsekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JrWlhOMExuZHZjbVJ6VzJsZElEMGdkR2hwY3k1M2IzSmtjMXRwWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdaR1Z6ZEM1c1pXNW5kR2dnUFNCMGFHbHpMbXhsYm1kMGFEdGNiaUFnSUNCa1pYTjBMbTVsWjJGMGFYWmxJRDBnZEdocGN5NXVaV2RoZEdsMlpUdGNiaUFnSUNCa1pYTjBMbkpsWkNBOUlIUm9hWE11Y21Wa08xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1amJHOXVaU0E5SUdaMWJtTjBhVzl1SUdOc2IyNWxJQ2dwSUh0Y2JpQWdJQ0IyWVhJZ2NpQTlJRzVsZHlCQ1RpaHVkV3hzS1R0Y2JpQWdJQ0IwYUdsekxtTnZjSGtvY2lrN1hHNGdJQ0FnY21WMGRYSnVJSEk3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbDlsZUhCaGJtUWdQU0JtZFc1amRHbHZiaUJmWlhod1lXNWtJQ2h6YVhwbEtTQjdYRzRnSUNBZ2QyaHBiR1VnS0hSb2FYTXViR1Z1WjNSb0lEd2djMmw2WlNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUzYjNKa2MxdDBhR2x6TG14bGJtZDBhQ3NyWFNBOUlEQTdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZKbGJXOTJaU0JzWldGa2FXNW5JR0F3WUNCbWNtOXRJR0IwYUdsellGeHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWMzUnlhWEFnUFNCbWRXNWpkR2x2YmlCemRISnBjQ0FvS1NCN1hHNGdJQ0FnZDJocGJHVWdLSFJvYVhNdWJHVnVaM1JvSUQ0Z01TQW1KaUIwYUdsekxuZHZjbVJ6VzNSb2FYTXViR1Z1WjNSb0lDMGdNVjBnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWJHVnVaM1JvTFMwN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dWIzSnRVMmxuYmlncE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1ZmJtOXliVk5wWjI0Z1BTQm1kVzVqZEdsdmJpQmZibTl5YlZOcFoyNGdLQ2tnZTF4dUlDQWdJQzh2SUMwd0lEMGdNRnh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBOVBUMGdNU0FtSmlCMGFHbHpMbmR2Y21Seld6QmRJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG01bFoyRjBhWFpsSUQwZ01EdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG1sdWMzQmxZM1FnUFNCbWRXNWpkR2x2YmlCcGJuTndaV04wSUNncElIdGNiaUFnSUNCeVpYUjFjbTRnS0hSb2FYTXVjbVZrSUQ4Z0p6eENUaTFTT2lBbklEb2dKenhDVGpvZ0p5a2dLeUIwYUdsekxuUnZVM1J5YVc1bktERTJLU0FySUNjK0p6dGNiaUFnZlR0Y2JseHVJQ0F2S2x4dVhHNGdJSFpoY2lCNlpYSnZjeUE5SUZ0ZE8xeHVJQ0IyWVhJZ1ozSnZkWEJUYVhwbGN5QTlJRnRkTzF4dUlDQjJZWElnWjNKdmRYQkNZWE5sY3lBOUlGdGRPMXh1WEc0Z0lIWmhjaUJ6SUQwZ0p5YzdYRzRnSUhaaGNpQnBJRDBnTFRFN1hHNGdJSGRvYVd4bElDZ3JLMmtnUENCQ1RpNTNiM0prVTJsNlpTa2dlMXh1SUNBZ0lIcGxjbTl6VzJsZElEMGdjenRjYmlBZ0lDQnpJQ3M5SUNjd0p6dGNiaUFnZlZ4dUlDQm5jbTkxY0ZOcGVtVnpXekJkSUQwZ01EdGNiaUFnWjNKdmRYQlRhWHBsYzFzeFhTQTlJREE3WEc0Z0lHZHliM1Z3UW1GelpYTmJNRjBnUFNBd08xeHVJQ0JuY205MWNFSmhjMlZ6V3pGZElEMGdNRHRjYmlBZ2RtRnlJR0poYzJVZ1BTQXlJQzBnTVR0Y2JpQWdkMmhwYkdVZ0tDc3JZbUZ6WlNBOElETTJJQ3NnTVNrZ2UxeHVJQ0FnSUhaaGNpQm5jbTkxY0ZOcGVtVWdQU0F3TzF4dUlDQWdJSFpoY2lCbmNtOTFjRUpoYzJVZ1BTQXhPMXh1SUNBZ0lIZG9hV3hsSUNobmNtOTFjRUpoYzJVZ1BDQW9NU0E4UENCQ1RpNTNiM0prVTJsNlpTa2dMeUJpWVhObEtTQjdYRzRnSUNBZ0lDQm5jbTkxY0VKaGMyVWdLajBnWW1GelpUdGNiaUFnSUNBZ0lHZHliM1Z3VTJsNlpTQXJQU0F4TzF4dUlDQWdJSDFjYmlBZ0lDQm5jbTkxY0ZOcGVtVnpXMkpoYzJWZElEMGdaM0p2ZFhCVGFYcGxPMXh1SUNBZ0lHZHliM1Z3UW1GelpYTmJZbUZ6WlYwZ1BTQm5jbTkxY0VKaGMyVTdYRzRnSUgxY2JseHVJQ0FxTDF4dVhHNGdJSFpoY2lCNlpYSnZjeUE5SUZ0Y2JpQWdJQ0FuSnl4Y2JpQWdJQ0FuTUNjc1hHNGdJQ0FnSnpBd0p5eGNiaUFnSUNBbk1EQXdKeXhjYmlBZ0lDQW5NREF3TUNjc1hHNGdJQ0FnSnpBd01EQXdKeXhjYmlBZ0lDQW5NREF3TURBd0p5eGNiaUFnSUNBbk1EQXdNREF3TUNjc1hHNGdJQ0FnSnpBd01EQXdNREF3Snl4Y2JpQWdJQ0FuTURBd01EQXdNREF3Snl4Y2JpQWdJQ0FuTURBd01EQXdNREF3TUNjc1hHNGdJQ0FnSnpBd01EQXdNREF3TURBd0p5eGNiaUFnSUNBbk1EQXdNREF3TURBd01EQXdKeXhjYmlBZ0lDQW5NREF3TURBd01EQXdNREF3TUNjc1hHNGdJQ0FnSnpBd01EQXdNREF3TURBd01EQXdKeXhjYmlBZ0lDQW5NREF3TURBd01EQXdNREF3TURBd0p5eGNiaUFnSUNBbk1EQXdNREF3TURBd01EQXdNREF3TUNjc1hHNGdJQ0FnSnpBd01EQXdNREF3TURBd01EQXdNREF3Snl4Y2JpQWdJQ0FuTURBd01EQXdNREF3TURBd01EQXdNREF3Snl4Y2JpQWdJQ0FuTURBd01EQXdNREF3TURBd01EQXdNREF3TUNjc1hHNGdJQ0FnSnpBd01EQXdNREF3TURBd01EQXdNREF3TURBd0p5eGNiaUFnSUNBbk1EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdKeXhjYmlBZ0lDQW5NREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TUNjc1hHNGdJQ0FnSnpBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdKeXhjYmlBZ0lDQW5NREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd0p5eGNiaUFnSUNBbk1EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TUNkY2JpQWdYVHRjYmx4dUlDQjJZWElnWjNKdmRYQlRhWHBsY3lBOUlGdGNiaUFnSUNBd0xDQXdMRnh1SUNBZ0lESTFMQ0F4Tml3Z01USXNJREV4TENBeE1Dd2dPU3dnT0N4Y2JpQWdJQ0E0TENBM0xDQTNMQ0EzTENBM0xDQTJMQ0EyTEZ4dUlDQWdJRFlzSURZc0lEWXNJRFlzSURZc0lEVXNJRFVzWEc0Z0lDQWdOU3dnTlN3Z05Td2dOU3dnTlN3Z05Td2dOU3hjYmlBZ0lDQTFMQ0ExTENBMUxDQTFMQ0ExTENBMUxDQTFYRzRnSUYwN1hHNWNiaUFnZG1GeUlHZHliM1Z3UW1GelpYTWdQU0JiWEc0Z0lDQWdNQ3dnTUN4Y2JpQWdJQ0F6TXpVMU5EUXpNaXdnTkRNd05EWTNNakVzSURFMk56YzNNakUyTENBME9EZ3lPREV5TlN3Z05qQTBOall4TnpZc0lEUXdNelV6TmpBM0xDQXhOamMzTnpJeE5peGNiaUFnSUNBME16QTBOamN5TVN3Z01UQXdNREF3TURBc0lERTVORGczTVRjeExDQXpOVGd6TVRnd09Dd2dOakkzTkRnMU1UY3NJRGMxTWprMU16WXNJREV4TXprd05qSTFMRnh1SUNBZ0lERTJOemMzTWpFMkxDQXlOREV6TnpVMk9Td2dNelF3TVRJeU1qUXNJRFEzTURRMU9EZ3hMQ0EyTkRBd01EQXdNQ3dnTkRBNE5ERXdNU3dnTlRFMU16WXpNaXhjYmlBZ0lDQTJORE0yTXpRekxDQTNPVFl5TmpJMExDQTVOelkxTmpJMUxDQXhNVGc0TVRNM05pd2dNVFF6TkRnNU1EY3NJREUzTWpFd016WTRMQ0F5TURVeE1URTBPU3hjYmlBZ0lDQXlORE13TURBd01Dd2dNamcyTWpreE5URXNJRE16TlRVME5ETXlMQ0F6T1RFek5UTTVNeXdnTkRVME16VTBNalFzSURVeU5USXhPRGMxTENBMk1EUTJOakUzTmx4dUlDQmRPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeUE5SUdaMWJtTjBhVzl1SUhSdlUzUnlhVzVuSUNoaVlYTmxMQ0J3WVdSa2FXNW5LU0I3WEc0Z0lDQWdZbUZ6WlNBOUlHSmhjMlVnZkh3Z01UQTdYRzRnSUNBZ2NHRmtaR2x1WnlBOUlIQmhaR1JwYm1jZ2ZDQXdJSHg4SURFN1hHNWNiaUFnSUNCMllYSWdiM1YwTzF4dUlDQWdJR2xtSUNoaVlYTmxJRDA5UFNBeE5pQjhmQ0JpWVhObElEMDlQU0FuYUdWNEp5a2dlMXh1SUNBZ0lDQWdiM1YwSUQwZ0p5YzdYRzRnSUNBZ0lDQjJZWElnYjJabUlEMGdNRHRjYmlBZ0lDQWdJSFpoY2lCallYSnllU0E5SURBN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElIUm9hWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhjZ1BTQjBhR2x6TG5kdmNtUnpXMmxkTzF4dUlDQWdJQ0FnSUNCMllYSWdkMjl5WkNBOUlDZ29LSGNnUER3Z2IyWm1LU0I4SUdOaGNuSjVLU0FtSURCNFptWm1abVptS1M1MGIxTjBjbWx1WnlneE5pazdYRzRnSUNBZ0lDQWdJR05oY25KNUlEMGdLSGNnUGo0K0lDZ3lOQ0F0SUc5bVppa3BJQ1lnTUhobVptWm1abVk3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpZWEp5ZVNBaFBUMGdNQ0I4ZkNCcElDRTlQU0IwYUdsekxteGxibWQwYUNBdElERXBJSHRjYmlBZ0lDQWdJQ0FnSUNCdmRYUWdQU0I2WlhKdmMxczJJQzBnZDI5eVpDNXNaVzVuZEdoZElDc2dkMjl5WkNBcklHOTFkRHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCdmRYUWdQU0IzYjNKa0lDc2diM1YwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHOW1aaUFyUFNBeU8xeHVJQ0FnSUNBZ0lDQnBaaUFvYjJabUlENDlJREkyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiMlptSUMwOUlESTJPMXh1SUNBZ0lDQWdJQ0FnSUdrdExUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0dOaGNuSjVJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJRzkxZENBOUlHTmhjbko1TG5SdlUzUnlhVzVuS0RFMktTQXJJRzkxZER0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhkb2FXeGxJQ2h2ZFhRdWJHVnVaM1JvSUNVZ2NHRmtaR2x1WnlBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNCdmRYUWdQU0FuTUNjZ0t5QnZkWFE3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTV1WldkaGRHbDJaU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0J2ZFhRZ1BTQW5MU2NnS3lCdmRYUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY200Z2IzVjBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hpWVhObElEMDlQU0FvWW1GelpTQjhJREFwSUNZbUlHSmhjMlVnUGowZ01pQW1KaUJpWVhObElEdzlJRE0yS1NCN1hHNGdJQ0FnSUNBdkx5QjJZWElnWjNKdmRYQlRhWHBsSUQwZ1RXRjBhQzVtYkc5dmNpaENUaTUzYjNKa1UybDZaU0FxSUUxaGRHZ3VURTR5SUM4Z1RXRjBhQzVzYjJjb1ltRnpaU2twTzF4dUlDQWdJQ0FnZG1GeUlHZHliM1Z3VTJsNlpTQTlJR2R5YjNWd1UybDZaWE5iWW1GelpWMDdYRzRnSUNBZ0lDQXZMeUIyWVhJZ1ozSnZkWEJDWVhObElEMGdUV0YwYUM1d2IzY29ZbUZ6WlN3Z1ozSnZkWEJUYVhwbEtUdGNiaUFnSUNBZ0lIWmhjaUJuY205MWNFSmhjMlVnUFNCbmNtOTFjRUpoYzJWelcySmhjMlZkTzF4dUlDQWdJQ0FnYjNWMElEMGdKeWM3WEc0Z0lDQWdJQ0IyWVhJZ1l5QTlJSFJvYVhNdVkyeHZibVVvS1R0Y2JpQWdJQ0FnSUdNdWJtVm5ZWFJwZG1VZ1BTQXdPMXh1SUNBZ0lDQWdkMmhwYkdVZ0tDRmpMbWx6V21WeWJ5Z3BLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlJRDBnWXk1dGIyUnVLR2R5YjNWd1FtRnpaU2t1ZEc5VGRISnBibWNvWW1GelpTazdYRzRnSUNBZ0lDQWdJR01nUFNCakxtbGthWFp1S0dkeWIzVndRbUZ6WlNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGakxtbHpXbVZ5YnlncEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYjNWMElEMGdlbVZ5YjNOYlozSnZkWEJUYVhwbElDMGdjaTVzWlc1bmRHaGRJQ3NnY2lBcklHOTFkRHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCdmRYUWdQU0J5SUNzZ2IzVjBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVwYzFwbGNtOG9LU2tnZTF4dUlDQWdJQ0FnSUNCdmRYUWdQU0FuTUNjZ0t5QnZkWFE3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IzYUdsc1pTQW9iM1YwTG14bGJtZDBhQ0FsSUhCaFpHUnBibWNnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnYjNWMElEMGdKekFuSUNzZ2IzVjBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVibVZuWVhScGRtVWdJVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdiM1YwSUQwZ0p5MG5JQ3NnYjNWME8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUc5MWREdGNiaUFnSUNCOVhHNWNiaUFnSUNCaGMzTmxjblFvWm1Gc2MyVXNJQ2RDWVhObElITm9iM1ZzWkNCaVpTQmlaWFIzWldWdUlESWdZVzVrSURNMkp5azdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExuUnZUblZ0WW1WeUlEMGdablZ1WTNScGIyNGdkRzlPZFcxaVpYSWdLQ2tnZTF4dUlDQWdJSFpoY2lCeVpYUWdQU0IwYUdsekxuZHZjbVJ6V3pCZE8xeHVJQ0FnSUdsbUlDaDBhR2x6TG14bGJtZDBhQ0E5UFQwZ01pa2dlMXh1SUNBZ0lDQWdjbVYwSUNzOUlIUm9hWE11ZDI5eVpITmJNVjBnS2lBd2VEUXdNREF3TURBN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMbXhsYm1kMGFDQTlQVDBnTXlBbUppQjBhR2x6TG5kdmNtUnpXekpkSUQwOVBTQXdlREF4S1NCN1hHNGdJQ0FnSUNBdkx5Qk9UMVJGT2lCaGRDQjBhR2x6SUhOMFlXZGxJR2wwSUdseklHdHViM2R1SUhSb1lYUWdkR2hsSUhSdmNDQmlhWFFnYVhNZ2MyVjBYRzRnSUNBZ0lDQnlaWFFnS3owZ01IZ3hNREF3TURBd01EQXdNREF3TUNBcklDaDBhR2x6TG5kdmNtUnpXekZkSUNvZ01IZzBNREF3TURBd0tUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDRnTWlrZ2UxeHVJQ0FnSUNBZ1lYTnpaWEowS0daaGJITmxMQ0FuVG5WdFltVnlJR05oYmlCdmJteDVJSE5oWm1Wc2VTQnpkRzl5WlNCMWNDQjBieUExTXlCaWFYUnpKeWs3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlBb2RHaHBjeTV1WldkaGRHbDJaU0FoUFQwZ01Da2dQeUF0Y21WMElEb2djbVYwTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzUwYjBwVFQwNGdQU0JtZFc1amRHbHZiaUIwYjBwVFQwNGdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5SdlUzUnlhVzVuS0RFMktUdGNiaUFnZlR0Y2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWRHOUNkV1ptWlhJZ1BTQm1kVzVqZEdsdmJpQjBiMEoxWm1abGNpQW9aVzVrYVdGdUxDQnNaVzVuZEdncElIdGNiaUFnSUNCaGMzTmxjblFvZEhsd1pXOW1JRUoxWm1abGNpQWhQVDBnSjNWdVpHVm1hVzVsWkNjcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuUnZRWEp5WVhsTWFXdGxLRUoxWm1abGNpd2daVzVrYVdGdUxDQnNaVzVuZEdncE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1MGIwRnljbUY1SUQwZ1puVnVZM1JwYjI0Z2RHOUJjbkpoZVNBb1pXNWthV0Z1TENCc1pXNW5kR2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1MGIwRnljbUY1VEdsclpTaEJjbkpoZVN3Z1pXNWthV0Z1TENCc1pXNW5kR2dwTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzUwYjBGeWNtRjVUR2xyWlNBOUlHWjFibU4wYVc5dUlIUnZRWEp5WVhsTWFXdGxJQ2hCY25KaGVWUjVjR1VzSUdWdVpHbGhiaXdnYkdWdVozUm9LU0I3WEc0Z0lDQWdkbUZ5SUdKNWRHVk1aVzVuZEdnZ1BTQjBhR2x6TG1KNWRHVk1aVzVuZEdnb0tUdGNiaUFnSUNCMllYSWdjbVZ4VEdWdVozUm9JRDBnYkdWdVozUm9JSHg4SUUxaGRHZ3ViV0Y0S0RFc0lHSjVkR1ZNWlc1bmRHZ3BPMXh1SUNBZ0lHRnpjMlZ5ZENoaWVYUmxUR1Z1WjNSb0lEdzlJSEpsY1V4bGJtZDBhQ3dnSjJKNWRHVWdZWEp5WVhrZ2JHOXVaMlZ5SUhSb1lXNGdaR1Z6YVhKbFpDQnNaVzVuZEdnbktUdGNiaUFnSUNCaGMzTmxjblFvY21WeFRHVnVaM1JvSUQ0Z01Dd2dKMUpsY1hWbGMzUmxaQ0JoY25KaGVTQnNaVzVuZEdnZ1BEMGdNQ2NwTzF4dVhHNGdJQ0FnZEdocGN5NXpkSEpwY0NncE8xeHVJQ0FnSUhaaGNpQnNhWFIwYkdWRmJtUnBZVzRnUFNCbGJtUnBZVzRnUFQwOUlDZHNaU2M3WEc0Z0lDQWdkbUZ5SUhKbGN5QTlJRzVsZHlCQmNuSmhlVlI1Y0dVb2NtVnhUR1Z1WjNSb0tUdGNibHh1SUNBZ0lIWmhjaUJpTENCcE8xeHVJQ0FnSUhaaGNpQnhJRDBnZEdocGN5NWpiRzl1WlNncE8xeHVJQ0FnSUdsbUlDZ2hiR2wwZEd4bFJXNWthV0Z1S1NCN1hHNGdJQ0FnSUNBdkx5QkJjM04xYldVZ1ltbG5MV1Z1WkdsaGJseHVJQ0FnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dhU0E4SUhKbGNVeGxibWQwYUNBdElHSjVkR1ZNWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE5iYVYwZ1BTQXdPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JtYjNJZ0tHa2dQU0F3T3lBaGNTNXBjMXBsY204b0tUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHSWdQU0J4TG1GdVpHeHVLREI0Wm1ZcE8xeHVJQ0FnSUNBZ0lDQnhMbWwxYzJoeWJpZzRLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYTmJjbVZ4VEdWdVozUm9JQzBnYVNBdElERmRJRDBnWWp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdabTl5SUNocElEMGdNRHNnSVhFdWFYTmFaWEp2S0NrN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCaUlEMGdjUzVoYm1Sc2JpZ3dlR1ptS1R0Y2JpQWdJQ0FnSUNBZ2NTNXBkWE5vY200b09DazdYRzVjYmlBZ0lDQWdJQ0FnY21WelcybGRJRDBnWWp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1ptOXlJQ2c3SUdrZ1BDQnlaWEZNWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE5iYVYwZ1BTQXdPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCeVpYTTdYRzRnSUgwN1hHNWNiaUFnYVdZZ0tFMWhkR2d1WTJ4Nk16SXBJSHRjYmlBZ0lDQkNUaTV3Y205MGIzUjVjR1V1WDJOdmRXNTBRbWwwY3lBOUlHWjFibU4wYVc5dUlGOWpiM1Z1ZEVKcGRITWdLSGNwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUF6TWlBdElFMWhkR2d1WTJ4Nk16SW9keWs3WEc0Z0lDQWdmVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JDVGk1d2NtOTBiM1I1Y0dVdVgyTnZkVzUwUW1sMGN5QTlJR1oxYm1OMGFXOXVJRjlqYjNWdWRFSnBkSE1nS0hjcElIdGNiaUFnSUNBZ0lIWmhjaUIwSUQwZ2R6dGNiaUFnSUNBZ0lIWmhjaUJ5SUQwZ01EdGNiaUFnSUNBZ0lHbG1JQ2gwSUQ0OUlEQjRNVEF3TUNrZ2UxeHVJQ0FnSUNBZ0lDQnlJQ3M5SURFek8xeHVJQ0FnSUNBZ0lDQjBJRDQrUGowZ01UTTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvZENBK1BTQXdlRFF3S1NCN1hHNGdJQ0FnSUNBZ0lISWdLejBnTnp0Y2JpQWdJQ0FnSUNBZ2RDQStQajQ5SURjN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9kQ0ErUFNBd2VEZ3BJSHRjYmlBZ0lDQWdJQ0FnY2lBclBTQTBPMXh1SUNBZ0lDQWdJQ0IwSUQ0K1BqMGdORHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoMElENDlJREI0TURJcElIdGNiaUFnSUNBZ0lDQWdjaUFyUFNBeU8xeHVJQ0FnSUNBZ0lDQjBJRDQrUGowZ01qdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCeUlDc2dkRHRjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExsOTZaWEp2UW1sMGN5QTlJR1oxYm1OMGFXOXVJRjk2WlhKdlFtbDBjeUFvZHlrZ2UxeHVJQ0FnSUM4dklGTm9iM0owTFdOMWRGeHVJQ0FnSUdsbUlDaDNJRDA5UFNBd0tTQnlaWFIxY200Z01qWTdYRzVjYmlBZ0lDQjJZWElnZENBOUlIYzdYRzRnSUNBZ2RtRnlJSElnUFNBd08xeHVJQ0FnSUdsbUlDZ29kQ0FtSURCNE1XWm1aaWtnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJSElnS3owZ01UTTdYRzRnSUNBZ0lDQjBJRDQrUGowZ01UTTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDZ29kQ0FtSURCNE4yWXBJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQnlJQ3M5SURjN1hHNGdJQ0FnSUNCMElENCtQajBnTnp0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0NoMElDWWdNSGhtS1NBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnY2lBclBTQTBPMXh1SUNBZ0lDQWdkQ0ErUGo0OUlEUTdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDZ29kQ0FtSURCNE15a2dQVDA5SURBcElIdGNiaUFnSUNBZ0lISWdLejBnTWp0Y2JpQWdJQ0FnSUhRZ1BqNCtQU0F5TzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvS0hRZ0ppQXdlREVwSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0J5S3lzN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlPMXh1SUNCOU8xeHVYRzRnSUM4dklGSmxkSFZ5YmlCdWRXMWlaWElnYjJZZ2RYTmxaQ0JpYVhSeklHbHVJR0VnUWs1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG1KcGRFeGxibWQwYUNBOUlHWjFibU4wYVc5dUlHSnBkRXhsYm1kMGFDQW9LU0I3WEc0Z0lDQWdkbUZ5SUhjZ1BTQjBhR2x6TG5kdmNtUnpXM1JvYVhNdWJHVnVaM1JvSUMwZ01WMDdYRzRnSUNBZ2RtRnlJR2hwSUQwZ2RHaHBjeTVmWTI5MWJuUkNhWFJ6S0hjcE8xeHVJQ0FnSUhKbGRIVnliaUFvZEdocGN5NXNaVzVuZEdnZ0xTQXhLU0FxSURJMklDc2dhR2s3WEc0Z0lIMDdYRzVjYmlBZ1puVnVZM1JwYjI0Z2RHOUNhWFJCY25KaGVTQW9iblZ0S1NCN1hHNGdJQ0FnZG1GeUlIY2dQU0J1WlhjZ1FYSnlZWGtvYm5WdExtSnBkRXhsYm1kMGFDZ3BLVHRjYmx4dUlDQWdJR1p2Y2lBb2RtRnlJR0pwZENBOUlEQTdJR0pwZENBOElIY3ViR1Z1WjNSb095QmlhWFFyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJRzltWmlBOUlDaGlhWFFnTHlBeU5pa2dmQ0F3TzF4dUlDQWdJQ0FnZG1GeUlIZGlhWFFnUFNCaWFYUWdKU0F5Tmp0Y2JseHVJQ0FnSUNBZ2QxdGlhWFJkSUQwZ0tHNTFiUzUzYjNKa2MxdHZabVpkSUNZZ0tERWdQRHdnZDJKcGRDa3BJRDQrUGlCM1ltbDBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCM08xeHVJQ0I5WEc1Y2JpQWdMeThnVG5WdFltVnlJRzltSUhSeVlXbHNhVzVuSUhwbGNtOGdZbWwwYzF4dUlDQkNUaTV3Y205MGIzUjVjR1V1ZW1WeWIwSnBkSE1nUFNCbWRXNWpkR2x2YmlCNlpYSnZRbWwwY3lBb0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWFYTmFaWEp2S0NrcElISmxkSFZ5YmlBd08xeHVYRzRnSUNBZ2RtRnlJSElnUFNBd08xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2RHaHBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJR0lnUFNCMGFHbHpMbDk2WlhKdlFtbDBjeWgwYUdsekxuZHZjbVJ6VzJsZEtUdGNiaUFnSUNBZ0lISWdLejBnWWp0Y2JpQWdJQ0FnSUdsbUlDaGlJQ0U5UFNBeU5pa2dZbkpsWVdzN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNWllWFJsVEdWdVozUm9JRDBnWm5WdVkzUnBiMjRnWW5sMFpVeGxibWQwYUNBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VZMlZwYkNoMGFHbHpMbUpwZEV4bGJtZDBhQ2dwSUM4Z09DazdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExuUnZWSGR2Y3lBOUlHWjFibU4wYVc5dUlIUnZWSGR2Y3lBb2QybGtkR2dwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTV1WldkaGRHbDJaU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WVdKektDa3VhVzV2ZEc0b2QybGtkR2dwTG1saFpHUnVLREVwTzF4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYkc5dVpTZ3BPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNW1jbTl0VkhkdmN5QTlJR1oxYm1OMGFXOXVJR1p5YjIxVWQyOXpJQ2gzYVdSMGFDa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxuUmxjM1J1S0hkcFpIUm9JQzBnTVNrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2ZEc0b2QybGtkR2dwTG1saFpHUnVLREVwTG1sdVpXY29LVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMnh2Ym1Vb0tUdGNiaUFnZlR0Y2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWFYTk9aV2NnUFNCbWRXNWpkR2x2YmlCcGMwNWxaeUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWJtVm5ZWFJwZG1VZ0lUMDlJREE3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVbVYwZFhKdUlHNWxaMkYwYVhabElHTnNiMjVsSUc5bUlHQjBhR2x6WUZ4dUlDQkNUaTV3Y205MGIzUjVjR1V1Ym1WbklEMGdablZ1WTNScGIyNGdibVZuSUNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiRzl1WlNncExtbHVaV2NvS1R0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1YVc1bFp5QTlJR1oxYm1OMGFXOXVJR2x1WldjZ0tDa2dlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NXBjMXBsY204b0tTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1dVpXZGhkR2wyWlNCZVBTQXhPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNCOU8xeHVYRzRnSUM4dklFOXlJR0J1ZFcxZ0lIZHBkR2dnWUhSb2FYTmdJR2x1TFhCc1lXTmxYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXBkVzl5SUQwZ1puVnVZM1JwYjI0Z2FYVnZjaUFvYm5WdEtTQjdYRzRnSUNBZ2QyaHBiR1VnS0hSb2FYTXViR1Z1WjNSb0lEd2diblZ0TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NTNiM0prYzF0MGFHbHpMbXhsYm1kMGFDc3JYU0E5SURBN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCdWRXMHViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0IwYUdsekxuZHZjbVJ6VzJsZElId2diblZ0TG5kdmNtUnpXMmxkTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OMGNtbHdLQ2s3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbWx2Y2lBOUlHWjFibU4wYVc5dUlHbHZjaUFvYm5WdEtTQjdYRzRnSUNBZ1lYTnpaWEowS0NoMGFHbHpMbTVsWjJGMGFYWmxJSHdnYm5WdExtNWxaMkYwYVhabEtTQTlQVDBnTUNrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWFYVnZjaWh1ZFcwcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUU5eUlHQnVkVzFnSUhkcGRHZ2dZSFJvYVhOZ1hHNGdJRUpPTG5CeWIzUnZkSGx3WlM1dmNpQTlJR1oxYm1OMGFXOXVJRzl5SUNodWRXMHBJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BpQnVkVzB1YkdWdVozUm9LU0J5WlhSMWNtNGdkR2hwY3k1amJHOXVaU2dwTG1sdmNpaHVkVzBwTzF4dUlDQWdJSEpsZEhWeWJpQnVkVzB1WTJ4dmJtVW9LUzVwYjNJb2RHaHBjeWs3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMblZ2Y2lBOUlHWjFibU4wYVc5dUlIVnZjaUFvYm5WdEtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHVnVaM1JvSUQ0Z2JuVnRMbXhsYm1kMGFDa2djbVYwZFhKdUlIUm9hWE11WTJ4dmJtVW9LUzVwZFc5eUtHNTFiU2s3WEc0Z0lDQWdjbVYwZFhKdUlHNTFiUzVqYkc5dVpTZ3BMbWwxYjNJb2RHaHBjeWs3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRVzVrSUdCdWRXMWdJSGRwZEdnZ1lIUm9hWE5nSUdsdUxYQnNZV05sWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVwZFdGdVpDQTlJR1oxYm1OMGFXOXVJR2wxWVc1a0lDaHVkVzBwSUh0Y2JpQWdJQ0F2THlCaUlEMGdiV2x1TFd4bGJtZDBhQ2h1ZFcwc0lIUm9hWE1wWEc0Z0lDQWdkbUZ5SUdJN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDRnYm5WdExteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ1lpQTlJRzUxYlR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdZaUE5SUhSb2FYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmlMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21SelcybGRJRDBnZEdocGN5NTNiM0prYzF0cFhTQW1JRzUxYlM1M2IzSmtjMXRwWFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxteGxibWQwYUNBOUlHSXViR1Z1WjNSb08xeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM1J5YVhBb0tUdGNiaUFnZlR0Y2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWFXRnVaQ0E5SUdaMWJtTjBhVzl1SUdsaGJtUWdLRzUxYlNrZ2UxeHVJQ0FnSUdGemMyVnlkQ2dvZEdocGN5NXVaV2RoZEdsMlpTQjhJRzUxYlM1dVpXZGhkR2wyWlNrZ1BUMDlJREFwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1sMVlXNWtLRzUxYlNrN1hHNGdJSDA3WEc1Y2JpQWdMeThnUVc1a0lHQnVkVzFnSUhkcGRHZ2dZSFJvYVhOZ1hHNGdJRUpPTG5CeWIzUnZkSGx3WlM1aGJtUWdQU0JtZFc1amRHbHZiaUJoYm1RZ0tHNTFiU2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbXhsYm1kMGFDQStJRzUxYlM1c1pXNW5kR2dwSUhKbGRIVnliaUIwYUdsekxtTnNiMjVsS0NrdWFXRnVaQ2h1ZFcwcE8xeHVJQ0FnSUhKbGRIVnliaUJ1ZFcwdVkyeHZibVVvS1M1cFlXNWtLSFJvYVhNcE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1MVlXNWtJRDBnWm5WdVkzUnBiMjRnZFdGdVpDQW9iblZ0S1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDRnYm5WdExteGxibWQwYUNrZ2NtVjBkWEp1SUhSb2FYTXVZMnh2Ym1Vb0tTNXBkV0Z1WkNodWRXMHBPMXh1SUNBZ0lISmxkSFZ5YmlCdWRXMHVZMnh2Ym1Vb0tTNXBkV0Z1WkNoMGFHbHpLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlliM0lnWUc1MWJXQWdkMmwwYUNCZ2RHaHBjMkFnYVc0dGNHeGhZMlZjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbWwxZUc5eUlEMGdablZ1WTNScGIyNGdhWFY0YjNJZ0tHNTFiU2tnZTF4dUlDQWdJQzh2SUdFdWJHVnVaM1JvSUQ0Z1lpNXNaVzVuZEdoY2JpQWdJQ0IyWVhJZ1lUdGNiaUFnSUNCMllYSWdZanRjYmlBZ0lDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BpQnVkVzB1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0JoSUQwZ2RHaHBjenRjYmlBZ0lDQWdJR0lnUFNCdWRXMDdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdFZ1BTQnVkVzA3WEc0Z0lDQWdJQ0JpSUQwZ2RHaHBjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0l1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnUFNCaExuZHZjbVJ6VzJsZElGNGdZaTUzYjNKa2MxdHBYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEdocGN5QWhQVDBnWVNrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2c3SUdrZ1BDQmhMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnUFNCaExuZHZjbVJ6VzJsZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXViR1Z1WjNSb0lEMGdZUzVzWlc1bmRHZzdYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6ZEhKcGNDZ3BPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXBlRzl5SUQwZ1puVnVZM1JwYjI0Z2FYaHZjaUFvYm5WdEtTQjdYRzRnSUNBZ1lYTnpaWEowS0NoMGFHbHpMbTVsWjJGMGFYWmxJSHdnYm5WdExtNWxaMkYwYVhabEtTQTlQVDBnTUNrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWFYVjRiM0lvYm5WdEtUdGNiaUFnZlR0Y2JseHVJQ0F2THlCWWIzSWdZRzUxYldBZ2QybDBhQ0JnZEdocGMyQmNiaUFnUWs0dWNISnZkRzkwZVhCbExuaHZjaUE5SUdaMWJtTjBhVzl1SUhodmNpQW9iblZ0S1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDRnYm5WdExteGxibWQwYUNrZ2NtVjBkWEp1SUhSb2FYTXVZMnh2Ym1Vb0tTNXBlRzl5S0c1MWJTazdYRzRnSUNBZ2NtVjBkWEp1SUc1MWJTNWpiRzl1WlNncExtbDRiM0lvZEdocGN5azdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExuVjRiM0lnUFNCbWRXNWpkR2x2YmlCMWVHOXlJQ2h1ZFcwcElIdGNiaUFnSUNCcFppQW9kR2hwY3k1c1pXNW5kR2dnUGlCdWRXMHViR1Z1WjNSb0tTQnlaWFIxY200Z2RHaHBjeTVqYkc5dVpTZ3BMbWwxZUc5eUtHNTFiU2s3WEc0Z0lDQWdjbVYwZFhKdUlHNTFiUzVqYkc5dVpTZ3BMbWwxZUc5eUtIUm9hWE1wTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRTV2ZENCZ1lIUm9hWE5nWUNCM2FYUm9JR0JnZDJsa2RHaGdZQ0JpYVhSM2FXUjBhRnh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVhVzV2ZEc0Z1BTQm1kVzVqZEdsdmJpQnBibTkwYmlBb2QybGtkR2dwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kSGx3Wlc5bUlIZHBaSFJvSUQwOVBTQW5iblZ0WW1WeUp5QW1KaUIzYVdSMGFDQStQU0F3S1R0Y2JseHVJQ0FnSUhaaGNpQmllWFJsYzA1bFpXUmxaQ0E5SUUxaGRHZ3VZMlZwYkNoM2FXUjBhQ0F2SURJMktTQjhJREE3WEc0Z0lDQWdkbUZ5SUdKcGRITk1aV1owSUQwZ2QybGtkR2dnSlNBeU5qdGNibHh1SUNBZ0lDOHZJRVY0ZEdWdVpDQjBhR1VnWW5WbVptVnlJSGRwZEdnZ2JHVmhaR2x1WnlCNlpYSnZaWE5jYmlBZ0lDQjBhR2x6TGw5bGVIQmhibVFvWW5sMFpYTk9aV1ZrWldRcE8xeHVYRzRnSUNBZ2FXWWdLR0pwZEhOTVpXWjBJRDRnTUNrZ2UxeHVJQ0FnSUNBZ1lubDBaWE5PWldWa1pXUXRMVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJJWVc1a2JHVWdZMjl0Y0d4bGRHVWdkMjl5WkhOY2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdKNWRHVnpUbVZsWkdWa095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0IrZEdocGN5NTNiM0prYzF0cFhTQW1JREI0TTJabVptWm1aanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJJWVc1a2JHVWdkR2hsSUhKbGMybGtkV1ZjYmlBZ0lDQnBaaUFvWW1sMGMweGxablFnUGlBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXMmxkSUQwZ2ZuUm9hWE11ZDI5eVpITmJhVjBnSmlBb01IZ3pabVptWm1abUlENCtJQ2d5TmlBdElHSnBkSE5NWldaMEtTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdRVzVrSUhKbGJXOTJaU0JzWldGa2FXNW5JSHBsY205bGMxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuTjBjbWx3S0NrN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG01dmRHNGdQU0JtZFc1amRHbHZiaUJ1YjNSdUlDaDNhV1IwYUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNiMjVsS0NrdWFXNXZkRzRvZDJsa2RHZ3BPMXh1SUNCOU8xeHVYRzRnSUM4dklGTmxkQ0JnWW1sMFlDQnZaaUJnZEdocGMyQmNiaUFnUWs0dWNISnZkRzkwZVhCbExuTmxkRzRnUFNCbWRXNWpkR2x2YmlCelpYUnVJQ2hpYVhRc0lIWmhiQ2tnZTF4dUlDQWdJR0Z6YzJWeWRDaDBlWEJsYjJZZ1ltbDBJRDA5UFNBbmJuVnRZbVZ5SnlBbUppQmlhWFFnUGowZ01DazdYRzVjYmlBZ0lDQjJZWElnYjJabUlEMGdLR0pwZENBdklESTJLU0I4SURBN1hHNGdJQ0FnZG1GeUlIZGlhWFFnUFNCaWFYUWdKU0F5Tmp0Y2JseHVJQ0FnSUhSb2FYTXVYMlY0Y0dGdVpDaHZabVlnS3lBeEtUdGNibHh1SUNBZ0lHbG1JQ2gyWVd3cElIdGNiaUFnSUNBZ0lIUm9hWE11ZDI5eVpITmJiMlptWFNBOUlIUm9hWE11ZDI5eVpITmJiMlptWFNCOElDZ3hJRHc4SUhkaWFYUXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21SelcyOW1abDBnUFNCMGFHbHpMbmR2Y21SelcyOW1abDBnSmlCK0tERWdQRHdnZDJKcGRDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjM1J5YVhBb0tUdGNiaUFnZlR0Y2JseHVJQ0F2THlCQlpHUWdZRzUxYldBZ2RHOGdZSFJvYVhOZ0lHbHVMWEJzWVdObFhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cFlXUmtJRDBnWm5WdVkzUnBiMjRnYVdGa1pDQW9iblZ0S1NCN1hHNGdJQ0FnZG1GeUlISTdYRzVjYmlBZ0lDQXZMeUJ1WldkaGRHbDJaU0FySUhCdmMybDBhWFpsWEc0Z0lDQWdhV1lnS0hSb2FYTXVibVZuWVhScGRtVWdJVDA5SURBZ0ppWWdiblZ0TG01bFoyRjBhWFpsSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtNWxaMkYwYVhabElEMGdNRHRjYmlBZ0lDQWdJSElnUFNCMGFHbHpMbWx6ZFdJb2JuVnRLVHRjYmlBZ0lDQWdJSFJvYVhNdWJtVm5ZWFJwZG1VZ1hqMGdNVHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dWIzSnRVMmxuYmlncE8xeHVYRzRnSUNBZ0x5OGdjRzl6YVhScGRtVWdLeUJ1WldkaGRHbDJaVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1dVpXZGhkR2wyWlNBOVBUMGdNQ0FtSmlCdWRXMHVibVZuWVhScGRtVWdJVDA5SURBcElIdGNiaUFnSUNBZ0lHNTFiUzV1WldkaGRHbDJaU0E5SURBN1hHNGdJQ0FnSUNCeUlEMGdkR2hwY3k1cGMzVmlLRzUxYlNrN1hHNGdJQ0FnSUNCdWRXMHVibVZuWVhScGRtVWdQU0F4TzF4dUlDQWdJQ0FnY21WMGRYSnVJSEl1WDI1dmNtMVRhV2R1S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1lTNXNaVzVuZEdnZ1BpQmlMbXhsYm1kMGFGeHVJQ0FnSUhaaGNpQmhMQ0JpTzF4dUlDQWdJR2xtSUNoMGFHbHpMbXhsYm1kMGFDQStJRzUxYlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUdFZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnWWlBOUlHNTFiVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1lTQTlJRzUxYlR0Y2JpQWdJQ0FnSUdJZ1BTQjBhR2x6TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCallYSnllU0E5SURBN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCaUxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0J5SUQwZ0tHRXVkMjl5WkhOYmFWMGdmQ0F3S1NBcklDaGlMbmR2Y21SelcybGRJSHdnTUNrZ0t5QmpZWEp5ZVR0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0J5SUNZZ01IZ3pabVptWm1abU8xeHVJQ0FnSUNBZ1kyRnljbmtnUFNCeUlENCtQaUF5Tmp0Y2JpQWdJQ0I5WEc0Z0lDQWdabTl5SUNnN0lHTmhjbko1SUNFOVBTQXdJQ1ltSUdrZ1BDQmhMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCeUlEMGdLR0V1ZDI5eVpITmJhVjBnZkNBd0tTQXJJR05oY25KNU8xeHVJQ0FnSUNBZ2RHaHBjeTUzYjNKa2MxdHBYU0E5SUhJZ0ppQXdlRE5tWm1abVptWTdYRzRnSUNBZ0lDQmpZWEp5ZVNBOUlISWdQajQrSURJMk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXViR1Z1WjNSb0lEMGdZUzVzWlc1bmRHZzdYRzRnSUNBZ2FXWWdLR05oY25KNUlDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21SelczUm9hWE11YkdWdVozUm9YU0E5SUdOaGNuSjVPMXh1SUNBZ0lDQWdkR2hwY3k1c1pXNW5kR2dyS3p0Y2JpQWdJQ0F2THlCRGIzQjVJSFJvWlNCeVpYTjBJRzltSUhSb1pTQjNiM0prYzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWVNBaFBUMGdkR2hwY3lrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2c3SUdrZ1BDQmhMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnUFNCaExuZHZjbVJ6VzJsZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVGa1pDQmdiblZ0WUNCMGJ5QmdkR2hwYzJCY2JpQWdRazR1Y0hKdmRHOTBlWEJsTG1Ga1pDQTlJR1oxYm1OMGFXOXVJR0ZrWkNBb2JuVnRLU0I3WEc0Z0lDQWdkbUZ5SUhKbGN6dGNiaUFnSUNCcFppQW9iblZ0TG01bFoyRjBhWFpsSUNFOVBTQXdJQ1ltSUhSb2FYTXVibVZuWVhScGRtVWdQVDA5SURBcElIdGNiaUFnSUNBZ0lHNTFiUzV1WldkaGRHbDJaU0E5SURBN1hHNGdJQ0FnSUNCeVpYTWdQU0IwYUdsekxuTjFZaWh1ZFcwcE8xeHVJQ0FnSUNBZ2JuVnRMbTVsWjJGMGFYWmxJRjQ5SURFN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY21Wek8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JuVnRMbTVsWjJGMGFYWmxJRDA5UFNBd0lDWW1JSFJvYVhNdWJtVm5ZWFJwZG1VZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVibVZuWVhScGRtVWdQU0F3TzF4dUlDQWdJQ0FnY21WeklEMGdiblZ0TG5OMVlpaDBhR2x6S1R0Y2JpQWdJQ0FnSUhSb2FYTXVibVZuWVhScGRtVWdQU0F4TzF4dUlDQWdJQ0FnY21WMGRYSnVJSEpsY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQaUJ1ZFcwdWJHVnVaM1JvS1NCeVpYUjFjbTRnZEdocGN5NWpiRzl1WlNncExtbGhaR1FvYm5WdEtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCdWRXMHVZMnh2Ym1Vb0tTNXBZV1JrS0hSb2FYTXBPMXh1SUNCOU8xeHVYRzRnSUM4dklGTjFZblJ5WVdOMElHQnVkVzFnSUdaeWIyMGdZSFJvYVhOZ0lHbHVMWEJzWVdObFhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cGMzVmlJRDBnWm5WdVkzUnBiMjRnYVhOMVlpQW9iblZ0S1NCN1hHNGdJQ0FnTHk4Z2RHaHBjeUF0SUNndGJuVnRLU0E5SUhSb2FYTWdLeUJ1ZFcxY2JpQWdJQ0JwWmlBb2JuVnRMbTVsWjJGMGFYWmxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQnVkVzB1Ym1WbllYUnBkbVVnUFNBd08xeHVJQ0FnSUNBZ2RtRnlJSElnUFNCMGFHbHpMbWxoWkdRb2JuVnRLVHRjYmlBZ0lDQWdJRzUxYlM1dVpXZGhkR2wyWlNBOUlERTdYRzRnSUNBZ0lDQnlaWFIxY200Z2NpNWZibTl5YlZOcFoyNG9LVHRjYmx4dUlDQWdJQzh2SUMxMGFHbHpJQzBnYm5WdElEMGdMU2gwYUdseklDc2diblZ0S1Z4dUlDQWdJSDBnWld4elpTQnBaaUFvZEdocGN5NXVaV2RoZEdsMlpTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV1WldkaGRHbDJaU0E5SURBN1hHNGdJQ0FnSUNCMGFHbHpMbWxoWkdRb2JuVnRLVHRjYmlBZ0lDQWdJSFJvYVhNdWJtVm5ZWFJwZG1VZ1BTQXhPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDI1dmNtMVRhV2R1S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1FYUWdkR2hwY3lCd2IybHVkQ0JpYjNSb0lHNTFiV0psY25NZ1lYSmxJSEJ2YzJsMGFYWmxYRzRnSUNBZ2RtRnlJR050Y0NBOUlIUm9hWE11WTIxd0tHNTFiU2s3WEc1Y2JpQWdJQ0F2THlCUGNIUnBiV2w2WVhScGIyNGdMU0I2WlhKdmFXWjVYRzRnSUNBZ2FXWWdLR050Y0NBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NXVaV2RoZEdsMlpTQTlJREE3WEc0Z0lDQWdJQ0IwYUdsekxteGxibWQwYUNBOUlERTdYRzRnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXekJkSUQwZ01EdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJR0VnUGlCaVhHNGdJQ0FnZG1GeUlHRXNJR0k3WEc0Z0lDQWdhV1lnS0dOdGNDQStJREFwSUh0Y2JpQWdJQ0FnSUdFZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnWWlBOUlHNTFiVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1lTQTlJRzUxYlR0Y2JpQWdJQ0FnSUdJZ1BTQjBhR2x6TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCallYSnllU0E5SURBN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCaUxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0J5SUQwZ0tHRXVkMjl5WkhOYmFWMGdmQ0F3S1NBdElDaGlMbmR2Y21SelcybGRJSHdnTUNrZ0t5QmpZWEp5ZVR0Y2JpQWdJQ0FnSUdOaGNuSjVJRDBnY2lBK1BpQXlOanRjYmlBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYVYwZ1BTQnlJQ1lnTUhnelptWm1abVptTzF4dUlDQWdJSDFjYmlBZ0lDQm1iM0lnS0RzZ1kyRnljbmtnSVQwOUlEQWdKaVlnYVNBOElHRXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhJZ1BTQW9ZUzUzYjNKa2MxdHBYU0I4SURBcElDc2dZMkZ5Y25rN1hHNGdJQ0FnSUNCallYSnllU0E5SUhJZ1BqNGdNalk3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6VzJsZElEMGdjaUFtSURCNE0yWm1abVptWmp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCRGIzQjVJSEpsYzNRZ2IyWWdkR2hsSUhkdmNtUnpYRzRnSUNBZ2FXWWdLR05oY25KNUlEMDlQU0F3SUNZbUlHa2dQQ0JoTG14bGJtZDBhQ0FtSmlCaElDRTlQU0IwYUdsektTQjdYRzRnSUNBZ0lDQm1iM0lnS0RzZ2FTQThJR0V1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M2IzSmtjMXRwWFNBOUlHRXVkMjl5WkhOYmFWMDdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTVzWlc1bmRHZ2dQU0JOWVhSb0xtMWhlQ2gwYUdsekxteGxibWQwYUN3Z2FTazdYRzVjYmlBZ0lDQnBaaUFvWVNBaFBUMGdkR2hwY3lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV1WldkaGRHbDJaU0E5SURFN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUnlhWEFvS1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJUZFdKMGNtRmpkQ0JnYm5WdFlDQm1jbTl0SUdCMGFHbHpZRnh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVjM1ZpSUQwZ1puVnVZM1JwYjI0Z2MzVmlJQ2h1ZFcwcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiRzl1WlNncExtbHpkV0lvYm5WdEtUdGNiaUFnZlR0Y2JseHVJQ0JtZFc1amRHbHZiaUJ6YldGc2JFMTFiRlJ2SUNoelpXeG1MQ0J1ZFcwc0lHOTFkQ2tnZTF4dUlDQWdJRzkxZEM1dVpXZGhkR2wyWlNBOUlHNTFiUzV1WldkaGRHbDJaU0JlSUhObGJHWXVibVZuWVhScGRtVTdYRzRnSUNBZ2RtRnlJR3hsYmlBOUlDaHpaV3htTG14bGJtZDBhQ0FySUc1MWJTNXNaVzVuZEdncElId2dNRHRjYmlBZ0lDQnZkWFF1YkdWdVozUm9JRDBnYkdWdU8xeHVJQ0FnSUd4bGJpQTlJQ2hzWlc0Z0xTQXhLU0I4SURBN1hHNWNiaUFnSUNBdkx5QlFaV1ZzSUc5dVpTQnBkR1Z5WVhScGIyNGdLR052YlhCcGJHVnlJR05oYmlkMElHUnZJR2wwTENCaVpXTmhkWE5sSUc5bUlHTnZaR1VnWTI5dGNHeGxlR2wwZVNsY2JpQWdJQ0IyWVhJZ1lTQTlJSE5sYkdZdWQyOXlaSE5iTUYwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJpSUQwZ2JuVnRMbmR2Y21Seld6QmRJSHdnTUR0Y2JpQWdJQ0IyWVhJZ2NpQTlJR0VnS2lCaU8xeHVYRzRnSUNBZ2RtRnlJR3h2SUQwZ2NpQW1JREI0TTJabVptWm1aanRjYmlBZ0lDQjJZWElnWTJGeWNua2dQU0FvY2lBdklEQjROREF3TURBd01Da2dmQ0F3TzF4dUlDQWdJRzkxZEM1M2IzSmtjMXN3WFNBOUlHeHZPMXh1WEc0Z0lDQWdabTl5SUNoMllYSWdheUE5SURFN0lHc2dQQ0JzWlc0N0lHc3JLeWtnZTF4dUlDQWdJQ0FnTHk4Z1UzVnRJR0ZzYkNCM2IzSmtjeUIzYVhSb0lIUm9aU0J6WVcxbElHQnBJQ3NnYWlBOUlHdGdJR0Z1WkNCaFkyTjFiWFZzWVhSbElHQnVZMkZ5Y25sZ0xGeHVJQ0FnSUNBZ0x5OGdibTkwWlNCMGFHRjBJRzVqWVhKeWVTQmpiM1ZzWkNCaVpTQStQU0F3ZURObVptWm1abVpjYmlBZ0lDQWdJSFpoY2lCdVkyRnljbmtnUFNCallYSnllU0ErUGo0Z01qWTdYRzRnSUNBZ0lDQjJZWElnY25kdmNtUWdQU0JqWVhKeWVTQW1JREI0TTJabVptWm1aanRjYmlBZ0lDQWdJSFpoY2lCdFlYaEtJRDBnVFdGMGFDNXRhVzRvYXl3Z2JuVnRMbXhsYm1kMGFDQXRJREVwTzF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYWlBOUlFMWhkR2d1YldGNEtEQXNJR3NnTFNCelpXeG1MbXhsYm1kMGFDQXJJREVwT3lCcUlEdzlJRzFoZUVvN0lHb3JLeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdhU0E5SUNocklDMGdhaWtnZkNBd08xeHVJQ0FnSUNBZ0lDQmhJRDBnYzJWc1ppNTNiM0prYzF0cFhTQjhJREE3WEc0Z0lDQWdJQ0FnSUdJZ1BTQnVkVzB1ZDI5eVpITmJhbDBnZkNBd08xeHVJQ0FnSUNBZ0lDQnlJRDBnWVNBcUlHSWdLeUJ5ZDI5eVpEdGNiaUFnSUNBZ0lDQWdibU5oY25KNUlDczlJQ2h5SUM4Z01IZzBNREF3TURBd0tTQjhJREE3WEc0Z0lDQWdJQ0FnSUhKM2IzSmtJRDBnY2lBbUlEQjRNMlptWm1abVpqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHOTFkQzUzYjNKa2MxdHJYU0E5SUhKM2IzSmtJSHdnTUR0Y2JpQWdJQ0FnSUdOaGNuSjVJRDBnYm1OaGNuSjVJSHdnTUR0Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0dOaGNuSjVJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQnZkWFF1ZDI5eVpITmJhMTBnUFNCallYSnllU0I4SURBN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJRzkxZEM1c1pXNW5kR2d0TFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiM1YwTG5OMGNtbHdLQ2s3WEc0Z0lIMWNibHh1SUNBdkx5QlVUMFJQS0dsdVpIVjBibmtwT2lCcGRDQnRZWGtnWW1VZ2NtVmhjMjl1WVdKc1pTQjBieUJ2YldsMElHbDBJR1p2Y2lCMWMyVnljeUIzYUc4Z1pHOXVKM1FnYm1WbFpGeHVJQ0F2THlCMGJ5QjNiM0pySUhkcGRHZ2dNalUyTFdKcGRDQnVkVzFpWlhKekxDQnZkR2hsY25kcGMyVWdhWFFnWjJsMlpYTWdNakFsSUdsdGNISnZkbVZ0Wlc1MElHWnZjaUF5TlRZdFltbDBYRzRnSUM4dklHMTFiSFJwY0d4cFkyRjBhVzl1SUNoc2FXdGxJR1ZzYkdsd2RHbGpJSE5sWTNBeU5UWnJNU2t1WEc0Z0lIWmhjaUJqYjIxaU1UQk5kV3hVYnlBOUlHWjFibU4wYVc5dUlHTnZiV0l4TUUxMWJGUnZJQ2h6Wld4bUxDQnVkVzBzSUc5MWRDa2dlMXh1SUNBZ0lIWmhjaUJoSUQwZ2MyVnNaaTUzYjNKa2N6dGNiaUFnSUNCMllYSWdZaUE5SUc1MWJTNTNiM0prY3p0Y2JpQWdJQ0IyWVhJZ2J5QTlJRzkxZEM1M2IzSmtjenRjYmlBZ0lDQjJZWElnWXlBOUlEQTdYRzRnSUNBZ2RtRnlJR3h2TzF4dUlDQWdJSFpoY2lCdGFXUTdYRzRnSUNBZ2RtRnlJR2hwTzF4dUlDQWdJSFpoY2lCaE1DQTlJR0ZiTUYwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJoYkRBZ1BTQmhNQ0FtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWVdnd0lEMGdZVEFnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJoTVNBOUlHRmJNVjBnZkNBd08xeHVJQ0FnSUhaaGNpQmhiREVnUFNCaE1TQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZV2d4SUQwZ1lURWdQajQrSURFek8xeHVJQ0FnSUhaaGNpQmhNaUE5SUdGYk1sMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaGJESWdQU0JoTWlBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1lXZ3lJRDBnWVRJZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaE15QTlJR0ZiTTEwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJoYkRNZ1BTQmhNeUFtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWVdneklEMGdZVE1nUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJoTkNBOUlHRmJORjBnZkNBd08xeHVJQ0FnSUhaaGNpQmhiRFFnUFNCaE5DQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZV2cwSUQwZ1lUUWdQajQrSURFek8xeHVJQ0FnSUhaaGNpQmhOU0E5SUdGYk5WMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaGJEVWdQU0JoTlNBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1lXZzFJRDBnWVRVZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaE5pQTlJR0ZiTmwwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJoYkRZZ1BTQmhOaUFtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWVdnMklEMGdZVFlnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJoTnlBOUlHRmJOMTBnZkNBd08xeHVJQ0FnSUhaaGNpQmhiRGNnUFNCaE55QW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZV2czSUQwZ1lUY2dQajQrSURFek8xeHVJQ0FnSUhaaGNpQmhPQ0E5SUdGYk9GMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaGJEZ2dQU0JoT0NBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1lXZzRJRDBnWVRnZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaE9TQTlJR0ZiT1YwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJoYkRrZ1BTQmhPU0FtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWVdnNUlEMGdZVGtnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJpTUNBOUlHSmJNRjBnZkNBd08xeHVJQ0FnSUhaaGNpQmliREFnUFNCaU1DQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZbWd3SUQwZ1lqQWdQajQrSURFek8xeHVJQ0FnSUhaaGNpQmlNU0E5SUdKYk1WMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaWJERWdQU0JpTVNBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1ltZ3hJRDBnWWpFZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaU1pQTlJR0piTWwwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJpYkRJZ1BTQmlNaUFtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWW1neUlEMGdZaklnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJpTXlBOUlHSmJNMTBnZkNBd08xeHVJQ0FnSUhaaGNpQmliRE1nUFNCaU15QW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZbWd6SUQwZ1lqTWdQajQrSURFek8xeHVJQ0FnSUhaaGNpQmlOQ0E5SUdKYk5GMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaWJEUWdQU0JpTkNBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1ltZzBJRDBnWWpRZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaU5TQTlJR0piTlYwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJpYkRVZ1BTQmlOU0FtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWW1nMUlEMGdZalVnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJpTmlBOUlHSmJObDBnZkNBd08xeHVJQ0FnSUhaaGNpQmliRFlnUFNCaU5pQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZbWcySUQwZ1lqWWdQajQrSURFek8xeHVJQ0FnSUhaaGNpQmlOeUE5SUdKYk4xMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaWJEY2dQU0JpTnlBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1ltZzNJRDBnWWpjZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaU9DQTlJR0piT0YwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJpYkRnZ1BTQmlPQ0FtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWW1nNElEMGdZamdnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJpT1NBOUlHSmJPVjBnZkNBd08xeHVJQ0FnSUhaaGNpQmliRGtnUFNCaU9TQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZbWc1SUQwZ1lqa2dQajQrSURFek8xeHVYRzRnSUNBZ2IzVjBMbTVsWjJGMGFYWmxJRDBnYzJWc1ppNXVaV2RoZEdsMlpTQmVJRzUxYlM1dVpXZGhkR2wyWlR0Y2JpQWdJQ0J2ZFhRdWJHVnVaM1JvSUQwZ01UazdYRzRnSUNBZ0x5b2dheUE5SURBZ0tpOWNiaUFnSUNCc2J5QTlJRTFoZEdndWFXMTFiQ2hoYkRBc0lHSnNNQ2s3WEc0Z0lDQWdiV2xrSUQwZ1RXRjBhQzVwYlhWc0tHRnNNQ3dnWW1nd0tUdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTUN3Z1ltd3dLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdUV0YwYUM1cGJYVnNLR0ZvTUN3Z1ltZ3dLVHRjYmlBZ0lDQjJZWElnZHpBZ1BTQW9LQ2hqSUNzZ2JHOHBJSHdnTUNrZ0t5QW9LRzFwWkNBbUlEQjRNV1ptWmlrZ1BEd2dNVE1wS1NCOElEQTdYRzRnSUNBZ1l5QTlJQ2dvS0docElDc2dLRzFwWkNBK1BqNGdNVE1wS1NCOElEQXBJQ3NnS0hjd0lENCtQaUF5TmlrcElId2dNRHRjYmlBZ0lDQjNNQ0FtUFNBd2VETm1abVptWm1ZN1hHNGdJQ0FnTHlvZ2F5QTlJREVnS2k5Y2JpQWdJQ0JzYnlBOUlFMWhkR2d1YVcxMWJDaGhiREVzSUdKc01DazdYRzRnSUNBZ2JXbGtJRDBnVFdGMGFDNXBiWFZzS0dGc01Td2dZbWd3S1R0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9NU3dnWW13d0tTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ1RXRjBhQzVwYlhWc0tHRm9NU3dnWW1nd0tUdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiREFzSUdKc01Ta3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNNQ3dnWW1neEtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZ3dMQ0JpYkRFcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnd0xDQmlhREVwS1NCOElEQTdYRzRnSUNBZ2RtRnlJSGN4SUQwZ0tDZ29ZeUFySUd4dktTQjhJREFwSUNzZ0tDaHRhV1FnSmlBd2VERm1abVlwSUR3OElERXpLU2tnZkNBd08xeHVJQ0FnSUdNZ1BTQW9LQ2hvYVNBcklDaHRhV1FnUGo0K0lERXpLU2tnZkNBd0tTQXJJQ2gzTVNBK1BqNGdNallwS1NCOElEQTdYRzRnSUNBZ2R6RWdKajBnTUhnelptWm1abVptTzF4dUlDQWdJQzhxSUdzZ1BTQXlJQ292WEc0Z0lDQWdiRzhnUFNCTllYUm9MbWx0ZFd3b1lXd3lMQ0JpYkRBcE8xeHVJQ0FnSUcxcFpDQTlJRTFoZEdndWFXMTFiQ2hoYkRJc0lHSm9NQ2s3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFESXNJR0pzTUNrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUUxaGRHZ3VhVzExYkNoaGFESXNJR0pvTUNrN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXd3hMQ0JpYkRFcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJERXNJR0pvTVNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb01Td2dZbXd4S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTVN3Z1ltZ3hLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNQ3dnWW13eUtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3dMQ0JpYURJcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEQXNJR0pzTWlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURBc0lHSm9NaWtwSUh3Z01EdGNiaUFnSUNCMllYSWdkeklnUFNBb0tDaGpJQ3NnYkc4cElId2dNQ2tnS3lBb0tHMXBaQ0FtSURCNE1XWm1aaWtnUER3Z01UTXBLU0I4SURBN1hHNGdJQ0FnWXlBOUlDZ29LR2hwSUNzZ0tHMXBaQ0ErUGo0Z01UTXBLU0I4SURBcElDc2dLSGN5SUQ0K1BpQXlOaWtwSUh3Z01EdGNiaUFnSUNCM01pQW1QU0F3ZURObVptWm1abVk3WEc0Z0lDQWdMeW9nYXlBOUlETWdLaTljYmlBZ0lDQnNieUE5SUUxaGRHZ3VhVzExYkNoaGJETXNJR0pzTUNrN1hHNGdJQ0FnYldsa0lEMGdUV0YwYUM1cGJYVnNLR0ZzTXl3Z1ltZ3dLVHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb015d2dZbXd3S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnVFdGMGFDNXBiWFZzS0dGb015d2dZbWd3S1R0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJESXNJR0pzTVNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc01pd2dZbWd4S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdneUxDQmliREVwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d5TENCaWFERXBLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXd3hMQ0JpYkRJcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJERXNJR0pvTWlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb01Td2dZbXd5S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTVN3Z1ltZ3lLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNQ3dnWW13ektTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3dMQ0JpYURNcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEQXNJR0pzTXlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURBc0lHSm9NeWtwSUh3Z01EdGNiaUFnSUNCMllYSWdkek1nUFNBb0tDaGpJQ3NnYkc4cElId2dNQ2tnS3lBb0tHMXBaQ0FtSURCNE1XWm1aaWtnUER3Z01UTXBLU0I4SURBN1hHNGdJQ0FnWXlBOUlDZ29LR2hwSUNzZ0tHMXBaQ0ErUGo0Z01UTXBLU0I4SURBcElDc2dLSGN6SUQ0K1BpQXlOaWtwSUh3Z01EdGNiaUFnSUNCM015QW1QU0F3ZURObVptWm1abVk3WEc0Z0lDQWdMeW9nYXlBOUlEUWdLaTljYmlBZ0lDQnNieUE5SUUxaGRHZ3VhVzExYkNoaGJEUXNJR0pzTUNrN1hHNGdJQ0FnYldsa0lEMGdUV0YwYUM1cGJYVnNLR0ZzTkN3Z1ltZ3dLVHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb05Dd2dZbXd3S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnVFdGMGFDNXBiWFZzS0dGb05Dd2dZbWd3S1R0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJETXNJR0pzTVNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc015d2dZbWd4S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnekxDQmliREVwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d6TENCaWFERXBLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXd3lMQ0JpYkRJcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJESXNJR0pvTWlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb01pd2dZbXd5S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTWl3Z1ltZ3lLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNU3dnWW13ektTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3hMQ0JpYURNcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFERXNJR0pzTXlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURFc0lHSm9NeWtwSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiREFzSUdKc05Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNNQ3dnWW1nMEtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZ3dMQ0JpYkRRcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnd0xDQmlhRFFwS1NCOElEQTdYRzRnSUNBZ2RtRnlJSGMwSUQwZ0tDZ29ZeUFySUd4dktTQjhJREFwSUNzZ0tDaHRhV1FnSmlBd2VERm1abVlwSUR3OElERXpLU2tnZkNBd08xeHVJQ0FnSUdNZ1BTQW9LQ2hvYVNBcklDaHRhV1FnUGo0K0lERXpLU2tnZkNBd0tTQXJJQ2gzTkNBK1BqNGdNallwS1NCOElEQTdYRzRnSUNBZ2R6UWdKajBnTUhnelptWm1abVptTzF4dUlDQWdJQzhxSUdzZ1BTQTFJQ292WEc0Z0lDQWdiRzhnUFNCTllYUm9MbWx0ZFd3b1lXdzFMQ0JpYkRBcE8xeHVJQ0FnSUcxcFpDQTlJRTFoZEdndWFXMTFiQ2hoYkRVc0lHSm9NQ2s3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEVXNJR0pzTUNrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUUxaGRHZ3VhVzExYkNoaGFEVXNJR0pvTUNrN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzBMQ0JpYkRFcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEUXNJR0pvTVNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb05Dd2dZbXd4S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTkN3Z1ltZ3hLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNeXdnWW13eUtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3pMQ0JpYURJcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFETXNJR0pzTWlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURNc0lHSm9NaWtwSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRElzSUdKc015a3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNNaXdnWW1nektTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZ3lMQ0JpYkRNcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdneUxDQmlhRE1wS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3d4TENCaWJEUXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiREVzSUdKb05Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9NU3dnWW13MEtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb01Td2dZbWcwS1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTUN3Z1ltdzFLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3d3TENCaWFEVXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhREFzSUdKc05Ta3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEQXNJR0pvTlNrcElId2dNRHRjYmlBZ0lDQjJZWElnZHpVZ1BTQW9LQ2hqSUNzZ2JHOHBJSHdnTUNrZ0t5QW9LRzFwWkNBbUlEQjRNV1ptWmlrZ1BEd2dNVE1wS1NCOElEQTdYRzRnSUNBZ1l5QTlJQ2dvS0docElDc2dLRzFwWkNBK1BqNGdNVE1wS1NCOElEQXBJQ3NnS0hjMUlENCtQaUF5TmlrcElId2dNRHRjYmlBZ0lDQjNOU0FtUFNBd2VETm1abVptWm1ZN1hHNGdJQ0FnTHlvZ2F5QTlJRFlnS2k5Y2JpQWdJQ0JzYnlBOUlFMWhkR2d1YVcxMWJDaGhiRFlzSUdKc01DazdYRzRnSUNBZ2JXbGtJRDBnVFdGMGFDNXBiWFZzS0dGc05pd2dZbWd3S1R0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OaXdnWW13d0tTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ1RXRjBhQzVwYlhWc0tHRm9OaXdnWW1nd0tUdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRFVzSUdKc01Ta3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNOU3dnWW1neEtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZzFMQ0JpYkRFcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnMUxDQmlhREVwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3cwTENCaWJESXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRFFzSUdKb01pa3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OQ3dnWW13eUtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb05Dd2dZbWd5S1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTXl3Z1ltd3pLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3d6TENCaWFETXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRE1zSUdKc015a3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFETXNJR0pvTXlrcElId2dNRHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRJc0lHSnNOQ2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTWl3Z1ltZzBLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d5TENCaWJEUXBLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZ3lMQ0JpYURRcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3eExDQmliRFVwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRFc0lHSm9OU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTVN3Z1ltdzFLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9NU3dnWW1nMUtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc01Dd2dZbXcyS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3d0xDQmlhRFlwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURBc0lHSnNOaWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhREFzSUdKb05pa3BJSHdnTUR0Y2JpQWdJQ0IyWVhJZ2R6WWdQU0FvS0NoaklDc2diRzhwSUh3Z01Da2dLeUFvS0cxcFpDQW1JREI0TVdabVppa2dQRHdnTVRNcEtTQjhJREE3WEc0Z0lDQWdZeUE5SUNnb0tHaHBJQ3NnS0cxcFpDQStQajRnTVRNcEtTQjhJREFwSUNzZ0tIYzJJRDQrUGlBeU5pa3BJSHdnTUR0Y2JpQWdJQ0IzTmlBbVBTQXdlRE5tWm1abVptWTdYRzRnSUNBZ0x5b2dheUE5SURjZ0tpOWNiaUFnSUNCc2J5QTlJRTFoZEdndWFXMTFiQ2hoYkRjc0lHSnNNQ2s3WEc0Z0lDQWdiV2xrSUQwZ1RXRjBhQzVwYlhWc0tHRnNOeXdnWW1nd0tUdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTnl3Z1ltd3dLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdUV0YwYUM1cGJYVnNLR0ZvTnl3Z1ltZ3dLVHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRZc0lHSnNNU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTml3Z1ltZ3hLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cyTENCaWJERXBLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZzJMQ0JpYURFcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3MUxDQmliRElwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRVc0lHSm9NaWtwSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTlN3Z1ltd3lLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9OU3dnWW1neUtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc05Dd2dZbXd6S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3MExDQmlhRE1wS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURRc0lHSnNNeWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRFFzSUdKb015a3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJETXNJR0pzTkNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc015d2dZbWcwS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnekxDQmliRFFwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d6TENCaWFEUXBLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXd3lMQ0JpYkRVcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJESXNJR0pvTlNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb01pd2dZbXcxS1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTWl3Z1ltZzFLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNU3dnWW13MktTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3hMQ0JpYURZcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFERXNJR0pzTmlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURFc0lHSm9OaWtwSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiREFzSUdKc055a3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNNQ3dnWW1nM0tTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZ3dMQ0JpYkRjcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnd0xDQmlhRGNwS1NCOElEQTdYRzRnSUNBZ2RtRnlJSGMzSUQwZ0tDZ29ZeUFySUd4dktTQjhJREFwSUNzZ0tDaHRhV1FnSmlBd2VERm1abVlwSUR3OElERXpLU2tnZkNBd08xeHVJQ0FnSUdNZ1BTQW9LQ2hvYVNBcklDaHRhV1FnUGo0K0lERXpLU2tnZkNBd0tTQXJJQ2gzTnlBK1BqNGdNallwS1NCOElEQTdYRzRnSUNBZ2R6Y2dKajBnTUhnelptWm1abVptTzF4dUlDQWdJQzhxSUdzZ1BTQTRJQ292WEc0Z0lDQWdiRzhnUFNCTllYUm9MbWx0ZFd3b1lXdzRMQ0JpYkRBcE8xeHVJQ0FnSUcxcFpDQTlJRTFoZEdndWFXMTFiQ2hoYkRnc0lHSm9NQ2s3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEZ3NJR0pzTUNrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUUxaGRHZ3VhVzExYkNoaGFEZ3NJR0pvTUNrN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzNMQ0JpYkRFcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEY3NJR0pvTVNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb055d2dZbXd4S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTnl3Z1ltZ3hLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNOaXdnWW13eUtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXdzJMQ0JpYURJcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEWXNJR0pzTWlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURZc0lHSm9NaWtwSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRFVzSUdKc015a3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNOU3dnWW1nektTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZzFMQ0JpYkRNcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnMUxDQmlhRE1wS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3cwTENCaWJEUXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRFFzSUdKb05Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OQ3dnWW13MEtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb05Dd2dZbWcwS1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTXl3Z1ltdzFLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3d6TENCaWFEVXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRE1zSUdKc05Ta3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFETXNJR0pvTlNrcElId2dNRHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRJc0lHSnNOaWtwSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTWl3Z1ltZzJLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d5TENCaWJEWXBLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZ3lMQ0JpYURZcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3eExDQmliRGNwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRFc0lHSm9OeWtwSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTVN3Z1ltdzNLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9NU3dnWW1nM0tTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc01Dd2dZbXc0S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3d0xDQmlhRGdwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURBc0lHSnNPQ2twSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhREFzSUdKb09Da3BJSHdnTUR0Y2JpQWdJQ0IyWVhJZ2R6Z2dQU0FvS0NoaklDc2diRzhwSUh3Z01Da2dLeUFvS0cxcFpDQW1JREI0TVdabVppa2dQRHdnTVRNcEtTQjhJREE3WEc0Z0lDQWdZeUE5SUNnb0tHaHBJQ3NnS0cxcFpDQStQajRnTVRNcEtTQjhJREFwSUNzZ0tIYzRJRDQrUGlBeU5pa3BJSHdnTUR0Y2JpQWdJQ0IzT0NBbVBTQXdlRE5tWm1abVptWTdYRzRnSUNBZ0x5b2dheUE5SURrZ0tpOWNiaUFnSUNCc2J5QTlJRTFoZEdndWFXMTFiQ2hoYkRrc0lHSnNNQ2s3WEc0Z0lDQWdiV2xrSUQwZ1RXRjBhQzVwYlhWc0tHRnNPU3dnWW1nd0tUdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvT1N3Z1ltd3dLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdUV0YwYUM1cGJYVnNLR0ZvT1N3Z1ltZ3dLVHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRnc0lHSnNNU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzT0N3Z1ltZ3hLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2c0TENCaWJERXBLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZzRMQ0JpYURFcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3M0xDQmliRElwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRjc0lHSm9NaWtwSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTnl3Z1ltd3lLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9OeXdnWW1neUtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc05pd2dZbXd6S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3MkxDQmlhRE1wS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURZc0lHSnNNeWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRFlzSUdKb015a3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJEVXNJR0pzTkNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc05Td2dZbWcwS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnMUxDQmliRFFwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cxTENCaWFEUXBLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzBMQ0JpYkRVcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEUXNJR0pvTlNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb05Dd2dZbXcxS1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTkN3Z1ltZzFLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNeXdnWW13MktTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3pMQ0JpYURZcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFETXNJR0pzTmlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURNc0lHSm9OaWtwSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRElzSUdKc055a3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNNaXdnWW1nM0tTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZ3lMQ0JpYkRjcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdneUxDQmlhRGNwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3d4TENCaWJEZ3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiREVzSUdKb09Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9NU3dnWW13NEtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb01Td2dZbWc0S1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTUN3Z1ltdzVLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3d3TENCaWFEa3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhREFzSUdKc09Ta3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEQXNJR0pvT1NrcElId2dNRHRjYmlBZ0lDQjJZWElnZHprZ1BTQW9LQ2hqSUNzZ2JHOHBJSHdnTUNrZ0t5QW9LRzFwWkNBbUlEQjRNV1ptWmlrZ1BEd2dNVE1wS1NCOElEQTdYRzRnSUNBZ1l5QTlJQ2dvS0docElDc2dLRzFwWkNBK1BqNGdNVE1wS1NCOElEQXBJQ3NnS0hjNUlENCtQaUF5TmlrcElId2dNRHRjYmlBZ0lDQjNPU0FtUFNBd2VETm1abVptWm1ZN1hHNGdJQ0FnTHlvZ2F5QTlJREV3SUNvdlhHNGdJQ0FnYkc4Z1BTQk5ZWFJvTG1sdGRXd29ZV3c1TENCaWJERXBPMXh1SUNBZ0lHMXBaQ0E5SUUxaGRHZ3VhVzExYkNoaGJEa3NJR0pvTVNrN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRGtzSUdKc01Ta3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlFMWhkR2d1YVcxMWJDaGhhRGtzSUdKb01TazdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3c0TENCaWJESXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRGdzSUdKb01pa3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9PQ3dnWW13eUtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb09Dd2dZbWd5S1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTnl3Z1ltd3pLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3czTENCaWFETXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRGNzSUdKc015a3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEY3NJR0pvTXlrcElId2dNRHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRZc0lHSnNOQ2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTml3Z1ltZzBLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cyTENCaWJEUXBLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZzJMQ0JpYURRcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3MUxDQmliRFVwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRVc0lHSm9OU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTlN3Z1ltdzFLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9OU3dnWW1nMUtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc05Dd2dZbXcyS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3MExDQmlhRFlwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURRc0lHSnNOaWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRFFzSUdKb05pa3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJETXNJR0pzTnlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc015d2dZbWczS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnekxDQmliRGNwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d6TENCaWFEY3BLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXd3lMQ0JpYkRncEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJESXNJR0pvT0NrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb01pd2dZbXc0S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTWl3Z1ltZzRLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNU3dnWW13NUtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3hMQ0JpYURrcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFERXNJR0pzT1NrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURFc0lHSm9PU2twSUh3Z01EdGNiaUFnSUNCMllYSWdkekV3SUQwZ0tDZ29ZeUFySUd4dktTQjhJREFwSUNzZ0tDaHRhV1FnSmlBd2VERm1abVlwSUR3OElERXpLU2tnZkNBd08xeHVJQ0FnSUdNZ1BTQW9LQ2hvYVNBcklDaHRhV1FnUGo0K0lERXpLU2tnZkNBd0tTQXJJQ2gzTVRBZ1BqNCtJREkyS1NrZ2ZDQXdPMXh1SUNBZ0lIY3hNQ0FtUFNBd2VETm1abVptWm1ZN1hHNGdJQ0FnTHlvZ2F5QTlJREV4SUNvdlhHNGdJQ0FnYkc4Z1BTQk5ZWFJvTG1sdGRXd29ZV3c1TENCaWJESXBPMXh1SUNBZ0lHMXBaQ0E5SUUxaGRHZ3VhVzExYkNoaGJEa3NJR0pvTWlrN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRGtzSUdKc01pa3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlFMWhkR2d1YVcxMWJDaGhhRGtzSUdKb01pazdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3c0TENCaWJETXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRGdzSUdKb015a3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9PQ3dnWW13ektTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb09Dd2dZbWd6S1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTnl3Z1ltdzBLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3czTENCaWFEUXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRGNzSUdKc05Da3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEY3NJR0pvTkNrcElId2dNRHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRZc0lHSnNOU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTml3Z1ltZzFLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cyTENCaWJEVXBLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZzJMQ0JpYURVcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3MUxDQmliRFlwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRVc0lHSm9OaWtwSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTlN3Z1ltdzJLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9OU3dnWW1nMktTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc05Dd2dZbXczS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3MExDQmlhRGNwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURRc0lHSnNOeWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRFFzSUdKb055a3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJETXNJR0pzT0NrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc015d2dZbWc0S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnekxDQmliRGdwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d6TENCaWFEZ3BLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXd3lMQ0JpYkRrcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJESXNJR0pvT1NrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb01pd2dZbXc1S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTWl3Z1ltZzVLU2tnZkNBd08xeHVJQ0FnSUhaaGNpQjNNVEVnUFNBb0tDaGpJQ3NnYkc4cElId2dNQ2tnS3lBb0tHMXBaQ0FtSURCNE1XWm1aaWtnUER3Z01UTXBLU0I4SURBN1hHNGdJQ0FnWXlBOUlDZ29LR2hwSUNzZ0tHMXBaQ0ErUGo0Z01UTXBLU0I4SURBcElDc2dLSGN4TVNBK1BqNGdNallwS1NCOElEQTdYRzRnSUNBZ2R6RXhJQ1k5SURCNE0yWm1abVptWmp0Y2JpQWdJQ0F2S2lCcklEMGdNVElnS2k5Y2JpQWdJQ0JzYnlBOUlFMWhkR2d1YVcxMWJDaGhiRGtzSUdKc015azdYRzRnSUNBZ2JXbGtJRDBnVFdGMGFDNXBiWFZzS0dGc09Td2dZbWd6S1R0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9PU3dnWW13ektTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ1RXRjBhQzVwYlhWc0tHRm9PU3dnWW1nektUdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRGdzSUdKc05Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNPQ3dnWW1nMEtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZzRMQ0JpYkRRcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnNExDQmlhRFFwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3czTENCaWJEVXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRGNzSUdKb05Ta3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OeXdnWW13MUtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb055d2dZbWcxS1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTml3Z1ltdzJLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3cyTENCaWFEWXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRFlzSUdKc05pa3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEWXNJR0pvTmlrcElId2dNRHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRVc0lHSnNOeWtwSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTlN3Z1ltZzNLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cxTENCaWJEY3BLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZzFMQ0JpYURjcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3MExDQmliRGdwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRRc0lHSm9PQ2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTkN3Z1ltdzRLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9OQ3dnWW1nNEtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc015d2dZbXc1S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3ekxDQmlhRGtwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURNc0lHSnNPU2twSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRE1zSUdKb09Ta3BJSHdnTUR0Y2JpQWdJQ0IyWVhJZ2R6RXlJRDBnS0Nnb1l5QXJJR3h2S1NCOElEQXBJQ3NnS0NodGFXUWdKaUF3ZURGbVptWXBJRHc4SURFektTa2dmQ0F3TzF4dUlDQWdJR01nUFNBb0tDaG9hU0FySUNodGFXUWdQajQrSURFektTa2dmQ0F3S1NBcklDaDNNVElnUGo0K0lESTJLU2tnZkNBd08xeHVJQ0FnSUhjeE1pQW1QU0F3ZURObVptWm1abVk3WEc0Z0lDQWdMeW9nYXlBOUlERXpJQ292WEc0Z0lDQWdiRzhnUFNCTllYUm9MbWx0ZFd3b1lXdzVMQ0JpYkRRcE8xeHVJQ0FnSUcxcFpDQTlJRTFoZEdndWFXMTFiQ2hoYkRrc0lHSm9OQ2s3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEa3NJR0pzTkNrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUUxaGRHZ3VhVzExYkNoaGFEa3NJR0pvTkNrN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzRMQ0JpYkRVcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEZ3NJR0pvTlNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb09Dd2dZbXcxS1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvT0N3Z1ltZzFLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNOeXdnWW13MktTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXdzNMQ0JpYURZcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEY3NJR0pzTmlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURjc0lHSm9OaWtwSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRFlzSUdKc055a3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNOaXdnWW1nM0tTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZzJMQ0JpYkRjcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnMkxDQmlhRGNwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3cxTENCaWJEZ3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRFVzSUdKb09Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OU3dnWW13NEtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb05Td2dZbWc0S1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTkN3Z1ltdzVLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3cwTENCaWFEa3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRFFzSUdKc09Ta3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEUXNJR0pvT1NrcElId2dNRHRjYmlBZ0lDQjJZWElnZHpFeklEMGdLQ2dvWXlBcklHeHZLU0I4SURBcElDc2dLQ2h0YVdRZ0ppQXdlREZtWm1ZcElEdzhJREV6S1NrZ2ZDQXdPMXh1SUNBZ0lHTWdQU0FvS0Nob2FTQXJJQ2h0YVdRZ1BqNCtJREV6S1NrZ2ZDQXdLU0FySUNoM01UTWdQajQrSURJMktTa2dmQ0F3TzF4dUlDQWdJSGN4TXlBbVBTQXdlRE5tWm1abVptWTdYRzRnSUNBZ0x5b2dheUE5SURFMElDb3ZYRzRnSUNBZ2JHOGdQU0JOWVhSb0xtbHRkV3dvWVd3NUxDQmliRFVwTzF4dUlDQWdJRzFwWkNBOUlFMWhkR2d1YVcxMWJDaGhiRGtzSUdKb05TazdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURrc0lHSnNOU2twSUh3Z01EdGNiaUFnSUNCb2FTQTlJRTFoZEdndWFXMTFiQ2hoYURrc0lHSm9OU2s3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3NExDQmliRFlwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRnc0lHSm9OaWtwSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvT0N3Z1ltdzJLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9PQ3dnWW1nMktTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc055d2dZbXczS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3M0xDQmlhRGNwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURjc0lHSnNOeWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRGNzSUdKb055a3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJEWXNJR0pzT0NrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc05pd2dZbWc0S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnMkxDQmliRGdwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cyTENCaWFEZ3BLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzFMQ0JpYkRrcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEVXNJR0pvT1NrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb05Td2dZbXc1S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTlN3Z1ltZzVLU2tnZkNBd08xeHVJQ0FnSUhaaGNpQjNNVFFnUFNBb0tDaGpJQ3NnYkc4cElId2dNQ2tnS3lBb0tHMXBaQ0FtSURCNE1XWm1aaWtnUER3Z01UTXBLU0I4SURBN1hHNGdJQ0FnWXlBOUlDZ29LR2hwSUNzZ0tHMXBaQ0ErUGo0Z01UTXBLU0I4SURBcElDc2dLSGN4TkNBK1BqNGdNallwS1NCOElEQTdYRzRnSUNBZ2R6RTBJQ1k5SURCNE0yWm1abVptWmp0Y2JpQWdJQ0F2S2lCcklEMGdNVFVnS2k5Y2JpQWdJQ0JzYnlBOUlFMWhkR2d1YVcxMWJDaGhiRGtzSUdKc05pazdYRzRnSUNBZ2JXbGtJRDBnVFdGMGFDNXBiWFZzS0dGc09Td2dZbWcyS1R0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9PU3dnWW13MktTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ1RXRjBhQzVwYlhWc0tHRm9PU3dnWW1nMktUdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRGdzSUdKc055a3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNPQ3dnWW1nM0tTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZzRMQ0JpYkRjcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnNExDQmlhRGNwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3czTENCaWJEZ3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRGNzSUdKb09Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OeXdnWW13NEtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb055d2dZbWc0S1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTml3Z1ltdzVLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3cyTENCaWFEa3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRFlzSUdKc09Ta3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEWXNJR0pvT1NrcElId2dNRHRjYmlBZ0lDQjJZWElnZHpFMUlEMGdLQ2dvWXlBcklHeHZLU0I4SURBcElDc2dLQ2h0YVdRZ0ppQXdlREZtWm1ZcElEdzhJREV6S1NrZ2ZDQXdPMXh1SUNBZ0lHTWdQU0FvS0Nob2FTQXJJQ2h0YVdRZ1BqNCtJREV6S1NrZ2ZDQXdLU0FySUNoM01UVWdQajQrSURJMktTa2dmQ0F3TzF4dUlDQWdJSGN4TlNBbVBTQXdlRE5tWm1abVptWTdYRzRnSUNBZ0x5b2dheUE5SURFMklDb3ZYRzRnSUNBZ2JHOGdQU0JOWVhSb0xtbHRkV3dvWVd3NUxDQmliRGNwTzF4dUlDQWdJRzFwWkNBOUlFMWhkR2d1YVcxMWJDaGhiRGtzSUdKb055azdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURrc0lHSnNOeWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJRTFoZEdndWFXMTFiQ2hoYURrc0lHSm9OeWs3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3NExDQmliRGdwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRnc0lHSm9PQ2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvT0N3Z1ltdzRLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9PQ3dnWW1nNEtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc055d2dZbXc1S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3M0xDQmlhRGtwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURjc0lHSnNPU2twSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRGNzSUdKb09Ta3BJSHdnTUR0Y2JpQWdJQ0IyWVhJZ2R6RTJJRDBnS0Nnb1l5QXJJR3h2S1NCOElEQXBJQ3NnS0NodGFXUWdKaUF3ZURGbVptWXBJRHc4SURFektTa2dmQ0F3TzF4dUlDQWdJR01nUFNBb0tDaG9hU0FySUNodGFXUWdQajQrSURFektTa2dmQ0F3S1NBcklDaDNNVFlnUGo0K0lESTJLU2tnZkNBd08xeHVJQ0FnSUhjeE5pQW1QU0F3ZURObVptWm1abVk3WEc0Z0lDQWdMeW9nYXlBOUlERTNJQ292WEc0Z0lDQWdiRzhnUFNCTllYUm9MbWx0ZFd3b1lXdzVMQ0JpYkRncE8xeHVJQ0FnSUcxcFpDQTlJRTFoZEdndWFXMTFiQ2hoYkRrc0lHSm9PQ2s3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEa3NJR0pzT0NrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUUxaGRHZ3VhVzExYkNoaGFEa3NJR0pvT0NrN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzRMQ0JpYkRrcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEZ3NJR0pvT1NrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb09Dd2dZbXc1S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvT0N3Z1ltZzVLU2tnZkNBd08xeHVJQ0FnSUhaaGNpQjNNVGNnUFNBb0tDaGpJQ3NnYkc4cElId2dNQ2tnS3lBb0tHMXBaQ0FtSURCNE1XWm1aaWtnUER3Z01UTXBLU0I4SURBN1hHNGdJQ0FnWXlBOUlDZ29LR2hwSUNzZ0tHMXBaQ0ErUGo0Z01UTXBLU0I4SURBcElDc2dLSGN4TnlBK1BqNGdNallwS1NCOElEQTdYRzRnSUNBZ2R6RTNJQ1k5SURCNE0yWm1abVptWmp0Y2JpQWdJQ0F2S2lCcklEMGdNVGdnS2k5Y2JpQWdJQ0JzYnlBOUlFMWhkR2d1YVcxMWJDaGhiRGtzSUdKc09TazdYRzRnSUNBZ2JXbGtJRDBnVFdGMGFDNXBiWFZzS0dGc09Td2dZbWc1S1R0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9PU3dnWW13NUtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ1RXRjBhQzVwYlhWc0tHRm9PU3dnWW1nNUtUdGNiaUFnSUNCMllYSWdkekU0SUQwZ0tDZ29ZeUFySUd4dktTQjhJREFwSUNzZ0tDaHRhV1FnSmlBd2VERm1abVlwSUR3OElERXpLU2tnZkNBd08xeHVJQ0FnSUdNZ1BTQW9LQ2hvYVNBcklDaHRhV1FnUGo0K0lERXpLU2tnZkNBd0tTQXJJQ2gzTVRnZ1BqNCtJREkyS1NrZ2ZDQXdPMXh1SUNBZ0lIY3hPQ0FtUFNBd2VETm1abVptWm1ZN1hHNGdJQ0FnYjFzd1hTQTlJSGN3TzF4dUlDQWdJRzliTVYwZ1BTQjNNVHRjYmlBZ0lDQnZXekpkSUQwZ2R6STdYRzRnSUNBZ2Ixc3pYU0E5SUhjek8xeHVJQ0FnSUc5Yk5GMGdQU0IzTkR0Y2JpQWdJQ0J2V3pWZElEMGdkelU3WEc0Z0lDQWdiMXMyWFNBOUlIYzJPMXh1SUNBZ0lHOWJOMTBnUFNCM056dGNiaUFnSUNCdld6aGRJRDBnZHpnN1hHNGdJQ0FnYjFzNVhTQTlJSGM1TzF4dUlDQWdJRzliTVRCZElEMGdkekV3TzF4dUlDQWdJRzliTVRGZElEMGdkekV4TzF4dUlDQWdJRzliTVRKZElEMGdkekV5TzF4dUlDQWdJRzliTVROZElEMGdkekV6TzF4dUlDQWdJRzliTVRSZElEMGdkekUwTzF4dUlDQWdJRzliTVRWZElEMGdkekUxTzF4dUlDQWdJRzliTVRaZElEMGdkekUyTzF4dUlDQWdJRzliTVRkZElEMGdkekUzTzF4dUlDQWdJRzliTVRoZElEMGdkekU0TzF4dUlDQWdJR2xtSUNoaklDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCdld6RTVYU0E5SUdNN1hHNGdJQ0FnSUNCdmRYUXViR1Z1WjNSb0t5czdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ2ZFhRN1hHNGdJSDA3WEc1Y2JpQWdMeThnVUc5c2VXWnBiR3dnWTI5dFlseHVJQ0JwWmlBb0lVMWhkR2d1YVcxMWJDa2dlMXh1SUNBZ0lHTnZiV0l4TUUxMWJGUnZJRDBnYzIxaGJHeE5kV3hVYnp0Y2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHSnBaMDExYkZSdklDaHpaV3htTENCdWRXMHNJRzkxZENrZ2UxeHVJQ0FnSUc5MWRDNXVaV2RoZEdsMlpTQTlJRzUxYlM1dVpXZGhkR2wyWlNCZUlITmxiR1l1Ym1WbllYUnBkbVU3WEc0Z0lDQWdiM1YwTG14bGJtZDBhQ0E5SUhObGJHWXViR1Z1WjNSb0lDc2diblZ0TG14bGJtZDBhRHRjYmx4dUlDQWdJSFpoY2lCallYSnllU0E5SURBN1hHNGdJQ0FnZG1GeUlHaHVZMkZ5Y25rZ1BTQXdPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHc2dQU0F3T3lCcklEd2diM1YwTG14bGJtZDBhQ0F0SURFN0lHc3JLeWtnZTF4dUlDQWdJQ0FnTHk4Z1UzVnRJR0ZzYkNCM2IzSmtjeUIzYVhSb0lIUm9aU0J6WVcxbElHQnBJQ3NnYWlBOUlHdGdJR0Z1WkNCaFkyTjFiWFZzWVhSbElHQnVZMkZ5Y25sZ0xGeHVJQ0FnSUNBZ0x5OGdibTkwWlNCMGFHRjBJRzVqWVhKeWVTQmpiM1ZzWkNCaVpTQStQU0F3ZURObVptWm1abVpjYmlBZ0lDQWdJSFpoY2lCdVkyRnljbmtnUFNCb2JtTmhjbko1TzF4dUlDQWdJQ0FnYUc1allYSnllU0E5SURBN1hHNGdJQ0FnSUNCMllYSWdjbmR2Y21RZ1BTQmpZWEp5ZVNBbUlEQjRNMlptWm1abVpqdGNiaUFnSUNBZ0lIWmhjaUJ0WVhoS0lEMGdUV0YwYUM1dGFXNG9heXdnYm5WdExteGxibWQwYUNBdElERXBPMXh1SUNBZ0lDQWdabTl5SUNoMllYSWdhaUE5SUUxaGRHZ3ViV0Y0S0RBc0lHc2dMU0J6Wld4bUxteGxibWQwYUNBcklERXBPeUJxSUR3OUlHMWhlRW83SUdvckt5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FTQTlJR3NnTFNCcU8xeHVJQ0FnSUNBZ0lDQjJZWElnWVNBOUlITmxiR1l1ZDI5eVpITmJhVjBnZkNBd08xeHVJQ0FnSUNBZ0lDQjJZWElnWWlBOUlHNTFiUzUzYjNKa2MxdHFYU0I4SURBN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5SUQwZ1lTQXFJR0k3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJR3h2SUQwZ2NpQW1JREI0TTJabVptWm1aanRjYmlBZ0lDQWdJQ0FnYm1OaGNuSjVJRDBnS0c1allYSnllU0FySUNnb2NpQXZJREI0TkRBd01EQXdNQ2tnZkNBd0tTa2dmQ0F3TzF4dUlDQWdJQ0FnSUNCc2J5QTlJQ2hzYnlBcklISjNiM0prS1NCOElEQTdYRzRnSUNBZ0lDQWdJSEozYjNKa0lEMGdiRzhnSmlBd2VETm1abVptWm1ZN1hHNGdJQ0FnSUNBZ0lHNWpZWEp5ZVNBOUlDaHVZMkZ5Y25rZ0t5QW9iRzhnUGo0K0lESTJLU2tnZkNBd08xeHVYRzRnSUNBZ0lDQWdJR2h1WTJGeWNua2dLejBnYm1OaGNuSjVJRDQrUGlBeU5qdGNiaUFnSUNBZ0lDQWdibU5oY25KNUlDWTlJREI0TTJabVptWm1aanRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJRzkxZEM1M2IzSmtjMXRyWFNBOUlISjNiM0prTzF4dUlDQWdJQ0FnWTJGeWNua2dQU0J1WTJGeWNuazdYRzRnSUNBZ0lDQnVZMkZ5Y25rZ1BTQm9ibU5oY25KNU8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1kyRnljbmtnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJRzkxZEM1M2IzSmtjMXRyWFNBOUlHTmhjbko1TzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnZkWFF1YkdWdVozUm9MUzA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHOTFkQzV6ZEhKcGNDZ3BPMXh1SUNCOVhHNWNiaUFnWm5WdVkzUnBiMjRnYW5WdFltOU5kV3hVYnlBb2MyVnNaaXdnYm5WdExDQnZkWFFwSUh0Y2JpQWdJQ0IyWVhJZ1ptWjBiU0E5SUc1bGR5QkdSbFJOS0NrN1hHNGdJQ0FnY21WMGRYSnVJR1ptZEcwdWJYVnNjQ2h6Wld4bUxDQnVkVzBzSUc5MWRDazdYRzRnSUgxY2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWJYVnNWRzhnUFNCbWRXNWpkR2x2YmlCdGRXeFVieUFvYm5WdExDQnZkWFFwSUh0Y2JpQWdJQ0IyWVhJZ2NtVnpPMXh1SUNBZ0lIWmhjaUJzWlc0Z1BTQjBhR2x6TG14bGJtZDBhQ0FySUc1MWJTNXNaVzVuZEdnN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDA5UFNBeE1DQW1KaUJ1ZFcwdWJHVnVaM1JvSUQwOVBTQXhNQ2tnZTF4dUlDQWdJQ0FnY21WeklEMGdZMjl0WWpFd1RYVnNWRzhvZEdocGN5d2diblZ0TENCdmRYUXBPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9iR1Z1SUR3Z05qTXBJSHRjYmlBZ0lDQWdJSEpsY3lBOUlITnRZV3hzVFhWc1ZHOG9kR2hwY3l3Z2JuVnRMQ0J2ZFhRcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JHVnVJRHdnTVRBeU5Da2dlMXh1SUNBZ0lDQWdjbVZ6SUQwZ1ltbG5UWFZzVkc4b2RHaHBjeXdnYm5WdExDQnZkWFFwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWE1nUFNCcWRXMWliMDExYkZSdktIUm9hWE1zSUc1MWJTd2diM1YwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRU52YjJ4bGVTMVVkV3RsZVNCaGJHZHZjbWwwYUcwZ1ptOXlJRVpHVkZ4dUlDQXZMeUJ6YkdsbmFIUnNlU0J5WlhacGMybDBaV1FnZEc4Z2NtVnNlU0J2YmlCc2IyOXdhVzVuSUdsdWMzUmxZV1FnYjJZZ2NtVmpkWEp6YVc5dVhHNWNiaUFnWm5WdVkzUnBiMjRnUmtaVVRTQW9lQ3dnZVNrZ2UxeHVJQ0FnSUhSb2FYTXVlQ0E5SUhnN1hHNGdJQ0FnZEdocGN5NTVJRDBnZVR0Y2JpQWdmVnh1WEc0Z0lFWkdWRTB1Y0hKdmRHOTBlWEJsTG0xaGEyVlNRbFFnUFNCbWRXNWpkR2x2YmlCdFlXdGxVa0pVSUNoT0tTQjdYRzRnSUNBZ2RtRnlJSFFnUFNCdVpYY2dRWEp5WVhrb1RpazdYRzRnSUNBZ2RtRnlJR3dnUFNCQ1RpNXdjbTkwYjNSNWNHVXVYMk52ZFc1MFFtbDBjeWhPS1NBdElERTdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQk9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIUmJhVjBnUFNCMGFHbHpMbkpsZGtKcGJpaHBMQ0JzTENCT0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZER0Y2JpQWdmVHRjYmx4dUlDQXZMeUJTWlhSMWNtNXpJR0pwYm1GeWVTMXlaWFpsY25ObFpDQnlaWEJ5WlhObGJuUmhkR2x2YmlCdlppQmdlR0JjYmlBZ1JrWlVUUzV3Y205MGIzUjVjR1V1Y21WMlFtbHVJRDBnWm5WdVkzUnBiMjRnY21WMlFtbHVJQ2g0TENCc0xDQk9LU0I3WEc0Z0lDQWdhV1lnS0hnZ1BUMDlJREFnZkh3Z2VDQTlQVDBnVGlBdElERXBJSEpsZEhWeWJpQjRPMXh1WEc0Z0lDQWdkbUZ5SUhKaUlEMGdNRHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR3c3SUdrckt5a2dlMXh1SUNBZ0lDQWdjbUlnZkQwZ0tIZ2dKaUF4S1NBOFBDQW9iQ0F0SUdrZ0xTQXhLVHRjYmlBZ0lDQWdJSGdnUGo0OUlERTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhKaU8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZCbGNtWnZjbTF6SUZ3aWRIZGxaV1JzYVc1blhDSWdjR2hoYzJVc0lIUm9aWEpsWm05eVpTQW5aVzExYkdGMGFXNW5KMXh1SUNBdkx5QmlaV2hoZG1sdmRYSWdiMllnZEdobElISmxZM1Z5YzJsMlpTQmhiR2R2Y21sMGFHMWNiaUFnUmtaVVRTNXdjbTkwYjNSNWNHVXVjR1Z5YlhWMFpTQTlJR1oxYm1OMGFXOXVJSEJsY20xMWRHVWdLSEppZEN3Z2NuZHpMQ0JwZDNNc0lISjBkM01zSUdsMGQzTXNJRTRwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUU0N0lHa3JLeWtnZTF4dUlDQWdJQ0FnY25SM2MxdHBYU0E5SUhKM2MxdHlZblJiYVYxZE8xeHVJQ0FnSUNBZ2FYUjNjMXRwWFNBOUlHbDNjMXR5WW5SYmFWMWRPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JseHVJQ0JHUmxSTkxuQnliM1J2ZEhsd1pTNTBjbUZ1YzJadmNtMGdQU0JtZFc1amRHbHZiaUIwY21GdWMyWnZjbTBnS0hKM2N5d2dhWGR6TENCeWRIZHpMQ0JwZEhkekxDQk9MQ0J5WW5RcElIdGNiaUFnSUNCMGFHbHpMbkJsY20xMWRHVW9jbUowTENCeWQzTXNJR2wzY3l3Z2NuUjNjeXdnYVhSM2N5d2dUaWs3WEc1Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ6SUQwZ01Uc2djeUE4SUU0N0lITWdQRHc5SURFcElIdGNiaUFnSUNBZ0lIWmhjaUJzSUQwZ2N5QThQQ0F4TzF4dVhHNGdJQ0FnSUNCMllYSWdjblIzWkdZZ1BTQk5ZWFJvTG1OdmN5Z3lJQ29nVFdGMGFDNVFTU0F2SUd3cE8xeHVJQ0FnSUNBZ2RtRnlJR2wwZDJSbUlEMGdUV0YwYUM1emFXNG9NaUFxSUUxaGRHZ3VVRWtnTHlCc0tUdGNibHh1SUNBZ0lDQWdabTl5SUNoMllYSWdjQ0E5SURBN0lIQWdQQ0JPT3lCd0lDczlJR3dwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSEowZDJSbVh5QTlJSEowZDJSbU8xeHVJQ0FnSUNBZ0lDQjJZWElnYVhSM1pHWmZJRDBnYVhSM1pHWTdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYWlBOUlEQTdJR29nUENCek95QnFLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnY21VZ1BTQnlkSGR6VzNBZ0t5QnFYVHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdhV1VnUFNCcGRIZHpXM0FnS3lCcVhUdGNibHh1SUNBZ0lDQWdJQ0FnSUhaaGNpQnlieUE5SUhKMGQzTmJjQ0FySUdvZ0t5QnpYVHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdhVzhnUFNCcGRIZHpXM0FnS3lCcUlDc2djMTA3WEc1Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnY25nZ1BTQnlkSGRrWmw4Z0tpQnlieUF0SUdsMGQyUm1YeUFxSUdsdk8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVc4Z1BTQnlkSGRrWmw4Z0tpQnBieUFySUdsMGQyUm1YeUFxSUhKdk8xeHVJQ0FnSUNBZ0lDQWdJSEp2SUQwZ2NuZzdYRzVjYmlBZ0lDQWdJQ0FnSUNCeWRIZHpXM0FnS3lCcVhTQTlJSEpsSUNzZ2NtODdYRzRnSUNBZ0lDQWdJQ0FnYVhSM2MxdHdJQ3NnYWwwZ1BTQnBaU0FySUdsdk8xeHVYRzRnSUNBZ0lDQWdJQ0FnY25SM2MxdHdJQ3NnYWlBcklITmRJRDBnY21VZ0xTQnlienRjYmlBZ0lDQWdJQ0FnSUNCcGRIZHpXM0FnS3lCcUlDc2djMTBnUFNCcFpTQXRJR2x2TzF4dVhHNGdJQ0FnSUNBZ0lDQWdMeW9nYW5Ob2FXNTBJRzFoZUdSbGNIUm9JRG9nWm1Gc2MyVWdLaTljYmlBZ0lDQWdJQ0FnSUNCcFppQW9haUFoUFQwZ2JDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NuZ2dQU0J5ZEhka1ppQXFJSEowZDJSbVh5QXRJR2wwZDJSbUlDb2dhWFIzWkdaZk8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRIZGtabDhnUFNCeWRIZGtaaUFxSUdsMGQyUm1YeUFySUdsMGQyUm1JQ29nY25SM1pHWmZPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NuUjNaR1pmSUQwZ2NuZzdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lFWkdWRTB1Y0hKdmRHOTBlWEJsTG1kMVpYTnpUR1Z1TVROaUlEMGdablZ1WTNScGIyNGdaM1ZsYzNOTVpXNHhNMklnS0c0c0lHMHBJSHRjYmlBZ0lDQjJZWElnVGlBOUlFMWhkR2d1YldGNEtHMHNJRzRwSUh3Z01UdGNiaUFnSUNCMllYSWdiMlJrSUQwZ1RpQW1JREU3WEc0Z0lDQWdkbUZ5SUdrZ1BTQXdPMXh1SUNBZ0lHWnZjaUFvVGlBOUlFNGdMeUF5SUh3Z01Ec2dUanNnVGlBOUlFNGdQajQrSURFcElIdGNiaUFnSUNBZ0lHa3JLenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z01TQThQQ0JwSUNzZ01TQXJJRzlrWkR0Y2JpQWdmVHRjYmx4dUlDQkdSbFJOTG5CeWIzUnZkSGx3WlM1amIyNXFkV2RoZEdVZ1BTQm1kVzVqZEdsdmJpQmpiMjVxZFdkaGRHVWdLSEozY3l3Z2FYZHpMQ0JPS1NCN1hHNGdJQ0FnYVdZZ0tFNGdQRDBnTVNrZ2NtVjBkWEp1TzF4dVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCT0lDOGdNanNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZWElnZENBOUlISjNjMXRwWFR0Y2JseHVJQ0FnSUNBZ2NuZHpXMmxkSUQwZ2NuZHpXMDRnTFNCcElDMGdNVjA3WEc0Z0lDQWdJQ0J5ZDNOYlRpQXRJR2tnTFNBeFhTQTlJSFE3WEc1Y2JpQWdJQ0FnSUhRZ1BTQnBkM05iYVYwN1hHNWNiaUFnSUNBZ0lHbDNjMXRwWFNBOUlDMXBkM05iVGlBdElHa2dMU0F4WFR0Y2JpQWdJQ0FnSUdsM2MxdE9JQzBnYVNBdElERmRJRDBnTFhRN1hHNGdJQ0FnZlZ4dUlDQjlPMXh1WEc0Z0lFWkdWRTB1Y0hKdmRHOTBlWEJsTG01dmNtMWhiR2w2WlRFellpQTlJR1oxYm1OMGFXOXVJRzV2Y20xaGJHbDZaVEV6WWlBb2QzTXNJRTRwSUh0Y2JpQWdJQ0IyWVhJZ1kyRnljbmtnUFNBd08xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z1RpQXZJREk3SUdrckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUhjZ1BTQk5ZWFJvTG5KdmRXNWtLSGR6V3pJZ0tpQnBJQ3NnTVYwZ0x5Qk9LU0FxSURCNE1qQXdNQ0FyWEc0Z0lDQWdJQ0FnSUUxaGRHZ3VjbTkxYm1Rb2QzTmJNaUFxSUdsZElDOGdUaWtnSzF4dUlDQWdJQ0FnSUNCallYSnllVHRjYmx4dUlDQWdJQ0FnZDNOYmFWMGdQU0IzSUNZZ01IZ3pabVptWm1abU8xeHVYRzRnSUNBZ0lDQnBaaUFvZHlBOElEQjROREF3TURBd01Da2dlMXh1SUNBZ0lDQWdJQ0JqWVhKeWVTQTlJREE3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JqWVhKeWVTQTlJSGNnTHlBd2VEUXdNREF3TURBZ2ZDQXdPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCM2N6dGNiaUFnZlR0Y2JseHVJQ0JHUmxSTkxuQnliM1J2ZEhsd1pTNWpiMjUyWlhKME1UTmlJRDBnWm5WdVkzUnBiMjRnWTI5dWRtVnlkREV6WWlBb2QzTXNJR3hsYml3Z2NuZHpMQ0JPS1NCN1hHNGdJQ0FnZG1GeUlHTmhjbko1SUQwZ01EdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzRnSUNBZ0lDQmpZWEp5ZVNBOUlHTmhjbko1SUNzZ0tIZHpXMmxkSUh3Z01DazdYRzVjYmlBZ0lDQWdJSEozYzFzeUlDb2dhVjBnUFNCallYSnllU0FtSURCNE1XWm1aanNnWTJGeWNua2dQU0JqWVhKeWVTQStQajRnTVRNN1hHNGdJQ0FnSUNCeWQzTmJNaUFxSUdrZ0t5QXhYU0E5SUdOaGNuSjVJQ1lnTUhneFptWm1PeUJqWVhKeWVTQTlJR05oY25KNUlENCtQaUF4TXp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCUVlXUWdkMmwwYUNCNlpYSnZaWE5jYmlBZ0lDQm1iM0lnS0drZ1BTQXlJQ29nYkdWdU95QnBJRHdnVGpzZ0t5dHBLU0I3WEc0Z0lDQWdJQ0J5ZDNOYmFWMGdQU0F3TzF4dUlDQWdJSDFjYmx4dUlDQWdJR0Z6YzJWeWRDaGpZWEp5ZVNBOVBUMGdNQ2s3WEc0Z0lDQWdZWE56WlhKMEtDaGpZWEp5ZVNBbUlINHdlREZtWm1ZcElEMDlQU0F3S1R0Y2JpQWdmVHRjYmx4dUlDQkdSbFJOTG5CeWIzUnZkSGx3WlM1emRIVmlJRDBnWm5WdVkzUnBiMjRnYzNSMVlpQW9UaWtnZTF4dUlDQWdJSFpoY2lCd2FDQTlJRzVsZHlCQmNuSmhlU2hPS1R0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUU0N0lHa3JLeWtnZTF4dUlDQWdJQ0FnY0doYmFWMGdQU0F3TzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQndhRHRjYmlBZ2ZUdGNibHh1SUNCR1JsUk5MbkJ5YjNSdmRIbHdaUzV0ZFd4d0lEMGdablZ1WTNScGIyNGdiWFZzY0NBb2VDd2dlU3dnYjNWMEtTQjdYRzRnSUNBZ2RtRnlJRTRnUFNBeUlDb2dkR2hwY3k1bmRXVnpjMHhsYmpFellpaDRMbXhsYm1kMGFDd2dlUzVzWlc1bmRHZ3BPMXh1WEc0Z0lDQWdkbUZ5SUhKaWRDQTlJSFJvYVhNdWJXRnJaVkpDVkNoT0tUdGNibHh1SUNBZ0lIWmhjaUJmSUQwZ2RHaHBjeTV6ZEhWaUtFNHBPMXh1WEc0Z0lDQWdkbUZ5SUhKM2N5QTlJRzVsZHlCQmNuSmhlU2hPS1R0Y2JpQWdJQ0IyWVhJZ2NuZHpkQ0E5SUc1bGR5QkJjbkpoZVNoT0tUdGNiaUFnSUNCMllYSWdhWGR6ZENBOUlHNWxkeUJCY25KaGVTaE9LVHRjYmx4dUlDQWdJSFpoY2lCdWNuZHpJRDBnYm1WM0lFRnljbUY1S0U0cE8xeHVJQ0FnSUhaaGNpQnVjbmR6ZENBOUlHNWxkeUJCY25KaGVTaE9LVHRjYmlBZ0lDQjJZWElnYm1sM2MzUWdQU0J1WlhjZ1FYSnlZWGtvVGlrN1hHNWNiaUFnSUNCMllYSWdjbTEzY3lBOUlHOTFkQzUzYjNKa2N6dGNiaUFnSUNCeWJYZHpMbXhsYm1kMGFDQTlJRTQ3WEc1Y2JpQWdJQ0IwYUdsekxtTnZiblpsY25ReE0ySW9lQzUzYjNKa2N5d2dlQzVzWlc1bmRHZ3NJSEozY3l3Z1RpazdYRzRnSUNBZ2RHaHBjeTVqYjI1MlpYSjBNVE5pS0hrdWQyOXlaSE1zSUhrdWJHVnVaM1JvTENCdWNuZHpMQ0JPS1R0Y2JseHVJQ0FnSUhSb2FYTXVkSEpoYm5ObWIzSnRLSEozY3l3Z1h5d2djbmR6ZEN3Z2FYZHpkQ3dnVGl3Z2NtSjBLVHRjYmlBZ0lDQjBhR2x6TG5SeVlXNXpabTl5YlNodWNuZHpMQ0JmTENCdWNuZHpkQ3dnYm1sM2MzUXNJRTRzSUhKaWRDazdYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRTQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUhKNElEMGdjbmR6ZEZ0cFhTQXFJRzV5ZDNOMFcybGRJQzBnYVhkemRGdHBYU0FxSUc1cGQzTjBXMmxkTzF4dUlDQWdJQ0FnYVhkemRGdHBYU0E5SUhKM2MzUmJhVjBnS2lCdWFYZHpkRnRwWFNBcklHbDNjM1JiYVYwZ0tpQnVjbmR6ZEZ0cFhUdGNiaUFnSUNBZ0lISjNjM1JiYVYwZ1BTQnllRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG1OdmJtcDFaMkYwWlNoeWQzTjBMQ0JwZDNOMExDQk9LVHRjYmlBZ0lDQjBhR2x6TG5SeVlXNXpabTl5YlNoeWQzTjBMQ0JwZDNOMExDQnliWGR6TENCZkxDQk9MQ0J5WW5RcE8xeHVJQ0FnSUhSb2FYTXVZMjl1YW5WbllYUmxLSEp0ZDNNc0lGOHNJRTRwTzF4dUlDQWdJSFJvYVhNdWJtOXliV0ZzYVhwbE1UTmlLSEp0ZDNNc0lFNHBPMXh1WEc0Z0lDQWdiM1YwTG01bFoyRjBhWFpsSUQwZ2VDNXVaV2RoZEdsMlpTQmVJSGt1Ym1WbllYUnBkbVU3WEc0Z0lDQWdiM1YwTG14bGJtZDBhQ0E5SUhndWJHVnVaM1JvSUNzZ2VTNXNaVzVuZEdnN1hHNGdJQ0FnY21WMGRYSnVJRzkxZEM1emRISnBjQ2dwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRTExYkhScGNHeDVJR0IwYUdsellDQmllU0JnYm5WdFlGeHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWJYVnNJRDBnWm5WdVkzUnBiMjRnYlhWc0lDaHVkVzBwSUh0Y2JpQWdJQ0IyWVhJZ2IzVjBJRDBnYm1WM0lFSk9LRzUxYkd3cE8xeHVJQ0FnSUc5MWRDNTNiM0prY3lBOUlHNWxkeUJCY25KaGVTaDBhR2x6TG14bGJtZDBhQ0FySUc1MWJTNXNaVzVuZEdncE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtMTFiRlJ2S0c1MWJTd2diM1YwS1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJOZFd4MGFYQnNlU0JsYlhCc2IzbHBibWNnUmtaVVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1dGRXeG1JRDBnWm5WdVkzUnBiMjRnYlhWc1ppQW9iblZ0S1NCN1hHNGdJQ0FnZG1GeUlHOTFkQ0E5SUc1bGR5QkNUaWh1ZFd4c0tUdGNiaUFnSUNCdmRYUXVkMjl5WkhNZ1BTQnVaWGNnUVhKeVlYa29kR2hwY3k1c1pXNW5kR2dnS3lCdWRXMHViR1Z1WjNSb0tUdGNiaUFnSUNCeVpYUjFjbTRnYW5WdFltOU5kV3hVYnloMGFHbHpMQ0J1ZFcwc0lHOTFkQ2s3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdTVzR0Y0d4aFkyVWdUWFZzZEdsd2JHbGpZWFJwYjI1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG1sdGRXd2dQU0JtZFc1amRHbHZiaUJwYlhWc0lDaHVkVzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHOXVaU2dwTG0xMWJGUnZLRzUxYlN3Z2RHaHBjeWs3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbWx0ZFd4dUlEMGdablZ1WTNScGIyNGdhVzExYkc0Z0tHNTFiU2tnZTF4dUlDQWdJR0Z6YzJWeWRDaDBlWEJsYjJZZ2JuVnRJRDA5UFNBbmJuVnRZbVZ5SnlrN1hHNGdJQ0FnWVhOelpYSjBLRzUxYlNBOElEQjROREF3TURBd01DazdYRzVjYmlBZ0lDQXZMeUJEWVhKeWVWeHVJQ0FnSUhaaGNpQmpZWEp5ZVNBOUlEQTdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjJZWElnZHlBOUlDaDBhR2x6TG5kdmNtUnpXMmxkSUh3Z01Da2dLaUJ1ZFcwN1hHNGdJQ0FnSUNCMllYSWdiRzhnUFNBb2R5QW1JREI0TTJabVptWm1aaWtnS3lBb1kyRnljbmtnSmlBd2VETm1abVptWm1ZcE8xeHVJQ0FnSUNBZ1kyRnljbmtnUGo0OUlESTJPMXh1SUNBZ0lDQWdZMkZ5Y25rZ0t6MGdLSGNnTHlBd2VEUXdNREF3TURBcElId2dNRHRjYmlBZ0lDQWdJQzh2SUU1UFZFVTZJR3h2SUdseklESTNZbWwwSUcxaGVHbHRkVzFjYmlBZ0lDQWdJR05oY25KNUlDczlJR3h2SUQ0K1BpQXlOanRjYmlBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYVYwZ1BTQnNieUFtSURCNE0yWm1abVptWmp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1kyRnljbmtnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYVYwZ1BTQmpZWEp5ZVR0Y2JpQWdJQ0FnSUhSb2FYTXViR1Z1WjNSb0t5czdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExtMTFiRzRnUFNCbWRXNWpkR2x2YmlCdGRXeHVJQ2h1ZFcwcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiRzl1WlNncExtbHRkV3h1S0c1MWJTazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1lIUm9hWE5nSUNvZ1lIUm9hWE5nWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzV6Y1hJZ1BTQm1kVzVqZEdsdmJpQnpjWElnS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtMTFiQ2gwYUdsektUdGNiaUFnZlR0Y2JseHVJQ0F2THlCZ2RHaHBjMkFnS2lCZ2RHaHBjMkFnYVc0dGNHeGhZMlZjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbWx6Y1hJZ1BTQm1kVzVqZEdsdmJpQnBjM0Z5SUNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXBiWFZzS0hSb2FYTXVZMnh2Ym1Vb0tTazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1RXRjBhQzV3YjNjb1lIUm9hWE5nTENCZ2JuVnRZQ2xjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbkJ2ZHlBOUlHWjFibU4wYVc5dUlIQnZkeUFvYm5WdEtTQjdYRzRnSUNBZ2RtRnlJSGNnUFNCMGIwSnBkRUZ5Y21GNUtHNTFiU2s3WEc0Z0lDQWdhV1lnS0hjdWJHVnVaM1JvSUQwOVBTQXdLU0J5WlhSMWNtNGdibVYzSUVKT0tERXBPMXh1WEc0Z0lDQWdMeThnVTJ0cGNDQnNaV0ZrYVc1bklIcGxjbTlsYzF4dUlDQWdJSFpoY2lCeVpYTWdQU0IwYUdsek8xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2R5NXNaVzVuZEdnN0lHa3JLeXdnY21WeklEMGdjbVZ6TG5OeGNpZ3BLU0I3WEc0Z0lDQWdJQ0JwWmlBb2QxdHBYU0FoUFQwZ01Da2dZbkpsWVdzN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tDc3JhU0E4SUhjdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCeElEMGdjbVZ6TG5OeGNpZ3BPeUJwSUR3Z2R5NXNaVzVuZEdnN0lHa3JLeXdnY1NBOUlIRXVjM0Z5S0NrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hkYmFWMGdQVDA5SURBcElHTnZiblJwYm5WbE8xeHVYRzRnSUNBZ0lDQWdJSEpsY3lBOUlISmxjeTV0ZFd3b2NTazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhKbGN6dGNiaUFnZlR0Y2JseHVJQ0F2THlCVGFHbG1kQzFzWldaMElHbHVMWEJzWVdObFhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cGRYTm9iRzRnUFNCbWRXNWpkR2x2YmlCcGRYTm9iRzRnS0dKcGRITXBJSHRjYmlBZ0lDQmhjM05sY25Rb2RIbHdaVzltSUdKcGRITWdQVDA5SUNkdWRXMWlaWEluSUNZbUlHSnBkSE1nUGowZ01DazdYRzRnSUNBZ2RtRnlJSElnUFNCaWFYUnpJQ1VnTWpZN1hHNGdJQ0FnZG1GeUlITWdQU0FvWW1sMGN5QXRJSElwSUM4Z01qWTdYRzRnSUNBZ2RtRnlJR05oY25KNVRXRnpheUE5SUNnd2VETm1abVptWm1ZZ1BqNCtJQ2d5TmlBdElISXBLU0E4UENBb01qWWdMU0J5S1R0Y2JpQWdJQ0IyWVhJZ2FUdGNibHh1SUNBZ0lHbG1JQ2h5SUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1kyRnljbmtnUFNBd08xeHVYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2RHaHBjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYm1WM1EyRnljbmtnUFNCMGFHbHpMbmR2Y21SelcybGRJQ1lnWTJGeWNubE5ZWE5yTzF4dUlDQWdJQ0FnSUNCMllYSWdZeUE5SUNnb2RHaHBjeTUzYjNKa2MxdHBYU0I4SURBcElDMGdibVYzUTJGeWNua3BJRHc4SUhJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnUFNCaklId2dZMkZ5Y25rN1hHNGdJQ0FnSUNBZ0lHTmhjbko1SUQwZ2JtVjNRMkZ5Y25rZ1BqNCtJQ2d5TmlBdElISXBPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb1kyRnljbmtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzYjNKa2MxdHBYU0E5SUdOaGNuSjVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxteGxibWQwYUNzck8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHpJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQjBhR2x6TG14bGJtZDBhQ0F0SURFN0lHa2dQajBnTURzZ2FTMHRLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFTQXJJSE5kSUQwZ2RHaHBjeTUzYjNKa2MxdHBYVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJSE03SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHZjbVJ6VzJsZElEMGdNRHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZEdocGN5NXNaVzVuZEdnZ0t6MGdjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6ZEhKcGNDZ3BPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXBjMmhzYmlBOUlHWjFibU4wYVc5dUlHbHphR3h1SUNoaWFYUnpLU0I3WEc0Z0lDQWdMeThnVkU5RVR5aHBibVIxZEc1NUtUb2dhVzF3YkdWdFpXNTBJRzFsWEc0Z0lDQWdZWE56WlhKMEtIUm9hWE11Ym1WbllYUnBkbVVnUFQwOUlEQXBPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWwxYzJoc2JpaGlhWFJ6S1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJUYUdsbWRDMXlhV2RvZENCcGJpMXdiR0ZqWlZ4dUlDQXZMeUJPVDFSRk9pQmdhR2x1ZEdBZ2FYTWdZU0JzYjNkbGMzUWdZbWwwSUdKbFptOXlaU0IwY21GcGJHbHVaeUI2WlhKdlpYTmNiaUFnTHk4Z1RrOVVSVG9nYVdZZ1lHVjRkR1Z1WkdWa1lDQnBjeUJ3Y21WelpXNTBJQzBnYVhRZ2QybHNiQ0JpWlNCbWFXeHNaV1FnZDJsMGFDQmtaWE4wY205NVpXUWdZbWwwYzF4dUlDQkNUaTV3Y205MGIzUjVjR1V1YVhWemFISnVJRDBnWm5WdVkzUnBiMjRnYVhWemFISnVJQ2hpYVhSekxDQm9hVzUwTENCbGVIUmxibVJsWkNrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gwZVhCbGIyWWdZbWwwY3lBOVBUMGdKMjUxYldKbGNpY2dKaVlnWW1sMGN5QStQU0F3S1R0Y2JpQWdJQ0IyWVhJZ2FEdGNiaUFnSUNCcFppQW9hR2x1ZENrZ2UxeHVJQ0FnSUNBZ2FDQTlJQ2hvYVc1MElDMGdLR2hwYm5RZ0pTQXlOaWtwSUM4Z01qWTdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdnZ1BTQXdPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ5SUQwZ1ltbDBjeUFsSURJMk8xeHVJQ0FnSUhaaGNpQnpJRDBnVFdGMGFDNXRhVzRvS0dKcGRITWdMU0J5S1NBdklESTJMQ0IwYUdsekxteGxibWQwYUNrN1hHNGdJQ0FnZG1GeUlHMWhjMnNnUFNBd2VETm1abVptWm1ZZ1hpQW9LREI0TTJabVptWm1aaUErUGo0Z2Npa2dQRHdnY2lrN1hHNGdJQ0FnZG1GeUlHMWhjMnRsWkZkdmNtUnpJRDBnWlhoMFpXNWtaV1E3WEc1Y2JpQWdJQ0JvSUMwOUlITTdYRzRnSUNBZ2FDQTlJRTFoZEdndWJXRjRLREFzSUdncE8xeHVYRzRnSUNBZ0x5OGdSWGgwWlc1a1pXUWdiVzlrWlN3Z1kyOXdlU0J0WVhOclpXUWdjR0Z5ZEZ4dUlDQWdJR2xtSUNodFlYTnJaV1JYYjNKa2N5a2dlMXh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J6T3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnYldGemEyVmtWMjl5WkhNdWQyOXlaSE5iYVYwZ1BTQjBhR2x6TG5kdmNtUnpXMmxkTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYldGemEyVmtWMjl5WkhNdWJHVnVaM1JvSUQwZ2N6dGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jeUE5UFQwZ01Da2dlMXh1SUNBZ0lDQWdMeThnVG04dGIzQXNJSGRsSUhOb2IzVnNaQ0J1YjNRZ2JXOTJaU0JoYm5sMGFHbHVaeUJoZENCaGJHeGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDRnY3lrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTVzWlc1bmRHZ2dMVDBnY3p0Y2JpQWdJQ0FnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0IwYUdsekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0IwYUdsekxuZHZjbVJ6VzJrZ0t5QnpYVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUzYjNKa2Mxc3dYU0E5SURBN1hHNGdJQ0FnSUNCMGFHbHpMbXhsYm1kMGFDQTlJREU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUdOaGNuSjVJRDBnTUR0Y2JpQWdJQ0JtYjNJZ0tHa2dQU0IwYUdsekxteGxibWQwYUNBdElERTdJR2tnUGowZ01DQW1KaUFvWTJGeWNua2dJVDA5SURBZ2ZId2dhU0ErUFNCb0tUc2dhUzB0S1NCN1hHNGdJQ0FnSUNCMllYSWdkMjl5WkNBOUlIUm9hWE11ZDI5eVpITmJhVjBnZkNBd08xeHVJQ0FnSUNBZ2RHaHBjeTUzYjNKa2MxdHBYU0E5SUNoallYSnllU0E4UENBb01qWWdMU0J5S1NrZ2ZDQW9kMjl5WkNBK1BqNGdjaWs3WEc0Z0lDQWdJQ0JqWVhKeWVTQTlJSGR2Y21RZ0ppQnRZWE5yTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZCMWMyZ2dZMkZ5Y21sbFpDQmlhWFJ6SUdGeklHRWdiV0Z6YTF4dUlDQWdJR2xtSUNodFlYTnJaV1JYYjNKa2N5QW1KaUJqWVhKeWVTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2JXRnphMlZrVjI5eVpITXVkMjl5WkhOYmJXRnphMlZrVjI5eVpITXViR1Z1WjNSb0t5dGRJRDBnWTJGeWNuazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHVnVaM1JvSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6V3pCZElEMGdNRHRjYmlBZ0lDQWdJSFJvYVhNdWJHVnVaM1JvSUQwZ01UdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXpkSEpwY0NncE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cGMyaHliaUE5SUdaMWJtTjBhVzl1SUdsemFISnVJQ2hpYVhSekxDQm9hVzUwTENCbGVIUmxibVJsWkNrZ2UxeHVJQ0FnSUM4dklGUlBSRThvYVc1a2RYUnVlU2s2SUdsdGNHeGxiV1Z1ZENCdFpWeHVJQ0FnSUdGemMyVnlkQ2gwYUdsekxtNWxaMkYwYVhabElEMDlQU0F3S1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1cGRYTm9jbTRvWW1sMGN5d2dhR2x1ZEN3Z1pYaDBaVzVrWldRcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZOb2FXWjBMV3hsWm5SY2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5Ob2JHNGdQU0JtZFc1amRHbHZiaUJ6YUd4dUlDaGlhWFJ6S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyeHZibVVvS1M1cGMyaHNiaWhpYVhSektUdGNiaUFnZlR0Y2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWRYTm9iRzRnUFNCbWRXNWpkR2x2YmlCMWMyaHNiaUFvWW1sMGN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5zYjI1bEtDa3VhWFZ6YUd4dUtHSnBkSE1wTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRk5vYVdaMExYSnBaMmgwWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzV6YUhKdUlEMGdablZ1WTNScGIyNGdjMmh5YmlBb1ltbDBjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1Oc2IyNWxLQ2t1YVhOb2NtNG9ZbWwwY3lrN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5WemFISnVJRDBnWm5WdVkzUnBiMjRnZFhOb2NtNGdLR0pwZEhNcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiRzl1WlNncExtbDFjMmh5YmloaWFYUnpLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlVaWE4wSUdsbUlHNGdZbWwwSUdseklITmxkRnh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVkR1Z6ZEc0Z1BTQm1kVzVqZEdsdmJpQjBaWE4wYmlBb1ltbDBLU0I3WEc0Z0lDQWdZWE56WlhKMEtIUjVjR1Z2WmlCaWFYUWdQVDA5SUNkdWRXMWlaWEluSUNZbUlHSnBkQ0ErUFNBd0tUdGNiaUFnSUNCMllYSWdjaUE5SUdKcGRDQWxJREkyTzF4dUlDQWdJSFpoY2lCeklEMGdLR0pwZENBdElISXBJQzhnTWpZN1hHNGdJQ0FnZG1GeUlIRWdQU0F4SUR3OElISTdYRzVjYmlBZ0lDQXZMeUJHWVhOMElHTmhjMlU2SUdKcGRDQnBjeUJ0ZFdOb0lHaHBaMmhsY2lCMGFHRnVJR0ZzYkNCbGVHbHpkR2x1WnlCM2IzSmtjMXh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBOFBTQnpLU0J5WlhSMWNtNGdabUZzYzJVN1hHNWNiaUFnSUNBdkx5QkRhR1ZqYXlCaWFYUWdZVzVrSUhKbGRIVnlibHh1SUNBZ0lIWmhjaUIzSUQwZ2RHaHBjeTUzYjNKa2MxdHpYVHRjYmx4dUlDQWdJSEpsZEhWeWJpQWhJU2gzSUNZZ2NTazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1VtVjBkWEp1SUc5dWJIa2diRzkzWlhKeklHSnBkSE1nYjJZZ2JuVnRZbVZ5SUNocGJpMXdiR0ZqWlNsY2JpQWdRazR1Y0hKdmRHOTBlWEJsTG1sdFlYTnJiaUE5SUdaMWJtTjBhVzl1SUdsdFlYTnJiaUFvWW1sMGN5a2dlMXh1SUNBZ0lHRnpjMlZ5ZENoMGVYQmxiMllnWW1sMGN5QTlQVDBnSjI1MWJXSmxjaWNnSmlZZ1ltbDBjeUErUFNBd0tUdGNiaUFnSUNCMllYSWdjaUE5SUdKcGRITWdKU0F5Tmp0Y2JpQWdJQ0IyWVhJZ2N5QTlJQ2hpYVhSeklDMGdjaWtnTHlBeU5qdGNibHh1SUNBZ0lHRnpjMlZ5ZENoMGFHbHpMbTVsWjJGMGFYWmxJRDA5UFNBd0xDQW5hVzFoYzJ0dUlIZHZjbXR6SUc5dWJIa2dkMmwwYUNCd2IzTnBkR2wyWlNCdWRXMWlaWEp6SnlrN1hHNWNiaUFnSUNCcFppQW9kR2hwY3k1c1pXNW5kR2dnUEQwZ2N5a2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0hJZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUhNckt6dGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NXNaVzVuZEdnZ1BTQk5ZWFJvTG0xcGJpaHpMQ0IwYUdsekxteGxibWQwYUNrN1hHNWNiaUFnSUNCcFppQW9jaUFoUFQwZ01Da2dlMXh1SUNBZ0lDQWdkbUZ5SUcxaGMyc2dQU0F3ZURObVptWm1abVlnWGlBb0tEQjRNMlptWm1abVppQStQajRnY2lrZ1BEd2djaWs3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6VzNSb2FYTXViR1Z1WjNSb0lDMGdNVjBnSmowZ2JXRnphenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6ZEhKcGNDZ3BPMXh1SUNCOU8xeHVYRzRnSUM4dklGSmxkSFZ5YmlCdmJteDVJR3h2ZDJWeWN5QmlhWFJ6SUc5bUlHNTFiV0psY2x4dUlDQkNUaTV3Y205MGIzUjVjR1V1YldGemEyNGdQU0JtZFc1amRHbHZiaUJ0WVhOcmJpQW9ZbWwwY3lrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNiMjVsS0NrdWFXMWhjMnR1S0dKcGRITXBPMXh1SUNCOU8xeHVYRzRnSUM4dklFRmtaQ0J3YkdGcGJpQnVkVzFpWlhJZ1lHNTFiV0FnZEc4Z1lIUm9hWE5nWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVwWVdSa2JpQTlJR1oxYm1OMGFXOXVJR2xoWkdSdUlDaHVkVzBwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kSGx3Wlc5bUlHNTFiU0E5UFQwZ0oyNTFiV0psY2ljcE8xeHVJQ0FnSUdGemMyVnlkQ2h1ZFcwZ1BDQXdlRFF3TURBd01EQXBPMXh1SUNBZ0lHbG1JQ2h1ZFcwZ1BDQXdLU0J5WlhSMWNtNGdkR2hwY3k1cGMzVmliaWd0Ym5WdEtUdGNibHh1SUNBZ0lDOHZJRkJ2YzNOcFlteGxJSE5wWjI0Z1kyaGhibWRsWEc0Z0lDQWdhV1lnS0hSb2FYTXVibVZuWVhScGRtVWdJVDA5SURBcElIdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBOVBUMGdNU0FtSmlBb2RHaHBjeTUzYjNKa2Mxc3dYU0I4SURBcElEd2diblZ0S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDI5eVpITmJNRjBnUFNCdWRXMGdMU0FvZEdocGN5NTNiM0prYzFzd1hTQjhJREFwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTVsWjJGMGFYWmxJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdWJtVm5ZWFJwZG1VZ1BTQXdPMXh1SUNBZ0lDQWdkR2hwY3k1cGMzVmliaWh1ZFcwcE8xeHVJQ0FnSUNBZ2RHaHBjeTV1WldkaGRHbDJaU0E5SURFN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkJaR1FnZDJsMGFHOTFkQ0JqYUdWamEzTmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZhV0ZrWkc0b2JuVnRLVHRjYmlBZ2ZUdGNibHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVYMmxoWkdSdUlEMGdablZ1WTNScGIyNGdYMmxoWkdSdUlDaHVkVzBwSUh0Y2JpQWdJQ0IwYUdsekxuZHZjbVJ6V3pCZElDczlJRzUxYlR0Y2JseHVJQ0FnSUM4dklFTmhjbko1WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYUdsekxteGxibWQwYUNBbUppQjBhR2x6TG5kdmNtUnpXMmxkSUQ0OUlEQjROREF3TURBd01Ec2dhU3NyS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21SelcybGRJQzA5SURCNE5EQXdNREF3TUR0Y2JpQWdJQ0FnSUdsbUlDaHBJRDA5UFNCMGFHbHpMbXhsYm1kMGFDQXRJREVwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzYjNKa2MxdHBJQ3NnTVYwZ1BTQXhPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M2IzSmtjMXRwSUNzZ01WMHJLenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVzWlc1bmRHZ2dQU0JOWVhSb0xtMWhlQ2gwYUdsekxteGxibWQwYUN3Z2FTQXJJREVwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDA3WEc1Y2JpQWdMeThnVTNWaWRISmhZM1FnY0d4aGFXNGdiblZ0WW1WeUlHQnVkVzFnSUdaeWIyMGdZSFJvYVhOZ1hHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cGMzVmliaUE5SUdaMWJtTjBhVzl1SUdsemRXSnVJQ2h1ZFcwcElIdGNiaUFnSUNCaGMzTmxjblFvZEhsd1pXOW1JRzUxYlNBOVBUMGdKMjUxYldKbGNpY3BPMXh1SUNBZ0lHRnpjMlZ5ZENodWRXMGdQQ0F3ZURRd01EQXdNREFwTzF4dUlDQWdJR2xtSUNodWRXMGdQQ0F3S1NCeVpYUjFjbTRnZEdocGN5NXBZV1JrYmlndGJuVnRLVHRjYmx4dUlDQWdJR2xtSUNoMGFHbHpMbTVsWjJGMGFYWmxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG01bFoyRjBhWFpsSUQwZ01EdGNiaUFnSUNBZ0lIUm9hWE11YVdGa1pHNG9iblZ0S1R0Y2JpQWdJQ0FnSUhSb2FYTXVibVZuWVhScGRtVWdQU0F4TzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NTNiM0prYzFzd1hTQXRQU0J1ZFcwN1hHNWNiaUFnSUNCcFppQW9kR2hwY3k1c1pXNW5kR2dnUFQwOUlERWdKaVlnZEdocGN5NTNiM0prYzFzd1hTQThJREFwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYk1GMGdQU0F0ZEdocGN5NTNiM0prYzFzd1hUdGNiaUFnSUNBZ0lIUm9hWE11Ym1WbllYUnBkbVVnUFNBeE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0F2THlCRFlYSnllVnh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0IwYUdsekxteGxibWQwYUNBbUppQjBhR2x6TG5kdmNtUnpXMmxkSUR3Z01Ec2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnS3owZ01IZzBNREF3TURBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXMmtnS3lBeFhTQXRQU0F4TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OMGNtbHdLQ2s3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbUZrWkc0Z1BTQm1kVzVqZEdsdmJpQmhaR1J1SUNodWRXMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYkc5dVpTZ3BMbWxoWkdSdUtHNTFiU2s3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbk4xWW00Z1BTQm1kVzVqZEdsdmJpQnpkV0p1SUNodWRXMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYkc5dVpTZ3BMbWx6ZFdKdUtHNTFiU2s3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbWxoWW5NZ1BTQm1kVzVqZEdsdmJpQnBZV0p6SUNncElIdGNiaUFnSUNCMGFHbHpMbTVsWjJGMGFYWmxJRDBnTUR0Y2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1aFluTWdQU0JtZFc1amRHbHZiaUJoWW5NZ0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5zYjI1bEtDa3VhV0ZpY3lncE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1ZmFYTm9iRzV6ZFdKdGRXd2dQU0JtZFc1amRHbHZiaUJmYVhOb2JHNXpkV0p0ZFd3Z0tHNTFiU3dnYlhWc0xDQnphR2xtZENrZ2UxeHVJQ0FnSUhaaGNpQnNaVzRnUFNCdWRXMHViR1Z1WjNSb0lDc2djMmhwWm5RN1hHNGdJQ0FnZG1GeUlHazdYRzVjYmlBZ0lDQjBhR2x6TGw5bGVIQmhibVFvYkdWdUtUdGNibHh1SUNBZ0lIWmhjaUIzTzF4dUlDQWdJSFpoY2lCallYSnllU0E5SURBN1hHNGdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJRzUxYlM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdkeUE5SUNoMGFHbHpMbmR2Y21Selcya2dLeUJ6YUdsbWRGMGdmQ0F3S1NBcklHTmhjbko1TzF4dUlDQWdJQ0FnZG1GeUlISnBaMmgwSUQwZ0tHNTFiUzUzYjNKa2MxdHBYU0I4SURBcElDb2diWFZzTzF4dUlDQWdJQ0FnZHlBdFBTQnlhV2RvZENBbUlEQjRNMlptWm1abVpqdGNiaUFnSUNBZ0lHTmhjbko1SUQwZ0tIY2dQajRnTWpZcElDMGdLQ2h5YVdkb2RDQXZJREI0TkRBd01EQXdNQ2tnZkNBd0tUdGNiaUFnSUNBZ0lIUm9hWE11ZDI5eVpITmJhU0FySUhOb2FXWjBYU0E5SUhjZ0ppQXdlRE5tWm1abVptWTdYRzRnSUNBZ2ZWeHVJQ0FnSUdadmNpQW9PeUJwSUR3Z2RHaHBjeTVzWlc1bmRHZ2dMU0J6YUdsbWREc2dhU3NyS1NCN1hHNGdJQ0FnSUNCM0lEMGdLSFJvYVhNdWQyOXlaSE5iYVNBcklITm9hV1owWFNCOElEQXBJQ3NnWTJGeWNuazdYRzRnSUNBZ0lDQmpZWEp5ZVNBOUlIY2dQajRnTWpZN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21Selcya2dLeUJ6YUdsbWRGMGdQU0IzSUNZZ01IZ3pabVptWm1abU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGpZWEp5ZVNBOVBUMGdNQ2tnY21WMGRYSnVJSFJvYVhNdWMzUnlhWEFvS1R0Y2JseHVJQ0FnSUM4dklGTjFZblJ5WVdOMGFXOXVJRzkyWlhKbWJHOTNYRzRnSUNBZ1lYTnpaWEowS0dOaGNuSjVJRDA5UFNBdE1TazdYRzRnSUNBZ1kyRnljbmtnUFNBd08xeHVJQ0FnSUdadmNpQW9hU0E5SURBN0lHa2dQQ0IwYUdsekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IzSUQwZ0xTaDBhR2x6TG5kdmNtUnpXMmxkSUh3Z01Da2dLeUJqWVhKeWVUdGNiaUFnSUNBZ0lHTmhjbko1SUQwZ2R5QStQaUF5Tmp0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0IzSUNZZ01IZ3pabVptWm1abU8xeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxtNWxaMkYwYVhabElEMGdNVHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OMGNtbHdLQ2s3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbDkzYjNKa1JHbDJJRDBnWm5WdVkzUnBiMjRnWDNkdmNtUkVhWFlnS0c1MWJTd2diVzlrWlNrZ2UxeHVJQ0FnSUhaaGNpQnphR2xtZENBOUlIUm9hWE11YkdWdVozUm9JQzBnYm5WdExteGxibWQwYUR0Y2JseHVJQ0FnSUhaaGNpQmhJRDBnZEdocGN5NWpiRzl1WlNncE8xeHVJQ0FnSUhaaGNpQmlJRDBnYm5WdE8xeHVYRzRnSUNBZ0x5OGdUbTl5YldGc2FYcGxYRzRnSUNBZ2RtRnlJR0pvYVNBOUlHSXVkMjl5WkhOYllpNXNaVzVuZEdnZ0xTQXhYU0I4SURBN1hHNGdJQ0FnZG1GeUlHSm9hVUpwZEhNZ1BTQjBhR2x6TGw5amIzVnVkRUpwZEhNb1ltaHBLVHRjYmlBZ0lDQnphR2xtZENBOUlESTJJQzBnWW1ocFFtbDBjenRjYmlBZ0lDQnBaaUFvYzJocFpuUWdJVDA5SURBcElIdGNiaUFnSUNBZ0lHSWdQU0JpTG5WemFHeHVLSE5vYVdaMEtUdGNiaUFnSUNBZ0lHRXVhWFZ6YUd4dUtITm9hV1owS1R0Y2JpQWdJQ0FnSUdKb2FTQTlJR0l1ZDI5eVpITmJZaTVzWlc1bmRHZ2dMU0F4WFNCOElEQTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdTVzVwZEdsaGJHbDZaU0J4ZFc5MGFXVnVkRnh1SUNBZ0lIWmhjaUJ0SUQwZ1lTNXNaVzVuZEdnZ0xTQmlMbXhsYm1kMGFEdGNiaUFnSUNCMllYSWdjVHRjYmx4dUlDQWdJR2xtSUNodGIyUmxJQ0U5UFNBbmJXOWtKeWtnZTF4dUlDQWdJQ0FnY1NBOUlHNWxkeUJDVGlodWRXeHNLVHRjYmlBZ0lDQWdJSEV1YkdWdVozUm9JRDBnYlNBcklERTdYRzRnSUNBZ0lDQnhMbmR2Y21SeklEMGdibVYzSUVGeWNtRjVLSEV1YkdWdVozUm9LVHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY1M1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0J4TG5kdmNtUnpXMmxkSUQwZ01EdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdaR2xtWmlBOUlHRXVZMnh2Ym1Vb0tTNWZhWE5vYkc1emRXSnRkV3dvWWl3Z01Td2diU2s3WEc0Z0lDQWdhV1lnS0dScFptWXVibVZuWVhScGRtVWdQVDA5SURBcElIdGNiaUFnSUNBZ0lHRWdQU0JrYVdabU8xeHVJQ0FnSUNBZ2FXWWdLSEVwSUh0Y2JpQWdJQ0FnSUNBZ2NTNTNiM0prYzF0dFhTQTlJREU3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabTl5SUNoMllYSWdhaUE5SUcwZ0xTQXhPeUJxSUQ0OUlEQTdJR290TFNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEZxSUQwZ0tHRXVkMjl5WkhOYllpNXNaVzVuZEdnZ0t5QnFYU0I4SURBcElDb2dNSGcwTURBd01EQXdJQ3RjYmlBZ0lDQWdJQ0FnS0dFdWQyOXlaSE5iWWk1c1pXNW5kR2dnS3lCcUlDMGdNVjBnZkNBd0tUdGNibHh1SUNBZ0lDQWdMeThnVGs5VVJUb2dLSEZxSUM4Z1ltaHBLU0JwY3lBb01IZ3pabVptWm1abUlDb2dNSGcwTURBd01EQXdJQ3NnTUhnelptWm1abVptS1NBdklEQjRNakF3TURBd01DQnRZWGhjYmlBZ0lDQWdJQzh2SUNnd2VEZG1abVptWm1ZcFhHNGdJQ0FnSUNCeGFpQTlJRTFoZEdndWJXbHVLQ2h4YWlBdklHSm9hU2tnZkNBd0xDQXdlRE5tWm1abVptWXBPMXh1WEc0Z0lDQWdJQ0JoTGw5cGMyaHNibk4xWW0xMWJDaGlMQ0J4YWl3Z2FpazdYRzRnSUNBZ0lDQjNhR2xzWlNBb1lTNXVaV2RoZEdsMlpTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnhhaTB0TzF4dUlDQWdJQ0FnSUNCaExtNWxaMkYwYVhabElEMGdNRHRjYmlBZ0lDQWdJQ0FnWVM1ZmFYTm9iRzV6ZFdKdGRXd29ZaXdnTVN3Z2FpazdYRzRnSUNBZ0lDQWdJR2xtSUNnaFlTNXBjMXBsY204b0tTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdFdWJtVm5ZWFJwZG1VZ1hqMGdNVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tIRXBJSHRjYmlBZ0lDQWdJQ0FnY1M1M2IzSmtjMXRxWFNBOUlIRnFPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9jU2tnZTF4dUlDQWdJQ0FnY1M1emRISnBjQ2dwTzF4dUlDQWdJSDFjYmlBZ0lDQmhMbk4wY21sd0tDazdYRzVjYmlBZ0lDQXZMeUJFWlc1dmNtMWhiR2w2WlZ4dUlDQWdJR2xtSUNodGIyUmxJQ0U5UFNBblpHbDJKeUFtSmlCemFHbG1kQ0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdZUzVwZFhOb2NtNG9jMmhwWm5RcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0JrYVhZNklIRWdmSHdnYm5Wc2JDeGNiaUFnSUNBZ0lHMXZaRG9nWVZ4dUlDQWdJSDA3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdUazlVUlRvZ01Ta2dZRzF2WkdWZ0lHTmhiaUJpWlNCelpYUWdkRzhnWUcxdlpHQWdkRzhnY21WeGRXVnpkQ0J0YjJRZ2IyNXNlU3hjYmlBZ0x5OGdJQ0FnSUNBZ2RHOGdZR1JwZG1BZ2RHOGdjbVZ4ZFdWemRDQmthWFlnYjI1c2VTd2diM0lnWW1VZ1lXSnpaVzUwSUhSdlhHNGdJQzh2SUNBZ0lDQWdJSEpsY1hWbGMzUWdZbTkwYUNCa2FYWWdKaUJ0YjJSY2JpQWdMeThnSUNBZ0lDQWdNaWtnWUhCdmMybDBhWFpsWUNCcGN5QjBjblZsSUdsbUlIVnVjMmxuYm1Wa0lHMXZaQ0JwY3lCeVpYRjFaWE4wWldSY2JpQWdRazR1Y0hKdmRHOTBlWEJsTG1ScGRtMXZaQ0E5SUdaMWJtTjBhVzl1SUdScGRtMXZaQ0FvYm5WdExDQnRiMlJsTENCd2IzTnBkR2wyWlNrZ2UxeHVJQ0FnSUdGemMyVnlkQ2doYm5WdExtbHpXbVZ5YnlncEtUdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtbHpXbVZ5YnlncEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQmthWFk2SUc1bGR5QkNUaWd3S1N4Y2JpQWdJQ0FnSUNBZ2JXOWtPaUJ1WlhjZ1FrNG9NQ2xjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUdScGRpd2diVzlrTENCeVpYTTdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJtVm5ZWFJwZG1VZ0lUMDlJREFnSmlZZ2JuVnRMbTVsWjJGMGFYWmxJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQnlaWE1nUFNCMGFHbHpMbTVsWnlncExtUnBkbTF2WkNodWRXMHNJRzF2WkdVcE8xeHVYRzRnSUNBZ0lDQnBaaUFvYlc5a1pTQWhQVDBnSjIxdlpDY3BJSHRjYmlBZ0lDQWdJQ0FnWkdsMklEMGdjbVZ6TG1ScGRpNXVaV2NvS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLRzF2WkdVZ0lUMDlJQ2RrYVhZbktTQjdYRzRnSUNBZ0lDQWdJRzF2WkNBOUlISmxjeTV0YjJRdWJtVm5LQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHdiM05wZEdsMlpTQW1KaUJ0YjJRdWJtVm5ZWFJwZG1VZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnRiMlF1YVdGa1pDaHVkVzBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lHUnBkam9nWkdsMkxGeHVJQ0FnSUNBZ0lDQnRiMlE2SUcxdlpGeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3k1dVpXZGhkR2wyWlNBOVBUMGdNQ0FtSmlCdWRXMHVibVZuWVhScGRtVWdJVDA5SURBcElIdGNiaUFnSUNBZ0lISmxjeUE5SUhSb2FYTXVaR2wyYlc5a0tHNTFiUzV1Wldjb0tTd2diVzlrWlNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2h0YjJSbElDRTlQU0FuYlc5a0p5a2dlMXh1SUNBZ0lDQWdJQ0JrYVhZZ1BTQnlaWE11WkdsMkxtNWxaeWdwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCa2FYWTZJR1JwZGl4Y2JpQWdJQ0FnSUNBZ2JXOWtPaUJ5WlhNdWJXOWtYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2dvZEdocGN5NXVaV2RoZEdsMlpTQW1JRzUxYlM1dVpXZGhkR2wyWlNrZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUhKbGN5QTlJSFJvYVhNdWJtVm5LQ2t1WkdsMmJXOWtLRzUxYlM1dVpXY29LU3dnYlc5a1pTazdYRzVjYmlBZ0lDQWdJR2xtSUNodGIyUmxJQ0U5UFNBblpHbDJKeWtnZTF4dUlDQWdJQ0FnSUNCdGIyUWdQU0J5WlhNdWJXOWtMbTVsWnlncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY0c5emFYUnBkbVVnSmlZZ2JXOWtMbTVsWjJGMGFYWmxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnYlc5a0xtbHpkV0lvYm5WdEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0JrYVhZNklISmxjeTVrYVhZc1hHNGdJQ0FnSUNBZ0lHMXZaRG9nYlc5a1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFSnZkR2dnYm5WdFltVnljeUJoY21VZ2NHOXphWFJwZG1VZ1lYUWdkR2hwY3lCd2IybHVkRnh1WEc0Z0lDQWdMeThnVTNSeWFYQWdZbTkwYUNCdWRXMWlaWEp6SUhSdklHRndjSEp2ZUdsdFlYUmxJSE5vYVdaMElIWmhiSFZsWEc0Z0lDQWdhV1lnS0c1MWJTNXNaVzVuZEdnZ1BpQjBhR2x6TG14bGJtZDBhQ0I4ZkNCMGFHbHpMbU50Y0NodWRXMHBJRHdnTUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ1pHbDJPaUJ1WlhjZ1FrNG9NQ2tzWEc0Z0lDQWdJQ0FnSUcxdlpEb2dkR2hwYzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCV1pYSjVJSE5vYjNKMElISmxaSFZqZEdsdmJseHVJQ0FnSUdsbUlDaHVkVzB1YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQnBaaUFvYlc5a1pTQTlQVDBnSjJScGRpY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnSUNCa2FYWTZJSFJvYVhNdVpHbDJiaWh1ZFcwdWQyOXlaSE5iTUYwcExGeHVJQ0FnSUNBZ0lDQWdJRzF2WkRvZ2JuVnNiRnh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9iVzlrWlNBOVBUMGdKMjF2WkNjcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0JrYVhZNklHNTFiR3dzWEc0Z0lDQWdJQ0FnSUNBZ2JXOWtPaUJ1WlhjZ1FrNG9kR2hwY3k1dGIyUnVLRzUxYlM1M2IzSmtjMXN3WFNrcFhHNGdJQ0FnSUNBZ0lIMDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJR1JwZGpvZ2RHaHBjeTVrYVhadUtHNTFiUzUzYjNKa2Mxc3dYU2tzWEc0Z0lDQWdJQ0FnSUcxdlpEb2dibVYzSUVKT0tIUm9hWE11Ylc5a2JpaHVkVzB1ZDI5eVpITmJNRjBwS1Z4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmQyOXlaRVJwZGlodWRXMHNJRzF2WkdVcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVacGJtUWdZSFJvYVhOZ0lDOGdZRzUxYldCY2JpQWdRazR1Y0hKdmRHOTBlWEJsTG1ScGRpQTlJR1oxYm1OMGFXOXVJR1JwZGlBb2JuVnRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WkdsMmJXOWtLRzUxYlN3Z0oyUnBkaWNzSUdaaGJITmxLUzVrYVhZN1hHNGdJSDA3WEc1Y2JpQWdMeThnUm1sdVpDQmdkR2hwYzJBZ0pTQmdiblZ0WUZ4dUlDQkNUaTV3Y205MGIzUjVjR1V1Ylc5a0lEMGdablZ1WTNScGIyNGdiVzlrSUNodWRXMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVrYVhadGIyUW9iblZ0TENBbmJXOWtKeXdnWm1Gc2MyVXBMbTF2WkR0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1ZFcxdlpDQTlJR1oxYm1OMGFXOXVJSFZ0YjJRZ0tHNTFiU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1ScGRtMXZaQ2h1ZFcwc0lDZHRiMlFuTENCMGNuVmxLUzV0YjJRN1hHNGdJSDA3WEc1Y2JpQWdMeThnUm1sdVpDQlNiM1Z1WkNoZ2RHaHBjMkFnTHlCZ2JuVnRZQ2xjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbVJwZGxKdmRXNWtJRDBnWm5WdVkzUnBiMjRnWkdsMlVtOTFibVFnS0c1MWJTa2dlMXh1SUNBZ0lIWmhjaUJrYlNBOUlIUm9hWE11WkdsMmJXOWtLRzUxYlNrN1hHNWNiaUFnSUNBdkx5QkdZWE4wSUdOaGMyVWdMU0JsZUdGamRDQmthWFpwYzJsdmJseHVJQ0FnSUdsbUlDaGtiUzV0YjJRdWFYTmFaWEp2S0NrcElISmxkSFZ5YmlCa2JTNWthWFk3WEc1Y2JpQWdJQ0IyWVhJZ2JXOWtJRDBnWkcwdVpHbDJMbTVsWjJGMGFYWmxJQ0U5UFNBd0lEOGdaRzB1Ylc5a0xtbHpkV0lvYm5WdEtTQTZJR1J0TG0xdlpEdGNibHh1SUNBZ0lIWmhjaUJvWVd4bUlEMGdiblZ0TG5WemFISnVLREVwTzF4dUlDQWdJSFpoY2lCeU1pQTlJRzUxYlM1aGJtUnNiaWd4S1R0Y2JpQWdJQ0IyWVhJZ1kyMXdJRDBnYlc5a0xtTnRjQ2hvWVd4bUtUdGNibHh1SUNBZ0lDOHZJRkp2ZFc1a0lHUnZkMjVjYmlBZ0lDQnBaaUFvWTIxd0lEd2dNQ0I4ZkNCeU1pQTlQVDBnTVNBbUppQmpiWEFnUFQwOUlEQXBJSEpsZEhWeWJpQmtiUzVrYVhZN1hHNWNiaUFnSUNBdkx5QlNiM1Z1WkNCMWNGeHVJQ0FnSUhKbGRIVnliaUJrYlM1a2FYWXVibVZuWVhScGRtVWdJVDA5SURBZ1B5QmtiUzVrYVhZdWFYTjFZbTRvTVNrZ09pQmtiUzVrYVhZdWFXRmtaRzRvTVNrN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG0xdlpHNGdQU0JtZFc1amRHbHZiaUJ0YjJSdUlDaHVkVzBwSUh0Y2JpQWdJQ0JoYzNObGNuUW9iblZ0SUR3OUlEQjRNMlptWm1abVppazdYRzRnSUNBZ2RtRnlJSEFnUFNBb01TQThQQ0F5TmlrZ0pTQnVkVzA3WEc1Y2JpQWdJQ0IyWVhJZ1lXTmpJRDBnTUR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2RHaHBjeTVzWlc1bmRHZ2dMU0F4T3lCcElENDlJREE3SUdrdExTa2dlMXh1SUNBZ0lDQWdZV05qSUQwZ0tIQWdLaUJoWTJNZ0t5QW9kR2hwY3k1M2IzSmtjMXRwWFNCOElEQXBLU0FsSUc1MWJUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnWVdOak8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVsdUxYQnNZV05sSUdScGRtbHphVzl1SUdKNUlHNTFiV0psY2x4dUlDQkNUaTV3Y205MGIzUjVjR1V1YVdScGRtNGdQU0JtZFc1amRHbHZiaUJwWkdsMmJpQW9iblZ0S1NCN1hHNGdJQ0FnWVhOelpYSjBLRzUxYlNBOFBTQXdlRE5tWm1abVptWXBPMXh1WEc0Z0lDQWdkbUZ5SUdOaGNuSjVJRDBnTUR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2RHaHBjeTVzWlc1bmRHZ2dMU0F4T3lCcElENDlJREE3SUdrdExTa2dlMXh1SUNBZ0lDQWdkbUZ5SUhjZ1BTQW9kR2hwY3k1M2IzSmtjMXRwWFNCOElEQXBJQ3NnWTJGeWNua2dLaUF3ZURRd01EQXdNREE3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6VzJsZElEMGdLSGNnTHlCdWRXMHBJSHdnTUR0Y2JpQWdJQ0FnSUdOaGNuSjVJRDBnZHlBbElHNTFiVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6ZEhKcGNDZ3BPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNWthWFp1SUQwZ1puVnVZM1JwYjI0Z1pHbDJiaUFvYm5WdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMnh2Ym1Vb0tTNXBaR2wyYmlodWRXMHBPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNWxaMk5rSUQwZ1puVnVZM1JwYjI0Z1pXZGpaQ0FvY0NrZ2UxeHVJQ0FnSUdGemMyVnlkQ2h3TG01bFoyRjBhWFpsSUQwOVBTQXdLVHRjYmlBZ0lDQmhjM05sY25Rb0lYQXVhWE5hWlhKdktDa3BPMXh1WEc0Z0lDQWdkbUZ5SUhnZ1BTQjBhR2x6TzF4dUlDQWdJSFpoY2lCNUlEMGdjQzVqYkc5dVpTZ3BPMXh1WEc0Z0lDQWdhV1lnS0hndWJtVm5ZWFJwZG1VZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUhnZ1BTQjRMblZ0YjJRb2NDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhnZ1BTQjRMbU5zYjI1bEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdRU0FxSUhnZ0t5QkNJQ29nZVNBOUlIaGNiaUFnSUNCMllYSWdRU0E5SUc1bGR5QkNUaWd4S1R0Y2JpQWdJQ0IyWVhJZ1FpQTlJRzVsZHlCQ1RpZ3dLVHRjYmx4dUlDQWdJQzh2SUVNZ0tpQjRJQ3NnUkNBcUlIa2dQU0I1WEc0Z0lDQWdkbUZ5SUVNZ1BTQnVaWGNnUWs0b01DazdYRzRnSUNBZ2RtRnlJRVFnUFNCdVpYY2dRazRvTVNrN1hHNWNiaUFnSUNCMllYSWdaeUE5SURBN1hHNWNiaUFnSUNCM2FHbHNaU0FvZUM1cGMwVjJaVzRvS1NBbUppQjVMbWx6UlhabGJpZ3BLU0I3WEc0Z0lDQWdJQ0I0TG1sMWMyaHliaWd4S1R0Y2JpQWdJQ0FnSUhrdWFYVnphSEp1S0RFcE8xeHVJQ0FnSUNBZ0t5dG5PMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUI1Y0NBOUlIa3VZMnh2Ym1Vb0tUdGNiaUFnSUNCMllYSWdlSEFnUFNCNExtTnNiMjVsS0NrN1hHNWNiaUFnSUNCM2FHbHNaU0FvSVhndWFYTmFaWEp2S0NrcElIdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCcGJTQTlJREU3SUNoNExuZHZjbVJ6V3pCZElDWWdhVzBwSUQwOVBTQXdJQ1ltSUdrZ1BDQXlOanNnS3l0cExDQnBiU0E4UEQwZ01TazdYRzRnSUNBZ0lDQnBaaUFvYVNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnZUM1cGRYTm9jbTRvYVNrN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNocExTMGdQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0VFdWFYTlBaR1FvS1NCOGZDQkNMbWx6VDJSa0tDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFRXVhV0ZrWkNoNWNDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCQ0xtbHpkV0lvZUhBcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lFRXVhWFZ6YUhKdUtERXBPMXh1SUNBZ0lDQWdJQ0FnSUVJdWFYVnphSEp1S0RFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR29nUFNBd0xDQnFiU0E5SURFN0lDaDVMbmR2Y21Seld6QmRJQ1lnYW0wcElEMDlQU0F3SUNZbUlHb2dQQ0F5TmpzZ0t5dHFMQ0JxYlNBOFBEMGdNU2s3WEc0Z0lDQWdJQ0JwWmlBb2FpQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ2VTNXBkWE5vY200b2FpazdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaHFMUzBnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tFTXVhWE5QWkdRb0tTQjhmQ0JFTG1selQyUmtLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRU11YVdGa1pDaDVjQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQkVMbWx6ZFdJb2VIQXBPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJRU11YVhWemFISnVLREVwTzF4dUlDQWdJQ0FnSUNBZ0lFUXVhWFZ6YUhKdUtERXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaDRMbU50Y0NoNUtTQStQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lIZ3VhWE4xWWloNUtUdGNiaUFnSUNBZ0lDQWdRUzVwYzNWaUtFTXBPMXh1SUNBZ0lDQWdJQ0JDTG1semRXSW9SQ2s3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0I1TG1semRXSW9lQ2s3WEc0Z0lDQWdJQ0FnSUVNdWFYTjFZaWhCS1R0Y2JpQWdJQ0FnSUNBZ1JDNXBjM1ZpS0VJcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0JoT2lCRExGeHVJQ0FnSUNBZ1lqb2dSQ3hjYmlBZ0lDQWdJR2RqWkRvZ2VTNXBkWE5vYkc0b1p5bGNiaUFnSUNCOU8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZSb2FYTWdhWE1nY21Wa2RXTmxaQ0JwYm1OaGNtNWhkR2x2YmlCdlppQjBhR1VnWW1sdVlYSjVJRVZGUVZ4dUlDQXZMeUJoWW05MlpTd2daR1Z6YVdkdVlYUmxaQ0IwYnlCcGJuWmxjblFnYldWdFltVnljeUJ2WmlCMGFHVmNiaUFnTHk4Z1gzQnlhVzFsWHlCbWFXVnNaSE1nUmlod0tTQmhkQ0JoSUcxaGVHbHRZV3dnYzNCbFpXUmNiaUFnUWs0dWNISnZkRzkwZVhCbExsOXBiblp0Y0NBOUlHWjFibU4wYVc5dUlGOXBiblp0Y0NBb2NDa2dlMXh1SUNBZ0lHRnpjMlZ5ZENod0xtNWxaMkYwYVhabElEMDlQU0F3S1R0Y2JpQWdJQ0JoYzNObGNuUW9JWEF1YVhOYVpYSnZLQ2twTzF4dVhHNGdJQ0FnZG1GeUlHRWdQU0IwYUdsek8xeHVJQ0FnSUhaaGNpQmlJRDBnY0M1amJHOXVaU2dwTzF4dVhHNGdJQ0FnYVdZZ0tHRXVibVZuWVhScGRtVWdJVDA5SURBcElIdGNiaUFnSUNBZ0lHRWdQU0JoTG5WdGIyUW9jQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHRWdQU0JoTG1Oc2IyNWxLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUhneElEMGdibVYzSUVKT0tERXBPMXh1SUNBZ0lIWmhjaUI0TWlBOUlHNWxkeUJDVGlnd0tUdGNibHh1SUNBZ0lIWmhjaUJrWld4MFlTQTlJR0l1WTJ4dmJtVW9LVHRjYmx4dUlDQWdJSGRvYVd4bElDaGhMbU50Y0c0b01Ta2dQaUF3SUNZbUlHSXVZMjF3YmlneEtTQStJREFwSUh0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JwYlNBOUlERTdJQ2hoTG5kdmNtUnpXekJkSUNZZ2FXMHBJRDA5UFNBd0lDWW1JR2tnUENBeU5qc2dLeXRwTENCcGJTQThQRDBnTVNrN1hHNGdJQ0FnSUNCcFppQW9hU0ErSURBcElIdGNiaUFnSUNBZ0lDQWdZUzVwZFhOb2NtNG9hU2s3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2hwTFMwZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSGd4TG1selQyUmtLQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSGd4TG1saFpHUW9aR1ZzZEdFcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lIZ3hMbWwxYzJoeWJpZ3hLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCbWIzSWdLSFpoY2lCcUlEMGdNQ3dnYW0wZ1BTQXhPeUFvWWk1M2IzSmtjMXN3WFNBbUlHcHRLU0E5UFQwZ01DQW1KaUJxSUR3Z01qWTdJQ3NyYWl3Z2FtMGdQRHc5SURFcE8xeHVJQ0FnSUNBZ2FXWWdLR29nUGlBd0tTQjdYRzRnSUNBZ0lDQWdJR0l1YVhWemFISnVLR29wTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvYWkwdElENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2g0TWk1cGMwOWtaQ2dwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I0TWk1cFlXUmtLR1JsYkhSaEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQjRNaTVwZFhOb2NtNG9NU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLR0V1WTIxd0tHSXBJRDQ5SURBcElIdGNiaUFnSUNBZ0lDQWdZUzVwYzNWaUtHSXBPMXh1SUNBZ0lDQWdJQ0I0TVM1cGMzVmlLSGd5S1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdJdWFYTjFZaWhoS1R0Y2JpQWdJQ0FnSUNBZ2VESXVhWE4xWWloNE1TazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSEpsY3p0Y2JpQWdJQ0JwWmlBb1lTNWpiWEJ1S0RFcElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCeVpYTWdQU0I0TVR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdjbVZ6SUQwZ2VESTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSEpsY3k1amJYQnVLREFwSUR3Z01Da2dlMXh1SUNBZ0lDQWdjbVZ6TG1saFpHUW9jQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlISmxjenRjYmlBZ2ZUdGNibHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVaMk5rSUQwZ1puVnVZM1JwYjI0Z1oyTmtJQ2h1ZFcwcElIdGNiaUFnSUNCcFppQW9kR2hwY3k1cGMxcGxjbThvS1NrZ2NtVjBkWEp1SUc1MWJTNWhZbk1vS1R0Y2JpQWdJQ0JwWmlBb2JuVnRMbWx6V21WeWJ5Z3BLU0J5WlhSMWNtNGdkR2hwY3k1aFluTW9LVHRjYmx4dUlDQWdJSFpoY2lCaElEMGdkR2hwY3k1amJHOXVaU2dwTzF4dUlDQWdJSFpoY2lCaUlEMGdiblZ0TG1Oc2IyNWxLQ2s3WEc0Z0lDQWdZUzV1WldkaGRHbDJaU0E5SURBN1hHNGdJQ0FnWWk1dVpXZGhkR2wyWlNBOUlEQTdYRzVjYmlBZ0lDQXZMeUJTWlcxdmRtVWdZMjl0Ylc5dUlHWmhZM1J2Y2lCdlppQjBkMjljYmlBZ0lDQm1iM0lnS0haaGNpQnphR2xtZENBOUlEQTdJR0V1YVhORmRtVnVLQ2tnSmlZZ1lpNXBjMFYyWlc0b0tUc2djMmhwWm5Rckt5a2dlMXh1SUNBZ0lDQWdZUzVwZFhOb2NtNG9NU2s3WEc0Z0lDQWdJQ0JpTG1sMWMyaHliaWd4S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JrYnlCN1hHNGdJQ0FnSUNCM2FHbHNaU0FvWVM1cGMwVjJaVzRvS1NrZ2UxeHVJQ0FnSUNBZ0lDQmhMbWwxYzJoeWJpZ3hLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSGRvYVd4bElDaGlMbWx6UlhabGJpZ3BLU0I3WEc0Z0lDQWdJQ0FnSUdJdWFYVnphSEp1S0RFcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjJZWElnY2lBOUlHRXVZMjF3S0dJcE8xeHVJQ0FnSUNBZ2FXWWdLSElnUENBd0tTQjdYRzRnSUNBZ0lDQWdJQzh2SUZOM1lYQWdZR0ZnSUdGdVpDQmdZbUFnZEc4Z2JXRnJaU0JnWVdBZ1lXeDNZWGx6SUdKcFoyZGxjaUIwYUdGdUlHQmlZRnh1SUNBZ0lDQWdJQ0IyWVhJZ2RDQTlJR0U3WEc0Z0lDQWdJQ0FnSUdFZ1BTQmlPMXh1SUNBZ0lDQWdJQ0JpSUQwZ2REdGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jaUE5UFQwZ01DQjhmQ0JpTG1OdGNHNG9NU2tnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR0V1YVhOMVlpaGlLVHRjYmlBZ0lDQjlJSGRvYVd4bElDaDBjblZsS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJpTG1sMWMyaHNiaWh6YUdsbWRDazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1NXNTJaWEowSUc1MWJXSmxjaUJwYmlCMGFHVWdabWxsYkdRZ1JpaHVkVzBwWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVwYm5adElEMGdablZ1WTNScGIyNGdhVzUyYlNBb2JuVnRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WldkalpDaHVkVzBwTG1FdWRXMXZaQ2h1ZFcwcE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cGMwVjJaVzRnUFNCbWRXNWpkR2x2YmlCcGMwVjJaVzRnS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUFvZEdocGN5NTNiM0prYzFzd1hTQW1JREVwSUQwOVBTQXdPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXBjMDlrWkNBOUlHWjFibU4wYVc5dUlHbHpUMlJrSUNncElIdGNiaUFnSUNCeVpYUjFjbTRnS0hSb2FYTXVkMjl5WkhOYk1GMGdKaUF4S1NBOVBUMGdNVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkJibVFnWm1seWMzUWdkMjl5WkNCaGJtUWdiblZ0WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVoYm1Sc2JpQTlJR1oxYm1OMGFXOXVJR0Z1Wkd4dUlDaHVkVzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1M2IzSmtjMXN3WFNBbUlHNTFiVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QkpibU55WlcxbGJuUWdZWFFnZEdobElHSnBkQ0J3YjNOcGRHbHZiaUJwYmkxc2FXNWxYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNWlhVzVqYmlBOUlHWjFibU4wYVc5dUlHSnBibU51SUNoaWFYUXBJSHRjYmlBZ0lDQmhjM05sY25Rb2RIbHdaVzltSUdKcGRDQTlQVDBnSjI1MWJXSmxjaWNwTzF4dUlDQWdJSFpoY2lCeUlEMGdZbWwwSUNVZ01qWTdYRzRnSUNBZ2RtRnlJSE1nUFNBb1ltbDBJQzBnY2lrZ0x5QXlOanRjYmlBZ0lDQjJZWElnY1NBOUlERWdQRHdnY2p0Y2JseHVJQ0FnSUM4dklFWmhjM1FnWTJGelpUb2dZbWwwSUdseklHMTFZMmdnYUdsbmFHVnlJSFJvWVc0Z1lXeHNJR1Y0YVhOMGFXNW5JSGR2Y21SelhHNGdJQ0FnYVdZZ0tIUm9hWE11YkdWdVozUm9JRHc5SUhNcElIdGNiaUFnSUNBZ0lIUm9hWE11WDJWNGNHRnVaQ2h6SUNzZ01TazdYRzRnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXM05kSUh3OUlIRTdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJCWkdRZ1ltbDBJR0Z1WkNCd2NtOXdZV2RoZEdVc0lHbG1JRzVsWldSbFpGeHVJQ0FnSUhaaGNpQmpZWEp5ZVNBOUlIRTdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJSE03SUdOaGNuSjVJQ0U5UFNBd0lDWW1JR2tnUENCMGFHbHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdkeUE5SUhSb2FYTXVkMjl5WkhOYmFWMGdmQ0F3TzF4dUlDQWdJQ0FnZHlBclBTQmpZWEp5ZVR0Y2JpQWdJQ0FnSUdOaGNuSjVJRDBnZHlBK1BqNGdNalk3WEc0Z0lDQWdJQ0IzSUNZOUlEQjRNMlptWm1abVpqdGNiaUFnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnUFNCM08xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb1kyRnljbmtnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYVYwZ1BTQmpZWEp5ZVR0Y2JpQWdJQ0FnSUhSb2FYTXViR1Z1WjNSb0t5czdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cGMxcGxjbThnUFNCbWRXNWpkR2x2YmlCcGMxcGxjbThnS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxteGxibWQwYUNBOVBUMGdNU0FtSmlCMGFHbHpMbmR2Y21Seld6QmRJRDA5UFNBd08xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1amJYQnVJRDBnWm5WdVkzUnBiMjRnWTIxd2JpQW9iblZ0S1NCN1hHNGdJQ0FnZG1GeUlHNWxaMkYwYVhabElEMGdiblZ0SUR3Z01EdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtNWxaMkYwYVhabElDRTlQU0F3SUNZbUlDRnVaV2RoZEdsMlpTa2djbVYwZFhKdUlDMHhPMXh1SUNBZ0lHbG1JQ2gwYUdsekxtNWxaMkYwYVhabElEMDlQU0F3SUNZbUlHNWxaMkYwYVhabEtTQnlaWFIxY200Z01UdGNibHh1SUNBZ0lIUm9hWE11YzNSeWFYQW9LVHRjYmx4dUlDQWdJSFpoY2lCeVpYTTdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJHVnVaM1JvSUQ0Z01Ta2dlMXh1SUNBZ0lDQWdjbVZ6SUQwZ01UdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnYVdZZ0tHNWxaMkYwYVhabEtTQjdYRzRnSUNBZ0lDQWdJRzUxYlNBOUlDMXVkVzA3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdGemMyVnlkQ2h1ZFcwZ1BEMGdNSGd6Wm1abVptWm1MQ0FuVG5WdFltVnlJR2x6SUhSdmJ5QmlhV2NuS1R0Y2JseHVJQ0FnSUNBZ2RtRnlJSGNnUFNCMGFHbHpMbmR2Y21Seld6QmRJSHdnTUR0Y2JpQWdJQ0FnSUhKbGN5QTlJSGNnUFQwOUlHNTFiU0EvSURBZ09pQjNJRHdnYm5WdElEOGdMVEVnT2lBeE8xeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RHaHBjeTV1WldkaGRHbDJaU0FoUFQwZ01Da2djbVYwZFhKdUlDMXlaWE1nZkNBd08xeHVJQ0FnSUhKbGRIVnliaUJ5WlhNN1hHNGdJSDA3WEc1Y2JpQWdMeThnUTI5dGNHRnlaU0IwZDI4Z2JuVnRZbVZ5Y3lCaGJtUWdjbVYwZFhKdU9seHVJQ0F2THlBeElDMGdhV1lnWUhSb2FYTmdJRDRnWUc1MWJXQmNiaUFnTHk4Z01DQXRJR2xtSUdCMGFHbHpZQ0E5UFNCZ2JuVnRZRnh1SUNBdkx5QXRNU0F0SUdsbUlHQjBhR2x6WUNBOElHQnVkVzFnWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVqYlhBZ1BTQm1kVzVqZEdsdmJpQmpiWEFnS0c1MWJTa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxtNWxaMkYwYVhabElDRTlQU0F3SUNZbUlHNTFiUzV1WldkaGRHbDJaU0E5UFQwZ01Da2djbVYwZFhKdUlDMHhPMXh1SUNBZ0lHbG1JQ2gwYUdsekxtNWxaMkYwYVhabElEMDlQU0F3SUNZbUlHNTFiUzV1WldkaGRHbDJaU0FoUFQwZ01Da2djbVYwZFhKdUlERTdYRzVjYmlBZ0lDQjJZWElnY21WeklEMGdkR2hwY3k1MVkyMXdLRzUxYlNrN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Ym1WbllYUnBkbVVnSVQwOUlEQXBJSEpsZEhWeWJpQXRjbVZ6SUh3Z01EdGNiaUFnSUNCeVpYUjFjbTRnY21Wek8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZWdWMybG5ibVZrSUdOdmJYQmhjbWx6YjI1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5WamJYQWdQU0JtZFc1amRHbHZiaUIxWTIxd0lDaHVkVzBwSUh0Y2JpQWdJQ0F2THlCQmRDQjBhR2x6SUhCdmFXNTBJR0p2ZEdnZ2JuVnRZbVZ5Y3lCb1lYWmxJSFJvWlNCellXMWxJSE5wWjI1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQaUJ1ZFcwdWJHVnVaM1JvS1NCeVpYUjFjbTRnTVR0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQQ0J1ZFcwdWJHVnVaM1JvS1NCeVpYUjFjbTRnTFRFN1hHNWNiaUFnSUNCMllYSWdjbVZ6SUQwZ01EdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdkR2hwY3k1c1pXNW5kR2dnTFNBeE95QnBJRDQ5SURBN0lHa3RMU2tnZTF4dUlDQWdJQ0FnZG1GeUlHRWdQU0IwYUdsekxuZHZjbVJ6VzJsZElId2dNRHRjYmlBZ0lDQWdJSFpoY2lCaUlEMGdiblZ0TG5kdmNtUnpXMmxkSUh3Z01EdGNibHh1SUNBZ0lDQWdhV1lnS0dFZ1BUMDlJR0lwSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnYVdZZ0tHRWdQQ0JpS1NCN1hHNGdJQ0FnSUNBZ0lISmxjeUE5SUMweE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaGhJRDRnWWlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE1nUFNBeE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTTdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExtZDBiaUE5SUdaMWJtTjBhVzl1SUdkMGJpQW9iblZ0S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyMXdiaWh1ZFcwcElEMDlQU0F4TzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVuZENBOUlHWjFibU4wYVc5dUlHZDBJQ2h1ZFcwcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiWEFvYm5WdEtTQTlQVDBnTVR0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1WjNSbGJpQTlJR1oxYm1OMGFXOXVJR2QwWlc0Z0tHNTFiU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdGNHNG9iblZ0S1NBK1BTQXdPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNW5kR1VnUFNCbWRXNWpkR2x2YmlCbmRHVWdLRzUxYlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnRjQ2h1ZFcwcElENDlJREE3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbXgwYmlBOUlHWjFibU4wYVc5dUlHeDBiaUFvYm5WdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjF3YmlodWRXMHBJRDA5UFNBdE1UdGNiaUFnZlR0Y2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWJIUWdQU0JtZFc1amRHbHZiaUJzZENBb2JuVnRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTIxd0tHNTFiU2tnUFQwOUlDMHhPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXNkR1Z1SUQwZ1puVnVZM1JwYjI0Z2JIUmxiaUFvYm5WdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjF3YmlodWRXMHBJRHc5SURBN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG14MFpTQTlJR1oxYm1OMGFXOXVJR3gwWlNBb2JuVnRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTIxd0tHNTFiU2tnUEQwZ01EdGNiaUFnZlR0Y2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdVpYRnVJRDBnWm5WdVkzUnBiMjRnWlhGdUlDaHVkVzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJYQnVLRzUxYlNrZ1BUMDlJREE3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbVZ4SUQwZ1puVnVZM1JwYjI0Z1pYRWdLRzUxYlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnRjQ2h1ZFcwcElEMDlQU0F3TzF4dUlDQjlPMXh1WEc0Z0lDOHZYRzRnSUM4dklFRWdjbVZrZFdObElHTnZiblJsZUhRc0lHTnZkV3hrSUdKbElIVnphVzVuSUcxdmJuUm5iMjFsY25rZ2IzSWdjMjl0WlhSb2FXNW5JR0psZEhSbGNpd2daR1Z3Wlc1a2FXNW5YRzRnSUM4dklHOXVJSFJvWlNCZ2JXQWdhWFJ6Wld4bUxseHVJQ0F2TDF4dUlDQkNUaTV5WldRZ1BTQm1kVzVqZEdsdmJpQnlaV1FnS0c1MWJTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVbVZrS0c1MWJTazdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExuUnZVbVZrSUQwZ1puVnVZM1JwYjI0Z2RHOVNaV1FnS0dOMGVDa2dlMXh1SUNBZ0lHRnpjMlZ5ZENnaGRHaHBjeTV5WldRc0lDZEJiSEpsWVdSNUlHRWdiblZ0WW1WeUlHbHVJSEpsWkhWamRHbHZiaUJqYjI1MFpYaDBKeWs3WEc0Z0lDQWdZWE56WlhKMEtIUm9hWE11Ym1WbllYUnBkbVVnUFQwOUlEQXNJQ2R5WldRZ2QyOXlhM01nYjI1c2VTQjNhWFJvSUhCdmMybDBhWFpsY3ljcE8xeHVJQ0FnSUhKbGRIVnliaUJqZEhndVkyOXVkbVZ5ZEZSdktIUm9hWE1wTGw5bWIzSmpaVkpsWkNoamRIZ3BPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNW1jbTl0VW1Wa0lEMGdablZ1WTNScGIyNGdabkp2YlZKbFpDQW9LU0I3WEc0Z0lDQWdZWE56WlhKMEtIUm9hWE11Y21Wa0xDQW5abkp2YlZKbFpDQjNiM0pyY3lCdmJteDVJSGRwZEdnZ2JuVnRZbVZ5Y3lCcGJpQnlaV1IxWTNScGIyNGdZMjl1ZEdWNGRDY3BPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsWkM1amIyNTJaWEowUm5KdmJTaDBhR2x6S1R0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1WDJadmNtTmxVbVZrSUQwZ1puVnVZM1JwYjI0Z1gyWnZjbU5sVW1Wa0lDaGpkSGdwSUh0Y2JpQWdJQ0IwYUdsekxuSmxaQ0E5SUdOMGVEdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnZlR0Y2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdVptOXlZMlZTWldRZ1BTQm1kVzVqZEdsdmJpQm1iM0pqWlZKbFpDQW9ZM1I0S1NCN1hHNGdJQ0FnWVhOelpYSjBLQ0YwYUdsekxuSmxaQ3dnSjBGc2NtVmhaSGtnWVNCdWRXMWlaWElnYVc0Z2NtVmtkV04wYVc5dUlHTnZiblJsZUhRbktUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWZabTl5WTJWU1pXUW9ZM1I0S1R0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1Y21Wa1FXUmtJRDBnWm5WdVkzUnBiMjRnY21Wa1FXUmtJQ2h1ZFcwcElIdGNiaUFnSUNCaGMzTmxjblFvZEdocGN5NXlaV1FzSUNkeVpXUkJaR1FnZDI5eWEzTWdiMjVzZVNCM2FYUm9JSEpsWkNCdWRXMWlaWEp6SnlrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVmtMbUZrWkNoMGFHbHpMQ0J1ZFcwcE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1eVpXUkpRV1JrSUQwZ1puVnVZM1JwYjI0Z2NtVmtTVUZrWkNBb2JuVnRLU0I3WEc0Z0lDQWdZWE56WlhKMEtIUm9hWE11Y21Wa0xDQW5jbVZrU1VGa1pDQjNiM0pyY3lCdmJteDVJSGRwZEdnZ2NtVmtJRzUxYldKbGNuTW5LVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WldRdWFXRmtaQ2gwYUdsekxDQnVkVzBwTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzV5WldSVGRXSWdQU0JtZFc1amRHbHZiaUJ5WldSVGRXSWdLRzUxYlNrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gwYUdsekxuSmxaQ3dnSjNKbFpGTjFZaUIzYjNKcmN5QnZibXg1SUhkcGRHZ2djbVZrSUc1MWJXSmxjbk1uS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXUXVjM1ZpS0hSb2FYTXNJRzUxYlNrN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5KbFpFbFRkV0lnUFNCbWRXNWpkR2x2YmlCeVpXUkpVM1ZpSUNodWRXMHBJSHRjYmlBZ0lDQmhjM05sY25Rb2RHaHBjeTV5WldRc0lDZHlaV1JKVTNWaUlIZHZjbXR6SUc5dWJIa2dkMmwwYUNCeVpXUWdiblZ0WW1WeWN5Y3BPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsWkM1cGMzVmlLSFJvYVhNc0lHNTFiU2s3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbkpsWkZOb2JDQTlJR1oxYm1OMGFXOXVJSEpsWkZOb2JDQW9iblZ0S1NCN1hHNGdJQ0FnWVhOelpYSjBLSFJvYVhNdWNtVmtMQ0FuY21Wa1UyaHNJSGR2Y210eklHOXViSGtnZDJsMGFDQnlaV1FnYm5WdFltVnljeWNwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbFpDNXphR3dvZEdocGN5d2diblZ0S1R0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1Y21Wa1RYVnNJRDBnWm5WdVkzUnBiMjRnY21Wa1RYVnNJQ2h1ZFcwcElIdGNiaUFnSUNCaGMzTmxjblFvZEdocGN5NXlaV1FzSUNkeVpXUk5kV3dnZDI5eWEzTWdiMjVzZVNCM2FYUm9JSEpsWkNCdWRXMWlaWEp6SnlrN1hHNGdJQ0FnZEdocGN5NXlaV1F1WDNabGNtbG1lVElvZEdocGN5d2diblZ0S1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXUXViWFZzS0hSb2FYTXNJRzUxYlNrN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5KbFpFbE5kV3dnUFNCbWRXNWpkR2x2YmlCeVpXUkpUWFZzSUNodWRXMHBJSHRjYmlBZ0lDQmhjM05sY25Rb2RHaHBjeTV5WldRc0lDZHlaV1JOZFd3Z2QyOXlhM01nYjI1c2VTQjNhWFJvSUhKbFpDQnVkVzFpWlhKekp5azdYRzRnSUNBZ2RHaHBjeTV5WldRdVgzWmxjbWxtZVRJb2RHaHBjeXdnYm5WdEtUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaV1F1YVcxMWJDaDBhR2x6TENCdWRXMHBPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXlaV1JUY1hJZ1BTQm1kVzVqZEdsdmJpQnlaV1JUY1hJZ0tDa2dlMXh1SUNBZ0lHRnpjMlZ5ZENoMGFHbHpMbkpsWkN3Z0ozSmxaRk54Y2lCM2IzSnJjeUJ2Ym14NUlIZHBkR2dnY21Wa0lHNTFiV0psY25NbktUdGNiaUFnSUNCMGFHbHpMbkpsWkM1ZmRtVnlhV1o1TVNoMGFHbHpLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WldRdWMzRnlLSFJvYVhNcE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1eVpXUkpVM0Z5SUQwZ1puVnVZM1JwYjI0Z2NtVmtTVk54Y2lBb0tTQjdYRzRnSUNBZ1lYTnpaWEowS0hSb2FYTXVjbVZrTENBbmNtVmtTVk54Y2lCM2IzSnJjeUJ2Ym14NUlIZHBkR2dnY21Wa0lHNTFiV0psY25NbktUdGNiaUFnSUNCMGFHbHpMbkpsWkM1ZmRtVnlhV1o1TVNoMGFHbHpLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WldRdWFYTnhjaWgwYUdsektUdGNiaUFnZlR0Y2JseHVJQ0F2THlCVGNYVmhjbVVnY205dmRDQnZkbVZ5SUhCY2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5KbFpGTnhjblFnUFNCbWRXNWpkR2x2YmlCeVpXUlRjWEowSUNncElIdGNiaUFnSUNCaGMzTmxjblFvZEdocGN5NXlaV1FzSUNkeVpXUlRjWEowSUhkdmNtdHpJRzl1YkhrZ2QybDBhQ0J5WldRZ2JuVnRZbVZ5Y3ljcE8xeHVJQ0FnSUhSb2FYTXVjbVZrTGw5MlpYSnBabmt4S0hSb2FYTXBPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsWkM1emNYSjBLSFJvYVhNcE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1eVpXUkpiblp0SUQwZ1puVnVZM1JwYjI0Z2NtVmtTVzUyYlNBb0tTQjdYRzRnSUNBZ1lYTnpaWEowS0hSb2FYTXVjbVZrTENBbmNtVmtTVzUyYlNCM2IzSnJjeUJ2Ym14NUlIZHBkR2dnY21Wa0lHNTFiV0psY25NbktUdGNiaUFnSUNCMGFHbHpMbkpsWkM1ZmRtVnlhV1o1TVNoMGFHbHpLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WldRdWFXNTJiU2gwYUdsektUdGNiaUFnZlR0Y2JseHVJQ0F2THlCU1pYUjFjbTRnYm1WbllYUnBkbVVnWTJ4dmJtVWdiMllnWUhSb2FYTmdJQ1VnWUhKbFpDQnRiMlIxYkc5Z1hHNGdJRUpPTG5CeWIzUnZkSGx3WlM1eVpXUk9aV2NnUFNCbWRXNWpkR2x2YmlCeVpXUk9aV2NnS0NrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gwYUdsekxuSmxaQ3dnSjNKbFpFNWxaeUIzYjNKcmN5QnZibXg1SUhkcGRHZ2djbVZrSUc1MWJXSmxjbk1uS1R0Y2JpQWdJQ0IwYUdsekxuSmxaQzVmZG1WeWFXWjVNU2gwYUdsektUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaV1F1Ym1WbktIUm9hWE1wTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzV5WldSUWIzY2dQU0JtZFc1amRHbHZiaUJ5WldSUWIzY2dLRzUxYlNrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gwYUdsekxuSmxaQ0FtSmlBaGJuVnRMbkpsWkN3Z0ozSmxaRkJ2ZHlodWIzSnRZV3hPZFcwcEp5azdYRzRnSUNBZ2RHaHBjeTV5WldRdVgzWmxjbWxtZVRFb2RHaHBjeWs3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21Wa0xuQnZkeWgwYUdsekxDQnVkVzBwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkJ5YVcxbElHNTFiV0psY25NZ2QybDBhQ0JsWm1acFkybGxiblFnY21Wa2RXTjBhVzl1WEc0Z0lIWmhjaUJ3Y21sdFpYTWdQU0I3WEc0Z0lDQWdhekkxTmpvZ2JuVnNiQ3hjYmlBZ0lDQndNakkwT2lCdWRXeHNMRnh1SUNBZ0lIQXhPVEk2SUc1MWJHd3NYRzRnSUNBZ2NESTFOVEU1T2lCdWRXeHNYRzRnSUgwN1hHNWNiaUFnTHk4Z1VITmxkV1J2TFUxbGNuTmxibTVsSUhCeWFXMWxYRzRnSUdaMWJtTjBhVzl1SUUxUWNtbHRaU0FvYm1GdFpTd2djQ2tnZTF4dUlDQWdJQzh2SUZBZ1BTQXlJRjRnVGlBdElFdGNiaUFnSUNCMGFHbHpMbTVoYldVZ1BTQnVZVzFsTzF4dUlDQWdJSFJvYVhNdWNDQTlJRzVsZHlCQ1RpaHdMQ0F4TmlrN1hHNGdJQ0FnZEdocGN5NXVJRDBnZEdocGN5NXdMbUpwZEV4bGJtZDBhQ2dwTzF4dUlDQWdJSFJvYVhNdWF5QTlJRzVsZHlCQ1RpZ3hLUzVwZFhOb2JHNG9kR2hwY3k1dUtTNXBjM1ZpS0hSb2FYTXVjQ2s3WEc1Y2JpQWdJQ0IwYUdsekxuUnRjQ0E5SUhSb2FYTXVYM1J0Y0NncE8xeHVJQ0I5WEc1Y2JpQWdUVkJ5YVcxbExuQnliM1J2ZEhsd1pTNWZkRzF3SUQwZ1puVnVZM1JwYjI0Z1gzUnRjQ0FvS1NCN1hHNGdJQ0FnZG1GeUlIUnRjQ0E5SUc1bGR5QkNUaWh1ZFd4c0tUdGNiaUFnSUNCMGJYQXVkMjl5WkhNZ1BTQnVaWGNnUVhKeVlYa29UV0YwYUM1alpXbHNLSFJvYVhNdWJpQXZJREV6S1NrN1hHNGdJQ0FnY21WMGRYSnVJSFJ0Y0R0Y2JpQWdmVHRjYmx4dUlDQk5VSEpwYldVdWNISnZkRzkwZVhCbExtbHlaV1IxWTJVZ1BTQm1kVzVqZEdsdmJpQnBjbVZrZFdObElDaHVkVzBwSUh0Y2JpQWdJQ0F2THlCQmMzTjFiV1Z6SUhSb1lYUWdZRzUxYldBZ2FYTWdiR1Z6Y3lCMGFHRnVJR0JRWGpKZ1hHNGdJQ0FnTHk4Z2JuVnRJRDBnU0VrZ0tpQW9NaUJlSUU0Z0xTQkxLU0FySUVoSklDb2dTeUFySUV4UElEMGdTRWtnS2lCTElDc2dURThnS0cxdlpDQlFLVnh1SUNBZ0lIWmhjaUJ5SUQwZ2JuVnRPMXh1SUNBZ0lIWmhjaUJ5YkdWdU8xeHVYRzRnSUNBZ1pHOGdlMXh1SUNBZ0lDQWdkR2hwY3k1emNHeHBkQ2h5TENCMGFHbHpMblJ0Y0NrN1hHNGdJQ0FnSUNCeUlEMGdkR2hwY3k1cGJYVnNTeWh5S1R0Y2JpQWdJQ0FnSUhJZ1BTQnlMbWxoWkdRb2RHaHBjeTUwYlhBcE8xeHVJQ0FnSUNBZ2NteGxiaUE5SUhJdVltbDBUR1Z1WjNSb0tDazdYRzRnSUNBZ2ZTQjNhR2xzWlNBb2NteGxiaUErSUhSb2FYTXViaWs3WEc1Y2JpQWdJQ0IyWVhJZ1kyMXdJRDBnY214bGJpQThJSFJvYVhNdWJpQS9JQzB4SURvZ2NpNTFZMjF3S0hSb2FYTXVjQ2s3WEc0Z0lDQWdhV1lnS0dOdGNDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2NpNTNiM0prYzFzd1hTQTlJREE3WEc0Z0lDQWdJQ0J5TG14bGJtZDBhQ0E5SURFN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoamJYQWdQaUF3S1NCN1hHNGdJQ0FnSUNCeUxtbHpkV0lvZEdocGN5NXdLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NpNXpkSEpwY0NncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ5TzF4dUlDQjlPMXh1WEc0Z0lFMVFjbWx0WlM1d2NtOTBiM1I1Y0dVdWMzQnNhWFFnUFNCbWRXNWpkR2x2YmlCemNHeHBkQ0FvYVc1d2RYUXNJRzkxZENrZ2UxeHVJQ0FnSUdsdWNIVjBMbWwxYzJoeWJpaDBhR2x6TG00c0lEQXNJRzkxZENrN1hHNGdJSDA3WEc1Y2JpQWdUVkJ5YVcxbExuQnliM1J2ZEhsd1pTNXBiWFZzU3lBOUlHWjFibU4wYVc5dUlHbHRkV3hMSUNodWRXMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2JuVnRMbWx0ZFd3b2RHaHBjeTVyS1R0Y2JpQWdmVHRjYmx4dUlDQm1kVzVqZEdsdmJpQkxNalUySUNncElIdGNiaUFnSUNCTlVISnBiV1V1WTJGc2JDaGNiaUFnSUNBZ0lIUm9hWE1zWEc0Z0lDQWdJQ0FuYXpJMU5pY3NYRzRnSUNBZ0lDQW5abVptWm1abVptWWdabVptWm1abVptWWdabVptWm1abVptWWdabVptWm1abVptWWdabVptWm1abVptWWdabVptWm1abVptWWdabVptWm1abVptVWdabVptWm1aak1tWW5LVHRjYmlBZ2ZWeHVJQ0JwYm1obGNtbDBjeWhMTWpVMkxDQk5VSEpwYldVcE8xeHVYRzRnSUVzeU5UWXVjSEp2ZEc5MGVYQmxMbk53YkdsMElEMGdablZ1WTNScGIyNGdjM0JzYVhRZ0tHbHVjSFYwTENCdmRYUndkWFFwSUh0Y2JpQWdJQ0F2THlBeU5UWWdQU0E1SUNvZ01qWWdLeUF5TWx4dUlDQWdJSFpoY2lCdFlYTnJJRDBnTUhnelptWm1abVk3WEc1Y2JpQWdJQ0IyWVhJZ2IzVjBUR1Z1SUQwZ1RXRjBhQzV0YVc0b2FXNXdkWFF1YkdWdVozUm9MQ0E1S1R0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUc5MWRFeGxianNnYVNzcktTQjdYRzRnSUNBZ0lDQnZkWFJ3ZFhRdWQyOXlaSE5iYVYwZ1BTQnBibkIxZEM1M2IzSmtjMXRwWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdiM1YwY0hWMExteGxibWQwYUNBOUlHOTFkRXhsYmp0Y2JseHVJQ0FnSUdsbUlDaHBibkIxZEM1c1pXNW5kR2dnUEQwZ09Ta2dlMXh1SUNBZ0lDQWdhVzV3ZFhRdWQyOXlaSE5iTUYwZ1BTQXdPMXh1SUNBZ0lDQWdhVzV3ZFhRdWJHVnVaM1JvSUQwZ01UdGNiaUFnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCVGFHbG1kQ0JpZVNBNUlHeHBiV0p6WEc0Z0lDQWdkbUZ5SUhCeVpYWWdQU0JwYm5CMWRDNTNiM0prYzFzNVhUdGNiaUFnSUNCdmRYUndkWFF1ZDI5eVpITmJiM1YwY0hWMExteGxibWQwYUNzclhTQTlJSEJ5WlhZZ0ppQnRZWE5yTzF4dVhHNGdJQ0FnWm05eUlDaHBJRDBnTVRBN0lHa2dQQ0JwYm5CMWRDNXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlHNWxlSFFnUFNCcGJuQjFkQzUzYjNKa2MxdHBYU0I4SURBN1hHNGdJQ0FnSUNCcGJuQjFkQzUzYjNKa2MxdHBJQzBnTVRCZElEMGdLQ2h1WlhoMElDWWdiV0Z6YXlrZ1BEd2dOQ2tnZkNBb2NISmxkaUErUGo0Z01qSXBPMXh1SUNBZ0lDQWdjSEpsZGlBOUlHNWxlSFE3WEc0Z0lDQWdmVnh1SUNBZ0lIQnlaWFlnUGo0K1BTQXlNanRjYmlBZ0lDQnBibkIxZEM1M2IzSmtjMXRwSUMwZ01UQmRJRDBnY0hKbGRqdGNiaUFnSUNCcFppQW9jSEpsZGlBOVBUMGdNQ0FtSmlCcGJuQjFkQzVzWlc1bmRHZ2dQaUF4TUNrZ2UxeHVJQ0FnSUNBZ2FXNXdkWFF1YkdWdVozUm9JQzA5SURFd08xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JwYm5CMWRDNXNaVzVuZEdnZ0xUMGdPVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnU3pJMU5pNXdjbTkwYjNSNWNHVXVhVzExYkVzZ1BTQm1kVzVqZEdsdmJpQnBiWFZzU3lBb2JuVnRLU0I3WEc0Z0lDQWdMeThnU3lBOUlEQjRNVEF3TURBd00yUXhJRDBnV3lBd2VEUXdMQ0F3ZUROa01TQmRYRzRnSUNBZ2JuVnRMbmR2Y21SelcyNTFiUzVzWlc1bmRHaGRJRDBnTUR0Y2JpQWdJQ0J1ZFcwdWQyOXlaSE5iYm5WdExteGxibWQwYUNBcklERmRJRDBnTUR0Y2JpQWdJQ0J1ZFcwdWJHVnVaM1JvSUNzOUlESTdYRzVjYmlBZ0lDQXZMeUJpYjNWdVpHVmtJR0YwT2lBd2VEUXdJQ29nTUhnelptWm1abVptSUNzZ01IZ3paREFnUFNBd2VERXdNREF3TURNNU1GeHVJQ0FnSUhaaGNpQnNieUE5SURBN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCdWRXMHViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQjNJRDBnYm5WdExuZHZjbVJ6VzJsZElId2dNRHRjYmlBZ0lDQWdJR3h2SUNzOUlIY2dLaUF3ZUROa01UdGNiaUFnSUNBZ0lHNTFiUzUzYjNKa2MxdHBYU0E5SUd4dklDWWdNSGd6Wm1abVptWm1PMXh1SUNBZ0lDQWdiRzhnUFNCM0lDb2dNSGcwTUNBcklDZ29iRzhnTHlBd2VEUXdNREF3TURBcElId2dNQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUm1GemRDQnNaVzVuZEdnZ2NtVmtkV04wYVc5dVhHNGdJQ0FnYVdZZ0tHNTFiUzUzYjNKa2MxdHVkVzB1YkdWdVozUm9JQzBnTVYwZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUc1MWJTNXNaVzVuZEdndExUdGNiaUFnSUNBZ0lHbG1JQ2h1ZFcwdWQyOXlaSE5iYm5WdExteGxibWQwYUNBdElERmRJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJRzUxYlM1c1pXNW5kR2d0TFR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlHNTFiVHRjYmlBZ2ZUdGNibHh1SUNCbWRXNWpkR2x2YmlCUU1qSTBJQ2dwSUh0Y2JpQWdJQ0JOVUhKcGJXVXVZMkZzYkNoY2JpQWdJQ0FnSUhSb2FYTXNYRzRnSUNBZ0lDQW5jREl5TkNjc1hHNGdJQ0FnSUNBblptWm1abVptWm1ZZ1ptWm1abVptWm1ZZ1ptWm1abVptWm1ZZ1ptWm1abVptWm1ZZ01EQXdNREF3TURBZ01EQXdNREF3TURBZ01EQXdNREF3TURFbktUdGNiaUFnZlZ4dUlDQnBibWhsY21sMGN5aFFNakkwTENCTlVISnBiV1VwTzF4dVhHNGdJR1oxYm1OMGFXOXVJRkF4T1RJZ0tDa2dlMXh1SUNBZ0lFMVFjbWx0WlM1allXeHNLRnh1SUNBZ0lDQWdkR2hwY3l4Y2JpQWdJQ0FnSUNkd01Ua3lKeXhjYmlBZ0lDQWdJQ2RtWm1abVptWm1aaUJtWm1abVptWm1aaUJtWm1abVptWm1aaUJtWm1abVptWm1aU0JtWm1abVptWm1aaUJtWm1abVptWm1aaWNwTzF4dUlDQjlYRzRnSUdsdWFHVnlhWFJ6S0ZBeE9USXNJRTFRY21sdFpTazdYRzVjYmlBZ1puVnVZM1JwYjI0Z1VESTFOVEU1SUNncElIdGNiaUFnSUNBdkx5QXlJRjRnTWpVMUlDMGdNVGxjYmlBZ0lDQk5VSEpwYldVdVkyRnNiQ2hjYmlBZ0lDQWdJSFJvYVhNc1hHNGdJQ0FnSUNBbk1qVTFNVGtuTEZ4dUlDQWdJQ0FnSnpkbVptWm1abVptWm1abVptWm1abVlnWm1abVptWm1abVptWm1abVptWm1aaUJtWm1abVptWm1abVptWm1abVptWm1JR1ptWm1abVptWm1abVptWm1abVpXUW5LVHRjYmlBZ2ZWeHVJQ0JwYm1obGNtbDBjeWhRTWpVMU1Ua3NJRTFRY21sdFpTazdYRzVjYmlBZ1VESTFOVEU1TG5CeWIzUnZkSGx3WlM1cGJYVnNTeUE5SUdaMWJtTjBhVzl1SUdsdGRXeExJQ2h1ZFcwcElIdGNiaUFnSUNBdkx5QkxJRDBnTUhneE0xeHVJQ0FnSUhaaGNpQmpZWEp5ZVNBOUlEQTdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnVkVzB1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJvYVNBOUlDaHVkVzB1ZDI5eVpITmJhVjBnZkNBd0tTQXFJREI0TVRNZ0t5QmpZWEp5ZVR0Y2JpQWdJQ0FnSUhaaGNpQnNieUE5SUdocElDWWdNSGd6Wm1abVptWm1PMXh1SUNBZ0lDQWdhR2tnUGo0K1BTQXlOanRjYmx4dUlDQWdJQ0FnYm5WdExuZHZjbVJ6VzJsZElEMGdiRzg3WEc0Z0lDQWdJQ0JqWVhKeWVTQTlJR2hwTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWTJGeWNua2dJVDA5SURBcElIdGNiaUFnSUNBZ0lHNTFiUzUzYjNKa2MxdHVkVzB1YkdWdVozUm9LeXRkSUQwZ1kyRnljbms3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdWRXMDdYRzRnSUgwN1hHNWNiaUFnTHk4Z1JYaHdiM0owWldRZ2JXOXpkR3g1SUdadmNpQjBaWE4wYVc1bklIQjFjbkJ2YzJWekxDQjFjMlVnY0d4aGFXNGdibUZ0WlNCcGJuTjBaV0ZrWEc0Z0lFSk9MbDl3Y21sdFpTQTlJR1oxYm1OMGFXOXVJSEJ5YVcxbElDaHVZVzFsS1NCN1hHNGdJQ0FnTHk4Z1EyRmphR1ZrSUhabGNuTnBiMjRnYjJZZ2NISnBiV1ZjYmlBZ0lDQnBaaUFvY0hKcGJXVnpXMjVoYldWZEtTQnlaWFIxY200Z2NISnBiV1Z6VzI1aGJXVmRPMXh1WEc0Z0lDQWdkbUZ5SUhCeWFXMWxPMXh1SUNBZ0lHbG1JQ2h1WVcxbElEMDlQU0FuYXpJMU5pY3BJSHRjYmlBZ0lDQWdJSEJ5YVcxbElEMGdibVYzSUVzeU5UWW9LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzVoYldVZ1BUMDlJQ2R3TWpJMEp5a2dlMXh1SUNBZ0lDQWdjSEpwYldVZ1BTQnVaWGNnVURJeU5DZ3BPMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9ibUZ0WlNBOVBUMGdKM0F4T1RJbktTQjdYRzRnSUNBZ0lDQndjbWx0WlNBOUlHNWxkeUJRTVRreUtDazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHVZVzFsSUQwOVBTQW5jREkxTlRFNUp5a2dlMXh1SUNBZ0lDQWdjSEpwYldVZ1BTQnVaWGNnVURJMU5URTVLQ2s3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblZXNXJibTkzYmlCd2NtbHRaU0FuSUNzZ2JtRnRaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lIQnlhVzFsYzF0dVlXMWxYU0E5SUhCeWFXMWxPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIQnlhVzFsTzF4dUlDQjlPMXh1WEc0Z0lDOHZYRzRnSUM4dklFSmhjMlVnY21Wa2RXTjBhVzl1SUdWdVoybHVaVnh1SUNBdkwxeHVJQ0JtZFc1amRHbHZiaUJTWldRZ0tHMHBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzBnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQjJZWElnY0hKcGJXVWdQU0JDVGk1ZmNISnBiV1VvYlNrN1hHNGdJQ0FnSUNCMGFHbHpMbTBnUFNCd2NtbHRaUzV3TzF4dUlDQWdJQ0FnZEdocGN5NXdjbWx0WlNBOUlIQnlhVzFsTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmhjM05sY25Rb2JTNW5kRzRvTVNrc0lDZHRiMlIxYkhWeklHMTFjM1FnWW1VZ1ozSmxZWFJsY2lCMGFHRnVJREVuS1R0Y2JpQWdJQ0FnSUhSb2FYTXViU0E5SUcwN1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YVcxbElEMGdiblZzYkR0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCU1pXUXVjSEp2ZEc5MGVYQmxMbDkyWlhKcFpua3hJRDBnWm5WdVkzUnBiMjRnWDNabGNtbG1lVEVnS0dFcElIdGNiaUFnSUNCaGMzTmxjblFvWVM1dVpXZGhkR2wyWlNBOVBUMGdNQ3dnSjNKbFpDQjNiM0pyY3lCdmJteDVJSGRwZEdnZ2NHOXphWFJwZG1Wekp5azdYRzRnSUNBZ1lYTnpaWEowS0dFdWNtVmtMQ0FuY21Wa0lIZHZjbXR6SUc5dWJIa2dkMmwwYUNCeVpXUWdiblZ0WW1WeWN5Y3BPMXh1SUNCOU8xeHVYRzRnSUZKbFpDNXdjbTkwYjNSNWNHVXVYM1psY21sbWVUSWdQU0JtZFc1amRHbHZiaUJmZG1WeWFXWjVNaUFvWVN3Z1lpa2dlMXh1SUNBZ0lHRnpjMlZ5ZENnb1lTNXVaV2RoZEdsMlpTQjhJR0l1Ym1WbllYUnBkbVVwSUQwOVBTQXdMQ0FuY21Wa0lIZHZjbXR6SUc5dWJIa2dkMmwwYUNCd2IzTnBkR2wyWlhNbktUdGNiaUFnSUNCaGMzTmxjblFvWVM1eVpXUWdKaVlnWVM1eVpXUWdQVDA5SUdJdWNtVmtMRnh1SUNBZ0lDQWdKM0psWkNCM2IzSnJjeUJ2Ym14NUlIZHBkR2dnY21Wa0lHNTFiV0psY25NbktUdGNiaUFnZlR0Y2JseHVJQ0JTWldRdWNISnZkRzkwZVhCbExtbHRiMlFnUFNCbWRXNWpkR2x2YmlCcGJXOWtJQ2hoS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKcGJXVXBJSEpsZEhWeWJpQjBhR2x6TG5CeWFXMWxMbWx5WldSMVkyVW9ZU2t1WDJadmNtTmxVbVZrS0hSb2FYTXBPMXh1SUNBZ0lISmxkSFZ5YmlCaExuVnRiMlFvZEdocGN5NXRLUzVmWm05eVkyVlNaV1FvZEdocGN5azdYRzRnSUgwN1hHNWNiaUFnVW1Wa0xuQnliM1J2ZEhsd1pTNXVaV2NnUFNCbWRXNWpkR2x2YmlCdVpXY2dLR0VwSUh0Y2JpQWdJQ0JwWmlBb1lTNXBjMXBsY204b0tTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHRXVZMnh2Ym1Vb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXRMbk4xWWloaEtTNWZabTl5WTJWU1pXUW9kR2hwY3lrN1hHNGdJSDA3WEc1Y2JpQWdVbVZrTG5CeWIzUnZkSGx3WlM1aFpHUWdQU0JtZFc1amRHbHZiaUJoWkdRZ0tHRXNJR0lwSUh0Y2JpQWdJQ0IwYUdsekxsOTJaWEpwWm5reUtHRXNJR0lwTzF4dVhHNGdJQ0FnZG1GeUlISmxjeUE5SUdFdVlXUmtLR0lwTzF4dUlDQWdJR2xtSUNoeVpYTXVZMjF3S0hSb2FYTXViU2tnUGowZ01Da2dlMXh1SUNBZ0lDQWdjbVZ6TG1semRXSW9kR2hwY3k1dEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSEpsY3k1ZlptOXlZMlZTWldRb2RHaHBjeWs3WEc0Z0lIMDdYRzVjYmlBZ1VtVmtMbkJ5YjNSdmRIbHdaUzVwWVdSa0lEMGdablZ1WTNScGIyNGdhV0ZrWkNBb1lTd2dZaWtnZTF4dUlDQWdJSFJvYVhNdVgzWmxjbWxtZVRJb1lTd2dZaWs3WEc1Y2JpQWdJQ0IyWVhJZ2NtVnpJRDBnWVM1cFlXUmtLR0lwTzF4dUlDQWdJR2xtSUNoeVpYTXVZMjF3S0hSb2FYTXViU2tnUGowZ01Da2dlMXh1SUNBZ0lDQWdjbVZ6TG1semRXSW9kR2hwY3k1dEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSEpsY3p0Y2JpQWdmVHRjYmx4dUlDQlNaV1F1Y0hKdmRHOTBlWEJsTG5OMVlpQTlJR1oxYm1OMGFXOXVJSE4xWWlBb1lTd2dZaWtnZTF4dUlDQWdJSFJvYVhNdVgzWmxjbWxtZVRJb1lTd2dZaWs3WEc1Y2JpQWdJQ0IyWVhJZ2NtVnpJRDBnWVM1emRXSW9ZaWs3WEc0Z0lDQWdhV1lnS0hKbGN5NWpiWEJ1S0RBcElEd2dNQ2tnZTF4dUlDQWdJQ0FnY21WekxtbGhaR1FvZEdocGN5NXRLVHRjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhKbGN5NWZabTl5WTJWU1pXUW9kR2hwY3lrN1hHNGdJSDA3WEc1Y2JpQWdVbVZrTG5CeWIzUnZkSGx3WlM1cGMzVmlJRDBnWm5WdVkzUnBiMjRnYVhOMVlpQW9ZU3dnWWlrZ2UxeHVJQ0FnSUhSb2FYTXVYM1psY21sbWVUSW9ZU3dnWWlrN1hHNWNiaUFnSUNCMllYSWdjbVZ6SUQwZ1lTNXBjM1ZpS0dJcE8xeHVJQ0FnSUdsbUlDaHlaWE11WTIxd2JpZ3dLU0E4SURBcElIdGNiaUFnSUNBZ0lISmxjeTVwWVdSa0tIUm9hWE11YlNrN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnlaWE03WEc0Z0lIMDdYRzVjYmlBZ1VtVmtMbkJ5YjNSdmRIbHdaUzV6YUd3Z1BTQm1kVzVqZEdsdmJpQnphR3dnS0dFc0lHNTFiU2tnZTF4dUlDQWdJSFJvYVhNdVgzWmxjbWxtZVRFb1lTazdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhVzF2WkNoaExuVnphR3h1S0c1MWJTa3BPMXh1SUNCOU8xeHVYRzRnSUZKbFpDNXdjbTkwYjNSNWNHVXVhVzExYkNBOUlHWjFibU4wYVc5dUlHbHRkV3dnS0dFc0lHSXBJSHRjYmlBZ0lDQjBhR2x6TGw5MlpYSnBabmt5S0dFc0lHSXBPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWx0YjJRb1lTNXBiWFZzS0dJcEtUdGNiaUFnZlR0Y2JseHVJQ0JTWldRdWNISnZkRzkwZVhCbExtMTFiQ0E5SUdaMWJtTjBhVzl1SUcxMWJDQW9ZU3dnWWlrZ2UxeHVJQ0FnSUhSb2FYTXVYM1psY21sbWVUSW9ZU3dnWWlrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWFXMXZaQ2hoTG0xMWJDaGlLU2s3WEc0Z0lIMDdYRzVjYmlBZ1VtVmtMbkJ5YjNSdmRIbHdaUzVwYzNGeUlEMGdablZ1WTNScGIyNGdhWE54Y2lBb1lTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWx0ZFd3b1lTd2dZUzVqYkc5dVpTZ3BLVHRjYmlBZ2ZUdGNibHh1SUNCU1pXUXVjSEp2ZEc5MGVYQmxMbk54Y2lBOUlHWjFibU4wYVc5dUlITnhjaUFvWVNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtMTFiQ2hoTENCaEtUdGNiaUFnZlR0Y2JseHVJQ0JTWldRdWNISnZkRzkwZVhCbExuTnhjblFnUFNCbWRXNWpkR2x2YmlCemNYSjBJQ2hoS1NCN1hHNGdJQ0FnYVdZZ0tHRXVhWE5hWlhKdktDa3BJSEpsZEhWeWJpQmhMbU5zYjI1bEtDazdYRzVjYmlBZ0lDQjJZWElnYlc5a015QTlJSFJvYVhNdWJTNWhibVJzYmlnektUdGNiaUFnSUNCaGMzTmxjblFvYlc5a015QWxJRElnUFQwOUlERXBPMXh1WEc0Z0lDQWdMeThnUm1GemRDQmpZWE5sWEc0Z0lDQWdhV1lnS0cxdlpETWdQVDA5SURNcElIdGNiaUFnSUNBZ0lIWmhjaUJ3YjNjZ1BTQjBhR2x6TG0wdVlXUmtLRzVsZHlCQ1RpZ3hLU2t1YVhWemFISnVLRElwTzF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHOTNLR0VzSUhCdmR5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdWRzl1Wld4c2FTMVRhR0Z1YTNNZ1lXeG5iM0pwZEdodElDaFViM1JoYkd4NUlIVnViM0IwYVcxcGVtVmtJR0Z1WkNCemJHOTNLVnh1SUNBZ0lDOHZYRzRnSUNBZ0x5OGdSbWx1WkNCUklHRnVaQ0JUTENCMGFHRjBJRkVnS2lBeUlGNGdVeUE5SUNoUUlDMGdNU2xjYmlBZ0lDQjJZWElnY1NBOUlIUm9hWE11YlM1emRXSnVLREVwTzF4dUlDQWdJSFpoY2lCeklEMGdNRHRjYmlBZ0lDQjNhR2xzWlNBb0lYRXVhWE5hWlhKdktDa2dKaVlnY1M1aGJtUnNiaWd4S1NBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnY3lzck8xeHVJQ0FnSUNBZ2NTNXBkWE5vY200b01TazdYRzRnSUNBZ2ZWeHVJQ0FnSUdGemMyVnlkQ2doY1M1cGMxcGxjbThvS1NrN1hHNWNiaUFnSUNCMllYSWdiMjVsSUQwZ2JtVjNJRUpPS0RFcExuUnZVbVZrS0hSb2FYTXBPMXh1SUNBZ0lIWmhjaUJ1VDI1bElEMGdiMjVsTG5KbFpFNWxaeWdwTzF4dVhHNGdJQ0FnTHk4Z1JtbHVaQ0J4ZFdGa2NtRjBhV01nYm05dUxYSmxjMmxrZFdWY2JpQWdJQ0F2THlCT1QxUkZPaUJOWVhnZ2FYTWdjM1ZqYUNCaVpXTmhkWE5sSUc5bUlHZGxibVZ5WVd4cGVtVmtJRkpwWlcxaGJtNGdhSGx3YjNSb1pYTnBjeTVjYmlBZ0lDQjJZWElnYkhCdmR5QTlJSFJvYVhNdWJTNXpkV0p1S0RFcExtbDFjMmh5YmlneEtUdGNiaUFnSUNCMllYSWdlaUE5SUhSb2FYTXViUzVpYVhSTVpXNW5kR2dvS1R0Y2JpQWdJQ0I2SUQwZ2JtVjNJRUpPS0RJZ0tpQjZJQ29nZWlrdWRHOVNaV1FvZEdocGN5azdYRzVjYmlBZ0lDQjNhR2xzWlNBb2RHaHBjeTV3YjNjb2Vpd2diSEJ2ZHlrdVkyMXdLRzVQYm1VcElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCNkxuSmxaRWxCWkdRb2JrOXVaU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUdNZ1BTQjBhR2x6TG5CdmR5aDZMQ0J4S1R0Y2JpQWdJQ0IyWVhJZ2NpQTlJSFJvYVhNdWNHOTNLR0VzSUhFdVlXUmtiaWd4S1M1cGRYTm9jbTRvTVNrcE8xeHVJQ0FnSUhaaGNpQjBJRDBnZEdocGN5NXdiM2NvWVN3Z2NTazdYRzRnSUNBZ2RtRnlJRzBnUFNCek8xeHVJQ0FnSUhkb2FXeGxJQ2gwTG1OdGNDaHZibVVwSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2RHMXdJRDBnZER0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUIwYlhBdVkyMXdLRzl1WlNrZ0lUMDlJREE3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0IwYlhBZ1BTQjBiWEF1Y21Wa1UzRnlLQ2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JoYzNObGNuUW9hU0E4SUcwcE8xeHVJQ0FnSUNBZ2RtRnlJR0lnUFNCMGFHbHpMbkJ2ZHloakxDQnVaWGNnUWs0b01Ta3VhWFZ6YUd4dUtHMGdMU0JwSUMwZ01Ta3BPMXh1WEc0Z0lDQWdJQ0J5SUQwZ2NpNXlaV1JOZFd3b1lpazdYRzRnSUNBZ0lDQmpJRDBnWWk1eVpXUlRjWElvS1R0Y2JpQWdJQ0FnSUhRZ1BTQjBMbkpsWkUxMWJDaGpLVHRjYmlBZ0lDQWdJRzBnUFNCcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ5TzF4dUlDQjlPMXh1WEc0Z0lGSmxaQzV3Y205MGIzUjVjR1V1YVc1MmJTQTlJR1oxYm1OMGFXOXVJR2x1ZG0wZ0tHRXBJSHRjYmlBZ0lDQjJZWElnYVc1MklEMGdZUzVmYVc1MmJYQW9kR2hwY3k1dEtUdGNiaUFnSUNCcFppQW9hVzUyTG01bFoyRjBhWFpsSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0JwYm5ZdWJtVm5ZWFJwZG1VZ1BTQXdPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YVcxdlpDaHBibllwTG5KbFpFNWxaeWdwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYlc5a0tHbHVkaWs3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUZKbFpDNXdjbTkwYjNSNWNHVXVjRzkzSUQwZ1puVnVZM1JwYjI0Z2NHOTNJQ2hoTENCdWRXMHBJSHRjYmlBZ0lDQnBaaUFvYm5WdExtbHpXbVZ5YnlncEtTQnlaWFIxY200Z2JtVjNJRUpPS0RFcExuUnZVbVZrS0hSb2FYTXBPMXh1SUNBZ0lHbG1JQ2h1ZFcwdVkyMXdiaWd4S1NBOVBUMGdNQ2tnY21WMGRYSnVJR0V1WTJ4dmJtVW9LVHRjYmx4dUlDQWdJSFpoY2lCM2FXNWtiM2RUYVhwbElEMGdORHRjYmlBZ0lDQjJZWElnZDI1a0lEMGdibVYzSUVGeWNtRjVLREVnUER3Z2QybHVaRzkzVTJsNlpTazdYRzRnSUNBZ2QyNWtXekJkSUQwZ2JtVjNJRUpPS0RFcExuUnZVbVZrS0hSb2FYTXBPMXh1SUNBZ0lIZHVaRnN4WFNBOUlHRTdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREk3SUdrZ1BDQjNibVF1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lIZHVaRnRwWFNBOUlIUm9hWE11YlhWc0tIZHVaRnRwSUMwZ01WMHNJR0VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCeVpYTWdQU0IzYm1SYk1GMDdYRzRnSUNBZ2RtRnlJR04xY25KbGJuUWdQU0F3TzF4dUlDQWdJSFpoY2lCamRYSnlaVzUwVEdWdUlEMGdNRHRjYmlBZ0lDQjJZWElnYzNSaGNuUWdQU0J1ZFcwdVltbDBUR1Z1WjNSb0tDa2dKU0F5Tmp0Y2JpQWdJQ0JwWmlBb2MzUmhjblFnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJSE4wWVhKMElEMGdNalk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabTl5SUNocElEMGdiblZ0TG14bGJtZDBhQ0F0SURFN0lHa2dQajBnTURzZ2FTMHRLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2QyOXlaQ0E5SUc1MWJTNTNiM0prYzF0cFhUdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHb2dQU0J6ZEdGeWRDQXRJREU3SUdvZ1BqMGdNRHNnYWkwdEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCaWFYUWdQU0FvZDI5eVpDQStQaUJxS1NBbUlERTdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYTWdJVDA5SUhkdVpGc3dYU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxjeUE5SUhSb2FYTXVjM0Z5S0hKbGN5azdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9ZbWwwSUQwOVBTQXdJQ1ltSUdOMWNuSmxiblFnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwVEdWdUlEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR04xY25KbGJuUWdQRHc5SURFN1hHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5RZ2ZEMGdZbWwwTzF4dUlDQWdJQ0FnSUNCamRYSnlaVzUwVEdWdUt5czdYRzRnSUNBZ0lDQWdJR2xtSUNoamRYSnlaVzUwVEdWdUlDRTlQU0IzYVc1a2IzZFRhWHBsSUNZbUlDaHBJQ0U5UFNBd0lIeDhJR29nSVQwOUlEQXBLU0JqYjI1MGFXNTFaVHRjYmx4dUlDQWdJQ0FnSUNCeVpYTWdQU0IwYUdsekxtMTFiQ2h5WlhNc0lIZHVaRnRqZFhKeVpXNTBYU2s3WEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblJNWlc0Z1BTQXdPMXh1SUNBZ0lDQWdJQ0JqZFhKeVpXNTBJRDBnTUR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhOMFlYSjBJRDBnTWpZN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSEpsY3p0Y2JpQWdmVHRjYmx4dUlDQlNaV1F1Y0hKdmRHOTBlWEJsTG1OdmJuWmxjblJVYnlBOUlHWjFibU4wYVc5dUlHTnZiblpsY25SVWJ5QW9iblZ0S1NCN1hHNGdJQ0FnZG1GeUlISWdQU0J1ZFcwdWRXMXZaQ2gwYUdsekxtMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlISWdQVDA5SUc1MWJTQS9JSEl1WTJ4dmJtVW9LU0E2SUhJN1hHNGdJSDA3WEc1Y2JpQWdVbVZrTG5CeWIzUnZkSGx3WlM1amIyNTJaWEowUm5KdmJTQTlJR1oxYm1OMGFXOXVJR052Ym5abGNuUkdjbTl0SUNodWRXMHBJSHRjYmlBZ0lDQjJZWElnY21WeklEMGdiblZ0TG1Oc2IyNWxLQ2s3WEc0Z0lDQWdjbVZ6TG5KbFpDQTlJRzUxYkd3N1hHNGdJQ0FnY21WMGRYSnVJSEpsY3p0Y2JpQWdmVHRjYmx4dUlDQXZMMXh1SUNBdkx5Qk5iMjUwWjI5dFpYSjVJRzFsZEdodlpDQmxibWRwYm1WY2JpQWdMeTljYmx4dUlDQkNUaTV0YjI1MElEMGdablZ1WTNScGIyNGdiVzl1ZENBb2JuVnRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJOYjI1MEtHNTFiU2s3WEc0Z0lIMDdYRzVjYmlBZ1puVnVZM1JwYjI0Z1RXOXVkQ0FvYlNrZ2UxeHVJQ0FnSUZKbFpDNWpZV3hzS0hSb2FYTXNJRzBwTzF4dVhHNGdJQ0FnZEdocGN5NXphR2xtZENBOUlIUm9hWE11YlM1aWFYUk1aVzVuZEdnb0tUdGNiaUFnSUNCcFppQW9kR2hwY3k1emFHbG1kQ0FsSURJMklDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbk5vYVdaMElDczlJREkySUMwZ0tIUm9hWE11YzJocFpuUWdKU0F5TmlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NXlJRDBnYm1WM0lFSk9LREVwTG1sMWMyaHNiaWgwYUdsekxuTm9hV1owS1R0Y2JpQWdJQ0IwYUdsekxuSXlJRDBnZEdocGN5NXBiVzlrS0hSb2FYTXVjaTV6Y1hJb0tTazdYRzRnSUNBZ2RHaHBjeTV5YVc1MklEMGdkR2hwY3k1eUxsOXBiblp0Y0NoMGFHbHpMbTBwTzF4dVhHNGdJQ0FnZEdocGN5NXRhVzUySUQwZ2RHaHBjeTV5YVc1MkxtMTFiQ2gwYUdsekxuSXBMbWx6ZFdKdUtERXBMbVJwZGloMGFHbHpMbTBwTzF4dUlDQWdJSFJvYVhNdWJXbHVkaUE5SUhSb2FYTXViV2x1ZGk1MWJXOWtLSFJvYVhNdWNpazdYRzRnSUNBZ2RHaHBjeTV0YVc1MklEMGdkR2hwY3k1eUxuTjFZaWgwYUdsekxtMXBibllwTzF4dUlDQjlYRzRnSUdsdWFHVnlhWFJ6S0UxdmJuUXNJRkpsWkNrN1hHNWNiaUFnVFc5dWRDNXdjbTkwYjNSNWNHVXVZMjl1ZG1WeWRGUnZJRDBnWm5WdVkzUnBiMjRnWTI5dWRtVnlkRlJ2SUNodWRXMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVwYlc5a0tHNTFiUzUxYzJoc2JpaDBhR2x6TG5Ob2FXWjBLU2s3WEc0Z0lIMDdYRzVjYmlBZ1RXOXVkQzV3Y205MGIzUjVjR1V1WTI5dWRtVnlkRVp5YjIwZ1BTQm1kVzVqZEdsdmJpQmpiMjUyWlhKMFJuSnZiU0FvYm5WdEtTQjdYRzRnSUNBZ2RtRnlJSElnUFNCMGFHbHpMbWx0YjJRb2JuVnRMbTExYkNoMGFHbHpMbkpwYm5ZcEtUdGNiaUFnSUNCeUxuSmxaQ0E5SUc1MWJHdzdYRzRnSUNBZ2NtVjBkWEp1SUhJN1hHNGdJSDA3WEc1Y2JpQWdUVzl1ZEM1d2NtOTBiM1I1Y0dVdWFXMTFiQ0E5SUdaMWJtTjBhVzl1SUdsdGRXd2dLR0VzSUdJcElIdGNiaUFnSUNCcFppQW9ZUzVwYzFwbGNtOG9LU0I4ZkNCaUxtbHpXbVZ5YnlncEtTQjdYRzRnSUNBZ0lDQmhMbmR2Y21Seld6QmRJRDBnTUR0Y2JpQWdJQ0FnSUdFdWJHVnVaM1JvSUQwZ01UdGNiaUFnSUNBZ0lISmxkSFZ5YmlCaE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQjBJRDBnWVM1cGJYVnNLR0lwTzF4dUlDQWdJSFpoY2lCaklEMGdkQzV0WVhOcmJpaDBhR2x6TG5Ob2FXWjBLUzV0ZFd3b2RHaHBjeTV0YVc1MktTNXBiV0Z6YTI0b2RHaHBjeTV6YUdsbWRDa3ViWFZzS0hSb2FYTXViU2s3WEc0Z0lDQWdkbUZ5SUhVZ1BTQjBMbWx6ZFdJb1l5a3VhWFZ6YUhKdUtIUm9hWE11YzJocFpuUXBPMXh1SUNBZ0lIWmhjaUJ5WlhNZ1BTQjFPMXh1WEc0Z0lDQWdhV1lnS0hVdVkyMXdLSFJvYVhNdWJTa2dQajBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVnpJRDBnZFM1cGMzVmlLSFJvYVhNdWJTazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDFMbU50Y0c0b01Da2dQQ0F3S1NCN1hHNGdJQ0FnSUNCeVpYTWdQU0IxTG1saFpHUW9kR2hwY3k1dEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnY21WekxsOW1iM0pqWlZKbFpDaDBhR2x6S1R0Y2JpQWdmVHRjYmx4dUlDQk5iMjUwTG5CeWIzUnZkSGx3WlM1dGRXd2dQU0JtZFc1amRHbHZiaUJ0ZFd3Z0tHRXNJR0lwSUh0Y2JpQWdJQ0JwWmlBb1lTNXBjMXBsY204b0tTQjhmQ0JpTG1seldtVnlieWdwS1NCeVpYUjFjbTRnYm1WM0lFSk9LREFwTGw5bWIzSmpaVkpsWkNoMGFHbHpLVHRjYmx4dUlDQWdJSFpoY2lCMElEMGdZUzV0ZFd3b1lpazdYRzRnSUNBZ2RtRnlJR01nUFNCMExtMWhjMnR1S0hSb2FYTXVjMmhwWm5RcExtMTFiQ2gwYUdsekxtMXBibllwTG1sdFlYTnJiaWgwYUdsekxuTm9hV1owS1M1dGRXd29kR2hwY3k1dEtUdGNiaUFnSUNCMllYSWdkU0E5SUhRdWFYTjFZaWhqS1M1cGRYTm9jbTRvZEdocGN5NXphR2xtZENrN1hHNGdJQ0FnZG1GeUlISmxjeUE5SUhVN1hHNGdJQ0FnYVdZZ0tIVXVZMjF3S0hSb2FYTXViU2tnUGowZ01Da2dlMXh1SUNBZ0lDQWdjbVZ6SUQwZ2RTNXBjM1ZpS0hSb2FYTXViU2s3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gxTG1OdGNHNG9NQ2tnUENBd0tTQjdYRzRnSUNBZ0lDQnlaWE1nUFNCMUxtbGhaR1FvZEdocGN5NXRLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2NtVnpMbDltYjNKalpWSmxaQ2gwYUdsektUdGNiaUFnZlR0Y2JseHVJQ0JOYjI1MExuQnliM1J2ZEhsd1pTNXBiblp0SUQwZ1puVnVZM1JwYjI0Z2FXNTJiU0FvWVNrZ2UxeHVJQ0FnSUM4dklDaEJVaWxlTFRFZ0tpQlNYaklnUFNBb1FWNHRNU0FxSUZKZUxURXBJQ29nVWw0eUlEMGdRVjR0TVNBcUlGSmNiaUFnSUNCMllYSWdjbVZ6SUQwZ2RHaHBjeTVwYlc5a0tHRXVYMmx1ZG0xd0tIUm9hWE11YlNrdWJYVnNLSFJvYVhNdWNqSXBLVHRjYmlBZ0lDQnlaWFIxY200Z2NtVnpMbDltYjNKalpWSmxaQ2gwYUdsektUdGNiaUFnZlR0Y2JuMHBLSFI1Y0dWdlppQnRiMlIxYkdVZ1BUMDlJQ2QxYm1SbFptbHVaV1FuSUh4OElHMXZaSFZzWlN3Z2RHaHBjeWs3WEc0aUxDSXZLbHh1SUVFZ1NtRjJZVk5qY21sd2RDQnBiWEJzWlcxbGJuUmhkR2x2YmlCdlppQjBhR1VnVTBoQklHWmhiV2xzZVNCdlppQm9ZWE5vWlhNc0lHRnpYRzRnWkdWbWFXNWxaQ0JwYmlCR1NWQlRJRkJWUWlBeE9EQXROQ0JoYm1RZ1JrbFFVeUJRVlVJZ01qQXlMQ0JoY3lCM1pXeHNJR0Z6SUhSb1pTQmpiM0p5WlhOd2IyNWthVzVuWEc0Z1NFMUJReUJwYlhCc1pXMWxiblJoZEdsdmJpQmhjeUJrWldacGJtVmtJR2x1SUVaSlVGTWdVRlZDSURFNU9HRmNibHh1SUVOdmNIbHlhV2RvZENCQ2NtbGhiaUJVZFhKbGF5QXlNREE0TFRJd01UZGNiaUJFYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1FsTkVJRXhwWTJWdWMyVmNiaUJUWldVZ2FIUjBjRG92TDJOaGJHbG5ZWFJwYnk1bmFYUm9kV0l1WTI5dEwycHpVMGhCTHlCbWIzSWdiVzl5WlNCcGJtWnZjbTFoZEdsdmJseHVYRzRnVTJWMlpYSmhiQ0JtZFc1amRHbHZibk1nZEdGclpXNGdabkp2YlNCUVlYVnNJRXB2YUc1emRHOXVYRzRxTDF4dUozVnpaU0J6ZEhKcFkzUW5PeWhtZFc1amRHbHZiaWhaS1h0bWRXNWpkR2x2YmlCREtHTXNZU3hpS1h0MllYSWdaVDB3TEdnOVcxMHNiajB3TEdjc2JDeGtMR1lzYlN4eExIVXNjaXhKUFNFeExIWTlXMTBzZHoxYlhTeDBMSGs5SVRFc2VqMGhNU3g0UFMweE8ySTlZbng4ZTMwN1p6MWlMbVZ1WTI5a2FXNW5mSHhjSWxWVVJqaGNJanQwUFdJdWJuVnRVbTkxYm1SemZId3hPMmxtS0hRaFBUMXdZWEp6WlVsdWRDaDBMREV3S1h4OE1UNTBLWFJvY205M0lFVnljbTl5S0Z3aWJuVnRVbTkxYm1SeklHMTFjM1FnWVNCcGJuUmxaMlZ5SUQ0OUlERmNJaWs3YVdZb1hDSlRTRUV0TVZ3aVBUMDlZeWx0UFRVeE1peHhQVXNzZFQxYUxHWTlNVFl3TEhJOVpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlHRXVjMnhwWTJVb0tYMDdaV3h6WlNCcFppZ3dQVDA5WXk1c1lYTjBTVzVrWlhoUFppaGNJbE5JUVMxY0lpd3dLU2xwWmloeFBXWjFibU4wYVc5dUtHRXNZaWw3Y21WMGRYSnVJRXdvWVN4aUxHTXBmU3gxUFdaMWJtTjBhVzl1S0dFc1lpeG9MR1VwZTNaaGNpQnJMR1k3YVdZb1hDSlRTRUV0TWpJMFhDSTlQVDFqZkh4Y0lsTklRUzB5TlRaY0lqMDlQV01wYXowb1lpczJOVDQrUGprOFBEUXBLekUxTEdZOU1UWTdaV3h6WlNCcFppaGNJbE5JUVMwek9EUmNJajA5UFdOOGZGd2lVMGhCTFRVeE1sd2lQVDA5WXlsclBTaGlLekV5T1Q0K1BqRXdQRHhjYmpVcEt6TXhMR1k5TXpJN1pXeHpaU0IwYUhKdmR5QkZjbkp2Y2loY0lsVnVaWGh3WldOMFpXUWdaWEp5YjNJZ2FXNGdVMGhCTFRJZ2FXMXdiR1Z0Wlc1MFlYUnBiMjVjSWlrN1ptOXlLRHRoTG14bGJtZDBhRHc5YXpzcFlTNXdkWE5vS0RBcE8yRmJZajQrUGpWZGZEMHhNamc4UERJMExXSWxNekk3WWoxaUsyZzdZVnRyWFQxaUpqUXlPVFE1TmpjeU9UVTdZVnRyTFRGZFBXSXZOREk1TkRrMk56STVObnd3TzJnOVlTNXNaVzVuZEdnN1ptOXlLR0k5TUR0aVBHZzdZaXM5WmlsbFBVd29ZUzV6YkdsalpTaGlMR0lyWmlrc1pTeGpLVHRwWmloY0lsTklRUzB5TWpSY0lqMDlQV01wWVQxYlpWc3dYU3hsV3pGZExHVmJNbDBzWlZzelhTeGxXelJkTEdWYk5WMHNaVnMyWFYwN1pXeHpaU0JwWmloY0lsTklRUzB5TlRaY0lqMDlQV01wWVQxbE8yVnNjMlVnYVdZb1hDSlRTRUV0TXpnMFhDSTlQVDFqS1dFOVcyVmJNRjB1WVN4bFd6QmRMbUlzWlZzeFhTNWhMR1ZiTVYwdVlpeGxXekpkTG1Fc1pWc3lYUzVpTEdWYk0xMHVZU3hsV3pOZExtSXNaVnMwWFM1aExHVmJORjB1WWl4bFd6VmRMbUVzWlZzMVhTNWlYVHRsYkhObElHbG1LRndpVTBoQkxUVXhNbHdpUFQwOVl5bGhQVnRsV3pCZExtRXNaVnN3WFM1aUxHVmJNVjB1WVN4bFd6RmRMbUlzWlZzeVhTNWhMR1ZiTWwwdVlpeGxXek5kTG1Fc1pWc3pYUzVpTEdWYk5GMHVZU3hjYm1WYk5GMHVZaXhsV3pWZExtRXNaVnMxWFM1aUxHVmJObDB1WVN4bFd6WmRMbUlzWlZzM1hTNWhMR1ZiTjEwdVlsMDdaV3h6WlNCMGFISnZkeUJGY25KdmNpaGNJbFZ1Wlhod1pXTjBaV1FnWlhKeWIzSWdhVzRnVTBoQkxUSWdhVzF3YkdWdFpXNTBZWFJwYjI1Y0lpazdjbVYwZFhKdUlHRjlMSEk5Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUdFdWMyeHBZMlVvS1gwc1hDSlRTRUV0TWpJMFhDSTlQVDFqS1cwOU5URXlMR1k5TWpJME8yVnNjMlVnYVdZb1hDSlRTRUV0TWpVMlhDSTlQVDFqS1cwOU5URXlMR1k5TWpVMk8yVnNjMlVnYVdZb1hDSlRTRUV0TXpnMFhDSTlQVDFqS1cwOU1UQXlOQ3htUFRNNE5EdGxiSE5sSUdsbUtGd2lVMGhCTFRVeE1sd2lQVDA5WXlsdFBURXdNalFzWmowMU1USTdaV3h6WlNCMGFISnZkeUJGY25KdmNpaGNJa05vYjNObGJpQlRTRUVnZG1GeWFXRnVkQ0JwY3lCdWIzUWdjM1Z3Y0c5eWRHVmtYQ0lwTzJWc2MyVWdhV1lvTUQwOVBXTXViR0Z6ZEVsdVpHVjRUMllvWENKVFNFRXpMVndpTERBcGZId3dQVDA5WXk1c1lYTjBTVzVrWlhoUFppaGNJbE5JUVV0RlhDSXNNQ2twZTNaaGNpQkdQVFk3Y1QxRU8zSTlablZ1WTNScGIyNG9ZU2w3ZG1GeUlHTTlXMTBzWlR0bWIzSW9aVDB3T3pVK1pUdGxLejB4S1dOYlpWMDlZVnRsWFM1emJHbGpaU2dwTzNKbGRIVnliaUJqZlR0NFBURTdhV1lvWENKVFNFRXpMVEl5TkZ3aVBUMDlYRzVqS1cwOU1URTFNaXhtUFRJeU5EdGxiSE5sSUdsbUtGd2lVMGhCTXkweU5UWmNJajA5UFdNcGJUMHhNRGc0TEdZOU1qVTJPMlZzYzJVZ2FXWW9YQ0pUU0VFekxUTTRORndpUFQwOVl5bHRQVGd6TWl4bVBUTTRORHRsYkhObElHbG1LRndpVTBoQk15MDFNVEpjSWowOVBXTXBiVDAxTnpZc1pqMDFNVEk3Wld4elpTQnBaaWhjSWxOSVFVdEZNVEk0WENJOVBUMWpLVzA5TVRNME5DeG1QUzB4TEVZOU16RXNlajBoTUR0bGJITmxJR2xtS0Z3aVUwaEJTMFV5TlRaY0lqMDlQV01wYlQweE1EZzRMR1k5TFRFc1JqMHpNU3g2UFNFd08yVnNjMlVnZEdoeWIzY2dSWEp5YjNJb1hDSkRhRzl6Wlc0Z1UwaEJJSFpoY21saGJuUWdhWE1nYm05MElITjFjSEJ2Y25SbFpGd2lLVHQxUFdaMWJtTjBhVzl1S0dFc1l5eGxMR0lzYUNsN1pUMXRPM1poY2lCclBVWXNaaXhuUFZ0ZExHNDlaVDQrUGpVc2JEMHdMR1E5WXo0K1BqVTdabTl5S0dZOU1EdG1QR1FtSm1NK1BXVTdaaXM5YmlsaVBVUW9ZUzV6YkdsalpTaG1MR1lyYmlrc1lpa3NZeTA5WlR0aFBXRXVjMnhwWTJVb1ppazdabTl5S0dNbFBXVTdZUzVzWlc1bmRHZzhianNwWVM1d2RYTm9LREFwTzJZOVl6NCtQak03WVZ0bVBqNHlYVjQ5YXp3OFppVTBLamc3WVZ0dUxURmRYajB5TVRRM05EZ3pOalE0TzJadmNpaGlQVVFvWVN4aUtUc3pNaXBuTG14bGJtZDBhRHhvT3lsN1lUMWlXMndsWEc0MVhWdHNMelY4TUYwN1p5NXdkWE5vS0dFdVlpazdhV1lvTXpJcVp5NXNaVzVuZEdnK1BXZ3BZbkpsWVdzN1p5NXdkWE5vS0dFdVlTazdiQ3M5TVRzd1BUMDlOalFxYkNWbEppWkVLRzUxYkd3c1lpbDljbVYwZFhKdUlHZDlmV1ZzYzJVZ2RHaHliM2NnUlhKeWIzSW9YQ0pEYUc5elpXNGdVMGhCSUhaaGNtbGhiblFnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaRndpS1R0a1BVMG9ZU3huTEhncE8ydzlRU2hqS1R0MGFHbHpMbk5sZEVoTlFVTkxaWGs5Wm5WdVkzUnBiMjRvWVN4aUxHZ3BlM1poY2lCck8ybG1LQ0V3UFQwOVNTbDBhSEp2ZHlCRmNuSnZjaWhjSWtoTlFVTWdhMlY1SUdGc2NtVmhaSGtnYzJWMFhDSXBPMmxtS0NFd1BUMDllU2wwYUhKdmR5QkZjbkp2Y2loY0lrTmhibTV2ZENCelpYUWdTRTFCUXlCclpYa2dZV1owWlhJZ1kyRnNiR2x1WnlCMWNHUmhkR1ZjSWlrN2FXWW9JVEE5UFQxNktYUm9jbTkzSUVWeWNtOXlLRndpVTBoQlMwVWdhWE1nYm05MElITjFjSEJ2Y25SbFpDQm1iM0lnU0UxQlExd2lLVHRuUFNob2ZIeDdmU2t1Wlc1amIyUnBibWQ4ZkZ3aVZWUkdPRndpTzJJOVRTaGlMR2NzZUNrb1lTazdZVDFpTG1KcGJreGxianRpUFdJdWRtRnNkV1U3YXoxdFBqNCtNenRvUFdzdk5DMHhPMmxtS0dzOFlTODRLWHRtYjNJb1lqMTFLR0lzWVN3d0xFRW9ZeWtzWmlrN1lpNXNaVzVuZEdnOFBXZzdLV0l1Y0hWemFDZ3dLVHRjYm1KYmFGMG1QVFF5T1RRNU5qY3dOREI5Wld4elpTQnBaaWhyUG1Fdk9DbDdabTl5S0R0aUxteGxibWQwYUR3OWFEc3BZaTV3ZFhOb0tEQXBPMkpiYUYwbVBUUXlPVFE1Tmpjd05EQjlabTl5S0dFOU1EdGhQRDFvTzJFclBURXBkbHRoWFQxaVcyRmRYamt3T1RVeU1qUTROaXgzVzJGZFBXSmJZVjFlTVRVME9UVTFOamd5T0R0c1BYRW9kaXhzS1R0bFBXMDdTVDBoTUgwN2RHaHBjeTUxY0dSaGRHVTlablZ1WTNScGIyNG9ZU2w3ZG1GeUlHTXNZaXhyTEdZOU1DeG5QVzArUGo0MU8yTTlaQ2hoTEdnc2JpazdZVDFqTG1KcGJreGxianRpUFdNdWRtRnNkV1U3WXoxaFBqNCtOVHRtYjNJb2F6MHdPMnM4WXp0ckt6MW5LV1lyYlR3OVlTWW1LR3c5Y1NoaUxuTnNhV05sS0dzc2F5dG5LU3hzS1N4bUt6MXRLVHRsS3oxbU8yZzlZaTV6YkdsalpTaG1QajQrTlNrN2JqMWhKVzA3ZVQwaE1IMDdkR2hwY3k1blpYUklZWE5vUFdaMWJtTjBhVzl1S0dFc1lpbDdkbUZ5SUdzc1p5eGtMRzA3YVdZb0lUQTlQVDFKS1hSb2NtOTNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHTmhiR3dnWjJWMFNHRnphQ0JoWm5SbGNpQnpaWFIwYVc1bklFaE5RVU1nYTJWNVhDSXBPMlE5VGloaUtUdHBaaWdoTUQwOVBYb3BlMmxtS0MweFBUMDlaQzV6YUdGclpVeGxiaWwwYUhKdmR5QkZjbkp2Y2loY0luTm9ZV3RsVEdWdUlHMTFjM1FnWW1VZ2MzQmxZMmxtYVdWa0lHbHVJRzl3ZEdsdmJuTmNJaWs3WEc1bVBXUXVjMmhoYTJWTVpXNTljM2RwZEdOb0tHRXBlMk5oYzJVZ1hDSklSVmhjSWpwclBXWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQlBLR0VzWml4NExHUXBmVHRpY21WaGF6dGpZWE5sSUZ3aVFqWTBYQ0k2YXoxbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z1VDaGhMR1lzZUN4a0tYMDdZbkpsWVdzN1kyRnpaU0JjSWtKWlZFVlRYQ0k2YXoxbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z1VTaGhMR1lzZUNsOU8ySnlaV0ZyTzJOaGMyVWdYQ0pCVWxKQldVSlZSa1pGVWx3aU9uUnllWHRuUFc1bGR5QkJjbkpoZVVKMVptWmxjaWd3S1gxallYUmphQ2h3S1h0MGFISnZkeUJGY25KdmNpaGNJa0ZTVWtGWlFsVkdSa1ZTSUc1dmRDQnpkWEJ3YjNKMFpXUWdZbmtnZEdocGN5QmxiblpwY205dWJXVnVkRndpS1R0OWF6MW1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdVaWhoTEdZc2VDbDlPMkp5WldGck8yUmxabUYxYkhRNmRHaHliM2NnUlhKeWIzSW9YQ0ptYjNKdFlYUWdiWFZ6ZENCaVpTQklSVmdzSUVJMk5Dd2dRbGxVUlZNc0lHOXlJRUZTVWtGWlFsVkdSa1ZTWENJcE8zMXRQWFVvYUM1emJHbGpaU2dwTEc0c1pTeHlLR3dwTEdZcE8yWnZjaWhuUFRFN1p6eDBPMmNyUFRFcElUQTlQVDE2SmlZd0lUMDlaaVV6TWlZbUtHMWJiUzVzWlc1bmRHZ3RNVjBtUFRFMk56YzNNakUxUGo0K01qUXRaaVV6TWlrc2JUMTFLRzBzWml4Y2JqQXNRU2hqS1N4bUtUdHlaWFIxY200Z2F5aHRLWDA3ZEdocGN5NW5aWFJJVFVGRFBXWjFibU4wYVc5dUtHRXNZaWw3ZG1GeUlHc3NaeXhrTEhBN2FXWW9JVEU5UFQxSktYUm9jbTkzSUVWeWNtOXlLRndpUTJGdWJtOTBJR05oYkd3Z1oyVjBTRTFCUXlCM2FYUm9iM1YwSUdacGNuTjBJSE5sZEhScGJtY2dTRTFCUXlCclpYbGNJaWs3WkQxT0tHSXBPM04zYVhSamFDaGhLWHRqWVhObElGd2lTRVZZWENJNmF6MW1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdUeWhoTEdZc2VDeGtLWDA3WW5KbFlXczdZMkZ6WlNCY0lrSTJORndpT21zOVpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlGQW9ZU3htTEhnc1pDbDlPMkp5WldGck8yTmhjMlVnWENKQ1dWUkZVMXdpT21zOVpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlGRW9ZU3htTEhncGZUdGljbVZoYXp0allYTmxJRndpUVZKU1FWbENWVVpHUlZKY0lqcDBjbmw3YXoxdVpYY2dRWEp5WVhsQ2RXWm1aWElvTUNsOVkyRjBZMmdvZGlsN2RHaHliM2NnUlhKeWIzSW9YQ0pCVWxKQldVSlZSa1pGVWlCdWIzUWdjM1Z3Y0c5eWRHVmtJR0o1SUhSb2FYTWdaVzUyYVhKdmJtMWxiblJjSWlrN2ZXczlablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJRklvWVN4bUxIZ3BmVHRpY21WaGF6dGtaV1poZFd4ME9uUm9jbTkzSUVWeWNtOXlLRndpYjNWMGNIVjBSbTl5YldGMElHMTFjM1FnWW1VZ1NFVllMQ0JDTmpRc0lFSlpWRVZUTENCdmNpQkJVbEpCV1VKVlJrWkZVbHdpS1R0Y2JuMW5QWFVvYUM1emJHbGpaU2dwTEc0c1pTeHlLR3dwTEdZcE8zQTljU2gzTEVFb1l5a3BPM0E5ZFNobkxHWXNiU3h3TEdZcE8zSmxkSFZ5YmlCcktIQXBmWDFtZFc1amRHbHZiaUJpS0dNc1lTbDdkR2hwY3k1aFBXTTdkR2hwY3k1aVBXRjlablZ1WTNScGIyNGdUeWhqTEdFc1lpeGxLWHQyWVhJZ2FEMWNJbHdpTzJFdlBUZzdkbUZ5SUc0c1p5eGtPMlE5TFRFOVBUMWlQek02TUR0bWIzSW9iajB3TzI0OFlUdHVLejB4S1djOVkxdHVQajQrTWwwK1BqNDRLaWhrSzI0bE5DcGlLU3hvS3oxY0lqQXhNak0wTlRZM09EbGhZbU5rWldaY0lpNWphR0Z5UVhRb1p6NCtQalFtTVRVcEsxd2lNREV5TXpRMU5qYzRPV0ZpWTJSbFpsd2lMbU5vWVhKQmRDaG5KakUxS1R0eVpYUjFjbTRnWlM1dmRYUndkWFJWY0hCbGNqOW9MblJ2VlhCd1pYSkRZWE5sS0NrNmFIMW1kVzVqZEdsdmJpQlFLR01zWVN4aUxHVXBlM1poY2lCb1BWd2lYQ0lzYmoxaEx6Z3NaeXhrTEhBc1pqdG1QUzB4UFQwOVlqOHpPakE3Wm05eUtHYzlNRHRuUEc0N1p5czlNeWxtYjNJb1pEMW5LekU4Ymo5alcyY3JNVDQrUGpKZE9qQXNjRDFuS3pJOGJqOWpXMmNyTWo0K1BqSmRPakFzY0Qwb1kxdG5QajQrTWwwK1BqNDRLaWhtSzJjbE5DcGlLU1l5TlRVcFBEd3hObndvWkQ0K1BqZ3FLR1lyS0djck1Ta2xOQ3BpS1NZeU5UVXBQRHc0ZkhBK1BqNDRLaWhtSzF4dUtHY3JNaWtsTkNwaUtTWXlOVFVzWkQwd096UStaRHRrS3oweEtUZ3FaeXMyS21ROFBXRS9hQ3M5WENKQlFrTkVSVVpIU0VsS1MweE5UazlRVVZKVFZGVldWMWhaV21GaVkyUmxabWRvYVdwcmJHMXViM0J4Y25OMGRYWjNlSGw2TURFeU16UTFOamM0T1NzdlhDSXVZMmhoY2tGMEtIQStQajQyS2lnekxXUXBKall6S1Rwb0t6MWxMbUkyTkZCaFpEdHlaWFIxY200Z2FIMW1kVzVqZEdsdmJpQlJLR01zWVN4aUtYdDJZWElnWlQxY0lsd2lPMkV2UFRnN2RtRnlJR2dzWkN4bk8yYzlMVEU5UFQxaVB6TTZNRHRtYjNJb2FEMHdPMmc4WVR0b0t6MHhLV1E5WTF0b1BqNCtNbDArUGo0NEtpaG5LMmdsTkNwaUtTWXlOVFVzWlNzOVUzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTaGtLVHR5WlhSMWNtNGdaWDFtZFc1amRHbHZiaUJTS0dNc1lTeGlLWHRoTHowNE8zWmhjaUJsTEdnOWJtVjNJRUZ5Y21GNVFuVm1abVZ5S0dFcExHUXNaenRuUFc1bGR5QlZhVzUwT0VGeWNtRjVLR2dwTzJROUxURTlQVDFpUHpNNk1EdG1iM0lvWlQwd08yVThZVHRsS3oweEtXZGJaVjA5WTF0bFBqNCtNbDArUGo0NEtpaGtLMlVsTkNwaUtTWXlOVFU3Y21WMGRYSnVJR2g5Wm5WdVkzUnBiMjRnVGloaktYdDJZWElnWVQxN2IzVjBjSFYwVlhCd1pYSTZJVEVzWWpZMFVHRmtPbHdpUFZ3aUxITm9ZV3RsVEdWdU9pMHhmVHRqUFdOOGZIdDlPMXh1WVM1dmRYUndkWFJWY0hCbGNqMWpMbTkxZEhCMWRGVndjR1Z5Zkh3aE1Uc2hNRDA5UFdNdWFHRnpUM2R1VUhKdmNHVnlkSGtvWENKaU5qUlFZV1JjSWlrbUppaGhMbUkyTkZCaFpEMWpMbUkyTkZCaFpDazdhV1lvSVRBOVBUMWpMbWhoYzA5M2JsQnliM0JsY25SNUtGd2ljMmhoYTJWTVpXNWNJaWtwZTJsbUtEQWhQVDFqTG5Ob1lXdGxUR1Z1SlRncGRHaHliM2NnUlhKeWIzSW9YQ0p6YUdGclpVeGxiaUJ0ZFhOMElHSmxJR0VnYlhWc2RHbHdiR1VnYjJZZ09Gd2lLVHRoTG5Ob1lXdGxUR1Z1UFdNdWMyaGhhMlZNWlc1OWFXWW9YQ0ppYjI5c1pXRnVYQ0loUFQxMGVYQmxiMllnWVM1dmRYUndkWFJWY0hCbGNpbDBhSEp2ZHlCRmNuSnZjaWhjSWtsdWRtRnNhV1FnYjNWMGNIVjBWWEJ3WlhJZ1ptOXliV0YwZEdsdVp5QnZjSFJwYjI1Y0lpazdhV1lvWENKemRISnBibWRjSWlFOVBYUjVjR1Z2WmlCaExtSTJORkJoWkNsMGFISnZkeUJGY25KdmNpaGNJa2x1ZG1Gc2FXUWdZalkwVUdGa0lHWnZjbTFoZEhScGJtY2diM0IwYVc5dVhDSXBPM0psZEhWeWJpQmhmV1oxYm1OMGFXOXVJRTBvWXl4aExHSXBlM04zYVhSamFDaGhLWHRqWVhObElGd2lWVlJHT0Z3aU9tTmhjMlVnWENKVlZFWXhOa0pGWENJNlkyRnpaU0JjSWxWVVJqRTJURVZjSWpwaWNtVmhhenRrWldaaGRXeDBPblJvY205M0lFVnljbTl5S0Z3aVpXNWpiMlJwYm1jZ2JYVnpkQ0JpWlNCVlZFWTRMQ0JWVkVZeE5rSkZMQ0J2Y2lCVlZFWXhOa3hGWENJcE8xeHVmWE4zYVhSamFDaGpLWHRqWVhObElGd2lTRVZZWENJNll6MW1kVzVqZEdsdmJpaGhMR01zWkNsN2RtRnlJR2M5WVM1c1pXNW5kR2dzYkN4d0xHWXNiU3h4TEhVN2FXWW9NQ0U5UFdjbE1pbDBhSEp2ZHlCRmNuSnZjaWhjSWxOMGNtbHVaeUJ2WmlCSVJWZ2dkSGx3WlNCdGRYTjBJR0psSUdsdUlHSjVkR1VnYVc1amNtVnRaVzUwYzF3aUtUdGpQV044ZkZzd1hUdGtQV1I4ZkRBN2NUMWtQajQrTXp0MVBTMHhQVDA5WWo4ek9qQTdabTl5S0d3OU1EdHNQR2M3YkNzOU1pbDdjRDF3WVhKelpVbHVkQ2hoTG5OMVluTjBjaWhzTERJcExERTJLVHRwWmlocGMwNWhUaWh3S1NsMGFISnZkeUJGY25KdmNpaGNJbE4wY21sdVp5QnZaaUJJUlZnZ2RIbHdaU0JqYjI1MFlXbHVjeUJwYm5aaGJHbGtJR05vWVhKaFkzUmxjbk5jSWlrN2JUMG9iRDQrUGpFcEszRTdabTl5S0dZOWJUNCtQakk3WXk1c1pXNW5kR2c4UFdZN0tXTXVjSFZ6YUNnd0tUdGpXMlpkZkQxd1BEdzRLaWgxSzIwbE5DcGlLWDF5WlhSMWNtNTdkbUZzZFdVNll5eGlhVzVNWlc0Nk5DcG5LMlI5ZlR0aWNtVmhhenRqWVhObElGd2lWRVZZVkZ3aU9tTTlablZ1WTNScGIyNG9ZeXhvTEdRcGUzWmhjaUJuTEd3c2NEMHdMR1lzYlN4eExIVXNjaXgwTzJnOWFIeDhXekJkTzJROVpIeDhNRHR4UFdRK1BqNHpPMmxtS0Z3aVZWUkdPRndpUFQwOVlTbG1iM0lvZEQwdE1UMDlQVnh1WWo4ek9qQXNaajB3TzJZOFl5NXNaVzVuZEdnN1ppczlNU2xtYjNJb1p6MWpMbU5vWVhKRGIyUmxRWFFvWmlrc2JEMWJYU3d4TWpnK1p6OXNMbkIxYzJnb1p5azZNakEwT0Q1blB5aHNMbkIxYzJnb01Ua3lmR2MrUGo0MktTeHNMbkIxYzJnb01USTRmR2NtTmpNcEtUbzFOVEk1Tmo1bmZIdzFOek0wTkR3OVp6OXNMbkIxYzJnb01qSTBmR2MrUGo0eE1pd3hNamg4Wno0K1BqWW1Oak1zTVRJNGZHY21Oak1wT2lobUt6MHhMR2M5TmpVMU16WXJLQ2huSmpFd01qTXBQRHd4TUh4akxtTm9ZWEpEYjJSbFFYUW9aaWttTVRBeU15a3NiQzV3ZFhOb0tESTBNSHhuUGo0K01UZ3NNVEk0ZkdjK1BqNHhNaVkyTXl3eE1qaDhaejQrUGpZbU5qTXNNVEk0ZkdjbU5qTXBLU3h0UFRBN2JUeHNMbXhsYm1kMGFEdHRLejB4S1h0eVBYQXJjVHRtYjNJb2RUMXlQajQrTWp0b0xteGxibWQwYUR3OWRUc3BhQzV3ZFhOb0tEQXBPMmhiZFYxOFBXeGJiVjA4UERncUtIUXJjaVUwS21JcE8zQXJQVEY5Wld4elpTQnBaaWhjSWxWVVJqRTJRa1ZjSWowOVBXRjhmRndpVlZSR01UWk1SVndpUFQwOVlTbG1iM0lvZEQwdE1UMDlQV0kvTWpvd0xHdzlYQ0pWVkVZeE5reEZYQ0k5UFQxaEppWXhJVDA5WW54OFhDSlZWRVl4Tmt4RlhDSWhQVDFoSmlZeFBUMDlZaXhtUFRBN1pqeGpMbXhsYm1kMGFEdG1LejB4S1h0blBXTXVZMmhoY2tOdlpHVkJkQ2htS1R0Y2JpRXdQVDA5YkNZbUtHMDlaeVl5TlRVc1p6MXRQRHc0ZkdjK1BqNDRLVHR5UFhBcmNUdG1iM0lvZFQxeVBqNCtNanRvTG14bGJtZDBhRHc5ZFRzcGFDNXdkWE5vS0RBcE8yaGJkVjE4UFdjOFBEZ3FLSFFyY2lVMEttSXBPM0FyUFRKOWNtVjBkWEp1ZTNaaGJIVmxPbWdzWW1sdVRHVnVPamdxY0N0a2ZYMDdZbkpsWVdzN1kyRnpaU0JjSWtJMk5Gd2lPbU05Wm5WdVkzUnBiMjRvWVN4akxHUXBlM1poY2lCblBUQXNiQ3h3TEdZc2JTeHhMSFVzY2l4ME8ybG1LQzB4UFQwOVlTNXpaV0Z5WTJnb0wxNWJZUzE2UVMxYU1DMDVQU3RjWEM5ZEt5UXZLU2wwYUhKdmR5QkZjbkp2Y2loY0lrbHVkbUZzYVdRZ1kyaGhjbUZqZEdWeUlHbHVJR0poYzJVdE5qUWdjM1J5YVc1blhDSXBPM0E5WVM1cGJtUmxlRTltS0Z3aVBWd2lLVHRoUFdFdWNtVndiR0ZqWlNndlhGdzlMMmNzWENKY0lpazdhV1lvTFRFaFBUMXdKaVp3UEdFdWJHVnVaM1JvS1hSb2NtOTNJRVZ5Y205eUtGd2lTVzUyWVd4cFpDQW5QU2NnWm05MWJtUWdhVzRnWW1GelpTMDJOQ0J6ZEhKcGJtZGNJaWs3WXoxamZIeGJNRjA3WkQxa2ZId3dPM1U5WkQ0K1BqTTdkRDB0TVQwOVBXSS9Nem93TzJadmNpaHdQVEE3Y0R4aExteGxibWQwYUR0d0t6MDBLWHR4UFdFdWMzVmljM1J5S0hBc05DazdabTl5S0dZOWJUMHdPMlk4Y1M1c1pXNW5kR2c3WmlzOU1TbHNQVndpUVVKRFJFVkdSMGhKU2t0TVRVNVBVRkZTVTFSVlZsZFlXVnBoWW1Oa1pXWm5hR2xxYTJ4dGJtOXdjWEp6ZEhWMmQzaDVlakF4TWpNME5UWTNPRGtyTDF3aUxtbHVaR1Y0VDJZb2NWdG1YU2tzWEc1dGZEMXNQRHd4T0MwMkttWTdabTl5S0dZOU1EdG1QSEV1YkdWdVozUm9MVEU3WmlzOU1TbDdjajFuSzNVN1ptOXlLR3c5Y2o0K1BqSTdZeTVzWlc1bmRHZzhQV3c3S1dNdWNIVnphQ2d3S1R0alcyeGRmRDBvYlQ0K1BqRTJMVGdxWmlZeU5UVXBQRHc0S2loMEszSWxOQ3BpS1R0bkt6MHhmWDF5WlhSMWNtNTdkbUZzZFdVNll5eGlhVzVNWlc0Nk9DcG5LMlI5ZlR0aWNtVmhhenRqWVhObElGd2lRbGxVUlZOY0lqcGpQV1oxYm1OMGFXOXVLR0VzWXl4a0tYdDJZWElnWnl4c0xIQXNaaXh0TEhFN1l6MWpmSHhiTUYwN1pEMWtmSHd3TzNBOVpENCtQak03Y1QwdE1UMDlQV0kvTXpvd08yWnZjaWhzUFRBN2JEeGhMbXhsYm1kMGFEdHNLejB4S1djOVlTNWphR0Z5UTI5a1pVRjBLR3dwTEcwOWJDdHdMR1k5YlQ0K1BqSXNZeTVzWlc1bmRHZzhQV1ltSm1NdWNIVnphQ2d3S1N4alcyWmRmRDFuUER3NEtpaHhLMjBsTkNwaUtUdHlaWFIxY201N2RtRnNkV1U2WXl4aWFXNU1aVzQ2T0NwaExteGxibWQwYUN0a2ZYMDdZbkpsWVdzN1kyRnpaU0JjSWtGU1VrRlpRbFZHUmtWU1hDSTZkSEo1ZTJNOWJtVjNJRUZ5Y21GNVFuVm1abVZ5S0RBcGZXTmhkR05vS0dVcGUzUm9jbTkzSUVWeWNtOXlLRndpUVZKU1FWbENWVVpHUlZJZ2JtOTBJSE4xY0hCdmNuUmxaQ0JpZVNCMGFHbHpJR1Z1ZG1seWIyNXRaVzUwWENJcE8zMWpQVnh1Wm5WdVkzUnBiMjRvWVN4akxHUXBlM1poY2lCbkxHd3NjQ3htTEcwc2NUdGpQV044ZkZzd1hUdGtQV1I4ZkRBN2JEMWtQajQrTXp0dFBTMHhQVDA5WWo4ek9qQTdjVDF1WlhjZ1ZXbHVkRGhCY25KaGVTaGhLVHRtYjNJb1p6MHdPMmM4WVM1aWVYUmxUR1Z1WjNSb08yY3JQVEVwWmoxbksyd3NjRDFtUGo0K01peGpMbXhsYm1kMGFEdzljQ1ltWXk1d2RYTm9LREFwTEdOYmNGMThQWEZiWjEwOFBEZ3FLRzByWmlVMEttSXBPM0psZEhWeWJudDJZV3gxWlRwakxHSnBia3hsYmpvNEttRXVZbmwwWlV4bGJtZDBhQ3RrZlgwN1luSmxZV3M3WkdWbVlYVnNkRHAwYUhKdmR5QkZjbkp2Y2loY0ltWnZjbTFoZENCdGRYTjBJR0psSUVoRldDd2dWRVZZVkN3Z1FqWTBMQ0JDV1ZSRlV5d2diM0lnUVZKU1FWbENWVVpHUlZKY0lpazdmWEpsZEhWeWJpQmpmV1oxYm1OMGFXOXVJSGtvWXl4aEtYdHlaWFIxY200Z1l6dzhZWHhqUGo0K016SXRZWDFtZFc1amRHbHZiaUJUS0dNc1lTbDdjbVYwZFhKdUlETXlQR0UvS0dFdFBUTXlMRzVsZHlCaUtHTXVZanc4WVh4akxtRStQajR6TWkxaExHTXVZVHc4WVh4akxtSStQajR6TWkxaEtTazZNQ0U5UFdFL2JtVjNJR0lvWXk1aFBEeGhmR011WWo0K1BqTXlMV0VzWXk1aVBEeGhmR011WVQ0K1BqTXlMV0VwT21OOVpuVnVZM1JwYjI0Z2R5aGpMR0VwZTNKbGRIVnliaUJqUGo0K1hHNWhmR004UERNeUxXRjlablZ1WTNScGIyNGdkQ2hqTEdFcGUzWmhjaUJyUFc1MWJHd3NhejF1WlhjZ1lpaGpMbUVzWXk1aUtUdHlaWFIxY200Z2F6MHpNajQ5WVQ5dVpYY2dZaWhyTG1FK1BqNWhmR3N1WWp3OE16SXRZU1kwTWprME9UWTNNamsxTEdzdVlqNCtQbUY4YXk1aFBEd3pNaTFoSmpReU9UUTVOamN5T1RVcE9tNWxkeUJpS0dzdVlqNCtQbUV0TXpKOGF5NWhQRHcyTkMxaEpqUXlPVFE1TmpjeU9UVXNheTVoUGo0K1lTMHpNbnhyTG1JOFBEWTBMV0VtTkRJNU5EazJOekk1TlNsOVpuVnVZM1JwYjI0Z1ZDaGpMR0VwZTNaaGNpQnJQVzUxYkd3N2NtVjBkWEp1SUdzOU16SStQV0UvYm1WM0lHSW9ZeTVoUGo0K1lTeGpMbUkrUGo1aGZHTXVZVHc4TXpJdFlTWTBNamswT1RZM01qazFLVHB1WlhjZ1lpZ3dMR011WVQ0K1BtRXRNeklwZldaMWJtTjBhVzl1SUdGaEtHTXNZU3hpS1h0eVpYUjFjbTRnWXlaaFhuNWpKbUo5Wm5WdVkzUnBiMjRnWW1Fb1l5eGhMR3NwZTNKbGRIVnliaUJ1WlhjZ1lpaGpMbUVtWVM1aFhuNWpMbUVtYXk1aExHTXVZaVpoTG1KZWZtTXVZaVpyTG1JcGZXWjFibU4wYVc5dUlGVW9ZeXhoTEdJcGUzSmxkSFZ5YmlCakptRmVZeVppWG1FbVluMW1kVzVqZEdsdmJpQmpZU2hqTEdFc2F5bDdjbVYwZFhKdUlHNWxkeUJpS0dNdVlTWmhMbUZlWXk1aEptc3VZVjVoTG1FbVhHNXJMbUVzWXk1aUptRXVZbDVqTG1JbWF5NWlYbUV1WWlackxtSXBmV1oxYm1OMGFXOXVJR1JoS0dNcGUzSmxkSFZ5YmlCM0tHTXNNaWxlZHloakxERXpLVjUzS0dNc01qSXBmV1oxYm1OMGFXOXVJR1ZoS0dNcGUzWmhjaUJoUFhRb1l5d3lPQ2tzYXoxMEtHTXNNelFwTzJNOWRDaGpMRE01S1R0eVpYUjFjbTRnYm1WM0lHSW9ZUzVoWG1zdVlWNWpMbUVzWVM1aVhtc3VZbDVqTG1JcGZXWjFibU4wYVc5dUlHWmhLR01wZTNKbGRIVnliaUIzS0dNc05pbGVkeWhqTERFeEtWNTNLR01zTWpVcGZXWjFibU4wYVc5dUlHZGhLR01wZTNaaGNpQmhQWFFvWXl3eE5Da3NhejEwS0dNc01UZ3BPMk05ZENoakxEUXhLVHR5WlhSMWNtNGdibVYzSUdJb1lTNWhYbXN1WVY1akxtRXNZUzVpWG1zdVlsNWpMbUlwZldaMWJtTjBhVzl1SUdoaEtHTXBlM0psZEhWeWJpQjNLR01zTnlsZWR5aGpMREU0S1Y1alBqNCtNMzFtZFc1amRHbHZiaUJwWVNoaktYdDJZWElnWVQxMEtHTXNNU2tzYXoxMEtHTXNPQ2s3WXoxVUtHTXNOeWs3Y21WMGRYSnVJRzVsZHlCaUtHRXVZVjVyTG1GZVl5NWhMR0V1WWw1ckxtSmVZeTVpS1gxbWRXNWpkR2x2YmlCcVlTaGpLWHR5WlhSMWNtNGdkeWhqTERFM0tWNTNLR01zTVRrcFhtTStQajR4TUgxbWRXNWpkR2x2YmlCcllTaGpLWHQyWVhJZ1lUMTBLR01zTVRrcExHczlkQ2hqTERZeEtUdGNibU05VkNoakxEWXBPM0psZEhWeWJpQnVaWGNnWWloaExtRmVheTVoWG1NdVlTeGhMbUplYXk1aVhtTXVZaWw5Wm5WdVkzUnBiMjRnUnloakxHRXBlM1poY2lCaVBTaGpKalkxTlRNMUtTc29ZU1kyTlRVek5TazdjbVYwZFhKdUtDaGpQajQrTVRZcEt5aGhQajQrTVRZcEt5aGlQajQrTVRZcEpqWTFOVE0xS1R3OE1UWjhZaVkyTlRVek5YMW1kVzVqZEdsdmJpQnNZU2hqTEdFc1lpeGxLWHQyWVhJZ2FEMG9ZeVkyTlRVek5Ta3JLR0VtTmpVMU16VXBLeWhpSmpZMU5UTTFLU3NvWlNZMk5UVXpOU2s3Y21WMGRYSnVLQ2hqUGo0K01UWXBLeWhoUGo0K01UWXBLeWhpUGo0K01UWXBLeWhsUGo0K01UWXBLeWhvUGo0K01UWXBKalkxTlRNMUtUdzhNVFo4YUNZMk5UVXpOWDFtZFc1amRHbHZiaUJJS0dNc1lTeGlMR1VzYUNsN2RtRnlJR1E5S0dNbU5qVTFNelVwS3loaEpqWTFOVE0xS1Nzb1lpWTJOVFV6TlNrcktHVW1OalUxTXpVcEt5aG9KalkxTlRNMUtUdHlaWFIxY200b0tHTStQajR4TmlrcktHRStQajR4TmlrcktHSStQajR4TmlrcktHVStQajR4TmlrcktHZytQajR4TmlrcktHUStQajR4TmlrbU5qVTFNelVwUER3eE5ueGtKalkxTlRNMWZXWjFibU4wYVc5dUlHMWhLR01zWVNsN2RtRnlJR1FzWlN4b08yUTlLR011WWlZMk5UVXpOU2tyS0dFdVlpWTJOVFV6TlNrN1pUMG9ZeTVpUGo0K01UWXBLMXh1S0dFdVlqNCtQakUyS1Nzb1pENCtQakUyS1R0b1BTaGxKalkxTlRNMUtUdzhNVFo4WkNZMk5UVXpOVHRrUFNoakxtRW1OalUxTXpVcEt5aGhMbUVtTmpVMU16VXBLeWhsUGo0K01UWXBPMlU5S0dNdVlUNCtQakUyS1Nzb1lTNWhQajQrTVRZcEt5aGtQajQrTVRZcE8zSmxkSFZ5YmlCdVpYY2dZaWdvWlNZMk5UVXpOU2s4UERFMmZHUW1OalUxTXpVc2FDbDlablZ1WTNScGIyNGdibUVvWXl4aExHUXNaU2w3ZG1GeUlHZ3NiaXhuTzJnOUtHTXVZaVkyTlRVek5Ta3JLR0V1WWlZMk5UVXpOU2tyS0dRdVlpWTJOVFV6TlNrcktHVXVZaVkyTlRVek5TazdiajBvWXk1aVBqNCtNVFlwS3loaExtSStQajR4TmlrcktHUXVZajQrUGpFMktTc29aUzVpUGo0K01UWXBLeWhvUGo0K01UWXBPMmM5S0c0bU5qVTFNelVwUER3eE5ueG9KalkxTlRNMU8yZzlLR011WVNZMk5UVXpOU2tyS0dFdVlTWTJOVFV6TlNrcktHUXVZU1kyTlRVek5Ta3JLR1V1WVNZMk5UVXpOU2tyS0c0K1BqNHhOaWs3Ymowb1l5NWhQajQrTVRZcEt5aGhMbUUrUGo0eE5pa3JLR1F1WVQ0K1BqRTJLU3NvWlM1aFBqNCtNVFlwS3lob1BqNCtNVFlwTzNKbGRIVnliaUJ1WlhjZ1lpZ29iaVkyTlRVek5TazhQREUyZkdnbU5qVTFNelVzWnlsOVpuVnVZM1JwYjI0Z2IyRW9ZeXhoTEdRc1pTeG9LWHQyWVhJZ2JpeG5MR3c3Ymowb1l5NWlKbHh1TmpVMU16VXBLeWhoTG1JbU5qVTFNelVwS3loa0xtSW1OalUxTXpVcEt5aGxMbUltTmpVMU16VXBLeWhvTG1JbU5qVTFNelVwTzJjOUtHTXVZajQrUGpFMktTc29ZUzVpUGo0K01UWXBLeWhrTG1JK1BqNHhOaWtyS0dVdVlqNCtQakUyS1Nzb2FDNWlQajQrTVRZcEt5aHVQajQrTVRZcE8ydzlLR2NtTmpVMU16VXBQRHd4Tm54dUpqWTFOVE0xTzI0OUtHTXVZU1kyTlRVek5Ta3JLR0V1WVNZMk5UVXpOU2tyS0dRdVlTWTJOVFV6TlNrcktHVXVZU1kyTlRVek5Ta3JLR2d1WVNZMk5UVXpOU2tyS0djK1BqNHhOaWs3Wnowb1l5NWhQajQrTVRZcEt5aGhMbUUrUGo0eE5pa3JLR1F1WVQ0K1BqRTJLU3NvWlM1aFBqNCtNVFlwS3lob0xtRStQajR4TmlrcktHNCtQajR4TmlrN2NtVjBkWEp1SUc1bGR5QmlLQ2huSmpZMU5UTTFLVHc4TVRaOGJpWTJOVFV6TlN4c0tYMW1kVzVqZEdsdmJpQkNLR01zWVNsN2NtVjBkWEp1SUc1bGR5QmlLR011WVY1aExtRXNZeTVpWG1FdVlpbDlablZ1WTNScGIyNGdRU2hqS1h0MllYSWdZVDFiWFN4a08ybG1LRndpVTBoQkxURmNJajA5UFdNcFlUMWJNVGN6TWpVNE5ERTVNeXcwTURJek1qTXpOREUzTERJMU5qSXpPRE14TURJc01qY3hOek16T0RjNExETXlPRFV6TnpjMU1qQmRPMlZzYzJVZ2FXWW9NRDA5UFdNdWJHRnpkRWx1WkdWNFQyWW9YQ0pUU0VFdFhDSXNNQ2twYzNkcGRHTm9LR0U5WEc1Yk16SXpPRE0zTVRBek1pdzVNVFF4TlRBMk5qTXNPREV5TnpBeU9UazVMRFF4TkRRNU1USTJPVGNzTkRJNU1EYzNOVGcxTnl3eE56VXdOakF6TURJMUxERTJPVFF3TnpZNE16a3NNekl3TkRBM05UUXlPRjBzWkQxYk1UYzNPVEF6TXpjd015d3pNVFEwTVRNME1qYzNMREV3TVRNNU1EUXlORElzTWpjM016UTRNRGMyTWl3eE16VTVPRGt6TVRFNUxESTJNREE0TWpJNU1qUXNOVEk0TnpNME5qTTFMREUxTkRFME5Ua3lNalZkTEdNcGUyTmhjMlVnWENKVFNFRXRNakkwWENJNlluSmxZV3M3WTJGelpTQmNJbE5JUVMweU5UWmNJanBoUFdRN1luSmxZV3M3WTJGelpTQmNJbE5JUVMwek9EUmNJanBoUFZ0dVpYY2dZaWd6TkRFNE1EY3dNelkxTEdGYk1GMHBMRzVsZHlCaUtERTJOVFF5TnpBeU5UQXNZVnN4WFNrc2JtVjNJR0lvTWpRek9EVXlPVE0zTUN4aFd6SmRLU3h1WlhjZ1lpZ3pOVFUwTmpJek5qQXNZVnN6WFNrc2JtVjNJR0lvTVRjek1UUXdOVFF4TlN4aFd6UmRLU3h1WlhjZ1lpZzBNVEEwT0RnNE5UZzVOU3hoV3pWZEtTeHVaWGNnWWlnek5qYzFNREE0TlRJMUxHRmJObDBwTEc1bGR5QmlLREV5TURNd05qSTRNVE1zWVZzM1hTbGRPMkp5WldGck8yTmhjMlVnWENKVFNFRXROVEV5WENJNllUMWJibVYzSUdJb1pGc3dYU3cwTURnNU1qTTFOekl3S1N4dVpYY2dZaWhrV3pGZExESXlNamM0TnpNMU9UVXBMRnh1Ym1WM0lHSW9aRnN5WFN3ME1qY3hNVGMxTnpJektTeHVaWGNnWWloa1d6TmRMREUxT1RVM05UQXhNamtwTEc1bGR5QmlLR1JiTkYwc01qa3hOelUyTlRFek55a3NibVYzSUdJb1pGczFYU3czTWpVMU1URXhPVGtwTEc1bGR5QmlLR1JiTmwwc05ESXhOVE00T1RVME55a3NibVYzSUdJb1pGczNYU3d6TWpjd016TXlNRGtwWFR0aWNtVmhhenRrWldaaGRXeDBPblJvY205M0lFVnljbTl5S0Z3aVZXNXJibTkzYmlCVFNFRWdkbUZ5YVdGdWRGd2lLVHQ5Wld4elpTQnBaaWd3UFQwOVl5NXNZWE4wU1c1a1pYaFBaaWhjSWxOSVFUTXRYQ0lzTUNsOGZEQTlQVDFqTG14aGMzUkpibVJsZUU5bUtGd2lVMGhCUzBWY0lpd3dLU2xtYjNJb1l6MHdPelUrWXp0akt6MHhLV0ZiWTEwOVcyNWxkeUJpS0RBc01Da3NibVYzSUdJb01Dd3dLU3h1WlhjZ1lpZ3dMREFwTEc1bGR5QmlLREFzTUNrc2JtVjNJR0lvTUN3d0tWMDdaV3h6WlNCMGFISnZkeUJGY25KdmNpaGNJazV2SUZOSVFTQjJZWEpwWVc1MGN5QnpkWEJ3YjNKMFpXUmNJaWs3Y21WMGRYSnVJR0Y5Wm5WdVkzUnBiMjRnU3loakxHRXBlM1poY2lCaVBWdGRMR1VzWkN4dUxHY3NiQ3h3TEdZN1pUMWhXekJkTzJROVlWc3hYVHR1UFdGYk1sMDdaejFoV3pOZE8ydzlZVnMwWFR0bWIzSW9aajB3T3pnd1BtWTdaaXM5TVNsaVcyWmRQVEUyUG1ZL1kxdG1YVHA1S0dKYlppMWNiak5kWG1KYlppMDRYVjVpVzJZdE1UUmRYbUpiWmkweE5sMHNNU2tzY0QweU1ENW1QMGdvZVNobExEVXBMR1FtYmw1K1pDWm5MR3dzTVRVeE9EVXdNREkwT1N4aVcyWmRLVG8wTUQ1bVAwZ29lU2hsTERVcExHUmVibDVuTEd3c01UZzFPVGMzTlRNNU15eGlXMlpkS1RvMk1ENW1QMGdvZVNobExEVXBMRlVvWkN4dUxHY3BMR3dzTWpRd01EazFPVGN3T0N4aVcyWmRLVHBJS0hrb1pTdzFLU3hrWG01ZVp5eHNMRE16T1RVME5qazNPRElzWWx0bVhTa3NiRDFuTEdjOWJpeHVQWGtvWkN3ek1Da3NaRDFsTEdVOWNEdGhXekJkUFVjb1pTeGhXekJkS1R0aFd6RmRQVWNvWkN4aFd6RmRLVHRoV3pKZFBVY29iaXhoV3pKZEtUdGhXek5kUFVjb1p5eGhXek5kS1R0aFd6UmRQVWNvYkN4aFd6UmRLVHR5WlhSMWNtNGdZWDFtZFc1amRHbHZiaUJhS0dNc1lTeGlMR1VwZTNaaGNpQmtPMlp2Y2loa1BTaGhLelkxUGo0K09UdzhOQ2tyTVRVN1l5NXNaVzVuZEdnOFBXUTdLV011Y0hWemFDZ3dLVHRqVzJFK1BqNDFYWHc5TVRJNFBEd3lOQzFoSlRNeU8yRXJQV0k3WTF0a1hUMWhKalF5T1RRNU5qY3lPVFU3WTF0a0xURmRQV0V2TkRJNU5EazJOekk1Tm53d08yRTlZeTVzWlc1bmRHZzdabTl5S0dROU1EdGtQR0U3WkNzOU1UWXBaVDFMS0dNdWMyeHBZMlVvWkN4a0t6RTJLU3hsS1R0eVpYUjFjbTRnWlgxbWRXNWpkR2x2YmlCTUtHTXNYRzVoTEdzcGUzWmhjaUJsTEdnc2JpeG5MR3dzY0N4bUxHMHNjU3gxTEhJc2RDeDJMSGNzZVN4QkxIb3NlQ3hHTEVJc1F5eEVMRVU5VzEwc1NqdHBaaWhjSWxOSVFTMHlNalJjSWowOVBXdDhmRndpVTBoQkxUSTFObHdpUFQwOWF5bDFQVFkwTEhROU1TeEVQVTUxYldKbGNpeDJQVWNzZHoxc1lTeDVQVWdzUVQxb1lTeDZQV3BoTEhnOVpHRXNSajFtWVN4RFBWVXNRajFoWVN4S1BXUTdaV3h6WlNCcFppaGNJbE5JUVMwek9EUmNJajA5UFd0OGZGd2lVMGhCTFRVeE1sd2lQVDA5YXlsMVBUZ3dMSFE5TWl4RVBXSXNkajF0WVN4M1BXNWhMSGs5YjJFc1FUMXBZU3g2UFd0aExIZzlaV0VzUmoxbllTeERQV05oTEVJOVltRXNTajFXTzJWc2MyVWdkR2h5YjNjZ1JYSnliM0lvWENKVmJtVjRjR1ZqZEdWa0lHVnljbTl5SUdsdUlGTklRUzB5SUdsdGNHeGxiV1Z1ZEdGMGFXOXVYQ0lwTzJzOVlWc3dYVHRsUFdGYk1WMDdhRDFoV3pKZE8yNDlZVnN6WFR0blBXRmJORjA3YkQxaFd6VmRPM0E5WVZzMlhUdG1QV0ZiTjEwN1ptOXlLSEk5TUR0eVBIVTdjaXM5TVNreE5qNXlQeWh4UFhJcWRDeHRQV011YkdWdVozUm9QRDF4UHpBNlkxdHhYU3h4UFdNdWJHVnVaM1JvUEQxeEt6RS9NRHBqVzNFck1WMHNSVnR5WFQxdVpYY2dSQ2h0TEhFcEtUcEZXM0pkUFhjb2VpaEZXM0l0TWwwcExFVmJjaTAzWFN4QktFVmJjaTB4TlYwcExFVmJjaTFjYmpFMlhTa3NiVDE1S0dZc1JpaG5LU3hDS0djc2JDeHdLU3hLVzNKZExFVmJjbDBwTEhFOWRpaDRLR3NwTEVNb2F5eGxMR2dwS1N4bVBYQXNjRDFzTEd3OVp5eG5QWFlvYml4dEtTeHVQV2dzYUQxbExHVTlheXhyUFhZb2JTeHhLVHRoV3pCZFBYWW9heXhoV3pCZEtUdGhXekZkUFhZb1pTeGhXekZkS1R0aFd6SmRQWFlvYUN4aFd6SmRLVHRoV3pOZFBYWW9iaXhoV3pOZEtUdGhXelJkUFhZb1p5eGhXelJkS1R0aFd6VmRQWFlvYkN4aFd6VmRLVHRoV3paZFBYWW9jQ3hoV3paZEtUdGhXemRkUFhZb1ppeGhXemRkS1R0eVpYUjFjbTRnWVgxbWRXNWpkR2x2YmlCRUtHTXNZU2w3ZG1GeUlHUXNaU3hvTEc0c1p6MWJYU3hzUFZ0ZE8ybG1LRzUxYkd3aFBUMWpLV1p2Y2lobFBUQTdaVHhqTG14bGJtZDBhRHRsS3oweUtXRmJLR1UrUGo0eEtTVTFYVnNvWlQ0K1BqRXBMelY4TUYwOVFpaGhXeWhsUGo0K01Ta2xOVjFiS0dVK1BqNHhLUzgxZkRCZExHNWxkeUJpS0dOYlpTc3hYU3hqVzJWZEtTazdabTl5S0dROU1Ec3lORDVrTzJRclBURXBlMjQ5UVNoY0lsTklRVE10WENJcE8yWnZjaWhsUFRBN05UNWxPMlVyUFRFcGUyZzlZVnRsWFZzd1hUdDJZWElnY0QxaFcyVmRXekZkTEdZOVlWdGxYVnN5WFN4dFBXRmJaVjFiTTEwc2NUMWhXMlZkV3pSZE8yZGJaVjA5Ym1WM0lHSW9hQzVoWG5BdVlWNW1MbUZlWEc1dExtRmVjUzVoTEdndVlsNXdMbUplWmk1aVhtMHVZbDV4TG1JcGZXWnZjaWhsUFRBN05UNWxPMlVyUFRFcGJGdGxYVDFDS0dkYktHVXJOQ2tsTlYwc1V5aG5XeWhsS3pFcEpUVmRMREVwS1R0bWIzSW9aVDB3T3pVK1pUdGxLejB4S1dadmNpaG9QVEE3TlQ1b08yZ3JQVEVwWVZ0bFhWdG9YVDFDS0dGYlpWMWJhRjBzYkZ0bFhTazdabTl5S0dVOU1EczFQbVU3WlNzOU1TbG1iM0lvYUQwd096VSthRHRvS3oweEtXNWJhRjFiS0RJcVpTc3pLbWdwSlRWZFBWTW9ZVnRsWFZ0b1hTeFhXMlZkVzJoZEtUdG1iM0lvWlQwd096VStaVHRsS3oweEtXWnZjaWhvUFRBN05UNW9PMmdyUFRFcFlWdGxYVnRvWFQxQ0tHNWJaVjFiYUYwc2JtVjNJR0lvZm01YktHVXJNU2tsTlYxYmFGMHVZU1p1V3lobEt6SXBKVFZkVzJoZExtRXNmbTViS0dVck1Ta2xOVjFiYUYwdVlpWnVXeWhsS3pJcEpUVmRXMmhkTG1JcEtUdGhXekJkV3pCZFBVSW9ZVnN3WFZzd1hTeFlXMlJkS1gxeVpYUjFjbTRnWVgxMllYSWdaQ3hXTEZjc1dEdGtQVnN4TVRFMk16VXlOREE0TERFNE9UazBORGMwTkRFc016QTBPVE15TXpRM01Td3pPVEl4TURBNU5UY3pMRGsyTVRrNE56RTJNeXd4TlRBNE9UY3dPVGt6TERJME5UTTJNelUzTkRnc01qZzNNRGMyTXpJeU1Td3pOakkwTXpneE1EZ3dMRE14TURVNU9EUXdNU3cyTURjeU1qVXlOemdzWEc0eE5ESTJPRGd4T1RnM0xERTVNalV3Tnpnek9EZ3NNakUyTWpBM09ESXdOaXd5TmpFME9EZzRNVEF6TERNeU5EZ3lNakkxT0RBc016Z3pOVE01TURRd01TdzBNREl5TWpJME56YzBMREkyTkRNME56QTNPQ3cyTURRNE1EYzJNamdzTnpjd01qVTFPVGd6TERFeU5Ea3hOVEF4TWpJc01UVTFOVEE0TVRZNU1pd3hPVGsyTURZME9UZzJMREkxTlRReU1qQTRPRElzTWpneU1UZ3pORE0wT1N3eU9UVXlPVGsyT0RBNExETXlNVEF6TVRNMk56RXNNek16TmpVM01UZzVNU3d6TlRnME5USTROekV4TERFeE16a3lOams1TXl3ek16Z3lOREU0T1RVc05qWTJNekEzTWpBMUxEYzNNelV5T1RreE1pd3hNamswTnpVM016Y3lMREV6T1RZeE9ESXlPVEVzTVRZNU5URTRNemN3TUN3eE9UZzJOall4TURVeExESXhOemN3TWpZek5UQXNNalExTmprMU5qQXpOeXd5TnpNd05EZzFPVEl4TERJNE1qQXpNREkwTVRFc016STFPVGN6TURnd01Dd3pNelExTnpZME56Y3hMRE0xTVRZd05qVTRNVGNzTXpZd01ETTFNamd3TkN3ME1EazBOVGN4T1RBNUxESTNOVFF5TXpNME5DdzBNekF5TWpjM016UXNOVEEyT1RRNE5qRTJMRFkxT1RBMk1EVTFOaXc0T0RNNU9UYzROemNzT1RVNE1UTTVOVGN4TERFek1qSTRNakl5TVRnc01UVXpOekF3TWpBMk15d3hOelEzT0Rjek56YzVMREU1TlRVMU5qSXlNaklzTWpBeU5ERXdORGd4TlN4Y2JqSXlNamMzTXpBME5USXNNak0yTVRnMU1qUXlOQ3d5TkRJNE5ETTJORGMwTERJM05UWTNNelF4T0Rjc016SXdOREF6TVRRM09Td3pNekk1TXpJMU1qazRYVHRXUFZ0dVpYY2dZaWhrV3pCZExETTJNRGszTmpjME5UZ3BMRzVsZHlCaUtHUmJNVjBzTmpBeU9Ea3hOekkxS1N4dVpYY2dZaWhrV3pKZExETTVOalEwT0RRek9Ua3BMRzVsZHlCaUtHUmJNMTBzTWpFM016STVOVFUwT0Nrc2JtVjNJR0lvWkZzMFhTdzBNRGd4TmpJNE5EY3lLU3h1WlhjZ1lpaGtXelZkTERNd05UTTRNelF5TmpVcExHNWxkeUJpS0dSYk5sMHNNamt6TnpZM01UVTNPU2tzYm1WM0lHSW9aRnMzWFN3ek5qWTBOakE1TlRZd0tTeHVaWGNnWWloa1d6aGRMREkzTXpRNE9ETXpPVFFwTEc1bGR5QmlLR1JiT1Ywc01URTJORGs1TmpVME1pa3NibVYzSUdJb1pGc3hNRjBzTVRNeU16WXhNRGMyTkNrc2JtVjNJR0lvWkZzeE1WMHNNelU1TURNd05EazVOQ2tzYm1WM0lHSW9aRnN4TWwwc05EQTJPREU0TWpNNE15a3NibVYzSUdJb1pGc3hNMTBzT1RreE16TTJNVEV6S1N4dVpYY2dZaWhrV3pFMFhTdzJNek00TURNek1UY3BMRzVsZHlCaUtHUmJNVFZkTERNME56azNOelE0TmpncExHNWxkeUJpS0dSYk1UWmRMREkyTmpZMk1UTTBOVGdwTEc1bGR5QmlLR1JiTVRkZExEazBORGN4TVRFek9Ta3NibVYzSUdJb1pGc3hPRjBzTWpNME1USTJNamMzTXlrc1hHNXVaWGNnWWloa1d6RTVYU3d5TURBM09EQXdPVE16S1N4dVpYY2dZaWhrV3pJd1hTd3hORGsxT1Rrd09UQXhLU3h1WlhjZ1lpaGtXekl4WFN3eE9EVTJORE14TWpNMUtTeHVaWGNnWWloa1d6SXlYU3d6TVRjMU1qRTRNVE15S1N4dVpYY2dZaWhrV3pJelhTd3lNVGs0T1RVd09ETTNLU3h1WlhjZ1lpaGtXekkwWFN3ek9UazVOekU1TXpNNUtTeHVaWGNnWWloa1d6STFYU3czTmpZM09EUXdNVFlwTEc1bGR5QmlLR1JiTWpaZExESTFOalkxT1RRNE56a3BMRzVsZHlCaUtHUmJNamRkTERNeU1ETXpNemM1TlRZcExHNWxkeUJpS0dSYk1qaGRMREV3TXpRME5UY3dNallwTEc1bGR5QmlLR1JiTWpsZExESTBOalk1TkRnNU1ERXBMRzVsZHlCaUtHUmJNekJkTERNM05UZ3pNall6T0RNcExHNWxkeUJpS0dSYk16RmRMREUyT0RjeE56a3pOaWtzYm1WM0lHSW9aRnN6TWwwc01URTRPREUzT1RrMk5Da3NibVYzSUdJb1pGc3pNMTBzTVRVME5qQTBOVGN6TkNrc2JtVjNJR0lvWkZzek5GMHNNVFV5TWpnd05UUTROU2tzYm1WM0lHSW9aRnN6TlYwc01qWTBNemd6TXpneU15a3NibVYzSUdJb1pGc3pObDBzTWpNME16VXlOek01TUNrc2JtVjNJR0lvWkZzek4xMHNNVEF4TkRRM056UTRNQ2tzYm1WM0lHSW9aRnN6T0Ywc01USXdOamMxT1RFME1pa3NibVYzSUdJb1pGc3pPVjBzTXpRME1EYzNOakkzS1N4Y2JtNWxkeUJpS0dSYk5EQmRMREV5T1RBNE5qTTBOakFwTEc1bGR5QmlLR1JiTkRGZExETXhOVGcwTlRReU56TXBMRzVsZHlCaUtHUmJOREpkTERNMU1EVTVOVEkyTlRjcExHNWxkeUJpS0dSYk5ETmRMREV3TmpJeE56QXdPQ2tzYm1WM0lHSW9aRnMwTkYwc016WXdOakF3T0RNME5Da3NibVYzSUdJb1pGczBOVjBzTVRRek1qY3lOVGMzTmlrc2JtVjNJR0lvWkZzME5sMHNNVFEyTnpBek1UVTVOQ2tzYm1WM0lHSW9aRnMwTjEwc09EVXhNVFk1TnpJd0tTeHVaWGNnWWloa1d6UTRYU3d6TVRBd09ESXpOelV5S1N4dVpYY2dZaWhrV3pRNVhTd3hNell6TWpVNE1UazFLU3h1WlhjZ1lpaGtXelV3WFN3ek56VXdOamcxTlRrektTeHVaWGNnWWloa1d6VXhYU3d6TnpnMU1EVXdNamd3S1N4dVpYY2dZaWhrV3pVeVhTd3pNekU0TXpBM05ESTNLU3h1WlhjZ1lpaGtXelV6WFN3ek9ERXlOekl6TkRBektTeHVaWGNnWWloa1d6VTBYU3d5TURBek1ETTBPVGsxS1N4dVpYY2dZaWhrV3pVMVhTd3pOakF5TURNMk9EazVLU3h1WlhjZ1lpaGtXelUyWFN3eE5UYzFPVGt3TURFeUtTeHVaWGNnWWloa1d6VTNYU3d4TVRJMU5Ua3lPVEk0S1N4dVpYY2dZaWhrV3pVNFhTd3lOekUyT1RBME16QTJLU3h1WlhjZ1lpaGtXelU1WFN3ME5ESTNOell3TkRRcExHNWxkeUJpS0dSYk5qQmRMRFU1TXpZNU9ETTBOQ2tzYm1WM0lHSW9aRnMyTVYwc1hHNHpOek16TVRFd01qUTVLU3h1WlhjZ1lpaGtXell5WFN3eU9UazVNelV4TlRjektTeHVaWGNnWWloa1d6WXpYU3d6T0RFMU9USXdOREkzS1N4dVpYY2dZaWd6TXpreE5UWTVOakUwTERNNU1qZ3pPRE01TURBcExHNWxkeUJpS0RNMU1UVXlOamN5TnpFc05UWTJNamd3TnpFeEtTeHVaWGNnWWlnek9UUXdNVGczTmpBMkxETTBOVFF3TmprMU16UXBMRzVsZHlCaUtEUXhNVGcyTXpBeU56RXNOREF3TURJek9UazVNaWtzYm1WM0lHSW9NVEUyTkRFNE5EYzBMREU1TVRReE16ZzFOVFFwTEc1bGR5QmlLREUzTkRJNU1qUXlNU3d5TnpNeE1EVTFNamN3S1N4dVpYY2dZaWd5T0Rrek9EQXpOVFlzTXpJd016azVNekF3Tmlrc2JtVjNJR0lvTkRZd016a3pNalk1TERNeU1EWXlNRE14TlNrc2JtVjNJR0lvTmpnMU5EY3hOek16TERVNE56UTVOamd6Tmlrc2JtVjNJR0lvT0RVeU1UUXlPVGN4TERFd09EWTNPVEk0TlRFcExHNWxkeUJpS0RFd01UY3dNell5T1Rnc016WTFOVFF6TVRBd0tTeHVaWGNnWWlneE1USTJNREF3TlRnd0xESTJNVGd5T1RjMk56WXBMRzVsZHlCaUtERXlPRGd3TXpNME56QXNNelF3T1RnMU5URTFPQ2tzYm1WM0lHSW9NVFV3TVRVd05UazBPQ3cwTWpNME5UQTVPRFkyS1N4dVpYY2dZaWd4TmpBM01UWTNPVEUxTERrNE56RTJOelEyT0Nrc2JtVjNJR0lvTVRneE5qUXdNak14Tml4Y2JqRXlORFl4T0RrMU9URXBYVHRZUFZ0dVpYY2dZaWd3TERFcExHNWxkeUJpS0RBc016STRPVGdwTEc1bGR5QmlLREl4TkRjME9ETTJORGdzTXpJNU1EWXBMRzVsZHlCaUtESXhORGMwT0RNMk5EZ3NNakUwTnpVeE5qUXhOaWtzYm1WM0lHSW9NQ3d6TWprd055a3NibVYzSUdJb01Dd3lNVFEzTkRnek5qUTVLU3h1WlhjZ1lpZ3lNVFEzTkRnek5qUTRMREl4TkRjMU1UWTFORFVwTEc1bGR5QmlLREl4TkRjME9ETTJORGdzTXpJM056Y3BMRzVsZHlCaUtEQXNNVE00S1N4dVpYY2dZaWd3TERFek5pa3NibVYzSUdJb01Dd3lNVFEzTlRFMk5ESTFLU3h1WlhjZ1lpZ3dMREl4TkRjME9ETTJOVGdwTEc1bGR5QmlLREFzTWpFME56VXhOalUxTlNrc2JtVjNJR0lvTWpFME56UTRNelkwT0N3eE16a3BMRzVsZHlCaUtESXhORGMwT0RNMk5EZ3NNekk1TURVcExHNWxkeUJpS0RJeE5EYzBPRE0yTkRnc016STNOekVwTEc1bGR5QmlLREl4TkRjME9ETTJORGdzTXpJM056QXBMRzVsZHlCaUtESXhORGMwT0RNMk5EZ3NNVEk0S1N4dVpYY2dZaWd3TERNeU56YzRLU3h1WlhjZ1lpZ3lNVFEzTkRnek5qUTRMREl4TkRjME9ETTJOVGdwTEc1bGR5QmlLREl4TkRjME9ETTJORGdzTWpFME56VXhOalUwTlNrc2JtVjNJR0lvTWpFME56UTRNelkwT0N3ek1qZzVOaWtzYm1WM0lHSW9NQ3d5TVRRM05EZ3pOalE1S1N4Y2JtNWxkeUJpS0RJeE5EYzBPRE0yTkRnc01qRTBOelV4TmpReU5DbGRPMWM5VzFzd0xETTJMRE1zTkRFc01UaGRMRnN4TERRMExERXdMRFExTERKZExGczJNaXcyTERRekxERTFMRFl4WFN4Yk1qZ3NOVFVzTWpVc01qRXNOVFpkTEZzeU55d3lNQ3d6T1N3NExERTBYVjA3WENKbWRXNWpkR2x2Ymx3aVBUMDlkSGx3Wlc5bUlHUmxabWx1WlNZbVpHVm1hVzVsTG1GdFpEOWtaV1pwYm1Vb1puVnVZM1JwYjI0b0tYdHlaWFIxY200Z1EzMHBPbHdpZFc1a1pXWnBibVZrWENJaFBUMTBlWEJsYjJZZ1pYaHdiM0owY3o4b1hDSjFibVJsWm1sdVpXUmNJaUU5UFhSNWNHVnZaaUJ0YjJSMWJHVW1KbTF2WkhWc1pTNWxlSEJ2Y25SekppWW9iVzlrZFd4bExtVjRjRzl5ZEhNOVF5a3NaWGh3YjNKMGN6MURLVHBaTG1welUwaEJQVU45S1NoMGFHbHpLVHRjYmlJc0lpOHFLbHh1SUNvZ1EyOXdlWEpwWjJoMElDaGpLU0F5TURFMExYQnlaWE5sYm5Rc0lFWmhZMlZpYjI5ckxDQkpibU11WEc0Z0tseHVJQ29nVkdocGN5QnpiM1Z5WTJVZ1kyOWtaU0JwY3lCc2FXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1RVbFVJR3hwWTJWdWMyVWdabTkxYm1RZ2FXNGdkR2hsWEc0Z0tpQk1TVU5GVGxORklHWnBiR1VnYVc0Z2RHaGxJSEp2YjNRZ1pHbHlaV04wYjNKNUlHOW1JSFJvYVhNZ2MyOTFjbU5sSUhSeVpXVXVYRzRnS2k5Y2JseHVkbUZ5SUhKMWJuUnBiV1VnUFNBb1puVnVZM1JwYjI0Z0tHVjRjRzl5ZEhNcElIdGNiaUFnWENKMWMyVWdjM1J5YVdOMFhDSTdYRzVjYmlBZ2RtRnlJRTl3SUQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlR0Y2JpQWdkbUZ5SUdoaGMwOTNiaUE5SUU5d0xtaGhjMDkzYmxCeWIzQmxjblI1TzF4dUlDQjJZWElnZFc1a1pXWnBibVZrT3lBdkx5Qk5iM0psSUdOdmJYQnlaWE56YVdKc1pTQjBhR0Z1SUhadmFXUWdNQzVjYmlBZ2RtRnlJQ1JUZVcxaWIyd2dQU0IwZVhCbGIyWWdVM2x0WW05c0lEMDlQU0JjSW1aMWJtTjBhVzl1WENJZ1B5QlRlVzFpYjJ3Z09pQjdmVHRjYmlBZ2RtRnlJR2wwWlhKaGRHOXlVM2x0WW05c0lEMGdKRk41YldKdmJDNXBkR1Z5WVhSdmNpQjhmQ0JjSWtCQWFYUmxjbUYwYjNKY0lqdGNiaUFnZG1GeUlHRnplVzVqU1hSbGNtRjBiM0pUZVcxaWIyd2dQU0FrVTNsdFltOXNMbUZ6ZVc1alNYUmxjbUYwYjNJZ2ZId2dYQ0pBUUdGemVXNWpTWFJsY21GMGIzSmNJanRjYmlBZ2RtRnlJSFJ2VTNSeWFXNW5WR0ZuVTNsdFltOXNJRDBnSkZONWJXSnZiQzUwYjFOMGNtbHVaMVJoWnlCOGZDQmNJa0JBZEc5VGRISnBibWRVWVdkY0lqdGNibHh1SUNCbWRXNWpkR2x2YmlCM2NtRndLR2x1Ym1WeVJtNHNJRzkxZEdWeVJtNHNJSE5sYkdZc0lIUnllVXh2WTNOTWFYTjBLU0I3WEc0Z0lDQWdMeThnU1dZZ2IzVjBaWEpHYmlCd2NtOTJhV1JsWkNCaGJtUWdiM1YwWlhKR2JpNXdjbTkwYjNSNWNHVWdhWE1nWVNCSFpXNWxjbUYwYjNJc0lIUm9aVzRnYjNWMFpYSkdiaTV3Y205MGIzUjVjR1VnYVc1emRHRnVZMlZ2WmlCSFpXNWxjbUYwYjNJdVhHNGdJQ0FnZG1GeUlIQnliM1J2UjJWdVpYSmhkRzl5SUQwZ2IzVjBaWEpHYmlBbUppQnZkWFJsY2tadUxuQnliM1J2ZEhsd1pTQnBibk4wWVc1alpXOW1JRWRsYm1WeVlYUnZjaUEvSUc5MWRHVnlSbTRnT2lCSFpXNWxjbUYwYjNJN1hHNGdJQ0FnZG1GeUlHZGxibVZ5WVhSdmNpQTlJRTlpYW1WamRDNWpjbVZoZEdVb2NISnZkRzlIWlc1bGNtRjBiM0l1Y0hKdmRHOTBlWEJsS1R0Y2JpQWdJQ0IyWVhJZ1kyOXVkR1Y0ZENBOUlHNWxkeUJEYjI1MFpYaDBLSFJ5ZVV4dlkzTk1hWE4wSUh4OElGdGRLVHRjYmx4dUlDQWdJQzh2SUZSb1pTQXVYMmx1ZG05clpTQnRaWFJvYjJRZ2RXNXBabWxsY3lCMGFHVWdhVzF3YkdWdFpXNTBZWFJwYjI1eklHOW1JSFJvWlNBdWJtVjRkQ3hjYmlBZ0lDQXZMeUF1ZEdoeWIzY3NJR0Z1WkNBdWNtVjBkWEp1SUcxbGRHaHZaSE11WEc0Z0lDQWdaMlZ1WlhKaGRHOXlMbDlwYm5admEyVWdQU0J0WVd0bFNXNTJiMnRsVFdWMGFHOWtLR2x1Ym1WeVJtNHNJSE5sYkdZc0lHTnZiblJsZUhRcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUdkbGJtVnlZWFJ2Y2p0Y2JpQWdmVnh1SUNCbGVIQnZjblJ6TG5keVlYQWdQU0IzY21Gd08xeHVYRzRnSUM4dklGUnllUzlqWVhSamFDQm9aV3h3WlhJZ2RHOGdiV2x1YVcxcGVtVWdaR1Z2Y0hScGJXbDZZWFJwYjI1ekxpQlNaWFIxY201eklHRWdZMjl0Y0d4bGRHbHZibHh1SUNBdkx5QnlaV052Y21RZ2JHbHJaU0JqYjI1MFpYaDBMblJ5ZVVWdWRISnBaWE5iYVYwdVkyOXRjR3hsZEdsdmJpNGdWR2hwY3lCcGJuUmxjbVpoWTJVZ1kyOTFiR1JjYmlBZ0x5OGdhR0YyWlNCaVpXVnVJQ2hoYm1RZ2QyRnpJSEJ5WlhacGIzVnpiSGtwSUdSbGMybG5ibVZrSUhSdklIUmhhMlVnWVNCamJHOXpkWEpsSUhSdklHSmxYRzRnSUM4dklHbHVkbTlyWldRZ2QybDBhRzkxZENCaGNtZDFiV1Z1ZEhNc0lHSjFkQ0JwYmlCaGJHd2dkR2hsSUdOaGMyVnpJSGRsSUdOaGNtVWdZV0p2ZFhRZ2QyVmNiaUFnTHk4Z1lXeHlaV0ZrZVNCb1lYWmxJR0Z1SUdWNGFYTjBhVzVuSUcxbGRHaHZaQ0IzWlNCM1lXNTBJSFJ2SUdOaGJHd3NJSE52SUhSb1pYSmxKM01nYm04Z2JtVmxaRnh1SUNBdkx5QjBieUJqY21WaGRHVWdZU0J1WlhjZ1puVnVZM1JwYjI0Z2IySnFaV04wTGlCWFpTQmpZVzRnWlhabGJpQm5aWFFnWVhkaGVTQjNhWFJvSUdGemMzVnRhVzVuWEc0Z0lDOHZJSFJvWlNCdFpYUm9iMlFnZEdGclpYTWdaWGhoWTNSc2VTQnZibVVnWVhKbmRXMWxiblFzSUhOcGJtTmxJSFJvWVhRZ2FHRndjR1Z1Y3lCMGJ5QmlaU0IwY25WbFhHNGdJQzh2SUdsdUlHVjJaWEo1SUdOaGMyVXNJSE52SUhkbElHUnZiaWQwSUdoaGRtVWdkRzhnZEc5MVkyZ2dkR2hsSUdGeVozVnRaVzUwY3lCdlltcGxZM1F1SUZSb1pWeHVJQ0F2THlCdmJteDVJR0ZrWkdsMGFXOXVZV3dnWVd4c2IyTmhkR2x2YmlCeVpYRjFhWEpsWkNCcGN5QjBhR1VnWTI5dGNHeGxkR2x2YmlCeVpXTnZjbVFzSUhkb2FXTm9YRzRnSUM4dklHaGhjeUJoSUhOMFlXSnNaU0J6YUdGd1pTQmhibVFnYzI4Z2FHOXdaV1oxYkd4NUlITm9iM1ZzWkNCaVpTQmphR1ZoY0NCMGJ5QmhiR3h2WTJGMFpTNWNiaUFnWm5WdVkzUnBiMjRnZEhKNVEyRjBZMmdvWm00c0lHOWlhaXdnWVhKbktTQjdYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjdJSFI1Y0dVNklGd2libTl5YldGc1hDSXNJR0Z5WnpvZ1ptNHVZMkZzYkNodlltb3NJR0Z5WnlrZ2ZUdGNiaUFnSUNCOUlHTmhkR05vSUNobGNuSXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjdJSFI1Y0dVNklGd2lkR2h5YjNkY0lpd2dZWEpuT2lCbGNuSWdmVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0IyWVhJZ1IyVnVVM1JoZEdWVGRYTndaVzVrWldSVGRHRnlkQ0E5SUZ3aWMzVnpjR1Z1WkdWa1UzUmhjblJjSWp0Y2JpQWdkbUZ5SUVkbGJsTjBZWFJsVTNWemNHVnVaR1ZrV1dsbGJHUWdQU0JjSW5OMWMzQmxibVJsWkZscFpXeGtYQ0k3WEc0Z0lIWmhjaUJIWlc1VGRHRjBaVVY0WldOMWRHbHVaeUE5SUZ3aVpYaGxZM1YwYVc1blhDSTdYRzRnSUhaaGNpQkhaVzVUZEdGMFpVTnZiWEJzWlhSbFpDQTlJRndpWTI5dGNHeGxkR1ZrWENJN1hHNWNiaUFnTHk4Z1VtVjBkWEp1YVc1bklIUm9hWE1nYjJKcVpXTjBJR1p5YjIwZ2RHaGxJR2x1Ym1WeVJtNGdhR0Z6SUhSb1pTQnpZVzFsSUdWbVptVmpkQ0JoYzF4dUlDQXZMeUJpY21WaGEybHVaeUJ2ZFhRZ2IyWWdkR2hsSUdScGMzQmhkR05vSUhOM2FYUmphQ0J6ZEdGMFpXMWxiblF1WEc0Z0lIWmhjaUJEYjI1MGFXNTFaVk5sYm5ScGJtVnNJRDBnZTMwN1hHNWNiaUFnTHk4Z1JIVnRiWGtnWTI5dWMzUnlkV04wYjNJZ1puVnVZM1JwYjI1eklIUm9ZWFFnZDJVZ2RYTmxJR0Z6SUhSb1pTQXVZMjl1YzNSeWRXTjBiM0lnWVc1a1hHNGdJQzh2SUM1amIyNXpkSEoxWTNSdmNpNXdjbTkwYjNSNWNHVWdjSEp2Y0dWeWRHbGxjeUJtYjNJZ1puVnVZM1JwYjI1eklIUm9ZWFFnY21WMGRYSnVJRWRsYm1WeVlYUnZjbHh1SUNBdkx5QnZZbXBsWTNSekxpQkdiM0lnWm5Wc2JDQnpjR1ZqSUdOdmJYQnNhV0Z1WTJVc0lIbHZkU0J0WVhrZ2QybHphQ0IwYnlCamIyNW1hV2QxY21VZ2VXOTFjbHh1SUNBdkx5QnRhVzVwWm1sbGNpQnViM1FnZEc4Z2JXRnVaMnhsSUhSb1pTQnVZVzFsY3lCdlppQjBhR1Z6WlNCMGQyOGdablZ1WTNScGIyNXpMbHh1SUNCbWRXNWpkR2x2YmlCSFpXNWxjbUYwYjNJb0tTQjdmVnh1SUNCbWRXNWpkR2x2YmlCSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmlncElIdDlYRzRnSUdaMWJtTjBhVzl1SUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1VUhKdmRHOTBlWEJsS0NrZ2UzMWNibHh1SUNBdkx5QlVhR2x6SUdseklHRWdjRzlzZVdacGJHd2dabTl5SUNWSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNVZ1ptOXlJR1Z1ZG1seWIyNXRaVzUwY3lCMGFHRjBYRzRnSUM4dklHUnZiaWQwSUc1aGRHbDJaV3g1SUhOMWNIQnZjblFnYVhRdVhHNGdJSFpoY2lCSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNBOUlIdDlPMXh1SUNCSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlZ0cGRHVnlZWFJ2Y2xONWJXSnZiRjBnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUgwN1hHNWNiaUFnZG1GeUlHZGxkRkJ5YjNSdklEMGdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltTzF4dUlDQjJZWElnVG1GMGFYWmxTWFJsY21GMGIzSlFjbTkwYjNSNWNHVWdQU0JuWlhSUWNtOTBieUFtSmlCblpYUlFjbTkwYnloblpYUlFjbTkwYnloMllXeDFaWE1vVzEwcEtTazdYRzRnSUdsbUlDaE9ZWFJwZG1WSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNBbUpseHVJQ0FnSUNBZ1RtRjBhWFpsU1hSbGNtRjBiM0pRY205MGIzUjVjR1VnSVQwOUlFOXdJQ1ltWEc0Z0lDQWdJQ0JvWVhOUGQyNHVZMkZzYkNoT1lYUnBkbVZKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU3dnYVhSbGNtRjBiM0pUZVcxaWIyd3BLU0I3WEc0Z0lDQWdMeThnVkdocGN5QmxiblpwY205dWJXVnVkQ0JvWVhNZ1lTQnVZWFJwZG1VZ0pVbDBaWEpoZEc5eVVISnZkRzkwZVhCbEpUc2dkWE5sSUdsMElHbHVjM1JsWVdSY2JpQWdJQ0F2THlCdlppQjBhR1VnY0c5c2VXWnBiR3d1WEc0Z0lDQWdTWFJsY21GMGIzSlFjbTkwYjNSNWNHVWdQU0JPWVhScGRtVkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pUdGNiaUFnZlZ4dVhHNGdJSFpoY2lCSGNDQTlJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVVSEp2ZEc5MGVYQmxMbkJ5YjNSdmRIbHdaU0E5WEc0Z0lDQWdSMlZ1WlhKaGRHOXlMbkJ5YjNSdmRIbHdaU0E5SUU5aWFtVmpkQzVqY21WaGRHVW9TWFJsY21GMGIzSlFjbTkwYjNSNWNHVXBPMXh1SUNCSFpXNWxjbUYwYjNKR2RXNWpkR2x2Ymk1d2NtOTBiM1I1Y0dVZ1BTQkhjQzVqYjI1emRISjFZM1J2Y2lBOUlFZGxibVZ5WVhSdmNrWjFibU4wYVc5dVVISnZkRzkwZVhCbE8xeHVJQ0JIWlc1bGNtRjBiM0pHZFc1amRHbHZibEJ5YjNSdmRIbHdaUzVqYjI1emRISjFZM1J2Y2lBOUlFZGxibVZ5WVhSdmNrWjFibU4wYVc5dU8xeHVJQ0JIWlc1bGNtRjBiM0pHZFc1amRHbHZibEJ5YjNSdmRIbHdaVnQwYjFOMGNtbHVaMVJoWjFONWJXSnZiRjBnUFZ4dUlDQWdJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVMbVJwYzNCc1lYbE9ZVzFsSUQwZ1hDSkhaVzVsY21GMGIzSkdkVzVqZEdsdmJsd2lPMXh1WEc0Z0lDOHZJRWhsYkhCbGNpQm1iM0lnWkdWbWFXNXBibWNnZEdobElDNXVaWGgwTENBdWRHaHliM2NzSUdGdVpDQXVjbVYwZFhKdUlHMWxkR2h2WkhNZ2IyWWdkR2hsWEc0Z0lDOHZJRWwwWlhKaGRHOXlJR2x1ZEdWeVptRmpaU0JwYmlCMFpYSnRjeUJ2WmlCaElITnBibWRzWlNBdVgybHVkbTlyWlNCdFpYUm9iMlF1WEc0Z0lHWjFibU4wYVc5dUlHUmxabWx1WlVsMFpYSmhkRzl5VFdWMGFHOWtjeWh3Y205MGIzUjVjR1VwSUh0Y2JpQWdJQ0JiWENKdVpYaDBYQ0lzSUZ3aWRHaHliM2RjSWl3Z1hDSnlaWFIxY201Y0lsMHVabTl5UldGamFDaG1kVzVqZEdsdmJpaHRaWFJvYjJRcElIdGNiaUFnSUNBZ0lIQnliM1J2ZEhsd1pWdHRaWFJvYjJSZElEMGdablZ1WTNScGIyNG9ZWEpuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlwYm5admEyVW9iV1YwYUc5a0xDQmhjbWNwTzF4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lHVjRjRzl5ZEhNdWFYTkhaVzVsY21GMGIzSkdkVzVqZEdsdmJpQTlJR1oxYm1OMGFXOXVLR2RsYmtaMWJpa2dlMXh1SUNBZ0lIWmhjaUJqZEc5eUlEMGdkSGx3Wlc5bUlHZGxia1oxYmlBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlHZGxia1oxYmk1amIyNXpkSEoxWTNSdmNqdGNiaUFnSUNCeVpYUjFjbTRnWTNSdmNseHVJQ0FnSUNBZ1B5QmpkRzl5SUQwOVBTQkhaVzVsY21GMGIzSkdkVzVqZEdsdmJpQjhmRnh1SUNBZ0lDQWdJQ0F2THlCR2IzSWdkR2hsSUc1aGRHbDJaU0JIWlc1bGNtRjBiM0pHZFc1amRHbHZiaUJqYjI1emRISjFZM1J2Y2l3Z2RHaGxJR0psYzNRZ2QyVWdZMkZ1WEc0Z0lDQWdJQ0FnSUM4dklHUnZJR2x6SUhSdklHTm9aV05ySUdsMGN5QXVibUZ0WlNCd2NtOXdaWEowZVM1Y2JpQWdJQ0FnSUNBZ0tHTjBiM0l1WkdsemNHeGhlVTVoYldVZ2ZId2dZM1J2Y2k1dVlXMWxLU0E5UFQwZ1hDSkhaVzVsY21GMGIzSkdkVzVqZEdsdmJsd2lYRzRnSUNBZ0lDQTZJR1poYkhObE8xeHVJQ0I5TzF4dVhHNGdJR1Y0Y0c5eWRITXViV0Z5YXlBOUlHWjFibU4wYVc5dUtHZGxia1oxYmlrZ2UxeHVJQ0FnSUdsbUlDaFBZbXBsWTNRdWMyVjBVSEp2ZEc5MGVYQmxUMllwSUh0Y2JpQWdJQ0FnSUU5aWFtVmpkQzV6WlhSUWNtOTBiM1I1Y0dWUFppaG5aVzVHZFc0c0lFZGxibVZ5WVhSdmNrWjFibU4wYVc5dVVISnZkRzkwZVhCbEtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWjJWdVJuVnVMbDlmY0hKdmRHOWZYeUE5SUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1VUhKdmRHOTBlWEJsTzF4dUlDQWdJQ0FnYVdZZ0tDRW9kRzlUZEhKcGJtZFVZV2RUZVcxaWIyd2dhVzRnWjJWdVJuVnVLU2tnZTF4dUlDQWdJQ0FnSUNCblpXNUdkVzViZEc5VGRISnBibWRVWVdkVGVXMWliMnhkSUQwZ1hDSkhaVzVsY21GMGIzSkdkVzVqZEdsdmJsd2lPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCblpXNUdkVzR1Y0hKdmRHOTBlWEJsSUQwZ1QySnFaV04wTG1OeVpXRjBaU2hIY0NrN1hHNGdJQ0FnY21WMGRYSnVJR2RsYmtaMWJqdGNiaUFnZlR0Y2JseHVJQ0F2THlCWGFYUm9hVzRnZEdobElHSnZaSGtnYjJZZ1lXNTVJR0Z6ZVc1aklHWjFibU4wYVc5dUxDQmdZWGRoYVhRZ2VHQWdhWE1nZEhKaGJuTm1iM0p0WldRZ2RHOWNiaUFnTHk4Z1lIbHBaV3hrSUhKbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlM1aGQzSmhjQ2g0S1dBc0lITnZJSFJvWVhRZ2RHaGxJSEoxYm5ScGJXVWdZMkZ1SUhSbGMzUmNiaUFnTHk4Z1lHaGhjMDkzYmk1allXeHNLSFpoYkhWbExDQmNJbDlmWVhkaGFYUmNJaWxnSUhSdklHUmxkR1Z5YldsdVpTQnBaaUIwYUdVZ2VXbGxiR1JsWkNCMllXeDFaU0JwYzF4dUlDQXZMeUJ0WldGdWRDQjBieUJpWlNCaGQyRnBkR1ZrTGx4dUlDQmxlSEJ2Y25SekxtRjNjbUZ3SUQwZ1puVnVZM1JwYjI0b1lYSm5LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIc2dYMTloZDJGcGREb2dZWEpuSUgwN1hHNGdJSDA3WEc1Y2JpQWdablZ1WTNScGIyNGdRWE41Ym1OSmRHVnlZWFJ2Y2loblpXNWxjbUYwYjNJcElIdGNiaUFnSUNCbWRXNWpkR2x2YmlCcGJuWnZhMlVvYldWMGFHOWtMQ0JoY21jc0lISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEpsWTI5eVpDQTlJSFJ5ZVVOaGRHTm9LR2RsYm1WeVlYUnZjbHR0WlhSb2IyUmRMQ0JuWlc1bGNtRjBiM0lzSUdGeVp5azdYRzRnSUNBZ0lDQnBaaUFvY21WamIzSmtMblI1Y0dVZ1BUMDlJRndpZEdoeWIzZGNJaWtnZTF4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvY21WamIzSmtMbUZ5WnlrN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdjbVZqYjNKa0xtRnlaenRjYmlBZ0lDQWdJQ0FnZG1GeUlIWmhiSFZsSUQwZ2NtVnpkV3gwTG5aaGJIVmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1VnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdYQ0p2WW1wbFkzUmNJaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z6VDNkdUxtTmhiR3dvZG1Gc2RXVXNJRndpWDE5aGQyRnBkRndpS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb2RtRnNkV1V1WDE5aGQyRnBkQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1MmIydGxLRndpYm1WNGRGd2lMQ0IyWVd4MVpTd2djbVZ6YjJ4MlpTd2djbVZxWldOMEtUdGNiaUFnSUNBZ0lDQWdJQ0I5TENCbWRXNWpkR2x2YmlobGNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVkbTlyWlNoY0luUm9jbTkzWENJc0lHVnljaXdnY21WemIyeDJaU3dnY21WcVpXTjBLVHRjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9kbUZzZFdVcExuUm9aVzRvWm5WdVkzUnBiMjRvZFc1M2NtRndjR1ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnVjJobGJpQmhJSGxwWld4a1pXUWdVSEp2YldselpTQnBjeUJ5WlhOdmJIWmxaQ3dnYVhSeklHWnBibUZzSUhaaGJIVmxJR0psWTI5dFpYTmNiaUFnSUNBZ0lDQWdJQ0F2THlCMGFHVWdMblpoYkhWbElHOW1JSFJvWlNCUWNtOXRhWE5sUEh0MllXeDFaU3hrYjI1bGZUNGdjbVZ6ZFd4MElHWnZjaUIwYUdWY2JpQWdJQ0FnSUNBZ0lDQXZMeUJqZFhKeVpXNTBJR2wwWlhKaGRHbHZiaTVjYmlBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1ZG1Gc2RXVWdQU0IxYm5keVlYQndaV1E3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYTjFiSFFwTzF4dUlDQWdJQ0FnSUNCOUxDQm1kVzVqZEdsdmJpaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUVsbUlHRWdjbVZxWldOMFpXUWdVSEp2YldselpTQjNZWE1nZVdsbGJHUmxaQ3dnZEdoeWIzY2dkR2hsSUhKbGFtVmpkR2x2YmlCaVlXTnJYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2FXNTBieUIwYUdVZ1lYTjVibU1nWjJWdVpYSmhkRzl5SUdaMWJtTjBhVzl1SUhOdklHbDBJR05oYmlCaVpTQm9ZVzVrYkdWa0lIUm9aWEpsTGx4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGJuWnZhMlVvWENKMGFISnZkMXdpTENCbGNuSnZjaXdnY21WemIyeDJaU3dnY21WcVpXTjBLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlIQnlaWFpwYjNWelVISnZiV2x6WlR0Y2JseHVJQ0FnSUdaMWJtTjBhVzl1SUdWdWNYVmxkV1VvYldWMGFHOWtMQ0JoY21jcElIdGNiaUFnSUNBZ0lHWjFibU4wYVc5dUlHTmhiR3hKYm5admEyVlhhWFJvVFdWMGFHOWtRVzVrUVhKbktDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXNTJiMnRsS0cxbGRHaHZaQ3dnWVhKbkxDQnlaWE52YkhabExDQnlaV3BsWTNRcE8xeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSEJ5WlhacGIzVnpVSEp2YldselpTQTlYRzRnSUNBZ0lDQWdJQzh2SUVsbUlHVnVjWFZsZFdVZ2FHRnpJR0psWlc0Z1kyRnNiR1ZrSUdKbFptOXlaU3dnZEdobGJpQjNaU0IzWVc1MElIUnZJSGRoYVhRZ2RXNTBhV3hjYmlBZ0lDQWdJQ0FnTHk4Z1lXeHNJSEJ5WlhacGIzVnpJRkJ5YjIxcGMyVnpJR2hoZG1VZ1ltVmxiaUJ5WlhOdmJIWmxaQ0JpWldadmNtVWdZMkZzYkdsdVp5QnBiblp2YTJVc1hHNGdJQ0FnSUNBZ0lDOHZJSE52SUhSb1lYUWdjbVZ6ZFd4MGN5QmhjbVVnWVd4M1lYbHpJR1JsYkdsMlpYSmxaQ0JwYmlCMGFHVWdZMjl5Y21WamRDQnZjbVJsY2k0Z1NXWmNiaUFnSUNBZ0lDQWdMeThnWlc1eGRXVjFaU0JvWVhNZ2JtOTBJR0psWlc0Z1kyRnNiR1ZrSUdKbFptOXlaU3dnZEdobGJpQnBkQ0JwY3lCcGJYQnZjblJoYm5RZ2RHOWNiaUFnSUNBZ0lDQWdMeThnWTJGc2JDQnBiblp2YTJVZ2FXMXRaV1JwWVhSbGJIa3NJSGRwZEdodmRYUWdkMkZwZEdsdVp5QnZiaUJoSUdOaGJHeGlZV05ySUhSdklHWnBjbVVzWEc0Z0lDQWdJQ0FnSUM4dklITnZJSFJvWVhRZ2RHaGxJR0Z6ZVc1aklHZGxibVZ5WVhSdmNpQm1kVzVqZEdsdmJpQm9ZWE1nZEdobElHOXdjRzl5ZEhWdWFYUjVJSFJ2SUdSdlhHNGdJQ0FnSUNBZ0lDOHZJR0Z1ZVNCdVpXTmxjM05oY25rZ2MyVjBkWEFnYVc0Z1lTQndjbVZrYVdOMFlXSnNaU0IzWVhrdUlGUm9hWE1nY0hKbFpHbGpkR0ZpYVd4cGRIbGNiaUFnSUNBZ0lDQWdMeThnYVhNZ2QyaDVJSFJvWlNCUWNtOXRhWE5sSUdOdmJuTjBjblZqZEc5eUlITjVibU5vY205dWIzVnpiSGtnYVc1MmIydGxjeUJwZEhOY2JpQWdJQ0FnSUNBZ0x5OGdaWGhsWTNWMGIzSWdZMkZzYkdKaFkyc3NJR0Z1WkNCM2FIa2dZWE41Ym1NZ1puVnVZM1JwYjI1eklITjVibU5vY205dWIzVnpiSGxjYmlBZ0lDQWdJQ0FnTHk4Z1pYaGxZM1YwWlNCamIyUmxJR0psWm05eVpTQjBhR1VnWm1seWMzUWdZWGRoYVhRdUlGTnBibU5sSUhkbElHbHRjR3hsYldWdWRDQnphVzF3YkdWY2JpQWdJQ0FnSUNBZ0x5OGdZWE41Ym1NZ1puVnVZM1JwYjI1eklHbHVJSFJsY20xeklHOW1JR0Z6ZVc1aklHZGxibVZ5WVhSdmNuTXNJR2wwSUdseklHVnpjR1ZqYVdGc2JIbGNiaUFnSUNBZ0lDQWdMeThnYVcxd2IzSjBZVzUwSUhSdklHZGxkQ0IwYUdseklISnBaMmgwTENCbGRtVnVJSFJvYjNWbmFDQnBkQ0J5WlhGMWFYSmxjeUJqWVhKbExseHVJQ0FnSUNBZ0lDQndjbVYyYVc5MWMxQnliMjFwYzJVZ1B5QndjbVYyYVc5MWMxQnliMjFwYzJVdWRHaGxiaWhjYmlBZ0lDQWdJQ0FnSUNCallXeHNTVzUyYjJ0bFYybDBhRTFsZEdodlpFRnVaRUZ5Wnl4Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJCZG05cFpDQndjbTl3WVdkaGRHbHVaeUJtWVdsc2RYSmxjeUIwYnlCUWNtOXRhWE5sY3lCeVpYUjFjbTVsWkNCaWVTQnNZWFJsY2x4dUlDQWdJQ0FnSUNBZ0lDOHZJR2x1ZG05allYUnBiMjV6SUc5bUlIUm9aU0JwZEdWeVlYUnZjaTVjYmlBZ0lDQWdJQ0FnSUNCallXeHNTVzUyYjJ0bFYybDBhRTFsZEdodlpFRnVaRUZ5WjF4dUlDQWdJQ0FnSUNBcElEb2dZMkZzYkVsdWRtOXJaVmRwZEdoTlpYUm9iMlJCYm1SQmNtY29LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJFWldacGJtVWdkR2hsSUhWdWFXWnBaV1FnYUdWc2NHVnlJRzFsZEdodlpDQjBhR0YwSUdseklIVnpaV1FnZEc4Z2FXMXdiR1Z0Wlc1MElDNXVaWGgwTEZ4dUlDQWdJQzh2SUM1MGFISnZkeXdnWVc1a0lDNXlaWFIxY200Z0tITmxaU0JrWldacGJtVkpkR1Z5WVhSdmNrMWxkR2h2WkhNcExseHVJQ0FnSUhSb2FYTXVYMmx1ZG05clpTQTlJR1Z1Y1hWbGRXVTdYRzRnSUgxY2JseHVJQ0JrWldacGJtVkpkR1Z5WVhSdmNrMWxkR2h2WkhNb1FYTjVibU5KZEdWeVlYUnZjaTV3Y205MGIzUjVjR1VwTzF4dUlDQkJjM2x1WTBsMFpYSmhkRzl5TG5CeWIzUnZkSGx3WlZ0aGMzbHVZMGwwWlhKaGRHOXlVM2x0WW05c1hTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdmVHRjYmlBZ1pYaHdiM0owY3k1QmMzbHVZMGwwWlhKaGRHOXlJRDBnUVhONWJtTkpkR1Z5WVhSdmNqdGNibHh1SUNBdkx5Qk9iM1JsSUhSb1lYUWdjMmx0Y0d4bElHRnplVzVqSUdaMWJtTjBhVzl1Y3lCaGNtVWdhVzF3YkdWdFpXNTBaV1FnYjI0Z2RHOXdJRzltWEc0Z0lDOHZJRUZ6ZVc1alNYUmxjbUYwYjNJZ2IySnFaV04wY3pzZ2RHaGxlU0JxZFhOMElISmxkSFZ5YmlCaElGQnliMjFwYzJVZ1ptOXlJSFJvWlNCMllXeDFaU0J2Wmx4dUlDQXZMeUIwYUdVZ1ptbHVZV3dnY21WemRXeDBJSEJ5YjJSMVkyVmtJR0o1SUhSb1pTQnBkR1Z5WVhSdmNpNWNiaUFnWlhod2IzSjBjeTVoYzNsdVl5QTlJR1oxYm1OMGFXOXVLR2x1Ym1WeVJtNHNJRzkxZEdWeVJtNHNJSE5sYkdZc0lIUnllVXh2WTNOTWFYTjBLU0I3WEc0Z0lDQWdkbUZ5SUdsMFpYSWdQU0J1WlhjZ1FYTjVibU5KZEdWeVlYUnZjaWhjYmlBZ0lDQWdJSGR5WVhBb2FXNXVaWEpHYml3Z2IzVjBaWEpHYml3Z2MyVnNaaXdnZEhKNVRHOWpjMHhwYzNRcFhHNGdJQ0FnS1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJsZUhCdmNuUnpMbWx6UjJWdVpYSmhkRzl5Um5WdVkzUnBiMjRvYjNWMFpYSkdiaWxjYmlBZ0lDQWdJRDhnYVhSbGNpQXZMeUJKWmlCdmRYUmxja1p1SUdseklHRWdaMlZ1WlhKaGRHOXlMQ0J5WlhSMWNtNGdkR2hsSUdaMWJHd2dhWFJsY21GMGIzSXVYRzRnSUNBZ0lDQTZJR2wwWlhJdWJtVjRkQ2dwTG5Sb1pXNG9ablZ1WTNScGIyNG9jbVZ6ZFd4MEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEpsYzNWc2RDNWtiMjVsSUQ4Z2NtVnpkV3gwTG5aaGJIVmxJRG9nYVhSbGNpNXVaWGgwS0NrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNCOU8xeHVYRzRnSUdaMWJtTjBhVzl1SUcxaGEyVkpiblp2YTJWTlpYUm9iMlFvYVc1dVpYSkdiaXdnYzJWc1ppd2dZMjl1ZEdWNGRDa2dlMXh1SUNBZ0lIWmhjaUJ6ZEdGMFpTQTlJRWRsYmxOMFlYUmxVM1Z6Y0dWdVpHVmtVM1JoY25RN1hHNWNiaUFnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYVc1MmIydGxLRzFsZEdodlpDd2dZWEpuS1NCN1hHNGdJQ0FnSUNCcFppQW9jM1JoZEdVZ1BUMDlJRWRsYmxOMFlYUmxSWGhsWTNWMGFXNW5LU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjSWtkbGJtVnlZWFJ2Y2lCcGN5QmhiSEpsWVdSNUlISjFibTVwYm1kY0lpazdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoemRHRjBaU0E5UFQwZ1IyVnVVM1JoZEdWRGIyMXdiR1YwWldRcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0cxbGRHaHZaQ0E5UFQwZ1hDSjBhSEp2ZDF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dZWEpuTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnUW1VZ1ptOXlaMmwyYVc1bkxDQndaWElnTWpVdU15NHpMak11TXlCdlppQjBhR1VnYzNCbFl6cGNiaUFnSUNBZ0lDQWdMeThnYUhSMGNITTZMeTl3Wlc5d2JHVXViVzk2YVd4c1lTNXZjbWN2Zm1wdmNtVnVaRzl5Wm1ZdlpYTTJMV1J5WVdaMExtaDBiV3dqYzJWakxXZGxibVZ5WVhSdmNuSmxjM1Z0WlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWkc5dVpWSmxjM1ZzZENncE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQmpiMjUwWlhoMExtMWxkR2h2WkNBOUlHMWxkR2h2WkR0Y2JpQWdJQ0FnSUdOdmJuUmxlSFF1WVhKbklEMGdZWEpuTzF4dVhHNGdJQ0FnSUNCM2FHbHNaU0FvZEhKMVpTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHVnNaV2RoZEdVZ1BTQmpiMjUwWlhoMExtUmxiR1ZuWVhSbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWkdWc1pXZGhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZWElnWkdWc1pXZGhkR1ZTWlhOMWJIUWdQU0J0WVhsaVpVbHVkbTlyWlVSbGJHVm5ZWFJsS0dSbGJHVm5ZWFJsTENCamIyNTBaWGgwS1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvWkdWc1pXZGhkR1ZTWlhOMWJIUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrWld4bFoyRjBaVkpsYzNWc2RDQTlQVDBnUTI5dWRHbHVkV1ZUWlc1MGFXNWxiQ2tnWTI5dWRHbHVkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHVnNaV2RoZEdWU1pYTjFiSFE3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnZiblJsZUhRdWJXVjBhRzlrSUQwOVBTQmNJbTVsZUhSY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklGTmxkSFJwYm1jZ1kyOXVkR1Y0ZEM1ZmMyVnVkQ0JtYjNJZ2JHVm5ZV041SUhOMWNIQnZjblFnYjJZZ1FtRmlaV3duYzF4dUlDQWdJQ0FnSUNBZ0lDOHZJR1oxYm1OMGFXOXVMbk5sYm5RZ2FXMXdiR1Z0Wlc1MFlYUnBiMjR1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1elpXNTBJRDBnWTI5dWRHVjRkQzVmYzJWdWRDQTlJR052Ym5SbGVIUXVZWEpuTzF4dVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZMjl1ZEdWNGRDNXRaWFJvYjJRZ1BUMDlJRndpZEdoeWIzZGNJaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTQTlQVDBnUjJWdVUzUmhkR1ZUZFhOd1pXNWtaV1JUZEdGeWRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR1VnUFNCSFpXNVRkR0YwWlVOdmJYQnNaWFJsWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHTnZiblJsZUhRdVlYSm5PMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXVaR2x6Y0dGMFkyaEZlR05sY0hScGIyNG9ZMjl1ZEdWNGRDNWhjbWNwTzF4dVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9ZMjl1ZEdWNGRDNXRaWFJvYjJRZ1BUMDlJRndpY21WMGRYSnVYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjUwWlhoMExtRmljblZ3ZENoY0luSmxkSFZ5Ymx3aUxDQmpiMjUwWlhoMExtRnlaeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnpkR0YwWlNBOUlFZGxibE4wWVhSbFJYaGxZM1YwYVc1bk8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCeVpXTnZjbVFnUFNCMGNubERZWFJqYUNocGJtNWxja1p1TENCelpXeG1MQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxZMjl5WkM1MGVYQmxJRDA5UFNCY0ltNXZjbTFoYkZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdZVzRnWlhoalpYQjBhVzl1SUdseklIUm9jbTkzYmlCbWNtOXRJR2x1Ym1WeVJtNHNJSGRsSUd4bFlYWmxJSE4wWVhSbElEMDlQVnh1SUNBZ0lDQWdJQ0FnSUM4dklFZGxibE4wWVhSbFJYaGxZM1YwYVc1bklHRnVaQ0JzYjI5d0lHSmhZMnNnWm05eUlHRnViM1JvWlhJZ2FXNTJiMk5oZEdsdmJpNWNiaUFnSUNBZ0lDQWdJQ0J6ZEdGMFpTQTlJR052Ym5SbGVIUXVaRzl1WlZ4dUlDQWdJQ0FnSUNBZ0lDQWdQeUJIWlc1VGRHRjBaVU52YlhCc1pYUmxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ09pQkhaVzVUZEdGMFpWTjFjM0JsYm1SbFpGbHBaV3hrTzF4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hKbFkyOXlaQzVoY21jZ1BUMDlJRU52Ym5ScGJuVmxVMlZ1ZEdsdVpXd3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpUb2djbVZqYjNKa0xtRnlaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZibVU2SUdOdmJuUmxlSFF1Wkc5dVpWeHVJQ0FnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHlaV052Y21RdWRIbHdaU0E5UFQwZ1hDSjBhSEp2ZDF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnYzNSaGRHVWdQU0JIWlc1VGRHRjBaVU52YlhCc1pYUmxaRHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QkVhWE53WVhSamFDQjBhR1VnWlhoalpYQjBhVzl1SUdKNUlHeHZiM0JwYm1jZ1ltRmpheUJoY205MWJtUWdkRzhnZEdobFhHNGdJQ0FnSUNBZ0lDQWdMeThnWTI5dWRHVjRkQzVrYVhOd1lYUmphRVY0WTJWd2RHbHZiaWhqYjI1MFpYaDBMbUZ5WnlrZ1kyRnNiQ0JoWW05MlpTNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1MFpYaDBMbTFsZEdodlpDQTlJRndpZEdoeWIzZGNJanRjYmlBZ0lDQWdJQ0FnSUNCamIyNTBaWGgwTG1GeVp5QTlJSEpsWTI5eVpDNWhjbWM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dUlDQjlYRzVjYmlBZ0x5OGdRMkZzYkNCa1pXeGxaMkYwWlM1cGRHVnlZWFJ2Y2x0amIyNTBaWGgwTG0xbGRHaHZaRjBvWTI5dWRHVjRkQzVoY21jcElHRnVaQ0JvWVc1a2JHVWdkR2hsWEc0Z0lDOHZJSEpsYzNWc2RDd2daV2wwYUdWeUlHSjVJSEpsZEhWeWJtbHVaeUJoSUhzZ2RtRnNkV1VzSUdSdmJtVWdmU0J5WlhOMWJIUWdabkp2YlNCMGFHVmNiaUFnTHk4Z1pHVnNaV2RoZEdVZ2FYUmxjbUYwYjNJc0lHOXlJR0o1SUcxdlpHbG1lV2x1WnlCamIyNTBaWGgwTG0xbGRHaHZaQ0JoYm1RZ1kyOXVkR1Y0ZEM1aGNtY3NYRzRnSUM4dklITmxkSFJwYm1jZ1kyOXVkR1Y0ZEM1a1pXeGxaMkYwWlNCMGJ5QnVkV3hzTENCaGJtUWdjbVYwZFhKdWFXNW5JSFJvWlNCRGIyNTBhVzUxWlZObGJuUnBibVZzTGx4dUlDQm1kVzVqZEdsdmJpQnRZWGxpWlVsdWRtOXJaVVJsYkdWbllYUmxLR1JsYkdWbllYUmxMQ0JqYjI1MFpYaDBLU0I3WEc0Z0lDQWdkbUZ5SUcxbGRHaHZaQ0E5SUdSbGJHVm5ZWFJsTG1sMFpYSmhkRzl5VzJOdmJuUmxlSFF1YldWMGFHOWtYVHRjYmlBZ0lDQnBaaUFvYldWMGFHOWtJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lDOHZJRUVnTG5Sb2NtOTNJRzl5SUM1eVpYUjFjbTRnZDJobGJpQjBhR1VnWkdWc1pXZGhkR1VnYVhSbGNtRjBiM0lnYUdGeklHNXZJQzUwYUhKdmQxeHVJQ0FnSUNBZ0x5OGdiV1YwYUc5a0lHRnNkMkY1Y3lCMFpYSnRhVzVoZEdWeklIUm9aU0I1YVdWc1pDb2diRzl2Y0M1Y2JpQWdJQ0FnSUdOdmJuUmxlSFF1WkdWc1pXZGhkR1VnUFNCdWRXeHNPMXh1WEc0Z0lDQWdJQ0JwWmlBb1kyOXVkR1Y0ZEM1dFpYUm9iMlFnUFQwOUlGd2lkR2h5YjNkY0lpa2dlMXh1SUNBZ0lDQWdJQ0F2THlCT2IzUmxPaUJiWENKeVpYUjFjbTVjSWwwZ2JYVnpkQ0JpWlNCMWMyVmtJR1p2Y2lCRlV6TWdjR0Z5YzJsdVp5QmpiMjF3WVhScFltbHNhWFI1TGx4dUlDQWdJQ0FnSUNCcFppQW9aR1ZzWldkaGRHVXVhWFJsY21GMGIzSmJYQ0p5WlhSMWNtNWNJbDBwSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCMGFHVWdaR1ZzWldkaGRHVWdhWFJsY21GMGIzSWdhR0Z6SUdFZ2NtVjBkWEp1SUcxbGRHaHZaQ3dnWjJsMlpTQnBkQ0JoWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZMmhoYm1ObElIUnZJR05zWldGdUlIVndMbHh1SUNBZ0lDQWdJQ0FnSUdOdmJuUmxlSFF1YldWMGFHOWtJRDBnWENKeVpYUjFjbTVjSWp0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjUwWlhoMExtRnlaeUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQnRZWGxpWlVsdWRtOXJaVVJsYkdWbllYUmxLR1JsYkdWbllYUmxMQ0JqYjI1MFpYaDBLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hqYjI1MFpYaDBMbTFsZEdodlpDQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQnRZWGxpWlVsdWRtOXJaVVJsYkdWbllYUmxLR052Ym5SbGVIUXBJR05vWVc1blpXUWdZMjl1ZEdWNGRDNXRaWFJvYjJRZ1puSnZiVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdYQ0p5WlhSMWNtNWNJaUIwYnlCY0luUm9jbTkzWENJc0lHeGxkQ0IwYUdGMElHOTJaWEp5YVdSbElIUm9aU0JVZVhCbFJYSnliM0lnWW1Wc2IzY3VYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUTI5dWRHbHVkV1ZUWlc1MGFXNWxiRHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JqYjI1MFpYaDBMbTFsZEdodlpDQTlJRndpZEdoeWIzZGNJanRjYmlBZ0lDQWdJQ0FnWTI5dWRHVjRkQzVoY21jZ1BTQnVaWGNnVkhsd1pVVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lGd2lWR2hsSUdsMFpYSmhkRzl5SUdSdlpYTWdibTkwSUhCeWIzWnBaR1VnWVNBbmRHaHliM2NuSUcxbGRHaHZaRndpS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUVOdmJuUnBiblZsVTJWdWRHbHVaV3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUhKbFkyOXlaQ0E5SUhSeWVVTmhkR05vS0cxbGRHaHZaQ3dnWkdWc1pXZGhkR1V1YVhSbGNtRjBiM0lzSUdOdmJuUmxlSFF1WVhKbktUdGNibHh1SUNBZ0lHbG1JQ2h5WldOdmNtUXVkSGx3WlNBOVBUMGdYQ0owYUhKdmQxd2lLU0I3WEc0Z0lDQWdJQ0JqYjI1MFpYaDBMbTFsZEdodlpDQTlJRndpZEdoeWIzZGNJanRjYmlBZ0lDQWdJR052Ym5SbGVIUXVZWEpuSUQwZ2NtVmpiM0prTG1GeVp6dGNiaUFnSUNBZ0lHTnZiblJsZUhRdVpHVnNaV2RoZEdVZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnY21WMGRYSnVJRU52Ym5ScGJuVmxVMlZ1ZEdsdVpXdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR2x1Wm04Z1BTQnlaV052Y21RdVlYSm5PMXh1WEc0Z0lDQWdhV1lnS0NFZ2FXNW1ieWtnZTF4dUlDQWdJQ0FnWTI5dWRHVjRkQzV0WlhSb2IyUWdQU0JjSW5Sb2NtOTNYQ0k3WEc0Z0lDQWdJQ0JqYjI1MFpYaDBMbUZ5WnlBOUlHNWxkeUJVZVhCbFJYSnliM0lvWENKcGRHVnlZWFJ2Y2lCeVpYTjFiSFFnYVhNZ2JtOTBJR0Z1SUc5aWFtVmpkRndpS1R0Y2JpQWdJQ0FnSUdOdmJuUmxlSFF1WkdWc1pXZGhkR1VnUFNCdWRXeHNPMXh1SUNBZ0lDQWdjbVYwZFhKdUlFTnZiblJwYm5WbFUyVnVkR2x1Wld3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHbHVabTh1Wkc5dVpTa2dlMXh1SUNBZ0lDQWdMeThnUVhOemFXZHVJSFJvWlNCeVpYTjFiSFFnYjJZZ2RHaGxJR1pwYm1semFHVmtJR1JsYkdWbllYUmxJSFJ2SUhSb1pTQjBaVzF3YjNKaGNubGNiaUFnSUNBZ0lDOHZJSFpoY21saFlteGxJSE53WldOcFptbGxaQ0JpZVNCa1pXeGxaMkYwWlM1eVpYTjFiSFJPWVcxbElDaHpaV1VnWkdWc1pXZGhkR1ZaYVdWc1pDa3VYRzRnSUNBZ0lDQmpiMjUwWlhoMFcyUmxiR1ZuWVhSbExuSmxjM1ZzZEU1aGJXVmRJRDBnYVc1bWJ5NTJZV3gxWlR0Y2JseHVJQ0FnSUNBZ0x5OGdVbVZ6ZFcxbElHVjRaV04xZEdsdmJpQmhkQ0IwYUdVZ1pHVnphWEpsWkNCc2IyTmhkR2x2YmlBb2MyVmxJR1JsYkdWbllYUmxXV2xsYkdRcExseHVJQ0FnSUNBZ1kyOXVkR1Y0ZEM1dVpYaDBJRDBnWkdWc1pXZGhkR1V1Ym1WNGRFeHZZenRjYmx4dUlDQWdJQ0FnTHk4Z1NXWWdZMjl1ZEdWNGRDNXRaWFJvYjJRZ2QyRnpJRndpZEdoeWIzZGNJaUJpZFhRZ2RHaGxJR1JsYkdWbllYUmxJR2hoYm1Sc1pXUWdkR2hsWEc0Z0lDQWdJQ0F2THlCbGVHTmxjSFJwYjI0c0lHeGxkQ0IwYUdVZ2IzVjBaWElnWjJWdVpYSmhkRzl5SUhCeWIyTmxaV1FnYm05eWJXRnNiSGt1SUVsbVhHNGdJQ0FnSUNBdkx5QmpiMjUwWlhoMExtMWxkR2h2WkNCM1lYTWdYQ0p1WlhoMFhDSXNJR1p2Y21kbGRDQmpiMjUwWlhoMExtRnlaeUJ6YVc1alpTQnBkQ0JvWVhNZ1ltVmxibHh1SUNBZ0lDQWdMeThnWENKamIyNXpkVzFsWkZ3aUlHSjVJSFJvWlNCa1pXeGxaMkYwWlNCcGRHVnlZWFJ2Y2k0Z1NXWWdZMjl1ZEdWNGRDNXRaWFJvYjJRZ2QyRnpYRzRnSUNBZ0lDQXZMeUJjSW5KbGRIVnlibHdpTENCaGJHeHZkeUIwYUdVZ2IzSnBaMmx1WVd3Z0xuSmxkSFZ5YmlCallXeHNJSFJ2SUdOdmJuUnBiblZsSUdsdUlIUm9aVnh1SUNBZ0lDQWdMeThnYjNWMFpYSWdaMlZ1WlhKaGRHOXlMbHh1SUNBZ0lDQWdhV1lnS0dOdmJuUmxlSFF1YldWMGFHOWtJQ0U5UFNCY0luSmxkSFZ5Ymx3aUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUXViV1YwYUc5a0lEMGdYQ0p1WlhoMFhDSTdYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUXVZWEpuSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUM4dklGSmxMWGxwWld4a0lIUm9aU0J5WlhOMWJIUWdjbVYwZFhKdVpXUWdZbmtnZEdobElHUmxiR1ZuWVhSbElHMWxkR2h2WkM1Y2JpQWdJQ0FnSUhKbGRIVnliaUJwYm1adk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklGUm9aU0JrWld4bFoyRjBaU0JwZEdWeVlYUnZjaUJwY3lCbWFXNXBjMmhsWkN3Z2MyOGdabTl5WjJWMElHbDBJR0Z1WkNCamIyNTBhVzUxWlNCM2FYUm9YRzRnSUNBZ0x5OGdkR2hsSUc5MWRHVnlJR2RsYm1WeVlYUnZjaTVjYmlBZ0lDQmpiMjUwWlhoMExtUmxiR1ZuWVhSbElEMGdiblZzYkR0Y2JpQWdJQ0J5WlhSMWNtNGdRMjl1ZEdsdWRXVlRaVzUwYVc1bGJEdGNiaUFnZlZ4dVhHNGdJQzh2SUVSbFptbHVaU0JIWlc1bGNtRjBiM0l1Y0hKdmRHOTBlWEJsTG50dVpYaDBMSFJvY205M0xISmxkSFZ5Ym4wZ2FXNGdkR1Z5YlhNZ2IyWWdkR2hsWEc0Z0lDOHZJSFZ1YVdacFpXUWdMbDlwYm5admEyVWdhR1ZzY0dWeUlHMWxkR2h2WkM1Y2JpQWdaR1ZtYVc1bFNYUmxjbUYwYjNKTlpYUm9iMlJ6S0Vkd0tUdGNibHh1SUNCSGNGdDBiMU4wY21sdVoxUmhaMU41YldKdmJGMGdQU0JjSWtkbGJtVnlZWFJ2Y2x3aU8xeHVYRzRnSUM4dklFRWdSMlZ1WlhKaGRHOXlJSE5vYjNWc1pDQmhiSGRoZVhNZ2NtVjBkWEp1SUdsMGMyVnNaaUJoY3lCMGFHVWdhWFJsY21GMGIzSWdiMkpxWldOMElIZG9aVzRnZEdobFhHNGdJQzh2SUVCQWFYUmxjbUYwYjNJZ1puVnVZM1JwYjI0Z2FYTWdZMkZzYkdWa0lHOXVJR2wwTGlCVGIyMWxJR0p5YjNkelpYSnpKeUJwYlhCc1pXMWxiblJoZEdsdmJuTWdiMllnZEdobFhHNGdJQzh2SUdsMFpYSmhkRzl5SUhCeWIzUnZkSGx3WlNCamFHRnBiaUJwYm1OdmNuSmxZM1JzZVNCcGJYQnNaVzFsYm5RZ2RHaHBjeXdnWTJGMWMybHVaeUIwYUdVZ1IyVnVaWEpoZEc5eVhHNGdJQzh2SUc5aWFtVmpkQ0IwYnlCdWIzUWdZbVVnY21WMGRYSnVaV1FnWm5KdmJTQjBhR2x6SUdOaGJHd3VJRlJvYVhNZ1pXNXpkWEpsY3lCMGFHRjBJR1J2WlhOdUozUWdhR0Z3Y0dWdUxseHVJQ0F2THlCVFpXVWdhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMlpoWTJWaWIyOXJMM0psWjJWdVpYSmhkRzl5TDJsemMzVmxjeTh5TnpRZ1ptOXlJRzF2Y21VZ1pHVjBZV2xzY3k1Y2JpQWdSM0JiYVhSbGNtRjBiM0pUZVcxaWIyeGRJRDBnWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDA3WEc1Y2JpQWdSM0F1ZEc5VGRISnBibWNnUFNCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCeVpYUjFjbTRnWENKYmIySnFaV04wSUVkbGJtVnlZWFJ2Y2wxY0lqdGNiaUFnZlR0Y2JseHVJQ0JtZFc1amRHbHZiaUJ3ZFhOb1ZISjVSVzUwY25rb2JHOWpjeWtnZTF4dUlDQWdJSFpoY2lCbGJuUnllU0E5SUhzZ2RISjVURzlqT2lCc2IyTnpXekJkSUgwN1hHNWNiaUFnSUNCcFppQW9NU0JwYmlCc2IyTnpLU0I3WEc0Z0lDQWdJQ0JsYm5SeWVTNWpZWFJqYUV4dll5QTlJR3h2WTNOYk1WMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRElnYVc0Z2JHOWpjeWtnZTF4dUlDQWdJQ0FnWlc1MGNua3VabWx1WVd4c2VVeHZZeUE5SUd4dlkzTmJNbDA3WEc0Z0lDQWdJQ0JsYm5SeWVTNWhablJsY2t4dll5QTlJR3h2WTNOYk0xMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHaHBjeTUwY25sRmJuUnlhV1Z6TG5CMWMyZ29aVzUwY25rcE8xeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdjbVZ6WlhSVWNubEZiblJ5ZVNobGJuUnllU2tnZTF4dUlDQWdJSFpoY2lCeVpXTnZjbVFnUFNCbGJuUnllUzVqYjIxd2JHVjBhVzl1SUh4OElIdDlPMXh1SUNBZ0lISmxZMjl5WkM1MGVYQmxJRDBnWENKdWIzSnRZV3hjSWp0Y2JpQWdJQ0JrWld4bGRHVWdjbVZqYjNKa0xtRnlaenRjYmlBZ0lDQmxiblJ5ZVM1amIyMXdiR1YwYVc5dUlEMGdjbVZqYjNKa08xeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdRMjl1ZEdWNGRDaDBjbmxNYjJOelRHbHpkQ2tnZTF4dUlDQWdJQzh2SUZSb1pTQnliMjkwSUdWdWRISjVJRzlpYW1WamRDQW9aV1ptWldOMGFYWmxiSGtnWVNCMGNua2djM1JoZEdWdFpXNTBJSGRwZEdodmRYUWdZU0JqWVhSamFGeHVJQ0FnSUM4dklHOXlJR0VnWm1sdVlXeHNlU0JpYkc5amF5a2daMmwyWlhNZ2RYTWdZU0J3YkdGalpTQjBieUJ6ZEc5eVpTQjJZV3gxWlhNZ2RHaHliM2R1SUdaeWIyMWNiaUFnSUNBdkx5QnNiMk5oZEdsdmJuTWdkMmhsY21VZ2RHaGxjbVVnYVhNZ2JtOGdaVzVqYkc5emFXNW5JSFJ5ZVNCemRHRjBaVzFsYm5RdVhHNGdJQ0FnZEdocGN5NTBjbmxGYm5SeWFXVnpJRDBnVzNzZ2RISjVURzlqT2lCY0luSnZiM1JjSWlCOVhUdGNiaUFnSUNCMGNubE1iMk56VEdsemRDNW1iM0pGWVdOb0tIQjFjMmhVY25sRmJuUnllU3dnZEdocGN5azdYRzRnSUNBZ2RHaHBjeTV5WlhObGRDaDBjblZsS1R0Y2JpQWdmVnh1WEc0Z0lHVjRjRzl5ZEhNdWEyVjVjeUE5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ2tnZTF4dUlDQWdJSFpoY2lCclpYbHpJRDBnVzEwN1hHNGdJQ0FnWm05eUlDaDJZWElnYTJWNUlHbHVJRzlpYW1WamRDa2dlMXh1SUNBZ0lDQWdhMlY1Y3k1d2RYTm9LR3RsZVNrN1hHNGdJQ0FnZlZ4dUlDQWdJR3RsZVhNdWNtVjJaWEp6WlNncE8xeHVYRzRnSUNBZ0x5OGdVbUYwYUdWeUlIUm9ZVzRnY21WMGRYSnVhVzVuSUdGdUlHOWlhbVZqZENCM2FYUm9JR0VnYm1WNGRDQnRaWFJvYjJRc0lIZGxJR3RsWlhCY2JpQWdJQ0F2THlCMGFHbHVaM01nYzJsdGNHeGxJR0Z1WkNCeVpYUjFjbTRnZEdobElHNWxlSFFnWm5WdVkzUnBiMjRnYVhSelpXeG1MbHh1SUNBZ0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlCdVpYaDBLQ2tnZTF4dUlDQWdJQ0FnZDJocGJHVWdLR3RsZVhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJyWlhrZ1BTQnJaWGx6TG5CdmNDZ3BPMXh1SUNBZ0lDQWdJQ0JwWmlBb2EyVjVJR2x1SUc5aWFtVmpkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHNWxlSFF1ZG1Gc2RXVWdQU0JyWlhrN1hHNGdJQ0FnSUNBZ0lDQWdibVY0ZEM1a2IyNWxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZUhRN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdMeThnVkc4Z1lYWnZhV1FnWTNKbFlYUnBibWNnWVc0Z1lXUmthWFJwYjI1aGJDQnZZbXBsWTNRc0lIZGxJR3AxYzNRZ2FHRnVaeUIwYUdVZ0xuWmhiSFZsWEc0Z0lDQWdJQ0F2THlCaGJtUWdMbVJ2Ym1VZ2NISnZjR1Z5ZEdsbGN5QnZabVlnZEdobElHNWxlSFFnWm5WdVkzUnBiMjRnYjJKcVpXTjBJR2wwYzJWc1ppNGdWR2hwYzF4dUlDQWdJQ0FnTHk4Z1lXeHpieUJsYm5OMWNtVnpJSFJvWVhRZ2RHaGxJRzFwYm1sbWFXVnlJSGRwYkd3Z2JtOTBJR0Z1YjI1NWJXbDZaU0IwYUdVZ1puVnVZM1JwYjI0dVhHNGdJQ0FnSUNCdVpYaDBMbVJ2Ym1VZ1BTQjBjblZsTzF4dUlDQWdJQ0FnY21WMGRYSnVJRzVsZUhRN1hHNGdJQ0FnZlR0Y2JpQWdmVHRjYmx4dUlDQm1kVzVqZEdsdmJpQjJZV3gxWlhNb2FYUmxjbUZpYkdVcElIdGNiaUFnSUNCcFppQW9hWFJsY21GaWJHVXBJSHRjYmlBZ0lDQWdJSFpoY2lCcGRHVnlZWFJ2Y2sxbGRHaHZaQ0E5SUdsMFpYSmhZbXhsVzJsMFpYSmhkRzl5VTNsdFltOXNYVHRjYmlBZ0lDQWdJR2xtSUNocGRHVnlZWFJ2Y2sxbGRHaHZaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYVhSbGNtRjBiM0pOWlhSb2IyUXVZMkZzYkNocGRHVnlZV0pzWlNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdhWFJsY21GaWJHVXVibVY0ZENBOVBUMGdYQ0ptZFc1amRHbHZibHdpS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCcGRHVnlZV0pzWlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLQ0ZwYzA1aFRpaHBkR1Z5WVdKc1pTNXNaVzVuZEdncEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcElEMGdMVEVzSUc1bGVIUWdQU0JtZFc1amRHbHZiaUJ1WlhoMEtDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhkb2FXeGxJQ2dySzJrZ1BDQnBkR1Z5WVdKc1pTNXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWE5QZDI0dVkyRnNiQ2hwZEdWeVlXSnNaU3dnYVNrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkQzUyWVd4MVpTQTlJR2wwWlhKaFlteGxXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMExtUnZibVVnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxlSFE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdibVY0ZEM1MllXeDFaU0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGgwTG1SdmJtVWdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZUhRN1hHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZUhRdWJtVjRkQ0E5SUc1bGVIUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdVbVYwZFhKdUlHRnVJR2wwWlhKaGRHOXlJSGRwZEdnZ2JtOGdkbUZzZFdWekxseHVJQ0FnSUhKbGRIVnliaUI3SUc1bGVIUTZJR1J2Ym1WU1pYTjFiSFFnZlR0Y2JpQWdmVnh1SUNCbGVIQnZjblJ6TG5aaGJIVmxjeUE5SUhaaGJIVmxjenRjYmx4dUlDQm1kVzVqZEdsdmJpQmtiMjVsVW1WemRXeDBLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjdJSFpoYkhWbE9pQjFibVJsWm1sdVpXUXNJR1J2Ym1VNklIUnlkV1VnZlR0Y2JpQWdmVnh1WEc0Z0lFTnZiblJsZUhRdWNISnZkRzkwZVhCbElEMGdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlPaUJEYjI1MFpYaDBMRnh1WEc0Z0lDQWdjbVZ6WlhRNklHWjFibU4wYVc5dUtITnJhWEJVWlcxd1VtVnpaWFFwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjSEpsZGlBOUlEQTdYRzRnSUNBZ0lDQjBhR2x6TG01bGVIUWdQU0F3TzF4dUlDQWdJQ0FnTHk4Z1VtVnpaWFIwYVc1bklHTnZiblJsZUhRdVgzTmxiblFnWm05eUlHeGxaMkZqZVNCemRYQndiM0owSUc5bUlFSmhZbVZzSjNOY2JpQWdJQ0FnSUM4dklHWjFibU4wYVc5dUxuTmxiblFnYVcxd2JHVnRaVzUwWVhScGIyNHVYRzRnSUNBZ0lDQjBhR2x6TG5ObGJuUWdQU0IwYUdsekxsOXpaVzUwSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ2RHaHBjeTVrYjI1bElEMGdabUZzYzJVN1hHNGdJQ0FnSUNCMGFHbHpMbVJsYkdWbllYUmxJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdkR2hwY3k1dFpYUm9iMlFnUFNCY0ltNWxlSFJjSWp0Y2JpQWdJQ0FnSUhSb2FYTXVZWEpuSUQwZ2RXNWtaV1pwYm1Wa08xeHVYRzRnSUNBZ0lDQjBhR2x6TG5SeWVVVnVkSEpwWlhNdVptOXlSV0ZqYUNoeVpYTmxkRlJ5ZVVWdWRISjVLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tDRnphMmx3VkdWdGNGSmxjMlYwS1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHNWhiV1VnYVc0Z2RHaHBjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRTV2ZENCemRYSmxJR0ZpYjNWMElIUm9aU0J2Y0hScGJXRnNJRzl5WkdWeUlHOW1JSFJvWlhObElHTnZibVJwZEdsdmJuTTZYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHNWhiV1V1WTJoaGNrRjBLREFwSUQwOVBTQmNJblJjSWlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lYTlBkMjR1WTJGc2JDaDBhR2x6TENCdVlXMWxLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FoYVhOT1lVNG9LMjVoYldVdWMyeHBZMlVvTVNrcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpXMjVoYldWZElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCemRHOXdPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVaRzl1WlNBOUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUhaaGNpQnliMjkwUlc1MGNua2dQU0IwYUdsekxuUnllVVZ1ZEhKcFpYTmJNRjA3WEc0Z0lDQWdJQ0IyWVhJZ2NtOXZkRkpsWTI5eVpDQTlJSEp2YjNSRmJuUnllUzVqYjIxd2JHVjBhVzl1TzF4dUlDQWdJQ0FnYVdZZ0tISnZiM1JTWldOdmNtUXVkSGx3WlNBOVBUMGdYQ0owYUhKdmQxd2lLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJSEp2YjNSU1pXTnZjbVF1WVhKbk8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV5ZG1Gc08xeHVJQ0FnSUgwc1hHNWNiaUFnSUNCa2FYTndZWFJqYUVWNFkyVndkR2x2YmpvZ1puVnVZM1JwYjI0b1pYaGpaWEIwYVc5dUtTQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWtiMjVsS1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUdWNFkyVndkR2x2Ymp0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RtRnlJR052Ym5SbGVIUWdQU0IwYUdsek8xeHVJQ0FnSUNBZ1puVnVZM1JwYjI0Z2FHRnVaR3hsS0d4dll5d2dZMkYxWjJoMEtTQjdYRzRnSUNBZ0lDQWdJSEpsWTI5eVpDNTBlWEJsSUQwZ1hDSjBhSEp2ZDF3aU8xeHVJQ0FnSUNBZ0lDQnlaV052Y21RdVlYSm5JRDBnWlhoalpYQjBhVzl1TzF4dUlDQWdJQ0FnSUNCamIyNTBaWGgwTG01bGVIUWdQU0JzYjJNN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dOaGRXZG9kQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRWxtSUhSb1pTQmthWE53WVhSamFHVmtJR1Y0WTJWd2RHbHZiaUIzWVhNZ1kyRjFaMmgwSUdKNUlHRWdZMkYwWTJnZ1lteHZZMnNzWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdkR2hsYmlCc1pYUWdkR2hoZENCallYUmphQ0JpYkc5amF5Qm9ZVzVrYkdVZ2RHaGxJR1Y0WTJWd2RHbHZiaUJ1YjNKdFlXeHNlUzVjYmlBZ0lDQWdJQ0FnSUNCamIyNTBaWGgwTG0xbGRHaHZaQ0E5SUZ3aWJtVjRkRndpTzF4dUlDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdVlYSm5JRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRWhJR05oZFdkb2REdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjeTVzWlc1bmRHZ2dMU0F4T3lCcElENDlJREE3SUMwdGFTa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pXNTBjbmtnUFNCMGFHbHpMblJ5ZVVWdWRISnBaWE5iYVYwN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5WldOdmNtUWdQU0JsYm5SeWVTNWpiMjF3YkdWMGFXOXVPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGxiblJ5ZVM1MGNubE1iMk1nUFQwOUlGd2ljbTl2ZEZ3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1JYaGpaWEIwYVc5dUlIUm9jbTkzYmlCdmRYUnphV1JsSUc5bUlHRnVlU0IwY25rZ1lteHZZMnNnZEdoaGRDQmpiM1ZzWkNCb1lXNWtiR1ZjYmlBZ0lDQWdJQ0FnSUNBdkx5QnBkQ3dnYzI4Z2MyVjBJSFJvWlNCamIyMXdiR1YwYVc5dUlIWmhiSFZsSUc5bUlIUm9aU0JsYm5ScGNtVWdablZ1WTNScGIyNGdkRzljYmlBZ0lDQWdJQ0FnSUNBdkx5QjBhSEp2ZHlCMGFHVWdaWGhqWlhCMGFXOXVMbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJvWVc1a2JHVW9YQ0psYm1SY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9aVzUwY25rdWRISjVURzlqSUR3OUlIUm9hWE11Y0hKbGRpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQm9ZWE5EWVhSamFDQTlJR2hoYzA5M2JpNWpZV3hzS0dWdWRISjVMQ0JjSW1OaGRHTm9URzlqWENJcE8xeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCb1lYTkdhVzVoYkd4NUlEMGdhR0Z6VDNkdUxtTmhiR3dvWlc1MGNua3NJRndpWm1sdVlXeHNlVXh2WTF3aUtUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWE5EWVhSamFDQW1KaUJvWVhOR2FXNWhiR3g1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTV3Y21WMklEd2daVzUwY25rdVkyRjBZMmhNYjJNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdoaGJtUnNaU2hsYm5SeWVTNWpZWFJqYUV4dll5d2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXVjSEpsZGlBOElHVnVkSEo1TG1acGJtRnNiSGxNYjJNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdoaGJtUnNaU2hsYm5SeWVTNW1hVzVoYkd4NVRHOWpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FHRnpRMkYwWTJncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5CeVpYWWdQQ0JsYm5SeWVTNWpZWFJqYUV4dll5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2FHRnVaR3hsS0dWdWRISjVMbU5oZEdOb1RHOWpMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYUdGelJtbHVZV3hzZVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11Y0hKbGRpQThJR1Z1ZEhKNUxtWnBibUZzYkhsTWIyTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHaGhibVJzWlNobGJuUnllUzVtYVc1aGJHeDVURzlqS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YQ0owY25rZ2MzUmhkR1Z0Wlc1MElIZHBkR2h2ZFhRZ1kyRjBZMmdnYjNJZ1ptbHVZV3hzZVZ3aUtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWVdKeWRYQjBPaUJtZFc1amRHbHZiaWgwZVhCbExDQmhjbWNwSUh0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQjBhR2x6TG5SeWVVVnVkSEpwWlhNdWJHVnVaM1JvSUMwZ01Uc2dhU0ErUFNBd095QXRMV2twSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z1ZEhKNUlEMGdkR2hwY3k1MGNubEZiblJ5YVdWelcybGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb1pXNTBjbmt1ZEhKNVRHOWpJRHc5SUhSb2FYTXVjSEpsZGlBbUpseHVJQ0FnSUNBZ0lDQWdJQ0FnYUdGelQzZHVMbU5oYkd3b1pXNTBjbmtzSUZ3aVptbHVZV3hzZVV4dlkxd2lLU0FtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1d2NtVjJJRHdnWlc1MGNua3VabWx1WVd4c2VVeHZZeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJtYVc1aGJHeDVSVzUwY25rZ1BTQmxiblJ5ZVR0Y2JpQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvWm1sdVlXeHNlVVZ1ZEhKNUlDWW1YRzRnSUNBZ0lDQWdJQ0FnS0hSNWNHVWdQVDA5SUZ3aVluSmxZV3RjSWlCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0IwZVhCbElEMDlQU0JjSW1OdmJuUnBiblZsWENJcElDWW1YRzRnSUNBZ0lDQWdJQ0FnWm1sdVlXeHNlVVZ1ZEhKNUxuUnllVXh2WXlBOFBTQmhjbWNnSmlaY2JpQWdJQ0FnSUNBZ0lDQmhjbWNnUEQwZ1ptbHVZV3hzZVVWdWRISjVMbVpwYm1Gc2JIbE1iMk1wSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdTV2R1YjNKbElIUm9aU0JtYVc1aGJHeDVJR1Z1ZEhKNUlHbG1JR052Ym5SeWIyd2dhWE1nYm05MElHcDFiWEJwYm1jZ2RHOGdZVnh1SUNBZ0lDQWdJQ0F2THlCc2IyTmhkR2x2YmlCdmRYUnphV1JsSUhSb1pTQjBjbmt2WTJGMFkyZ2dZbXh2WTJzdVhHNGdJQ0FnSUNBZ0lHWnBibUZzYkhsRmJuUnllU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFpoY2lCeVpXTnZjbVFnUFNCbWFXNWhiR3g1Ulc1MGNua2dQeUJtYVc1aGJHeDVSVzUwY25rdVkyOXRjR3hsZEdsdmJpQTZJSHQ5TzF4dUlDQWdJQ0FnY21WamIzSmtMblI1Y0dVZ1BTQjBlWEJsTzF4dUlDQWdJQ0FnY21WamIzSmtMbUZ5WnlBOUlHRnlaenRjYmx4dUlDQWdJQ0FnYVdZZ0tHWnBibUZzYkhsRmJuUnllU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbTFsZEdodlpDQTlJRndpYm1WNGRGd2lPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNWxlSFFnUFNCbWFXNWhiR3g1Ulc1MGNua3VabWx1WVd4c2VVeHZZenRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRU52Ym5ScGJuVmxVMlZ1ZEdsdVpXdzdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdmJYQnNaWFJsS0hKbFkyOXlaQ2s3WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR052YlhCc1pYUmxPaUJtZFc1amRHbHZiaWh5WldOdmNtUXNJR0ZtZEdWeVRHOWpLU0I3WEc0Z0lDQWdJQ0JwWmlBb2NtVmpiM0prTG5SNWNHVWdQVDA5SUZ3aWRHaHliM2RjSWlrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCeVpXTnZjbVF1WVhKbk8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvY21WamIzSmtMblI1Y0dVZ1BUMDlJRndpWW5KbFlXdGNJaUI4ZkZ4dUlDQWdJQ0FnSUNBZ0lISmxZMjl5WkM1MGVYQmxJRDA5UFNCY0ltTnZiblJwYm5WbFhDSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXVaWGgwSUQwZ2NtVmpiM0prTG1GeVp6dGNiaUFnSUNBZ0lIMGdaV3h6WlNCcFppQW9jbVZqYjNKa0xuUjVjR1VnUFQwOUlGd2ljbVYwZFhKdVhDSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NXlkbUZzSUQwZ2RHaHBjeTVoY21jZ1BTQnlaV052Y21RdVlYSm5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMWxkR2h2WkNBOUlGd2ljbVYwZFhKdVhDSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtVjRkQ0E5SUZ3aVpXNWtYQ0k3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW01dmNtMWhiRndpSUNZbUlHRm1kR1Z5VEc5aktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtVjRkQ0E5SUdGbWRHVnlURzlqTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnUTI5dWRHbHVkV1ZUWlc1MGFXNWxiRHRjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdabWx1YVhOb09pQm1kVzVqZEdsdmJpaG1hVzVoYkd4NVRHOWpLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2RHaHBjeTUwY25sRmJuUnlhV1Z6TG14bGJtZDBhQ0F0SURFN0lHa2dQajBnTURzZ0xTMXBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmxiblJ5ZVNBOUlIUm9hWE11ZEhKNVJXNTBjbWxsYzF0cFhUdGNiaUFnSUNBZ0lDQWdhV1lnS0dWdWRISjVMbVpwYm1Gc2JIbE1iMk1nUFQwOUlHWnBibUZzYkhsTWIyTXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbU52YlhCc1pYUmxLR1Z1ZEhKNUxtTnZiWEJzWlhScGIyNHNJR1Z1ZEhKNUxtRm1kR1Z5VEc5aktUdGNiaUFnSUNBZ0lDQWdJQ0J5WlhObGRGUnllVVZ1ZEhKNUtHVnVkSEo1S1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1EyOXVkR2x1ZFdWVFpXNTBhVzVsYkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCY0ltTmhkR05vWENJNklHWjFibU4wYVc5dUtIUnllVXh2WXlrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJSFJvYVhNdWRISjVSVzUwY21sbGN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJQzB0YVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWlc1MGNua2dQU0IwYUdsekxuUnllVVZ1ZEhKcFpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUdsbUlDaGxiblJ5ZVM1MGNubE1iMk1nUFQwOUlIUnllVXh2WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpXTnZjbVFnUFNCbGJuUnllUzVqYjIxd2JHVjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h5WldOdmNtUXVkSGx3WlNBOVBUMGdYQ0owYUhKdmQxd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnZEdoeWIzZHVJRDBnY21WamIzSmtMbUZ5Wnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzJWMFZISjVSVzUwY25rb1pXNTBjbmtwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2h5YjNkdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUZSb1pTQmpiMjUwWlhoMExtTmhkR05vSUcxbGRHaHZaQ0J0ZFhOMElHOXViSGtnWW1VZ1kyRnNiR1ZrSUhkcGRHZ2dZU0JzYjJOaGRHbHZibHh1SUNBZ0lDQWdMeThnWVhKbmRXMWxiblFnZEdoaGRDQmpiM0p5WlhOd2IyNWtjeUIwYnlCaElHdHViM2R1SUdOaGRHTm9JR0pzYjJOckxseHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aWFXeHNaV2RoYkNCallYUmphQ0JoZEhSbGJYQjBYQ0lwTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JrWld4bFoyRjBaVmxwWld4a09pQm1kVzVqZEdsdmJpaHBkR1Z5WVdKc1pTd2djbVZ6ZFd4MFRtRnRaU3dnYm1WNGRFeHZZeWtnZTF4dUlDQWdJQ0FnZEdocGN5NWtaV3hsWjJGMFpTQTlJSHRjYmlBZ0lDQWdJQ0FnYVhSbGNtRjBiM0k2SUhaaGJIVmxjeWhwZEdWeVlXSnNaU2tzWEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRTVoYldVNklISmxjM1ZzZEU1aGJXVXNYRzRnSUNBZ0lDQWdJRzVsZUhSTWIyTTZJRzVsZUhSTWIyTmNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbTFsZEdodlpDQTlQVDBnWENKdVpYaDBYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSR1ZzYVdKbGNtRjBaV3g1SUdadmNtZGxkQ0IwYUdVZ2JHRnpkQ0J6Wlc1MElIWmhiSFZsSUhOdklIUm9ZWFFnZDJVZ1pHOXVKM1JjYmlBZ0lDQWdJQ0FnTHk4Z1lXTmphV1JsYm5SaGJHeDVJSEJoYzNNZ2FYUWdiMjRnZEc4Z2RHaGxJR1JsYkdWbllYUmxMbHh1SUNBZ0lDQWdJQ0IwYUdsekxtRnlaeUE5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2NtVjBkWEp1SUVOdmJuUnBiblZsVTJWdWRHbHVaV3c3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUM4dklGSmxaMkZ5Wkd4bGMzTWdiMllnZDJobGRHaGxjaUIwYUdseklITmpjbWx3ZENCcGN5QmxlR1ZqZFhScGJtY2dZWE1nWVNCRGIyMXRiMjVLVXlCdGIyUjFiR1ZjYmlBZ0x5OGdiM0lnYm05MExDQnlaWFIxY200Z2RHaGxJSEoxYm5ScGJXVWdiMkpxWldOMElITnZJSFJvWVhRZ2QyVWdZMkZ1SUdSbFkyeGhjbVVnZEdobElIWmhjbWxoWW14bFhHNGdJQzh2SUhKbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlNCcGJpQjBhR1VnYjNWMFpYSWdjMk52Y0dVc0lIZG9hV05vSUdGc2JHOTNjeUIwYUdseklHMXZaSFZzWlNCMGJ5QmlaVnh1SUNBdkx5QnBibXBsWTNSbFpDQmxZWE5wYkhrZ1lua2dZR0pwYmk5eVpXZGxibVZ5WVhSdmNpQXRMV2x1WTJ4MVpHVXRjblZ1ZEdsdFpTQnpZM0pwY0hRdWFuTmdMbHh1SUNCeVpYUjFjbTRnWlhod2IzSjBjenRjYmx4dWZTaGNiaUFnTHk4Z1NXWWdkR2hwY3lCelkzSnBjSFFnYVhNZ1pYaGxZM1YwYVc1bklHRnpJR0VnUTI5dGJXOXVTbE1nYlc5a2RXeGxMQ0IxYzJVZ2JXOWtkV3hsTG1WNGNHOXlkSE5jYmlBZ0x5OGdZWE1nZEdobElISmxaMlZ1WlhKaGRHOXlVblZ1ZEdsdFpTQnVZVzFsYzNCaFkyVXVJRTkwYUdWeWQybHpaU0JqY21WaGRHVWdZU0J1WlhjZ1pXMXdkSGxjYmlBZ0x5OGdiMkpxWldOMExpQkZhWFJvWlhJZ2QyRjVMQ0IwYUdVZ2NtVnpkV3gwYVc1bklHOWlhbVZqZENCM2FXeHNJR0psSUhWelpXUWdkRzhnYVc1cGRHbGhiR2w2WlZ4dUlDQXZMeUIwYUdVZ2NtVm5aVzVsY21GMGIzSlNkVzUwYVcxbElIWmhjbWxoWW14bElHRjBJSFJvWlNCMGIzQWdiMllnZEdocGN5Qm1hV3hsTGx4dUlDQjBlWEJsYjJZZ2JXOWtkV3hsSUQwOVBTQmNJbTlpYW1WamRGd2lJRDhnYlc5a2RXeGxMbVY0Y0c5eWRITWdPaUI3ZlZ4dUtTazdYRzVjYm5SeWVTQjdYRzRnSUhKbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlNBOUlISjFiblJwYldVN1hHNTlJR05oZEdOb0lDaGhZMk5wWkdWdWRHRnNVM1J5YVdOMFRXOWtaU2tnZTF4dUlDQXZMeUJVYUdseklHMXZaSFZzWlNCemFHOTFiR1FnYm05MElHSmxJSEoxYm01cGJtY2dhVzRnYzNSeWFXTjBJRzF2WkdVc0lITnZJSFJvWlNCaFltOTJaVnh1SUNBdkx5QmhjM05wWjI1dFpXNTBJSE5vYjNWc1pDQmhiSGRoZVhNZ2QyOXlheUIxYm14bGMzTWdjMjl0WlhSb2FXNW5JR2x6SUcxcGMyTnZibVpwWjNWeVpXUXVJRXAxYzNSY2JpQWdMeThnYVc0Z1kyRnpaU0J5ZFc1MGFXMWxMbXB6SUdGalkybGtaVzUwWVd4c2VTQnlkVzV6SUdsdUlITjBjbWxqZENCdGIyUmxMQ0IzWlNCallXNGdaWE5qWVhCbFhHNGdJQzh2SUhOMGNtbGpkQ0J0YjJSbElIVnphVzVuSUdFZ1oyeHZZbUZzSUVaMWJtTjBhVzl1SUdOaGJHd3VJRlJvYVhNZ1kyOTFiR1FnWTI5dVkyVnBkbUZpYkhrZ1ptRnBiRnh1SUNBdkx5QnBaaUJoSUVOdmJuUmxiblFnVTJWamRYSnBkSGtnVUc5c2FXTjVJR1p2Y21KcFpITWdkWE5wYm1jZ1JuVnVZM1JwYjI0c0lHSjFkQ0JwYmlCMGFHRjBJR05oYzJWY2JpQWdMeThnZEdobElIQnliM0JsY2lCemIyeDFkR2x2YmlCcGN5QjBieUJtYVhnZ2RHaGxJR0ZqWTJsa1pXNTBZV3dnYzNSeWFXTjBJRzF2WkdVZ2NISnZZbXhsYlM0Z1NXWmNiaUFnTHk4Z2VXOTFKM1psSUcxcGMyTnZibVpwWjNWeVpXUWdlVzkxY2lCaWRXNWtiR1Z5SUhSdklHWnZjbU5sSUhOMGNtbGpkQ0J0YjJSbElHRnVaQ0JoY0hCc2FXVmtJR0ZjYmlBZ0x5OGdRMU5RSUhSdklHWnZjbUpwWkNCR2RXNWpkR2x2Yml3Z1lXNWtJSGx2ZFNkeVpTQnViM1FnZDJsc2JHbHVaeUIwYnlCbWFYZ2daV2wwYUdWeUlHOW1JSFJvYjNObFhHNGdJQzh2SUhCeWIySnNaVzF6TENCd2JHVmhjMlVnWkdWMFlXbHNJSGx2ZFhJZ2RXNXBjWFZsSUhCeVpXUnBZMkZ0Wlc1MElHbHVJR0VnUjJsMFNIVmlJR2x6YzNWbExseHVJQ0JHZFc1amRHbHZiaWhjSW5KY0lpd2dYQ0p5WldkbGJtVnlZWFJ2Y2xKMWJuUnBiV1VnUFNCeVhDSXBLSEoxYm5ScGJXVXBPMXh1ZlZ4dUlpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHRiMlIxYkdVcElIdGNibHgwYVdZZ0tDRnRiMlIxYkdVdWQyVmljR0ZqYTFCdmJIbG1hV3hzS1NCN1hHNWNkRngwYlc5a2RXeGxMbVJsY0hKbFkyRjBaU0E5SUdaMWJtTjBhVzl1S0NrZ2UzMDdYRzVjZEZ4MGJXOWtkV3hsTG5CaGRHaHpJRDBnVzEwN1hHNWNkRngwTHk4Z2JXOWtkV3hsTG5CaGNtVnVkQ0E5SUhWdVpHVm1hVzVsWkNCaWVTQmtaV1poZFd4MFhHNWNkRngwYVdZZ0tDRnRiMlIxYkdVdVkyaHBiR1J5Wlc0cElHMXZaSFZzWlM1amFHbHNaSEpsYmlBOUlGdGRPMXh1WEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2h0YjJSMWJHVXNJRndpYkc5aFpHVmtYQ0lzSUh0Y2JseDBYSFJjZEdWdWRXMWxjbUZpYkdVNklIUnlkV1VzWEc1Y2RGeDBYSFJuWlhRNklHWjFibU4wYVc5dUtDa2dlMXh1WEhSY2RGeDBYSFJ5WlhSMWNtNGdiVzlrZFd4bExtdzdYRzVjZEZ4MFhIUjlYRzVjZEZ4MGZTazdYRzVjZEZ4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLRzF2WkhWc1pTd2dYQ0pwWkZ3aUxDQjdYRzVjZEZ4MFhIUmxiblZ0WlhKaFlteGxPaUIwY25WbExGeHVYSFJjZEZ4MFoyVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JseDBYSFJjZEZ4MGNtVjBkWEp1SUcxdlpIVnNaUzVwTzF4dVhIUmNkRngwZlZ4dVhIUmNkSDBwTzF4dVhIUmNkRzF2WkhWc1pTNTNaV0p3WVdOclVHOXNlV1pwYkd3Z1BTQXhPMXh1WEhSOVhHNWNkSEpsZEhWeWJpQnRiMlIxYkdVN1hHNTlPMXh1SWl3aWFXMXdiM0owSUh0TlpYTnpZV2RsTENCRmRtVnVkSE1zSUZOMVkyTmxjM05UZEdGMFpYMGdabkp2YlNBbkxpOU5aWE56WVdkbGN5YzdYRzVwYlhCdmNuUWdlMU53YVVOdmJtWnBaeXdnVkhKaGJuTmhZM1JwYjI1UGNIUnBiMjV6ZlNCbWNtOXRJQ2N1TDFOd2FVMXZaR1ZzY3ljN1hHNXBiWEJ2Y25RZ2UxSmxjWFZsYzNSSlpFaGxiSEJsY24wZ1puSnZiU0FuTGk5U1pYRjFaWE4wU1dSSVpXeHdaWEluTzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUTJGemFHOTFkRTl1YkhsU1pYRjFaWE4wWEc1N0lDQmNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGhiVzkxYm5SRFpXNTBjeXdnY0c5elVtVm1TV1FwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsQnZjMUpsWmtsa0lEMGdjRzl6VW1WbVNXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyRnphRzkxZEVGdGIzVnVkQ0E5SUdGdGIzVnVkRU5sYm5Sek8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVUzVnlZMmhoY21kbFFXMXZkVzUwSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjZ1BTQnVaWGNnVTNCcFEyOXVabWxuS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VDNCMGFXOXVjeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZiazl3ZEdsdmJuTW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnVkc5TlpYTnpZV2RsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtZWFJoSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKd2IzTmZjbVZtWDJsa1hDSTZJSFJvYVhNdVVHOXpVbVZtU1dRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW1OaGMyaGZZVzF2ZFc1MFhDSTZJSFJvYVhNdVEyRnphRzkxZEVGdGIzVnVkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2ljM1Z5WTJoaGNtZGxYMkZ0YjNWdWRGd2lPaUIwYUdsekxsTjFjbU5vWVhKblpVRnRiM1Z1ZEZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JRY21sdWRFMWxjbU5vWVc1MFEyOXdlU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JRY205dGNIUkdiM0pEZFhOMGIyMWxja052Y0hsUGJrVm1kSEJ2Y3lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSVGFXZHVZWFIxY21WR2JHOTNUMjVGWm5Sd2IzTWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeTVCWkdSU1pXTmxhWEIwUTI5dVptbG5LR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGs5d2RHbHZibk11UVdSa1QzQjBhVzl1Y3loa1lYUmhLVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFMWxjM05oWjJVb1VtVnhkV1Z6ZEVsa1NHVnNjR1Z5TGtsa0tGd2lZM05vYjNWMFhDSXBMQ0JGZG1WdWRITXVRMkZ6YUc5MWRFOXViSGxTWlhGMVpYTjBMQ0JrWVhSaExDQjBjblZsS1R0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCRFlYTm9iM1YwVDI1c2VWSmxjM0J2Ym5ObFhHNTdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMGdQU0J0TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbEpsY1hWbGMzUkpaQ0E5SUcwdVNXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQnRMa1JoZEdFdWNHOXpYM0psWmw5cFpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VFkyaGxiV1ZPWVcxbElEMGdiUzVFWVhSaExuTmphR1Z0WlY5dVlXMWxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsTjFZMk5sYzNNZ1BTQnRMa2RsZEZOMVkyTmxjM05UZEdGMFpTZ3BJRDA5SUZOMVkyTmxjM05UZEdGMFpTNVRkV05qWlhOek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRGSlNUaWdwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoVzF3aWNuSnVYQ0pkTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEVOaGMyaHZkWFJCYlc5MWJuUW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZVnRjSW1OaGMyaGZZVzF2ZFc1MFhDSmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRUpoYm10T2IyNURZWE5vUVcxdmRXNTBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWENKaVlXNXJYMjV2Ym1OaGMyaGZZVzF2ZFc1MFhDSmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRUpoYm10RFlYTm9RVzF2ZFc1MEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRmJYQ0ppWVc1clgyTmhjMmhmWVcxdmRXNTBYQ0pkTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCSFpYUkRkWE4wYjIxbGNsSmxZMlZwY0hRb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlWdGNJbU4xYzNSdmJXVnlYM0psWTJWcGNIUmNJbDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwVFdWeVkyaGhiblJTWldObGFYQjBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWENKdFpYSmphR0Z1ZEY5eVpXTmxhWEIwWENKZE8xeHVJQ0FnSUgxY2JpQWdJQ0JjYmlBZ0lDQkhaWFJTWlhOd2IyNXpaVlJsZUhRb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlWdGNJbWh2YzNSZmNtVnpjRzl1YzJWZmRHVjRkRndpWFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSU1pYTndiMjV6WlVOdlpHVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZVnRjSW1odmMzUmZjbVZ6Y0c5dWMyVmZZMjlrWlZ3aVhUdGNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdSMlYwVkdWeWJXbHVZV3hTWldabGNtVnVZMlZKWkNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaFcxd2lkR1Z5YldsdVlXeGZjbVZtWDJsa1hDSmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRUZqWTI5MWJuUlVlWEJsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdGYlhDSmhZMk52ZFc1MFgzUjVjR1ZjSWwwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFFYVjBhRU52WkdVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlWdGNJbUYxZEdoZlkyOWtaVndpWFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSQ1lXNXJSR0YwWlNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaFcxd2lZbUZ1YTE5a1lYUmxYQ0pkTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEVKaGJtdFVhVzFsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdGYlhDSmlZVzVyWDNScGJXVmNJbDA3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUVkbGRFMWhjMnRsWkZCaGJpZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhXMXdpYldGemEyVmtYM0JoYmx3aVhUdGNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdSMlYwVkdWeWJXbHVZV3hKWkNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaFcxd2lkR1Z5YldsdVlXeGZhV1JjSWwwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnVjJGelRXVnlZMmhoYm5SU1pXTmxhWEIwVUhKcGJuUmxaQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoVzF3aWJXVnlZMmhoYm5SZmNtVmpaV2x3ZEY5d2NtbHVkR1ZrWENKZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUZkaGMwTjFjM1J2YldWeVVtVmpaV2x3ZEZCeWFXNTBaV1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVZ0Y0ltTjFjM1J2YldWeVgzSmxZMlZwY0hSZmNISnBiblJsWkZ3aVhUdGNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdSMlYwVTNWeVkyaGhjbWRsUVcxdmRXNTBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWENKemRYSmphR0Z5WjJWZllXMXZkVzUwWENKZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRGSmxjM0J2Ym5ObFZtRnNkV1VvWVhSMGNtbGlkWFJsS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVZ0aGRIUnlhV0oxZEdWZE8xeHVJQ0FnSUgxY2JseHVmU0lzSW1WNGNHOXlkQ0JqYjI1emRDQkRiMjV1WldOMGFXOXVVM1JoZEdVZ1BTQjdYRzRnSUNBZ1JHbHpZMjl1Ym1WamRHVmtPaUFuUkdselkyOXVibVZqZEdWa0p5eGNiaUFnSUNCRGIyNXVaV04wYVc1bk9pQW5RMjl1Ym1WamRHbHVaeWNzWEc0Z0lDQWdRMjl1Ym1WamRHVmtPaUFuUTI5dWJtVmpkR1ZrSjF4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElGTlFTVjlRVWs5VVQwTlBUQ0FnSUQwZ0ozTndhUzR5TGpZdU1DYzdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QkRiMjV1WldOMGFXOXVVM1JoZEdWRmRtVnVkRUZ5WjNOY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGpiMjV1WldOMGFXOXVVM1JoZEdVcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNXVaV04wYVc5dVUzUmhkR1VnUFNCamIyNXVaV04wYVc5dVUzUmhkR1U3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVFdWemMyRm5aVVYyWlc1MFFYSm5jMXh1ZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0cxbGMzTmhaMlVwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVOWlhOellXZGxJRDBnYldWemMyRm5aVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJEYjI1dVpXTjBhVzl1SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1QlpHUnlaWE56SUNBZ0lEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1dVpXTjBaV1FnSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVM1JoZEdVZ0lDQWdJQ0E5SUVOdmJtNWxZM1JwYjI1VGRHRjBaUzVFYVhOamIyNXVaV04wWldRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VTNCcFVISnZkRzlqYjJ3Z1BTQlRVRWxmVUZKUFZFOURUMHc3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM2R6SUNBZ0lDQWdJQ0E5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJQ0FnYVdZb2RIbHdaVzltSUZkbFlsTnZZMnRsZENBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25SVzUyYVhKdmJtMWxiblFnWkc5bGN5QnViM1FnYzNWd2NHOXlkQ0JYWldKVGIyTnJaWFJ6SnlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCRGIyNXVaV04wS0ZWelpWTmxZM1Z5WlZkbFlsTnZZMnRsZEhNcElIdGNiaUFnSUNBZ0lDQWdhV1lvZEdocGN5NVRkR0YwWlNBOVBUMGdRMjl1Ym1WamRHbHZibE4wWVhSbExrTnZibTVsWTNSbFpDQjhmQ0IwYUdsekxsTjBZWFJsSUQwOVBTQkRiMjV1WldOMGFXOXVVM1JoZEdVdVEyOXVibVZqZEdsdVp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZV3h5WldGa2VTQmpiMjV1WldOMFpXUWdiM0lnWTI5dWJtVmpkR2x1Wnk0Z1pHbHpZMjl1Ym1WamRDQm1hWEp6ZEM1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVM1JoZEdVZ1BTQkRiMjV1WldOMGFXOXVVM1JoZEdVdVEyOXVibVZqZEdsdVp6dGNibHh1SUNBZ0lDQWdJQ0F2TDBOeVpXRjBaU0JoSUc1bGR5QnpiMk5yWlhRZ2FXNXpkR0Z1WTJVZ2MzQmxZMmxtZVdsdVp5QjBhR1VnZFhKc0xDQlRVRWtnY0hKdmRHOWpiMndnWVc1a0lGZGxZbk52WTJ0bGRDQjBieUIxYzJVdVhHNGdJQ0FnSUNBZ0lDOHZWR2hsSUhkcGJHd2dZM0psWVhSbElHRWdWRU5RTDBsUUlITnZZMnRsZENCamIyNXVaV04wYVc5dUlIUnZJSFJvWlNCd2NtOTJhV1JsWkNCVlVrd2dZVzVrSUhCbGNtWnZjbTBnU0ZSVVVDQjNaV0p6YjJOclpYUWdibVZuYjNScFlYUnBiMjVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkM01nSUNBZ0lDQWdJQ0FnSUQwZ2JtVjNJRmRsWWxOdlkydGxkQ2gwYUdsekxrRmtaSEpsYzNNc0lIUm9hWE11VTNCcFVISnZkRzlqYjJ3cE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M2N5NXZibTl3Wlc0Z0lDQWdQU0FvS1NBOVBpQjBhR2x6TG5CdmJHeFhaV0pUYjJOclpYUkRiMjV1WldOMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM2R6TG05dWJXVnpjMkZuWlNBOUlDaHdZWGxzYjJGa0tTQTlQaUIwYUdsekxtOXVUV1Z6YzJGblpWSmxZMlZwZG1Wa0tIQmhlV3h2WVdRcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5M2N5NXZibU5zYjNObElDQWdQU0FvS1NBOVBpQjBhR2x6TG05dVEyeHZjMlZrS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNkekxtOXVaWEp5YjNJZ0lDQTlJQ2hsY25JcElEMCtJSFJvYVhNdWIyNUZjbkp2Y2lobGNuSXBPMXh1WEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZERiMjV1WldOMGFXOXVVM1JoZEhWelEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklHNWxkeUJEYjI1dVpXTjBhVzl1VTNSaGRHVkZkbVZ1ZEVGeVozTW9RMjl1Ym1WamRHbHZibE4wWVhSbExrTnZibTVsWTNScGJtY3BmU2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJRVJwYzJOdmJtNWxZM1FvS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsTjBZWFJsSUQwOUlFTnZibTVsWTNScGIyNVRkR0YwWlM1RWFYTmpiMjV1WldOMFpXUXBJSEpsZEhWeWJqdGNibHh1SUNBZ0lDQWdJQ0JwWmloMGFHbHpMbDkzY3lBbUppQjBhR2x6TGw5M2N5NXlaV0ZrZVZOMFlYUmxJQ0U5SUhSb2FYTXVYM2R6TGtOTVQxTkZSQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmQzTXVZMnh2YzJVb0tUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5M2N5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZDNNdWIyNXZjR1Z1SUNBZ0lEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzZHpMbTl1YldWemMyRm5aU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkzY3k1dmJtTnNiM05sSUNBZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmQzTXViMjVsY25KdmNpQWdJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXViMjVEYkc5elpXUW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlRaVzVrS0cxbGMzTmhaMlVwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZDNNdWMyVnVaQ2h0WlhOellXZGxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZiazl3Wlc1bFpDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVRkR0YwWlNBOUlFTnZibTVsWTNScGIyNVRkR0YwWlM1RGIyNXVaV04wWldRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dWJtVmpkR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0owTnZibTVsWTNScGIyNVRkR0YwZFhORGFHRnVaMlZrSnl3Z2UyUmxkR0ZwYkRvZ2JtVjNJRU52Ym01bFkzUnBiMjVUZEdGMFpVVjJaVzUwUVhKbmN5aERiMjV1WldOMGFXOXVVM1JoZEdVdVEyOXVibVZqZEdWa0tYMHBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZia05zYjNObFpDZ3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjV1WldOMFpXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VGRHRjBaU0E5SUVOdmJtNWxZM1JwYjI1VGRHRjBaUzVFYVhOamIyNXVaV04wWldRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNkeklEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KME52Ym01bFkzUnBiMjVUZEdGMGRYTkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dibVYzSUVOdmJtNWxZM1JwYjI1VGRHRjBaVVYyWlc1MFFYSm5jeWhEYjI1dVpXTjBhVzl1VTNSaGRHVXVSR2x6WTI5dWJtVmpkR1ZrS1gwcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCd2IyeHNWMlZpVTI5amEyVjBRMjl1Ym1WamRHbHZiaWhqYjNWdWRDQTlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWR2x0Wlc5MWRDQjBjbmxwYm1jZ2RHOGdZMjl1Ym1WamRDQmhablJsY2lBeU1DQXFJREl3TUcxeklEMGdOREF3TUNCdGMxeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdhV1lvZEdocGN5NWZkM011Y21WaFpIbFRkR0YwWlNBOVBUMGdkR2hwY3k1ZmQzTXVUMUJGVGlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXZiazl3Wlc1bFpDZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaWhqYjNWdWRDQThJREl3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjNWdWRDc3JPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCMGFHbHpMbkJ2Ykd4WFpXSlRiMk5yWlhSRGIyNXVaV04wYVc5dUtHTnZkVzUwS1N3Z01qQXdLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11UkdselkyOXVibVZqZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2IyNU5aWE56WVdkbFVtVmpaV2wyWldRb2JXVnpjMkZuWlNrZ2UxeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QkRkWE4wYjIxRmRtVnVkQ2duVFdWemMyRm5aVkpsWTJWcGRtVmtKeXdnZTJSbGRHRnBiRG9nYm1WM0lFMWxjM05oWjJWRmRtVnVkRUZ5WjNNb2JXVnpjMkZuWlM1a1lYUmhLWDBwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J2YmtWeWNtOXlLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QkRkWE4wYjIxRmRtVnVkQ2duUlhKeWIzSlNaV05sYVhabFpDY3NJSHRrWlhSaGFXdzZJRzVsZHlCTlpYTnpZV2RsUlhabGJuUkJjbWR6S0dWeWNpbDlLU2s3WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElHcHpVMGhCSUdaeWIyMGdKMnB6YzJoaEp6dGNibWx0Y0c5eWRDQmhaWE5xY3lCbWNtOXRJQ2RoWlhNdGFuTW5PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdRM0o1Y0hSdklIdGNiaUFnSUNCY2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNibHh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRVZ1WTNKNWNIUWdZU0JpYkc5amF5QjFjMmx1WnlCRFFrTWdZVzVrSUZCTFExTTNMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltdGxlVndpUGxSb1pTQnJaWGtnZG1Gc2RXVThMM0JoY21GdFBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpWkdGMFlWd2lQbFJvWlNCdFpYTnpZV2RsSUhSdklHVnVZM0o1Y0hROEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4eVpYUjFjbTV6UGxKbGRIVnlibk1nZEdobElISmxjM1ZzZEdsdVp5QmxibU55ZVhCMFpXUWdjM1J5YVc1bklHUmhkR0VnWVhNZ1NFVllMand2Y21WMGRYSnVjejVjYmlBZ0lDQnpkR0YwYVdNZ1FXVnpSVzVqY25sd2RDQW9hMlY1TENCa1lYUmhLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQmllWFJsY3lBOUlHRmxjMnB6TG5WMGFXeHpMbWhsZUM1MGIwSjVkR1Z6S0d0bGVTazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHbDJJRDBnV3pCNE1EQXNJREI0TURBc0lEQjRNREFzSURCNE1EQXNJREI0TURBc0lEQjRNREFzSURCNE1EQXNJREI0TURBc0lEQjRNREFzSURCNE1EQXNJREI0TURBc0lEQjRNREFzSURCNE1EQXNJREI0TURBc0lEQjRNREFzSURCNE1EQWdYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkR1Y0ZEVKNWRHVnpJRDBnWVdWemFuTXVjR0ZrWkdsdVp5NXdhMk56Tnk1d1lXUW9ZV1Z6YW5NdWRYUnBiSE11ZFhSbU9DNTBiMEo1ZEdWektHUmhkR0VwS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWVdWelEySmpJRDBnYm1WM0lHRmxjMnB6TGsxdlpHVlBaazl3WlhKaGRHbHZiaTVqWW1Nb1lubDBaWE1zSUdsMktUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pXNWpjbmx3ZEdWa1FubDBaWE1nUFNCaFpYTkRZbU11Wlc1amNubHdkQ2gwWlhoMFFubDBaWE1wTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsYm1OeWVYQjBaV1JUZEhKcGJtY2dQU0JoWlhOcWN5NTFkR2xzY3k1b1pYZ3Vabkp2YlVKNWRHVnpLR1Z1WTNKNWNIUmxaRUo1ZEdWektUdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaVzVqY25sd2RHVmtVM1J5YVc1bk8xeHVJQ0FnSUgxY2JpQWdJQ0JjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJFWldOeWVYQjBJR0VnWW14dlkyc2dkWE5wYm1jZ1lTQkRRa01nWVc1a0lGQkxRMU0zTGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbXRsZVZ3aVBsUm9aU0JyWlhrZ2RtRnNkV1U4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aVpHRjBZVndpUG5Sb1pTQmtZWFJoSUhSdklHUmxZM0o1Y0hROEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4eVpYUjFjbTV6UGxKbGRIVnlibk1nZEdobElISmxjM1ZzZEdsdVp5QmtZWFJoSUdSbFkzSjVjSFJsWkNCcGJpQndiR0ZwYm5SbGVIUXVQQzl5WlhSMWNtNXpQbHh1SUNBZ0lITjBZWFJwWXlCQlpYTkVaV055ZVhCMEtHdGxlU3dnWkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1lubDBaWE1nUFNCaFpYTnFjeTUxZEdsc2N5NW9aWGd1ZEc5Q2VYUmxjeWhyWlhrcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCcGRpQTlJRnN3ZURBd0xDQXdlREF3TENBd2VEQXdMQ0F3ZURBd0xDQXdlREF3TENBd2VEQXdMQ0F3ZURBd0xDQXdlREF3TENBd2VEQXdMQ0F3ZURBd0xDQXdlREF3TENBd2VEQXdMQ0F3ZURBd0xDQXdlREF3TENBd2VEQXdMQ0F3ZURBd0lGMDdYRzRnSUNBZ0lDQWdJR052Ym5OMElHVnVZM0o1Y0hSbFpFSjVkR1Z6SUQwZ1lXVnphbk11ZFhScGJITXVhR1Y0TG5SdlFubDBaWE1vWkdGMFlTazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHRmxjME5pWXlBOUlHNWxkeUJoWlhOcWN5NU5iMlJsVDJaUGNHVnlZWFJwYjI0dVkySmpLR0o1ZEdWekxDQnBkaWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JsWTNKNWNIUmxaRUo1ZEdWeklEMGdZV1Z6UTJKakxtUmxZM0o1Y0hRb1pXNWpjbmx3ZEdWa1FubDBaWE1wTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrWldOeWVYQjBaV1FnUFNCaFpYTnFjeTUxZEdsc2N5NTFkR1k0TG1aeWIyMUNlWFJsY3loaFpYTnFjeTV3WVdSa2FXNW5MbkJyWTNNM0xuTjBjbWx3S0dSbFkzSjVjSFJsWkVKNWRHVnpLU2s3WEc0Z0lDQWdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmtaV055ZVhCMFpXUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdRMkZzWTNWc1lYUmxjeUIwYUdVZ1NFMUJRMU5JUVRJMU5pQnphV2R1WVhSMWNtVWdiMllnWVNCdFpYTnpZV2RsTGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbXRsZVZ3aVBsUm9aU0JJYldGaklFdGxlU0JoY3lCSVJWZzhMM0JoY21GdFBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpYldWemMyRm5aVlJ2VTJsbmJsd2lQbFJvWlNCdFpYTnpZV2RsSUhSdklITnBaMjQ4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh5WlhSMWNtNXpQbFJvWlNCSVRVRkRVMGhCTWpVMklITnBaMjVoZEhWeVpTQmhjeUJoSUdobGVDQnpkSEpwYm1jOEwzSmxkSFZ5Ym5NK1hHNGdJQ0FnYzNSaGRHbGpJRWh0WVdOVGFXZHVZWFIxY21Vb2EyVjVMQ0J0WlhOellXZGxWRzlUYVdkdUtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCemFHRlBZbW9nUFNCdVpYY2dhbk5UU0VFb1hDSlRTRUV0TWpVMlhDSXNJRndpVkVWWVZGd2lLVHRjYmx4dUlDQWdJQ0FnSUNCemFHRlBZbW91YzJWMFNFMUJRMHRsZVNoclpYa3NKMGhGV0NjcE8xeHVJQ0FnSUNBZ0lDQnphR0ZQWW1vdWRYQmtZWFJsS0cxbGMzTmhaMlZVYjFOcFoyNHBPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5vWVU5aWFpNW5aWFJJVFVGREtGd2lTRVZZWENJcE8xeHVJQ0FnSUgxY2JseHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dWR2hwY3lCMWRHbHNhWFI1SUdaMWJtTjBhVzl1SUdOaGJHTjFiR0YwWlhNZ2RHaGxJRk5JUVMweU5UWWdkbUZzZFdVZ2FXNGdhR1Y0WVdSbFkybHRZV3dnWm05eWJXRjBYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlIWmhiSFZsSUhSb1pTQjJZV3gxWlNCMGJ5QmlaU0JvWVhOb1pXUmNiaUFnSUNBZ0tpOWNiaUFnSUNCemRHRjBhV01nUjJWdVpYSmhkR1ZJWVhOb0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6YUdGUFltb2dQU0J1WlhjZ2FuTlRTRUVvSjFOSVFTMHlOVFluTENBblNFVllKeWs3WEc0Z0lDQWdJQ0FnSUhOb1lVOWlhaTUxY0dSaGRHVW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCemFHRklZWE5vSUQwZ2MyaGhUMkpxTG1kbGRFaGhjMmdvSjBoRldDY3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMmhoU0dGemFEdGNiaUFnSUNCOVhHNTlYRzRpTENKcGJYQnZjblFnUWs0Z1puSnZiU0FuWW00dWFuTW5PMXh1WEc0dkx5QlVhR2x6SUdOeVpXRjBaWE1nZEdobElIQnlhWFpoZEdVZ1lXNWtJSEIxWW14cFl5QnJaWGx6SUdadmNpQmthV1ptYVdVdGFHVnNiRzFoYmlBb2FIUjBjSE02THk5bGJpNTNhV3RwY0dWa2FXRXViM0puTDNkcGEya3ZSR2xtWm1sbEpVVXlKVGd3SlRrelNHVnNiRzFoYmw5clpYbGZaWGhqYUdGdVoyVWpRM0o1Y0hSdlozSmhjR2hwWTE5bGVIQnNZVzVoZEdsdmJpbGNiaTh2SUZKRlVWVkpVa1ZOUlU1VVV6b2dZbTR1YW5OY2JpOHZJRUZUVTFWTlVGUkpUMDVUT2lCSmJuQjFkSE1nZEc4Z2RHaGxJR1oxYm1OMGFXOXVjeUJoY21VZ2FHVjRZV1JsWTJsdFlXd2djM1J5YVc1bmMxeHVYRzR2THlBOGMzVnRiV0Z5ZVQ1Y2JpOHZJRlJvYVhNZ1kyeGhjM01nYVcxd2JHVnRaVzUwY3lCMGFHVWdSR2xtWm1sbExVaGxiR3h0WVc0Z1lXeG5iM0pwZEdodElIVnphVzVuSUVKcFowbHVkR1ZuWlhKekxseHVMeThnU1hRZ1kyRnVJR1J2SUhSb1pTQXpJRzFoYVc0Z2RHaHBibWR6T2x4dUx5OGdNUzRnUjJWdVpYSmhkR1VnWVNCeVlXNWtiMjBnVUhKcGRtRjBaU0JMWlhrZ1ptOXlJSGx2ZFM1Y2JpOHZJREl1SUVkbGJtVnlZWFJsSUhsdmRYSWdVSFZpYkdsaklFdGxlU0JpWVhObFpDQnZiaUI1YjNWeUlGQnlhWFpoZEdVZ1MyVjVMbHh1THk4Z015NGdSMlZ1WlhKaGRHVWdkR2hsSUZObFkzSmxkQ0JuYVhabGJpQjBhR1ZwY2lCUWRXSnNhV01nUzJWNUlHRnVaQ0I1YjNWeUlGQnlhWFpoZEdVZ1MyVjVYRzR2THlCd0lHRnVaQ0JuSUdGeVpTQjBhR1VnYzJoaGNtVmtJR052Ym5OMFlXNTBjeUJtYjNJZ2RHaGxJR0ZzWjI5eWFYUm9iU3dnWVd0aElIQnlhVzFsVUNCaGJtUWdjSEpwYldWSExseHVMeThnUEM5emRXMXRZWEo1UGx4dVpYaHdiM0owSUdOc1lYTnpJRVJwWm1acFpVaGxiR3h0WVc0Z2UxeHVYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSWdLQ2tnZTF4dVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1IyVnVaWEpoZEdWeklHRWdjbUZ1Wkc5dElGQnlhWFpoZEdVZ1MyVjVJSFJvWVhRZ2VXOTFJR05oYmlCMWMyVXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWNGd2lQand2Y0dGeVlXMCtYRzRnSUNBZ0x5OGdQSEpsZEhWeWJuTStVbUZ1Wkc5dElGQnlhWFpoZEdVZ1MyVjVQQzl5WlhSMWNtNXpQbHh1SUNBZ0lGSmhibVJ2YlZCeWFYWmhkR1ZMWlhrb2JXRjRWbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUcxaGVGWmhiSFZsUWs0Z0lDQWdJQ0E5SUc1bGR5QkNUaWh0WVhoV1lXeDFaU2s3WEc0Z0lDQWdJQ0FnSUd4bGRDQnphR2xtZEVScGMzUmhibU5sSUNBZ1BTQk5ZWFJvTG1ac2IyOXlLQ2hOWVhSb0xuSmhibVJ2YlNncElDb2dNVEF3TUNrZ0t5QXhLVHRjYmlBZ0lDQWdJQ0FnYkdWMElISmhibVJDYVhSSmJuUWdJQ0FnSUNBOUlHMWhlRlpoYkhWbFFrNHVjMmh5YmloemFHbG1kRVJwYzNSaGJtTmxLVHNnTHk4Z1VtbG5hSFFnYzJocFpuUWdaR2wyYVdSbGN5QmllU0JoSUhCdmQyVnlJRzltSURKY2JpQWdJQ0FnSUNBZ2JHVjBJRzFwYmlBZ0lDQWdJQ0FnSUNBZ0lDQTlJRzVsZHlCQ1RpZ3lLVHRjYmx4dUlDQWdJQ0FnSUNCcFppaHlZVzVrUW1sMFNXNTBMbU50Y0NodGFXNHBJRDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYldsdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSEpoYm1SQ2FYUkpiblE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnUTJGc1kzVnNZWFJsY3lCMGFHVWdVSFZpYkdsaklFdGxlU0JtY205dElHRWdVSEpwZG1GMFpTQkxaWGt1WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2ljRndpUGp3dmNHRnlZVzArWEc0Z0lDQWdMeThnUEhCaGNtRnRJRzVoYldVOVhDSm5YQ0krUEM5d1lYSmhiVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0luQnlhWFpoZEdWTFpYbGNJajQ4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh5WlhSMWNtNXpQbEIxWW14cFl5QkxaWGtnS0VobGVDazhMM0psZEhWeWJuTStYRzRnSUNBZ1VIVmliR2xqUzJWNUtIQXNJR2NzSUhCeWFYWmhkR1ZMWlhrcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1lVaGxlQ0E5SUc1bGR5QkNUaWh3Y21sMllYUmxTMlY1TENBeE5pazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHZElaWGdnUFNCdVpYY2dRazRvWnl3Z01UWXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnRiMjUwVUhKcGJXVWdQU0JDVGk1dGIyNTBLRzVsZHlCQ1RpaHdMQ0F4TmlrcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCblVtVmtJRDBnWjBobGVDNTBiMUpsWkNodGIyNTBVSEpwYldVcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpXTnlaWFFnUFNCblVtVmtMbkpsWkZCdmR5aGhTR1Y0S1M1bWNtOXRVbVZrS0NrdWRHOVRkSEpwYm1jb01UWXBPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ6WldOeVpYUTdJQ0JjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJEWVd4amRXeGhkR1Z6SUhSb1pTQnphR0Z5WldRZ2MyVmpjbVYwSUdkcGRtVnVJSFJvWldseUlGQjFZbXhwWXlCTFpYa2dLRUVwSUdGdVpDQjViM1Z5SUZCeWFYWmhkR1VnUzJWNUlDaGlLVnh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0luQmNJajQ4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWRHaGxhWEpRZFdKc2FXTkxaWGxjSWo0OEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2llVzkxY2xCeWFYWmhkR1ZMWlhsY0lqNDhMM0JoY21GdFBseHVJQ0FnSUM4dklEeHlaWFIxY201elBqd3ZjbVYwZFhKdWN6NWNiaUFnSUNCVFpXTnlaWFFvY0N3Z2RHaGxhWEpRZFdKc2FXTkxaWGtzSUhsdmRYSlFjbWwyWVhSbFMyVjVLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR0pJWlhnZ1BTQnVaWGNnUWs0b2RHaGxhWEpRZFdKc2FXTkxaWGtzSURFMktUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1FVaGxlQ0E5SUc1bGR5QkNUaWg1YjNWeVVISnBkbUYwWlV0bGVTd2dNVFlwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J0YjI1MFVISnBiV1VnUFNCQ1RpNXRiMjUwS0c1bGR5QkNUaWh3TENBeE5pa3BPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQkNVbVZrSUQwZ1lraGxlQzUwYjFKbFpDaHRiMjUwVUhKcGJXVXBPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJDVW1Wa0xuSmxaRkJ2ZHloQlNHVjRLUzVtY205dFVtVmtLQ2t1ZEc5VGRISnBibWNvTVRZcExuUnZWWEJ3WlhKRFlYTmxLQ2s3WEc0Z0lDQWdmVnh1WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMFYyWlc1MGN5d2dUV1Z6YzJGblpYMGdabkp2YlNBbkxpOU5aWE56WVdkbGN5YzdYRzVwYlhCdmNuUWdlME55ZVhCMGIzMGdabkp2YlNBbkxpOURjbmx3ZEc4bk8xeHVhVzF3YjNKMElIdFRaV055WlhSemZTQm1jbTl0SUNjdUwxTmxZM0psZEhNbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1MyVjVVbTlzYkdsdVowaGxiSEJsY2lCN1hHNGdJQ0FnYzNSaGRHbGpJRkJsY21admNtMUxaWGxTYjJ4c2FXNW5LR3R5VW1WeGRXVnpkQ3dnWTNWeWNtVnVkRk5sWTNKbGRITXBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnYlNBOUlHNWxkeUJOWlhOellXZGxLR3R5VW1WeGRXVnpkQzVKWkN3Z1JYWmxiblJ6TGt0bGVWSnZiR3hTWlhOd2IyNXpaU3dnZTF3aWMzUmhkSFZ6WENJNklGd2lZMjl1Wm1seWJXVmtYQ0o5TENCMGNuVmxLVHRjYmlBZ0lDQWdJQ0FnYkdWMElHNWxkMU5sWTNKbGRITWdQU0J1WlhjZ1UyVmpjbVYwY3loRGNubHdkRzh1UjJWdVpYSmhkR1ZJWVhOb0tHTjFjbkpsYm5SVFpXTnlaWFJ6TGtWdVkwdGxlU2t1ZEc5VmNIQmxja05oYzJVb0tTeERjbmx3ZEc4dVIyVnVaWEpoZEdWSVlYTm9LR04xY25KbGJuUlRaV055WlhSekxraHRZV05MWlhrcExuUnZWWEJ3WlhKRFlYTmxLQ2twTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFdGxlVkp2Ykd4cGJtZFNaWE4xYkhRb2JTd2dibVYzVTJWamNtVjBjeWs3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUzJWNVVtOXNiR2x1WjFKbGMzVnNkQ0I3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYTJWNVVtOXNiR2x1WjBOdmJtWnBjbTFoZEdsdmJpd2dibVYzVTJWamNtVjBjeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMa3RsZVZKdmJHeHBibWREYjI1bWFYSnRZWFJwYjI0Z1BTQnJaWGxTYjJ4c2FXNW5RMjl1Wm1seWJXRjBhVzl1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMazVsZDFObFkzSmxkSE1nUFNCdVpYZFRaV055WlhSek8xeHVJQ0FnSUgxY2JuMWNiaUlzSW1WNGNHOXlkQ0JqYkdGemN5Qk1iMmRuWlhJZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHVnNaVzFsYm5Rc0lHeHBibVZUWlhCbGNtRjBiM0lnUFNBblhGeHVKeWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbUoxWm1abGNpQWdJQ0FnUFNCYlhUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwSUNBZ0lEMGdaV3hsYldWdWREdGNiaUFnSUNBZ0lDQWdkR2hwY3k1c2FXNWxVMlZ3WlhKaGRHOXlJRDBnYkdsdVpWTmxjR1Z5WVhSdmNqdGNiaUFnSUNCOVhHNWNiaUFnSUNCSmJtWnZLQzR1TG1GeVozTXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWlkV1ptWlhJdWNIVnphQ2hoY21kekxtcHZhVzRvSnlBbktTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxibVJsY2lncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVSbFluVm5LQzR1TG1GeVozTXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWlkV1ptWlhJdWNIVnphQ2hoY21kekxtcHZhVzRvSnlBbktTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxibVJsY2lncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUZkaGNtNG9MaTR1WVhKbmN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtSjFabVpsY2k1d2RYTm9LR0Z5WjNNdWFtOXBiaWduSUNjcEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVnVaR1Z5S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUlhKeWIzSW9MaTR1WVhKbmN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtSjFabVpsY2k1d2RYTm9LR0Z5WjNNdWFtOXBiaWduSUNjcEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVnVaR1Z5S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUTI5dWMyOXNaU2d1TGk1aGNtZHpLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktHRnlaM011YW05cGJpZ25JQ2NwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JmY21WdVpHVnlLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUXVhVzV1WlhKVVpYaDBJRDBnZEdocGN5NWlkV1ptWlhJdWFtOXBiaWgwYUdsekxteHBibVZUWlhCbGNtRjBiM0lwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbVZzWlcxbGJuUXVjMk55YjJ4c1ZHOXdJRDBnZEdocGN5NWxiR1Z0Wlc1MExuTmpjbTlzYkVobGFXZG9kRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkRiR1ZoY2lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aWRXWm1aWElnUFNCYlhUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVnVaR1Z5S0NrN1hHNGdJQ0FnZlZ4dWZWeHVJaXdpYVcxd2IzSjBJSHREY25sd2RHOTlJR1p5YjIwZ0p5NHZRM0o1Y0hSdkp6dGNibHh1THk4Z1BITjFiVzFoY25rK1hHNHZMeUJGZG1WdWRITWdjM1JoZEdsallXeHNlU0JrWldOc1lYSmxjeUIwYUdVZ2RtRnlhVzkxY3lCbGRtVnVkQ0J1WVcxbGN5QnBiaUJ0WlhOellXZGxjeTVjYmk4dklEd3ZjM1Z0YldGeWVUNWNibVY0Y0c5eWRDQmpiMjV6ZENCRmRtVnVkSE1nUFNCN1hHNGdJQ0FnSUZCaGFYSlNaWEYxWlhOMElEb2dYQ0p3WVdseVgzSmxjWFZsYzNSY0lpeGNiaUFnSUNBZ1MyVjVVbVZ4ZFdWemRDQTZJRndpYTJWNVgzSmxjWFZsYzNSY0lpeGNiaUFnSUNBZ1MyVjVVbVZ6Y0c5dWMyVWdPaUJjSW10bGVWOXlaWE53YjI1elpWd2lMRnh1SUNBZ0lDQkxaWGxEYUdWamF5QTZJRndpYTJWNVgyTm9aV05yWENJc1hHNGdJQ0FnSUZCaGFYSlNaWE53YjI1elpTQTZJRndpY0dGcGNsOXlaWE53YjI1elpWd2lMRnh1SUNBZ0lDQkVjbTl3UzJWNWMwRmtkbWxqWlNBNklGd2laSEp2Y0Y5clpYbHpYQ0lzWEc1Y2JpQWdJQ0FnVEc5bmFXNVNaWEYxWlhOMElEb2dYQ0pzYjJkcGJsOXlaWEYxWlhOMFhDSXNYRzRnSUNBZ0lFeHZaMmx1VW1WemNHOXVjMlVnT2lCY0lteHZaMmx1WDNKbGMzQnZibk5sWENJc1hHNWNiaUFnSUNBZ1VHbHVaeUE2SUZ3aWNHbHVaMXdpTEZ4dUlDQWdJQ0JRYjI1bklEb2dYQ0p3YjI1blhDSXNYRzVjYmlBZ0lDQWdVSFZ5WTJoaGMyVlNaWEYxWlhOMElEb2dYQ0p3ZFhKamFHRnpaVndpTEZ4dUlDQWdJQ0JRZFhKamFHRnpaVkpsYzNCdmJuTmxJRG9nWENKd2RYSmphR0Z6WlY5eVpYTndiMjV6WlZ3aUxGeHVJQ0FnSUNCRFlXNWpaV3hVY21GdWMyRmpkR2x2YmxKbGNYVmxjM1FnT2lCY0ltTmhibU5sYkY5MGNtRnVjMkZqZEdsdmJsd2lMRnh1SUNBZ0lDQkRZVzVqWld4VWNtRnVjMkZqZEdsdmJsSmxjM0J2Ym5ObElEb2dYQ0pqWVc1alpXeGZjbVZ6Y0c5dWMyVmNJaXhjYmlBZ0lDQWdSMlYwVEdGemRGUnlZVzV6WVdOMGFXOXVVbVZ4ZFdWemRDQTZJRndpWjJWMFgyeGhjM1JmZEhKaGJuTmhZM1JwYjI1Y0lpeGNiaUFnSUNBZ1IyVjBUR0Z6ZEZSeVlXNXpZV04wYVc5dVVtVnpjRzl1YzJVZ09pQmNJbXhoYzNSZmRISmhibk5oWTNScGIyNWNJaXhjYmlBZ0lDQWdVbVZtZFc1a1VtVnhkV1Z6ZENBNklGd2ljbVZtZFc1a1hDSXNYRzRnSUNBZ0lGSmxablZ1WkZKbGMzQnZibk5sSURvZ1hDSnlaV1oxYm1SZmNtVnpjRzl1YzJWY0lpeGNiaUFnSUNBZ1UybG5ibUYwZFhKbFVtVnhkV2x5WldRZ09pQmNJbk5wWjI1aGRIVnlaVjl5WlhGMWFYSmxaRndpTEZ4dUlDQWdJQ0JUYVdkdVlYUjFjbVZFWldOc2FXNWxaQ0E2SUZ3aWMybG5ibUYwZFhKbFgyUmxZMnhwYm1WY0lpeGNiaUFnSUNBZ1UybG5ibUYwZFhKbFFXTmpaWEIwWldRZ09pQmNJbk5wWjI1aGRIVnlaVjloWTJObGNIUmNJaXhjYmlBZ0lDQWdRWFYwYUVOdlpHVlNaWEYxYVhKbFpDQTZJRndpWVhWMGFHOXlhWE5oZEdsdmJsOWpiMlJsWDNKbGNYVnBjbVZrWENJc1hHNGdJQ0FnSUVGMWRHaERiMlJsUVdSMmFXTmxJRG9nWENKaGRYUm9iM0pwYzJGMGFXOXVYMk52WkdWZllXUjJhV05sWENJc1hHNWNiaUFnSUNBZ1EyRnphRzkxZEU5dWJIbFNaWEYxWlhOMElEb2dYQ0pqWVhOb1hDSXNYRzRnSUNBZ0lFTmhjMmh2ZFhSUGJteDVVbVZ6Y0c5dWMyVWdPaUJjSW1OaGMyaGZjbVZ6Y0c5dWMyVmNJaXhjYmx4dUlDQWdJQ0JOYjNSdlVIVnlZMmhoYzJWU1pYRjFaWE4wSURvZ1hDSnRiM1J2WDNCMWNtTm9ZWE5sWENJc1hHNGdJQ0FnSUUxdmRHOVFkWEpqYUdGelpWSmxjM0J2Ym5ObElEb2dYQ0p0YjNSdlgzQjFjbU5vWVhObFgzSmxjM0J2Ym5ObFhDSXNYRzVjYmlBZ0lDQWdVMlYwZEd4bFVtVnhkV1Z6ZENBNklGd2ljMlYwZEd4bFhDSXNYRzRnSUNBZ0lGTmxkSFJzWlZKbGMzQnZibk5sSURvZ1hDSnpaWFIwYkdWZmNtVnpjRzl1YzJWY0lpeGNiaUFnSUNBZ1UyVjBkR3hsYldWdWRFVnVjWFZwY25sU1pYRjFaWE4wSURvZ1hDSnpaWFIwYkdWdFpXNTBYMlZ1Y1hWcGNubGNJaXhjYmlBZ0lDQWdVMlYwZEd4bGJXVnVkRVZ1Y1hWcGNubFNaWE53YjI1elpTQTZJRndpYzJWMGRHeGxiV1Z1ZEY5bGJuRjFhWEo1WDNKbGMzQnZibk5sWENJc1hHNWNiaUFnSUNBZ1UyVjBVRzl6U1c1bWIxSmxjWFZsYzNRZ09pQmNJbk5sZEY5d2IzTmZhVzVtYjF3aUxGeHVJQ0FnSUNCVFpYUlFiM05KYm1adlVtVnpjRzl1YzJVZ09pQmNJbk5sZEY5d2IzTmZhVzVtYjE5eVpYTndiMjV6WlZ3aUxGeHVYRzRnSUNBZ0lFdGxlVkp2Ykd4U1pYRjFaWE4wSURvZ1hDSnlaWEYxWlhOMFgzVnpaVjl1WlhoMFgydGxlWE5jSWl4Y2JpQWdJQ0FnUzJWNVVtOXNiRkpsYzNCdmJuTmxJRG9nWENKeVpYTndiMjV6WlY5MWMyVmZibVY0ZEY5clpYbHpYQ0lzWEc1Y2JpQWdJQ0FnUlhKeWIzSWdPaUJjSW1WeWNtOXlYQ0lzWEc0Z0lDQWdYRzRnSUNBZ0lFbHVkbUZzYVdSSWJXRmpVMmxuYm1GMGRYSmxJRG9nWENKZlNVNVdRVXhKUkY5VFNVZE9RVlJWVWtWZlhDSXNYRzVjYmlBZ0lDQXZMeUJRWVhrZ1FYUWdWR0ZpYkdVZ1VtVnNZWFJsWkNCTlpYTnpZV2RsYzF4dUlDQWdJRkJoZVVGMFZHRmliR1ZIWlhSVVlXSnNaVU52Ym1acFp5QTZJRndpWjJWMFgzUmhZbXhsWDJOdmJtWnBaMXdpTENBdkx5QnBibU52YldsdVp5NGdWMmhsYmlCbFpuUndiM01nZDJGdWRITWdkRzhnWVhOcklIVnpJR1p2Y2lCUVFGUWdZMjl1Wm1sbmRYSmhkR2x2Ymk1Y2JpQWdJQ0JRWVhsQmRGUmhZbXhsVTJWMFZHRmliR1ZEYjI1bWFXY2dPaUJjSW5ObGRGOTBZV0pzWlY5amIyNW1hV2RjSWl3Z0x5OGdiM1YwWjI5cGJtY3VJRmRvWlc0Z2QyVWdkMkZ1ZENCMGJ5QnBibk4wY25WamRDQmxablJ3YjNNZ2QybDBhQ0IwYUdVZ1VFQlVJR052Ym1acFozVnlZWFJwYjI0dVhHNGdJQ0FnVUdGNVFYUlVZV0pzWlVkbGRFSnBiR3hFWlhSaGFXeHpJRG9nWENKblpYUmZZbWxzYkY5a1pYUmhhV3h6WENJc0lDOHZJR2x1WTI5dGFXNW5MaUJYYUdWdUlHVm1kSEJ2Y3lCM1lXNTBjeUIwYnlCaGNtVjBjbWxsZG1VZ2RHaGxJR0pwYkd3Z1ptOXlJR0VnZEdGaWJHVXVYRzRnSUNBZ1VHRjVRWFJVWVdKc1pVSnBiR3hFWlhSaGFXeHpJRG9nWENKaWFXeHNYMlJsZEdGcGJITmNJaXdnSUNBZ0lDQWdJQzh2SUc5MWRHZHZhVzVuTGlCWFpTQnlaWEJzZVNCM2FYUm9JSFJvYVhNZ2QyaGxiaUJsWm5Sd2IzTWdjbVZ4ZFdWemRITWdkRzhnZFhNZ1oyVjBYMkpwYkd4ZlpHVjBZV2xzY3k1Y2JpQWdJQ0JRWVhsQmRGUmhZbXhsUW1sc2JGQmhlVzFsYm5RZ09pQmNJbUpwYkd4ZmNHRjViV1Z1ZEZ3aUxDQWdJQ0FnSUNBZ0x5OGdhVzVqYjIxcGJtY3VJRmRvWlc0Z2RHaGxJR1ZtZEhCdmN5QmhaSFpwWTJWeklGeHVYRzRnSUNBZ1VISnBiblJwYm1kU1pYRjFaWE4wSURvZ1hDSndjbWx1ZEZ3aUxGeHVJQ0FnSUZCeWFXNTBhVzVuVW1WemNHOXVjMlVnT2lCY0luQnlhVzUwWDNKbGMzQnZibk5sWENJc1hHNWNiaUFnSUNCVVpYSnRhVzVoYkZOMFlYUjFjMUpsY1hWbGMzUWdPaUJjSW1kbGRGOTBaWEp0YVc1aGJGOXpkR0YwZFhOY0lpeGNiaUFnSUNCVVpYSnRhVzVoYkZOMFlYUjFjMUpsYzNCdmJuTmxJRG9nWENKMFpYSnRhVzVoYkY5emRHRjBkWE5jSWl4Y2JseHVJQ0FnSUVKaGRIUmxjbmxNWlhabGJFTm9ZVzVuWldRZ09pQmNJbUpoZEhSbGNubGZiR1YyWld4ZlkyaGhibWRsWkZ3aUxGeHVYRzRnSUNBZ1VHRjVRWFJVWVdKc1pVZGxkRTl3Wlc1VVlXSnNaWE02SUZ3aVoyVjBYMjl3Wlc1ZmRHRmliR1Z6WENJc1hHNGdJQ0FnVUdGNVFYUlVZV0pzWlU5d1pXNVVZV0pzWlhNNklGd2liM0JsYmw5MFlXSnNaWE5jSWl4Y2JseHVJQ0FnSUZCaGVVRjBWR0ZpYkdWQ2FXeHNVR0Y1YldWdWRFWnNiM2RGYm1SbFpEb2dYQ0ppYVd4c1gzQmhlVzFsYm5SZlpteHZkMTlsYm1SbFpGd2lYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnVTNWalkyVnpjMU4wWVhSbElEMGdlMXh1SUNBZ0lGVnVhMjV2ZDI0NklDZFZibXR1YjNkdUp5d2dVM1ZqWTJWemN6b2dKMU4xWTJObGMzTW5MQ0JHWVdsc1pXUTZJQ2RHWVdsc1pXUW5YRzU5TzF4dVhHNHZMeUE4YzNWdGJXRnllVDVjYmk4dklFMWxjM05oWjJWVGRHRnRjQ0J5WlhCeVpYTmxiblJ6SUhkb1lYUWdhWE1nY21WeGRXbHlaV1FnZEc4Z2RIVnliaUJoYmlCdmRYUm5iMmx1WnlCTlpYTnpZV2RsSUdsdWRHOGdTbk52Ymx4dUx5OGdhVzVqYkhWa2FXNW5JR1Z1WTNKNWNIUnBiMjRnWVc1a0lHUmhkR1VnYzJWMGRHbHVaeTVjYmk4dklEd3ZjM1Z0YldGeWVUNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTlpYTnpZV2RsVTNSaGJYQWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLSEJ2YzBsa0xDQnpaV055WlhSekxDQnpaWEoyWlhKVWFXMWxSR1ZzZEdFcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWIzTkpaQ0E5SUhCdmMwbGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsTmxZM0psZEhNZ1BTQnpaV055WlhSek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxObGNuWmxjbFJwYldWRVpXeDBZU0E5SUhObGNuWmxjbFJwYldWRVpXeDBZVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHZJRHh6ZFcxdFlYSjVQbHh1THk4Z1RXVnpjMkZuWlVWdWRtVnNiM0JsSUhKbGNISmxjMlZ1ZEhNZ2RHaGxJRzkxZEdWeUlITjBjblZqZEhWeVpTQnZaaUJoYm5rZ2JXVnpjMkZuWlNCMGFHRjBJR2x6SUdWNFkyaGhibWRsWkZ4dUx5OGdZbVYwZDJWbGJpQjBhR1VnVUc5eklHRnVaQ0IwYUdVZ1VHbHVVR0ZrSUdGdVpDQjJhV05sTFhabGNuTmhMbHh1THk4Z1UyVmxJR2gwZEhBNkx5OTNkM2N1YzJsdGNHeGxjR0Y1YldWdWRHRndhUzVqYjIwdkl5OWhjR2t2YldWemMyRm5aUzFsYm1OeWVYQjBhVzl1WEc0dkx5QThMM04xYlcxaGNuaytYRzVsZUhCdmNuUWdZMnhoYzNNZ1RXVnpjMkZuWlVWdWRtVnNiM0JsSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lodFpYTnpZV2RsTENCbGJtTXNJR2h0WVdNc0lIQnZjMGxrS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0F2THlCVWFHVWdUV1Z6YzJGblpTQm1hV1ZzWkNCcGN5QnpaWFFnYjI1c2VTQjNhR1Z1SUdsdUlGVnVMV1Z1WTNKNWNIUmxaQ0JtYjNKdExseHVJQ0FnSUNBZ0lDQXZMeUJKYmlCbVlXTjBJR2wwSUdseklIUm9aU0J2Ym14NUlHWnBaV3hrSUdsdUlHRnVJR1Z1ZG1Wc2IzQmxJR2x1SUhSb1pTQlZiaTFGYm1OeWVYQjBaV1FnWm05eWJTNWNiaUFnSUNBZ0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNCMGFHbHpMazFsYzNOaFoyVWdQU0J0WlhOellXZGxPMXh1WEc0Z0lDQWdJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQXZMeUJVYUdVZ1pXNWpJR1pwWld4a0lHbHpJSE5sZENCdmJteDVJSGRvWlc0Z2FXNGdSVzVqY25sd2RHVmtJR1p2Y20wdVhHNGdJQ0FnSUNBZ0lDOHZJRWwwSUdOdmJuUmhhVzV6SUhSb1pTQmxibU55ZVhCMFpXUWdTbk52YmlCdlppQmhibTkwYUdWeUlFMWxjM05oWjJWRmJuWmxiRzl3WlNCY2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0IwYUdsekxrVnVZeUE5SUdWdVl6dGNibHh1SUNBZ0lDQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OGdWR2hsSUdodFlXTWdabWxsYkdRZ2FYTWdjMlYwSUc5dWJIa2dkMmhsYmlCcGJpQkZibU55ZVhCMFpXUWdabTl5YlM1Y2JpQWdJQ0FnSUNBZ0x5OGdTWFFnYVhNZ2RHaGxJSE5wWjI1aGRIVnlaU0J2WmlCMGFHVWdYQ0psYm1OY0lpQm1hV1ZzWkM1Y2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0IwYUdsekxraHRZV01nUFNCb2JXRmpPMXh1WEc0Z0lDQWdJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQXZMeUJVYUdVZ2NHOXpYMmxrSUdacFpXeGtJR2x6SUc5dWJIa2dabWxzYkdWa0lHWnZjaUJ2ZFhSbmIybHVaeUJGYm1OeWVYQjBaV1FnYldWemMyRm5aWE11WEc0Z0lDQWdJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBZ0lDQWdkR2hwY3k1UWIzTkpaQ0E5SUhCdmMwbGtPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIUnZTbE5QVGlncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUhSb2FYTXVUV1Z6YzJGblpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdWdVl6b2dkR2hwY3k1RmJtTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCb2JXRmpPaUIwYUdsekxraHRZV01zWEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM05mYVdRNklIUm9hWE11VUc5elNXUmNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjFjYmx4dUx5OGdQSE4xYlcxaGNuaytYRzR2THlCTlpYTnpZV2RsSUhKbGNISmxjMlZ1ZEhNZ2RHaGxJR052Ym5SbGJuUnpJRzltSUdFZ1RXVnpjMkZuWlM1Y2JpOHZJRk5sWlNCb2RIUndPaTh2ZDNkM0xuTnBiWEJzWlhCaGVXMWxiblJoY0drdVkyOXRMeU12WVhCcEwyMWxjM05oWjJVdFpXNWpjbmx3ZEdsdmJseHVMeThnUEM5emRXMXRZWEo1UGx4dVpYaHdiM0owSUdOc1lYTnpJRTFsYzNOaFoyVWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR2xrTENCbGRtVnVkRTVoYldVc0lHUmhkR0VzSUc1bFpXUnpSVzVqY25sd2RHbHZiaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMa2xrSUQwZ2FXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJYWmxiblJPWVcxbElEMGdaWFpsYm5ST1lXMWxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrUmhkR0VnUFNCa1lYUmhPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrUmhkR1ZVYVcxbFUzUmhiWEFnUFNBbkp6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWIzTkpaQ0E5SUNjbk95QXZMeUJRYjNOZmFXUWdhWE1nYzJWMElHaGxjbVVnYjI1c2VTQm1iM0lnYjNWMFoyOXBibWNnVlc0dFpXNWpjbmx3ZEdWa0lHMWxjM05oWjJWekxpQmNiaUFnSUNBZ0lDQWdkR2hwY3k1SmJtTnZiVzFwYm1kSWJXRmpJRDBnSnljN0lDOHZJRk52YldWMGFXMWxjeUIwYUdVZ2JHOW5hV01nWVhKdmRXNWtJSFJvWlNCcGJtTnZiV2x1WnlCdFpYTnpZV2RsSUcxcFoyaDBJRzVsWldRZ1lXTmpaWE56SUhSdklIUm9aU0J6ZFdkdVlYUjFjbVVzSUdadmNpQmxlR0Z0Y0d4bElHbHVJSFJvWlNCclpYbGZZMmhsWTJzdVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDI1bFpXUnpSVzVqY25sd2RHbHZiaUE5SUc1bFpXUnpSVzVqY25sd2RHbHZianNnTHk4Z1JHVnViM1JsY3lCM2FHVjBhR1Z5SUdGdUlHOTFkR2R2YVc1bklHMWxjM05oWjJVZ2JtVmxaSE1nZEc4Z1ltVWdaVzVqY25sd2RHVmtJR2x1SUZSdlNuTnZiaWdwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVSR1ZqY25sd2RHVmtTbk52YmlBOUlDY25PeUF2THlCVFpYUWdiMjRnWVc0Z2FXNWpiMjFwYm1jZ2JXVnpjMkZuWlNCcWRYTjBJSE52SUhsdmRTQmpZVzRnYUdGMlpTQmhJR3h2YjJzZ1lYUWdkMmhoZENCcGRDQnNiMjlyWldRZ2JHbHJaU0JwYmlCcGRITWdhbk52YmlCbWIzSnRMbHh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRk4xWTJObGMzTlRkR0YwWlNncElIdGNiaUFnSUNBZ0lDQWdhV1lvSVhSb2FYTXVSR0YwWVNCOGZDQjBlWEJsYjJZZ2RHaHBjeTVFWVhSaExuTjFZMk5sYzNNZ1BUMDlJRndpZFc1a1pXWnBibVZrWENJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJUZFdOalpYTnpVM1JoZEdVdVZXNXJibTkzYmp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGtSaGRHRXVjM1ZqWTJWemN5QS9JRk4xWTJObGMzTlRkR0YwWlM1VGRXTmpaWE56SURvZ1UzVmpZMlZ6YzFOMFlYUmxMa1poYVd4bFpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUkZjbkp2Y2lncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11UkdGMFlTNWxjbkp2Y2w5eVpXRnpiMjRnUHlCMGFHbHpMa1JoZEdFdVpYSnliM0pmY21WaGMyOXVJRG9nWENKY0lqdGNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUkZjbkp2Y2tSbGRHRnBiQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVSR0YwWVM1bGNuSnZjbDlrWlhSaGFXdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBVMlZ5ZG1WeVZHbHRaVVJsYkhSaEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J1YjNjZ1BTQkVZWFJsTG01dmR5Z3BPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1UzUmhiWEFnWm05eWJXRjBPaUF5TURFNExUQTBMVEU1VkRBeE9qUXlPak00TGpJM09WeHVJQ0FnSUNBZ0lDQnNaWFFnWkhSeklEMGdkR2hwY3k1RVlYUmxWR2x0WlZOMFlXMXdMbk53YkdsMEtDOWJYRnd0WEZ3clhGd3VJRHBVWFM4cE8xeHVJQ0FnSUNBZ0lDQnNaWFFnYlhOblZHbHRaU0E5SUc1bGR5QkVZWFJsS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZVdWaGNpd2diVzl1ZEdnc0lHUmhkR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lHUjBjMXN3WFN3Z1pIUnpXekZkSUMwZ01Td2daSFJ6V3pKZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2FHOTFjaXdnYldsdWRYUmxMQ0J6WldOdmJtUXNJRzFwYkd4cGMxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkhSeld6TmRMQ0JrZEhOYk5GMHNJR1IwYzFzMVhTd2daSFJ6V3paZFhHNGdJQ0FnSUNBZ0lDa3VaMlYwVkdsdFpTZ3BPeUF2THlCTWIyTmhiQ0IwYVcxbElIcHZibVZjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYlhOblZHbHRaU0F0SUc1dmR6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QklaV3h3WlhJZ2JXVjBhRzlrSUhSdklIQmhjbk5sSUdKaGJtc2daR0YwWlNCbWIzSnRZWFFnTWpBd05ESXdNVGdnS0dSa1RVMTVlWGw1S1Z4dUlDQWdJSE4wWVhScFl5QlFZWEp6WlVKaGJtdEVZWFJsS0dKaGJtdEVZWFJsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1LR0poYm10RVlYUmxMbXhsYm1kMGFDQWhQVDBnT0NrZ2NtVjBkWEp1SUc1MWJHdzdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCRVlYUmxLR0FrZTJKaGJtdEVZWFJsTG5OMVluTjBjaWcwTERRcGZTMGtlMkpoYm10RVlYUmxMbk4xWW5OMGNpZ3lMRElwZlMwa2UySmhibXRFWVhSbExuTjFZbk4wY2lnd0xESXBmV0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZCaGNuTmxjeUJoSUdKaGJtc2daR0YwWlNBbUlIUnBiV1VnYzNSeUlHWnliMjBnWENJd05VOWpkREUzWENJZ0x5QmNJakExT2pBd1hDSWdLRndpWkdSTlRVMTVlUzlJU0RwdGJWd2lLU0JwYm5SdklHUmhkR1VnYjJKcVhHNGdJQ0FnYzNSaGRHbGpJRkJoY25ObFFtRnVhMFJoZEdWVWFXMWxVM1J5S0dSaGRHVXNJSFJwYldVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJFWVhSbEtHQWtlMlJoZEdVdWMzVmljM1J5S0RBc01pbDlJQ1I3WkdGMFpTNXpkV0p6ZEhJb01pd3pLWDBnSkh0a1lYUmxMbk4xWW5OMGNpZzFMRElwZlNBa2UzUnBiV1Y5WUNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJRVp5YjIxS2MyOXVLRzF6WjBwemIyNHNJSE5sWTNKbGRITXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHVnVkaUE5SUVwVFQwNHVjR0Z5YzJVb2JYTm5Tbk52YmlrN1hHNWNiaUFnSUNBZ0lDQWdhV1lvWlc1MkxtMWxjM05oWjJVZ0lUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHMWxjM05oWjJVZ1BTQnVaWGNnVFdWemMyRm5aU2hsYm5ZdWJXVnpjMkZuWlM1cFpDd2daVzUyTG0xbGMzTmhaMlV1WlhabGJuUXNJR1Z1ZGk1dFpYTnpZV2RsTG1SaGRHRXNJR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlV1UkdWamNubHdkR1ZrU25OdmJpQTlJRzF6WjBwemIyNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYldWemMyRm5aVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2h6WldOeVpYUnpJRDA5SUc1MWJHd3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvYVhNZ2JXRjVJR2hoY0hCbGJpQnBaaUIzWlNCemIyMWxhRzkzSUhKbFkyVnBkbVZrSUdGdUlHVnVZM0o1Y0hSbFpDQnRaWE56WVdkbElHWnliMjBnWldaMGNHOXpJR0oxZENCM1pTZHlaU0J1YjNRZ1kyOXVabWxuWlhKbFpDQjNhWFJvSUhObFkzSmxkSE11WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJHYjNJZ1pYaGhiWEJzWlN3Z2FXWWdkMlVnWTJGdVkyVnNJSFJvWlNCd1lXbHlhVzVuSUhCeWIyTmxjM01nWVNCc2FYUjBiR1VnYkdGMFpTQnBiaUIwYUdVZ1oyRnRaU0JoYm1RZ2QyVWdaMlYwSUdGdUlHVnVZM0o1Y0hSbFpDQnJaWGxmWTJobFkyc2diV1Z6YzJGblpTQmhablJsY2lCM1pTZDJaU0JrY205d2NHVmtJSFJvWlNCclpYbHpMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtGd2lWVTVMVGs5WFRsd2lMQ0JjSWs1UFUwVkRVa1ZVVTF3aUxDQnVkV3hzTENCbVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJKZEhNZ1pXNWpjbmx3ZEdWa0xDQjJaWEpwWm5rZ2MybG5YRzRnSUNBZ0lDQWdJR3hsZENCemFXY2dQU0JEY25sd2RHOHVTRzFoWTFOcFoyNWhkSFZ5WlNoelpXTnlaWFJ6TGtodFlXTkxaWGtzSUdWdWRpNWxibU1wTzF4dUlDQWdJQ0FnSUNCcFppQW9jMmxuTG5SdlZYQndaWEpEWVhObEtDa2dJVDBnWlc1MkxtaHRZV01wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdWemMyRm5aU2hjSWw5Y0lpd2dSWFpsYm5SekxrbHVkbUZzYVdSSWJXRmpVMmxuYm1GMGRYSmxMQ0J1ZFd4c0xDQm1ZV3h6WlNrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JzWlhRZ1pHVmpjbmx3ZEdWa1NuTnZiaUE5SUVOeWVYQjBieTVCWlhORVpXTnllWEIwS0hObFkzSmxkSE11Ulc1alMyVjVMQ0JsYm5ZdVpXNWpLVHRjYmx4dUlDQWdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR1JsWTNKNWNIUmxaRTF6WnlBOUlFcFRUMDR1Y0dGeWMyVW9aR1ZqY25sd2RHVmtTbk52YmlrN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnRaWE56WVdkbElEMGdibVYzSUUxbGMzTmhaMlVvWkdWamNubHdkR1ZrVFhObkxtMWxjM05oWjJVdWFXUXNJR1JsWTNKNWNIUmxaRTF6Wnk1dFpYTnpZV2RsTG1WMlpXNTBMQ0JrWldOeWVYQjBaV1JOYzJjdWJXVnpjMkZuWlM1a1lYUmhMQ0IwY25WbEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1RVlYUmxWR2x0WlZOMFlXMXdJRDBnWkdWamNubHdkR1ZrVFhObkxtMWxjM05oWjJVdVpHRjBaWFJwYldVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxMbEJ2YzBsa0lEMGdaR1ZqY25sd2RHVmtUWE5uTG0xbGMzTmhaMlV1Y0c5elgybGtPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlM1SmJtTnZiV2x1WjBodFlXTWdQU0JsYm5ZdWFHMWhZenNnWEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExrUmxZM0o1Y0hSbFpFcHpiMjRnUFNCa1pXTnllWEIwWldSS2MyOXVPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXVnpjMkZuWlR0Y2JseHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0tHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z6YzJGblpTaGNJbFZPUzA1UFYwNWNJaXdnWENKVlRsQkJVbE5GUVVKTVJWd2lMQ0I3WENKdGMyZGNJam9nWkdWamNubHdkR1ZrU25OdmJuMHNJR1poYkhObEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lGUnZTbk52YmloemRHRnRjQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdibTkzSUQwZ1JHRjBaUzV1YjNjb0tUdGNiaUFnSUNBZ0lDQWdiR1YwSUhSNmIyWm1jMlYwSUQwZ2JtVjNJRVJoZEdVb0tTNW5aWFJVYVcxbGVtOXVaVTltWm5ObGRDZ3BJQ29nTmpBZ0tpQXhNREF3TzF4dUlDQWdJQ0FnSUNCc1pYUWdZV1JxZFhOMFpXUlVhVzFsSUQwZ2JtVjNJRVJoZEdVb2JtOTNJQzBnZEhwdlptWnpaWFFnS3lCemRHRnRjQzVUWlhKMlpYSlVhVzFsUkdWc2RHRXBPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFWnZjbTFoZENCa1lYUmxPaUJjSW5sNWVYa3RUVTB0WkdSVVNFZzZiVzA2YzNNdVptWm1YQ0pjYmlBZ0lDQWdJQ0FnZEdocGN5NUVZWFJsVkdsdFpWTjBZVzF3SUQwZ1lXUnFkWE4wWldSVWFXMWxMblJ2U1ZOUFUzUnlhVzVuS0NrdWMyeHBZMlVvTUN3dE1TazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpTV1FnUFNCemRHRnRjQzVRYjNOSlpEdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJuWmxiRzl3WlNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlU2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dkR2hwY3k1SlpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxkbVZ1ZERvZ2RHaHBjeTVGZG1WdWRFNWhiV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlUb2dkR2hwY3k1RVlYUmhMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdWMGFXMWxPaUIwYUdsekxrUmhkR1ZVYVcxbFUzUmhiWEJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVgyNWxaV1J6Ulc1amNubHdkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZXNWxibU55ZVhCMFpXUWdUV1Z6YzJGblpYTWdibVZsWkNCUWIzTkpSQ0JwYm5OcFpHVWdkR2hsSUcxbGMzTmhaMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnVkbVZzYjNCbExtMWxjM05oWjJVdWNHOXpYMmxrSUQwZ2RHaHBjeTVRYjNOSlpGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSFJvYVhNdVJHVmpjbmx3ZEdWa1NuTnZiaUE5SUVwVFQwNHVjM1J5YVc1bmFXWjVLR1Z1ZG1Wc2IzQmxLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVgyNWxaV1J6Ulc1amNubHdkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVJHVmpjbmx3ZEdWa1NuTnZianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JsYm1OTmMyY2dQU0JEY25sd2RHOHVRV1Z6Ulc1amNubHdkQ2h6ZEdGdGNDNVRaV055WlhSekxrVnVZMHRsZVN3Z2RHaHBjeTVFWldOeWVYQjBaV1JLYzI5dUtUdGNiaUFnSUNBZ0lDQWdiR1YwSUdodFlXTlRhV2NnUFNCRGNubHdkRzh1U0cxaFkxTnBaMjVoZEhWeVpTaHpkR0Z0Y0M1VFpXTnlaWFJ6TGtodFlXTkxaWGtzSUdWdVkwMXpaeWs3WEc0Z0lDQWdJQ0FnSUd4bGRDQmxibU55VFdWemMyRm5aVVZ1ZG1Wc2IzQmxJRDBnZTJWdVl6b2daVzVqVFhObkxDQm9iV0ZqT2lCb2JXRmpVMmxuTG5SdlZYQndaWEpEWVhObEtDa3NJSEJ2YzE5cFpEb2djM1JoYlhBdVVHOXpTV1I5TzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCS1UwOU9Mbk4wY21sdVoybG1lU2hsYm1OeVRXVnpjMkZuWlVWdWRtVnNiM0JsS1R0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMFYyWlc1MGN5d2dUV1Z6YzJGblpYMGdabkp2YlNBbkxpOU5aWE56WVdkbGN5YzdYRzVwYlhCdmNuUWdlMUpsY1hWbGMzUkpaRWhsYkhCbGNuMGdabkp2YlNBbkxpOVNaWEYxWlhOMFNXUklaV3h3WlhJbk8xeHVYRzR2THlBOGMzVnRiV0Z5ZVQ1Y2JpOHZJRkJoYVhKcGJtY2dTVzUwWlhKaFkzUnBiMjRnTVRvZ1QzVjBaMjlwYm1kY2JpOHZJRHd2YzNWdGJXRnllVDVjYm1WNGNHOXlkQ0JqYkdGemN5QlFZV2x5VW1WeGRXVnpkQ0I3WEc0Z0lDQWdWRzlOWlhOellXZGxLQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdaR0YwWVNBOUlIdHdZV1JrYVc1bk9pQjBjblZsZlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtGSmxjWFZsYzNSSlpFaGxiSEJsY2k1SlpDaGNJbkJ5WENJcExDQkZkbVZ1ZEhNdVVHRnBjbEpsY1hWbGMzUXNJR1JoZEdFc0lHWmhiSE5sS1R0Y2JpQWdJQ0I5WEc1OVhHNWNiaTh2SUZCaGFYSnBibWNnU1c1MFpYSmhZM1JwYjI0Z01qb2dTVzVqYjIxcGJtZGNibVY0Y0c5eWRDQmpiR0Z6Y3lCTFpYbFNaWEYxWlhOMElIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHRLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVbVZ4ZFdWemRFbGtJRDBnYlM1SlpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1QlpXNWpJRDBnYlM1RVlYUmhMbVZ1WXk1Qk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtGb2JXRmpJRDBnYlM1RVlYUmhMbWh0WVdNdVFUdGNiaUFnSUNCOVhHNTlYRzVjYmk4dklGQmhhWEpwYm1jZ1NXNTBaWEpoWTNScGIyNGdNem9nVDNWMFoyOXBibWRjYm1WNGNHOXlkQ0JqYkdGemN5QkxaWGxTWlhOd2IyNXpaU0I3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY21WeGRXVnpkRWxrTENCQ1pXNWpMQ0JDYUcxaFl5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsSmxjWFZsYzNSSlpDQTlJSEpsY1hWbGMzUkpaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUNaVzVqSUQwZ1FtVnVZenRjYmlBZ0lDQWdJQ0FnZEdocGN5NUNhRzFoWXlBOUlFSm9iV0ZqTzF4dUlDQWdJSDFjYmx4dUlDQWdJRlJ2VFdWemMyRm5aU2dwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR1JoZEdFZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJtTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JDT2lCMGFHbHpMa0psYm1OY2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQm9iV0ZqT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1Fqb2dkR2hwY3k1Q2FHMWhZMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXVnpjMkZuWlNoMGFHbHpMbEpsY1hWbGMzUkpaQ3dnUlhabGJuUnpMa3RsZVZKbGMzQnZibk5sTENCa1lYUmhMQ0JtWVd4elpTazdYRzRnSUNBZ2ZWeHVmVnh1WEc0dkx5QlFZV2x5YVc1bklFbHVkR1Z5WVdOMGFXOXVJRFE2SUVsdVkyOXRhVzVuWEc1bGVIQnZjblFnWTJ4aGMzTWdTMlY1UTJobFkyc2dlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzBwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFYSnRZWFJwYjI1RGIyUmxJRDBnYlM1SmJtTnZiV2x1WjBodFlXTXVjM1ZpYzNSeWFXNW5LREFzTmlrN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2THlCUVlXbHlhVzVuSUVsdWRHVnlZV04wYVc5dUlEVTZJRWx1WTI5dGFXNW5YRzVsZUhCdmNuUWdZMnhoYzNNZ1VHRnBjbEpsYzNCdmJuTmxJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh0S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VTNWalkyVnpjeUE5SUcwdVJHRjBZUzV6ZFdOalpYTnpPMXh1SUNBZ0lIMWNibjFjYmx4dUx5OGdTRzlzWkdWeUlHTnNZWE56SUdadmNpQlRaV055WlhSeklHRnVaQ0JMWlhsU1pYTndiMjV6WlN3Z2MyOGdkR2hoZENCM1pTQmpZVzRnZFhObElIUm9aVzBnZEc5blpYUm9aWElnYVc0Z2JXVjBhRzlrSUhOcFoyNWhkSFZ5WlhNdVhHNWxlSEJ2Y25RZ1kyeGhjM01nVTJWamNtVjBjMEZ1WkV0bGVWSmxjM0J2Ym5ObElIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHpaV055WlhSekxDQnJaWGxTWlhOd2IyNXpaU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbE5sWTNKbGRITWdQU0J6WldOeVpYUnpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrdGxlVkpsYzNCdmJuTmxJRDBnYTJWNVVtVnpjRzl1YzJVN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1JISnZjRXRsZVhOU1pYRjFaWE4wWEc1N1hHNGdJQ0FnVkc5TlpYTnpZV2RsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXVnpjMkZuWlNoU1pYRjFaWE4wU1dSSVpXeHdaWEl1U1dRb1hDSmtjbkJyZVhOY0lpa3NJRVYyWlc1MGN5NUVjbTl3UzJWNWMwRmtkbWxqWlN3Z2JuVnNiQ3dnZEhKMVpTazdYRzRnSUNBZ2ZWeHVmU0lzSW1sdGNHOXlkQ0I3VUdGcGNsSmxjWFZsYzNRc0lFdGxlVkpsYzNCdmJuTmxMQ0JUWldOeVpYUnpRVzVrUzJWNVVtVnpjRzl1YzJWOUlHWnliMjBnSnk0dlVHRnBjbWx1WnljN1hHNXBiWEJ2Y25RZ2UxTmxZM0psZEhOOUlHWnliMjBnSnk0dlUyVmpjbVYwY3ljN1hHNXBiWEJ2Y25RZ2UwTnllWEIwYjMwZ1puSnZiU0FuTGk5RGNubHdkRzhuTzF4dWFXMXdiM0owSUh0RWFXWm1hV1ZJWld4c2JXRnVmU0JtY205dElDY3VMMFJwWm1acFpVaGxiR3h0WVc0bk8xeHVYRzR2THlCVWFHbHpJR2x6SUhSb1pTQm5aVzVsY21GMGIzSWdkWE5sWkNCbWIzSWdaR2xtWm1sbExXaGxiR3h0WVc0Z2FXNGdNakEwT0MxaWFYUWdUVTlFVUNCSGNtOTFjQ0F4TkNCaGN5QndaWElnS0doMGRIQnpPaTh2ZEc5dmJITXVhV1YwWmk1dmNtY3ZhSFJ0YkM5eVptTXpOVEkySTNObFkzUnBiMjR0TXlsY2JtVjRjRzl5ZENCamIyNXpkQ0JIUlU1RlVrRlVUMUlnUFNBeU8xeHVYRzR2THlCVWFHbHpJR2x6SUhSb1pTQndjbWx0WlNCMWMyVmtJR1p2Y2lCa2FXWm1hV1V0YUdWc2JHMWhiaUIxYzJsdVp5QXlNRFE0TFdKcGRDQk5UMFJRSUVkeWIzVndJREUwSUdGeklIQmxjaUFvYUhSMGNITTZMeTkwYjI5c2N5NXBaWFJtTG05eVp5OW9kRzFzTDNKbVl6TTFNallqYzJWamRHbHZiaTB6S1Z4dVpYaHdiM0owSUdOdmJuTjBJRWRTVDFWUU1UUmZNakEwT0Y5Q1NWUmZUVTlFVUNBOUlDZEdSa1pHUmtaR1JrWkdSa1pHUmtaR1F6a3dSa1JCUVRJeU1UWTRRekl6TkVNMFF6WTJNamhDT0RCRVF6RkRSREV5T1RBeU5FVXdPRGhCTmpkRFF6YzBNREl3UWtKRlFUWXpRakV6T1VJeU1qVXhORUV3T0RjNU9FVXpOREEwUkVSRlJqazFNVGxDTTBORU0wRTBNekZDTXpBeVFqQkJOa1JHTWpWR01UUXpOelJHUlRFek5UWkVOa1ExTVVNeU5EVkZORGcxUWpVM05qWXlOVVUzUlVNMlJqUTBRelF5UlRsQk5qTTNSVVEyUWpCQ1JrWTFRMEkyUmpRd05rSTNSVVJGUlRNNE5rSkdRalZCT0RrNVJrRTFRVVU1UmpJME1URTNRelJDTVVaRk5qUTVNamcyTmpVeFJVTkZORFZDTTBSRE1qQXdOME5DT0VFeE5qTkNSakExT1RoRVFUUTRNell4UXpVMVJETTVRVFk1TVRZelJrRTRSa1F5TkVOR05VWTRNelkxTlVReU0wUkRRVE5CUkRrMk1VTTJNa1l6TlRZeU1EZzFOVEpDUWpsRlJEVXlPVEEzTnpBNU5qazJOa1EyTnpCRE16VTBSVFJCUWtNNU9EQTBSakUzTkRaRE1EaERRVEU0TWpFM1F6TXlPVEExUlRRMk1rVXpOa05GTTBKRk16bEZOemN5UXpFNE1FVTROakF6T1VJeU56Z3pRVEpGUXpBM1FUSTRSa0kxUXpVMVJFWXdOa1kwUXpVeVF6bEVSVEpDUTBKR05qazFOVGd4TnpFNE16azVOVFE1TjBORlFUazFOa0ZGTlRFMVJESXlOakU0T1RoR1FUQTFNVEF4TlRjeU9FVTFRVGhCUVVOQlFUWTRSa1pHUmtaR1JrWkdSa1pHUmtaR1JpYzdYRzVjYmk4dklEeHpkVzF0WVhKNVBseHVMeThnVkdocGN5QnpkR0YwYVdNZ1kyeGhjM01nYUdWc2NITWdlVzkxSUhkcGRHZ2dkR2hsSUhCaGFYSnBibWNnY0hKdlkyVnpjeUJoY3lCa2IyTjFiV1Z1ZEdWa0lHaGxjbVU2WEc0dkx5Qm9kSFJ3T2k4dmQzZDNMbk5wYlhCc1pYQmhlVzFsYm5SaGNHa3VZMjl0THlNdllYQnBMM0JoYVhKcGJtY3RjSEp2WTJWemMxeHVMeThnUEM5emRXMXRZWEo1UGx4dVpYaHdiM0owSUdOc1lYTnpJRkJoYVhKcGJtZElaV3h3WlhJZ2UxeHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklFZGxibVZ5WVhSbGN5QmhJSEJoYVhKcGJtY2dVbVZ4ZFdWemRDNWNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0x5OGdQSEpsZEhWeWJuTStUbVYzSUZCaGFYSlNaWEYxWlhOMFBDOXlaWFIxY201elBseHVJQ0FnSUhOMFlYUnBZeUJPWlhkUVlXbHlVbVZ4ZFdWemRDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCUVlXbHlVbVZ4ZFdWemRDZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRU5oYkdOMWJHRjBaWE12UjJWdVpYSmhkR1Z6SUZObFkzSmxkSE1nWVc1a0lFdGxlVkpsYzNCdmJuTmxJR2RwZG1WdUlHRnVJR2x1WTI5dGFXNW5JRXRsZVZKbGNYVmxjM1F1WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2lhMlY1VW1WeGRXVnpkRndpUGp3dmNHRnlZVzArWEc0Z0lDQWdMeThnUEhKbGRIVnlibk0rVTJWamNtVjBjeUJoYm1RZ1MyVjVVbVZ6Y0c5dWMyVWdkRzhnYzJWdVpDQmlZV05yTGp3dmNtVjBkWEp1Y3o1Y2JpQWdJQ0JIWlc1bGNtRjBaVk5sWTNKbGRITkJibVJMWlhsU1pYTndiMjV6WlNoclpYbFNaWEYxWlhOMEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCbGJtTlFkV0pCYm1SVFpXTWdQU0IwYUdsekxsOWpZV3hqZFd4aGRHVk5lVkIxWW14cFkwdGxlVUZ1WkZObFkzSmxkQ2hyWlhsU1pYRjFaWE4wTGtGbGJtTXBPMXh1SUNBZ0lDQWdJQ0JzWlhRZ1FtVnVZeUE5SUdWdVkxQjFZa0Z1WkZObFl5NU5lVkIxWW14cFkwdGxlVHRjYmlBZ0lDQWdJQ0FnYkdWMElGTmxibU1nUFNCbGJtTlFkV0pCYm1SVFpXTXVVMmhoY21Wa1UyVmpjbVYwUzJWNU8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCb2JXRmpVSFZpUVc1a1UyVmpJRDBnZEdocGN5NWZZMkZzWTNWc1lYUmxUWGxRZFdKc2FXTkxaWGxCYm1SVFpXTnlaWFFvYTJWNVVtVnhkV1Z6ZEM1QmFHMWhZeWs3WEc0Z0lDQWdJQ0FnSUd4bGRDQkNhRzFoWXlBOUlHaHRZV05RZFdKQmJtUlRaV011VFhsUWRXSnNhV05MWlhrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JUYUcxaFl5QTlJR2h0WVdOUWRXSkJibVJUWldNdVUyaGhjbVZrVTJWamNtVjBTMlY1TzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2JHVjBJSE5sWTNKbGRITWdQU0J1WlhjZ1UyVmpjbVYwY3loVFpXNWpMQ0JUYUcxaFl5azdYRzRnSUNBZ0lDQWdJR3hsZENCclpYbFNaWE53YjI1elpTQTlJRzVsZHlCTFpYbFNaWE53YjI1elpTaHJaWGxTWlhGMVpYTjBMbEpsY1hWbGMzUkpaQ3dnUW1WdVl5d2dRbWh0WVdNcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVTJWamNtVjBjMEZ1WkV0bGVWSmxjM0J2Ym5ObEtITmxZM0psZEhNc0lHdGxlVkpsYzNCdmJuTmxLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJVZFhKdWN5QmhiaUJwYm1OdmJXbHVaeUJjSWtGY0lpQjJZV3gxWlNCbWNtOXRJSFJvWlNCUWFXNVFZV1FnYVc1MGJ5QjBhR1VnYjNWMFoyOXBibWNnWENKQ1hDSWdkbUZzZFdVZ1hHNGdJQ0FnTHk4Z1lXNWtJSFJvWlNCelpXTnlaWFFnZG1Gc2RXVWdkWE5wYm1jZ1JHbG1abWxsU0dWc2JXMWhiaUJvWld4d1pYSXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWRHaGxhWEpRZFdKc2FXTkxaWGxjSWo1VWFHVWdhVzVqYjIxcGJtY2dRU0IyWVd4MVpUd3ZjR0Z5WVcwK1hHNGdJQ0FnTHk4Z1BISmxkSFZ5Ym5NK1dXOTFjaUJDSUhaaGJIVmxJR0Z1WkNCMGFHVWdVMlZqY21WMFBDOXlaWFIxY201elBseHVJQ0FnSUY5allXeGpkV3hoZEdWTmVWQjFZbXhwWTB0bGVVRnVaRk5sWTNKbGRDaDBhR1ZwY2xCMVlteHBZMHRsZVNrZ2UxeHVYRzRnSUNBZ0lDQWdJR3hsZENCa2FXWm1hV1ZJWld4c2JXRnVJRDBnYm1WM0lFUnBabVpwWlVobGJHeHRZVzRvS1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJRzE1VUhKcGRtRjBaVUpKSUQwZ1pHbG1abWxsU0dWc2JHMWhiaTVTWVc1a2IyMVFjbWwyWVhSbFMyVjVLRWRTVDFWUU1UUmZNakEwT0Y5Q1NWUmZUVTlFVUNrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J0ZVZCMVlteHBZMEpKSUQwZ1pHbG1abWxsU0dWc2JHMWhiaTVRZFdKc2FXTkxaWGtvUjFKUFZWQXhORjh5TURRNFgwSkpWRjlOVDBSUUxDQkhSVTVGVWtGVVQxSXNJRzE1VUhKcGRtRjBaVUpKS1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJSE5sWTNKbGRFSkpJRDBnWkdsbVptbGxTR1ZzYkcxaGJpNVRaV055WlhRb1IxSlBWVkF4TkY4eU1EUTRYMEpKVkY5TlQwUlFMQ0IwYUdWcGNsQjFZbXhwWTB0bGVTd2diWGxRY21sMllYUmxRa2twTzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0J6WldOeVpYUWdQU0IwYUdsekxrUklVMlZqY21WMFZHOVRVRWxUWldOeVpYUW9jMlZqY21WMFFra3BPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VIVmliR2xqUzJWNVFXNWtVMlZqY21WMEtHMTVVSFZpYkdsalFra3NJSE5sWTNKbGRDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdRMjl1ZG1WeWRITWdkR2hsSUVSSUlITmxZM0psZENCQ2FXZEpiblJsWjJWeUlHbHVkRzhnZEdobElHaGxlQzF6ZEhKcGJtY2dkRzhnWW1VZ2RYTmxaQ0JoY3lCMGFHVWdjMlZqY21WMExseHVJQ0FnSUM4dklGUm9aWEpsSUdGeVpTQnpiMjFsSUZ3aVoyOTBZMmg1WVhOY0lpQm9aWEpsSUhkb2FXTm9JR2x6SUhkb2VTQjBhR2x6SUhCcFpXTmxJRzltSUhkdmNtc2dhWE1nWVdKemRISmhZM1JsWkNCemJ5QnBkQ0JqWVc0Z1ltVWdkR1Z6ZEdWa0lITmxjR0Z5WVhSbGJIa3VYRzRnSUNBZ0x5OGdVMlZsT2lCb2RIUndPaTh2ZDNkM0xuTnBiWEJzWlhCaGVXMWxiblJoY0drdVkyOXRMeU12WVhCcEwzQmhhWEpwYm1jdGNISnZZMlZ6YzF4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbk5sWTNKbGRFSkpYQ0krVTJWamNtVjBJR0Z6SUVKcFowbHVkR1ZuWlhJOEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4eVpYUjFjbTV6UGxObFkzSmxkQ0JoY3lCSVpYZ3RVM1J5YVc1blBDOXlaWFIxY201elBseHVJQ0FnSUVSSVUyVmpjbVYwVkc5VFVFbFRaV055WlhRb2MyVmpjbVYwS1Z4dUlDQWdJSHNnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdMeThnU1dZZ2RHaGxJR05oYkdOMWJHRjBaV1FnYUdWNFlXUmxZMmx0WVd3Z2MyVmpjbVYwSUdSdlpYTnVKM1FnYUdGMlpTQmhiaUJsZG1WdUlHNTFiV0psY2lCdlppQmphR0Z5WVdOMFpYSnpMQ0IzWlNCaFpHUWdZVzRnWlhoMGNtRWdNQ0IwYnlCMGFHVWdjM1JoY25RdUlGUm9hWE1nWVd4c2IzZHpJRk5JUVMweU5UWWdkRzhnYjNCbGNtRjBaU0J2YmlCMGFHVWdhR1Y0WVdSbFkybHRZV3dnYzJWamNtVjBJR0Z6SUdsbUlHbDBJSGRsY21VZ1lTQm9aWGhoWkdWamFXMWhiQ0J5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUJoSUhOMGNtbHVaeTVjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxZM0psZEM1c1pXNW5kR2dnSlNBeUlEMDlQU0F4S1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sWTNKbGRDQTlJQ2N3SnlBcklITmxZM0psZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSE5sWTNKbGRDQTlJSE5sWTNKbGRDNXdZV1JUZEdGeWRDZzFNVElzSUNjd0p5azdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdjMmhoTWpVMklIUm9ZWFFnWW5sMFpTQmhjbkpoZVNCaGJtUWdjbVYwZFhKdUlIUm9aU0JvWlhnZ2MzUnlhVzVuSUhKbGMzVnNkRnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdRM0o1Y0hSdkxrZGxibVZ5WVhSbFNHRnphQ2h6WldOeVpYUXBPMXh1SUNBZ0lIMWNibjFjYmx4dUx5OGdQSE4xYlcxaGNuaytYRzR2THlCSmJuUmxjbTVoYkNCSWIyeGtaWElnWTJ4aGMzTWdabTl5SUZCMVlteHBZeUJoYm1RZ1UyVmpjbVYwTENCemJ5QjBhR0YwSUhkbElHTmhiaUIxYzJVZ2RHaGxiU0IwYjJkbGRHaGxjaUJwYmlCdFpYUm9iMlFnYzJsbmJtRjBkWEpsY3k0Z1hHNHZMeUE4TDNOMWJXMWhjbmsrWEc1bGVIQnZjblFnWTJ4aGMzTWdVSFZpYkdsalMyVjVRVzVrVTJWamNtVjBJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh0ZVZCMVlteHBZMHRsZVN3Z2MyaGhjbVZrVTJWamNtVjBTMlY1S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VFhsUWRXSnNhV05MWlhrZ1BTQnRlVkIxWW14cFkwdGxlVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVRhR0Z5WldSVFpXTnlaWFJMWlhrZ1BTQnphR0Z5WldSVFpXTnlaWFJMWlhrN1hHNGdJQ0FnZlZ4dWZTSXNJbWx0Y0c5eWRDQjdSWFpsYm5SekxDQk5aWE56WVdkbGZTQm1jbTl0SUNjdUwwMWxjM05oWjJWekp6dGNibWx0Y0c5eWRDQjdVSFZ5WTJoaGMyVlNaWE53YjI1elpYMGdabkp2YlNBbkxpOVFkWEpqYUdGelpTYzdYRzVjYmk4dklEeHpkVzF0WVhKNVBseHVMeThnVkdocGN5QmpiR0Z6Y3lCeVpYQnlaWE5sYm5SeklIUm9aU0JDYVd4c1JHVjBZV2xzY3lCMGFHRjBJSFJvWlNCUVQxTWdkMmxzYkNCaVpTQmhjMnRsWkNCbWIzSWdkR2h5YjNWbmFHOTFkQ0JoSUZCaGVVRjBWR0ZpYkdVZ1pteHZkeTVjYmk4dklEd3ZjM1Z0YldGeWVUNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCQ2FXeHNVM1JoZEhWelVtVnpjRzl1YzJWY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpZ3BJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lDOHZJRk5sZENCMGFHbHpJRVZ5Y205eUlHRmpZMjl5WkdsdVoyeDVJR2xtSUhsdmRTQmhjbVVnYm05MElHRmliR1VnZEc4Z2NtVjBkWEp1SUhSb1pTQkNhV3hzUkdWMFlXbHNjeUIwYUdGMElIZGxjbVVnWVhOclpXUWdabkp2YlNCNWIzVXVYRzRnSUNBZ0lDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVTWlhOMWJIUWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklGUm9hWE1nYVhNZ1lTQjFibWx4ZFdVZ2FXUmxiblJwWm1sbGNpQjBhR0YwSUhsdmRTQmhjM05wWjI0Z2RHOGdaV0ZqYUNCaWFXeHNMbHh1SUNBZ0lDQWdJQ0F2THlCSmRDQnRhV2QwSUdKbElHWnZjaUJsZUdGdGNHeGxMQ0IwYUdVZ2RHbHRaWE4wWVcxd0lHOW1JSGRvWlc0Z2RHaGxJR052ZG1WeUlIZGhjeUJ2Y0dWdVpXUXVYRzRnSUNBZ0lDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVDYVd4c1NXUWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklGUm9hWE1nYVhNZ2RHaGxJSFJoWW14bElHbGtJSFJvWVhRZ2RHaHBjeUJpYVd4c0lIZGhjeUJtYjNJdVhHNGdJQ0FnSUNBZ0lDOHZJRlJvWlNCM1lXbDBaWElnZDJsc2JDQmxiblJsY2lCcGRDQnZiaUIwYUdVZ1JXWjBjRzl6SUdGMElIUm9aU0J6ZEdGeWRDQnZaaUIwYUdVZ1VHRjVRWFJVWVdKc1pTQm1iRzkzSUdGdVpDQjBhR1VnUldaMGNHOXpJSGRwYkd3Z1hHNGdJQ0FnSUNBZ0lDOHZJSEpsZEhKcFpYWmxJSFJvWlNCaWFXeHNJSFZ6YVc1bklIUm9aU0IwWVdKc1pTQnBaQzRnWEc0Z0lDQWdJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBZ0lDQWdkR2hwY3k1VVlXSnNaVWxrSUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMazl3WlhKaGRHOXlTV1FnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lDOHZJRlJvWlNCVWIzUmhiQ0JCYlc5MWJuUWdiMjRnZEdocGN5QmlhV3hzTENCcGJpQmpaVzUwY3k1Y2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0IwYUdsekxsUnZkR0ZzUVcxdmRXNTBJRDBnTUR0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0F2THlCVWFHVWdZM1Z5Y21WdWRHeDVJRzkxZEhOaGJtUnBibWNnWVcxdmRXNTBJRzl1SUhSb2FYTWdZbWxzYkN3Z2FXNGdZMlZ1ZEhNdVhHNGdJQ0FnSUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnZEdocGN5NVBkWFJ6ZEdGdVpHbHVaMEZ0YjNWdWRDQTlJREE3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUZsdmRYSWdVRTlUSUdseklISmxjWFZwY21Wa0lIUnZJSEJsY25OcGMzUWdjMjl0WlNCemRHRjBaU0J2YmlCaVpXaGhiR1lnYjJZZ2RHaGxJRVZtZEhCdmN5QnpieUIwYUdVZ1JXWjBjRzl6SUdOaGJpQnlaV052ZG1WeUlITjBZWFJsTGx4dUlDQWdJQ0FnSUNBdkx5QkpkQ0JwY3lCcWRYTjBJR0VnY0dsbFkyVWdiMllnYzNSeWFXNW5JSFJvWVhRZ2VXOTFJSE5oZG1VZ1lXZGhhVzV6ZENCNWIzVnlJR0pwYkd4SlpDNWNiaUFnSUNBZ0lDQWdMeThnVjBobGJtVjJaWElnZVc5MUozSmxJR0Z6YTJWa0lHWnZjaUJDYVd4c1JHVjBZV2xzY3l3Z2JXRnJaU0J6ZFhKbElIbHZkU0J5WlhSMWNtNGdkR2hwY3lCd2FXVmpaU0J2WmlCa1lYUmhJR2xtSUhsdmRTQm9ZWFpsSUdsMExseHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVRbWxzYkVSaGRHRWdQU0JjSWx3aU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdkbGRFSnBiR3hRWVhsdFpXNTBTR2x6ZEc5eWVTZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVRbWxzYkVSaGRHRXBYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlhUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnYkdWMElHSnBiR3hRWVhsdFpXNTBTR2x6ZEc5eWVTQTlJRnRkTzF4dUlDQWdJQ0FnSUNCc1pYUWdjMkYyWldSQ2FXeHNSR0YwWVNBOUlFcFRUMDR1Y0dGeWMyVW9kR2hwY3k1Q2FXeHNSR0YwWVNrN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmhkbVZrUW1sc2JFUmhkR0V1YldGd0tDaGlhV3hzS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGQmhlVzFsYm5SSWFYTjBiM0o1Ulc1MGNua29ZbWxzYkM1d1lYbHRaVzUwWDNSNWNHVXNJR0pwYkd3dWNHRjViV1Z1ZEY5emRXMXRZWEo1S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUZSdlFtbHNiRVJoZEdFb2NHZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvY0dndWJHVnVaM1JvSUR3Z01TbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUZ3aVhDSTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnU2xOUFRpNXpkSEpwYm1kcFpua29jR2dwTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCVWIwMWxjM05oWjJVb2JXVnpjMkZuWlVsa0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JoZEdFZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCY0luTjFZMk5sYzNOY0lqb2dkR2hwY3k1U1pYTjFiSFE5UFVKcGJHeFNaWFJ5YVdWMllXeFNaWE4xYkhRdVUxVkRRMFZUVTF4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRbWxzYkVsa0tTQmtZWFJoTG1KcGJHeGZhV1FnUFNCMGFHbHpMa0pwYkd4SlpEdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVWR0ZpYkdWSlpDa2daR0YwWVM1MFlXSnNaVjlwWkNBOUlIUm9hWE11VkdGaWJHVkpaRHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1U1pYTjFiSFFnUFQwZ1FtbHNiRkpsZEhKcFpYWmhiRkpsYzNWc2RDNVRWVU5EUlZOVEtWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMbUpwYkd4ZmRHOTBZV3hmWVcxdmRXNTBJRDBnZEdocGN5NVViM1JoYkVGdGIzVnVkRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0V1WW1sc2JGOXZkWFJ6ZEdGdVpHbHVaMTloYlc5MWJuUWdQU0IwYUdsekxrOTFkSE4wWVc1a2FXNW5RVzF2ZFc1ME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlTNWlhV3hzWDNCaGVXMWxiblJmYUdsemRHOXllU0E5SUhSb2FYTXVaMlYwUW1sc2JGQmhlVzFsYm5SSWFYTjBiM0o1S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaExtVnljbTl5WDNKbFlYTnZiaUE5SUhSb2FYTXVVbVZ6ZFd4MExuUnZVM1J5YVc1bktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhMbVZ5Y205eVgyUmxkR0ZwYkNBOUlIUm9hWE11VW1WemRXeDBMblJ2VTNSeWFXNW5LQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTFsYzNOaFoyVW9iV1Z6YzJGblpVbGtMQ0JGZG1WdWRITXVVR0Y1UVhSVVlXSnNaVUpwYkd4RVpYUmhhV3h6TENCa1lYUmhMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQkNhV3hzVW1WMGNtbGxkbUZzVW1WemRXeDBJRDBnWEc1N1hHNGdJQ0FnVTFWRFEwVlRVem9nSjFOVlEwTkZVMU1uTEZ4dUlDQWdJRWxPVmtGTVNVUmZWRUZDVEVWZlNVUTZJQ2RKVGxaQlRFbEVYMVJCUWt4RlgwbEVKeXhjYmlBZ0lDQkpUbFpCVEVsRVgwSkpURXhmU1VRNklDZEpUbFpCVEVsRVgwSkpURXhmU1VRbkxGeHVJQ0FnSUVsT1ZrRk1TVVJmVDFCRlVrRlVUMUpmU1VRNklDZEpUbFpCVEVsRVgwOVFSVkpCVkU5U1gwbEVKMXh1ZlR0Y2JseHVaWGh3YjNKMElHTnZibk4wSUZCaGVXMWxiblJVZVhCbElEMGdYRzU3WEc0Z0lDQWdRMEZTUkRvZ0owTkJVa1FuTEZ4dUlDQWdJRU5CVTBnNklDZERRVk5JSnlCY2JuMDdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QkNhV3hzVUdGNWJXVnVkRnh1ZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0cwcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlwYm1OdmJXbHVaMEZrZG1salpTQTlJRzA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRbWxzYkVsa0lEMGdkR2hwY3k1ZmFXNWpiMjFwYm1kQlpIWnBZMlV1UkdGMFlWdGNJbUpwYkd4ZmFXUmNJbDA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVWR0ZpYkdWSlpDQTlJSFJvYVhNdVgybHVZMjl0YVc1blFXUjJhV05sTGtSaGRHRmJYQ0owWVdKc1pWOXBaRndpWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVQY0dWeVlYUnZja2xrSUQwZ2RHaHBjeTVmYVc1amIyMXBibWRCWkhacFkyVXVSR0YwWVZ0Y0ltOXdaWEpoZEc5eVgybGtYQ0pkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbEJoZVcxbGJuUkdiRzkzVTNSaGNuUmxaQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0IyWVhJZ2NIUWdQU0IwYUdsekxsOXBibU52YldsdVowRmtkbWxqWlM1RVlYUmhXMXdpY0dGNWJXVnVkRjkwZVhCbFhDSmRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsQmhlVzFsYm5SVWVYQmxJRDBnY0hRN1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQXZMeUIwYUdseklHbHpJSGRvWlc0Z2QyVWdjR3g1SUhSb1pTQnpkV0lnYjJKcVpXTjBJRndpY0dGNWJXVnVkRjlrWlhSaGFXeHpYQ0lnYVc1MGJ5QmhJSEIxY21Ob1lYTmxJSEpsYzNCdmJuTmxJR1p2Y2lCamIyNTJaVzVwWlc1alpTNWNiaUFnSUNBZ0lDQWdkbUZ5SUhCMWNtTm9ZWE5sVFhObklEMGdibVYzSUUxbGMzTmhaMlVvYlM1SlpDd2dYQ0p3WVhsdFpXNTBYMlJsZEdGcGJITmNJaXdnYlM1RVlYUmhXMXdpY0dGNWJXVnVkRjlrWlhSaGFXeHpYQ0pkTENCbVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVSFZ5WTJoaGMyVlNaWE53YjI1elpTQTlJRzVsZHlCUWRYSmphR0Z6WlZKbGMzQnZibk5sS0hCMWNtTm9ZWE5sVFhObktUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsQjFjbU5vWVhObFFXMXZkVzUwSUQwZ2RHaHBjeTVRZFhKamFHRnpaVkpsYzNCdmJuTmxMa2RsZEZCMWNtTm9ZWE5sUVcxdmRXNTBLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVWR2x3UVcxdmRXNTBJRDBnZEdocGN5NVFkWEpqYUdGelpWSmxjM0J2Ym5ObExrZGxkRlJwY0VGdGIzVnVkQ2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbE4xY21Ob1lYSm5aVUZ0YjNWdWRDQTlJSFJvYVhNdVVIVnlZMmhoYzJWU1pYTndiMjV6WlM1SFpYUlRkWEpqYUdGeVoyVkJiVzkxYm5Rb0tUdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlFZWGx0Wlc1MFNHbHpkRzl5ZVVWdWRISjVYRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY0dGNWJXVnVkRlI1Y0dVc0lIQmhlVzFsYm5SVGRXMXRZWEo1S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFZWGx0Wlc1MFZIbHdaU0E5SUhCaGVXMWxiblJVZVhCbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxCaGVXMWxiblJUZFcxdFlYSjVJRDBnY0dGNWJXVnVkRk4xYlcxaGNuazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHOUtVMDlPS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGNWJXVnVkRjkwZVhCbE9pQjBhR2x6TGxCaGVXMWxiblJVZVhCbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGNWJXVnVkRjl6ZFcxdFlYSjVPaUIwYUdsekxsQmhlVzFsYm5SVGRXMXRZWEo1WEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lFZGxkRlJsY20xcGJtRnNVbVZtU1dRb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVVR0Y1YldWdWRGTjFiVzFoY25sYlhDSjBaWEp0YVc1aGJGOXlaV1pmYVdSY0lsMDdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdVR0Y1UVhSVVlXSnNaVU52Ym1acFoxeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbEJoZVVGMFZHRmliR1ZGYm1GaWJHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVQzQmxjbUYwYjNKSlpFVnVZV0pzWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVUY0d4cGRFSjVRVzF2ZFc1MFJXNWhZbXhsWkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa1Z4ZFdGc1UzQnNhWFJGYm1GaWJHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVZHRmliR1ZTWlhSeWFXVjJZV3hGYm1GaWJHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lGeHVJQ0FnSUNBZ0lDQjBhR2x6TGxScGNIQnBibWRGYm1GaWJHVmtJRDBnWm1Gc2MyVTdYRzRnSUNBZ1hHNGdJQ0FnSUNBZ0lIUm9hWE11VTNWdGJXRnllVkpsY0c5eWRFVnVZV0pzWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnZEdocGN5NU1ZV0psYkZCaGVVSjFkSFJ2YmlBOUlDY25PMXh1SUNBZ0lDQWdJQ0IwYUdsekxreGhZbVZzVDNCbGNtRjBiM0pKWkNBOUlDY25PMXh1SUNBZ0lDQWdJQ0IwYUdsekxreGhZbVZzVkdGaWJHVkpaQ0E5SUNjbk8xeHVJQ0FnSUZ4dUlDQWdJQ0FnSUNBdkx5QmNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklFWnBiR3dnYVc0Z2QybDBhQ0J2Y0dWeVlYUnZjaUJwWkhNZ2RHaGhkQ0IwYUdVZ1pXWjBjRzl6SUhSbGNtMXBibUZzSUhkcGJHd2dkbUZzYVdSaGRHVWdZV2RoYVc1emRDNGdYRzRnSUNBZ0lDQWdJQzh2SUV4bFlYWmxJRVZ0Y0hSNUlIUnZJR0ZzYkc5M0lHRnVlU0J2Y0dWeVlYUnZjbDlwWkNCMGFISnZkV2RvTGlCY2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJSFJvYVhNdVFXeHNiM2RsWkU5d1pYSmhkRzl5U1dSeklEMGdXMTA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdWRzlOWlhOellXZGxLRzFsYzNOaFoyVkpaQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p3WVhsZllYUmZkR0ZpYkdWZlpXNWhZbXhsWkZ3aU9pQjBhR2x6TGxCaGVVRjBWR0ZpYkdWRmJtRmliR1ZrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p2Y0dWeVlYUnZjbDlwWkY5bGJtRmliR1ZrWENJNklIUm9hWE11VDNCbGNtRjBiM0pKWkVWdVlXSnNaV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbk53YkdsMFgySjVYMkZ0YjNWdWRGOWxibUZpYkdWa1hDSTZJSFJvYVhNdVUzQnNhWFJDZVVGdGIzVnVkRVZ1WVdKc1pXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltVnhkV0ZzWDNOd2JHbDBYMlZ1WVdKc1pXUmNJam9nZEdocGN5NUZjWFZoYkZOd2JHbDBSVzVoWW14bFpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWRHbHdjR2x1WjE5bGJtRmliR1ZrWENJNklIUm9hWE11Vkdsd2NHbHVaMFZ1WVdKc1pXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY0luTjFiVzFoY25sZmNtVndiM0owWDJWdVlXSnNaV1JjSWpvZ2RHaHBjeTVUZFcxdFlYSjVVbVZ3YjNKMFJXNWhZbXhsWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpY0dGNVgySjFkSFJ2Ymw5c1lXSmxiRndpT2lCMGFHbHpMa3hoWW1Wc1VHRjVRblYwZEc5dUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKdmNHVnlZWFJ2Y2w5cFpGOXNZV0psYkZ3aU9pQjBhR2x6TGt4aFltVnNUM0JsY21GMGIzSkpaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lkR0ZpYkdWZmFXUmZiR0ZpWld4Y0lqb2dkR2hwY3k1TVlXSmxiRlJoWW14bFNXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY0ltOXdaWEpoZEc5eVgybGtYMnhwYzNSY0lqb2dkR2hwY3k1QmJHeHZkMlZrVDNCbGNtRjBiM0pKWkhNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5SaFlteGxYM0psZEhKcFpYWmhiRjlsYm1GaWJHVmtYQ0k2SUhSb2FYTXVWR0ZpYkdWU1pYUnlhV1YyWVd4RmJtRmliR1ZrTEZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdWemMyRm5aU2h0WlhOellXZGxTV1FzSUVWMlpXNTBjeTVRWVhsQmRGUmhZbXhsVTJWMFZHRmliR1ZEYjI1bWFXY3NJR1JoZEdFc0lIUnlkV1VwTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCemRHRjBhV01nUm1WaGRIVnlaVVJwYzJGaWJHVk5aWE56WVdkbEtHMWxjM05oWjJWSlpDa2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHRjBZU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpY0dGNVgyRjBYM1JoWW14bFgyVnVZV0pzWldSY0lqb2dabUZzYzJWY2JpQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJOWlhOellXZGxLRzFsYzNOaFoyVkpaQ3dnUlhabGJuUnpMbEJoZVVGMFZHRmliR1ZUWlhSVVlXSnNaVU52Ym1acFp5d2daR0YwWVN3Z2RISjFaU2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNHZMeUE4YzNWdGJXRnllVDVjYmk4dklGUm9aWE5sSUdGMGRISnBZblYwWlhNZ2QyOXlheUJtYjNJZ1EwOU5JR2x1ZEdWeWIzQXVYRzR2THlBOEwzTjFiVzFoY25rK1hHNWxlSEJ2Y25RZ1kyeGhjM01nUjJWMFQzQmxibFJoWW14bGMxSmxjM0J2Ym5ObFhHNTdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUM4dkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBZ0lDQWdMeTh2SUZsdmRYSWdVRTlUSUdseklISmxjWFZwY21Wa0lIUnZJSEJsY25OcGMzUWdjMjl0WlNCemRHRjBaU0J2YmlCaVpXaGhiR1lnYjJZZ2RHaGxJRVZtZEhCdmN5QnpieUIwYUdVZ1JXWjBjRzl6SUdOaGJpQnlaV052ZG1WeUlITjBZWFJsTGx4dUlDQWdJQ0FnSUNBdkx5OGdTWFFnYVhNZ2FuVnpkQ0JoSUhCcFpXTmxJRzltSUhOMGNtbHVaeUIwYUdGMElIbHZkU0J6WVhabElHRm5ZV2x1YzNRZ2VXOTFjaUJ2Y0dWeVlYUnZja2xrTGx4dUlDQWdJQ0FnSUNBdkx5OGdWMmhsYm1WMlpYSWdlVzkxSjNKbElHRnphMlZrSUdadmNpQlBjR1Z1VkdGaWJHVnpMQ0J0WVd0bElITjFjbVVnZVc5MUlISmxkSFZ5YmlCMGFHbHpJSEJwWldObElHOW1JR1JoZEdFZ2FXWWdlVzkxSUdoaGRtVWdhWFF1WEc0Z0lDQWdJQ0FnSUM4dkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVZHRmliR1ZFWVhSaElEMGdiblZzYkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSUGNHVnVWR0ZpYkdWektDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NVVZV0pzWlVSaGRHRXBYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlhUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJLVTA5T0xuQmhjbk5sS0hSb2FYTXVWR0ZpYkdWRVlYUmhLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlViMDFsYzNOaFoyVW9iV1Z6YzJGblpVbGtLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBZV0pzWlhNNklIUm9hWE11UjJWMFQzQmxibFJoWW14bGN5Z3BYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtHMWxjM05oWjJWSlpDd2dSWFpsYm5SekxsQmhlVUYwVkdGaWJHVlBjR1Z1VkdGaWJHVnpMQ0JrWVhSaExDQjBjblZsS1R0Y2JpQWdJQ0I5WEc1OVhHNWNiaTh2SUR4emRXMXRZWEo1UGx4dUx5OGdWR2hsYzJVZ1lYUjBjbWxpZFhSbGN5QjNiM0pySUdadmNpQkRUMDBnYVc1MFpYSnZjQzVjYmk4dklEd3ZjM1Z0YldGeWVUNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCUGNHVnVWR0ZpYkdWelJXNTBjbmxjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VVlXSnNaVWxrSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NU1ZV0psYkNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRbWxzYkU5MWRITjBZVzVrYVc1blFXMXZkVzUwSUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBiMHBUVDA0b0tTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFlXSnNaVjlwWkRvZ2RHaHBjeTVVWVdKc1pVbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3c2SUhSb2FYTXVUR0ZpWld3c1hHNGdJQ0FnSUNBZ0lDQWdJQ0JpYVd4c1gyOTFkSE4wWVc1a2FXNW5YMkZ0YjNWdWREb2dkR2hwY3k1Q2FXeHNUM1YwYzNSaGJtUnBibWRCYlc5MWJuUmNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjFjYmx4dUx5OHZJRHh6ZFcxdFlYSjVQbHh1THk4dklGUm9aWE5sSUdGMGRISnBZblYwWlhNZ2QyOXlheUJtYjNJZ1EwOU5JR2x1ZEdWeWIzQXVYRzR2THk4Z1BDOXpkVzF0WVhKNVBseHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1FtbHNiRkJoZVcxbGJuUkdiRzkzUlc1a1pXUlNaWE53YjI1elpWeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxrSnBiR3hKWkNBOUlHMHVSR0YwWVM1aWFXeHNYMmxrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa0pwYkd4UGRYUnpkR0Z1WkdsdVowRnRiM1Z1ZENBOUlHMHVSR0YwWVM1aWFXeHNYMjkxZEhOMFlXNWthVzVuWDJGdGIzVnVkRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUNhV3hzVkc5MFlXeEJiVzkxYm5RZ1BTQnRMa1JoZEdFdVltbHNiRjkwYjNSaGJGOWhiVzkxYm5RN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VDNCbGNtRjBiM0pKWkNBOUlHMHVSR0YwWVM1dmNHVnlZWFJ2Y2w5cFpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VVlXSnNaVWxrSUQwZ2JTNUVZWFJoTG5SaFlteGxYMmxrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa05oY21SVWIzUmhiRU52ZFc1MElEMGdiUzVFWVhSaExtTmhjbVJmZEc5MFlXeGZZMjkxYm5RN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTJGeVpGUnZkR0ZzUVcxdmRXNTBJRDBnYlM1RVlYUmhMbU5oY21SZmRHOTBZV3hmWVcxdmRXNTBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTmhjMmhVYjNSaGJFTnZkVzUwSUQwZ2JTNUVZWFJoTG1OaGMyaGZkRzkwWVd4ZlkyOTFiblE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMkZ6YUZSdmRHRnNRVzF2ZFc1MElEMGdiUzVFWVhSaExtTmhjMmhmZEc5MFlXeGZZVzF2ZFc1ME8xeHVJQ0FnSUgxY2JuMWNiaUlzSW1sdGNHOXlkQ0I3VW1WeGRXVnpkRWxrU0dWc2NHVnlmU0JtY205dElDY3VMMUpsY1hWbGMzUkpaRWhsYkhCbGNpYzdYRzVwYlhCdmNuUWdlMFYyWlc1MGN5d2dUV1Z6YzJGblpYMGdabkp2YlNBbkxpOU5aWE56WVdkbGN5YzdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlFiMjVuU0dWc2NHVnlYRzU3WEc0Z0lDQWdjM1JoZEdsaklFZGxibVZ5WVhSbFVHOXVaMUpsYzNOd2IyNXpaU2h3YVc1bktWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtIQnBibWN1U1dRc0lFVjJaVzUwY3k1UWIyNW5MQ0J1ZFd4c0xDQjBjblZsS1R0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCUWFXNW5TR1ZzY0dWeVhHNTdYRzRnSUNBZ2MzUmhkR2xqSUVkbGJtVnlZWFJsVUdsdVoxSmxjWFZsYzNRb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtGSmxjWFZsYzNSSlpFaGxiSEJsY2k1SlpDaGNJbkJwYm1kY0lpa3NJRVYyWlc1MGN5NVFhVzVuTENCdWRXeHNMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZTAxbGMzTmhaMlVzSUVWMlpXNTBjeXdnVTNWalkyVnpjMU4wWVhSbGZTQm1jbTl0SUNjdUwwMWxjM05oWjJWekp6dGNibWx0Y0c5eWRDQjdVbVZ4ZFdWemRFbGtTR1ZzY0dWeWZTQm1jbTl0SUNjdUwxSmxjWFZsYzNSSlpFaGxiSEJsY2ljN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVFpYUlFiM05KYm1adlVtVnhkV1Z6ZEZ4dWUxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIWmxjbk5wYjI0c0lIWmxibVJ2Y2tsa0xDQnNhV0p5WVhKNVRHRnVaM1ZoWjJVc0lHeHBZbkpoY25sV1pYSnphVzl1TENCdmRHaGxja2x1Wm04cFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkyWlhKemFXOXVJRDBnZG1WeWMybHZianRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkbVZ1Wkc5eVNXUWdQU0IyWlc1a2IzSkpaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiR2xpY21GeWVVeGhibWQxWVdkbElEMGdiR2xpY21GeWVVeGhibWQxWVdkbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c2FXSnlZWEo1Vm1WeWMybHZiaUE5SUd4cFluSmhjbmxXWlhKemFXOXVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXZkR2hsY2tsdVptOGdQU0J2ZEdobGNrbHVabTg3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkRzlOWlhOellXZGxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjRzl6WDNabGNuTnBiMjQ2SUhSb2FYTXVYM1psY25OcGIyNHNYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzTmZkbVZ1Wkc5eVgybGtPaUIwYUdsekxsOTJaVzVrYjNKSlpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cFluSmhjbmxmYkdGdVozVmhaMlU2SUhSb2FYTXVYMnhwWW5KaGNubE1ZVzVuZFdGblpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cFluSmhjbmxmZG1WeWMybHZiam9nZEdocGN5NWZiR2xpY21GeWVWWmxjbk5wYjI0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZEdobGNsOXBibVp2T2lCMGFHbHpMbDl2ZEdobGNrbHVabTljYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTFsYzNOaFoyVW9VbVZ4ZFdWemRFbGtTR1ZzY0dWeUxrbGtLRndpY0hKaGRsd2lLU3dnUlhabGJuUnpMbE5sZEZCdmMwbHVabTlTWlhGMVpYTjBMQ0JrWVhSaExDQjBjblZsS1R0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVFpYUlFiM05KYm1adlVtVnpjRzl1YzJWY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHRLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzVmpZMlZ6Y3lBOUlHMHVSMlYwVTNWalkyVnpjMU4wWVhSbEtDa2dQVDBnVTNWalkyVnpjMU4wWVhSbExsTjFZMk5sYzNNN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDIwZ1BTQnRPMXh1SUNBZ0lIMWNiaUFnSUNCcGMxTjFZMk5sYzNNb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM04xWTJObGMzTTdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGRFVnljbTl5VW1WaGMyOXVLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WlhKeWIzSmZjbVZoYzI5dU8xeHVJQ0FnSUgxY2JpQWdJQ0JuWlhSRmNuSnZja1JsZEdGcGJDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbVZ5Y205eVgyUmxkR0ZwYkR0Y2JpQWdJQ0I5WEc0Z0lDQWdaMlYwVW1WemNHOXVjMlZXWVd4MVpWZHBkR2hCZEhSeWFXSjFkR1VvWVhSMGNtbGlkWFJsS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVZ0aGRIUnlhV0oxZEdWZE8xeHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklFUmxkbWxqWlVsdVptOWNibnRjYmlBZ0lDQnpkR0YwYVdNZ1IyVjBRWEJ3UkdWMmFXTmxTVzVtYnlncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMllYSWdaR1YyYVdObFNXNW1ieUE5SUh0OU8xeHVJQ0FnSUNBZ0lDQmtaWFpwWTJWSmJtWnZXeWRrWlhacFkyVmZjM2x6ZEdWdEoxMGdQU0J1WVhacFoyRjBiM0l1ZFhObGNrRm5aVzUwTzF4dUlDQWdJQ0FnSUNBdkx5QmtaWFpwWTJWSmJtWnZMa0ZrWkNoY0ltUmxkbWxqWlY5emVYTjBaVzFjSWl3Z1JXNTJhWEp2Ym0xbGJuUXVUMU5XWlhKemFXOXVMbEJzWVhSbWIzSnRMbFJ2VTNSeWFXNW5LQ2tnS3lCY0lpQmNJaUFySUVWdWRtbHliMjV0Wlc1MExrOVRWbVZ5YzJsdmJpNVdaWEp6YVc5dUxsUnZVM1J5YVc1bktDa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaR1YyYVdObFNXNW1ienRjYmlBZ0lDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2UxSmxjWFZsYzNSSlpFaGxiSEJsY24wZ1puSnZiU0FuTGk5U1pYRjFaWE4wU1dSSVpXeHdaWEluTzF4dWFXMXdiM0owSUh0TlpYTnpZV2RsZlNCbWNtOXRJQ2N1TDAxbGMzTmhaMlZ6Snp0Y2JtbHRjRzl5ZENCN1VIVnlZMmhoYzJWU1pYTndiMjV6WlgwZ1puSnZiU0FuTGk5UWRYSmphR0Z6WlNjN1hHNXBiWEJ2Y25RZ2UxTndhVU52Ym1acFp5d2dWSEpoYm5OaFkzUnBiMjVQY0hScGIyNXpmU0JtY205dElDY3VMMU53YVUxdlpHVnNjeWM3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JRY21WaGRYUm9SWFpsYm5SeklEMGdYRzU3WEc0Z0lDQWdRV05qYjNWdWRGWmxjbWxtZVZKbGNYVmxjM1E2SUZ3aVlXTmpiM1Z1ZEY5MlpYSnBabmxjSWl4Y2JpQWdJQ0JCWTJOdmRXNTBWbVZ5YVdaNVVtVnpjRzl1YzJVNklGd2lZV05qYjNWdWRGOTJaWEpwWm5sZmNtVnpjRzl1YzJWY0lpeGNiaUFnSUNCY2JpQWdJQ0JRY21WaGRYUm9UM0JsYmxKbGNYVmxjM1FnT2lCY0luQnlaV0YxZEdoY0lpeGNiaUFnSUNCUWNtVmhkWFJvVDNCbGJsSmxjM0J2Ym5ObElEb2dYQ0p3Y21WaGRYUm9YM0psYzNCdmJuTmxYQ0lzWEc1Y2JpQWdJQ0JRY21WaGRYUm9WRzl3ZFhCU1pYRjFaWE4wT2lCY0luQnlaV0YxZEdoZmRHOXdkWEJjSWl4Y2JpQWdJQ0JRY21WaGRYUm9WRzl3ZFhCU1pYTndiMjV6WlRvZ1hDSndjbVZoZFhSb1gzUnZjSFZ3WDNKbGMzQnZibk5sWENJc1hHNWNiaUFnSUNCUWNtVmhkWFJvUlhoMFpXNWtVbVZ4ZFdWemREb2dYQ0p3Y21WaGRYUm9YMlY0ZEdWdVpGd2lMRnh1SUNBZ0lGQnlaV0YxZEdoRmVIUmxibVJTWlhOd2IyNXpaVG9nWENKd2NtVmhkWFJvWDJWNGRHVnVaRjl5WlhOd2IyNXpaVndpTEZ4dVhHNGdJQ0FnVUhKbFlYVjBhRkJoY25ScFlXeERZVzVqWld4c1lYUnBiMjVTWlhGMVpYTjBJRG9nWENKd2NtVmhkWFJvWDNCaGNuUnBZV3hmWTJGdVkyVnNiR0YwYVc5dVhDSXNYRzRnSUNBZ1VISmxZWFYwYUZCaGNuUnBZV3hEWVc1alpXeHNZWFJwYjI1U1pYTndiMjV6WlNBNklGd2ljSEpsWVhWMGFGOXdZWEowYVdGc1gyTmhibU5sYkd4aGRHbHZibDl5WlhOd2IyNXpaVndpTEZ4dUlDQWdJRnh1SUNBZ0lGQnlaV0YxZEdoRFlXNWpaV3hzWVhScGIyNVNaWEYxWlhOMElEb2dYQ0p3Y21WaGRYUm9YMk5oYm1ObGJHeGhkR2x2Ymx3aUxGeHVJQ0FnSUZCeVpXRjFkR2hEWVc1alpXeHNZWFJwYjI1U1pYTndiMjV6WlNBNklGd2ljSEpsWVhWMGFGOWpZVzVqWld4c1lYUnBiMjVmY21WemNHOXVjMlZjSWl4Y2JseHVJQ0FnSUZCeVpXRjFkR2hEYjIxd2JHVjBaVkpsY1hWbGMzUWdPaUJjSW1OdmJYQnNaWFJwYjI1Y0lpeGNiaUFnSUNCUWNtVmhkWFJvUTI5dGNHeGxkR1ZTWlhOd2IyNXpaU0E2SUZ3aVkyOXRjR3hsZEdsdmJsOXlaWE53YjI1elpWd2lYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUVdOamIzVnVkRlpsY21sbWVWSmxjWFZsYzNSY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdiM05TWldaSlpDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUc5elVtVm1TV1FnUFNCd2IzTlNaV1pKWkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JVYjAxbGMzTmhaMlVvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUmhkR0VnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5CdmMxOXlaV1pmYVdSY0lqb2dkR2hwY3k1UWIzTlNaV1pKWkZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdWemMyRm5aU2hTWlhGMVpYTjBTV1JJWld4d1pYSXVTV1FvWENKd2NtRjJYQ0lwTENCUWNtVmhkWFJvUlhabGJuUnpMa0ZqWTI5MWJuUldaWEpwWm5sU1pYRjFaWE4wTENCa1lYUmhMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QkJZMk52ZFc1MFZtVnlhV1o1VW1WemNHOXVjMlZjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lodEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVFWlhSaGFXeHpJRDBnYm1WM0lGQjFjbU5vWVhObFVtVnpjRzl1YzJVb2JTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQjBhR2x6TGtSbGRHRnBiSE11VUc5elVtVm1TV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjBnUFNCdE8xeHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklGQnlaV0YxZEdoUGNHVnVVbVZ4ZFdWemRGeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR0Z0YjNWdWRFTmxiblJ6TENCd2IzTlNaV1pKWkNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVRzl6VW1WbVNXUWdQU0J3YjNOU1pXWkpaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFjbVZoZFhSb1FXMXZkVzUwSUQwZ1lXMXZkVzUwUTJWdWRITTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuSUQwZ2JtVjNJRk53YVVOdmJtWnBaeWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMazl3ZEdsdmJuTWdQU0J1WlhjZ1ZISmhibk5oWTNScGIyNVBjSFJwYjI1ektDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ZHOU5aWE56WVdkbEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWVhSaElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSndiM05mY21WbVgybGtYQ0k2SUhSb2FYTXVVRzl6VW1WbVNXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY0luQnlaV0YxZEdoZllXMXZkVzUwWENJNklIUm9hWE11VUhKbFlYVjBhRUZ0YjNWdWRGeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSUWNtbHVkRTFsY21Ob1lXNTBRMjl3ZVNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSUWNtOXRjSFJHYjNKRGRYTjBiMjFsY2tOdmNIbFBia1ZtZEhCdmN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlRhV2R1WVhSMWNtVkdiRzkzVDI1RlpuUndiM01nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnk1QlpHUlNaV05sYVhCMFEyOXVabWxuS0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrOXdkR2x2Ym5NdVFXUmtUM0IwYVc5dWN5aGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtGSmxjWFZsYzNSSlpFaGxiSEJsY2k1SlpDaGNJbkJ5WVdOY0lpa3NJRkJ5WldGMWRHaEZkbVZ1ZEhNdVVISmxZWFYwYUU5d1pXNVNaWEYxWlhOMExDQmtZWFJoTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJRY21WaGRYUm9WRzl3ZFhCU1pYRjFaWE4wWEc1N1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2NISmxZWFYwYUVsa0xDQjBiM0IxY0VGdGIzVnVkRU5sYm5SekxDQndiM05TWldaSlpDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUhKbFlYVjBhRWxrSUQwZ2NISmxZWFYwYUVsa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxSdmNIVndRVzF2ZFc1MElEMGdkRzl3ZFhCQmJXOTFiblJEWlc1MGN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWIzTlNaV1pKWkNBOUlIQnZjMUpsWmtsa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeUE5SUc1bGR5QlRjR2xEYjI1bWFXY29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVBjSFJwYjI1eklEMGdibVYzSUZSeVlXNXpZV04wYVc5dVQzQjBhVzl1Y3lncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUZSdlRXVnpjMkZuWlNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMllYSWdaR0YwWVNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWNHOXpYM0psWmw5cFpGd2lPaUIwYUdsekxsQnZjMUpsWmtsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKd2NtVmhkWFJvWDJsa1hDSTZJSFJvYVhNdVVISmxZWFYwYUVsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKMGIzQjFjRjloYlc5MWJuUmNJam9nZEdocGN5NVViM0IxY0VGdGIzVnVkRnh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlFjbWx1ZEUxbGNtTm9ZVzUwUTI5d2VTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlFjbTl0Y0hSR2IzSkRkWE4wYjIxbGNrTnZjSGxQYmtWbWRIQnZjeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JUYVdkdVlYUjFjbVZHYkc5M1QyNUZablJ3YjNNZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5NUJaR1JTWldObGFYQjBRMjl1Wm1sbktHUmhkR0VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMazl3ZEdsdmJuTXVRV1JrVDNCMGFXOXVjeWhrWVhSaEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJOWlhOellXZGxLRkpsY1hWbGMzUkpaRWhsYkhCbGNpNUpaQ2hjSW5CeWRIVmNJaWtzSUZCeVpXRjFkR2hGZG1WdWRITXVVSEpsWVhWMGFGUnZjSFZ3VW1WeGRXVnpkQ3dnWkdGMFlTd2dkSEoxWlNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VISmxZWFYwYUZCaGNuUnBZV3hEWVc1alpXeHNZWFJwYjI1U1pYRjFaWE4wWEc1N1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2NISmxZWFYwYUVsa0xDQndZWEowYVdGc1EyRnVZMlZzYkdGMGFXOXVRVzF2ZFc1MFEyVnVkSE1zSUhCdmMxSmxaa2xrS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFjbVZoZFhSb1NXUWdQU0J3Y21WaGRYUm9TV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVR0Z5ZEdsaGJFTmhibU5sYkd4aGRHbHZia0Z0YjNWdWRDQTlJSEJoY25ScFlXeERZVzVqWld4c1lYUnBiMjVCYlc5MWJuUkRaVzUwY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRYjNOU1pXWkpaQ0E5SUhCdmMxSmxaa2xrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5QTlJRzVsZHlCVGNHbERiMjVtYVdjb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UGNIUnBiMjV6SUQwZ2JtVjNJRlJ5WVc1ellXTjBhVzl1VDNCMGFXOXVjeWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRlJ2VFdWemMyRm5aU2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHRjBZU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpY0c5elgzSmxabDlwWkZ3aU9pQjBhR2x6TGxCdmMxSmxaa2xrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p3Y21WaGRYUm9YMmxrWENJNklIUm9hWE11VUhKbFlYVjBhRWxrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p3Y21WaGRYUm9YMk5oYm1ObGJGOWhiVzkxYm5SY0lqb2dkR2hwY3k1UVlYSjBhV0ZzUTJGdVkyVnNiR0YwYVc5dVFXMXZkVzUwWEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNW1hV2N1Ulc1aFlteGxaRkJ5YVc1MFRXVnlZMmhoYm5SRGIzQjVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNW1hV2N1Ulc1aFlteGxaRkJ5YjIxd2RFWnZja04xYzNSdmJXVnlRMjl3ZVU5dVJXWjBjRzl6SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjdVJXNWhZbXhsWkZOcFoyNWhkSFZ5WlVac2IzZFBia1ZtZEhCdmN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma0ZrWkZKbFkyVnBjSFJEYjI1bWFXY29aR0YwWVNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VDNCMGFXOXVjeTVCWkdSUGNIUnBiMjV6S0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUUxbGMzTmhaMlVvVW1WeGRXVnpkRWxrU0dWc2NHVnlMa2xrS0Z3aWNISndZMXdpS1N3Z1VISmxZWFYwYUVWMlpXNTBjeTVRY21WaGRYUm9VR0Z5ZEdsaGJFTmhibU5sYkd4aGRHbHZibEpsY1hWbGMzUXNJR1JoZEdFc0lIUnlkV1VwTzF4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUZCeVpXRjFkR2hGZUhSbGJtUlNaWEYxWlhOMFhHNTdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jSEpsWVhWMGFFbGtMQ0J3YjNOU1pXWkpaQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVISmxZWFYwYUVsa0lEMGdjSEpsWVhWMGFFbGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsQnZjMUpsWmtsa0lEMGdjRzl6VW1WbVNXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuSUQwZ2JtVjNJRk53YVVOdmJtWnBaeWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMazl3ZEdsdmJuTWdQU0J1WlhjZ1ZISmhibk5oWTNScGIyNVBjSFJwYjI1ektDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ZHOU5aWE56WVdkbEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWVhSaElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSndiM05mY21WbVgybGtYQ0k2SUhSb2FYTXVVRzl6VW1WbVNXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY0luQnlaV0YxZEdoZmFXUmNJam9nZEdocGN5NVFjbVZoZFhSb1NXUmNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5NUZibUZpYkdWa1VISnBiblJOWlhKamFHRnVkRU52Y0hrZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5NUZibUZpYkdWa1VISnZiWEIwUm05eVEzVnpkRzl0WlhKRGIzQjVUMjVGWm5Sd2IzTWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeTVGYm1GaWJHVmtVMmxuYm1GMGRYSmxSbXh2ZDA5dVJXWjBjRzl6SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjdVFXUmtVbVZqWldsd2RFTnZibVpwWnloa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVBjSFJwYjI1ekxrRmtaRTl3ZEdsdmJuTW9aR0YwWVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z6YzJGblpTaFNaWEYxWlhOMFNXUklaV3h3WlhJdVNXUW9YQ0p3Y21WNGRGd2lLU3dnVUhKbFlYVjBhRVYyWlc1MGN5NVFjbVZoZFhSb1JYaDBaVzVrVW1WeGRXVnpkQ3dnWkdGMFlTd2dkSEoxWlNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VISmxZWFYwYUVOaGJtTmxiRkpsY1hWbGMzUmNibnRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh3Y21WaGRYUm9TV1FzSUhCdmMxSmxaa2xrS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFjbVZoZFhSb1NXUWdQU0J3Y21WaGRYUm9TV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVRzl6VW1WbVNXUWdQU0J3YjNOU1pXWkpaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjZ1BTQnVaWGNnVTNCcFEyOXVabWxuS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VDNCMGFXOXVjeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZiazl3ZEdsdmJuTW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlViMDFsYzNOaFoyVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbkJ2YzE5eVpXWmZhV1JjSWpvZ2RHaHBjeTVRYjNOU1pXWkpaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2ljSEpsWVhWMGFGOXBaRndpT2lCMGFHbHpMbEJ5WldGMWRHaEpaRnh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlFjbWx1ZEUxbGNtTm9ZVzUwUTI5d2VTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlFjbTl0Y0hSR2IzSkRkWE4wYjIxbGNrTnZjSGxQYmtWbWRIQnZjeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JUYVdkdVlYUjFjbVZHYkc5M1QyNUZablJ3YjNNZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5NUJaR1JTWldObGFYQjBRMjl1Wm1sbktHUmhkR0VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMazl3ZEdsdmJuTXVRV1JrVDNCMGFXOXVjeWhrWVhSaEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJOWlhOellXZGxLRkpsY1hWbGMzUkpaRWhsYkhCbGNpNUpaQ2hjSW5CeVlXTmNJaWtzSUZCeVpXRjFkR2hGZG1WdWRITXVVSEpsWVhWMGFFTmhibU5sYkd4aGRHbHZibEpsY1hWbGMzUXNJR1JoZEdFc0lIUnlkV1VwTzF4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUZCeVpXRjFkR2hEYjIxd2JHVjBhVzl1VW1WeGRXVnpkRnh1ZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hCeVpXRjFkR2hKWkN3Z1kyOXRjR3hsZEdsdmJrRnRiM1Z1ZEVObGJuUnpMQ0J3YjNOU1pXWkpaQ3dnYzNWeVkyaGhjbWRsUVcxdmRXNTBLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWNtVmhkWFJvU1dRZ1BTQndjbVZoZFhSb1NXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXRjR3hsZEdsdmJrRnRiM1Z1ZENBOUlHTnZiWEJzWlhScGIyNUJiVzkxYm5SRFpXNTBjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFiM05TWldaSlpDQTlJSEJ2YzFKbFprbGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsTjFjbU5vWVhKblpVRnRiM1Z1ZENBOUlITjFjbU5vWVhKblpVRnRiM1Z1ZER0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY2dQU0J1WlhjZ1UzQnBRMjl1Wm1sbktDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVQzQjBhVzl1Y3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Yms5d2RHbHZibk1vS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JVYjAxbGMzTmhaMlVvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUmhkR0VnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5CdmMxOXlaV1pmYVdSY0lqb2dkR2hwY3k1UWIzTlNaV1pKWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpY0hKbFlYVjBhRjlwWkZ3aU9pQjBhR2x6TGxCeVpXRjFkR2hKWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpWTI5dGNHeGxkR2x2Ymw5aGJXOTFiblJjSWpvZ2RHaHBjeTVEYjIxd2JHVjBhVzl1UVcxdmRXNTBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSnpkWEpqYUdGeVoyVmZZVzF2ZFc1MFhDSTZJSFJvYVhNdVUzVnlZMmhoY21kbFFXMXZkVzUwWEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNW1hV2N1Ulc1aFlteGxaRkJ5YVc1MFRXVnlZMmhoYm5SRGIzQjVJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNW1hV2N1Ulc1aFlteGxaRkJ5YjIxd2RFWnZja04xYzNSdmJXVnlRMjl3ZVU5dVJXWjBjRzl6SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjdVJXNWhZbXhsWkZOcFoyNWhkSFZ5WlVac2IzZFBia1ZtZEhCdmN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma0ZrWkZKbFkyVnBjSFJEYjI1bWFXY29aR0YwWVNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VDNCMGFXOXVjeTVCWkdSUGNIUnBiMjV6S0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUUxbGMzTmhaMlVvVW1WeGRXVnpkRWxrU0dWc2NHVnlMa2xrS0Z3aWNISmhZMXdpS1N3Z1VISmxZWFYwYUVWMlpXNTBjeTVRY21WaGRYUm9RMjl0Y0d4bGRHVlNaWEYxWlhOMExDQmtZWFJoTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJRY21WaGRYUm9VbVZ6Y0c5dWMyVmNibnRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFjbVZoZFhSb1NXUWdQU0J0TGtSaGRHRmJYQ0p3Y21WaGRYUm9YMmxrWENKZE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtSbGRHRnBiSE1nUFNCdVpYY2dVSFZ5WTJoaGMyVlNaWE53YjI1elpTaHRLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFiM05TWldaSlpDQTlJSFJvYVhNdVJHVjBZV2xzY3k1UWIzTlNaV1pKWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYlNBOUlHMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBRbUZzWVc1alpVRnRiM1Z1ZENncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMllYSWdkSGhVZVhCbElEMGdkR2hwY3k1ZmJTNUVZWFJoVzF3aWRISmhibk5oWTNScGIyNWZkSGx3WlZ3aVhUdGNiaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaDBlRlI1Y0dVcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0pRVWtVdFFWVlVTRndpT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdGYlhDSndjbVZoZFhSb1gyRnRiM1Z1ZEZ3aVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0pVVDFCVlVGd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWENKaVlXeGhibU5sWDJGdGIzVnVkRndpWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSkRRVTVEUlV4Y0lqb2dMeThnVUVGU1ZFbEJUQ0JEUVU1RFJVeE1RVlJKVDA1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaFcxd2lZbUZzWVc1alpWOWhiVzkxYm5SY0lsMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpVUZKRkxVRlZWRWdnUlZoVVhDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZVnRjSW1KaGJHRnVZMlZmWVcxdmRXNTBYQ0pkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0lsQkRUMDFRWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURBN0lDOHZJRUpoYkdGdVkyVWdhWE1nTUNCaFpuUmxjaUJqYjIxd2JHVjBhVzl1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVVGSkZMVUZWVkVnZ1EwRk9RMFZNWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURBN0lDOHZJRUpoYkdGdVkyVWdhWE1nTUNCaFpuUmxjaUJqWVc1alpXeHNZWFJwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlEQTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJRY21WMmFXOTFjMEpoYkdGdVkyVkJiVzkxYm5Rb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFI0Vkhsd1pTQTlJSFJvYVhNdVgyMHVSR0YwWVZ0Y0luUnlZVzV6WVdOMGFXOXVYM1I1Y0dWY0lsMDdYRzRnSUNBZ0lDQWdJSE4zYVhSamFDQW9kSGhVZVhCbEtWeHVJQ0FnSUNBZ0lDQjdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZ3aVVGSkZMVUZWVkVoY0lqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z01EdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdYQ0pVVDFCVlVGd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWENKbGVHbHpkR2x1WjE5d2NtVmhkWFJvWDJGdGIzVnVkRndpWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSkRRVTVEUlV4Y0lqb2dMeThnVUVGU1ZFbEJUQ0JEUVU1RFJVeE1RVlJKVDA1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaFcxd2laWGhwYzNScGJtZGZjSEpsWVhWMGFGOWhiVzkxYm5SY0lsMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpVUZKRkxVRlZWRWdnUlZoVVhDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZVnRjSW1WNGFYTjBhVzVuWDNCeVpXRjFkR2hmWVcxdmRXNTBYQ0pkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0lsQkRUMDFRWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWRWhKVXlCSlV5QlVSVU5JVGtsRFFVeE1XU0JPVDFRZ1EwOVNVa1ZEVkNCWFNFVk9JRU5QVFZCTVJWUkpUMDRnU0VGUVVFVk9VeUJHVDFJZ1FTQlFRVkpVU1VGTUlFRk5UMVZPVkM1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QkNWVlFnVlU1R1QxSlVWVTVCVkVWTVdTd2dWRWhKVXlCU1JWTlFUMDVUUlNCRVQwVlRJRTVQVkNCRFQwNVVRVWxPSUZ3aVpYaHBjM1JwYm1kZmNISmxZWFYwYUY5aGJXOTFiblJjSWk1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlRUeUJjSW1OdmJYQnNaWFJwYjI1ZllXMXZkVzUwWENJZ1NWTWdWRWhGSUVOTVQxTkZVMVFnVjBVZ1NFRldSUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoVzF3aVkyOXRjR3hsZEdsdmJsOWhiVzkxYm5SY0lsMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpVUZKRkxVRlZWRWdnUTBGT1EwVk1YQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVZ0Y0luQnlaV0YxZEdoZllXMXZkVzUwWENKZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdNRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCSFpYUkRiMjF3YkdWMGFXOXVRVzF2ZFc1MEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIwZUZSNWNHVWdQU0IwYUdsekxsOXRMa1JoZEdGYlhDSjBjbUZ1YzJGamRHbHZibDkwZVhCbFhDSmRPMXh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLSFI0Vkhsd1pTbGNiaUFnSUNBZ0lDQWdleUFnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0lsQkRUMDFRWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlWdGNJbU52YlhCc1pYUnBiMjVmWVcxdmRXNTBYQ0pkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z01EdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwVTNWeVkyaGhjbWRsUVcxdmRXNTBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCMGVGUjVjR1VnUFNCMGFHbHpMbDl0TGtSaGRHRmJYQ0owY21GdWMyRmpkR2x2Ymw5MGVYQmxYQ0pkTzF4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0hSNFZIbHdaU2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCY0lsQkRUMDFRWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlWdGNJbk4xY21Ob1lYSm5aVjloYlc5MWJuUmNJbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBd08xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1YyRnpUV1Z5WTJoaGJuUlNaV05sYVhCMFVISnBiblJsWkNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaFcxd2liV1Z5WTJoaGJuUmZjbVZqWldsd2RGOXdjbWx1ZEdWa1hDSmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGZGhjME4xYzNSdmJXVnlVbVZqWldsd2RGQnlhVzUwWldRb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlWdGNJbU4xYzNSdmJXVnlYM0psWTJWcGNIUmZjSEpwYm5SbFpGd2lYVHRjYmlBZ0lDQjlYRzU5SWl3aWFXMXdiM0owSUh0RmRtVnVkSE1zSUUxbGMzTmhaMlVzSUZOMVkyTmxjM05UZEdGMFpYMGdabkp2YlNBbkxpOU5aWE56WVdkbGN5YzdYRzVwYlhCdmNuUWdlMUpsY1hWbGMzUkpaRWhsYkhCbGNuMGdabkp2YlNBbkxpOVNaWEYxWlhOMFNXUklaV3h3WlhJbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VISnBiblJwYm1kU1pYRjFaWE4wWEc1N1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2EyVjVMQ0J3WVhsc2IyRmtLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmEyVjVJRDBnYTJWNU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d1lYbHNiMkZrSUQwZ2NHRjViRzloWkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYjAxbGMzTmhaMlVvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUmhkR0VnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW10bGVWd2lPaUIwYUdsekxsOXJaWGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbkJoZVd4dllXUmNJam9nZEdocGN5NWZjR0Y1Ykc5aFpGeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXVnpjMkZuWlNoU1pYRjFaWE4wU1dSSVpXeHdaWEl1U1dRb1hDSndjbWx1ZEZ3aUtTd2dSWFpsYm5SekxsQnlhVzUwYVc1blVtVnhkV1Z6ZEN3Z1pHRjBZU3dnZEhKMVpTazdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdVSEpwYm5ScGJtZFNaWE53YjI1elpWeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpkV05qWlhOeklEMGdiUzVIWlhSVGRXTmpaWE56VTNSaGRHVW9LU0E5UFNCVGRXTmpaWE56VTNSaGRHVXVVM1ZqWTJWemN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJTQTlJRzA3WEc0Z0lDQWdmVnh1SUNBZ0lHbHpVM1ZqWTJWemN5Z3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYzNWalkyVnpjenRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBSWEp5YjNKU1pXRnpiMjRvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1bGNuSnZjbDl5WldGemIyNDdYRzRnSUNBZ2ZWeHVJQ0FnSUdkbGRFVnljbTl5UkdWMFlXbHNLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WlhKeWIzSmZaR1YwWVdsc08xeHVJQ0FnSUgxY2JpQWdJQ0JuWlhSU1pYTndiMjV6WlZaaGJIVmxWMmwwYUVGMGRISnBZblYwWlNoaGRIUnlhV0oxZEdVcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaFcyRjBkSEpwWW5WMFpWMDdYRzRnSUNBZ2ZWeHVmVnh1WEc0dktpcGNiaUFxSUZSb2FYTWdZMnhoYzNNZ2FYTWdZU0J0YjJOcklIQnlhVzUwWlhJZ1ptOXlJSFJvWlNCMFpYSnRhVzVoYkNCMGJ5QndjbWx1ZENCU1pXTmxhWEIwYzF4dUlDb3ZYRzVsZUhCdmNuUWdZMnhoYzNNZ1VISnBiblJsY2lCN1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb1pXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1KMVptWmxjaUFnSUNBZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MElDQWdJRDBnWld4bGJXVnVkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQndjbWx1ZENndUxpNWhjbWR6S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WW5WbVptVnlMbkIxYzJnb1lYSm5jeTVxYjJsdUtDY2dKeWtwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5Wlc1a1pYSW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZjbVZ1WkdWeUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5RdWFXNXVaWEpVWlhoMElEMGdkR2hwY3k1aWRXWm1aWEl1YW05cGJpaGdYRnh1WEZ4dUlGeGNYRnd2WEZ4Y1hDOWNYRnhjTDF4Y1hGd3ZYRnhjWEM5Y1hGeGNMMXhjWEZ3dlhGeGNYQzljWEZ4Y0wxeGNYRnd2WEZ4Y1hDOWNYRnhjTDF4Y1hGd3ZYRnhjWEM5Y1hGeGNMeUJjWEc1Y1hHNWdLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWxiR1Z0Wlc1MExuTmpjbTlzYkZSdmNDQTlJSFJvYVhNdVpXeGxiV1Z1ZEM1elkzSnZiR3hJWldsbmFIUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1EyeGxZWElvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WW5WbVptVnlJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGJtUmxjaWdwTzF4dUlDQWdJSDFjYm4waUxDSnBiWEJ2Y25RZ2UwVjJaVzUwY3l3Z1UzVmpZMlZ6YzFOMFlYUmxMQ0JOWlhOellXZGxmU0JtY205dElDY3VMMDFsYzNOaFoyVnpKenRjYm1sdGNHOXlkQ0I3VW1WeGRXVnpkRWxrU0dWc2NHVnlmU0JtY205dElDY3VMMUpsY1hWbGMzUkpaRWhsYkhCbGNpYzdYRzVwYlhCdmNuUWdlMU53YVVOdmJtWnBaeXdnVkhKaGJuTmhZM1JwYjI1UGNIUnBiMjV6ZlNCbWNtOXRJQ2N1TDFOd2FVMXZaR1ZzY3ljN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCUWRYSmphR0Z6WlZKbGNYVmxjM1FnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0dGdGIzVnVkRU5sYm5SekxDQndiM05TWldaSlpDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsQnZjMUpsWmtsa0lEMGdjRzl6VW1WbVNXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVIVnlZMmhoYzJWQmJXOTFiblFnUFNCaGJXOTFiblJEWlc1MGN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1VWFYQkJiVzkxYm5RZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTmhjMmh2ZFhSQmJXOTFiblFnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxCeWIyMXdkRVp2Y2tOaGMyaHZkWFFnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVRkWEpqYUdGeVoyVkJiVzkxYm5RZ1BTQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnlBOUlHNWxkeUJUY0dsRGIyNW1hV2NvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVQY0hScGIyNXpJRDBnYm1WM0lGUnlZVzV6WVdOMGFXOXVUM0IwYVc5dWN5Z3BPMXh1WEc0Z0lDQWdJQ0FnSUM4dklFeHBZbkpoY25rZ1FtRmphM2RoY21SeklFTnZiWEJoZEdsaWFXeHBkSGxjYmlBZ0lDQWdJQ0FnZEdocGN5NUpaQ0E5SUhCdmMxSmxaa2xrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa0Z0YjNWdWRFTmxiblJ6SUQwZ1lXMXZkVzUwUTJWdWRITTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1FXMXZkVzUwVTNWdGJXRnllU2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZRkIxY21Ob1lYTmxPaUFrZXloMGFHbHpMbEIxY21Ob1lYTmxRVzF2ZFc1MElDOGdNVEF3TGpBcExuUnZSbWw0WldRb01pbDlPeUJjYmlBZ0lDQWdJQ0FnSUNBZ0lGUnBjRG9nSkhzb2RHaHBjeTVVYVhCQmJXOTFiblFnTHlBeE1EQXVNQ2t1ZEc5R2FYaGxaQ2d5S1gwN0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnUTJGemFHOTFkRG9nSkhzb2RHaHBjeTVEWVhOb2IzVjBRVzF2ZFc1MElDOGdNVEF3TGpBcExuUnZSbWw0WldRb01pbDlPMkE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdWRzlOWlhOellXZGxLQ2tnZTF4dUlDQWdJQ0FnSUNCc1pYUWdaR0YwWVNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmMxOXlaV1pmYVdRNklIUm9hWE11VUc5elVtVm1TV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndkWEpqYUdGelpWOWhiVzkxYm5RNklIUm9hWE11VUhWeVkyaGhjMlZCYlc5MWJuUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFYQmZZVzF2ZFc1ME9pQjBhR2x6TGxScGNFRnRiM1Z1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJoZllXMXZkVzUwT2lCMGFHbHpMa05oYzJodmRYUkJiVzkxYm5Rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3Y205dGNIUmZabTl5WDJOaGMyaHZkWFE2SUhSb2FYTXVVSEp2YlhCMFJtOXlRMkZ6YUc5MWRDd2dYRzRnSUNBZ0lDQWdJQ0FnSUNCemRYSmphR0Z5WjJWZllXMXZkVzUwT2lCMGFHbHpMbE4xY21Ob1lYSm5aVUZ0YjNWdWRGeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSUWNtbHVkRTFsY21Ob1lXNTBRMjl3ZVNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSUWNtOXRjSFJHYjNKRGRYTjBiMjFsY2tOdmNIbFBia1ZtZEhCdmN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlRhV2R1WVhSMWNtVkdiRzkzVDI1RlpuUndiM01nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnk1QlpHUlNaV05sYVhCMFEyOXVabWxuS0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrOXdkR2x2Ym5NdVFXUmtUM0IwYVc5dWN5aGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtGSmxjWFZsYzNSSlpFaGxiSEJsY2k1SlpDaGNJbkJ5WTJoelhDSXBMQ0JGZG1WdWRITXVVSFZ5WTJoaGMyVlNaWEYxWlhOMExDQmtZWFJoTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJRZFhKamFHRnpaVkpsYzNCdmJuTmxYRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjBnUFNCdE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxKbGNYVmxjM1JKWkNBOUlHMHVTV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVRzl6VW1WbVNXUWdQU0J0TGtSaGRHRXVjRzl6WDNKbFpsOXBaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVRZMmhsYldWT1lXMWxJRDBnYlM1RVlYUmhMbk5qYUdWdFpWOXVZVzFsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbE5qYUdWdFpVRndjRTVoYldVZ1BTQnRMa1JoZEdFdWMyTm9aVzFsWDI1aGJXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVUzVmpZMlZ6Y3lBOUlHMHVSMlYwVTNWalkyVnpjMU4wWVhSbEtDa2dQVDBnVTNWalkyVnpjMU4wWVhSbExsTjFZMk5sYzNNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFVsSk9LQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1Y25KdU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRGQjFjbU5vWVhObFFXMXZkVzUwS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdWNIVnlZMmhoYzJWZllXMXZkVzUwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEZScGNFRnRiM1Z1ZENncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExuUnBjRjloYlc5MWJuUWdmSHdnTUR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSVGRYSmphR0Z5WjJWQmJXOTFiblFvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1emRYSmphR0Z5WjJWZllXMXZkVzUwSUh4OElEQTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBRMkZ6YUc5MWRFRnRiM1Z1ZENncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExtTmhjMmhmWVcxdmRXNTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRUpoYm10T2IyNURZWE5vUVcxdmRXNTBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WW1GdWExOXViMjVqWVhOb1gyRnRiM1Z1ZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSQ1lXNXJRMkZ6YUVGdGIzVnVkQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG1KaGJtdGZZMkZ6YUY5aGJXOTFiblE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwUTNWemRHOXRaWEpTWldObGFYQjBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WTNWemRHOXRaWEpmY21WalpXbHdkQ0I4ZkNCY0lsd2lPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRTFsY21Ob1lXNTBVbVZqWldsd2RDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbTFsY21Ob1lXNTBYM0psWTJWcGNIUWdmSHdnWENKY0lqdGNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUlNaWE53YjI1elpWUmxlSFFvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1b2IzTjBYM0psYzNCdmJuTmxYM1JsZUhRZ2ZId2dYQ0pjSWp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSU1pYTndiMjV6WlVOdlpHVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzVvYjNOMFgzSmxjM0J2Ym5ObFgyTnZaR1U3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUVkbGRGUmxjbTFwYm1Gc1VtVm1aWEpsYm1ObFNXUW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzUwWlhKdGFXNWhiRjl5WldaZmFXUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBRMkZ5WkVWdWRISjVLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WTJGeVpGOWxiblJ5ZVR0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1IyVjBRV05qYjNWdWRGUjVjR1VvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1aFkyTnZkVzUwWDNSNWNHVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBRWFYwYUVOdlpHVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzVoZFhSb1gyTnZaR1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwUW1GdWEwUmhkR1VvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1aVlXNXJYMlJoZEdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFFtRnVhMVJwYldVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNWlZVzVyWDNScGJXVTdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRWRsZEUxaGMydGxaRkJoYmlncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExtMWhjMnRsWkY5d1lXNDdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRWRsZEZSbGNtMXBibUZzU1dRb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNTBaWEp0YVc1aGJGOXBaRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlhZWE5OWlhKamFHRnVkRkpsWTJWcGNIUlFjbWx1ZEdWa0tDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXViV1Z5WTJoaGJuUmZjbVZqWldsd2RGOXdjbWx1ZEdWa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUZkaGMwTjFjM1J2YldWeVVtVmpaV2x3ZEZCeWFXNTBaV1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1amRYTjBiMjFsY2w5eVpXTmxhWEIwWDNCeWFXNTBaV1E3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUVkbGRGTmxkSFJzWlcxbGJuUkVZWFJsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUM4dlhDSmlZVzVyWDNObGRIUnNaVzFsYm5SZlpHRjBaVndpT2x3aU1qQXdOREl3TVRoY0lseHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFpWTjBjaUE5SUhSb2FYTXVYMjB1UkdGMFlTNWlZVzVyWDNObGRIUnNaVzFsYm5SZlpHRjBaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmtZWFJsVTNSeUtTQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRTFsYzNOaFoyVXVVR0Z5YzJWQ1lXNXJSR0YwWlNoa1lYUmxVM1J5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSU1pYTndiMjV6WlZaaGJIVmxLR0YwZEhKcFluVjBaU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWVhSMGNtbGlkWFJsWFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JVYjFCaGVXMWxiblJUZFcxdFlYSjVLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCaFkyTnZkVzUwWDNSNWNHVTZJSFJvYVhNdVIyVjBRV05qYjNWdWRGUjVjR1VvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0YxZEdoZlkyOWtaVG9nZEdocGN5NUhaWFJCZFhSb1EyOWtaU2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbUZ1YTE5a1lYUmxPaUIwYUdsekxrZGxkRUpoYm10RVlYUmxLQ2tzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmlZVzVyWDNScGJXVTZJSFJvYVhNdVIyVjBRbUZ1YTFScGJXVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHaHZjM1JmY21WemNHOXVjMlZmWTI5a1pUb2dkR2hwY3k1SFpYUlNaWE53YjI1elpVTnZaR1VvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJR2h2YzNSZmNtVnpjRzl1YzJWZmRHVjRkRG9nZEdocGN5NUhaWFJTWlhOd2IyNXpaVlJsZUhRb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUcxaGMydGxaRjl3WVc0NklIUm9hWE11UjJWMFRXRnphMlZrVUdGdUtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCd2RYSmphR0Z6WlY5aGJXOTFiblE2SUhSb2FYTXVSMlYwVUhWeVkyaGhjMlZCYlc5MWJuUW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lISnliam9nZEdocGN5NUhaWFJTVWs0b0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOamFHVnRaVjl1WVcxbE9pQjBhR2x6TGxOamFHVnRaVTVoYldVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlhKdGFXNWhiRjlwWkRvZ2RHaHBjeTVIWlhSVVpYSnRhVzVoYkVsa0tDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpYSnRhVzVoYkY5eVpXWmZhV1E2SUhSb2FYTXVSMlYwVkdWeWJXbHVZV3hTWldabGNtVnVZMlZKWkNncExGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdsd1gyRnRiM1Z1ZERvZ2RHaHBjeTVIWlhSVWFYQkJiVzkxYm5Rb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhOMWNtTm9ZWEpuWlY5aGJXOTFiblE2SUhSb2FYTXVSMlYwVTNWeVkyaGhjbWRsUVcxdmRXNTBLQ2xjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCRFlXNWpaV3hVY21GdWMyRmpkR2x2YmxKbGNYVmxjM1JjYm50Y2JpQWdJQ0JjYmlBZ0lDQlViMDFsYzNOaFoyVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJOWlhOellXZGxLRkpsY1hWbGMzUkpaRWhsYkhCbGNpNUpaQ2hjSW1OMGVGd2lLU3dnUlhabGJuUnpMa05oYm1ObGJGUnlZVzV6WVdOMGFXOXVVbVZ4ZFdWemRDd2diblZzYkN3Z2RISjFaU2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUTJGdVkyVnNWSEpoYm5OaFkzUnBiMjVTWlhOd2IyNXpaVnh1ZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0cwcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl0SUQwZ2JUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWIzTlNaV1pKWkNBOUlIUm9hWE11WDIwdVJHRjBZUzV3YjNOZmNtVm1YMmxrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbE4xWTJObGMzTWdQU0IwYUdsekxsOXRMa2RsZEZOMVkyTmxjM05UZEdGMFpTZ3BJRDA5SUZOMVkyTmxjM05UZEdGMFpTNVRkV05qWlhOek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRFVnljbTl5VW1WaGMyOXVLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WlhKeWIzSmZjbVZoYzI5dU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRFVnljbTl5UkdWMFlXbHNLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WlhKeWIzSmZaR1YwWVdsc08xeHVJQ0FnSUgxY2JseHVJQ0FnSUZkaGMxUjRibEJoYzNSUWIybHVkRTltVG05U1pYUjFjbTRvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSMlYwUlhKeWIzSW9LUzV6ZEdGeWRITlhhWFJvS0Z3aVZGaE9YMUJCVTFSZlVFOUpUbFJmVDBaZlRrOWZVa1ZVVlZKT1hDSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRkpsYzNCdmJuTmxWbUZzZFdWWGFYUm9RWFIwY21saWRYUmxLR0YwZEhKcFluVjBaU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWVhSMGNtbGlkWFJsWFR0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCSFpYUk1ZWE4wVkhKaGJuTmhZM1JwYjI1U1pYRjFaWE4wWEc1N1hHNGdJQ0FnVkc5TlpYTnpZV2RsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXVnpjMkZuWlNoU1pYRjFaWE4wU1dSSVpXeHdaWEl1U1dRb1hDSm5iSFJjSWlrc0lFVjJaVzUwY3k1SFpYUk1ZWE4wVkhKaGJuTmhZM1JwYjI1U1pYRjFaWE4wTENCdWRXeHNMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QkhaWFJNWVhOMFZISmhibk5oWTNScGIyNVNaWE53YjI1elpWeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRJRDBnYlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JYWVhOU1pYUnlhV1YyWldSVGRXTmpaWE56Wm5Wc2JIa29LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdMeThnVjJVZ1kyRnVKM1FnY21Wc2VTQnZiaUJqYUdWamEybHVaeUJjSW5OMVkyTmxjM05jSWlCbWJHRm5JRzl5SUZ3aVpYSnliM0pjSWlCbWFXVnNaSE1nYUdWeVpTeGNiaUFnSUNBZ0lDQWdMeThnWVhNZ2NtVjBjbWxsZG1Gc0lHMWhlU0JpWlNCemRXTmpaWE56Wm5Wc0xDQmlkWFFnZEdobElISmxkSEpwWlhabFpDQjBjbUZ1YzJGamRHbHZiaUIzWVhNZ1lTQm1ZV2xzTGx4dUlDQWdJQ0FnSUNBdkx5QlRieUIzWlNCamFHVmpheUJwWmlCM1pTQm5iM1FnWW1GamF5QmhiaUJTWlhOd2IyNXpaVU52WkdVdVhHNGdJQ0FnSUNBZ0lDOHZJQ2hoY3lCdmNIQnZjMlZrSUhSdklITmhlU0JoYmlCdmNHVnlZWFJwYjI1ZmFXNWZjSEp2WjNKbGMzTmZaWEp5YjNJcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlBaElYUm9hWE11UjJWMFVtVnpjRzl1YzJWRGIyUmxLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdWMkZ6VkdsdFpVOTFkRTltVTNsdVkwVnljbTl5S0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa2RsZEVWeWNtOXlLQ2t1YzNSaGNuUnpWMmwwYUNoY0lsUkpUVVZmVDFWVVgwOUdYMU5aVGtOY0lpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1YyRnpUM0JsY21GMGFXOXVTVzVRY205bmNtVnpjMFZ5Y205eUtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtkbGRFVnljbTl5S0NrdWMzUmhjblJ6VjJsMGFDaGNJazlRUlZKQlZFbFBUbDlKVGw5UVVrOUhVa1ZUVTF3aUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCSmMxZGhhWFJwYm1kR2IzSlRhV2R1WVhSMWNtVlNaWE53YjI1elpTZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1SFpYUkZjbkp2Y2lncExuTjBZWEowYzFkcGRHZ29YQ0pQVUVWU1FWUkpUMDVmU1U1ZlVGSlBSMUpGVTFOZlFWZEJTVlJKVGtkZlUwbEhUa0ZVVlZKRlhDSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFbHpWMkZwZEdsdVowWnZja0YxZEdoRGIyUmxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrZGxkRVZ5Y205eUtDa3VjM1JoY25SelYybDBhQ2hjSWs5UVJWSkJWRWxQVGw5SlRsOVFVazlIVWtWVFUxOUJWMEZKVkVsT1IxOVFTRTlPUlY5QlZWUklYME5QUkVWY0lpazdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRWx6VTNScGJHeEpibEJ5YjJkeVpYTnpLSEJ2YzFKbFprbGtLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11VjJGelQzQmxjbUYwYVc5dVNXNVFjbTluY21WemMwVnljbTl5S0NrZ0ppWWdLSFJvYVhNdVIyVjBVRzl6VW1WbVNXUW9LU0E5UFNCd2IzTlNaV1pKWkNCOGZDQjBhR2x6TGtkbGRGQnZjMUpsWmtsa0tDa2dQVDBnYm5Wc2JDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBVM1ZqWTJWemMxTjBZWFJsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa2RsZEZOMVkyTmxjM05UZEdGMFpTZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGZGhjMU4xWTJObGMzTm1kV3hVZUNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVIWlhSVGRXTmpaWE56VTNSaGRHVW9LU0E5UFNCVGRXTmpaWE56VTNSaGRHVXVVM1ZqWTJWemN6dGNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUlVlRlI1Y0dVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNTBjbUZ1YzJGamRHbHZibDkwZVhCbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRGQnZjMUpsWmtsa0tDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVjRzl6WDNKbFpsOXBaRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJDWVc1clRtOXVRMkZ6YUVGdGIzVnVkQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG1KaGJtdGZibTl1WTJGemFGOWhiVzkxYm5RN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFUyTm9aVzFsUVhCd0tDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVjMk5vWlcxbFgyNWhiV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwVTJOb1pXMWxUbUZ0WlNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExuTmphR1Z0WlY5dVlXMWxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRUZ0YjNWdWRDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbUZ0YjNWdWRGOXdkWEpqYUdGelpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUlVjbUZ1YzJGamRHbHZia0Z0YjNWdWRDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbUZ0YjNWdWRGOTBjbUZ1YzJGamRHbHZibDkwZVhCbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRFSmhibXRFWVhSbFZHbHRaVk4wY21sdVp5Z3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWkhNZ1BTQjBhR2x6TGw5dExrUmhkR0V1WW1GdWExOWtZWFJsSUNzZ2RHaHBjeTVmYlM1RVlYUmhMbUpoYm10ZmRHbHRaVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1J6TzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEZKU1RpZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbkp5Ymp0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1IyVjBVbVZ6Y0c5dWMyVlVaWGgwS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdWFHOXpkRjl5WlhOd2IyNXpaVjkwWlhoMElId2dYQ0pjSWp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSU1pYTndiMjV6WlVOdlpHVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzVvYjNOMFgzSmxjM0J2Ym5ObFgyTnZaR1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnVkdobGNtVWdhWE1nWVNCaWRXY3NJRlpUVmkwNU1qQXNJSGRvWlhKbFlua2dkR2hsSUdOMWMzUnZiV1Z5WDNKbFkyVnBjSFFnYVhNZ2JXbHpjMmx1WnlCbWNtOXRJR0VnWjJ4MElISmxjM0J2Ym5ObExseHVJQ0FnSUM4dklGUm9aU0JqZFhKeVpXNTBJSEpsWTI5dGJXVnVaR0YwYVc5dUlHbHpJSFJ2SUhWelpTQjBhR1VnYldWeVkyaGhiblFnY21WalpXbHdkQ0JwYmlCd2JHRmpaU0J2WmlCcGRDQnBaaUJ5WlhGMWFYSmxaQzVjYmlBZ0lDQXZMeUJVYUdseklHMWxkR2h2WkNCdGIyUnBabWxsY3lCMGFHVWdkVzVrWlhKc2VXbHVaeUJwYm1OdmJXbHVaeUJ0WlhOellXZGxJR1JoZEdFZ1lua2dZMjl3ZVdsdVoxeHVJQ0FnSUM4dklIUm9aU0J0WlhKamFHRnVkQ0J5WldObGFYQjBJR2x1ZEc4Z2RHaGxJR04xYzNSdmJXVnlJSEpsWTJWcGNIUWdiMjVzZVNCcFppQjBhR1Z5WlNCY2JpQWdJQ0F2THlCcGN5QmhJRzFsY21Ob1lXNTBYM0psWTJWcGNIUWdZVzVrSUhSb1pYSmxJR2x6SUc1dmRDQmhJR04xYzNSdmJXVnlYM0psWTJWcGNIUXVJQ0FnWEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJRU52Y0hsTlpYSmphR0Z1ZEZKbFkyVnBjSFJVYjBOMWMzUnZiV1Z5VW1WalpXbHdkQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1kzSWdQU0IwYUdsekxsOXRMa1JoZEdFdVkzVnpkRzl0WlhKZmNtVmpaV2x3ZER0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzF5SUQwZ2RHaHBjeTVmYlM1RVlYUmhMbTFsY21Ob1lXNTBYM0psWTJWcGNIUTdYRzRnSUNBZ0lDQWdJR2xtSUNodGNpQWhQU0JjSWx3aUlDWW1JQ0VvWTNJcEtWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl0TGtSaGRHRXVZM1Z6ZEc5dFpYSmZjbVZqWldsd2RDQTlJRzF5TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VtVm1kVzVrVW1WeGRXVnpkRnh1ZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0dGdGIzVnVkRU5sYm5SekxDQndiM05TWldaSlpDd2djM1Z3Y0hKbGMzTk5aWEpqYUdGdWRGQmhjM04zYjNKa0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVCYlc5MWJuUkRaVzUwY3lBOUlHRnRiM1Z1ZEVObGJuUnpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrbGtJRDBnVW1WeGRXVnpkRWxrU0dWc2NHVnlMa2xrS0Z3aWNtVm1kVzVrWENJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxCdmMxSmxaa2xrSUQwZ2NHOXpVbVZtU1dRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VTNWd2NISmxjM05OWlhKamFHRnVkRkJoYzNOM2IzSmtJRDBnYzNWd2NISmxjM05OWlhKamFHRnVkRkJoYzNOM2IzSmtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnlBOUlHNWxkeUJUY0dsRGIyNW1hV2NvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVQY0hScGIyNXpJRDBnYm1WM0lGUnlZVzV6WVdOMGFXOXVUM0IwYVc5dWN5Z3BPMXh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0JVYjAxbGMzTmhaMlVvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHUmhkR0VnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldaMWJtUmZZVzF2ZFc1ME9pQjBhR2x6TGtGdGIzVnVkRU5sYm5SekxDQmNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmMxOXlaV1pmYVdRNklIUm9hWE11VUc5elVtVm1TV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkWEJ3Y21WemMxOXRaWEpqYUdGdWRGOXdZWE56ZDI5eVpEb2dkR2hwY3k1VGRYQndjbVZ6YzAxbGNtTm9ZVzUwVUdGemMzZHZjbVJjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlFjbWx1ZEUxbGNtTm9ZVzUwUTI5d2VTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlFjbTl0Y0hSR2IzSkRkWE4wYjIxbGNrTnZjSGxQYmtWbWRIQnZjeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JUYVdkdVlYUjFjbVZHYkc5M1QyNUZablJ3YjNNZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5NUJaR1JTWldObGFYQjBRMjl1Wm1sbktHUmhkR0VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMazl3ZEdsdmJuTXVRV1JrVDNCMGFXOXVjeWhrWVhSaEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJOWlhOellXZGxLRkpsY1hWbGMzUkpaRWhsYkhCbGNpNUpaQ2hjSW5KbFpuVnVaRndpS1N3Z1JYWmxiblJ6TGxKbFpuVnVaRkpsY1hWbGMzUXNJR1JoZEdFc0lIUnlkV1VwTzF4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUZKbFpuVnVaRkpsYzNCdmJuTmxYRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjBnUFNCdE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxKbGNYVmxjM1JKWkNBOUlHMHVTV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVRzl6VW1WbVNXUWdQU0J0TGtSaGRHRXVjRzl6WDNKbFpsOXBaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVRZMmhsYldWT1lXMWxJRDBnYlM1RVlYUmhMbk5qYUdWdFpWOXVZVzFsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbE5qYUdWdFpVRndjRTVoYldVZ1BTQnRMa1JoZEdFdWMyTm9aVzFsWDI1aGJXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVUzVmpZMlZ6Y3lBOUlHMHVSMlYwVTNWalkyVnpjMU4wWVhSbEtDa2dQVDBnVTNWalkyVnpjMU4wWVhSbExsTjFZMk5sYzNNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFVtVm1kVzVrUVcxdmRXNTBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1Y21WbWRXNWtYMkZ0YjNWdWREdGNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUlNVazRvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1eWNtNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBRM1Z6ZEc5dFpYSlNaV05sYVhCMEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVZM1Z6ZEc5dFpYSmZjbVZqWldsd2RDQjhmQ0JjSWx3aU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRFMWxjbU5vWVc1MFVtVmpaV2x3ZENncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExtMWxjbU5vWVc1MFgzSmxZMlZwY0hRN1hHNGdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lFZGxkRkpsYzNCdmJuTmxWR1Y0ZENncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExtaHZjM1JmY21WemNHOXVjMlZmZEdWNGRDQjhmQ0JjSWx3aU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRGSmxjM0J2Ym5ObFEyOWtaU2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG1odmMzUmZjbVZ6Y0c5dWMyVmZZMjlrWlNCOGZDQmNJbHdpTzF4dUlDQWdJSDFjYmx4dVhHNGdJQ0FnUjJWMFZHVnliV2x1WVd4U1pXWmxjbVZ1WTJWSlpDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMblJsY20xcGJtRnNYM0psWmw5cFpDQjhmQ0JjSWx3aU8xeHVJQ0FnSUgxY2JpQWdJQ0JIWlhSRFlYSmtSVzUwY25rb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNWpZWEprWDJWdWRISjVJSHg4SUZ3aVhDSTdYRzRnSUNBZ2ZWeHVJQ0FnSUVkbGRFRmpZMjkxYm5SVWVYQmxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WVdOamIzVnVkRjkwZVhCbElIeDhJRndpWENJN1hHNGdJQ0FnZlZ4dUlDQWdJRWRsZEVGMWRHaERiMlJsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdVlYVjBhRjlqYjJSbElIeDhJRndpWENJN1hHNGdJQ0FnZlZ4dUlDQWdJRWRsZEVKaGJtdEVZWFJsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdVltRnVhMTlrWVhSbElIeDhJRndpWENJN1hHNGdJQ0FnZlZ4dUlDQWdJRWRsZEVKaGJtdFVhVzFsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdVltRnVhMTkwYVcxbElIeDhJRndpWENJN1hHNGdJQ0FnZlZ4dUlDQWdJRWRsZEUxaGMydGxaRkJoYmlncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExtMWhjMnRsWkY5d1lXNGdmSHdnWENKY0lqdGNiaUFnSUNCOVhHNGdJQ0FnUjJWMFZHVnliV2x1WVd4SlpDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMblJsY20xcGJtRnNYMmxrSUh4OElGd2lYQ0k3WEc0Z0lDQWdmVnh1SUNBZ0lGZGhjMDFsY21Ob1lXNTBVbVZqWldsd2RGQnlhVzUwWldRb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNXRaWEpqYUdGdWRGOXlaV05sYVhCMFgzQnlhVzUwWldRN1hHNGdJQ0FnZlZ4dUlDQWdJRmRoYzBOMWMzUnZiV1Z5VW1WalpXbHdkRkJ5YVc1MFpXUW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzVqZFhOMGIyMWxjbDl5WldObGFYQjBYM0J5YVc1MFpXUTdYRzRnSUNBZ2ZWeHVJQ0FnSUVkbGRGTmxkSFJzWlcxbGJuUkVZWFJsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUM4dlhDSmlZVzVyWDNObGRIUnNaVzFsYm5SZlpHRjBaVndpT2x3aU1qQXdOREl3TVRoY0lseHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFpWTjBjaUE5SUhSb2FYTXVYMjB1UkdGMFlTNWlZVzVyWDNObGRIUnNaVzFsYm5SZlpHRjBaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmtZWFJsVTNSeUtTQnlaWFIxY200Z2JuVnNiRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRTFsYzNOaFoyVXVVR0Z5YzJWQ1lXNXJSR0YwWlNoa1lYUmxVM1J5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSU1pYTndiMjV6WlZaaGJIVmxLR0YwZEhKcFluVjBaU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWVhSMGNtbGlkWFJsWFR0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVGFXZHVZWFIxY21WU1pYRjFhWEpsWkZ4dWUxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHMHBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGxKbGNYVmxjM1JKWkNBOUlHMHVTV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVRzl6VW1WbVNXUWdQU0J0TGtSaGRHRXVjRzl6WDNKbFpsOXBaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZqWldsd2RGUnZVMmxuYmlBOUlHMHVSR0YwWVM1dFpYSmphR0Z1ZEY5eVpXTmxhWEIwTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCVGFXZHVZWFIxY21WU1pYRjFhWEpsWkNod2IzTlNaV1pKWkN3Z2NtVnhkV1Z6ZEVsa0xDQnlaV05sYVhCMFZHOVRhV2R1S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVNaWEYxWlhOMFNXUWdQU0J5WlhGMVpYTjBTV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVRzl6VW1WbVNXUWdQU0J3YjNOU1pXWkpaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZqWldsd2RGUnZVMmxuYmlBOUlISmxZMlZwY0hSVWIxTnBaMjQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwVFdWeVkyaGhiblJTWldObGFYQjBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5eVpXTmxhWEIwVkc5VGFXZHVPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRk5wWjI1aGRIVnlaVVJsWTJ4cGJtVmNibnRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh3YjNOU1pXWkpaQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQndiM05TWldaSlpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCVWIwMWxjM05oWjJVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JoZEdFZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzTmZjbVZtWDJsa09pQjBhR2x6TGxCdmMxSmxaa2xrWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z6YzJGblpTaFNaWEYxWlhOMFNXUklaV3h3WlhJdVNXUW9YQ0p6YVdka1pXTmNJaWtzSUVWMlpXNTBjeTVUYVdkdVlYUjFjbVZFWldOc2FXNWxaQ3dnWkdGMFlTd2dkSEoxWlNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1UybG5ibUYwZFhKbFFXTmpaWEIwWEc1N1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2NHOXpVbVZtU1dRcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbEJ2YzFKbFprbGtJRDBnY0c5elVtVm1TV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdWRzlOWlhOellXZGxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjRzl6WDNKbFpsOXBaRG9nZEdocGN5NVFiM05TWldaSlpGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUUxbGMzTmhaMlVvVW1WeGRXVnpkRWxrU0dWc2NHVnlMa2xrS0Z3aWMybG5ZV05qWENJcExDQkZkbVZ1ZEhNdVUybG5ibUYwZFhKbFFXTmpaWEIwWldRc0lHUmhkR0VzSUhSeWRXVXBPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRTF2ZEc5UWRYSmphR0Z6WlZKbGNYVmxjM1JjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loaGJXOTFiblJEWlc1MGN5d2djRzl6VW1WbVNXUXNJSE4xY21Ob1lYSm5aVUZ0YjNWdWRDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUc5elVtVm1TV1FnUFNCd2IzTlNaV1pKWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRZFhKamFHRnpaVUZ0YjNWdWRDQTlJR0Z0YjNWdWRFTmxiblJ6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbE4xY21Ob1lYSm5aVUZ0YjNWdWRDQTlJSE4xY21Ob1lYSm5aVUZ0YjNWdWREdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VGRYQndjbVZ6YzAxbGNtTm9ZVzUwVUdGemMzZHZjbVFnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjZ1BTQnVaWGNnVTNCcFEyOXVabWxuS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VDNCMGFXOXVjeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZiazl3ZEdsdmJuTW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlViMDFsYzNOaFoyVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM05mY21WbVgybGtPaUIwYUdsekxsQnZjMUpsWmtsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hWeVkyaGhjMlZmWVcxdmRXNTBPaUIwYUdsekxsQjFjbU5vWVhObFFXMXZkVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjM1Z5WTJoaGNtZGxYMkZ0YjNWdWREb2dkR2hwY3k1VGRYSmphR0Z5WjJWQmJXOTFiblFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkWEJ3Y21WemMxOXRaWEpqYUdGdWRGOXdZWE56ZDI5eVpEb2dkR2hwY3k1VGRYQndjbVZ6YzAxbGNtTm9ZVzUwVUdGemMzZHZjbVJjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeTVGYm1GaWJHVmtVSEpwYm5STlpYSmphR0Z1ZEVOdmNIa2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeTVGYm1GaWJHVmtVSEp2YlhCMFJtOXlRM1Z6ZEc5dFpYSkRiM0I1VDI1RlpuUndiM01nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnk1RmJtRmliR1ZrVTJsbmJtRjBkWEpsUm14dmQwOXVSV1owY0c5eklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VRV1JrVW1WalpXbHdkRU52Ym1acFp5aGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVQY0hScGIyNXpMa0ZrWkU5d2RHbHZibk1vWkdGMFlTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdWemMyRm5aU2hTWlhGMVpYTjBTV1JJWld4d1pYSXVTV1FvWENKdGIzUnZYQ0lwTENCRmRtVnVkSE11VFc5MGIxQjFjbU5vWVhObFVtVnhkV1Z6ZEN3Z1pHRjBZU3dnZEhKMVpTazdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdUVzkwYjFCMWNtTm9ZWE5sVW1WemNHOXVjMlZjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lodEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRZFhKamFHRnpaVkpsYzNCdmJuTmxJRDBnYm1WM0lGQjFjbU5vWVhObFVtVnpjRzl1YzJVb2JTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQlFkWEpqYUdGelpWSmxjM0J2Ym5ObExsQnZjMUpsWmtsa08xeHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklGQm9iMjVsUm05eVFYVjBhRkpsY1hWcGNtVmtYRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvTGk0dVlYSm5jeWxjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtS0dGeVozTXViR1Z1WjNSb0lEMDlQU0EwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsQnZjMUpsWmtsa0lEMGdZWEpuYzFzd1hUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVVbVZ4ZFdWemRFbGtJRDBnWVhKbmMxc3hYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNCb2IyNWxUblZ0WW1WeUlEMGdZWEpuYzFzeVhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjFsY21Ob1lXNTBTV1FnUFNCaGNtZHpXek5kTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZb1lYSm5jeTVzWlc1bmRHZ2dQVDA5SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVVbVZ4ZFdWemRFbGtJRDBnWVhKbmMxc3dYUzVKWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQmhjbWR6V3pCZExrUmhkR0V1Y0c5elgzSmxabDlwWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzQm9iMjVsVG5WdFltVnlJRDBnWVhKbmMxc3dYUzVFWVhSaExtRjFkR2hmWTJWdWRISmxYM0JvYjI1bFgyNTFiV0psY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyMWxjbU5vWVc1MFNXUWdQU0JoY21keld6QmRMa1JoZEdFdWJXVnlZMmhoYm5SZmFXUTdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjBsdWRtRnNhV1FnWTJGc2JDQnphV2NnWm05eUlGQm9iMjVsSUdGMWRHZ2djbVZ4ZFdseVpXUWdZMnhoYzNNbktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0JIWlhSUWFHOXVaVTUxYldKbGNpZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmY0dodmJtVk9kVzFpWlhJN1hHNGdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lFZGxkRTFsY21Ob1lXNTBTV1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMWxjbU5vWVc1MFNXUTdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdRWFYwYUVOdlpHVkJaSFpwWTJWY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdiM05TWldaSlpDd2dZWFYwYUVOdlpHVXBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGxCdmMxSmxaa2xrSUQwZ2NHOXpVbVZtU1dRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UVhWMGFFTnZaR1VnUFNCaGRYUm9RMjlrWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JVYjAxbGMzTmhaMlVvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUmhkR0VnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNOZmNtVm1YMmxrT2lCMGFHbHpMbEJ2YzFKbFprbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lYVjBhRjlqYjJSbE9pQjBhR2x6TGtGMWRHaERiMlJsWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z6YzJGblpTaFNaWEYxWlhOMFNXUklaV3h3WlhJdVNXUW9YQ0poZFhSb1lXUmNJaWtzSUVWMlpXNTBjeTVCZFhSb1EyOWtaVUZrZG1salpTd2daR0YwWVN3Z2RISjFaU2s3WEc0Z0lDQWdmVnh1ZlNJc0ltbHRjRzl5ZENCN1VIVnlZMmhoYzJWU1pYRjFaWE4wTENCU1pXWjFibVJTWlhGMVpYTjBmU0JtY205dElDY3VMMUIxY21Ob1lYTmxKenRjYmx4dVpYaHdiM0owSUdOc1lYTnpJRkIxY21Ob1lYTmxTR1ZzY0dWeVhHNTdYRzRnSUNBZ2MzUmhkR2xqSUVOeVpXRjBaVkIxY21Ob1lYTmxVbVZ4ZFdWemRDaGhiVzkxYm5SRFpXNTBjeXdnY0hWeVkyaGhjMlZKWkNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VIVnlZMmhoYzJWU1pYRjFaWE4wS0dGdGIzVnVkRU5sYm5SekxDQndkWEpqYUdGelpVbGtLVHRjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnYzNSaGRHbGpJRU55WldGMFpWQjFjbU5vWVhObFVtVnhkV1Z6ZEZZeUtIQnZjMUpsWmtsa0xDQndkWEpqYUdGelpVRnRiM1Z1ZEN3Z2RHbHdRVzF2ZFc1MExDQmpZWE5vYjNWMFFXMXZkVzUwTENCd2NtOXRjSFJHYjNKRFlYTm9iM1YwTENCemRYSmphR0Z5WjJWQmJXOTFiblFwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NISWdQU0JQWW1wbFkzUXVZWE56YVdkdUtHNWxkeUJRZFhKamFHRnpaVkpsY1hWbGMzUW9jSFZ5WTJoaGMyVkJiVzkxYm5Rc0lIQnZjMUpsWmtsa0tTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1EyRnphRzkxZEVGdGIzVnVkRG9nWTJGemFHOTFkRUZ0YjNWdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUZScGNFRnRiM1Z1ZERvZ2RHbHdRVzF2ZFc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnVUhKdmJYQjBSbTl5UTJGemFHOTFkRG9nY0hKdmJYQjBSbTl5UTJGemFHOTFkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGTjFjbU5vWVhKblpVRnRiM1Z1ZERvZ2MzVnlZMmhoY21kbFFXMXZkVzUwWEc0Z0lDQWdJQ0FnSUgwcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpkR0YwYVdNZ1EzSmxZWFJsVW1WbWRXNWtVbVZ4ZFdWemRDaGhiVzkxYm5SRFpXNTBjeXdnY0hWeVkyaGhjMlZKWkN3Z2MzVndjSEpsYzNOTlpYSmphR0Z1ZEZCaGMzTjNiM0prS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCU1pXWjFibVJTWlhGMVpYTjBLR0Z0YjNWdWRFTmxiblJ6TENCd2RYSmphR0Z6WlVsa0xDQnpkWEJ3Y21WemMwMWxjbU5vWVc1MFVHRnpjM2R2Y21RcE8xeHVJQ0FnSUgxY2JseHVmVnh1SWl3aWJHVjBJRjlmVW1WeGRXVnpkRWxrU0dWc2NHVnlRMjkxYm5SbGNpQTlJREU3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJTWlhGMVpYTjBTV1JJWld4d1pYSWdlMXh1SUNBZ0lITjBZWFJwWXlCSlpDaHdjbVZtYVhncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQnlaV1pwZUNBcklGOWZVbVZ4ZFdWemRFbGtTR1ZzY0dWeVEyOTFiblJsY2lzck8xeHVJQ0FnSUgxY2JuMWNiaUlzSW1WNGNHOXlkQ0JqYkdGemN5QlRaV055WlhSeklIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaGxibU5MWlhrc0lHaHRZV05MWlhrcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RmJtTkxaWGtnSUNBZ0lEMGdaVzVqUzJWNU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtodFlXTkxaWGtnSUNBZ1BTQm9iV0ZqUzJWNU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJ6WVhabEtFVnVZMHRsZVN3Z1NHMWhZMHRsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnNiMk5oYkZOMGIzSmhaMlV1YzJWMFNYUmxiU2duUlc1alMyVjVKeXdnUlc1alMyVjVLVHRjYmlBZ0lDQWdJQ0FnYkc5allXeFRkRzl5WVdkbExuTmxkRWwwWlcwb0owaHRZV05MWlhrbkxDQkliV0ZqUzJWNUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRjBhV01nY21WemRHOXlaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlRaV055WlhSektHeHZZMkZzVTNSdmNtRm5aUzVuWlhSSmRHVnRLQ2RGYm1OTFpYa25LU3dnYkc5allXeFRkRzl5WVdkbExtZGxkRWwwWlcwb0owaHRZV05MWlhrbktTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2MzUmhkR2xqSUdselUyRjJaV1FvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCc2IyTmhiRk4wYjNKaFoyVXVaMlYwU1hSbGJTZ25SVzVqUzJWNUp5a2dKaVlnYkc5allXeFRkRzl5WVdkbExtZGxkRWwwWlcwb0owaHRZV05MWlhrbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRjBhV01nVW1WelpYUW9LU0I3WEc0Z0lDQWdJQ0FnSUd4dlkyRnNVM1J2Y21GblpTNXlaVzF2ZG1WSmRHVnRLQ2RGYm1OTFpYa25LVHRjYmlBZ0lDQWdJQ0FnYkc5allXeFRkRzl5WVdkbExuSmxiVzkyWlVsMFpXMG9KMGh0WVdOTFpYa25LVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSmxlSEJ2Y25RZ1kyeGhjM01nUkdWMmFXTmxRV1JrY21WemMxTjBZWFIxYzF4dWUxeHVJQ0FnSUdkbGRDQkJaR1J5WlhOektDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1LSFJvYVhNdVZYTmxVMlZqZFhKbFYyVmlVMjlqYTJWMGN5a2dYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVp4Wkc0N1hHNGdJQ0FnSUNBZ0lIMGdYRzRnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWFYQTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpaWFFnUVdSa2NtVnpjeWhoWkdSeVpYTnpLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdhV1lvZEdocGN5NVZjMlZUWldOMWNtVlhaV0pUYjJOclpYUnpLU0JjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1bWNXUnVJRDBnWVdSa2NtVnpaWE03WEc0Z0lDQWdJQ0FnSUgwZ1hHNGdJQ0FnSUNBZ0lHVnNjMlZjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGNDQTlJR0ZrWkhKbGMzTTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWgxYzJWVFpXTjFjbVZYWldKVGIyTnJaWFJ6S1NCY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVWWE5sVTJWamRYSmxWMlZpVTI5amEyVjBjeUE5SUhWelpWTmxZM1Z5WlZkbFlsTnZZMnRsZEhNN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1cGNDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11Wm5Ga2JpQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11VEdGemRGVndaR0YwWldRZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11UkdWMmFXTmxRV1JrY21WemMxSmxjM0J2Ym5ObFEyOWtaU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVtVnpjRzl1YzJWVGRHRjBkWE5FWlhOamNtbHdkR2x2YmlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVbVZ6Y0c5dWMyVk5aWE56WVdkbElEMGdiblZzYkR0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCRVpYWnBZMlZCWkdSeVpYTnpVbVZ6Y0c5dWMyVkRiMlJsSUQxY2JudGNiaUFnSUNCVFZVTkRSVk5UT2lBblUxVkRRMFZUVXljc1hHNGdJQ0FnU1U1V1FVeEpSRjlUUlZKSlFVeGZUbFZOUWtWU09pQW5TVTVXUVV4SlJGOVRSVkpKUVV4ZlRsVk5Ra1ZTSnl4Y2JpQWdJQ0JCUkVSU1JWTlRYMDVQVkY5RFNFRk9SMFZFT2lBblFVUkVVa1ZUVTE5T1QxUmZRMGhCVGtkRlJDY3NYRzRnSUNBZ1UwVlNTVUZNWDA1VlRVSkZVbDlPVDFSZlEwaEJUa2RGUkRvZ0oxTkZVa2xCVEY5T1ZVMUNSVkpmVGs5VVgwTklRVTVIUlVRbkxGeHVJQ0FnSUVSRlZrbERSVjlUUlZKV1NVTkZYMFZTVWs5U09pQW5SRVZXU1VORlgxTkZVbFpKUTBWZlJWSlNUMUluWEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1NIUjBjRk4wWVhSMWMwTnZaR1VnUFNCY2JudGNiaUFnSUNCT2IzUkdiM1Z1WkRvZ05EQTBYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUkdWMmFXTmxRV1JrY21WemMxTmxjblpwWTJWY2JudGNiaUFnSUNBdkx5QlNaWFJ5YVdWMlpWTmxjblpwWTJVb2MyVnlhV0ZzVG5WdFltVnlMQ0JoY0dsTFpYa2dQU0FuYzNCcExYTmhiWEJzWlMxd2IzTXhKeXdnWVdOeGRXbHlaWEpEYjJSbExDQjFjMlZUWldOMWNtVlhaV0pUYjJOclpYUnpMQ0JwYzFSbGMzUk5iMlJsS1Z4dUlDQWdJR0Z6ZVc1aklGSmxkSEpwWlhabFUyVnlkbWxqWlNoelpYSnBZV3hPZFcxaVpYSXNJR0Z3YVV0bGVTQTlJQ2R6Y0drdGMyRnRjR3hsTFhCdmN6RW5MQ0JoWTNGMWFYSmxja052WkdVc0lHbHpVMlZqZFhKbFEyOXVibVZqZEdsdmJpd2dhWE5VWlhOMFRXOWtaU2tnSUNBZ1hHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JEVDA1T1JVTlVTVTlPWDFSSlRVVlBWVlFnUFNBNE1EQXdPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NHRjBhQ0E5SUdselUyVmpkWEpsUTI5dWJtVmpkR2x2YmlBL0lDZG1jV1J1SnlBNklDZHBjQ2M3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtaWFpwWTJWQlpHUnlaWE56VlhKcElEMGdhWE5VWlhOMFRXOWtaU0EvSUdCb2RIUndjem92TDJSbGRtbGpaUzFoWkdSeVpYTnpMV0Z3YVMxellpNGtlMkZqY1hWcGNtVnlRMjlrWlgwdWJYTndMbUZ6YzJWdFlteDVjR0Y1YldWdWRITXVZMjl0TDNZeEx5UjdjMlZ5YVdGc1RuVnRZbVZ5ZlM4a2UzQmhkR2g5WUNBNklHQm9kSFJ3Y3pvdkwyUmxkbWxqWlMxaFpHUnlaWE56TFdGd2FTNGtlMkZqY1hWcGNtVnlRMjlrWlgwdWJYTndMbUZ6YzJWdFlteDVjR0Y1YldWdWRITXVZMjl0TDNZeEx5UjdjMlZ5YVdGc1RuVnRZbVZ5ZlM4a2UzQmhkR2g5WUR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1VISnZiV2x6WlM1eVlXTmxLRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lHWmxkR05vS0dSbGRtbGpaVUZrWkhKbGMzTlZjbWtzSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWMGFHOWtPaUFuUjBWVUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2FHVmhaR1Z5Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZEJVMDB0VFZOUUxVUkZWa2xEUlMxQlJFUlNSVk5UTFVGUVNTMUxSVmtuT2lCaGNHbExaWGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxkeUJRY205dGFYTmxLQ2hmTENCeVpXcGxZM1FwSUQwK1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnY21WcVpXTjBLRzVsZHlCRmNuSnZjaWduVkdsdFpXOTFkQ0IzYUdsc1pTQjBjbmxwYm1jZ2RHOGdjbVYwY21sbGRtVWdTVkFnWVdSa2NtVnpjeWNwS1N3Z1EwOU9Ua1ZEVkVsUFRsOVVTVTFGVDFWVUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUNBZ0lDQmRLVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2UwVjJaVzUwY3l3Z1UzVmpZMlZ6YzFOMFlYUmxMQ0JOWlhOellXZGxmU0JtY205dElDY3VMMDFsYzNOaFoyVnpKenRjYm1sdGNHOXlkQ0I3VTNCcFEyOXVabWxuTENCVWNtRnVjMkZqZEdsdmJrOXdkR2x2Ym5OOUlHWnliMjBnSnk0dlUzQnBUVzlrWld4ekp6dGNibHh1Wlhod2IzSjBJR05zWVhOeklGTmxkSFJzWlZKbGNYVmxjM1FnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0dsa0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVNXUWdQU0JwWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY2dQU0J1WlhjZ1UzQnBRMjl1Wm1sbktDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVQzQjBhVzl1Y3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Yms5d2RHbHZibk1vS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JVYjAxbGMzTmhaMlVvS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWVhSaElEMGdlMzA3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VSVzVoWW14bFpGQnlhVzUwVFdWeVkyaGhiblJEYjNCNUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VSVzVoWW14bFpGQnliMjF3ZEVadmNrTjFjM1J2YldWeVEyOXdlVTl1UldaMGNHOXpJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JUYVdkdVlYUjFjbVZHYkc5M1QyNUZablJ3YjNNZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VRV1JrVW1WalpXbHdkRU52Ym1acFp5aGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVQY0hScGIyNXpMa0ZrWkU5d2RHbHZibk1vWkdGMFlTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdWemMyRm5aU2gwYUdsekxrbGtMQ0JGZG1WdWRITXVVMlYwZEd4bFVtVnhkV1Z6ZEN3Z1pHRjBZU3dnZEhKMVpTazdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdVMlYwZEd4bGJXVnVkQ0I3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGxKbGNYVmxjM1JKWkNBOUlHMHVTV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjBnUFNCdE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxOMVkyTmxjM01nUFNCdExrZGxkRk4xWTJObGMzTlRkR0YwWlNncElEMDlJRk4xWTJObGMzTlRkR0YwWlM1VGRXTmpaWE56TzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEZObGRIUnNaVUo1UVdOeGRXbHlaWEpEYjNWdWRDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbUZqWTNWdGRXeGhkR1ZrWDNObGRIUnNaVjlpZVY5aFkzRjFhWEpsY2w5amIzVnVkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJUWlhSMGJHVkNlVUZqY1hWcGNtVnlWbUZzZFdVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNWhZMk4xYlhWc1lYUmxaRjl6WlhSMGJHVmZZbmxmWVdOeGRXbHlaWEpmZG1Gc2RXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBWRzkwWVd4RGIzVnVkQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG1GalkzVnRkV3hoZEdWa1gzUnZkR0ZzWDJOdmRXNTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRlJ2ZEdGc1ZtRnNkV1VvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1aFkyTjFiWFZzWVhSbFpGOTBiM1JoYkY5MllXeDFaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJRWlhKcGIyUlRkR0Z5ZEZScGJXVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhScGJXVlRkSElnUFNCMGFHbHpMbDl0TGtSaGRHRXVjMlYwZEd4bGJXVnVkRjl3WlhKcGIyUmZjM1JoY25SZmRHbHRaVHNnTHk4Z1hDSXdOVG93TUZ3aVhHNGdJQ0FnSUNBZ0lIWmhjaUJrWVhSbFUzUnlJRDBnZEdocGN5NWZiUzVFWVhSaExuTmxkSFJzWlcxbGJuUmZjR1Z5YVc5a1gzTjBZWEowWDJSaGRHVTdJQzh2SUZ3aU1EVlBZM1F4TjF3aVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCTlpYTnpZV2RsTGxCaGNuTmxRbUZ1YTBSaGRHVlVhVzFsVTNSeUtHUmhkR1ZUZEhJc0lIUnBiV1ZUZEhJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRGQmxjbWx2WkVWdVpGUnBiV1VvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUnBiV1ZUZEhJZ1BTQjBhR2x6TGw5dExrUmhkR0V1YzJWMGRHeGxiV1Z1ZEY5d1pYSnBiMlJmWlc1a1gzUnBiV1U3SUM4dklGd2lNRFU2TURCY0lseHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFpWTjBjaUE5SUhSb2FYTXVYMjB1UkdGMFlTNXpaWFIwYkdWdFpXNTBYM0JsY21sdlpGOWxibVJmWkdGMFpUc2dMeThnWENJd05VOWpkREUzWENKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxbGMzTmhaMlV1VUdGeWMyVkNZVzVyUkdGMFpWUnBiV1ZUZEhJb1pHRjBaVk4wY2l3Z2RHbHRaVk4wY2lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFZISnBaMmRsY21Wa1ZHbHRaU2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RHbHRaVk4wY2lBOUlIUm9hWE11WDIwdVJHRjBZUzV6WlhSMGJHVnRaVzUwWDNSeWFXZG5aWEpsWkY5MGFXMWxPeUF2THlCY0lqQTFPakF3T2pRMVhDSmNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHVlRkSElnUFNCMGFHbHpMbDl0TGtSaGRHRXVjMlYwZEd4bGJXVnVkRjkwY21sbloyVnlaV1JmWkdGMFpUc2dMeThnWENJd05VOWpkREUzWENKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxbGMzTmhaMlV1VUdGeWMyVkNZVzVyUkdGMFpWUnBiV1ZUZEhJb1pHRjBaVk4wY2l3Z2RHbHRaVk4wY2lrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFVtVnpjRzl1YzJWVVpYaDBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1YUc5emRGOXlaWE53YjI1elpWOTBaWGgwTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCSFpYUlNaV05sYVhCMEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXViV1Z5WTJoaGJuUmZjbVZqWldsd2REdGNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUlVjbUZ1YzJGamRHbHZibEpoYm1kbEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVkSEpoYm5OaFkzUnBiMjVmY21GdVoyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBWR1Z5YldsdVlXeEpaQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG5SbGNtMXBibUZzWDJsa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUZkaGMwMWxjbU5vWVc1MFVtVmpaV2x3ZEZCeWFXNTBaV1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1dFpYSmphR0Z1ZEY5eVpXTmxhWEIwWDNCeWFXNTBaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwVTJOb1pXMWxVMlYwZEd4bGJXVnVkRVZ1ZEhKcFpYTW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhOamFHVnRaWE1nUFNCMGFHbHpMbDl0TGtSaGRHRXVjMk5vWlcxbGN6dGNiaUFnSUNBZ0lDQWdhV1lnS0NGelkyaGxiV1Z6S1NCeVpYUjFjbTRnVzEwN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITmphR1Z0WlhNdWJXRndLQ2h6WTJobGJXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVTJOb1pXMWxVMlYwZEd4bGJXVnVkRVZ1ZEhKNUtITmphR1Z0WlNrN1hHNGdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRk5qYUdWdFpWTmxkSFJzWlcxbGJuUkZiblJ5ZVZ4dWUxeHVJQ0FnSUM4dklGTmphR1Z0WlZObGRIUnNaVzFsYm5SRmJuUnllU2h6ZEhKcGJtY2djMk5vWlcxbFRtRnRaU3dnWW05dmJDQnpaWFIwYkdWQ2VVRmpjWFZwY21WeUxDQnBiblFnZEc5MFlXeERiM1Z1ZEN3Z2FXNTBJSFJ2ZEdGc1ZtRnNkV1VwWEc0Z0lDQWdMeThnVTJOb1pXMWxVMlYwZEd4bGJXVnVkRVZ1ZEhKNUtFOWlhbVZqZENCelkyaGxiV1ZQWW1vcFhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0xpNHVZWEpuY3lsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdsbUtHRnlaM011YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbE5qYUdWdFpVNWhiV1VnUFNCaGNtZHpXekJkTG5OamFHVnRaVjl1WVcxbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NVRaWFIwYkdWQ2VVRmpjWFZwY21WeUlEMGdZWEpuYzFzd1hTNXpaWFIwYkdWZllubGZZV054ZFdseVpYSXVkRzlNYjNkbGNrTmhjMlVvS1NBOVBTQmNJbmxsYzF3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NVViM1JoYkZaaGJIVmxJRDBnY0dGeWMyVkpiblFvWVhKbmMxc3dYUzUwYjNSaGJGOTJZV3gxWlN3eE1DazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbFJ2ZEdGc1EyOTFiblFnUFNCd1lYSnpaVWx1ZENoaGNtZHpXekJkTG5SdmRHRnNYMk52ZFc1MExERXdLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtS0dGeVozTXViR1Z1WjNSb0lEMDlQU0EwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsTmphR1Z0WlU1aGJXVWdQU0JoY21keld6QmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVUWlhSMGJHVkNlVUZqY1hWcGNtVnlJRDBnWVhKbmMxc3hYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Vkc5MFlXeERiM1Z1ZENBOUlHRnlaM05iTWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsUnZkR0ZzVm1Gc2RXVWdQU0JoY21keld6TmRPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUZSdlUzUnlhVzVuS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJnVTJOb1pXMWxUbUZ0WlRvZ0pIdDBhR2x6TGxOamFHVnRaVTVoYldWOUxDQlRaWFIwYkdWQ2VVRmpjWFZwY21WeU9pQWtlM1JvYVhNdVUyVjBkR3hsUW5sQlkzRjFhWEpsY24wc0lGUnZkR0ZzUTI5MWJuUTZJQ1I3ZEdocGN5NVViM1JoYkVOdmRXNTBmU3dnVkc5MFlXeFdZV3gxWlRvZ0pIdDBhR2x6TGxSdmRHRnNWbUZzZFdWOVlEdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlRaWFIwYkdWdFpXNTBSVzV4ZFdseWVWSmxjWFZsYzNSY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHBaQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVNXUWdQU0JwWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY2dQU0J1WlhjZ1UzQnBRMjl1Wm1sbktDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVQzQjBhVzl1Y3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Yms5d2RHbHZibk1vS1R0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1ZHOU5aWE56WVdkbEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWVhSaElEMGdlMzA3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VSVzVoWW14bFpGQnlhVzUwVFdWeVkyaGhiblJEYjNCNUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VSVzVoWW14bFpGQnliMjF3ZEVadmNrTjFjM1J2YldWeVEyOXdlVTl1UldaMGNHOXpJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JUYVdkdVlYUjFjbVZHYkc5M1QyNUZablJ3YjNNZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VRV1JrVW1WalpXbHdkRU52Ym1acFp5aGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVQY0hScGIyNXpMa0ZrWkU5d2RHbHZibk1vWkdGMFlTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdWemMyRm5aU2gwYUdsekxrbGtMQ0JGZG1WdWRITXVVMlYwZEd4bGJXVnVkRVZ1Y1hWcGNubFNaWEYxWlhOMExDQmtZWFJoTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzU5SWl3aWFXMXdiM0owSUh0TlpYTnpZV2RsTENCTlpYTnpZV2RsVTNSaGJYQXNJRVYyWlc1MGN5d2dVM1ZqWTJWemMxTjBZWFJsZlNCbWNtOXRJQ2N1TDAxbGMzTmhaMlZ6Snp0Y2JtbHRjRzl5ZENCN1UzQnBRMjl1Wm1sbkxDQlRjR2xHYkc5M0xDQlRjR2xUZEdGMGRYTXNJRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXNJRlJ5WVc1ellXTjBhVzl1Um14dmQxTjBZWFJsTENCVWNtRnVjMkZqZEdsdmJsUjVjR1VzSUVsdWFYUnBZWFJsVkhoU1pYTjFiSFFzSUUxcFpGUjRVbVZ6ZFd4MExDQlRkV0p0YVhSQmRYUm9RMjlrWlZKbGMzVnNkQ3dnVkhKaGJuTmhZM1JwYjI1UGNIUnBiMjV6ZlNCbWNtOXRJQ2N1TDFOd2FVMXZaR1ZzY3ljN1hHNXBiWEJ2Y25RZ2UxSmxjWFZsYzNSSlpFaGxiSEJsY24wZ1puSnZiU0FuTGk5U1pYRjFaWE4wU1dSSVpXeHdaWEluTzF4dWFXMXdiM0owSUh0UVlXbHlhVzVuU0dWc2NHVnlmU0JtY205dElDY3VMMUJoYVhKcGJtZElaV3h3WlhJbk8xeHVhVzF3YjNKMElIdERiMjV1WldOMGFXOXVMQ0JEYjI1dVpXTjBhVzl1VTNSaGRHVjlJR1p5YjIwZ0p5NHZRMjl1Ym1WamRHbHZiaWM3WEc1cGJYQnZjblFnZTFOd2FWQmhlVUYwVkdGaWJHVjlJR1p5YjIwZ0p5NHZVM0JwVUdGNVFYUlVZV0pzWlNjN1hHNXBiWEJ2Y25RZ2UxQmhlVUYwVkdGaWJHVkRiMjVtYVdkOUlHWnliMjBnSnk0dlVHRjVRWFJVWVdKc1pTYzdYRzVwYlhCdmNuUWdlMU53YVZCeVpXRjFkR2g5SUdaeWIyMGdKeTR2VTNCcFVISmxZWFYwYUNjN1hHNXBiWEJ2Y25RZ2UwTmhjMmh2ZFhSUGJteDVVbVZ4ZFdWemRIMGdabkp2YlNBbkxpOURZWE5vYjNWMEp6dGNibWx0Y0c5eWRDQjdVMlYwZEd4bFVtVnhkV1Z6ZEN3Z1UyVjBkR3hsYldWdWRFVnVjWFZwY25sU1pYRjFaWE4wZlNCbWNtOXRJQ2N1TDFObGRIUnNaVzFsYm5Rbk8xeHVhVzF3YjNKMElIdEVjbTl3UzJWNWMxSmxjWFZsYzNRc0lFdGxlVkpsY1hWbGMzUXNJRXRsZVVOb1pXTnJMQ0JRWVdseVVtVnpjRzl1YzJWOUlHWnliMjBnSnk0dlVHRnBjbWx1WnljN1hHNXBiWEJ2Y25RZ2UxTmxkRkJ2YzBsdVptOVNaWEYxWlhOMExDQlRaWFJRYjNOSmJtWnZVbVZ6Y0c5dWMyVXNJRVJsZG1salpVbHVabTk5SUdaeWIyMGdKeTR2VUc5elNXNW1ieWM3WEc1cGJYQnZjblFnZTFCMWNtTm9ZWE5sU0dWc2NHVnlmU0JtY205dElDY3VMMUIxY21Ob1lYTmxTR1ZzY0dWeUp6dGNibWx0Y0c5eWRDQjdTMlY1VW05c2JHbHVaMGhsYkhCbGNuMGdabkp2YlNBbkxpOUxaWGxTYjJ4c2FXNW5TR1ZzY0dWeUp6dGNibWx0Y0c5eWRDQjdVR2x1WjBobGJIQmxjaXdnVUc5dVowaGxiSEJsY24wZ1puSnZiU0FuTGk5UWFXNW5TR1ZzY0dWeUp6dGNibWx0Y0c5eWRDQjdSMlYwVEdGemRGUnlZVzV6WVdOMGFXOXVVbVZ4ZFdWemRDd2dSMlYwVEdGemRGUnlZVzV6WVdOMGFXOXVVbVZ6Y0c5dWMyVXNJRk5wWjI1aGRIVnlaVUZqWTJWd2RDd2dVMmxuYm1GMGRYSmxSR1ZqYkdsdVpTd2dUVzkwYjFCMWNtTm9ZWE5sVW1WeGRXVnpkQ3dnUVhWMGFFTnZaR1ZCWkhacFkyVXNJRU5oYm1ObGJGUnlZVzV6WVdOMGFXOXVVbVZ4ZFdWemRDd2dVMmxuYm1GMGRYSmxVbVZ4ZFdseVpXUXNJRU5oYm1ObGJGUnlZVzV6WVdOMGFXOXVVbVZ6Y0c5dWMyVXNJRkJvYjI1bFJtOXlRWFYwYUZKbGNYVnBjbVZrZlNCbWNtOXRJQ2N1TDFCMWNtTm9ZWE5sSnp0Y2JtbHRjRzl5ZENCN1JHVjJhV05sUVdSa2NtVnpjMU5sY25acFkyVXNJRVJsZG1salpVRmtaSEpsYzNOVGRHRjBkWE1zSUVSbGRtbGpaVUZrWkhKbGMzTlNaWE53YjI1elpVTnZaR1VzSUVoMGRIQlRkR0YwZFhORGIyUmxmU0JtY205dElDY3VMMU5sY25acFkyVXZSR1YyYVdObFUyVnlkbWxqWlNjN1hHNXBiWEJ2Y25RZ2UxQnlhVzUwYVc1blVtVnhkV1Z6ZEgwZ1puSnZiU0FuTGk5UWNtbHVkR2x1WnljN1hHNXBiWEJ2Y25RZ2UxUmxjbTFwYm1Gc1UzUmhkSFZ6VW1WeGRXVnpkSDBnWm5KdmJTQW5MaTlVWlhKdGFXNWhiRk4wWVhSMWN5YzdYRzVjYm1OdmJuTjBJRk5RU1Y5V1JWSlRTVTlPSUQwZ0p6SXVOaTR3Snp0Y2JseHVZMnhoYzNNZ1UzQnBJSHRjYmx4dUlDQWdJR2RsZENCRGRYSnlaVzUwVTNSaGRIVnpLQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZZM1Z5Y21WdWRGTjBZWFIxY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6WlhRZ1EzVnljbVZ1ZEZOMFlYUjFjeWgyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0JwWmloMGFHbHpMbDlqZFhKeVpXNTBVM1JoZEhWeklEMDlQU0IyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZOMFlYUjFjeUE5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnblUzUmhkSFZ6UTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhaaGJIVmxmU2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hCdmMwbGtMQ0J6WlhKcFlXeE9kVzFpWlhJc0lHVm1kSEJ2YzBGa1pISmxjM01zSUhObFkzSmxkSE1wSUZ4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjRzl6U1dRZ1BTQndiM05KWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWeWFXRnNUblZ0WW1WeUlEMGdjMlZ5YVdGc1RuVnRZbVZ5TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6WldOeVpYUnpJRDBnYzJWamNtVjBjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZabTl5WTJWVFpXTjFjbVZYWldKVGIyTnJaWFJ6SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlZtZEhCdmMwRmtaSEpsYzNNZ1BTQmNJbmR6T2k4dlhDSWdLeUJsWm5Sd2IzTkJaR1J5WlhOek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY2dQU0JqYjI1emIyeGxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnlBOUlHNWxkeUJUY0dsRGIyNW1hV2NvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5dWJpQTlJRzVsZHlCRGIyNXVaV04wYVc5dUtDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFJHVjJhV05sVTNSaGRIVnpJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpHVjJhV05sUVhCcFMyVjVJQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRmpjWFZwY21WeVEyOWtaU0FnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBibFJsYzNSTmIyUmxJQ0FnSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkYxZEc5QlpHUnlaWE56VW1WemIyeDFkR2x2YmtWdVlXSnNaV1FnUFNCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlBkWElnYzNSaGJYQWdabTl5SUhOcFoyNXBibWNnYjNWMFoyOXBibWNnYldWemMyRm5aWE5jYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM0JwVFdWemMyRm5aVk4wWVcxd0lEMGdibVYzSUUxbGMzTmhaMlZUZEdGdGNDaDBhR2x6TGw5d2IzTkpaQ3dnZEdocGN5NWZjMlZqY21WMGN5d2dNQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0c5elZtVnVaRzl5U1dRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3YjNOV1pYSnphVzl1SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZhR0Z6VTJWMFNXNW1ieUE5SUc1MWJHdzdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdkMmxzYkNCdFlXbHVkR0ZwYmlCemIyMWxJSE4wWVhSbFhHNGdJQ0FnSUNBZ0lIUm9hWE11WDIxdmMzUlNaV05sYm5SUWFXNW5VMlZ1ZENBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjF2YzNSU1pXTmxiblJRYjI1blVtVmpaV2wyWldRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl0YVhOelpXUlFiMjVuYzBOdmRXNTBJRDBnTUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WMGNtbGxjMU5wYm1ObFRHRnpkRVJsZG1salpVRmtaSEpsYzNOU1pYTnZiSFYwYVc5dUlEMGdNRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiVzl6ZEZKbFkyVnVkRXh2WjJsdVVtVnpjRzl1YzJVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCdmJtZFVhVzFsYjNWMElEMGdOVEF3TUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0dsdVowWnlaWEYxWlc1amVTQTlJREU0TURBd08xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVmhaSGxVYjFSeVlXNXpZV04wSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjR1Z5YVc5a2FXTlFhVzVuVkdoeVpXRmtJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOTBlRTF2Ym1sMGIzSkRhR1ZqYTBaeVpYRjFaVzVqZVNBOUlERXdNREE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk5vWldOclQyNVVlRVp5WlhGMVpXNWplU0E5SURJd01EQXdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRZWGhYWVdsMFJtOXlRMkZ1WTJWc1ZIZ2dQU0F4TURBd01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMyeGxaWEJDWldadmNtVlNaV052Ym01bFkzUk5jeUE5SURNd01EQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMXBjM05sWkZCdmJtZHpWRzlFYVhOamIyNXVaV04wSUQwZ01qdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVjBjbWxsYzBKbFptOXlaVkpsYzI5c2RtbHVaMFJsZG1salpVRmtaSEpsYzNNZ1BTQXpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaWFJ5YVdWelUybHVZMlZNWVhOMFVHRnBjbWx1WnlBOUlEQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxkSEpwWlhOQ1pXWnZjbVZRWVdseWFXNW5JRDBnTXp0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpXZGxlRWwwWlcxelJtOXlSV1owY0c5elFXUmtjbVZ6Y3lBOUlDOWVXekF0T1YxN01Td3pmVnhjTGxzd0xUbGRlekVzTTMxY1hDNWJNQzA1WFhzeExETjlYRnd1V3pBdE9WMTdNU3d6ZlNRdk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpXZGxlRWwwWlcxelJtOXlSbkZrYmtWbWRIQnZjMEZrWkhKbGMzTWdQU0F2WGx0aExYcEJMVm93TFRsY1hDNHRYU3NrTHp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WblpYaEpkR1Z0YzBadmNsQnZjMGxrSUQwZ0wxNWJZUzE2UVMxYU1DMDVYU29rTHp0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJHYkc5M0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFVHRnBjbWx1WjBac2IzZFRkR0YwWlNBZ0lDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsSUNBZ0lDQWdJQ0FnUFNCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFVnVZV0pzWlZCaGVVRjBWR0ZpYkdVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNCcFVHRjBJRDBnYm1WM0lGTndhVkJoZVVGMFZHRmliR1VvZEdocGN5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5emNHbFFZWFE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSR2x6WVdKc1pWQmhlVUYwVkdGaWJHVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzQnBVR0YwSUQwZ2JtVjNJRk53YVZCaGVVRjBWR0ZpYkdVb2RHaHBjeWs3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM053YVZCaGRDNURiMjVtYVdjdVVHRjVRWFJVWVdKc1pVVnVZV0pzWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM053YVZCaGREdGNiaUFnSUNCOVhHNWNiaUFnSUNCRmJtRmliR1ZRY21WaGRYUm9LQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTndhVkJ5WldGMWRHZ2dQU0J1WlhjZ1UzQnBVSEpsWVhWMGFDaDBhR2x6S1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYM053YVZCeVpXRjFkR2c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdVM1JoY25Rb0tTQjdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5d2IzTldaVzVrYjNKSlpDQjhmQ0FoZEdocGN5NWZjRzl6Vm1WeWMybHZiaWxjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVUU5VElHbHVabTl5YldGMGFXOXVJR2x6SUc1dmR5QnlaWEYxYVhKbFpDQjBieUJpWlNCelpYUmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1M1lYSnVLRndpVFdsemMybHVaeUJRVDFNZ2RtVnVaRzl5SUVsRUlHRnVaQ0IyWlhKemFXOXVMaUJ3YjNOV1pXNWtiM0pKWkNCaGJtUWdjRzl6Vm1WeWMybHZiaUJoY21VZ2NtVnhkV2x5WldRZ1ltVm1iM0psSUhOMFlYSjBhVzVuWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpVFdsemMybHVaeUJRVDFNZ2RtVnVaRzl5SUVsRUlHRnVaQ0IyWlhKemFXOXVMaUJ3YjNOV1pXNWtiM0pKWkNCaGJtUWdjRzl6Vm1WeWMybHZiaUJoY21VZ2NtVnhkV2x5WldRZ1ltVm1iM0psSUhOMFlYSjBhVzVuWENJcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5cGMxQnZjMGxrVm1Gc2FXUW9kR2hwY3k1ZmNHOXpTV1FwS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCamIyNTBhVzUxWlN3Z1lYTWdkR2hsZVNCallXNGdjMlYwSUhSb1pTQndiM05KWkNCc1lYUmxjaUJ2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNHOXpTV1FnUFNCY0lsd2lPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxuZGhjbTRvWENKSmJuWmhiR2xrSUhCaGNtRnRaWFJsY2l3Z2NHeGxZWE5sSUdOdmNuSmxZM1FnZEdobGJTQmlaV1p2Y21VZ2NHRnBjbWx1WjF3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmFYTkZablJ3YjNOQlpHUnlaWE56Vm1Gc2FXUW9kR2hwY3k1ZlpXWjBjRzl6UVdSa2NtVnpjeWtwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOdmJuUnBiblZsTENCaGN5QjBhR1Y1SUdOaGJpQnpaWFFnZEdobElHVm1kSEJ2YzBGa1pISmxjM01nYkdGMFpYSWdiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJWbWRIQnZjMEZrWkhKbGMzTWdQU0JjSWx3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG5kaGNtNG9YQ0pKYm5aaGJHbGtJSEJoY21GdFpYUmxjaXdnY0d4bFlYTmxJR052Y25KbFkzUWdkR2hsYlNCaVpXWnZjbVVnY0dGcGNtbHVaMXdpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxjMlYwUTI5dWJpZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5ZEZSeVlXNXpZV04wYVc5dVRXOXVhWFJ2Y21sdVoxUm9jbVZoWkNncE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dQU0JUY0dsR2JHOTNMa2xrYkdVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXpaV055WlhSeklDRTlJRzUxYkd3cFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLRndpVTNSaGNuUnBibWNnYVc0Z1VHRnBjbVZrSUZOMFlYUmxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZOMFlYUjFjeUE5SUZOd2FWTjBZWFIxY3k1UVlXbHlaV1JEYjI1dVpXTjBhVzVuTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyOXViaTVEYjI1dVpXTjBLQ2s3SUM4dklGUm9hWE1nYVhNZ2JtOXVMV0pzYjJOcmFXNW5YRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhjSWxOMFlYSjBhVzVuSUdsdUlGVnVjR0ZwY21Wa0lGTjBZWFJsWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGTjBZWFIxY3lBOUlGTndhVk4wWVhSMWN5NVZibkJoYVhKbFpEdGNiaUFnSUNBZ0lDQWdmU0JjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeTh2SUZObGRDQjBhR1VnWVdOeGRXbHlaWElnWTI5a1pTQnZaaUI1YjNWeUlHSmhibXNzSUhCc1pXRnpaU0JqYjI1MFlXTjBJRUZ6YzJWdFlteDVKM01nU1c1MFpXZHlZWFJwYjI0Z1JXNW5hVzVsWlhKeklHWnZjaUJoWTNGMWFYSmxjaUJqYjJSbExseHVJQ0FnSUM4dkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ1UyVjBRV054ZFdseVpYSkRiMlJsS0dGamNYVnBjbVZ5UTI5a1pTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGamNYVnBjbVZ5UTI5a1pTQTlJR0ZqY1hWcGNtVnlRMjlrWlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZMeUJUWlhRZ2RHaGxJR0Z3YVNCclpYa2dkWE5sWkNCbWIzSWdZWFYwYnlCaFpHUnlaWE56SUdScGMyTnZkbVZ5ZVNCbVpXRjBkWEpsWEc0Z0lDQWdMeTh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THk4Z1BISmxkSFZ5Ym5NK1BDOXlaWFIxY201elBseHVJQ0FnSUZObGRFUmxkbWxqWlVGd2FVdGxlU2hrWlhacFkyVkJjR2xMWlhrcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrWlhacFkyVkJjR2xMWlhrZ1BTQmtaWFpwWTJWQmNHbExaWGs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5OGdRV3hzYjNkeklIbHZkU0IwYnlCelpYUWdkR2hsSUhObGNtbGhiQ0J1ZFcxaVpYSWdiMllnZEdobElFVm1kSEJ2YzF4dUlDQWdJQzh2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnVTJWMFUyVnlhV0ZzVG5WdFltVnlLSE5sY21saGJFNTFiV0psY2lsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGtOMWNuSmxiblJUZEdGMGRYTWdJVDBnVTNCcFUzUmhkSFZ6TGxWdWNHRnBjbVZrS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUIzWVhNZ1BTQjBhR2x6TGw5elpYSnBZV3hPZFcxaVpYSTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTmxjbWxoYkU1MWJXSmxjaUE5SUhObGNtbGhiRTUxYldKbGNqdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVTR0Z6VTJWeWFXRnNUblZ0WW1WeVEyaGhibWRsWkNoM1lYTXBLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5aGRYUnZVbVZ6YjJ4MlpVVm1kSEJ2YzBGa1pISmxjM01vS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUkVaWFpwWTJWVGRHRjBkWE1nUFQwZ2JuVnNiQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJFWlhacFkyVlRkR0YwZFhNZ1BTQnVaWGNnUkdWMmFXTmxRV1JrY21WemMxTjBZWFIxY3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SRVpYWnBZMlZUZEdGMGRYTXVSR1YyYVdObFFXUmtjbVZ6YzFKbGMzQnZibk5sUTI5a1pTQTlJRVJsZG1salpVRmtaSEpsYzNOU1pYTndiMjV6WlVOdlpHVXVVMFZTU1VGTVgwNVZUVUpGVWw5T1QxUmZRMGhCVGtkRlJEdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZEVaWFpwWTJWQlpHUnlaWE56UTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVRM1Z5Y21WdWRFUmxkbWxqWlZOMFlYUjFjMzBwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THk4Z1FXeHNiM2R6SUhsdmRTQjBieUJ6WlhRZ2RHaGxJR0YxZEc4Z1lXUmtjbVZ6Y3lCa2FYTmpiM1psY25rZ1ptVmhkSFZ5WlM0Z1hHNGdJQ0FnTHk4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBdkx5OGdQSEpsZEhWeWJuTStQQzl5WlhSMWNtNXpQbHh1SUNBZ0lGTmxkRUYxZEc5QlpHUnlaWE56VW1WemIyeDFkR2x2YmloaGRYUnZRV1JrY21WemMxSmxjMjlzZFhScGIyNUZibUZpYkdVcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwVTNSaGRIVnpJRDA5SUZOd2FWTjBZWFIxY3k1UVlXbHlaV1JEYjI1dVpXTjBaV1FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSGRoY3lBOUlIUm9hWE11WDJGMWRHOUJaR1J5WlhOelVtVnpiMngxZEdsdmJrVnVZV0pzWldRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGMWRHOUJaR1J5WlhOelVtVnpiMngxZEdsdmJrVnVZV0pzWldRZ1BTQmhkWFJ2UVdSa2NtVnpjMUpsYzI5c2RYUnBiMjVGYm1GaWJHVTdYRzRnSUNBZ0lDQWdJR2xtSUNoaGRYUnZRV1JrY21WemMxSmxjMjlzZFhScGIyNUZibUZpYkdVZ0ppWWdJWGRoY3lsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2QyVW5jbVVnZEhWeWJtbHVaeUJwZENCdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZWFYwYjFKbGMyOXNkbVZGWm5Sd2IzTkJaR1J5WlhOektDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OHZJRU5oYkd3Z2RHaHBjeUJ0WlhSb2IyUWdkRzhnYzJWMElIUm9aU0JqYkdsbGJuUWdiR2xpY21GeWVTQjBaWE4wSUcxdlpHVXVYRzRnSUNBZ0x5OHZJRk5sZENCcGRDQjBieUIwY25WbElHOXViSGtnZDJocGJHVWdlVzkxSUdGeVpTQmtaWFpsYkc5d2FXNW5JSFJvWlNCcGJuUmxaM0poZEdsdmJpNGdYRzRnSUNBZ0x5OHZJRWwwSUdSbFptRjFiSFJ6SUhSdklHWmhiSE5sTGlCR2IzSWdZU0J5WldGc0lHMWxjbU5vWVc1MExDQmhiSGRoZVhNZ2JHVmhkbVVnYVhRZ2MyVjBJSFJ2SUdaaGJITmxMaUJjYmlBZ0lDQXZMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2THlBOGNHRnlZVzBnYm1GdFpUMWNJblJsYzNSTmIyUmxYQ0krUEM5d1lYSmhiVDVjYmlBZ0lDQXZMeThnUEhKbGRIVnlibk0rUEM5eVpYUjFjbTV6UGx4dUlDQWdJRk5sZEZSbGMzUk5iMlJsS0hSbGMzUk5iMlJsS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRk4wWVhSMWN5QW1KaUIwYUdsekxrTjFjbkpsYm5SVGRHRjBkWE1nSVQwZ1UzQnBVM1JoZEhWekxsVnVjR0ZwY21Wa0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMFpYTjBUVzlrWlNBOVBTQjBhR2x6TGw5cGJsUmxjM1JOYjJSbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNWNiaUFnSUNBZ0lDQWdMeThnZDJVbmNtVWdZMmhoYm1kcGJtY2diVzlrWlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDlwYmxSbGMzUk5iMlJsSUQwZ2RHVnpkRTF2WkdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGMWRHOVNaWE52YkhabFJXWjBjRzl6UVdSa2NtVnpjeWdwTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeThnVTJWMElIUm9aU0JqYkdsbGJuUWdiR2xpY21GeWVTQjBieUIxYzJVZ2MyVmpkWEpsSUhkbFlpQnpiMk5yWlhSeklGUk1VeUFvZDNOeklIQnliM1J2WTI5c0tWeHVJQ0FnSUM4dkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0x5OHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWFYTlRaV04xY21WY0lqNDhMM0JoY21GdFBseHVJQ0FnSUM4dkx5QThjbVYwZFhKdWN6NDhMM0psZEhWeWJuTStYRzRnSUNBZ1UyVjBVMlZqZFhKbFYyVmlVMjlqYTJWMGN5aDFjMlZUWldOMWNtVlhaV0pUYjJOclpYUnpLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlptOXlZMlZUWldOMWNtVlhaV0pUYjJOclpYUnpJRDBnZFhObFUyVmpkWEpsVjJWaVUyOWphMlYwY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCQmJHeHZkM01nZVc5MUlIUnZJSE5sZENCMGFHVWdVRzl6U1dRZ2QyaHBZMmdnYVdSbGJuUnBabWxsY3lCMGFHbHpJR2x1YzNSaGJtTmxJRzltSUhsdmRYSWdVRTlUTGx4dUlDQWdJQzh2SUVOaGJpQnZibXg1SUdKbElHTmhiR3hsWkNCcGJpQjBhR2RsSUZWdWNHRnBjbVZrSUhOMFlYUmxMaUJjYmlBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdVMlYwVUc5elNXUW9jRzl6U1dRcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwVTNSaGRIVnpJQ0U5SUZOd2FWTjBZWFIxY3k1VmJuQmhhWEpsWkNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5d2IzTkpaQ0E5SUZ3aVhDSTdJQzh2SUhKbGMyVjBJSEJ2YzBsa0lIUnZJR2RwZG1VZ2JXOXlaU0JsZUhCc2FXTnBkQ0JtWldWa1ltRmphMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmFYTlFiM05KWkZaaGJHbGtLSEJ2YzBsa0tTbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWENKUWIzTWdTV1FnYzJWMElIUnZJRzUxYkd4Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3YjNOSlpDQTlJSEJ2YzBsa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emNHbE5aWE56WVdkbFUzUmhiWEF1VUc5elNXUWdQU0J3YjNOSlpEdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnUVd4c2IzZHpJSGx2ZFNCMGJ5QnpaWFFnZEdobElGQnBibEJoWkNCaFpHUnlaWE56TGlCVGIyMWxkR2x0WlhNZ2RHaGxJRkJwYmxCaFpDQnRhV2RvZENCamFHRnVaMlVnU1ZBZ1lXUmtjbVZ6Y3lCY2JpQWdJQ0F2THlBb2QyVWdjbVZqYjIxdFpXNWtJSEpsYzJWeWRtbHVaeUJ6ZEdGMGFXTWdTVkJ6SUdsbUlIQnZjM05wWW14bEtTNWNiaUFnSUNBdkx5QkZhWFJvWlhJZ2QyRjVJSGx2ZFNCdVpXVmtJSFJ2SUdGc2JHOTNJSGx2ZFhJZ1ZYTmxjaUIwYnlCbGJuUmxjaUIwYUdVZ1NWQWdZV1JrY21WemN5QnZaaUIwYUdVZ1VHbHVVR0ZrTGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0JUWlhSRlpuUndiM05CWkdSeVpYTnpLR0ZrWkhKbGMzTXBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFUzUmhkSFZ6SUQwOUlGTndhVk4wWVhSMWN5NVFZV2x5WldSRGIyNXVaV04wWldRZ2ZId2dkR2hwY3k1ZllYVjBiMEZrWkhKbGMzTlNaWE52YkhWMGFXOXVSVzVoWW14bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWldaMGNHOXpRV1JrY21WemN5QTlJRndpWENJN0lDOHZJSEpsYzJWMElHVm1kSEJ2YzBGa1pISmxjM01nZEc4Z1oybDJaU0J0YjNKbElHVjRjR3hwWTJsMElHWmxaV1JpWVdOclhHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDlwYzBWbWRIQnZjMEZrWkhKbGMzTldZV3hwWkNoaFpHUnlaWE56S1NsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9YQ0pGWm5Sd2IzTWdRV1JrY21WemN5QnpaWFFnZEc4Z2JuVnNiRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVm1kSEJ2YzBGa1pISmxjM01nUFNCY0luZHpPaTh2WENJZ0t5QmhaR1J5WlhOek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amIyNXVMa0ZrWkhKbGMzTWdQU0IwYUdsekxsOWxablJ3YjNOQlpHUnlaWE56TzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRjBhV01nUjJWMFZtVnljMmx2YmlncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVTFCSlgxWkZVbE5KVDA0N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1UyVjBjeUIyWVd4MVpYTWdkWE5sWkNCMGJ5QnBaR1Z1ZEdsbWVTQjBhR1VnVUU5VElITnZablIzWVhKbElIUnZJSFJvWlNCRlJsUlFUMU1nZEdWeWJXbHVZV3d1WEc0Z0lDQWdJQ29nVFhWemRDQmlaU0J6WlhRZ1ltVm1iM0psSUhOMFlYSjBhVzVuSVZ4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhCaGNtRnRJSEJ2YzFabGJtUnZja2xrSUZabGJtUnZjaUJwWkdWdWRHbG1hV1Z5SUc5bUlIUm9aU0JRVDFNZ2FYUnpaV3htTGx4dUlDQWdJQ0FxSUVCd1lYSmhiU0J3YjNOV1pYSnphVzl1SUNCV1pYSnphVzl1SUhOMGNtbHVaeUJ2WmlCMGFHVWdVRTlUSUdsMGMyVnNaaTVjYmlBZ0lDQWdLaTljYmlBZ0lDQlRaWFJRYjNOSmJtWnZLSEJ2YzFabGJtUnZja2xrTENCd2IzTldaWEp6YVc5dUtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY0c5elZtVnVaRzl5U1dRZ1BTQndiM05XWlc1a2IzSkpaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjRzl6Vm1WeWMybHZiaUE5SUhCdmMxWmxjbk5wYjI0N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1EyRnNiQ0IwYUdseklHOXVaU0IzYUdWdUlHRWdabXh2ZHlCcGN5Qm1hVzVwYzJobFpDQmhibVFnZVc5MUlIZGhiblFnZEc4Z1oyOGdZbUZqYXlCMGJ5QnBaR3hsSUhOMFlYUmxMbHh1SUNBZ0lDOHZJRlI1Y0dsallXeHNlU0IzYUdWdUlIbHZkWElnZFhObGNpQmpiR2xqYTNNZ2RHaGxJRndpVDB0Y0lpQmlkV0owZEc5dUlIUnZJR0ZqYTI1dmQyeGtaMlVnZEdoaGRDQndZV2x5YVc1bklHbHpYRzRnSUNBZ0x5OGdabWx1YVhOb1pXUXNJRzl5SUhSb1lYUWdkSEpoYm5OaFkzUnBiMjRnYVhNZ1ptbHVhWE5vWldRdVhHNGdJQ0FnTHk4Z1YyaGxiaUIwY25WbExDQjViM1VnWTJGdUlHUnBjMjFwYzNNZ2RHaGxJR1pzYjNjZ2MyTnlaV1Z1SUdGdVpDQnphRzkzSUdKaFkyc2dkR2hsSUdsa2JHVWdjMk55WldWdUxseHVJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QThjbVYwZFhKdWN6NTBjblZsSUcxbFlXNXpJSGRsSUdoaGRtVWdiVzkyWldRZ1ltRmpheUIwYnlCMGFHVWdTV1JzWlNCemRHRjBaUzRnWm1Gc2MyVWdiV1ZoYm5NZ1kzVnljbVZ1ZENCbWJHOTNJSGRoY3lCdWIzUWdabWx1YVhOb1pXUWdlV1YwTGp3dmNtVjBkWEp1Y3o1Y2JpQWdJQ0JCWTJ0R2JHOTNSVzVrWldSQmJtUkNZV05yVkc5SlpHeGxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUkdiRzkzSUQwOUlGTndhVVpzYjNjdVNXUnNaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPeUF2THlCaGJISmxZV1I1SUdsa2JHVmNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBOVBTQlRjR2xHYkc5M0xsQmhhWEpwYm1jZ0ppWWdkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaUzVHYVc1cGMyaGxaQ2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwUm14dmR5QTlJRk53YVVac2IzY3VTV1JzWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFJteHZkeUE5UFNCVGNHbEdiRzkzTGxSeVlXNXpZV04wYVc5dUlDWW1JSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbExrWnBibWx6YUdWa0tWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUkdiRzkzSUQwZ1UzQnBSbXh2ZHk1SlpHeGxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdaVzVrY21WbmFXOXVYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJVYUdseklIZHBiR3dnWTI5dWJtVmpkQ0IwYnlCMGFHVWdSV1owY0c5eklHRnVaQ0J6ZEdGeWRDQjBhR1VnY0dGcGNtbHVaeUJ3Y205alpYTnpMbHh1SUNBZ0lDOHZJRTl1YkhrZ1kyRnNiQ0IwYUdseklHbG1JSGx2ZFNCaGNtVWdhVzRnZEdobElGVnVjR0ZwY21Wa0lITjBZWFJsTGx4dUlDQWdJQzh2SUZOMVluTmpjbWxpWlNCMGJ5QjBhR1VnVUdGcGNtbHVaMFpzYjNkVGRHRjBaVU5vWVc1blpXUWdaWFpsYm5RZ2RHOGdaMlYwSUhWd1pHRjBaWE1nYjI0Z2RHaGxJSEJoYVhKcGJtY2djSEp2WTJWemN5NWNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0x5OGdQSEpsZEhWeWJuTStWMmhsZEdobGNpQndZV2x5YVc1bklHaGhjeUJwYm1sMGFXRjBaV1FnYjNJZ2JtOTBQQzl5WlhSMWNtNXpQbHh1SUNBZ0lGQmhhWElvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG14dlp5aGNJbFJ5ZVdsdVp5QjBieUJ3WVdseUlDNHVMaTVjSWlrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRGTjBZWFIxY3lBaFBTQlRjR2xUZEdGMGRYTXVWVzV3WVdseVpXUXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NTNZWEp1S0Z3aVZISnBaV1FnZEc4Z1VHRnBjaXdnWW5WMElIZGxKM0psSUdGc2NtVmhaSGtnY0dGcGNtVmtMaUJUZEc5d0lIQmhhWEpwYm1jdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXBjMUJ2YzBsa1ZtRnNhV1FvZEdocGN5NWZjRzl6U1dRcElIeDhJQ0YwYUdsekxsOXBjMFZtZEhCdmMwRmtaSEpsYzNOV1lXeHBaQ2gwYUdsekxsOWxablJ3YjNOQlpHUnlaWE56S1NsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG5kaGNtNG9YQ0pKYm5aaGJHbGtJRkJ2Y3lCSlpDQnZjaUJGWm5Sd2IzTWdZV1JrY21WemN5d2djM1J2Y0NCd1lXbHlhVzVuTGx3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRFWnNiM2NnUFNCVGNHbEdiRzkzTGxCaGFYSnBibWM3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVZ1BTQnVaWGNnVUdGcGNtbHVaMFpzYjNkVGRHRjBaVnh1SUNBZ0lDQWdJQ0FvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdVM1ZqWTJWemMyWjFiRG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCR2FXNXBjMmhsWkRvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQk5aWE56WVdkbE9pQmNJa052Ym01bFkzUnBibWN1TGk1Y0lpeGNiaUFnSUNBZ0lDQWdJQ0FnSUVGM1lXbDBhVzVuUTJobFkydEdjbTl0UldaMGNHOXpPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUVGM1lXbDBhVzVuUTJobFkydEdjbTl0VUc5ek9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRU52Ym1acGNtMWhkR2x2YmtOdlpHVTZJRndpWENKY2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxQmhhWEpwYm1kR2JHOTNVM1JoZEdWRGFHRnVaMlZrSnl3Z2UyUmxkR0ZwYkRvZ2RHaHBjeTVEZFhKeVpXNTBVR0ZwY21sdVowWnNiM2RUZEdGMFpYMHBLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMjl1Ymk1RGIyNXVaV04wS0NrN0lDOHZJRTV2YmkxQ2JHOWphMmx1WjF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QkRZV3hzSUhSb2FYTWdkMmhsYmlCNWIzVnlJSFZ6WlhJZ1kyeHBZMnR6SUhsbGN5QjBieUJqYjI1bWFYSnRJSFJvWlNCd1lXbHlhVzVuSUdOdlpHVWdiMjRnZVc5MWNpQmNiaUFnSUNBdkx5QnpZM0psWlc0Z2JXRjBZMmhsY3lCMGFHVWdiMjVsSUc5dUlIUm9aU0JGWm5Sd2IzTXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lGQmhhWEpwYm1kRGIyNW1hWEp0UTI5a1pTZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVFYZGhhWFJwYm1kRGFHVmphMFp5YjIxUWIzTXBYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRsSUhkbGNtVnVKM1FnWlhod1pXTjBhVzVuSUhSb2FYTmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXVRWGRoYVhScGJtZERhR1ZqYTBaeWIyMVFiM01nUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXVRWGRoYVhScGJtZERhR1ZqYTBaeWIyMUZablJ3YjNNcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklFSjFkQ0IzWlNCaGNtVWdjM1JwYkd3Z2QyRnBkR2x1WnlCbWIzSWdZMjl1Wm1seWJXRjBhVzl1SUdaeWIyMGdSV1owY0c5eklITnBaR1V1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloY0lsQmhhWElnUTI5a1pTQkRiMjVtYVhKdFpXUWdabkp2YlNCUVQxTWdjMmxrWlN3Z1luVjBJR0Z0SUhOMGFXeHNJSGRoYVhScGJtY2dabTl5SUdOdmJtWnBjbTFoZEdsdmJpQm1jbTl0SUVWbWRIQnZjeTVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SUVlXbHlhVzVuUm14dmQxTjBZWFJsTGsxbGMzTmhaMlVnUFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ3aVEyeHBZMnNnV1VWVElHOXVJRVZHVkZCUFV5QnBaaUJqYjJSbElHbHpPaUJjSWlBcklIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXVRMjl1Wm1seWJXRjBhVzl1UTI5a1pUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZFFZV2x5YVc1blJteHZkMU4wWVhSbFEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVjlLU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJCYkhKbFlXUjVJR052Ym1acGNtMWxaQ0JtY205dElFVm1kSEJ2Y3lBdElGTnZJR0ZzYkNCbmIyOWtJRzV2ZHk0Z1YyVW5jbVVnVUdGcGNtVmtJR0ZzYzI4Z1puSnZiU0IwYUdVZ1VFOVRJSEJsY25Od1pXTjBhWFpsTGx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1hDSlFZV2x5SUVOdlpHVWdRMjl1Wm1seWJXVmtJR1p5YjIwZ1VFOVRJSE5wWkdVc0lHRnVaQ0IzWVhNZ1lXeHlaV0ZrZVNCamIyNW1hWEp0WldRZ1puSnZiU0JGWm5Sd2IzTWdjMmxrWlM0Z1VHRnBjbWx1WnlCbWFXNWhiR2x6WldRdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYjI1UVlXbHlhVzVuVTNWalkyVnpjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmIyNVNaV0ZrZVZSdlZISmhibk5oWTNRb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRU5oYkd3Z2RHaHBjeUJwWmlCNWIzVnlJSFZ6WlhJZ1kyeHBZMnR6SUVOQlRrTkZUQ0J2Y2lCT1R5QmtkWEpwYm1jZ2RHaGxJSEJoYVhKcGJtY2djSEp2WTJWemN5NWNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ1VHRnBjbWx1WjBOaGJtTmxiQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBaFBTQlRjR2xHYkc5M0xsQmhhWEpwYm1jZ2ZId2dkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaUzVHYVc1cGMyaGxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXVRWGRoYVhScGJtZERhR1ZqYTBaeWIyMVFiM01nSmlZZ0lYUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXVRWGRoYVhScGJtZERhR1ZqYTBaeWIyMUZablJ3YjNNcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGUm9hWE1nYldWaGJuTWdkR2hoZENCMGFHVWdSV1owY0c5eklHRnNjbVZoWkhrZ2RHaHBibXR6SUdsMEozTWdjR0ZwY21Wa0xseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1RHVjBKM01nZEdWc2JDQnBkQ0IwYnlCa2NtOXdJR3RsZVhOY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTmxibVFvYm1WM0lFUnliM0JMWlhselVtVnhkV1Z6ZENncExsUnZUV1Z6YzJGblpTZ3BLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDl2YmxCaGFYSnBibWRHWVdsc1pXUW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJEWVd4c0lIUm9hWE1nZDJobGJpQjViM1Z5SUhWelpYTWdZMnhwWTJ0eklIUm9aU0JWYm5CaGFYSWdZblYwZEc5dUxseHVJQ0FnSUM4dklGUm9hWE1nZDJsc2JDQmthWE5qYjI1dVpXTjBJR1p5YjIwZ2RHaGxJRVZtZEhCdmN5QmhibVFnWm05eVoyVjBJSFJvWlNCelpXTnlaWFJ6TGx4dUlDQWdJQzh2SUZSb1pTQkRkWEp5Wlc1MFUzUmhkR1VnYVhNZ2RHaGxiaUJqYUdGdVoyVmtJSFJ2SUZWdWNHRnBjbVZrTGx4dUlDQWdJQzh2SUVOaGJHd2dkR2hwY3lCdmJteDVJR2xtSUhsdmRTQmhjbVVnYm05MElIbGxkQ0JwYmlCMGFHVWdWVzV3WVdseVpXUWdjM1JoZEdVdVhHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUZWdWNHRnBjaWdwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBVM1JoZEhWeklEMDlJRk53YVZOMFlYUjFjeTVWYm5CaGFYSmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRFWnNiM2NnSVQwZ1UzQnBSbXh2ZHk1SlpHeGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDOHZJRUpsYzNRZ1pXWm1iM0owSUd4bGRIUnBibWNnZEdobElHVm1kSEJ2Y3lCcmJtOTNJSFJvWVhRZ2QyVW5jbVVnWkhKdmNIQnBibWNnZEdobElHdGxlWE1zSUhOdklHbDBJR05oYmlCa2NtOXdJSFJvWlcwZ1lYTWdkMlZzYkM1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWdVpDaHVaWGNnUkhKdmNFdGxlWE5TWlhGMVpYTjBLQ2t1Vkc5TlpYTnpZV2RsS0NrcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a2IxVnVjR0ZwY2lncE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RISjFaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJsYm1SeVpXZHBiMjVjYmx4dUlDQWdJQzh2SUhKbFoybHZiaUJVY21GdWMyRmpkR2x2YmlCTlpYUm9iMlJ6WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCSmJtbDBhV0YwWlhNZ1lTQndkWEpqYUdGelpTQjBjbUZ1YzJGamRHbHZiaTRnUW1VZ2MzVmljMk55YVdKbFpDQjBieUJVZUVac2IzZFRkR0YwWlVOb1lXNW5aV1FnWlhabGJuUWdkRzhnWjJWMElIVndaR0YwWlhNZ2IyNGdkR2hsSUhCeWIyTmxjM011WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2ljRzl6VW1WbVNXUmNJajVCYkhCb1lXNTFiV1Z5YVdNZ1NXUmxiblJwWm1sbGNpQm1iM0lnZVc5MWNpQndkWEpqYUdGelpTNDhMM0JoY21GdFBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpWVcxdmRXNTBRMlZ1ZEhOY0lqNUJiVzkxYm5RZ2FXNGdRMlZ1ZEhNZ2RHOGdZMmhoY21kbFBDOXdZWEpoYlQ1Y2JpQWdJQ0F2THlBOGNtVjBkWEp1Y3o1SmJtbDBhV0YwWlZSNFVtVnpkV3gwUEM5eVpYUjFjbTV6UGx4dUlDQWdJRWx1YVhScFlYUmxVSFZ5WTJoaGMyVlVlQ2h3YjNOU1pXWkpaQ3dnWVcxdmRXNTBRMlZ1ZEhNcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwVTNSaGRIVnpJRDA5SUZOd2FWTjBZWFIxY3k1VmJuQmhhWEpsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCSmJtbDBhV0YwWlZSNFVtVnpkV3gwS0daaGJITmxMQ0JjSWs1dmRDQlFZV2x5WldSY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwUm14dmR5QWhQU0JUY0dsR2JHOTNMa2xrYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1NXNXBkR2xoZEdWVWVGSmxjM1ZzZENobVlXeHpaU3dnWENKT2IzUWdTV1JzWlZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQndkWEpqYUdGelpWSmxjWFZsYzNRZ1BTQlFkWEpqYUdGelpVaGxiSEJsY2k1RGNtVmhkR1ZRZFhKamFHRnpaVkpsY1hWbGMzUW9ZVzF2ZFc1MFEyVnVkSE1zSUhCdmMxSmxaa2xrS1R0Y2JpQWdJQ0FnSUNBZ2NIVnlZMmhoYzJWU1pYRjFaWE4wTGtOdmJtWnBaeUE5SUhSb2FYTXVRMjl1Wm1sbk8xeHVJQ0FnSUNBZ0lDQjJZWElnY0hWeVkyaGhjMlZOYzJjZ1BTQndkWEpqYUdGelpWSmxjWFZsYzNRdVZHOU5aWE56WVdkbEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dQU0JUY0dsR2JHOTNMbFJ5WVc1ellXTjBhVzl1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaU0E5SUc1bGR5QlVjbUZ1YzJGamRHbHZia1pzYjNkVGRHRjBaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjMUpsWmtsa0xDQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVVIVnlZMmhoYzJVc0lHRnRiM1Z1ZEVObGJuUnpMQ0J3ZFhKamFHRnpaVTF6Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0JYWVdsMGFXNW5JR1p2Y2lCRlJsUlFUMU1nWTI5dWJtVmpkR2x2YmlCMGJ5QnRZV3RsSUhCaGVXMWxiblFnY21WeGRXVnpkQ0JtYjNJZ0pIdGhiVzkxYm5SRFpXNTBjeUF2SURFd01DNHdmV0FwTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmMyVnVaQ2h3ZFhKamFHRnpaVTF6WnlrcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxMbE5sYm5Rb1lFRnphMlZrSUVWR1ZGQlBVeUIwYnlCaFkyTmxjSFFnY0dGNWJXVnVkQ0JtYjNJZ0pIdGhiVzkxYm5SRFpXNTBjeUF2SURFd01DNHdmV0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QkRkWE4wYjIxRmRtVnVkQ2duVkhoR2JHOTNVM1JoZEdWRGFHRnVaMlZrSnl3Z2UyUmxkR0ZwYkRvZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1Y5S1NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTVzVwZEdsaGRHVlVlRkpsYzNWc2RDaDBjblZsTENCY0lsQjFjbU5vWVhObElFbHVhWFJwWVhSbFpGd2lLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJKYm1sMGFXRjBaWE1nWVNCd2RYSmphR0Z6WlNCMGNtRnVjMkZqZEdsdmJpNGdRbVVnYzNWaWMyTnlhV0psWkNCMGJ5QlVlRVpzYjNkVGRHRjBaVU5vWVc1blpXUWdaWFpsYm5RZ2RHOGdaMlYwSUhWd1pHRjBaWE1nYjI0Z2RHaGxJSEJ5YjJObGMzTXVYRzRnSUNBZ0x5OGdQSEJoY21FK1ZHbHdJR0Z1WkNCallYTm9iM1YwSUdGeVpTQnViM1FnWVd4c2IzZGxaQ0J6YVcxMWJIUmhibVZ2ZFhOc2VTNDhMM0JoY21FK1hHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpY0c5elVtVm1TV1JjSWo1QmJpQlZibWx4ZFdVZ1NXUmxiblJwWm1sbGNpQm1iM0lnZVc5MWNpQlBjbVJsY2k5UWRYSmphR0Z6WlR3dmNHRnlZVzArWEc0Z0lDQWdMeThnUEhCaGNtRnRJRzVoYldVOVhDSndkWEpqYUdGelpVRnRiM1Z1ZEZ3aVBsUm9aU0JRZFhKamFHRnpaU0JCYlc5MWJuUWdhVzRnUTJWdWRITXVQQzl3WVhKaGJUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW5ScGNFRnRiM1Z1ZEZ3aVBsUm9aU0JVYVhBZ1FXMXZkVzUwSUdsdUlFTmxiblJ6UEM5d1lYSmhiVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltTmhjMmh2ZFhSQmJXOTFiblJjSWo1VWFHVWdRMkZ6YUc5MWRDQkJiVzkxYm5RZ2FXNGdRMlZ1ZEhNOEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2ljSEp2YlhCMFJtOXlRMkZ6YUc5MWRGd2lQbGRvWlhSb1pYSWdkRzhnY0hKdmJYQjBJSGx2ZFhJZ1kzVnpkRzl0WlhJZ1ptOXlJR05oYzJodmRYUWdiMjRnZEdobElFVm1kSEJ2Y3p3dmNHRnlZVzArWEc0Z0lDQWdMeThnUEhCaGNtRnRJRzVoYldVOVhDSnZjSFJwYjI1elhDSStWR2hsSUZObGRIUnBibWNnZEc4Z2MyVjBJRWhsWVdSbGNpQmhibVFnUm05dmRHVnlJR1p2Y2lCMGFHVWdVbVZqWldsd2REd3ZjR0Z5WVcwK1hHNGdJQ0FnTHk4Z1BIQmhjbUZ0SUc1aGJXVTlYQ0p6ZFhKamFHRnlaMlZCYlc5MWJuUmNJajVVYUdVZ1UzVnlZMmhoY21kbElFRnRiM1Z1ZENCcGJpQkRaVzUwY3p3dmNHRnlZVzArWEc0Z0lDQWdMeThnUEhKbGRIVnlibk0rU1c1cGRHbGhkR1ZVZUZKbGMzVnNkRHd2Y21WMGRYSnVjejVjYmlBZ0lDQkpibWwwYVdGMFpWQjFjbU5vWVhObFZIaFdNaWh3YjNOU1pXWkpaQ3dnY0hWeVkyaGhjMlZCYlc5MWJuUXNJSFJwY0VGdGIzVnVkQ3dnWTJGemFHOTFkRUZ0YjNWdWRDd2djSEp2YlhCMFJtOXlRMkZ6YUc5MWRDd2diM0IwYVc5dWN5QTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrOXdkR2x2Ym5Nb0tTd2djM1Z5WTJoaGNtZGxRVzF2ZFc1MElEMGdNQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUlRkR0YwZFhNZ1BUMGdVM0JwVTNSaGRIVnpMbFZ1Y0dGcGNtVmtLU0J5WlhSMWNtNGdibVYzSUVsdWFYUnBZWFJsVkhoU1pYTjFiSFFvWm1Gc2MyVXNJRndpVG05MElGQmhhWEpsWkZ3aUtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHbHdRVzF2ZFc1MElENGdNQ0FtSmlBb1kyRnphRzkxZEVGdGIzVnVkQ0ErSURBZ2ZId2djSEp2YlhCMFJtOXlRMkZ6YUc5MWRDa3BJSEpsZEhWeWJpQnVaWGNnU1c1cGRHbGhkR1ZVZUZKbGMzVnNkQ2htWVd4elpTd2dYQ0pEWVc1dWIzUWdRV05qWlhCMElGUnBjSE1nWVc1a0lFTmhjMmh2ZFhRZ1lYUWdkR2hsSUhOaGJXVWdkR2x0WlM1Y0lpazdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBaFBTQlRjR2xHYkc5M0xrbGtiR1VwSUhKbGRIVnliaUJ1WlhjZ1NXNXBkR2xoZEdWVWVGSmxjM1ZzZENobVlXeHpaU3dnWENKT2IzUWdTV1JzWlZ3aUtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwUm14dmR5QTlJRk53YVVac2IzY3VWSEpoYm5OaFkzUnBiMjQ3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCMllYSWdjSFZ5WTJoaGMyVWdQU0JRZFhKamFHRnpaVWhsYkhCbGNpNURjbVZoZEdWUWRYSmphR0Z6WlZKbGNYVmxjM1JXTWlod2IzTlNaV1pKWkN3Z2NIVnlZMmhoYzJWQmJXOTFiblFzSUhScGNFRnRiM1Z1ZEN3Z1kyRnphRzkxZEVGdGIzVnVkQ3dnY0hKdmJYQjBSbTl5UTJGemFHOTFkQ3dnYzNWeVkyaGhjbWRsUVcxdmRXNTBLVHRjYmlBZ0lDQWdJQ0FnY0hWeVkyaGhjMlV1UTI5dVptbG5JRDBnZEdocGN5NURiMjVtYVdjN1hHNGdJQ0FnSUNBZ0lIQjFjbU5vWVhObExrOXdkR2x2Ym5NZ1BTQnZjSFJwYjI1ek8xeHVJQ0FnSUNBZ0lDQjJZWElnY0hWeVkyaGhjMlZOYzJjZ1BTQndkWEpqYUdGelpTNVViMDFsYzNOaFoyVW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVWdQU0J1WlhjZ1ZISmhibk5oWTNScGIyNUdiRzkzVTNSaGRHVW9YRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzTlNaV1pKWkN3Z1ZISmhibk5oWTNScGIyNVVlWEJsTGxCMWNtTm9ZWE5sTENCd2RYSmphR0Z6WlVGdGIzVnVkQ3dnY0hWeVkyaGhjMlZOYzJjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnVjJGcGRHbHVaeUJtYjNJZ1JVWlVVRTlUSUdOdmJtNWxZM1JwYjI0Z2RHOGdiV0ZyWlNCd1lYbHRaVzUwSUhKbGNYVmxjM1F1SUNSN2NIVnlZMmhoYzJVdVFXMXZkVzUwVTNWdGJXRnllU2dwZldBcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjMlZ1WkNod2RYSmphR0Z6WlUxelp5a3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGxObGJuUW9ZRUZ6YTJWa0lFVkdWRkJQVXlCMGJ5QmhZMk5sY0hRZ2NHRjViV1Z1ZENCbWIzSWdKSHR3ZFhKamFHRnpaUzVCYlc5MWJuUlRkVzF0WVhKNUtDbDlZQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RVZUVac2IzZFRkR0YwWlVOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaWDBwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkpibWwwYVdGMFpWUjRVbVZ6ZFd4MEtIUnlkV1VzSUZ3aVVIVnlZMmhoYzJVZ1NXNXBkR2xoZEdWa1hDSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRWx1YVhScFlYUmxjeUJoSUhKbFpuVnVaQ0IwY21GdWMyRmpkR2x2Ymk0Z1FtVWdjM1ZpYzJOeWFXSmxaQ0IwYnlCVWVFWnNiM2RUZEdGMFpVTm9ZVzVuWldRZ1pYWmxiblFnZEc4Z1oyVjBJSFZ3WkdGMFpYTWdiMjRnZEdobElIQnliMk5sYzNNdVhHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpY0c5elVtVm1TV1JjSWo1QmJIQm9ZVzUxYldWeWFXTWdTV1JsYm5ScFptbGxjaUJtYjNJZ2VXOTFjaUJ5WldaMWJtUXVQQzl3WVhKaGJUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW1GdGIzVnVkRU5sYm5SelhDSStRVzF2ZFc1MElHbHVJRU5sYm5SeklIUnZJR05vWVhKblpUd3ZjR0Z5WVcwK1hHNGdJQ0FnTHk4Z1BIQmhjbUZ0SUc1aGJXVTlYQ0p6ZFhCd2NtVnpjMDFsY21Ob1lXNTBVR0Z6YzNkdmNtUmNJajVOWlhKamFHRnVkQ0JRWVhOemQyOXlaQ0JqYjI1MGNtOXNJR2x1SUZaQlFUd3ZjR0Z5WVcwK1hHNGdJQ0FnTHk4Z1BIQmhjbUZ0SUc1aGJXVTlYQ0p2Y0hScGIyNXpYQ0krVkdobElGTmxkSFJwYm1jZ2RHOGdjMlYwSUVobFlXUmxjaUJoYm1RZ1JtOXZkR1Z5SUdadmNpQjBhR1VnVW1WalpXbHdkRHd2Y0dGeVlXMCtYRzRnSUNBZ0x5OGdQSEpsZEhWeWJuTStTVzVwZEdsaGRHVlVlRkpsYzNWc2REd3ZjbVYwZFhKdWN6NWNiaUFnSUNCSmJtbDBhV0YwWlZKbFpuVnVaRlI0S0hCdmMxSmxaa2xrTENCaGJXOTFiblJEWlc1MGN5d2djM1Z3Y0hKbGMzTk5aWEpqYUdGdWRGQmhjM04zYjNKa0lEMGdabUZzYzJVc0lHOXdkR2x2Ym5NZ1BTQnVaWGNnVkhKaGJuTmhZM1JwYjI1UGNIUnBiMjV6S0NrcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwVTNSaGRIVnpJRDA5SUZOd2FWTjBZWFIxY3k1VmJuQmhhWEpsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCSmJtbDBhV0YwWlZSNFVtVnpkV3gwS0daaGJITmxMQ0JjSWs1dmRDQlFZV2x5WldSY0lpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwUm14dmR5QWhQU0JUY0dsR2JHOTNMa2xrYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1NXNXBkR2xoZEdWVWVGSmxjM1ZzZENobVlXeHpaU3dnWENKT2IzUWdTV1JzWlZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaV1oxYm1SU1pYRjFaWE4wSUQwZ1VIVnlZMmhoYzJWSVpXeHdaWEl1UTNKbFlYUmxVbVZtZFc1a1VtVnhkV1Z6ZENoaGJXOTFiblJEWlc1MGN5d2djRzl6VW1WbVNXUXNJSE4xY0hCeVpYTnpUV1Z5WTJoaGJuUlFZWE56ZDI5eVpDazdYRzRnSUNBZ0lDQWdJSEpsWm5WdVpGSmxjWFZsYzNRdVEyOXVabWxuSUQwZ2RHaHBjeTVEYjI1bWFXYzdYRzRnSUNBZ0lDQWdJSEpsWm5WdVpGSmxjWFZsYzNRdVQzQjBhVzl1Y3lBOUlHOXdkR2x2Ym5NN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5WldaMWJtUk5jMmNnUFNCeVpXWjFibVJTWlhGMVpYTjBMbFJ2VFdWemMyRm5aU2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUkdiRzkzSUQwZ1UzQnBSbXh2ZHk1VWNtRnVjMkZqZEdsdmJqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVZ1BTQnVaWGNnVkhKaGJuTmhZM1JwYjI1R2JHOTNVM1JoZEdVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNOU1pXWkpaQ3dnVkhKaGJuTmhZM1JwYjI1VWVYQmxMbEpsWm5WdVpDd2dZVzF2ZFc1MFEyVnVkSE1zSUhKbFpuVnVaRTF6Wnl3Z1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnVjJGcGRHbHVaeUJtYjNJZ1JVWlVVRTlUSUdOdmJtNWxZM1JwYjI0Z2RHOGdiV0ZyWlNCeVpXWjFibVFnY21WeGRXVnpkQ0JtYjNJZ0pIc29ZVzF2ZFc1MFEyVnVkSE1nTHlBeE1EQXVNQ2t1ZEc5R2FYaGxaQ2d5S1gxZ0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM05sYm1Rb2NtVm1kVzVrVFhObktTbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1VTJWdWRDaGdRWE5yWldRZ1JVWlVVRTlUSUhSdklISmxablZ1WkNBa2V5aGhiVzkxYm5SRFpXNTBjeUF2SURFd01DNHdLUzUwYjBacGVHVmtLRElwZldBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnblZIaEdiRzkzVTNSaGRHVkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdWOUtTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnU1c1cGRHbGhkR1ZVZUZKbGMzVnNkQ2gwY25WbExDQmNJbEpsWm5WdVpDQkpibWwwYVdGMFpXUmNJaWs3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklFeGxkQ0IwYUdVZ1JVWlVVRTlUSUd0dWIzY2dkMmhsZEdobGNpQnRaWEpqYUdGdWRDQmhZMk5sY0hSbFpDQnZjaUJrWldOc2FXNWxaQ0IwYUdVZ2MybG5ibUYwZFhKbFhHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpWVdOalpYQjBaV1JjSWo1M2FHVjBhR1Z5SUcxbGNtTm9ZVzUwSUdGalkyVndkR1ZrSUhSb1pTQnphV2R1WVhSMWNtVWdabkp2YlNCamRYTjBiMjFsY2lCdmNpQnViM1E4TDNCaGNtRnRQbHh1SUNBZ0lFRmpZMlZ3ZEZOcFoyNWhkSFZ5WlNoaFkyTmxjSFJsWkNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGtOMWNuSmxiblJHYkc5M0lDRTlJRk53YVVac2IzY3VWSEpoYm5OaFkzUnBiMjRnZkh3Z2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1Um1sdWFYTm9aV1FnZkh3Z0lYUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGtGM1lXbDBhVzVuVTJsbmJtRjBkWEpsUTJobFkyc3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0Z3aVFYTnJaV1FnZEc4Z1lXTmpaWEIwSUhOcFoyNWhkSFZ5WlNCaWRYUWdTU0IzWVhNZ2JtOTBJSGRoYVhScGJtY2dabTl5SUc5dVpTNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTFwWkZSNFVtVnpkV3gwS0daaGJITmxMQ0JjSWtGemEyVmtJSFJ2SUdGalkyVndkQ0J6YVdkdVlYUjFjbVVnWW5WMElFa2dkMkZ6SUc1dmRDQjNZV2wwYVc1bklHWnZjaUJ2Ym1VdVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1VTJsbmJtRjBkWEpsVW1WemNHOXVaR1ZrS0dGalkyVndkR1ZrSUQ4Z1hDSkJZMk5sY0hScGJtY2dVMmxuYm1GMGRYSmxMaTR1WENJZ09pQmNJa1JsWTJ4cGJtbHVaeUJUYVdkdVlYUjFjbVV1TGk1Y0lpazdYRzRnSUNBZ0lDQWdJSFpoY2lCemFXZFNaWEZOYzJjZ1BTQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1VGFXZHVZWFIxY21WU1pYRjFhWEpsWkUxbGMzTmhaMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM05sYm1Rb1lXTmpaWEIwWldSY2JpQWdJQ0FnSUNBZ0lDQWdJRDhnYm1WM0lGTnBaMjVoZEhWeVpVRmpZMlZ3ZENoMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVRYjNOU1pXWkpaQ2t1Vkc5TlpYTnpZV2RsS0NsY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nYm1WM0lGTnBaMjVoZEhWeVpVUmxZMnhwYm1Vb2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1VUc5elVtVm1TV1FwTGxSdlRXVnpjMkZuWlNncEtUdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NkVWVFWnNiM2RUZEdGMFpVTm9ZVzVuWldRbkxDQjdaR1YwWVdsc09pQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlgwcEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJOYVdSVWVGSmxjM1ZzZENoMGNuVmxMQ0JjSWx3aUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlRkV0p0YVhRZ2RHaGxJRU52WkdVZ2IySjBZV2x1WldRZ1lua2dlVzkxY2lCMWMyVnlJSGRvWlc0Z2NHaHZibWx1WnlCbWIzSWdZWFYwYUM0Z1hHNGdJQ0FnTHk4Z1NYUWdkMmxzYkNCeVpYUjFjbTRnYVcxdFpXUnBZWFJsYkhrZ2RHOGdkR1ZzYkNCNWIzVWdkMmhsZEdobGNpQjBhR1VnWTI5a1pTQm9ZWE1nWVNCMllXeHBaQ0JtYjNKdFlYUWdiM0lnYm05MExpQmNiaUFnSUNBdkx5QkpaaUIyWVd4cFpEMDlkSEoxWlNCcGN5QnlaWFIxY201bFpDd2dibThnYm1WbFpDQjBieUJrYnlCaGJubDBhR2x1WnlCbGJITmxMaUJGZUhCbFkzUWdkWEJrWVhSbGN5QjJhV0VnYzNSaGJtUmhjbVFnWTJGc2JHSmhZMnN1WEc0Z0lDQWdMeThnU1dZZ2RtRnNhV1E5UFdaaGJITmxJR2x6SUhKbGRIVnlibVZrTENCNWIzVWdZMkZ1SUhOb2IzY2dlVzkxY2lCMWMyVnlJSFJvWlNCaFkyTnZiWEJoYm5scGJtY2diV1Z6YzJGblpTd2dZVzVrSUdsdWRtbDBaU0IwYUdWdElIUnZJR1Z1ZEdWeUlHRnViM1JvWlhJZ1kyOWtaUzRnWEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2lZWFYwYUVOdlpHVmNJajVVYUdVZ1kyOWtaU0J2WW5SaGFXNWxaQ0JpZVNCNWIzVnlJSFZ6WlhJZ1puSnZiU0IwYUdVZ2JXVnlZMmhoYm5RZ1kyRnNiQ0JqWlc1MGNtVXVJRWwwSUhOb2IzVnNaQ0JpWlNCaElEWXRZMmhoY21GamRHVnlJR0ZzY0doaExXNTFiV1Z5YVdNZ2RtRnNkV1V1UEM5d1lYSmhiVDVjYmlBZ0lDQXZMeUE4Y21WMGRYSnVjejVYYUdWMGFHVnlJR052WkdVZ2FHRnpJR0VnZG1Gc2FXUWdabTl5YldGMElHOXlJRzV2ZEM0OEwzSmxkSFZ5Ym5NK1hHNGdJQ0FnVTNWaWJXbDBRWFYwYUVOdlpHVW9ZWFYwYUVOdlpHVXBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWVhWMGFFTnZaR1V1YkdWdVozUm9JQ0U5SURZcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1UzVmliV2wwUVhWMGFFTnZaR1ZTWlhOMWJIUW9abUZzYzJVc0lGd2lUbTkwSUdFZ05pMWthV2RwZENCamIyUmxMbHdpS1RzZ0lDQWdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRVpzYjNjZ0lUMGdVM0JwUm14dmR5NVVjbUZ1YzJGamRHbHZiaUI4ZkNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVHYVc1cGMyaGxaQ0I4ZkNBaGRHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1UVhkaGFYUnBibWRRYUc5dVpVWnZja0YxZEdncFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLRndpUVhOclpXUWdkRzhnYzJWdVpDQmhkWFJvSUdOdlpHVWdZblYwSUVrZ2QyRnpJRzV2ZENCM1lXbDBhVzVuSUdadmNpQnZibVV1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVGRXSnRhWFJCZFhSb1EyOWtaVkpsYzNWc2RDaG1ZV3h6WlN3Z1hDSlhZWE1nYm05MElIZGhhWFJwYm1jZ1ptOXlJRzl1WlM1Y0lpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVCZFhSb1EyOWtaVk5sYm5Rb1lGTjFZbTFwZEhScGJtY2dRWFYwYUNCRGIyUmxJQ1I3WVhWMGFFTnZaR1Y5WUNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNObGJtUW9ibVYzSUVGMWRHaERiMlJsUVdSMmFXTmxLSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbExsQnZjMUpsWmtsa0xDQmhkWFJvUTI5a1pTa3VWRzlOWlhOellXZGxLQ2twTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMVI0Um14dmQxTjBZWFJsUTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxmU2twTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lGTjFZbTFwZEVGMWRHaERiMlJsVW1WemRXeDBLSFJ5ZFdVc0lGd2lWbUZzYVdRZ1EyOWtaUzVjSWlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1FYUjBaVzF3ZEhNZ2RHOGdZMkZ1WTJWc0lHRWdWSEpoYm5OaFkzUnBiMjR1SUZ4dUlDQWdJQzh2SUVKbElITjFZbk5qY21saVpXUWdkRzhnVkhoR2JHOTNVM1JoZEdWRGFHRnVaMlZrSUdWMlpXNTBJSFJ2SUhObFpTQm9iM2NnYVhRZ1oyOWxjeTVjYmlBZ0lDQXZMeUJYWVdsMElHWnZjaUIwYUdVZ2RISmhibk5oWTNScGIyNGdkRzhnWW1VZ1ptbHVhWE5vWldRZ1lXNWtJSFJvWlc0Z2MyVmxJSGRvWlhSb1pYSWdZMkZ1WTJWc2JHRjBhVzl1SUhkaGN5QnpkV05qWlhOelpuVnNJRzl5SUc1dmRDNWNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0x5OGdQSEpsZEhWeWJuTStUV2xrVkhoU1pYTjFiSFFnTFNCbVlXeHpaU0J2Ym14NUlHbG1JSGx2ZFNCallXeHNaV1FnYVhRZ2FXNGdkR2hsSUhkeWIyNW5JSE4wWVhSbFBDOXlaWFIxY201elBseHVJQ0FnSUVOaGJtTmxiRlJ5WVc1ellXTjBhVzl1S0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGtOMWNuSmxiblJHYkc5M0lDRTlJRk53YVVac2IzY3VWSEpoYm5OaFkzUnBiMjRnZkh3Z2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1Um1sdWFYTm9aV1FwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktGd2lRWE5yWldRZ2RHOGdZMkZ1WTJWc0lIUnlZVzV6WVdOMGFXOXVJR0oxZENCSklIZGhjeUJ1YjNRZ2FXNGdkR2hsSUcxcFpHUnNaU0J2WmlCdmJtVXVYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJOYVdSVWVGSmxjM1ZzZENobVlXeHpaU3dnWENKQmMydGxaQ0IwYnlCallXNWpaV3dnZEhKaGJuTmhZM1JwYjI0Z1luVjBJRWtnZDJGeklHNXZkQ0JwYmlCMGFHVWdiV2xrWkd4bElHOW1JRzl1WlM1Y0lpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QlVTQzB4UXl3Z1ZFZ3RNME1nTFNCTlpYSmphR0Z1ZENCd2NtVnpjMlZrSUdOaGJtTmxiRnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1VW1WeGRXVnpkRk5sYm5RcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmpZVzVqWld4U1pYRWdQU0J1WlhjZ1EyRnVZMlZzVkhKaGJuTmhZM1JwYjI1U1pYRjFaWE4wS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNURZVzVqWld4c2FXNW5LRndpUVhSMFpXMXdkR2x1WnlCMGJ5QkRZVzVqWld3Z1ZISmhibk5oWTNScGIyNHVMaTVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpaVzVrS0dOaGJtTmxiRkpsY1M1VWIwMWxjM05oWjJVb0tTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhaU0JJWVdRZ1RtOTBJRVYyWlc0Z1UyVnVkQ0JTWlhGMVpYTjBJRmxsZEM0Z1EyOXVjMmxrWlhJZ1lYTWdhMjV2ZDI0Z1ptRnBiR1ZrTGx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVJtRnBiR1ZrS0c1MWJHd3NJRndpVkhKaGJuTmhZM1JwYjI0Z1EyRnVZMlZzYkdWa0xpQlNaWEYxWlhOMElFaGhaQ0J1YjNRZ1pYWmxiaUJpWldWdUlITmxiblFnZVdWMExsd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMVI0Um14dmQxTjBZWFJsUTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxmU2twTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFMXBaRlI0VW1WemRXeDBLSFJ5ZFdVc0lGd2lYQ0lwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUVsdWFYUnBZWFJsY3lCaElHTmhjMmh2ZFhRZ2IyNXNlU0IwY21GdWMyRmpkR2x2Ymk0Z1FtVWdjM1ZpYzJOeWFXSmxaQ0IwYnlCVWVFWnNiM2RUZEdGMFpVTm9ZVzVuWldRZ1pYWmxiblFnZEc4Z1oyVjBJSFZ3WkdGMFpYTWdiMjRnZEdobElIQnliMk5sYzNNdVhHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpY0c5elVtVm1TV1JjSWo1QmJIQm9ZVzUxYldWeWFXTWdTV1JsYm5ScFptbGxjaUJtYjNJZ2VXOTFjaUIwY21GdWMyRmpkR2x2Ymk0OEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2lZVzF2ZFc1MFEyVnVkSE5jSWo1QmJXOTFiblFnYVc0Z1EyVnVkSE1nZEc4Z1kyRnphQ0J2ZFhROEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2ljM1Z5WTJoaGNtZGxRVzF2ZFc1MFhDSStWR2hsSUZOMWNtTm9ZWEpuWlNCQmJXOTFiblFnYVc0Z1EyVnVkSE04TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh5WlhSMWNtNXpQa2x1YVhScFlYUmxWSGhTWlhOMWJIUThMM0psZEhWeWJuTStYRzRnSUNBZ1NXNXBkR2xoZEdWRFlYTm9iM1YwVDI1c2VWUjRLSEJ2YzFKbFprbGtMQ0JoYlc5MWJuUkRaVzUwY3l3Z2MzVnlZMmhoY21kbFFXMXZkVzUwSUQwZ01Dd2diM0IwYVc5dWN5QTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrOXdkR2x2Ym5Nb0tTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SVGRHRjBkWE1nUFQwZ1UzQnBVM1JoZEhWekxsVnVjR0ZwY21Wa0tTQnlaWFIxY200Z2JtVjNJRWx1YVhScFlYUmxWSGhTWlhOMWJIUW9abUZzYzJVc0lGd2lUbTkwSUZCaGFYSmxaRndpS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFJteHZkeUFoUFNCVGNHbEdiRzkzTGtsa2JHVXBJSEpsZEhWeWJpQnVaWGNnU1c1cGRHbGhkR1ZVZUZKbGMzVnNkQ2htWVd4elpTd2dYQ0pPYjNRZ1NXUnNaVndpS1R0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnWTJGemFHOTFkRTF6WnlBOUlFOWlhbVZqZEM1aGMzTnBaMjRvYm1WM0lFTmhjMmh2ZFhSUGJteDVVbVZ4ZFdWemRDaGhiVzkxYm5SRFpXNTBjeXdnY0c5elVtVm1TV1FwTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JUZFhKamFHRnlaMlZCYlc5MWJuUTZJSE4xY21Ob1lYSm5aVUZ0YjNWdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUU5d2RHbHZibk02SUc5d2RHbHZibk1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQkRiMjVtYVdjNklIUm9hWE11UTI5dVptbG5YRzRnSUNBZ0lDQWdJSDBwTGxSdlRXVnpjMkZuWlNncE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dQU0JUY0dsR2JHOTNMbFJ5WVc1ellXTjBhVzl1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaU0E5SUc1bGR5QlVjbUZ1YzJGamRHbHZia1pzYjNkVGRHRjBaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjMUpsWmtsa0xDQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVEyRnphRzkxZEU5dWJIa3NJR0Z0YjNWdWRFTmxiblJ6TENCallYTm9iM1YwVFhObkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWUZkaGFYUnBibWNnWm05eUlFVkdWRkJQVXlCamIyNXVaV04wYVc5dUlIUnZJSE5sYm1RZ1kyRnphRzkxZENCeVpYRjFaWE4wSUdadmNpQWtleWhoYlc5MWJuUkRaVzUwY3lBdklERXdNQ2t1ZEc5R2FYaGxaQ2d5S1gxZ0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM05sYm1Rb1kyRnphRzkxZEUxelp5a3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGxObGJuUW9ZRUZ6YTJWa0lFVkdWRkJQVXlCMGJ5QmtieUJqWVhOb2IzVjBJR1p2Y2lBa2V5aGhiVzkxYm5SRFpXNTBjeUF2SURFd01Da3VkRzlHYVhobFpDZ3lLWDFnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFSNFJteHZkMU4wWVhSbFEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsZlNrcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRWx1YVhScFlYUmxWSGhTWlhOMWJIUW9kSEoxWlN3Z1hDSkRZWE5vYjNWMElFbHVhWFJwWVhSbFpGd2lLVHRjYmlBZ0lDQjlJQ0FnSUZ4dVhHNGdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1NXNXBkR2xoZEdWeklHRWdUV0ZwYkNCUGNtUmxjaUF2SUZSbGJHVndhRzl1WlNCUGNtUmxjaUJRZFhKamFHRnpaU0JVY21GdWMyRmpkR2x2Ymx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbkJ2YzFKbFprbGtYQ0krUVd4d2FHRnVkVzFsY21saklFbGtaVzUwYVdacFpYSWdabTl5SUhsdmRYSWdkSEpoYm5OaFkzUnBiMjR1UEM5d1lYSmhiVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltRnRiM1Z1ZEVObGJuUnpYQ0krUVcxdmRXNTBJR2x1SUVObGJuUnpQQzl3WVhKaGJUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW5OMWNtTm9ZWEpuWlVGdGIzVnVkRndpUGxSb1pTQlRkWEpqYUdGeVoyVWdRVzF2ZFc1MElHbHVJRU5sYm5SelBDOXdZWEpoYlQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbk4xY0hCeVpYTnpUV1Z5WTJoaGJuUlFZWE56ZDI5eVpGd2lQajVOWlhKamFHRnVkQ0JRWVhOemQyOXlaQ0JqYjI1MGNtOXNJR2x1SUZaQlFUd3ZjR0Z5WVcwK1hHNGdJQ0FnTHk4Z1BIQmhjbUZ0SUc1aGJXVTlYQ0p2Y0hScGIyNXpYQ0krVkdobElGTmxkSFJwYm1jZ2RHOGdjMlYwSUVobFlXUmxjaUJoYm1RZ1JtOXZkR1Z5SUdadmNpQjBhR1VnVW1WalpXbHdkRHd2Y0dGeVlXMCtYRzRnSUNBZ0x5OGdQSEpsZEhWeWJuTStTVzVwZEdsaGRHVlVlRkpsYzNWc2REd3ZjbVYwZFhKdWN6NWNiaUFnSUNCSmJtbDBhV0YwWlUxdmRHOVFkWEpqYUdGelpWUjRLSEJ2YzFKbFprbGtMQ0JoYlc5MWJuUkRaVzUwY3l3Z2MzVnlZMmhoY21kbFFXMXZkVzUwSUQwZ01Dd2djM1Z3Y0hKbGMzTk5aWEpqYUdGdWRGQmhjM04zYjNKa0lEMGdabUZzYzJVc0lHOXdkR2x2Ym5NZ1BTQnVaWGNnVkhKaGJuTmhZM1JwYjI1UGNIUnBiMjV6S0NrcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwVTNSaGRIVnpJRDA5SUZOd2FWTjBZWFIxY3k1VmJuQmhhWEpsWkNrZ2NtVjBkWEp1SUc1bGR5QkpibWwwYVdGMFpWUjRVbVZ6ZFd4MEtHWmhiSE5sTENCY0lrNXZkQ0JRWVdseVpXUmNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dJVDBnVTNCcFJteHZkeTVKWkd4bEtTQnlaWFIxY200Z2JtVjNJRWx1YVhScFlYUmxWSGhTWlhOMWJIUW9abUZzYzJVc0lGd2lUbTkwSUVsa2JHVmNJaWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQnRiM1J2VUhWeVkyaGhjMlZOYzJjZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0c1bGR5Qk5iM1J2VUhWeVkyaGhjMlZTWlhGMVpYTjBLR0Z0YjNWdWRFTmxiblJ6TENCd2IzTlNaV1pKWkNrc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUZOMWNtTm9ZWEpuWlVGdGIzVnVkRG9nYzNWeVkyaGhjbWRsUVcxdmRXNTBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1UzVndjSEpsYzNOTlpYSmphR0Z1ZEZCaGMzTjNiM0prT2lCemRYQndjbVZ6YzAxbGNtTm9ZVzUwVUdGemMzZHZjbVFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQkRiMjVtYVdjNklIUm9hWE11UTI5dVptbG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1QzQjBhVzl1Y3pvZ2IzQjBhVzl1YzF4dUlDQWdJQ0FnSUNCOUtTNVViMDFsYzNOaFoyVW9LVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUkdiRzkzSUQwZ1UzQnBSbXh2ZHk1VWNtRnVjMkZqZEdsdmJqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVZ1BTQnVaWGNnVkhKaGJuTmhZM1JwYjI1R2JHOTNVM1JoZEdVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNOU1pXWkpaQ3dnVkhKaGJuTmhZM1JwYjI1VWVYQmxMazFQVkU4c0lHRnRiM1Z1ZEVObGJuUnpMQ0J0YjNSdlVIVnlZMmhoYzJWTmMyY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCZ1YyRnBkR2x1WnlCbWIzSWdSVVpVVUU5VElHTnZibTVsWTNScGIyNGdkRzhnYzJWdVpDQk5UMVJQSUhKbGNYVmxjM1FnWm05eUlDUjdLR0Z0YjNWdWRFTmxiblJ6SUM4Z01UQXdLUzUwYjBacGVHVmtLRElwZldBcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjMlZ1WkNodGIzUnZVSFZ5WTJoaGMyVk5jMmNwS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNVRaVzUwS0dCQmMydGxaQ0JGUmxSUVQxTWdaRzhnVFU5VVR5Qm1iM0lnSkhzb1lXMXZkVzUwUTJWdWRITWdMeUF4TURBcExuUnZSbWw0WldRb01pbDlZQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RVZUVac2IzZFRkR0YwWlVOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaWDBwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkpibWwwYVdGMFpWUjRVbVZ6ZFd4MEtIUnlkV1VzSUZ3aVRVOVVUeUJKYm1sMGFXRjBaV1JjSWlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1NXNXBkR2xoZEdWeklHRWdjMlYwZEd4bGJXVnVkQ0IwY21GdWMyRmpkR2x2Ymk1Y2JpQWdJQ0F2THlCQ1pTQnpkV0p6WTNKcFltVmtJSFJ2SUZSNFJteHZkMU4wWVhSbFEyaGhibWRsWkNCbGRtVnVkQ0IwYnlCblpYUWdkWEJrWVhSbGN5QnZiaUIwYUdVZ2NISnZZMlZ6Y3k1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbTl3ZEdsdmJuTmNJajVVYUdVZ1UyVjBkR2x1WnlCMGJ5QnpaWFFnU0dWaFpHVnlJR0Z1WkNCR2IyOTBaWElnWm05eUlIUm9aU0JTWldObGFYQjBQQzl3WVhKaGJUNWNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ1NXNXBkR2xoZEdWVFpYUjBiR1ZVZUNod2IzTlNaV1pKWkN3Z2IzQjBhVzl1Y3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Yms5d2RHbHZibk1vS1NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGtOMWNuSmxiblJUZEdGMGRYTWdQVDBnVTNCcFUzUmhkSFZ6TGxWdWNHRnBjbVZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVsdWFYUnBZWFJsVkhoU1pYTjFiSFFvWm1Gc2MyVXNJRndpVG05MElGQmhhWEpsWkZ3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGtOMWNuSmxiblJHYkc5M0lDRTlJRk53YVVac2IzY3VTV1JzWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCSmJtbDBhV0YwWlZSNFVtVnpkV3gwS0daaGJITmxMQ0JjSWs1dmRDQkpaR3hsWENJcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlITmxkSFJzWlUxelp5QTlJRTlpYW1WamRDNWhjM05wWjI0b2JtVjNJRk5sZEhSc1pWSmxjWFZsYzNRb1VtVnhkV1Z6ZEVsa1NHVnNjR1Z5TGtsa0tGd2ljMlYwZEd4bFhDSXBLU3hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdRMjl1Wm1sbk9pQjBhR2x6TGtOdmJtWnBaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lFOXdkR2x2Ym5NNklHOXdkR2x2Ym5OY2JpQWdJQ0FnSUNBZ2ZTa3VWRzlOWlhOellXZGxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBOUlGTndhVVpzYjNjdVZISmhibk5oWTNScGIyNDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbElEMGdibVYzSUZSeVlXNXpZV04wYVc5dVJteHZkMU4wWVhSbEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0c5elVtVm1TV1FzSUZSeVlXNXpZV04wYVc5dVZIbHdaUzVUWlhSMGJHVXNJREFzSUhObGRIUnNaVTF6Wnl3Z1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnVjJGcGRHbHVaeUJtYjNJZ1JVWlVVRTlUSUdOdmJtNWxZM1JwYjI0Z2RHOGdiV0ZyWlNCaElITmxkSFJzWlNCeVpYRjFaWE4wWUNrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM05sYm1Rb2MyVjBkR3hsVFhObktTbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1VTJWdWRDaGdRWE5yWldRZ1JVWlVVRTlUSUhSdklITmxkSFJzWlM1Z0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxUjRSbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbGZTa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVsdWFYUnBZWFJsVkhoU1pYTjFiSFFvZEhKMVpTd2dYQ0pUWlhSMGJHVWdTVzVwZEdsaGRHVmtYQ0lwT3lBZ0lGeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpYjNCMGFXOXVjMXdpUGxSb1pTQlRaWFIwYVc1bklIUnZJSE5sZENCSVpXRmtaWElnWVc1a0lFWnZiM1JsY2lCbWIzSWdkR2hsSUZKbFkyVnBjSFE4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQkpibWwwYVdGMFpWTmxkSFJzWlcxbGJuUkZibkYxYVhKNUtIQnZjMUpsWmtsa0xDQnZjSFJwYjI1eklEMGdibVYzSUZSeVlXNXpZV04wYVc5dVQzQjBhVzl1Y3lncEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEZOMFlYUjFjeUE5UFNCVGNHbFRkR0YwZFhNdVZXNXdZV2x5WldRcElISmxkSFZ5YmlCdVpYY2dTVzVwZEdsaGRHVlVlRkpsYzNWc2RDaG1ZV3h6WlN3Z1hDSk9iM1FnVUdGcGNtVmtYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SR2JHOTNJQ0U5SUZOd2FVWnNiM2N1U1dSc1pTa2djbVYwZFhKdUlHNWxkeUJKYm1sMGFXRjBaVlI0VW1WemRXeDBLR1poYkhObExDQmNJazV2ZENCSlpHeGxYQ0lwTzF4dUlDQWdJQ0FnSUNCMllYSWdjM1JzUlc1eFRYTm5JRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaHVaWGNnVTJWMGRHeGxiV1Z1ZEVWdWNYVnBjbmxTWlhGMVpYTjBLRkpsY1hWbGMzUkpaRWhsYkhCbGNpNUpaQ2hjSW5OMGJHVnVjVndpS1Nrc1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUVOdmJtWnBaem9nZEdocGN5NURiMjVtYVdjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JQY0hScGIyNXpPaUJ2Y0hScGIyNXpYRzRnSUNBZ0lDQWdJSDBwTGxSdlRXVnpjMkZuWlNncE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dQU0JUY0dsR2JHOTNMbFJ5WVc1ellXTjBhVzl1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaU0E5SUc1bGR5QlVjbUZ1YzJGamRHbHZia1pzYjNkVGRHRjBaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjMUpsWmtsa0xDQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVUyVjBkR3hsYldWdWRFVnVjWFZwY25rc0lEQXNJSE4wYkVWdWNVMXpaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lWMkZwZEdsdVp5Qm1iM0lnUlVaVVVFOVRJR052Ym01bFkzUnBiMjRnZEc4Z2JXRnJaU0JoSUhObGRIUnNaVzFsYm5RZ1pXNXhkV2x5ZVZ3aUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM05sYm1Rb2MzUnNSVzV4VFhObktTbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1VTJWdWRDaGNJa0Z6YTJWa0lFVkdWRkJQVXlCMGJ5QnRZV3RsSUdFZ2MyVjBkR3hsYldWdWRDQmxibkYxYVhKNUxsd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMVI0Um14dmQxTjBZWFJsUTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxmU2twTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFbHVhWFJwWVhSbFZIaFNaWE4xYkhRb2RISjFaU3dnWENKVFpYUjBiR1VnU1c1cGRHbGhkR1ZrWENJcE95QWdJRnh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRWx1YVhScFlYUmxjeUJoSUVkbGRDQk1ZWE4wSUZSeVlXNXpZV04wYVc5dUxpQlZjMlVnZEdocGN5QjNhR1Z1SUhsdmRTQjNZVzUwSUhSdklISmxkSEpwWlhabElIUm9aU0J0YjNOMElISmxZMlZ1ZENCMGNtRnVjMkZqZEdsdmJseHVJQ0FnSUM4dklIUm9ZWFFnZDJGeklIQnliMk5sYzNObFpDQmllU0IwYUdVZ1JXWjBjRzl6TGx4dUlDQWdJQzh2SUVKbElITjFZbk5qY21saVpXUWdkRzhnVkhoR2JHOTNVM1JoZEdWRGFHRnVaMlZrSUdWMlpXNTBJSFJ2SUdkbGRDQjFjR1JoZEdWeklHOXVJSFJvWlNCd2NtOWpaWE56TGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0JKYm1sMGFXRjBaVWRsZEV4aGMzUlVlQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBVM1JoZEhWeklEMDlJRk53YVZOMFlYUjFjeTVWYm5CaGFYSmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJKYm1sMGFXRjBaVlI0VW1WemRXeDBLR1poYkhObExDQmNJazV2ZENCUVlXbHlaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBaFBTQlRjR2xHYkc5M0xrbGtiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnU1c1cGRHbGhkR1ZVZUZKbGMzVnNkQ2htWVd4elpTd2dYQ0pPYjNRZ1NXUnNaVndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCbmJIUlNaWEYxWlhOMFRYTm5JRDBnYm1WM0lFZGxkRXhoYzNSVWNtRnVjMkZqZEdsdmJsSmxjWFZsYzNRb0tTNVViMDFsYzNOaFoyVW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFJteHZkeUE5SUZOd2FVWnNiM2N1VkhKaGJuTmhZM1JwYjI0N1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3YjNOU1pXWkpaQ0E5SUdkc2RGSmxjWFZsYzNSTmMyY3VTV1E3SUM4dklFZGxkRXhoYzNSVWVDQnBjeUJ1YjNRZ2RISjVhVzVuSUhSdklHZGxkQ0JoYm5sMGFHbHVaeUJ6Y0dWamFXWnBZeUJpWVdOckxpQlRieUIzWlNCcWRYTjBJSFZ6WlNCMGFHVWdiV1Z6YzJGblpTQnBaQzVjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVWdQU0J1WlhjZ1ZISmhibk5oWTNScGIyNUdiRzkzVTNSaGRHVW9YRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzTlNaV1pKWkN3Z1ZISmhibk5oWTNScGIyNVVlWEJsTGtkbGRFeGhjM1JVY21GdWMyRmpkR2x2Yml3Z01Dd2daMngwVW1WeGRXVnpkRTF6Wnl3Z1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSWxkaGFYUnBibWNnWm05eUlFVkdWRkJQVXlCamIyNXVaV04wYVc5dUlIUnZJRzFoYTJVZ1lTQkhaWFF0VEdGemRDMVVjbUZ1YzJGamRHbHZiaUJ5WlhGMVpYTjBMbHdpS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1UTJGc2JHbHVaMGRzZENobmJIUlNaWEYxWlhOMFRYTm5Ma2xrS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTmxibVFvWjJ4MFVtVnhkV1Z6ZEUxelp5a3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGxObGJuUW9ZRUZ6YTJWa0lFVkdWRkJQVXlCbWIzSWdiR0Z6ZENCMGNtRnVjMkZqZEdsdmJpNWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnblZIaEdiRzkzVTNSaGRHVkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdWOUtTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnU1c1cGRHbGhkR1ZVZUZKbGMzVnNkQ2gwY25WbExDQmNJa2RNVkNCSmJtbDBhV0YwWldSY0lpazdJQ0FnWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnVkdocGN5QnBjeUIxYzJWbWRXd2dkRzhnY21WamIzWmxjaUJtY205dElIbHZkWElnVUU5VElHTnlZWE5vYVc1bklHbHVJSFJvWlNCdGFXUmtiR1VnYjJZZ1lTQjBjbUZ1YzJGamRHbHZiaTVjYmlBZ0lDQXZMeUJYYUdWdUlIbHZkU0J5WlhOMFlYSjBJSGx2ZFhJZ1VFOVRMQ0JwWmlCNWIzVWdhR0ZrSUhOaGRtVmtJR1Z1YjNWbmFDQnpkR0YwWlN3Z2VXOTFJR05oYmlCallXeHNJSFJvYVhNZ2JXVjBhRzlrSUhSdklISmxZMjkyWlhJZ2RHaGxJR05zYVdWdWRDQnNhV0p5WVhKNUlITjBZWFJsTGx4dUlDQWdJQzh2SUZsdmRTQnVaV1ZrSUhSdklHaGhkbVVnZEdobElIQnZjMUpsWmtsa0lIUm9ZWFFnZVc5MUlIQmhjM05sWkNCcGJpQjNhWFJvSUhSb1pTQnZjbWxuYVc1aGJDQjBjbUZ1YzJGamRHbHZiaXdnWVc1a0lIUm9aU0IwY21GdWMyRmpkR2x2YmlCMGVYQmxMbHh1SUNBZ0lDOHZJRlJvYVhNZ2JXVjBhRzlrSUhkcGJHd2djbVYwZFhKdUlHbHRiV1ZrYVdGMFpXeDVJSGRvWlhSb1pYSWdjbVZqYjNabGNua2dhR0Z6SUhOMFlYSjBaV1FnYjNJZ2JtOTBMbHh1SUNBZ0lDOHZJRWxtSUhKbFkyOTJaWEo1SUdoaGN5QnpkR0Z5ZEdWa0xDQjViM1VnYm1WbFpDQjBieUJpY21sdVp5QjFjQ0IwYUdVZ2RISmhibk5oWTNScGIyNGdiVzlrWVd3Z2RHOGdlVzkxY2lCMWMyVnlJR0VnWW1VZ2JHbHpkR1Z1YVc1bklIUnZJRlI0Um14dmQxTjBZWFJsUTJoaGJtZGxaQzVjYmlBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdMeThnUEhCaGNtRnRJRzVoYldVOVhDSndiM05TWldaSlpGd2lQbFJvWlNCcGN5QjBhR0YwSUhsdmRTQm9ZV1FnWVhOemFXZHVaV1FnZEc4Z2RHaGxJSFJ5WVc1ellXTjBhVzl1SUhSb1lYUWdlVzkxSUdGeVpTQjBjbmxwYm1jZ2RHOGdjbVZqYjNabGNpNDhMM0JoY21GdFBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpZEhoVWVYQmxYQ0krVkdobElIUnlZVzV6WVdOMGFXOXVJSFI1Y0dVdVBDOXdZWEpoYlQ1Y2JpQWdJQ0F2THlBOGNtVjBkWEp1Y3o0OEwzSmxkSFZ5Ym5NK1hHNGdJQ0FnU1c1cGRHbGhkR1ZTWldOdmRtVnllU2h3YjNOU1pXWkpaQ3dnZEhoVWVYQmxLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRGTjBZWFIxY3lBOVBTQlRjR2xUZEdGMGRYTXVWVzV3WVdseVpXUXBJSEpsZEhWeWJpQnVaWGNnU1c1cGRHbGhkR1ZVZUZKbGMzVnNkQ2htWVd4elpTd2dYQ0pPYjNRZ1VHRnBjbVZrWENJcE8xeHVJQ0FnSUZ4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwUm14dmR5QWhQU0JUY0dsR2JHOTNMa2xrYkdVcElISmxkSFZ5YmlCdVpYY2dTVzVwZEdsaGRHVlVlRkpsYzNWc2RDaG1ZV3h6WlN3Z1hDSk9iM1FnU1dSc1pWd2lLVHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRFWnNiM2NnUFNCVGNHbEdiRzkzTGxSeVlXNXpZV04wYVc5dU8xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdkbUZ5SUdkc2RGSmxjWFZsYzNSTmMyY2dQU0J1WlhjZ1IyVjBUR0Z6ZEZSeVlXNXpZV04wYVc5dVVtVnhkV1Z6ZENncExsUnZUV1Z6YzJGblpTZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTQTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrWnNiM2RUZEdGMFpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmMxSmxaa2xrTENCMGVGUjVjR1VzSURBc0lHZHNkRkpsY1hWbGMzUk5jMmNzSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0pYWVdsMGFXNW5JR1p2Y2lCRlJsUlFUMU1nWTI5dWJtVmpkR2x2YmlCMGJ5QmhkSFJsYlhCMElISmxZMjkyWlhKNUxsd2lLVHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5elpXNWtLR2RzZEZKbGNYVmxjM1JOYzJjcEtWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVUWlc1MEtHQkJjMnRsWkNCRlJsUlFUMU1nZEc4Z2NtVmpiM1psY2lCemRHRjBaUzVnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25WSGhHYkc5M1UzUmhkR1ZEYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVjlLU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1NXNXBkR2xoZEdWVWVGSmxjM1ZzZENoMGNuVmxMQ0JjSWxKbFkyOTJaWEo1SUVsdWFYUnBZWFJsWkZ3aUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QkhiSFJOWVhSamFDQmhkSFJsYlhCMGN5QjBieUJqYjI1amJIVmtaU0IzYUdWMGFHVnlJR0VnWjJ4MFVtVnpjRzl1YzJVZ2JXRjBZMmhsY3lCaGJpQmxlSEJsWTNSbFpDQjBjbUZ1YzJGamRHbHZiaUJoYm1RZ2NtVjBkWEp1YzF4dUlDQWdJQzh2SUhSb1pTQnZkWFJqYjIxbExpQmNiaUFnSUNBdkx5QkpaaUJUZFdOalpYTnpMMFpoYVd4bFpDQnBjeUJ5WlhSMWNtNWxaQ3dnYVhRZ2JXVmhibk1nZEdoaGRDQjBhR1VnWjNSc1VtVnpjRzl1YzJVZ1pHbGtJRzFoZEdOb0xDQmhibVFnZEdoaGRDQjBjbUZ1YzJGamRHbHZiaUIzWVhNZ2MzVmpZMlZ6Wm5Wc0wyWmhhV3hsWkM1Y2JpQWdJQ0F2THlCSlppQlZibXR1YjNkdUlHbHpJSEpsZEhWeWJtVmtMQ0JwZENCdFpXRnVjeUIwYUdGMElIUm9aU0JuYkhSU1pYTndiMjV6WlNCa2IyVnpJRzV2ZENCdFlYUmphQ0IwYUdVZ1pYaHdaV04wWldRZ2RISmhibk5oWTNScGIyNHVJRnh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltZHNkRkpsYzNCdmJuTmxYQ0krVkdobElFZGxkRXhoYzNSVWNtRnVjMkZqZEdsdmJsSmxjM0J2Ym5ObElHMWxjM05oWjJVZ2RHOGdZMmhsWTJzOEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2ljRzl6VW1WbVNXUmNJajVVYUdVZ1VtVm1aWEpsYm1ObElFbGtJSFJvWVhRZ2VXOTFJSEJoYzNObFpDQnBiaUIzYVhSb0lIUm9aU0J2Y21sbmFXNWhiQ0J5WlhGMVpYTjBMand2Y0dGeVlXMCtYRzRnSUNBZ0x5OGdQSEJoY21GdElHNWhiV1U5WENKbGVIQmxZM1JsWkVGdGIzVnVkRndpUGxSb1pTQjBiM1JoYkNCaGJXOTFiblFnYVc0Z2RHaGxJRzl5YVdkcGJtRnNJSEpsY1hWbGMzUThMM0JoY21GdFBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpY21WeGRXVnpkRlJwYldWY0lqNVVhR1VnY21WeGRXVnpkQ0IwYVcxbFBDOXdZWEpoYlQ1Y2JpQWdJQ0F2THlBOGNtVjBkWEp1Y3o0OEwzSmxkSFZ5Ym5NK1hHNGdJQ0FnUjJ4MFRXRjBZMmdvWjJ4MFVtVnpjRzl1YzJVc0lIQnZjMUpsWmtsa0xDQmxlSEJsWTNSbFpFRnRiM1Z1ZEN3Z2NtVnhkV1Z6ZEZScGJXVXNJQzR1TG1SbGNISmxZMkYwWldSQmNtZHpLU0JjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJQzh2SUU5aWMyOXNaWFJsSUcxbGRHaHZaQ0JqWVd4c0lHTm9aV05yWEc0Z0lDQWdJQ0FnSUM4dklFOXNaQ0JwYm5SbGNtWmhZMlU2SUVkc2RFMWhkR05vS0VkbGRFeGhjM1JVY21GdWMyRmpkR2x2YmxKbGMzQnZibk5sSUdkc2RGSmxjM0J2Ym5ObExDQlVjbUZ1YzJGamRHbHZibFI1Y0dVZ1pYaHdaV04wWldSVWVYQmxMQ0JwYm5RZ1pYaHdaV04wWldSQmJXOTFiblFzSUVSaGRHVlVhVzFsSUhKbGNYVmxjM1JVYVcxbExDQnpkSEpwYm1jZ2NHOXpVbVZtU1dRcFhHNGdJQ0FnSUNBZ0lHbG1LR1JsY0hKbFkyRjBaV1JCY21kekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZb1pHVndjbVZqWVhSbFpFRnlaM011YkdWdVozUm9JRDA5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1hDSlBZbk52YkdWMFpTQnRaWFJvYjJRZ1kyRnNiQ0JrWlhSbFkzUmxaRG9nVlhObElFZHNkRTFoZEdOb0tHZHNkRkpsYzNCdmJuTmxMQ0J3YjNOU1pXWkpaQ2xjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVSMngwVFdGMFkyZ29aMngwVW1WemNHOXVjMlVzSUdSbGNISmxZMkYwWldSQmNtZHpXekJkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lUMkp6YjJ4bGRHVWdiV1YwYUc5a0lHTmhiR3dnZDJsMGFDQjFibXR1YjNkdUlHRnlaM002SUZWelpTQkhiSFJOWVhSamFDaEhaWFJNWVhOMFZISmhibk5oWTNScGIyNVNaWE53YjI1elpTQm5iSFJTWlhOd2IyNXpaU3dnYzNSeWFXNW5JSEJ2YzFKbFprbGtLVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0dCSFRGUWdRMGhGUTBzNklGQnZjMUpsWmtsa09pQWtlM0J2YzFKbFprbGtmUzArSkh0bmJIUlNaWE53YjI1elpTNUhaWFJRYjNOU1pXWkpaQ2dwZldBcE8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCbmJIUkNZVzVyUkdGMFpWUnBiV1ZUZEhJZ1BTQm5iSFJTWlhOd2IyNXpaUzVIWlhSQ1lXNXJSR0YwWlZScGJXVlRkSEpwYm1jb0tUc2dMeThnWkdSTlRYbDVlWGxJU0cxdGMzTmNiaUFnSUNBZ0lDQWdkbUZ5SUdkc2RFSmhibXRFWVhSbFZHbHRaU0E5SUc1bGR5QkVZWFJsS0dBa2UyZHNkRUpoYm10RVlYUmxWR2x0WlZOMGNpNXpkV0p6ZEhJb05DdzBLWDB0Skh0bmJIUkNZVzVyUkdGMFpWUnBiV1ZUZEhJdWMzVmljM1J5S0RJc01pbDlMU1I3WjJ4MFFtRnVhMFJoZEdWVWFXMWxVM1J5TG5OMVluTjBjaWd3TERJcGZTQWtlMmRzZEVKaGJtdEVZWFJsVkdsdFpWTjBjaTV6ZFdKemRISW9PQ3d5S1gwNkpIdG5iSFJDWVc1clJHRjBaVlJwYldWVGRISXVjM1ZpYzNSeUtERXdMRElwZlRva2UyZHNkRUpoYm10RVlYUmxWR2x0WlZOMGNpNXpkV0p6ZEhJb01USXNNaWw5WUNrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqYjIxd1lYSmxJRDBnY0dGeWMyVkpiblFvY21WeGRXVnpkRlJwYldVcElDMGdaMngwUW1GdWEwUmhkR1ZVYVcxbExtZGxkRlJwYldVb0tUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYQnZjMUpsWmtsa0lEMDlJR2RzZEZKbGMzQnZibk5sTGtkbGRGQnZjMUpsWmtsa0tDa3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCVGRXTmpaWE56VTNSaGRHVXVWVzVyYm05M2JqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaG5iSFJTWlhOd2IyNXpaUzVIWlhSVWVGUjVjR1VvS1M1MGIxVndjR1Z5UTJGelpTZ3BJRDA5SUZ3aVVGVlNRMGhCVTBWY0lpQW1KaUJuYkhSU1pYTndiMjV6WlM1SFpYUkNZVzVyVG05dVEyRnphRUZ0YjNWdWRDZ3BJQ0U5SUdWNGNHVmpkR1ZrUVcxdmRXNTBJQ1ltSUdOdmJYQmhjbVVnUGlBd0tWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnVFdWemMyRm5aUzVUZFdOalpYTnpVM1JoZEdVdVZXNXJibTkzYmp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQm5iSFJTWlhOd2IyNXpaUzVIWlhSVGRXTmpaWE56VTNSaGRHVW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnVUhKcGJuUlNaV05sYVhCMEtHdGxlU3dnY0dGNWJHOWhaQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTmxibVFvYm1WM0lGQnlhVzUwYVc1blVtVnhkV1Z6ZENoclpYa3NJSEJoZVd4dllXUXBMblJ2VFdWemMyRm5aU2dwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSVVpYSnRhVzVoYkZOMFlYUjFjeWdwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpaVzVrS0c1bGR5QlVaWEp0YVc1aGJGTjBZWFIxYzFKbGNYVmxjM1FvS1M1VWIwMWxjM05oWjJVb0tTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdaVzVrY21WbmFXOXVYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDOHZJSEpsWjJsdmJpQkpiblJsY201aGJITWdabTl5SUZCaGFYSnBibWNnUm14dmQxeHVYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdTR0Z1Wkd4cGJtY2dkR2hsSURKdVpDQnBiblJsY21GamRHbHZiaUJ2WmlCMGFHVWdjR0ZwY21sdVp5QndjbTlqWlhOekxDQnBMbVV1SUdGdUlHbHVZMjl0YVc1bklFdGxlVkpsY1hWbGMzUXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWJWd2lQbWx1WTI5dGFXNW5JRzFsYzNOaFoyVThMM0JoY21GdFBseHVJQ0FnSUY5b1lXNWtiR1ZMWlhsU1pYRjFaWE4wS0cwcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlFZV2x5YVc1blJteHZkMU4wWVhSbExrMWxjM05oWjJVZ1BTQmNJazVsWjI5MGFXRjBhVzVuSUZCaGFYSnBibWN1TGk1Y0lqdGNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFCaGFYSnBibWRHYkc5M1UzUmhkR1ZEYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEdocGN5NURkWEp5Wlc1MFVHRnBjbWx1WjBac2IzZFRkR0YwWlgwcEtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCVmMyVWdkR2hsSUdobGJIQmxjaTRnU1hRZ2RHRnJaWE1nZEdobElHbHVZMjl0YVc1bklISmxjWFZsYzNRc0lHRnVaQ0JuWlc1bGNtRjBaWE1nZEdobElITmxZM0psZEhNZ1lXNWtJSFJvWlNCeVpYTndiMjV6WlM1Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJvSUNBZ0lDQWdQU0J1WlhjZ1VHRnBjbWx1WjBobGJIQmxjaWdwTzF4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElDQTlJSEJvTGtkbGJtVnlZWFJsVTJWamNtVjBjMEZ1WkV0bGVWSmxjM0J2Ym5ObEtHNWxkeUJMWlhsU1pYRjFaWE4wS0cwcEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMyVmpjbVYwY3lBOUlISmxjM1ZzZEM1VFpXTnlaWFJ6T3lBdkx5QjNaU0J1YjNjZ2FHRjJaU0J6WldOeVpYUnpMQ0JoYkhSb2IzVm5hQ0J3WVdseWFXNW5JR2x6SUc1dmRDQm1kV3hzZVNCbWFXNXBjMmhsWkNCNVpYUXVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTndhVTFsYzNOaFoyVlRkR0Z0Y0M1VFpXTnlaWFJ6SUQwZ2RHaHBjeTVmYzJWamNtVjBjenNnTHk4Z2RYQmtZWFJwYm1jZ2IzVnlJSE4wWVcxd0lIZHBkR2dnZEdobElITmxZM0psZEhNZ2MyOGdZMkZ1SUdWdVkzSjVjSFFnYldWemMyRm5aWE1nYkdGMFpYSXVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTmxibVFvY21WemRXeDBMa3RsZVZKbGMzQnZibk5sTGxSdlRXVnpjMkZuWlNncEtUc2dMeThnYzJWdVpDQjBhR1VnYTJWNVgzSmxjM0J2Ym5ObExDQnBMbVV1SUdsdWRHVnlZV04wYVc5dUlETWdiMllnY0dGcGNtbHVaeTVjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJJWVc1a2JHbHVaeUIwYUdVZ05IUm9JR2x1ZEdWeVlXTjBhVzl1SUc5bUlIUm9aU0J3WVdseWFXNW5JSEJ5YjJObGMzTWdhUzVsTGlCaGJpQnBibU52YldsdVp5QkxaWGxEYUdWamF5NWNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0x5OGdQSEJoY21GdElHNWhiV1U5WENKdFhDSStQQzl3WVhKaGJUNWNiaUFnSUNCZmFHRnVaR3hsUzJWNVEyaGxZMnNvYlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnJaWGxEYUdWamF5QTlJRzVsZHlCTFpYbERhR1ZqYXlodEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaUzVEYjI1bWFYSnRZWFJwYjI1RGIyUmxJRDBnYTJWNVEyaGxZMnN1UTI5dVptbHliV0YwYVc5dVEyOWtaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFVHRnBjbWx1WjBac2IzZFRkR0YwWlM1QmQyRnBkR2x1WjBOb1pXTnJSbkp2YlVWbWRIQnZjeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEZCaGFYSnBibWRHYkc5M1UzUmhkR1V1UVhkaGFYUnBibWREYUdWamEwWnliMjFRYjNNZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlFZV2x5YVc1blJteHZkMU4wWVhSbExrMWxjM05oWjJVZ1BTQmNJa052Ym1acGNtMGdkR2hoZENCMGFHVWdabTlzYkc5M2FXNW5JRU52WkdVZ2FYTWdjMmh2ZDJsdVp5QnZiaUIwYUdVZ1ZHVnliV2x1WVd4Y0lqdGNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFCaGFYSnBibWRHYkc5M1UzUmhkR1ZEYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEdocGN5NURkWEp5Wlc1MFVHRnBjbWx1WjBac2IzZFRkR0YwWlgwcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QklZVzVrYkdsdVp5QjBhR1VnTlhSb0lHRnVaQ0JtYVc1aGJDQnBiblJsY21GamRHbHZiaUJ2WmlCMGFHVWdjR0ZwY21sdVp5QndjbTlqWlhOekxDQnBMbVV1SUdGdUlHbHVZMjl0YVc1bklGQmhhWEpTWlhOd2IyNXpaVnh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltMWNJajQ4TDNCaGNtRnRQbHh1SUNBZ0lGOW9ZVzVrYkdWUVlXbHlVbVZ6Y0c5dWMyVW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCd1lXbHlVbVZ6Y0NBOUlHNWxkeUJRWVdseVVtVnpjRzl1YzJVb2JTazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFVHRnBjbWx1WjBac2IzZFRkR0YwWlM1QmQyRnBkR2x1WjBOb1pXTnJSbkp2YlVWbWRIQnZjeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb2NHRnBjbEpsYzNBdVUzVmpZMlZ6Y3lsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXVRWGRoYVhScGJtZERhR1ZqYTBaeWIyMVFiM01wWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVTNScGJHd2dWMkZwZEdsdVp5Qm1iM0lnVlhObGNpQjBieUJ6WVhrZ2VXVnpJRzl1SUZCUFUxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0Z3aVIyOTBJRkJoYVhJZ1EyOXVabWx5YlNCbWNtOXRJRVZtZEhCdmN5d2dZblYwSUhOMGFXeHNJSGRoYVhScGJtY2dabTl5SUhWelpTQjBieUJqYjI1bWFYSnRJR1p5YjIwZ1VFOVRMbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlFZV2x5YVc1blJteHZkMU4wWVhSbExrMWxjM05oWjJVZ1BTQmNJa052Ym1acGNtMGdkR2hoZENCMGFHVWdabTlzYkc5M2FXNW5JRU52WkdVZ2FYTWdkMmhoZENCMGFHVWdSVVpVVUU5VElITm9iM2RsWkZ3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RRWVdseWFXNW5SbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZCaGFYSnBibWRHYkc5M1UzUmhkR1Y5S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1hDSkhiM1FnVUdGcGNpQkRiMjVtYVhKdElHWnliMjBnUldaMGNHOXpMQ0JoYm1RZ1lXeHlaV0ZrZVNCb1lXUWdZMjl1Wm1seWJTQm1jbTl0SUZCUFV5NGdUbTkzSUdwMWMzUWdkMkZwZEdsdVp5Qm1iM0lnWm1seWMzUWdjRzl1Wnk1Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmIyNVFZV2x5YVc1blUzVmpZMlZ6Y3lncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnU1NCdVpXVmtJSFJ2SUhCcGJtY3ZiRzluYVc0Z1pYWmxiaUJwWmlCMGFHVWdjRzl6SUhWelpYSWdhR0Z6SUc1dmRDQnpZV2xrSUhsbGN5QjVaWFFzSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnWW1WallYVnpaU0J2ZEdobGNuZHBjMlVnZDJsMGFHbHVJRFVnYzJWamIyNWtjeUJqYjI1dVpXTjBhVzl1WnlCM2FXeHNJR0psSUdSeWIzQndaV1FnWW5rZ1pXWjBjRzl6TGx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMzUmhjblJRWlhKcGIyUnBZMUJwYm1jb0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjl1VUdGcGNtbHVaMFpoYVd4bFpDZ3BPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMmhoYm1Sc1pVUnliM0JMWlhselFXUjJhV05sS0cwcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhjSWtWbWRIQnZjeUIzWVhNZ1ZXNXdZV2x5WldRdUlFa2djMmhoYkd3Z2RXNXdZV2x5SUdaeWIyMGdiWGtnWlc1a0lHRnpJSGRsYkd3dVhDSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWtiMVZ1Y0dGcGNpZ3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGOXZibEJoYVhKcGJtZFRkV05qWlhOektDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXVVM1ZqWTJWemMyWjFiQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEZCaGFYSnBibWRHYkc5M1UzUmhkR1V1Um1sdWFYTm9aV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SUVlXbHlhVzVuUm14dmQxTjBZWFJsTGsxbGMzTmhaMlVnUFNCY0lsQmhhWEpwYm1jZ1UzVmpZMlZ6YzJaMWJDRmNJanRjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFUzUmhkSFZ6SUQwZ1UzQnBVM1JoZEhWekxsQmhhWEpsWkVOdmJtNWxZM1JsWkR0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMU5sWTNKbGRITkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1ZmMyVmpjbVYwYzMwcEtUdGNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFCaGFYSnBibWRHYkc5M1UzUmhkR1ZEYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEdocGN5NURkWEp5Wlc1MFVHRnBjbWx1WjBac2IzZFRkR0YwWlgwcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCZmIyNVFZV2x5YVc1blJtRnBiR1ZrS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM05sWTNKbGRITWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emNHbE5aWE56WVdkbFUzUmhiWEF1VTJWamNtVjBjeUE5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTnZibTR1UkdselkyOXVibVZqZENncE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEZOMFlYUjFjeUE5SUZOd2FWTjBZWFIxY3k1VmJuQmhhWEpsWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBVR0ZwY21sdVowWnNiM2RUZEdGMFpTNU5aWE56WVdkbElEMGdYQ0pRWVdseWFXNW5JRVpoYVd4bFpGd2lPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SUVlXbHlhVzVuUm14dmQxTjBZWFJsTGtacGJtbHphR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFVHRnBjbWx1WjBac2IzZFRkR0YwWlM1VGRXTmpaWE56Wm5Wc0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXVRWGRoYVhScGJtZERhR1ZqYTBaeWIyMVFiM01nUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxQmhhWEpwYm1kR2JHOTNVM1JoZEdWRGFHRnVaMlZrSnl3Z2UyUmxkR0ZwYkRvZ2RHaHBjeTVEZFhKeVpXNTBVR0ZwY21sdVowWnNiM2RUZEdGMFpYMHBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZaRzlWYm5CaGFYSW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVTNSaGRIVnpJRDBnVTNCcFUzUmhkSFZ6TGxWdWNHRnBjbVZrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1dUxrUnBjMk52Ym01bFkzUW9LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjMlZqY21WMGN5QTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOd2FVMWxjM05oWjJWVGRHRnRjQzVUWldOeVpYUnpJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFObFkzSmxkSE5EYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEdocGN5NWZjMlZqY21WMGMzMHBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJUYjIxbGRHbHRaWE1nZEdobElITmxjblpsY2lCaGMydHpJSFZ6SUhSdklISnZiR3dnYjNWeUlITmxZM0psZEhNdVhHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpYlZ3aVBqd3ZjR0Z5WVcwK1hHNGdJQ0FnWDJoaGJtUnNaVXRsZVZKdmJHeHBibWRTWlhGMVpYTjBLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0F2THlCM1pTQmpZV3hqZFd4aGRHVWdkR2hsSUc1bGR5QnZibVZ6TGk0dVhHNGdJQ0FnSUNBZ0lIWmhjaUJyY2xKbGN5QTlJRXRsZVZKdmJHeHBibWRJWld4d1pYSXVVR1Z5Wm05eWJVdGxlVkp2Ykd4cGJtY29iU3dnZEdocGN5NWZjMlZqY21WMGN5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTmxZM0psZEhNZ1BTQnJjbEpsY3k1T1pYZFRaV055WlhSek95QXZMeUJoYm1RZ2RYQmtZWFJsSUc5MWNpQnpaV055WlhSeklIZHBkR2dnZEdobGJWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emNHbE5aWE56WVdkbFUzUmhiWEF1VTJWamNtVjBjeUE5SUhSb2FYTXVYM05sWTNKbGRITTdJQzh2SUdGdVpDQnZkWElnYzNSaGJYQmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMyVnVaQ2hyY2xKbGN5NUxaWGxTYjJ4c2FXNW5RMjl1Wm1seWJXRjBhVzl1S1RzZ0x5OGdZVzVrSUhkbElIUmxiR3dnZEdobElITmxjblpsY2lCMGFHRjBJR0ZzYkNCcGN5QjNaV3hzTGx4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25VMlZqY21WMGMwTm9ZVzVuWldRbkxDQjdaR1YwWVdsc09pQjBhR2x6TGw5elpXTnlaWFJ6ZlNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklGUm9aU0JRYVc1UVlXUWdjMlZ5ZG1WeUlIZHBiR3dnYzJWdVpDQjFjeUIwYUdseklHMWxjM05oWjJVZ2QyaGxiaUJoSUdOMWMzUnZiV1Z5SUhOcFoyNWhkSFZ5WlNCcGN5QnlaWEZwY21Wa0xseHVJQ0FnSUM4dklGZGxJRzVsWldRZ2RHOGdZWE5ySUhSb1pTQmpkWE4wYjIxbGNpQjBieUJ6YVdkdUlIUm9aU0JwYm1OdmJXbHVaeUJ5WldObGFYQjBMbHh1SUNBZ0lDOHZJRUZ1WkNCMGFHVnVJSFJsYkd3Z2RHaGxJSEJwYm5CaFpDQjNhR1YwYUdWeUlIUm9aU0J6YVdkdVlYUjFjbVVnYVhNZ2Iyc2diM0lnYm05MExseHVJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW0xY0lqNDhMM0JoY21GdFBseHVJQ0FnSUY5b1lXNWtiR1ZUYVdkdVlYUjFjbVZTWlhGMWFYSmxaQ2h0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbHVZMjl0YVc1blVHOXpVbVZtU1dRZ1BTQnRMa1JoZEdFdWNHOXpYM0psWmw5cFpEdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRFWnNiM2NnSVQwZ1UzQnBSbXh2ZHk1VWNtRnVjMkZqZEdsdmJpQjhmQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNUdhVzVwYzJobFpDQjhmQ0FoZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVRzl6VW1WbVNXUWdQVDBnYVc1amIyMXBibWRRYjNOU1pXWkpaQ2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1lGSmxZMlZwZG1Wa0lGTnBaMjVoZEhWeVpTQlNaWEYxYVhKbFpDQmlkWFFnU1NCM1lYTWdibTkwSUhkaGFYUnBibWNnWm05eUlHOXVaUzRnU1c1amIyMXBibWNnVUc5eklGSmxaaUJKUkRvZ0pIdHBibU52YldsdVoxQnZjMUpsWmtsa2ZXQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGxOcFoyNWhkSFZ5WlZKbGNYVnBjbVZrS0c1bGR5QlRhV2R1WVhSMWNtVlNaWEYxYVhKbFpDaHRLU3dnWENKQmMyc2dRM1Z6ZEc5dFpYSWdkRzhnVTJsbmJpQjBhR1VnVW1WalpXbHdkRndpS1R0Y2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxUjRSbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbGZTa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRlJvWlNCUWFXNVFZV1FnYzJWeWRtVnlJSGRwYkd3Z2MyVnVaQ0IxY3lCMGFHbHpJRzFsYzNOaFoyVWdkMmhsYmlCaGJpQmhkWFJvSUdOdlpHVWdhWE1nY21WeGRXbHlaV1F1WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2liVndpUGp3dmNHRnlZVzArWEc0Z0lDQWdYMmhoYm1Sc1pVRjFkR2hEYjJSbFVtVnhkV2x5WldRb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwYm1OdmJXbHVaMUJ2YzFKbFprbGtJRDBnYlM1RVlYUmhMbkJ2YzE5eVpXWmZhV1E3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGtOMWNuSmxiblJHYkc5M0lDRTlJRk53YVVac2IzY3VWSEpoYm5OaFkzUnBiMjRnZkh3Z2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1Um1sdWFYTm9aV1FnZkh3Z0lYUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGxCdmMxSmxaa2xrSUQwOUlHbHVZMjl0YVc1blVHOXpVbVZtU1dRcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUY5c2IyY3VhVzVtYnloZ1VtVmpaV2wyWldRZ1FYVjBhQ0JEYjJSbElGSmxjWFZwY21Wa0lHSjFkQ0JKSUhkaGN5QnViM1FnZDJGcGRHbHVaeUJtYjNJZ2IyNWxMaUJKYm1OdmJXbHVaeUJRYjNNZ1VtVm1JRWxFT2lBa2UybHVZMjl0YVc1blVHOXpVbVZtU1dSOVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2RtRnlJSEJvYjI1bFJtOXlRWFYwYUZKbGNYVnBjbVZrSUQwZ2JtVjNJRkJvYjI1bFJtOXlRWFYwYUZKbGNYVnBjbVZrS0cwcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYlhObklEMGdZRUYxZEdnZ1EyOWtaU0JTWlhGMWFYSmxaQzRnUTJGc2JDQWtlM0JvYjI1bFJtOXlRWFYwYUZKbGNYVnBjbVZrTGtkbGRGQm9iMjVsVG5WdFltVnlLQ2w5SUdGdVpDQnhkVzkwWlNCdFpYSmphR0Z1ZENCcFpDQWtlM0JvYjI1bFJtOXlRWFYwYUZKbGNYVnBjbVZrTGtkbGRFMWxjbU5vWVc1MFNXUW9LWDFnTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVRYUc5dVpVWnZja0YxZEdoU1pYRjFhWEpsWkNod2FHOXVaVVp2Y2tGMWRHaFNaWEYxYVhKbFpDd2diWE5uS1R0Y2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxUjRSbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbGZTa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRlJvWlNCUWFXNVFZV1FnYzJWeWRtVnlJSGRwYkd3Z2NtVndiSGtnZEc4Z2IzVnlJRkIxY21Ob1lYTmxVbVZ4ZFdWemRDQjNhWFJvSUdFZ1VIVnlZMmhoYzJWU1pYTndiMjV6WlM1Y2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1BIQmhjbUZ0SUc1aGJXVTlYQ0p0WENJK1BDOXdZWEpoYlQ1Y2JpQWdJQ0JmYUdGdVpHeGxVSFZ5WTJoaGMyVlNaWE53YjI1elpTaHRLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVkyOXRhVzVuVUc5elVtVm1TV1FnUFNCdExrUmhkR0V1Y0c5elgzSmxabDlwWkR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dJVDBnVTNCcFJteHZkeTVVY21GdWMyRmpkR2x2YmlCOGZDQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1R2FXNXBjMmhsWkNCOGZDQWhkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVVHOXpVbVZtU1dRZ1BUMGdhVzVqYjIxcGJtZFFiM05TWldaSlpDbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWUZKbFkyVnBkbVZrSUZCMWNtTm9ZWE5sSUhKbGMzQnZibk5sSUdKMWRDQkpJSGRoY3lCdWIzUWdkMkZwZEdsdVp5Qm1iM0lnYjI1bExpQkpibU52YldsdVp5QlFiM01nVW1WbUlFbEVPaUFrZTJsdVkyOXRhVzVuVUc5elVtVm1TV1I5WENKZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBdkx5QlVTQzB4UVN3Z1ZFZ3RNa0ZjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxMa052YlhCc1pYUmxaQ2h0TGtkbGRGTjFZMk5sYzNOVGRHRjBaU2dwTENCdExDQmNJbEIxY21Ob1lYTmxJRlJ5WVc1ellXTjBhVzl1SUVWdVpHVmtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdWRWd0TmtFc0lGUklMVFpGWEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25WSGhHYkc5M1UzUmhkR1ZEYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVjlLU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnVkdobElGQnBibEJoWkNCelpYSjJaWElnZDJsc2JDQnlaWEJzZVNCMGJ5QnZkWElnUTJGemFHOTFkRTl1YkhsU1pYRjFaWE4wSUhkcGRHZ2dZU0JEWVhOb2IzVjBUMjVzZVZKbGMzQnZibk5sTGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbTFjSWo0OEwzQmhjbUZ0UGx4dUlDQWdJRjlvWVc1a2JHVkRZWE5vYjNWMFQyNXNlVkpsYzNCdmJuTmxLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FXNWpiMjFwYm1kUWIzTlNaV1pKWkNBOUlHMHVSR0YwWVM1d2IzTmZjbVZtWDJsa08xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFJteHZkeUFoUFNCVGNHbEdiRzkzTGxSeVlXNXpZV04wYVc5dUlIeDhJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbExrWnBibWx6YUdWa0lIeDhJQ0YwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNVFiM05TWldaSlpDQTlQU0JwYm1OdmJXbHVaMUJ2YzFKbFprbGtLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloZ1VtVmpaV2wyWldRZ1EyRnphRzkxZENCU1pYTndiMjV6WlNCaWRYUWdTU0IzWVhNZ2JtOTBJSGRoYVhScGJtY2dabTl5SUc5dVpTNGdTVzVqYjIxcGJtY2dVRzl6SUZKbFppQkpSRG9nSkh0cGJtTnZiV2x1WjFCdmMxSmxaa2xrZldBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklGUklMVEZCTENCVVNDMHlRVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVRMjl0Y0d4bGRHVmtLRzB1UjJWMFUzVmpZMlZ6YzFOMFlYUmxLQ2tzSUcwc0lGd2lRMkZ6YUc5MWRDQlVjbUZ1YzJGamRHbHZiaUJGYm1SbFpDNWNJaWs3WEc0Z0lDQWdJQ0FnSUM4dklGUklMVFpCTENCVVNDMDJSVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxUjRSbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbGZTa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRlJvWlNCUWFXNVFZV1FnYzJWeWRtVnlJSGRwYkd3Z2NtVndiSGtnZEc4Z2IzVnlJRTF2ZEc5UWRYSmphR0Z6WlZKbGNYVmxjM1FnZDJsMGFDQmhJRTF2ZEc5UWRYSmphR0Z6WlZKbGMzQnZibk5sTGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbTFjSWo0OEwzQmhjbUZ0UGx4dUlDQWdJRjlvWVc1a2JHVk5iM1J2VUhWeVkyaGhjMlZTWlhOd2IyNXpaU2h0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHbHVZMjl0YVc1blVHOXpVbVZtU1dRZ1BTQnRMa1JoZEdFdWNHOXpYM0psWmw5cFpEdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRFWnNiM2NnSVQwZ1UzQnBSbXh2ZHk1VWNtRnVjMkZqZEdsdmJpQjhmQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNUdhVzVwYzJobFpDQjhmQ0FoZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVRzl6VW1WbVNXUWdQVDBnYVc1amIyMXBibWRRYjNOU1pXWkpaQ2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1lGSmxZMlZwZG1Wa0lFMXZkRzhnVW1WemNHOXVjMlVnWW5WMElFa2dkMkZ6SUc1dmRDQjNZV2wwYVc1bklHWnZjaUJ2Ym1VdUlFbHVZMjl0YVc1bklGQnZjeUJTWldZZ1NVUTZJQ1I3YVc1amIyMXBibWRRYjNOU1pXWkpaSDFnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCVVNDMHhRU3dnVkVndE1rRmNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbExrTnZiWEJzWlhSbFpDaHRMa2RsZEZOMVkyTmxjM05UZEdGMFpTZ3BMQ0J0TENCY0lrMXZkRzhnVkhKaGJuTmhZM1JwYjI0Z1JXNWtaV1F1WENJcE8xeHVJQ0FnSUNBZ0lDQXZMeUJVU0MwMlFTd2dWRWd0TmtWY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RVZUVac2IzZFRkR0YwWlVOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaWDBwS1R0Y2JpQWdJQ0I5SUNBZ1hHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlVhR1VnVUdsdVVHRmtJSE5sY25abGNpQjNhV3hzSUhKbGNHeDVJSFJ2SUc5MWNpQlNaV1oxYm1SU1pYRjFaWE4wSUhkcGRHZ2dZU0JTWldaMWJtUlNaWE53YjI1elpTNWNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0x5OGdQSEJoY21GdElHNWhiV1U5WENKdFhDSStQQzl3WVhKaGJUNWNiaUFnSUNCZmFHRnVaR3hsVW1WbWRXNWtVbVZ6Y0c5dWMyVW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcGJtTnZiV2x1WjFCdmMxSmxaa2xrSUQwZ2JTNUVZWFJoTG5CdmMxOXlaV1pmYVdRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SR2JHOTNJQ0U5SUZOd2FVWnNiM2N1VkhKaGJuTmhZM1JwYjI0Z2ZId2dkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVJtbHVhWE5vWldRZ2ZDQWhkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVVHOXpVbVZtU1dRZ1BUMGdhVzVqYjIxcGJtZFFiM05TWldaSlpDbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWUZKbFkyVnBkbVZrSUZKbFpuVnVaQ0J5WlhOd2IyNXpaU0JpZFhRZ1NTQjNZWE1nYm05MElIZGhhWFJwYm1jZ1ptOXlJSFJvYVhNZ2IyNWxMaUJKYm1OdmJXbHVaeUJRYjNNZ1VtVm1JRWxFT2lBa2UybHVZMjl0YVc1blVHOXpVbVZtU1dSOVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdWRWd0TVVFc0lGUklMVEpCWEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVEYjIxd2JHVjBaV1FvYlM1SFpYUlRkV05qWlhOelUzUmhkR1VvS1N3Z2JTd2dYQ0pTWldaMWJtUWdWSEpoYm5OaFkzUnBiMjRnUlc1a1pXUXVYQ0lwTzF4dUlDQWdJQ0FnSUNBdkx5QlVTQzAyUVN3Z1ZFZ3ROa1ZjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZFVlRVpzYjNkVGRHRjBaVU5vWVc1blpXUW5MQ0I3WkdWMFlXbHNPaUIwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpYMHBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJVVDBSUE9pQklZVzVrYkdVZ2RHaGxJRk5sZEhSc1pXMWxiblFnVW1WemNHOXVjMlVnY21WalpXbDJaV1FnWm5KdmJTQjBhR1VnVUdsdVVHRmtYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWJWd2lQand2Y0dGeVlXMCtYRzRnSUNBZ1NHRnVaR3hsVTJWMGRHeGxVbVZ6Y0c5dWMyVW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUkdiRzkzSUNFOUlGTndhVVpzYjNjdVZISmhibk5oWTNScGIyNGdmSHdnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVSbWx1YVhOb1pXUXBYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0dCU1pXTmxhWFpsWkNCVFpYUjBiR1VnY21WemNHOXVjMlVnWW5WMElFa2dkMkZ6SUc1dmRDQjNZV2wwYVc1bklHWnZjaUJ2Ym1VdUlDUjdiUzVFWldOeWVYQjBaV1JLYzI5dWZXQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJRlJJTFRGQkxDQlVTQzB5UVZ4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1UTI5dGNHeGxkR1ZrS0cwdVIyVjBVM1ZqWTJWemMxTjBZWFJsS0Nrc0lHMHNJRndpVTJWMGRHeGxJRlJ5WVc1ellXTjBhVzl1SUVWdVpHVmtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ0x5OGdWRWd0TmtFc0lGUklMVFpGWEc0Z0lDQWdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NkVWVFWnNiM2RUZEdGMFpVTm9ZVzVuWldRbkxDQjdaR1YwWVdsc09pQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlgwcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QklZVzVrYkdVZ2RHaGxJRk5sZEhSc1pXMWxiblFnUlc1eGRXbHllU0JTWlhOd2IyNXpaU0J5WldObGFYWmxaQ0JtY205dElIUm9aU0JRYVc1UVlXUmNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0x5OGdQSEJoY21GdElHNWhiV1U5WENKdFhDSStQQzl3WVhKaGJUNWNiaUFnSUNCZmFHRnVaR3hsVTJWMGRHeGxiV1Z1ZEVWdWNYVnBjbmxTWlhOd2IyNXpaU2h0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRVpzYjNjZ0lUMGdVM0JwUm14dmR5NVVjbUZ1YzJGamRHbHZiaUI4ZkNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVHYVc1cGMyaGxaQ2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1lGSmxZMlZwZG1Wa0lGTmxkSFJzWlcxbGJuUWdSVzV4ZFdseWVTQnlaWE53YjI1elpTQmlkWFFnU1NCM1lYTWdibTkwSUhkaGFYUnBibWNnWm05eUlHOXVaUzRnSkh0dExrUmxZM0o1Y0hSbFpFcHpiMjU5WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1ZFZ3RNVUVzSUZSSUxUSkJYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNURiMjF3YkdWMFpXUW9iUzVIWlhSVGRXTmpaWE56VTNSaGRHVW9LU3dnYlN3Z1hDSlRaWFIwYkdWdFpXNTBJRVZ1Y1hWcGNua2dSVzVrWldRdVhDSXBPMXh1SUNBZ0lDQWdJQ0F2THlCVVNDMDJRU3dnVkVndE5rVmNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NkVWVFWnNiM2RUZEdGMFpVTm9ZVzVuWldRbkxDQjdaR1YwWVdsc09pQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlgwcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlRiMjFsZEdsdFpYTWdkMlVnY21WalpXbDJaU0JsZG1WdWRDQjBlWEJsSUZ3aVpYSnliM0pjSWlCbWNtOXRJSFJvWlNCelpYSjJaWElzSUhOMVkyZ2dZWE1nZDJobGJpQmpZV3hzYVc1bklHTmhibU5sYkY5MGNtRnVjMkZqZEdsdmJpQmhibVFnZEdobGNtVWdhWE1nYm04Z2RISmhibk5oWTNScGIyNGdhVzRnY0hKdlozSmxjM011WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2liVndpUGp3dmNHRnlZVzArWEc0Z0lDQWdYMmhoYm1Sc1pVVnljbTl5UlhabGJuUW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUkdiRzkzSUQwOUlGTndhVVpzYjNjdVZISmhibk5oWTNScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUNZbUlDRjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1R2FXNXBjMmhsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdKaVlnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVRWFIwWlcxd2RHbHVaMVJ2UTJGdVkyVnNYRzRnSUNBZ0lDQWdJQ0FnSUNBbUppQnRMa2RsZEVWeWNtOXlLQ2tnUFQwZ1hDSk9UMTlVVWtGT1UwRkRWRWxQVGx3aUtWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVTQzB5UlZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1lGZGhjeUIwY25scGJtY2dkRzhnWTJGdVkyVnNJR0VnZEhKaGJuTmhZM1JwYjI0Z1luVjBJSFJvWlhKbElHbHpJRzV2ZEdocGJtY2dkRzhnWTJGdVkyVnNMaUJEWVd4c2FXNW5JRWRNVkNCMGJ5QnpaV1VnZDJoaGRDZHpJSFZ3WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWpZV3hzUjJWMFRHRnpkRlJ5WVc1ellXTjBhVzl1S0NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGdVbVZqWldsMlpXUWdSWEp5YjNJZ1JYWmxiblFnUW5WMElFUnZiaWQwSUd0dWIzY2dkMmhoZENCMGJ5QmtieUIzYVhSb0lHbDBMaUFrZTIwdVJHVmpjbmx3ZEdWa1NuTnZibjFnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklGZG9aVzRnZEdobElGQnBibEJoWkNCeVpYUjFjbTV6SUhSdklIVnpJSGRvWVhRZ2RHaGxJRXhoYzNRZ1ZISmhibk5oWTNScGIyNGdkMkZ6TGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbTFjSWo0OEwzQmhjbUZ0UGx4dUlDQWdJRjlvWVc1a2JHVkhaWFJNWVhOMFZISmhibk5oWTNScGIyNVNaWE53YjI1elpTaHRLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhSNFUzUmhkR1VnUFNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRVpzYjNjZ0lUMGdVM0JwUm14dmR5NVVjbUZ1YzJGamRHbHZiaUI4ZkNCMGVGTjBZWFJsTGtacGJtbHphR1ZrS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGNJbEpsWTJWcGRtVmtJR2RzZENCeVpYTndiMjV6WlNCaWRYUWdkMlVnZDJWeVpTQnViM1FnYVc0Z2RHaGxJRzFwWkdSc1pTQnZaaUJoSUhSNExpQnBaMjV2Y21sdVp5NWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYUjRVM1JoZEdVdVFYZGhhWFJwYm1kSGJIUlNaWE53YjI1elpTbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWENKeVpXTmxhWFpsWkNCaElHZHNkQ0J5WlhOd2IyNXpaU0JpZFhRZ2QyVWdhR0ZrSUc1dmRDQmhjMnRsWkNCbWIzSWdiMjVsSUhkcGRHaHBiaUIwYUdseklIUnlZVzV6WVdOMGFXOXVMaUJRWlhKb1lYQnpJR3hsWm5SdmRtVnlJR1p5YjIwZ2NISmxkbWx2ZFhNZ2IyNWxMaUJwWjI1dmNtbHVaeTVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9kSGhUZEdGMFpTNU1ZWE4wUjJ4MFVtVnhkV1Z6ZEVsa0lDRTlJRzB1U1dRcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLRndpY21WalpXbDJaV1FnWVNCbmJIUWdjbVZ6Y0c5dWMyVWdZblYwSUhSb1pTQnRaWE56WVdkbElHbGtJR1J2WlhNZ2JtOTBJRzFoZEdOb0lIUm9aU0JuYkhRZ2NtVnhkV1Z6ZENCMGFHRjBJSGRsSUhObGJuUXVJSE4wY21GdVoyVXVJR2xuYm05eWFXNW5MbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklGUklMVFFnVjJVZ2QyVnlaU0JwYmlCMGFHVWdiV2xrWkd4bElHOW1JR0VnZEhKaGJuTmhZM1JwYjI0dVhHNGdJQ0FnSUNBZ0lDOHZJRXhsZENkeklHRjBkR1Z0Y0hRZ2NtVmpiM1psY25rdUlGUm9hWE1nYVhNZ2MzUmxjQ0EwSUc5bUlGUnlZVzV6WVdOMGFXOXVJRkJ5YjJObGMzTnBibWNnU0dGdVpHeHBibWRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9ZRWR2ZENCTVlYTjBJRlJ5WVc1ellXTjBhVzl1TGk1Z0tUdGNiaUFnSUNBZ0lDQWdkSGhUZEdGMFpTNUhiM1JIYkhSU1pYTndiMjV6WlNncE8xeHVJQ0FnSUNBZ0lDQjJZWElnWjNSc1VtVnpjRzl1YzJVZ1BTQnVaWGNnUjJWMFRHRnpkRlJ5WVc1ellXTjBhVzl1VW1WemNHOXVjMlVvYlNrN1hHNGdJQ0FnSUNBZ0lIUjRVM1JoZEdVdVIweFVVbVZ6Y0c5dWMyVlFiM05TWldaSlpDQTlJR2QwYkZKbGMzQnZibk5sTGtkbGRGQnZjMUpsWmtsa0tDazdYRzRnSUNBZ0lDQWdJR2xtSUNnaFozUnNVbVZ6Y0c5dWMyVXVWMkZ6VW1WMGNtbGxkbVZrVTNWalkyVnpjMloxYkd4NUtDa3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2huZEd4U1pYTndiMjV6WlM1SmMxTjBhV3hzU1c1UWNtOW5jbVZ6Y3loMGVGTjBZWFJsTGxCdmMxSmxaa2xrS1NsY2JpQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVVNDMDBSU0F0SUU5d1pYSmhkR2x2YmlCSmJpQlFjbTluY21WemMxeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dkMGJGSmxjM0J2Ym5ObExrbHpWMkZwZEdsdVowWnZjbE5wWjI1aGRIVnlaVkpsYzNCdmJuTmxLQ2tnSmlZZ0lYUjRVM1JoZEdVdVFYZGhhWFJwYm1kVGFXZHVZWFIxY21WRGFHVmpheWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0Z3aVJXWjBjRzl6SUdseklIZGhhWFJwYm1jZ1ptOXlJSFZ6SUhSdklITmxibVFnYVhRZ2MybG5ibUYwZFhKbElHRmpZMlZ3ZEM5a1pXTnNhVzVsTENCaWRYUWdkMlVnZDJWeVpTQnViM1FnWVhkaGNtVWdiMllnZEdocGN5NGdYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0pVYUdVZ2RYTmxjaUJqWVc0Z2IyNXNlU0J5WldGc2JIa2daR1ZqYkdsdVpTQmhkQ0IwYUdseklITjBZV2RsSUdGeklIUm9aWEpsSUdseklHNXZJSEpsWTJWcGNIUWdkRzhnY0hKcGJuUWdabTl5SUhOcFoyNXBibWN1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNVRhV2R1WVhSMWNtVlNaWEYxYVhKbFpDaHVaWGNnVTJsbmJtRjBkWEpsVW1WeGRXbHlaV1FvZEhoVGRHRjBaUzVRYjNOU1pXWkpaQ3dnYlM1SlpDd2dYQ0pOU1ZOVFNVNUhJRkpGUTBWSlVGUmNYRzRnUkVWRFRFbE9SU0JCVGtRZ1ZGSlpJRUZIUVVsT0xsd2lLU3dnWENKU1pXTnZkbVZ5WldRZ2FXNGdVMmxuYm1GMGRYSmxJRkpsY1hWcGNtVmtJR0oxZENCM1pTQmtiMjRuZENCb1lYWmxJSEpsWTJWcGNIUXVJRmx2ZFNCdFlYa2dSR1ZqYkdsdVpTQjBhR1Z1SUZKbGRISjVMbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb1ozUnNVbVZ6Y0c5dWMyVXVTWE5YWVdsMGFXNW5SbTl5UVhWMGFFTnZaR1VvS1NBbUppQWhkSGhUZEdGMFpTNUJkMkZwZEdsdVoxQm9iMjVsUm05eVFYVjBhQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0Z3aVJXWjBjRzl6SUdseklIZGhhWFJwYm1jZ1ptOXlJSFZ6SUhSdklITmxibVFnYVhRZ1lYVjBhQ0JqYjJSbExDQmlkWFFnZDJVZ2QyVnlaU0J1YjNRZ1lYZGhjbVVnYjJZZ2RHaHBjeTRnWENJZ0sxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKWFpTQmpZVzRnYjI1c2VTQmpZVzVqWld3Z2RHaGxJSFJ5WVc1ellXTjBhVzl1SUdGMElIUm9hWE1nYzNSaFoyVWdZWE1nZDJVZ1pHOXVKM1FnYUdGMlpTQmxibTkxWjJnZ2FXNW1iM0p0WVhScGIyNGdkRzhnY21WamIzWmxjaUJtY205dElIUm9hWE11WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNVFhRzl1WlVadmNrRjFkR2hTWlhGMWFYSmxaQ2h1WlhjZ1VHaHZibVZHYjNKQmRYUm9VbVZ4ZFdseVpXUW9kSGhUZEdGMFpTNVFiM05TWldaSlpDd2diUzVKWkN3Z1hDSlZUa3RPVDFkT1hDSXNJRndpVlU1TFRrOVhUbHdpS1N3Z1hDSlNaV052ZG1WeVpXUWdiV2xrSUZCb2IyNWxMVVp2Y2kxQmRYUm9JR0oxZENCa2IyNG5kQ0JvWVhabElHUmxkR0ZwYkhNdUlGbHZkU0J0WVhrZ1EyRnVZMlZzSUhSb1pXNGdVbVYwY25rdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGNJazl3WlhKaGRHbHZiaUJ6ZEdsc2JDQnBiaUJ3Y205bmNtVnpjeTR1TGlCemRHRjVJSGRoYVhScGJtY3VYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJPYnlCdVpXVmtJSFJ2SUhCMVlteHBjMmdnZEhoR2JHOTNVM1JoZEdWRGFHRnVaMlZrTGlCRFlXNGdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWjNSc1VtVnpjRzl1YzJVdVYyRnpWR2x0WlU5MWRFOW1VM2x1WTBWeWNtOXlLQ2twWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVEdWMEozTWdibTkwSUdkcGRtVWdkWEFnWW1GelpXUWdiMjRnWVNCVVQwOVRJR1Z5Y205eUxseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRXhsZENkeklHeHZaeUJwZEN3Z1lXNWtJR2xuYm05eVpTQnBkQzRnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9ZRlJwYldVdFQzVjBMVTltTFZONWJtTWdaWEp5YjNJZ2FXNGdSMlYwSUV4aGMzUWdWSEpoYm5OaFkzUnBiMjRnY21WemNHOXVjMlV1SUV4bGRDZHpJR2xuYm05eVpTQnBkQ0JoYm1RZ2QyVW5iR3dnZEhKNUlHRm5ZV2x1TG1BcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRTV2SUc1bFpXUWdkRzhnY0hWaWJHbHphQ0IwZUVac2IzZFRkR0YwWlVOb1lXNW5aV1F1SUVOaGJpQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJJTFRSWUlDMGdWVzVsZUhCbFkzUmxaQ0JTWlhOd2IyNXpaU0IzYUdWdUlISmxZMjkyWlhKcGJtZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloZ1ZXNWxlSEJsWTNSbFpDQlNaWE53YjI1elpTQnBiaUJIWlhRZ1RHRnpkQ0JVY21GdWMyRmpkR2x2YmlCa2RYSnBibWNnTFNCU1pXTmxhWFpsWkNCd2IzTlNaV1pKWkRva2UyZDBiRkpsYzNCdmJuTmxMa2RsZEZCdmMxSmxaa2xrS0NsOUlFVnljbTl5T2lSN2JTNUhaWFJGY25KdmNpZ3BmUzRnU1dkdWIzSnBibWN1WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI0VTNSaGRHVXVWSGx3WlNBOVBTQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVIyVjBUR0Z6ZEZSeVlXNXpZV04wYVc5dUtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGUklTVk1nVjBGVElFRWdVRXhCU1U0Z1IwVlVJRXhCVTFRZ1ZGSkJUbE5CUTFSSlQwNGdVa1ZSVlVWVFZDd2dUazlVSUVaUFVpQlNSVU5QVmtWU1dTQlFWVkpRVDFORlV5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloY0lsSmxkSEpwWlhabFpDQk1ZWE4wSUZSeVlXNXpZV04wYVc5dUlHRnpJR0Z6YTJWa0lHUnBjbVZqZEd4NUlHSjVJSFJvWlNCMWMyVnlMbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmRHeFNaWE53YjI1elpTNURiM0I1VFdWeVkyaGhiblJTWldObGFYQjBWRzlEZFhOMGIyMWxjbEpsWTJWcGNIUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZUZOMFlYUmxMa052YlhCc1pYUmxaQ2h0TGtkbGRGTjFZMk5sYzNOVGRHRjBaU2dwTENCdExDQmNJa3hoYzNRZ1ZISmhibk5oWTNScGIyNGdVbVYwY21sbGRtVmtYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJJTFRSQklDMGdUR1YwSjNNZ2RISjVJSFJ2SUcxaGRHTm9JSFJvWlNCeVpXTmxhWFpsWkNCc1lYTjBJSFJ5WVc1ellXTjBhVzl1SUdGbllXbHVjM1FnZEdobElHTjFjbkpsYm5RZ2RISmhibk5oWTNScGIyNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzNWalkyVnpjMU4wWVhSbElEMGdkR2hwY3k1SGJIUk5ZWFJqYUNobmRHeFNaWE53YjI1elpTd2dkSGhUZEdGMFpTNVFiM05TWldaSlpDd2dkSGhUZEdGMFpTNUJiVzkxYm5SRFpXNTBjeXdnZEhoVGRHRjBaUzVTWlhGMVpYTjBWR2x0WlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE4xWTJObGMzTlRkR0YwWlNBOVBTQlRkV05qWlhOelUzUmhkR1V1Vlc1cmJtOTNiaWxjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJJTFRST09pQkVhV1J1SjNRZ1RXRjBZMmdnYjNWeUlIUnlZVzV6WVdOMGFXOXVMaUJEYjI1emFXUmxjaUJWYm10dWIzZHVJRk4wWVhSbExseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGNJa1JwWkNCdWIzUWdiV0YwWTJnZ2RISmhibk5oWTNScGIyNHVYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlRk4wWVhSbExsVnVhMjV2ZDI1RGIyMXdiR1YwWldRb1hDSkdZV2xzWldRZ2RHOGdjbVZqYjNabGNpQlVjbUZ1YzJGamRHbHZiaUJUZEdGMGRYTXVJRU5vWldOcklFVkdWRkJQVXk0Z1hDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVVNDMDBXVG9nVjJVZ1RXRjBZMmhsWkN3Z2RISmhibk5oWTNScGIyNGdabWx1YVhOb1pXUXNJR3hsZENkeklIVndaR0YwWlNCdmRYSnpaV3gyWlhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaM1JzVW1WemNHOXVjMlV1UTI5d2VVMWxjbU5vWVc1MFVtVmpaV2x3ZEZSdlEzVnpkRzl0WlhKU1pXTmxhWEIwS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI0VTNSaGRHVXVRMjl0Y0d4bGRHVmtLSE4xWTJObGMzTlRkR0YwWlN3Z2JTd2dYQ0pVY21GdWMyRmpkR2x2YmlCRmJtUmxaQzVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QkRkWE4wYjIxRmRtVnVkQ2duVkhoR2JHOTNVM1JoZEdWRGFHRnVaMlZrSnl3Z2UyUmxkR0ZwYkRvZ2RIaFRkR0YwWlgwcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkwxZG9aVzRnZEdobElIUnlZVzV6WVdOMGFXOXVJR05oYm1ObGJDQnlaWE53YjI1elpTQnBjeUJ5WlhSMWNtNWxaQzVjYmlBZ0lDQmZhR0Z1Wkd4bFEyRnVZMlZzVkhKaGJuTmhZM1JwYjI1U1pYTndiMjV6WlNodEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYVc1amIyMXBibWRRYjNOU1pXWkpaQ0E5SUcwdVJHRjBZUzV3YjNOZmNtVm1YMmxrTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwZUZOMFlYUmxJRDBnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVTdYRzRnSUNBZ0lDQWdJR052Ym5OMElHTmhibU5sYkZKbGMzQnZibk5sSUQwZ2JtVjNJRU5oYm1ObGJGUnlZVzV6WVdOMGFXOXVVbVZ6Y0c5dWMyVW9iU2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dJVDBnVTNCcFJteHZkeTVVY21GdWMyRmpkR2x2YmlCOGZDQjBlRk4wWVhSbExrWnBibWx6YUdWa0lIeDhJQ0YwZUZOMFlYUmxMbEJ2YzFKbFprbGtJRDA5SUdsdVkyOXRhVzVuVUc5elVtVm1TV1FwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFkyRnVZMlZzVW1WemNHOXVjMlV1VjJGelZIaHVVR0Z6ZEZCdmFXNTBUMlpPYjFKbGRIVnliaWdwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWUZKbFkyVnBkbVZrSUVOaGJtTmxiQ0JTWlhGMWFYSmxaQ0JpZFhRZ1NTQjNZWE1nYm05MElIZGhhWFJwYm1jZ1ptOXlJRzl1WlM0Z1NXNWpiMjFwYm1jZ1VHOXpJRkpsWmlCSlJEb2dKSHRwYm1OdmJXbHVaMUJ2YzFKbFprbGtmV0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGpZVzVqWld4U1pYTndiMjV6WlM1VGRXTmpaWE56S1NCeVpYUjFjbTQ3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxuZGhjbTRvWENKR1lXbHNaV1FnZEc4Z1kyRnVZMlZzSUhSeVlXNXpZV04wYVc5dU9pQnlaV0Z6YjI0OVhDSWdLeUJqWVc1alpXeFNaWE53YjI1elpTNUhaWFJGY25KdmNsSmxZWE52YmlncElDc2dYQ0lzSUdSbGRHRnBiRDFjSWlBcklHTmhibU5sYkZKbGMzQnZibk5sTGtkbGRFVnljbTl5UkdWMFlXbHNLQ2twTzF4dVhHNGdJQ0FnSUNBZ0lIUjRVM1JoZEdVdVEyRnVZMlZzUm1GcGJHVmtLRndpUm1GcGJHVmtJSFJ2SUdOaGJtTmxiQ0IwY21GdWMyRmpkR2x2YmpvZ1hDSWdLeUJqWVc1alpXeFNaWE53YjI1elpTNUhaWFJGY25KdmNrUmxkR0ZwYkNncElDc2dYQ0l1SUVOb1pXTnJJRVZHVkZCUFV5NWNJaWs3WEc0Z0lDQWdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NkVWVFWnNiM2RUZEdGMFpVTm9ZVzVuWldRbkxDQjdaR1YwWVdsc09pQjBlRk4wWVhSbGZTa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGOW9ZVzVrYkdWVFpYUlFiM05KYm1adlVtVnpjRzl1YzJVb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ5WlhOd2IyNXpaU0E5SUc1bGR5QlRaWFJRYjNOSmJtWnZVbVZ6Y0c5dWMyVW9iU2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaWE53YjI1elpTNXBjMU4xWTJObGMzTW9LU2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFHRnpVMlYwU1c1bWJ5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGNJbE5sZEhScGJtY2dVRTlUSUdsdVptOGdjM1ZqWTJWemMyWjFiRndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTUzWVhKdUtGd2lVMlYwZEdsdVp5QlFUMU1nYVc1bWJ5Qm1ZV2xzWldRNklISmxZWE52YmoxY0lpQXJJSEpsYzNCdmJuTmxMbWRsZEVWeWNtOXlVbVZoYzI5dUtDa2dLeUJjSWl3Z1pHVjBZV2xzUFZ3aUlDc2djbVZ6Y0c5dWMyVXVaMlYwUlhKeWIzSkVaWFJoYVd3b0tTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZjM1JoY25SVWNtRnVjMkZqZEdsdmJrMXZibWwwYjNKcGJtZFVhSEpsWVdRb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzVsWldSelVIVmliR2x6YUdsdVp5QTlJR1poYkhObE8xeHVJQ0FnSUZ4dUlDQWdJQ0FnSUNCMllYSWdkSGhUZEdGMFpTQTlJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFJteHZkeUE5UFNCVGNHbEdiRzkzTGxSeVlXNXpZV04wYVc5dUlDWW1JQ0YwZUZOMFlYUmxMa1pwYm1semFHVmtLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnYzNSaGRHVWdQU0IwZUZOMFlYUmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE4wWVhSbExrRjBkR1Z0Y0hScGJtZFViME5oYm1ObGJDQW1KaUJFWVhSbExtNXZkeWdwSUQ0Z2MzUmhkR1V1UTJGdVkyVnNRWFIwWlcxd2RGUnBiV1VnS3lCMGFHbHpMbDl0WVhoWFlXbDBSbTl5UTJGdVkyVnNWSGdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVkVndE1sUWdMU0IwYjI4Z2JHOXVaeUJ6YVc1alpTQmpZVzVqWld3Z1lYUjBaVzF3ZENBdElFTnZibk5wWkdWeUlIVnVhMjV2ZDI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhnUW1WbGJpQjBiMjhnYkc5dVp5QjNZV2wwYVc1bklHWnZjaUIwY21GdWMyRmpkR2x2YmlCMGJ5QmpZVzVqWld3dVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGhUZEdGMFpTNVZibXR1YjNkdVEyOXRjR3hsZEdWa0tHQlhZV2wwWldRZ2JHOXVaeUJsYm05MVoyZ2dabTl5SUVOaGJtTmxiQ0JVY21GdWMyRmpkR2x2YmlCeVpYTjFiSFF1SUVOb1pXTnJJRVZHVkZCUFV5NGdZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WbFpITlFkV0pzYVhOb2FXNW5JRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSE4wWVhSbExsSmxjWFZsYzNSVFpXNTBJQ1ltSUVSaGRHVXVibTkzS0NrZ1BpQnpkR0YwWlM1TVlYTjBVM1JoZEdWU1pYRjFaWE4wVkdsdFpTQXJJSFJvYVhNdVgyTm9aV05yVDI1VWVFWnlaWEYxWlc1amVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlVTQzB4VkN3Z1ZFZ3RORlFnTFNCSmRDZHpJR0psWlc0Z1lTQjNhR2xzWlNCemFXNWpaU0IzWlNCeVpXTmxhWFpsWkNCaGJpQjFjR1JoZEdVc0lHeGxkQ2R6SUdOaGJHd2dZU0JIVEZSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhnUTJobFkydHBibWNnYjI0Z2IzVnlJSFJ5WVc1ellXTjBhVzl1TGlCTVlYTjBJSGRsSUdGemEyVmtJSGRoY3lCaGRDQWtlM04wWVhSbExreGhjM1JUZEdGMFpWSmxjWFZsYzNSVWFXMWxmUzR1TG1BcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJOaGJHeEhaWFJNWVhOMFZISmhibk5oWTNScGIyNG9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnYVdZZ0tHNWxaV1J6VUhWaWJHbHphR2x1WnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxUjRSbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbGZTa3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCMGFHbHpMbDl6ZEdGeWRGUnlZVzV6WVdOMGFXOXVUVzl1YVhSdmNtbHVaMVJvY21WaFpDZ3BMQ0IwYUdsekxsOTBlRTF2Ym1sMGIzSkRhR1ZqYTBaeVpYRjFaVzVqZVNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnVUhKcGJuUnBibWRTWlhOd2IyNXpaU2h0S1NCN1hHNGdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblRXVjBhRzlrSUc1dmRDQnBiWEJzWlcxbGJuUmxaQzRnVUd4bFlYTmxJRzkyWlhKM2NtbDBaU0IwYUdseklHMWxkR2h2WkNCcGJpQjViM1Z5SUZCUFV5Y3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGUmxjbTFwYm1Gc1UzUmhkSFZ6VW1WemNHOXVjMlVvYlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owMWxkR2h2WkNCdWIzUWdhVzF3YkdWdFpXNTBaV1F1SUZCc1pXRnpaU0J2ZG1WeWQzSnBkR1VnZEdocGN5QnRaWFJvYjJRZ2FXNGdlVzkxY2lCUVQxTW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkNZWFIwWlhKNVRHVjJaV3hEYUdGdVoyVmtLRzBwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkTlpYUm9iMlFnYm05MElHbHRjR3hsYldWdWRHVmtMaUJRYkdWaGMyVWdiM1psY25keWFYUmxJSFJvYVhNZ2JXVjBhRzlrSUdsdUlIbHZkWElnVUU5VEp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gyaGhibVJzWlZCeWFXNTBhVzVuVW1WemNHOXVjMlVvYlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHaHBjeTVRY21sdWRHbHVaMUpsYzNCdmJuTmxJRDA5UFNBblpuVnVZM1JwYjI0bktTQjBhR2x6TGxCeWFXNTBhVzVuVW1WemNHOXVjMlVvYlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWDJoaGJtUnNaVlJsY20xcGJtRnNVM1JoZEhWelVtVnpjRzl1YzJVb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hwY3k1VVpYSnRhVzVoYkZOMFlYUjFjMUpsYzNCdmJuTmxJRDA5UFNBblpuVnVZM1JwYjI0bktTQjBhR2x6TGxSbGNtMXBibUZzVTNSaGRIVnpVbVZ6Y0c5dWMyVW9iU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMmhoYm1Sc1pVSmhkSFJsY25sTVpYWmxiRU5vWVc1blpXUW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NUNZWFIwWlhKNVRHVjJaV3hEYUdGdVoyVmtJRDA5UFNBblpuVnVZM1JwYjI0bktTQjBhR2x6TGtKaGRIUmxjbmxNWlhabGJFTm9ZVzVuWldRb2JTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdaVzVrY21WbmFXOXVYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDOHZJSEpsWjJsdmJpQkpiblJsY201aGJITWdabTl5SUVOdmJtNWxZM1JwYjI0Z1RXRnVZV2RsYldWdWRGeHVYRzRnSUNBZ1gzSmxjMlYwUTI5dWJpZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJUWlhSMWNDQjBhR1VnUTI5dWJtVmpkR2x2Ymx4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1dUlEMGdibVYzSUVOdmJtNWxZM1JwYjI0b0tUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYVhOVmMybHVaMGgwZEhCektDa2dmSHdnZEdocGN5NWZabTl5WTJWVFpXTjFjbVZYWldKVGIyTnJaWFJ6S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGNJbE5sWTNWeVpTQmpiMjV1WldOMGFXOXVJR1JsZEdWamRHVmtMbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyVm1kSEJ2YzBGa1pISmxjM01nUFNCMGFHbHpMbDlsWm5Sd2IzTkJaR1J5WlhOekxuSmxjR3hoWTJVb1hDSjNjem92TDF3aUxDQmNJbmR6Y3pvdkwxd2lLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyOXViaTVCWkdSeVpYTnpJRDBnZEdocGN5NWZaV1owY0c5elFXUmtjbVZ6Y3p0Y2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1VtVm5hWE4wWlhJZ2IzVnlJRVYyWlc1MElFaGhibVJzWlhKelhHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0owTnZibTVsWTNScGIyNVRkR0YwZFhORGFHRnVaMlZrSnl3Z0tHVXBJRDArSUhSb2FYTXVYMjl1VTNCcFEyOXVibVZqZEdsdmJsTjBZWFIxYzBOb1lXNW5aV1FvWlM1a1pYUmhhV3dwS1R0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lnblRXVnpjMkZuWlZKbFkyVnBkbVZrSnl3Z0tHVXBJRDArSUhSb2FYTXVYMjl1VTNCcFRXVnpjMkZuWlZKbFkyVnBkbVZrS0dVdVpHVjBZV2xzS1NrN1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0owVnljbTl5VW1WalpXbDJaV1FuTENBb1pTa2dQVDRnZEdocGN5NWZiMjVYYzBWeWNtOXlVbVZqWldsMlpXUW9aUzVrWlhSaGFXd3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJVYUdseklHMWxkR2h2WkNCM2FXeHNJR0psSUdOaGJHeGxaQ0IzYUdWdUlIUm9aU0JqYjI1dVpXTjBhVzl1SUhOMFlYUjFjeUJqYUdGdVoyVnpMbHh1SUNBZ0lDOHZJRmx2ZFNCaGNtVWdaVzVqYjNWeVlXZGxaQ0IwYnlCa2FYTndiR0Y1SUdFZ1VHbHVVR0ZrSUVOdmJtNWxZM1JwYjI0Z1NXNWthV05oZEc5eUlHOXVJSFJvWlNCUVQxTWdjMk55WldWdUxseHVJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW5OMFlYUmxYQ0krUEM5d1lYSmhiVDVjYmlBZ0lDQmZiMjVUY0dsRGIyNXVaV04wYVc5dVUzUmhkSFZ6UTJoaGJtZGxaQ2h6ZEdGMFpTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lITjNhWFJqYUNBb2MzUmhkR1V1UTI5dWJtVmpkR2x2YmxOMFlYUmxLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVOdmJtNWxZM1JwYjI1VGRHRjBaUzVEYjI1dVpXTjBhVzVuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLR0JKSjIwZ1EyOXVibVZqZEdsdVp5QjBieUIwYUdVZ1JXWjBjRzl6SUdGMElDUjdkR2hwY3k1ZlpXWjBjRzl6UVdSa2NtVnpjMzB1TGk1Z0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQkRiMjV1WldOMGFXOXVVM1JoZEdVdVEyOXVibVZqZEdWa09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNKbGRISnBaWE5UYVc1alpVeGhjM1JFWlhacFkyVkJaR1J5WlhOelVtVnpiMngxZEdsdmJpQTlJREE3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwUm14dmR5QTlQU0JUY0dsR2JHOTNMbEJoYVhKcGJtY2dKaVlnZEdocGN5NURkWEp5Wlc1MFUzUmhkSFZ6SUQwOUlGTndhVk4wWVhSMWN5NVZibkJoYVhKbFpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVRXVnpjMkZuWlNBOUlGd2lVbVZ4ZFdWemRHbHVaeUIwYnlCUVlXbHlMaTR1WENJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NkUVlXbHlhVzVuUm14dmQxTjBZWFJsUTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdWOUtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhaaGNpQndjaUE5SUZCaGFYSnBibWRJWld4d1pYSXVUbVYzVUdGcGNsSmxjWFZsYzNRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjMlZ1WkNod2NpNVViMDFsYzNOaFoyVW9LU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLR0JKSjIwZ1EyOXVibVZqZEdWa0lIUnZJQ1I3ZEdocGN5NWZaV1owY0c5elFXUmtjbVZ6YzMwdUxpNWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzNCcFRXVnpjMkZuWlZOMFlXMXdMbE5sWTNKbGRITWdQU0IwYUdsekxsOXpaV055WlhSek8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpkR0Z5ZEZCbGNtbHZaR2xqVUdsdVp5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JEYjI1dVpXTjBhVzl1VTNSaGRHVXVSR2x6WTI5dWJtVmpkR1ZrT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFeGxkQ2R6SUhKbGMyVjBJSE52YldVZ2JHbG1aV041WTJ4bElISmxiR0YwWldRZ2RHOGdZMjl1Ym1WamRHbHZiaUJ6ZEdGMFpTd2djbVZoWkhrZ1ptOXlJRzVsZUhRZ1kyOXVibVZqZEdsdmJseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0dCSkoyMGdaR2x6WTI5dWJtVmpkR1ZrSUdaeWIyMGdKSHQwYUdsekxsOWxablJ3YjNOQlpHUnlaWE56ZlM0dUxtQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyMXZjM1JTWldObGJuUlFhVzVuVTJWdWRDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYlc5emRGSmxZMlZ1ZEZCdmJtZFNaV05sYVhabFpDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYldsemMyVmtVRzl1WjNORGIzVnVkQ0E5SURBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSdmNGQmxjbWx2WkdsalVHbHVaeWdwTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEZOMFlYUjFjeUFoUFNCVGNHbFRkR0YwZFhNdVZXNXdZV2x5WldRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVGRHRjBkWE1nUFNCVGNHbFRkR0YwZFhNdVVHRnBjbVZrUTI5dWJtVmpkR2x1Wnp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBOVBTQlRjR2xHYkc5M0xsUnlZVzV6WVdOMGFXOXVJQ1ltSUNGMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVHYVc1cGMyaGxaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdkMlVuY21VZ2FXNGdkR2hsSUcxcFpHUnNaU0J2WmlCaElIUnlZVzV6WVdOMGFXOXVMQ0JxZFhOMElITnZJSGx2ZFNCcmJtOTNJVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVkVndE1VUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0dCTWIzTjBJR052Ym01bFkzUnBiMjRnYVc0Z2RHaGxJRzFwWkdSc1pTQnZaaUJoSUhSeVlXNXpZV04wYVc5dUxpNHVZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOWpiMjV1SUQwOUlHNTFiR3dwSUhKbGRIVnlianNnTHk4Z1ZHaHBjeUJ0WldGdWN5QjBhR1VnYVc1emRHRnVZMlVnYUdGeklHSmxaVzRnWkdsemNHOXpaV1F1SUVGaWIzSjBhVzVuTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJGMWRHOUJaR1J5WlhOelVtVnpiMngxZEdsdmJrVnVZV0pzWldRcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDl5WlhSeWFXVnpVMmx1WTJWTVlYTjBSR1YyYVdObFFXUmtjbVZ6YzFKbGMyOXNkWFJwYjI0Z1BqMGdkR2hwY3k1ZmNtVjBjbWxsYzBKbFptOXlaVkpsYzI5c2RtbHVaMFJsZG1salpVRmtaSEpsYzNNcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZllYVjBiMUpsYzI5c2RtVkZablJ3YjNOQlpHUnlaWE56S0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtVjBjbWxsYzFOcGJtTmxUR0Z6ZEVSbGRtbGpaVUZrWkhKbGMzTlNaWE52YkhWMGFXOXVJRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXlaWFJ5YVdWelUybHVZMlZNWVhOMFJHVjJhV05sUVdSa2NtVnpjMUpsYzI5c2RYUnBiMjRnS3owZ01UdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktHQlhhV3hzSUhSeWVTQjBieUJ5WldOdmJtNWxZM1FnYVc0Z0pIdDBhR2x6TGw5emJHVmxjRUpsWm05eVpWSmxZMjl1Ym1WamRFMXpmVzF6TGk0dVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRk4wWVhSMWN5QWhQU0JUY0dsVGRHRjBkWE11Vlc1d1lXbHlaV1FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCcGN5QnViMjR0WW14dlkydHBibWRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppaDBhR2x6TGw5amIyNXVLU0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk52Ym00dVEyOXVibVZqZENncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTd2dkR2hwY3k1ZmMyeGxaWEJDWldadmNtVlNaV052Ym01bFkzUk5jeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWc2MyVWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRFWnNiM2NnUFQwZ1UzQnBSbXh2ZHk1UVlXbHlhVzVuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVJtbHVhWE5vWldRcElISmxkSFZ5Ymp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmY21WMGNtbGxjMU5wYm1ObFRHRnpkRkJoYVhKcGJtY2dQajBnZEdocGN5NWZjbVYwY21sbGMwSmxabTl5WlZCaGFYSnBibWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNKbGRISnBaWE5UYVc1alpVeGhjM1JRWVdseWFXNW5JRDBnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1M1lYSnVLRndpVEc5emRDQkRiMjV1WldOMGFXOXVJR1IxY21sdVp5QndZV2x5YVc1bkxsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOXVVR0ZwY21sdVowWmhhV3hsWkNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMUJoYVhKcGJtZEdiRzkzVTNSaGRHVkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaWDBwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYkhObFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktHQlhhV3hzSUhSeWVTQjBieUJ5WlMxd1lXbHlJR2x1SUNSN2RHaHBjeTVmYzJ4bFpYQkNaV1p2Y21WU1pXTnZibTVsWTNSTmMzMXRjeUF1TGk1Z0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmxkRlJwYldWdmRYUW9LQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUlRkR0YwZFhNZ0lUMGdVM0JwVTNSaGRIVnpMbEJoYVhKbFpFTnZibTVsWTNSbFpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSb2FYTWdhWE1nYm05dUxXSnNiMk5yYVc1blhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5amIyNXVLU0IwYUdsekxsOWpiMjV1TGtOdmJtNWxZM1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl5WlhSeWFXVnpVMmx1WTJWTVlYTjBVR0ZwY21sdVp5QXJQU0F4TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVmYzJ4bFpYQkNaV1p2Y21WU1pXTnZibTVsWTNSTmN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblZXNXJibTkzYmlCemRHRjBaVG9nSnlBcklITjBZWFJsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklGUm9hWE1nYVhNZ1lXNGdhVzF3YjNKMFlXNTBJSEJwWldObElHOW1JSFJvWlNCd2RYcDZiR1V1SUVsMEozTWdZU0JpWVdOclozSnZkVzVrSUhSb2NtVmhaQ0IwYUdGMElIQmxjbWx2WkdsallXeHNlVnh1SUNBZ0lDOHZJSE5sYm1SeklGQnBibWR6SUhSdklIUm9aU0J6WlhKMlpYSXVJRWxtSUdsMElHUnZaWE51SjNRZ2NtVmpaV2wyWlNCUWIyNW5jeXdnYVhRZ1kyOXVjMmxrWlhKeklIUm9aU0JqYjI1dVpXTjBhVzl1SUdGeklHSnliMnRsYmx4dUlDQWdJQzh2SUhOdklHbDBJR1JwYzJOdmJtNWxZM1J6TGlCY2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnWDNOMFlYSjBVR1Z5YVc5a2FXTlFhVzVuS0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHOXdVR1Z5YVc5a2FXTlFhVzVuS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCbGNtbHZaR2xqVUdsdVoxUm9jbVZoWkNBOUlITmxkRWx1ZEdWeWRtRnNLQ2dwSUQwK0lIUm9hWE11WDNCbGNtbHZaR2xqVUdsdVp5Z3BMSFJvYVhNdVgzQnBibWRHY21WeGRXVnVZM2twTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3WlhKcGIyUnBZMUJwYm1jb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCZmNHVnlhVzlrYVdOUWFXNW5LQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QjNhR2xzWlNCcEoyMGdjM1JwYkd3Z1kyOXVibVZqZEdWa0lFRk9SQ0J3WVdseVpXUXVMaTVjYmlBZ0lDQWdJQ0FnYVdZb2RHaHBjeTVmWTI5dWJpNURiMjV1WldOMFpXUWdKaVlnZEdocGN5NWZjMlZqY21WMGN5QWhQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrYjFCcGJtY29LVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdjMlYwVkdsdFpXOTFkQ2dvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMjF2YzNSU1pXTmxiblJRYVc1blUyVnVkQ0FoUFNCdWRXeHNJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaDBhR2x6TGw5dGIzTjBVbVZqWlc1MFVHOXVaMUpsWTJWcGRtVmtJRDA5SUc1MWJHd2dmSHdnZEdocGN5NWZiVzl6ZEZKbFkyVnVkRkJ2Ym1kU1pXTmxhWFpsWkM1SlpDQWhQU0IwYUdsekxsOXRiM04wVW1WalpXNTBVR2x1WjFObGJuUXVTV1FwS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJXbHpjMlZrVUc5dVozTkRiM1Z1ZENBclBTQXhPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0dCRlpuUndiM01nWkdsa2JpZDBJSEpsY0d4NUlIUnZJRzE1SUZCcGJtY3VJRTFwYzNObFpDQkRiM1Z1ZERvZ0pIdDBhR2x6TGw5dGFYTnpaV1JRYjI1bmMwTnZkVzUwZlM4a2UzUm9hWE11WDIxcGMzTmxaRkJ2Ym1kelZHOUVhWE5qYjI1dVpXTjBmUzVnS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYldsemMyVmtVRzl1WjNORGIzVnVkQ0E4SUhSb2FYTXVYMjFwYzNObFpGQnZibWR6Vkc5RWFYTmpiMjV1WldOMEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGNJbFJ5ZVdsdVp5QmhibTkwYUdWeUlIQnBibWN1TGk1Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHRnlkRkJsY21sdlpHbGpVR2x1WnlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCdFpXRnVjeUIwYUdGMElIZGxJR2hoZG1VZ2JtOTBJSEpsWTJWcGRtVmtJR0VnY0c5dVp5Qm1iM0lnYjNWeUlHMXZjM1FnY21WalpXNTBJSEJwYm1jdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZkbElHTnZibk5wWkdWeUlIUm9hWE1nWTI5dWJtVmpkR2x2YmlCaGN5QmljbTlyWlc0dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUV4bGRDZHpJRVJwYzJOdmJtNWxZM1F1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0Z3aVJHbHpZMjl1Ym1WamRHbHVaeTR1TGx3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZMjl1Ymk1RWFYTmpiMjV1WldOMEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM04wYjNCUVpYSnBiMlJwWTFCcGJtY29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl0YVhOelpXUlFiMjVuYzBOdmRXNTBJRDBnTUR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4MGFHbHpMbDl3YjI1blZHbHRaVzkxZENrN1hHNWNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM04wYjNCUVpYSnBiMlJwWTFCcGJtY29LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0Z3aVEyRnVZMlZzYkdsdVp5QndaWEpwYjJScFl5QndhVzVuSUdGeklIZGxjbVVnWkdselkyOXVibVZqZEdWa0lHOXlJRzV2ZENCd1lXbHlaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlhaU0JqWVd4c0lIUm9hWE1nYjNWeWMyVnNkbVZ6SUdGeklITnZiMjRnWVhNZ2QyVW5jbVVnY21WaFpIa2dkRzhnZEhKaGJuTmhZM1FnZDJsMGFDQjBhR1VnVUdsdVVHRmtJR0ZtZEdWeUlHRWdZMjl1Ym1WamRHbHZiaUJwY3lCbGMzUmhZbXhwYzJobFpDNWNiaUFnSUNBdkx5QlVhR2x6SUdaMWJtTjBhVzl1SUdseklHVm1abVZqZEdsMlpXeDVJR05oYkd4bFpDQmhablJsY2lCM1pTQnlaV05sYVhabFpDQjBhR1VnWm1seWMzUWdURzluYVc0Z1VtVnpjRzl1YzJVZ1puSnZiU0IwYUdVZ1VHbHVVR0ZrTGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0JmYjI1U1pXRmtlVlJ2VkhKaGJuTmhZM1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9YQ0pQYmlCU1pXRmtlU0JVYnlCVWNtRnVjMkZqZENGY0lpazdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1UyOHNJSGRsSUdoaGRtVWdhblZ6ZENCdFlXUmxJR0VnWTI5dWJtVmpkR2x2Yml3Z2NHbHVaMlZrSUdGdVpDQnNiMmRuWldRZ2FXNGdjM1ZqWTJWemMyWjFiR3g1TGx4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlRkR0YwZFhNZ1BTQlRjR2xUZEdGMGRYTXVVR0ZwY21Wa1EyOXVibVZqZEdWa08xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUkdiRzkzSUQwOUlGTndhVVpzYjNjdVZISmhibk5oWTNScGIyNGdKaVlnSVhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxMa1pwYm1semFHVmtLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVbVZ4ZFdWemRGTmxiblFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVkVndE0wRWdMU0JYWlNkMlpTQnFkWE4wSUhKbFkyOXVibVZqZEdWa0lHRnVaQ0IzWlhKbElHbHVJSFJvWlNCdGFXUmtiR1VnYjJZZ1ZIZ3VYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnVEdWMEozTWdaMlYwSUhSb1pTQnNZWE4wSUhSeVlXNXpZV04wYVc5dUlIUnZJR05vWldOcklIZG9ZWFFnZDJVZ2JXbG5hSFFnYUdGMlpTQnRhWE56WldRZ2IzVjBJRzl1TGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk5oYkd4SFpYUk1ZWE4wVkhKaGJuTmhZM1JwYjI0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVVNDMHpRVklnTFNCWFpTQm9ZV1FnYm05MElHVjJaVzRnYzJWdWRDQjBhR1VnY21WeGRXVnpkQ0I1WlhRdUlFeGxkQ2R6SUdSdklIUm9ZWFFnYm05M1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWdVpDaDBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1U1pYRjFaWE4wS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVUWlc1MEtHQlRaVzVrYVc1bklGSmxjWFZsYzNRZ1RtOTNMaTR1WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMVI0Um14dmQxTjBZWFJsUTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxmU2twTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOW9ZWE5UWlhSSmJtWnZLU0I3SUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk5oYkd4VFpYUlFiM05KYm1adktDazdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QnNaWFFuY3lCaGJITnZJSFJsYkd3Z2RHaGxJR1ZtZEhCdmN5QnZkWElnYkdGMFpYTjBJSFJoWW14bElHTnZibVpwWjNWeVlYUnBiMjR1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaWgwYUdsekxsOXpjR2xRWVhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emNHbFFZWFF1VUhWemFGQmhlVUYwVkdGaWJHVkRiMjVtYVdjb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUY5allXeHNVMlYwVUc5elNXNW1ieWdwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MyVjBVRzl6U1c1bWIxSmxjWFZsYzNRZ1BTQnVaWGNnVTJWMFVHOXpTVzVtYjFKbGNYVmxjM1FvZEdocGN5NWZjRzl6Vm1WeWMybHZiaXdnZEdocGN5NWZjRzl6Vm1WdVpHOXlTV1FzSUZ3aWFuTmNJaXdnVTFCSlgxWkZVbE5KVDA0c0lFUmxkbWxqWlVsdVptOHVSMlYwUVhCd1JHVjJhV05sU1c1bWJ5Z3BLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjMlZ1WkNoelpYUlFiM05KYm1adlVtVnhkV1Z6ZEM1MGIwMWxjM05oWjJVb0tTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdWMmhsYmlCM1pTQmthWE5qYjI1dVpXTjBMQ0IzWlNCemFHOTFiR1FnWVd4emJ5QnpkRzl3SUhSb1pTQndaWEpwYjJScFl5QndhVzVuTGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0JmYzNSdmNGQmxjbWx2WkdsalVHbHVaeWdwSUh0Y2JpQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1ZmNHVnlhVzlrYVdOUWFXNW5WR2h5WldGa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIzWlNCM1pYSmxJR0ZzY21WaFpIa2djMlYwSUhWd0xDQmpiR1ZoYmlCMWNDQmlaV1p2Y21VZ2NtVnpkR0Z5ZEdsdVp5NWNiaUFnSUNBZ0lDQWdJQ0FnSUdOc1pXRnlTVzUwWlhKMllXd29kR2hwY3k1ZmNHVnlhVzlrYVdOUWFXNW5WR2h5WldGa0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0JsY21sdlpHbGpVR2x1WjFSb2NtVmhaQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJUWlc1a0lHRWdVR2x1WnlCMGJ5QjBhR1VnVTJWeWRtVnlYRzRnSUNBZ1gyUnZVR2x1WnlncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMllYSWdjR2x1WnlBOUlGQnBibWRJWld4d1pYSXVSMlZ1WlhKaGRHVlFhVzVuVW1WeGRXVnpkQ2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl0YjNOMFVtVmpaVzUwVUdsdVoxTmxiblFnUFNCd2FXNW5PMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpaVzVrS0hCcGJtY3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRiM04wVW1WalpXNTBVR2x1WjFObGJuUlVhVzFsSUQwZ1JHRjBaUzV1YjNjb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlNaV05sYVhabFpDQmhJRkJ2Ym1jZ1puSnZiU0IwYUdVZ2MyVnlkbVZ5WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2liVndpUGp3dmNHRnlZVzArWEc0Z0lDQWdYMmhoYm1Sc1pVbHVZMjl0YVc1blVHOXVaeWh0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1YyVWdibVZsWkNCMGJ5QnRZV2x1ZEdGcGJpQjBhR2x6SUhScGJXVWdaR1ZzZEdFZ2IzUm9aWEozYVhObElIUm9aU0J6WlhKMlpYSWdkMmxzYkNCdWIzUWdZV05qWlhCMElHOTFjaUJ0WlhOellXZGxjeTVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM0JwVFdWemMyRm5aVk4wWVcxd0xsTmxjblpsY2xScGJXVkVaV3gwWVNBOUlHMHVSMlYwVTJWeWRtVnlWR2x0WlVSbGJIUmhLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyMXZjM1JTWldObGJuUlFiMjVuVW1WalpXbDJaV1FnUFQwZ2JuVnNiQ2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnUm1seWMzUWdjRzl1WnlCeVpXTmxhWFpsWkNCaFpuUmxjaUJoSUdOdmJtNWxZM1JwYjI0c0lHRnVaQ0JoWm5SbGNpQjBhR1VnY0dGcGNtbHVaeUJ3Y205alpYTnpJR2x6SUdaMWJHeDVJR1pwYm1Gc2FYTmxaQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SVGRHRjBkWE1nSVQwZ1UzQnBVM1JoZEhWekxsVnVjR0ZwY21Wa0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLRndpUm1seWMzUWdjRzl1WnlCdlppQmpiMjV1WldOMGFXOXVJR0Z1WkNCcGJpQndZV2x5WldRZ2MzUmhkR1V1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDI5dVVtVmhaSGxVYjFSeVlXNXpZV04wS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1hDSkdhWEp6ZENCd2IyNW5JRzltSUdOdmJtNWxZM1JwYjI0Z1luVjBJSEJoYVhKcGJtY2djSEp2WTJWemN5QnViM1FnWm1sdVlXeHBjMlZrSUhsbGRDNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbDl0YjNOMFVtVmpaVzUwVUc5dVoxSmxZMlZwZG1Wa0lEMGdiVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1SbFluVm5LR0JRYjI1blRHRjBaVzVqZVRva2UwUmhkR1V1Ym05M0tDa2dMU0IwYUdsekxsOXRiM04wVW1WalpXNTBVR2x1WjFObGJuUlVhVzFsZldBcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklGUm9aU0J6WlhKMlpYSWdkMmxzYkNCaGJITnZJSE5sYm1RZ2RYTWdjR2x1WjNNdUlGZGxJRzVsWldRZ2RHOGdjbVZ3YkhrZ2QybDBhQ0JoSUhCdmJtY2djMjhnYVhRZ1pHOWxjMjRuZENCa2FYTmpiMjV1WldOMElIVnpMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltMWNJajQ4TDNCaGNtRnRQbHh1SUNBZ0lGOW9ZVzVrYkdWSmJtTnZiV2x1WjFCcGJtY29iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCd2IyNW5JRDBnVUc5dVowaGxiSEJsY2k1SFpXNWxjbUYwWlZCdmJtZFNaWE56Y0c5dWMyVW9iU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM05sYm1Rb2NHOXVaeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnUVhOcklIUm9aU0JRYVc1UVlXUWdkRzhnZEdWc2JDQjFjeUIzYUdGMElIUm9aU0JOYjNOMElGSmxZMlZ1ZENCVWNtRnVjMkZqZEdsdmJpQjNZWE5jYmlBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdYMk5oYkd4SFpYUk1ZWE4wVkhKaGJuTmhZM1JwYjI0b0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2RzZEZKbGNYVmxjM1JOYzJjZ1BTQnVaWGNnUjJWMFRHRnpkRlJ5WVc1ellXTjBhVzl1VW1WeGRXVnpkQ2dwTGxSdlRXVnpjMkZuWlNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1RFlXeHNhVzVuUjJ4MEtHZHNkRkpsY1hWbGMzUk5jMmN1U1dRcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5elpXNWtLR2RzZEZKbGNYVmxjM1JOYzJjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklGUm9hWE1nYldWMGFHOWtJSGRwYkd3Z1ltVWdZMkZzYkdWa0lIZG9aVzVsZG1WeUlIZGxJSEpsWTJWcGRtVWdZU0J0WlhOellXZGxJR1p5YjIwZ2RHaGxJRU52Ym01bFkzUnBiMjVjYmlBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdMeThnUEhCaGNtRnRJRzVoYldVOVhDSnRaWE56WVdkbFNuTnZibHdpUGp3dmNHRnlZVzArWEc0Z0lDQWdYMjl1VTNCcFRXVnpjMkZuWlZKbFkyVnBkbVZrS0cxbGMzTmhaMlZLYzI5dUtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdSbWx5YzNRZ2QyVWdjR0Z5YzJVZ2RHaGxJR2x1WTI5dGFXNW5JRzFsYzNOaFoyVmNiaUFnSUNBZ0lDQWdkbUZ5SUcwZ1BTQk5aWE56WVdkbExrWnliMjFLYzI5dUtHMWxjM05oWjJWS2MyOXVMazFsYzNOaFoyVXNJSFJvYVhNdVgzTmxZM0psZEhNcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloY0lsSmxZMlZwZG1Wa09sd2lJQ3NnYlM1RVpXTnllWEIwWldSS2MyOXVLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9VM0JwVUhKbFlYVjBhQzVKYzFCeVpXRjFkR2hGZG1WdWRDaHRMa1YyWlc1MFRtRnRaU2twWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTndhVkJ5WldGMWRHZ3VYMmhoYm1Sc1pWQnlaV0YxZEdoTlpYTnpZV2RsS0cwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRVzVrSUhSb1pXNGdkMlVnYzNkcGRHTm9JRzl1SUhSb1pTQmxkbVZ1ZENCMGVYQmxMbHh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLRzB1UlhabGJuUk9ZVzFsS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElFVjJaVzUwY3k1TFpYbFNaWEYxWlhOME9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJoaGJtUnNaVXRsZVZKbGNYVmxjM1FvYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVWMlpXNTBjeTVMWlhsRGFHVmphenBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWTFpYbERhR1ZqYXlodEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1JYWmxiblJ6TGxCaGFYSlNaWE53YjI1elpUcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZRWVdseVVtVnpjRzl1YzJVb2JTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElFVjJaVzUwY3k1RWNtOXdTMlY1YzBGa2RtbGpaVHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWRWNtOXdTMlY1YzBGa2RtbGpaU2h0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUlhabGJuUnpMbEIxY21Ob1lYTmxVbVZ6Y0c5dWMyVTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFHRnVaR3hsVUhWeVkyaGhjMlZTWlhOd2IyNXpaU2h0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUlhabGJuUnpMbEpsWm5WdVpGSmxjM0J2Ym5ObE9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJoaGJtUnNaVkpsWm5WdVpGSmxjM0J2Ym5ObEtHMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQkZkbVZ1ZEhNdVEyRnphRzkxZEU5dWJIbFNaWE53YjI1elpUcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZEWVhOb2IzVjBUMjVzZVZKbGMzQnZibk5sS0cwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCRmRtVnVkSE11VFc5MGIxQjFjbU5vWVhObFVtVnpjRzl1YzJVNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGdVpHeGxUVzkwYjFCMWNtTm9ZWE5sVW1WemNHOXVjMlVvYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVWMlpXNTBjeTVUYVdkdVlYUjFjbVZTWlhGMWFYSmxaRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWVGFXZHVZWFIxY21WU1pYRjFhWEpsWkNodEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1JYWmxiblJ6TGtGMWRHaERiMlJsVW1WeGRXbHlaV1E2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhR0Z1Wkd4bFFYVjBhRU52WkdWU1pYRjFhWEpsWkNodEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1JYWmxiblJ6TGtkbGRFeGhjM1JVY21GdWMyRmpkR2x2YmxKbGMzQnZibk5sT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmhoYm1Sc1pVZGxkRXhoYzNSVWNtRnVjMkZqZEdsdmJsSmxjM0J2Ym5ObEtHMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQkZkbVZ1ZEhNdVUyVjBkR3hsVW1WemNHOXVjMlU2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NUlZVzVrYkdWVFpYUjBiR1ZTWlhOd2IyNXpaU2h0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUlhabGJuUnpMbE5sZEhSc1pXMWxiblJGYm5GMWFYSjVVbVZ6Y0c5dWMyVTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFHRnVaR3hsVTJWMGRHeGxiV1Z1ZEVWdWNYVnBjbmxTWlhOd2IyNXpaU2h0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUlhabGJuUnpMbEJwYm1jNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGdVpHeGxTVzVqYjIxcGJtZFFhVzVuS0cwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCRmRtVnVkSE11VUc5dVp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZKYm1OdmJXbHVaMUJ2Ym1jb2JTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElFVjJaVzUwY3k1TFpYbFNiMnhzVW1WeGRXVnpkRHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWTFpYbFNiMnhzYVc1blVtVnhkV1Z6ZENodEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1JYWmxiblJ6TGtOaGJtTmxiRlJ5WVc1ellXTjBhVzl1VW1WemNHOXVjMlU2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhR0Z1Wkd4bFEyRnVZMlZzVkhKaGJuTmhZM1JwYjI1U1pYTndiMjV6WlNodEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1JYWmxiblJ6TGxObGRGQnZjMGx1Wm05U1pYTndiMjV6WlRwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlvWVc1a2JHVlRaWFJRYjNOSmJtWnZVbVZ6Y0c5dWMyVW9iU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRVYyWlc1MGN5NVFZWGxCZEZSaFlteGxSMlYwVkdGaWJHVkRiMjVtYVdjNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTndhVkJoZENBOVBTQnVkV3hzS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMyVnVaQ2hRWVhsQmRGUmhZbXhsUTI5dVptbG5Ma1psWVhSMWNtVkVhWE5oWW14bFRXVnpjMkZuWlNoU1pYRjFaWE4wU1dSSVpXeHdaWEl1U1dRb1hDSndZWFJqYjI1bVhDSXBLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6Y0dsUVlYUXVYMmhoYm1Sc1pVZGxkRlJoWW14bFEyOXVabWxuS0cwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCRmRtVnVkSE11VUdGNVFYUlVZV0pzWlVkbGRFSnBiR3hFWlhSaGFXeHpPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTndhVkJoZEM1ZmFHRnVaR3hsUjJWMFFtbHNiRVJsZEdGcGJITlNaWEYxWlhOMEtHMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQkZkbVZ1ZEhNdVVHRjVRWFJVWVdKc1pVSnBiR3hRWVhsdFpXNTBPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTndhVkJoZEM1ZmFHRnVaR3hsUW1sc2JGQmhlVzFsYm5SQlpIWnBZMlVvYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVWMlpXNTBjeTVRWVhsQmRGUmhZbXhsUjJWMFQzQmxibFJoWW14bGN6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emNHbFFZWFF1WDJoaGJtUnNaVWRsZEU5d1pXNVVZV0pzWlhOU1pYRjFaWE4wS0cwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCRmRtVnVkSE11VUdGNVFYUlVZV0pzWlVKcGJHeFFZWGx0Wlc1MFJteHZkMFZ1WkdWa09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOd2FWQmhkQzVmYUdGdVpHeGxRbWxzYkZCaGVXMWxiblJHYkc5M1JXNWtaV1FvYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVWMlpXNTBjeTVRY21sdWRHbHVaMUpsYzNCdmJuTmxPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyaGhibVJzWlZCeWFXNTBhVzVuVW1WemNHOXVjMlVvYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVWMlpXNTBjeTVVWlhKdGFXNWhiRk4wWVhSMWMxSmxjM0J2Ym5ObE9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJoaGJtUnNaVlJsY20xcGJtRnNVM1JoZEhWelVtVnpjRzl1YzJVb2JTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElFVjJaVzUwY3k1Q1lYUjBaWEo1VEdWMlpXeERhR0Z1WjJWa09seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJoaGJtUnNaVUpoZEhSbGNubE1aWFpsYkVOb1lXNW5aV1FvYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVWMlpXNTBjeTVGY25KdmNqcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZGY25KdmNrVjJaVzUwS0cwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCRmRtVnVkSE11U1c1MllXeHBaRWh0WVdOVGFXZHVZWFIxY21VNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWENKSklHTnZkV3hrSUc1dmRDQjJaWEpwWm5rZ2JXVnpjMkZuWlNCbWNtOXRJRVZtZEhCdmN5NGdXVzkxSUcxcFoyaDBJR2hoZG1VZ2RHOGdWVzR0Y0dGcGNpQkZablJ3YjNNZ1lXNWtJSFJvWlc0Z2NtVmpiMjV1WldOMExsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9ZRWtnWkc5dUozUWdWVzVrWlhKemRHRnVaQ0JGZG1WdWREb2dKSHR0TGtWMlpXNTBUbUZ0Wlgwc0lDUjdiUzVFWVhSaGZTNGdVR1Z5YUdGd2N5QkpJR2hoZG1VZ2JtOTBJR2x0Y0d4bGJXVnVkR1ZrSUdsMElIbGxkQzVnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRjl2YmxkelJYSnliM0pTWldObGFYWmxaQ2hsY25KdmNpbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NTNZWEp1S0Z3aVVtVmpaV2wyWldRZ1YxTWdSWEp5YjNKY0lpd2daWEp5YjNJdVRXVnpjMkZuWlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWDNObGJtUW9iV1Z6YzJGblpTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJxYzI5dUlEMGdiV1Z6YzJGblpTNVViMHB6YjI0b2RHaHBjeTVmYzNCcFRXVnpjMkZuWlZOMFlXMXdLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJOdmJtNHVRMjl1Ym1WamRHVmtLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloY0lsTmxibVJwYm1jNklGd2lJQ3NnYldWemMyRm5aUzVFWldOeWVYQjBaV1JLYzI5dUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk52Ym00dVUyVnVaQ2hxYzI5dUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9YQ0pCYzJ0bFpDQjBieUJ6Wlc1a0xDQmlkWFFnYm05MElHTnZibTVsWTNSbFpEb2dYQ0lnS3lCdFpYTnpZV2RsTGtSbFkzSjVjSFJsWkVwemIyNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMmx6VUc5elNXUldZV3hwWkNod2IzTkpaQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaGNHOXpTV1FwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTUzWVhKdUtGd2lVRzl6SUVsa0lHTmhibTV2ZENCaVpTQnVkV3hzSUc5eUlHVnRjSFI1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIQnZjMGxrTG14bGJtZDBhQ0ErSURFMktWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWQyRnliaWhjSWxCdmN5QkpaQ0JwY3lCbmNtVmhkR1Z5SUhSb1lXNGdNVFlnWTJoaGNtRmpkR1Z5YzF3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hjRzl6U1dRdWJXRjBZMmdvZEdocGN5NWZjbVZuWlhoSmRHVnRjMFp2Y2xCdmMwbGtLU2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbmRoY200b1hDSlFiM01nU1dRZ1kyRnVibTkwSUdsdVkyeDFaR1VnYzNCbFkybGhiQ0JqYUdGeVlXTjBaWEp6WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWDJselJXWjBjRzl6UVdSa2NtVnpjMVpoYkdsa0tHVm1kSEJ2YzBGa1pISmxjM01wWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb0lXVm1kSEJ2YzBGa1pISmxjM01wWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTUzWVhKdUtGd2lWR2hsSUVWbWRIQnZjeUJoWkdSeVpYTnpJR05oYm01dmRDQmlaU0J1ZFd4c0lHOXlJR1Z0Y0hSNVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJGdWFYUnBjMlZrUldaMGNHOXpRV1JrY21WemN5QTlJR1ZtZEhCdmMwRmtaSEpsYzNNdWNtVndiR0ZqWlNndlhuZGJjMTAvY3pwY1hDOWNYQzh2TENCY0lsd2lLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QlVhR1VnWldaMGNHOXpRV1JrY21WemN5QnRZWGtnWW1VZ1lXNGdTVkFnWVdSa2NtVnpjeUJ2Y2lCcFppQmhkWFJ2UVdSa2NtVnpjMUpsYzI5c2RYUnBiMjVGYm1GaWJHVmtJR2x6SUhSeWRXVXNJR0VnUmxGRVRseHVJQ0FnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9JWFJvYVhNdVgyRjFkRzlCWkdSeVpYTnpVbVZ6YjJ4MWRHbHZia1Z1WVdKc1pXUWdKaVlnSVhOaGJtbDBhWE5sWkVWbWRIQnZjMEZrWkhKbGMzTXViV0YwWTJnb2RHaHBjeTVmY21WblpYaEpkR1Z0YzBadmNrVm1kSEJ2YzBGa1pISmxjM01wS1NCOGZGeHVJQ0FnSUNBZ0lDQWdJQ0FnS0hSb2FYTXVYMkYxZEc5QlpHUnlaWE56VW1WemIyeDFkR2x2YmtWdVlXSnNaV1FnSmlZZ0lYTmhibWwwYVhObFpFVm1kSEJ2YzBGa1pISmxjM011YldGMFkyZ29kR2hwY3k1ZmNtVm5aWGhKZEdWdGMwWnZja1p4Wkc1RlpuUndiM05CWkdSeVpYTnpLU2xjYmlBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1ZDJGeWJpaGNJbFJvWlNCRlpuUndiM01nWVdSa2NtVnpjeUJwY3lCdWIzUWdhVzRnZEdobElISnBaMmgwSUdadmNtMWhkRndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWhoYzFObGNtbGhiRTUxYldKbGNrTm9ZVzVuWldRb2RYQmtZWFJsWkZObGNtbGhiRTUxYldKbGNpbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6WlhKcFlXeE9kVzFpWlhJZ0lUMGdkWEJrWVhSbFpGTmxjbWxoYkU1MWJXSmxjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQklZWE5GWm5Sd2IzTkJaR1J5WlhOelEyaGhibWRsWkNoMWNHUmhkR1ZrUldaMGNHOXpRV1JrY21WemN5bGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlsWm5Sd2IzTkJaR1J5WlhOeklDRTlJSFZ3WkdGMFpXUkZablJ3YjNOQlpHUnlaWE56TzF4dUlDQWdJSDFjYmx4dUlDQWdJR0Z6ZVc1aklGOWhkWFJ2VW1WemIyeDJaVVZtZEhCdmMwRmtaSEpsYzNNb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOWhkWFJ2UVdSa2NtVnpjMUpsYzI5c2RYUnBiMjVGYm1GaWJHVmtLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJRnh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNObGNtbGhiRTUxYldKbGNpQjhmQ0FoZEdocGN5NWZaR1YyYVdObFFYQnBTMlY1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1ZDJGeWJpaGNJazFwYzNOcGJtY2djMlZ5YVdGc1RuVnRZbVZ5SUdGdVpDOXZjaUJrWlhacFkyVkJjR2xMWlhrdUlFNWxaV1FnZEc4Z2MyVjBJSFJvWlcwZ1ltVm1iM0psSUdadmNpQkJkWFJ2SUVGa1pISmxjM01nZEc4Z2QyOXlheTVjSWlrN0lDQWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdselUyVmpkWEpsUTI5dWJtVmpkR2x2YmlBOUlIUm9hWE11WDJselUyVmpkWEpsUTI5dWJtVmpkR2x2YmlncE8xeHVYRzRnSUNBZ0lDQWdJSFpoY2lCelpYSjJhV05sSUQwZ2JtVjNJRVJsZG1salpVRmtaSEpsYzNOVFpYSjJhV05sS0NrN1hHNWNiaUFnSUNBZ0lDQWdkSEo1WEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCaFpHUnlaWE56VW1WemNHOXVjMlVnSUNBZ0lEMGdZWGRoYVhRZ2MyVnlkbWxqWlM1U1pYUnlhV1YyWlZObGNuWnBZMlVvZEdocGN5NWZjMlZ5YVdGc1RuVnRZbVZ5TENCMGFHbHpMbDlrWlhacFkyVkJjR2xMWlhrc0lIUm9hWE11WDJGamNYVnBjbVZ5UTI5a1pTd2dhWE5UWldOMWNtVkRiMjV1WldOMGFXOXVMQ0IwYUdsekxsOXBibFJsYzNSTmIyUmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJoWkdSeVpYTnpVbVZ6Y0c5dWMyVktjMjl1SUQwZ1lYZGhhWFFnWVdSa2NtVnpjMUpsYzNCdmJuTmxMbXB6YjI0b0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBSR1YyYVdObFUzUmhkSFZ6SUQwZ1QySnFaV04wTG1GemMybG5iaWh1WlhjZ1JHVjJhV05sUVdSa2NtVnpjMU4wWVhSMWN5aHBjMU5sWTNWeVpVTnZibTVsWTNScGIyNHBMQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjRG9nWVdSa2NtVnpjMUpsYzNCdmJuTmxTbk52Ymk1cGNDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1jV1J1T2lCaFpHUnlaWE56VW1WemNHOXVjMlZLYzI5dUxtWnhaRzRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUkdWMmFXTmxRV1JrY21WemMxSmxjM0J2Ym5ObFEyOWtaVG9nWVdSa2NtVnpjMUpsYzNCdmJuTmxMbk4wWVhSMWN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlNaWE53YjI1elpWTjBZWFIxYzBSbGMyTnlhWEIwYVc5dU9pQmhaR1J5WlhOelVtVnpjRzl1YzJVdWMzUmhkSFZ6VkdWNGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlNaWE53YjI1elpVMWxjM05oWjJVNklHRmtaSEpsYzNOU1pYTndiMjV6WlM1emRHRjBkWE5VWlhoMExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lFeGhjM1JWY0dSaGRHVmtPaUJoWkdSeVpYTnpVbVZ6Y0c5dWMyVktjMjl1TG14aGMzUmZkWEJrWVhSbFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZMkYwWTJnZ0tHVnljaWtnWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEVSbGRtbGpaVk4wWVhSMWN5QTlJSFJvYVhNdVEzVnljbVZ1ZEVSbGRtbGpaVk4wWVhSMWN5QjhmQ0J1WlhjZ1JHVjJhV05sUVdSa2NtVnpjMU4wWVhSMWN5aHBjMU5sWTNWeVpVTnZibTVsWTNScGIyNHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBSR1YyYVdObFUzUmhkSFZ6TGtSbGRtbGpaVUZrWkhKbGMzTlNaWE53YjI1elpVTnZaR1VnUFNCRVpYWnBZMlZCWkdSeVpYTnpVbVZ6Y0c5dWMyVkRiMlJsTGtSRlZrbERSVjlUUlZKV1NVTkZYMFZTVWs5U08xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFJHVjJhV05sVTNSaGRIVnpMbEpsYzNCdmJuTmxVM1JoZEhWelJHVnpZM0pwY0hScGIyNGdQU0JsY25JN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SRVpYWnBZMlZUZEdGMGRYTXVVbVZ6Y0c5dWMyVk5aWE56WVdkbElEMGdaWEp5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1ZDJGeWJpaGxjbkl1YldWemMyRm5aU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QkRkWE4wYjIxRmRtVnVkQ2duUkdWMmFXTmxRV1JrY21WemMwTm9ZVzVuWldRbkxDQjdaR1YwWVdsc09pQjBhR2x6TGtOMWNuSmxiblJFWlhacFkyVlRkR0YwZFhOOUtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3SUZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0dGa1pISmxjM05TWlhOd2IyNXpaUzV6ZEdGMGRYTWdQVDBnU0hSMGNGTjBZWFIxYzBOdlpHVXVUbTkwUm05MWJtUXBYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRVJsZG1salpWTjBZWFIxY3k1RVpYWnBZMlZCWkdSeVpYTnpVbVZ6Y0c5dWMyVkRiMlJsSUQwZ1JHVjJhV05sUVdSa2NtVnpjMUpsYzNCdmJuTmxRMjlrWlM1SlRsWkJURWxFWDFORlVrbEJURjlPVlUxQ1JWSTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RFWlhacFkyVkJaR1J5WlhOelEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11UTNWeWNtVnVkRVJsZG1salpWTjBZWFIxYzMwcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1LQ0ZoWkdSeVpYTnpVbVZ6Y0c5dWMyVXViMnNnZkh3Z0lXRmtaSEpsYzNOU1pYTndiMjV6WlVwemIyNGdmSHdnSVhSb2FYTXVRM1Z5Y21WdWRFUmxkbWxqWlZOMFlYUjFjeTVCWkdSeVpYTnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJFWlhacFkyVlRkR0YwZFhNdVJHVjJhV05sUVdSa2NtVnpjMUpsYzNCdmJuTmxRMjlrWlNBOUlFUmxkbWxqWlVGa1pISmxjM05TWlhOd2IyNXpaVU52WkdVdVJFVldTVU5GWDFORlVsWkpRMFZmUlZKU1QxSTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RFWlhacFkyVkJaR1J5WlhOelEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11UTNWeWNtVnVkRVJsZG1salpWTjBZWFIxYzMwcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NUlZWE5GWm5Sd2IzTkJaR1J5WlhOelEyaGhibWRsWkNoMGFHbHpMa04xY25KbGJuUkVaWFpwWTJWVGRHRjBkWE11UVdSa2NtVnpjeWtwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEVSbGRtbGpaVk4wWVhSMWN5NUVaWFpwWTJWQlpHUnlaWE56VW1WemNHOXVjMlZEYjJSbElEMGdSR1YyYVdObFFXUmtjbVZ6YzFKbGMzQnZibk5sUTI5a1pTNUJSRVJTUlZOVFgwNVBWRjlEU0VGT1IwVkVPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QkRkWE4wYjIxRmRtVnVkQ2duUkdWMmFXTmxRV1JrY21WemMwTm9ZVzVuWldRbkxDQjdaR1YwWVdsc09pQjBhR2x6TGtOMWNuSmxiblJFWlhacFkyVlRkR0YwZFhOOUtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUIxY0dSaGRHVWdaR1YyYVdObElHRnVaQ0JqYjI1dVpXTjBhVzl1SUdGa1pISmxjM05jYmlBZ0lDQWdJQ0FnZG1GeUlIQnliM1J2WTI5c0lEMGdhWE5UWldOMWNtVkRiMjV1WldOMGFXOXVJRDhnWENKM2MzTmNJaUE2SUZ3aWQzTmNJanRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaV1owY0c5elFXUmtjbVZ6Y3lBOUlIQnliM1J2WTI5c0lDc2dYQ0k2THk5Y0lpQXJJSFJvYVhNdVEzVnljbVZ1ZEVSbGRtbGpaVk4wWVhSMWN5NUJaR1J5WlhOek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5amIyNXVMa0ZrWkhKbGMzTWdQU0IwYUdsekxsOWxablJ3YjNOQlpHUnlaWE56TzF4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUkVaWFpwWTJWVGRHRjBkWE11UkdWMmFXTmxRV1JrY21WemMxSmxjM0J2Ym5ObFEyOWtaU0E5SUVSbGRtbGpaVUZrWkhKbGMzTlNaWE53YjI1elpVTnZaR1V1VTFWRFEwVlRVenRjYmx4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25SR1YyYVdObFFXUmtjbVZ6YzBOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGFHbHpMa04xY25KbGJuUkVaWFpwWTJWVGRHRjBkWE45S1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWDJselZYTnBibWRJZEhSd2N5Z3BJRnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDZG9kSFJ3Y3pvbklEMDlJR1J2WTNWdFpXNTBMbXh2WTJGMGFXOXVMbkJ5YjNSdlkyOXNJRDhnZEhKMVpTQTZJR1poYkhObE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHUmxkR1Z5YldsdVpTQjNhR1YwYUdWeUlIUnZJSFZ6WlNCM2MzTWdiM0lnYm05MFhHNGdJQ0FnWDJselUyVmpkWEpsUTI5dWJtVmpkR2x2YmlncElGeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmx6VlhOcGJtZElkSFJ3Y3lncElIeDhJSFJvYVhNdVgyWnZjbU5sVTJWamRYSmxWMlZpVTI5amEyVjBjenRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCN1UzQnBMQ0JUVUVsZlZrVlNVMGxQVG4wN1hHNGlMQ0pwYlhCdmNuUWdlMU4xWTJObGMzTlRkR0YwWlgwZ1puSnZiU0FuTGk5TlpYTnpZV2RsY3ljN1hHNWNiaTh2SUR4emRXMXRZWEo1UGx4dUx5OGdVbVZ3Y21WelpXNTBjeUIwYUdVZ015QlFZV2x5YVc1bklITjBZWFIxYzJWeklIUm9ZWFFnZEdobElGTndhU0JwYm5OMFlXNTRZMlVnWTJGdUlHSmxJR2x1TGx4dUx5OGdQQzl6ZFcxdFlYSjVQbHh1Wlhod2IzSjBJR052Ym5OMElGTndhVk4wWVhSMWN5QTlJRnh1ZTF4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUZCaGFYSmxaQ0JoYm1RZ1EyOXVibVZqZEdWa1hHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUZCaGFYSmxaRU52Ym01bFkzUmxaRG9nSjFCaGFYSmxaRU52Ym01bFkzUmxaQ2NzWEc0Z0lDQWdYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdVR0ZwY21Wa0lHSjFkQ0IwY25scGJtY2dkRzhnWlhOMFlXSnNhWE5vSUdFZ1kyOXVibVZqZEdsdmJpQmNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ1VHRnBjbVZrUTI5dWJtVmpkR2x1WnpvZ0oxQmhhWEpsWkVOdmJtNWxZM1JwYm1jbkxGeHVJQ0FnSUZ4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUZWdWNHRnBjbVZrWEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJRlZ1Y0dGcGNtVmtPaUFuVlc1d1lXbHlaV1FuWEc1OU8xeHVYRzR2THlBOGMzVnRiV0Z5ZVQ1Y2JpOHZJRlJvWlNCVGNHa2dhVzV6ZEdGdVkyVWdZMkZ1SUdKbElHbHVJRzl1WlNCdlppQjBhR1Z6WlNCbWJHOTNjeUJoZENCaGJua2djRzlwYm5RZ2FXNGdkR2x0WlM1Y2JpOHZJRHd2YzNWdGJXRnllVDVjYm1WNGNHOXlkQ0JqYjI1emRDQlRjR2xHYkc5M0lEMGdYRzU3WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnUTNWeWNtVnVkR3g1SUdkdmFXNW5JSFJvY205MVoyZ2dkR2hsSUZCaGFYSnBibWNnVUhKdlkyVnpjeUJHYkc5M0xseHVJQ0FnSUM4dklFaGhjSEJsYm5NZ1pIVnlhVzVuSUhSb1pTQlZibkJoYVhKbFpDQlRjR2xUZEdGMGRYTXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lGQmhhWEpwYm1jNklDZFFZV2x5YVc1bkp5eGNiaUFnSUNCY2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCRGRYSnlaVzUwYkhrZ1oyOXBibWNnZEdoeWIzVm5hQ0IwYUdVZ2RISmhibk5oWTNScGIyNGdVSEp2WTJWemN5QkdiRzkzTGx4dUlDQWdJQzh2SUVOaGJtNXZkQ0JvWVhCd1pXNGdhVzRnZEdobElGVnVjR0ZwY21Wa0lGTndhVk4wWVhSMWN5NWNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ1ZISmhibk5oWTNScGIyNDZJQ2RVY21GdWMyRmpkR2x2Ymljc1hHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5Qk9iM1FnYVc0Z1lXNTVJRzltSUhSb1pTQnZkR2hsY2lCemRHRjBaWE11WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJRWxrYkdVNklDZEpaR3hsSjF4dWZUdGNibHh1THk4Z1BITjFiVzFoY25rK1hHNHZMeUJTWlhCeVpYTmxiblJ6SUhSb1pTQlFZV2x5YVc1bklFWnNiM2NnVTNSaGRHVWdaSFZ5YVc1bklIUm9aU0J3WVdseWFXNW5JSEJ5YjJObGMzTWdYRzR2THlBOEwzTjFiVzFoY25rK1hHNWxlSEJ2Y25RZ1kyeGhjM01nVUdGcGNtbHVaMFpzYjNkVGRHRjBaVnh1ZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0hOMFlYUmxLU0I3WEc0Z0lDQWdJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQXZMeUJUYjIxbElIUmxlSFFnZEdoaGRDQmpZVzRnWW1VZ1pHbHpjR3hoZVdWa0lHbHVJSFJvWlNCUVlXbHlhVzVuSUZCeWIyTmxjM01nVTJOeVpXVnVYRzRnSUNBZ0lDQWdJQzh2SUhSb1lYUWdhVzVrYVdOaGRHVnpJSGRvWVhRZ2RHaGxJSEJoYVhKcGJtY2djSEp2WTJWemN5QnBjeUIxY0NCMGJ5NWNiaUFnSUNBZ0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNCMGFHbHpMazFsYzNOaFoyVWdQU0J1ZFd4c08xeHVYRzRnSUNBZ0lDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNBdkx5QlhhR1Z1SUhSeWRXVXNJR2wwSUcxbFlXNXpJSFJvWVhRZ2RHaGxJRVZHVkZCUFV5QnBjeUJ6YUc5cGJtY2dkR2hsSUdOdmJtWnBjbTFoZEdsdmJpQmpiMlJsTEZ4dUlDQWdJQ0FnSUNBdkx5QmhibVFnZVc5MWNpQjFjMlZ5SUc1bFpXUnpJSFJ2SUhCeVpYTnpJRmxGVXlCdmNpQk9UeUJ2YmlCMGFHVWdSVVpVVUU5VExseHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVRWGRoYVhScGJtZERhR1ZqYTBaeWIyMUZablJ3YjNNZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUZkb1pXNGdkSEoxWlN3Z2VXOTFJRzVsWldRZ2RHOGdaR2x6Y0d4aGVTQjBhR1VnV1VWVEwwNVBJR0oxZEhSdmJuTWdiMjRnZVc5MUlIQmhhWEpwYm1jZ2MyTnlaV1Z1WEc0Z0lDQWdJQ0FnSUM4dklHWnZjaUI1YjNWeUlIVnpaWElnZEc4Z1kyOXVabWx5YlNCMGFHVWdZMjlrWlM1Y2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0IwYUdsekxrRjNZV2wwYVc1blEyaGxZMnRHY205dFVHOXpJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNBdkx5QlVhR2x6SUdseklIUm9aU0JqYjI1bWFYSnRZWFJwYjI0Z1kyOWtaU0JtYjNJZ2RHaGxJSEJoYVhKcGJtY2djSEp2WTJWemN5NWNiaUFnSUNBZ0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acGNtMWhkR2x2YmtOdlpHVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklFbHVaR2xqWVhSbGN5QjNhR1YwYUdWeUlIUm9aU0JRWVdseWFXNW5JRVpzYjNjZ2FHRnpJR1pwYm1semFHVmtJR2wwY3lCcWIySXVYRzRnSUNBZ0lDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVHYVc1cGMyaGxaQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OGdTVzVrYVdOaGRHVnpJSGRvWlhSb1pYSWdjR0ZwY21sdVp5QjNZWE1nYzNWalkyVnpjMloxYkNCdmNpQnViM1F1WEc0Z0lDQWdJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBZ0lDQWdkR2hwY3k1VGRXTmpaWE56Wm5Wc0lEMGdiblZzYkR0Y2JseHVJQ0FnSUNBZ0lDQnBaaWh6ZEdGMFpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1QySnFaV04wTG1GemMybG5iaWgwYUdsekxDQnpkR0YwWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOUlDQWdYRzU5WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JVY21GdWMyRmpkR2x2YmxSNWNHVWdQU0JjYm50Y2JpQWdJQ0JRZFhKamFHRnpaVG9nSjFCMWNtTm9ZWE5sSnl4Y2JpQWdJQ0JTWldaMWJtUTZJQ2RTWldaMWJtUW5MRnh1SUNBZ0lFTmhjMmh2ZFhSUGJteDVPaUFuUTJGemFHOTFkRTl1YkhrbkxGeHVJQ0FnSUUxUFZFODZJQ2ROVDFSUEp5eGNiaUFnSUNCVFpYUjBiR1U2SUNkVFpYUjBiR1VuTEZ4dUlDQWdJRk5sZEhSc1pXMWxiblJGYm5GMWFYSjVPaUFuVTJWMGRHeGxiV1Z1ZEVWdWNYVnBjbmtuTEZ4dUlDQWdJRWRsZEV4aGMzUlVjbUZ1YzJGamRHbHZiam9nSjBkbGRFeGhjM1JVY21GdWMyRmpkR2x2Ymljc1hHNGdJQ0FnVUhKbFlYVjBhRG9nSjFCeVpXRjFkR2duTEZ4dUlDQWdJRUZqWTI5MWJuUldaWEpwWm5rNklDZEJZMk52ZFc1MFZtVnlhV1o1SjF4dWZUdGNibHh1THk4Z1BITjFiVzFoY25rK1hHNHZMeUJWYzJWa0lHRnpJR0VnY21WMGRYSnVJR2x1SUhSb1pTQkpibWwwYVdGMFpWUjRJRzFsZEdodlpITWdkRzhnYzJsbmJtbG1lU0IzYUdWMGFHVnlJRnh1THk4Z2RHaGxJSFJ5WVc1ellXTjBhVzl1SUhkaGN5QnBibWwwYVdGMFpXUWdiM0lnYm05MExDQmhibVFnWVNCeVpXRnpiMjRnZEc4Z1oyOGdkMmwwYUNCcGRDNWNiaTh2SUR3dmMzVnRiV0Z5ZVQ1Y2JtVjRjRzl5ZENCamJHRnpjeUJKYm1sMGFXRjBaVlI0VW1WemRXeDBYRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYVc1cGRHbGhkR1ZrTENCdFpYTnpZV2RsS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lDOHZJRmRvWlhSb1pYSWdkR2hsSUhSNElIZGhjeUJwYm1sMGFXRjBaV1F1WEc0Z0lDQWdJQ0FnSUM4dklGZG9aVzRnZEhKMVpTd2dlVzkxSUdOaGJpQmxlSEJsWTNRZ2RYQmtZWFJsWkNCMGJ5QjViM1Z5SUhKbFoybHpkR1Z5WldRZ1kyRnNiR0poWTJzdVhHNGdJQ0FnSUNBZ0lDOHZJRmRvWlc0Z1ptRnNjMlVzSUhsdmRTQmpZVzRnY21WMGNua2dZMkZzYkdsdVp5QjBhR1VnU1c1cGRHbGhkR1ZZSUcxbGRHaHZaQzVjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQjBhR2x6TGtsdWFYUnBZWFJsWkNBOUlHbHVhWFJwWVhSbFpEdGNibHh1SUNBZ0lDQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OGdWR1Y0ZENCMGFHRjBJR2RwZG1WeklISmxZWE52YmlCbWIzSWdkR2hsSUVsdWFYUnBZWFJsWkNCbWJHRm5MQ0JsYzNCbFkybGhiR3g1SUdsdUlHTmhjMlVnYjJZZ1ptRnNjMlV1SUZ4dUlDQWdJQ0FnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVRXVnpjMkZuWlNBOUlHMWxjM05oWjJVN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2THlBOGMzVnRiV0Z5ZVQ1Y2JpOHZJRlZ6WldRZ1lYTWdZU0J5WlhSMWNtNGdhVzRnWTJGc2JITWdiV2xrSUhSeVlXNXpZV04wYVc5dUlIUnZJR3hsZENCNWIzVWdhMjV2ZDF4dUx5OGdkMmhsZEdobGNpQjBhR1VnWTJGc2JDQjNZWE1nZG1Gc2FXUWdiM0lnYm05MExseHVMeThnVkdobGMyVWdZWFIwY21saWRYUmxjeUIzYjNKcklHWnZjaUJEVDAwZ2FXNTBaWEp2Y0M1Y2JpOHZJRHd2YzNWdGJXRnllVDVjYm1WNGNHOXlkQ0JqYkdGemN5Qk5hV1JVZUZKbGMzVnNkRnh1ZTF4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUZSb2FYTWdaR1ZtWVhWc2RDQnpkSFZqZEhWeVpTQjNiM0pyY3lCbWIzSWdRMDlOSUdsdWRHVnliM0F1WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0haaGJHbGtMQ0J0WlhOellXZGxLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1V1lXeHBaQ0E5SUhaaGJHbGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrMWxjM05oWjJVZ1BTQnRaWE56WVdkbE8xeHVJQ0FnSUgxY2JuMGdJQ0FnWEc1Y2JpOHZJRHh6ZFcxdFlYSjVQbHh1THk4Z1VtVndjbVZ6Wlc1MGN5QjBhR1VnVTNSaGRHVWdaSFZ5YVc1bklHRWdWSEpoYm5OaFkzUnBiMjVHYkc5M1hHNHZMeUE4TDNOMWJXMWhjbmsrWEc1bGVIQnZjblFnWTJ4aGMzTWdWSEpoYm5OaFkzUnBiMjVHYkc5M1UzUmhkR1ZjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lod2IzTlNaV1pKWkN3Z2RIbHdaU3dnWVcxdmRXNTBRMlZ1ZEhNc0lHMWxjM05oWjJVc0lHMXpaeWxjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNBdkx5QWdWR2hsSUdsa0lHZHBkbVZ1SUhSdklIUm9hWE1nZEhKaGJuTmhZM1JwYjI1Y2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0IwYUdsekxsQnZjMUpsWmtsa0lDQWdQU0J3YjNOU1pXWkpaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUpaQ0FnSUNBZ0lDQWdJRDBnY0c5elVtVm1TV1E3SUM4dklHOWljMjlzWlhSbExDQmlkWFFnYkdWMEozTWdiV0ZwYm5SaGFXNGdhWFFnWm05eUlHNXZkeXdnZEc4Z2JXVmhiaUJ6WVcxbElHRnpJRkJ2YzFKbFprbGtMbHh1WEc0Z0lDQWdJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQXZMeUJRZFhKamFHRnpaUzlTWldaMWJtUXZVMlYwZEd4bEx5NHVMbHh1SUNBZ0lDQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lIUm9hWE11Vkhsd1pTQTlJSFI1Y0dVN1hHNWNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklFRWdkR1Y0ZENCdFpYTnpZV2RsSUhSdklHUnBjM0JzWVhrZ2IyNGdlVzkxY2lCVWNtRnVjMkZqZEdsdmJpQkdiRzkzSUZOamNtVmxibHh1SUNBZ0lDQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lIUm9hWE11UkdsemNHeGhlVTFsYzNOaFoyVWdQU0J0YzJjN1hHNWNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklFRnRiM1Z1ZENCcGJpQmpaVzUwY3lCbWIzSWdkR2hwY3lCMGNtRnVjMkZqZEdsdmJseHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVRVzF2ZFc1MFEyVnVkSE1nUFNCaGJXOTFiblJEWlc1MGN6dGNibHh1SUNBZ0lDQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OGdWMmgwYUdWeUlIUm9aU0J5WlhGMVpYTjBJR2hoY3lCaVpXVnVJSE5sYm5RZ2RHOGdkR2hsSUVWR1ZGQlBVeUI1WlhRZ2IzSWdibTkwTGx4dUlDQWdJQ0FnSUNBdkx5QkpiaUIwYUdVZ1VHRnBjbVZrUTI5dWJtVmpkR2x1WnlCemRHRjBaU3dnZEdobElIUnlZVzV6WVdOMGFXOXVJR2x6SUdsdWFYUnBZWFJsWkZ4dUlDQWdJQ0FnSUNBdkx5QmlkWFFnZEdobElISmxjWFZsYzNRZ2FYTWdiMjVzZVNCelpXNTBJRzl1WTJVZ2RHaGxJR052Ym01bFkzUnBiMjRnYVhNZ2NtVmpiM1psY21Wa0xseHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVVbVZ4ZFdWemRGTmxiblFnUFNCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBZ0lDQWdMeThnVkdobElIUnBiV1VnZDJobGJpQjBhR1VnY21WeGRXVnpkQ0IzWVhNZ2MyVnVkQ0IwYnlCMGFHVWdSVVpVVUU5VExseHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVVbVZ4ZFdWemRGUnBiV1VnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OGdWR2hsSUhScGJXVWdkMmhsYmlCM1pTQnNZWE4wSUdGemEyVmtJR1p2Y2lCaGJpQjFjR1JoZEdVc0lHbHVZMngxWkdsdVp5QjBhR1VnYjNKcFoybHVZV3dnY21WeGRXVnpkQ0JoZENCbWFYSnpkRnh1SUNBZ0lDQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lIUm9hWE11VEdGemRGTjBZWFJsVW1WeGRXVnpkRlJwYldVZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUZSb1pTQnBaQ0J2WmlCMGFHVWdiR0Z6ZENCbmJIUWdjbVZ4ZFdWemRDQnRaWE56WVdkbElIUm9ZWFFnZDJGeklITmxiblF1SUhWelpXUWdkRzhnYldGMFkyZ2dkMmwwYUNCMGFHVWdjbVZ6Y0c5dWMyVXVYRzRnSUNBZ0lDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVNWVhOMFIyeDBVbVZ4ZFdWemRFbGtJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OGdWMmhsZEdobGNpQjNaU2R5WlNCamRYSnlaVzUwYkhrZ1lYUjBaVzF3ZEdsdVp5QjBieUJEWVc1alpXd2dkR2hsSUhSeVlXNXpZV04wYVc5dUxseHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVRWFIwWlcxd2RHbHVaMVJ2UTJGdVkyVnNJRDBnYm5Wc2JEdGNiaUFnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUZkb1pXNGdkR2hwY3lCbWJHRm5JR2x6SUc5dUxDQjViM1VnYm1WbFpDQjBieUJrYVhOd2JHRjVJSFJvWlNCa2FXZHVZWFIxY21VZ1lXTmpaWEIwTDJSbFkyeHBibVVnWW5WMGRHOXVjeUJwYmlCNWIzVnlJRnh1SUNBZ0lDQWdJQ0F2THlCMGNtRnVjMkZqZEdsdmJpQm1iRzkzSUhOamNtVmxiaTVjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQjBhR2x6TGtGM1lXbDBhVzVuVTJsbmJtRjBkWEpsUTJobFkyc2dQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OGdWMmhsYmlCMGFHbHpJR1pzWVdjZ2FYTWdiMjRzSUhsdmRTQnVaV1ZrSUhSdklITm9iM2NnZVc5MWNpQjFjMlZ5SUhSb1pTQndhRzl1WlNCdWRXMWlaWElnZEc4Z1kyRnNiQ0IwYnlCblpYUWdkR2hsSUdGMWRHaHZjbWx6WVhScGIyNGdZMjlrWlM1Y2JpQWdJQ0FnSUNBZ0x5OGdWR2hsYmlCNWIzVWdibVZsWkNCMGJ5QndjbTkyYVdSbElIbHZkWElnZFhObGNpQnRaV0Z1Y3lCMGJ5QmxiblJsY2lCMGFHRjBJR2RwZG1WdUlHTnZaR1VnWVc1a0lITjFZbTFwZENCcGRDQjJhV0VnVTNWaWJXbDBRWFYwYUVOdlpHVW9LUzVjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQjBhR2x6TGtGM1lXbDBhVzVuVUdodmJtVkdiM0pCZFhSb0lEMGdiblZzYkR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnTHk4Z1YyaGxkR2hsY2lCMGFHbHpJSFJ5WVc1ellXTjBhVzl1SUdac2IzY2dhWE1nYjNabGNpQnZjaUJ1YjNRdVhHNGdJQ0FnSUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnZEdocGN5NUdhVzVwYzJobFpDQTlJR1poYkhObE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNBdkx5QlVhR1VnYzNWalkyVnpjeUJ6ZEdGMFpTQnZaaUIwYUdseklIUnlZVzV6WVdOMGFXOXVMaUJUZEdGeWRITWdiMlptSUdGeklGVnVhMjV2ZDI0dVhHNGdJQ0FnSUNBZ0lDOHZJRmRvWlc0Z1ptbHVhWE5vWldRc0lHTmhiaUJpWlNCVGRXTmpaWE56TENCR1lXbHNaV1FnVDFJZ1ZXNXJibTkzYmk1Y2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0IwYUdsekxsTjFZMk5sYzNNZ1BTQlRkV05qWlhOelUzUmhkR1V1Vlc1cmJtOTNianRjYmx4dUlDQWdJQ0FnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBZ0lDQWdMeThnVkdobElISmxjM0J2Ym5ObElHRjBJSFJvWlNCbGJtUWdiMllnZEdobElIUnlZVzV6WVdOMGFXOXVMaUJjYmlBZ0lDQWdJQ0FnTHk4Z1RXbG5hSFFnYm05MElHSmxJSEJ5WlhObGJuUWdhVzRnWVd4c0lHVmtaMlVnWTJGelpYTXVYRzRnSUNBZ0lDQWdJQzh2SUZsdmRTQmpZVzRnZEdobGJpQjBkWEp1SUhSb2FYTWdUV1Z6YzJGblpTQnBiblJ2SUhSb1pTQmhjSEJ5YjNCeWFXRjBaU0J6ZEhKMVkzUjFjbVVzWEc0Z0lDQWdJQ0FnSUM4dklITjFZMmdnWVhNZ1VIVnlZMmhoYzJWU1pYTndiMjV6WlN3Z1VtVm1kVzVrVW1WemNHOXVjMlVzSUdWMFkxeHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVVbVZ6Y0c5dWMyVWdQU0J1ZFd4c08xeHVYRzRnSUNBZ0lDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNBdkx5QlVhR1VnYldWemMyRm5aU0IwYUdVZ2QyVWdjbVZqWldsMlpXUWdabkp2YlNCRlJsUlFUMU1nZEdoaGRDQjBiMnhrSUhWeklIUm9ZWFFnYzJsbmJtRjBkWEpsSUdseklISmxjWFZwY21Wa0xseHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVVMmxuYm1GMGRYSmxVbVZ4ZFdseVpXUk5aWE56WVdkbElEMGdiblZzYkR0Y2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lDOHZJRlJvWlNCdFpYTnpZV2RsSUhSb1pTQjNaU0J5WldObGFYWmxaQ0JtY205dElFVkdWRkJQVXlCMGFHRjBJSFJ2YkdRZ2RYTWdkR2hoZENCUWFHOXVaU0JHYjNJZ1FYVjBhQ0JwY3lCeVpYRjFhWEpsWkM1Y2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0IwYUdsekxsQm9iMjVsUm05eVFYVjBhRkpsY1hWcGNtVmtUV1Z6YzJGblpTQTlJRzUxYkd3N1hHNWNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklGUm9aU0IwYVcxbElIZG9aVzRnZEdobElHTmhibU5sYkNCaGRIUmxiWEIwSUhkaGN5QnRZV1JsTGx4dUlDQWdJQ0FnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyRnVZMlZzUVhSMFpXMXdkRlJwYldVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0F2THlCVWFHVWdjbVZ4ZFdWemRDQnRaWE56WVdkbElIUm9ZWFFnZDJVZ1lYSmxJSE5sYm1ScGJtY3ZjMlZ1ZENCMGJ5QjBhR1VnYzJWeWRtVnlMbHh1SUNBZ0lDQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lIUm9hWE11VW1WeGRXVnpkQ0E5SUcxbGMzTmhaMlU3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUZkb1pYUm9aWElnZDJVbmNtVWdZM1Z5Y21WdWRHeDVJSGRoYVhScGJtY2dabTl5SUdFZ1IyVjBJRXhoYzNRZ1ZISmhibk5oWTNScGIyNGdVbVZ6Y0c5dWMyVWdkRzhnWjJWMElHRnVJSFZ3WkdGMFpTNGdYRzRnSUNBZ0lDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVCZDJGcGRHbHVaMGRzZEZKbGMzQnZibk5sSUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMa2RNVkZKbGMzQnZibk5sVUc5elVtVm1TV1FnUFNCdWRXeHNPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGTmxiblFvYlhObktWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVTWlhGMVpYTjBVMlZ1ZENBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVbVZ4ZFdWemRGUnBiV1VnUFNCRVlYUmxMbTV2ZHlncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGt4aGMzUlRkR0YwWlZKbGNYVmxjM1JVYVcxbElEMGdSR0YwWlM1dWIzY29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUVhWE53YkdGNVRXVnpjMkZuWlNBOUlHMXpaenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkRZVzVqWld4c2FXNW5LRzF6WnlsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRWFIwWlcxd2RHbHVaMVJ2UTJGdVkyVnNJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RFlXNWpaV3hCZEhSbGJYQjBWR2x0WlNBOUlFUmhkR1V1Ym05M0tDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJHbHpjR3hoZVUxbGMzTmhaMlVnUFNCdGMyYzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1EyRnVZMlZzUm1GcGJHVmtLRzF6WnlsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRWFIwWlcxd2RHbHVaMVJ2UTJGdVkyVnNJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJHbHpjR3hoZVUxbGMzTmhaMlVnUFNCdGMyYzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1EyRnNiR2x1WjBkc2RDaG5iSFJTWlhGMVpYTjBTV1FwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxrRjNZV2wwYVc1blIyeDBVbVZ6Y0c5dWMyVWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGt4aGMzUlRkR0YwWlZKbGNYVmxjM1JVYVcxbElEMGdSR0YwWlM1dWIzY29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NU1ZWE4wUjJ4MFVtVnhkV1Z6ZEVsa0lEMGdaMngwVW1WeGRXVnpkRWxrTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWR2ZEVkc2RGSmxjM0J2Ym5ObEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UVhkaGFYUnBibWRIYkhSU1pYTndiMjV6WlNBOUlHWmhiSE5sTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCR1lXbHNaV1FvY21WemNHOXVjMlVzSUcxelp5bGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VTNWalkyVnpjeUE5SUZOMVkyTmxjM05UZEdGMFpTNUdZV2xzWldRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Um1sdWFYTm9aV1FnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsSmxjM0J2Ym5ObElEMGdjbVZ6Y0c5dWMyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJHbHpjR3hoZVUxbGMzTmhaMlVnUFNCdGMyYzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1UybG5ibUYwZFhKbFVtVnhkV2x5WldRb2MzQnBUV1Z6YzJGblpTd2diWE5uS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVRhV2R1WVhSMWNtVlNaWEYxYVhKbFpFMWxjM05oWjJVZ1BTQnpjR2xOWlhOellXZGxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrRjNZV2wwYVc1blUybG5ibUYwZFhKbFEyaGxZMnNnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrUnBjM0JzWVhsTlpYTnpZV2RsSUQwZ2JYTm5PMXh1SUNBZ0lIMWNibHh1SUNBZ0lGTnBaMjVoZEhWeVpWSmxjM0J2Ym1SbFpDaHRjMmNwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxrRjNZV2wwYVc1blUybG5ibUYwZFhKbFEyaGxZMnNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUVhWE53YkdGNVRXVnpjMkZuWlNBOUlHMXpaenRjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnVUdodmJtVkdiM0pCZFhSb1VtVnhkV2x5WldRb2MzQnBUV1Z6YzJGblpTd2diWE5uS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFhRzl1WlVadmNrRjFkR2hTWlhGMWFYSmxaRTFsYzNOaFoyVWdQU0J6Y0dsTlpYTnpZV2RsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa0YzWVdsMGFXNW5VR2h2Ym1WR2IzSkJkWFJvSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUVhWE53YkdGNVRXVnpjMkZuWlNBOUlHMXpaenRjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnUVhWMGFFTnZaR1ZUWlc1MEtHMXpaeWxjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVFYZGhhWFJwYm1kUWFHOXVaVVp2Y2tGMWRHZ2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RWFYTndiR0Y1VFdWemMyRm5aU0E5SUcxelp6dGNiaUFnSUNCOVhHNWNiaUFnSUNCRGIyMXdiR1YwWldRb2MzUmhkR1VzSUhKbGMzQnZibk5sTENCdGMyY3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGxOMVkyTmxjM01nUFNCemRHRjBaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVNaWE53YjI1elpTQTlJSEpsYzNCdmJuTmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrWnBibWx6YUdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVCZEhSbGJYQjBhVzVuVkc5RFlXNWpaV3dnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUJkMkZwZEdsdVowZHNkRkpsYzNCdmJuTmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVFYZGhhWFJwYm1kVGFXZHVZWFIxY21WRGFHVmpheUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrRjNZV2wwYVc1blVHaHZibVZHYjNKQmRYUm9JRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJHbHpjR3hoZVUxbGMzTmhaMlVnUFNCdGMyYzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ZXNXJibTkzYmtOdmJYQnNaWFJsWkNodGMyY3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGxOMVkyTmxjM01nUFNCVGRXTmpaWE56VTNSaGRHVXVWVzVyYm05M2JqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1U1pYTndiMjV6WlNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVSbWx1YVhOb1pXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtGMGRHVnRjSFJwYm1kVWIwTmhibU5sYkNBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa0YzWVdsMGFXNW5SMngwVW1WemNHOXVjMlVnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUJkMkZwZEdsdVoxTnBaMjVoZEhWeVpVTm9aV05ySUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRWGRoYVhScGJtZFFhRzl1WlVadmNrRjFkR2dnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUVhWE53YkdGNVRXVnpjMkZuWlNBOUlHMXpaenRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHZJRHh6ZFcxdFlYSjVQbHh1THk4Z1ZYTmxaQ0JoY3lCaElISmxkSFZ5YmlCcGJpQjBhR1VnVTNWaWJXbDBRWFYwYUVOdlpHVWdiV1YwYUc5a0lIUnZJSE5wWjI1cFpua2dkMmhsZEdobGNpQkRiMlJsSUdseklIWmhiR2xrWEc0dkx5QThMM04xYlcxaGNuaytYRzVsZUhCdmNuUWdZMnhoYzNNZ1UzVmliV2wwUVhWMGFFTnZaR1ZTWlhOMWJIUmNibnRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWgyWVd4cFpFWnZjbTFoZEN3Z2JXVnpjMkZuWlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVWbUZzYVdSR2IzSnRZWFFnUFNCMllXeHBaRVp2Y20xaGREdGNibHh1SUNBZ0lDQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OGdWR1Y0ZENCMGFHRjBJR2RwZG1WeklISmxZWE52YmlCbWIzSWdTVzUyWVd4cFpHbDBlVnh1SUNBZ0lDQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lIUm9hWE11VFdWemMyRm5aU0E5SUcxbGMzTmhaMlU3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVTNCcFEyOXVabWxuWEc1N1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVISnBiblJOWlhKamFHRnVkRU52Y0hrZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRY205dGNIUkdiM0pEZFhOMGIyMWxja052Y0hsUGJrVm1kSEJ2Y3lBOUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbE5wWjI1aGRIVnlaVVpzYjNkUGJrVm1kSEJ2Y3lBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11Ulc1aFlteGxaRkJ5YVc1MFRXVnlZMmhoYm5SRGIzQjVJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJXNWhZbXhsWkZCeWIyMXdkRVp2Y2tOMWMzUnZiV1Z5UTI5d2VVOXVSV1owY0c5eklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ulc1aFlteGxaRk5wWjI1aGRIVnlaVVpzYjNkUGJrVm1kSEJ2Y3lBOUlHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUZrWkZKbFkyVnBjSFJEYjI1bWFXY29iV1Z6YzJGblpVUmhkR0VwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVRY205dGNIUkdiM0pEZFhOMGIyMWxja052Y0hsUGJrVm1kSEJ2Y3lBbUppQjBhR2x6TGtWdVlXSnNaV1JRY205dGNIUkdiM0pEZFhOMGIyMWxja052Y0hsUGJrVm1kSEJ2Y3lsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aVVJoZEdFdWNISnZiWEIwWDJadmNsOWpkWE4wYjIxbGNsOWpiM0I1SUQwZ2RHaHBjeTVRY205dGNIUkdiM0pEZFhOMGIyMWxja052Y0hsUGJrVm1kSEJ2Y3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NVRhV2R1WVhSMWNtVkdiRzkzVDI1RlpuUndiM01nSmlZZ2RHaHBjeTVGYm1GaWJHVmtVMmxuYm1GMGRYSmxSbXh2ZDA5dVJXWjBjRzl6S1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxSR0YwWVM1d2NtbHVkRjltYjNKZmMybG5ibUYwZFhKbFgzSmxjWFZwY21Wa1gzUnlZVzV6WVdOMGFXOXVjeUE5SUhSb2FYTXVVMmxuYm1GMGRYSmxSbXh2ZDA5dVJXWjBjRzl6TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsQnlhVzUwVFdWeVkyaGhiblJEYjNCNUlDWW1JSFJvYVhNdVJXNWhZbXhsWkZCeWFXNTBUV1Z5WTJoaGJuUkRiM0I1S1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J0WlhOellXZGxSR0YwWVM1d2NtbHVkRjl0WlhKamFHRnVkRjlqYjNCNUlEMGdkR2hwY3k1UWNtbHVkRTFsY21Ob1lXNTBRMjl3ZVR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXVnpjMkZuWlVSaGRHRTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ZHOVRkSEpwYm1jb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdCUWNtOXRjSFJHYjNKRGRYTjBiMjFsY2tOdmNIbFBia1ZtZEhCdmN6b2tlM1JvYVhNdVVISnZiWEIwUm05eVEzVnpkRzl0WlhKRGIzQjVUMjVGWm5Sd2IzTjlJRk5wWjI1aGRIVnlaVVpzYjNkUGJrVm1kSEJ2Y3pva2UzUm9hWE11VTJsbmJtRjBkWEpsUm14dmQwOXVSV1owY0c5emZTQlFjbWx1ZEUxbGNtTm9ZVzUwUTI5d2VUb2dKSHQwYUdsekxsQnlhVzUwVFdWeVkyaGhiblJEYjNCNWZXQTdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdWSEpoYm5OaFkzUnBiMjVQY0hScGIyNXpYRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOMWMzUnZiV1Z5VW1WalpXbHdkRWhsWVdSbGNpQTlJRndpWENJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOMWMzUnZiV1Z5VW1WalpXbHdkRVp2YjNSbGNpQTlJRndpWENJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDIxbGNtTm9ZVzUwVW1WalpXbHdkRWhsWVdSbGNpQTlJRndpWENJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDIxbGNtTm9ZVzUwVW1WalpXbHdkRVp2YjNSbGNpQTlJRndpWENJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnVTJWMFEzVnpkRzl0WlhKU1pXTmxhWEIwU0dWaFpHVnlLR04xYzNSdmJXVnlVbVZqWldsd2RFaGxZV1JsY2lsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk4xYzNSdmJXVnlVbVZqWldsd2RFaGxZV1JsY2lBOUlHTjFjM1J2YldWeVVtVmpaV2x3ZEVobFlXUmxjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlRaWFJEZFhOMGIyMWxjbEpsWTJWcGNIUkdiMjkwWlhJb1kzVnpkRzl0WlhKU1pXTmxhWEIwUm05dmRHVnlLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzVnpkRzl0WlhKU1pXTmxhWEIwUm05dmRHVnlJRDBnWTNWemRHOXRaWEpTWldObGFYQjBSbTl2ZEdWeU8xeHVJQ0FnSUgxY2JpQWdJQ0JUWlhSTlpYSmphR0Z1ZEZKbFkyVnBjSFJJWldGa1pYSW9iV1Z5WTJoaGJuUlNaV05sYVhCMFNHVmhaR1Z5S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiV1Z5WTJoaGJuUlNaV05sYVhCMFNHVmhaR1Z5SUQwZ2JXVnlZMmhoYm5SU1pXTmxhWEIwU0dWaFpHVnlPMXh1SUNBZ0lIMWNiaUFnSUNCVFpYUk5aWEpqYUdGdWRGSmxZMlZwY0hSR2IyOTBaWElvYldWeVkyaGhiblJTWldObGFYQjBSbTl2ZEdWeUtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYldWeVkyaGhiblJTWldObGFYQjBSbTl2ZEdWeUlEMGdiV1Z5WTJoaGJuUlNaV05sYVhCMFJtOXZkR1Z5TzF4dUlDQWdJSDFjYmlBZ0lDQkJaR1JQY0hScGIyNXpLRzFsYzNOaFoyVkVZWFJoS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVVJoZEdFdVkzVnpkRzl0WlhKZmNtVmpaV2x3ZEY5b1pXRmtaWElnUFNCMGFHbHpMbDlqZFhOMGIyMWxjbEpsWTJWcGNIUklaV0ZrWlhJN1hHNGdJQ0FnSUNBZ0lHMWxjM05oWjJWRVlYUmhMbU4xYzNSdmJXVnlYM0psWTJWcGNIUmZabTl2ZEdWeUlEMGdkR2hwY3k1ZlkzVnpkRzl0WlhKU1pXTmxhWEIwUm05dmRHVnlPMXh1SUNBZ0lDQWdJQ0J0WlhOellXZGxSR0YwWVM1dFpYSmphR0Z1ZEY5eVpXTmxhWEIwWDJobFlXUmxjaUE5SUhSb2FYTXVYMjFsY21Ob1lXNTBVbVZqWldsd2RFaGxZV1JsY2p0Y2JpQWdJQ0FnSUNBZ2JXVnpjMkZuWlVSaGRHRXViV1Z5WTJoaGJuUmZjbVZqWldsd2RGOW1iMjkwWlhJZ1BTQjBhR2x6TGw5dFpYSmphR0Z1ZEZKbFkyVnBjSFJHYjI5MFpYSTdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzFsYzNOaFoyVkVZWFJoTzF4dUlDQWdJSDFjYm4waUxDSnBiWEJ2Y25RZ2UxSmxjWFZsYzNSSlpFaGxiSEJsY24wZ1puSnZiU0FuTGk5U1pYRjFaWE4wU1dSSVpXeHdaWEluTzF4dWFXMXdiM0owSUh0Q2FXeHNVR0Y1YldWdWRDd2dVR0Y1UVhSVVlXSnNaVU52Ym1acFp5d2dVR0Y1YldWdWRFaHBjM1J2Y25sRmJuUnllU3dnUW1sc2JGSmxkSEpwWlhaaGJGSmxjM1ZzZEN3Z1FtbHNiRk4wWVhSMWMxSmxjM0J2Ym5ObGZTQm1jbTl0SUNjdUwxQmhlVUYwVkdGaWJHVW5PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdVM0JwVUdGNVFYUlVZV0pzWlZ4dWV5QWdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jM0JwS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM0JwSUQwZ2MzQnBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmNnUFNCamIyNXpiMnhsTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5JRDBnYm1WM0lGQmhlVUYwVkdGaWJHVkRiMjVtYVdjb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlVhR2x6SUdSbGJHVm5ZWFJsSUhkcGJHd2dZbVVnWTJGc2JHVmtJSGRvWlc0Z2RHaGxJRVZtZEhCdmN5QnVaV1ZrY3lCMGJ5QnJibTkzSUhSb1pTQmpkWEp5Wlc1MElITjBZWFJsSUc5bUlHRWdZbWxzYkNCbWIzSWdZU0IwWVdKc1pTNGdYRzRnSUNBZ0x5OGdQSEJoY21FZ0x6NWNiaUFnSUNBdkx5QlFZWEpoYldWMFpYSnpPanh3WVhKaElDOCtYRzRnSUNBZ0x5OGdZbWxzYkVsa0lDMGdWR2hsSUhWdWFYRjFaU0JwWkdWdWRHbG1hV1Z5SUc5bUlIUm9aU0JpYVd4c0xpQkpaaUJsYlhCMGVTd2dhWFFnYldWaGJuTWdkR2hoZENCMGFHVWdVR0Y1UVhSVVlXSnNaU0JtYkc5M0lHOXVJSFJvWlNCRlpuUndiM01nYVhNZ2FuVnpkQ0J6ZEdGeWRHbHVaeXdnWVc1a0lIUm9aU0JzYjI5cmRYQWdhWE1nWW5rZ2RHRmliR1ZKWkM0OGNHRnlZU0F2UGx4dUlDQWdJQzh2SUhSaFlteGxTV1FnTFNCVWFHVWdhV1JsYm5ScFptbGxjaUJ2WmlCMGFHVWdkR0ZpYkdVZ2RHaGhkQ0IwYUdVZ1ltbHNiQ0JwY3lCbWIzSXVJRHh3WVhKaElDOCtYRzRnSUNBZ0x5OGdiM0JsY21GMGIzSkpaQ0F0SUZSb1pTQnBaQ0J2WmlCMGFHVWdiM0JsY21GMGIzSWdaVzUwWlhKbFpDQnZiaUIwYUdVZ1pXWjBjRzl6TGlBOGNHRnlZU0F2UGx4dUlDQWdJQzh2SUR4d1lYSmhJQzgrWEc0Z0lDQWdMeThnVW1WMGRYSnVPanh3WVhKaElDOCtYRzRnSUNBZ0x5OGdXVzkxSUc1bFpXUWdkRzhnY21WMGRYSnVJSFJvWlNCamRYSnlaVzUwSUhOMFlYUmxJRzltSUhSb1pTQmlhV3hzTGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0JIWlhSQ2FXeHNVM1JoZEhWektHSnBiR3hKWkN3Z2RHRmliR1ZKWkN3Z2IzQmxjbUYwYjNKSlpDd2djR0Y1YldWdWRFWnNiM2RUZEdGeWRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVFdWMGFHOWtJRzV2ZENCcGJYQnNaVzFsYm5SbFpDNGdVR3hsWVhObElHOTJaWEozY21sMFpTQjBhR2x6SUcxbGRHaHZaQ0JwYmlCNWIzVnlJRkJQVXljcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFRmljM1J5WVdOMElHMWxkR2h2WkN3Z2JYVnpkQ0JwYlhCc1pXMWxiblFnYVc0Z1VFOVRJSE41YzNSbGJWeHVJQ0FnSUVKcGJHeFFZWGx0Wlc1MFVtVmpaV2wyWldRb1ltbHNiRkJoZVcxbGJuUXNJSFZ3WkdGMFpXUkNhV3hzUkdGMFlTa2dlMXh1SUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMDFsZEdodlpDQnViM1FnYVcxd2JHVnRaVzUwWldRdUlGQnNaV0Z6WlNCdmRtVnlkM0pwZEdVZ2RHaHBjeUJ0WlhSb2IyUWdhVzRnZVc5MWNpQlFUMU1uS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSUGNHVnVWR0ZpYkdWektHOXdaWEpoZEc5eVNXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2ROWlhSb2IyUWdibTkwSUdsdGNHeGxiV1Z1ZEdWa0xpQlFiR1ZoYzJVZ2IzWmxjbmR5YVhSbElIUm9hWE1nYldWMGFHOWtJR2x1SUhsdmRYSWdVRTlUSnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUW1sc2JGQmhlVzFsYm5SR2JHOTNSVzVrWldRb2JXVnpjMkZuWlNrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owMWxkR2h2WkNCdWIzUWdhVzF3YkdWdFpXNTBaV1F1SUZCc1pXRnpaU0J2ZG1WeWQzSnBkR1VnZEdocGN5QnRaWFJvYjJRZ2FXNGdlVzkxY2lCUVQxTW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlFkWE5vVUdGNVFYUlVZV0pzWlVOdmJtWnBaeWdwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpjR2t1WDNObGJtUW9kR2hwY3k1RGIyNW1hV2N1Vkc5TlpYTnpZV2RsS0ZKbGNYVmxjM1JKWkVobGJIQmxjaTVKWkNoY0luQmhkR052Ym1aY0lpa3BLVHRjYmlBZ0lDQjlJRnh1SUNBZ0lGeHVJQ0FnSUY5b1lXNWtiR1ZIWlhSQ2FXeHNSR1YwWVdsc2MxSmxjWFZsYzNRb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ2Y0dWeVlYUnZja2xrSUQwZ2JTNUVZWFJoVzF3aWIzQmxjbUYwYjNKZmFXUmNJbDA3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBZV0pzWlVsa0lEMGdiUzVFWVhSaFcxd2lkR0ZpYkdWZmFXUmNJbDA3WEc0Z0lDQWdJQ0FnSUhaaGNpQndZWGx0Wlc1MFJteHZkMU4wWVhKMFpXUWdQU0J0TGtSaGRHRmJYQ0p3WVhsdFpXNTBYMlpzYjNkZmMzUmhjblJsWkZ3aVhUdGNibHh1SUNBZ0lDQWdJQ0F2THlCQmMyc2dVRTlUSUdadmNpQkNhV3hzSUVSbGRHRnBiSE1nWm05eUlIUm9hWE1nZEdGaWJHVkpaQ3dnYVc1c2RXUnBibWNnWlc1amIyUmxaQ0JRWVhsdFpXNTBSR0YwWVZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSFJvYVhNdVIyVjBRbWxzYkZOMFlYUjFjeWhjSWx3aUxDQjBZV0pzWlVsa0xDQnZjR1Z5WVhSdmNrbGtMQ0J3WVhsdFpXNTBSbXh2ZDFOMFlYSjBaV1FwS1M1MGFHVnVLR0pwYkd4VGRHRjBkWE1nUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWW1sc2JGTjBZWFIxY3k1VVlXSnNaVWxrSUQwZ2RHRmliR1ZKWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoaWFXeHNVM1JoZEhWekxsUnZkR0ZzUVcxdmRXNTBJRHc5SURBcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktGd2lWR0ZpYkdVZ2FHRnpJREFnZEc5MFlXd2dZVzF2ZFc1MExpQnViM1FnYzJWdVpHbHVaeUJwZENCMGJ5QmxablJ3YjNNdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmlhV3hzVTNSaGRIVnpMbEpsYzNWc2RDQTlJRUpwYkd4U1pYUnlhV1YyWVd4U1pYTjFiSFF1U1U1V1FVeEpSRjlVUVVKTVJWOUpSRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6Y0drdVgzTmxibVFvWW1sc2JGTjBZWFIxY3k1VWIwMWxjM05oWjJVb2JTNUpaQ2twTzF4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUgxY2JseHVJQ0FnSUY5b1lXNWtiR1ZDYVd4c1VHRjViV1Z1ZEVGa2RtbGpaU2h0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHSnBiR3hRWVhsdFpXNTBJRDBnYm1WM0lFSnBiR3hRWVhsdFpXNTBLRzBwTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdRWE5ySUZCUFV5Qm1iM0lnUW1sc2JDQkVaWFJoYVd4ekxDQnBibXgxWkdsdVp5QmxibU52WkdWa0lGQmhlVzFsYm5SRVlYUmhYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb2RHaHBjeTVIWlhSQ2FXeHNVM1JoZEhWektHSnBiR3hRWVhsdFpXNTBMa0pwYkd4SlpDd2dZbWxzYkZCaGVXMWxiblF1VkdGaWJHVkpaQ3dnWW1sc2JGQmhlVzFsYm5RdVQzQmxjbUYwYjNKSlpDd2dZbWxzYkZCaGVXMWxiblF1VUdGNWJXVnVkRVpzYjNkVGRHRnlkR1ZrS1NrdWRHaGxiaWhsZUdsemRHbHVaMEpwYkd4VGRHRjBkWE1nUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVjRhWE4wYVc1blFtbHNiRk4wWVhSMWN5NVNaWE4xYkhRZ0lUMGdRbWxzYkZKbGRISnBaWFpoYkZKbGMzVnNkQzVUVlVORFJWTlRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NTNZWEp1S0Z3aVEyOTFiR1FnYm05MElISmxkSEpwWlhabElFSnBiR3dnVTNSaGRIVnpJR1p2Y2lCUVlYbHRaVzUwSUVGa2RtbGpaUzRnVTJWdVpHbHVaeUJGY25KdmNpQjBieUJGWm5Sd2IzTXVYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM053YVM1ZmMyVnVaQ2hsZUdsemRHbHVaMEpwYkd4VGRHRjBkWE11Vkc5TlpYTnpZV2RsS0cwdVNXUXBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHVjRhWE4wYVc1blVHRjViV1Z1ZEVocGMzUnZjbmtnUFNCbGVHbHpkR2x1WjBKcGJHeFRkR0YwZFhNdVoyVjBRbWxzYkZCaGVXMWxiblJJYVhOMGIzSjVLQ2s3WEc0Z0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQm1iM1Z1WkVWNGFYTjBhVzVuUlc1MGNua2dQU0JsZUdsemRHbHVaMUJoZVcxbGJuUklhWE4wYjNKNUxtWnBibVFvY0dobElEMCtJSEJvWlM1SFpYUlVaWEp0YVc1aGJGSmxaa2xrS0NrZ1BUMGdZbWxzYkZCaGVXMWxiblF1VUhWeVkyaGhjMlZTWlhOd2IyNXpaUzVIWlhSVVpYSnRhVzVoYkZKbFptVnlaVzVqWlVsa0tDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1p2ZFc1a1JYaHBjM1JwYm1kRmJuUnllU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJYWlNCb1lYWmxJR0ZzY21WaFpIa2djSEp2WTJWemMyVmtJSFJvYVhNZ2NHRjViV1Z1ZEM1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QndaWEpvWVhCeklFVm1kSEJ2Y3lCa2FXUWdaMlYwSUc5MWNpQmhZMnR1YjNkc1pXUm5aVzFsYm5RdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUR1YwSjNNZ2RYQmtZWFJsSUVWbWRIQnZjeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1ZDJGeWJpaGNJa2hoWkNCaGJISmxZV1I1SUhKbFkyVnBkbVZrSUhSb2FYTWdZbWxzYkY5d1lYbHRaVzF1ZENCaFpIWnBZMlVnWm5KdmJTQmxablJ3YjNNdUlFbG5ibTl5YVc1bkxsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpjR2t1WDNObGJtUW9aWGhwYzNScGJtZENhV3hzVTNSaGRIVnpMbFJ2VFdWemMyRm5aU2h0TGtsa0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCTVpYUW5jeUJoWkdRZ2RHaGxJRzVsZHlCbGJuUnllU0IwYnlCMGFHVWdhR2x6ZEc5eWVWeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIVndaR0YwWldSSWFYTjBiM0o1Ulc1MGNtbGxjeUE5SUdWNGFYTjBhVzVuVUdGNWJXVnVkRWhwYzNSdmNuazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMWNHUmhkR1ZrU0dsemRHOXllVVZ1ZEhKcFpYTXVjSFZ6YUNoY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYY2dVR0Y1YldWdWRFaHBjM1J2Y25sRmJuUnllU2hpYVd4c1VHRjViV1Z1ZEM1UVlYbHRaVzUwVkhsd1pTNTBiMHh2ZDJWeVEyRnpaU2dwTENCaWFXeHNVR0Y1YldWdWRDNVFkWEpqYUdGelpWSmxjM0J2Ym5ObExsUnZVR0Y1YldWdWRGTjFiVzFoY25rb0tTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIxY0dSaGRHVmtRbWxzYkVSaGRHRWdQU0JDYVd4c1UzUmhkSFZ6VW1WemNHOXVjMlV1Vkc5Q2FXeHNSR0YwWVNoMWNHUmhkR1ZrU0dsemRHOXllVVZ1ZEhKcFpYTXBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJCWkhacGMyVWdVRTlUSUc5bUlHNWxkeUJ3WVhsdFpXNTBJR0ZuWVdsdWMzUWdkR2hwY3lCaWFXeHNMQ0JoYm1RZ2RHaGxJSFZ3WkdGMFpXUWdRbWxzYkVSaGRHRWdkRzhnVTJGMlpTNWNiaUFnSUNBZ0lDQWdJQ0FnSUZCeWIyMXBjMlV1Y21WemIyeDJaU2gwYUdsekxrSnBiR3hRWVhsdFpXNTBVbVZqWldsMlpXUW9ZbWxzYkZCaGVXMWxiblFzSUhWd1pHRjBaV1JDYVd4c1JHRjBZU2twTG5Sb1pXNG9kWEJrWVhSbFpFSnBiR3hUZEdGMGRYTWdQVDRnZTF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTblZ6ZENCcGJpQmpZWE5sSUdOc2FXVnVkQ0JtYjNKbmIzUWdkRzhnYzJWMElIUm9aWE5sT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWd1pHRjBaV1JDYVd4c1UzUmhkSFZ6TGtKcGJHeEpaQ0E5SUdKcGJHeFFZWGx0Wlc1MExrSnBiR3hKWkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWNHUmhkR1ZrUW1sc2JGTjBZWFIxY3k1VVlXSnNaVWxrSUQwZ1ltbHNiRkJoZVcxbGJuUXVWR0ZpYkdWSlpEdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMWNHUmhkR1ZrUW1sc2JGTjBZWFIxY3k1U1pYTjFiSFFnSVQwZ1FtbHNiRkpsZEhKcFpYWmhiRkpsYzNWc2RDNVRWVU5EUlZOVEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTUzWVhKdUtGd2lVRTlUSUVWeWNtOXlaV1FnZDJobGJpQmlaV2x1WnlCQlpIWnBjMlZrSUc5bUlGQmhlVzFsYm5RdUlFeGxkSFJwYm1jZ1JVWlVVRTlUSUd0dWIzY3NJR0Z1WkNCelpXNWthVzVuSUdWNGFYTjBhVzVuSUdKcGJHd2daR0YwWVM1Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVmtRbWxzYkZOMFlYUjFjeTVDYVd4c1JHRjBZU0E5SUdWNGFYTjBhVzVuUW1sc2JGTjBZWFIxY3k1Q2FXeHNSR0YwWVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWd1pHRjBaV1JDYVd4c1UzUmhkSFZ6TGtKcGJHeEVZWFJoSUQwZ2RYQmtZWFJsWkVKcGJHeEVZWFJoTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpjR2t1WDNObGJtUW9kWEJrWVhSbFpFSnBiR3hUZEdGMGRYTXVWRzlOWlhOellXZGxLRzB1U1dRcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRjlvWVc1a2JHVkhaWFJVWVdKc1pVTnZibVpwWnlodEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNCcExsOXpaVzVrS0hSb2FYTXVRMjl1Wm1sbkxsUnZUV1Z6YzJGblpTaHRMa2xrS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWDJoaGJtUnNaVWRsZEU5d1pXNVVZV0pzWlhOU1pYRjFaWE4wS0cwcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J2Y0dWeVlYUnZja2xrSUQwZ2JTNUVZWFJoVzF3aWIzQmxjbUYwYjNKZmFXUmNJbDA3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRWE5ySUZCUFV5Qm1iM0lnUW1sc2JDQkVaWFJoYVd4eklHWnZjaUIwYUdseklIUmhZbXhsU1dRc0lHbHViSFZrYVc1bklHVnVZMjlrWldRZ1VHRjViV1Z1ZEVSaGRHRmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IzQmxibFJoWW14bGMxSmxjM0J2Ym5ObElEMGdkSGx3Wlc5bUlIUm9hWE11UjJWMFQzQmxibFJoWW14bGN5QTlQVDBnSjJaMWJtTjBhVzl1SjF4dUlDQWdJQ0FnSUNBZ0lDQWdQeUIwYUdsekxrZGxkRTl3Wlc1VVlXSnNaWE1vYjNCbGNtRjBiM0pKWkNsY2JpQWdJQ0FnSUNBZ0lDQWdJRG9nYm5Wc2JEdGNiaUFnSUNBZ0lDQWdhV1lnS0NGdmNHVnVWR0ZpYkdWelVtVnpjRzl1YzJVZ2ZId2dJVzl3Wlc1VVlXSnNaWE5TWlhOd2IyNXpaUzVVWVdKc1pVUmhkR0VnZkh3Z0lXOXdaVzVVWVdKc1pYTlNaWE53YjI1elpTNVVZV0pzWlVSaGRHRXViR1Z1WjNSb0tWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdmNHVnVWR0ZpYkdWelVtVnpjRzl1YzJVZ1BTQnVaWGNnUjJWMFQzQmxibFJoWW14bGMxSmxjM0J2Ym5ObEtDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhjSWxSb1pYSmxJR2x6SUc1dklHOXdaVzRnZEdGaWJHVXVYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzQnBMbDl6Wlc1a0tHOXdaVzVVWVdKc1pYTlNaWE53YjI1elpTNVViMDFsYzNOaFoyVW9iUzVKWkNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUY5b1lXNWtiR1ZDYVd4c1VHRjViV1Z1ZEVac2IzZEZibVJsWkNodEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVDYVd4c1VHRjViV1Z1ZEVac2IzZEZibVJsWkNodEtUdGNiaUFnSUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZTF4dUlDQWdJRkJ5WldGMWRHaEZkbVZ1ZEhNc1hHNGdJQ0FnUVdOamIzVnVkRlpsY21sbWVWSmxjWFZsYzNRc0lGeHVJQ0FnSUZCeVpXRjFkR2hQY0dWdVVtVnhkV1Z6ZEN3Z1hHNGdJQ0FnVUhKbFlYVjBhRlJ2Y0hWd1VtVnhkV1Z6ZEN3Z1hHNGdJQ0FnVUhKbFlYVjBhRkJoY25ScFlXeERZVzVqWld4c1lYUnBiMjVTWlhGMVpYTjBMQ0JjYmlBZ0lDQlFjbVZoZFhSb1JYaDBaVzVrVW1WeGRXVnpkQ3hjYmlBZ0lDQlFjbVZoZFhSb1EyOXRjR3hsZEdsdmJsSmxjWFZsYzNRc1hHNGdJQ0FnVUhKbFlYVjBhRU5oYm1ObGJGSmxjWFZsYzNSOUlHWnliMjBnSnk0dlVISmxZWFYwYUNjN1hHNWNibHh1YVcxd2IzSjBJSHRVY21GdWMyRmpkR2x2Ymtac2IzZFRkR0YwWlN3Z1ZISmhibk5oWTNScGIyNVVlWEJsTENCSmJtbDBhV0YwWlZSNFVtVnpkV3gwTENCVGNHbFRkR0YwZFhNc0lGTndhVVpzYjNjc0lGTndhVU52Ym1acFp5d2dWSEpoYm5OaFkzUnBiMjVQY0hScGIyNXpmU0JtY205dElDY3VMMU53YVUxdlpHVnNjeWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJUY0dsUWNtVmhkWFJvWEc1N1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2MzQnBLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzQnBJRDBnYzNCcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY2dQU0JqYjI1emIyeGxPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbklEMGdibVYzSUZOd2FVTnZibVpwWnlncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVsdWFYUnBZWFJsUVdOamIzVnVkRlpsY21sbWVWUjRLSEJ2YzFKbFprbGtLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhabGNtbG1lVTF6WnlBOUlHNWxkeUJCWTJOdmRXNTBWbVZ5YVdaNVVtVnhkV1Z6ZENod2IzTlNaV1pKWkNrdVZHOU5aWE56WVdkbEtDazdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlIUm1jeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZia1pzYjNkVGRHRjBaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjMUpsWmtsa0xDQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVFXTmpiM1Z1ZEZabGNtbG1lU3dnTUN3Z2RtVnlhV1o1VFhObkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKWFlXbDBhVzVuSUdadmNpQkZSbFJRVDFNZ1kyOXVibVZqZEdsdmJpQjBieUJ0WVd0bElHRmpZMjkxYm5RZ2RtVnlhV1o1SUhKbGNYVmxjM1JjSWlrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6Wlc1MFRYTm5JRDBnWENKQmMydGxaQ0JGUmxSUVQxTWdkRzhnZG1WeWFXWjVJR0ZqWTI5MWJuUmNJanRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybHVhWFJwWVhSbFVISmxZWFYwYUZSNEtIUm1jeXdnYzJWdWRFMXpaeWs3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUVsdWFYUnBZWFJsVDNCbGJsUjRLSEJ2YzFKbFprbGtMQ0JoYlc5MWJuUkRaVzUwY3l3Z2IzQjBhVzl1Y3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Yms5d2RHbHZibk1vS1NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnRjMmNnUFNCUFltcGxZM1F1WVhOemFXZHVLRzVsZHlCUWNtVmhkWFJvVDNCbGJsSmxjWFZsYzNRb1lXMXZkVzUwUTJWdWRITXNJSEJ2YzFKbFprbGtLU3hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdRMjl1Wm1sbk9pQjBhR2x6TGtOdmJtWnBaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lFOXdkR2x2Ym5NNklHOXdkR2x2Ym5OY2JpQWdJQ0FnSUNBZ2ZTa3VWRzlOWlhOellXZGxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJtY3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Ymtac2IzZFRkR0YwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YzFKbFprbGtMQ0JVY21GdWMyRmpkR2x2YmxSNWNHVXVVSEpsWVhWMGFDd2dZVzF2ZFc1MFEyVnVkSE1zSUcxelp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdCWFlXbDBhVzVuSUdadmNpQkZSbFJRVDFNZ1kyOXVibVZqZEdsdmJpQjBieUJ0WVd0bElIQnlaV0YxZEdnZ2NtVnhkV1Z6ZENCbWIzSWdKSHNvWVcxdmRXNTBRMlZ1ZEhNZ0x5QXhNREF1TUNrdWRHOUdhWGhsWkNneUtYMWdLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlITmxiblJOYzJjZ1BTQmdRWE5yWldRZ1JVWlVVRTlUSUhSdklHTnlaV0YwWlNCd2NtVmhkWFJvSUdadmNpQWtleWhoYlc5MWJuUkRaVzUwY3lBdklERXdNQzR3S1M1MGIwWnBlR1ZrS0RJcGZXQTdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5cGJtbDBhV0YwWlZCeVpXRjFkR2hVZUNoMFpuTXNJSE5sYm5STmMyY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFbHVhWFJwWVhSbFZHOXdkWEJVZUNod2IzTlNaV1pKWkN3Z2NISmxZWFYwYUVsa0xDQmhiVzkxYm5SRFpXNTBjeXdnYjNCMGFXOXVjeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZiazl3ZEdsdmJuTW9LU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdGMyY2dQU0JQWW1wbFkzUXVZWE56YVdkdUtHNWxkeUJRY21WaGRYUm9WRzl3ZFhCU1pYRjFaWE4wS0hCeVpXRjFkR2hKWkN3Z1lXMXZkVzUwUTJWdWRITXNJSEJ2YzFKbFprbGtLU3hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdRMjl1Wm1sbk9pQjBhR2x6TGtOdmJtWnBaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lFOXdkR2x2Ym5NNklHOXdkR2x2Ym5OY2JpQWdJQ0FnSUNBZ2ZTa3VWRzlOWlhOellXZGxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJtY3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Ymtac2IzZFRkR0YwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YzFKbFprbGtMQ0JVY21GdWMyRmpkR2x2YmxSNWNHVXVVSEpsWVhWMGFDd2dZVzF2ZFc1MFEyVnVkSE1zSUcxelp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdCWFlXbDBhVzVuSUdadmNpQkZSbFJRVDFNZ1kyOXVibVZqZEdsdmJpQjBieUJ0WVd0bElIQnlaV0YxZEdnZ2RHOXdkWEFnY21WeGRXVnpkQ0JtYjNJZ0pIc29ZVzF2ZFc1MFEyVnVkSE1nTHlBeE1EQXVNQ2t1ZEc5R2FYaGxaQ2d5S1gxZ0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhObGJuUk5jMmNnUFNCZ1FYTnJaV1FnUlVaVVVFOVRJSFJ2SUcxaGEyVWdjSEpsWVhWMGFDQjBiM0IxY0NCbWIzSWdKSHNvWVcxdmRXNTBRMlZ1ZEhNZ0x5QXhNREF1TUNrdWRHOUdhWGhsWkNneUtYMWdPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFXNXBkR2xoZEdWUWNtVmhkWFJvVkhnb2RHWnpMQ0J6Wlc1MFRYTm5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkpibWwwYVdGMFpWQmhjblJwWVd4RFlXNWpaV3hzWVhScGIyNVVlQ2h3YjNOU1pXWkpaQ3dnY0hKbFlYVjBhRWxrTENCaGJXOTFiblJEWlc1MGN5d2diM0IwYVc5dWN5QTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrOXdkR2x2Ym5Nb0tTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ0YzJjZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0c1bGR5QlFjbVZoZFhSb1VHRnlkR2xoYkVOaGJtTmxiR3hoZEdsdmJsSmxjWFZsYzNRb2NISmxZWFYwYUVsa0xDQmhiVzkxYm5SRFpXNTBjeXdnY0c5elVtVm1TV1FwTEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JEYjI1bWFXYzZJSFJvYVhNdVEyOXVabWxuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdUM0IwYVc5dWN6b2diM0IwYVc5dWMxeHVJQ0FnSUNBZ0lDQjlLUzVVYjAxbGMzTmhaMlVvS1R0Y2JseHVJQ0FnSUNBZ0lDQjJZWElnZEdaeklEMGdibVYzSUZSeVlXNXpZV04wYVc5dVJteHZkMU4wWVhSbEtGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0c5elVtVm1TV1FzSUZSeVlXNXpZV04wYVc5dVZIbHdaUzVRY21WaGRYUm9MQ0JoYlc5MWJuUkRaVzUwY3l3Z2JYTm5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lGZGhhWFJwYm1jZ1ptOXlJRVZHVkZCUFV5QmpiMjV1WldOMGFXOXVJSFJ2SUcxaGEyVWdjSEpsWVhWMGFDQndZWEowYVdGc0lHTmhibU5sYkd4aGRHbHZiaUJ5WlhGMVpYTjBJR1p2Y2lBa2V5aGhiVzkxYm5SRFpXNTBjeUF2SURFd01DNHdLUzUwYjBacGVHVmtLRElwZldBcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYzJWdWRFMXpaeUE5SUdCQmMydGxaQ0JGUmxSUVQxTWdkRzhnYldGclpTQndjbVZoZFhSb0lIQmhjblJwWVd3Z1kyRnVZMlZzYkdGMGFXOXVJR1p2Y2lBa2V5aGhiVzkxYm5SRFpXNTBjeUF2SURFd01DNHdLUzUwYjBacGVHVmtLRElwZldBN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlwYm1sMGFXRjBaVkJ5WldGMWRHaFVlQ2gwWm5Nc0lITmxiblJOYzJjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVsdWFYUnBZWFJsUlhoMFpXNWtWSGdvY0c5elVtVm1TV1FzSUhCeVpXRjFkR2hKWkN3Z2IzQjBhVzl1Y3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Yms5d2RHbHZibk1vS1NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnRjMmNnUFNCUFltcGxZM1F1WVhOemFXZHVLRzVsZHlCUWNtVmhkWFJvUlhoMFpXNWtVbVZ4ZFdWemRDaHdjbVZoZFhSb1NXUXNJSEJ2YzFKbFprbGtLU3hjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdRMjl1Wm1sbk9pQjBhR2x6TGtOdmJtWnBaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lFOXdkR2x2Ym5NNklHOXdkR2x2Ym5OY2JpQWdJQ0FnSUNBZ2ZTa3VWRzlOWlhOellXZGxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJtY3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Ymtac2IzZFRkR0YwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YzFKbFprbGtMQ0JVY21GdWMyRmpkR2x2YmxSNWNHVXVVSEpsWVhWMGFDd2dNQ3dnYlhObkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKWFlXbDBhVzVuSUdadmNpQkZSbFJRVDFNZ1kyOXVibVZqZEdsdmJpQjBieUJ0WVd0bElIQnlaV0YxZEdnZ1JYaDBaVzVrSUhKbGNYVmxjM1JjSWlrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6Wlc1MFRYTm5JRDBnWENKQmMydGxaQ0JGUmxSUVQxTWdkRzhnYldGclpTQndjbVZoZFhSb0lFVjRkR1Z1WkNCeVpYRjFaWE4wWENJN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlwYm1sMGFXRjBaVkJ5WldGMWRHaFVlQ2gwWm5Nc0lITmxiblJOYzJjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVsdWFYUnBZWFJsUTI5dGNHeGxkR2x2YmxSNEtIQnZjMUpsWmtsa0xDQndjbVZoZFhSb1NXUXNJR0Z0YjNWdWRFTmxiblJ6TENCemRYSmphR0Z5WjJWQmJXOTFiblFnUFNBd0xDQnZjSFJwYjI1eklEMGdibVYzSUZSeVlXNXpZV04wYVc5dVQzQjBhVzl1Y3lncEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJRzF6WnlBOUlFOWlhbVZqZEM1aGMzTnBaMjRvYm1WM0lGQnlaV0YxZEdoRGIyMXdiR1YwYVc5dVVtVnhkV1Z6ZENod2NtVmhkWFJvU1dRc0lHRnRiM1Z1ZEVObGJuUnpMQ0J3YjNOU1pXWkpaQ2tzWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRU52Ym1acFp6b2dkR2hwY3k1RGIyNW1hV2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQlRkWEpqYUdGeVoyVkJiVzkxYm5RNklITjFjbU5vWVhKblpVRnRiM1Z1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRTl3ZEdsdmJuTTZJRzl3ZEdsdmJuTmNiaUFnSUNBZ0lDQWdmU2t1Vkc5TlpYTnpZV2RsS0NrN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhSbWN5QTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrWnNiM2RUZEdGMFpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmMxSmxaa2xrTENCVWNtRnVjMkZqZEdsdmJsUjVjR1V1VUhKbFlYVjBhQ3dnWVcxdmRXNTBRMlZ1ZEhNc0lHMXpaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHQlhZV2wwYVc1bklHWnZjaUJGUmxSUVQxTWdZMjl1Ym1WamRHbHZiaUIwYnlCdFlXdGxJSEJ5WldGMWRHZ2dZMjl0Y0d4bGRHbHZiaUJ5WlhGMVpYTjBJR1p2Y2lBa2V5aGhiVzkxYm5SRFpXNTBjeUF2SURFd01DNHdLUzUwYjBacGVHVmtLRElwZldBcE8xeHVJQ0FnSUNBZ0lDQjJZWElnYzJWdWRFMXpaeUE5SUdCQmMydGxaQ0JGUmxSUVQxTWdkRzhnYldGclpTQndjbVZoZFhSb0lHTnZiWEJzWlhScGIyNGdabTl5SUNSN0tHRnRiM1Z1ZEVObGJuUnpJQzhnTVRBd0xqQXBMblJ2Um1sNFpXUW9NaWw5WUR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmx1YVhScFlYUmxVSEpsWVhWMGFGUjRLSFJtY3l3Z2MyVnVkRTF6WnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnU1c1cGRHbGhkR1ZEWVc1alpXeFVlQ2h3YjNOU1pXWkpaQ3dnY0hKbFlYVjBhRWxrTENCdmNIUnBiMjV6SUQwZ2JtVjNJRlJ5WVc1ellXTjBhVzl1VDNCMGFXOXVjeWdwS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMXpaeUE5SUU5aWFtVmpkQzVoYzNOcFoyNG9ibVYzSUZCeVpXRjFkR2hEWVc1alpXeFNaWEYxWlhOMEtIQnlaV0YxZEdoSlpDd2djRzl6VW1WbVNXUXBMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQkRiMjVtYVdjNklIUm9hWE11UTI5dVptbG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1QzQjBhVzl1Y3pvZ2IzQjBhVzl1YzF4dUlDQWdJQ0FnSUNCOUtTNVViMDFsYzNOaFoyVW9LVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdkR1p6SUQwZ2JtVjNJRlJ5WVc1ellXTjBhVzl1Um14dmQxTjBZWFJsS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdjRzl6VW1WbVNXUXNJRlJ5WVc1ellXTjBhVzl1Vkhsd1pTNVFjbVZoZFhSb0xDQXdMQ0J0YzJjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSWxkaGFYUnBibWNnWm05eUlFVkdWRkJQVXlCamIyNXVaV04wYVc5dUlIUnZJRzFoYTJVZ2NISmxZWFYwYUNCallXNWpaV3hzWVhScGIyNGdjbVZ4ZFdWemRGd2lLVHRjYmlBZ0lDQWdJQ0FnZG1GeUlITmxiblJOYzJjZ1BTQmNJa0Z6YTJWa0lFVkdWRkJQVXlCMGJ5QnRZV3RsSUhCeVpXRjFkR2dnWTJGdVkyVnNiR0YwYVc5dUlISmxjWFZsYzNSY0lqdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJsdWFYUnBZWFJsVUhKbFlYVjBhRlI0S0hSbWN5d2djMlZ1ZEUxelp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gybHVhWFJwWVhSbFVISmxZWFYwYUZSNEtIUm1jeXdnYzJWdWRFMXpaeWxjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDl6Y0drdVEzVnljbVZ1ZEZOMFlYUjFjeUE5UFNCVGNHbFRkR0YwZFhNdVZXNXdZV2x5WldRcElISmxkSFZ5YmlCdVpYY2dTVzVwZEdsaGRHVlVlRkpsYzNWc2RDaG1ZV3h6WlN3Z1hDSk9iM1FnVUdGcGNtVmtYQ0lwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXpjR2t1UTNWeWNtVnVkRVpzYjNjZ0lUMGdVM0JwUm14dmR5NUpaR3hsS1NCeVpYUjFjbTRnYm1WM0lFbHVhWFJwWVhSbFZIaFNaWE4xYkhRb1ptRnNjMlVzSUZ3aVRtOTBJRWxrYkdWY0lpazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM0JwTGtOMWNuSmxiblJHYkc5M0lEMGdVM0JwUm14dmR5NVVjbUZ1YzJGamRHbHZianRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM0JwTGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlNBOUlIUm1jenRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDNOd2FTNWZjMlZ1WkNoMFpuTXVVbVZ4ZFdWemRDa3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOd2FTNURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVMlZ1ZENoelpXNTBUWE5uS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25WSGhHYkc5M1UzUmhkR1ZEYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEdocGN5NWZjM0JwTGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlgwcEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJKYm1sMGFXRjBaVlI0VW1WemRXeDBLSFJ5ZFdVc0lGd2lVSEpsWVhWMGFDQkpibWwwYVdGMFpXUmNJaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMmhoYm1Sc1pWQnlaV0YxZEdoTlpYTnpZV2RsS0cwcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0cwdVJYWmxiblJPWVcxbEtWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRkJ5WldGMWRHaEZkbVZ1ZEhNdVFXTmpiM1Z1ZEZabGNtbG1lVkpsYzNCdmJuTmxPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyaGhibVJzWlVGalkyOTFiblJXWlhKcFpubFNaWE53YjI1elpTaHRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdVSEpsWVhWMGFFVjJaVzUwY3k1UWNtVmhkWFJvVDNCbGJsSmxjM0J2Ym5ObE9seHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlFjbVZoZFhSb1JYWmxiblJ6TGxCeVpXRjFkR2hVYjNCMWNGSmxjM0J2Ym5ObE9seHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlFjbVZoZFhSb1JYWmxiblJ6TGxCeVpXRjFkR2hRWVhKMGFXRnNRMkZ1WTJWc2JHRjBhVzl1VW1WemNHOXVjMlU2WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUZCeVpXRjFkR2hGZG1WdWRITXVVSEpsWVhWMGFFVjRkR1Z1WkZKbGMzQnZibk5sT2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCUWNtVmhkWFJvUlhabGJuUnpMbEJ5WldGMWRHaERiMjF3YkdWMFpWSmxjM0J2Ym5ObE9seHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQlFjbVZoZFhSb1JYWmxiblJ6TGxCeVpXRjFkR2hEWVc1alpXeHNZWFJwYjI1U1pYTndiMjV6WlRwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlvWVc1a2JHVlFjbVZoZFhSb1VtVnpjRzl1YzJVb2JTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktHQkpJR1J2YmlkMElGVnVaR1Z5YzNSaGJtUWdVSEpsWVhWMGFDQkZkbVZ1ZERvZ0pIdHRMa1YyWlc1MFRtRnRaWDBzSUNSN2JTNUVZWFJoZlM0Z1VHVnlhR0Z3Y3lCSklHaGhkbVVnYm05MElHbHRjR3hsYldWdWRHVmtJR2wwSUhsbGRDNWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lGOW9ZVzVrYkdWQlkyTnZkVzUwVm1WeWFXWjVVbVZ6Y0c5dWMyVW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcGJtTnZiV2x1WjFCdmMxSmxaa2xrSUQwZ2JTNUVZWFJoTG5CdmMxOXlaV1pmYVdRN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1VnUFNCMGFHbHpMbDl6Y0drdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjM0JwTGtOMWNuSmxiblJHYkc5M0lDRTlJRk53YVVac2IzY3VWSEpoYm5OaFkzUnBiMjRnZkh3Z1kzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbExrWnBibWx6YUdWa0lIeDhJQ0ZqZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1VUc5elVtVm1TV1FnUFQwOUlHbHVZMjl0YVc1blVHOXpVbVZtU1dRcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLR0JTWldObGFYWmxaQ0JCWTJOdmRXNTBJRlpsY21sbWVTQnlaWE53YjI1elpTQmlkWFFnU1NCM1lYTWdibTkwSUhkaGFYUnBibWNnWm05eUlHOXVaUzRnU1c1amIyMXBibWNnVUc5eklGSmxaaUJKUkRvZ0pIdHBibU52YldsdVoxQnZjMUpsWmtsa2ZXQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDOHZJRlJJTFRGQkxDQlVTQzB5UVZ4dVhHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNURiMjF3YkdWMFpXUW9iUzVIWlhSVGRXTmpaWE56VTNSaGRHVW9LU3dnYlN3Z1hDSkJZMk52ZFc1MElGWmxjbWxtZVNCVWNtRnVjMkZqZEdsdmJpQkZibVJsWkM1Y0lpazdYRzRnSUNBZ0lDQWdJQzh2SUZSSUxUWkJMQ0JVU0MwMlJWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFSNFJteHZkMU4wWVhSbFEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11WDNOd2FTNURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVjlLU2s3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUY5b1lXNWtiR1ZRY21WaGRYUm9VbVZ6Y0c5dWMyVW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCcGJtTnZiV2x1WjFCdmMxSmxaa2xrSUQwZ2JTNUVZWFJoTG5CdmMxOXlaV1pmYVdRN1hHNGdJQ0FnSUNBZ0lIWmhjaUJqZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1VnUFNCMGFHbHpMbDl6Y0drdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjM0JwTGtOMWNuSmxiblJHYkc5M0lDRTlJRk53YVVac2IzY3VWSEpoYm5OaFkzUnBiMjRnZkh3Z1kzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbExrWnBibWx6YUdWa0lIeDhJQ0ZqZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1VUc5elVtVm1TV1FnUFQwOUlHbHVZMjl0YVc1blVHOXpVbVZtU1dRcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLR0JTWldObGFYWmxaQ0JRY21WaGRYUm9JSEpsYzNCdmJuTmxJR0oxZENCSklIZGhjeUJ1YjNRZ2QyRnBkR2x1WnlCbWIzSWdiMjVsTGlCSmJtTnZiV2x1WnlCUWIzTWdVbVZtSUVsRU9pQWtlMmx1WTI5dGFXNW5VRzl6VW1WbVNXUjlZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdMeThnVkVndE1VRXNJRlJJTFRKQlhHNWNiaUFnSUNBZ0lDQWdZM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxMa052YlhCc1pYUmxaQ2h0TGtkbGRGTjFZMk5sYzNOVGRHRjBaU2dwTENCdExDQmNJbEJ5WldGMWRHZ2dWSEpoYm5OaFkzUnBiMjRnUlc1a1pXUXVYQ0lwTzF4dUlDQWdJQ0FnSUNBdkx5QlVTQzAyUVN3Z1ZFZ3ROa1ZjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZFVlRVpzYjNkVGRHRjBaVU5vWVc1blpXUW5MQ0I3WkdWMFlXbHNPaUIwYUdsekxsOXpjR2t1UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsZlNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhOMFlYUnBZeUJKYzFCeVpXRjFkR2hGZG1WdWRDaGxkbVZ1ZEU1aGJXVXBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pYWmxiblJPWVcxbExteGhjM1JKYm1SbGVFOW1LRndpY0hKbFlYVjBhRndpTERBcElEMDlQU0F3SUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh4OElHVjJaVzUwVG1GdFpTQTlQU0JRY21WaGRYUm9SWFpsYm5SekxsQnlaV0YxZEdoRGIyMXdiR1YwWlZKbGMzQnZibk5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkh3Z1pYWmxiblJPWVcxbElEMDlJRkJ5WldGMWRHaEZkbVZ1ZEhNdVVISmxZWFYwYUVOdmJYQnNaWFJsVW1WeGRXVnpkRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHg4SUdWMlpXNTBUbUZ0WlNBOVBTQlFjbVZoZFhSb1JYWmxiblJ6TGtGalkyOTFiblJXWlhKcFpubFNaWEYxWlhOMFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZId2daWFpsYm5ST1lXMWxJRDA5SUZCeVpXRjFkR2hGZG1WdWRITXVRV05qYjNWdWRGWmxjbWxtZVZKbGMzQnZibk5sTzF4dUlDQWdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQjdSWFpsYm5SekxDQk5aWE56WVdkbGZTQm1jbTl0SUNjdUwwMWxjM05oWjJWekp6dGNibWx0Y0c5eWRDQjdVbVZ4ZFdWemRFbGtTR1ZzY0dWeWZTQm1jbTl0SUNjdUwxSmxjWFZsYzNSSlpFaGxiSEJsY2ljN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVVpYSnRhVzVoYkZOMFlYUjFjMUpsY1hWbGMzUmNibnRjYmlBZ0lDQlViMDFsYzNOaFoyVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0I3ZlR0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTFsYzNOaFoyVW9VbVZ4ZFdWemRFbGtTR1ZzY0dWeUxrbGtLRndpZEhKdGJteGNJaWtzSUVWMlpXNTBjeTVVWlhKdGFXNWhiRk4wWVhSMWMxSmxjWFZsYzNRc0lHUmhkR0VzSUhSeWRXVXBPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRlJsY20xcGJtRnNVM1JoZEhWelVtVnpjRzl1YzJWY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHRLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJTQTlJRzA3WEc0Z0lDQWdmVnh1SUNBZ0lFZGxkRk4wWVhSMWN5Z3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbk4wWVhSMWN6dGNiaUFnSUNCOVhHNGdJQ0FnUjJWMFFtRjBkR1Z5ZVV4bGRtVnNLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndZWEp6WlVsdWRDaDBhR2x6TGw5dExrUmhkR0V1WW1GMGRHVnllVjlzWlhabGJDd3hNQ2s3WEc0Z0lDQWdmVnh1SUNBZ0lFbHpRMmhoY21kcGJtY29LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRWhkR2hwY3k1ZmJTNUVZWFJoTG1Ob1lYSm5hVzVuTzF4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUZSbGNtMXBibUZzUW1GMGRHVnllVnh1ZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0cwcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMa0poZEhSbGNubE1aWFpsYkNBOUlIQmhjbk5sU1c1MEtHMHVSR0YwWVM1aVlYUjBaWEo1WDJ4bGRtVnNMREV3S1R0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0l2S2lBb2FXZHViM0psWkNrZ0tpOGlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjkiXSwic291cmNlUm9vdCI6IiJ9