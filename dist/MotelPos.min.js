(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "d8a55e69ceb1de8a9970";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "MotelPos";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./MotelPos/MotelPos.js")(__webpack_require__.s = "./MotelPos/MotelPos.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./MotelPos/MotelPos.js":
/*!******************************!*\
  !*** ./MotelPos/MotelPos.js ***!
  \******************************/
/*! exports provided: MotelPos */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MotelPos", function() { return MotelPos; });
/* harmony import */ var _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @assemblypayments/spi-client-js/dist/spi-client-js */ "./node_modules/@assemblypayments/spi-client-js/dist/spi-client-js.js");
/* harmony import */ var _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

 // <summary>
// NOTE: THIS PROJECT USES THE 2.6.x of the SPI Client Library
//  
// This is your POS. To integrate with SPI, you need to instantiate a Spi object
// and interact with it.
// 
// Primarily you need to implement 3 things.
// 1. Settings Screen
// 2. Pairing Flow Screen
// 3. Transaction Flow screen
// 
// To see logs from spi, check the console
// </summary>

var MotelPos =
/*#__PURE__*/
function () {
  function MotelPos(log, receipt, flow_msg) {
    _classCallCheck(this, MotelPos);

    this._spi = null;
    this._spiPreauth = null;
    this._posId = "MOTELPOS1";
    this._eftposAddress = "192.168.1.1";
    this._spiSecrets = null;
    this._version = '2.6.3';
    this._serialNumber = "";
    this._rcpt_from_eftpos = false;
    this._sig_flow_from_eftpos = false;
    this._print_merchant_copy = false;
    this._log = log;
    this._receipt = receipt;
    this._flow_msg = flow_msg;
  }

  _createClass(MotelPos, [{
    key: "Start",
    value: function Start() {
      var _this = this;

      this._log.info("Starting MotelPos...");

      this.LoadPersistedState(); // region Spi Setup
      // This is how you instantiate Spi.

      this._spi = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Spi"](this._posId, this._serialNumber, this._eftposAddress, this._spiSecrets); // It is ok to not have the secrets yet to start with.

      this._spi.Config.PromptForCustomerCopyOnEftpos = this._rcpt_from_eftpos;
      this._spi.Config.SignatureFlowOnEftpos = this._sig_flow_from_eftpos;
      this._spi.Config.PrintMerchantCopy = this._print_merchant_copy;

      this._spi.SetPosInfo("assembly", this._version);

      document.addEventListener('StatusChanged', function (e) {
        return _this.OnSpiStatusChanged(e.detail);
      });
      document.addEventListener('PairingFlowStateChanged', function (e) {
        return _this.OnPairingFlowStateChanged(e.detail);
      });
      document.addEventListener('SecretsChanged', function (e) {
        return _this.OnSecretsChanged(e.detail);
      });
      document.addEventListener('TxFlowStateChanged', function (e) {
        return _this.OnTxFlowStateChanged(e.detail);
      });
      this._spi.PrintingResponse = this.HandlePrintingResponse.bind(this);
      this._spi.TerminalStatusResponse = this.HandleTerminalStatusResponse.bind(this);
      this._spi.BatteryLevelChanged = this.HandleBatteryLevelChanged.bind(this);
      this._spiPreauth = this._spi.EnablePreauth();

      this._spi.Start(); // And Now we just accept user input and display to the user what is happening.


      this._flow_msg.Clear();

      this._flow_msg.Info("# Welcome to MotelPos !");

      this.PrintStatusAndActions();
      this.AcceptUserInput();
    }
  }, {
    key: "OnTxFlowStateChanged",
    value: function OnTxFlowStateChanged(txState) {
      this._flow_msg.Clear();

      this.PrintStatusAndActions();

      this._flow_msg.Info("> ");
    }
  }, {
    key: "OnPairingFlowStateChanged",
    value: function OnPairingFlowStateChanged(pairingFlowState) {
      this._flow_msg.Clear();

      this.PrintStatusAndActions();

      this._flow_msg.Info("> ");
    }
  }, {
    key: "OnSecretsChanged",
    value: function OnSecretsChanged(secrets) {
      this._spiSecrets = secrets;

      if (secrets != null) {
        this._log.info("# I Have Secrets: ".concat(secrets.EncKey).concat(secrets.HmacKey, ". Persist them Securely."));

        localStorage.setItem('EncKey', secrets.EncKey);
        localStorage.setItem('HmacKey', secrets.HmacKey);
      } else {
        this._log.info("# I Have Lost the Secrets, i.e. Unpaired. Destroy the persisted secrets.");

        localStorage.removeItem('EncKey');
        localStorage.removeItem('HmacKey');
      }
    } // <summary>
    // Called when we received a Status Update i.e. Unpaired/PairedConnecting/PairedConnected
    // </summary>
    // <param name="sender"></param>
    // <param name="spiStatus"></param>

  }, {
    key: "OnSpiStatusChanged",
    value: function OnSpiStatusChanged(spiStatus) {
      this._log.clear();

      this._log.info("# --> SPI Status Changed: ".concat(spiStatus));

      this.PrintStatusAndActions();
    }
  }, {
    key: "HandlePrintingResponse",
    value: function HandlePrintingResponse(message) {
      this._flow_msg.Clear();

      var printingResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["PrintingResponse"](message);

      if (printingResponse.isSuccess()) {
        this._flow_msg.Info("# --> Printing Response: Printing Receipt successful");
      } else {
        this._flow_msg.Info("# --> Printing Response:  Printing Receipt failed: reason = " + printingResponse.getErrorReason() + ", detail = " + printingResponse.getErrorDetail());
      }

      this._spi.AckFlowEndedAndBackToIdle();

      this.PrintStatusAndActions();
    }
  }, {
    key: "HandleTerminalStatusResponse",
    value: function HandleTerminalStatusResponse(message) {
      this._flow_msg.Clear();

      var terminalStatusResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TerminalStatusResponse"](message);

      this._flow_msg.Info("# Terminal Status Response #");

      this._flow_msg.Info("# Status: " + terminalStatusResponse.GetStatus());

      this._flow_msg.Info("# Battery Level: " + terminalStatusResponse.GetBatteryLevel() + "%");

      this._flow_msg.Info("# Charging: " + terminalStatusResponse.IsCharging());

      this._spi.AckFlowEndedAndBackToIdle();

      this.PrintStatusAndActions();
    }
  }, {
    key: "HandleBatteryLevelChanged",
    value: function HandleBatteryLevelChanged(message) {
      this._log.clear();

      var terminalBattery = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TerminalBattery"](message);

      this._flow_msg.Info("# Battery Level Changed #");

      this._flow_msg.Info("# Battery Level: " + terminalBattery.BatteryLevel + "%");

      this._spi.AckFlowEndedAndBackToIdle();

      this.PrintStatusAndActions();
    }
  }, {
    key: "PrintStatusAndActions",
    value: function PrintStatusAndActions() {
      this.PrintFlowInfo();
      this.PrintActions();
      this.PrintPairingStatus();
    }
  }, {
    key: "PrintFlowInfo",
    value: function PrintFlowInfo() {
      switch (this._spi.CurrentFlow) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Pairing:
          var pairingState = this._spi.CurrentPairingFlowState;

          this._flow_msg.Info("### PAIRING PROCESS UPDATE ###");

          this._flow_msg.Info("# ".concat(pairingState.Message));

          this._flow_msg.Info("# Finished? ".concat(pairingState.Finished));

          this._flow_msg.Info("# Successful? ".concat(pairingState.Successful));

          this._flow_msg.Info("# Confirmation Code: ".concat(pairingState.ConfirmationCode));

          this._flow_msg.Info("# Waiting Confirm from Eftpos? ".concat(pairingState.AwaitingCheckFromEftpos));

          this._flow_msg.Info("# Waiting Confirm from POS? ".concat(pairingState.AwaitingCheckFromPos));

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Transaction:
          var txState = this._spi.CurrentTxFlowState;

          this._flow_msg.Info("### TX PROCESS UPDATE ###");

          this._flow_msg.Info("# ".concat(txState.DisplayMessage));

          this._flow_msg.Info("# PosRefId: ".concat(txState.PosRefId));

          this._flow_msg.Info("# Type: ".concat(txState.Type));

          this._flow_msg.Info("# Request Amount: $".concat((txState.AmountCents / 100.0).toFixed(2)));

          this._flow_msg.Info("# Waiting For Signature: ".concat(txState.AwaitingSignatureCheck));

          this._flow_msg.Info("# Attempting to Cancel : ".concat(txState.AttemptingToCancel));

          this._flow_msg.Info("# Finished: ".concat(txState.Finished));

          this._flow_msg.Info("# Success: ".concat(txState.Success));

          if (txState.AwaitingSignatureCheck) {
            // We need to print the receipt for the customer to sign.
            this._flow_msg.Info("# RECEIPT TO PRINT FOR SIGNATURE");

            this._receipt.Info(txState.SignatureRequiredMessage.GetMerchantReceipt().trim());
          }

          if (txState.Finished) {
            switch (txState.Success) {
              case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Success:
                switch (txState.Type) {
                  case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].Preauth:
                    this._flow_msg.Info("# PREAUTH RESULT - SUCCESS");

                    var preauthResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["PreauthResponse"](txState.Response);

                    this._flow_msg.Info("# PREAUTH-ID:", preauthResponse.PreauthId);

                    this._flow_msg.Info("# NEW BALANCE AMOUNT:", preauthResponse.GetBalanceAmount());

                    this._flow_msg.Info("# PREV BALANCE AMOUNT:", preauthResponse.GetPreviousBalanceAmount());

                    this._flow_msg.Info("# COMPLETION AMOUNT:", preauthResponse.GetCompletionAmount());

                    var details = preauthResponse.Details;

                    this._flow_msg.Info("# Response:", details.GetResponseText());

                    this._flow_msg.Info("# RRN:", details.GetRRN());

                    this._flow_msg.Info("# Scheme:", details.SchemeName);

                    this._flow_msg.Info("# Customer Receipt:");

                    this._receipt.Info(!details.WasCustomerReceiptPrinted() ? details.GetCustomerReceipt().trim() : "# PRINTED FROM EFTPOS");

                    break;

                  case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].AccountVerify:
                    this._flow_msg.Info("# ACCOUNT VERIFICATION SUCCESS");

                    var acctVerifyResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["AccountVerifyResponse"](txState.Response);
                    var details = acctVerifyResponse.Details;

                    this._flow_msg.Info("# Response:", details.GetResponseText());

                    this._flow_msg.Info("# RRN:", details.GetRRN());

                    this._flow_msg.Info("# Scheme:", details.SchemeName);

                    this._flow_msg.Info("# Merchant Receipt:");

                    this._receipt.Info(!details.WasCustomerReceiptPrinted() ? details.GetCustomerReceipt().trim() : "# PRINTED FROM EFTPOS");

                    break;

                  default:
                    this._flow_msg.Info("# MOTEL POS DOESN'T KNOW WHAT TO DO WITH THIS TX TYPE WHEN IT SUCCEEDS");

                    break;
                }

                break;

              case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Failed:
                switch (txState.Type) {
                  case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].Preauth:
                    this._flow_msg.Info("# PREAUTH TRANSACTION FAILED :(");

                    if (txState.Response != null) {
                      this._flow_msg.Info("# Error:", txState.Response.GetError());

                      this._flow_msg.Info("# Error Detail:", txState.Response.GetErrorDetail());

                      var purchaseResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["PurchaseResponse"](txState.Response);

                      this._flow_msg.Info("# Response:", purchaseResponse.GetResponseText());

                      this._flow_msg.Info("# RRN:", purchaseResponse.GetRRN());

                      this._flow_msg.Info("# Scheme:", purchaseResponse.SchemeName);

                      this._flow_msg.Info("# Customer Receipt:");

                      this._receipt.Info(!purchaseResponse.WasCustomerReceiptPrinted() ? purchaseResponse.GetCustomerReceipt().trim() : "# PRINTED FROM EFTPOS");
                    }

                    break;

                  case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].AccountVerify:
                    this._flow_msg.Info("# ACCOUNT VERIFICATION FAILED :(");

                    if (txState.Response != null) {
                      this._flow_msg.Info("# Error:", txState.Response.GetError());

                      this._flow_msg.Info("# Error Detail:", txState.Response.GetErrorDetail());

                      var acctVerifyResponse = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["AccountVerifyResponse"](txState.Response);
                      var details = acctVerifyResponse.Details;

                      this._receipt.Info(!details.WasMerchantReceiptPrinted() ? details.GetMerchantReceipt().trim() : "# PRINTED FROM EFTPOS");
                    }

                    break;

                  default:
                    this._flow_msg.Info("# MOTEL POS DOESN'T KNOW WHAT TO DO WITH THIS TX TYPE WHEN IT FAILS");

                    break;
                }

                break;

              case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SuccessState"].Unknown:
                switch (txState.Type) {
                  case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].Preauth:
                    this._flow_msg.Info("# WE'RE NOT QUITE SURE WHETHER PREAUTH TRANSACTION WENT THROUGH OR NOT:/");

                    this._flow_msg.Info("# CHECK THE LAST TRANSACTION ON THE EFTPOS ITSELF FROM THE APPROPRIATE MENU ITEM.");

                    this._flow_msg.Info("# IF YOU CONFIRM THAT THE CUSTOMER PAID, CLOSE THE ORDER.");

                    this._flow_msg.Info("# OTHERWISE, RETRY THE PAYMENT FROM SCRATCH.");

                    break;

                  case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["TransactionType"].AccountVerify:
                    this._flow_msg.Info("# WE'RE NOT QUITE SURE WHETHER ACCOUNT VERIFICATION WENT THROUGH OR NOT:/");

                    this._flow_msg.Info("# CHECK THE LAST TRANSACTION ON THE EFTPOS ITSELF FROM THE APPROPRIATE MENU ITEM.");

                    this._flow_msg.Info("# IF YOU CONFIRM THAT THE CUSTOMER PAID, CLOSE THE ORDER.");

                    this._flow_msg.Info("# OTHERWISE, RETRY THE PAYMENT FROM SCRATCH.");

                    break;

                  default:
                    this._flow_msg.Info("# MOTEL POS DOESN'T KNOW WHAT TO DO WITH THIS TX TYPE WHEN IT's UNKNOWN");

                    break;
                }

                break;
            }
          }

          break;
      }
    }
  }, {
    key: "PrintActions",
    value: function PrintActions() {
      // List of input controls which are enabled / shown for the current application state
      var inputsEnabled = [];
      var statusEl = document.getElementById('status_indicator');
      var primaryStatusEl = document.getElementById('primary_status');
      var flowStatusEl = document.getElementById('flow_status');
      var flowStatusHeading = document.getElementById('flow_status_heading');
      statusEl.dataset['status'] = this._spi.CurrentStatus;
      statusEl.dataset['flow'] = this._spi.CurrentFlow;
      primaryStatusEl.innerText = this._spi.CurrentStatus;
      flowStatusEl.innerText = this._spi.CurrentFlow;
      flowStatusHeading.innerText = this._spi.CurrentFlow; // Available Actions depend on the current status (Unpaired/PairedConnecting/PairedConnected)

      switch (this._spi.CurrentStatus) {
        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiStatus"].Unpaired:
          //Unpaired...
          switch (this._spi.CurrentFlow) {
            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Idle:
              // Unpaired, Idle
              inputsEnabled.push('pos_id');
              inputsEnabled.push('eftpos_address');
              inputsEnabled.push('rcpt_from_eftpos');
              inputsEnabled.push('sig_flow_from_eftpos');
              inputsEnabled.push('pair');
              inputsEnabled.push('save_settings');
              break;

            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Pairing:
              // Unpaired, PairingFlow
              var pairingState = this._spi.CurrentPairingFlowState;

              if (pairingState.AwaitingCheckFromPos) {
                inputsEnabled.push('pair_confirm');
              }

              if (!pairingState.Finished) {
                inputsEnabled.push('pair_cancel');
              } else {
                inputsEnabled.push('ok');
              }

              break;

            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Transaction: // Unpaired, TransactionFlow - Should never be the case!

            default:
              this._log.info("# .. Unexpected Flow .. ".concat(this._spi.CurrentFlow));

              break;
          }

          break;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiStatus"].PairedConnecting:
          // This is still considered as a Paired kind of state, but...
          // .. we give user the option of changing IP address, just in case the EFTPOS got a new one in the meanwhile
          inputsEnabled.push('eftpos_address');
          inputsEnabled.push('rcpt_from_eftpos');
          inputsEnabled.push('sig_flow_from_eftpos');
          inputsEnabled.push('save_settings');
        // .. but otherwise we give the same options as PairedConnected
        // goto case SpiStatus.PairedConnected;

        case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiStatus"].PairedConnected:
          switch (this._spi.CurrentFlow) {
            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Idle:
              // Paired, Idle
              inputsEnabled.push('amount_input');
              inputsEnabled.push('surcharge_input');
              inputsEnabled.push('preauth_ref_input');
              inputsEnabled.push('save_settings');
              inputsEnabled.push('acct_verify');
              inputsEnabled.push('preauth_open');
              inputsEnabled.push('preauth_topup');
              inputsEnabled.push('preauth_topdown');
              inputsEnabled.push('preauth_extend');
              inputsEnabled.push('preauth_complete');
              inputsEnabled.push('preauth_cancel');
              inputsEnabled.push('unpair');
              inputsEnabled.push('rcpt_from_eftpos');
              inputsEnabled.push('sig_flow_from_eftpos');
              inputsEnabled.push('print_merchant_copy');
              break;

            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Transaction:
              // Paired, Transaction
              if (this._spi.CurrentTxFlowState.AwaitingSignatureCheck) {
                inputsEnabled.push('tx_sign_accept');
                inputsEnabled.push('tx_sign_decline');
              }

              if (!this._spi.CurrentTxFlowState.Finished && !this._spi.CurrentTxFlowState.AttemptingToCancel) {
                inputsEnabled.push('tx_cancel');
              }

              if (this._spi.CurrentTxFlowState.Finished) {
                inputsEnabled.push('ok');
              }

              break;

            case _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Pairing:
              // Paired, Pairing - we have just finished the pairing flow. OK to ack.
              inputsEnabled.push('ok');
              break;

            default:
              this._log.info("# .. Unexpected Flow .. ".concat(this._spi.CurrentFlow));

              break;
          }

          break;

        default:
          this._log.info("# .. Unexpected State .. ".concat(this._spi.CurrentStatus));

          break;
      } // Configure buttons / inputs


      var inputs = document.querySelectorAll('.input');

      for (var i = 0; i < inputs.length; i++) {
        inputs[i].disabled = true;
      }

      inputsEnabled.forEach(function (input) {
        var inputEl = document.getElementById(input);
        if (!inputEl) throw new Error("Input element not found to enable: ".concat(input));
        inputEl.disabled = false;
      });

      this._flow_msg.Info();
    }
  }, {
    key: "PrintPairingStatus",
    value: function PrintPairingStatus() {
      this._flow_msg.Info("# --------------- STATUS ------------------");

      this._flow_msg.Info("# ".concat(this._posId, " <-> Eftpos: ").concat(this._eftposAddress, " #"));

      this._flow_msg.Info("# SPI STATUS: ".concat(this._spi.CurrentStatus, "     FLOW: ").concat(this._spi.CurrentFlow, " #"));

      this._flow_msg.Info("# SPI CONFIG: ".concat(JSON.stringify(this._spiPreauth.Config)));

      this._flow_msg.Info("# -----------------------------------------");

      this._flow_msg.Info("# POS: v".concat(this._version, " Spi: v").concat(_assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Spi"].GetVersion()));
    }
  }, {
    key: "AcceptUserInput",
    value: function AcceptUserInput() {
      var _this2 = this;

      document.getElementById('save_settings').addEventListener('click', function () {
        if (_this2._spi.CurrentStatus === _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiStatus"].Unpaired && _this2._spi.CurrentFlow === _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["SpiFlow"].Idle) {
          _this2._posId = document.getElementById('pos_id').value;
          _this2._eftposAddress = document.getElementById('eftpos_address').value;

          _this2._spi.SetPosId(_this2._posId);

          _this2._spi.SetEftposAddress(_this2._eftposAddress);

          localStorage.setItem('pos_id', _this2._posId);
          localStorage.setItem('eftpos_address', _this2._eftposAddress);

          _this2._log.info("Saved settings ".concat(_this2._posId, ":").concat(_this2._eftposAddress));
        }

        _this2._spiPreauth.Config.EnabledPromptForCustomerCopyOnEftpos = document.getElementById('rcpt_from_eftpos').checked;
        _this2._spiPreauth.Config.EnabledSignatureFlowOnEftpos = document.getElementById('sig_flow_from_eftpos').checked;
        _this2._spiPreauth.Config.EnabledPrintMerchantCopy = document.getElementById('print_merchant_copy').checked;
        localStorage.setItem('rcpt_from_eftpos', _this2._spiPreauth.Config.EnabledPromptForCustomerCopyOnEftpos);
        localStorage.setItem('sig_flow_from_eftpos', _this2._spiPreauth.Config.EnabledSignatureFlowOnEftpos);
        localStorage.setItem('print_merchant_copy', _this2._spiPreauth.Config.EnabledPrintMerchantCopy);

        _this2.PrintPairingStatus();
      });
      document.getElementById('pair').addEventListener('click', function () {
        _this2._spi.Pair();
      });
      document.getElementById('pair_confirm').addEventListener('click', function () {
        _this2._spi.PairingConfirmCode();
      });
      document.getElementById('pair_cancel').addEventListener('click', function () {
        _this2._spi.PairingCancel();
      });
      document.getElementById('unpair').addEventListener('click', function () {
        _this2._spi.Unpair();
      });
      document.getElementById('acct_verify').addEventListener('click', function () {
        var posRefId = "actvfy-".concat(new Date().toISOString());

        var res = _this2._spiPreauth.InitiateAccountVerifyTx(posRefId);

        _this2._flow_msg.Info(res.Initiated ? "# Verify Initiated. Will be updated with Progress." : "# Could not initiate account verify request: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('preauth_open').addEventListener('click', function () {
        var amount = parseInt(document.getElementById('amount').value, 10);
        var posRefId = "propen-".concat(new Date().toISOString());

        var res = _this2._spiPreauth.InitiateOpenTx(posRefId, amount);

        _this2._flow_msg.Info(res.Initiated ? "# Preauth Initiated. Will be updated with Progress." : "# Could not initiate preauth request: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('preauth_topup').addEventListener('click', function () {
        var amount = parseInt(document.getElementById('amount').value, 10);
        var preauthId = document.getElementById('preauth_ref').value;
        var ref = "prtopup-".concat(preauthId, "-").concat(new Date().toISOString());

        var res = _this2._spiPreauth.InitiateTopupTx(ref, preauthId, amount);

        _this2._flow_msg.Info(res.Initiated ? "# Preauth topup Initiated. Will be updated with Progress." : "# Could not initiate preauth topup request: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('preauth_topdown').addEventListener('click', function () {
        var amount = parseInt(document.getElementById('amount').value, 10);
        var preauthId = document.getElementById('preauth_ref').value;
        var ref = "prtopd-".concat(preauthId, "-").concat(new Date().toISOString());

        var res = _this2._spiPreauth.InitiatePartialCancellationTx(ref, preauthId, amount);

        _this2._flow_msg.Info(res.Initiated ? "# Preauth topdown Initiated. Will be updated with Progress." : "# Could not initiate preauth topdown request: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('preauth_extend').addEventListener('click', function () {
        var preauthId = document.getElementById('preauth_ref').value;
        var ref = "prext-".concat(preauthId, "-").concat(new Date().toISOString());

        var res = _this2._spiPreauth.InitiateExtendTx(ref, preauthId);

        _this2._flow_msg.Info(res.Initiated ? "# Preauth extend Initiated. Will be updated with Progress." : "# Could not initiate preauth extend request: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('preauth_cancel').addEventListener('click', function () {
        var preauthId = document.getElementById('preauth_ref').value;
        var ref = "prcancel-".concat(preauthId, "-").concat(new Date().toISOString());

        var res = _this2._spiPreauth.InitiateCancelTx(ref, preauthId);

        _this2._flow_msg.Info(res.Initiated ? "# Preauth cancel Initiated. Will be updated with Progress." : "# Could not initiate preauth cancel request: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('preauth_complete').addEventListener('click', function () {
        var amount = parseInt(document.getElementById('amount').value, 10);
        var surcharge = parseInt(document.getElementById('surcharge').value, 10);
        var preauthId = document.getElementById('preauth_ref').value;
        var ref = "prcomp-".concat(preauthId, "-").concat(new Date().toISOString());

        var res = _this2._spiPreauth.InitiateCompletionTx(ref, preauthId, amount, surcharge);

        _this2._flow_msg.Info(res.Initiated ? "# Preauth complete Initiated. Will be updated with Progress." : "# Could not initiate preauth complete request: ".concat(res.Message, ". Please Retry."));
      });
      document.getElementById('tx_sign_accept').addEventListener('click', function () {
        _this2._spi.AcceptSignature(true);
      });
      document.getElementById('tx_sign_decline').addEventListener('click', function () {
        _this2._spi.AcceptSignature(false);
      });
      document.getElementById('tx_cancel').addEventListener('click', function () {
        _this2._spi.CancelTransaction();
      });
      document.getElementById('ok').addEventListener('click', function () {
        _this2._spi.AckFlowEndedAndBackToIdle();

        _this2._flow_msg.Clear();

        _this2._flow_msg.innerHTML = "Select from the options below";

        _this2.PrintStatusAndActions();
      });
      document.getElementById('ok_cancel').addEventListener('click', function () {
        _this2._spi.AckFlowEndedAndBackToIdle();

        _this2._log.clear();

        _this2._flow_msg.innerHTML = "Order Cancelled";

        _this2.PrintStatusAndActions();
      });
    }
  }, {
    key: "LoadPersistedState",
    value: function LoadPersistedState() {
      if (localStorage.getItem('pos_id')) {
        this._posId = localStorage.getItem('pos_id');
        document.getElementById('pos_id').value = this._posId;
      } else {
        this._posId = document.getElementById('pos_id').value;
      }

      if (localStorage.getItem('eftpos_address')) {
        this._eftposAddress = localStorage.getItem('eftpos_address');
        document.getElementById('eftpos_address').value = this._eftposAddress;
      } else {
        this._eftposAddress = document.getElementById('eftpos_address').value;
      }

      this._rcpt_from_eftpos = document.getElementById('rcpt_from_eftpos').checked = localStorage.getItem('rcpt_from_eftpos') === 'true' || false;
      this._sig_flow_from_eftpos = document.getElementById('sig_flow_from_eftpos').checked = localStorage.getItem('sig_flow_from_eftpos') === 'true' || false;
      this._print_merchant_copy = document.getElementById('print_merchant_copy').checked = localStorage.getItem('print_merchant_copy') === 'true' || false;

      if (localStorage.getItem('EncKey') && localStorage.getItem('HmacKey')) {
        this._spiSecrets = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Secrets"](localStorage.getItem('EncKey'), localStorage.getItem('HmacKey'));
      }
    }
  }]);

  return MotelPos;
}();
/**
 * Start the POS
 */

document.addEventListener('DOMContentLoaded', function () {
  try {
    var log = console;
    var receipt = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Logger"](document.getElementById('receipt_output'), "\n\n \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/ \n\n");
    var flow_msg = new _assemblypayments_spi_client_js_dist_spi_client_js__WEBPACK_IMPORTED_MODULE_0__["Logger"](document.getElementById('flow_msg'));
    var pos = new MotelPos(log, receipt, flow_msg);
    pos.Start();
  } catch (err) {
    console.error(err);
  }
});

/***/ }),

/***/ "./node_modules/@assemblypayments/spi-client-js/dist/spi-client-js.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@assemblypayments/spi-client-js/dist/spi-client-js.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdatespi_client_js"];
/******/ 	window["webpackHotUpdatespi_client_js"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) {}
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "23b1384d9110643c7515";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "main";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire("./index.js")(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: Spi, Logger, Secrets, SuccessState, TransactionOptions, TransactionType, SpiFlow, SpiStatus, PrintingResponse, RefundResponse, PurchaseResponse, GetLastTransactionResponse, MotoPurchaseResponse, TerminalStatusResponse, TerminalBattery, CashoutOnlyResponse, Settlement, RequestIdHelper, DeviceAddressResponseCode, BillStatusResponse, BillRetrievalResult, GetOpenTablesResponse, OpenTablesEntry, BillPaymentFlowEndedResponse, AccountVerifyResponse, PreauthResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_Spi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/Spi */ "./src/Spi.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Spi", function() { return _src_Spi__WEBPACK_IMPORTED_MODULE_0__["Spi"]; });

/* harmony import */ var _src_Logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/Logger */ "./src/Logger.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return _src_Logger__WEBPACK_IMPORTED_MODULE_1__["Logger"]; });

/* harmony import */ var _src_Secrets__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/Secrets */ "./src/Secrets.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Secrets", function() { return _src_Secrets__WEBPACK_IMPORTED_MODULE_2__["Secrets"]; });

/* harmony import */ var _src_Messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/Messages */ "./src/Messages.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SuccessState", function() { return _src_Messages__WEBPACK_IMPORTED_MODULE_3__["SuccessState"]; });

/* harmony import */ var _src_SpiModels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src/SpiModels */ "./src/SpiModels.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransactionOptions", function() { return _src_SpiModels__WEBPACK_IMPORTED_MODULE_4__["TransactionOptions"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransactionType", function() { return _src_SpiModels__WEBPACK_IMPORTED_MODULE_4__["TransactionType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpiFlow", function() { return _src_SpiModels__WEBPACK_IMPORTED_MODULE_4__["SpiFlow"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpiStatus", function() { return _src_SpiModels__WEBPACK_IMPORTED_MODULE_4__["SpiStatus"]; });

/* harmony import */ var _src_Printing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./src/Printing */ "./src/Printing.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PrintingResponse", function() { return _src_Printing__WEBPACK_IMPORTED_MODULE_5__["PrintingResponse"]; });

/* harmony import */ var _src_Purchase__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/Purchase */ "./src/Purchase.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RefundResponse", function() { return _src_Purchase__WEBPACK_IMPORTED_MODULE_6__["RefundResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PurchaseResponse", function() { return _src_Purchase__WEBPACK_IMPORTED_MODULE_6__["PurchaseResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GetLastTransactionResponse", function() { return _src_Purchase__WEBPACK_IMPORTED_MODULE_6__["GetLastTransactionResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MotoPurchaseResponse", function() { return _src_Purchase__WEBPACK_IMPORTED_MODULE_6__["MotoPurchaseResponse"]; });

/* harmony import */ var _src_TerminalStatus__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/TerminalStatus */ "./src/TerminalStatus.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TerminalStatusResponse", function() { return _src_TerminalStatus__WEBPACK_IMPORTED_MODULE_7__["TerminalStatusResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TerminalBattery", function() { return _src_TerminalStatus__WEBPACK_IMPORTED_MODULE_7__["TerminalBattery"]; });

/* harmony import */ var _src_Cashout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/Cashout */ "./src/Cashout.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CashoutOnlyResponse", function() { return _src_Cashout__WEBPACK_IMPORTED_MODULE_8__["CashoutOnlyResponse"]; });

/* harmony import */ var _src_Settlement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./src/Settlement */ "./src/Settlement.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Settlement", function() { return _src_Settlement__WEBPACK_IMPORTED_MODULE_9__["Settlement"]; });

/* harmony import */ var _src_RequestIdHelper__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./src/RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RequestIdHelper", function() { return _src_RequestIdHelper__WEBPACK_IMPORTED_MODULE_10__["RequestIdHelper"]; });

/* harmony import */ var _src_Service_DeviceService__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./src/Service/DeviceService */ "./src/Service/DeviceService.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DeviceAddressResponseCode", function() { return _src_Service_DeviceService__WEBPACK_IMPORTED_MODULE_11__["DeviceAddressResponseCode"]; });

/* harmony import */ var _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./src/PayAtTable */ "./src/PayAtTable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BillStatusResponse", function() { return _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__["BillStatusResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BillRetrievalResult", function() { return _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__["BillRetrievalResult"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GetOpenTablesResponse", function() { return _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__["GetOpenTablesResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OpenTablesEntry", function() { return _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__["OpenTablesEntry"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BillPaymentFlowEndedResponse", function() { return _src_PayAtTable__WEBPACK_IMPORTED_MODULE_12__["BillPaymentFlowEndedResponse"]; });

/* harmony import */ var _src_Preauth__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./src/Preauth */ "./src/Preauth.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AccountVerifyResponse", function() { return _src_Preauth__WEBPACK_IMPORTED_MODULE_13__["AccountVerifyResponse"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PreauthResponse", function() { return _src_Preauth__WEBPACK_IMPORTED_MODULE_13__["PreauthResponse"]; });

// Re-exported modules required for POS vendors















/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/createClass.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/readOnlyError.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/readOnlyError.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _readOnlyError(name) {
  throw new Error("\"" + name + "\" is read-only");
}

module.exports = _readOnlyError;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/aes-js/index.js":
/*!**************************************!*\
  !*** ./node_modules/aes-js/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
(function(root) {
    "use strict";

    function checkInt(value) {
        return (parseInt(value) === value);
    }

    function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) { return false; }

        for (var i = 0; i < arrayish.length; i++) {
            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                return false;
            }
        }

        return true;
    }

    function coerceArray(arg, copy) {

        // ArrayBuffer view
        if (arg.buffer && arg.name === 'Uint8Array') {

            if (copy) {
                if (arg.slice) {
                    arg = arg.slice();
                } else {
                    arg = Array.prototype.slice.call(arg);
                }
            }

            return arg;
        }

        // It's an array; check it is a valid representation of a byte
        if (Array.isArray(arg)) {
            if (!checkInts(arg)) {
                throw new Error('Array contains invalid value: ' + arg);
            }

            return new Uint8Array(arg);
        }

        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
        if (checkInt(arg.length) && checkInts(arg)) {
            return new Uint8Array(arg);
        }

        throw new Error('unsupported array-like object');
    }

    function createArray(length) {
        return new Uint8Array(length);
    }

    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
            if (sourceArray.slice) {
                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
            } else {
                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
            }
        }
        targetArray.set(sourceArray, targetStart);
    }



    var convertUtf8 = (function() {
        function toBytes(text) {
            var result = [], i = 0;
            text = encodeURI(text);
            while (i < text.length) {
                var c = text.charCodeAt(i++);

                // if it is a % sign, encode the following 2 bytes as a hex value
                if (c === 37) {
                    result.push(parseInt(text.substr(i, 2), 16))
                    i += 2;

                // otherwise, just the actual byte
                } else {
                    result.push(c)
                }
            }

            return coerceArray(result);
        }

        function fromBytes(bytes) {
            var result = [], i = 0;

            while (i < bytes.length) {
                var c = bytes[i];

                if (c < 128) {
                    result.push(String.fromCharCode(c));
                    i++;
                } else if (c > 191 && c < 224) {
                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                    i += 2;
                } else {
                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                    i += 3;
                }
            }

            return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();

    var convertHex = (function() {
        function toBytes(text) {
            var result = [];
            for (var i = 0; i < text.length; i += 2) {
                result.push(parseInt(text.substr(i, 2), 16));
            }

            return result;
        }

        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
        var Hex = '0123456789abcdef';

        function fromBytes(bytes) {
                var result = [];
                for (var i = 0; i < bytes.length; i++) {
                    var v = bytes[i];
                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                }
                return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();


    // Number of rounds by keysize
    var numberOfRounds = {16: 10, 24: 12, 32: 14}

    // Round constant words
    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

    // S-box and Inverse S-box (S is for Substitution)
    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

    // Transformations for encryption
    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

    // Transformations for decryption
    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

    // Transformations for decryption key expansion
    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

    function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
            result.push(
                (bytes[i    ] << 24) |
                (bytes[i + 1] << 16) |
                (bytes[i + 2] <<  8) |
                 bytes[i + 3]
            );
        }
        return result;
    }

    var AES = function(key) {
        if (!(this instanceof AES)) {
            throw Error('AES must be instanitated with `new`');
        }

        Object.defineProperty(this, 'key', {
            value: coerceArray(key, true)
        });

        this._prepare();
    }


    AES.prototype._prepare = function() {

        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
        }

        // encryption round keys
        this._Ke = [];

        // decryption round keys
        this._Kd = [];

        for (var i = 0; i <= rounds; i++) {
            this._Ke.push([0, 0, 0, 0]);
            this._Kd.push([0, 0, 0, 0]);
        }

        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;

        // convert the key into ints
        var tk = convertToInt32(this.key);

        // copy values into round key arrays
        var index;
        for (var i = 0; i < KC; i++) {
            index = i >> 2;
            this._Ke[index][i % 4] = tk[i];
            this._Kd[rounds - index][i % 4] = tk[i];
        }

        // key expansion (fips-197 section 5.2)
        var rconpointer = 0;
        var t = KC, tt;
        while (t < roundKeyCount) {
            tt = tk[KC - 1];
            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                      (S[(tt >>  8) & 0xFF] << 16) ^
                      (S[ tt        & 0xFF] <<  8) ^
                       S[(tt >> 24) & 0xFF]        ^
                      (rcon[rconpointer] << 24));
            rconpointer += 1;

            // key expansion (for non-256 bit)
            if (KC != 8) {
                for (var i = 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }

            // key expansion for 256-bit keys is "slightly different" (fips-197)
            } else {
                for (var i = 1; i < (KC / 2); i++) {
                    tk[i] ^= tk[i - 1];
                }
                tt = tk[(KC / 2) - 1];

                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                              (S[(tt >>  8) & 0xFF] <<  8) ^
                              (S[(tt >> 16) & 0xFF] << 16) ^
                              (S[(tt >> 24) & 0xFF] << 24));

                for (var i = (KC / 2) + 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }
            }

            // copy values into round key arrays
            var i = 0, r, c;
            while (i < KC && t < roundKeyCount) {
                r = t >> 2;
                c = t % 4;
                this._Ke[r][c] = tk[i];
                this._Kd[rounds - r][c] = tk[i++];
                t++;
            }
        }

        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
        for (var r = 1; r < rounds; r++) {
            for (var c = 0; c < 4; c++) {
                tt = this._Kd[r][c];
                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                  U2[(tt >> 16) & 0xFF] ^
                                  U3[(tt >>  8) & 0xFF] ^
                                  U4[ tt        & 0xFF]);
            }
        }
    }

    AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
            throw new Error('invalid plaintext size (must be 16 bytes)');
        }

        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Ke[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T4[ t[(i + 3) % 4]        & 0xff] ^
                        this._Ke[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Ke[rounds][i];
            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }

    AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
            throw new Error('invalid ciphertext size (must be 16 bytes)');
        }

        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Kd[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T8[ t[(i + 1) % 4]        & 0xff] ^
                        this._Kd[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Kd[rounds][i];
            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }


    /**
     *  Mode Of Operation - Electonic Codebook (ECB)
     */
    var ModeOfOperationECB = function(key) {
        if (!(this instanceof ModeOfOperationECB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Electronic Code Block";
        this.name = "ecb";

        this._aes = new AES(key);
    }

    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);
            block = this._aes.encrypt(block);
            copyArray(block, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);
            copyArray(block, plaintext, i);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Block Chaining (CBC)
     */
    var ModeOfOperationCBC = function(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Block Chaining";
        this.name = "cbc";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastCipherblock = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);

            for (var j = 0; j < 16; j++) {
                block[j] ^= this._lastCipherblock[j];
            }

            this._lastCipherblock = this._aes.encrypt(block);
            copyArray(this._lastCipherblock, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);

            for (var j = 0; j < 16; j++) {
                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
            }

            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Feedback (CFB)
     */
    var ModeOfOperationCFB = function(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Feedback";
        this.name = "cfb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 size)');
        }

        if (!segmentSize) { segmentSize = 1; }

        this.segmentSize = segmentSize;

        this._shiftRegister = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if ((plaintext.length % this.segmentSize) != 0) {
            throw new Error('invalid plaintext size (must be segmentSize bytes)');
        }

        var encrypted = coerceArray(plaintext, true);

        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j = 0; j < this.segmentSize; j++) {
                encrypted[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return encrypted;
    }

    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if ((ciphertext.length % this.segmentSize) != 0) {
            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
        }

        var plaintext = coerceArray(ciphertext, true);

        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);

            for (var j = 0; j < this.segmentSize; j++) {
                plaintext[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return plaintext;
    }

    /**
     *  Mode Of Operation - Output Feedback (OFB)
     */
    var ModeOfOperationOFB = function(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Output Feedback";
        this.name = "ofb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
            }
            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


    /**
     *  Counter object for CTR common mode of operation
     */
    var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
            throw Error('Counter must be instanitated with `new`');
        }

        // We allow 0, but anything false-ish uses the default 1
        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

        if (typeof(initialValue) === 'number') {
            this._counter = createArray(16);
            this.setValue(initialValue);

        } else {
            this.setBytes(initialValue);
        }
    }

    Counter.prototype.setValue = function(value) {
        if (typeof(value) !== 'number' || parseInt(value) != value) {
            throw new Error('invalid counter value (must be an integer)');
        }

        // We cannot safely handle numbers beyond the safe range for integers
        if (value > Number.MAX_SAFE_INTEGER) {
            throw new Error('integer value out of safe range');
        }

        for (var index = 15; index >= 0; --index) {
            this._counter[index] = value % 256;
            value = parseInt(value / 256);
        }
    }

    Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);

        if (bytes.length != 16) {
            throw new Error('invalid counter bytes size (must be 16 bytes)');
        }

        this._counter = bytes;
    };

    Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
            if (this._counter[i] === 255) {
                this._counter[i] = 0;
            } else {
                this._counter[i]++;
                break;
            }
        }
    }


    /**
     *  Mode Of Operation - Counter (CTR)
     */
    var ModeOfOperationCTR = function(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Counter";
        this.name = "ctr";

        if (!(counter instanceof Counter)) {
            counter = new Counter(counter)
        }

        this._counter = counter;

        this._remainingCounter = null;
        this._remainingCounterIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(this._counter._counter);
                this._remainingCounterIndex = 0;
                this._counter.increment();
            }
            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


    ///////////////////////
    // Padding

    // See:https://tools.ietf.org/html/rfc2315
    function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - (data.length % 16);
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i = data.length; i < result.length; i++) {
            result[i] = padder;
        }
        return result;
    }

    function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

        var padder = data[data.length - 1];
        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

        var length = data.length - padder;
        for (var i = 0; i < padder; i++) {
            if (data[length + i] !== padder) {
                throw new Error('PKCS#7 invalid padding byte');
            }
        }

        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
    }

    ///////////////////////
    // Exporting


    // The block cipher
    var aesjs = {
        AES: AES,
        Counter: Counter,

        ModeOfOperation: {
            ecb: ModeOfOperationECB,
            cbc: ModeOfOperationCBC,
            cfb: ModeOfOperationCFB,
            ofb: ModeOfOperationOFB,
            ctr: ModeOfOperationCTR
        },

        utils: {
            hex: convertHex,
            utf8: convertUtf8
        },

        padding: {
            pkcs7: {
                pad: pkcs7pad,
                strip: pkcs7strip
            }
        },

        _arrayTest: {
            coerceArray: coerceArray,
            createArray: createArray,
            copyArray: copyArray,
        }
    };


    // node.js
    if (true) {
        module.exports = aesjs

    // RequireJS/AMD
    // http://www.requirejs.org/docs/api.html
    // https://github.com/amdjs/amdjs-api/wiki/AMD
    } else {}


})(this);


/***/ }),

/***/ "./node_modules/bn.js/lib/bn.js":
/*!**************************************!*\
  !*** ./node_modules/bn.js/lib/bn.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    Buffer = __webpack_require__(/*! buffer */ 0).Buffer;
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
    }

    if (base === 16) {
      this._parseHex(number, start);
    } else {
      this._parseBase(number, base, start);
    }

    if (number[0] === '-') {
      this.negative = 1;
    }

    this.strip();

    if (endian !== 'le') return;

    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex (str, start, end) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r <<= 4;

      // 'a' - 'f'
      if (c >= 49 && c <= 54) {
        r |= c - 49 + 0xa;

      // 'A' - 'F'
      } else if (c >= 17 && c <= 22) {
        r |= c - 17 + 0xa;

      // '0' - '9'
      } else {
        r |= c & 0xf;
      }
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    // Scan 24-bit chunks and add them to the number
    var off = 0;
    for (i = number.length - 6, j = 0; i >= start; i -= 6) {
      w = parseHex(number, i, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
      off += 24;
      if (off >= 26) {
        off -= 26;
        j++;
      }
    }
    if (i + 6 !== start) {
      w = parseHex(number, start, i + 6);
      this.words[j] |= (w << off) & 0x3ffffff;
      this.words[j + 1] |= w >>> (26 - off) & 0x3fffff;
    }
    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      r.strip();
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(  false || module, this);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/jssha/src/sha.js":
/*!***************************************!*\
  !*** ./node_modules/jssha/src/sha.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_RESULT__;/*
 A JavaScript implementation of the SHA family of hashes, as
 defined in FIPS PUB 180-4 and FIPS PUB 202, as well as the corresponding
 HMAC implementation as defined in FIPS PUB 198a

 Copyright Brian Turek 2008-2017
 Distributed under the BSD License
 See http://caligatio.github.com/jsSHA/ for more information

 Several functions taken from Paul Johnston
*/
(function(Y){function C(c,a,b){var e=0,h=[],n=0,g,l,d,f,m,q,u,r,I=!1,v=[],w=[],t,y=!1,z=!1,x=-1;b=b||{};g=b.encoding||"UTF8";t=b.numRounds||1;if(t!==parseInt(t,10)||1>t)throw Error("numRounds must a integer >= 1");if("SHA-1"===c)m=512,q=K,u=Z,f=160,r=function(a){return a.slice()};else if(0===c.lastIndexOf("SHA-",0))if(q=function(a,b){return L(a,b,c)},u=function(a,b,h,e){var k,f;if("SHA-224"===c||"SHA-256"===c)k=(b+65>>>9<<4)+15,f=16;else if("SHA-384"===c||"SHA-512"===c)k=(b+129>>>10<<
5)+31,f=32;else throw Error("Unexpected error in SHA-2 implementation");for(;a.length<=k;)a.push(0);a[b>>>5]|=128<<24-b%32;b=b+h;a[k]=b&4294967295;a[k-1]=b/4294967296|0;h=a.length;for(b=0;b<h;b+=f)e=L(a.slice(b,b+f),e,c);if("SHA-224"===c)a=[e[0],e[1],e[2],e[3],e[4],e[5],e[6]];else if("SHA-256"===c)a=e;else if("SHA-384"===c)a=[e[0].a,e[0].b,e[1].a,e[1].b,e[2].a,e[2].b,e[3].a,e[3].b,e[4].a,e[4].b,e[5].a,e[5].b];else if("SHA-512"===c)a=[e[0].a,e[0].b,e[1].a,e[1].b,e[2].a,e[2].b,e[3].a,e[3].b,e[4].a,
e[4].b,e[5].a,e[5].b,e[6].a,e[6].b,e[7].a,e[7].b];else throw Error("Unexpected error in SHA-2 implementation");return a},r=function(a){return a.slice()},"SHA-224"===c)m=512,f=224;else if("SHA-256"===c)m=512,f=256;else if("SHA-384"===c)m=1024,f=384;else if("SHA-512"===c)m=1024,f=512;else throw Error("Chosen SHA variant is not supported");else if(0===c.lastIndexOf("SHA3-",0)||0===c.lastIndexOf("SHAKE",0)){var F=6;q=D;r=function(a){var c=[],e;for(e=0;5>e;e+=1)c[e]=a[e].slice();return c};x=1;if("SHA3-224"===
c)m=1152,f=224;else if("SHA3-256"===c)m=1088,f=256;else if("SHA3-384"===c)m=832,f=384;else if("SHA3-512"===c)m=576,f=512;else if("SHAKE128"===c)m=1344,f=-1,F=31,z=!0;else if("SHAKE256"===c)m=1088,f=-1,F=31,z=!0;else throw Error("Chosen SHA variant is not supported");u=function(a,c,e,b,h){e=m;var k=F,f,g=[],n=e>>>5,l=0,d=c>>>5;for(f=0;f<d&&c>=e;f+=n)b=D(a.slice(f,f+n),b),c-=e;a=a.slice(f);for(c%=e;a.length<n;)a.push(0);f=c>>>3;a[f>>2]^=k<<f%4*8;a[n-1]^=2147483648;for(b=D(a,b);32*g.length<h;){a=b[l%
5][l/5|0];g.push(a.b);if(32*g.length>=h)break;g.push(a.a);l+=1;0===64*l%e&&D(null,b)}return g}}else throw Error("Chosen SHA variant is not supported");d=M(a,g,x);l=A(c);this.setHMACKey=function(a,b,h){var k;if(!0===I)throw Error("HMAC key already set");if(!0===y)throw Error("Cannot set HMAC key after calling update");if(!0===z)throw Error("SHAKE is not supported for HMAC");g=(h||{}).encoding||"UTF8";b=M(b,g,x)(a);a=b.binLen;b=b.value;k=m>>>3;h=k/4-1;if(k<a/8){for(b=u(b,a,0,A(c),f);b.length<=h;)b.push(0);
b[h]&=4294967040}else if(k>a/8){for(;b.length<=h;)b.push(0);b[h]&=4294967040}for(a=0;a<=h;a+=1)v[a]=b[a]^909522486,w[a]=b[a]^1549556828;l=q(v,l);e=m;I=!0};this.update=function(a){var c,b,k,f=0,g=m>>>5;c=d(a,h,n);a=c.binLen;b=c.value;c=a>>>5;for(k=0;k<c;k+=g)f+m<=a&&(l=q(b.slice(k,k+g),l),f+=m);e+=f;h=b.slice(f>>>5);n=a%m;y=!0};this.getHash=function(a,b){var k,g,d,m;if(!0===I)throw Error("Cannot call getHash after setting HMAC key");d=N(b);if(!0===z){if(-1===d.shakeLen)throw Error("shakeLen must be specified in options");
f=d.shakeLen}switch(a){case "HEX":k=function(a){return O(a,f,x,d)};break;case "B64":k=function(a){return P(a,f,x,d)};break;case "BYTES":k=function(a){return Q(a,f,x)};break;case "ARRAYBUFFER":try{g=new ArrayBuffer(0)}catch(p){throw Error("ARRAYBUFFER not supported by this environment");}k=function(a){return R(a,f,x)};break;default:throw Error("format must be HEX, B64, BYTES, or ARRAYBUFFER");}m=u(h.slice(),n,e,r(l),f);for(g=1;g<t;g+=1)!0===z&&0!==f%32&&(m[m.length-1]&=16777215>>>24-f%32),m=u(m,f,
0,A(c),f);return k(m)};this.getHMAC=function(a,b){var k,g,d,p;if(!1===I)throw Error("Cannot call getHMAC without first setting HMAC key");d=N(b);switch(a){case "HEX":k=function(a){return O(a,f,x,d)};break;case "B64":k=function(a){return P(a,f,x,d)};break;case "BYTES":k=function(a){return Q(a,f,x)};break;case "ARRAYBUFFER":try{k=new ArrayBuffer(0)}catch(v){throw Error("ARRAYBUFFER not supported by this environment");}k=function(a){return R(a,f,x)};break;default:throw Error("outputFormat must be HEX, B64, BYTES, or ARRAYBUFFER");
}g=u(h.slice(),n,e,r(l),f);p=q(w,A(c));p=u(g,f,m,p,f);return k(p)}}function b(c,a){this.a=c;this.b=a}function O(c,a,b,e){var h="";a/=8;var n,g,d;d=-1===b?3:0;for(n=0;n<a;n+=1)g=c[n>>>2]>>>8*(d+n%4*b),h+="0123456789abcdef".charAt(g>>>4&15)+"0123456789abcdef".charAt(g&15);return e.outputUpper?h.toUpperCase():h}function P(c,a,b,e){var h="",n=a/8,g,d,p,f;f=-1===b?3:0;for(g=0;g<n;g+=3)for(d=g+1<n?c[g+1>>>2]:0,p=g+2<n?c[g+2>>>2]:0,p=(c[g>>>2]>>>8*(f+g%4*b)&255)<<16|(d>>>8*(f+(g+1)%4*b)&255)<<8|p>>>8*(f+
(g+2)%4*b)&255,d=0;4>d;d+=1)8*g+6*d<=a?h+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(p>>>6*(3-d)&63):h+=e.b64Pad;return h}function Q(c,a,b){var e="";a/=8;var h,d,g;g=-1===b?3:0;for(h=0;h<a;h+=1)d=c[h>>>2]>>>8*(g+h%4*b)&255,e+=String.fromCharCode(d);return e}function R(c,a,b){a/=8;var e,h=new ArrayBuffer(a),d,g;g=new Uint8Array(h);d=-1===b?3:0;for(e=0;e<a;e+=1)g[e]=c[e>>>2]>>>8*(d+e%4*b)&255;return h}function N(c){var a={outputUpper:!1,b64Pad:"=",shakeLen:-1};c=c||{};
a.outputUpper=c.outputUpper||!1;!0===c.hasOwnProperty("b64Pad")&&(a.b64Pad=c.b64Pad);if(!0===c.hasOwnProperty("shakeLen")){if(0!==c.shakeLen%8)throw Error("shakeLen must be a multiple of 8");a.shakeLen=c.shakeLen}if("boolean"!==typeof a.outputUpper)throw Error("Invalid outputUpper formatting option");if("string"!==typeof a.b64Pad)throw Error("Invalid b64Pad formatting option");return a}function M(c,a,b){switch(a){case "UTF8":case "UTF16BE":case "UTF16LE":break;default:throw Error("encoding must be UTF8, UTF16BE, or UTF16LE");
}switch(c){case "HEX":c=function(a,c,d){var g=a.length,l,p,f,m,q,u;if(0!==g%2)throw Error("String of HEX type must be in byte increments");c=c||[0];d=d||0;q=d>>>3;u=-1===b?3:0;for(l=0;l<g;l+=2){p=parseInt(a.substr(l,2),16);if(isNaN(p))throw Error("String of HEX type contains invalid characters");m=(l>>>1)+q;for(f=m>>>2;c.length<=f;)c.push(0);c[f]|=p<<8*(u+m%4*b)}return{value:c,binLen:4*g+d}};break;case "TEXT":c=function(c,h,d){var g,l,p=0,f,m,q,u,r,t;h=h||[0];d=d||0;q=d>>>3;if("UTF8"===a)for(t=-1===
b?3:0,f=0;f<c.length;f+=1)for(g=c.charCodeAt(f),l=[],128>g?l.push(g):2048>g?(l.push(192|g>>>6),l.push(128|g&63)):55296>g||57344<=g?l.push(224|g>>>12,128|g>>>6&63,128|g&63):(f+=1,g=65536+((g&1023)<<10|c.charCodeAt(f)&1023),l.push(240|g>>>18,128|g>>>12&63,128|g>>>6&63,128|g&63)),m=0;m<l.length;m+=1){r=p+q;for(u=r>>>2;h.length<=u;)h.push(0);h[u]|=l[m]<<8*(t+r%4*b);p+=1}else if("UTF16BE"===a||"UTF16LE"===a)for(t=-1===b?2:0,l="UTF16LE"===a&&1!==b||"UTF16LE"!==a&&1===b,f=0;f<c.length;f+=1){g=c.charCodeAt(f);
!0===l&&(m=g&255,g=m<<8|g>>>8);r=p+q;for(u=r>>>2;h.length<=u;)h.push(0);h[u]|=g<<8*(t+r%4*b);p+=2}return{value:h,binLen:8*p+d}};break;case "B64":c=function(a,c,d){var g=0,l,p,f,m,q,u,r,t;if(-1===a.search(/^[a-zA-Z0-9=+\/]+$/))throw Error("Invalid character in base-64 string");p=a.indexOf("=");a=a.replace(/\=/g,"");if(-1!==p&&p<a.length)throw Error("Invalid '=' found in base-64 string");c=c||[0];d=d||0;u=d>>>3;t=-1===b?3:0;for(p=0;p<a.length;p+=4){q=a.substr(p,4);for(f=m=0;f<q.length;f+=1)l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".indexOf(q[f]),
m|=l<<18-6*f;for(f=0;f<q.length-1;f+=1){r=g+u;for(l=r>>>2;c.length<=l;)c.push(0);c[l]|=(m>>>16-8*f&255)<<8*(t+r%4*b);g+=1}}return{value:c,binLen:8*g+d}};break;case "BYTES":c=function(a,c,d){var g,l,p,f,m,q;c=c||[0];d=d||0;p=d>>>3;q=-1===b?3:0;for(l=0;l<a.length;l+=1)g=a.charCodeAt(l),m=l+p,f=m>>>2,c.length<=f&&c.push(0),c[f]|=g<<8*(q+m%4*b);return{value:c,binLen:8*a.length+d}};break;case "ARRAYBUFFER":try{c=new ArrayBuffer(0)}catch(e){throw Error("ARRAYBUFFER not supported by this environment");}c=
function(a,c,d){var g,l,p,f,m,q;c=c||[0];d=d||0;l=d>>>3;m=-1===b?3:0;q=new Uint8Array(a);for(g=0;g<a.byteLength;g+=1)f=g+l,p=f>>>2,c.length<=p&&c.push(0),c[p]|=q[g]<<8*(m+f%4*b);return{value:c,binLen:8*a.byteLength+d}};break;default:throw Error("format must be HEX, TEXT, B64, BYTES, or ARRAYBUFFER");}return c}function y(c,a){return c<<a|c>>>32-a}function S(c,a){return 32<a?(a-=32,new b(c.b<<a|c.a>>>32-a,c.a<<a|c.b>>>32-a)):0!==a?new b(c.a<<a|c.b>>>32-a,c.b<<a|c.a>>>32-a):c}function w(c,a){return c>>>
a|c<<32-a}function t(c,a){var k=null,k=new b(c.a,c.b);return k=32>=a?new b(k.a>>>a|k.b<<32-a&4294967295,k.b>>>a|k.a<<32-a&4294967295):new b(k.b>>>a-32|k.a<<64-a&4294967295,k.a>>>a-32|k.b<<64-a&4294967295)}function T(c,a){var k=null;return k=32>=a?new b(c.a>>>a,c.b>>>a|c.a<<32-a&4294967295):new b(0,c.a>>>a-32)}function aa(c,a,b){return c&a^~c&b}function ba(c,a,k){return new b(c.a&a.a^~c.a&k.a,c.b&a.b^~c.b&k.b)}function U(c,a,b){return c&a^c&b^a&b}function ca(c,a,k){return new b(c.a&a.a^c.a&k.a^a.a&
k.a,c.b&a.b^c.b&k.b^a.b&k.b)}function da(c){return w(c,2)^w(c,13)^w(c,22)}function ea(c){var a=t(c,28),k=t(c,34);c=t(c,39);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function fa(c){return w(c,6)^w(c,11)^w(c,25)}function ga(c){var a=t(c,14),k=t(c,18);c=t(c,41);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function ha(c){return w(c,7)^w(c,18)^c>>>3}function ia(c){var a=t(c,1),k=t(c,8);c=T(c,7);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function ja(c){return w(c,17)^w(c,19)^c>>>10}function ka(c){var a=t(c,19),k=t(c,61);
c=T(c,6);return new b(a.a^k.a^c.a,a.b^k.b^c.b)}function G(c,a){var b=(c&65535)+(a&65535);return((c>>>16)+(a>>>16)+(b>>>16)&65535)<<16|b&65535}function la(c,a,b,e){var h=(c&65535)+(a&65535)+(b&65535)+(e&65535);return((c>>>16)+(a>>>16)+(b>>>16)+(e>>>16)+(h>>>16)&65535)<<16|h&65535}function H(c,a,b,e,h){var d=(c&65535)+(a&65535)+(b&65535)+(e&65535)+(h&65535);return((c>>>16)+(a>>>16)+(b>>>16)+(e>>>16)+(h>>>16)+(d>>>16)&65535)<<16|d&65535}function ma(c,a){var d,e,h;d=(c.b&65535)+(a.b&65535);e=(c.b>>>16)+
(a.b>>>16)+(d>>>16);h=(e&65535)<<16|d&65535;d=(c.a&65535)+(a.a&65535)+(e>>>16);e=(c.a>>>16)+(a.a>>>16)+(d>>>16);return new b((e&65535)<<16|d&65535,h)}function na(c,a,d,e){var h,n,g;h=(c.b&65535)+(a.b&65535)+(d.b&65535)+(e.b&65535);n=(c.b>>>16)+(a.b>>>16)+(d.b>>>16)+(e.b>>>16)+(h>>>16);g=(n&65535)<<16|h&65535;h=(c.a&65535)+(a.a&65535)+(d.a&65535)+(e.a&65535)+(n>>>16);n=(c.a>>>16)+(a.a>>>16)+(d.a>>>16)+(e.a>>>16)+(h>>>16);return new b((n&65535)<<16|h&65535,g)}function oa(c,a,d,e,h){var n,g,l;n=(c.b&
65535)+(a.b&65535)+(d.b&65535)+(e.b&65535)+(h.b&65535);g=(c.b>>>16)+(a.b>>>16)+(d.b>>>16)+(e.b>>>16)+(h.b>>>16)+(n>>>16);l=(g&65535)<<16|n&65535;n=(c.a&65535)+(a.a&65535)+(d.a&65535)+(e.a&65535)+(h.a&65535)+(g>>>16);g=(c.a>>>16)+(a.a>>>16)+(d.a>>>16)+(e.a>>>16)+(h.a>>>16)+(n>>>16);return new b((g&65535)<<16|n&65535,l)}function B(c,a){return new b(c.a^a.a,c.b^a.b)}function A(c){var a=[],d;if("SHA-1"===c)a=[1732584193,4023233417,2562383102,271733878,3285377520];else if(0===c.lastIndexOf("SHA-",0))switch(a=
[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428],d=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],c){case "SHA-224":break;case "SHA-256":a=d;break;case "SHA-384":a=[new b(3418070365,a[0]),new b(1654270250,a[1]),new b(2438529370,a[2]),new b(355462360,a[3]),new b(1731405415,a[4]),new b(41048885895,a[5]),new b(3675008525,a[6]),new b(1203062813,a[7])];break;case "SHA-512":a=[new b(d[0],4089235720),new b(d[1],2227873595),
new b(d[2],4271175723),new b(d[3],1595750129),new b(d[4],2917565137),new b(d[5],725511199),new b(d[6],4215389547),new b(d[7],327033209)];break;default:throw Error("Unknown SHA variant");}else if(0===c.lastIndexOf("SHA3-",0)||0===c.lastIndexOf("SHAKE",0))for(c=0;5>c;c+=1)a[c]=[new b(0,0),new b(0,0),new b(0,0),new b(0,0),new b(0,0)];else throw Error("No SHA variants supported");return a}function K(c,a){var b=[],e,d,n,g,l,p,f;e=a[0];d=a[1];n=a[2];g=a[3];l=a[4];for(f=0;80>f;f+=1)b[f]=16>f?c[f]:y(b[f-
3]^b[f-8]^b[f-14]^b[f-16],1),p=20>f?H(y(e,5),d&n^~d&g,l,1518500249,b[f]):40>f?H(y(e,5),d^n^g,l,1859775393,b[f]):60>f?H(y(e,5),U(d,n,g),l,2400959708,b[f]):H(y(e,5),d^n^g,l,3395469782,b[f]),l=g,g=n,n=y(d,30),d=e,e=p;a[0]=G(e,a[0]);a[1]=G(d,a[1]);a[2]=G(n,a[2]);a[3]=G(g,a[3]);a[4]=G(l,a[4]);return a}function Z(c,a,b,e){var d;for(d=(a+65>>>9<<4)+15;c.length<=d;)c.push(0);c[a>>>5]|=128<<24-a%32;a+=b;c[d]=a&4294967295;c[d-1]=a/4294967296|0;a=c.length;for(d=0;d<a;d+=16)e=K(c.slice(d,d+16),e);return e}function L(c,
a,k){var e,h,n,g,l,p,f,m,q,u,r,t,v,w,y,A,z,x,F,B,C,D,E=[],J;if("SHA-224"===k||"SHA-256"===k)u=64,t=1,D=Number,v=G,w=la,y=H,A=ha,z=ja,x=da,F=fa,C=U,B=aa,J=d;else if("SHA-384"===k||"SHA-512"===k)u=80,t=2,D=b,v=ma,w=na,y=oa,A=ia,z=ka,x=ea,F=ga,C=ca,B=ba,J=V;else throw Error("Unexpected error in SHA-2 implementation");k=a[0];e=a[1];h=a[2];n=a[3];g=a[4];l=a[5];p=a[6];f=a[7];for(r=0;r<u;r+=1)16>r?(q=r*t,m=c.length<=q?0:c[q],q=c.length<=q+1?0:c[q+1],E[r]=new D(m,q)):E[r]=w(z(E[r-2]),E[r-7],A(E[r-15]),E[r-
16]),m=y(f,F(g),B(g,l,p),J[r],E[r]),q=v(x(k),C(k,e,h)),f=p,p=l,l=g,g=v(n,m),n=h,h=e,e=k,k=v(m,q);a[0]=v(k,a[0]);a[1]=v(e,a[1]);a[2]=v(h,a[2]);a[3]=v(n,a[3]);a[4]=v(g,a[4]);a[5]=v(l,a[5]);a[6]=v(p,a[6]);a[7]=v(f,a[7]);return a}function D(c,a){var d,e,h,n,g=[],l=[];if(null!==c)for(e=0;e<c.length;e+=2)a[(e>>>1)%5][(e>>>1)/5|0]=B(a[(e>>>1)%5][(e>>>1)/5|0],new b(c[e+1],c[e]));for(d=0;24>d;d+=1){n=A("SHA3-");for(e=0;5>e;e+=1){h=a[e][0];var p=a[e][1],f=a[e][2],m=a[e][3],q=a[e][4];g[e]=new b(h.a^p.a^f.a^
m.a^q.a,h.b^p.b^f.b^m.b^q.b)}for(e=0;5>e;e+=1)l[e]=B(g[(e+4)%5],S(g[(e+1)%5],1));for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)a[e][h]=B(a[e][h],l[e]);for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)n[h][(2*e+3*h)%5]=S(a[e][h],W[e][h]);for(e=0;5>e;e+=1)for(h=0;5>h;h+=1)a[e][h]=B(n[e][h],new b(~n[(e+1)%5][h].a&n[(e+2)%5][h].a,~n[(e+1)%5][h].b&n[(e+2)%5][h].b));a[0][0]=B(a[0][0],X[d])}return a}var d,V,W,X;d=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,
1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,
2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];V=[new b(d[0],3609767458),new b(d[1],602891725),new b(d[2],3964484399),new b(d[3],2173295548),new b(d[4],4081628472),new b(d[5],3053834265),new b(d[6],2937671579),new b(d[7],3664609560),new b(d[8],2734883394),new b(d[9],1164996542),new b(d[10],1323610764),new b(d[11],3590304994),new b(d[12],4068182383),new b(d[13],991336113),new b(d[14],633803317),new b(d[15],3479774868),new b(d[16],2666613458),new b(d[17],944711139),new b(d[18],2341262773),
new b(d[19],2007800933),new b(d[20],1495990901),new b(d[21],1856431235),new b(d[22],3175218132),new b(d[23],2198950837),new b(d[24],3999719339),new b(d[25],766784016),new b(d[26],2566594879),new b(d[27],3203337956),new b(d[28],1034457026),new b(d[29],2466948901),new b(d[30],3758326383),new b(d[31],168717936),new b(d[32],1188179964),new b(d[33],1546045734),new b(d[34],1522805485),new b(d[35],2643833823),new b(d[36],2343527390),new b(d[37],1014477480),new b(d[38],1206759142),new b(d[39],344077627),
new b(d[40],1290863460),new b(d[41],3158454273),new b(d[42],3505952657),new b(d[43],106217008),new b(d[44],3606008344),new b(d[45],1432725776),new b(d[46],1467031594),new b(d[47],851169720),new b(d[48],3100823752),new b(d[49],1363258195),new b(d[50],3750685593),new b(d[51],3785050280),new b(d[52],3318307427),new b(d[53],3812723403),new b(d[54],2003034995),new b(d[55],3602036899),new b(d[56],1575990012),new b(d[57],1125592928),new b(d[58],2716904306),new b(d[59],442776044),new b(d[60],593698344),new b(d[61],
3733110249),new b(d[62],2999351573),new b(d[63],3815920427),new b(3391569614,3928383900),new b(3515267271,566280711),new b(3940187606,3454069534),new b(4118630271,4000239992),new b(116418474,1914138554),new b(174292421,2731055270),new b(289380356,3203993006),new b(460393269,320620315),new b(685471733,587496836),new b(852142971,1086792851),new b(1017036298,365543100),new b(1126000580,2618297676),new b(1288033470,3409855158),new b(1501505948,4234509866),new b(1607167915,987167468),new b(1816402316,
1246189591)];X=[new b(0,1),new b(0,32898),new b(2147483648,32906),new b(2147483648,2147516416),new b(0,32907),new b(0,2147483649),new b(2147483648,2147516545),new b(2147483648,32777),new b(0,138),new b(0,136),new b(0,2147516425),new b(0,2147483658),new b(0,2147516555),new b(2147483648,139),new b(2147483648,32905),new b(2147483648,32771),new b(2147483648,32770),new b(2147483648,128),new b(0,32778),new b(2147483648,2147483658),new b(2147483648,2147516545),new b(2147483648,32896),new b(0,2147483649),
new b(2147483648,2147516424)];W=[[0,36,3,41,18],[1,44,10,45,2],[62,6,43,15,61],[28,55,25,21,56],[27,20,39,8,14]]; true?!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return C}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):undefined})(this);


/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/Cashout.js":
/*!************************!*\
  !*** ./src/Cashout.js ***!
  \************************/
/*! exports provided: CashoutOnlyRequest, CashoutOnlyResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CashoutOnlyRequest", function() { return CashoutOnlyRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CashoutOnlyResponse", function() { return CashoutOnlyResponse; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");





var CashoutOnlyRequest =
/*#__PURE__*/
function () {
  function CashoutOnlyRequest(amountCents, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, CashoutOnlyRequest);

    this.PosRefId = posRefId;
    this.CashoutAmount = amountCents;
    this.SurchargeAmount = null;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(CashoutOnlyRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "cash_amount": this.CashoutAmount,
        "surcharge_amount": this.SurchargeAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_4__["RequestIdHelper"].Id("cshout"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].CashoutOnlyRequest, data, true);
    }
  }]);

  return CashoutOnlyRequest;
}();
var CashoutOnlyResponse =
/*#__PURE__*/
function () {
  function CashoutOnlyResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, CashoutOnlyResponse);

    this._m = m;
    this.RequestId = m.Id;
    this.PosRefId = m.Data.pos_ref_id;
    this.SchemeName = m.Data.scheme_name;
    this.Success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(CashoutOnlyResponse, [{
    key: "GetRRN",
    value: function GetRRN() {
      return this._m.Data["rrn"];
    }
  }, {
    key: "GetCashoutAmount",
    value: function GetCashoutAmount() {
      return this._m.Data["cash_amount"];
    }
  }, {
    key: "GetBankNonCashAmount",
    value: function GetBankNonCashAmount() {
      return this._m.Data["bank_noncash_amount"];
    }
  }, {
    key: "GetBankCashAmount",
    value: function GetBankCashAmount() {
      return this._m.Data["bank_cash_amount"];
    }
  }, {
    key: "GetCustomerReceipt",
    value: function GetCustomerReceipt() {
      return this._m.Data["customer_receipt"];
    }
  }, {
    key: "GetMerchantReceipt",
    value: function GetMerchantReceipt() {
      return this._m.Data["merchant_receipt"];
    }
  }, {
    key: "GetResponseText",
    value: function GetResponseText() {
      return this._m.Data["host_response_text"];
    }
  }, {
    key: "GetResponseCode",
    value: function GetResponseCode() {
      return this._m.Data["host_response_code"];
    }
  }, {
    key: "GetTerminalReferenceId",
    value: function GetTerminalReferenceId() {
      return this._m.Data["terminal_ref_id"];
    }
  }, {
    key: "GetAccountType",
    value: function GetAccountType() {
      return this._m.Data["account_type"];
    }
  }, {
    key: "GetAuthCode",
    value: function GetAuthCode() {
      return this._m.Data["auth_code"];
    }
  }, {
    key: "GetBankDate",
    value: function GetBankDate() {
      return this._m.Data["bank_date"];
    }
  }, {
    key: "GetBankTime",
    value: function GetBankTime() {
      return this._m.Data["bank_time"];
    }
  }, {
    key: "GetMaskedPan",
    value: function GetMaskedPan() {
      return this._m.Data["masked_pan"];
    }
  }, {
    key: "GetTerminalId",
    value: function GetTerminalId() {
      return this._m.Data["terminal_id"];
    }
  }, {
    key: "WasMerchantReceiptPrinted",
    value: function WasMerchantReceiptPrinted() {
      return this._m.Data["merchant_receipt_printed"];
    }
  }, {
    key: "WasCustomerReceiptPrinted",
    value: function WasCustomerReceiptPrinted() {
      return this._m.Data["customer_receipt_printed"];
    }
  }, {
    key: "GetSurchargeAmount",
    value: function GetSurchargeAmount() {
      return this._m.Data["surcharge_amount"];
    }
  }, {
    key: "GetResponseValue",
    value: function GetResponseValue(attribute) {
      return this._m.Data[attribute];
    }
  }]);

  return CashoutOnlyResponse;
}();

/***/ }),

/***/ "./src/Connection.js":
/*!***************************!*\
  !*** ./src/Connection.js ***!
  \***************************/
/*! exports provided: ConnectionState, SPI_PROTOCOL, ConnectionStateEventArgs, MessageEventArgs, Connection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionState", function() { return ConnectionState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPI_PROTOCOL", function() { return SPI_PROTOCOL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectionStateEventArgs", function() { return ConnectionStateEventArgs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageEventArgs", function() { return MessageEventArgs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Connection", function() { return Connection; });
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);


var ConnectionState = {
  Disconnected: 'Disconnected',
  Connecting: 'Connecting',
  Connected: 'Connected'
};
var SPI_PROTOCOL = 'spi.2.6.0';
var ConnectionStateEventArgs = function ConnectionStateEventArgs(connectionState) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, ConnectionStateEventArgs);

  this.ConnectionState = connectionState;
};
var MessageEventArgs = function MessageEventArgs(message) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, MessageEventArgs);

  this.Message = message;
};
var Connection =
/*#__PURE__*/
function () {
  function Connection() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Connection);

    this.Address = null;
    this.Connected = false;
    this.State = ConnectionState.Disconnected;
    this.SpiProtocol = SPI_PROTOCOL;
    this._ws = null;

    if (typeof WebSocket === 'undefined') {
      throw new Error('Environment does not support WebSockets');
    }
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(Connection, [{
    key: "Connect",
    value: function Connect(UseSecureWebSockets) {
      var _this = this;

      if (this.State === ConnectionState.Connected || this.State === ConnectionState.Connecting) {
        // already connected or connecting. disconnect first.
        return;
      }

      this.State = ConnectionState.Connecting; //Create a new socket instance specifying the url, SPI protocol and Websocket to use.
      //The will create a TCP/IP socket connection to the provided URL and perform HTTP websocket negotiation

      this._ws = new WebSocket(this.Address, this.SpiProtocol);

      this._ws.onopen = function () {
        return _this.pollWebSocketConnection();
      };

      this._ws.onmessage = function (payload) {
        return _this.onMessageReceived(payload);
      };

      this._ws.onclose = function () {
        return _this.onClosed();
      };

      this._ws.onerror = function (err) {
        return _this.onError(err);
      };

      document.dispatchEvent(new CustomEvent('ConnectionStatusChanged', {
        detail: new ConnectionStateEventArgs(ConnectionState.Connecting)
      }));
    }
  }, {
    key: "Disconnect",
    value: function Disconnect() {
      if (this.State == ConnectionState.Disconnected) return;

      if (this._ws && this._ws.readyState != this._ws.CLOSED) {
        this._ws.close();
      }

      if (this._ws) {
        this._ws.onopen = null;
        this._ws.onmessage = null;
        this._ws.onclose = null;
        this._ws.onerror = null;
      }

      this.onClosed();
    }
  }, {
    key: "Send",
    value: function Send(message) {
      this._ws.send(message);
    }
  }, {
    key: "onOpened",
    value: function onOpened() {
      this.State = ConnectionState.Connected;
      this.Connected = true;
      document.dispatchEvent(new CustomEvent('ConnectionStatusChanged', {
        detail: new ConnectionStateEventArgs(ConnectionState.Connected)
      }));
    }
  }, {
    key: "onClosed",
    value: function onClosed() {
      this.Connected = false;
      this.State = ConnectionState.Disconnected;
      this._ws = null;
      document.dispatchEvent(new CustomEvent('ConnectionStatusChanged', {
        detail: new ConnectionStateEventArgs(ConnectionState.Disconnected)
      }));
    }
  }, {
    key: "pollWebSocketConnection",
    value: function pollWebSocketConnection() {
      var _this2 = this;

      var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      // Timeout trying to connect after 20 * 200ms = 4000 ms
      if (this._ws.readyState === this._ws.OPEN) {
        this.onOpened();
        return true;
      } else if (count < 20) {
        count++;
        setTimeout(function () {
          return _this2.pollWebSocketConnection(count);
        }, 200);
      } else {
        this.Disconnect();
        return false;
      }
    }
  }, {
    key: "onMessageReceived",
    value: function onMessageReceived(message) {
      document.dispatchEvent(new CustomEvent('MessageReceived', {
        detail: new MessageEventArgs(message.data)
      }));
    }
  }, {
    key: "onError",
    value: function onError(err) {
      document.dispatchEvent(new CustomEvent('ErrorReceived', {
        detail: new MessageEventArgs(err)
      }));
    }
  }]);

  return Connection;
}();

/***/ }),

/***/ "./src/Crypto.js":
/*!***********************!*\
  !*** ./src/Crypto.js ***!
  \***********************/
/*! exports provided: Crypto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Crypto", function() { return Crypto; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var jssha__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jssha */ "./node_modules/jssha/src/sha.js");
/* harmony import */ var jssha__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jssha__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! aes-js */ "./node_modules/aes-js/index.js");
/* harmony import */ var aes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(aes_js__WEBPACK_IMPORTED_MODULE_3__);




var Crypto =
/*#__PURE__*/
function () {
  function Crypto() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Crypto);
  } // <summary>
  // Encrypt a block using CBC and PKCS7.
  // </summary>
  // <param name="key">The key value</param>
  // <param name="data">The message to encrypt</param>
  // <returns>Returns the resulting encrypted string data as HEX.</returns>


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Crypto, null, [{
    key: "AesEncrypt",
    value: function AesEncrypt(key, data) {
      var bytes = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.hex.toBytes(key);
      var iv = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
      var textBytes = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.padding.pkcs7.pad(aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.utf8.toBytes(data));
      var aesCbc = new aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.ModeOfOperation.cbc(bytes, iv);
      var encryptedBytes = aesCbc.encrypt(textBytes);
      var encryptedString = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.hex.fromBytes(encryptedBytes);
      return encryptedString;
    } // <summary>
    // Decrypt a block using a CBC and PKCS7.
    // </summary>
    // <param name="key">The key value</param>
    // <param name="data">the data to decrypt</param>
    // <returns>Returns the resulting data decrypted in plaintext.</returns>

  }, {
    key: "AesDecrypt",
    value: function AesDecrypt(key, data) {
      var bytes = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.hex.toBytes(key);
      var iv = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
      var encryptedBytes = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.hex.toBytes(data);
      var aesCbc = new aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.ModeOfOperation.cbc(bytes, iv);
      var decryptedBytes = aesCbc.decrypt(encryptedBytes);
      var decrypted = aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.utils.utf8.fromBytes(aes_js__WEBPACK_IMPORTED_MODULE_3___default.a.padding.pkcs7.strip(decryptedBytes));
      return decrypted;
    } // <summary>
    // Calculates the HMACSHA256 signature of a message.
    // </summary>
    // <param name="key">The Hmac Key as HEX</param>
    // <param name="messageToSign">The message to sign</param>
    // <returns>The HMACSHA256 signature as a hex string</returns>

  }, {
    key: "HmacSignature",
    value: function HmacSignature(key, messageToSign) {
      var shaObj = new jssha__WEBPACK_IMPORTED_MODULE_2___default.a("SHA-256", "TEXT");
      shaObj.setHMACKey(key, 'HEX');
      shaObj.update(messageToSign);
      return shaObj.getHMAC("HEX");
    }
    /**
     * This utility function calculates the SHA-256 value in hexadecimal format
     * @param {String} value the value to be hashed
     */

  }, {
    key: "GenerateHash",
    value: function GenerateHash(value) {
      var shaObj = new jssha__WEBPACK_IMPORTED_MODULE_2___default.a('SHA-256', 'HEX');
      shaObj.update(value);
      var shaHash = shaObj.getHash('HEX');
      return shaHash;
    }
  }]);

  return Crypto;
}();

/***/ }),

/***/ "./src/DiffieHellman.js":
/*!******************************!*\
  !*** ./src/DiffieHellman.js ***!
  \******************************/
/*! exports provided: DiffieHellman */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DiffieHellman", function() { return DiffieHellman; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bn.js */ "./node_modules/bn.js/lib/bn.js");
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_2__);


 // This creates the private and public keys for diffie-hellman (https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange#Cryptographic_explanation)
// REQUIREMENTS: bn.js
// ASSUMPTIONS: Inputs to the functions are hexadecimal strings
// <summary>
// This class implements the Diffie-Hellman algorithm using BigIntegers.
// It can do the 3 main things:
// 1. Generate a random Private Key for you.
// 2. Generate your Public Key based on your Private Key.
// 3. Generate the Secret given their Public Key and your Private Key
// p and g are the shared constants for the algorithm, aka primeP and primeG.
// </summary>

var DiffieHellman =
/*#__PURE__*/
function () {
  function DiffieHellman() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, DiffieHellman);
  } // <summary>
  // Generates a random Private Key that you can use.
  // </summary>
  // <param name="p"></param>
  // <returns>Random Private Key</returns>


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(DiffieHellman, [{
    key: "RandomPrivateKey",
    value: function RandomPrivateKey(maxValue) {
      var maxValueBN = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(maxValue);
      var shiftDistance = Math.floor(Math.random() * 1000 + 1);
      var randBitInt = maxValueBN.shrn(shiftDistance); // Right shift divides by a power of 2

      var min = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(2);

      if (randBitInt.cmp(min) == -1) {
        return min;
      }

      return randBitInt;
    } // <summary>
    // Calculates the Public Key from a Private Key.
    // </summary>
    // <param name="p"></param>
    // <param name="g"></param>
    // <param name="privateKey"></param>
    // <returns>Public Key (Hex)</returns>

  }, {
    key: "PublicKey",
    value: function PublicKey(p, g, privateKey) {
      var aHex = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(privateKey, 16);
      var gHex = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(g, 16);
      var montPrime = bn_js__WEBPACK_IMPORTED_MODULE_2___default.a.mont(new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(p, 16));
      var gRed = gHex.toRed(montPrime);
      var secret = gRed.redPow(aHex).fromRed().toString(16);
      return secret;
    } // <summary>
    // Calculates the shared secret given their Public Key (A) and your Private Key (b)
    // </summary>
    // <param name="p"></param>
    // <param name="theirPublicKey"></param>
    // <param name="yourPrivateKey"></param>
    // <returns></returns>

  }, {
    key: "Secret",
    value: function Secret(p, theirPublicKey, yourPrivateKey) {
      var bHex = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(theirPublicKey, 16);
      var AHex = new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(yourPrivateKey, 16);
      var montPrime = bn_js__WEBPACK_IMPORTED_MODULE_2___default.a.mont(new bn_js__WEBPACK_IMPORTED_MODULE_2___default.a(p, 16));
      var BRed = bHex.toRed(montPrime);
      return BRed.redPow(AHex).fromRed().toString(16).toUpperCase();
    }
  }]);

  return DiffieHellman;
}();

/***/ }),

/***/ "./src/KeyRollingHelper.js":
/*!*********************************!*\
  !*** ./src/KeyRollingHelper.js ***!
  \*********************************/
/*! exports provided: KeyRollingHelper, KeyRollingResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyRollingHelper", function() { return KeyRollingHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyRollingResult", function() { return KeyRollingResult; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _Crypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Crypto */ "./src/Crypto.js");
/* harmony import */ var _Secrets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Secrets */ "./src/Secrets.js");





var KeyRollingHelper =
/*#__PURE__*/
function () {
  function KeyRollingHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, KeyRollingHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(KeyRollingHelper, null, [{
    key: "PerformKeyRolling",
    value: function PerformKeyRolling(krRequest, currentSecrets) {
      var m = new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](krRequest.Id, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].KeyRollResponse, {
        "status": "confirmed"
      }, true);
      var newSecrets = new _Secrets__WEBPACK_IMPORTED_MODULE_4__["Secrets"](_Crypto__WEBPACK_IMPORTED_MODULE_3__["Crypto"].GenerateHash(currentSecrets.EncKey).toUpperCase(), _Crypto__WEBPACK_IMPORTED_MODULE_3__["Crypto"].GenerateHash(currentSecrets.HmacKey).toUpperCase());
      return new KeyRollingResult(m, newSecrets);
    }
  }]);

  return KeyRollingHelper;
}();
var KeyRollingResult = function KeyRollingResult(keyRollingConfirmation, newSecrets) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, KeyRollingResult);

  this.KeyRollingConfirmation = keyRollingConfirmation;
  this.NewSecrets = newSecrets;
};

/***/ }),

/***/ "./src/Logger.js":
/*!***********************!*\
  !*** ./src/Logger.js ***!
  \***********************/
/*! exports provided: Logger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return Logger; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);


var Logger =
/*#__PURE__*/
function () {
  function Logger(element) {
    var lineSeperator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '\n';

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Logger);

    this.buffer = [];
    this.element = element;
    this.lineSeperator = lineSeperator;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Logger, [{
    key: "Info",
    value: function Info() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this.buffer.push(args.join(' '));

      this._render();
    }
  }, {
    key: "Debug",
    value: function Debug() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      this.buffer.push(args.join(' '));

      this._render();
    }
  }, {
    key: "Warn",
    value: function Warn() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      this.buffer.push(args.join(' '));

      this._render();
    }
  }, {
    key: "Error",
    value: function Error() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this.buffer.push(args.join(' '));

      this._render();
    }
  }, {
    key: "Console",
    value: function Console() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      console.log(args.join(' '));
    }
  }, {
    key: "_render",
    value: function _render() {
      this.element.innerText = this.buffer.join(this.lineSeperator);
      this.element.scrollTop = this.element.scrollHeight;
    }
  }, {
    key: "Clear",
    value: function Clear() {
      this.buffer = [];

      this._render();
    }
  }]);

  return Logger;
}();

/***/ }),

/***/ "./src/Messages.js":
/*!*************************!*\
  !*** ./src/Messages.js ***!
  \*************************/
/*! exports provided: Events, SuccessState, MessageStamp, MessageEnvelope, Message */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Events", function() { return Events; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SuccessState", function() { return SuccessState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageStamp", function() { return MessageStamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MessageEnvelope", function() { return MessageEnvelope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Message", function() { return Message; });
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Crypto */ "./src/Crypto.js");


 // <summary>
// Events statically declares the various event names in messages.
// </summary>

var Events = {
  PairRequest: "pair_request",
  KeyRequest: "key_request",
  KeyResponse: "key_response",
  KeyCheck: "key_check",
  PairResponse: "pair_response",
  DropKeysAdvice: "drop_keys",
  LoginRequest: "login_request",
  LoginResponse: "login_response",
  Ping: "ping",
  Pong: "pong",
  PurchaseRequest: "purchase",
  PurchaseResponse: "purchase_response",
  CancelTransactionRequest: "cancel_transaction",
  CancelTransactionResponse: "cancel_response",
  GetLastTransactionRequest: "get_last_transaction",
  GetLastTransactionResponse: "last_transaction",
  RefundRequest: "refund",
  RefundResponse: "refund_response",
  SignatureRequired: "signature_required",
  SignatureDeclined: "signature_decline",
  SignatureAccepted: "signature_accept",
  AuthCodeRequired: "authorisation_code_required",
  AuthCodeAdvice: "authorisation_code_advice",
  CashoutOnlyRequest: "cash",
  CashoutOnlyResponse: "cash_response",
  MotoPurchaseRequest: "moto_purchase",
  MotoPurchaseResponse: "moto_purchase_response",
  SettleRequest: "settle",
  SettleResponse: "settle_response",
  SettlementEnquiryRequest: "settlement_enquiry",
  SettlementEnquiryResponse: "settlement_enquiry_response",
  SetPosInfoRequest: "set_pos_info",
  SetPosInfoResponse: "set_pos_info_response",
  KeyRollRequest: "request_use_next_keys",
  KeyRollResponse: "response_use_next_keys",
  Error: "error",
  InvalidHmacSignature: "_INVALID_SIGNATURE_",
  // Pay At Table Related Messages
  PayAtTableGetTableConfig: "get_table_config",
  // incoming. When eftpos wants to ask us for P@T configuration.
  PayAtTableSetTableConfig: "set_table_config",
  // outgoing. When we want to instruct eftpos with the P@T configuration.
  PayAtTableGetBillDetails: "get_bill_details",
  // incoming. When eftpos wants to aretrieve the bill for a table.
  PayAtTableBillDetails: "bill_details",
  // outgoing. We reply with this when eftpos requests to us get_bill_details.
  PayAtTableBillPayment: "bill_payment",
  // incoming. When the eftpos advices 
  PrintingRequest: "print",
  PrintingResponse: "print_response",
  TerminalStatusRequest: "get_terminal_status",
  TerminalStatusResponse: "terminal_status",
  BatteryLevelChanged: "battery_level_changed",
  PayAtTableGetOpenTables: "get_open_tables",
  PayAtTableOpenTables: "open_tables",
  PayAtTableBillPaymentFlowEnded: "bill_payment_flow_ended"
};
var SuccessState = {
  Unknown: 'Unknown',
  Success: 'Success',
  Failed: 'Failed'
}; // <summary>
// MessageStamp represents what is required to turn an outgoing Message into Json
// including encryption and date setting.
// </summary>

var MessageStamp = function MessageStamp(posId, secrets, serverTimeDelta) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, MessageStamp);

  this.PosId = posId;
  this.Secrets = secrets;
  this.ServerTimeDelta = serverTimeDelta;
}; // <summary>
// MessageEnvelope represents the outer structure of any message that is exchanged
// between the Pos and the PinPad and vice-versa.
// See http://www.simplepaymentapi.com/#/api/message-encryption
// </summary>

var MessageEnvelope =
/*#__PURE__*/
function () {
  function MessageEnvelope(message, enc, hmac, posId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, MessageEnvelope);

    // <summary>
    // The Message field is set only when in Un-encrypted form.
    // In fact it is the only field in an envelope in the Un-Encrypted form.
    // </summary>
    this.Message = message; // <summary>
    // The enc field is set only when in Encrypted form.
    // It contains the encrypted Json of another MessageEnvelope 
    // </summary>

    this.Enc = enc; // <summary>
    // The hmac field is set only when in Encrypted form.
    // It is the signature of the "enc" field.
    // </summary>

    this.Hmac = hmac; // <summary>
    // The pos_id field is only filled for outgoing Encrypted messages.
    // </summary>

    this.PosId = posId;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(MessageEnvelope, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        message: this.Message,
        enc: this.Enc,
        hmac: this.Hmac,
        pos_id: this.PosId
      };
    }
  }]);

  return MessageEnvelope;
}(); // <summary>
// Message represents the contents of a Message.
// See http://www.simplepaymentapi.com/#/api/message-encryption
// </summary>

var Message =
/*#__PURE__*/
function () {
  function Message(id, eventName, data, needsEncryption) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Message);

    this.Id = id;
    this.EventName = eventName;
    this.Data = data;
    this.DateTimeStamp = '';
    this.PosId = ''; // Pos_id is set here only for outgoing Un-encrypted messages. 

    this.IncommingHmac = ''; // Sometimes the logic around the incoming message might need access to the sugnature, for example in the key_check.

    this._needsEncryption = needsEncryption; // Denotes whether an outgoing message needs to be encrypted in ToJson()

    this.DecryptedJson = ''; // Set on an incoming message just so you can have a look at what it looked like in its json form.
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(Message, [{
    key: "GetSuccessState",
    value: function GetSuccessState() {
      if (!this.Data || typeof this.Data.success === "undefined") {
        return SuccessState.Unknown;
      }

      return this.Data.success ? SuccessState.Success : SuccessState.Failed;
    }
  }, {
    key: "GetError",
    value: function GetError() {
      return this.Data.error_reason ? this.Data.error_reason : "";
    }
  }, {
    key: "GetErrorDetail",
    value: function GetErrorDetail() {
      return this.Data.error_detail;
    }
  }, {
    key: "GetServerTimeDelta",
    value: function GetServerTimeDelta() {
      var now = Date.now(); // Stamp format: 2018-04-19T01:42:38.279

      var dts = this.DateTimeStamp.split(/[\-\+\. :T]/);
      var msgTime = new Date( // year, month, date
      dts[0], dts[1] - 1, dts[2], // hour, minute, second, millis
      dts[3], dts[4], dts[5], dts[6]).getTime(); // Local time zone

      return msgTime - now;
    } // Helper method to parse bank date format 20042018 (ddMMyyyy)

  }, {
    key: "ToJson",
    value: function ToJson(stamp) {
      var now = Date.now();
      var tzoffset = new Date().getTimezoneOffset() * 60 * 1000;
      var adjustedTime = new Date(now - tzoffset + stamp.ServerTimeDelta); // Format date: "yyyy-MM-ddTHH:mm:ss.fff"

      this.DateTimeStamp = adjustedTime.toISOString().slice(0, -1);
      this.PosId = stamp.PosId;
      var envelope = {
        message: {
          id: this.Id,
          event: this.EventName,
          data: this.Data,
          datetime: this.DateTimeStamp
        }
      };

      if (!this._needsEncryption) {
        // Unencrypted Messages need PosID inside the message
        envelope.message.pos_id = this.PosId;
      }

      this.DecryptedJson = JSON.stringify(envelope);

      if (!this._needsEncryption) {
        return this.DecryptedJson;
      }

      var encMsg = _Crypto__WEBPACK_IMPORTED_MODULE_2__["Crypto"].AesEncrypt(stamp.Secrets.EncKey, this.DecryptedJson);
      var hmacSig = _Crypto__WEBPACK_IMPORTED_MODULE_2__["Crypto"].HmacSignature(stamp.Secrets.HmacKey, encMsg);
      var encrMessageEnvelope = {
        enc: encMsg,
        hmac: hmacSig.toUpperCase(),
        pos_id: stamp.PosId
      };
      return JSON.stringify(encrMessageEnvelope);
    }
  }], [{
    key: "ParseBankDate",
    value: function ParseBankDate(bankDate) {
      if (bankDate.length !== 8) return null;
      return new Date("".concat(bankDate.substr(4, 4), "-").concat(bankDate.substr(2, 2), "-").concat(bankDate.substr(0, 2)));
    } // Parses a bank date & time str from "05Oct17" / "05:00" ("ddMMMyy/HH:mm") into date obj

  }, {
    key: "ParseBankDateTimeStr",
    value: function ParseBankDateTimeStr(date, time) {
      return new Date("".concat(date.substr(0, 2), " ").concat(date.substr(2, 3), " ").concat(date.substr(5, 2), " ").concat(time));
    }
  }, {
    key: "FromJson",
    value: function FromJson(msgJson, secrets) {
      var env = JSON.parse(msgJson);

      if (env.message != null) {
        var message = new Message(env.message.id, env.message.event, env.message.data, false);
        message.DecryptedJson = msgJson;
        return message;
      }

      if (secrets == null) {
        // This may happen if we somehow received an encrypted message from eftpos but we're not configered with secrets.
        // For example, if we cancel the pairing process a little late in the game and we get an encrypted key_check message after we've dropped the keys.
        return new Message("UNKNOWN", "NOSECRETS", null, false);
      } // Its encrypted, verify sig


      var sig = _Crypto__WEBPACK_IMPORTED_MODULE_2__["Crypto"].HmacSignature(secrets.HmacKey, env.enc);

      if (sig.toUpperCase() != env.hmac) {
        return new Message("_", Events.InvalidHmacSignature, null, false);
      }

      var decryptedJson = _Crypto__WEBPACK_IMPORTED_MODULE_2__["Crypto"].AesDecrypt(secrets.EncKey, env.enc);

      try {
        var decryptedMsg = JSON.parse(decryptedJson);

        var _message = new Message(decryptedMsg.message.id, decryptedMsg.message.event, decryptedMsg.message.data, true);

        _message.DateTimeStamp = decryptedMsg.message.datetime;
        _message.PosId = decryptedMsg.message.pos_id;
        _message.IncomingHmac = env.hmac;
        _message.DecryptedJson = decryptedJson;
        return _message;
      } catch (e) {
        return new Message("UNKNOWN", "UNPARSEABLE", {
          "msg": decryptedJson
        }, false);
      }
    }
  }]);

  return Message;
}();

/***/ }),

/***/ "./src/Pairing.js":
/*!************************!*\
  !*** ./src/Pairing.js ***!
  \************************/
/*! exports provided: PairRequest, KeyRequest, KeyResponse, KeyCheck, PairResponse, SecretsAndKeyResponse, DropKeysRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PairRequest", function() { return PairRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyRequest", function() { return KeyRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyResponse", function() { return KeyResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyCheck", function() { return KeyCheck; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PairResponse", function() { return PairResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecretsAndKeyResponse", function() { return SecretsAndKeyResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropKeysRequest", function() { return DropKeysRequest; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");



 // <summary>
// Pairing Interaction 1: Outgoing
// </summary>

var PairRequest =
/*#__PURE__*/
function () {
  function PairRequest() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PairRequest);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PairRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        padding: true
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("pr"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PairRequest, data, false);
    }
  }]);

  return PairRequest;
}(); // Pairing Interaction 2: Incoming

var KeyRequest = function KeyRequest(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, KeyRequest);

  this.RequestId = m.Id;
  this.Aenc = m.Data.enc.A;
  this.Ahmac = m.Data.hmac.A;
}; // Pairing Interaction 3: Outgoing

var KeyResponse =
/*#__PURE__*/
function () {
  function KeyResponse(requestId, Benc, Bhmac) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, KeyResponse);

    this.RequestId = requestId;
    this.Benc = Benc;
    this.Bhmac = Bhmac;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(KeyResponse, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        enc: {
          B: this.Benc
        },
        hmac: {
          B: this.Bhmac
        }
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](this.RequestId, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].KeyResponse, data, false);
    }
  }]);

  return KeyResponse;
}(); // Pairing Interaction 4: Incoming

var KeyCheck = function KeyCheck(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, KeyCheck);

  this.ConfirmationCode = m.IncomingHmac.substring(0, 6);
}; // Pairing Interaction 5: Incoming

var PairResponse = function PairResponse(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PairResponse);

  this.Success = m.Data.success;
}; // Holder class for Secrets and KeyResponse, so that we can use them together in method signatures.

var SecretsAndKeyResponse = function SecretsAndKeyResponse(secrets, keyResponse) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SecretsAndKeyResponse);

  this.Secrets = secrets;
  this.KeyResponse = keyResponse;
};
var DropKeysRequest =
/*#__PURE__*/
function () {
  function DropKeysRequest() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, DropKeysRequest);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(DropKeysRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("drpkys"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].DropKeysAdvice, null, true);
    }
  }]);

  return DropKeysRequest;
}();

/***/ }),

/***/ "./src/PairingHelper.js":
/*!******************************!*\
  !*** ./src/PairingHelper.js ***!
  \******************************/
/*! exports provided: GENERATOR, GROUP14_2048_BIT_MODP, PairingHelper, PublicKeyAndSecret */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GENERATOR", function() { return GENERATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GROUP14_2048_BIT_MODP", function() { return GROUP14_2048_BIT_MODP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PairingHelper", function() { return PairingHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PublicKeyAndSecret", function() { return PublicKeyAndSecret; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Pairing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Pairing */ "./src/Pairing.js");
/* harmony import */ var _Secrets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Secrets */ "./src/Secrets.js");
/* harmony import */ var _Crypto__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Crypto */ "./src/Crypto.js");
/* harmony import */ var _DiffieHellman__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DiffieHellman */ "./src/DiffieHellman.js");





 // This is the generator used for diffie-hellman in 2048-bit MODP Group 14 as per (https://tools.ietf.org/html/rfc3526#section-3)

var GENERATOR = 2; // This is the prime used for diffie-hellman using 2048-bit MODP Group 14 as per (https://tools.ietf.org/html/rfc3526#section-3)

var GROUP14_2048_BIT_MODP = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF'; // <summary>
// This static class helps you with the pairing process as documented here:
// http://www.simplepaymentapi.com/#/api/pairing-process
// </summary>

var PairingHelper =
/*#__PURE__*/
function () {
  function PairingHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PairingHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PairingHelper, [{
    key: "GenerateSecretsAndKeyResponse",
    // <summary>
    // Calculates/Generates Secrets and KeyResponse given an incoming KeyRequest.
    // </summary>
    // <param name="keyRequest"></param>
    // <returns>Secrets and KeyResponse to send back.</returns>
    value: function GenerateSecretsAndKeyResponse(keyRequest) {
      var encPubAndSec = this._calculateMyPublicKeyAndSecret(keyRequest.Aenc);

      var Benc = encPubAndSec.MyPublicKey;
      var Senc = encPubAndSec.SharedSecretKey;

      var hmacPubAndSec = this._calculateMyPublicKeyAndSecret(keyRequest.Ahmac);

      var Bhmac = hmacPubAndSec.MyPublicKey;
      var Shmac = hmacPubAndSec.SharedSecretKey;
      var secrets = new _Secrets__WEBPACK_IMPORTED_MODULE_3__["Secrets"](Senc, Shmac);
      var keyResponse = new _Pairing__WEBPACK_IMPORTED_MODULE_2__["KeyResponse"](keyRequest.RequestId, Benc, Bhmac);
      return new _Pairing__WEBPACK_IMPORTED_MODULE_2__["SecretsAndKeyResponse"](secrets, keyResponse);
    } // <summary>
    // Turns an incoming "A" value from the PinPad into the outgoing "B" value 
    // and the secret value using DiffieHelmman helper.
    // </summary>
    // <param name="theirPublicKey">The incoming A value</param>
    // <returns>Your B value and the Secret</returns>

  }, {
    key: "_calculateMyPublicKeyAndSecret",
    value: function _calculateMyPublicKeyAndSecret(theirPublicKey) {
      var diffieHellman = new _DiffieHellman__WEBPACK_IMPORTED_MODULE_5__["DiffieHellman"]();
      var myPrivateBI = diffieHellman.RandomPrivateKey(GROUP14_2048_BIT_MODP);
      var myPublicBI = diffieHellman.PublicKey(GROUP14_2048_BIT_MODP, GENERATOR, myPrivateBI);
      var secretBI = diffieHellman.Secret(GROUP14_2048_BIT_MODP, theirPublicKey, myPrivateBI);
      var secret = this.DHSecretToSPISecret(secretBI);
      return new PublicKeyAndSecret(myPublicBI, secret);
    } // <summary>
    // Converts the DH secret BigInteger into the hex-string to be used as the secret.
    // There are some "gotchyas" here which is why this piece of work is abstracted so it can be tested separately.
    // See: http://www.simplepaymentapi.com/#/api/pairing-process
    // </summary>
    // <param name="secretBI">Secret as BigInteger</param>
    // <returns>Secret as Hex-String</returns>

  }, {
    key: "DHSecretToSPISecret",
    value: function DHSecretToSPISecret(secret) {
      // If the calculated hexadecimal secret doesn't have an even number of characters, we add an extra 0 to the start. This allows SHA-256 to operate on the hexadecimal secret as if it were a hexadecimal representation of a string.
      if (secret.length % 2 === 1) {
        secret = '0' + secret;
      }

      secret = secret.padStart(512, '0'); // We sha256 that byte array and return the hex string result

      return _Crypto__WEBPACK_IMPORTED_MODULE_4__["Crypto"].GenerateHash(secret);
    }
  }], [{
    key: "NewPairRequest",
    // <summary>
    // Generates a pairing Request.
    // </summary>
    // <returns>New PairRequest</returns>
    value: function NewPairRequest() {
      return new _Pairing__WEBPACK_IMPORTED_MODULE_2__["PairRequest"]();
    }
  }]);

  return PairingHelper;
}(); // <summary>
// Internal Holder class for Public and Secret, so that we can use them together in method signatures. 
// </summary>

var PublicKeyAndSecret = function PublicKeyAndSecret(myPublicKey, sharedSecretKey) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PublicKeyAndSecret);

  this.MyPublicKey = myPublicKey;
  this.SharedSecretKey = sharedSecretKey;
};

/***/ }),

/***/ "./src/PayAtTable.js":
/*!***************************!*\
  !*** ./src/PayAtTable.js ***!
  \***************************/
/*! exports provided: BillStatusResponse, BillRetrievalResult, PaymentType, BillPayment, PaymentHistoryEntry, PayAtTableConfig, GetOpenTablesResponse, OpenTablesEntry, BillPaymentFlowEndedResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BillStatusResponse", function() { return BillStatusResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BillRetrievalResult", function() { return BillRetrievalResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentType", function() { return PaymentType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BillPayment", function() { return BillPayment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PaymentHistoryEntry", function() { return PaymentHistoryEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PayAtTableConfig", function() { return PayAtTableConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetOpenTablesResponse", function() { return GetOpenTablesResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OpenTablesEntry", function() { return OpenTablesEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BillPaymentFlowEndedResponse", function() { return BillPaymentFlowEndedResponse; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _Purchase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Purchase */ "./src/Purchase.js");



 // <summary>
// This class represents the BillDetails that the POS will be asked for throughout a PayAtTable flow.
// </summary>

var BillStatusResponse =
/*#__PURE__*/
function () {
  function BillStatusResponse() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BillStatusResponse);

    // <summary>
    // Set this Error accordingly if you are not able to return the BillDetails that were asked from you.
    // </summary>
    this.Result = null; // <summary>
    // This is a unique identifier that you assign to each bill.
    // It migt be for example, the timestamp of when the cover was opened.
    // </summary>

    this.BillId = null; // <summary>
    // This is the table id that this bill was for.
    // The waiter will enter it on the Eftpos at the start of the PayAtTable flow and the Eftpos will 
    // retrieve the bill using the table id. 
    // </summary>

    this.TableId = null;
    this.OperatorId = null; // <summary>
    // The Total Amount on this bill, in cents.
    // </summary>

    this.TotalAmount = 0; // <summary>
    // The currently outsanding amount on this bill, in cents.
    // </summary>

    this.OutstandingAmount = 0; // <summary>
    // Your POS is required to persist some state on behalf of the Eftpos so the Eftpos can recover state.
    // It is just a piece of string that you save against your billId.
    // WHenever you're asked for BillDetails, make sure you return this piece of data if you have it.
    // </summary>

    this.BillData = "";
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(BillStatusResponse, [{
    key: "getBillPaymentHistory",
    value: function getBillPaymentHistory() {
      if (!this.BillData) {
        return [];
      }

      var billPaymentHistory = [];
      var savedBillData = JSON.parse(this.BillData);
      return savedBillData.map(function (bill) {
        return new PaymentHistoryEntry(bill.payment_type, bill.payment_summary);
      });
    }
  }, {
    key: "ToMessage",
    value: function ToMessage(messageId) {
      var data = {
        "success": this.Result == BillRetrievalResult.SUCCESS
      };
      if (this.BillId) data.bill_id = this.BillId;
      if (this.TableId) data.table_id = this.TableId;

      if (this.Result == BillRetrievalResult.SUCCESS) {
        data.bill_total_amount = this.TotalAmount;
        data.bill_outstanding_amount = this.OutstandingAmount;
        data.bill_payment_history = this.getBillPaymentHistory();
      } else {
        data.error_reason = this.Result.toString();
        data.error_detail = this.Result.toString();
      }

      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](messageId, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PayAtTableBillDetails, data, true);
    }
  }], [{
    key: "ToBillData",
    value: function ToBillData(ph) {
      if (ph.length < 1) {
        return "";
      }

      return JSON.stringify(ph);
    }
  }]);

  return BillStatusResponse;
}();
var BillRetrievalResult = {
  SUCCESS: 'SUCCESS',
  INVALID_TABLE_ID: 'INVALID_TABLE_ID',
  INVALID_BILL_ID: 'INVALID_BILL_ID',
  INVALID_OPERATOR_ID: 'INVALID_OPERATOR_ID'
};
var PaymentType = {
  CARD: 'CARD',
  CASH: 'CASH'
};
var BillPayment = function BillPayment(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BillPayment);

  this._incomingAdvice = m;
  this.BillId = this._incomingAdvice.Data["bill_id"];
  this.TableId = this._incomingAdvice.Data["table_id"];
  this.OperatorId = this._incomingAdvice.Data["operator_id"];
  this.PaymentFlowStarted = null;
  var pt = this._incomingAdvice.Data["payment_type"];
  this.PaymentType = pt; // this is when we ply the sub object "payment_details" into a purchase response for convenience.

  var purchaseMsg = new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](m.Id, "payment_details", m.Data["payment_details"], false);
  this.PurchaseResponse = new _Purchase__WEBPACK_IMPORTED_MODULE_3__["PurchaseResponse"](purchaseMsg);
  this.PurchaseAmount = this.PurchaseResponse.GetPurchaseAmount();
  this.TipAmount = this.PurchaseResponse.GetTipAmount();
  this.SurchargeAmount = this.PurchaseResponse.GetSurchargeAmount();
};
var PaymentHistoryEntry =
/*#__PURE__*/
function () {
  function PaymentHistoryEntry(paymentType, paymentSummary) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PaymentHistoryEntry);

    this.PaymentType = paymentType;
    this.PaymentSummary = paymentSummary;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PaymentHistoryEntry, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        payment_type: this.PaymentType,
        payment_summary: this.PaymentSummary
      };
    }
  }, {
    key: "GetTerminalRefId",
    value: function GetTerminalRefId() {
      return this.PaymentSummary["terminal_ref_id"];
    }
  }]);

  return PaymentHistoryEntry;
}();
var PayAtTableConfig =
/*#__PURE__*/
function () {
  function PayAtTableConfig() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PayAtTableConfig);

    this.PayAtTableEnabled = false;
    this.OperatorIdEnabled = false;
    this.SplitByAmountEnabled = false;
    this.EqualSplitEnabled = false;
    this.TableRetrievalEnabled = false;
    this.TippingEnabled = false;
    this.SummaryReportEnabled = false;
    this.LabelPayButton = '';
    this.LabelOperatorId = '';
    this.LabelTableId = ''; // 
    // <summary>
    // Fill in with operator ids that the eftpos terminal will validate against. 
    // Leave Empty to allow any operator_id through. 
    // </summary>

    this.AllowedOperatorIds = [];
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PayAtTableConfig, [{
    key: "ToMessage",
    value: function ToMessage(messageId) {
      var data = {
        "pay_at_table_enabled": this.PayAtTableEnabled,
        "operator_id_enabled": this.OperatorIdEnabled,
        "split_by_amount_enabled": this.SplitByAmountEnabled,
        "equal_split_enabled": this.EqualSplitEnabled,
        "tipping_enabled": this.TippingEnabled,
        "summary_report_enabled": this.SummaryReportEnabled,
        "pay_button_label": this.LabelPayButton,
        "operator_id_label": this.LabelOperatorId,
        "table_id_label": this.LabelTableId,
        "operator_id_list": this.AllowedOperatorIds,
        "table_retrieval_enabled": this.TableRetrievalEnabled
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](messageId, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PayAtTableSetTableConfig, data, true);
    }
  }], [{
    key: "FeatureDisableMessage",
    value: function FeatureDisableMessage(messageId) {
      var data = {
        "pay_at_table_enabled": false
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](messageId, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PayAtTableSetTableConfig, data, true);
    }
  }]);

  return PayAtTableConfig;
}(); // <summary>
// These attributes work for COM interop.
// </summary>

var GetOpenTablesResponse =
/*#__PURE__*/
function () {
  function GetOpenTablesResponse() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GetOpenTablesResponse);

    /// <summary>
    /// Your POS is required to persist some state on behalf of the Eftpos so the Eftpos can recover state.
    /// It is just a piece of string that you save against your operatorId.
    /// Whenever you're asked for OpenTables, make sure you return this piece of data if you have it.
    /// </summary>
    this.TableData = null;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GetOpenTablesResponse, [{
    key: "GetOpenTables",
    value: function GetOpenTables() {
      if (!this.TableData) {
        return [];
      }

      return JSON.parse(this.TableData);
    }
  }, {
    key: "ToMessage",
    value: function ToMessage(messageId) {
      var data = {
        tables: this.GetOpenTables()
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](messageId, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PayAtTableOpenTables, data, true);
    }
  }]);

  return GetOpenTablesResponse;
}(); // <summary>
// These attributes work for COM interop.
// </summary>

var OpenTablesEntry =
/*#__PURE__*/
function () {
  function OpenTablesEntry() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, OpenTablesEntry);

    this.TableId = null;
    this.Label = null;
    this.BillOutstandingAmount = null;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(OpenTablesEntry, [{
    key: "toJSON",
    value: function toJSON() {
      return {
        table_id: this.TableId,
        label: this.Label,
        bill_outstanding_amount: this.BillOutstandingAmount
      };
    }
  }]);

  return OpenTablesEntry;
}(); /// <summary>
/// These attributes work for COM interop.
/// </summary>

var BillPaymentFlowEndedResponse = function BillPaymentFlowEndedResponse(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BillPaymentFlowEndedResponse);

  this.BillId = m.Data.bill_id;
  this.BillOutstandingAmount = m.Data.bill_outstanding_amount;
  this.BillTotalAmount = m.Data.bill_total_amount;
  this.OperatorId = m.Data.operator_id;
  this.TableId = m.Data.table_id;
  this.CardTotalCount = m.Data.card_total_count;
  this.CardTotalAmount = m.Data.card_total_amount;
  this.CashTotalCount = m.Data.cash_total_count;
  this.CashTotalAmount = m.Data.cash_total_amount;
};

/***/ }),

/***/ "./src/PingHelper.js":
/*!***************************!*\
  !*** ./src/PingHelper.js ***!
  \***************************/
/*! exports provided: PongHelper, PingHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PongHelper", function() { return PongHelper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PingHelper", function() { return PingHelper; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");




var PongHelper =
/*#__PURE__*/
function () {
  function PongHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PongHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PongHelper, null, [{
    key: "GeneratePongRessponse",
    value: function GeneratePongRessponse(ping) {
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](ping.Id, _Messages__WEBPACK_IMPORTED_MODULE_3__["Events"].Pong, null, true);
    }
  }]);

  return PongHelper;
}();
var PingHelper =
/*#__PURE__*/
function () {
  function PingHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PingHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PingHelper, null, [{
    key: "GeneratePingRequest",
    value: function GeneratePingRequest() {
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("ping"), _Messages__WEBPACK_IMPORTED_MODULE_3__["Events"].Ping, null, true);
    }
  }]);

  return PingHelper;
}();

/***/ }),

/***/ "./src/PosInfo.js":
/*!************************!*\
  !*** ./src/PosInfo.js ***!
  \************************/
/*! exports provided: SetPosInfoRequest, SetPosInfoResponse, DeviceInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SetPosInfoRequest", function() { return SetPosInfoRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SetPosInfoResponse", function() { return SetPosInfoResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceInfo", function() { return DeviceInfo; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");




var SetPosInfoRequest =
/*#__PURE__*/
function () {
  function SetPosInfoRequest(version, vendorId, libraryLanguage, libraryVersion, otherInfo) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SetPosInfoRequest);

    this._version = version;
    this._vendorId = vendorId;
    this._libraryLanguage = libraryLanguage;
    this._libraryVersion = libraryVersion;
    this._otherInfo = otherInfo;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SetPosInfoRequest, [{
    key: "toMessage",
    value: function toMessage() {
      var data = {
        pos_version: this._version,
        pos_vendor_id: this._vendorId,
        library_language: this._libraryLanguage,
        library_version: this._libraryVersion,
        other_info: this._otherInfo
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("prav"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].SetPosInfoRequest, data, true);
    }
  }]);

  return SetPosInfoRequest;
}();
var SetPosInfoResponse =
/*#__PURE__*/
function () {
  function SetPosInfoResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SetPosInfoResponse);

    this._success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
    this._m = m;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SetPosInfoResponse, [{
    key: "isSuccess",
    value: function isSuccess() {
      return this._success;
    }
  }, {
    key: "getErrorReason",
    value: function getErrorReason() {
      return this._m.Data.error_reason;
    }
  }, {
    key: "getErrorDetail",
    value: function getErrorDetail() {
      return this._m.Data.error_detail;
    }
  }, {
    key: "getResponseValueWithAttribute",
    value: function getResponseValueWithAttribute(attribute) {
      return this._m.Data[attribute];
    }
  }]);

  return SetPosInfoResponse;
}();
var DeviceInfo =
/*#__PURE__*/
function () {
  function DeviceInfo() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, DeviceInfo);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(DeviceInfo, null, [{
    key: "GetAppDeviceInfo",
    value: function GetAppDeviceInfo() {
      var deviceInfo = {};
      deviceInfo['device_system'] = navigator.userAgent; // deviceInfo.Add("device_system", Environment.OSVersion.Platform.ToString() + " " + Environment.OSVersion.Version.ToString());

      return deviceInfo;
    }
  }]);

  return DeviceInfo;
}();

/***/ }),

/***/ "./src/Preauth.js":
/*!************************!*\
  !*** ./src/Preauth.js ***!
  \************************/
/*! exports provided: PreauthEvents, AccountVerifyRequest, AccountVerifyResponse, PreauthOpenRequest, PreauthTopupRequest, PreauthPartialCancellationRequest, PreauthExtendRequest, PreauthCancelRequest, PreauthCompletionRequest, PreauthResponse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthEvents", function() { return PreauthEvents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccountVerifyRequest", function() { return AccountVerifyRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AccountVerifyResponse", function() { return AccountVerifyResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthOpenRequest", function() { return PreauthOpenRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthTopupRequest", function() { return PreauthTopupRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthPartialCancellationRequest", function() { return PreauthPartialCancellationRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthExtendRequest", function() { return PreauthExtendRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthCancelRequest", function() { return PreauthCancelRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthCompletionRequest", function() { return PreauthCompletionRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreauthResponse", function() { return PreauthResponse; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _Purchase__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Purchase */ "./src/Purchase.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");






var PreauthEvents = {
  AccountVerifyRequest: "account_verify",
  AccountVerifyResponse: "account_verify_response",
  PreauthOpenRequest: "preauth",
  PreauthOpenResponse: "preauth_response",
  PreauthTopupRequest: "preauth_topup",
  PreauthTopupResponse: "preauth_topup_response",
  PreauthExtendRequest: "preauth_extend",
  PreauthExtendResponse: "preauth_extend_response",
  PreauthPartialCancellationRequest: "preauth_partial_cancellation",
  PreauthPartialCancellationResponse: "preauth_partial_cancellation_response",
  PreauthCancellationRequest: "preauth_cancellation",
  PreauthCancellationResponse: "preauth_cancellation_response",
  PreauthCompleteRequest: "completion",
  PreauthCompleteResponse: "completion_response"
};
var AccountVerifyRequest =
/*#__PURE__*/
function () {
  function AccountVerifyRequest(posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, AccountVerifyRequest);

    this.PosRefId = posRefId;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(AccountVerifyRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prav"), PreauthEvents.AccountVerifyRequest, data, true);
    }
  }]);

  return AccountVerifyRequest;
}();
var AccountVerifyResponse = function AccountVerifyResponse(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, AccountVerifyResponse);

  this.Details = new _Purchase__WEBPACK_IMPORTED_MODULE_4__["PurchaseResponse"](m);
  this.PosRefId = this.Details.PosRefId;
  this._m = m;
};
var PreauthOpenRequest =
/*#__PURE__*/
function () {
  function PreauthOpenRequest(amountCents, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthOpenRequest);

    this.PosRefId = posRefId;
    this.PreauthAmount = amountCents;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthOpenRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_amount": this.PreauthAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prac"), PreauthEvents.PreauthOpenRequest, data, true);
    }
  }]);

  return PreauthOpenRequest;
}();
var PreauthTopupRequest =
/*#__PURE__*/
function () {
  function PreauthTopupRequest(preauthId, topupAmountCents, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthTopupRequest);

    this.PreauthId = preauthId;
    this.TopupAmount = topupAmountCents;
    this.PosRefId = posRefId;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthTopupRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_id": this.PreauthId,
        "topup_amount": this.TopupAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prtu"), PreauthEvents.PreauthTopupRequest, data, true);
    }
  }]);

  return PreauthTopupRequest;
}();
var PreauthPartialCancellationRequest =
/*#__PURE__*/
function () {
  function PreauthPartialCancellationRequest(preauthId, partialCancellationAmountCents, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthPartialCancellationRequest);

    this.PreauthId = preauthId;
    this.PartialCancellationAmount = partialCancellationAmountCents;
    this.PosRefId = posRefId;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthPartialCancellationRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_id": this.PreauthId,
        "preauth_cancel_amount": this.PartialCancellationAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prpc"), PreauthEvents.PreauthPartialCancellationRequest, data, true);
    }
  }]);

  return PreauthPartialCancellationRequest;
}();
var PreauthExtendRequest =
/*#__PURE__*/
function () {
  function PreauthExtendRequest(preauthId, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthExtendRequest);

    this.PreauthId = preauthId;
    this.PosRefId = posRefId;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthExtendRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_id": this.PreauthId
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prext"), PreauthEvents.PreauthExtendRequest, data, true);
    }
  }]);

  return PreauthExtendRequest;
}();
var PreauthCancelRequest =
/*#__PURE__*/
function () {
  function PreauthCancelRequest(preauthId, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthCancelRequest);

    this.PreauthId = preauthId;
    this.PosRefId = posRefId;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthCancelRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_id": this.PreauthId
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prac"), PreauthEvents.PreauthCancellationRequest, data, true);
    }
  }]);

  return PreauthCancelRequest;
}();
var PreauthCompletionRequest =
/*#__PURE__*/
function () {
  function PreauthCompletionRequest(preauthId, completionAmountCents, posRefId, surchargeAmount) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthCompletionRequest);

    this.PreauthId = preauthId;
    this.CompletionAmount = completionAmountCents;
    this.PosRefId = posRefId;
    this.SurchargeAmount = surchargeAmount;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthCompletionRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        "pos_ref_id": this.PosRefId,
        "preauth_id": this.PreauthId,
        "completion_amount": this.CompletionAmount,
        "surcharge_amount": this.SurchargeAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_3__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_2__["RequestIdHelper"].Id("prac"), PreauthEvents.PreauthCompleteRequest, data, true);
    }
  }]);

  return PreauthCompletionRequest;
}();
var PreauthResponse =
/*#__PURE__*/
function () {
  function PreauthResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PreauthResponse);

    this.PreauthId = m.Data["preauth_id"];
    this.Details = new _Purchase__WEBPACK_IMPORTED_MODULE_4__["PurchaseResponse"](m);
    this.PosRefId = this.Details.PosRefId;
    this._m = m;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PreauthResponse, [{
    key: "GetBalanceAmount",
    value: function GetBalanceAmount() {
      var txType = this._m.Data["transaction_type"];

      switch (txType) {
        case "PRE-AUTH":
          return this._m.Data["preauth_amount"];

        case "TOPUP":
          return this._m.Data["balance_amount"];

        case "CANCEL":
          // PARTIAL CANCELLATION
          return this._m.Data["balance_amount"];

        case "PRE-AUTH EXT":
          return this._m.Data["balance_amount"];

        case "PCOMP":
          return 0;
        // Balance is 0 after completion

        case "PRE-AUTH CANCEL":
          return 0;
        // Balance is 0 after cancellation

        default:
          return 0;
      }
    }
  }, {
    key: "GetPreviousBalanceAmount",
    value: function GetPreviousBalanceAmount() {
      var txType = this._m.Data["transaction_type"];

      switch (txType) {
        case "PRE-AUTH":
          return 0;

        case "TOPUP":
          return this._m.Data["existing_preauth_amount"];

        case "CANCEL":
          // PARTIAL CANCELLATION
          return this._m.Data["existing_preauth_amount"];

        case "PRE-AUTH EXT":
          return this._m.Data["existing_preauth_amount"];

        case "PCOMP":
          // THIS IS TECHNICALLY NOT CORRECT WHEN COMPLETION HAPPENS FOR A PARTIAL AMOUNT.
          // BUT UNFORTUNATELY, THIS RESPONSE DOES NOT CONTAIN "existing_preauth_amount".
          // SO "completion_amount" IS THE CLOSEST WE HAVE.
          return this._m.Data["completion_amount"];

        case "PRE-AUTH CANCEL":
          return this._m.Data["preauth_amount"];

        default:
          return 0;
      }
    }
  }, {
    key: "GetCompletionAmount",
    value: function GetCompletionAmount() {
      var txType = this._m.Data["transaction_type"];

      switch (txType) {
        case "PCOMP":
          return this._m.Data["completion_amount"];

        default:
          return 0;
      }
    }
  }, {
    key: "GetSurchargeAmount",
    value: function GetSurchargeAmount() {
      var txType = this._m.Data["transaction_type"];

      switch (txType) {
        case "PCOMP":
          return this._m.Data["surcharge_amount"];

        default:
          return 0;
      }
    }
  }, {
    key: "WasMerchantReceiptPrinted",
    value: function WasMerchantReceiptPrinted() {
      return this._m.Data["merchant_receipt_printed"];
    }
  }, {
    key: "WasCustomerReceiptPrinted",
    value: function WasCustomerReceiptPrinted() {
      return this._m.Data["customer_receipt_printed"];
    }
  }]);

  return PreauthResponse;
}();

/***/ }),

/***/ "./src/Printing.js":
/*!*************************!*\
  !*** ./src/Printing.js ***!
  \*************************/
/*! exports provided: PrintingRequest, PrintingResponse, Printer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrintingRequest", function() { return PrintingRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrintingResponse", function() { return PrintingResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Printer", function() { return Printer; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");




var PrintingRequest =
/*#__PURE__*/
function () {
  function PrintingRequest(key, payload) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PrintingRequest);

    this._key = key;
    this._payload = payload;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PrintingRequest, [{
    key: "toMessage",
    value: function toMessage() {
      var data = {
        "key": this._key,
        "payload": this._payload
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("print"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PrintingRequest, data, true);
    }
  }]);

  return PrintingRequest;
}();
var PrintingResponse =
/*#__PURE__*/
function () {
  function PrintingResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PrintingResponse);

    this._success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
    this._m = m;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PrintingResponse, [{
    key: "isSuccess",
    value: function isSuccess() {
      return this._success;
    }
  }, {
    key: "getErrorReason",
    value: function getErrorReason() {
      return this._m.Data.error_reason;
    }
  }, {
    key: "getErrorDetail",
    value: function getErrorDetail() {
      return this._m.Data.error_detail;
    }
  }, {
    key: "getResponseValueWithAttribute",
    value: function getResponseValueWithAttribute(attribute) {
      return this._m.Data[attribute];
    }
  }]);

  return PrintingResponse;
}();
/**
 * This class is a mock printer for the terminal to print Receipts
 */

var Printer =
/*#__PURE__*/
function () {
  function Printer(element) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Printer);

    this.buffer = [];
    this.element = element;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Printer, [{
    key: "print",
    value: function print() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this.buffer.push(args.join(' '));

      this._render();
    }
  }, {
    key: "_render",
    value: function _render() {
      this.element.innerText = this.buffer.join("\n\n \\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\/ \n\n");
      this.element.scrollTop = this.element.scrollHeight;
    }
  }, {
    key: "Clear",
    value: function Clear() {
      this.buffer = [];

      this._render();
    }
  }]);

  return Printer;
}();

/***/ }),

/***/ "./src/Purchase.js":
/*!*************************!*\
  !*** ./src/Purchase.js ***!
  \*************************/
/*! exports provided: PurchaseRequest, PurchaseResponse, CancelTransactionRequest, CancelTransactionResponse, GetLastTransactionRequest, GetLastTransactionResponse, RefundRequest, RefundResponse, SignatureRequired, SignatureDecline, SignatureAccept, MotoPurchaseRequest, MotoPurchaseResponse, PhoneForAuthRequired, AuthCodeAdvice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PurchaseRequest", function() { return PurchaseRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PurchaseResponse", function() { return PurchaseResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancelTransactionRequest", function() { return CancelTransactionRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CancelTransactionResponse", function() { return CancelTransactionResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetLastTransactionRequest", function() { return GetLastTransactionRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GetLastTransactionResponse", function() { return GetLastTransactionResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RefundRequest", function() { return RefundRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RefundResponse", function() { return RefundResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignatureRequired", function() { return SignatureRequired; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignatureDecline", function() { return SignatureDecline; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignatureAccept", function() { return SignatureAccept; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MotoPurchaseRequest", function() { return MotoPurchaseRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MotoPurchaseResponse", function() { return MotoPurchaseResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PhoneForAuthRequired", function() { return PhoneForAuthRequired; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthCodeAdvice", function() { return AuthCodeAdvice; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");





var PurchaseRequest =
/*#__PURE__*/
function () {
  function PurchaseRequest(amountCents, posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PurchaseRequest);

    this.PosRefId = posRefId;
    this.PurchaseAmount = amountCents;
    this.TipAmount = 0;
    this.CashoutAmount = 0;
    this.PromptForCashout = false;
    this.SurchargeAmount = 0;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["TransactionOptions"](); // Library Backwards Compatibility

    this.Id = posRefId;
    this.AmountCents = amountCents;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PurchaseRequest, [{
    key: "AmountSummary",
    value: function AmountSummary() {
      return "Purchase: ".concat((this.PurchaseAmount / 100.0).toFixed(2), "; \n            Tip: ").concat((this.TipAmount / 100.0).toFixed(2), "; \n            Cashout: ").concat((this.CashoutAmount / 100.0).toFixed(2), ";");
    }
  }, {
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        pos_ref_id: this.PosRefId,
        purchase_amount: this.PurchaseAmount,
        tip_amount: this.TipAmount,
        cash_amount: this.CashoutAmount,
        prompt_for_cashout: this.PromptForCashout,
        surcharge_amount: this.SurchargeAmount
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("prchs"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].PurchaseRequest, data, true);
    }
  }]);

  return PurchaseRequest;
}();
var PurchaseResponse =
/*#__PURE__*/
function () {
  function PurchaseResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PurchaseResponse);

    this._m = m;
    this.RequestId = m.Id;
    this.PosRefId = m.Data.pos_ref_id;
    this.SchemeName = m.Data.scheme_name;
    this.SchemeAppName = m.Data.scheme_name;
    this.Success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PurchaseResponse, [{
    key: "GetRRN",
    value: function GetRRN() {
      return this._m.Data.rrn;
    }
  }, {
    key: "GetPurchaseAmount",
    value: function GetPurchaseAmount() {
      return this._m.Data.purchase_amount;
    }
  }, {
    key: "GetTipAmount",
    value: function GetTipAmount() {
      return this._m.Data.tip_amount || 0;
    }
  }, {
    key: "GetSurchargeAmount",
    value: function GetSurchargeAmount() {
      return this._m.Data.surcharge_amount || 0;
    }
  }, {
    key: "GetCashoutAmount",
    value: function GetCashoutAmount() {
      return this._m.Data.cash_amount;
    }
  }, {
    key: "GetBankNonCashAmount",
    value: function GetBankNonCashAmount() {
      return this._m.Data.bank_noncash_amount;
    }
  }, {
    key: "GetBankCashAmount",
    value: function GetBankCashAmount() {
      return this._m.Data.bank_cash_amount;
    }
  }, {
    key: "GetCustomerReceipt",
    value: function GetCustomerReceipt() {
      return this._m.Data.customer_receipt || "";
    }
  }, {
    key: "GetMerchantReceipt",
    value: function GetMerchantReceipt() {
      return this._m.Data.merchant_receipt || "";
    }
  }, {
    key: "GetResponseText",
    value: function GetResponseText() {
      return this._m.Data.host_response_text || "";
    }
  }, {
    key: "GetResponseCode",
    value: function GetResponseCode() {
      return this._m.Data.host_response_code;
    }
  }, {
    key: "GetTerminalReferenceId",
    value: function GetTerminalReferenceId() {
      return this._m.Data.terminal_ref_id;
    }
  }, {
    key: "GetCardEntry",
    value: function GetCardEntry() {
      return this._m.Data.card_entry;
    }
  }, {
    key: "GetAccountType",
    value: function GetAccountType() {
      return this._m.Data.account_type;
    }
  }, {
    key: "GetAuthCode",
    value: function GetAuthCode() {
      return this._m.Data.auth_code;
    }
  }, {
    key: "GetBankDate",
    value: function GetBankDate() {
      return this._m.Data.bank_date;
    }
  }, {
    key: "GetBankTime",
    value: function GetBankTime() {
      return this._m.Data.bank_time;
    }
  }, {
    key: "GetMaskedPan",
    value: function GetMaskedPan() {
      return this._m.Data.masked_pan;
    }
  }, {
    key: "GetTerminalId",
    value: function GetTerminalId() {
      return this._m.Data.terminal_id;
    }
  }, {
    key: "WasMerchantReceiptPrinted",
    value: function WasMerchantReceiptPrinted() {
      return this._m.Data.merchant_receipt_printed;
    }
  }, {
    key: "WasCustomerReceiptPrinted",
    value: function WasCustomerReceiptPrinted() {
      return this._m.Data.customer_receipt_printed;
    }
  }, {
    key: "GetSettlementDate",
    value: function GetSettlementDate() {
      //"bank_settlement_date":"20042018"
      var dateStr = this._m.Data.bank_settlement_date;
      if (!dateStr) return null;
      return _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"].ParseBankDate(dateStr);
    }
  }, {
    key: "GetResponseValue",
    value: function GetResponseValue(attribute) {
      return this._m.Data[attribute];
    }
  }, {
    key: "ToPaymentSummary",
    value: function ToPaymentSummary() {
      return {
        account_type: this.GetAccountType(),
        auth_code: this.GetAuthCode(),
        bank_date: this.GetBankDate(),
        bank_time: this.GetBankTime(),
        host_response_code: this.GetResponseCode(),
        host_response_text: this.GetResponseText(),
        masked_pan: this.GetMaskedPan(),
        purchase_amount: this.GetPurchaseAmount(),
        rrn: this.GetRRN(),
        scheme_name: this.SchemeName,
        terminal_id: this.GetTerminalId(),
        terminal_ref_id: this.GetTerminalReferenceId(),
        tip_amount: this.GetTipAmount(),
        surcharge_amount: this.GetSurchargeAmount()
      };
    }
  }]);

  return PurchaseResponse;
}();
var CancelTransactionRequest =
/*#__PURE__*/
function () {
  function CancelTransactionRequest() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, CancelTransactionRequest);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(CancelTransactionRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("ctx"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].CancelTransactionRequest, null, true);
    }
  }]);

  return CancelTransactionRequest;
}();
var CancelTransactionResponse =
/*#__PURE__*/
function () {
  function CancelTransactionResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, CancelTransactionResponse);

    this._m = m;
    this.PosRefId = this._m.Data.pos_ref_id;
    this.Success = this._m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(CancelTransactionResponse, [{
    key: "GetErrorReason",
    value: function GetErrorReason() {
      return this._m.Data.error_reason;
    }
  }, {
    key: "GetErrorDetail",
    value: function GetErrorDetail() {
      return this._m.Data.error_detail;
    }
  }, {
    key: "WasTxnPastPointOfNoReturn",
    value: function WasTxnPastPointOfNoReturn() {
      return this._m.GetError().startsWith("TXN_PAST_POINT_OF_NO_RETURN");
    }
  }, {
    key: "GetResponseValueWithAttribute",
    value: function GetResponseValueWithAttribute(attribute) {
      return this._m.Data[attribute];
    }
  }]);

  return CancelTransactionResponse;
}();
var GetLastTransactionRequest =
/*#__PURE__*/
function () {
  function GetLastTransactionRequest() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GetLastTransactionRequest);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GetLastTransactionRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("glt"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].GetLastTransactionRequest, null, true);
    }
  }]);

  return GetLastTransactionRequest;
}();
var GetLastTransactionResponse =
/*#__PURE__*/
function () {
  function GetLastTransactionResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, GetLastTransactionResponse);

    this._m = m;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(GetLastTransactionResponse, [{
    key: "WasRetrievedSuccessfully",
    value: function WasRetrievedSuccessfully() {
      // We can't rely on checking "success" flag or "error" fields here,
      // as retrieval may be successful, but the retrieved transaction was a fail.
      // So we check if we got back an ResponseCode.
      // (as opposed to say an operation_in_progress_error)
      return !!this.GetResponseCode();
    }
  }, {
    key: "WasTimeOutOfSyncError",
    value: function WasTimeOutOfSyncError() {
      return this._m.GetError().startsWith("TIME_OUT_OF_SYNC");
    }
  }, {
    key: "WasOperationInProgressError",
    value: function WasOperationInProgressError() {
      return this._m.GetError().startsWith("OPERATION_IN_PROGRESS");
    }
  }, {
    key: "IsWaitingForSignatureResponse",
    value: function IsWaitingForSignatureResponse() {
      return this._m.GetError().startsWith("OPERATION_IN_PROGRESS_AWAITING_SIGNATURE");
    }
  }, {
    key: "IsWaitingForAuthCode",
    value: function IsWaitingForAuthCode() {
      return this._m.GetError().startsWith("OPERATION_IN_PROGRESS_AWAITING_PHONE_AUTH_CODE");
    }
  }, {
    key: "IsStillInProgress",
    value: function IsStillInProgress(posRefId) {
      return this.WasOperationInProgressError() && (this.GetPosRefId() == posRefId || this.GetPosRefId() == null);
    }
  }, {
    key: "GetSuccessState",
    value: function GetSuccessState() {
      return this._m.GetSuccessState();
    }
  }, {
    key: "WasSuccessfulTx",
    value: function WasSuccessfulTx() {
      return this._m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
    }
  }, {
    key: "GetTxType",
    value: function GetTxType() {
      return this._m.Data.transaction_type;
    }
  }, {
    key: "GetPosRefId",
    value: function GetPosRefId() {
      return this._m.Data.pos_ref_id;
    }
  }, {
    key: "GetBankNonCashAmount",
    value: function GetBankNonCashAmount() {
      return this._m.Data.bank_noncash_amount;
    }
  }, {
    key: "GetSchemeApp",
    value: function GetSchemeApp() {
      return this._m.Data.scheme_name;
    }
  }, {
    key: "GetSchemeName",
    value: function GetSchemeName() {
      return this._m.Data.scheme_name;
    }
  }, {
    key: "GetAmount",
    value: function GetAmount() {
      return this._m.Data.amount_purchase;
    }
  }, {
    key: "GetTransactionAmount",
    value: function GetTransactionAmount() {
      return this._m.Data.amount_transaction_type;
    }
  }, {
    key: "GetBankDateTimeString",
    value: function GetBankDateTimeString() {
      var ds = this._m.Data.bank_date + this._m.Data.bank_time;
      return ds;
    }
  }, {
    key: "GetRRN",
    value: function GetRRN() {
      return this._m.Data.rrn;
    }
  }, {
    key: "GetResponseText",
    value: function GetResponseText() {
      return this._m.Data.host_response_text | "";
    }
  }, {
    key: "GetResponseCode",
    value: function GetResponseCode() {
      return this._m.Data.host_response_code;
    } // <summary>
    // There is a bug, VSV-920, whereby the customer_receipt is missing from a glt response.
    // The current recommendation is to use the merchant receipt in place of it if required.
    // This method modifies the underlying incoming message data by copying
    // the merchant receipt into the customer receipt only if there 
    // is a merchant_receipt and there is not a customer_receipt.   
    // </summary>

  }, {
    key: "CopyMerchantReceiptToCustomerReceipt",
    value: function CopyMerchantReceiptToCustomerReceipt() {
      var cr = this._m.Data.customer_receipt;
      var mr = this._m.Data.merchant_receipt;

      if (mr != "" && !cr) {
        this._m.Data.customer_receipt = mr;
      }
    }
  }]);

  return GetLastTransactionResponse;
}();
var RefundRequest =
/*#__PURE__*/
function () {
  function RefundRequest(amountCents, posRefId, suppressMerchantPassword) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, RefundRequest);

    this.AmountCents = amountCents;
    this.Id = _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("refund");
    this.PosRefId = posRefId;
    this.SuppressMerchantPassword = suppressMerchantPassword;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(RefundRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        refund_amount: this.AmountCents,
        pos_ref_id: this.PosRefId,
        suppress_merchant_password: this.SuppressMerchantPassword
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("refund"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].RefundRequest, data, true);
    }
  }]);

  return RefundRequest;
}();
var RefundResponse =
/*#__PURE__*/
function () {
  function RefundResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, RefundResponse);

    this._m = m;
    this.RequestId = m.Id;
    this.PosRefId = m.Data.pos_ref_id;
    this.SchemeName = m.Data.scheme_name;
    this.SchemeAppName = m.Data.scheme_name;
    this.Success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(RefundResponse, [{
    key: "GetRefundAmount",
    value: function GetRefundAmount() {
      return this._m.Data.refund_amount;
    }
  }, {
    key: "GetRRN",
    value: function GetRRN() {
      return this._m.Data.rrn;
    }
  }, {
    key: "GetCustomerReceipt",
    value: function GetCustomerReceipt() {
      return this._m.Data.customer_receipt || "";
    }
  }, {
    key: "GetMerchantReceipt",
    value: function GetMerchantReceipt() {
      return this._m.Data.merchant_receipt;
    }
  }, {
    key: "GetResponseText",
    value: function GetResponseText() {
      return this._m.Data.host_response_text || "";
    }
  }, {
    key: "GetResponseCode",
    value: function GetResponseCode() {
      return this._m.Data.host_response_code || "";
    }
  }, {
    key: "GetTerminalReferenceId",
    value: function GetTerminalReferenceId() {
      return this._m.Data.terminal_ref_id || "";
    }
  }, {
    key: "GetCardEntry",
    value: function GetCardEntry() {
      return this._m.Data.card_entry || "";
    }
  }, {
    key: "GetAccountType",
    value: function GetAccountType() {
      return this._m.Data.account_type || "";
    }
  }, {
    key: "GetAuthCode",
    value: function GetAuthCode() {
      return this._m.Data.auth_code || "";
    }
  }, {
    key: "GetBankDate",
    value: function GetBankDate() {
      return this._m.Data.bank_date || "";
    }
  }, {
    key: "GetBankTime",
    value: function GetBankTime() {
      return this._m.Data.bank_time || "";
    }
  }, {
    key: "GetMaskedPan",
    value: function GetMaskedPan() {
      return this._m.Data.masked_pan || "";
    }
  }, {
    key: "GetTerminalId",
    value: function GetTerminalId() {
      return this._m.Data.terminal_id || "";
    }
  }, {
    key: "WasMerchantReceiptPrinted",
    value: function WasMerchantReceiptPrinted() {
      return this._m.Data.merchant_receipt_printed;
    }
  }, {
    key: "WasCustomerReceiptPrinted",
    value: function WasCustomerReceiptPrinted() {
      return this._m.Data.customer_receipt_printed;
    }
  }, {
    key: "GetSettlementDate",
    value: function GetSettlementDate() {
      //"bank_settlement_date":"20042018"
      var dateStr = this._m.Data.bank_settlement_date;
      if (!dateStr) return null;
      return _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"].ParseBankDate(dateStr);
    }
  }, {
    key: "GetResponseValue",
    value: function GetResponseValue(attribute) {
      return this._m.Data[attribute];
    }
  }]);

  return RefundResponse;
}();
var SignatureRequired =
/*#__PURE__*/
function () {
  function SignatureRequired(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SignatureRequired);

    this.RequestId = m.Id;
    this.PosRefId = m.Data.pos_ref_id;
    this._receiptToSign = m.Data.merchant_receipt;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SignatureRequired, [{
    key: "SignatureRequired",
    value: function SignatureRequired(posRefId, requestId, receiptToSign) {
      this.RequestId = requestId;
      this.PosRefId = posRefId;
      this._receiptToSign = receiptToSign;
    }
  }, {
    key: "GetMerchantReceipt",
    value: function GetMerchantReceipt() {
      return this._receiptToSign;
    }
  }]);

  return SignatureRequired;
}();
var SignatureDecline =
/*#__PURE__*/
function () {
  function SignatureDecline(posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SignatureDecline);

    this.PosRefId = posRefId;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SignatureDecline, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        pos_ref_id: this.PosRefId
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("sigdec"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].SignatureDeclined, data, true);
    }
  }]);

  return SignatureDecline;
}();
var SignatureAccept =
/*#__PURE__*/
function () {
  function SignatureAccept(posRefId) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SignatureAccept);

    this.PosRefId = posRefId;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SignatureAccept, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        pos_ref_id: this.PosRefId
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("sigacc"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].SignatureAccepted, data, true);
    }
  }]);

  return SignatureAccept;
}();
var MotoPurchaseRequest =
/*#__PURE__*/
function () {
  function MotoPurchaseRequest(amountCents, posRefId, surchargeAmount) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, MotoPurchaseRequest);

    this.PosRefId = posRefId;
    this.PurchaseAmount = amountCents;
    this.SurchargeAmount = surchargeAmount;
    this.SuppressMerchantPassword = false;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_4__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(MotoPurchaseRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        pos_ref_id: this.PosRefId,
        purchase_amount: this.PurchaseAmount,
        surcharge_amount: this.SurchargeAmount,
        suppress_merchant_password: this.SuppressMerchantPassword
      };
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = true;
      this.Config.EnabledSignatureFlowOnEftpos = true;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("moto"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].MotoPurchaseRequest, data, true);
    }
  }]);

  return MotoPurchaseRequest;
}();
var MotoPurchaseResponse = function MotoPurchaseResponse(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, MotoPurchaseResponse);

  this.PurchaseResponse = new PurchaseResponse(m);
  this.PosRefId = PurchaseResponse.PosRefId;
};
var PhoneForAuthRequired =
/*#__PURE__*/
function () {
  function PhoneForAuthRequired() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PhoneForAuthRequired);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 4) {
      this.PosRefId = args[0];
      this.RequestId = args[1];
      this._phoneNumber = args[2];
      this._merchantId = args[3];
    } else if (args.length === 1) {
      this.RequestId = args[0].Id;
      this.PosRefId = args[0].Data.pos_ref_id;
      this._phoneNumber = args[0].Data.auth_centre_phone_number;
      this._merchantId = args[0].Data.merchant_id;
    } else {
      throw new Error('Invalid call sig for Phone auth required class');
    }
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PhoneForAuthRequired, [{
    key: "GetPhoneNumber",
    value: function GetPhoneNumber() {
      return this._phoneNumber;
    }
  }, {
    key: "GetMerchantId",
    value: function GetMerchantId() {
      return this._merchantId;
    }
  }]);

  return PhoneForAuthRequired;
}();
var AuthCodeAdvice =
/*#__PURE__*/
function () {
  function AuthCodeAdvice(posRefId, authCode) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, AuthCodeAdvice);

    this.PosRefId = posRefId;
    this.AuthCode = authCode;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(AuthCodeAdvice, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {
        pos_ref_id: this.PosRefId,
        auth_code: this.AuthCode
      };
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("authad"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].AuthCodeAdvice, data, true);
    }
  }]);

  return AuthCodeAdvice;
}();

/***/ }),

/***/ "./src/PurchaseHelper.js":
/*!*******************************!*\
  !*** ./src/PurchaseHelper.js ***!
  \*******************************/
/*! exports provided: PurchaseHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PurchaseHelper", function() { return PurchaseHelper; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Purchase__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Purchase */ "./src/Purchase.js");



var PurchaseHelper =
/*#__PURE__*/
function () {
  function PurchaseHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PurchaseHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PurchaseHelper, null, [{
    key: "CreatePurchaseRequest",
    value: function CreatePurchaseRequest(amountCents, purchaseId) {
      return new _Purchase__WEBPACK_IMPORTED_MODULE_2__["PurchaseRequest"](amountCents, purchaseId);
    }
  }, {
    key: "CreatePurchaseRequestV2",
    value: function CreatePurchaseRequestV2(posRefId, purchaseAmount, tipAmount, cashoutAmount, promptForCashout, surchargeAmount) {
      var pr = Object.assign(new _Purchase__WEBPACK_IMPORTED_MODULE_2__["PurchaseRequest"](purchaseAmount, posRefId), {
        CashoutAmount: cashoutAmount,
        TipAmount: tipAmount,
        PromptForCashout: promptForCashout,
        SurchargeAmount: surchargeAmount
      });
      return pr;
    }
  }, {
    key: "CreateRefundRequest",
    value: function CreateRefundRequest(amountCents, purchaseId, suppressMerchantPassword) {
      return new _Purchase__WEBPACK_IMPORTED_MODULE_2__["RefundRequest"](amountCents, purchaseId, suppressMerchantPassword);
    }
  }]);

  return PurchaseHelper;
}();

/***/ }),

/***/ "./src/RequestIdHelper.js":
/*!********************************!*\
  !*** ./src/RequestIdHelper.js ***!
  \********************************/
/*! exports provided: RequestIdHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RequestIdHelper", function() { return RequestIdHelper; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);


var __RequestIdHelperCounter = 1;
var RequestIdHelper =
/*#__PURE__*/
function () {
  function RequestIdHelper() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, RequestIdHelper);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(RequestIdHelper, null, [{
    key: "Id",
    value: function Id(prefix) {
      return prefix + __RequestIdHelperCounter++;
    }
  }]);

  return RequestIdHelper;
}();

/***/ }),

/***/ "./src/Secrets.js":
/*!************************!*\
  !*** ./src/Secrets.js ***!
  \************************/
/*! exports provided: Secrets */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Secrets", function() { return Secrets; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);


var Secrets =
/*#__PURE__*/
function () {
  function Secrets(encKey, hmacKey) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Secrets);

    this.EncKey = encKey;
    this.HmacKey = hmacKey;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Secrets, null, [{
    key: "save",
    value: function save(EncKey, HmacKey) {
      localStorage.setItem('EncKey', EncKey);
      localStorage.setItem('HmacKey', HmacKey);
    }
  }, {
    key: "restore",
    value: function restore() {
      return new Secrets(localStorage.getItem('EncKey'), localStorage.getItem('HmacKey'));
    }
  }, {
    key: "isSaved",
    value: function isSaved() {
      return localStorage.getItem('EncKey') && localStorage.getItem('HmacKey');
    }
  }, {
    key: "Reset",
    value: function Reset() {
      localStorage.removeItem('EncKey');
      localStorage.removeItem('HmacKey');
    }
  }]);

  return Secrets;
}();

/***/ }),

/***/ "./src/Service/DeviceService.js":
/*!**************************************!*\
  !*** ./src/Service/DeviceService.js ***!
  \**************************************/
/*! exports provided: DeviceAddressStatus, DeviceAddressResponseCode, HttpStatusCode, DeviceAddressService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceAddressStatus", function() { return DeviceAddressStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceAddressResponseCode", function() { return DeviceAddressResponseCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpStatusCode", function() { return HttpStatusCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceAddressService", function() { return DeviceAddressService; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);




var DeviceAddressStatus =
/*#__PURE__*/
function () {
  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(DeviceAddressStatus, [{
    key: "Address",
    get: function get() {
      if (this.UseSecureWebSockets) {
        return this.fqdn;
      } else {
        return this.ip;
      }
    },
    set: function set(address) {
      if (this.UseSecureWebSockets) {
        this.fqdn = addreses;
      } else {
        this.ip = address;
      }
    }
  }]);

  function DeviceAddressStatus(useSecureWebSockets) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, DeviceAddressStatus);

    this.UseSecureWebSockets = useSecureWebSockets;
    this.ip = null;
    this.fqdn = null;
    this.LastUpdated = null;
    this.DeviceAddressResponseCode = null;
    this.ResponseStatusDescription = null;
    this.ResponseMessage = null;
  }

  return DeviceAddressStatus;
}();
var DeviceAddressResponseCode = {
  SUCCESS: 'SUCCESS',
  INVALID_SERIAL_NUMBER: 'INVALID_SERIAL_NUMBER',
  ADDRESS_NOT_CHANGED: 'ADDRESS_NOT_CHANGED',
  SERIAL_NUMBER_NOT_CHANGED: 'SERIAL_NUMBER_NOT_CHANGED',
  DEVICE_SERVICE_ERROR: 'DEVICE_SERVICE_ERROR'
};
var HttpStatusCode = {
  NotFound: 404
};
var DeviceAddressService =
/*#__PURE__*/
function () {
  function DeviceAddressService() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, DeviceAddressService);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(DeviceAddressService, [{
    key: "RetrieveService",
    // RetrieveService(serialNumber, apiKey = 'spi-sample-pos1', acquirerCode, useSecureWebSockets, isTestMode)
    value: function () {
      var _RetrieveService = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee(serialNumber) {
        var apiKey,
            acquirerCode,
            isSecureConnection,
            isTestMode,
            CONNECTION_TIMEOUT,
            path,
            deviceAddressUri,
            _args = arguments;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                apiKey = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'spi-sample-pos1';
                acquirerCode = _args.length > 2 ? _args[2] : undefined;
                isSecureConnection = _args.length > 3 ? _args[3] : undefined;
                isTestMode = _args.length > 4 ? _args[4] : undefined;
                CONNECTION_TIMEOUT = 8000;
                path = isSecureConnection ? 'fqdn' : 'ip';
                deviceAddressUri = isTestMode ? "https://device-address-api-sb.".concat(acquirerCode, ".msp.assemblypayments.com/v1/").concat(serialNumber, "/").concat(path) : "https://device-address-api.".concat(acquirerCode, ".msp.assemblypayments.com/v1/").concat(serialNumber, "/").concat(path);
                return _context.abrupt("return", Promise.race([fetch(deviceAddressUri, {
                  method: 'GET',
                  headers: {
                    'ASM-MSP-DEVICE-ADDRESS-API-KEY': apiKey
                  }
                }), new Promise(function (_, reject) {
                  return setTimeout(function () {
                    return reject(new Error('Timeout while trying to retrieve IP address'));
                  }, CONNECTION_TIMEOUT);
                })]));

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function RetrieveService(_x) {
        return _RetrieveService.apply(this, arguments);
      }

      return RetrieveService;
    }()
  }]);

  return DeviceAddressService;
}();

/***/ }),

/***/ "./src/Settlement.js":
/*!***************************!*\
  !*** ./src/Settlement.js ***!
  \***************************/
/*! exports provided: SettleRequest, Settlement, SchemeSettlementEntry, SettlementEnquiryRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettleRequest", function() { return SettleRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Settlement", function() { return Settlement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SchemeSettlementEntry", function() { return SchemeSettlementEntry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SettlementEnquiryRequest", function() { return SettlementEnquiryRequest; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");




var SettleRequest =
/*#__PURE__*/
function () {
  function SettleRequest(id) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SettleRequest);

    this.Id = id;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SettleRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {};
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = false;
      this.Config.EnabledSignatureFlowOnEftpos = false;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](this.Id, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].SettleRequest, data, true);
    }
  }]);

  return SettleRequest;
}();
var Settlement =
/*#__PURE__*/
function () {
  function Settlement(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Settlement);

    this.RequestId = m.Id;
    this._m = m;
    this.Success = m.GetSuccessState() == _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Success;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Settlement, [{
    key: "GetSettleByAcquirerCount",
    value: function GetSettleByAcquirerCount() {
      return this._m.Data.accumulated_settle_by_acquirer_count;
    }
  }, {
    key: "GetSettleByAcquirerValue",
    value: function GetSettleByAcquirerValue() {
      return this._m.Data.accumulated_settle_by_acquirer_value;
    }
  }, {
    key: "GetTotalCount",
    value: function GetTotalCount() {
      return this._m.Data.accumulated_total_count;
    }
  }, {
    key: "GetTotalValue",
    value: function GetTotalValue() {
      return this._m.Data.accumulated_total_value;
    }
  }, {
    key: "GetPeriodStartTime",
    value: function GetPeriodStartTime() {
      var timeStr = this._m.Data.settlement_period_start_time; // "05:00"

      var dateStr = this._m.Data.settlement_period_start_date; // "05Oct17"

      return _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"].ParseBankDateTimeStr(dateStr, timeStr);
    }
  }, {
    key: "GetPeriodEndTime",
    value: function GetPeriodEndTime() {
      var timeStr = this._m.Data.settlement_period_end_time; // "05:00"

      var dateStr = this._m.Data.settlement_period_end_date; // "05Oct17"

      return _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"].ParseBankDateTimeStr(dateStr, timeStr);
    }
  }, {
    key: "GetTriggeredTime",
    value: function GetTriggeredTime() {
      var timeStr = this._m.Data.settlement_triggered_time; // "05:00:45"

      var dateStr = this._m.Data.settlement_triggered_date; // "05Oct17"

      return _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"].ParseBankDateTimeStr(dateStr, timeStr);
    }
  }, {
    key: "GetResponseText",
    value: function GetResponseText() {
      return this._m.Data.host_response_text;
    }
  }, {
    key: "GetReceipt",
    value: function GetReceipt() {
      return this._m.Data.merchant_receipt;
    }
  }, {
    key: "GetTransactionRange",
    value: function GetTransactionRange() {
      return this._m.Data.transaction_range;
    }
  }, {
    key: "GetTerminalId",
    value: function GetTerminalId() {
      return this._m.Data.terminal_id;
    }
  }, {
    key: "WasMerchantReceiptPrinted",
    value: function WasMerchantReceiptPrinted() {
      return this._m.Data.merchant_receipt_printed;
    }
  }, {
    key: "GetSchemeSettlementEntries",
    value: function GetSchemeSettlementEntries() {
      var schemes = this._m.Data.schemes;
      if (!schemes) return [];
      return schemes.map(function (scheme) {
        return new SchemeSettlementEntry(scheme);
      });
    }
  }]);

  return Settlement;
}();
var SchemeSettlementEntry =
/*#__PURE__*/
function () {
  // SchemeSettlementEntry(string schemeName, bool settleByAcquirer, int totalCount, int totalValue)
  // SchemeSettlementEntry(Object schemeObj)
  function SchemeSettlementEntry() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SchemeSettlementEntry);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (args.length === 1) {
      this.SchemeName = args[0].scheme_name;
      this.SettleByAcquirer = args[0].settle_by_acquirer.toLowerCase() == "yes";
      this.TotalValue = parseInt(args[0].total_value, 10);
      this.TotalCount = parseInt(args[0].total_count, 10);
    } else if (args.length === 4) {
      this.SchemeName = args[0];
      this.SettleByAcquirer = args[1];
      this.TotalCount = args[2];
      this.TotalValue = args[3];
    }
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SchemeSettlementEntry, [{
    key: "ToString",
    value: function ToString() {
      return "SchemeName: ".concat(this.SchemeName, ", SettleByAcquirer: ").concat(this.SettleByAcquirer, ", TotalCount: ").concat(this.TotalCount, ", TotalValue: ").concat(this.TotalValue);
    }
  }]);

  return SchemeSettlementEntry;
}();
var SettlementEnquiryRequest =
/*#__PURE__*/
function () {
  function SettlementEnquiryRequest(id) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SettlementEnquiryRequest);

    this.Id = id;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiConfig"]();
    this.Options = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SettlementEnquiryRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {};
      this.Config.EnabledPrintMerchantCopy = true;
      this.Config.EnabledPromptForCustomerCopyOnEftpos = false;
      this.Config.EnabledSignatureFlowOnEftpos = false;
      this.Config.AddReceiptConfig(data);
      this.Options.AddOptions(data);
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](this.Id, _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].SettlementEnquiryRequest, data, true);
    }
  }]);

  return SettlementEnquiryRequest;
}();

/***/ }),

/***/ "./src/Spi.js":
/*!********************!*\
  !*** ./src/Spi.js ***!
  \********************/
/*! exports provided: Spi, SPI_VERSION */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Spi", function() { return Spi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPI_VERSION", function() { return SPI_VERSION; });
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony import */ var _PairingHelper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PairingHelper */ "./src/PairingHelper.js");
/* harmony import */ var _Connection__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Connection */ "./src/Connection.js");
/* harmony import */ var _SpiPayAtTable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./SpiPayAtTable */ "./src/SpiPayAtTable.js");
/* harmony import */ var _PayAtTable__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./PayAtTable */ "./src/PayAtTable.js");
/* harmony import */ var _SpiPreauth__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./SpiPreauth */ "./src/SpiPreauth.js");
/* harmony import */ var _Cashout__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Cashout */ "./src/Cashout.js");
/* harmony import */ var _Settlement__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Settlement */ "./src/Settlement.js");
/* harmony import */ var _Pairing__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Pairing */ "./src/Pairing.js");
/* harmony import */ var _PosInfo__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./PosInfo */ "./src/PosInfo.js");
/* harmony import */ var _PurchaseHelper__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./PurchaseHelper */ "./src/PurchaseHelper.js");
/* harmony import */ var _KeyRollingHelper__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./KeyRollingHelper */ "./src/KeyRollingHelper.js");
/* harmony import */ var _PingHelper__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./PingHelper */ "./src/PingHelper.js");
/* harmony import */ var _Purchase__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Purchase */ "./src/Purchase.js");
/* harmony import */ var _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Service/DeviceService */ "./src/Service/DeviceService.js");
/* harmony import */ var _Printing__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./Printing */ "./src/Printing.js");
/* harmony import */ var _TerminalStatus__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./TerminalStatus */ "./src/TerminalStatus.js");























var SPI_VERSION = '2.6.0';

var Spi =
/*#__PURE__*/
function () {
  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Spi, [{
    key: "CurrentStatus",
    get: function get() {
      return this._currentStatus;
    },
    set: function set(value) {
      if (this._currentStatus === value) {
        return;
      }

      this._currentStatus = value;
      document.dispatchEvent(new CustomEvent('StatusChanged', {
        detail: value
      }));
    }
  }]);

  function Spi(posId, serialNumber, eftposAddress, secrets) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, Spi);

    this._posId = posId;
    this._serialNumber = serialNumber;
    this._secrets = secrets;
    this._forceSecureWebSockets = false;
    this._eftposAddress = "ws://" + eftposAddress;
    this._log = console;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiConfig"]();
    this._conn = new _Connection__WEBPACK_IMPORTED_MODULE_8__["Connection"]();
    this.CurrentDeviceStatus = null;
    this._deviceApiKey = null;
    this._acquirerCode = null;
    this._inTestMode = false;
    this._autoAddressResolutionEnabled = false; // Our stamp for signing outgoing messages

    this._spiMessageStamp = new _Messages__WEBPACK_IMPORTED_MODULE_4__["MessageStamp"](this._posId, this._secrets, 0);
    this._posVendorId = null;
    this._posVersion = null;
    this._hasSetInfo = null; // We will maintain some state

    this._mostRecentPingSent = null;
    this._mostRecentPongReceived = null;
    this._missedPongsCount = 0;
    this._retriesSinceLastDeviceAddressResolution = 0;
    this._mostRecentLoginResponse = null;
    this._pongTimeout = 5000;
    this._pingFrequency = 18000;
    this._readyToTransact = null;
    this._periodicPingThread = null;
    this._txMonitorCheckFrequency = 1000;
    this._checkOnTxFrequency = 20000;
    this._maxWaitForCancelTx = 10000;
    this._sleepBeforeReconnectMs = 3000;
    this._missedPongsToDisconnect = 2;
    this._retriesBeforeResolvingDeviceAddress = 3;
    this._retriesSinceLastPairing = 0;
    this._retriesBeforePairing = 3;
    this._regexItemsForEftposAddress = /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$/;
    this._regexItemsForFqdnEftposAddress = /^[a-zA-Z0-9\.-]+$/;
    this._regexItemsForPosId = /^[a-zA-Z0-9]*$/;
    this.CurrentFlow = null;
    this.CurrentPairingFlowState = null;
    this.CurrentTxFlowState = null;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Spi, [{
    key: "EnablePayAtTable",
    value: function EnablePayAtTable() {
      this._spiPat = new _SpiPayAtTable__WEBPACK_IMPORTED_MODULE_9__["SpiPayAtTable"](this);
      return this._spiPat;
    }
  }, {
    key: "DisablePayAtTable",
    value: function DisablePayAtTable() {
      this._spiPat = new _SpiPayAtTable__WEBPACK_IMPORTED_MODULE_9__["SpiPayAtTable"](this);
      this._spiPat.Config.PayAtTableEnabled = false;
      return this._spiPat;
    }
  }, {
    key: "EnablePreauth",
    value: function EnablePreauth() {
      this._spiPreauth = new _SpiPreauth__WEBPACK_IMPORTED_MODULE_11__["SpiPreauth"](this);
      return this._spiPreauth;
    }
  }, {
    key: "Start",
    value: function Start() {
      if (!this._posVendorId || !this._posVersion) {
        // POS information is now required to be set
        this._log.warn("Missing POS vendor ID and version. posVendorId and posVersion are required before starting");

        throw new Error("Missing POS vendor ID and version. posVendorId and posVersion are required before starting");
      }

      if (!this._isPosIdValid(this._posId)) {
        // continue, as they can set the posId later on
        this._posId = "";

        this._log.warn("Invalid parameter, please correct them before pairing");
      }

      if (!this._isEftposAddressValid(this._eftposAddress)) {
        // continue, as they can set the eftposAddress later on
        this._eftposAddress = "";

        this._log.warn("Invalid parameter, please correct them before pairing");
      }

      this._resetConn();

      this._startTransactionMonitoringThread();

      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle;

      if (this._secrets != null) {
        this._log.info("Starting in Paired State");

        this._currentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnecting;

        this._conn.Connect(); // This is non-blocking

      } else {
        this._log.info("Starting in Unpaired State");

        this._currentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired;
      }
    } /// <summary>
    /// Set the acquirer code of your bank, please contact Assembly's Integration Engineers for acquirer code.
    /// </summary>

  }, {
    key: "SetAcquirerCode",
    value: function SetAcquirerCode(acquirerCode) {
      this._acquirerCode = acquirerCode;
      return true;
    } /// <summary>
    /// Set the api key used for auto address discovery feature
    /// </summary>
    /// <returns></returns>

  }, {
    key: "SetDeviceApiKey",
    value: function SetDeviceApiKey(deviceApiKey) {
      this._deviceApiKey = deviceApiKey;
      return true;
    } /// <summary>
    /// Allows you to set the serial number of the Eftpos
    /// </summary>

  }, {
    key: "SetSerialNumber",
    value: function SetSerialNumber(serialNumber) {
      if (this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return false;
      var was = this._serialNumber;
      this._serialNumber = serialNumber;

      if (this.HasSerialNumberChanged(was)) {
        this._autoResolveEftposAddress();
      } else {
        if (this.CurrentDeviceStatus == null) {
          this.CurrentDeviceStatus = new _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressStatus"]();
        }

        this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].SERIAL_NUMBER_NOT_CHANGED;
        document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
          detail: this.CurrentDeviceStatus
        }));
      }

      return true;
    } /// <summary>
    /// Allows you to set the auto address discovery feature. 
    /// </summary>
    /// <returns></returns>

  }, {
    key: "SetAutoAddressResolution",
    value: function SetAutoAddressResolution(autoAddressResolutionEnable) {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnected) return false;
      var was = this._autoAddressResolutionEnabled;
      this._autoAddressResolutionEnabled = autoAddressResolutionEnable;

      if (autoAddressResolutionEnable && !was) {
        // we're turning it on
        this._autoResolveEftposAddress();
      }

      return true;
    } /// <summary>
    /// Call this method to set the client library test mode.
    /// Set it to true only while you are developing the integration. 
    /// It defaults to false. For a real merchant, always leave it set to false. 
    /// </summary>
    /// <param name="testMode"></param>
    /// <returns></returns>

  }, {
    key: "SetTestMode",
    value: function SetTestMode(testMode) {
      if (this.CurrentStatus && this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return false;
      if (testMode == this._inTestMode) return true; // we're changing mode

      this._inTestMode = testMode;

      this._autoResolveEftposAddress();

      return true;
    } /// <summary>
    /// Set the client library to use secure web sockets TLS (wss protocol)
    /// </summary>
    /// <param name="isSecure"></param>
    /// <returns></returns>

  }, {
    key: "SetSecureWebSockets",
    value: function SetSecureWebSockets(useSecureWebSockets) {
      this._forceSecureWebSockets = useSecureWebSockets;
    } // <summary>
    // Allows you to set the PosId which identifies this instance of your POS.
    // Can only be called in thge Unpaired state. 
    // </summary>

  }, {
    key: "SetPosId",
    value: function SetPosId(posId) {
      if (this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return false;
      this._posId = ""; // reset posId to give more explicit feedback

      if (!this._isPosIdValid(posId)) {
        this._log.info("Pos Id set to null");

        return false;
      }

      this._posId = posId;
      this._spiMessageStamp.PosId = posId;
      return true;
    } // <summary>
    // Allows you to set the PinPad address. Sometimes the PinPad might change IP address 
    // (we recommend reserving static IPs if possible).
    // Either way you need to allow your User to enter the IP address of the PinPad.
    // </summary>

  }, {
    key: "SetEftposAddress",
    value: function SetEftposAddress(address) {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnected || this._autoAddressResolutionEnabled) {
        return false;
      }

      this._eftposAddress = ""; // reset eftposAddress to give more explicit feedback

      if (!this._isEftposAddressValid(address)) {
        this._log.info("Eftpos Address set to null");

        return false;
      }

      this._eftposAddress = "ws://" + address;
      this._conn.Address = this._eftposAddress;
      return true;
    }
  }, {
    key: "SetPosInfo",

    /**
     * Sets values used to identify the POS software to the EFTPOS terminal.
     * Must be set before starting!
     *
     * @param posVendorId Vendor identifier of the POS itself.
     * @param posVersion  Version string of the POS itself.
     */
    value: function SetPosInfo(posVendorId, posVersion) {
      this._posVendorId = posVendorId;
      this._posVersion = posVersion;
    } // <summary>
    // Call this one when a flow is finished and you want to go back to idle state.
    // Typically when your user clicks the "OK" bubtton to acknowldge that pairing is
    // finished, or that transaction is finished.
    // When true, you can dismiss the flow screen and show back the idle screen.
    // </summary>
    // <returns>true means we have moved back to the Idle state. false means current flow was not finished yet.</returns>

  }, {
    key: "AckFlowEndedAndBackToIdle",
    value: function AckFlowEndedAndBackToIdle() {
      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return true; // already idle

      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Pairing && this.CurrentPairingFlowState.Finished) {
        this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle;
        return true;
      }

      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction && this.CurrentTxFlowState.Finished) {
        this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle;
        return true;
      }

      return false;
    } // endregion
    // <summary>
    // This will connect to the Eftpos and start the pairing process.
    // Only call this if you are in the Unpaired state.
    // Subscribe to the PairingFlowStateChanged event to get updates on the pairing process.
    // </summary>
    // <returns>Whether pairing has initiated or not</returns>

  }, {
    key: "Pair",
    value: function Pair() {
      this._log.log("Trying to pair ....");

      if (this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        this._log.warn("Tried to Pair, but we're already paired. Stop pairing.");

        return false;
      }

      if (!this._isPosIdValid(this._posId) || !this._isEftposAddressValid(this._eftposAddress)) {
        this._log.warn("Invalid Pos Id or Eftpos address, stop pairing.");

        return false;
      }

      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Pairing;
      this.CurrentPairingFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["PairingFlowState"]({
        Successful: false,
        Finished: false,
        Message: "Connecting...",
        AwaitingCheckFromEftpos: false,
        AwaitingCheckFromPos: false,
        ConfirmationCode: ""
      });
      document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
        detail: this.CurrentPairingFlowState
      }));

      this._conn.Connect(); // Non-Blocking


      return true;
    } // <summary>
    // Call this when your user clicks yes to confirm the pairing code on your 
    // screen matches the one on the Eftpos.
    // </summary>

  }, {
    key: "PairingConfirmCode",
    value: function PairingConfirmCode() {
      if (!this.CurrentPairingFlowState.AwaitingCheckFromPos) {
        // We weren't expecting this
        return;
      }

      this.CurrentPairingFlowState.AwaitingCheckFromPos = false;

      if (this.CurrentPairingFlowState.AwaitingCheckFromEftpos) {
        // But we are still waiting for confirmation from Eftpos side.
        this._log.info("Pair Code Confirmed from POS side, but am still waiting for confirmation from Eftpos.");

        this.CurrentPairingFlowState.Message = "Click YES on EFTPOS if code is: " + this.CurrentPairingFlowState.ConfirmationCode;
        document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
          detail: this.CurrentPairingFlowState
        }));
      } else {
        // Already confirmed from Eftpos - So all good now. We're Paired also from the POS perspective.
        this._log.info("Pair Code Confirmed from POS side, and was already confirmed from Eftpos side. Pairing finalised.");

        this._onPairingSuccess();

        this._onReadyToTransact();
      }
    } // <summary>
    // Call this if your user clicks CANCEL or NO during the pairing process.
    // </summary>

  }, {
    key: "PairingCancel",
    value: function PairingCancel() {
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Pairing || this.CurrentPairingFlowState.Finished) {
        return;
      }

      if (this.CurrentPairingFlowState.AwaitingCheckFromPos && !this.CurrentPairingFlowState.AwaitingCheckFromEftpos) {
        // This means that the Eftpos already thinks it's paired.
        // Let's tell it to drop keys
        this._send(new _Pairing__WEBPACK_IMPORTED_MODULE_14__["DropKeysRequest"]().ToMessage());
      }

      this._onPairingFailed();
    } // <summary>
    // Call this when your uses clicks the Unpair button.
    // This will disconnect from the Eftpos and forget the secrets.
    // The CurrentState is then changed to Unpaired.
    // Call this only if you are not yet in the Unpaired state.
    // </summary>

  }, {
    key: "Unpair",
    value: function Unpair() {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        return false;
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) {
        return false;
      } // Best effort letting the eftpos know that we're dropping the keys, so it can drop them as well.


      this._send(new _Pairing__WEBPACK_IMPORTED_MODULE_14__["DropKeysRequest"]().ToMessage());

      this._doUnpair();

      return true;
    } // endregion
    // region Transaction Methods
    // <summary>
    // Initiates a purchase transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.
    // </summary>
    // <param name="posRefId">Alphanumeric Identifier for your purchase.</param>
    // <param name="amountCents">Amount in Cents to charge</param>
    // <returns>InitiateTxResult</returns>

  }, {
    key: "InitiatePurchaseTx",
    value: function InitiatePurchaseTx(posRefId, amountCents) {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      }

      var purchaseRequest = _PurchaseHelper__WEBPACK_IMPORTED_MODULE_16__["PurchaseHelper"].CreatePurchaseRequest(amountCents, posRefId);
      purchaseRequest.Config = this.Config;
      var purchaseMsg = purchaseRequest.ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].Purchase, amountCents, purchaseMsg, "Waiting for EFTPOS connection to make payment request for ".concat(amountCents / 100.0));

      if (this._send(purchaseMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to accept payment for ".concat(amountCents / 100.0));
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Purchase Initiated");
    } // <summary>
    // Initiates a purchase transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.
    // <para>Tip and cashout are not allowed simultaneously.</para>
    // </summary>
    // <param name="posRefId">An Unique Identifier for your Order/Purchase</param>
    // <param name="purchaseAmount">The Purchase Amount in Cents.</param>
    // <param name="tipAmount">The Tip Amount in Cents</param>
    // <param name="cashoutAmount">The Cashout Amount in Cents</param>
    // <param name="promptForCashout">Whether to prompt your customer for cashout on the Eftpos</param>
    // <param name="options">The Setting to set Header and Footer for the Receipt</param>
    // <param name="surchargeAmount">The Surcharge Amount in Cents</param>
    // <returns>InitiateTxResult</returns>

  }, {
    key: "InitiatePurchaseTxV2",
    value: function InitiatePurchaseTxV2(posRefId, purchaseAmount, tipAmount, cashoutAmount, promptForCashout) {
      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
      var surchargeAmount = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      if (tipAmount > 0 && (cashoutAmount > 0 || promptForCashout)) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Cannot Accept Tips and Cashout at the same time.");
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      var purchase = _PurchaseHelper__WEBPACK_IMPORTED_MODULE_16__["PurchaseHelper"].CreatePurchaseRequestV2(posRefId, purchaseAmount, tipAmount, cashoutAmount, promptForCashout, surchargeAmount);
      purchase.Config = this.Config;
      purchase.Options = options;
      var purchaseMsg = purchase.ToMessage();
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].Purchase, purchaseAmount, purchaseMsg, "Waiting for EFTPOS connection to make payment request. ".concat(purchase.AmountSummary()));

      if (this._send(purchaseMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to accept payment for ".concat(purchase.AmountSummary()));
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Purchase Initiated");
    } // <summary>
    // Initiates a refund transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.
    // </summary>
    // <param name="posRefId">Alphanumeric Identifier for your refund.</param>
    // <param name="amountCents">Amount in Cents to charge</param>
    // <param name="suppressMerchantPassword">Merchant Password control in VAA</param>
    // <param name="options">The Setting to set Header and Footer for the Receipt</param>
    // <returns>InitiateTxResult</returns>

  }, {
    key: "InitiateRefundTx",
    value: function InitiateRefundTx(posRefId, amountCents) {
      var suppressMerchantPassword = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();

      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      }

      var refundRequest = _PurchaseHelper__WEBPACK_IMPORTED_MODULE_16__["PurchaseHelper"].CreateRefundRequest(amountCents, posRefId, suppressMerchantPassword);
      refundRequest.Config = this.Config;
      refundRequest.Options = options;
      var refundMsg = refundRequest.ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].Refund, amountCents, refundMsg, "Waiting for EFTPOS connection to make refund request for ".concat((amountCents / 100.0).toFixed(2)));

      if (this._send(refundMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to refund ".concat((amountCents / 100.0).toFixed(2)));
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Refund Initiated");
    } // <summary>
    // Let the EFTPOS know whether merchant accepted or declined the signature
    // </summary>
    // <param name="accepted">whether merchant accepted the signature from customer or not</param>

  }, {
    key: "AcceptSignature",
    value: function AcceptSignature(accepted) {
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.AwaitingSignatureCheck) {
        this._log.info("Asked to accept signature but I was not waiting for one.");

        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["MidTxResult"](false, "Asked to accept signature but I was not waiting for one.");
      }

      this.CurrentTxFlowState.SignatureResponded(accepted ? "Accepting Signature..." : "Declining Signature...");
      var sigReqMsg = this.CurrentTxFlowState.SignatureRequiredMessage;

      this._send(accepted ? new _Purchase__WEBPACK_IMPORTED_MODULE_19__["SignatureAccept"](this.CurrentTxFlowState.PosRefId).ToMessage() : new _Purchase__WEBPACK_IMPORTED_MODULE_19__["SignatureDecline"](this.CurrentTxFlowState.PosRefId).ToMessage());

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["MidTxResult"](true, "");
    } // <summary>
    // Submit the Code obtained by your user when phoning for auth. 
    // It will return immediately to tell you whether the code has a valid format or not. 
    // If valid==true is returned, no need to do anything else. Expect updates via standard callback.
    // If valid==false is returned, you can show your user the accompanying message, and invite them to enter another code. 
    // </summary>
    // <param name="authCode">The code obtained by your user from the merchant call centre. It should be a 6-character alpha-numeric value.</param>
    // <returns>Whether code has a valid format or not.</returns>

  }, {
    key: "SubmitAuthCode",
    value: function SubmitAuthCode(authCode) {
      if (authCode.length != 6) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SubmitAuthCodeResult"](false, "Not a 6-digit code.");
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.AwaitingPhoneForAuth) {
        this._log.info("Asked to send auth code but I was not waiting for one.");

        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SubmitAuthCodeResult"](false, "Was not waiting for one.");
      }

      this.CurrentTxFlowState.AuthCodeSent("Submitting Auth Code ".concat(authCode));

      this._send(new _Purchase__WEBPACK_IMPORTED_MODULE_19__["AuthCodeAdvice"](this.CurrentTxFlowState.PosRefId, authCode).ToMessage());

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SubmitAuthCodeResult"](true, "Valid Code.");
    } // <summary>
    // Attempts to cancel a Transaction. 
    // Be subscribed to TxFlowStateChanged event to see how it goes.
    // Wait for the transaction to be finished and then see whether cancellation was successful or not.
    // </summary>
    // <returns>MidTxResult - false only if you called it in the wrong state</returns>

  }, {
    key: "CancelTransaction",
    value: function CancelTransaction() {
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished) {
        this._log.info("Asked to cancel transaction but I was not in the middle of one.");

        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["MidTxResult"](false, "Asked to cancel transaction but I was not in the middle of one.");
      } // TH-1C, TH-3C - Merchant pressed cancel


      if (this.CurrentTxFlowState.RequestSent) {
        var cancelReq = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["CancelTransactionRequest"]();
        this.CurrentTxFlowState.Cancelling("Attempting to Cancel Transaction...");

        this._send(cancelReq.ToMessage());
      } else {
        // We Had Not Even Sent Request Yet. Consider as known failed.
        this.CurrentTxFlowState.Failed(null, "Transaction Cancelled. Request Had not even been sent yet.");
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["MidTxResult"](true, "");
    } // <summary>
    // Initiates a cashout only transaction. Be subscribed to TxFlowStateChanged event to get updates on the process.
    // </summary>
    // <param name="posRefId">Alphanumeric Identifier for your transaction.</param>
    // <param name="amountCents">Amount in Cents to cash out</param>
    // <param name="surchargeAmount">The Surcharge Amount in Cents</param>
    // <returns>InitiateTxResult</returns>

  }, {
    key: "InitiateCashoutOnlyTx",
    value: function InitiateCashoutOnlyTx(posRefId, amountCents) {
      var surchargeAmount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      var cashoutMsg = Object.assign(new _Cashout__WEBPACK_IMPORTED_MODULE_12__["CashoutOnlyRequest"](amountCents, posRefId), {
        SurchargeAmount: surchargeAmount,
        Options: options,
        Config: this.Config
      }).ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].CashoutOnly, amountCents, cashoutMsg, "Waiting for EFTPOS connection to send cashout request for ".concat((amountCents / 100).toFixed(2)));

      if (this._send(cashoutMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to do cashout for ".concat((amountCents / 100).toFixed(2)));
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Cashout Initiated");
    } // <summary>
    // Initiates a Mail Order / Telephone Order Purchase Transaction
    // </summary>
    // <param name="posRefId">Alphanumeric Identifier for your transaction.</param>
    // <param name="amountCents">Amount in Cents</param>
    // <param name="surchargeAmount">The Surcharge Amount in Cents</param>
    // <param name="suppressMerchantPassword">>Merchant Password control in VAA</param>
    // <param name="options">The Setting to set Header and Footer for the Receipt</param>
    // <returns>InitiateTxResult</returns>

  }, {
    key: "InitiateMotoPurchaseTx",
    value: function InitiateMotoPurchaseTx(posRefId, amountCents) {
      var surchargeAmount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var suppressMerchantPassword = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      var motoPurchaseMsg = Object.assign(new _Purchase__WEBPACK_IMPORTED_MODULE_19__["MotoPurchaseRequest"](amountCents, posRefId), {
        SurchargeAmount: surchargeAmount,
        SuppressMerchantPassword: suppressMerchantPassword,
        Config: this.Config,
        Options: options
      }).ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].MOTO, amountCents, motoPurchaseMsg, "Waiting for EFTPOS connection to send MOTO request for ".concat((amountCents / 100).toFixed(2)));

      if (this._send(motoPurchaseMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS do MOTO for ".concat((amountCents / 100).toFixed(2)));
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "MOTO Initiated");
    } // <summary>
    // Initiates a settlement transaction.
    // Be subscribed to TxFlowStateChanged event to get updates on the process.
    // <param name="options">The Setting to set Header and Footer for the Receipt</param>
    // </summary>

  }, {
    key: "InitiateSettleTx",
    value: function InitiateSettleTx(posRefId) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();

      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      }

      var settleMsg = Object.assign(new _Settlement__WEBPACK_IMPORTED_MODULE_13__["SettleRequest"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_6__["RequestIdHelper"].Id("settle")), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].Settle, 0, settleMsg, "Waiting for EFTPOS connection to make a settle request");

      if (this._send(settleMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to settle.");
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Settle Initiated");
    } // <summary>
    // <param name="options">The Setting to set Header and Footer for the Receipt</param>
    // </summary>

  }, {
    key: "InitiateSettlementEnquiry",
    value: function InitiateSettlementEnquiry(posRefId) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionOptions"]();
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      var stlEnqMsg = Object.assign(new _Settlement__WEBPACK_IMPORTED_MODULE_13__["SettlementEnquiryRequest"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_6__["RequestIdHelper"].Id("stlenq")), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].SettlementEnquiry, 0, stlEnqMsg, "Waiting for EFTPOS connection to make a settlement enquiry");

      if (this._send(stlEnqMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to make a settlement enquiry.");
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Settle Initiated");
    } // <summary>
    // Initiates a Get Last Transaction. Use this when you want to retrieve the most recent transaction
    // that was processed by the Eftpos.
    // Be subscribed to TxFlowStateChanged event to get updates on the process.
    // </summary>

  }, {
    key: "InitiateGetLastTx",
    value: function InitiateGetLastTx() {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      }

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) {
        return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      }

      var gltRequestMsg = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["GetLastTransactionRequest"]().ToMessage();
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      var posRefId = gltRequestMsg.Id; // GetLastTx is not trying to get anything specific back. So we just use the message id.

      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].GetLastTransaction, 0, gltRequestMsg, "Waiting for EFTPOS connection to make a Get-Last-Transaction request.");
      this.CurrentTxFlowState.CallingGlt(gltRequestMsg.Id);

      if (this._send(gltRequestMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS for last transaction.");
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "GLT Initiated");
    } // <summary>
    // This is useful to recover from your POS crashing in the middle of a transaction.
    // When you restart your POS, if you had saved enough state, you can call this method to recover the client library state.
    // You need to have the posRefId that you passed in with the original transaction, and the transaction type.
    // This method will return immediately whether recovery has started or not.
    // If recovery has started, you need to bring up the transaction modal to your user a be listening to TxFlowStateChanged.
    // </summary>
    // <param name="posRefId">The is that you had assigned to the transaction that you are trying to recover.</param>
    // <param name="txType">The transaction type.</param>
    // <returns></returns>

  }, {
    key: "InitiateRecovery",
    value: function InitiateRecovery(posRefId, txType) {
      if (this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Paired");
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](false, "Not Idle");
      this.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction;
      var gltRequestMsg = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["GetLastTransactionRequest"]().ToMessage();
      this.CurrentTxFlowState = new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionFlowState"](posRefId, txType, 0, gltRequestMsg, "Waiting for EFTPOS connection to attempt recovery.");

      if (this._send(gltRequestMsg)) {
        this.CurrentTxFlowState.Sent("Asked EFTPOS to recover state.");
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_5__["InitiateTxResult"](true, "Recovery Initiated");
    } // <summary>
    // GltMatch attempts to conclude whether a gltResponse matches an expected transaction and returns
    // the outcome. 
    // If Success/Failed is returned, it means that the gtlResponse did match, and that transaction was succesful/failed.
    // If Unknown is returned, it means that the gltResponse does not match the expected transaction. 
    // </summary>
    // <param name="gltResponse">The GetLastTransactionResponse message to check</param>
    // <param name="posRefId">The Reference Id that you passed in with the original request.</param>
    // <param name="expectedAmount">The total amount in the original request</param>
    // <param name="requestTime">The request time</param>
    // <returns></returns>

  }, {
    key: "GltMatch",
    value: function GltMatch(gltResponse, posRefId, expectedAmount, requestTime) {
      // Obsolete method call check
      // Old interface: GltMatch(GetLastTransactionResponse gltResponse, TransactionType expectedType, int expectedAmount, DateTime requestTime, string posRefId)
      if (arguments.length <= 4 ? 0 : arguments.length - 4) {
        if ((arguments.length <= 4 ? 0 : arguments.length - 4) === 1) {
          this._log.info("Obsolete method call detected: Use GltMatch(gltResponse, posRefId)");

          return this.GltMatch(gltResponse, arguments.length <= 4 ? undefined : arguments[4]);
        } else {
          throw new Error("Obsolete method call with unknown args: Use GltMatch(GetLastTransactionResponse gltResponse, string posRefId)");
        }
      }

      this._log.info("GLT CHECK: PosRefId: ".concat(posRefId, "->").concat(gltResponse.GetPosRefId()));

      var gltBankDateTimeStr = gltResponse.GetBankDateTimeString(); // ddMMyyyyHHmmss

      var gltBankDateTime = new Date("".concat(gltBankDateTimeStr.substr(4, 4), "-").concat(gltBankDateTimeStr.substr(2, 2), "-").concat(gltBankDateTimeStr.substr(0, 2), " ").concat(gltBankDateTimeStr.substr(8, 2), ":").concat(gltBankDateTimeStr.substr(10, 2), ":").concat(gltBankDateTimeStr.substr(12, 2)));
      var compare = parseInt(requestTime) - gltBankDateTime.getTime();

      if (!posRefId == gltResponse.GetPosRefId()) {
        return _Messages__WEBPACK_IMPORTED_MODULE_4__["SuccessState"].Unknown;
      }

      if (gltResponse.GetTxType().toUpperCase() == "PURCHASE" && gltResponse.GetBankNonCashAmount() != expectedAmount && compare > 0) {
        return _Messages__WEBPACK_IMPORTED_MODULE_4__["Message"].SuccessState.Unknown;
      }

      return gltResponse.GetSuccessState();
    }
  }, {
    key: "PrintReceipt",
    value: function PrintReceipt(key, payload) {
      this._send(new _Printing__WEBPACK_IMPORTED_MODULE_21__["PrintingRequest"](key, payload).toMessage());
    }
  }, {
    key: "GetTerminalStatus",
    value: function GetTerminalStatus() {
      this._send(new _TerminalStatus__WEBPACK_IMPORTED_MODULE_22__["TerminalStatusRequest"]().ToMessage());
    } // endregion
    // region Internals for Pairing Flow
    // <summary>
    // Handling the 2nd interaction of the pairing process, i.e. an incoming KeyRequest.
    // </summary>
    // <param name="m">incoming message</param>

  }, {
    key: "_handleKeyRequest",
    value: function _handleKeyRequest(m) {
      this.CurrentPairingFlowState.Message = "Negotiating Pairing...";
      document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
        detail: this.CurrentPairingFlowState
      })); // Use the helper. It takes the incoming request, and generates the secrets and the response.

      var ph = new _PairingHelper__WEBPACK_IMPORTED_MODULE_7__["PairingHelper"]();
      var result = ph.GenerateSecretsAndKeyResponse(new _Pairing__WEBPACK_IMPORTED_MODULE_14__["KeyRequest"](m));
      this._secrets = result.Secrets; // we now have secrets, although pairing is not fully finished yet.

      this._spiMessageStamp.Secrets = this._secrets; // updating our stamp with the secrets so can encrypt messages later.

      this._send(result.KeyResponse.ToMessage()); // send the key_response, i.e. interaction 3 of pairing.

    } // <summary>
    // Handling the 4th interaction of the pairing process i.e. an incoming KeyCheck.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleKeyCheck",
    value: function _handleKeyCheck(m) {
      var keyCheck = new _Pairing__WEBPACK_IMPORTED_MODULE_14__["KeyCheck"](m);
      this.CurrentPairingFlowState.ConfirmationCode = keyCheck.ConfirmationCode;
      this.CurrentPairingFlowState.AwaitingCheckFromEftpos = true;
      this.CurrentPairingFlowState.AwaitingCheckFromPos = true;
      this.CurrentPairingFlowState.Message = "Confirm that the following Code is showing on the Terminal";
      document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
        detail: this.CurrentPairingFlowState
      }));
    } // <summary>
    // Handling the 5th and final interaction of the pairing process, i.e. an incoming PairResponse
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handlePairResponse",
    value: function _handlePairResponse(m) {
      var pairResp = new _Pairing__WEBPACK_IMPORTED_MODULE_14__["PairResponse"](m);
      this.CurrentPairingFlowState.AwaitingCheckFromEftpos = false;

      if (pairResp.Success) {
        if (this.CurrentPairingFlowState.AwaitingCheckFromPos) {
          // Still Waiting for User to say yes on POS
          this._log.info("Got Pair Confirm from Eftpos, but still waiting for use to confirm from POS.");

          this.CurrentPairingFlowState.Message = "Confirm that the following Code is what the EFTPOS showed";
          document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
            detail: this.CurrentPairingFlowState
          }));
        } else {
          this._log.info("Got Pair Confirm from Eftpos, and already had confirm from POS. Now just waiting for first pong.");

          this._onPairingSuccess();
        } // I need to ping/login even if the pos user has not said yes yet, 
        // because otherwise within 5 seconds connectiong will be dropped by eftpos.


        this._startPeriodicPing();
      } else {
        this._onPairingFailed();
      }
    }
  }, {
    key: "_handleDropKeysAdvice",
    value: function _handleDropKeysAdvice(m) {
      this._log.info("Eftpos was Unpaired. I shall unpair from my end as well.");

      this._doUnpair();
    }
  }, {
    key: "_onPairingSuccess",
    value: function _onPairingSuccess() {
      this.CurrentPairingFlowState.Successful = true;
      this.CurrentPairingFlowState.Finished = true;
      this.CurrentPairingFlowState.Message = "Pairing Successful!";
      this.CurrentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnected;
      document.dispatchEvent(new CustomEvent('SecretsChanged', {
        detail: this._secrets
      }));
      document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
        detail: this.CurrentPairingFlowState
      }));
    }
  }, {
    key: "_onPairingFailed",
    value: function _onPairingFailed() {
      this._secrets = null;
      this._spiMessageStamp.Secrets = null;

      this._conn.Disconnect();

      this.CurrentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired;
      this.CurrentPairingFlowState.Message = "Pairing Failed";
      this.CurrentPairingFlowState.Finished = true;
      this.CurrentPairingFlowState.Successful = false;
      this.CurrentPairingFlowState.AwaitingCheckFromPos = false;
      document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
        detail: this.CurrentPairingFlowState
      }));
    }
  }, {
    key: "_doUnpair",
    value: function _doUnpair() {
      this.CurrentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired;

      this._conn.Disconnect();

      this._secrets = null;
      this._spiMessageStamp.Secrets = null;
      document.dispatchEvent(new CustomEvent('SecretsChanged', {
        detail: this._secrets
      }));
    } // <summary>
    // Sometimes the server asks us to roll our secrets.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleKeyRollingRequest",
    value: function _handleKeyRollingRequest(m) {
      // we calculate the new ones...
      var krRes = _KeyRollingHelper__WEBPACK_IMPORTED_MODULE_17__["KeyRollingHelper"].PerformKeyRolling(m, this._secrets);
      this._secrets = krRes.NewSecrets; // and update our secrets with them

      this._spiMessageStamp.Secrets = this._secrets; // and our stamp

      this._send(krRes.KeyRollingConfirmation); // and we tell the server that all is well.


      document.dispatchEvent(new CustomEvent('SecretsChanged', {
        detail: this._secrets
      }));
    } // <summary>
    // The PinPad server will send us this message when a customer signature is reqired.
    // We need to ask the customer to sign the incoming receipt.
    // And then tell the pinpad whether the signature is ok or not.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleSignatureRequired",
    value: function _handleSignatureRequired(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        this._log.info("Received Signature Required but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      }

      this.CurrentTxFlowState.SignatureRequired(new _Purchase__WEBPACK_IMPORTED_MODULE_19__["SignatureRequired"](m), "Ask Customer to Sign the Receipt");
      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // The PinPad server will send us this message when an auth code is required.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleAuthCodeRequired",
    value: function _handleAuthCodeRequired(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        _log.info("Received Auth Code Required but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      }

      var phoneForAuthRequired = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["PhoneForAuthRequired"](m);
      var msg = "Auth Code Required. Call ".concat(phoneForAuthRequired.GetPhoneNumber(), " and quote merchant id ").concat(phoneForAuthRequired.GetMerchantId());
      this.CurrentTxFlowState.PhoneForAuthRequired(phoneForAuthRequired, msg);
      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // The PinPad server will reply to our PurchaseRequest with a PurchaseResponse.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handlePurchaseResponse",
    value: function _handlePurchaseResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        this._log.info("Received Purchase response but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId, "\""));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Purchase Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // The PinPad server will reply to our CashoutOnlyRequest with a CashoutOnlyResponse.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleCashoutOnlyResponse",
    value: function _handleCashoutOnlyResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        this._log.info("Received Cashout Response but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Cashout Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // The PinPad server will reply to our MotoPurchaseRequest with a MotoPurchaseResponse.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleMotoPurchaseResponse",
    value: function _handleMotoPurchaseResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished || !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        this._log.info("Received Moto Response but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Moto Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // The PinPad server will reply to our RefundRequest with a RefundResponse.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleRefundResponse",
    value: function _handleRefundResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished | !this.CurrentTxFlowState.PosRefId == incomingPosRefId) {
        this._log.info("Received Refund response but I was not waiting for this one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Refund Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // TODO: Handle the Settlement Response received from the PinPad
    // </summary>
    // <param name="m"></param>

  }, {
    key: "HandleSettleResponse",
    value: function HandleSettleResponse(m) {
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished) {
        this._log.info("Received Settle response but I was not waiting for one. ".concat(m.DecryptedJson));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Settle Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // Handle the Settlement Enquiry Response received from the PinPad
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleSettlementEnquiryResponse",
    value: function _handleSettlementEnquiryResponse(m) {
      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || this.CurrentTxFlowState.Finished) {
        this._log.info("Received Settlement Enquiry response but I was not waiting for one. ".concat(m.DecryptedJson));

        return;
      } // TH-1A, TH-2A


      this.CurrentTxFlowState.Completed(m.GetSuccessState(), m, "Settlement Enquiry Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this.CurrentTxFlowState
      }));
    } // <summary>
    // Sometimes we receive event type "error" from the server, such as when calling cancel_transaction and there is no transaction in progress.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleErrorEvent",
    value: function _handleErrorEvent(m) {
      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction && !this.CurrentTxFlowState.Finished && this.CurrentTxFlowState.AttemptingToCancel && m.GetError() == "NO_TRANSACTION") {
        // TH-2E
        this._log.info("Was trying to cancel a transaction but there is nothing to cancel. Calling GLT to see what's up");

        this._callGetLastTransaction();
      } else {
        this._log.info("Received Error Event But Don't know what to do with it. ".concat(m.DecryptedJson));
      }
    } // <summary>
    // When the PinPad returns to us what the Last Transaction was.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleGetLastTransactionResponse",
    value: function _handleGetLastTransactionResponse(m) {
      var txState = this.CurrentTxFlowState;

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || txState.Finished) {
        this._log.info("Received glt response but we were not in the middle of a tx. ignoring.");

        return;
      }

      if (!txState.AwaitingGltResponse) {
        this._log.info("received a glt response but we had not asked for one within this transaction. Perhaps leftover from previous one. ignoring.");

        return;
      }

      if (txState.LastGltRequestId != m.Id) {
        this._log.info("received a glt response but the message id does not match the glt request that we sent. strange. ignoring.");

        return;
      } // TH-4 We were in the middle of a transaction.
      // Let's attempt recovery. This is step 4 of Transaction Processing Handling


      this._log.info("Got Last Transaction..");

      txState.GotGltResponse();
      var gtlResponse = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["GetLastTransactionResponse"](m);
      txState.GLTResponsePosRefId = gtlResponse.GetPosRefId();

      if (!gtlResponse.WasRetrievedSuccessfully()) {
        if (gtlResponse.IsStillInProgress(txState.PosRefId)) {
          // TH-4E - Operation In Progress
          if (gtlResponse.IsWaitingForSignatureResponse() && !txState.AwaitingSignatureCheck) {
            this._log.info("Eftpos is waiting for us to send it signature accept/decline, but we were not aware of this. " + "The user can only really decline at this stage as there is no receipt to print for signing.");

            this.CurrentTxFlowState.SignatureRequired(new _Purchase__WEBPACK_IMPORTED_MODULE_19__["SignatureRequired"](txState.PosRefId, m.Id, "MISSING RECEIPT\n DECLINE AND TRY AGAIN."), "Recovered in Signature Required but we don't have receipt. You may Decline then Retry.");
          } else if (gtlResponse.IsWaitingForAuthCode() && !txState.AwaitingPhoneForAuth) {
            this._log.info("Eftpos is waiting for us to send it auth code, but we were not aware of this. " + "We can only cancel the transaction at this stage as we don't have enough information to recover from this.");

            this.CurrentTxFlowState.PhoneForAuthRequired(new _Purchase__WEBPACK_IMPORTED_MODULE_19__["PhoneForAuthRequired"](txState.PosRefId, m.Id, "UNKNOWN", "UNKNOWN"), "Recovered mid Phone-For-Auth but don't have details. You may Cancel then Retry.");
          } else {
            this._log.info("Operation still in progress... stay waiting."); // No need to publish txFlowStateChanged. Can return;


            return;
          }
        } else if (gtlResponse.WasTimeOutOfSyncError()) {
          // Let's not give up based on a TOOS error.
          // Let's log it, and ignore it. 
          this._log.info("Time-Out-Of-Sync error in Get Last Transaction response. Let's ignore it and we'll try again."); // No need to publish txFlowStateChanged. Can return;


          return;
        } else {
          // TH-4X - Unexpected Response when recovering
          this._log.info("Unexpected Response in Get Last Transaction during - Received posRefId:".concat(gtlResponse.GetPosRefId(), " Error:").concat(m.GetError(), ". Ignoring."));

          return;
        }
      } else {
        if (txState.Type == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["TransactionType"].GetLastTransaction) {
          // THIS WAS A PLAIN GET LAST TRANSACTION REQUEST, NOT FOR RECOVERY PURPOSES.
          this._log.info("Retrieved Last Transaction as asked directly by the user.");

          gtlResponse.CopyMerchantReceiptToCustomerReceipt();
          txState.Completed(m.GetSuccessState(), m, "Last Transaction Retrieved");
        } else {
          // TH-4A - Let's try to match the received last transaction against the current transaction
          var successState = this.GltMatch(gtlResponse, txState.PosRefId, txState.AmountCents, txState.RequestTime);

          if (successState == _Messages__WEBPACK_IMPORTED_MODULE_4__["SuccessState"].Unknown) {
            // TH-4N: Didn't Match our transaction. Consider Unknown State.
            this._log.info("Did not match transaction.");

            txState.UnknownCompleted("Failed to recover Transaction Status. Check EFTPOS. ");
          } else {
            // TH-4Y: We Matched, transaction finished, let's update ourselves
            gtlResponse.CopyMerchantReceiptToCustomerReceipt();
            txState.Completed(successState, m, "Transaction Ended.");
          }
        }
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: txState
      }));
    } //When the transaction cancel response is returned.

  }, {
    key: "_handleCancelTransactionResponse",
    value: function _handleCancelTransactionResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;
      var txState = this.CurrentTxFlowState;
      var cancelResponse = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["CancelTransactionResponse"](m);

      if (this.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction || txState.Finished || !txState.PosRefId == incomingPosRefId) {
        if (!cancelResponse.WasTxnPastPointOfNoReturn()) {
          this._log.info("Received Cancel Required but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

          return;
        }
      }

      if (cancelResponse.Success) return;

      this._log.warn("Failed to cancel transaction: reason=" + cancelResponse.GetErrorReason() + ", detail=" + cancelResponse.GetErrorDetail());

      txState.CancelFailed("Failed to cancel transaction: " + cancelResponse.GetErrorDetail() + ". Check EFTPOS.");
      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: txState
      }));
    }
  }, {
    key: "_handleSetPosInfoResponse",
    value: function _handleSetPosInfoResponse(m) {
      var response = new _PosInfo__WEBPACK_IMPORTED_MODULE_15__["SetPosInfoResponse"](m);

      if (response.isSuccess()) {
        this._hasSetInfo = true;

        this._log.info("Setting POS info successful");
      } else {
        this._log.warn("Setting POS info failed: reason=" + response.getErrorReason() + ", detail=" + response.getErrorDetail());
      }
    }
  }, {
    key: "_startTransactionMonitoringThread",
    value: function _startTransactionMonitoringThread() {
      var _this = this;

      var needsPublishing = false;
      var txState = this.CurrentTxFlowState;

      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction && !txState.Finished) {
        var state = txState;

        if (state.AttemptingToCancel && Date.now() > state.CancelAttemptTime + this._maxWaitForCancelTx) {
          // TH-2T - too long since cancel attempt - Consider unknown
          this._log.info("Been too long waiting for transaction to cancel.");

          txState.UnknownCompleted("Waited long enough for Cancel Transaction result. Check EFTPOS. ");
          needsPublishing = true;
        } else if (state.RequestSent && Date.now() > state.LastStateRequestTime + this._checkOnTxFrequency) {
          // TH-1T, TH-4T - It's been a while since we received an update, let's call a GLT
          this._log.info("Checking on our transaction. Last we asked was at ".concat(state.LastStateRequestTime, "..."));

          this._callGetLastTransaction();
        }
      }

      if (needsPublishing) {
        document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
          detail: this.CurrentTxFlowState
        }));
      }

      setTimeout(function () {
        return _this._startTransactionMonitoringThread();
      }, this._txMonitorCheckFrequency);
    }
  }, {
    key: "PrintingResponse",
    value: function PrintingResponse(m) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "TerminalStatusResponse",
    value: function TerminalStatusResponse(m) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "BatteryLevelChanged",
    value: function BatteryLevelChanged(m) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "_handlePrintingResponse",
    value: function _handlePrintingResponse(m) {
      if (typeof this.PrintingResponse === 'function') this.PrintingResponse(m);
    }
  }, {
    key: "_handleTerminalStatusResponse",
    value: function _handleTerminalStatusResponse(m) {
      if (typeof this.TerminalStatusResponse === 'function') this.TerminalStatusResponse(m);
    }
  }, {
    key: "_handleBatteryLevelChanged",
    value: function _handleBatteryLevelChanged(m) {
      if (typeof this.BatteryLevelChanged === 'function') this.BatteryLevelChanged(m);
    } // endregion
    // region Internals for Connection Management

  }, {
    key: "_resetConn",
    value: function _resetConn() {
      var _this2 = this;

      // Setup the Connection
      this._conn = new _Connection__WEBPACK_IMPORTED_MODULE_8__["Connection"]();

      if (this._isUsingHttps() || this._forceSecureWebSockets) {
        this._log.info("Secure connection detected.");

        this._eftposAddress = this._eftposAddress.replace("ws://", "wss://");
      }

      this._conn.Address = this._eftposAddress; // Register our Event Handlers

      document.addEventListener('ConnectionStatusChanged', function (e) {
        return _this2._onSpiConnectionStatusChanged(e.detail);
      });
      document.addEventListener('MessageReceived', function (e) {
        return _this2._onSpiMessageReceived(e.detail);
      });
      document.addEventListener('ErrorReceived', function (e) {
        return _this2._onWsErrorReceived(e.detail);
      });
    } // <summary>
    // This method will be called when the connection status changes.
    // You are encouraged to display a PinPad Connection Indicator on the POS screen.
    // </summary>
    // <param name="state"></param>

  }, {
    key: "_onSpiConnectionStatusChanged",
    value: function _onSpiConnectionStatusChanged(state) {
      var _this3 = this;

      switch (state.ConnectionState) {
        case _Connection__WEBPACK_IMPORTED_MODULE_8__["ConnectionState"].Connecting:
          this._log.info("I'm Connecting to the Eftpos at ".concat(this._eftposAddress, "..."));

          break;

        case _Connection__WEBPACK_IMPORTED_MODULE_8__["ConnectionState"].Connected:
          this._retriesSinceLastDeviceAddressResolution = 0;

          if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Pairing && this.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
            this.CurrentPairingFlowState.Message = "Requesting to Pair...";
            document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
              detail: this.CurrentPairingFlowState
            }));
            var pr = _PairingHelper__WEBPACK_IMPORTED_MODULE_7__["PairingHelper"].NewPairRequest();

            this._send(pr.ToMessage());
          } else {
            this._log.info("I'm Connected to ".concat(this._eftposAddress, "..."));

            this._spiMessageStamp.Secrets = this._secrets;

            this._startPeriodicPing();
          }

          break;

        case _Connection__WEBPACK_IMPORTED_MODULE_8__["ConnectionState"].Disconnected:
          // Let's reset some lifecycle related to connection state, ready for next connection
          this._log.info("I'm disconnected from ".concat(this._eftposAddress, "..."));

          this._mostRecentPingSent = null;
          this._mostRecentPongReceived = null;
          this._missedPongsCount = 0;

          this._stopPeriodicPing();

          if (this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
            this.CurrentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnecting;

            if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction && !this.CurrentTxFlowState.Finished) {
              // we're in the middle of a transaction, just so you know!
              // TH-1D
              this._log.info("Lost connection in the middle of a transaction...");
            }

            if (this._conn == null) return; // This means the instance has been disposed. Aborting.

            if (this._autoAddressResolutionEnabled) {
              if (this._retriesSinceLastDeviceAddressResolution >= this._retriesBeforeResolvingDeviceAddress) {
                this._autoResolveEftposAddress();

                this._retriesSinceLastDeviceAddressResolution = 0;
              } else {
                this._retriesSinceLastDeviceAddressResolution += 1;
              }
            }

            this._log.info("Will try to reconnect in ".concat(this._sleepBeforeReconnectMs, "ms..."));

            setTimeout(function () {
              if (_this3.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
                // This is non-blocking
                if (_this3._conn) {
                  _this3._conn.Connect();
                }
              }
            }, this._sleepBeforeReconnectMs);
          } else if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Pairing) {
            if (this.CurrentPairingFlowState.Finished) return;

            if (this._retriesSinceLastPairing >= this._retriesBeforePairing) {
              this._retriesSinceLastPairing = 0;

              this._log.warn("Lost Connection during pairing.");

              this._onPairingFailed();

              document.dispatchEvent(new CustomEvent('PairingFlowStateChanged', {
                detail: this.CurrentPairingFlowState
              }));
              return;
            } else {
              this._log.info("Will try to re-pair in ".concat(this._sleepBeforeReconnectMs, "ms ..."));

              setTimeout(function () {
                if (_this3.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnected) {
                  // This is non-blocking
                  if (_this3._conn) _this3._conn.Connect();
                }

                _this3._retriesSinceLastPairing += 1;
              }, this._sleepBeforeReconnectMs);
            }
          }

          break;

        default:
          throw new Error('Unknown state: ' + state);
      }
    } // <summary>
    // This is an important piece of the puzzle. It's a background thread that periodically
    // sends Pings to the server. If it doesn't receive Pongs, it considers the connection as broken
    // so it disconnects. 
    // </summary>

  }, {
    key: "_startPeriodicPing",
    value: function _startPeriodicPing() {
      var _this4 = this;

      this._stopPeriodicPing();

      this._periodicPingThread = setInterval(function () {
        return _this4._periodicPing();
      }, this._pingFrequency);

      this._periodicPing();
    }
  }, {
    key: "_periodicPing",
    value: function _periodicPing() {
      var _this5 = this;

      // while i'm still connected AND paired...
      if (this._conn.Connected && this._secrets != null) {
        this._doPing();

        setTimeout(function () {
          if (_this5._mostRecentPingSent != null && (_this5._mostRecentPongReceived == null || _this5._mostRecentPongReceived.Id != _this5._mostRecentPingSent.Id)) {
            _this5._missedPongsCount += 1;

            _this5._log.info("Eftpos didn't reply to my Ping. Missed Count: ".concat(_this5._missedPongsCount, "/").concat(_this5._missedPongsToDisconnect, "."));

            if (_this5._missedPongsCount < _this5._missedPongsToDisconnect) {
              _this5._log.info("Trying another ping...");

              _this5._startPeriodicPing();

              return;
            } // This means that we have not received a pong for our most recent ping.
            // We consider this connection as broken.
            // Let's Disconnect.


            _this5._log.info("Disconnecting...");

            _this5._conn.Disconnect();

            _this5._stopPeriodicPing();
          }

          _this5._missedPongsCount = 0;
        }, this._pongTimeout);
      } else {
        this._stopPeriodicPing();

        this._log.info("Cancelling periodic ping as were disconnected or not paired");
      }
    } // <summary>
    // We call this ourselves as soon as we're ready to transact with the PinPad after a connection is established.
    // This function is effectively called after we received the first Login Response from the PinPad.
    // </summary>

  }, {
    key: "_onReadyToTransact",
    value: function _onReadyToTransact() {
      this._log.info("On Ready To Transact!"); // So, we have just made a connection, pinged and logged in successfully.


      this.CurrentStatus = _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].PairedConnected;

      if (this.CurrentFlow == _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiFlow"].Transaction && !this.CurrentTxFlowState.Finished) {
        if (this.CurrentTxFlowState.RequestSent) {
          // TH-3A - We've just reconnected and were in the middle of Tx.
          // Let's get the last transaction to check what we might have missed out on.
          this._callGetLastTransaction();
        } else {
          // TH-3AR - We had not even sent the request yet. Let's do that now
          this._send(this.CurrentTxFlowState.Request);

          this.CurrentTxFlowState.Sent("Sending Request Now...");
          document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
            detail: this.CurrentTxFlowState
          }));
        }
      } else {
        if (!this._hasSetInfo) {
          this._callSetPosInfo();
        } // let's also tell the eftpos our latest table configuration.


        if (this._spiPat) {
          this._spiPat.PushPayAtTableConfig();
        }
      }
    }
  }, {
    key: "_callSetPosInfo",
    value: function _callSetPosInfo() {
      var setPosInfoRequest = new _PosInfo__WEBPACK_IMPORTED_MODULE_15__["SetPosInfoRequest"](this._posVersion, this._posVendorId, "js", SPI_VERSION, _PosInfo__WEBPACK_IMPORTED_MODULE_15__["DeviceInfo"].GetAppDeviceInfo());

      this._send(setPosInfoRequest.toMessage());
    } // <summary>
    // When we disconnect, we should also stop the periodic ping.
    // </summary>

  }, {
    key: "_stopPeriodicPing",
    value: function _stopPeriodicPing() {
      if (this._periodicPingThread) {
        // If we were already set up, clean up before restarting.
        clearInterval(this._periodicPingThread);
        this._periodicPingThread = null;
      }
    } // Send a Ping to the Server

  }, {
    key: "_doPing",
    value: function _doPing() {
      var ping = _PingHelper__WEBPACK_IMPORTED_MODULE_18__["PingHelper"].GeneratePingRequest();
      this._mostRecentPingSent = ping;

      this._send(ping);

      this._mostRecentPingSentTime = Date.now();
    } // <summary>
    // Received a Pong from the server
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleIncomingPong",
    value: function _handleIncomingPong(m) {
      // We need to maintain this time delta otherwise the server will not accept our messages.
      this._spiMessageStamp.ServerTimeDelta = m.GetServerTimeDelta();

      if (this._mostRecentPongReceived == null) {
        // First pong received after a connection, and after the pairing process is fully finalised.
        if (this.CurrentStatus != _SpiModels__WEBPACK_IMPORTED_MODULE_5__["SpiStatus"].Unpaired) {
          this._log.info("First pong of connection and in paired state.");

          this._onReadyToTransact();
        } else {
          this._log.info("First pong of connection but pairing process not finalised yet.");
        }
      }

      this._mostRecentPongReceived = m;

      this._log.debug("PongLatency:".concat(Date.now() - this._mostRecentPingSentTime));
    } // <summary>
    // The server will also send us pings. We need to reply with a pong so it doesn't disconnect us.
    // </summary>
    // <param name="m"></param>

  }, {
    key: "_handleIncomingPing",
    value: function _handleIncomingPing(m) {
      var pong = _PingHelper__WEBPACK_IMPORTED_MODULE_18__["PongHelper"].GeneratePongRessponse(m);

      this._send(pong);
    } // <summary>
    // Ask the PinPad to tell us what the Most Recent Transaction was
    // </summary>

  }, {
    key: "_callGetLastTransaction",
    value: function _callGetLastTransaction() {
      var gltRequestMsg = new _Purchase__WEBPACK_IMPORTED_MODULE_19__["GetLastTransactionRequest"]().ToMessage();
      this.CurrentTxFlowState.CallingGlt(gltRequestMsg.Id);

      this._send(gltRequestMsg);
    } // <summary>
    // This method will be called whenever we receive a message from the Connection
    // </summary>
    // <param name="messageJson"></param>

  }, {
    key: "_onSpiMessageReceived",
    value: function _onSpiMessageReceived(messageJson) {
      // First we parse the incoming message
      var m = _Messages__WEBPACK_IMPORTED_MODULE_4__["Message"].FromJson(messageJson.Message, this._secrets);

      this._log.info("Received:" + m.DecryptedJson);

      if (_SpiPreauth__WEBPACK_IMPORTED_MODULE_11__["SpiPreauth"].IsPreauthEvent(m.EventName)) {
        this._spiPreauth._handlePreauthMessage(m);

        return;
      } // And then we switch on the event type.


      switch (m.EventName) {
        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].KeyRequest:
          this._handleKeyRequest(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].KeyCheck:
          this._handleKeyCheck(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PairResponse:
          this._handlePairResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].DropKeysAdvice:
          this._handleDropKeysAdvice(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PurchaseResponse:
          this._handlePurchaseResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].RefundResponse:
          this._handleRefundResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].CashoutOnlyResponse:
          this._handleCashoutOnlyResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].MotoPurchaseResponse:
          this._handleMotoPurchaseResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].SignatureRequired:
          this._handleSignatureRequired(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].AuthCodeRequired:
          this._handleAuthCodeRequired(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].GetLastTransactionResponse:
          this._handleGetLastTransactionResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].SettleResponse:
          this.HandleSettleResponse(m);
          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].SettlementEnquiryResponse:
          this._handleSettlementEnquiryResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].Ping:
          this._handleIncomingPing(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].Pong:
          this._handleIncomingPong(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].KeyRollRequest:
          this._handleKeyRollingRequest(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].CancelTransactionResponse:
          this._handleCancelTransactionResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].SetPosInfoResponse:
          this._handleSetPosInfoResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PayAtTableGetTableConfig:
          if (this._spiPat == null) {
            this._send(_PayAtTable__WEBPACK_IMPORTED_MODULE_10__["PayAtTableConfig"].FeatureDisableMessage(_RequestIdHelper__WEBPACK_IMPORTED_MODULE_6__["RequestIdHelper"].Id("patconf")));

            break;
          }

          this._spiPat._handleGetTableConfig(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PayAtTableGetBillDetails:
          this._spiPat._handleGetBillDetailsRequest(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PayAtTableBillPayment:
          this._spiPat._handleBillPaymentAdvice(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PayAtTableGetOpenTables:
          this._spiPat._handleGetOpenTablesRequest(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PayAtTableBillPaymentFlowEnded:
          this._spiPat._handleBillPaymentFlowEnded(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].PrintingResponse:
          this._handlePrintingResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].TerminalStatusResponse:
          this._handleTerminalStatusResponse(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].BatteryLevelChanged:
          this._handleBatteryLevelChanged(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].Error:
          this._handleErrorEvent(m);

          break;

        case _Messages__WEBPACK_IMPORTED_MODULE_4__["Events"].InvalidHmacSignature:
          this._log.info("I could not verify message from Eftpos. You might have to Un-pair Eftpos and then reconnect.");

          break;

        default:
          this._log.info("I don't Understand Event: ".concat(m.EventName, ", ").concat(m.Data, ". Perhaps I have not implemented it yet."));

          break;
      }
    }
  }, {
    key: "_onWsErrorReceived",
    value: function _onWsErrorReceived(error) {
      this._log.warn("Received WS Error", error.Message);
    }
  }, {
    key: "_send",
    value: function _send(message) {
      var json = message.ToJson(this._spiMessageStamp);

      if (this._conn.Connected) {
        this._log.info("Sending: " + message.DecryptedJson);

        this._conn.Send(json);

        return true;
      } else {
        this._log.info("Asked to send, but not connected: " + message.DecryptedJson);

        return false;
      }
    }
  }, {
    key: "_isPosIdValid",
    value: function _isPosIdValid(posId) {
      if (!posId) {
        this._log.warn("Pos Id cannot be null or empty");

        return false;
      }

      if (posId.length > 16) {
        this._log.warn("Pos Id is greater than 16 characters");

        return false;
      }

      if (!posId.match(this._regexItemsForPosId)) {
        this._log.warn("Pos Id cannot include special characters");

        return false;
      }

      return true;
    }
  }, {
    key: "_isEftposAddressValid",
    value: function _isEftposAddressValid(eftposAddress) {
      if (!eftposAddress) {
        this._log.warn("The Eftpos address cannot be null or empty");

        return false;
      }

      var sanitisedEftposAddress = eftposAddress.replace(/^w[s]?s:\/\//, ""); // The eftposAddress may be an IP address or if autoAddressResolutionEnabled is true, a FQDN

      if (!this._autoAddressResolutionEnabled && !sanitisedEftposAddress.match(this._regexItemsForEftposAddress) || this._autoAddressResolutionEnabled && !sanitisedEftposAddress.match(this._regexItemsForFqdnEftposAddress)) {
        this._log.warn("The Eftpos address is not in the right format");

        return false;
      }

      return true;
    }
  }, {
    key: "HasSerialNumberChanged",
    value: function HasSerialNumberChanged(updatedSerialNumber) {
      return this._serialNumber != updatedSerialNumber;
    }
  }, {
    key: "HasEftposAddressChanged",
    value: function HasEftposAddressChanged(updatedEftposAddress) {
      return this._eftposAddress != updatedEftposAddress;
    }
  }, {
    key: "_autoResolveEftposAddress",
    value: function () {
      var _autoResolveEftposAddress2 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1___default()(
      /*#__PURE__*/
      _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
        var isSecureConnection, service, addressResponse, addressResponseJson, protocol;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this._autoAddressResolutionEnabled) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                if (!(!this._serialNumber || !this._deviceApiKey)) {
                  _context.next = 5;
                  break;
                }

                this._log.warn("Missing serialNumber and/or deviceApiKey. Need to set them before for Auto Address to work.");

                return _context.abrupt("return");

              case 5:
                isSecureConnection = this._isSecureConnection();
                service = new _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressService"]();
                _context.prev = 7;
                _context.next = 10;
                return service.RetrieveService(this._serialNumber, this._deviceApiKey, this._acquirerCode, isSecureConnection, this._inTestMode);

              case 10:
                addressResponse = _context.sent;
                _context.next = 13;
                return addressResponse.json();

              case 13:
                addressResponseJson = _context.sent;
                this.CurrentDeviceStatus = Object.assign(new _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressStatus"](isSecureConnection), {
                  ip: addressResponseJson.ip,
                  fqdn: addressResponseJson.fqdn,
                  DeviceAddressResponseCode: addressResponse.status,
                  ResponseStatusDescription: addressResponse.statusText,
                  ResponseMessage: addressResponse.statusText,
                  LastUpdated: addressResponseJson.last_updated
                });
                _context.next = 26;
                break;

              case 17:
                _context.prev = 17;
                _context.t0 = _context["catch"](7);
                this.CurrentDeviceStatus = this.CurrentDeviceStatus || new _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressStatus"](isSecureConnection);
                this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].DEVICE_SERVICE_ERROR;
                this.CurrentDeviceStatus.ResponseStatusDescription = _context.t0;
                this.CurrentDeviceStatus.ResponseMessage = _context.t0;

                this._log.warn(_context.t0.message);

                document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
                  detail: this.CurrentDeviceStatus
                }));
                return _context.abrupt("return");

              case 26:
                if (!(addressResponse.status == _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["HttpStatusCode"].NotFound)) {
                  _context.next = 30;
                  break;
                }

                this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].INVALID_SERIAL_NUMBER;
                document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
                  detail: this.CurrentDeviceStatus
                }));
                return _context.abrupt("return");

              case 30:
                if (!(!addressResponse.ok || !addressResponseJson || !this.CurrentDeviceStatus.Address)) {
                  _context.next = 34;
                  break;
                }

                this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].DEVICE_SERVICE_ERROR;
                document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
                  detail: this.CurrentDeviceStatus
                }));
                return _context.abrupt("return");

              case 34:
                if (this.HasEftposAddressChanged(this.CurrentDeviceStatus.Address)) {
                  _context.next = 38;
                  break;
                }

                this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].ADDRESS_NOT_CHANGED;
                document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
                  detail: this.CurrentDeviceStatus
                }));
                return _context.abrupt("return");

              case 38:
                // update device and connection address
                protocol = isSecureConnection ? "wss" : "ws";
                this._eftposAddress = protocol + "://" + this.CurrentDeviceStatus.Address;
                this._conn.Address = this._eftposAddress;
                this.CurrentDeviceStatus.DeviceAddressResponseCode = _Service_DeviceService__WEBPACK_IMPORTED_MODULE_20__["DeviceAddressResponseCode"].SUCCESS;
                document.dispatchEvent(new CustomEvent('DeviceAddressChanged', {
                  detail: this.CurrentDeviceStatus
                }));

              case 43:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 17]]);
      }));

      function _autoResolveEftposAddress() {
        return _autoResolveEftposAddress2.apply(this, arguments);
      }

      return _autoResolveEftposAddress;
    }()
  }, {
    key: "_isUsingHttps",
    value: function _isUsingHttps() {
      return 'https:' == document.location.protocol ? true : false;
    } // determine whether to use wss or not

  }, {
    key: "_isSecureConnection",
    value: function _isSecureConnection() {
      return this._isUsingHttps() || this._forceSecureWebSockets;
    }
  }], [{
    key: "GetVersion",
    value: function GetVersion() {
      return SPI_VERSION;
    }
  }]);

  return Spi;
}();



/***/ }),

/***/ "./src/SpiModels.js":
/*!**************************!*\
  !*** ./src/SpiModels.js ***!
  \**************************/
/*! exports provided: SpiStatus, SpiFlow, PairingFlowState, TransactionType, InitiateTxResult, MidTxResult, TransactionFlowState, SubmitAuthCodeResult, SpiConfig, TransactionOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpiStatus", function() { return SpiStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpiFlow", function() { return SpiFlow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PairingFlowState", function() { return PairingFlowState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionType", function() { return TransactionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InitiateTxResult", function() { return InitiateTxResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MidTxResult", function() { return MidTxResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionFlowState", function() { return TransactionFlowState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubmitAuthCodeResult", function() { return SubmitAuthCodeResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpiConfig", function() { return SpiConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionOptions", function() { return TransactionOptions; });
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");


 // <summary>
// Represents the 3 Pairing statuses that the Spi instanxce can be in.
// </summary>

var SpiStatus = {
  // <summary>
  // Paired and Connected
  // </summary>
  PairedConnected: 'PairedConnected',
  // <summary>
  // Paired but trying to establish a connection 
  // </summary>
  PairedConnecting: 'PairedConnecting',
  // <summary>
  // Unpaired
  // </summary>
  Unpaired: 'Unpaired'
}; // <summary>
// The Spi instance can be in one of these flows at any point in time.
// </summary>

var SpiFlow = {
  // <summary>
  // Currently going through the Pairing Process Flow.
  // Happens during the Unpaired SpiStatus.
  // </summary>
  Pairing: 'Pairing',
  // <summary>
  // Currently going through the transaction Process Flow.
  // Cannot happen in the Unpaired SpiStatus.
  // </summary>
  Transaction: 'Transaction',
  // <summary>
  // Not in any of the other states.
  // </summary>
  Idle: 'Idle'
}; // <summary>
// Represents the Pairing Flow State during the pairing process 
// </summary>

var PairingFlowState = function PairingFlowState(state) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, PairingFlowState);

  // <summary>
  // Some text that can be displayed in the Pairing Process Screen
  // that indicates what the pairing process is up to.
  // </summary>
  this.Message = null; // <summary>
  // When true, it means that the EFTPOS is shoing the confirmation code,
  // and your user needs to press YES or NO on the EFTPOS.
  // </summary>

  this.AwaitingCheckFromEftpos = null; // <summary>
  // When true, you need to display the YES/NO buttons on you pairing screen
  // for your user to confirm the code.
  // </summary>

  this.AwaitingCheckFromPos = null; // <summary>
  // This is the confirmation code for the pairing process.
  // </summary>

  this.ConfirmationCode = null; // <summary>
  // Indicates whether the Pairing Flow has finished its job.
  // </summary>

  this.Finished = null; // <summary>
  // Indicates whether pairing was successful or not.
  // </summary>

  this.Successful = null;

  if (state) {
    Object.assign(this, state);
  }
};
var TransactionType = {
  Purchase: 'Purchase',
  Refund: 'Refund',
  CashoutOnly: 'CashoutOnly',
  MOTO: 'MOTO',
  Settle: 'Settle',
  SettlementEnquiry: 'SettlementEnquiry',
  GetLastTransaction: 'GetLastTransaction',
  Preauth: 'Preauth',
  AccountVerify: 'AccountVerify'
}; // <summary>
// Used as a return in the InitiateTx methods to signify whether 
// the transaction was initiated or not, and a reason to go with it.
// </summary>

var InitiateTxResult = function InitiateTxResult(initiated, message) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, InitiateTxResult);

  // <summary>
  // Whether the tx was initiated.
  // When true, you can expect updated to your registered callback.
  // When false, you can retry calling the InitiateX method.
  // </summary>
  this.Initiated = initiated; // <summary>
  // Text that gives reason for the Initiated flag, especially in case of false. 
  // </summary>

  this.Message = message;
}; // <summary>
// Used as a return in calls mid transaction to let you know
// whether the call was valid or not.
// These attributes work for COM interop.
// </summary>

var MidTxResult = // <summary>
// This default stucture works for COM interop.
// </summary>
function MidTxResult(valid, message) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, MidTxResult);

  this.Valid = valid;
  this.Message = message;
}; // <summary>
// Represents the State during a TransactionFlow
// </summary>

var TransactionFlowState =
/*#__PURE__*/
function () {
  function TransactionFlowState(posRefId, type, amountCents, message, msg) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, TransactionFlowState);

    // <summary>
    //  The id given to this transaction
    // </summary>
    this.PosRefId = posRefId;
    this.Id = posRefId; // obsolete, but let's maintain it for now, to mean same as PosRefId.
    // <summary>
    // Purchase/Refund/Settle/...
    // </summary>

    this.Type = type; // <summary>
    // A text message to display on your Transaction Flow Screen
    // </summary>

    this.DisplayMessage = msg; // <summary>
    // Amount in cents for this transaction
    // </summary>

    this.AmountCents = amountCents; // <summary>
    // Whther the request has been sent to the EFTPOS yet or not.
    // In the PairedConnecting state, the transaction is initiated
    // but the request is only sent once the connection is recovered.
    // </summary>

    this.RequestSent = false; // <summary>
    // The time when the request was sent to the EFTPOS.
    // </summary>

    this.RequestTime = null; // <summary>
    // The time when we last asked for an update, including the original request at first
    // </summary>

    this.LastStateRequestTime = null; // <summary>
    // The id of the last glt request message that was sent. used to match with the response.
    // </summary>

    this.LastGltRequestId = null; // <summary>
    // Whether we're currently attempting to Cancel the transaction.
    // </summary>

    this.AttemptingToCancel = null; // <summary>
    // When this flag is on, you need to display the dignature accept/decline buttons in your 
    // transaction flow screen.
    // </summary>

    this.AwaitingSignatureCheck = false; // <summary>
    // When this flag is on, you need to show your user the phone number to call to get the authorisation code.
    // Then you need to provide your user means to enter that given code and submit it via SubmitAuthCode().
    // </summary>

    this.AwaitingPhoneForAuth = null; // <summary>
    // Whether this transaction flow is over or not.
    // </summary>

    this.Finished = false; // <summary>
    // The success state of this transaction. Starts off as Unknown.
    // When finished, can be Success, Failed OR Unknown.
    // </summary>

    this.Success = _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Unknown; // <summary>
    // The response at the end of the transaction. 
    // Might not be present in all edge cases.
    // You can then turn this Message into the appropriate structure,
    // such as PurchaseResponse, RefundResponse, etc
    // </summary>

    this.Response = null; // <summary>
    // The message the we received from EFTPOS that told us that signature is required.
    // </summary>

    this.SignatureRequiredMessage = null; // <summary>
    // The message the we received from EFTPOS that told us that Phone For Auth is required.
    // </summary>

    this.PhoneForAuthRequiredMessage = null; // <summary>
    // The time when the cancel attempt was made.
    // </summary>

    this.CancelAttemptTime = null; // <summary>
    // The request message that we are sending/sent to the server.
    // </summary>

    this.Request = message; // <summary>
    // Whether we're currently waiting for a Get Last Transaction Response to get an update. 
    // </summary>

    this.AwaitingGltResponse = null;
    this.GLTResponsePosRefId = null;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(TransactionFlowState, [{
    key: "Sent",
    value: function Sent(msg) {
      this.RequestSent = true;
      this.RequestTime = Date.now();
      this.LastStateRequestTime = Date.now();
      this.DisplayMessage = msg;
    }
  }, {
    key: "Cancelling",
    value: function Cancelling(msg) {
      this.AttemptingToCancel = true;
      this.CancelAttemptTime = Date.now();
      this.DisplayMessage = msg;
    }
  }, {
    key: "CancelFailed",
    value: function CancelFailed(msg) {
      this.AttemptingToCancel = false;
      this.DisplayMessage = msg;
    }
  }, {
    key: "CallingGlt",
    value: function CallingGlt(gltRequestId) {
      this.AwaitingGltResponse = true;
      this.LastStateRequestTime = Date.now();
      this.LastGltRequestId = gltRequestId;
    }
  }, {
    key: "GotGltResponse",
    value: function GotGltResponse() {
      this.AwaitingGltResponse = false;
    }
  }, {
    key: "Failed",
    value: function Failed(response, msg) {
      this.Success = _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Failed;
      this.Finished = true;
      this.Response = response;
      this.DisplayMessage = msg;
    }
  }, {
    key: "SignatureRequired",
    value: function SignatureRequired(spiMessage, msg) {
      this.SignatureRequiredMessage = spiMessage;
      this.AwaitingSignatureCheck = true;
      this.DisplayMessage = msg;
    }
  }, {
    key: "SignatureResponded",
    value: function SignatureResponded(msg) {
      this.AwaitingSignatureCheck = false;
      this.DisplayMessage = msg;
    }
  }, {
    key: "PhoneForAuthRequired",
    value: function PhoneForAuthRequired(spiMessage, msg) {
      this.PhoneForAuthRequiredMessage = spiMessage;
      this.AwaitingPhoneForAuth = true;
      this.DisplayMessage = msg;
    }
  }, {
    key: "AuthCodeSent",
    value: function AuthCodeSent(msg) {
      this.AwaitingPhoneForAuth = false;
      this.DisplayMessage = msg;
    }
  }, {
    key: "Completed",
    value: function Completed(state, response, msg) {
      this.Success = state;
      this.Response = response;
      this.Finished = true;
      this.AttemptingToCancel = false;
      this.AwaitingGltResponse = false;
      this.AwaitingSignatureCheck = false;
      this.AwaitingPhoneForAuth = false;
      this.DisplayMessage = msg;
    }
  }, {
    key: "UnknownCompleted",
    value: function UnknownCompleted(msg) {
      this.Success = _Messages__WEBPACK_IMPORTED_MODULE_2__["SuccessState"].Unknown;
      this.Response = null;
      this.Finished = true;
      this.AttemptingToCancel = false;
      this.AwaitingGltResponse = false;
      this.AwaitingSignatureCheck = false;
      this.AwaitingPhoneForAuth = false;
      this.DisplayMessage = msg;
    }
  }]);

  return TransactionFlowState;
}(); // <summary>
// Used as a return in the SubmitAuthCode method to signify whether Code is valid
// </summary>

var SubmitAuthCodeResult = function SubmitAuthCodeResult(validFormat, message) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SubmitAuthCodeResult);

  this.ValidFormat = validFormat; // <summary>
  // Text that gives reason for Invalidity
  // </summary>

  this.Message = message;
};
var SpiConfig =
/*#__PURE__*/
function () {
  function SpiConfig() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SpiConfig);

    this.PrintMerchantCopy = false;
    this.PromptForCustomerCopyOnEftpos = false;
    this.SignatureFlowOnEftpos = false;
    this.EnabledPrintMerchantCopy = false;
    this.EnabledPromptForCustomerCopyOnEftpos = false;
    this.EnabledSignatureFlowOnEftpos = false;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(SpiConfig, [{
    key: "AddReceiptConfig",
    value: function AddReceiptConfig(messageData) {
      if (this.PromptForCustomerCopyOnEftpos && this.EnabledPromptForCustomerCopyOnEftpos) {
        messageData.prompt_for_customer_copy = this.PromptForCustomerCopyOnEftpos;
      }

      if (this.SignatureFlowOnEftpos && this.EnabledSignatureFlowOnEftpos) {
        messageData.print_for_signature_required_transactions = this.SignatureFlowOnEftpos;
      }

      if (this.PrintMerchantCopy && this.EnabledPrintMerchantCopy) {
        messageData.print_merchant_copy = this.PrintMerchantCopy;
      }

      return messageData;
    }
  }, {
    key: "ToString",
    value: function ToString() {
      return "PromptForCustomerCopyOnEftpos:".concat(this.PromptForCustomerCopyOnEftpos, " SignatureFlowOnEftpos:").concat(this.SignatureFlowOnEftpos, " PrintMerchantCopy: ").concat(this.PrintMerchantCopy);
    }
  }]);

  return SpiConfig;
}();
var TransactionOptions =
/*#__PURE__*/
function () {
  function TransactionOptions() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, TransactionOptions);

    this._customerReceiptHeader = "";
    this._customerReceiptFooter = "";
    this._merchantReceiptHeader = "";
    this._merchantReceiptFooter = "";
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(TransactionOptions, [{
    key: "SetCustomerReceiptHeader",
    value: function SetCustomerReceiptHeader(customerReceiptHeader) {
      this._customerReceiptHeader = customerReceiptHeader;
    }
  }, {
    key: "SetCustomerReceiptFooter",
    value: function SetCustomerReceiptFooter(customerReceiptFooter) {
      this._customerReceiptFooter = customerReceiptFooter;
    }
  }, {
    key: "SetMerchantReceiptHeader",
    value: function SetMerchantReceiptHeader(merchantReceiptHeader) {
      this._merchantReceiptHeader = merchantReceiptHeader;
    }
  }, {
    key: "SetMerchantReceiptFooter",
    value: function SetMerchantReceiptFooter(merchantReceiptFooter) {
      this._merchantReceiptFooter = merchantReceiptFooter;
    }
  }, {
    key: "AddOptions",
    value: function AddOptions(messageData) {
      messageData.customer_receipt_header = this._customerReceiptHeader;
      messageData.customer_receipt_footer = this._customerReceiptFooter;
      messageData.merchant_receipt_header = this._merchantReceiptHeader;
      messageData.merchant_receipt_footer = this._merchantReceiptFooter;
      return messageData;
    }
  }]);

  return TransactionOptions;
}();

/***/ }),

/***/ "./src/SpiPayAtTable.js":
/*!******************************!*\
  !*** ./src/SpiPayAtTable.js ***!
  \******************************/
/*! exports provided: SpiPayAtTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpiPayAtTable", function() { return SpiPayAtTable; });
/* harmony import */ var _babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/readOnlyError */ "./node_modules/@babel/runtime/helpers/readOnlyError.js");
/* harmony import */ var _babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");
/* harmony import */ var _PayAtTable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PayAtTable */ "./src/PayAtTable.js");





var SpiPayAtTable =
/*#__PURE__*/
function () {
  function SpiPayAtTable(spi) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SpiPayAtTable);

    this._spi = spi;
    this._log = console;
    this.Config = new _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["PayAtTableConfig"]();
  } // <summary>
  // This delegate will be called when the Eftpos needs to know the current state of a bill for a table. 
  // <para />
  // Parameters:<para />
  // billId - The unique identifier of the bill. If empty, it means that the PayAtTable flow on the Eftpos is just starting, and the lookup is by tableId.<para />
  // tableId - The identifier of the table that the bill is for. <para />
  // operatorId - The id of the operator entered on the eftpos. <para />
  // <para />
  // Return:<para />
  // You need to return the current state of the bill.
  // </summary>


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(SpiPayAtTable, [{
    key: "GetBillStatus",
    value: function GetBillStatus(billId, tableId, operatorId, paymentFlowStarted) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    } // Abstract method, must implement in POS system

  }, {
    key: "BillPaymentReceived",
    value: function BillPaymentReceived(billPayment, updatedBillData) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "GetOpenTables",
    value: function GetOpenTables(operatorId) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "BillPaymentFlowEnded",
    value: function BillPaymentFlowEnded(message) {
      throw new Error('Method not implemented. Please overwrite this method in your POS');
    }
  }, {
    key: "PushPayAtTableConfig",
    value: function PushPayAtTableConfig() {
      this._spi._send(this.Config.ToMessage(_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("patconf")));
    }
  }, {
    key: "_handleGetBillDetailsRequest",
    value: function _handleGetBillDetailsRequest(m) {
      var _this = this;

      var operatorId = m.Data["operator_id"];
      var tableId = m.Data["table_id"];
      var paymentFlowStarted = m.Data["payment_flow_started"]; // Ask POS for Bill Details for this tableId, inluding encoded PaymentData

      return Promise.resolve(this.GetBillStatus("", tableId, operatorId, paymentFlowStarted)).then(function (billStatus) {
        billStatus.TableId = tableId;

        if (billStatus.TotalAmount <= 0) {
          _this._log.info("Table has 0 total amount. not sending it to eftpos.");

          billStatus.Result = _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["BillRetrievalResult"].INVALID_TABLE_ID;
        }

        _this._spi._send(billStatus.ToMessage(m.Id));
      });
    }
  }, {
    key: "_handleBillPaymentAdvice",
    value: function _handleBillPaymentAdvice(m) {
      var _this2 = this;

      var billPayment = new _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["BillPayment"](m); // Ask POS for Bill Details, inluding encoded PaymentData

      return Promise.resolve(this.GetBillStatus(billPayment.BillId, billPayment.TableId, billPayment.OperatorId, billPayment.PaymentFlowStarted)).then(function (existingBillStatus) {
        if (existingBillStatus.Result != _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["BillRetrievalResult"].SUCCESS) {
          _this2._log.warn("Could not retrieve Bill Status for Payment Advice. Sending Error to Eftpos.");

          _this2._spi._send(existingBillStatus.ToMessage(m.Id));
        }

        var existingPaymentHistory = existingBillStatus.getBillPaymentHistory();
        var foundExistingEntry = existingPaymentHistory.find(function (phe) {
          return phe.GetTerminalRefId() == billPayment.PurchaseResponse.GetTerminalReferenceId();
        });

        if (foundExistingEntry) {
          // We have already processed this payment.
          // perhaps Eftpos did get our acknowledgement.
          // Let's update Eftpos.
          _this2._log.warn("Had already received this bill_paymemnt advice from eftpos. Ignoring.");

          _this2._spi._send(existingBillStatus.ToMessage(m.Id));

          return;
        } // Let's add the new entry to the history


        var updatedHistoryEntries = existingPaymentHistory;
        updatedHistoryEntries.push(new _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["PaymentHistoryEntry"](billPayment.PaymentType.toLowerCase(), billPayment.PurchaseResponse.ToPaymentSummary()));
        var updatedBillData = _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["BillStatusResponse"].ToBillData(updatedHistoryEntries); // Advise POS of new payment against this bill, and the updated BillData to Save.

        Promise.resolve(_this2.BillPaymentReceived(billPayment, updatedBillData)).then(function (updatedBillStatus) {
          // Just in case client forgot to set these:
          updatedBillStatus.BillId = billPayment.BillId;
          updatedBillStatus.TableId = billPayment.TableId;

          if (updatedBillStatus.Result != _PayAtTable__WEBPACK_IMPORTED_MODULE_4__["BillRetrievalResult"].SUCCESS) {
            _this2._log.warn("POS Errored when being Advised of Payment. Letting EFTPOS know, and sending existing bill data.");

            updatedBillStatus.BillData = existingBillStatus.BillData;
          } else {
            updatedBillStatus.BillData = updatedBillData;
          }

          _this2._spi._send(updatedBillStatus.ToMessage(m.Id));
        });
      });
    }
  }, {
    key: "_handleGetTableConfig",
    value: function _handleGetTableConfig(m) {
      this._spi._send(this.Config.ToMessage(m.Id));
    }
  }, {
    key: "_handleGetOpenTablesRequest",
    value: function _handleGetOpenTablesRequest(m) {
      var operatorId = m.Data["operator_id"]; // Ask POS for Bill Details for this tableId, inluding encoded PaymentData

      var openTablesResponse = typeof this.GetOpenTables === 'function' ? this.GetOpenTables(operatorId) : null;

      if (!openTablesResponse || !openTablesResponse.TableData || !openTablesResponse.TableData.length) {
        openTablesResponse = (_babel_runtime_helpers_readOnlyError__WEBPACK_IMPORTED_MODULE_0___default()("openTablesResponse"), new GetOpenTablesResponse());

        this._log.info("There is no open table.");
      }

      this._spi._send(openTablesResponse.ToMessage(m.Id));
    }
  }, {
    key: "_handleBillPaymentFlowEnded",
    value: function _handleBillPaymentFlowEnded(m) {
      this.BillPaymentFlowEnded(m);
    }
  }]);

  return SpiPayAtTable;
}();

/***/ }),

/***/ "./src/SpiPreauth.js":
/*!***************************!*\
  !*** ./src/SpiPreauth.js ***!
  \***************************/
/*! exports provided: SpiPreauth */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpiPreauth", function() { return SpiPreauth; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Preauth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Preauth */ "./src/Preauth.js");
/* harmony import */ var _SpiModels__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SpiModels */ "./src/SpiModels.js");




var SpiPreauth =
/*#__PURE__*/
function () {
  function SpiPreauth(spi) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SpiPreauth);

    this._spi = spi;
    this._log = console;
    this.Config = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiConfig"]();
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SpiPreauth, [{
    key: "InitiateAccountVerifyTx",
    value: function InitiateAccountVerifyTx(posRefId) {
      var verifyMsg = new _Preauth__WEBPACK_IMPORTED_MODULE_2__["AccountVerifyRequest"](posRefId).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].AccountVerify, 0, verifyMsg, "Waiting for EFTPOS connection to make account verify request");
      var sentMsg = "Asked EFTPOS to verify account";
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiateOpenTx",
    value: function InitiateOpenTx(posRefId, amountCents) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthOpenRequest"](amountCents, posRefId), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, amountCents, msg, "Waiting for EFTPOS connection to make preauth request for ".concat((amountCents / 100.0).toFixed(2)));
      var sentMsg = "Asked EFTPOS to create preauth for ".concat((amountCents / 100.0).toFixed(2));
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiateTopupTx",
    value: function InitiateTopupTx(posRefId, preauthId, amountCents) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthTopupRequest"](preauthId, amountCents, posRefId), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, amountCents, msg, "Waiting for EFTPOS connection to make preauth topup request for ".concat((amountCents / 100.0).toFixed(2)));
      var sentMsg = "Asked EFTPOS to make preauth topup for ".concat((amountCents / 100.0).toFixed(2));
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiatePartialCancellationTx",
    value: function InitiatePartialCancellationTx(posRefId, preauthId, amountCents) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthPartialCancellationRequest"](preauthId, amountCents, posRefId), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, amountCents, msg, "Waiting for EFTPOS connection to make preauth partial cancellation request for ".concat((amountCents / 100.0).toFixed(2)));
      var sentMsg = "Asked EFTPOS to make preauth partial cancellation for ".concat((amountCents / 100.0).toFixed(2));
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiateExtendTx",
    value: function InitiateExtendTx(posRefId, preauthId) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthExtendRequest"](preauthId, posRefId), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, 0, msg, "Waiting for EFTPOS connection to make preauth Extend request");
      var sentMsg = "Asked EFTPOS to make preauth Extend request";
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiateCompletionTx",
    value: function InitiateCompletionTx(posRefId, preauthId, amountCents) {
      var surchargeAmount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthCompletionRequest"](preauthId, amountCents, posRefId), {
        Config: this.Config,
        SurchargeAmount: surchargeAmount,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, amountCents, msg, "Waiting for EFTPOS connection to make preauth completion request for ".concat((amountCents / 100.0).toFixed(2)));
      var sentMsg = "Asked EFTPOS to make preauth completion for ".concat((amountCents / 100.0).toFixed(2));
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "InitiateCancelTx",
    value: function InitiateCancelTx(posRefId, preauthId) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionOptions"]();
      var msg = Object.assign(new _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthCancelRequest"](preauthId, posRefId), {
        Config: this.Config,
        Options: options
      }).ToMessage();
      var tfs = new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionFlowState"](posRefId, _SpiModels__WEBPACK_IMPORTED_MODULE_3__["TransactionType"].Preauth, 0, msg, "Waiting for EFTPOS connection to make preauth cancellation request");
      var sentMsg = "Asked EFTPOS to make preauth cancellation request";
      return this._initiatePreauthTx(tfs, sentMsg);
    }
  }, {
    key: "_initiatePreauthTx",
    value: function _initiatePreauthTx(tfs, sentMsg) {
      if (this._spi.CurrentStatus == _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiStatus"].Unpaired) return new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["InitiateTxResult"](false, "Not Paired");
      if (this._spi.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiFlow"].Idle) return new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["InitiateTxResult"](false, "Not Idle");
      this._spi.CurrentFlow = _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiFlow"].Transaction;
      this._spi.CurrentTxFlowState = tfs;

      if (this._spi._send(tfs.Request)) {
        this._spi.CurrentTxFlowState.Sent(sentMsg);
      }

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this._spi.CurrentTxFlowState
      }));
      return new _SpiModels__WEBPACK_IMPORTED_MODULE_3__["InitiateTxResult"](true, "Preauth Initiated");
    }
  }, {
    key: "_handlePreauthMessage",
    value: function _handlePreauthMessage(m) {
      switch (m.EventName) {
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].AccountVerifyResponse:
          this._handleAccountVerifyResponse(m);

          break;

        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthOpenResponse:
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthTopupResponse:
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthPartialCancellationResponse:
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthExtendResponse:
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthCompleteResponse:
        case _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthCancellationResponse:
          this._handlePreauthResponse(m);

          break;

        default:
          this._log.info("I don't Understand Preauth Event: ".concat(m.EventName, ", ").concat(m.Data, ". Perhaps I have not implemented it yet."));

          break;
      }
    }
  }, {
    key: "_handleAccountVerifyResponse",
    value: function _handleAccountVerifyResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;
      var currentTxFlowState = this._spi.CurrentTxFlowState;

      if (this._spi.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiFlow"].Transaction || currentTxFlowState.Finished || !currentTxFlowState.PosRefId === incomingPosRefId) {
        this._log.info("Received Account Verify response but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      } // TH-1A, TH-2A


      currentTxFlowState.Completed(m.GetSuccessState(), m, "Account Verify Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this._spi.CurrentTxFlowState
      }));
    }
  }, {
    key: "_handlePreauthResponse",
    value: function _handlePreauthResponse(m) {
      var incomingPosRefId = m.Data.pos_ref_id;
      var currentTxFlowState = this._spi.CurrentTxFlowState;

      if (this._spi.CurrentFlow != _SpiModels__WEBPACK_IMPORTED_MODULE_3__["SpiFlow"].Transaction || currentTxFlowState.Finished || !currentTxFlowState.PosRefId === incomingPosRefId) {
        this._log.info("Received Preauth response but I was not waiting for one. Incoming Pos Ref ID: ".concat(incomingPosRefId));

        return;
      } // TH-1A, TH-2A


      currentTxFlowState.Completed(m.GetSuccessState(), m, "Preauth Transaction Ended."); // TH-6A, TH-6E

      document.dispatchEvent(new CustomEvent('TxFlowStateChanged', {
        detail: this._spi.CurrentTxFlowState
      }));
    }
  }], [{
    key: "IsPreauthEvent",
    value: function IsPreauthEvent(eventName) {
      return eventName.lastIndexOf("preauth", 0) === 0 || eventName == _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthCompleteResponse || eventName == _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].PreauthCompleteRequest || eventName == _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].AccountVerifyRequest || eventName == _Preauth__WEBPACK_IMPORTED_MODULE_2__["PreauthEvents"].AccountVerifyResponse;
    }
  }]);

  return SpiPreauth;
}();

/***/ }),

/***/ "./src/TerminalStatus.js":
/*!*******************************!*\
  !*** ./src/TerminalStatus.js ***!
  \*******************************/
/*! exports provided: TerminalStatusRequest, TerminalStatusResponse, TerminalBattery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TerminalStatusRequest", function() { return TerminalStatusRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TerminalStatusResponse", function() { return TerminalStatusResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TerminalBattery", function() { return TerminalBattery; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/createClass.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Messages__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Messages */ "./src/Messages.js");
/* harmony import */ var _RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RequestIdHelper */ "./src/RequestIdHelper.js");




var TerminalStatusRequest =
/*#__PURE__*/
function () {
  function TerminalStatusRequest() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, TerminalStatusRequest);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(TerminalStatusRequest, [{
    key: "ToMessage",
    value: function ToMessage() {
      var data = {};
      return new _Messages__WEBPACK_IMPORTED_MODULE_2__["Message"](_RequestIdHelper__WEBPACK_IMPORTED_MODULE_3__["RequestIdHelper"].Id("trmnl"), _Messages__WEBPACK_IMPORTED_MODULE_2__["Events"].TerminalStatusRequest, data, true);
    }
  }]);

  return TerminalStatusRequest;
}();
var TerminalStatusResponse =
/*#__PURE__*/
function () {
  function TerminalStatusResponse(m) {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, TerminalStatusResponse);

    this._m = m;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(TerminalStatusResponse, [{
    key: "GetStatus",
    value: function GetStatus() {
      return this._m.Data.status;
    }
  }, {
    key: "GetBatteryLevel",
    value: function GetBatteryLevel() {
      return parseInt(this._m.Data.battery_level, 10);
    }
  }, {
    key: "IsCharging",
    value: function IsCharging() {
      return !!this._m.Data.charging;
    }
  }]);

  return TerminalStatusResponse;
}();
var TerminalBattery = function TerminalBattery(m) {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, TerminalBattery);

  this.BatteryLevel = parseInt(m.Data.battery_level, 10);
};

/***/ }),

/***/ 0:
/*!************************!*\
  !*** buffer (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9Nb3RlbFBvcy9Nb3RlbFBvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGFzc2VtYmx5cGF5bWVudHMvc3BpLWNsaWVudC1qcy9kaXN0L3NwaS1jbGllbnQtanMuanMiXSwibmFtZXMiOlsiTW90ZWxQb3MiLCJsb2ciLCJyZWNlaXB0IiwiZmxvd19tc2ciLCJfc3BpIiwiX3NwaVByZWF1dGgiLCJfcG9zSWQiLCJfZWZ0cG9zQWRkcmVzcyIsIl9zcGlTZWNyZXRzIiwiX3ZlcnNpb24iLCJfc2VyaWFsTnVtYmVyIiwiX3JjcHRfZnJvbV9lZnRwb3MiLCJfc2lnX2Zsb3dfZnJvbV9lZnRwb3MiLCJfcHJpbnRfbWVyY2hhbnRfY29weSIsIl9sb2ciLCJfcmVjZWlwdCIsIl9mbG93X21zZyIsImluZm8iLCJMb2FkUGVyc2lzdGVkU3RhdGUiLCJTcGkiLCJDb25maWciLCJQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyIsIlNpZ25hdHVyZUZsb3dPbkVmdHBvcyIsIlByaW50TWVyY2hhbnRDb3B5IiwiU2V0UG9zSW5mbyIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJPblNwaVN0YXR1c0NoYW5nZWQiLCJkZXRhaWwiLCJPblBhaXJpbmdGbG93U3RhdGVDaGFuZ2VkIiwiT25TZWNyZXRzQ2hhbmdlZCIsIk9uVHhGbG93U3RhdGVDaGFuZ2VkIiwiUHJpbnRpbmdSZXNwb25zZSIsIkhhbmRsZVByaW50aW5nUmVzcG9uc2UiLCJiaW5kIiwiVGVybWluYWxTdGF0dXNSZXNwb25zZSIsIkhhbmRsZVRlcm1pbmFsU3RhdHVzUmVzcG9uc2UiLCJCYXR0ZXJ5TGV2ZWxDaGFuZ2VkIiwiSGFuZGxlQmF0dGVyeUxldmVsQ2hhbmdlZCIsIkVuYWJsZVByZWF1dGgiLCJTdGFydCIsIkNsZWFyIiwiSW5mbyIsIlByaW50U3RhdHVzQW5kQWN0aW9ucyIsIkFjY2VwdFVzZXJJbnB1dCIsInR4U3RhdGUiLCJwYWlyaW5nRmxvd1N0YXRlIiwic2VjcmV0cyIsIkVuY0tleSIsIkhtYWNLZXkiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsInNwaVN0YXR1cyIsImNsZWFyIiwibWVzc2FnZSIsInByaW50aW5nUmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJnZXRFcnJvclJlYXNvbiIsImdldEVycm9yRGV0YWlsIiwiQWNrRmxvd0VuZGVkQW5kQmFja1RvSWRsZSIsInRlcm1pbmFsU3RhdHVzUmVzcG9uc2UiLCJHZXRTdGF0dXMiLCJHZXRCYXR0ZXJ5TGV2ZWwiLCJJc0NoYXJnaW5nIiwidGVybWluYWxCYXR0ZXJ5IiwiVGVybWluYWxCYXR0ZXJ5IiwiQmF0dGVyeUxldmVsIiwiUHJpbnRGbG93SW5mbyIsIlByaW50QWN0aW9ucyIsIlByaW50UGFpcmluZ1N0YXR1cyIsIkN1cnJlbnRGbG93IiwiU3BpRmxvdyIsIlBhaXJpbmciLCJwYWlyaW5nU3RhdGUiLCJDdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZSIsIk1lc3NhZ2UiLCJGaW5pc2hlZCIsIlN1Y2Nlc3NmdWwiLCJDb25maXJtYXRpb25Db2RlIiwiQXdhaXRpbmdDaGVja0Zyb21FZnRwb3MiLCJBd2FpdGluZ0NoZWNrRnJvbVBvcyIsIlRyYW5zYWN0aW9uIiwiQ3VycmVudFR4Rmxvd1N0YXRlIiwiRGlzcGxheU1lc3NhZ2UiLCJQb3NSZWZJZCIsIlR5cGUiLCJBbW91bnRDZW50cyIsInRvRml4ZWQiLCJBd2FpdGluZ1NpZ25hdHVyZUNoZWNrIiwiQXR0ZW1wdGluZ1RvQ2FuY2VsIiwiU3VjY2VzcyIsIlNpZ25hdHVyZVJlcXVpcmVkTWVzc2FnZSIsIkdldE1lcmNoYW50UmVjZWlwdCIsInRyaW0iLCJTdWNjZXNzU3RhdGUiLCJUcmFuc2FjdGlvblR5cGUiLCJQcmVhdXRoIiwicHJlYXV0aFJlc3BvbnNlIiwiUHJlYXV0aFJlc3BvbnNlIiwiUmVzcG9uc2UiLCJQcmVhdXRoSWQiLCJHZXRCYWxhbmNlQW1vdW50IiwiR2V0UHJldmlvdXNCYWxhbmNlQW1vdW50IiwiR2V0Q29tcGxldGlvbkFtb3VudCIsImRldGFpbHMiLCJEZXRhaWxzIiwiR2V0UmVzcG9uc2VUZXh0IiwiR2V0UlJOIiwiU2NoZW1lTmFtZSIsIldhc0N1c3RvbWVyUmVjZWlwdFByaW50ZWQiLCJHZXRDdXN0b21lclJlY2VpcHQiLCJBY2NvdW50VmVyaWZ5IiwiYWNjdFZlcmlmeVJlc3BvbnNlIiwiQWNjb3VudFZlcmlmeVJlc3BvbnNlIiwiRmFpbGVkIiwiR2V0RXJyb3IiLCJHZXRFcnJvckRldGFpbCIsInB1cmNoYXNlUmVzcG9uc2UiLCJQdXJjaGFzZVJlc3BvbnNlIiwiV2FzTWVyY2hhbnRSZWNlaXB0UHJpbnRlZCIsIlVua25vd24iLCJpbnB1dHNFbmFibGVkIiwic3RhdHVzRWwiLCJnZXRFbGVtZW50QnlJZCIsInByaW1hcnlTdGF0dXNFbCIsImZsb3dTdGF0dXNFbCIsImZsb3dTdGF0dXNIZWFkaW5nIiwiZGF0YXNldCIsIkN1cnJlbnRTdGF0dXMiLCJpbm5lclRleHQiLCJTcGlTdGF0dXMiLCJVbnBhaXJlZCIsIklkbGUiLCJwdXNoIiwiUGFpcmVkQ29ubmVjdGluZyIsIlBhaXJlZENvbm5lY3RlZCIsImlucHV0cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwibGVuZ3RoIiwiZGlzYWJsZWQiLCJmb3JFYWNoIiwiaW5wdXQiLCJpbnB1dEVsIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiR2V0VmVyc2lvbiIsInZhbHVlIiwiU2V0UG9zSWQiLCJTZXRFZnRwb3NBZGRyZXNzIiwiRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zIiwiY2hlY2tlZCIsIkVuYWJsZWRTaWduYXR1cmVGbG93T25FZnRwb3MiLCJFbmFibGVkUHJpbnRNZXJjaGFudENvcHkiLCJQYWlyIiwiUGFpcmluZ0NvbmZpcm1Db2RlIiwiUGFpcmluZ0NhbmNlbCIsIlVucGFpciIsInBvc1JlZklkIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicmVzIiwiSW5pdGlhdGVBY2NvdW50VmVyaWZ5VHgiLCJJbml0aWF0ZWQiLCJhbW91bnQiLCJwYXJzZUludCIsIkluaXRpYXRlT3BlblR4IiwicHJlYXV0aElkIiwicmVmIiwiSW5pdGlhdGVUb3B1cFR4IiwiSW5pdGlhdGVQYXJ0aWFsQ2FuY2VsbGF0aW9uVHgiLCJJbml0aWF0ZUV4dGVuZFR4IiwiSW5pdGlhdGVDYW5jZWxUeCIsInN1cmNoYXJnZSIsIkluaXRpYXRlQ29tcGxldGlvblR4IiwiQWNjZXB0U2lnbmF0dXJlIiwiQ2FuY2VsVHJhbnNhY3Rpb24iLCJpbm5lckhUTUwiLCJnZXRJdGVtIiwiU2VjcmV0cyIsImNvbnNvbGUiLCJMb2dnZXIiLCJwb3MiLCJlcnIiLCJlcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87UUNWQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsR0FBRzs7UUFFSDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsS0FBSztRQUNMO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLE1BQU07UUFDTjtRQUNBO1FBQ0EsTUFBTTtRQUNOO1FBQ0E7UUFDQSxNQUFNO1FBQ047UUFDQTtRQUNBO1FBQ0EsT0FBTztRQUNQO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLElBQUk7UUFDSjs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLE1BQU07UUFDTjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxNQUFNO1FBQ047UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLEtBQUs7O1FBRUw7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsNkJBQTZCO1FBQzdCLDZCQUE2QjtRQUM3QjtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxxQkFBcUIsZ0JBQWdCO1FBQ3JDO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTtRQUNBO1FBQ0EscUJBQXFCLGdCQUFnQjtRQUNyQztRQUNBO1FBQ0EsS0FBSztRQUNMO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTtRQUNBLEtBQUs7UUFDTDtRQUNBO1FBQ0E7UUFDQSxLQUFLOztRQUVMO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLEtBQUs7UUFDTDtRQUNBO1FBQ0EsS0FBSztRQUNMO1FBQ0E7UUFDQTtRQUNBLEtBQUs7O1FBRUw7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBLGtCQUFrQiw4QkFBOEI7UUFDaEQ7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsSUFBSTtRQUNKOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsSUFBSTtRQUNKO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsTUFBTTtRQUNOO1FBQ0E7UUFDQTtRQUNBLE9BQU87UUFDUDtRQUNBO1FBQ0E7UUFDQTtRQUNBLElBQUk7UUFDSjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLEtBQUs7UUFDTDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0Esb0JBQW9CLDJCQUEyQjtRQUMvQztRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsT0FBTztRQUNQO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQSxtQkFBbUIsY0FBYztRQUNqQztRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsZ0JBQWdCLEtBQUs7UUFDckI7UUFDQTtRQUNBO1FBQ0EsTUFBTTtRQUNOO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxnQkFBZ0IsWUFBWTtRQUM1QjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBLGNBQWMsNEJBQTRCO1FBQzFDO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsTUFBTTtRQUNOO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsSUFBSTs7UUFFSjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7O1FBRUE7UUFDQTtRQUNBLGVBQWUsNEJBQTRCO1FBQzNDO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0EsZUFBZSw0QkFBNEI7UUFDM0M7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLGlCQUFpQix1Q0FBdUM7UUFDeEQ7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxpQkFBaUIsdUNBQXVDO1FBQ3hEO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsaUJBQWlCLHNCQUFzQjtRQUN2QztRQUNBO1FBQ0E7UUFDQSxRQUFRO1FBQ1I7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsVUFBVTtRQUNWO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBLGNBQWMsd0NBQXdDO1FBQ3REO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTtRQUNBO1FBQ0EsT0FBTztRQUNQO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLFNBQVM7UUFDVDtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxNQUFNO1FBQ047UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLFFBQVE7UUFDUjtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLElBQUk7UUFDSjs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBLGVBQWU7UUFDZjtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EseUNBQXlDLGlDQUFpQztRQUMxRSxnSEFBZ0gsbUJBQW1CLEVBQUU7UUFDckk7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7UUFFQTtRQUNBLHNDQUFzQyx1QkFBdUI7OztRQUc3RDtRQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztDQ253QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ08sSUFBTUEsUUFBYjtBQUFBO0FBQUE7QUFFSSxvQkFBWUMsR0FBWixFQUFpQkMsT0FBakIsRUFBMEJDLFFBQTFCLEVBQ0E7QUFBQTs7QUFDSSxTQUFLQyxJQUFMLEdBQVksSUFBWjtBQUNBLFNBQUtDLFdBQUwsR0FBbUIsSUFBbkI7QUFDQSxTQUFLQyxNQUFMLEdBQWMsV0FBZDtBQUNBLFNBQUtDLGNBQUwsR0FBc0IsYUFBdEI7QUFDQSxTQUFLQyxXQUFMLEdBQW1CLElBQW5CO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQixPQUFoQjtBQUNBLFNBQUtDLGFBQUwsR0FBcUIsRUFBckI7QUFDQSxTQUFLQyxpQkFBTCxHQUF5QixLQUF6QjtBQUNBLFNBQUtDLHFCQUFMLEdBQTZCLEtBQTdCO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIsS0FBNUI7QUFFQSxTQUFLQyxJQUFMLEdBQVliLEdBQVo7QUFDQSxTQUFLYyxRQUFMLEdBQWdCYixPQUFoQjtBQUNBLFNBQUtjLFNBQUwsR0FBaUJiLFFBQWpCO0FBQ0g7O0FBbEJMO0FBQUE7QUFBQSw0QkFxQkk7QUFBQTs7QUFDSSxXQUFLVyxJQUFMLENBQVVHLElBQVYsQ0FBZSxzQkFBZjs7QUFDQSxXQUFLQyxrQkFBTCxHQUZKLENBSUk7QUFDQTs7QUFDQSxXQUFLZCxJQUFMLEdBQVksSUFBSWUsc0ZBQUosQ0FBUSxLQUFLYixNQUFiLEVBQXFCLEtBQUtJLGFBQTFCLEVBQXlDLEtBQUtILGNBQTlDLEVBQThELEtBQUtDLFdBQW5FLENBQVosQ0FOSixDQU1pRzs7QUFDN0YsV0FBS0osSUFBTCxDQUFVZ0IsTUFBVixDQUFpQkMsNkJBQWpCLEdBQWlELEtBQUtWLGlCQUF0RDtBQUNBLFdBQUtQLElBQUwsQ0FBVWdCLE1BQVYsQ0FBaUJFLHFCQUFqQixHQUF5QyxLQUFLVixxQkFBOUM7QUFDQSxXQUFLUixJQUFMLENBQVVnQixNQUFWLENBQWlCRyxpQkFBakIsR0FBcUMsS0FBS1Ysb0JBQTFDOztBQUVBLFdBQUtULElBQUwsQ0FBVW9CLFVBQVYsQ0FBcUIsVUFBckIsRUFBaUMsS0FBS2YsUUFBdEM7O0FBRUFnQixjQUFRLENBQUNDLGdCQUFULENBQTBCLGVBQTFCLEVBQTJDLFVBQUNDLENBQUQ7QUFBQSxlQUFPLEtBQUksQ0FBQ0Msa0JBQUwsQ0FBd0JELENBQUMsQ0FBQ0UsTUFBMUIsQ0FBUDtBQUFBLE9BQTNDO0FBQ0FKLGNBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIseUJBQTFCLEVBQXFELFVBQUNDLENBQUQ7QUFBQSxlQUFPLEtBQUksQ0FBQ0cseUJBQUwsQ0FBK0JILENBQUMsQ0FBQ0UsTUFBakMsQ0FBUDtBQUFBLE9BQXJEO0FBQ0FKLGNBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsZ0JBQTFCLEVBQTRDLFVBQUNDLENBQUQ7QUFBQSxlQUFPLEtBQUksQ0FBQ0ksZ0JBQUwsQ0FBc0JKLENBQUMsQ0FBQ0UsTUFBeEIsQ0FBUDtBQUFBLE9BQTVDO0FBQ0FKLGNBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsb0JBQTFCLEVBQWdELFVBQUNDLENBQUQ7QUFBQSxlQUFPLEtBQUksQ0FBQ0ssb0JBQUwsQ0FBMEJMLENBQUMsQ0FBQ0UsTUFBNUIsQ0FBUDtBQUFBLE9BQWhEO0FBRUEsV0FBS3pCLElBQUwsQ0FBVTZCLGdCQUFWLEdBQTZCLEtBQUtDLHNCQUFMLENBQTRCQyxJQUE1QixDQUFpQyxJQUFqQyxDQUE3QjtBQUNBLFdBQUsvQixJQUFMLENBQVVnQyxzQkFBVixHQUFtQyxLQUFLQyw0QkFBTCxDQUFrQ0YsSUFBbEMsQ0FBdUMsSUFBdkMsQ0FBbkM7QUFDQSxXQUFLL0IsSUFBTCxDQUFVa0MsbUJBQVYsR0FBZ0MsS0FBS0MseUJBQUwsQ0FBK0JKLElBQS9CLENBQW9DLElBQXBDLENBQWhDO0FBRUEsV0FBSzlCLFdBQUwsR0FBbUIsS0FBS0QsSUFBTCxDQUFVb0MsYUFBVixFQUFuQjs7QUFDQSxXQUFLcEMsSUFBTCxDQUFVcUMsS0FBVixHQXZCSixDQXlCSTs7O0FBRUEsV0FBS3pCLFNBQUwsQ0FBZTBCLEtBQWY7O0FBQ0EsV0FBSzFCLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IseUJBQXBCOztBQUVBLFdBQUtDLHFCQUFMO0FBQ0EsV0FBS0MsZUFBTDtBQUNIO0FBckRMO0FBQUE7QUFBQSx5Q0F1RHlCQyxPQXZEekIsRUF3REk7QUFDSSxXQUFLOUIsU0FBTCxDQUFlMEIsS0FBZjs7QUFDQSxXQUFLRSxxQkFBTDs7QUFDQSxXQUFLNUIsU0FBTCxDQUFlMkIsSUFBZixDQUFvQixJQUFwQjtBQUNIO0FBNURMO0FBQUE7QUFBQSw4Q0E4RDhCSSxnQkE5RDlCLEVBK0RJO0FBQ0ksV0FBSy9CLFNBQUwsQ0FBZTBCLEtBQWY7O0FBQ0EsV0FBS0UscUJBQUw7O0FBQ0EsV0FBSzVCLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsSUFBcEI7QUFDSDtBQW5FTDtBQUFBO0FBQUEscUNBcUVxQkssT0FyRXJCLEVBc0VJO0FBQ0ksV0FBS3hDLFdBQUwsR0FBbUJ3QyxPQUFuQjs7QUFDQSxVQUFJQSxPQUFPLElBQUksSUFBZixFQUNBO0FBQ0ksYUFBS2xDLElBQUwsQ0FBVUcsSUFBViw2QkFBb0MrQixPQUFPLENBQUNDLE1BQTVDLFNBQXFERCxPQUFPLENBQUNFLE9BQTdEOztBQUNBQyxvQkFBWSxDQUFDQyxPQUFiLENBQXFCLFFBQXJCLEVBQStCSixPQUFPLENBQUNDLE1BQXZDO0FBQ0FFLG9CQUFZLENBQUNDLE9BQWIsQ0FBcUIsU0FBckIsRUFBZ0NKLE9BQU8sQ0FBQ0UsT0FBeEM7QUFDSCxPQUxELE1BT0E7QUFDSSxhQUFLcEMsSUFBTCxDQUFVRyxJQUFWOztBQUNBa0Msb0JBQVksQ0FBQ0UsVUFBYixDQUF3QixRQUF4QjtBQUNBRixvQkFBWSxDQUFDRSxVQUFiLENBQXdCLFNBQXhCO0FBQ0g7QUFDSixLQXBGTCxDQXNGSTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQTFGSjtBQUFBO0FBQUEsdUNBMkZ1QkMsU0EzRnZCLEVBNEZJO0FBQ0ksV0FBS3hDLElBQUwsQ0FBVXlDLEtBQVY7O0FBQ0EsV0FBS3pDLElBQUwsQ0FBVUcsSUFBVixxQ0FBNENxQyxTQUE1Qzs7QUFDQSxXQUFLVixxQkFBTDtBQUNIO0FBaEdMO0FBQUE7QUFBQSwyQ0FtRzJCWSxPQW5HM0IsRUFvR0k7QUFDSSxXQUFLeEMsU0FBTCxDQUFlMEIsS0FBZjs7QUFDQSxVQUFJZSxnQkFBZ0IsR0FBRyxJQUFJeEIsbUdBQUosQ0FBcUJ1QixPQUFyQixDQUF2Qjs7QUFFQSxVQUFJQyxnQkFBZ0IsQ0FBQ0MsU0FBakIsRUFBSixFQUNBO0FBQ0ksYUFBSzFDLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0Isc0RBQXBCO0FBQ0gsT0FIRCxNQUtBO0FBQ0ksYUFBSzNCLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsaUVBQWlFYyxnQkFBZ0IsQ0FBQ0UsY0FBakIsRUFBakUsR0FBcUcsYUFBckcsR0FBcUhGLGdCQUFnQixDQUFDRyxjQUFqQixFQUF6STtBQUNIOztBQUVELFdBQUt4RCxJQUFMLENBQVV5RCx5QkFBVjs7QUFDQSxXQUFLakIscUJBQUw7QUFDSDtBQW5ITDtBQUFBO0FBQUEsaURBcUhpQ1ksT0FySGpDLEVBc0hJO0FBQ0ksV0FBS3hDLFNBQUwsQ0FBZTBCLEtBQWY7O0FBQ0EsVUFBSW9CLHNCQUFzQixHQUFHLElBQUkxQix5R0FBSixDQUEyQm9CLE9BQTNCLENBQTdCOztBQUNBLFdBQUt4QyxTQUFMLENBQWUyQixJQUFmLENBQW9CLDhCQUFwQjs7QUFDQSxXQUFLM0IsU0FBTCxDQUFlMkIsSUFBZixDQUFvQixlQUFlbUIsc0JBQXNCLENBQUNDLFNBQXZCLEVBQW5DOztBQUNBLFdBQUsvQyxTQUFMLENBQWUyQixJQUFmLENBQW9CLHNCQUFzQm1CLHNCQUFzQixDQUFDRSxlQUF2QixFQUF0QixHQUFpRSxHQUFyRjs7QUFDQSxXQUFLaEQsU0FBTCxDQUFlMkIsSUFBZixDQUFvQixpQkFBaUJtQixzQkFBc0IsQ0FBQ0csVUFBdkIsRUFBckM7O0FBQ0EsV0FBSzdELElBQUwsQ0FBVXlELHlCQUFWOztBQUNBLFdBQUtqQixxQkFBTDtBQUNIO0FBL0hMO0FBQUE7QUFBQSw4Q0FpSThCWSxPQWpJOUIsRUFrSUk7QUFDSSxXQUFLMUMsSUFBTCxDQUFVeUMsS0FBVjs7QUFDQSxVQUFJVyxlQUFlLEdBQUcsSUFBSUMsa0dBQUosQ0FBb0JYLE9BQXBCLENBQXRCOztBQUNBLFdBQUt4QyxTQUFMLENBQWUyQixJQUFmLENBQW9CLDJCQUFwQjs7QUFDQSxXQUFLM0IsU0FBTCxDQUFlMkIsSUFBZixDQUFvQixzQkFBc0J1QixlQUFlLENBQUNFLFlBQXRDLEdBQXFELEdBQXpFOztBQUNBLFdBQUtoRSxJQUFMLENBQVV5RCx5QkFBVjs7QUFDQSxXQUFLakIscUJBQUw7QUFDSDtBQXpJTDtBQUFBO0FBQUEsNENBNElJO0FBQ0ksV0FBS3lCLGFBQUw7QUFFQSxXQUFLQyxZQUFMO0FBRUEsV0FBS0Msa0JBQUw7QUFDSDtBQWxKTDtBQUFBO0FBQUEsb0NBcUpJO0FBQ0ksY0FBUSxLQUFLbkUsSUFBTCxDQUFVb0UsV0FBbEI7QUFFSSxhQUFLQywwRkFBTyxDQUFDQyxPQUFiO0FBQ0ksY0FBSUMsWUFBWSxHQUFHLEtBQUt2RSxJQUFMLENBQVV3RSx1QkFBN0I7O0FBQ0EsZUFBSzVELFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsZ0NBQXBCOztBQUNBLGVBQUszQixTQUFMLENBQWUyQixJQUFmLGFBQXlCZ0MsWUFBWSxDQUFDRSxPQUF0Qzs7QUFDQSxlQUFLN0QsU0FBTCxDQUFlMkIsSUFBZix1QkFBbUNnQyxZQUFZLENBQUNHLFFBQWhEOztBQUNBLGVBQUs5RCxTQUFMLENBQWUyQixJQUFmLHlCQUFxQ2dDLFlBQVksQ0FBQ0ksVUFBbEQ7O0FBQ0EsZUFBSy9ELFNBQUwsQ0FBZTJCLElBQWYsZ0NBQTRDZ0MsWUFBWSxDQUFDSyxnQkFBekQ7O0FBQ0EsZUFBS2hFLFNBQUwsQ0FBZTJCLElBQWYsMENBQXNEZ0MsWUFBWSxDQUFDTSx1QkFBbkU7O0FBQ0EsZUFBS2pFLFNBQUwsQ0FBZTJCLElBQWYsdUNBQW1EZ0MsWUFBWSxDQUFDTyxvQkFBaEU7O0FBQ0E7O0FBRUosYUFBS1QsMEZBQU8sQ0FBQ1UsV0FBYjtBQUNJLGNBQUlyQyxPQUFPLEdBQUcsS0FBSzFDLElBQUwsQ0FBVWdGLGtCQUF4Qjs7QUFDQSxlQUFLcEUsU0FBTCxDQUFlMkIsSUFBZixDQUFvQiwyQkFBcEI7O0FBQ0EsZUFBSzNCLFNBQUwsQ0FBZTJCLElBQWYsYUFBeUJHLE9BQU8sQ0FBQ3VDLGNBQWpDOztBQUNBLGVBQUtyRSxTQUFMLENBQWUyQixJQUFmLHVCQUFtQ0csT0FBTyxDQUFDd0MsUUFBM0M7O0FBQ0EsZUFBS3RFLFNBQUwsQ0FBZTJCLElBQWYsbUJBQStCRyxPQUFPLENBQUN5QyxJQUF2Qzs7QUFDQSxlQUFLdkUsU0FBTCxDQUFlMkIsSUFBZiw4QkFBMEMsQ0FBQ0csT0FBTyxDQUFDMEMsV0FBUixHQUFzQixLQUF2QixFQUE4QkMsT0FBOUIsQ0FBc0MsQ0FBdEMsQ0FBMUM7O0FBQ0EsZUFBS3pFLFNBQUwsQ0FBZTJCLElBQWYsb0NBQWdERyxPQUFPLENBQUM0QyxzQkFBeEQ7O0FBQ0EsZUFBSzFFLFNBQUwsQ0FBZTJCLElBQWYsb0NBQWdERyxPQUFPLENBQUM2QyxrQkFBeEQ7O0FBQ0EsZUFBSzNFLFNBQUwsQ0FBZTJCLElBQWYsdUJBQW1DRyxPQUFPLENBQUNnQyxRQUEzQzs7QUFDQSxlQUFLOUQsU0FBTCxDQUFlMkIsSUFBZixzQkFBa0NHLE9BQU8sQ0FBQzhDLE9BQTFDOztBQUVBLGNBQUk5QyxPQUFPLENBQUM0QyxzQkFBWixFQUNBO0FBQ0k7QUFDQSxpQkFBSzFFLFNBQUwsQ0FBZTJCLElBQWY7O0FBQ0EsaUJBQUs1QixRQUFMLENBQWM0QixJQUFkLENBQW1CRyxPQUFPLENBQUMrQyx3QkFBUixDQUFpQ0Msa0JBQWpDLEdBQXNEQyxJQUF0RCxFQUFuQjtBQUNIOztBQUVELGNBQUlqRCxPQUFPLENBQUNnQyxRQUFaLEVBQ0E7QUFDRyxvQkFBT2hDLE9BQU8sQ0FBQzhDLE9BQWY7QUFFSyxtQkFBS0ksK0ZBQVksQ0FBQ0osT0FBbEI7QUFDSSx3QkFBUTlDLE9BQU8sQ0FBQ3lDLElBQWhCO0FBRUksdUJBQUtVLGtHQUFlLENBQUNDLE9BQXJCO0FBQ0kseUJBQUtsRixTQUFMLENBQWUyQixJQUFmLENBQW9CLDRCQUFwQjs7QUFDQSx3QkFBSXdELGVBQWUsR0FBRyxJQUFJQyxrR0FBSixDQUFvQnRELE9BQU8sQ0FBQ3VELFFBQTVCLENBQXRCOztBQUNBLHlCQUFLckYsU0FBTCxDQUFlMkIsSUFBZixDQUFvQixlQUFwQixFQUFxQ3dELGVBQWUsQ0FBQ0csU0FBckQ7O0FBQ0EseUJBQUt0RixTQUFMLENBQWUyQixJQUFmLENBQW9CLHVCQUFwQixFQUE2Q3dELGVBQWUsQ0FBQ0ksZ0JBQWhCLEVBQTdDOztBQUNBLHlCQUFLdkYsU0FBTCxDQUFlMkIsSUFBZixDQUFvQix3QkFBcEIsRUFBOEN3RCxlQUFlLENBQUNLLHdCQUFoQixFQUE5Qzs7QUFDQSx5QkFBS3hGLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0Isc0JBQXBCLEVBQTRDd0QsZUFBZSxDQUFDTSxtQkFBaEIsRUFBNUM7O0FBRUEsd0JBQUlDLE9BQU8sR0FBR1AsZUFBZSxDQUFDUSxPQUE5Qjs7QUFDQSx5QkFBSzNGLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsYUFBcEIsRUFBbUMrRCxPQUFPLENBQUNFLGVBQVIsRUFBbkM7O0FBQ0EseUJBQUs1RixTQUFMLENBQWUyQixJQUFmLENBQW9CLFFBQXBCLEVBQThCK0QsT0FBTyxDQUFDRyxNQUFSLEVBQTlCOztBQUNBLHlCQUFLN0YsU0FBTCxDQUFlMkIsSUFBZixDQUFvQixXQUFwQixFQUFpQytELE9BQU8sQ0FBQ0ksVUFBekM7O0FBQ0EseUJBQUs5RixTQUFMLENBQWUyQixJQUFmLENBQW9CLHFCQUFwQjs7QUFDQSx5QkFBSzVCLFFBQUwsQ0FBYzRCLElBQWQsQ0FBbUIsQ0FBQytELE9BQU8sQ0FBQ0sseUJBQVIsRUFBRCxHQUF1Q0wsT0FBTyxDQUFDTSxrQkFBUixHQUE2QmpCLElBQTdCLEVBQXZDLEdBQTZFLHVCQUFoRzs7QUFDQTs7QUFDSix1QkFBS0Usa0dBQWUsQ0FBQ2dCLGFBQXJCO0FBQ0kseUJBQUtqRyxTQUFMLENBQWUyQixJQUFmLENBQW9CLGdDQUFwQjs7QUFDQSx3QkFBSXVFLGtCQUFrQixHQUFHLElBQUlDLHdHQUFKLENBQTBCckUsT0FBTyxDQUFDdUQsUUFBbEMsQ0FBekI7QUFDQSx3QkFBSUssT0FBTyxHQUFHUSxrQkFBa0IsQ0FBQ1AsT0FBakM7O0FBQ0EseUJBQUszRixTQUFMLENBQWUyQixJQUFmLENBQW9CLGFBQXBCLEVBQW1DK0QsT0FBTyxDQUFDRSxlQUFSLEVBQW5DOztBQUNBLHlCQUFLNUYsU0FBTCxDQUFlMkIsSUFBZixDQUFvQixRQUFwQixFQUE4QitELE9BQU8sQ0FBQ0csTUFBUixFQUE5Qjs7QUFDQSx5QkFBSzdGLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsV0FBcEIsRUFBaUMrRCxPQUFPLENBQUNJLFVBQXpDOztBQUNBLHlCQUFLOUYsU0FBTCxDQUFlMkIsSUFBZixDQUFvQixxQkFBcEI7O0FBQ0EseUJBQUs1QixRQUFMLENBQWM0QixJQUFkLENBQW1CLENBQUMrRCxPQUFPLENBQUNLLHlCQUFSLEVBQUQsR0FBdUNMLE9BQU8sQ0FBQ00sa0JBQVIsR0FBNkJqQixJQUE3QixFQUF2QyxHQUE2RSx1QkFBaEc7O0FBQ0E7O0FBQ0o7QUFDSSx5QkFBSy9FLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0Isd0VBQXBCOztBQUNBO0FBN0JSOztBQStCSjs7QUFDQSxtQkFBS3FELCtGQUFZLENBQUNvQixNQUFsQjtBQUNJLHdCQUFRdEUsT0FBTyxDQUFDeUMsSUFBaEI7QUFFSSx1QkFBS1Usa0dBQWUsQ0FBQ0MsT0FBckI7QUFDSSx5QkFBS2xGLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsaUNBQXBCOztBQUNBLHdCQUFJRyxPQUFPLENBQUN1RCxRQUFSLElBQW9CLElBQXhCLEVBQ0E7QUFDSSwyQkFBS3JGLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsVUFBcEIsRUFBZ0NHLE9BQU8sQ0FBQ3VELFFBQVIsQ0FBaUJnQixRQUFqQixFQUFoQzs7QUFDQSwyQkFBS3JHLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsaUJBQXBCLEVBQXVDRyxPQUFPLENBQUN1RCxRQUFSLENBQWlCaUIsY0FBakIsRUFBdkM7O0FBQ0EsMEJBQUlDLGdCQUFnQixHQUFHLElBQUlDLG1HQUFKLENBQXFCMUUsT0FBTyxDQUFDdUQsUUFBN0IsQ0FBdkI7O0FBQ0EsMkJBQUtyRixTQUFMLENBQWUyQixJQUFmLENBQW9CLGFBQXBCLEVBQW1DNEUsZ0JBQWdCLENBQUNYLGVBQWpCLEVBQW5DOztBQUNBLDJCQUFLNUYsU0FBTCxDQUFlMkIsSUFBZixDQUFvQixRQUFwQixFQUE4QjRFLGdCQUFnQixDQUFDVixNQUFqQixFQUE5Qjs7QUFDQSwyQkFBSzdGLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsV0FBcEIsRUFBaUM0RSxnQkFBZ0IsQ0FBQ1QsVUFBbEQ7O0FBQ0EsMkJBQUs5RixTQUFMLENBQWUyQixJQUFmLENBQW9CLHFCQUFwQjs7QUFDQSwyQkFBSzVCLFFBQUwsQ0FBYzRCLElBQWQsQ0FBbUIsQ0FBQzRFLGdCQUFnQixDQUFDUix5QkFBakIsRUFBRCxHQUFnRFEsZ0JBQWdCLENBQUNQLGtCQUFqQixHQUFzQ2pCLElBQXRDLEVBQWhELEdBQStGLHVCQUFsSDtBQUNIOztBQUNEOztBQUNKLHVCQUFLRSxrR0FBZSxDQUFDZ0IsYUFBckI7QUFDSSx5QkFBS2pHLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0Isa0NBQXBCOztBQUVBLHdCQUFJRyxPQUFPLENBQUN1RCxRQUFSLElBQW9CLElBQXhCLEVBQ0E7QUFDSSwyQkFBS3JGLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsVUFBcEIsRUFBZ0NHLE9BQU8sQ0FBQ3VELFFBQVIsQ0FBaUJnQixRQUFqQixFQUFoQzs7QUFDQSwyQkFBS3JHLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsaUJBQXBCLEVBQXVDRyxPQUFPLENBQUN1RCxRQUFSLENBQWlCaUIsY0FBakIsRUFBdkM7O0FBQ0EsMEJBQUlKLGtCQUFrQixHQUFHLElBQUlDLHdHQUFKLENBQTBCckUsT0FBTyxDQUFDdUQsUUFBbEMsQ0FBekI7QUFDQSwwQkFBSUssT0FBTyxHQUFHUSxrQkFBa0IsQ0FBQ1AsT0FBakM7O0FBQ0EsMkJBQUs1RixRQUFMLENBQWM0QixJQUFkLENBQW1CLENBQUMrRCxPQUFPLENBQUNlLHlCQUFSLEVBQUQsR0FBdUNmLE9BQU8sQ0FBQ1osa0JBQVIsR0FBNkJDLElBQTdCLEVBQXZDLEdBQTZFLHVCQUFoRztBQUNIOztBQUNEOztBQUNKO0FBQ0kseUJBQUsvRSxTQUFMLENBQWUyQixJQUFmLENBQW9CLHFFQUFwQjs7QUFDQTtBQTlCUjs7QUFnQ0E7O0FBQ0osbUJBQUtxRCwrRkFBWSxDQUFDMEIsT0FBbEI7QUFDSSx3QkFBUTVFLE9BQU8sQ0FBQ3lDLElBQWhCO0FBRUksdUJBQUtVLGtHQUFlLENBQUNDLE9BQXJCO0FBQ0kseUJBQUtsRixTQUFMLENBQWUyQixJQUFmLENBQW9CLDBFQUFwQjs7QUFDQSx5QkFBSzNCLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsbUZBQXBCOztBQUNBLHlCQUFLM0IsU0FBTCxDQUFlMkIsSUFBZixDQUFvQiwyREFBcEI7O0FBQ0EseUJBQUszQixTQUFMLENBQWUyQixJQUFmLENBQW9CLDhDQUFwQjs7QUFDQTs7QUFDSix1QkFBS3NELGtHQUFlLENBQUNnQixhQUFyQjtBQUNJLHlCQUFLakcsU0FBTCxDQUFlMkIsSUFBZixDQUFvQiwyRUFBcEI7O0FBQ0EseUJBQUszQixTQUFMLENBQWUyQixJQUFmLENBQW9CLG1GQUFwQjs7QUFDQSx5QkFBSzNCLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IsMkRBQXBCOztBQUNBLHlCQUFLM0IsU0FBTCxDQUFlMkIsSUFBZixDQUFvQiw4Q0FBcEI7O0FBQ0E7O0FBQ0o7QUFDSSx5QkFBSzNCLFNBQUwsQ0FBZTJCLElBQWYsQ0FBb0IseUVBQXBCOztBQUNBO0FBaEJSOztBQWtCQTtBQXhGVDtBQTBGRjs7QUFDRDtBQTdIUjtBQStISDtBQXJSTDtBQUFBO0FBQUEsbUNBd1JJO0FBQ0k7QUFDQSxVQUFJZ0YsYUFBYSxHQUFLLEVBQXRCO0FBQ0EsVUFBSUMsUUFBUSxHQUFVbkcsUUFBUSxDQUFDb0csY0FBVCxDQUF3QixrQkFBeEIsQ0FBdEI7QUFDQSxVQUFJQyxlQUFlLEdBQUdyRyxRQUFRLENBQUNvRyxjQUFULENBQXdCLGdCQUF4QixDQUF0QjtBQUNBLFVBQUlFLFlBQVksR0FBTXRHLFFBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsYUFBeEIsQ0FBdEI7QUFDQSxVQUFJRyxpQkFBaUIsR0FBR3ZHLFFBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IscUJBQXhCLENBQXhCO0FBRUFELGNBQVEsQ0FBQ0ssT0FBVCxDQUFpQixRQUFqQixJQUE4QixLQUFLN0gsSUFBTCxDQUFVOEgsYUFBeEM7QUFDQU4sY0FBUSxDQUFDSyxPQUFULENBQWlCLE1BQWpCLElBQThCLEtBQUs3SCxJQUFMLENBQVVvRSxXQUF4QztBQUNBc0QscUJBQWUsQ0FBQ0ssU0FBaEIsR0FBOEIsS0FBSy9ILElBQUwsQ0FBVThILGFBQXhDO0FBQ0FILGtCQUFZLENBQUNJLFNBQWIsR0FBOEIsS0FBSy9ILElBQUwsQ0FBVW9FLFdBQXhDO0FBQ0F3RCx1QkFBaUIsQ0FBQ0csU0FBbEIsR0FBOEIsS0FBSy9ILElBQUwsQ0FBVW9FLFdBQXhDLENBWkosQ0FjSTs7QUFDQSxjQUFRLEtBQUtwRSxJQUFMLENBQVU4SCxhQUFsQjtBQUVJLGFBQUtFLDRGQUFTLENBQUNDLFFBQWY7QUFBeUI7QUFDckIsa0JBQVEsS0FBS2pJLElBQUwsQ0FBVW9FLFdBQWxCO0FBRUksaUJBQUtDLDBGQUFPLENBQUM2RCxJQUFiO0FBQW1CO0FBQ2ZYLDJCQUFhLENBQUNZLElBQWQsQ0FBbUIsUUFBbkI7QUFDQVosMkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixnQkFBbkI7QUFDQVosMkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixrQkFBbkI7QUFDQVosMkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixzQkFBbkI7QUFDQVosMkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixNQUFuQjtBQUNBWiwyQkFBYSxDQUFDWSxJQUFkLENBQW1CLGVBQW5CO0FBQ0E7O0FBRUosaUJBQUs5RCwwRkFBTyxDQUFDQyxPQUFiO0FBQXNCO0FBQ2xCLGtCQUFJQyxZQUFZLEdBQUcsS0FBS3ZFLElBQUwsQ0FBVXdFLHVCQUE3Qjs7QUFDQSxrQkFBSUQsWUFBWSxDQUFDTyxvQkFBakIsRUFDQTtBQUNJeUMsNkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixjQUFuQjtBQUNIOztBQUNELGtCQUFJLENBQUM1RCxZQUFZLENBQUNHLFFBQWxCLEVBQ0E7QUFDSTZDLDZCQUFhLENBQUNZLElBQWQsQ0FBbUIsYUFBbkI7QUFDSCxlQUhELE1BS0E7QUFDSVosNkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixJQUFuQjtBQUNIOztBQUNEOztBQUVKLGlCQUFLOUQsMEZBQU8sQ0FBQ1UsV0FBYixDQTNCSixDQTJCOEI7O0FBQzFCO0FBQ0ksbUJBQUtyRSxJQUFMLENBQVVHLElBQVYsbUNBQTBDLEtBQUtiLElBQUwsQ0FBVW9FLFdBQXBEOztBQUNBO0FBOUJSOztBQWdDQTs7QUFDSixhQUFLNEQsNEZBQVMsQ0FBQ0ksZ0JBQWY7QUFBaUM7QUFDN0I7QUFDQWIsdUJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixnQkFBbkI7QUFDQVosdUJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixrQkFBbkI7QUFDQVosdUJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixzQkFBbkI7QUFDQVosdUJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixlQUFuQjtBQUNBO0FBQ0E7O0FBRUosYUFBS0gsNEZBQVMsQ0FBQ0ssZUFBZjtBQUNJLGtCQUFRLEtBQUtySSxJQUFMLENBQVVvRSxXQUFsQjtBQUVJLGlCQUFLQywwRkFBTyxDQUFDNkQsSUFBYjtBQUFtQjtBQUNmWCwyQkFBYSxDQUFDWSxJQUFkLENBQW1CLGNBQW5CO0FBQ0FaLDJCQUFhLENBQUNZLElBQWQsQ0FBbUIsaUJBQW5CO0FBQ0FaLDJCQUFhLENBQUNZLElBQWQsQ0FBbUIsbUJBQW5CO0FBQ0FaLDJCQUFhLENBQUNZLElBQWQsQ0FBbUIsZUFBbkI7QUFFQVosMkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixhQUFuQjtBQUNBWiwyQkFBYSxDQUFDWSxJQUFkLENBQW1CLGNBQW5CO0FBQ0FaLDJCQUFhLENBQUNZLElBQWQsQ0FBbUIsZUFBbkI7QUFDQVosMkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixpQkFBbkI7QUFDQVosMkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixnQkFBbkI7QUFDQVosMkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixrQkFBbkI7QUFDQVosMkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixnQkFBbkI7QUFFQVosMkJBQWEsQ0FBQ1ksSUFBZCxDQUFtQixRQUFuQjtBQUNBWiwyQkFBYSxDQUFDWSxJQUFkLENBQW1CLGtCQUFuQjtBQUNBWiwyQkFBYSxDQUFDWSxJQUFkLENBQW1CLHNCQUFuQjtBQUNBWiwyQkFBYSxDQUFDWSxJQUFkLENBQW1CLHFCQUFuQjtBQUNBOztBQUNKLGlCQUFLOUQsMEZBQU8sQ0FBQ1UsV0FBYjtBQUEwQjtBQUN0QixrQkFBSSxLQUFLL0UsSUFBTCxDQUFVZ0Ysa0JBQVYsQ0FBNkJNLHNCQUFqQyxFQUNBO0FBQ0lpQyw2QkFBYSxDQUFDWSxJQUFkLENBQW1CLGdCQUFuQjtBQUNBWiw2QkFBYSxDQUFDWSxJQUFkLENBQW1CLGlCQUFuQjtBQUNIOztBQUVELGtCQUFJLENBQUMsS0FBS25JLElBQUwsQ0FBVWdGLGtCQUFWLENBQTZCTixRQUE5QixJQUEwQyxDQUFDLEtBQUsxRSxJQUFMLENBQVVnRixrQkFBVixDQUE2Qk8sa0JBQTVFLEVBQ0E7QUFDSWdDLDZCQUFhLENBQUNZLElBQWQsQ0FBbUIsV0FBbkI7QUFDSDs7QUFFRCxrQkFBRyxLQUFLbkksSUFBTCxDQUFVZ0Ysa0JBQVYsQ0FBNkJOLFFBQWhDLEVBQ0E7QUFDSTZDLDZCQUFhLENBQUNZLElBQWQsQ0FBbUIsSUFBbkI7QUFDSDs7QUFFRDs7QUFDSixpQkFBSzlELDBGQUFPLENBQUNDLE9BQWI7QUFBc0I7QUFDbEJpRCwyQkFBYSxDQUFDWSxJQUFkLENBQW1CLElBQW5CO0FBQ0E7O0FBQ0o7QUFDSSxtQkFBS3pILElBQUwsQ0FBVUcsSUFBVixtQ0FBMEMsS0FBS2IsSUFBTCxDQUFVb0UsV0FBcEQ7O0FBQ0E7QUE1Q1I7O0FBOENBOztBQUdKO0FBQ0ksZUFBSzFELElBQUwsQ0FBVUcsSUFBVixvQ0FBMkMsS0FBS2IsSUFBTCxDQUFVOEgsYUFBckQ7O0FBQ0E7QUFqR1IsT0FmSixDQW1ISTs7O0FBQ0EsVUFBSVEsTUFBTSxHQUFHakgsUUFBUSxDQUFDa0gsZ0JBQVQsQ0FBMEIsUUFBMUIsQ0FBYjs7QUFDQSxXQUFJLElBQUlDLENBQUMsR0FBRyxDQUFaLEVBQWVBLENBQUMsR0FBR0YsTUFBTSxDQUFDRyxNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUNBO0FBQ0lGLGNBQU0sQ0FBQ0UsQ0FBRCxDQUFOLENBQVVFLFFBQVYsR0FBcUIsSUFBckI7QUFDSDs7QUFFRG5CLG1CQUFhLENBQUNvQixPQUFkLENBQXNCLFVBQUNDLEtBQUQsRUFDdEI7QUFDSSxZQUFJQyxPQUFPLEdBQUd4SCxRQUFRLENBQUNvRyxjQUFULENBQXdCbUIsS0FBeEIsQ0FBZDtBQUNBLFlBQUcsQ0FBQ0MsT0FBSixFQUFhLE1BQU0sSUFBSUMsS0FBSiw4Q0FBZ0RGLEtBQWhELEVBQU47QUFDYkMsZUFBTyxDQUFDSCxRQUFSLEdBQW1CLEtBQW5CO0FBQ0gsT0FMRDs7QUFPQSxXQUFLOUgsU0FBTCxDQUFlMkIsSUFBZjtBQUNIO0FBMVpMO0FBQUE7QUFBQSx5Q0E2Wkk7QUFDSSxXQUFLM0IsU0FBTCxDQUFlMkIsSUFBZjs7QUFDQSxXQUFLM0IsU0FBTCxDQUFlMkIsSUFBZixhQUF5QixLQUFLckMsTUFBOUIsMEJBQW9ELEtBQUtDLGNBQXpEOztBQUNBLFdBQUtTLFNBQUwsQ0FBZTJCLElBQWYseUJBQXFDLEtBQUt2QyxJQUFMLENBQVU4SCxhQUEvQyx3QkFBMEUsS0FBSzlILElBQUwsQ0FBVW9FLFdBQXBGOztBQUNBLFdBQUt4RCxTQUFMLENBQWUyQixJQUFmLHlCQUFxQ3dHLElBQUksQ0FBQ0MsU0FBTCxDQUFlLEtBQUsvSSxXQUFMLENBQWlCZSxNQUFoQyxDQUFyQzs7QUFDQSxXQUFLSixTQUFMLENBQWUyQixJQUFmOztBQUNBLFdBQUszQixTQUFMLENBQWUyQixJQUFmLG1CQUErQixLQUFLbEMsUUFBcEMsb0JBQXNEVSxzRkFBRyxDQUFDa0ksVUFBSixFQUF0RDtBQUVIO0FBcmFMO0FBQUE7QUFBQSxzQ0F3YUk7QUFBQTs7QUFDSTVILGNBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsZUFBeEIsRUFBeUNuRyxnQkFBekMsQ0FBMEQsT0FBMUQsRUFBbUUsWUFBTTtBQUVyRSxZQUFHLE1BQUksQ0FBQ3RCLElBQUwsQ0FBVThILGFBQVYsS0FBNEJFLDRGQUFTLENBQUNDLFFBQXRDLElBQWtELE1BQUksQ0FBQ2pJLElBQUwsQ0FBVW9FLFdBQVYsS0FBMEJDLDBGQUFPLENBQUM2RCxJQUF2RixFQUNBO0FBQ0ksZ0JBQUksQ0FBQ2hJLE1BQUwsR0FBc0JtQixRQUFRLENBQUNvRyxjQUFULENBQXdCLFFBQXhCLEVBQWtDeUIsS0FBeEQ7QUFDQSxnQkFBSSxDQUFDL0ksY0FBTCxHQUFzQmtCLFFBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsZ0JBQXhCLEVBQTBDeUIsS0FBaEU7O0FBRUEsZ0JBQUksQ0FBQ2xKLElBQUwsQ0FBVW1KLFFBQVYsQ0FBbUIsTUFBSSxDQUFDakosTUFBeEI7O0FBQ0EsZ0JBQUksQ0FBQ0YsSUFBTCxDQUFVb0osZ0JBQVYsQ0FBMkIsTUFBSSxDQUFDakosY0FBaEM7O0FBRUE0QyxzQkFBWSxDQUFDQyxPQUFiLENBQXFCLFFBQXJCLEVBQStCLE1BQUksQ0FBQzlDLE1BQXBDO0FBQ0E2QyxzQkFBWSxDQUFDQyxPQUFiLENBQXFCLGdCQUFyQixFQUF1QyxNQUFJLENBQUM3QyxjQUE1Qzs7QUFDQSxnQkFBSSxDQUFDTyxJQUFMLENBQVVHLElBQVYsMEJBQWlDLE1BQUksQ0FBQ1gsTUFBdEMsY0FBZ0QsTUFBSSxDQUFDQyxjQUFyRDtBQUNIOztBQUVELGNBQUksQ0FBQ0YsV0FBTCxDQUFpQmUsTUFBakIsQ0FBd0JxSSxvQ0FBeEIsR0FBK0RoSSxRQUFRLENBQUNvRyxjQUFULENBQXdCLGtCQUF4QixFQUE0QzZCLE9BQTNHO0FBQ0EsY0FBSSxDQUFDckosV0FBTCxDQUFpQmUsTUFBakIsQ0FBd0J1SSw0QkFBeEIsR0FBdURsSSxRQUFRLENBQUNvRyxjQUFULENBQXdCLHNCQUF4QixFQUFnRDZCLE9BQXZHO0FBQ0EsY0FBSSxDQUFDckosV0FBTCxDQUFpQmUsTUFBakIsQ0FBd0J3SSx3QkFBeEIsR0FBbURuSSxRQUFRLENBQUNvRyxjQUFULENBQXdCLHFCQUF4QixFQUErQzZCLE9BQWxHO0FBRUF2RyxvQkFBWSxDQUFDQyxPQUFiLENBQXFCLGtCQUFyQixFQUF5QyxNQUFJLENBQUMvQyxXQUFMLENBQWlCZSxNQUFqQixDQUF3QnFJLG9DQUFqRTtBQUNBdEcsb0JBQVksQ0FBQ0MsT0FBYixDQUFxQixzQkFBckIsRUFBNkMsTUFBSSxDQUFDL0MsV0FBTCxDQUFpQmUsTUFBakIsQ0FBd0J1SSw0QkFBckU7QUFDQXhHLG9CQUFZLENBQUNDLE9BQWIsQ0FBcUIscUJBQXJCLEVBQTRDLE1BQUksQ0FBQy9DLFdBQUwsQ0FBaUJlLE1BQWpCLENBQXdCd0ksd0JBQXBFOztBQUVBLGNBQUksQ0FBQ3JGLGtCQUFMO0FBQ0gsT0F4QkQ7QUEwQkE5QyxjQUFRLENBQUNvRyxjQUFULENBQXdCLE1BQXhCLEVBQWdDbkcsZ0JBQWhDLENBQWlELE9BQWpELEVBQTBELFlBQzFEO0FBQ0ksY0FBSSxDQUFDdEIsSUFBTCxDQUFVeUosSUFBVjtBQUNILE9BSEQ7QUFLQXBJLGNBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsY0FBeEIsRUFBd0NuRyxnQkFBeEMsQ0FBeUQsT0FBekQsRUFBa0UsWUFDbEU7QUFDSSxjQUFJLENBQUN0QixJQUFMLENBQVUwSixrQkFBVjtBQUNILE9BSEQ7QUFLQXJJLGNBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsYUFBeEIsRUFBdUNuRyxnQkFBdkMsQ0FBd0QsT0FBeEQsRUFBaUUsWUFDakU7QUFDSSxjQUFJLENBQUN0QixJQUFMLENBQVUySixhQUFWO0FBQ0gsT0FIRDtBQUtBdEksY0FBUSxDQUFDb0csY0FBVCxDQUF3QixRQUF4QixFQUFrQ25HLGdCQUFsQyxDQUFtRCxPQUFuRCxFQUE0RCxZQUM1RDtBQUNJLGNBQUksQ0FBQ3RCLElBQUwsQ0FBVTRKLE1BQVY7QUFDSCxPQUhEO0FBS0F2SSxjQUFRLENBQUNvRyxjQUFULENBQXdCLGFBQXhCLEVBQXVDbkcsZ0JBQXZDLENBQXdELE9BQXhELEVBQWlFLFlBQ2pFO0FBQ0ksWUFBSXVJLFFBQVEsb0JBQWdCLElBQUlDLElBQUosR0FBV0MsV0FBWCxFQUFoQixDQUFaOztBQUNBLFlBQUlDLEdBQUcsR0FBVyxNQUFJLENBQUMvSixXQUFMLENBQWlCZ0ssdUJBQWpCLENBQXlDSixRQUF6QyxDQUFsQjs7QUFDQSxjQUFJLENBQUNqSixTQUFMLENBQWUyQixJQUFmLENBQW9CeUgsR0FBRyxDQUFDRSxTQUFKLEdBQWdCLG9EQUFoQiwwREFBdUhGLEdBQUcsQ0FBQ3ZGLE9BQTNILG9CQUFwQjtBQUNILE9BTEQ7QUFPQXBELGNBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsY0FBeEIsRUFBd0NuRyxnQkFBeEMsQ0FBeUQsT0FBekQsRUFBa0UsWUFDbEU7QUFDSSxZQUFJNkksTUFBTSxHQUFRQyxRQUFRLENBQUMvSSxRQUFRLENBQUNvRyxjQUFULENBQXdCLFFBQXhCLEVBQWtDeUIsS0FBbkMsRUFBeUMsRUFBekMsQ0FBMUI7QUFDQSxZQUFJVyxRQUFRLG9CQUFnQixJQUFJQyxJQUFKLEdBQVdDLFdBQVgsRUFBaEIsQ0FBWjs7QUFDQSxZQUFJQyxHQUFHLEdBQVcsTUFBSSxDQUFDL0osV0FBTCxDQUFpQm9LLGNBQWpCLENBQWdDUixRQUFoQyxFQUEwQ00sTUFBMUMsQ0FBbEI7O0FBQ0EsY0FBSSxDQUFDdkosU0FBTCxDQUFlMkIsSUFBZixDQUFvQnlILEdBQUcsQ0FBQ0UsU0FBSixHQUFnQixxREFBaEIsbURBQWlIRixHQUFHLENBQUN2RixPQUFySCxvQkFBcEI7QUFDSCxPQU5EO0FBUUFwRCxjQUFRLENBQUNvRyxjQUFULENBQXdCLGVBQXhCLEVBQXlDbkcsZ0JBQXpDLENBQTBELE9BQTFELEVBQW1FLFlBQ25FO0FBQ0ksWUFBSTZJLE1BQU0sR0FBUUMsUUFBUSxDQUFDL0ksUUFBUSxDQUFDb0csY0FBVCxDQUF3QixRQUF4QixFQUFrQ3lCLEtBQW5DLEVBQXlDLEVBQXpDLENBQTFCO0FBQ0EsWUFBSW9CLFNBQVMsR0FBS2pKLFFBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsYUFBeEIsRUFBdUN5QixLQUF6RDtBQUNBLFlBQUlxQixHQUFHLHFCQUFzQkQsU0FBdEIsY0FBbUMsSUFBSVIsSUFBSixHQUFXQyxXQUFYLEVBQW5DLENBQVA7O0FBQ0EsWUFBSUMsR0FBRyxHQUFXLE1BQUksQ0FBQy9KLFdBQUwsQ0FBaUJ1SyxlQUFqQixDQUFpQ0QsR0FBakMsRUFBc0NELFNBQXRDLEVBQWlESCxNQUFqRCxDQUFsQjs7QUFDQSxjQUFJLENBQUN2SixTQUFMLENBQWUyQixJQUFmLENBQW9CeUgsR0FBRyxDQUFDRSxTQUFKLEdBQWdCLDJEQUFoQix5REFBNkhGLEdBQUcsQ0FBQ3ZGLE9BQWpJLG9CQUFwQjtBQUNILE9BUEQ7QUFTQXBELGNBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsaUJBQXhCLEVBQTJDbkcsZ0JBQTNDLENBQTRELE9BQTVELEVBQXFFLFlBQ3JFO0FBQ0ksWUFBSTZJLE1BQU0sR0FBUUMsUUFBUSxDQUFDL0ksUUFBUSxDQUFDb0csY0FBVCxDQUF3QixRQUF4QixFQUFrQ3lCLEtBQW5DLEVBQXlDLEVBQXpDLENBQTFCO0FBQ0EsWUFBSW9CLFNBQVMsR0FBS2pKLFFBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsYUFBeEIsRUFBdUN5QixLQUF6RDtBQUNBLFlBQUlxQixHQUFHLG9CQUFxQkQsU0FBckIsY0FBa0MsSUFBSVIsSUFBSixHQUFXQyxXQUFYLEVBQWxDLENBQVA7O0FBQ0EsWUFBSUMsR0FBRyxHQUFXLE1BQUksQ0FBQy9KLFdBQUwsQ0FBaUJ3Syw2QkFBakIsQ0FBK0NGLEdBQS9DLEVBQW9ERCxTQUFwRCxFQUErREgsTUFBL0QsQ0FBbEI7O0FBQ0EsY0FBSSxDQUFDdkosU0FBTCxDQUFlMkIsSUFBZixDQUFvQnlILEdBQUcsQ0FBQ0UsU0FBSixHQUFnQiw2REFBaEIsMkRBQWlJRixHQUFHLENBQUN2RixPQUFySSxvQkFBcEI7QUFDSCxPQVBEO0FBU0FwRCxjQUFRLENBQUNvRyxjQUFULENBQXdCLGdCQUF4QixFQUEwQ25HLGdCQUExQyxDQUEyRCxPQUEzRCxFQUFvRSxZQUNwRTtBQUNJLFlBQUlnSixTQUFTLEdBQUtqSixRQUFRLENBQUNvRyxjQUFULENBQXdCLGFBQXhCLEVBQXVDeUIsS0FBekQ7QUFDQSxZQUFJcUIsR0FBRyxtQkFBb0JELFNBQXBCLGNBQWlDLElBQUlSLElBQUosR0FBV0MsV0FBWCxFQUFqQyxDQUFQOztBQUNBLFlBQUlDLEdBQUcsR0FBVyxNQUFJLENBQUMvSixXQUFMLENBQWlCeUssZ0JBQWpCLENBQWtDSCxHQUFsQyxFQUF1Q0QsU0FBdkMsQ0FBbEI7O0FBQ0EsY0FBSSxDQUFDMUosU0FBTCxDQUFlMkIsSUFBZixDQUFvQnlILEdBQUcsQ0FBQ0UsU0FBSixHQUFnQiw0REFBaEIsMERBQStIRixHQUFHLENBQUN2RixPQUFuSSxvQkFBcEI7QUFDSCxPQU5EO0FBUUFwRCxjQUFRLENBQUNvRyxjQUFULENBQXdCLGdCQUF4QixFQUEwQ25HLGdCQUExQyxDQUEyRCxPQUEzRCxFQUFvRSxZQUNwRTtBQUNJLFlBQUlnSixTQUFTLEdBQUtqSixRQUFRLENBQUNvRyxjQUFULENBQXdCLGFBQXhCLEVBQXVDeUIsS0FBekQ7QUFDQSxZQUFJcUIsR0FBRyxzQkFBdUJELFNBQXZCLGNBQW9DLElBQUlSLElBQUosR0FBV0MsV0FBWCxFQUFwQyxDQUFQOztBQUNBLFlBQUlDLEdBQUcsR0FBVyxNQUFJLENBQUMvSixXQUFMLENBQWlCMEssZ0JBQWpCLENBQWtDSixHQUFsQyxFQUF1Q0QsU0FBdkMsQ0FBbEI7O0FBQ0EsY0FBSSxDQUFDMUosU0FBTCxDQUFlMkIsSUFBZixDQUFvQnlILEdBQUcsQ0FBQ0UsU0FBSixHQUFnQiw0REFBaEIsMERBQStIRixHQUFHLENBQUN2RixPQUFuSSxvQkFBcEI7QUFDSCxPQU5EO0FBUUFwRCxjQUFRLENBQUNvRyxjQUFULENBQXdCLGtCQUF4QixFQUE0Q25HLGdCQUE1QyxDQUE2RCxPQUE3RCxFQUFzRSxZQUN0RTtBQUNJLFlBQUk2SSxNQUFNLEdBQVFDLFFBQVEsQ0FBQy9JLFFBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsUUFBeEIsRUFBa0N5QixLQUFuQyxFQUF5QyxFQUF6QyxDQUExQjtBQUNBLFlBQUkwQixTQUFTLEdBQUtSLFFBQVEsQ0FBQy9JLFFBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsV0FBeEIsRUFBcUN5QixLQUF0QyxFQUE0QyxFQUE1QyxDQUExQjtBQUNBLFlBQUlvQixTQUFTLEdBQUtqSixRQUFRLENBQUNvRyxjQUFULENBQXdCLGFBQXhCLEVBQXVDeUIsS0FBekQ7QUFDQSxZQUFJcUIsR0FBRyxvQkFBcUJELFNBQXJCLGNBQWtDLElBQUlSLElBQUosR0FBV0MsV0FBWCxFQUFsQyxDQUFQOztBQUNBLFlBQUlDLEdBQUcsR0FBVyxNQUFJLENBQUMvSixXQUFMLENBQWlCNEssb0JBQWpCLENBQXNDTixHQUF0QyxFQUEyQ0QsU0FBM0MsRUFBc0RILE1BQXRELEVBQThEUyxTQUE5RCxDQUFsQjs7QUFDQSxjQUFJLENBQUNoSyxTQUFMLENBQWUyQixJQUFmLENBQW9CeUgsR0FBRyxDQUFDRSxTQUFKLEdBQWdCLDhEQUFoQiw0REFBbUlGLEdBQUcsQ0FBQ3ZGLE9BQXZJLG9CQUFwQjtBQUNILE9BUkQ7QUFVQXBELGNBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsZ0JBQXhCLEVBQTBDbkcsZ0JBQTFDLENBQTJELE9BQTNELEVBQW9FLFlBQ3BFO0FBQ0ksY0FBSSxDQUFDdEIsSUFBTCxDQUFVOEssZUFBVixDQUEwQixJQUExQjtBQUNILE9BSEQ7QUFLQXpKLGNBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsaUJBQXhCLEVBQTJDbkcsZ0JBQTNDLENBQTRELE9BQTVELEVBQXFFLFlBQ3JFO0FBQ0ksY0FBSSxDQUFDdEIsSUFBTCxDQUFVOEssZUFBVixDQUEwQixLQUExQjtBQUNILE9BSEQ7QUFLQXpKLGNBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsV0FBeEIsRUFBcUNuRyxnQkFBckMsQ0FBc0QsT0FBdEQsRUFBK0QsWUFDL0Q7QUFDSSxjQUFJLENBQUN0QixJQUFMLENBQVUrSyxpQkFBVjtBQUNILE9BSEQ7QUFLQTFKLGNBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsSUFBeEIsRUFBOEJuRyxnQkFBOUIsQ0FBK0MsT0FBL0MsRUFBd0QsWUFDeEQ7QUFDSSxjQUFJLENBQUN0QixJQUFMLENBQVV5RCx5QkFBVjs7QUFDQSxjQUFJLENBQUM3QyxTQUFMLENBQWUwQixLQUFmOztBQUNBLGNBQUksQ0FBQzFCLFNBQUwsQ0FBZW9LLFNBQWYsR0FBMkIsK0JBQTNCOztBQUNBLGNBQUksQ0FBQ3hJLHFCQUFMO0FBQ0gsT0FORDtBQVFBbkIsY0FBUSxDQUFDb0csY0FBVCxDQUF3QixXQUF4QixFQUFxQ25HLGdCQUFyQyxDQUFzRCxPQUF0RCxFQUErRCxZQUMvRDtBQUNJLGNBQUksQ0FBQ3RCLElBQUwsQ0FBVXlELHlCQUFWOztBQUNBLGNBQUksQ0FBQy9DLElBQUwsQ0FBVXlDLEtBQVY7O0FBQ0EsY0FBSSxDQUFDdkMsU0FBTCxDQUFlb0ssU0FBZixHQUEyQixpQkFBM0I7O0FBQ0EsY0FBSSxDQUFDeEkscUJBQUw7QUFDSCxPQU5EO0FBT0g7QUFoakJMO0FBQUE7QUFBQSx5Q0FtakJJO0FBQ0ksVUFBR08sWUFBWSxDQUFDa0ksT0FBYixDQUFxQixRQUFyQixDQUFILEVBQ0E7QUFDSSxhQUFLL0ssTUFBTCxHQUFjNkMsWUFBWSxDQUFDa0ksT0FBYixDQUFxQixRQUFyQixDQUFkO0FBQ0E1SixnQkFBUSxDQUFDb0csY0FBVCxDQUF3QixRQUF4QixFQUFrQ3lCLEtBQWxDLEdBQTBDLEtBQUtoSixNQUEvQztBQUNILE9BSkQsTUFNQTtBQUNJLGFBQUtBLE1BQUwsR0FBY21CLFFBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IsUUFBeEIsRUFBa0N5QixLQUFoRDtBQUNIOztBQUVELFVBQUduRyxZQUFZLENBQUNrSSxPQUFiLENBQXFCLGdCQUFyQixDQUFILEVBQ0E7QUFDSSxhQUFLOUssY0FBTCxHQUFzQjRDLFlBQVksQ0FBQ2tJLE9BQWIsQ0FBcUIsZ0JBQXJCLENBQXRCO0FBQ0E1SixnQkFBUSxDQUFDb0csY0FBVCxDQUF3QixnQkFBeEIsRUFBMEN5QixLQUExQyxHQUFrRCxLQUFLL0ksY0FBdkQ7QUFDSCxPQUpELE1BTUE7QUFDSSxhQUFLQSxjQUFMLEdBQXNCa0IsUUFBUSxDQUFDb0csY0FBVCxDQUF3QixnQkFBeEIsRUFBMEN5QixLQUFoRTtBQUNIOztBQUVELFdBQUszSSxpQkFBTCxHQUF5QmMsUUFBUSxDQUFDb0csY0FBVCxDQUF3QixrQkFBeEIsRUFBNEM2QixPQUE1QyxHQUFzRHZHLFlBQVksQ0FBQ2tJLE9BQWIsQ0FBcUIsa0JBQXJCLE1BQTZDLE1BQTdDLElBQXVELEtBQXRJO0FBQ0EsV0FBS3pLLHFCQUFMLEdBQTZCYSxRQUFRLENBQUNvRyxjQUFULENBQXdCLHNCQUF4QixFQUFnRDZCLE9BQWhELEdBQTBEdkcsWUFBWSxDQUFDa0ksT0FBYixDQUFxQixzQkFBckIsTUFBaUQsTUFBakQsSUFBMkQsS0FBbEo7QUFDQSxXQUFLeEssb0JBQUwsR0FBNEJZLFFBQVEsQ0FBQ29HLGNBQVQsQ0FBd0IscUJBQXhCLEVBQStDNkIsT0FBL0MsR0FBeUR2RyxZQUFZLENBQUNrSSxPQUFiLENBQXFCLHFCQUFyQixNQUFnRCxNQUFoRCxJQUEwRCxLQUEvSTs7QUFFQSxVQUFHbEksWUFBWSxDQUFDa0ksT0FBYixDQUFxQixRQUFyQixLQUFrQ2xJLFlBQVksQ0FBQ2tJLE9BQWIsQ0FBcUIsU0FBckIsQ0FBckMsRUFDQTtBQUNJLGFBQUs3SyxXQUFMLEdBQW1CLElBQUk4SywwRkFBSixDQUFZbkksWUFBWSxDQUFDa0ksT0FBYixDQUFxQixRQUFyQixDQUFaLEVBQTRDbEksWUFBWSxDQUFDa0ksT0FBYixDQUFxQixTQUFyQixDQUE1QyxDQUFuQjtBQUNIO0FBQ0o7QUFobEJMOztBQUFBO0FBQUE7QUFtbEJBOzs7O0FBR0E1SixRQUFRLENBQUNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxZQUM5QztBQUNJLE1BQ0E7QUFDSSxRQUFJekIsR0FBRyxHQUFXc0wsT0FBbEI7QUFDQSxRQUFJckwsT0FBTyxHQUFPLElBQUlzTCx5RkFBSixDQUFXL0osUUFBUSxDQUFDb0csY0FBVCxDQUF3QixnQkFBeEIsQ0FBWCw0REFBbEI7QUFDQSxRQUFJMUgsUUFBUSxHQUFNLElBQUlxTCx5RkFBSixDQUFXL0osUUFBUSxDQUFDb0csY0FBVCxDQUF3QixVQUF4QixDQUFYLENBQWxCO0FBQ0EsUUFBSTRELEdBQUcsR0FBVyxJQUFJekwsUUFBSixDQUFhQyxHQUFiLEVBQWtCQyxPQUFsQixFQUEyQkMsUUFBM0IsQ0FBbEI7QUFDQXNMLE9BQUcsQ0FBQ2hKLEtBQUo7QUFDSCxHQVBELENBUUEsT0FBTWlKLEdBQU4sRUFDQTtBQUNJSCxXQUFPLENBQUNJLEtBQVIsQ0FBY0QsR0FBZDtBQUNIO0FBQ0osQ0FkRCxFOzs7Ozs7Ozs7OztBQ3huQkE7QUFDQSxJQUFJLElBQXlEO0FBQzdEO0FBQ0EsTUFBTSxFQUs4QjtBQUNwQyxDQUFDO0FBQ0Qsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLEVBQTBCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixnQkFBZ0I7QUFDN0M7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsZ0JBQWdCO0FBQzdDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw4QkFBOEI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDJCQUEyQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixjQUFjO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsS0FBSztBQUM3QjtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw0QkFBNEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0QkFBNEI7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDRCQUE0QjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix1Q0FBdUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVDQUF1QztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixzQkFBc0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdDQUF3QztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxnQ0FBZ0M7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGtCQUFrQjtBQUNsRjtBQUNBLHlEQUF5RCxjQUFjO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGlDQUFpQztBQUNsRix3SEFBd0gsbUJBQW1CLEVBQUU7QUFDN0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLDBCQUEwQixFQUFFO0FBQy9ELHlDQUF5QyxlQUFlO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsK0RBQStEO0FBQzdIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsdUJBQXVCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRGQUE0RixxREFBcUQsRUFBRTs7QUFFbko7QUFDQSwrRkFBK0YsMkRBQTJELEVBQUU7O0FBRTVKO0FBQ0EsZ0dBQWdHLDZEQUE2RCxFQUFFOztBQUUvSjtBQUNBLHFHQUFxRyxtRUFBbUUsRUFBRTs7QUFFMUs7QUFDQSwyR0FBMkcsMEVBQTBFLEVBQUU7O0FBRXZMLHdHQUF3Ryx1RUFBdUUsRUFBRTs7QUFFakwsZ0dBQWdHLCtEQUErRCxFQUFFOztBQUVqSyxrR0FBa0csaUVBQWlFLEVBQUU7O0FBRXJLO0FBQ0EseUdBQXlHLHVFQUF1RSxFQUFFOztBQUVsTDtBQUNBLHVHQUF1RyxxRUFBcUUsRUFBRTs7QUFFOUsseUdBQXlHLHVFQUF1RSxFQUFFOztBQUVsTCxtSEFBbUgsaUZBQWlGLEVBQUU7O0FBRXRNLDZHQUE2RywyRUFBMkUsRUFBRTs7QUFFMUw7QUFDQSwrR0FBK0csbUZBQW1GLEVBQUU7O0FBRXBNLHdHQUF3Ryw0RUFBNEUsRUFBRTs7QUFFdEw7QUFDQSw0R0FBNEcseUVBQXlFLEVBQUU7O0FBRXZMO0FBQ0EsbUdBQW1HLG1FQUFtRSxFQUFFOztBQUV4SztBQUNBLHdHQUF3Ryw4RUFBOEUsRUFBRTs7QUFFeEw7QUFDQSxrSEFBa0gsOEZBQThGLEVBQUU7O0FBRWxOO0FBQ0EsMkdBQTJHLDRFQUE0RSxFQUFFOztBQUV6TCw0R0FBNEcsNkVBQTZFLEVBQUU7O0FBRTNMLDhHQUE4RywrRUFBK0UsRUFBRTs7QUFFL0wsd0dBQXdHLHlFQUF5RSxFQUFFOztBQUVuTCxxSEFBcUgsc0ZBQXNGLEVBQUU7O0FBRTdNO0FBQ0EsOEdBQThHLDRFQUE0RSxFQUFFOztBQUU1TCx3R0FBd0csc0VBQXNFLEVBQUU7O0FBRWhMOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUNBQXlDLGNBQWM7O0FBRXZELHVCQUF1QixxQkFBcUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsaUJBQWlCO0FBQzVDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0Isa0JBQWtCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOzs7QUFHTDtBQUNBLDBCQUEwQjs7QUFFMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1QixrQkFBa0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsYUFBYTtBQUNwQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsUUFBUTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsUUFBUTtBQUN2QztBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiLCtCQUErQixjQUFjO0FBQzdDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQ0FBMEMsUUFBUTtBQUNsRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1QkFBdUIsWUFBWTtBQUNuQywyQkFBMkIsT0FBTztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1QixPQUFPO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQSx1QkFBdUIsWUFBWTtBQUNuQywyQkFBMkIsT0FBTztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1QkFBdUIsT0FBTztBQUM5QjtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkMsMkJBQTJCLE9BQU87QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHVCQUF1Qix1QkFBdUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsc0JBQXNCO0FBQzdDOztBQUVBLDJCQUEyQixRQUFRO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx1QkFBdUIsdUJBQXVCO0FBQzlDO0FBQ0E7O0FBRUEsMkJBQTJCLFFBQVE7QUFDbkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQSwyQkFBMkIsaUJBQWlCOztBQUU1Qzs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBLDJCQUEyQixzQkFBc0I7QUFDakQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3Qzs7QUFFQSwyQkFBMkIsc0JBQXNCO0FBQ2pEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtEQUFrRCxrQkFBa0I7O0FBRXBFO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRCQUE0QixZQUFZO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxtQkFBbUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLCtCQUErQiwwQ0FBMEM7O0FBRXpFO0FBQ0EsMEJBQTBCLHFEQUFxRDs7QUFFL0U7QUFDQSx1QkFBdUIsWUFBWTtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSyxNQUFNLEVBQUU7OztBQUdiLENBQUM7OztBQUdELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxZQUFZO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLFNBQVM7QUFDaEM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0Msc0JBQXNCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixTQUFTO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsaUJBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsNEJBQTRCO0FBQzdDO0FBQ0E7O0FBRUEsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxZQUFZLGVBQWU7QUFDM0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscUJBQXFCLGdCQUFnQjtBQUNyQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTs7QUFFQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLDZCQUE2QjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSw2QkFBNkI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLFNBQVM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxXQUFXO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsV0FBVztBQUMvRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsT0FBTztBQUMxQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxtQkFBbUIsT0FBTztBQUMxQjs7QUFFQTtBQUNBOztBQUVBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0E7O0FBRUEsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixHQUFHO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQixXQUFXO0FBQzlCOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixXQUFXO0FBQzlCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1Qjs7QUFFQSxrQ0FBa0M7QUFDbEMsc0NBQXNDO0FBQ3RDOztBQUVBO0FBQ0EscUJBQXFCLE9BQU87QUFDNUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsbUJBQW1CLE9BQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QixjQUFjO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0IsUUFBUTtBQUN2QztBQUNBOztBQUVBLGlCQUFpQixPQUFPO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFCQUFxQixPQUFPO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkJBQTZCLG1DQUFtQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsK0NBQStDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHFCQUFxQixzQ0FBc0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHlCQUF5QjtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsY0FBYztBQUNuQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLFFBQVE7QUFDL0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUNBQWlDLFFBQVE7QUFDekM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLDZCQUE2QixtQ0FBbUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNkJBQTZCLG1DQUFtQztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDZCQUE2QixtQ0FBbUM7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkIsbUNBQW1DO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QiwwQkFBMEI7QUFDakQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGdDQUFnQztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUNBQWlDLFFBQVE7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLFlBQVk7QUFDL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGdCQUFnQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixvQkFBb0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixnQkFBZ0I7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIsUUFBUTtBQUNwQztBQUNBLDZCQUE2QixRQUFRO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEdBQUcsTUFBSzs7QUFFVCw0QkFBNEI7O0FBRTVCLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsa0JBQWtCLGlFQUFpRSxRQUFRLHFCQUFxQixpQkFBaUIsd0VBQXdFLGlEQUFpRCxrQkFBa0IsdURBQXVELGdCQUFnQixxQkFBcUIsUUFBUSx3REFBd0Q7QUFDcmIsV0FBVyw2REFBNkQsS0FBSyxZQUFZLFdBQVcsdUJBQXVCLE1BQU0sa0JBQWtCLHNCQUFzQixXQUFXLFFBQVEsSUFBSSw2QkFBNkIsd0RBQXdELDBCQUEwQiw4R0FBOEc7QUFDN1osa0RBQWtELDZEQUE2RCxTQUFTLGVBQWUsaUJBQWlCLDJCQUEyQixrQ0FBa0MsbUNBQW1DLG1DQUFtQyx3REFBd0Qsb0VBQW9FLFFBQVEsSUFBSSxjQUFjLFdBQVcsUUFBUSxJQUFJLHVCQUF1QixVQUFVLElBQUk7QUFDN2UsZUFBZSxvQ0FBb0MsbUNBQW1DLG1DQUFtQyw2Q0FBNkMsNkNBQTZDLHdEQUF3RCxzQkFBc0IsSUFBSSxtQ0FBbUMsUUFBUSxVQUFVLGdDQUFnQyxhQUFhLFNBQVMsV0FBVyxXQUFXLFFBQVEsa0JBQWtCLG1CQUFtQixhQUFhLGNBQWMsRUFBRTtBQUNoZixVQUFVLFlBQVksd0JBQXdCLFlBQVksS0FBSyxzQkFBc0IsVUFBVSx3REFBd0QsV0FBVyxPQUFPLGdDQUFnQyxNQUFNLDhDQUE4QyxrRUFBa0UseURBQXlELFFBQVEsbUJBQW1CLGNBQWMsV0FBVyxVQUFVLFFBQVEsUUFBUSxVQUFVLHNCQUFzQixZQUFZO0FBQ2xmLGlCQUFpQixlQUFlLEtBQUssWUFBWSxXQUFXLGlCQUFpQixRQUFRLEtBQUssOENBQThDLFNBQVMsSUFBSSxNQUFNLHdCQUF3QixzQkFBc0IsV0FBVyxXQUFXLFVBQVUsUUFBUSxRQUFRLElBQUksMENBQTBDLEtBQUssaUJBQWlCLE1BQU0sTUFBTSwyQkFBMkIsWUFBWSxvRUFBb0UsT0FBTyxXQUFXO0FBQ3RjLGFBQWEsVUFBVSx5QkFBeUIsbUJBQW1CLE1BQU0seUJBQXlCLG1CQUFtQixNQUFNLDJCQUEyQixpQkFBaUIsTUFBTSx1QkFBdUIscUJBQXFCLFNBQVMsOERBQThELGNBQWMsaUJBQWlCLE1BQU0sdUVBQXVFLDBCQUEwQixRQUFRLElBQUk7QUFDbGIsVUFBVSxhQUFhLDJCQUEyQixZQUFZLDRFQUE0RSxPQUFPLFVBQVUseUJBQXlCLG1CQUFtQixNQUFNLHlCQUF5QixtQkFBbUIsTUFBTSwyQkFBMkIsaUJBQWlCLE1BQU0sdUJBQXVCLHFCQUFxQixTQUFTLDhEQUE4RCxjQUFjLGlCQUFpQixNQUFNO0FBQ3pjLENBQUMsMEJBQTBCLFlBQVksZUFBZSxhQUFhLGdCQUFnQixTQUFTLFNBQVMsb0JBQW9CLFNBQVMsS0FBSyxVQUFVLGFBQWEsUUFBUSxJQUFJLHFHQUFxRyx1Q0FBdUMsb0JBQW9CLHVCQUF1QixhQUFhLFFBQVEsSUFBSTtBQUMxWCxtQkFBbUIsSUFBSSx5SEFBeUgsU0FBUyxrQkFBa0IsU0FBUyxLQUFLLFVBQVUsYUFBYSxRQUFRLElBQUksNERBQTRELFNBQVMsa0JBQWtCLEtBQUssK0JBQStCLG9CQUFvQixhQUFhLFFBQVEsSUFBSSxxQ0FBcUMsU0FBUyxjQUFjLE9BQU8sdUNBQXVDO0FBQzllLGdDQUFnQyxxREFBcUQsc0NBQXNDLG9FQUFvRSxzQkFBc0IseUZBQXlGLDhFQUE4RSxTQUFTLGtCQUFrQixVQUFVLGdEQUFnRDtBQUNqZCxDQUFDLFVBQVUsNkJBQTZCLDJCQUEyQix3RUFBd0UsU0FBUyxPQUFPLFFBQVEsYUFBYSxRQUFRLElBQUksTUFBTSw2QkFBNkIsMEVBQTBFLFlBQVksWUFBWSxZQUFZLFdBQVcscUJBQXFCLE9BQU8sdUJBQXVCLE1BQU0sOEJBQThCLHdCQUF3QixTQUFTLE9BQU8sUUFBUTtBQUMvZCxVQUFVLFdBQVcscVFBQXFRLFdBQVcsTUFBTSxNQUFNLFlBQVksWUFBWSxXQUFXLHdCQUF3QixLQUFLLHVHQUF1RyxXQUFXLE1BQU07QUFDemUsK0JBQStCLE1BQU0sWUFBWSxZQUFZLFdBQVcscUJBQXFCLEtBQUssT0FBTyx1QkFBdUIsTUFBTSw2QkFBNkIsd0JBQXdCLDBGQUEwRixpQkFBaUIsc0JBQXNCLHlFQUF5RSxTQUFTLE9BQU8sUUFBUSxhQUFhLFFBQVEsV0FBVyxNQUFNLGdCQUFnQixVQUFVLFdBQVc7QUFDeGUsYUFBYSxRQUFRLGFBQWEsTUFBTSxNQUFNLFlBQVksWUFBWSxXQUFXLG9DQUFvQyxNQUFNLE9BQU8sdUJBQXVCLE1BQU0sK0JBQStCLGdCQUFnQixTQUFTLE9BQU8sUUFBUSxhQUFhLFFBQVEsV0FBVyxpRkFBaUYsT0FBTyw4QkFBOEIsTUFBTSx1QkFBdUIscUJBQXFCLFNBQVMsOERBQThEO0FBQ3JmLGdCQUFnQixnQkFBZ0IsU0FBUyxPQUFPLFFBQVEsYUFBYSxvQkFBb0IsUUFBUSxlQUFlLGtFQUFrRSxPQUFPLGtDQUFrQyxNQUFNLDZFQUE2RSxTQUFTLGdCQUFnQixxQkFBcUIsZ0JBQWdCLGtIQUFrSCxnQkFBZ0I7QUFDOWUsVUFBVSxnQkFBZ0IsNEJBQTRCLHVKQUF1SixnQkFBZ0IsV0FBVywrRUFBK0UsbUJBQW1CLGdCQUFnQixtQkFBbUIsZ0RBQWdELGtCQUFrQixtQkFBbUIsbUJBQW1CO0FBQ3JkLDZCQUE2QixlQUFlLDhCQUE4QixlQUFlLHdCQUF3QixVQUFVLHNDQUFzQyxlQUFlLDhCQUE4QixlQUFlLHdCQUF3QixVQUFVLHNDQUFzQyxlQUFlLDRCQUE0QixlQUFlLHNCQUFzQixTQUFTLHNDQUFzQyxlQUFlLDhCQUE4QixlQUFlO0FBQ2hlLFNBQVMsc0NBQXNDLGdCQUFnQiwwQkFBMEIscURBQXFELHFCQUFxQiw4Q0FBOEMsdUVBQXVFLHNCQUFzQix3REFBd0QsZ0ZBQWdGLGlCQUFpQixVQUFVLDBCQUEwQjtBQUMzZSxvQkFBb0Isd0JBQXdCLG1DQUFtQyxpQ0FBaUMsc0NBQXNDLHFCQUFxQixVQUFVLGtEQUFrRCx1REFBdUQsd0JBQXdCLDJEQUEyRCx1REFBdUQsc0NBQXNDLHVCQUF1QixVQUFVO0FBQy9lLHVEQUF1RCxrRUFBa0Usd0JBQXdCLHVFQUF1RSxrRUFBa0Usc0NBQXNDLGdCQUFnQiw4QkFBOEIsY0FBYyxXQUFXLHlFQUF5RTtBQUNoZCxzTEFBc0wscUJBQXFCLG1CQUFtQixNQUFNLDJNQUEyTSxNQUFNO0FBQ3JiLHlJQUF5SSxNQUFNLDRDQUE0QywyRUFBMkUsSUFBSSxtRUFBbUUsOENBQThDLFNBQVMsZ0JBQWdCLHVCQUF1QixPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sUUFBUSxLQUFLO0FBQzNkLHNOQUFzTixlQUFlLGVBQWUsZUFBZSxlQUFlLGVBQWUsU0FBUyxvQkFBb0IsTUFBTSx1QkFBdUIsWUFBWSxXQUFXLHVCQUF1QixLQUFLLGtCQUFrQixzQkFBc0IsV0FBVyxRQUFRLElBQUksNkJBQTZCLFNBQVM7QUFDbmYsS0FBSyx1REFBdUQsZ0dBQWdHLG1HQUFtRyw2REFBNkQsT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLE9BQU8sT0FBTyxPQUFPLFFBQVEsSUFBSTtBQUNoWSxpR0FBaUcsZUFBZSxlQUFlLGVBQWUsZUFBZSxlQUFlLGVBQWUsZUFBZSxlQUFlLFNBQVMsZ0JBQWdCLHNCQUFzQixvQkFBb0IsV0FBVywrRUFBK0UsUUFBUSxLQUFLLE1BQU0sYUFBYSxRQUFRLElBQUksTUFBTSxVQUFVLDRDQUE0QztBQUM5ZCw2QkFBNkIsUUFBUSxJQUFJLHdDQUF3QyxRQUFRLElBQUksYUFBYSxJQUFJLDZCQUE2QixRQUFRLElBQUksYUFBYSxJQUFJLDBDQUEwQyxRQUFRLElBQUksYUFBYSxJQUFJLGlHQUFpRyx3QkFBd0IsU0FBUyxZQUFZO0FBQzdYO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiw4QkFBOEIsbUZBQW1GLG9EQUFvRCxTQUFTO0FBQzlLLHFHQUFxRyxTQUFTLENBQUM7OztBQUcvRyxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsS0FBSztBQUNMLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBLHdDQUF3QyxXQUFXO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQyxrQkFBa0I7QUFDbkQ7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGlCQUFpQjtBQUN6QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUEsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixTQUFTO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNEdBQTRHLDJCQUEyQixFQUFFO0FBQ3pJLDZHQUE2Ryw0QkFBNEIsRUFBRTtBQUMzSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlHQUF5Ryx3QkFBd0IsRUFBRTtBQUNuSSxzR0FBc0cscUJBQXFCLEVBQUU7QUFDN0gsa0hBQWtILGlDQUFpQyxFQUFFO0FBQ3JKLDBHQUEwRyx5QkFBeUIsRUFBRTtBQUNySSxvR0FBb0csbUJBQW1CLEVBQUU7QUFDekg7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Q0FBOEM7QUFDOUM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0dBQWdHLGVBQWUsRUFBRTtBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0Qjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUdBQXVHLHNCQUFzQixFQUFFO0FBQy9IO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEOztBQUV0RDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwR0FBMEcseUJBQXlCLEVBQUU7QUFDckksMEdBQTBHLHlCQUF5QixFQUFFO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnR0FBZ0csZUFBZSxFQUFFO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxhQUFhO0FBQ3RGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsNEVBQTRFLGVBQWU7QUFDM0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSw0RUFBNEUsZUFBZTtBQUMzRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLDRFQUE0RSxlQUFlO0FBQzNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsNEVBQTRFLGVBQWU7QUFDM0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0dBQWdHLGVBQWUsRUFBRTtBQUNqSCxzR0FBc0cscUJBQXFCLEVBQUU7QUFDN0gsc0dBQXNHLHFCQUFxQixFQUFFO0FBQzdILHlHQUF5Ryx3QkFBd0IsRUFBRTtBQUNuSSxpR0FBaUcsZ0JBQWdCLEVBQUU7QUFDbkg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDLEdBQUc7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjs7QUFFcEIsNEJBQTRCOztBQUU1Qiw0Q0FBNEM7O0FBRTVDLDRCQUE0QjtBQUM1Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7O0FBRWhEO0FBQ0EsS0FBSzs7QUFFTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEU7O0FBRTFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87OztBQUdQOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFHQUFxRyxvQkFBb0IsRUFBRTtBQUMzSCxvR0FBb0csbUJBQW1CLEVBQUU7QUFDekgscUdBQXFHLG9CQUFvQixFQUFFO0FBQzNILGtHQUFrRyxpQkFBaUIsRUFBRTtBQUNySCxzR0FBc0cscUJBQXFCLEVBQUU7QUFDN0gsK0dBQStHLDhCQUE4QixFQUFFO0FBQy9JLHlHQUF5Ryx3QkFBd0IsRUFBRTtBQUNuSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQyxHQUFHOztBQUVKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQyxHQUFHOztBQUVKO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUdBQW1HLGtCQUFrQixFQUFFO0FBQ3ZILCtHQUErRyw4QkFBOEIsRUFBRTtBQUMvSSx1R0FBdUcsc0JBQXNCLEVBQUU7QUFDL0gsNEdBQTRHLDJCQUEyQixFQUFFO0FBQ3pJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BOztBQUVBLGtCQUFrQjs7QUFFbEIsK2hCQUEraEI7QUFDL2hCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlDQUF5Qzs7QUFFekM7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUMsR0FBRztBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRHQUE0RywyQkFBMkIsRUFBRTtBQUN6SSw2R0FBNkcsNEJBQTRCLEVBQUU7QUFDM0kscUdBQXFHLG9CQUFvQixFQUFFO0FBQzNILHFHQUFxRyxvQkFBb0IsRUFBRTtBQUMzSCw2R0FBNkcsNEJBQTRCLEVBQUU7QUFDM0ksMEdBQTBHLHlCQUF5QixFQUFFO0FBQ3JJLCtHQUErRyw4QkFBOEIsRUFBRTtBQUMvSSx5R0FBeUcsd0JBQXdCLEVBQUU7QUFDbkksc0hBQXNILHFDQUFxQyxFQUFFO0FBQzdKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCO0FBQ0E7O0FBRUEsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qjs7QUFFeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQyxHQUFHO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUMsR0FBRztBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQyxHQUFHO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvR0FBb0csbUJBQW1CLEVBQUU7QUFDekgsb0dBQW9HLG1CQUFtQixFQUFFO0FBQ3pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkdBQTJHLDBCQUEwQixFQUFFO0FBQ3ZJLDRHQUE0RywyQkFBMkIsRUFBRTtBQUN6SSxvR0FBb0csbUJBQW1CLEVBQUU7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEOztBQUV4RDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVHQUF1RyxzQkFBc0IsRUFBRTtBQUMvSCw4R0FBOEcsNkJBQTZCLEVBQUU7QUFDN0ksK0dBQStHLDhCQUE4QixFQUFFO0FBQy9JLDRHQUE0RywyQkFBMkIsRUFBRTtBQUN6SSw2R0FBNkcsNEJBQTRCLEVBQUU7QUFDM0ksMkhBQTJILDBDQUEwQyxFQUFFO0FBQ3ZLLDhHQUE4Ryw2QkFBNkIsRUFBRTtBQUM3SSw4R0FBOEcsNkJBQTZCLEVBQUU7QUFDN0ksa0hBQWtILGlDQUFpQyxFQUFFO0FBQ3JKLHlHQUF5Ryx3QkFBd0IsRUFBRTtBQUNuSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5R0FBeUcsd0JBQXdCLEVBQUU7QUFDbkksMEdBQTBHLHlCQUF5QixFQUFFO0FBQ3JJLGlHQUFpRyxnQkFBZ0IsRUFBRTtBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUVBQXlFLGFBQWE7QUFDdEY7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUdBQXlHLHdCQUF3QixFQUFFO0FBQ25JLDBHQUEwRyx5QkFBeUIsRUFBRTtBQUNySSxrSEFBa0gsaUNBQWlDLEVBQUU7QUFDckosbUhBQW1ILGtDQUFrQyxFQUFFO0FBQ3ZKLG1IQUFtSCxrQ0FBa0MsRUFBRTtBQUN2SixvSEFBb0gsbUNBQW1DLEVBQUU7QUFDekosdUdBQXVHLHNCQUFzQixFQUFFO0FBQy9ILHdHQUF3Ryx1QkFBdUIsRUFBRTtBQUNqSSwyR0FBMkcsMEJBQTBCLEVBQUU7QUFDdkksMEdBQTBHLHlCQUF5QixFQUFFO0FBQ3JJLHlHQUF5Ryx3QkFBd0IsRUFBRTtBQUNuSSw2R0FBNkcsNEJBQTRCLEVBQUU7QUFDM0ksOEdBQThHLDZCQUE2QixFQUFFO0FBQzdJLDhHQUE4Ryw2QkFBNkIsRUFBRTtBQUM3SSx3R0FBd0csdUJBQXVCLEVBQUU7QUFDakk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RkFBdUY7O0FBRXZGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUscUVBQXFFLDZFQUE2RTtBQUMvTjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVFQUF1RSxhQUFhO0FBQ3BGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdHQUF3Ryx1QkFBdUIsRUFBRTtBQUNqSTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5R0FBeUcsd0JBQXdCLEVBQUU7QUFDbkk7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUdBQWlHLGdCQUFnQixFQUFFO0FBQ25IO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2R0FBNkcsNEJBQTRCLEVBQUU7QUFDM0ksbUhBQW1ILGtDQUFrQyxFQUFFO0FBQ3ZKLHdHQUF3Ryx1QkFBdUIsRUFBRTtBQUNqSSw4R0FBOEcsNkJBQTZCLEVBQUU7QUFDN0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87O0FBRVA7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1R0FBdUcsc0JBQXNCLEVBQUU7QUFDL0gsb0dBQW9HLG1CQUFtQixFQUFFO0FBQ3pILCtHQUErRyw4QkFBOEIsRUFBRTtBQUMvSSxrSEFBa0gsaUNBQWlDLEVBQUU7QUFDcko7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSw4REFBOEQ7O0FBRTlELDhEQUE4RDs7QUFFOUQ7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsNERBQTREOztBQUU1RCw0REFBNEQ7O0FBRTVEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLDJEQUEyRDs7QUFFM0QsMkRBQTJEOztBQUUzRDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUVBQXVFLGFBQWE7QUFDcEY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNkZBQTZGLFlBQVksRUFBRTtBQUMzRyxxR0FBcUcsb0JBQW9CLEVBQUU7QUFDM0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQzs7QUFFL0M7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCOztBQUU1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLElBQUksUUFBUSxJQUFJLFFBQVEsSUFBSSxRQUFRLElBQUk7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSw2QkFBNkI7O0FBRTdCLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EOztBQUVwRDs7QUFFQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCOztBQUV2QjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtCQUErQjs7QUFFL0I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1HQUFtRzs7QUFFbkc7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPOztBQUVQLDJCQUEyQjs7O0FBRzNCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7O0FBR1A7O0FBRUE7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOzs7QUFHUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQ0FBc0M7O0FBRXRDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBOztBQUVBLG1FQUFtRTs7QUFFbkU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLEdBQUc7O0FBRVY7QUFDQTtBQUNBLHFDQUFxQzs7QUFFckMsb0RBQW9EOztBQUVwRCxpREFBaUQ7O0FBRWpELEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUOztBQUVBO0FBQ0EsU0FBUztBQUNUOzs7QUFHQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qzs7QUFFdkMsb0RBQW9EOztBQUVwRCwrQ0FBK0M7OztBQUcvQztBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOzs7QUFHUCwrRkFBK0Y7O0FBRS9GO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOzs7QUFHUCw4RkFBOEY7O0FBRTlGO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOzs7QUFHUCwyRkFBMkY7O0FBRTNGO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOzs7QUFHUCw2RkFBNkY7O0FBRTdGO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOzs7QUFHUCw2RkFBNkY7O0FBRTdGO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOzs7QUFHUCw2RkFBNkY7O0FBRTdGO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQSxXQUFXO0FBQ1gsMkVBQTJFOzs7QUFHM0U7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsMEhBQTBIOzs7QUFHMUg7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUwsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsK0NBQStDOztBQUUvQztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJDQUEyQzs7QUFFM0M7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixXQUFXO0FBQ1g7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsYUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7O0FBR0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQSw4Q0FBOEM7OztBQUc5Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTOzs7QUFHVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUwsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE9BQU87OztBQUdQO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw2RUFBNkU7O0FBRTdFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87O0FBRVA7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOzs7O0FBSUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1HQUFtRyxrQkFBa0IsRUFBRTtBQUN2SCxpR0FBaUcsZ0JBQWdCLEVBQUU7QUFDbkgsMEdBQTBHLHlCQUF5QixFQUFFO0FBQ3JJLHlHQUF5Ryx3QkFBd0IsRUFBRTtBQUNuSSwwR0FBMEcseUJBQXlCLEVBQUU7QUFDckkscUdBQXFHLG9CQUFvQixFQUFFO0FBQzNILDhHQUE4Ryw2QkFBNkIsRUFBRTtBQUM3SSw4R0FBOEcsNkJBQTZCLEVBQUU7QUFDN0ksbUdBQW1HLGtCQUFrQixFQUFFO0FBQ3ZILDRHQUE0RywyQkFBMkIsRUFBRTtBQUN6STtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQztBQUNBOztBQUVBLCtCQUErQjtBQUMvQjtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBOztBQUVBLHFCQUFxQjtBQUNyQjtBQUNBOztBQUVBLDhCQUE4QjtBQUM5QjtBQUNBOztBQUVBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkI7QUFDN0I7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUI7QUFDQTs7QUFFQSxxQ0FBcUM7QUFDckM7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakM7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBOztBQUVBLHdDQUF3QztBQUN4QztBQUNBO0FBQ0E7O0FBRUEscUNBQXFDO0FBQ3JDO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQSxrRkFBa0Y7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekI7QUFDQTs7QUFFQSx5Q0FBeUM7QUFDekM7QUFDQTs7QUFFQSw0Q0FBNEM7QUFDNUM7QUFDQTs7QUFFQSxrQ0FBa0M7QUFDbEM7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUMsR0FBRztBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVHQUF1RyxzQkFBc0IsRUFBRTtBQUMvSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhEQUE4RDs7QUFFOUQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLHVGQUF1Rjs7QUFFdkY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsU0FBUzs7O0FBR1Q7QUFDQTtBQUNBLCtIQUErSDs7QUFFL0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsNkNBQTZDOztBQUU3Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUVELE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvR0FBb0csbUJBQW1CLEVBQUU7QUFDekg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7O0FBR1AsZ0dBQWdHOztBQUVoRztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOzs7QUFHUCx5RkFBeUY7O0FBRXpGO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0dBQStHLDhCQUE4QixFQUFFO0FBQy9JLGdIQUFnSCwrQkFBK0IsRUFBRTtBQUNqSix5R0FBeUcsd0JBQXdCLEVBQUU7QUFDbkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsT0FBTzs7QUFFUCxVQUFVO0FBQ1YsQ0FBQztBQUNELDJDQUEyQyxjQUFjLHU1bXZCIiwiZmlsZSI6Ik1vdGVsUG9zLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh3aW5kb3csIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIiBcdGZ1bmN0aW9uIGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKSB7XG4gXHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHR9XG4gXHR2YXIgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2sgPSB3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0d2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXSA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdFx0aWYgKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHR9IDtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gXHRcdHNjcmlwdC5jaGFyc2V0ID0gXCJ1dGYtOFwiO1xuIFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xuIFx0XHRpZiAobnVsbCkgc2NyaXB0LmNyb3NzT3JpZ2luID0gbnVsbDtcbiBcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbiBcdFx0XHR9XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcbiBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XG4gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiBcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuIFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4gXHRcdFx0XHRcdHJlamVjdChcbiBcdFx0XHRcdFx0XHRuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpXG4gXHRcdFx0XHRcdCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbiBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xuIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XG4gXHRcdFx0XHRcdFx0cmV0dXJuO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcImQ4YTU1ZTY5Y2ViMWRlOGE5OTcwXCI7XG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCIgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwidFwiXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbiBcdFx0XHRcdHRocm93IGVycjtcbiBcdFx0XHR9KTtcblxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4gXHRcdFx0XHRcdGlmICghaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9O1xuIFx0XHRmbi50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0XHRpZiAobW9kZSAmIDEpIHZhbHVlID0gZm4odmFsdWUpO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnQodmFsdWUsIG1vZGUgJiB+MSk7XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0fSxcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcblxuIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXG4gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcbiBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdGlmICghbCkgcmV0dXJuIGhvdFN0YXR1cztcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XG4gXHRcdFx0fSxcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdH0sXG5cbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbiBcdFx0XHRkYXRhOiBob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cbiBcdFx0fTtcbiBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuIFx0XHRyZXR1cm4gaG90O1xuIFx0fVxuXG4gXHR2YXIgaG90U3RhdHVzSGFuZGxlcnMgPSBbXTtcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcblxuIFx0ZnVuY3Rpb24gaG90U2V0U3RhdHVzKG5ld1N0YXR1cykge1xuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XG4gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xuIFx0fVxuXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XG4gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdERlZmVycmVkO1xuXG4gXHQvLyBUaGUgdXBkYXRlIGluZm9cbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbiBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIikge1xuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuIFx0XHR9XG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xuIFx0XHRcdGlmICghdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRcdFx0cmV0dXJuIG51bGw7XG4gXHRcdFx0fVxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwID0ge307XG4gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XG5cbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRob3REZWZlcnJlZCA9IHtcbiBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcbiBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcbiBcdFx0XHRcdH07XG4gXHRcdFx0fSk7XG4gXHRcdFx0aG90VXBkYXRlID0ge307XG4gXHRcdFx0dmFyIGNodW5rSWQgPSBcIk1vdGVsUG9zXCI7XG4gXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvbmUtYmxvY2tzXG4gXHRcdFx0e1xuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cbiBcdFx0XHRcdGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHRcdH1cbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmXG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nID09PSAwICYmXG4gXHRcdFx0XHRob3RXYWl0aW5nRmlsZXMgPT09IDBcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmV0dXJuIHByb21pc2U7XG4gXHRcdH0pO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxuIFx0XHRcdHJldHVybjtcbiBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcbiBcdFx0Zm9yICh2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmICgtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xuIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdH1cbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XG4gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xuIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XG4gXHRcdGlmICghZGVmZXJyZWQpIHJldHVybjtcbiBcdFx0aWYgKGhvdEFwcGx5T25VcGRhdGUpIHtcbiBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xuIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxuIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcbiBcdFx0XHRQcm9taXNlLnJlc29sdmUoKVxuIFx0XHRcdFx0LnRoZW4oZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBob3RBcHBseShob3RBcHBseU9uVXBkYXRlKTtcbiBcdFx0XHRcdH0pXG4gXHRcdFx0XHQudGhlbihcbiBcdFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuIFx0XHRcdFx0XHR9LFxuIFx0XHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcbiBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0KTtcbiBcdFx0fSBlbHNlIHtcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcbiBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKVxuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcbiBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiBcdFx0dmFyIGNiO1xuIFx0XHR2YXIgaTtcbiBcdFx0dmFyIGo7XG4gXHRcdHZhciBtb2R1bGU7XG4gXHRcdHZhciBtb2R1bGVJZDtcblxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMubWFwKGZ1bmN0aW9uKGlkKSB7XG4gXHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbiBcdFx0XHRcdFx0aWQ6IGlkXG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmICghbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCkgY29udGludWU7XG4gXHRcdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcbiBcdFx0XHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdGlmICghcGFyZW50KSBjb250aW51ZTtcbiBcdFx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuIFx0XHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXG4gXHRcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRpZiAob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpICE9PSAtMSkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbiBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XG4gXHRcdFx0XHRcdFx0Y29udGludWU7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxuIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHR9KTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG5cbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxuIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXG4gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcbiBcdFx0XHR9O1xuIFx0XHR9XG5cbiBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xuIFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuIFx0XHRcdFx0aWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4gXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG5cbiBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcbiBcdFx0XHRjb25zb2xlLndhcm4oXG4gXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIlxuIFx0XHRcdCk7XG4gXHRcdH07XG5cbiBcdFx0Zm9yICh2YXIgaWQgaW4gaG90VXBkYXRlKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcbiBcdFx0XHRcdC8qKiBAdHlwZSB7VE9ET30gKi9cbiBcdFx0XHRcdHZhciByZXN1bHQ7XG4gXHRcdFx0XHRpZiAoaG90VXBkYXRlW2lkXSkge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSBnZXRBZmZlY3RlZFN0dWZmKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdHJlc3VsdCA9IHtcbiBcdFx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXG4gXHRcdFx0XHRcdH07XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuIFx0XHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcbiBcdFx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcbiBcdFx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcbiBcdFx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuIFx0XHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG4gXHRcdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0ZGVmYXVsdDpcbiBcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcbiBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XG4gXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChhYm9ydEVycm9yKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChkb0FwcGx5KSB7XG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gaG90VXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRcdFx0XHRpZiAoXG4gXHRcdFx0XHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcyxcbiBcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdFx0XHRcdClcbiBcdFx0XHRcdFx0XHQpIHtcbiBcdFx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuIFx0XHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG4gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cbiBcdFx0XHRcdFx0XHRcdCk7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG4gXHRcdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdICYmXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZCAmJlxuIFx0XHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuIFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcbiBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcbiBcdFx0XHRcdGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdH0pO1xuXG4gXHRcdHZhciBpZHg7XG4gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuIFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG4gXHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG4gXHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0Y2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XG4gXHRcdFx0XHRjYihkYXRhKTtcbiBcdFx0XHR9XG4gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcblxuIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG4gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcbiBcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XG4gXHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIHtcbiBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuIFx0XHR2YXIgZGVwZW5kZW5jeTtcbiBcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuIFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiYXBwbHlcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuIFx0XHRob3RDdXJyZW50SGFzaCA9IGhvdFVwZGF0ZU5ld0hhc2g7XG5cbiBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG4gXHRcdGZvciAobW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXG4gXHRcdHZhciBlcnJvciA9IG51bGw7XG4gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuIFx0XHRcdCkge1xuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG4gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcbiBcdFx0XHRcdFx0XHRjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuIFx0XHRcdFx0XHRcdGlmIChjYikge1xuIFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGNiKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goY2IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdFx0Y2IgPSBjYWxsYmFja3NbaV07XG4gXHRcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHRcdGNiKG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcbiBcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4gXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldLFxuIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGl0ZW0gPSBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXNbaV07XG4gXHRcdFx0bW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcbiBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuIFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnIyO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG4gXHRcdGlmIChlcnJvcikge1xuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XG4gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiBcdFx0fVxuXG4gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gXHRcdFx0cmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuIFx0XHRcdHBhcmVudHM6IChob3RDdXJyZW50UGFyZW50c1RlbXAgPSBob3RDdXJyZW50UGFyZW50cywgaG90Q3VycmVudFBhcmVudHMgPSBbXSwgaG90Q3VycmVudFBhcmVudHNUZW1wKSxcbiBcdFx0XHRjaGlsZHJlbjogW11cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZShcIi4vTW90ZWxQb3MvTW90ZWxQb3MuanNcIikoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL01vdGVsUG9zL01vdGVsUG9zLmpzXCIpO1xuIiwiaW1wb3J0IHtcbiAgICBBY2NvdW50VmVyaWZ5UmVzcG9uc2UsXG4gICAgU3BpLCBcbiAgICBMb2dnZXIsIFxuICAgIFNlY3JldHMsIFxuICAgIFRyYW5zYWN0aW9uT3B0aW9ucyxcbiAgICBUcmFuc2FjdGlvblR5cGUsXG4gICAgUHJpbnRpbmdSZXNwb25zZSxcbiAgICBSZWZ1bmRSZXNwb25zZSxcbiAgICBUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlLFxuICAgIFRlcm1pbmFsQmF0dGVyeSxcbiAgICBDYXNob3V0T25seVJlc3BvbnNlLFxuICAgIE1vdG9QdXJjaGFzZVJlc3BvbnNlLFxuICAgIEdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlLFxuICAgIFB1cmNoYXNlUmVzcG9uc2UsXG4gICAgUHJlYXV0aFJlc3BvbnNlLFxuICAgIFNldHRsZW1lbnQsXG4gICAgU3VjY2Vzc1N0YXRlLFxuICAgIFJlcXVlc3RJZEhlbHBlcixcbiAgICBTcGlGbG93LFxuICAgIFNwaVN0YXR1c30gZnJvbSAnQGFzc2VtYmx5cGF5bWVudHMvc3BpLWNsaWVudC1qcy9kaXN0L3NwaS1jbGllbnQtanMnO1xuLy8gPHN1bW1hcnk+XG4vLyBOT1RFOiBUSElTIFBST0pFQ1QgVVNFUyBUSEUgMi42Lnggb2YgdGhlIFNQSSBDbGllbnQgTGlicmFyeVxuLy8gIFxuLy8gVGhpcyBpcyB5b3VyIFBPUy4gVG8gaW50ZWdyYXRlIHdpdGggU1BJLCB5b3UgbmVlZCB0byBpbnN0YW50aWF0ZSBhIFNwaSBvYmplY3Rcbi8vIGFuZCBpbnRlcmFjdCB3aXRoIGl0LlxuLy8gXG4vLyBQcmltYXJpbHkgeW91IG5lZWQgdG8gaW1wbGVtZW50IDMgdGhpbmdzLlxuLy8gMS4gU2V0dGluZ3MgU2NyZWVuXG4vLyAyLiBQYWlyaW5nIEZsb3cgU2NyZWVuXG4vLyAzLiBUcmFuc2FjdGlvbiBGbG93IHNjcmVlblxuLy8gXG4vLyBUbyBzZWUgbG9ncyBmcm9tIHNwaSwgY2hlY2sgdGhlIGNvbnNvbGVcbi8vIDwvc3VtbWFyeT5cbmV4cG9ydCBjbGFzcyBNb3RlbFBvc1xue1xuICAgIGNvbnN0cnVjdG9yKGxvZywgcmVjZWlwdCwgZmxvd19tc2cpIFxuICAgIHtcbiAgICAgICAgdGhpcy5fc3BpID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3BpUHJlYXV0aCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Bvc0lkID0gXCJNT1RFTFBPUzFcIjtcbiAgICAgICAgdGhpcy5fZWZ0cG9zQWRkcmVzcyA9IFwiMTkyLjE2OC4xLjFcIjtcbiAgICAgICAgdGhpcy5fc3BpU2VjcmV0cyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3ZlcnNpb24gPSAnMi42LjMnO1xuICAgICAgICB0aGlzLl9zZXJpYWxOdW1iZXIgPSBcIlwiO1xuICAgICAgICB0aGlzLl9yY3B0X2Zyb21fZWZ0cG9zID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3NpZ19mbG93X2Zyb21fZWZ0cG9zID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3ByaW50X21lcmNoYW50X2NvcHkgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl9sb2cgPSBsb2c7XG4gICAgICAgIHRoaXMuX3JlY2VpcHQgPSByZWNlaXB0O1xuICAgICAgICB0aGlzLl9mbG93X21zZyA9IGZsb3dfbXNnO1xuICAgIH1cblxuICAgIFN0YXJ0KClcbiAgICB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiU3RhcnRpbmcgTW90ZWxQb3MuLi5cIik7XG4gICAgICAgIHRoaXMuTG9hZFBlcnNpc3RlZFN0YXRlKCk7XG5cbiAgICAgICAgLy8gcmVnaW9uIFNwaSBTZXR1cFxuICAgICAgICAvLyBUaGlzIGlzIGhvdyB5b3UgaW5zdGFudGlhdGUgU3BpLlxuICAgICAgICB0aGlzLl9zcGkgPSBuZXcgU3BpKHRoaXMuX3Bvc0lkLCB0aGlzLl9zZXJpYWxOdW1iZXIsIHRoaXMuX2VmdHBvc0FkZHJlc3MsIHRoaXMuX3NwaVNlY3JldHMpOyAvLyBJdCBpcyBvayB0byBub3QgaGF2ZSB0aGUgc2VjcmV0cyB5ZXQgdG8gc3RhcnQgd2l0aC5cbiAgICAgICAgdGhpcy5fc3BpLkNvbmZpZy5Qcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IHRoaXMuX3JjcHRfZnJvbV9lZnRwb3M7XG4gICAgICAgIHRoaXMuX3NwaS5Db25maWcuU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gdGhpcy5fc2lnX2Zsb3dfZnJvbV9lZnRwb3M7XG4gICAgICAgIHRoaXMuX3NwaS5Db25maWcuUHJpbnRNZXJjaGFudENvcHkgPSB0aGlzLl9wcmludF9tZXJjaGFudF9jb3B5O1xuXG4gICAgICAgIHRoaXMuX3NwaS5TZXRQb3NJbmZvKFwiYXNzZW1ibHlcIiwgdGhpcy5fdmVyc2lvbik7XG5cbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignU3RhdHVzQ2hhbmdlZCcsIChlKSA9PiB0aGlzLk9uU3BpU3RhdHVzQ2hhbmdlZChlLmRldGFpbCkpOyBcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignUGFpcmluZ0Zsb3dTdGF0ZUNoYW5nZWQnLCAoZSkgPT4gdGhpcy5PblBhaXJpbmdGbG93U3RhdGVDaGFuZ2VkKGUuZGV0YWlsKSk7IFxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdTZWNyZXRzQ2hhbmdlZCcsIChlKSA9PiB0aGlzLk9uU2VjcmV0c0NoYW5nZWQoZS5kZXRhaWwpKTsgXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIChlKSA9PiB0aGlzLk9uVHhGbG93U3RhdGVDaGFuZ2VkKGUuZGV0YWlsKSk7IFxuXG4gICAgICAgIHRoaXMuX3NwaS5QcmludGluZ1Jlc3BvbnNlID0gdGhpcy5IYW5kbGVQcmludGluZ1Jlc3BvbnNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3NwaS5UZXJtaW5hbFN0YXR1c1Jlc3BvbnNlID0gdGhpcy5IYW5kbGVUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3NwaS5CYXR0ZXJ5TGV2ZWxDaGFuZ2VkID0gdGhpcy5IYW5kbGVCYXR0ZXJ5TGV2ZWxDaGFuZ2VkLmJpbmQodGhpcyk7XG5cbiAgICAgICAgdGhpcy5fc3BpUHJlYXV0aCA9IHRoaXMuX3NwaS5FbmFibGVQcmVhdXRoKCk7XG4gICAgICAgIHRoaXMuX3NwaS5TdGFydCgpO1xuXG4gICAgICAgIC8vIEFuZCBOb3cgd2UganVzdCBhY2NlcHQgdXNlciBpbnB1dCBhbmQgZGlzcGxheSB0byB0aGUgdXNlciB3aGF0IGlzIGhhcHBlbmluZy5cblxuICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBXZWxjb21lIHRvIE1vdGVsUG9zICFcIik7XG4gICAgICAgIFxuICAgICAgICB0aGlzLlByaW50U3RhdHVzQW5kQWN0aW9ucygpO1xuICAgICAgICB0aGlzLkFjY2VwdFVzZXJJbnB1dCgpO1xuICAgIH1cblxuICAgIE9uVHhGbG93U3RhdGVDaGFuZ2VkKHR4U3RhdGUpXG4gICAge1xuICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICB0aGlzLlByaW50U3RhdHVzQW5kQWN0aW9ucygpO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiPiBcIik7XG4gICAgfVxuXG4gICAgT25QYWlyaW5nRmxvd1N0YXRlQ2hhbmdlZChwYWlyaW5nRmxvd1N0YXRlKVxuICAgIHtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuQ2xlYXIoKTtcbiAgICAgICAgdGhpcy5QcmludFN0YXR1c0FuZEFjdGlvbnMoKTtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIj4gXCIpO1xuICAgIH1cblxuICAgIE9uU2VjcmV0c0NoYW5nZWQoc2VjcmV0cylcbiAgICB7XG4gICAgICAgIHRoaXMuX3NwaVNlY3JldHMgPSBzZWNyZXRzO1xuICAgICAgICBpZiAoc2VjcmV0cyAhPSBudWxsKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhgIyBJIEhhdmUgU2VjcmV0czogJHtzZWNyZXRzLkVuY0tleX0ke3NlY3JldHMuSG1hY0tleX0uIFBlcnNpc3QgdGhlbSBTZWN1cmVseS5gKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdFbmNLZXknLCBzZWNyZXRzLkVuY0tleSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnSG1hY0tleScsIHNlY3JldHMuSG1hY0tleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhgIyBJIEhhdmUgTG9zdCB0aGUgU2VjcmV0cywgaS5lLiBVbnBhaXJlZC4gRGVzdHJveSB0aGUgcGVyc2lzdGVkIHNlY3JldHMuYCk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnRW5jS2V5Jyk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnSG1hY0tleScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gPHN1bW1hcnk+XG4gICAgLy8gQ2FsbGVkIHdoZW4gd2UgcmVjZWl2ZWQgYSBTdGF0dXMgVXBkYXRlIGkuZS4gVW5wYWlyZWQvUGFpcmVkQ29ubmVjdGluZy9QYWlyZWRDb25uZWN0ZWRcbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJzZW5kZXJcIj48L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwic3BpU3RhdHVzXCI+PC9wYXJhbT5cbiAgICBPblNwaVN0YXR1c0NoYW5nZWQoc3BpU3RhdHVzKVxuICAgIHtcbiAgICAgICAgdGhpcy5fbG9nLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKGAjIC0tPiBTUEkgU3RhdHVzIENoYW5nZWQ6ICR7c3BpU3RhdHVzfWApO1xuICAgICAgICB0aGlzLlByaW50U3RhdHVzQW5kQWN0aW9ucygpO1xuICAgIH1cblxuXG4gICAgSGFuZGxlUHJpbnRpbmdSZXNwb25zZShtZXNzYWdlKVxuICAgIHtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuQ2xlYXIoKTtcbiAgICAgICAgdmFyIHByaW50aW5nUmVzcG9uc2UgPSBuZXcgUHJpbnRpbmdSZXNwb25zZShtZXNzYWdlKTtcblxuICAgICAgICBpZiAocHJpbnRpbmdSZXNwb25zZS5pc1N1Y2Nlc3MoKSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgLS0+IFByaW50aW5nIFJlc3BvbnNlOiBQcmludGluZyBSZWNlaXB0IHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyAtLT4gUHJpbnRpbmcgUmVzcG9uc2U6ICBQcmludGluZyBSZWNlaXB0IGZhaWxlZDogcmVhc29uID0gXCIgKyBwcmludGluZ1Jlc3BvbnNlLmdldEVycm9yUmVhc29uKCkgKyBcIiwgZGV0YWlsID0gXCIgKyBwcmludGluZ1Jlc3BvbnNlLmdldEVycm9yRGV0YWlsKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3BpLkFja0Zsb3dFbmRlZEFuZEJhY2tUb0lkbGUoKTtcbiAgICAgICAgdGhpcy5QcmludFN0YXR1c0FuZEFjdGlvbnMoKTtcbiAgICB9XG5cbiAgICBIYW5kbGVUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlKG1lc3NhZ2UpXG4gICAge1xuICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICB2YXIgdGVybWluYWxTdGF0dXNSZXNwb25zZSA9IG5ldyBUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBUZXJtaW5hbCBTdGF0dXMgUmVzcG9uc2UgI1wiKTtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgU3RhdHVzOiBcIiArIHRlcm1pbmFsU3RhdHVzUmVzcG9uc2UuR2V0U3RhdHVzKCkpO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBCYXR0ZXJ5IExldmVsOiBcIiArIHRlcm1pbmFsU3RhdHVzUmVzcG9uc2UuR2V0QmF0dGVyeUxldmVsKCkgKyBcIiVcIik7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIENoYXJnaW5nOiBcIiArIHRlcm1pbmFsU3RhdHVzUmVzcG9uc2UuSXNDaGFyZ2luZygpKTtcbiAgICAgICAgdGhpcy5fc3BpLkFja0Zsb3dFbmRlZEFuZEJhY2tUb0lkbGUoKTtcbiAgICAgICAgdGhpcy5QcmludFN0YXR1c0FuZEFjdGlvbnMoKTtcbiAgICB9XG5cbiAgICBIYW5kbGVCYXR0ZXJ5TGV2ZWxDaGFuZ2VkKG1lc3NhZ2UpXG4gICAge1xuICAgICAgICB0aGlzLl9sb2cuY2xlYXIoKTtcbiAgICAgICAgdmFyIHRlcm1pbmFsQmF0dGVyeSA9IG5ldyBUZXJtaW5hbEJhdHRlcnkobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIEJhdHRlcnkgTGV2ZWwgQ2hhbmdlZCAjXCIpO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBCYXR0ZXJ5IExldmVsOiBcIiArIHRlcm1pbmFsQmF0dGVyeS5CYXR0ZXJ5TGV2ZWwgKyBcIiVcIik7XG4gICAgICAgIHRoaXMuX3NwaS5BY2tGbG93RW5kZWRBbmRCYWNrVG9JZGxlKCk7XG4gICAgICAgIHRoaXMuUHJpbnRTdGF0dXNBbmRBY3Rpb25zKCk7XG4gICAgfVxuXG4gICAgUHJpbnRTdGF0dXNBbmRBY3Rpb25zKClcbiAgICB7XG4gICAgICAgIHRoaXMuUHJpbnRGbG93SW5mbygpO1xuXG4gICAgICAgIHRoaXMuUHJpbnRBY3Rpb25zKCk7XG5cbiAgICAgICAgdGhpcy5QcmludFBhaXJpbmdTdGF0dXMoKTtcbiAgICB9XG5cbiAgICBQcmludEZsb3dJbmZvKClcbiAgICB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fc3BpLkN1cnJlbnRGbG93KVxuICAgICAgICB7XG4gICAgICAgICAgICBjYXNlIFNwaUZsb3cuUGFpcmluZzpcbiAgICAgICAgICAgICAgICB2YXIgcGFpcmluZ1N0YXRlID0gdGhpcy5fc3BpLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIyMgUEFJUklORyBQUk9DRVNTIFVQREFURSAjIyNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyAke3BhaXJpbmdTdGF0ZS5NZXNzYWdlfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgRmluaXNoZWQ/ICR7cGFpcmluZ1N0YXRlLkZpbmlzaGVkfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgU3VjY2Vzc2Z1bD8gJHtwYWlyaW5nU3RhdGUuU3VjY2Vzc2Z1bH1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIENvbmZpcm1hdGlvbiBDb2RlOiAke3BhaXJpbmdTdGF0ZS5Db25maXJtYXRpb25Db2RlfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgV2FpdGluZyBDb25maXJtIGZyb20gRWZ0cG9zPyAke3BhaXJpbmdTdGF0ZS5Bd2FpdGluZ0NoZWNrRnJvbUVmdHBvc31gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFdhaXRpbmcgQ29uZmlybSBmcm9tIFBPUz8gJHtwYWlyaW5nU3RhdGUuQXdhaXRpbmdDaGVja0Zyb21Qb3N9YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgU3BpRmxvdy5UcmFuc2FjdGlvbjpcbiAgICAgICAgICAgICAgICB2YXIgdHhTdGF0ZSA9IHRoaXMuX3NwaS5DdXJyZW50VHhGbG93U3RhdGU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMjIyBUWCBQUk9DRVNTIFVQREFURSAjIyNcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyAke3R4U3RhdGUuRGlzcGxheU1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBQb3NSZWZJZDogJHt0eFN0YXRlLlBvc1JlZklkfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgVHlwZTogJHt0eFN0YXRlLlR5cGV9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBSZXF1ZXN0IEFtb3VudDogJCR7KHR4U3RhdGUuQW1vdW50Q2VudHMgLyAxMDAuMCkudG9GaXhlZCgyKX1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFdhaXRpbmcgRm9yIFNpZ25hdHVyZTogJHt0eFN0YXRlLkF3YWl0aW5nU2lnbmF0dXJlQ2hlY2t9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBBdHRlbXB0aW5nIHRvIENhbmNlbCA6ICR7dHhTdGF0ZS5BdHRlbXB0aW5nVG9DYW5jZWx9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBGaW5pc2hlZDogJHt0eFN0YXRlLkZpbmlzaGVkfWApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgU3VjY2VzczogJHt0eFN0YXRlLlN1Y2Nlc3N9YCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHhTdGF0ZS5Bd2FpdGluZ1NpZ25hdHVyZUNoZWNrKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBwcmludCB0aGUgcmVjZWlwdCBmb3IgdGhlIGN1c3RvbWVyIHRvIHNpZ24uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgUkVDRUlQVCBUTyBQUklOVCBGT1IgU0lHTkFUVVJFYCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpcHQuSW5mbyh0eFN0YXRlLlNpZ25hdHVyZVJlcXVpcmVkTWVzc2FnZS5HZXRNZXJjaGFudFJlY2VpcHQoKS50cmltKCkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eFN0YXRlLkZpbmlzaGVkKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICBzd2l0Y2godHhTdGF0ZS5TdWNjZXNzKSBcbiAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFN1Y2Nlc3NTdGF0ZS5TdWNjZXNzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodHhTdGF0ZS5UeXBlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBUcmFuc2FjdGlvblR5cGUuUHJlYXV0aDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFBSRUFVVEggUkVTVUxUIC0gU1VDQ0VTU1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmVhdXRoUmVzcG9uc2UgPSBuZXcgUHJlYXV0aFJlc3BvbnNlKHR4U3RhdGUuUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgUFJFQVVUSC1JRDpcIiwgcHJlYXV0aFJlc3BvbnNlLlByZWF1dGhJZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBORVcgQkFMQU5DRSBBTU9VTlQ6XCIsIHByZWF1dGhSZXNwb25zZS5HZXRCYWxhbmNlQW1vdW50KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgUFJFViBCQUxBTkNFIEFNT1VOVDpcIiwgcHJlYXV0aFJlc3BvbnNlLkdldFByZXZpb3VzQmFsYW5jZUFtb3VudCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIENPTVBMRVRJT04gQU1PVU5UOlwiLCBwcmVhdXRoUmVzcG9uc2UuR2V0Q29tcGxldGlvbkFtb3VudCgpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRldGFpbHMgPSBwcmVhdXRoUmVzcG9uc2UuRGV0YWlscztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFJlc3BvbnNlOlwiLCBkZXRhaWxzLkdldFJlc3BvbnNlVGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFJSTjpcIiwgZGV0YWlscy5HZXRSUk4oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBTY2hlbWU6XCIsIGRldGFpbHMuU2NoZW1lTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBDdXN0b21lciBSZWNlaXB0OlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpcHQuSW5mbyghZGV0YWlscy5XYXNDdXN0b21lclJlY2VpcHRQcmludGVkKCkgPyBkZXRhaWxzLkdldEN1c3RvbWVyUmVjZWlwdCgpLnRyaW0oKSA6IFwiIyBQUklOVEVEIEZST00gRUZUUE9TXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVHJhbnNhY3Rpb25UeXBlLkFjY291bnRWZXJpZnk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBBQ0NPVU5UIFZFUklGSUNBVElPTiBTVUNDRVNTXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFjY3RWZXJpZnlSZXNwb25zZSA9IG5ldyBBY2NvdW50VmVyaWZ5UmVzcG9uc2UodHhTdGF0ZS5SZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGV0YWlscyA9IGFjY3RWZXJpZnlSZXNwb25zZS5EZXRhaWxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgUmVzcG9uc2U6XCIsIGRldGFpbHMuR2V0UmVzcG9uc2VUZXh0KCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgUlJOOlwiLCBkZXRhaWxzLkdldFJSTigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFNjaGVtZTpcIiwgZGV0YWlscy5TY2hlbWVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIE1lcmNoYW50IFJlY2VpcHQ6XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVjZWlwdC5JbmZvKCFkZXRhaWxzLldhc0N1c3RvbWVyUmVjZWlwdFByaW50ZWQoKSA/IGRldGFpbHMuR2V0Q3VzdG9tZXJSZWNlaXB0KCkudHJpbSgpIDogXCIjIFBSSU5URUQgRlJPTSBFRlRQT1NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIE1PVEVMIFBPUyBET0VTTidUIEtOT1cgV0hBVCBUTyBETyBXSVRIIFRISVMgVFggVFlQRSBXSEVOIElUIFNVQ0NFRURTXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFN1Y2Nlc3NTdGF0ZS5GYWlsZWQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eFN0YXRlLlR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5QcmVhdXRoOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgUFJFQVVUSCBUUkFOU0FDVElPTiBGQUlMRUQgOihcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHhTdGF0ZS5SZXNwb25zZSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIEVycm9yOlwiLCB0eFN0YXRlLlJlc3BvbnNlLkdldEVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIEVycm9yIERldGFpbDpcIiwgdHhTdGF0ZS5SZXNwb25zZS5HZXRFcnJvckRldGFpbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHVyY2hhc2VSZXNwb25zZSA9IG5ldyBQdXJjaGFzZVJlc3BvbnNlKHR4U3RhdGUuUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFJlc3BvbnNlOlwiLCBwdXJjaGFzZVJlc3BvbnNlLkdldFJlc3BvbnNlVGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBSUk46XCIsIHB1cmNoYXNlUmVzcG9uc2UuR2V0UlJOKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIFNjaGVtZTpcIiwgcHVyY2hhc2VSZXNwb25zZS5TY2hlbWVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBDdXN0b21lciBSZWNlaXB0OlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWNlaXB0LkluZm8oIXB1cmNoYXNlUmVzcG9uc2UuV2FzQ3VzdG9tZXJSZWNlaXB0UHJpbnRlZCgpID8gcHVyY2hhc2VSZXNwb25zZS5HZXRDdXN0b21lclJlY2VpcHQoKS50cmltKCkgOiBcIiMgUFJJTlRFRCBGUk9NIEVGVFBPU1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5BY2NvdW50VmVyaWZ5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgQUNDT1VOVCBWRVJJRklDQVRJT04gRkFJTEVEIDooXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHhTdGF0ZS5SZXNwb25zZSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIEVycm9yOlwiLCB0eFN0YXRlLlJlc3BvbnNlLkdldEVycm9yKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIEVycm9yIERldGFpbDpcIiwgdHhTdGF0ZS5SZXNwb25zZS5HZXRFcnJvckRldGFpbCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWNjdFZlcmlmeVJlc3BvbnNlID0gbmV3IEFjY291bnRWZXJpZnlSZXNwb25zZSh0eFN0YXRlLlJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGV0YWlscyA9IGFjY3RWZXJpZnlSZXNwb25zZS5EZXRhaWxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY2VpcHQuSW5mbyghZGV0YWlscy5XYXNNZXJjaGFudFJlY2VpcHRQcmludGVkKCkgPyBkZXRhaWxzLkdldE1lcmNoYW50UmVjZWlwdCgpLnRyaW0oKSA6IFwiIyBQUklOVEVEIEZST00gRUZUUE9TXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBNT1RFTCBQT1MgRE9FU04nVCBLTk9XIFdIQVQgVE8gRE8gV0lUSCBUSElTIFRYIFRZUEUgV0hFTiBJVCBGQUlMU1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU3VjY2Vzc1N0YXRlLlVua25vd246XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eFN0YXRlLlR5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFRyYW5zYWN0aW9uVHlwZS5QcmVhdXRoOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgV0UnUkUgTk9UIFFVSVRFIFNVUkUgV0hFVEhFUiBQUkVBVVRIIFRSQU5TQUNUSU9OIFdFTlQgVEhST1VHSCBPUiBOT1Q6L1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIENIRUNLIFRIRSBMQVNUIFRSQU5TQUNUSU9OIE9OIFRIRSBFRlRQT1MgSVRTRUxGIEZST00gVEhFIEFQUFJPUFJJQVRFIE1FTlUgSVRFTS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBJRiBZT1UgQ09ORklSTSBUSEFUIFRIRSBDVVNUT01FUiBQQUlELCBDTE9TRSBUSEUgT1JERVIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgT1RIRVJXSVNFLCBSRVRSWSBUSEUgUEFZTUVOVCBGUk9NIFNDUkFUQ0guXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgVHJhbnNhY3Rpb25UeXBlLkFjY291bnRWZXJpZnk6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBXRSdSRSBOT1QgUVVJVEUgU1VSRSBXSEVUSEVSIEFDQ09VTlQgVkVSSUZJQ0FUSU9OIFdFTlQgVEhST1VHSCBPUiBOT1Q6L1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oXCIjIENIRUNLIFRIRSBMQVNUIFRSQU5TQUNUSU9OIE9OIFRIRSBFRlRQT1MgSVRTRUxGIEZST00gVEhFIEFQUFJPUFJJQVRFIE1FTlUgSVRFTS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBJRiBZT1UgQ09ORklSTSBUSEFUIFRIRSBDVVNUT01FUiBQQUlELCBDTE9TRSBUSEUgT1JERVIuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhcIiMgT1RIRVJXSVNFLCBSRVRSWSBUSEUgUEFZTUVOVCBGUk9NIFNDUkFUQ0guXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKFwiIyBNT1RFTCBQT1MgRE9FU04nVCBLTk9XIFdIQVQgVE8gRE8gV0lUSCBUSElTIFRYIFRZUEUgV0hFTiBJVCdzIFVOS05PV05cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBQcmludEFjdGlvbnMoKVxuICAgIHtcbiAgICAgICAgLy8gTGlzdCBvZiBpbnB1dCBjb250cm9scyB3aGljaCBhcmUgZW5hYmxlZCAvIHNob3duIGZvciB0aGUgY3VycmVudCBhcHBsaWNhdGlvbiBzdGF0ZVxuICAgICAgICBsZXQgaW5wdXRzRW5hYmxlZCAgID0gW107XG4gICAgICAgIGxldCBzdGF0dXNFbCAgICAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdHVzX2luZGljYXRvcicpO1xuICAgICAgICBsZXQgcHJpbWFyeVN0YXR1c0VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW1hcnlfc3RhdHVzJyk7XG4gICAgICAgIGxldCBmbG93U3RhdHVzRWwgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZmxvd19zdGF0dXMnKTtcbiAgICAgICAgbGV0IGZsb3dTdGF0dXNIZWFkaW5nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zsb3dfc3RhdHVzX2hlYWRpbmcnKTtcblxuICAgICAgICBzdGF0dXNFbC5kYXRhc2V0WydzdGF0dXMnXSAgPSB0aGlzLl9zcGkuQ3VycmVudFN0YXR1cztcbiAgICAgICAgc3RhdHVzRWwuZGF0YXNldFsnZmxvdyddICAgID0gdGhpcy5fc3BpLkN1cnJlbnRGbG93O1xuICAgICAgICBwcmltYXJ5U3RhdHVzRWwuaW5uZXJUZXh0ICAgPSB0aGlzLl9zcGkuQ3VycmVudFN0YXR1cztcbiAgICAgICAgZmxvd1N0YXR1c0VsLmlubmVyVGV4dCAgICAgID0gdGhpcy5fc3BpLkN1cnJlbnRGbG93O1xuICAgICAgICBmbG93U3RhdHVzSGVhZGluZy5pbm5lclRleHQgPSB0aGlzLl9zcGkuQ3VycmVudEZsb3c7XG5cbiAgICAgICAgLy8gQXZhaWxhYmxlIEFjdGlvbnMgZGVwZW5kIG9uIHRoZSBjdXJyZW50IHN0YXR1cyAoVW5wYWlyZWQvUGFpcmVkQ29ubmVjdGluZy9QYWlyZWRDb25uZWN0ZWQpXG4gICAgICAgIHN3aXRjaCAodGhpcy5fc3BpLkN1cnJlbnRTdGF0dXMpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNhc2UgU3BpU3RhdHVzLlVucGFpcmVkOiAvL1VucGFpcmVkLi4uXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9zcGkuQ3VycmVudEZsb3cpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFNwaUZsb3cuSWRsZTogLy8gVW5wYWlyZWQsIElkbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgncG9zX2lkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ2VmdHBvc19hZGRyZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3JjcHRfZnJvbV9lZnRwb3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnc2lnX2Zsb3dfZnJvbV9lZnRwb3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgncGFpcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdzYXZlX3NldHRpbmdzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjYXNlIFNwaUZsb3cuUGFpcmluZzogLy8gVW5wYWlyZWQsIFBhaXJpbmdGbG93XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFpcmluZ1N0YXRlID0gdGhpcy5fc3BpLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhaXJpbmdTdGF0ZS5Bd2FpdGluZ0NoZWNrRnJvbVBvcylcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3BhaXJfY29uZmlybScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYWlyaW5nU3RhdGUuRmluaXNoZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdwYWlyX2NhbmNlbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnb2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgU3BpRmxvdy5UcmFuc2FjdGlvbjogLy8gVW5wYWlyZWQsIFRyYW5zYWN0aW9uRmxvdyAtIFNob3VsZCBuZXZlciBiZSB0aGUgY2FzZSFcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKGAjIC4uIFVuZXhwZWN0ZWQgRmxvdyAuLiAke3RoaXMuX3NwaS5DdXJyZW50Rmxvd31gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3BpU3RhdHVzLlBhaXJlZENvbm5lY3Rpbmc6IC8vIFRoaXMgaXMgc3RpbGwgY29uc2lkZXJlZCBhcyBhIFBhaXJlZCBraW5kIG9mIHN0YXRlLCBidXQuLi5cbiAgICAgICAgICAgICAgICAvLyAuLiB3ZSBnaXZlIHVzZXIgdGhlIG9wdGlvbiBvZiBjaGFuZ2luZyBJUCBhZGRyZXNzLCBqdXN0IGluIGNhc2UgdGhlIEVGVFBPUyBnb3QgYSBuZXcgb25lIGluIHRoZSBtZWFud2hpbGVcbiAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ2VmdHBvc19hZGRyZXNzJyk7XG4gICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdyY3B0X2Zyb21fZWZ0cG9zJyk7XG4gICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdzaWdfZmxvd19mcm9tX2VmdHBvcycpO1xuICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnc2F2ZV9zZXR0aW5ncycpO1xuICAgICAgICAgICAgICAgIC8vIC4uIGJ1dCBvdGhlcndpc2Ugd2UgZ2l2ZSB0aGUgc2FtZSBvcHRpb25zIGFzIFBhaXJlZENvbm5lY3RlZFxuICAgICAgICAgICAgICAgIC8vIGdvdG8gY2FzZSBTcGlTdGF0dXMuUGFpcmVkQ29ubmVjdGVkO1xuXG4gICAgICAgICAgICBjYXNlIFNwaVN0YXR1cy5QYWlyZWRDb25uZWN0ZWQ6XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9zcGkuQ3VycmVudEZsb3cpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFNwaUZsb3cuSWRsZTogLy8gUGFpcmVkLCBJZGxlXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ2Ftb3VudF9pbnB1dCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdzdXJjaGFyZ2VfaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgncHJlYXV0aF9yZWZfaW5wdXQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnc2F2ZV9zZXR0aW5ncycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ2FjY3RfdmVyaWZ5Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3ByZWF1dGhfb3BlbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdwcmVhdXRoX3RvcHVwJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3ByZWF1dGhfdG9wZG93bicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdwcmVhdXRoX2V4dGVuZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdwcmVhdXRoX2NvbXBsZXRlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3ByZWF1dGhfY2FuY2VsJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgndW5wYWlyJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3JjcHRfZnJvbV9lZnRwb3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgnc2lnX2Zsb3dfZnJvbV9lZnRwb3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0c0VuYWJsZWQucHVzaCgncHJpbnRfbWVyY2hhbnRfY29weScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgU3BpRmxvdy5UcmFuc2FjdGlvbjogLy8gUGFpcmVkLCBUcmFuc2FjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NwaS5DdXJyZW50VHhGbG93U3RhdGUuQXdhaXRpbmdTaWduYXR1cmVDaGVjaylcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3R4X3NpZ25fYWNjZXB0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCd0eF9zaWduX2RlY2xpbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkICYmICF0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlLkF0dGVtcHRpbmdUb0NhbmNlbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ3R4X2NhbmNlbCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkKSBcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNFbmFibGVkLnB1c2goJ29rJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgU3BpRmxvdy5QYWlyaW5nOiAvLyBQYWlyZWQsIFBhaXJpbmcgLSB3ZSBoYXZlIGp1c3QgZmluaXNoZWQgdGhlIHBhaXJpbmcgZmxvdy4gT0sgdG8gYWNrLlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRzRW5hYmxlZC5wdXNoKCdvaycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhgIyAuLiBVbmV4cGVjdGVkIEZsb3cgLi4gJHt0aGlzLl9zcGkuQ3VycmVudEZsb3d9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhgIyAuLiBVbmV4cGVjdGVkIFN0YXRlIC4uICR7dGhpcy5fc3BpLkN1cnJlbnRTdGF0dXN9YCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb25maWd1cmUgYnV0dG9ucyAvIGlucHV0c1xuICAgICAgICBsZXQgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmlucHV0Jyk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyBpKyspIFxuICAgICAgICB7XG4gICAgICAgICAgICBpbnB1dHNbaV0uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaW5wdXRzRW5hYmxlZC5mb3JFYWNoKChpbnB1dCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBpbnB1dEVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXQpO1xuICAgICAgICAgICAgaWYoIWlucHV0RWwpIHRocm93IG5ldyBFcnJvcihgSW5wdXQgZWxlbWVudCBub3QgZm91bmQgdG8gZW5hYmxlOiAke2lucHV0fWApO1xuICAgICAgICAgICAgaW5wdXRFbC5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKCk7XG4gICAgfVxuXG4gICAgUHJpbnRQYWlyaW5nU3RhdHVzKClcbiAgICB7XG4gICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8oYCMgLS0tLS0tLS0tLS0tLS0tIFNUQVRVUyAtLS0tLS0tLS0tLS0tLS0tLS1gKTtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyAke3RoaXMuX3Bvc0lkfSA8LT4gRWZ0cG9zOiAke3RoaXMuX2VmdHBvc0FkZHJlc3N9ICNgKTtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBTUEkgU1RBVFVTOiAke3RoaXMuX3NwaS5DdXJyZW50U3RhdHVzfSAgICAgRkxPVzogJHt0aGlzLl9zcGkuQ3VycmVudEZsb3d9ICNgKTtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyBTUEkgQ09ORklHOiAke0pTT04uc3RyaW5naWZ5KHRoaXMuX3NwaVByZWF1dGguQ29uZmlnKX1gKTtcbiAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLWApO1xuICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKGAjIFBPUzogdiR7dGhpcy5fdmVyc2lvbn0gU3BpOiB2JHtTcGkuR2V0VmVyc2lvbigpfWApO1xuXG4gICAgfVxuXG4gICAgQWNjZXB0VXNlcklucHV0KClcbiAgICB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzYXZlX3NldHRpbmdzJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cbiAgICAgICAgICAgIGlmKHRoaXMuX3NwaS5DdXJyZW50U3RhdHVzID09PSBTcGlTdGF0dXMuVW5wYWlyZWQgJiYgdGhpcy5fc3BpLkN1cnJlbnRGbG93ID09PSBTcGlGbG93LklkbGUpIFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc0lkICAgICAgICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zX2lkJykudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5fZWZ0cG9zQWRkcmVzcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZnRwb3NfYWRkcmVzcycpLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fc3BpLlNldFBvc0lkKHRoaXMuX3Bvc0lkKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zcGkuU2V0RWZ0cG9zQWRkcmVzcyh0aGlzLl9lZnRwb3NBZGRyZXNzKTtcblxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwb3NfaWQnLCB0aGlzLl9wb3NJZCk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2VmdHBvc19hZGRyZXNzJywgdGhpcy5fZWZ0cG9zQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9nLmluZm8oYFNhdmVkIHNldHRpbmdzICR7dGhpcy5fcG9zSWR9OiR7dGhpcy5fZWZ0cG9zQWRkcmVzc31gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fc3BpUHJlYXV0aC5Db25maWcuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JjcHRfZnJvbV9lZnRwb3MnKS5jaGVja2VkO1xuICAgICAgICAgICAgdGhpcy5fc3BpUHJlYXV0aC5Db25maWcuRW5hYmxlZFNpZ25hdHVyZUZsb3dPbkVmdHBvcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzaWdfZmxvd19mcm9tX2VmdHBvcycpLmNoZWNrZWQ7XG4gICAgICAgICAgICB0aGlzLl9zcGlQcmVhdXRoLkNvbmZpZy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJpbnRfbWVyY2hhbnRfY29weScpLmNoZWNrZWQ7XG5cbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdyY3B0X2Zyb21fZWZ0cG9zJywgdGhpcy5fc3BpUHJlYXV0aC5Db25maWcuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zKTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdzaWdfZmxvd19mcm9tX2VmdHBvcycsIHRoaXMuX3NwaVByZWF1dGguQ29uZmlnLkVuYWJsZWRTaWduYXR1cmVGbG93T25FZnRwb3MpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3ByaW50X21lcmNoYW50X2NvcHknLCB0aGlzLl9zcGlQcmVhdXRoLkNvbmZpZy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkpO1xuXG4gICAgICAgICAgICB0aGlzLlByaW50UGFpcmluZ1N0YXR1cygpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFpcicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5QYWlyKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWlyX2NvbmZpcm0nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IFxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9zcGkuUGFpcmluZ0NvbmZpcm1Db2RlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWlyX2NhbmNlbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5QYWlyaW5nQ2FuY2VsKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1bnBhaXInKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IFxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9zcGkuVW5wYWlyKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY2N0X3ZlcmlmeScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBwb3NSZWZJZCAgICA9IGBhY3R2ZnktJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YDsgXG4gICAgICAgICAgICBsZXQgcmVzICAgICAgICAgPSB0aGlzLl9zcGlQcmVhdXRoLkluaXRpYXRlQWNjb3VudFZlcmlmeVR4KHBvc1JlZklkKTtcbiAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLkluZm8ocmVzLkluaXRpYXRlZCA/IFwiIyBWZXJpZnkgSW5pdGlhdGVkLiBXaWxsIGJlIHVwZGF0ZWQgd2l0aCBQcm9ncmVzcy5cIiA6IGAjIENvdWxkIG5vdCBpbml0aWF0ZSBhY2NvdW50IHZlcmlmeSByZXF1ZXN0OiAke3Jlcy5NZXNzYWdlfS4gUGxlYXNlIFJldHJ5LmApO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJlYXV0aF9vcGVuJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IGFtb3VudCAgICAgID0gcGFyc2VJbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Ftb3VudCcpLnZhbHVlLDEwKTtcbiAgICAgICAgICAgIGxldCBwb3NSZWZJZCAgICA9IGBwcm9wZW4tJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YDsgXG4gICAgICAgICAgICBsZXQgcmVzICAgICAgICAgPSB0aGlzLl9zcGlQcmVhdXRoLkluaXRpYXRlT3BlblR4KHBvc1JlZklkLCBhbW91bnQpO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhyZXMuSW5pdGlhdGVkID8gXCIjIFByZWF1dGggSW5pdGlhdGVkLiBXaWxsIGJlIHVwZGF0ZWQgd2l0aCBQcm9ncmVzcy5cIiA6IGAjIENvdWxkIG5vdCBpbml0aWF0ZSBwcmVhdXRoIHJlcXVlc3Q6ICR7cmVzLk1lc3NhZ2V9LiBQbGVhc2UgUmV0cnkuYCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmVhdXRoX3RvcHVwJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IGFtb3VudCAgICAgID0gcGFyc2VJbnQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Ftb3VudCcpLnZhbHVlLDEwKTtcbiAgICAgICAgICAgIGxldCBwcmVhdXRoSWQgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmVhdXRoX3JlZicpLnZhbHVlOyBcbiAgICAgICAgICAgIGxldCByZWYgICAgICAgICA9IGBwcnRvcHVwLSR7cHJlYXV0aElkfS0ke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gOyBcbiAgICAgICAgICAgIGxldCByZXMgICAgICAgICA9IHRoaXMuX3NwaVByZWF1dGguSW5pdGlhdGVUb3B1cFR4KHJlZiwgcHJlYXV0aElkLCBhbW91bnQpO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhyZXMuSW5pdGlhdGVkID8gXCIjIFByZWF1dGggdG9wdXAgSW5pdGlhdGVkLiBXaWxsIGJlIHVwZGF0ZWQgd2l0aCBQcm9ncmVzcy5cIiA6IGAjIENvdWxkIG5vdCBpbml0aWF0ZSBwcmVhdXRoIHRvcHVwIHJlcXVlc3Q6ICR7cmVzLk1lc3NhZ2V9LiBQbGVhc2UgUmV0cnkuYCk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByZWF1dGhfdG9wZG93bicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBhbW91bnQgICAgICA9IHBhcnNlSW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbW91bnQnKS52YWx1ZSwxMCk7XG4gICAgICAgICAgICBsZXQgcHJlYXV0aElkICAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJlYXV0aF9yZWYnKS52YWx1ZTsgXG4gICAgICAgICAgICBsZXQgcmVmICAgICAgICAgPSBgcHJ0b3BkLSR7cHJlYXV0aElkfS0ke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gOyBcbiAgICAgICAgICAgIGxldCByZXMgICAgICAgICA9IHRoaXMuX3NwaVByZWF1dGguSW5pdGlhdGVQYXJ0aWFsQ2FuY2VsbGF0aW9uVHgocmVmLCBwcmVhdXRoSWQsIGFtb3VudCk7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKHJlcy5Jbml0aWF0ZWQgPyBcIiMgUHJlYXV0aCB0b3Bkb3duIEluaXRpYXRlZC4gV2lsbCBiZSB1cGRhdGVkIHdpdGggUHJvZ3Jlc3MuXCIgOiBgIyBDb3VsZCBub3QgaW5pdGlhdGUgcHJlYXV0aCB0b3Bkb3duIHJlcXVlc3Q6ICR7cmVzLk1lc3NhZ2V9LiBQbGVhc2UgUmV0cnkuYCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmVhdXRoX2V4dGVuZCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBwcmVhdXRoSWQgICA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmVhdXRoX3JlZicpLnZhbHVlOyBcbiAgICAgICAgICAgIGxldCByZWYgICAgICAgICA9IGBwcmV4dC0ke3ByZWF1dGhJZH0tJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YDsgXG4gICAgICAgICAgICBsZXQgcmVzICAgICAgICAgPSB0aGlzLl9zcGlQcmVhdXRoLkluaXRpYXRlRXh0ZW5kVHgocmVmLCBwcmVhdXRoSWQpO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuSW5mbyhyZXMuSW5pdGlhdGVkID8gXCIjIFByZWF1dGggZXh0ZW5kIEluaXRpYXRlZC4gV2lsbCBiZSB1cGRhdGVkIHdpdGggUHJvZ3Jlc3MuXCIgOiBgIyBDb3VsZCBub3QgaW5pdGlhdGUgcHJlYXV0aCBleHRlbmQgcmVxdWVzdDogJHtyZXMuTWVzc2FnZX0uIFBsZWFzZSBSZXRyeS5gKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByZWF1dGhfY2FuY2VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgbGV0IHByZWF1dGhJZCAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByZWF1dGhfcmVmJykudmFsdWU7IFxuICAgICAgICAgICAgbGV0IHJlZiAgICAgICAgID0gYHByY2FuY2VsLSR7cHJlYXV0aElkfS0ke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gOyBcbiAgICAgICAgICAgIGxldCByZXMgICAgICAgICA9IHRoaXMuX3NwaVByZWF1dGguSW5pdGlhdGVDYW5jZWxUeChyZWYsIHByZWF1dGhJZCk7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKHJlcy5Jbml0aWF0ZWQgPyBcIiMgUHJlYXV0aCBjYW5jZWwgSW5pdGlhdGVkLiBXaWxsIGJlIHVwZGF0ZWQgd2l0aCBQcm9ncmVzcy5cIiA6IGAjIENvdWxkIG5vdCBpbml0aWF0ZSBwcmVhdXRoIGNhbmNlbCByZXF1ZXN0OiAke3Jlcy5NZXNzYWdlfS4gUGxlYXNlIFJldHJ5LmApO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJlYXV0aF9jb21wbGV0ZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIGxldCBhbW91bnQgICAgICA9IHBhcnNlSW50KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbW91bnQnKS52YWx1ZSwxMCk7XG4gICAgICAgICAgICBsZXQgc3VyY2hhcmdlICAgPSBwYXJzZUludChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3VyY2hhcmdlJykudmFsdWUsMTApO1xuICAgICAgICAgICAgbGV0IHByZWF1dGhJZCAgID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByZWF1dGhfcmVmJykudmFsdWU7IFxuICAgICAgICAgICAgbGV0IHJlZiAgICAgICAgID0gYHByY29tcC0ke3ByZWF1dGhJZH0tJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YDsgXG4gICAgICAgICAgICBsZXQgcmVzICAgICAgICAgPSB0aGlzLl9zcGlQcmVhdXRoLkluaXRpYXRlQ29tcGxldGlvblR4KHJlZiwgcHJlYXV0aElkLCBhbW91bnQsIHN1cmNoYXJnZSk7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5JbmZvKHJlcy5Jbml0aWF0ZWQgPyBcIiMgUHJlYXV0aCBjb21wbGV0ZSBJbml0aWF0ZWQuIFdpbGwgYmUgdXBkYXRlZCB3aXRoIFByb2dyZXNzLlwiIDogYCMgQ291bGQgbm90IGluaXRpYXRlIHByZWF1dGggY29tcGxldGUgcmVxdWVzdDogJHtyZXMuTWVzc2FnZX0uIFBsZWFzZSBSZXRyeS5gKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3R4X3NpZ25fYWNjZXB0JykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fc3BpLkFjY2VwdFNpZ25hdHVyZSh0cnVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3R4X3NpZ25fZGVjbGluZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5BY2NlcHRTaWduYXR1cmUoZmFsc2UpO1xuICAgICAgICB9KTtcblxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHhfY2FuY2VsJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fc3BpLkNhbmNlbFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvaycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5BY2tGbG93RW5kZWRBbmRCYWNrVG9JZGxlKCk7XG4gICAgICAgICAgICB0aGlzLl9mbG93X21zZy5DbGVhcigpO1xuICAgICAgICAgICAgdGhpcy5fZmxvd19tc2cuaW5uZXJIVE1MID0gXCJTZWxlY3QgZnJvbSB0aGUgb3B0aW9ucyBiZWxvd1wiO1xuICAgICAgICAgICAgdGhpcy5QcmludFN0YXR1c0FuZEFjdGlvbnMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29rX2NhbmNlbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaS5BY2tGbG93RW5kZWRBbmRCYWNrVG9JZGxlKCk7XG4gICAgICAgICAgICB0aGlzLl9sb2cuY2xlYXIoKTtcbiAgICAgICAgICAgIHRoaXMuX2Zsb3dfbXNnLmlubmVySFRNTCA9IFwiT3JkZXIgQ2FuY2VsbGVkXCI7XG4gICAgICAgICAgICB0aGlzLlByaW50U3RhdHVzQW5kQWN0aW9ucygpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBMb2FkUGVyc2lzdGVkU3RhdGUoKVxuICAgIHtcbiAgICAgICAgaWYobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Bvc19pZCcpKSBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fcG9zSWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncG9zX2lkJyk7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zX2lkJykudmFsdWUgPSB0aGlzLl9wb3NJZDtcbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fcG9zSWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncG9zX2lkJykudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZWZ0cG9zX2FkZHJlc3MnKSkgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX2VmdHBvc0FkZHJlc3MgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZWZ0cG9zX2FkZHJlc3MnKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZnRwb3NfYWRkcmVzcycpLnZhbHVlID0gdGhpcy5fZWZ0cG9zQWRkcmVzcztcbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSBcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5fZWZ0cG9zQWRkcmVzcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZnRwb3NfYWRkcmVzcycpLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmNwdF9mcm9tX2VmdHBvcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyY3B0X2Zyb21fZWZ0cG9zJykuY2hlY2tlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdyY3B0X2Zyb21fZWZ0cG9zJykgPT09ICd0cnVlJyB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2lnX2Zsb3dfZnJvbV9lZnRwb3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2lnX2Zsb3dfZnJvbV9lZnRwb3MnKS5jaGVja2VkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NpZ19mbG93X2Zyb21fZWZ0cG9zJykgPT09ICd0cnVlJyB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5fcHJpbnRfbWVyY2hhbnRfY29weSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcmludF9tZXJjaGFudF9jb3B5JykuY2hlY2tlZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcmludF9tZXJjaGFudF9jb3B5JykgPT09ICd0cnVlJyB8fCBmYWxzZTtcblxuICAgICAgICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRW5jS2V5JykgJiYgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0htYWNLZXknKSkgXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuX3NwaVNlY3JldHMgPSBuZXcgU2VjcmV0cyhsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRW5jS2V5JyksIGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdIbWFjS2V5JykpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIFN0YXJ0IHRoZSBQT1NcbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsICgpID0+IFxue1xuICAgIHRyeSBcbiAgICB7XG4gICAgICAgIGxldCBsb2cgICAgICAgICA9IGNvbnNvbGU7XG4gICAgICAgIGxldCByZWNlaXB0ICAgICA9IG5ldyBMb2dnZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3JlY2VpcHRfb3V0cHV0JyksYFxcblxcbiBcXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC8gXFxuXFxuYCk7XG4gICAgICAgIGxldCBmbG93X21zZyAgICA9IG5ldyBMb2dnZXIoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zsb3dfbXNnJykpO1xuICAgICAgICBsZXQgcG9zICAgICAgICAgPSBuZXcgTW90ZWxQb3MobG9nLCByZWNlaXB0LCBmbG93X21zZyk7XG4gICAgICAgIHBvcy5TdGFydCgpO1xuICAgIH0gXG4gICAgY2F0Y2goZXJyKSBcbiAgICB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG59KTtcblxuIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wic3BpLWNsaWVudC1qc1wiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJzcGktY2xpZW50LWpzXCJdID0gZmFjdG9yeSgpO1xufSkod2luZG93LCBmdW5jdGlvbigpIHtcbnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKSB7XG4vKioqKioqLyBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbi8qKioqKiovIFx0fVxuLyoqKioqKi8gXHR2YXIgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2sgPSB3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlc3BpX2NsaWVudF9qc1wiXTtcbi8qKioqKiovIFx0d2luZG93W1wid2VicGFja0hvdFVwZGF0ZXNwaV9jbGllbnRfanNcIl0gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbi8qKioqKiovIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4vKioqKioqLyBcdFx0aG90QWRkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuLyoqKioqKi8gXHRcdGlmIChwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xuLyoqKioqKi8gXHR9IDtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuLyoqKioqKi8gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbi8qKioqKiovIFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbi8qKioqKiovIFx0XHRzY3JpcHQuY2hhcnNldCA9IFwidXRmLThcIjtcbi8qKioqKiovIFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xuLyoqKioqKi8gXHRcdGlmIChudWxsKSBzY3JpcHQuY3Jvc3NPcmlnaW4gPSBudWxsO1xuLyoqKioqKi8gXHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbi8qKioqKiovIFx0XHRyZXF1ZXN0VGltZW91dCA9IHJlcXVlc3RUaW1lb3V0IHx8IDEwMDAwO1xuLyoqKioqKi8gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbi8qKioqKiovIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIHJlamVjdChuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnRcIikpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0dHJ5IHtcbi8qKioqKiovIFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbi8qKioqKiovIFx0XHRcdFx0dmFyIHJlcXVlc3RQYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc29uXCI7XG4vKioqKioqLyBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XG4vKioqKioqLyBcdFx0XHRcdHJlcXVlc3QudGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xuLyoqKioqKi8gXHRcdFx0XHRyZXF1ZXN0LnNlbmQobnVsbCk7XG4vKioqKioqLyBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnIpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRcdFx0aWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xuLyoqKioqKi8gXHRcdFx0XHRpZiAocmVxdWVzdC5zdGF0dXMgPT09IDApIHtcbi8qKioqKiovIFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4vKioqKioqLyBcdFx0XHRcdFx0cmVqZWN0KFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0bmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKVxuLyoqKioqKi8gXHRcdFx0XHRcdCk7XG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDQwNCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcbi8qKioqKiovIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSBpZiAocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XG4vKioqKioqLyBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxuLyoqKioqKi8gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbi8qKioqKiovIFx0XHRcdFx0fSBlbHNlIHtcbi8qKioqKiovIFx0XHRcdFx0XHQvLyBzdWNjZXNzXG4vKioqKioqLyBcdFx0XHRcdFx0dHJ5IHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdHZhciB1cGRhdGUgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbi8qKioqKiovIFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRyZXR1cm47XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fTtcbi8qKioqKiovIFx0XHR9KTtcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuLyoqKioqKi8gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbi8qKioqKiovIFx0dmFyIGhvdEN1cnJlbnRIYXNoID0gXCIyM2IxMzg0ZDkxMTA2NDNjNzUxNVwiO1xuLyoqKioqKi8gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbi8qKioqKiovIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XG4vKioqKioqLyBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7XG4vKioqKioqLyBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudFBhcmVudHMgPSBbXTtcbi8qKioqKiovIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4vKioqKioqLyBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4vKioqKioqLyBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0aWYgKCFtZSkgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX187XG4vKioqKioqLyBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuLyoqKioqKi8gXHRcdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcbi8qKioqKiovIFx0XHRcdFx0aWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcbi8qKioqKiovIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0fSBlbHNlIHtcbi8qKioqKiovIFx0XHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9IGVsc2Uge1xuLyoqKioqKi8gXHRcdFx0XHRjb25zb2xlLndhcm4oXG4vKioqKioqLyBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0cmVxdWVzdCArXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgK1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbi8qKioqKiovIFx0XHRcdFx0KTtcbi8qKioqKiovIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKHJlcXVlc3QpO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbi8qKioqKiovIFx0XHRcdHJldHVybiB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcbi8qKioqKiovIFx0XHRcdFx0fSxcbi8qKioqKiovIFx0XHRcdFx0c2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuLyoqKioqKi8gXHRcdFx0aWYgKFxuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoX193ZWJwYWNrX3JlcXVpcmVfXywgbmFtZSkgJiZcbi8qKioqKiovIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCIgJiZcbi8qKioqKiovIFx0XHRcdFx0bmFtZSAhPT0gXCJ0XCJcbi8qKioqKiovIFx0XHRcdCkge1xuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuLyoqKioqKi8gXHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJyZWFkeVwiKSBob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuLyoqKioqKi8gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4vKioqKioqLyBcdFx0XHRcdGZpbmlzaENodW5rTG9hZGluZygpO1xuLyoqKioqKi8gXHRcdFx0XHR0aHJvdyBlcnI7XG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XG4vKioqKioqLyBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbi8qKioqKiovIFx0XHRcdFx0aWYgKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRpZiAoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdGlmIChob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0Zm4udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4vKioqKioqLyBcdFx0XHRpZiAobW9kZSAmIDEpIHZhbHVlID0gZm4odmFsdWUpO1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18udCh2YWx1ZSwgbW9kZSAmIH4xKTtcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHRcdHJldHVybiBmbjtcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdHZhciBob3QgPSB7XG4vKioqKioqLyBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4vKioqKioqLyBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuLyoqKioqKi8gXHRcdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcbi8qKioqKiovIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcbi8qKioqKiovIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuLyoqKioqKi9cbi8qKioqKiovIFx0XHRcdC8vIE1vZHVsZSBBUElcbi8qKioqKiovIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xuLyoqKioqKi8gXHRcdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcbi8qKioqKiovIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbi8qKioqKiovIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbi8qKioqKiovIFx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcbi8qKioqKiovIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4vKioqKioqLyBcdFx0XHRcdGVsc2UgaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcbi8qKioqKiovIFx0XHRcdH0sXG4vKioqKioqLyBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbi8qKioqKiovIFx0XHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG4vKioqKioqLyBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4vKioqKioqLyBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4vKioqKioqLyBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuLyoqKioqKi8gXHRcdFx0XHRlbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XG4vKioqKioqLyBcdFx0XHR9LFxuLyoqKioqKi8gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcbi8qKioqKiovIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4vKioqKioqLyBcdFx0XHR9LFxuLyoqKioqKi8gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4vKioqKioqLyBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuLyoqKioqKi8gXHRcdFx0fSxcbi8qKioqKiovIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XG4vKioqKioqLyBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4vKioqKioqLyBcdFx0XHR9LFxuLyoqKioqKi9cbi8qKioqKiovIFx0XHRcdC8vIE1hbmFnZW1lbnQgQVBJXG4vKioqKioqLyBcdFx0XHRjaGVjazogaG90Q2hlY2ssXG4vKioqKioqLyBcdFx0XHRhcHBseTogaG90QXBwbHksXG4vKioqKioqLyBcdFx0XHRzdGF0dXM6IGZ1bmN0aW9uKGwpIHtcbi8qKioqKiovIFx0XHRcdFx0aWYgKCFsKSByZXR1cm4gaG90U3RhdHVzO1xuLyoqKioqKi8gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuLyoqKioqKi8gXHRcdFx0fSxcbi8qKioqKiovIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbi8qKioqKiovIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbi8qKioqKiovIFx0XHRcdH0sXG4vKioqKioqLyBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XG4vKioqKioqLyBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuLyoqKioqKi8gXHRcdFx0XHRpZiAoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuLyoqKioqKi8gXHRcdFx0fSxcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcbi8qKioqKiovIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxuLyoqKioqKi8gXHRcdH07XG4vKioqKioqLyBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuLyoqKioqKi8gXHRcdHJldHVybiBob3Q7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xuLyoqKioqKi8gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XG4vKioqKioqLyBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xuLyoqKioqKi8gXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaG90U3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG4vKioqKioqLyBcdFx0XHRob3RTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIHdoaWxlIGRvd25sb2FkaW5nXG4vKioqKioqLyBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xuLyoqKioqKi8gXHR2YXIgaG90Q2h1bmtzTG9hZGluZyA9IDA7XG4vKioqKioqLyBcdHZhciBob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcbi8qKioqKiovIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4vKioqKioqLyBcdHZhciBob3RBdmFpbGFibGVGaWxlc01hcCA9IHt9O1xuLyoqKioqKi8gXHR2YXIgaG90RGVmZXJyZWQ7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgdXBkYXRlIGluZm9cbi8qKioqKiovIFx0dmFyIGhvdFVwZGF0ZSwgaG90VXBkYXRlTmV3SGFzaDtcbi8qKioqKiovXG4vKioqKioqLyBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbi8qKioqKiovIFx0XHR2YXIgaXNOdW1iZXIgPSAraWQgKyBcIlwiID09PSBpZDtcbi8qKioqKiovIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcbi8qKioqKiovIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIikge1xuLyoqKioqKi8gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbi8qKioqKiovIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gaG90RG93bmxvYWRNYW5pZmVzdChob3RSZXF1ZXN0VGltZW91dCkudGhlbihmdW5jdGlvbih1cGRhdGUpIHtcbi8qKioqKiovIFx0XHRcdGlmICghdXBkYXRlKSB7XG4vKioqKioqLyBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XG4vKioqKioqLyBcdFx0XHRcdHJldHVybiBudWxsO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcbi8qKioqKiovIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuLyoqKioqKi8gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcbi8qKioqKiovIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xuLyoqKioqKi8gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbi8qKioqKiovIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XG4vKioqKioqLyBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcbi8qKioqKiovIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxuLyoqKioqKi8gXHRcdFx0XHR9O1xuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0XHRob3RVcGRhdGUgPSB7fTtcbi8qKioqKiovIFx0XHRcdHZhciBjaHVua0lkID0gXCJtYWluXCI7XG4vKioqKioqLyBcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3Ncbi8qKioqKiovIFx0XHRcdHtcbi8qKioqKiovIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cbi8qKioqKiovIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRpZiAoXG4vKioqKioqLyBcdFx0XHRcdGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIgJiZcbi8qKioqKiovIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuLyoqKioqKi8gXHRcdFx0XHRob3RXYWl0aW5nRmlsZXMgPT09IDBcbi8qKioqKiovIFx0XHRcdCkge1xuLyoqKioqKi8gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gcHJvbWlzZTtcbi8qKioqKiovIFx0XHR9KTtcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4vKioqKioqLyBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSB8fCAhaG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm47XG4vKioqKioqLyBcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSBmYWxzZTtcbi8qKioqKiovIFx0XHRmb3IgKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuLyoqKioqKi8gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4vKioqKioqLyBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdGlmICgtLWhvdFdhaXRpbmdGaWxlcyA9PT0gMCAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwKSB7XG4vKioqKioqLyBcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4vKioqKioqLyBcdFx0aWYgKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xuLyoqKioqKi8gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbi8qKioqKiovIFx0XHR9IGVsc2Uge1xuLyoqKioqKi8gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuLyoqKioqKi8gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XG4vKioqKioqLyBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcbi8qKioqKiovIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcbi8qKioqKiovIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbi8qKioqKiovIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XG4vKioqKioqLyBcdFx0aWYgKCFkZWZlcnJlZCkgcmV0dXJuO1xuLyoqKioqKi8gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4vKioqKioqLyBcdFx0XHQvLyBXcmFwIGRlZmVycmVkIG9iamVjdCBpbiBQcm9taXNlIHRvIG1hcmsgaXQgYXMgYSB3ZWxsLWhhbmRsZWQgUHJvbWlzZSB0b1xuLyoqKioqKi8gXHRcdFx0Ly8gYXZvaWQgdHJpZ2dlcmluZyB1bmNhdWdodCBleGNlcHRpb24gd2FybmluZyBpbiBDaHJvbWUuXG4vKioqKioqLyBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4vKioqKioqLyBcdFx0XHRQcm9taXNlLnJlc29sdmUoKVxuLyoqKioqKi8gXHRcdFx0XHQudGhlbihmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4vKioqKioqLyBcdFx0XHRcdH0pXG4vKioqKioqLyBcdFx0XHRcdC50aGVuKFxuLyoqKioqKi8gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdH0sXG4vKioqKioqLyBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdCk7XG4vKioqKioqLyBcdFx0fSBlbHNlIHtcbi8qKioqKiovIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcbi8qKioqKiovIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuLyoqKioqKi8gXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2godG9Nb2R1bGVJZChpZCkpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4vKioqKioqLyBcdFx0aWYgKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKVxuLyoqKioqKi8gXHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiYXBwbHkoKSBpcyBvbmx5IGFsbG93ZWQgaW4gcmVhZHkgc3RhdHVzXCIpO1xuLyoqKioqKi8gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHR2YXIgY2I7XG4vKioqKioqLyBcdFx0dmFyIGk7XG4vKioqKioqLyBcdFx0dmFyIGo7XG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZTtcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlSWQ7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdGZ1bmN0aW9uIGdldEFmZmVjdGVkU3R1ZmYodXBkYXRlTW9kdWxlSWQpIHtcbi8qKioqKiovIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbihpZCkge1xuLyoqKioqKi8gXHRcdFx0XHRyZXR1cm4ge1xuLyoqKioqKi8gXHRcdFx0XHRcdGNoYWluOiBbaWRdLFxuLyoqKioqKi8gXHRcdFx0XHRcdGlkOiBpZFxuLyoqKioqKi8gXHRcdFx0XHR9O1xuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4vKioqKioqLyBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcbi8qKioqKiovIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdFx0aWYgKCFtb2R1bGUgfHwgbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkKSBjb250aW51ZTtcbi8qKioqKiovIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdHJldHVybiB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbi8qKioqKiovIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuLyoqKioqKi8gXHRcdFx0XHRcdH07XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm4ge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4vKioqKioqLyBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG4vKioqKioqLyBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbi8qKioqKiovIFx0XHRcdFx0XHR9O1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XG4vKioqKioqLyBcdFx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuLyoqKioqKi8gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdHJldHVybiB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcbi8qKioqKiovIFx0XHRcdFx0XHRcdH07XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcbi8qKioqKiovIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG4vKioqKioqLyBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0Y29udGludWU7XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4vKioqKioqLyBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxuLyoqKioqKi8gXHRcdFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIHtcbi8qKioqKiovIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuLyoqKioqKi8gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcbi8qKioqKiovIFx0XHRcdH07XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG4vKioqKioqLyBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbi8qKioqKiovIFx0XHRcdFx0dmFyIGl0ZW0gPSBiW2ldO1xuLyoqKioqKi8gXHRcdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbi8qKioqKiovIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXG4vKioqKioqLyBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG4vKioqKioqLyBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuLyoqKioqKi8gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4vKioqKioqLyBcdFx0XHRjb25zb2xlLndhcm4oXG4vKioqKioqLyBcdFx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG4vKioqKioqLyBcdFx0XHQpO1xuLyoqKioqKi8gXHRcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuLyoqKioqKi8gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xuLyoqKioqKi8gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4vKioqKioqLyBcdFx0XHRcdHZhciByZXN1bHQ7XG4vKioqKioqLyBcdFx0XHRcdGlmIChob3RVcGRhdGVbaWRdKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4vKioqKioqLyBcdFx0XHRcdH0gZWxzZSB7XG4vKioqKioqLyBcdFx0XHRcdFx0cmVzdWx0ID0ge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXG4vKioqKioqLyBcdFx0XHRcdFx0fTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuLyoqKioqKi8gXHRcdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG4vKioqKioqLyBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xuLyoqKioqKi8gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdCk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRicmVhaztcbi8qKioqKiovIFx0XHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQucGFyZW50SWQgK1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdCk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRicmVhaztcbi8qKioqKiovIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdCk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRicmVhaztcbi8qKioqKiovIFx0XHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uQWNjZXB0ZWQpIG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRicmVhaztcbi8qKioqKiovIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGJyZWFrO1xuLyoqKioqKi8gXHRcdFx0XHRcdGRlZmF1bHQ6XG4vKioqKioqLyBcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiYWJvcnRcIik7XG4vKioqKioqLyBcdFx0XHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGFib3J0RXJyb3IpO1xuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdGlmIChkb0FwcGx5KSB7XG4vKioqKioqLyBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4vKioqKioqLyBcdFx0XHRcdFx0Zm9yIChtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmIChcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcyxcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHQpXG4vKioqKioqLyBcdFx0XHRcdFx0XHQpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSxcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdCk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdGlmIChkb0Rpc3Bvc2UpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbi8qKioqKiovIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuLyoqKioqKi8gXHRcdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcbi8qKioqKiovIFx0XHRmb3IgKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4vKioqKioqLyBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbi8qKioqKiovIFx0XHRcdGlmIChcbi8qKioqKiovIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiZcbi8qKioqKiovIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQgJiZcbi8qKioqKiovIFx0XHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuLyoqKioqKi8gXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSAhPT0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlXG4vKioqKioqLyBcdFx0XHQpIHtcbi8qKioqKiovIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuLyoqKioqKi8gXHRcdFx0XHRcdG1vZHVsZTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxuLyoqKioqKi8gXHRcdFx0XHR9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxuLyoqKioqKi8gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XG4vKioqKioqLyBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xuLyoqKioqKi8gXHRcdFx0aWYgKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xuLyoqKioqKi8gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fSk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdHZhciBpZHg7XG4vKioqKioqLyBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG4vKioqKioqLyBcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbi8qKioqKiovIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG4vKioqKioqLyBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHR2YXIgZGF0YSA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuLyoqKioqKi8gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcbi8qKioqKiovIFx0XHRcdGZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcbi8qKioqKiovIFx0XHRcdFx0Y2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XG4vKioqKioqLyBcdFx0XHRcdGNiKGRhdGEpO1xuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxuLyoqKioqKi8gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcbi8qKioqKiovIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXG4vKioqKioqLyBcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG4vKioqKioqLyBcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4vKioqKioqLyBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcbi8qKioqKiovIFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG4vKioqKioqLyBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG4vKioqKioqLyBcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG4vKioqKioqLyBcdFx0dmFyIGRlcGVuZGVuY3k7XG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuLyoqKioqKi8gXHRcdGZvciAobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcbi8qKioqKiovIFx0XHRcdGlmIChcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbi8qKioqKiovIFx0XHRcdCkge1xuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIE5vdyBpbiBcImFwcGx5XCIgcGhhc2Vcbi8qKioqKiovIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcbi8qKioqKiovIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbi8qKioqKiovIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG4vKioqKioqLyBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gYXBwbGllZFVwZGF0ZVttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuLyoqKioqKi8gXHRcdHZhciBlcnJvciA9IG51bGw7XG4vKioqKioqLyBcdFx0Zm9yIChtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuLyoqKioqKi8gXHRcdFx0aWYgKFxuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKVxuLyoqKioqKi8gXHRcdFx0KSB7XG4vKioqKioqLyBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdFx0XHRpZiAobW9kdWxlKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuLyoqKioqKi8gXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmIChjYikge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRpZiAoY2FsbGJhY2tzLmluZGV4T2YoY2IpICE9PSAtMSkgY29udGludWU7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0Y2IgPSBjYWxsYmFja3NbaV07XG4vKioqKioqLyBcdFx0XHRcdFx0XHR0cnkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4vKioqKioqLyBcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHR9KTtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHR9XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBMb2FkIHNlbGYgYWNjZXB0ZWQgbW9kdWxlc1xuLyoqKioqKi8gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbi8qKioqKiovIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuLyoqKioqKi8gXHRcdFx0bW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcbi8qKioqKiovIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcbi8qKioqKiovIFx0XHRcdHRyeSB7XG4vKioqKioqLyBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuLyoqKioqKi8gXHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuLyoqKioqKi8gXHRcdFx0XHRcdHRyeSB7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xuLyoqKioqKi8gXHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnIyO1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4vKioqKioqLyBcdFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2Uge1xuLyoqKioqKi8gXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR9KTtcbi8qKioqKiovIFx0XHRcdFx0XHR9XG4vKioqKioqLyBcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmICghZXJyb3IpIGVycm9yID0gZXJyO1xuLyoqKioqKi8gXHRcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdFx0fVxuLyoqKioqKi8gXHRcdFx0fVxuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcbi8qKioqKiovIFx0XHRpZiAoZXJyb3IpIHtcbi8qKioqKiovIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovXG4vKioqKioqLyBcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuLyoqKioqKi8gXHRcdFx0cmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xuLyoqKioqKi8gXHRcdH0pO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4vKioqKioqLyBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4vKioqKioqLyBcdFx0XHRjaGlsZHJlbjogW11cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4vKioqKioqLyBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vKioqKioqLyBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbi8qKioqKiovIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4vKioqKioqLyBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuLyoqKioqKi8gXHRcdHJldHVybiBucztcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19oYXNoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoXCIuL2luZGV4LmpzXCIpKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9pbmRleC5qc1wiKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKHtcblxuLyoqKi8gXCIuL2luZGV4LmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9pbmRleC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IFNwaSwgTG9nZ2VyLCBTZWNyZXRzLCBTdWNjZXNzU3RhdGUsIFRyYW5zYWN0aW9uT3B0aW9ucywgVHJhbnNhY3Rpb25UeXBlLCBTcGlGbG93LCBTcGlTdGF0dXMsIFByaW50aW5nUmVzcG9uc2UsIFJlZnVuZFJlc3BvbnNlLCBQdXJjaGFzZVJlc3BvbnNlLCBHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZSwgTW90b1B1cmNoYXNlUmVzcG9uc2UsIFRlcm1pbmFsU3RhdHVzUmVzcG9uc2UsIFRlcm1pbmFsQmF0dGVyeSwgQ2FzaG91dE9ubHlSZXNwb25zZSwgU2V0dGxlbWVudCwgUmVxdWVzdElkSGVscGVyLCBEZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlLCBCaWxsU3RhdHVzUmVzcG9uc2UsIEJpbGxSZXRyaWV2YWxSZXN1bHQsIEdldE9wZW5UYWJsZXNSZXNwb25zZSwgT3BlblRhYmxlc0VudHJ5LCBCaWxsUGF5bWVudEZsb3dFbmRlZFJlc3BvbnNlLCBBY2NvdW50VmVyaWZ5UmVzcG9uc2UsIFByZWF1dGhSZXNwb25zZSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc3JjX1NwaV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvU3BpICovIFwiLi9zcmMvU3BpLmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU3BpXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19TcGlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1tcIlNwaVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc3JjX0xvZ2dlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvTG9nZ2VyICovIFwiLi9zcmMvTG9nZ2VyLmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTG9nZ2VyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19Mb2dnZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1tcIkxvZ2dlclwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc3JjX1NlY3JldHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL1NlY3JldHMgKi8gXCIuL3NyYy9TZWNyZXRzLmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU2VjcmV0c1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfU2VjcmV0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiU2VjcmV0c1wiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc3JjX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9NZXNzYWdlcyAqLyBcIi4vc3JjL01lc3NhZ2VzLmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU3VjY2Vzc1N0YXRlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiU3VjY2Vzc1N0YXRlXCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zcmNfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9TcGlNb2RlbHMgKi8gXCIuL3NyYy9TcGlNb2RlbHMuanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJUcmFuc2FjdGlvbk9wdGlvbnNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdOyB9KTtcblxuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVHJhbnNhY3Rpb25UeXBlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNwaUZsb3dcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiU3BpRmxvd1wiXTsgfSk7XG5cbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNwaVN0YXR1c1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJTcGlTdGF0dXNcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19QcmludGluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvUHJpbnRpbmcgKi8gXCIuL3NyYy9QcmludGluZy5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlByaW50aW5nUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1ByaW50aW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJQcmludGluZ1Jlc3BvbnNlXCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zcmNfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL1B1cmNoYXNlICovIFwiLi9zcmMvUHVyY2hhc2UuanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJSZWZ1bmRSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1tcIlJlZnVuZFJlc3BvbnNlXCJdOyB9KTtcblxuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHVyY2hhc2VSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1tcIlB1cmNoYXNlUmVzcG9uc2VcIl07IH0pO1xuXG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1tcIkdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlXCJdOyB9KTtcblxuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTW90b1B1cmNoYXNlUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bXCJNb3RvUHVyY2hhc2VSZXNwb25zZVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc3JjX1Rlcm1pbmFsU3RhdHVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9UZXJtaW5hbFN0YXR1cyAqLyBcIi4vc3JjL1Rlcm1pbmFsU3RhdHVzLmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiVGVybWluYWxTdGF0dXNSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfVGVybWluYWxTdGF0dXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX1tcIlRlcm1pbmFsU3RhdHVzUmVzcG9uc2VcIl07IH0pO1xuXG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJUZXJtaW5hbEJhdHRlcnlcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1Rlcm1pbmFsU3RhdHVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19bXCJUZXJtaW5hbEJhdHRlcnlcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19DYXNob3V0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9DYXNob3V0ICovIFwiLi9zcmMvQ2FzaG91dC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkNhc2hvdXRPbmx5UmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX0Nhc2hvdXRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX1tcIkNhc2hvdXRPbmx5UmVzcG9uc2VcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19TZXR0bGVtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9TZXR0bGVtZW50ICovIFwiLi9zcmMvU2V0dGxlbWVudC5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNldHRsZW1lbnRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1NldHRsZW1lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfX1tcIlNldHRsZW1lbnRcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NyYy9SZXF1ZXN0SWRIZWxwZXIgKi8gXCIuL3NyYy9SZXF1ZXN0SWRIZWxwZXIuanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJSZXF1ZXN0SWRIZWxwZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfX1tcIlJlcXVlc3RJZEhlbHBlclwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc3JjX1NlcnZpY2VfRGV2aWNlU2VydmljZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL1NlcnZpY2UvRGV2aWNlU2VydmljZSAqLyBcIi4vc3JjL1NlcnZpY2UvRGV2aWNlU2VydmljZS5qc1wiKTtcbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1NlcnZpY2VfRGV2aWNlU2VydmljZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfX1tcIkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGVcIl07IH0pO1xuXG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3NyY19QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvUGF5QXRUYWJsZSAqLyBcIi4vc3JjL1BheUF0VGFibGUuanNcIik7XG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJCaWxsU3RhdHVzUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1BheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX19bXCJCaWxsU3RhdHVzUmVzcG9uc2VcIl07IH0pO1xuXG4vKiBoYXJtb255IHJlZXhwb3J0IChzYWZlKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJCaWxsUmV0cmlldmFsUmVzdWx0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMl9fW1wiQmlsbFJldHJpZXZhbFJlc3VsdFwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkdldE9wZW5UYWJsZXNSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfX1tcIkdldE9wZW5UYWJsZXNSZXNwb25zZVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIk9wZW5UYWJsZXNFbnRyeVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIF9zcmNfUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfX1tcIk9wZW5UYWJsZXNFbnRyeVwiXTsgfSk7XG5cbi8qIGhhcm1vbnkgcmVleHBvcnQgKHNhZmUpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkJpbGxQYXltZW50Rmxvd0VuZGVkUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfc3JjX1BheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEyX19bXCJCaWxsUGF5bWVudEZsb3dFbmRlZFJlc3BvbnNlXCJdOyB9KTtcblxuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zcmNfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3JjL1ByZWF1dGggKi8gXCIuL3NyYy9QcmVhdXRoLmpzXCIpO1xuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQWNjb3VudFZlcmlmeVJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fW1wiQWNjb3VudFZlcmlmeVJlc3BvbnNlXCJdOyB9KTtcblxuLyogaGFybW9ueSByZWV4cG9ydCAoc2FmZSkgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHJlYXV0aFJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gX3NyY19QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fW1wiUHJlYXV0aFJlc3BvbnNlXCJdOyB9KTtcblxuLy8gUmUtZXhwb3J0ZWQgbW9kdWxlcyByZXF1aXJlZCBmb3IgUE9TIHZlbmRvcnNcblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gIHRyeSB7XG4gICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgIHZhciB2YWx1ZSA9IGluZm8udmFsdWU7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVqZWN0KGVycm9yKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5mby5kb25lKSB7XG4gICAgcmVzb2x2ZSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cbiAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJuZXh0XCIsIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwidGhyb3dcIiwgZXJyKTtcbiAgICAgIH1cblxuICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICB9KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXN5bmNUb0dlbmVyYXRvcjtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9jbGFzc0NhbGxDaGVjaztcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3JlYWRPbmx5RXJyb3IuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVhZE9ubHlFcnJvci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuZnVuY3Rpb24gX3JlYWRPbmx5RXJyb3IobmFtZSkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiIGlzIHJlYWQtb25seVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfcmVhZE9ubHlFcnJvcjtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByZWdlbmVyYXRvci1ydW50aW1lICovIFwiLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzXCIpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2Flcy1qcy9pbmRleC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvYWVzLWpzL2luZGV4LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiEgTUlUIExpY2Vuc2UuIENvcHlyaWdodCAyMDE1LTIwMTggUmljaGFyZCBNb29yZSA8bWVAcmljbW9vLmNvbT4uIFNlZSBMSUNFTlNFLnR4dC4gKi9cbihmdW5jdGlvbihyb290KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBmdW5jdGlvbiBjaGVja0ludCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gKHBhcnNlSW50KHZhbHVlKSA9PT0gdmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrSW50cyhhcnJheWlzaCkge1xuICAgICAgICBpZiAoIWNoZWNrSW50KGFycmF5aXNoLmxlbmd0aCkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheWlzaC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFjaGVja0ludChhcnJheWlzaFtpXSkgfHwgYXJyYXlpc2hbaV0gPCAwIHx8IGFycmF5aXNoW2ldID4gMjU1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29lcmNlQXJyYXkoYXJnLCBjb3B5KSB7XG5cbiAgICAgICAgLy8gQXJyYXlCdWZmZXIgdmlld1xuICAgICAgICBpZiAoYXJnLmJ1ZmZlciAmJiBhcmcubmFtZSA9PT0gJ1VpbnQ4QXJyYXknKSB7XG5cbiAgICAgICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGFyZy5zbGljZSkge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSBhcmcuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhcmcgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEl0J3MgYW4gYXJyYXk7IGNoZWNrIGl0IGlzIGEgdmFsaWQgcmVwcmVzZW50YXRpb24gb2YgYSBieXRlXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgICAgIGlmICghY2hlY2tJbnRzKGFyZykpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FycmF5IGNvbnRhaW5zIGludmFsaWQgdmFsdWU6ICcgKyBhcmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvbWV0aGluZyBlbHNlLCBidXQgYmVoYXZlcyBsaWtlIGFuIGFycmF5IChtYXliZSBhIEJ1ZmZlcj8gQXJndW1lbnRzPylcbiAgICAgICAgaWYgKGNoZWNrSW50KGFyZy5sZW5ndGgpICYmIGNoZWNrSW50cyhhcmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5zdXBwb3J0ZWQgYXJyYXktbGlrZSBvYmplY3QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVBcnJheShsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZUFycmF5LCB0YXJnZXRBcnJheSwgdGFyZ2V0U3RhcnQsIHNvdXJjZVN0YXJ0LCBzb3VyY2VFbmQpIHtcbiAgICAgICAgaWYgKHNvdXJjZVN0YXJ0ICE9IG51bGwgfHwgc291cmNlRW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2VBcnJheS5zbGljZSkge1xuICAgICAgICAgICAgICAgIHNvdXJjZUFycmF5ID0gc291cmNlQXJyYXkuc2xpY2Uoc291cmNlU3RhcnQsIHNvdXJjZUVuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNvdXJjZUFycmF5ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc291cmNlQXJyYXksIHNvdXJjZVN0YXJ0LCBzb3VyY2VFbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRhcmdldEFycmF5LnNldChzb3VyY2VBcnJheSwgdGFyZ2V0U3RhcnQpO1xuICAgIH1cblxuXG5cbiAgICB2YXIgY29udmVydFV0ZjggPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZ1bmN0aW9uIHRvQnl0ZXModGV4dCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdLCBpID0gMDtcbiAgICAgICAgICAgIHRleHQgPSBlbmNvZGVVUkkodGV4dCk7XG4gICAgICAgICAgICB3aGlsZSAoaSA8IHRleHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSB0ZXh0LmNoYXJDb2RlQXQoaSsrKTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIGl0IGlzIGEgJSBzaWduLCBlbmNvZGUgdGhlIGZvbGxvd2luZyAyIGJ5dGVzIGFzIGEgaGV4IHZhbHVlXG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHRleHQuc3Vic3RyKGksIDIpLCAxNikpXG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMjtcblxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSwganVzdCB0aGUgYWN0dWFsIGJ5dGVcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNvZXJjZUFycmF5KHJlc3VsdCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBmcm9tQnl0ZXMoYnl0ZXMpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXSwgaSA9IDA7XG5cbiAgICAgICAgICAgIHdoaWxlIChpIDwgYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBieXRlc1tpXTtcblxuICAgICAgICAgICAgICAgIGlmIChjIDwgMTI4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoYykpO1xuICAgICAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjID4gMTkxICYmIGMgPCAyMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAweDFmKSA8PCA2KSB8IChieXRlc1tpICsgMV0gJiAweDNmKSkpO1xuICAgICAgICAgICAgICAgICAgICBpICs9IDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMgJiAweDBmKSA8PCAxMikgfCAoKGJ5dGVzW2kgKyAxXSAmIDB4M2YpIDw8IDYpIHwgKGJ5dGVzW2kgKyAyXSAmIDB4M2YpKSk7XG4gICAgICAgICAgICAgICAgICAgIGkgKz0gMztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9CeXRlczogdG9CeXRlcyxcbiAgICAgICAgICAgIGZyb21CeXRlczogZnJvbUJ5dGVzLFxuICAgICAgICB9XG4gICAgfSkoKTtcblxuICAgIHZhciBjb252ZXJ0SGV4ID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICBmdW5jdGlvbiB0b0J5dGVzKHRleHQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBhcnNlSW50KHRleHQuc3Vic3RyKGksIDIpLCAxNikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaHR0cDovL2l4dGkubmV0L2RldmVsb3BtZW50L2phdmFzY3JpcHQvMjAxMS8xMS8xMS9iYXNlNjQtZW5jb2RlZGVjb2RlLW9mLXV0ZjgtaW4tYnJvd3Nlci13aXRoLWpzLmh0bWxcbiAgICAgICAgdmFyIEhleCA9ICcwMTIzNDU2Nzg5YWJjZGVmJztcblxuICAgICAgICBmdW5jdGlvbiBmcm9tQnl0ZXMoYnl0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IGJ5dGVzW2ldO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChIZXhbKHYgJiAweGYwKSA+PiA0XSArIEhleFt2ICYgMHgwZl0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRvQnl0ZXM6IHRvQnl0ZXMsXG4gICAgICAgICAgICBmcm9tQnl0ZXM6IGZyb21CeXRlcyxcbiAgICAgICAgfVxuICAgIH0pKCk7XG5cblxuICAgIC8vIE51bWJlciBvZiByb3VuZHMgYnkga2V5c2l6ZVxuICAgIHZhciBudW1iZXJPZlJvdW5kcyA9IHsxNjogMTAsIDI0OiAxMiwgMzI6IDE0fVxuXG4gICAgLy8gUm91bmQgY29uc3RhbnQgd29yZHNcbiAgICB2YXIgcmNvbiA9IFsweDAxLCAweDAyLCAweDA0LCAweDA4LCAweDEwLCAweDIwLCAweDQwLCAweDgwLCAweDFiLCAweDM2LCAweDZjLCAweGQ4LCAweGFiLCAweDRkLCAweDlhLCAweDJmLCAweDVlLCAweGJjLCAweDYzLCAweGM2LCAweDk3LCAweDM1LCAweDZhLCAweGQ0LCAweGIzLCAweDdkLCAweGZhLCAweGVmLCAweGM1LCAweDkxXTtcblxuICAgIC8vIFMtYm94IGFuZCBJbnZlcnNlIFMtYm94IChTIGlzIGZvciBTdWJzdGl0dXRpb24pXG4gICAgdmFyIFMgPSBbMHg2MywgMHg3YywgMHg3NywgMHg3YiwgMHhmMiwgMHg2YiwgMHg2ZiwgMHhjNSwgMHgzMCwgMHgwMSwgMHg2NywgMHgyYiwgMHhmZSwgMHhkNywgMHhhYiwgMHg3NiwgMHhjYSwgMHg4MiwgMHhjOSwgMHg3ZCwgMHhmYSwgMHg1OSwgMHg0NywgMHhmMCwgMHhhZCwgMHhkNCwgMHhhMiwgMHhhZiwgMHg5YywgMHhhNCwgMHg3MiwgMHhjMCwgMHhiNywgMHhmZCwgMHg5MywgMHgyNiwgMHgzNiwgMHgzZiwgMHhmNywgMHhjYywgMHgzNCwgMHhhNSwgMHhlNSwgMHhmMSwgMHg3MSwgMHhkOCwgMHgzMSwgMHgxNSwgMHgwNCwgMHhjNywgMHgyMywgMHhjMywgMHgxOCwgMHg5NiwgMHgwNSwgMHg5YSwgMHgwNywgMHgxMiwgMHg4MCwgMHhlMiwgMHhlYiwgMHgyNywgMHhiMiwgMHg3NSwgMHgwOSwgMHg4MywgMHgyYywgMHgxYSwgMHgxYiwgMHg2ZSwgMHg1YSwgMHhhMCwgMHg1MiwgMHgzYiwgMHhkNiwgMHhiMywgMHgyOSwgMHhlMywgMHgyZiwgMHg4NCwgMHg1MywgMHhkMSwgMHgwMCwgMHhlZCwgMHgyMCwgMHhmYywgMHhiMSwgMHg1YiwgMHg2YSwgMHhjYiwgMHhiZSwgMHgzOSwgMHg0YSwgMHg0YywgMHg1OCwgMHhjZiwgMHhkMCwgMHhlZiwgMHhhYSwgMHhmYiwgMHg0MywgMHg0ZCwgMHgzMywgMHg4NSwgMHg0NSwgMHhmOSwgMHgwMiwgMHg3ZiwgMHg1MCwgMHgzYywgMHg5ZiwgMHhhOCwgMHg1MSwgMHhhMywgMHg0MCwgMHg4ZiwgMHg5MiwgMHg5ZCwgMHgzOCwgMHhmNSwgMHhiYywgMHhiNiwgMHhkYSwgMHgyMSwgMHgxMCwgMHhmZiwgMHhmMywgMHhkMiwgMHhjZCwgMHgwYywgMHgxMywgMHhlYywgMHg1ZiwgMHg5NywgMHg0NCwgMHgxNywgMHhjNCwgMHhhNywgMHg3ZSwgMHgzZCwgMHg2NCwgMHg1ZCwgMHgxOSwgMHg3MywgMHg2MCwgMHg4MSwgMHg0ZiwgMHhkYywgMHgyMiwgMHgyYSwgMHg5MCwgMHg4OCwgMHg0NiwgMHhlZSwgMHhiOCwgMHgxNCwgMHhkZSwgMHg1ZSwgMHgwYiwgMHhkYiwgMHhlMCwgMHgzMiwgMHgzYSwgMHgwYSwgMHg0OSwgMHgwNiwgMHgyNCwgMHg1YywgMHhjMiwgMHhkMywgMHhhYywgMHg2MiwgMHg5MSwgMHg5NSwgMHhlNCwgMHg3OSwgMHhlNywgMHhjOCwgMHgzNywgMHg2ZCwgMHg4ZCwgMHhkNSwgMHg0ZSwgMHhhOSwgMHg2YywgMHg1NiwgMHhmNCwgMHhlYSwgMHg2NSwgMHg3YSwgMHhhZSwgMHgwOCwgMHhiYSwgMHg3OCwgMHgyNSwgMHgyZSwgMHgxYywgMHhhNiwgMHhiNCwgMHhjNiwgMHhlOCwgMHhkZCwgMHg3NCwgMHgxZiwgMHg0YiwgMHhiZCwgMHg4YiwgMHg4YSwgMHg3MCwgMHgzZSwgMHhiNSwgMHg2NiwgMHg0OCwgMHgwMywgMHhmNiwgMHgwZSwgMHg2MSwgMHgzNSwgMHg1NywgMHhiOSwgMHg4NiwgMHhjMSwgMHgxZCwgMHg5ZSwgMHhlMSwgMHhmOCwgMHg5OCwgMHgxMSwgMHg2OSwgMHhkOSwgMHg4ZSwgMHg5NCwgMHg5YiwgMHgxZSwgMHg4NywgMHhlOSwgMHhjZSwgMHg1NSwgMHgyOCwgMHhkZiwgMHg4YywgMHhhMSwgMHg4OSwgMHgwZCwgMHhiZiwgMHhlNiwgMHg0MiwgMHg2OCwgMHg0MSwgMHg5OSwgMHgyZCwgMHgwZiwgMHhiMCwgMHg1NCwgMHhiYiwgMHgxNl07XG4gICAgdmFyIFNpID1bMHg1MiwgMHgwOSwgMHg2YSwgMHhkNSwgMHgzMCwgMHgzNiwgMHhhNSwgMHgzOCwgMHhiZiwgMHg0MCwgMHhhMywgMHg5ZSwgMHg4MSwgMHhmMywgMHhkNywgMHhmYiwgMHg3YywgMHhlMywgMHgzOSwgMHg4MiwgMHg5YiwgMHgyZiwgMHhmZiwgMHg4NywgMHgzNCwgMHg4ZSwgMHg0MywgMHg0NCwgMHhjNCwgMHhkZSwgMHhlOSwgMHhjYiwgMHg1NCwgMHg3YiwgMHg5NCwgMHgzMiwgMHhhNiwgMHhjMiwgMHgyMywgMHgzZCwgMHhlZSwgMHg0YywgMHg5NSwgMHgwYiwgMHg0MiwgMHhmYSwgMHhjMywgMHg0ZSwgMHgwOCwgMHgyZSwgMHhhMSwgMHg2NiwgMHgyOCwgMHhkOSwgMHgyNCwgMHhiMiwgMHg3NiwgMHg1YiwgMHhhMiwgMHg0OSwgMHg2ZCwgMHg4YiwgMHhkMSwgMHgyNSwgMHg3MiwgMHhmOCwgMHhmNiwgMHg2NCwgMHg4NiwgMHg2OCwgMHg5OCwgMHgxNiwgMHhkNCwgMHhhNCwgMHg1YywgMHhjYywgMHg1ZCwgMHg2NSwgMHhiNiwgMHg5MiwgMHg2YywgMHg3MCwgMHg0OCwgMHg1MCwgMHhmZCwgMHhlZCwgMHhiOSwgMHhkYSwgMHg1ZSwgMHgxNSwgMHg0NiwgMHg1NywgMHhhNywgMHg4ZCwgMHg5ZCwgMHg4NCwgMHg5MCwgMHhkOCwgMHhhYiwgMHgwMCwgMHg4YywgMHhiYywgMHhkMywgMHgwYSwgMHhmNywgMHhlNCwgMHg1OCwgMHgwNSwgMHhiOCwgMHhiMywgMHg0NSwgMHgwNiwgMHhkMCwgMHgyYywgMHgxZSwgMHg4ZiwgMHhjYSwgMHgzZiwgMHgwZiwgMHgwMiwgMHhjMSwgMHhhZiwgMHhiZCwgMHgwMywgMHgwMSwgMHgxMywgMHg4YSwgMHg2YiwgMHgzYSwgMHg5MSwgMHgxMSwgMHg0MSwgMHg0ZiwgMHg2NywgMHhkYywgMHhlYSwgMHg5NywgMHhmMiwgMHhjZiwgMHhjZSwgMHhmMCwgMHhiNCwgMHhlNiwgMHg3MywgMHg5NiwgMHhhYywgMHg3NCwgMHgyMiwgMHhlNywgMHhhZCwgMHgzNSwgMHg4NSwgMHhlMiwgMHhmOSwgMHgzNywgMHhlOCwgMHgxYywgMHg3NSwgMHhkZiwgMHg2ZSwgMHg0NywgMHhmMSwgMHgxYSwgMHg3MSwgMHgxZCwgMHgyOSwgMHhjNSwgMHg4OSwgMHg2ZiwgMHhiNywgMHg2MiwgMHgwZSwgMHhhYSwgMHgxOCwgMHhiZSwgMHgxYiwgMHhmYywgMHg1NiwgMHgzZSwgMHg0YiwgMHhjNiwgMHhkMiwgMHg3OSwgMHgyMCwgMHg5YSwgMHhkYiwgMHhjMCwgMHhmZSwgMHg3OCwgMHhjZCwgMHg1YSwgMHhmNCwgMHgxZiwgMHhkZCwgMHhhOCwgMHgzMywgMHg4OCwgMHgwNywgMHhjNywgMHgzMSwgMHhiMSwgMHgxMiwgMHgxMCwgMHg1OSwgMHgyNywgMHg4MCwgMHhlYywgMHg1ZiwgMHg2MCwgMHg1MSwgMHg3ZiwgMHhhOSwgMHgxOSwgMHhiNSwgMHg0YSwgMHgwZCwgMHgyZCwgMHhlNSwgMHg3YSwgMHg5ZiwgMHg5MywgMHhjOSwgMHg5YywgMHhlZiwgMHhhMCwgMHhlMCwgMHgzYiwgMHg0ZCwgMHhhZSwgMHgyYSwgMHhmNSwgMHhiMCwgMHhjOCwgMHhlYiwgMHhiYiwgMHgzYywgMHg4MywgMHg1MywgMHg5OSwgMHg2MSwgMHgxNywgMHgyYiwgMHgwNCwgMHg3ZSwgMHhiYSwgMHg3NywgMHhkNiwgMHgyNiwgMHhlMSwgMHg2OSwgMHgxNCwgMHg2MywgMHg1NSwgMHgyMSwgMHgwYywgMHg3ZF07XG5cbiAgICAvLyBUcmFuc2Zvcm1hdGlvbnMgZm9yIGVuY3J5cHRpb25cbiAgICB2YXIgVDEgPSBbMHhjNjYzNjNhNSwgMHhmODdjN2M4NCwgMHhlZTc3Nzc5OSwgMHhmNjdiN2I4ZCwgMHhmZmYyZjIwZCwgMHhkNjZiNmJiZCwgMHhkZTZmNmZiMSwgMHg5MWM1YzU1NCwgMHg2MDMwMzA1MCwgMHgwMjAxMDEwMywgMHhjZTY3NjdhOSwgMHg1NjJiMmI3ZCwgMHhlN2ZlZmUxOSwgMHhiNWQ3ZDc2MiwgMHg0ZGFiYWJlNiwgMHhlYzc2NzY5YSwgMHg4ZmNhY2E0NSwgMHgxZjgyODI5ZCwgMHg4OWM5Yzk0MCwgMHhmYTdkN2Q4NywgMHhlZmZhZmExNSwgMHhiMjU5NTllYiwgMHg4ZTQ3NDdjOSwgMHhmYmYwZjAwYiwgMHg0MWFkYWRlYywgMHhiM2Q0ZDQ2NywgMHg1ZmEyYTJmZCwgMHg0NWFmYWZlYSwgMHgyMzljOWNiZiwgMHg1M2E0YTRmNywgMHhlNDcyNzI5NiwgMHg5YmMwYzA1YiwgMHg3NWI3YjdjMiwgMHhlMWZkZmQxYywgMHgzZDkzOTNhZSwgMHg0YzI2MjY2YSwgMHg2YzM2MzY1YSwgMHg3ZTNmM2Y0MSwgMHhmNWY3ZjcwMiwgMHg4M2NjY2M0ZiwgMHg2ODM0MzQ1YywgMHg1MWE1YTVmNCwgMHhkMWU1ZTUzNCwgMHhmOWYxZjEwOCwgMHhlMjcxNzE5MywgMHhhYmQ4ZDg3MywgMHg2MjMxMzE1MywgMHgyYTE1MTUzZiwgMHgwODA0MDQwYywgMHg5NWM3Yzc1MiwgMHg0NjIzMjM2NSwgMHg5ZGMzYzM1ZSwgMHgzMDE4MTgyOCwgMHgzNzk2OTZhMSwgMHgwYTA1MDUwZiwgMHgyZjlhOWFiNSwgMHgwZTA3MDcwOSwgMHgyNDEyMTIzNiwgMHgxYjgwODA5YiwgMHhkZmUyZTIzZCwgMHhjZGViZWIyNiwgMHg0ZTI3Mjc2OSwgMHg3ZmIyYjJjZCwgMHhlYTc1NzU5ZiwgMHgxMjA5MDkxYiwgMHgxZDgzODM5ZSwgMHg1ODJjMmM3NCwgMHgzNDFhMWEyZSwgMHgzNjFiMWIyZCwgMHhkYzZlNmViMiwgMHhiNDVhNWFlZSwgMHg1YmEwYTBmYiwgMHhhNDUyNTJmNiwgMHg3NjNiM2I0ZCwgMHhiN2Q2ZDY2MSwgMHg3ZGIzYjNjZSwgMHg1MjI5Mjk3YiwgMHhkZGUzZTMzZSwgMHg1ZTJmMmY3MSwgMHgxMzg0ODQ5NywgMHhhNjUzNTNmNSwgMHhiOWQxZDE2OCwgMHgwMDAwMDAwMCwgMHhjMWVkZWQyYywgMHg0MDIwMjA2MCwgMHhlM2ZjZmMxZiwgMHg3OWIxYjFjOCwgMHhiNjViNWJlZCwgMHhkNDZhNmFiZSwgMHg4ZGNiY2I0NiwgMHg2N2JlYmVkOSwgMHg3MjM5Mzk0YiwgMHg5NDRhNGFkZSwgMHg5ODRjNGNkNCwgMHhiMDU4NThlOCwgMHg4NWNmY2Y0YSwgMHhiYmQwZDA2YiwgMHhjNWVmZWYyYSwgMHg0ZmFhYWFlNSwgMHhlZGZiZmIxNiwgMHg4NjQzNDNjNSwgMHg5YTRkNGRkNywgMHg2NjMzMzM1NSwgMHgxMTg1ODU5NCwgMHg4YTQ1NDVjZiwgMHhlOWY5ZjkxMCwgMHgwNDAyMDIwNiwgMHhmZTdmN2Y4MSwgMHhhMDUwNTBmMCwgMHg3ODNjM2M0NCwgMHgyNTlmOWZiYSwgMHg0YmE4YThlMywgMHhhMjUxNTFmMywgMHg1ZGEzYTNmZSwgMHg4MDQwNDBjMCwgMHgwNThmOGY4YSwgMHgzZjkyOTJhZCwgMHgyMTlkOWRiYywgMHg3MDM4Mzg0OCwgMHhmMWY1ZjUwNCwgMHg2M2JjYmNkZiwgMHg3N2I2YjZjMSwgMHhhZmRhZGE3NSwgMHg0MjIxMjE2MywgMHgyMDEwMTAzMCwgMHhlNWZmZmYxYSwgMHhmZGYzZjMwZSwgMHhiZmQyZDI2ZCwgMHg4MWNkY2Q0YywgMHgxODBjMGMxNCwgMHgyNjEzMTMzNSwgMHhjM2VjZWMyZiwgMHhiZTVmNWZlMSwgMHgzNTk3OTdhMiwgMHg4ODQ0NDRjYywgMHgyZTE3MTczOSwgMHg5M2M0YzQ1NywgMHg1NWE3YTdmMiwgMHhmYzdlN2U4MiwgMHg3YTNkM2Q0NywgMHhjODY0NjRhYywgMHhiYTVkNWRlNywgMHgzMjE5MTkyYiwgMHhlNjczNzM5NSwgMHhjMDYwNjBhMCwgMHgxOTgxODE5OCwgMHg5ZTRmNGZkMSwgMHhhM2RjZGM3ZiwgMHg0NDIyMjI2NiwgMHg1NDJhMmE3ZSwgMHgzYjkwOTBhYiwgMHgwYjg4ODg4MywgMHg4YzQ2NDZjYSwgMHhjN2VlZWUyOSwgMHg2YmI4YjhkMywgMHgyODE0MTQzYywgMHhhN2RlZGU3OSwgMHhiYzVlNWVlMiwgMHgxNjBiMGIxZCwgMHhhZGRiZGI3NiwgMHhkYmUwZTAzYiwgMHg2NDMyMzI1NiwgMHg3NDNhM2E0ZSwgMHgxNDBhMGExZSwgMHg5MjQ5NDlkYiwgMHgwYzA2MDYwYSwgMHg0ODI0MjQ2YywgMHhiODVjNWNlNCwgMHg5ZmMyYzI1ZCwgMHhiZGQzZDM2ZSwgMHg0M2FjYWNlZiwgMHhjNDYyNjJhNiwgMHgzOTkxOTFhOCwgMHgzMTk1OTVhNCwgMHhkM2U0ZTQzNywgMHhmMjc5Nzk4YiwgMHhkNWU3ZTczMiwgMHg4YmM4Yzg0MywgMHg2ZTM3Mzc1OSwgMHhkYTZkNmRiNywgMHgwMThkOGQ4YywgMHhiMWQ1ZDU2NCwgMHg5YzRlNGVkMiwgMHg0OWE5YTllMCwgMHhkODZjNmNiNCwgMHhhYzU2NTZmYSwgMHhmM2Y0ZjQwNywgMHhjZmVhZWEyNSwgMHhjYTY1NjVhZiwgMHhmNDdhN2E4ZSwgMHg0N2FlYWVlOSwgMHgxMDA4MDgxOCwgMHg2ZmJhYmFkNSwgMHhmMDc4Nzg4OCwgMHg0YTI1MjU2ZiwgMHg1YzJlMmU3MiwgMHgzODFjMWMyNCwgMHg1N2E2YTZmMSwgMHg3M2I0YjRjNywgMHg5N2M2YzY1MSwgMHhjYmU4ZTgyMywgMHhhMWRkZGQ3YywgMHhlODc0NzQ5YywgMHgzZTFmMWYyMSwgMHg5NjRiNGJkZCwgMHg2MWJkYmRkYywgMHgwZDhiOGI4NiwgMHgwZjhhOGE4NSwgMHhlMDcwNzA5MCwgMHg3YzNlM2U0MiwgMHg3MWI1YjVjNCwgMHhjYzY2NjZhYSwgMHg5MDQ4NDhkOCwgMHgwNjAzMDMwNSwgMHhmN2Y2ZjYwMSwgMHgxYzBlMGUxMiwgMHhjMjYxNjFhMywgMHg2YTM1MzU1ZiwgMHhhZTU3NTdmOSwgMHg2OWI5YjlkMCwgMHgxNzg2ODY5MSwgMHg5OWMxYzE1OCwgMHgzYTFkMWQyNywgMHgyNzllOWViOSwgMHhkOWUxZTEzOCwgMHhlYmY4ZjgxMywgMHgyYjk4OThiMywgMHgyMjExMTEzMywgMHhkMjY5NjliYiwgMHhhOWQ5ZDk3MCwgMHgwNzhlOGU4OSwgMHgzMzk0OTRhNywgMHgyZDliOWJiNiwgMHgzYzFlMWUyMiwgMHgxNTg3ODc5MiwgMHhjOWU5ZTkyMCwgMHg4N2NlY2U0OSwgMHhhYTU1NTVmZiwgMHg1MDI4Mjg3OCwgMHhhNWRmZGY3YSwgMHgwMzhjOGM4ZiwgMHg1OWExYTFmOCwgMHgwOTg5ODk4MCwgMHgxYTBkMGQxNywgMHg2NWJmYmZkYSwgMHhkN2U2ZTYzMSwgMHg4NDQyNDJjNiwgMHhkMDY4NjhiOCwgMHg4MjQxNDFjMywgMHgyOTk5OTliMCwgMHg1YTJkMmQ3NywgMHgxZTBmMGYxMSwgMHg3YmIwYjBjYiwgMHhhODU0NTRmYywgMHg2ZGJiYmJkNiwgMHgyYzE2MTYzYV07XG4gICAgdmFyIFQyID0gWzB4YTVjNjYzNjMsIDB4ODRmODdjN2MsIDB4OTllZTc3NzcsIDB4OGRmNjdiN2IsIDB4MGRmZmYyZjIsIDB4YmRkNjZiNmIsIDB4YjFkZTZmNmYsIDB4NTQ5MWM1YzUsIDB4NTA2MDMwMzAsIDB4MDMwMjAxMDEsIDB4YTljZTY3NjcsIDB4N2Q1NjJiMmIsIDB4MTllN2ZlZmUsIDB4NjJiNWQ3ZDcsIDB4ZTY0ZGFiYWIsIDB4OWFlYzc2NzYsIDB4NDU4ZmNhY2EsIDB4OWQxZjgyODIsIDB4NDA4OWM5YzksIDB4ODdmYTdkN2QsIDB4MTVlZmZhZmEsIDB4ZWJiMjU5NTksIDB4Yzk4ZTQ3NDcsIDB4MGJmYmYwZjAsIDB4ZWM0MWFkYWQsIDB4NjdiM2Q0ZDQsIDB4ZmQ1ZmEyYTIsIDB4ZWE0NWFmYWYsIDB4YmYyMzljOWMsIDB4Zjc1M2E0YTQsIDB4OTZlNDcyNzIsIDB4NWI5YmMwYzAsIDB4YzI3NWI3YjcsIDB4MWNlMWZkZmQsIDB4YWUzZDkzOTMsIDB4NmE0YzI2MjYsIDB4NWE2YzM2MzYsIDB4NDE3ZTNmM2YsIDB4MDJmNWY3ZjcsIDB4NGY4M2NjY2MsIDB4NWM2ODM0MzQsIDB4ZjQ1MWE1YTUsIDB4MzRkMWU1ZTUsIDB4MDhmOWYxZjEsIDB4OTNlMjcxNzEsIDB4NzNhYmQ4ZDgsIDB4NTM2MjMxMzEsIDB4M2YyYTE1MTUsIDB4MGMwODA0MDQsIDB4NTI5NWM3YzcsIDB4NjU0NjIzMjMsIDB4NWU5ZGMzYzMsIDB4MjgzMDE4MTgsIDB4YTEzNzk2OTYsIDB4MGYwYTA1MDUsIDB4YjUyZjlhOWEsIDB4MDkwZTA3MDcsIDB4MzYyNDEyMTIsIDB4OWIxYjgwODAsIDB4M2RkZmUyZTIsIDB4MjZjZGViZWIsIDB4Njk0ZTI3MjcsIDB4Y2Q3ZmIyYjIsIDB4OWZlYTc1NzUsIDB4MWIxMjA5MDksIDB4OWUxZDgzODMsIDB4NzQ1ODJjMmMsIDB4MmUzNDFhMWEsIDB4MmQzNjFiMWIsIDB4YjJkYzZlNmUsIDB4ZWViNDVhNWEsIDB4ZmI1YmEwYTAsIDB4ZjZhNDUyNTIsIDB4NGQ3NjNiM2IsIDB4NjFiN2Q2ZDYsIDB4Y2U3ZGIzYjMsIDB4N2I1MjI5MjksIDB4M2VkZGUzZTMsIDB4NzE1ZTJmMmYsIDB4OTcxMzg0ODQsIDB4ZjVhNjUzNTMsIDB4NjhiOWQxZDEsIDB4MDAwMDAwMDAsIDB4MmNjMWVkZWQsIDB4NjA0MDIwMjAsIDB4MWZlM2ZjZmMsIDB4Yzg3OWIxYjEsIDB4ZWRiNjViNWIsIDB4YmVkNDZhNmEsIDB4NDY4ZGNiY2IsIDB4ZDk2N2JlYmUsIDB4NGI3MjM5MzksIDB4ZGU5NDRhNGEsIDB4ZDQ5ODRjNGMsIDB4ZThiMDU4NTgsIDB4NGE4NWNmY2YsIDB4NmJiYmQwZDAsIDB4MmFjNWVmZWYsIDB4ZTU0ZmFhYWEsIDB4MTZlZGZiZmIsIDB4YzU4NjQzNDMsIDB4ZDc5YTRkNGQsIDB4NTU2NjMzMzMsIDB4OTQxMTg1ODUsIDB4Y2Y4YTQ1NDUsIDB4MTBlOWY5ZjksIDB4MDYwNDAyMDIsIDB4ODFmZTdmN2YsIDB4ZjBhMDUwNTAsIDB4NDQ3ODNjM2MsIDB4YmEyNTlmOWYsIDB4ZTM0YmE4YTgsIDB4ZjNhMjUxNTEsIDB4ZmU1ZGEzYTMsIDB4YzA4MDQwNDAsIDB4OGEwNThmOGYsIDB4YWQzZjkyOTIsIDB4YmMyMTlkOWQsIDB4NDg3MDM4MzgsIDB4MDRmMWY1ZjUsIDB4ZGY2M2JjYmMsIDB4YzE3N2I2YjYsIDB4NzVhZmRhZGEsIDB4NjM0MjIxMjEsIDB4MzAyMDEwMTAsIDB4MWFlNWZmZmYsIDB4MGVmZGYzZjMsIDB4NmRiZmQyZDIsIDB4NGM4MWNkY2QsIDB4MTQxODBjMGMsIDB4MzUyNjEzMTMsIDB4MmZjM2VjZWMsIDB4ZTFiZTVmNWYsIDB4YTIzNTk3OTcsIDB4Y2M4ODQ0NDQsIDB4MzkyZTE3MTcsIDB4NTc5M2M0YzQsIDB4ZjI1NWE3YTcsIDB4ODJmYzdlN2UsIDB4NDc3YTNkM2QsIDB4YWNjODY0NjQsIDB4ZTdiYTVkNWQsIDB4MmIzMjE5MTksIDB4OTVlNjczNzMsIDB4YTBjMDYwNjAsIDB4OTgxOTgxODEsIDB4ZDE5ZTRmNGYsIDB4N2ZhM2RjZGMsIDB4NjY0NDIyMjIsIDB4N2U1NDJhMmEsIDB4YWIzYjkwOTAsIDB4ODMwYjg4ODgsIDB4Y2E4YzQ2NDYsIDB4MjljN2VlZWUsIDB4ZDM2YmI4YjgsIDB4M2MyODE0MTQsIDB4NzlhN2RlZGUsIDB4ZTJiYzVlNWUsIDB4MWQxNjBiMGIsIDB4NzZhZGRiZGIsIDB4M2JkYmUwZTAsIDB4NTY2NDMyMzIsIDB4NGU3NDNhM2EsIDB4MWUxNDBhMGEsIDB4ZGI5MjQ5NDksIDB4MGEwYzA2MDYsIDB4NmM0ODI0MjQsIDB4ZTRiODVjNWMsIDB4NWQ5ZmMyYzIsIDB4NmViZGQzZDMsIDB4ZWY0M2FjYWMsIDB4YTZjNDYyNjIsIDB4YTgzOTkxOTEsIDB4YTQzMTk1OTUsIDB4MzdkM2U0ZTQsIDB4OGJmMjc5NzksIDB4MzJkNWU3ZTcsIDB4NDM4YmM4YzgsIDB4NTk2ZTM3MzcsIDB4YjdkYTZkNmQsIDB4OGMwMThkOGQsIDB4NjRiMWQ1ZDUsIDB4ZDI5YzRlNGUsIDB4ZTA0OWE5YTksIDB4YjRkODZjNmMsIDB4ZmFhYzU2NTYsIDB4MDdmM2Y0ZjQsIDB4MjVjZmVhZWEsIDB4YWZjYTY1NjUsIDB4OGVmNDdhN2EsIDB4ZTk0N2FlYWUsIDB4MTgxMDA4MDgsIDB4ZDU2ZmJhYmEsIDB4ODhmMDc4NzgsIDB4NmY0YTI1MjUsIDB4NzI1YzJlMmUsIDB4MjQzODFjMWMsIDB4ZjE1N2E2YTYsIDB4Yzc3M2I0YjQsIDB4NTE5N2M2YzYsIDB4MjNjYmU4ZTgsIDB4N2NhMWRkZGQsIDB4OWNlODc0NzQsIDB4MjEzZTFmMWYsIDB4ZGQ5NjRiNGIsIDB4ZGM2MWJkYmQsIDB4ODYwZDhiOGIsIDB4ODUwZjhhOGEsIDB4OTBlMDcwNzAsIDB4NDI3YzNlM2UsIDB4YzQ3MWI1YjUsIDB4YWFjYzY2NjYsIDB4ZDg5MDQ4NDgsIDB4MDUwNjAzMDMsIDB4MDFmN2Y2ZjYsIDB4MTIxYzBlMGUsIDB4YTNjMjYxNjEsIDB4NWY2YTM1MzUsIDB4ZjlhZTU3NTcsIDB4ZDA2OWI5YjksIDB4OTExNzg2ODYsIDB4NTg5OWMxYzEsIDB4MjczYTFkMWQsIDB4YjkyNzllOWUsIDB4MzhkOWUxZTEsIDB4MTNlYmY4ZjgsIDB4YjMyYjk4OTgsIDB4MzMyMjExMTEsIDB4YmJkMjY5NjksIDB4NzBhOWQ5ZDksIDB4ODkwNzhlOGUsIDB4YTczMzk0OTQsIDB4YjYyZDliOWIsIDB4MjIzYzFlMWUsIDB4OTIxNTg3ODcsIDB4MjBjOWU5ZTksIDB4NDk4N2NlY2UsIDB4ZmZhYTU1NTUsIDB4Nzg1MDI4MjgsIDB4N2FhNWRmZGYsIDB4OGYwMzhjOGMsIDB4Zjg1OWExYTEsIDB4ODAwOTg5ODksIDB4MTcxYTBkMGQsIDB4ZGE2NWJmYmYsIDB4MzFkN2U2ZTYsIDB4YzY4NDQyNDIsIDB4YjhkMDY4NjgsIDB4YzM4MjQxNDEsIDB4YjAyOTk5OTksIDB4Nzc1YTJkMmQsIDB4MTExZTBmMGYsIDB4Y2I3YmIwYjAsIDB4ZmNhODU0NTQsIDB4ZDY2ZGJiYmIsIDB4M2EyYzE2MTZdO1xuICAgIHZhciBUMyA9IFsweDYzYTVjNjYzLCAweDdjODRmODdjLCAweDc3OTllZTc3LCAweDdiOGRmNjdiLCAweGYyMGRmZmYyLCAweDZiYmRkNjZiLCAweDZmYjFkZTZmLCAweGM1NTQ5MWM1LCAweDMwNTA2MDMwLCAweDAxMDMwMjAxLCAweDY3YTljZTY3LCAweDJiN2Q1NjJiLCAweGZlMTllN2ZlLCAweGQ3NjJiNWQ3LCAweGFiZTY0ZGFiLCAweDc2OWFlYzc2LCAweGNhNDU4ZmNhLCAweDgyOWQxZjgyLCAweGM5NDA4OWM5LCAweDdkODdmYTdkLCAweGZhMTVlZmZhLCAweDU5ZWJiMjU5LCAweDQ3Yzk4ZTQ3LCAweGYwMGJmYmYwLCAweGFkZWM0MWFkLCAweGQ0NjdiM2Q0LCAweGEyZmQ1ZmEyLCAweGFmZWE0NWFmLCAweDljYmYyMzljLCAweGE0Zjc1M2E0LCAweDcyOTZlNDcyLCAweGMwNWI5YmMwLCAweGI3YzI3NWI3LCAweGZkMWNlMWZkLCAweDkzYWUzZDkzLCAweDI2NmE0YzI2LCAweDM2NWE2YzM2LCAweDNmNDE3ZTNmLCAweGY3MDJmNWY3LCAweGNjNGY4M2NjLCAweDM0NWM2ODM0LCAweGE1ZjQ1MWE1LCAweGU1MzRkMWU1LCAweGYxMDhmOWYxLCAweDcxOTNlMjcxLCAweGQ4NzNhYmQ4LCAweDMxNTM2MjMxLCAweDE1M2YyYTE1LCAweDA0MGMwODA0LCAweGM3NTI5NWM3LCAweDIzNjU0NjIzLCAweGMzNWU5ZGMzLCAweDE4MjgzMDE4LCAweDk2YTEzNzk2LCAweDA1MGYwYTA1LCAweDlhYjUyZjlhLCAweDA3MDkwZTA3LCAweDEyMzYyNDEyLCAweDgwOWIxYjgwLCAweGUyM2RkZmUyLCAweGViMjZjZGViLCAweDI3Njk0ZTI3LCAweGIyY2Q3ZmIyLCAweDc1OWZlYTc1LCAweDA5MWIxMjA5LCAweDgzOWUxZDgzLCAweDJjNzQ1ODJjLCAweDFhMmUzNDFhLCAweDFiMmQzNjFiLCAweDZlYjJkYzZlLCAweDVhZWViNDVhLCAweGEwZmI1YmEwLCAweDUyZjZhNDUyLCAweDNiNGQ3NjNiLCAweGQ2NjFiN2Q2LCAweGIzY2U3ZGIzLCAweDI5N2I1MjI5LCAweGUzM2VkZGUzLCAweDJmNzE1ZTJmLCAweDg0OTcxMzg0LCAweDUzZjVhNjUzLCAweGQxNjhiOWQxLCAweDAwMDAwMDAwLCAweGVkMmNjMWVkLCAweDIwNjA0MDIwLCAweGZjMWZlM2ZjLCAweGIxYzg3OWIxLCAweDViZWRiNjViLCAweDZhYmVkNDZhLCAweGNiNDY4ZGNiLCAweGJlZDk2N2JlLCAweDM5NGI3MjM5LCAweDRhZGU5NDRhLCAweDRjZDQ5ODRjLCAweDU4ZThiMDU4LCAweGNmNGE4NWNmLCAweGQwNmJiYmQwLCAweGVmMmFjNWVmLCAweGFhZTU0ZmFhLCAweGZiMTZlZGZiLCAweDQzYzU4NjQzLCAweDRkZDc5YTRkLCAweDMzNTU2NjMzLCAweDg1OTQxMTg1LCAweDQ1Y2Y4YTQ1LCAweGY5MTBlOWY5LCAweDAyMDYwNDAyLCAweDdmODFmZTdmLCAweDUwZjBhMDUwLCAweDNjNDQ3ODNjLCAweDlmYmEyNTlmLCAweGE4ZTM0YmE4LCAweDUxZjNhMjUxLCAweGEzZmU1ZGEzLCAweDQwYzA4MDQwLCAweDhmOGEwNThmLCAweDkyYWQzZjkyLCAweDlkYmMyMTlkLCAweDM4NDg3MDM4LCAweGY1MDRmMWY1LCAweGJjZGY2M2JjLCAweGI2YzE3N2I2LCAweGRhNzVhZmRhLCAweDIxNjM0MjIxLCAweDEwMzAyMDEwLCAweGZmMWFlNWZmLCAweGYzMGVmZGYzLCAweGQyNmRiZmQyLCAweGNkNGM4MWNkLCAweDBjMTQxODBjLCAweDEzMzUyNjEzLCAweGVjMmZjM2VjLCAweDVmZTFiZTVmLCAweDk3YTIzNTk3LCAweDQ0Y2M4ODQ0LCAweDE3MzkyZTE3LCAweGM0NTc5M2M0LCAweGE3ZjI1NWE3LCAweDdlODJmYzdlLCAweDNkNDc3YTNkLCAweDY0YWNjODY0LCAweDVkZTdiYTVkLCAweDE5MmIzMjE5LCAweDczOTVlNjczLCAweDYwYTBjMDYwLCAweDgxOTgxOTgxLCAweDRmZDE5ZTRmLCAweGRjN2ZhM2RjLCAweDIyNjY0NDIyLCAweDJhN2U1NDJhLCAweDkwYWIzYjkwLCAweDg4ODMwYjg4LCAweDQ2Y2E4YzQ2LCAweGVlMjljN2VlLCAweGI4ZDM2YmI4LCAweDE0M2MyODE0LCAweGRlNzlhN2RlLCAweDVlZTJiYzVlLCAweDBiMWQxNjBiLCAweGRiNzZhZGRiLCAweGUwM2JkYmUwLCAweDMyNTY2NDMyLCAweDNhNGU3NDNhLCAweDBhMWUxNDBhLCAweDQ5ZGI5MjQ5LCAweDA2MGEwYzA2LCAweDI0NmM0ODI0LCAweDVjZTRiODVjLCAweGMyNWQ5ZmMyLCAweGQzNmViZGQzLCAweGFjZWY0M2FjLCAweDYyYTZjNDYyLCAweDkxYTgzOTkxLCAweDk1YTQzMTk1LCAweGU0MzdkM2U0LCAweDc5OGJmMjc5LCAweGU3MzJkNWU3LCAweGM4NDM4YmM4LCAweDM3NTk2ZTM3LCAweDZkYjdkYTZkLCAweDhkOGMwMThkLCAweGQ1NjRiMWQ1LCAweDRlZDI5YzRlLCAweGE5ZTA0OWE5LCAweDZjYjRkODZjLCAweDU2ZmFhYzU2LCAweGY0MDdmM2Y0LCAweGVhMjVjZmVhLCAweDY1YWZjYTY1LCAweDdhOGVmNDdhLCAweGFlZTk0N2FlLCAweDA4MTgxMDA4LCAweGJhZDU2ZmJhLCAweDc4ODhmMDc4LCAweDI1NmY0YTI1LCAweDJlNzI1YzJlLCAweDFjMjQzODFjLCAweGE2ZjE1N2E2LCAweGI0Yzc3M2I0LCAweGM2NTE5N2M2LCAweGU4MjNjYmU4LCAweGRkN2NhMWRkLCAweDc0OWNlODc0LCAweDFmMjEzZTFmLCAweDRiZGQ5NjRiLCAweGJkZGM2MWJkLCAweDhiODYwZDhiLCAweDhhODUwZjhhLCAweDcwOTBlMDcwLCAweDNlNDI3YzNlLCAweGI1YzQ3MWI1LCAweDY2YWFjYzY2LCAweDQ4ZDg5MDQ4LCAweDAzMDUwNjAzLCAweGY2MDFmN2Y2LCAweDBlMTIxYzBlLCAweDYxYTNjMjYxLCAweDM1NWY2YTM1LCAweDU3ZjlhZTU3LCAweGI5ZDA2OWI5LCAweDg2OTExNzg2LCAweGMxNTg5OWMxLCAweDFkMjczYTFkLCAweDllYjkyNzllLCAweGUxMzhkOWUxLCAweGY4MTNlYmY4LCAweDk4YjMyYjk4LCAweDExMzMyMjExLCAweDY5YmJkMjY5LCAweGQ5NzBhOWQ5LCAweDhlODkwNzhlLCAweDk0YTczMzk0LCAweDliYjYyZDliLCAweDFlMjIzYzFlLCAweDg3OTIxNTg3LCAweGU5MjBjOWU5LCAweGNlNDk4N2NlLCAweDU1ZmZhYTU1LCAweDI4Nzg1MDI4LCAweGRmN2FhNWRmLCAweDhjOGYwMzhjLCAweGExZjg1OWExLCAweDg5ODAwOTg5LCAweDBkMTcxYTBkLCAweGJmZGE2NWJmLCAweGU2MzFkN2U2LCAweDQyYzY4NDQyLCAweDY4YjhkMDY4LCAweDQxYzM4MjQxLCAweDk5YjAyOTk5LCAweDJkNzc1YTJkLCAweDBmMTExZTBmLCAweGIwY2I3YmIwLCAweDU0ZmNhODU0LCAweGJiZDY2ZGJiLCAweDE2M2EyYzE2XTtcbiAgICB2YXIgVDQgPSBbMHg2MzYzYTVjNiwgMHg3YzdjODRmOCwgMHg3Nzc3OTllZSwgMHg3YjdiOGRmNiwgMHhmMmYyMGRmZiwgMHg2YjZiYmRkNiwgMHg2ZjZmYjFkZSwgMHhjNWM1NTQ5MSwgMHgzMDMwNTA2MCwgMHgwMTAxMDMwMiwgMHg2NzY3YTljZSwgMHgyYjJiN2Q1NiwgMHhmZWZlMTllNywgMHhkN2Q3NjJiNSwgMHhhYmFiZTY0ZCwgMHg3Njc2OWFlYywgMHhjYWNhNDU4ZiwgMHg4MjgyOWQxZiwgMHhjOWM5NDA4OSwgMHg3ZDdkODdmYSwgMHhmYWZhMTVlZiwgMHg1OTU5ZWJiMiwgMHg0NzQ3Yzk4ZSwgMHhmMGYwMGJmYiwgMHhhZGFkZWM0MSwgMHhkNGQ0NjdiMywgMHhhMmEyZmQ1ZiwgMHhhZmFmZWE0NSwgMHg5YzljYmYyMywgMHhhNGE0Zjc1MywgMHg3MjcyOTZlNCwgMHhjMGMwNWI5YiwgMHhiN2I3YzI3NSwgMHhmZGZkMWNlMSwgMHg5MzkzYWUzZCwgMHgyNjI2NmE0YywgMHgzNjM2NWE2YywgMHgzZjNmNDE3ZSwgMHhmN2Y3MDJmNSwgMHhjY2NjNGY4MywgMHgzNDM0NWM2OCwgMHhhNWE1ZjQ1MSwgMHhlNWU1MzRkMSwgMHhmMWYxMDhmOSwgMHg3MTcxOTNlMiwgMHhkOGQ4NzNhYiwgMHgzMTMxNTM2MiwgMHgxNTE1M2YyYSwgMHgwNDA0MGMwOCwgMHhjN2M3NTI5NSwgMHgyMzIzNjU0NiwgMHhjM2MzNWU5ZCwgMHgxODE4MjgzMCwgMHg5Njk2YTEzNywgMHgwNTA1MGYwYSwgMHg5YTlhYjUyZiwgMHgwNzA3MDkwZSwgMHgxMjEyMzYyNCwgMHg4MDgwOWIxYiwgMHhlMmUyM2RkZiwgMHhlYmViMjZjZCwgMHgyNzI3Njk0ZSwgMHhiMmIyY2Q3ZiwgMHg3NTc1OWZlYSwgMHgwOTA5MWIxMiwgMHg4MzgzOWUxZCwgMHgyYzJjNzQ1OCwgMHgxYTFhMmUzNCwgMHgxYjFiMmQzNiwgMHg2ZTZlYjJkYywgMHg1YTVhZWViNCwgMHhhMGEwZmI1YiwgMHg1MjUyZjZhNCwgMHgzYjNiNGQ3NiwgMHhkNmQ2NjFiNywgMHhiM2IzY2U3ZCwgMHgyOTI5N2I1MiwgMHhlM2UzM2VkZCwgMHgyZjJmNzE1ZSwgMHg4NDg0OTcxMywgMHg1MzUzZjVhNiwgMHhkMWQxNjhiOSwgMHgwMDAwMDAwMCwgMHhlZGVkMmNjMSwgMHgyMDIwNjA0MCwgMHhmY2ZjMWZlMywgMHhiMWIxYzg3OSwgMHg1YjViZWRiNiwgMHg2YTZhYmVkNCwgMHhjYmNiNDY4ZCwgMHhiZWJlZDk2NywgMHgzOTM5NGI3MiwgMHg0YTRhZGU5NCwgMHg0YzRjZDQ5OCwgMHg1ODU4ZThiMCwgMHhjZmNmNGE4NSwgMHhkMGQwNmJiYiwgMHhlZmVmMmFjNSwgMHhhYWFhZTU0ZiwgMHhmYmZiMTZlZCwgMHg0MzQzYzU4NiwgMHg0ZDRkZDc5YSwgMHgzMzMzNTU2NiwgMHg4NTg1OTQxMSwgMHg0NTQ1Y2Y4YSwgMHhmOWY5MTBlOSwgMHgwMjAyMDYwNCwgMHg3ZjdmODFmZSwgMHg1MDUwZjBhMCwgMHgzYzNjNDQ3OCwgMHg5ZjlmYmEyNSwgMHhhOGE4ZTM0YiwgMHg1MTUxZjNhMiwgMHhhM2EzZmU1ZCwgMHg0MDQwYzA4MCwgMHg4ZjhmOGEwNSwgMHg5MjkyYWQzZiwgMHg5ZDlkYmMyMSwgMHgzODM4NDg3MCwgMHhmNWY1MDRmMSwgMHhiY2JjZGY2MywgMHhiNmI2YzE3NywgMHhkYWRhNzVhZiwgMHgyMTIxNjM0MiwgMHgxMDEwMzAyMCwgMHhmZmZmMWFlNSwgMHhmM2YzMGVmZCwgMHhkMmQyNmRiZiwgMHhjZGNkNGM4MSwgMHgwYzBjMTQxOCwgMHgxMzEzMzUyNiwgMHhlY2VjMmZjMywgMHg1ZjVmZTFiZSwgMHg5Nzk3YTIzNSwgMHg0NDQ0Y2M4OCwgMHgxNzE3MzkyZSwgMHhjNGM0NTc5MywgMHhhN2E3ZjI1NSwgMHg3ZTdlODJmYywgMHgzZDNkNDc3YSwgMHg2NDY0YWNjOCwgMHg1ZDVkZTdiYSwgMHgxOTE5MmIzMiwgMHg3MzczOTVlNiwgMHg2MDYwYTBjMCwgMHg4MTgxOTgxOSwgMHg0ZjRmZDE5ZSwgMHhkY2RjN2ZhMywgMHgyMjIyNjY0NCwgMHgyYTJhN2U1NCwgMHg5MDkwYWIzYiwgMHg4ODg4ODMwYiwgMHg0NjQ2Y2E4YywgMHhlZWVlMjljNywgMHhiOGI4ZDM2YiwgMHgxNDE0M2MyOCwgMHhkZWRlNzlhNywgMHg1ZTVlZTJiYywgMHgwYjBiMWQxNiwgMHhkYmRiNzZhZCwgMHhlMGUwM2JkYiwgMHgzMjMyNTY2NCwgMHgzYTNhNGU3NCwgMHgwYTBhMWUxNCwgMHg0OTQ5ZGI5MiwgMHgwNjA2MGEwYywgMHgyNDI0NmM0OCwgMHg1YzVjZTRiOCwgMHhjMmMyNWQ5ZiwgMHhkM2QzNmViZCwgMHhhY2FjZWY0MywgMHg2MjYyYTZjNCwgMHg5MTkxYTgzOSwgMHg5NTk1YTQzMSwgMHhlNGU0MzdkMywgMHg3OTc5OGJmMiwgMHhlN2U3MzJkNSwgMHhjOGM4NDM4YiwgMHgzNzM3NTk2ZSwgMHg2ZDZkYjdkYSwgMHg4ZDhkOGMwMSwgMHhkNWQ1NjRiMSwgMHg0ZTRlZDI5YywgMHhhOWE5ZTA0OSwgMHg2YzZjYjRkOCwgMHg1NjU2ZmFhYywgMHhmNGY0MDdmMywgMHhlYWVhMjVjZiwgMHg2NTY1YWZjYSwgMHg3YTdhOGVmNCwgMHhhZWFlZTk0NywgMHgwODA4MTgxMCwgMHhiYWJhZDU2ZiwgMHg3ODc4ODhmMCwgMHgyNTI1NmY0YSwgMHgyZTJlNzI1YywgMHgxYzFjMjQzOCwgMHhhNmE2ZjE1NywgMHhiNGI0Yzc3MywgMHhjNmM2NTE5NywgMHhlOGU4MjNjYiwgMHhkZGRkN2NhMSwgMHg3NDc0OWNlOCwgMHgxZjFmMjEzZSwgMHg0YjRiZGQ5NiwgMHhiZGJkZGM2MSwgMHg4YjhiODYwZCwgMHg4YThhODUwZiwgMHg3MDcwOTBlMCwgMHgzZTNlNDI3YywgMHhiNWI1YzQ3MSwgMHg2NjY2YWFjYywgMHg0ODQ4ZDg5MCwgMHgwMzAzMDUwNiwgMHhmNmY2MDFmNywgMHgwZTBlMTIxYywgMHg2MTYxYTNjMiwgMHgzNTM1NWY2YSwgMHg1NzU3ZjlhZSwgMHhiOWI5ZDA2OSwgMHg4Njg2OTExNywgMHhjMWMxNTg5OSwgMHgxZDFkMjczYSwgMHg5ZTllYjkyNywgMHhlMWUxMzhkOSwgMHhmOGY4MTNlYiwgMHg5ODk4YjMyYiwgMHgxMTExMzMyMiwgMHg2OTY5YmJkMiwgMHhkOWQ5NzBhOSwgMHg4ZThlODkwNywgMHg5NDk0YTczMywgMHg5YjliYjYyZCwgMHgxZTFlMjIzYywgMHg4Nzg3OTIxNSwgMHhlOWU5MjBjOSwgMHhjZWNlNDk4NywgMHg1NTU1ZmZhYSwgMHgyODI4Nzg1MCwgMHhkZmRmN2FhNSwgMHg4YzhjOGYwMywgMHhhMWExZjg1OSwgMHg4OTg5ODAwOSwgMHgwZDBkMTcxYSwgMHhiZmJmZGE2NSwgMHhlNmU2MzFkNywgMHg0MjQyYzY4NCwgMHg2ODY4YjhkMCwgMHg0MTQxYzM4MiwgMHg5OTk5YjAyOSwgMHgyZDJkNzc1YSwgMHgwZjBmMTExZSwgMHhiMGIwY2I3YiwgMHg1NDU0ZmNhOCwgMHhiYmJiZDY2ZCwgMHgxNjE2M2EyY107XG5cbiAgICAvLyBUcmFuc2Zvcm1hdGlvbnMgZm9yIGRlY3J5cHRpb25cbiAgICB2YXIgVDUgPSBbMHg1MWY0YTc1MCwgMHg3ZTQxNjU1MywgMHgxYTE3YTRjMywgMHgzYTI3NWU5NiwgMHgzYmFiNmJjYiwgMHgxZjlkNDVmMSwgMHhhY2ZhNThhYiwgMHg0YmUzMDM5MywgMHgyMDMwZmE1NSwgMHhhZDc2NmRmNiwgMHg4OGNjNzY5MSwgMHhmNTAyNGMyNSwgMHg0ZmU1ZDdmYywgMHhjNTJhY2JkNywgMHgyNjM1NDQ4MCwgMHhiNTYyYTM4ZiwgMHhkZWIxNWE0OSwgMHgyNWJhMWI2NywgMHg0NWVhMGU5OCwgMHg1ZGZlYzBlMSwgMHhjMzJmNzUwMiwgMHg4MTRjZjAxMiwgMHg4ZDQ2OTdhMywgMHg2YmQzZjljNiwgMHgwMzhmNWZlNywgMHgxNTkyOWM5NSwgMHhiZjZkN2FlYiwgMHg5NTUyNTlkYSwgMHhkNGJlODMyZCwgMHg1ODc0MjFkMywgMHg0OWUwNjkyOSwgMHg4ZWM5Yzg0NCwgMHg3NWMyODk2YSwgMHhmNDhlNzk3OCwgMHg5OTU4M2U2YiwgMHgyN2I5NzFkZCwgMHhiZWUxNGZiNiwgMHhmMDg4YWQxNywgMHhjOTIwYWM2NiwgMHg3ZGNlM2FiNCwgMHg2M2RmNGExOCwgMHhlNTFhMzE4MiwgMHg5NzUxMzM2MCwgMHg2MjUzN2Y0NSwgMHhiMTY0NzdlMCwgMHhiYjZiYWU4NCwgMHhmZTgxYTAxYywgMHhmOTA4MmI5NCwgMHg3MDQ4Njg1OCwgMHg4ZjQ1ZmQxOSwgMHg5NGRlNmM4NywgMHg1MjdiZjhiNywgMHhhYjczZDMyMywgMHg3MjRiMDJlMiwgMHhlMzFmOGY1NywgMHg2NjU1YWIyYSwgMHhiMmViMjgwNywgMHgyZmI1YzIwMywgMHg4NmM1N2I5YSwgMHhkMzM3MDhhNSwgMHgzMDI4ODdmMiwgMHgyM2JmYTViMiwgMHgwMjAzNmFiYSwgMHhlZDE2ODI1YywgMHg4YWNmMWMyYiwgMHhhNzc5YjQ5MiwgMHhmMzA3ZjJmMCwgMHg0ZTY5ZTJhMSwgMHg2NWRhZjRjZCwgMHgwNjA1YmVkNSwgMHhkMTM0NjIxZiwgMHhjNGE2ZmU4YSwgMHgzNDJlNTM5ZCwgMHhhMmYzNTVhMCwgMHgwNThhZTEzMiwgMHhhNGY2ZWI3NSwgMHgwYjgzZWMzOSwgMHg0MDYwZWZhYSwgMHg1ZTcxOWYwNiwgMHhiZDZlMTA1MSwgMHgzZTIxOGFmOSwgMHg5NmRkMDYzZCwgMHhkZDNlMDVhZSwgMHg0ZGU2YmQ0NiwgMHg5MTU0OGRiNSwgMHg3MWM0NWQwNSwgMHgwNDA2ZDQ2ZiwgMHg2MDUwMTVmZiwgMHgxOTk4ZmIyNCwgMHhkNmJkZTk5NywgMHg4OTQwNDNjYywgMHg2N2Q5OWU3NywgMHhiMGU4NDJiZCwgMHgwNzg5OGI4OCwgMHhlNzE5NWIzOCwgMHg3OWM4ZWVkYiwgMHhhMTdjMGE0NywgMHg3YzQyMGZlOSwgMHhmODg0MWVjOSwgMHgwMDAwMDAwMCwgMHgwOTgwODY4MywgMHgzMjJiZWQ0OCwgMHgxZTExNzBhYywgMHg2YzVhNzI0ZSwgMHhmZDBlZmZmYiwgMHgwZjg1Mzg1NiwgMHgzZGFlZDUxZSwgMHgzNjJkMzkyNywgMHgwYTBmZDk2NCwgMHg2ODVjYTYyMSwgMHg5YjViNTRkMSwgMHgyNDM2MmUzYSwgMHgwYzBhNjdiMSwgMHg5MzU3ZTcwZiwgMHhiNGVlOTZkMiwgMHgxYjliOTE5ZSwgMHg4MGMwYzU0ZiwgMHg2MWRjMjBhMiwgMHg1YTc3NGI2OSwgMHgxYzEyMWExNiwgMHhlMjkzYmEwYSwgMHhjMGEwMmFlNSwgMHgzYzIyZTA0MywgMHgxMjFiMTcxZCwgMHgwZTA5MGQwYiwgMHhmMjhiYzdhZCwgMHgyZGI2YThiOSwgMHgxNDFlYTljOCwgMHg1N2YxMTk4NSwgMHhhZjc1MDc0YywgMHhlZTk5ZGRiYiwgMHhhMzdmNjBmZCwgMHhmNzAxMjY5ZiwgMHg1YzcyZjViYywgMHg0NDY2M2JjNSwgMHg1YmZiN2UzNCwgMHg4YjQzMjk3NiwgMHhjYjIzYzZkYywgMHhiNmVkZmM2OCwgMHhiOGU0ZjE2MywgMHhkNzMxZGNjYSwgMHg0MjYzODUxMCwgMHgxMzk3MjI0MCwgMHg4NGM2MTEyMCwgMHg4NTRhMjQ3ZCwgMHhkMmJiM2RmOCwgMHhhZWY5MzIxMSwgMHhjNzI5YTE2ZCwgMHgxZDllMmY0YiwgMHhkY2IyMzBmMywgMHgwZDg2NTJlYywgMHg3N2MxZTNkMCwgMHgyYmIzMTY2YywgMHhhOTcwYjk5OSwgMHgxMTk0NDhmYSwgMHg0N2U5NjQyMiwgMHhhOGZjOGNjNCwgMHhhMGYwM2YxYSwgMHg1NjdkMmNkOCwgMHgyMjMzOTBlZiwgMHg4NzQ5NGVjNywgMHhkOTM4ZDFjMSwgMHg4Y2NhYTJmZSwgMHg5OGQ0MGIzNiwgMHhhNmY1ODFjZiwgMHhhNTdhZGUyOCwgMHhkYWI3OGUyNiwgMHgzZmFkYmZhNCwgMHgyYzNhOWRlNCwgMHg1MDc4OTIwZCwgMHg2YTVmY2M5YiwgMHg1NDdlNDY2MiwgMHhmNjhkMTNjMiwgMHg5MGQ4YjhlOCwgMHgyZTM5Zjc1ZSwgMHg4MmMzYWZmNSwgMHg5ZjVkODBiZSwgMHg2OWQwOTM3YywgMHg2ZmQ1MmRhOSwgMHhjZjI1MTJiMywgMHhjOGFjOTkzYiwgMHgxMDE4N2RhNywgMHhlODljNjM2ZSwgMHhkYjNiYmI3YiwgMHhjZDI2NzgwOSwgMHg2ZTU5MThmNCwgMHhlYzlhYjcwMSwgMHg4MzRmOWFhOCwgMHhlNjk1NmU2NSwgMHhhYWZmZTY3ZSwgMHgyMWJjY2YwOCwgMHhlZjE1ZThlNiwgMHhiYWU3OWJkOSwgMHg0YTZmMzZjZSwgMHhlYTlmMDlkNCwgMHgyOWIwN2NkNiwgMHgzMWE0YjJhZiwgMHgyYTNmMjMzMSwgMHhjNmE1OTQzMCwgMHgzNWEyNjZjMCwgMHg3NDRlYmMzNywgMHhmYzgyY2FhNiwgMHhlMDkwZDBiMCwgMHgzM2E3ZDgxNSwgMHhmMTA0OTg0YSwgMHg0MWVjZGFmNywgMHg3ZmNkNTAwZSwgMHgxNzkxZjYyZiwgMHg3NjRkZDY4ZCwgMHg0M2VmYjA0ZCwgMHhjY2FhNGQ1NCwgMHhlNDk2MDRkZiwgMHg5ZWQxYjVlMywgMHg0YzZhODgxYiwgMHhjMTJjMWZiOCwgMHg0NjY1NTE3ZiwgMHg5ZDVlZWEwNCwgMHgwMThjMzU1ZCwgMHhmYTg3NzQ3MywgMHhmYjBiNDEyZSwgMHhiMzY3MWQ1YSwgMHg5MmRiZDI1MiwgMHhlOTEwNTYzMywgMHg2ZGQ2NDcxMywgMHg5YWQ3NjE4YywgMHgzN2ExMGM3YSwgMHg1OWY4MTQ4ZSwgMHhlYjEzM2M4OSwgMHhjZWE5MjdlZSwgMHhiNzYxYzkzNSwgMHhlMTFjZTVlZCwgMHg3YTQ3YjEzYywgMHg5Y2QyZGY1OSwgMHg1NWYyNzMzZiwgMHgxODE0Y2U3OSwgMHg3M2M3MzdiZiwgMHg1M2Y3Y2RlYSwgMHg1ZmZkYWE1YiwgMHhkZjNkNmYxNCwgMHg3ODQ0ZGI4NiwgMHhjYWFmZjM4MSwgMHhiOTY4YzQzZSwgMHgzODI0MzQyYywgMHhjMmEzNDA1ZiwgMHgxNjFkYzM3MiwgMHhiY2UyMjUwYywgMHgyODNjNDk4YiwgMHhmZjBkOTU0MSwgMHgzOWE4MDE3MSwgMHgwODBjYjNkZSwgMHhkOGI0ZTQ5YywgMHg2NDU2YzE5MCwgMHg3YmNiODQ2MSwgMHhkNTMyYjY3MCwgMHg0ODZjNWM3NCwgMHhkMGI4NTc0Ml07XG4gICAgdmFyIFQ2ID0gWzB4NTA1MWY0YTcsIDB4NTM3ZTQxNjUsIDB4YzMxYTE3YTQsIDB4OTYzYTI3NWUsIDB4Y2IzYmFiNmIsIDB4ZjExZjlkNDUsIDB4YWJhY2ZhNTgsIDB4OTM0YmUzMDMsIDB4NTUyMDMwZmEsIDB4ZjZhZDc2NmQsIDB4OTE4OGNjNzYsIDB4MjVmNTAyNGMsIDB4ZmM0ZmU1ZDcsIDB4ZDdjNTJhY2IsIDB4ODAyNjM1NDQsIDB4OGZiNTYyYTMsIDB4NDlkZWIxNWEsIDB4NjcyNWJhMWIsIDB4OTg0NWVhMGUsIDB4ZTE1ZGZlYzAsIDB4MDJjMzJmNzUsIDB4MTI4MTRjZjAsIDB4YTM4ZDQ2OTcsIDB4YzY2YmQzZjksIDB4ZTcwMzhmNWYsIDB4OTUxNTkyOWMsIDB4ZWJiZjZkN2EsIDB4ZGE5NTUyNTksIDB4MmRkNGJlODMsIDB4ZDM1ODc0MjEsIDB4Mjk0OWUwNjksIDB4NDQ4ZWM5YzgsIDB4NmE3NWMyODksIDB4NzhmNDhlNzksIDB4NmI5OTU4M2UsIDB4ZGQyN2I5NzEsIDB4YjZiZWUxNGYsIDB4MTdmMDg4YWQsIDB4NjZjOTIwYWMsIDB4YjQ3ZGNlM2EsIDB4MTg2M2RmNGEsIDB4ODJlNTFhMzEsIDB4NjA5NzUxMzMsIDB4NDU2MjUzN2YsIDB4ZTBiMTY0NzcsIDB4ODRiYjZiYWUsIDB4MWNmZTgxYTAsIDB4OTRmOTA4MmIsIDB4NTg3MDQ4NjgsIDB4MTk4ZjQ1ZmQsIDB4ODc5NGRlNmMsIDB4Yjc1MjdiZjgsIDB4MjNhYjczZDMsIDB4ZTI3MjRiMDIsIDB4NTdlMzFmOGYsIDB4MmE2NjU1YWIsIDB4MDdiMmViMjgsIDB4MDMyZmI1YzIsIDB4OWE4NmM1N2IsIDB4YTVkMzM3MDgsIDB4ZjIzMDI4ODcsIDB4YjIyM2JmYTUsIDB4YmEwMjAzNmEsIDB4NWNlZDE2ODIsIDB4MmI4YWNmMWMsIDB4OTJhNzc5YjQsIDB4ZjBmMzA3ZjIsIDB4YTE0ZTY5ZTIsIDB4Y2Q2NWRhZjQsIDB4ZDUwNjA1YmUsIDB4MWZkMTM0NjIsIDB4OGFjNGE2ZmUsIDB4OWQzNDJlNTMsIDB4YTBhMmYzNTUsIDB4MzIwNThhZTEsIDB4NzVhNGY2ZWIsIDB4MzkwYjgzZWMsIDB4YWE0MDYwZWYsIDB4MDY1ZTcxOWYsIDB4NTFiZDZlMTAsIDB4ZjkzZTIxOGEsIDB4M2Q5NmRkMDYsIDB4YWVkZDNlMDUsIDB4NDY0ZGU2YmQsIDB4YjU5MTU0OGQsIDB4MDU3MWM0NWQsIDB4NmYwNDA2ZDQsIDB4ZmY2MDUwMTUsIDB4MjQxOTk4ZmIsIDB4OTdkNmJkZTksIDB4Y2M4OTQwNDMsIDB4Nzc2N2Q5OWUsIDB4YmRiMGU4NDIsIDB4ODgwNzg5OGIsIDB4MzhlNzE5NWIsIDB4ZGI3OWM4ZWUsIDB4NDdhMTdjMGEsIDB4ZTk3YzQyMGYsIDB4YzlmODg0MWUsIDB4MDAwMDAwMDAsIDB4ODMwOTgwODYsIDB4NDgzMjJiZWQsIDB4YWMxZTExNzAsIDB4NGU2YzVhNzIsIDB4ZmJmZDBlZmYsIDB4NTYwZjg1MzgsIDB4MWUzZGFlZDUsIDB4MjczNjJkMzksIDB4NjQwYTBmZDksIDB4MjE2ODVjYTYsIDB4ZDE5YjViNTQsIDB4M2EyNDM2MmUsIDB4YjEwYzBhNjcsIDB4MGY5MzU3ZTcsIDB4ZDJiNGVlOTYsIDB4OWUxYjliOTEsIDB4NGY4MGMwYzUsIDB4YTI2MWRjMjAsIDB4Njk1YTc3NGIsIDB4MTYxYzEyMWEsIDB4MGFlMjkzYmEsIDB4ZTVjMGEwMmEsIDB4NDMzYzIyZTAsIDB4MWQxMjFiMTcsIDB4MGIwZTA5MGQsIDB4YWRmMjhiYzcsIDB4YjkyZGI2YTgsIDB4YzgxNDFlYTksIDB4ODU1N2YxMTksIDB4NGNhZjc1MDcsIDB4YmJlZTk5ZGQsIDB4ZmRhMzdmNjAsIDB4OWZmNzAxMjYsIDB4YmM1YzcyZjUsIDB4YzU0NDY2M2IsIDB4MzQ1YmZiN2UsIDB4NzY4YjQzMjksIDB4ZGNjYjIzYzYsIDB4NjhiNmVkZmMsIDB4NjNiOGU0ZjEsIDB4Y2FkNzMxZGMsIDB4MTA0MjYzODUsIDB4NDAxMzk3MjIsIDB4MjA4NGM2MTEsIDB4N2Q4NTRhMjQsIDB4ZjhkMmJiM2QsIDB4MTFhZWY5MzIsIDB4NmRjNzI5YTEsIDB4NGIxZDllMmYsIDB4ZjNkY2IyMzAsIDB4ZWMwZDg2NTIsIDB4ZDA3N2MxZTMsIDB4NmMyYmIzMTYsIDB4OTlhOTcwYjksIDB4ZmExMTk0NDgsIDB4MjI0N2U5NjQsIDB4YzRhOGZjOGMsIDB4MWFhMGYwM2YsIDB4ZDg1NjdkMmMsIDB4ZWYyMjMzOTAsIDB4Yzc4NzQ5NGUsIDB4YzFkOTM4ZDEsIDB4ZmU4Y2NhYTIsIDB4MzY5OGQ0MGIsIDB4Y2ZhNmY1ODEsIDB4MjhhNTdhZGUsIDB4MjZkYWI3OGUsIDB4YTQzZmFkYmYsIDB4ZTQyYzNhOWQsIDB4MGQ1MDc4OTIsIDB4OWI2YTVmY2MsIDB4NjI1NDdlNDYsIDB4YzJmNjhkMTMsIDB4ZTg5MGQ4YjgsIDB4NWUyZTM5ZjcsIDB4ZjU4MmMzYWYsIDB4YmU5ZjVkODAsIDB4N2M2OWQwOTMsIDB4YTk2ZmQ1MmQsIDB4YjNjZjI1MTIsIDB4M2JjOGFjOTksIDB4YTcxMDE4N2QsIDB4NmVlODljNjMsIDB4N2JkYjNiYmIsIDB4MDljZDI2NzgsIDB4ZjQ2ZTU5MTgsIDB4MDFlYzlhYjcsIDB4YTg4MzRmOWEsIDB4NjVlNjk1NmUsIDB4N2VhYWZmZTYsIDB4MDgyMWJjY2YsIDB4ZTZlZjE1ZTgsIDB4ZDliYWU3OWIsIDB4Y2U0YTZmMzYsIDB4ZDRlYTlmMDksIDB4ZDYyOWIwN2MsIDB4YWYzMWE0YjIsIDB4MzEyYTNmMjMsIDB4MzBjNmE1OTQsIDB4YzAzNWEyNjYsIDB4Mzc3NDRlYmMsIDB4YTZmYzgyY2EsIDB4YjBlMDkwZDAsIDB4MTUzM2E3ZDgsIDB4NGFmMTA0OTgsIDB4Zjc0MWVjZGEsIDB4MGU3ZmNkNTAsIDB4MmYxNzkxZjYsIDB4OGQ3NjRkZDYsIDB4NGQ0M2VmYjAsIDB4NTRjY2FhNGQsIDB4ZGZlNDk2MDQsIDB4ZTM5ZWQxYjUsIDB4MWI0YzZhODgsIDB4YjhjMTJjMWYsIDB4N2Y0NjY1NTEsIDB4MDQ5ZDVlZWEsIDB4NWQwMThjMzUsIDB4NzNmYTg3NzQsIDB4MmVmYjBiNDEsIDB4NWFiMzY3MWQsIDB4NTI5MmRiZDIsIDB4MzNlOTEwNTYsIDB4MTM2ZGQ2NDcsIDB4OGM5YWQ3NjEsIDB4N2EzN2ExMGMsIDB4OGU1OWY4MTQsIDB4ODllYjEzM2MsIDB4ZWVjZWE5MjcsIDB4MzViNzYxYzksIDB4ZWRlMTFjZTUsIDB4M2M3YTQ3YjEsIDB4NTk5Y2QyZGYsIDB4M2Y1NWYyNzMsIDB4NzkxODE0Y2UsIDB4YmY3M2M3MzcsIDB4ZWE1M2Y3Y2QsIDB4NWI1ZmZkYWEsIDB4MTRkZjNkNmYsIDB4ODY3ODQ0ZGIsIDB4ODFjYWFmZjMsIDB4M2ViOTY4YzQsIDB4MmMzODI0MzQsIDB4NWZjMmEzNDAsIDB4NzIxNjFkYzMsIDB4MGNiY2UyMjUsIDB4OGIyODNjNDksIDB4NDFmZjBkOTUsIDB4NzEzOWE4MDEsIDB4ZGUwODBjYjMsIDB4OWNkOGI0ZTQsIDB4OTA2NDU2YzEsIDB4NjE3YmNiODQsIDB4NzBkNTMyYjYsIDB4NzQ0ODZjNWMsIDB4NDJkMGI4NTddO1xuICAgIHZhciBUNyA9IFsweGE3NTA1MWY0LCAweDY1NTM3ZTQxLCAweGE0YzMxYTE3LCAweDVlOTYzYTI3LCAweDZiY2IzYmFiLCAweDQ1ZjExZjlkLCAweDU4YWJhY2ZhLCAweDAzOTM0YmUzLCAweGZhNTUyMDMwLCAweDZkZjZhZDc2LCAweDc2OTE4OGNjLCAweDRjMjVmNTAyLCAweGQ3ZmM0ZmU1LCAweGNiZDdjNTJhLCAweDQ0ODAyNjM1LCAweGEzOGZiNTYyLCAweDVhNDlkZWIxLCAweDFiNjcyNWJhLCAweDBlOTg0NWVhLCAweGMwZTE1ZGZlLCAweDc1MDJjMzJmLCAweGYwMTI4MTRjLCAweDk3YTM4ZDQ2LCAweGY5YzY2YmQzLCAweDVmZTcwMzhmLCAweDljOTUxNTkyLCAweDdhZWJiZjZkLCAweDU5ZGE5NTUyLCAweDgzMmRkNGJlLCAweDIxZDM1ODc0LCAweDY5Mjk0OWUwLCAweGM4NDQ4ZWM5LCAweDg5NmE3NWMyLCAweDc5NzhmNDhlLCAweDNlNmI5OTU4LCAweDcxZGQyN2I5LCAweDRmYjZiZWUxLCAweGFkMTdmMDg4LCAweGFjNjZjOTIwLCAweDNhYjQ3ZGNlLCAweDRhMTg2M2RmLCAweDMxODJlNTFhLCAweDMzNjA5NzUxLCAweDdmNDU2MjUzLCAweDc3ZTBiMTY0LCAweGFlODRiYjZiLCAweGEwMWNmZTgxLCAweDJiOTRmOTA4LCAweDY4NTg3MDQ4LCAweGZkMTk4ZjQ1LCAweDZjODc5NGRlLCAweGY4Yjc1MjdiLCAweGQzMjNhYjczLCAweDAyZTI3MjRiLCAweDhmNTdlMzFmLCAweGFiMmE2NjU1LCAweDI4MDdiMmViLCAweGMyMDMyZmI1LCAweDdiOWE4NmM1LCAweDA4YTVkMzM3LCAweDg3ZjIzMDI4LCAweGE1YjIyM2JmLCAweDZhYmEwMjAzLCAweDgyNWNlZDE2LCAweDFjMmI4YWNmLCAweGI0OTJhNzc5LCAweGYyZjBmMzA3LCAweGUyYTE0ZTY5LCAweGY0Y2Q2NWRhLCAweGJlZDUwNjA1LCAweDYyMWZkMTM0LCAweGZlOGFjNGE2LCAweDUzOWQzNDJlLCAweDU1YTBhMmYzLCAweGUxMzIwNThhLCAweGViNzVhNGY2LCAweGVjMzkwYjgzLCAweGVmYWE0MDYwLCAweDlmMDY1ZTcxLCAweDEwNTFiZDZlLCAweDhhZjkzZTIxLCAweDA2M2Q5NmRkLCAweDA1YWVkZDNlLCAweGJkNDY0ZGU2LCAweDhkYjU5MTU0LCAweDVkMDU3MWM0LCAweGQ0NmYwNDA2LCAweDE1ZmY2MDUwLCAweGZiMjQxOTk4LCAweGU5OTdkNmJkLCAweDQzY2M4OTQwLCAweDllNzc2N2Q5LCAweDQyYmRiMGU4LCAweDhiODgwNzg5LCAweDViMzhlNzE5LCAweGVlZGI3OWM4LCAweDBhNDdhMTdjLCAweDBmZTk3YzQyLCAweDFlYzlmODg0LCAweDAwMDAwMDAwLCAweDg2ODMwOTgwLCAweGVkNDgzMjJiLCAweDcwYWMxZTExLCAweDcyNGU2YzVhLCAweGZmZmJmZDBlLCAweDM4NTYwZjg1LCAweGQ1MWUzZGFlLCAweDM5MjczNjJkLCAweGQ5NjQwYTBmLCAweGE2MjE2ODVjLCAweDU0ZDE5YjViLCAweDJlM2EyNDM2LCAweDY3YjEwYzBhLCAweGU3MGY5MzU3LCAweDk2ZDJiNGVlLCAweDkxOWUxYjliLCAweGM1NGY4MGMwLCAweDIwYTI2MWRjLCAweDRiNjk1YTc3LCAweDFhMTYxYzEyLCAweGJhMGFlMjkzLCAweDJhZTVjMGEwLCAweGUwNDMzYzIyLCAweDE3MWQxMjFiLCAweDBkMGIwZTA5LCAweGM3YWRmMjhiLCAweGE4YjkyZGI2LCAweGE5YzgxNDFlLCAweDE5ODU1N2YxLCAweDA3NGNhZjc1LCAweGRkYmJlZTk5LCAweDYwZmRhMzdmLCAweDI2OWZmNzAxLCAweGY1YmM1YzcyLCAweDNiYzU0NDY2LCAweDdlMzQ1YmZiLCAweDI5NzY4YjQzLCAweGM2ZGNjYjIzLCAweGZjNjhiNmVkLCAweGYxNjNiOGU0LCAweGRjY2FkNzMxLCAweDg1MTA0MjYzLCAweDIyNDAxMzk3LCAweDExMjA4NGM2LCAweDI0N2Q4NTRhLCAweDNkZjhkMmJiLCAweDMyMTFhZWY5LCAweGExNmRjNzI5LCAweDJmNGIxZDllLCAweDMwZjNkY2IyLCAweDUyZWMwZDg2LCAweGUzZDA3N2MxLCAweDE2NmMyYmIzLCAweGI5OTlhOTcwLCAweDQ4ZmExMTk0LCAweDY0MjI0N2U5LCAweDhjYzRhOGZjLCAweDNmMWFhMGYwLCAweDJjZDg1NjdkLCAweDkwZWYyMjMzLCAweDRlYzc4NzQ5LCAweGQxYzFkOTM4LCAweGEyZmU4Y2NhLCAweDBiMzY5OGQ0LCAweDgxY2ZhNmY1LCAweGRlMjhhNTdhLCAweDhlMjZkYWI3LCAweGJmYTQzZmFkLCAweDlkZTQyYzNhLCAweDkyMGQ1MDc4LCAweGNjOWI2YTVmLCAweDQ2NjI1NDdlLCAweDEzYzJmNjhkLCAweGI4ZTg5MGQ4LCAweGY3NWUyZTM5LCAweGFmZjU4MmMzLCAweDgwYmU5ZjVkLCAweDkzN2M2OWQwLCAweDJkYTk2ZmQ1LCAweDEyYjNjZjI1LCAweDk5M2JjOGFjLCAweDdkYTcxMDE4LCAweDYzNmVlODljLCAweGJiN2JkYjNiLCAweDc4MDljZDI2LCAweDE4ZjQ2ZTU5LCAweGI3MDFlYzlhLCAweDlhYTg4MzRmLCAweDZlNjVlNjk1LCAweGU2N2VhYWZmLCAweGNmMDgyMWJjLCAweGU4ZTZlZjE1LCAweDliZDliYWU3LCAweDM2Y2U0YTZmLCAweDA5ZDRlYTlmLCAweDdjZDYyOWIwLCAweGIyYWYzMWE0LCAweDIzMzEyYTNmLCAweDk0MzBjNmE1LCAweDY2YzAzNWEyLCAweGJjMzc3NDRlLCAweGNhYTZmYzgyLCAweGQwYjBlMDkwLCAweGQ4MTUzM2E3LCAweDk4NGFmMTA0LCAweGRhZjc0MWVjLCAweDUwMGU3ZmNkLCAweGY2MmYxNzkxLCAweGQ2OGQ3NjRkLCAweGIwNGQ0M2VmLCAweDRkNTRjY2FhLCAweDA0ZGZlNDk2LCAweGI1ZTM5ZWQxLCAweDg4MWI0YzZhLCAweDFmYjhjMTJjLCAweDUxN2Y0NjY1LCAweGVhMDQ5ZDVlLCAweDM1NWQwMThjLCAweDc0NzNmYTg3LCAweDQxMmVmYjBiLCAweDFkNWFiMzY3LCAweGQyNTI5MmRiLCAweDU2MzNlOTEwLCAweDQ3MTM2ZGQ2LCAweDYxOGM5YWQ3LCAweDBjN2EzN2ExLCAweDE0OGU1OWY4LCAweDNjODllYjEzLCAweDI3ZWVjZWE5LCAweGM5MzViNzYxLCAweGU1ZWRlMTFjLCAweGIxM2M3YTQ3LCAweGRmNTk5Y2QyLCAweDczM2Y1NWYyLCAweGNlNzkxODE0LCAweDM3YmY3M2M3LCAweGNkZWE1M2Y3LCAweGFhNWI1ZmZkLCAweDZmMTRkZjNkLCAweGRiODY3ODQ0LCAweGYzODFjYWFmLCAweGM0M2ViOTY4LCAweDM0MmMzODI0LCAweDQwNWZjMmEzLCAweGMzNzIxNjFkLCAweDI1MGNiY2UyLCAweDQ5OGIyODNjLCAweDk1NDFmZjBkLCAweDAxNzEzOWE4LCAweGIzZGUwODBjLCAweGU0OWNkOGI0LCAweGMxOTA2NDU2LCAweDg0NjE3YmNiLCAweGI2NzBkNTMyLCAweDVjNzQ0ODZjLCAweDU3NDJkMGI4XTtcbiAgICB2YXIgVDggPSBbMHhmNGE3NTA1MSwgMHg0MTY1NTM3ZSwgMHgxN2E0YzMxYSwgMHgyNzVlOTYzYSwgMHhhYjZiY2IzYiwgMHg5ZDQ1ZjExZiwgMHhmYTU4YWJhYywgMHhlMzAzOTM0YiwgMHgzMGZhNTUyMCwgMHg3NjZkZjZhZCwgMHhjYzc2OTE4OCwgMHgwMjRjMjVmNSwgMHhlNWQ3ZmM0ZiwgMHgyYWNiZDdjNSwgMHgzNTQ0ODAyNiwgMHg2MmEzOGZiNSwgMHhiMTVhNDlkZSwgMHhiYTFiNjcyNSwgMHhlYTBlOTg0NSwgMHhmZWMwZTE1ZCwgMHgyZjc1MDJjMywgMHg0Y2YwMTI4MSwgMHg0Njk3YTM4ZCwgMHhkM2Y5YzY2YiwgMHg4ZjVmZTcwMywgMHg5MjljOTUxNSwgMHg2ZDdhZWJiZiwgMHg1MjU5ZGE5NSwgMHhiZTgzMmRkNCwgMHg3NDIxZDM1OCwgMHhlMDY5Mjk0OSwgMHhjOWM4NDQ4ZSwgMHhjMjg5NmE3NSwgMHg4ZTc5NzhmNCwgMHg1ODNlNmI5OSwgMHhiOTcxZGQyNywgMHhlMTRmYjZiZSwgMHg4OGFkMTdmMCwgMHgyMGFjNjZjOSwgMHhjZTNhYjQ3ZCwgMHhkZjRhMTg2MywgMHgxYTMxODJlNSwgMHg1MTMzNjA5NywgMHg1MzdmNDU2MiwgMHg2NDc3ZTBiMSwgMHg2YmFlODRiYiwgMHg4MWEwMWNmZSwgMHgwODJiOTRmOSwgMHg0ODY4NTg3MCwgMHg0NWZkMTk4ZiwgMHhkZTZjODc5NCwgMHg3YmY4Yjc1MiwgMHg3M2QzMjNhYiwgMHg0YjAyZTI3MiwgMHgxZjhmNTdlMywgMHg1NWFiMmE2NiwgMHhlYjI4MDdiMiwgMHhiNWMyMDMyZiwgMHhjNTdiOWE4NiwgMHgzNzA4YTVkMywgMHgyODg3ZjIzMCwgMHhiZmE1YjIyMywgMHgwMzZhYmEwMiwgMHgxNjgyNWNlZCwgMHhjZjFjMmI4YSwgMHg3OWI0OTJhNywgMHgwN2YyZjBmMywgMHg2OWUyYTE0ZSwgMHhkYWY0Y2Q2NSwgMHgwNWJlZDUwNiwgMHgzNDYyMWZkMSwgMHhhNmZlOGFjNCwgMHgyZTUzOWQzNCwgMHhmMzU1YTBhMiwgMHg4YWUxMzIwNSwgMHhmNmViNzVhNCwgMHg4M2VjMzkwYiwgMHg2MGVmYWE0MCwgMHg3MTlmMDY1ZSwgMHg2ZTEwNTFiZCwgMHgyMThhZjkzZSwgMHhkZDA2M2Q5NiwgMHgzZTA1YWVkZCwgMHhlNmJkNDY0ZCwgMHg1NDhkYjU5MSwgMHhjNDVkMDU3MSwgMHgwNmQ0NmYwNCwgMHg1MDE1ZmY2MCwgMHg5OGZiMjQxOSwgMHhiZGU5OTdkNiwgMHg0MDQzY2M4OSwgMHhkOTllNzc2NywgMHhlODQyYmRiMCwgMHg4OThiODgwNywgMHgxOTViMzhlNywgMHhjOGVlZGI3OSwgMHg3YzBhNDdhMSwgMHg0MjBmZTk3YywgMHg4NDFlYzlmOCwgMHgwMDAwMDAwMCwgMHg4MDg2ODMwOSwgMHgyYmVkNDgzMiwgMHgxMTcwYWMxZSwgMHg1YTcyNGU2YywgMHgwZWZmZmJmZCwgMHg4NTM4NTYwZiwgMHhhZWQ1MWUzZCwgMHgyZDM5MjczNiwgMHgwZmQ5NjQwYSwgMHg1Y2E2MjE2OCwgMHg1YjU0ZDE5YiwgMHgzNjJlM2EyNCwgMHgwYTY3YjEwYywgMHg1N2U3MGY5MywgMHhlZTk2ZDJiNCwgMHg5YjkxOWUxYiwgMHhjMGM1NGY4MCwgMHhkYzIwYTI2MSwgMHg3NzRiNjk1YSwgMHgxMjFhMTYxYywgMHg5M2JhMGFlMiwgMHhhMDJhZTVjMCwgMHgyMmUwNDMzYywgMHgxYjE3MWQxMiwgMHgwOTBkMGIwZSwgMHg4YmM3YWRmMiwgMHhiNmE4YjkyZCwgMHgxZWE5YzgxNCwgMHhmMTE5ODU1NywgMHg3NTA3NGNhZiwgMHg5OWRkYmJlZSwgMHg3ZjYwZmRhMywgMHgwMTI2OWZmNywgMHg3MmY1YmM1YywgMHg2NjNiYzU0NCwgMHhmYjdlMzQ1YiwgMHg0MzI5NzY4YiwgMHgyM2M2ZGNjYiwgMHhlZGZjNjhiNiwgMHhlNGYxNjNiOCwgMHgzMWRjY2FkNywgMHg2Mzg1MTA0MiwgMHg5NzIyNDAxMywgMHhjNjExMjA4NCwgMHg0YTI0N2Q4NSwgMHhiYjNkZjhkMiwgMHhmOTMyMTFhZSwgMHgyOWExNmRjNywgMHg5ZTJmNGIxZCwgMHhiMjMwZjNkYywgMHg4NjUyZWMwZCwgMHhjMWUzZDA3NywgMHhiMzE2NmMyYiwgMHg3MGI5OTlhOSwgMHg5NDQ4ZmExMSwgMHhlOTY0MjI0NywgMHhmYzhjYzRhOCwgMHhmMDNmMWFhMCwgMHg3ZDJjZDg1NiwgMHgzMzkwZWYyMiwgMHg0OTRlYzc4NywgMHgzOGQxYzFkOSwgMHhjYWEyZmU4YywgMHhkNDBiMzY5OCwgMHhmNTgxY2ZhNiwgMHg3YWRlMjhhNSwgMHhiNzhlMjZkYSwgMHhhZGJmYTQzZiwgMHgzYTlkZTQyYywgMHg3ODkyMGQ1MCwgMHg1ZmNjOWI2YSwgMHg3ZTQ2NjI1NCwgMHg4ZDEzYzJmNiwgMHhkOGI4ZTg5MCwgMHgzOWY3NWUyZSwgMHhjM2FmZjU4MiwgMHg1ZDgwYmU5ZiwgMHhkMDkzN2M2OSwgMHhkNTJkYTk2ZiwgMHgyNTEyYjNjZiwgMHhhYzk5M2JjOCwgMHgxODdkYTcxMCwgMHg5YzYzNmVlOCwgMHgzYmJiN2JkYiwgMHgyNjc4MDljZCwgMHg1OTE4ZjQ2ZSwgMHg5YWI3MDFlYywgMHg0ZjlhYTg4MywgMHg5NTZlNjVlNiwgMHhmZmU2N2VhYSwgMHhiY2NmMDgyMSwgMHgxNWU4ZTZlZiwgMHhlNzliZDliYSwgMHg2ZjM2Y2U0YSwgMHg5ZjA5ZDRlYSwgMHhiMDdjZDYyOSwgMHhhNGIyYWYzMSwgMHgzZjIzMzEyYSwgMHhhNTk0MzBjNiwgMHhhMjY2YzAzNSwgMHg0ZWJjMzc3NCwgMHg4MmNhYTZmYywgMHg5MGQwYjBlMCwgMHhhN2Q4MTUzMywgMHgwNDk4NGFmMSwgMHhlY2RhZjc0MSwgMHhjZDUwMGU3ZiwgMHg5MWY2MmYxNywgMHg0ZGQ2OGQ3NiwgMHhlZmIwNGQ0MywgMHhhYTRkNTRjYywgMHg5NjA0ZGZlNCwgMHhkMWI1ZTM5ZSwgMHg2YTg4MWI0YywgMHgyYzFmYjhjMSwgMHg2NTUxN2Y0NiwgMHg1ZWVhMDQ5ZCwgMHg4YzM1NWQwMSwgMHg4Nzc0NzNmYSwgMHgwYjQxMmVmYiwgMHg2NzFkNWFiMywgMHhkYmQyNTI5MiwgMHgxMDU2MzNlOSwgMHhkNjQ3MTM2ZCwgMHhkNzYxOGM5YSwgMHhhMTBjN2EzNywgMHhmODE0OGU1OSwgMHgxMzNjODllYiwgMHhhOTI3ZWVjZSwgMHg2MWM5MzViNywgMHgxY2U1ZWRlMSwgMHg0N2IxM2M3YSwgMHhkMmRmNTk5YywgMHhmMjczM2Y1NSwgMHgxNGNlNzkxOCwgMHhjNzM3YmY3MywgMHhmN2NkZWE1MywgMHhmZGFhNWI1ZiwgMHgzZDZmMTRkZiwgMHg0NGRiODY3OCwgMHhhZmYzODFjYSwgMHg2OGM0M2ViOSwgMHgyNDM0MmMzOCwgMHhhMzQwNWZjMiwgMHgxZGMzNzIxNiwgMHhlMjI1MGNiYywgMHgzYzQ5OGIyOCwgMHgwZDk1NDFmZiwgMHhhODAxNzEzOSwgMHgwY2IzZGUwOCwgMHhiNGU0OWNkOCwgMHg1NmMxOTA2NCwgMHhjYjg0NjE3YiwgMHgzMmI2NzBkNSwgMHg2YzVjNzQ0OCwgMHhiODU3NDJkMF07XG5cbiAgICAvLyBUcmFuc2Zvcm1hdGlvbnMgZm9yIGRlY3J5cHRpb24ga2V5IGV4cGFuc2lvblxuICAgIHZhciBVMSA9IFsweDAwMDAwMDAwLCAweDBlMDkwZDBiLCAweDFjMTIxYTE2LCAweDEyMWIxNzFkLCAweDM4MjQzNDJjLCAweDM2MmQzOTI3LCAweDI0MzYyZTNhLCAweDJhM2YyMzMxLCAweDcwNDg2ODU4LCAweDdlNDE2NTUzLCAweDZjNWE3MjRlLCAweDYyNTM3ZjQ1LCAweDQ4NmM1Yzc0LCAweDQ2NjU1MTdmLCAweDU0N2U0NjYyLCAweDVhNzc0YjY5LCAweGUwOTBkMGIwLCAweGVlOTlkZGJiLCAweGZjODJjYWE2LCAweGYyOGJjN2FkLCAweGQ4YjRlNDljLCAweGQ2YmRlOTk3LCAweGM0YTZmZThhLCAweGNhYWZmMzgxLCAweDkwZDhiOGU4LCAweDllZDFiNWUzLCAweDhjY2FhMmZlLCAweDgyYzNhZmY1LCAweGE4ZmM4Y2M0LCAweGE2ZjU4MWNmLCAweGI0ZWU5NmQyLCAweGJhZTc5YmQ5LCAweGRiM2JiYjdiLCAweGQ1MzJiNjcwLCAweGM3MjlhMTZkLCAweGM5MjBhYzY2LCAweGUzMWY4ZjU3LCAweGVkMTY4MjVjLCAweGZmMGQ5NTQxLCAweGYxMDQ5ODRhLCAweGFiNzNkMzIzLCAweGE1N2FkZTI4LCAweGI3NjFjOTM1LCAweGI5NjhjNDNlLCAweDkzNTdlNzBmLCAweDlkNWVlYTA0LCAweDhmNDVmZDE5LCAweDgxNGNmMDEyLCAweDNiYWI2YmNiLCAweDM1YTI2NmMwLCAweDI3Yjk3MWRkLCAweDI5YjA3Y2Q2LCAweDAzOGY1ZmU3LCAweDBkODY1MmVjLCAweDFmOWQ0NWYxLCAweDExOTQ0OGZhLCAweDRiZTMwMzkzLCAweDQ1ZWEwZTk4LCAweDU3ZjExOTg1LCAweDU5ZjgxNDhlLCAweDczYzczN2JmLCAweDdkY2UzYWI0LCAweDZmZDUyZGE5LCAweDYxZGMyMGEyLCAweGFkNzY2ZGY2LCAweGEzN2Y2MGZkLCAweGIxNjQ3N2UwLCAweGJmNmQ3YWViLCAweDk1NTI1OWRhLCAweDliNWI1NGQxLCAweDg5NDA0M2NjLCAweDg3NDk0ZWM3LCAweGRkM2UwNWFlLCAweGQzMzcwOGE1LCAweGMxMmMxZmI4LCAweGNmMjUxMmIzLCAweGU1MWEzMTgyLCAweGViMTMzYzg5LCAweGY5MDgyYjk0LCAweGY3MDEyNjlmLCAweDRkZTZiZDQ2LCAweDQzZWZiMDRkLCAweDUxZjRhNzUwLCAweDVmZmRhYTViLCAweDc1YzI4OTZhLCAweDdiY2I4NDYxLCAweDY5ZDA5MzdjLCAweDY3ZDk5ZTc3LCAweDNkYWVkNTFlLCAweDMzYTdkODE1LCAweDIxYmNjZjA4LCAweDJmYjVjMjAzLCAweDA1OGFlMTMyLCAweDBiODNlYzM5LCAweDE5OThmYjI0LCAweDE3OTFmNjJmLCAweDc2NGRkNjhkLCAweDc4NDRkYjg2LCAweDZhNWZjYzliLCAweDY0NTZjMTkwLCAweDRlNjllMmExLCAweDQwNjBlZmFhLCAweDUyN2JmOGI3LCAweDVjNzJmNWJjLCAweDA2MDViZWQ1LCAweDA4MGNiM2RlLCAweDFhMTdhNGMzLCAweDE0MWVhOWM4LCAweDNlMjE4YWY5LCAweDMwMjg4N2YyLCAweDIyMzM5MGVmLCAweDJjM2E5ZGU0LCAweDk2ZGQwNjNkLCAweDk4ZDQwYjM2LCAweDhhY2YxYzJiLCAweDg0YzYxMTIwLCAweGFlZjkzMjExLCAweGEwZjAzZjFhLCAweGIyZWIyODA3LCAweGJjZTIyNTBjLCAweGU2OTU2ZTY1LCAweGU4OWM2MzZlLCAweGZhODc3NDczLCAweGY0OGU3OTc4LCAweGRlYjE1YTQ5LCAweGQwYjg1NzQyLCAweGMyYTM0MDVmLCAweGNjYWE0ZDU0LCAweDQxZWNkYWY3LCAweDRmZTVkN2ZjLCAweDVkZmVjMGUxLCAweDUzZjdjZGVhLCAweDc5YzhlZWRiLCAweDc3YzFlM2QwLCAweDY1ZGFmNGNkLCAweDZiZDNmOWM2LCAweDMxYTRiMmFmLCAweDNmYWRiZmE0LCAweDJkYjZhOGI5LCAweDIzYmZhNWIyLCAweDA5ODA4NjgzLCAweDA3ODk4Yjg4LCAweDE1OTI5Yzk1LCAweDFiOWI5MTllLCAweGExN2MwYTQ3LCAweGFmNzUwNzRjLCAweGJkNmUxMDUxLCAweGIzNjcxZDVhLCAweDk5NTgzZTZiLCAweDk3NTEzMzYwLCAweDg1NGEyNDdkLCAweDhiNDMyOTc2LCAweGQxMzQ2MjFmLCAweGRmM2Q2ZjE0LCAweGNkMjY3ODA5LCAweGMzMmY3NTAyLCAweGU5MTA1NjMzLCAweGU3MTk1YjM4LCAweGY1MDI0YzI1LCAweGZiMGI0MTJlLCAweDlhZDc2MThjLCAweDk0ZGU2Yzg3LCAweDg2YzU3YjlhLCAweDg4Y2M3NjkxLCAweGEyZjM1NWEwLCAweGFjZmE1OGFiLCAweGJlZTE0ZmI2LCAweGIwZTg0MmJkLCAweGVhOWYwOWQ0LCAweGU0OTYwNGRmLCAweGY2OGQxM2MyLCAweGY4ODQxZWM5LCAweGQyYmIzZGY4LCAweGRjYjIzMGYzLCAweGNlYTkyN2VlLCAweGMwYTAyYWU1LCAweDdhNDdiMTNjLCAweDc0NGViYzM3LCAweDY2NTVhYjJhLCAweDY4NWNhNjIxLCAweDQyNjM4NTEwLCAweDRjNmE4ODFiLCAweDVlNzE5ZjA2LCAweDUwNzg5MjBkLCAweDBhMGZkOTY0LCAweDA0MDZkNDZmLCAweDE2MWRjMzcyLCAweDE4MTRjZTc5LCAweDMyMmJlZDQ4LCAweDNjMjJlMDQzLCAweDJlMzlmNzVlLCAweDIwMzBmYTU1LCAweGVjOWFiNzAxLCAweGUyOTNiYTBhLCAweGYwODhhZDE3LCAweGZlODFhMDFjLCAweGQ0YmU4MzJkLCAweGRhYjc4ZTI2LCAweGM4YWM5OTNiLCAweGM2YTU5NDMwLCAweDljZDJkZjU5LCAweDkyZGJkMjUyLCAweDgwYzBjNTRmLCAweDhlYzljODQ0LCAweGE0ZjZlYjc1LCAweGFhZmZlNjdlLCAweGI4ZTRmMTYzLCAweGI2ZWRmYzY4LCAweDBjMGE2N2IxLCAweDAyMDM2YWJhLCAweDEwMTg3ZGE3LCAweDFlMTE3MGFjLCAweDM0MmU1MzlkLCAweDNhMjc1ZTk2LCAweDI4M2M0OThiLCAweDI2MzU0NDgwLCAweDdjNDIwZmU5LCAweDcyNGIwMmUyLCAweDYwNTAxNWZmLCAweDZlNTkxOGY0LCAweDQ0NjYzYmM1LCAweDRhNmYzNmNlLCAweDU4NzQyMWQzLCAweDU2N2QyY2Q4LCAweDM3YTEwYzdhLCAweDM5YTgwMTcxLCAweDJiYjMxNjZjLCAweDI1YmExYjY3LCAweDBmODUzODU2LCAweDAxOGMzNTVkLCAweDEzOTcyMjQwLCAweDFkOWUyZjRiLCAweDQ3ZTk2NDIyLCAweDQ5ZTA2OTI5LCAweDViZmI3ZTM0LCAweDU1ZjI3MzNmLCAweDdmY2Q1MDBlLCAweDcxYzQ1ZDA1LCAweDYzZGY0YTE4LCAweDZkZDY0NzEzLCAweGQ3MzFkY2NhLCAweGQ5MzhkMWMxLCAweGNiMjNjNmRjLCAweGM1MmFjYmQ3LCAweGVmMTVlOGU2LCAweGUxMWNlNWVkLCAweGYzMDdmMmYwLCAweGZkMGVmZmZiLCAweGE3NzliNDkyLCAweGE5NzBiOTk5LCAweGJiNmJhZTg0LCAweGI1NjJhMzhmLCAweDlmNWQ4MGJlLCAweDkxNTQ4ZGI1LCAweDgzNGY5YWE4LCAweDhkNDY5N2EzXTtcbiAgICB2YXIgVTIgPSBbMHgwMDAwMDAwMCwgMHgwYjBlMDkwZCwgMHgxNjFjMTIxYSwgMHgxZDEyMWIxNywgMHgyYzM4MjQzNCwgMHgyNzM2MmQzOSwgMHgzYTI0MzYyZSwgMHgzMTJhM2YyMywgMHg1ODcwNDg2OCwgMHg1MzdlNDE2NSwgMHg0ZTZjNWE3MiwgMHg0NTYyNTM3ZiwgMHg3NDQ4NmM1YywgMHg3ZjQ2NjU1MSwgMHg2MjU0N2U0NiwgMHg2OTVhNzc0YiwgMHhiMGUwOTBkMCwgMHhiYmVlOTlkZCwgMHhhNmZjODJjYSwgMHhhZGYyOGJjNywgMHg5Y2Q4YjRlNCwgMHg5N2Q2YmRlOSwgMHg4YWM0YTZmZSwgMHg4MWNhYWZmMywgMHhlODkwZDhiOCwgMHhlMzllZDFiNSwgMHhmZThjY2FhMiwgMHhmNTgyYzNhZiwgMHhjNGE4ZmM4YywgMHhjZmE2ZjU4MSwgMHhkMmI0ZWU5NiwgMHhkOWJhZTc5YiwgMHg3YmRiM2JiYiwgMHg3MGQ1MzJiNiwgMHg2ZGM3MjlhMSwgMHg2NmM5MjBhYywgMHg1N2UzMWY4ZiwgMHg1Y2VkMTY4MiwgMHg0MWZmMGQ5NSwgMHg0YWYxMDQ5OCwgMHgyM2FiNzNkMywgMHgyOGE1N2FkZSwgMHgzNWI3NjFjOSwgMHgzZWI5NjhjNCwgMHgwZjkzNTdlNywgMHgwNDlkNWVlYSwgMHgxOThmNDVmZCwgMHgxMjgxNGNmMCwgMHhjYjNiYWI2YiwgMHhjMDM1YTI2NiwgMHhkZDI3Yjk3MSwgMHhkNjI5YjA3YywgMHhlNzAzOGY1ZiwgMHhlYzBkODY1MiwgMHhmMTFmOWQ0NSwgMHhmYTExOTQ0OCwgMHg5MzRiZTMwMywgMHg5ODQ1ZWEwZSwgMHg4NTU3ZjExOSwgMHg4ZTU5ZjgxNCwgMHhiZjczYzczNywgMHhiNDdkY2UzYSwgMHhhOTZmZDUyZCwgMHhhMjYxZGMyMCwgMHhmNmFkNzY2ZCwgMHhmZGEzN2Y2MCwgMHhlMGIxNjQ3NywgMHhlYmJmNmQ3YSwgMHhkYTk1NTI1OSwgMHhkMTliNWI1NCwgMHhjYzg5NDA0MywgMHhjNzg3NDk0ZSwgMHhhZWRkM2UwNSwgMHhhNWQzMzcwOCwgMHhiOGMxMmMxZiwgMHhiM2NmMjUxMiwgMHg4MmU1MWEzMSwgMHg4OWViMTMzYywgMHg5NGY5MDgyYiwgMHg5ZmY3MDEyNiwgMHg0NjRkZTZiZCwgMHg0ZDQzZWZiMCwgMHg1MDUxZjRhNywgMHg1YjVmZmRhYSwgMHg2YTc1YzI4OSwgMHg2MTdiY2I4NCwgMHg3YzY5ZDA5MywgMHg3NzY3ZDk5ZSwgMHgxZTNkYWVkNSwgMHgxNTMzYTdkOCwgMHgwODIxYmNjZiwgMHgwMzJmYjVjMiwgMHgzMjA1OGFlMSwgMHgzOTBiODNlYywgMHgyNDE5OThmYiwgMHgyZjE3OTFmNiwgMHg4ZDc2NGRkNiwgMHg4Njc4NDRkYiwgMHg5YjZhNWZjYywgMHg5MDY0NTZjMSwgMHhhMTRlNjllMiwgMHhhYTQwNjBlZiwgMHhiNzUyN2JmOCwgMHhiYzVjNzJmNSwgMHhkNTA2MDViZSwgMHhkZTA4MGNiMywgMHhjMzFhMTdhNCwgMHhjODE0MWVhOSwgMHhmOTNlMjE4YSwgMHhmMjMwMjg4NywgMHhlZjIyMzM5MCwgMHhlNDJjM2E5ZCwgMHgzZDk2ZGQwNiwgMHgzNjk4ZDQwYiwgMHgyYjhhY2YxYywgMHgyMDg0YzYxMSwgMHgxMWFlZjkzMiwgMHgxYWEwZjAzZiwgMHgwN2IyZWIyOCwgMHgwY2JjZTIyNSwgMHg2NWU2OTU2ZSwgMHg2ZWU4OWM2MywgMHg3M2ZhODc3NCwgMHg3OGY0OGU3OSwgMHg0OWRlYjE1YSwgMHg0MmQwYjg1NywgMHg1ZmMyYTM0MCwgMHg1NGNjYWE0ZCwgMHhmNzQxZWNkYSwgMHhmYzRmZTVkNywgMHhlMTVkZmVjMCwgMHhlYTUzZjdjZCwgMHhkYjc5YzhlZSwgMHhkMDc3YzFlMywgMHhjZDY1ZGFmNCwgMHhjNjZiZDNmOSwgMHhhZjMxYTRiMiwgMHhhNDNmYWRiZiwgMHhiOTJkYjZhOCwgMHhiMjIzYmZhNSwgMHg4MzA5ODA4NiwgMHg4ODA3ODk4YiwgMHg5NTE1OTI5YywgMHg5ZTFiOWI5MSwgMHg0N2ExN2MwYSwgMHg0Y2FmNzUwNywgMHg1MWJkNmUxMCwgMHg1YWIzNjcxZCwgMHg2Yjk5NTgzZSwgMHg2MDk3NTEzMywgMHg3ZDg1NGEyNCwgMHg3NjhiNDMyOSwgMHgxZmQxMzQ2MiwgMHgxNGRmM2Q2ZiwgMHgwOWNkMjY3OCwgMHgwMmMzMmY3NSwgMHgzM2U5MTA1NiwgMHgzOGU3MTk1YiwgMHgyNWY1MDI0YywgMHgyZWZiMGI0MSwgMHg4YzlhZDc2MSwgMHg4Nzk0ZGU2YywgMHg5YTg2YzU3YiwgMHg5MTg4Y2M3NiwgMHhhMGEyZjM1NSwgMHhhYmFjZmE1OCwgMHhiNmJlZTE0ZiwgMHhiZGIwZTg0MiwgMHhkNGVhOWYwOSwgMHhkZmU0OTYwNCwgMHhjMmY2OGQxMywgMHhjOWY4ODQxZSwgMHhmOGQyYmIzZCwgMHhmM2RjYjIzMCwgMHhlZWNlYTkyNywgMHhlNWMwYTAyYSwgMHgzYzdhNDdiMSwgMHgzNzc0NGViYywgMHgyYTY2NTVhYiwgMHgyMTY4NWNhNiwgMHgxMDQyNjM4NSwgMHgxYjRjNmE4OCwgMHgwNjVlNzE5ZiwgMHgwZDUwNzg5MiwgMHg2NDBhMGZkOSwgMHg2ZjA0MDZkNCwgMHg3MjE2MWRjMywgMHg3OTE4MTRjZSwgMHg0ODMyMmJlZCwgMHg0MzNjMjJlMCwgMHg1ZTJlMzlmNywgMHg1NTIwMzBmYSwgMHgwMWVjOWFiNywgMHgwYWUyOTNiYSwgMHgxN2YwODhhZCwgMHgxY2ZlODFhMCwgMHgyZGQ0YmU4MywgMHgyNmRhYjc4ZSwgMHgzYmM4YWM5OSwgMHgzMGM2YTU5NCwgMHg1OTljZDJkZiwgMHg1MjkyZGJkMiwgMHg0ZjgwYzBjNSwgMHg0NDhlYzljOCwgMHg3NWE0ZjZlYiwgMHg3ZWFhZmZlNiwgMHg2M2I4ZTRmMSwgMHg2OGI2ZWRmYywgMHhiMTBjMGE2NywgMHhiYTAyMDM2YSwgMHhhNzEwMTg3ZCwgMHhhYzFlMTE3MCwgMHg5ZDM0MmU1MywgMHg5NjNhMjc1ZSwgMHg4YjI4M2M0OSwgMHg4MDI2MzU0NCwgMHhlOTdjNDIwZiwgMHhlMjcyNGIwMiwgMHhmZjYwNTAxNSwgMHhmNDZlNTkxOCwgMHhjNTQ0NjYzYiwgMHhjZTRhNmYzNiwgMHhkMzU4NzQyMSwgMHhkODU2N2QyYywgMHg3YTM3YTEwYywgMHg3MTM5YTgwMSwgMHg2YzJiYjMxNiwgMHg2NzI1YmExYiwgMHg1NjBmODUzOCwgMHg1ZDAxOGMzNSwgMHg0MDEzOTcyMiwgMHg0YjFkOWUyZiwgMHgyMjQ3ZTk2NCwgMHgyOTQ5ZTA2OSwgMHgzNDViZmI3ZSwgMHgzZjU1ZjI3MywgMHgwZTdmY2Q1MCwgMHgwNTcxYzQ1ZCwgMHgxODYzZGY0YSwgMHgxMzZkZDY0NywgMHhjYWQ3MzFkYywgMHhjMWQ5MzhkMSwgMHhkY2NiMjNjNiwgMHhkN2M1MmFjYiwgMHhlNmVmMTVlOCwgMHhlZGUxMWNlNSwgMHhmMGYzMDdmMiwgMHhmYmZkMGVmZiwgMHg5MmE3NzliNCwgMHg5OWE5NzBiOSwgMHg4NGJiNmJhZSwgMHg4ZmI1NjJhMywgMHhiZTlmNWQ4MCwgMHhiNTkxNTQ4ZCwgMHhhODgzNGY5YSwgMHhhMzhkNDY5N107XG4gICAgdmFyIFUzID0gWzB4MDAwMDAwMDAsIDB4MGQwYjBlMDksIDB4MWExNjFjMTIsIDB4MTcxZDEyMWIsIDB4MzQyYzM4MjQsIDB4MzkyNzM2MmQsIDB4MmUzYTI0MzYsIDB4MjMzMTJhM2YsIDB4Njg1ODcwNDgsIDB4NjU1MzdlNDEsIDB4NzI0ZTZjNWEsIDB4N2Y0NTYyNTMsIDB4NWM3NDQ4NmMsIDB4NTE3ZjQ2NjUsIDB4NDY2MjU0N2UsIDB4NGI2OTVhNzcsIDB4ZDBiMGUwOTAsIDB4ZGRiYmVlOTksIDB4Y2FhNmZjODIsIDB4YzdhZGYyOGIsIDB4ZTQ5Y2Q4YjQsIDB4ZTk5N2Q2YmQsIDB4ZmU4YWM0YTYsIDB4ZjM4MWNhYWYsIDB4YjhlODkwZDgsIDB4YjVlMzllZDEsIDB4YTJmZThjY2EsIDB4YWZmNTgyYzMsIDB4OGNjNGE4ZmMsIDB4ODFjZmE2ZjUsIDB4OTZkMmI0ZWUsIDB4OWJkOWJhZTcsIDB4YmI3YmRiM2IsIDB4YjY3MGQ1MzIsIDB4YTE2ZGM3MjksIDB4YWM2NmM5MjAsIDB4OGY1N2UzMWYsIDB4ODI1Y2VkMTYsIDB4OTU0MWZmMGQsIDB4OTg0YWYxMDQsIDB4ZDMyM2FiNzMsIDB4ZGUyOGE1N2EsIDB4YzkzNWI3NjEsIDB4YzQzZWI5NjgsIDB4ZTcwZjkzNTcsIDB4ZWEwNDlkNWUsIDB4ZmQxOThmNDUsIDB4ZjAxMjgxNGMsIDB4NmJjYjNiYWIsIDB4NjZjMDM1YTIsIDB4NzFkZDI3YjksIDB4N2NkNjI5YjAsIDB4NWZlNzAzOGYsIDB4NTJlYzBkODYsIDB4NDVmMTFmOWQsIDB4NDhmYTExOTQsIDB4MDM5MzRiZTMsIDB4MGU5ODQ1ZWEsIDB4MTk4NTU3ZjEsIDB4MTQ4ZTU5ZjgsIDB4MzdiZjczYzcsIDB4M2FiNDdkY2UsIDB4MmRhOTZmZDUsIDB4MjBhMjYxZGMsIDB4NmRmNmFkNzYsIDB4NjBmZGEzN2YsIDB4NzdlMGIxNjQsIDB4N2FlYmJmNmQsIDB4NTlkYTk1NTIsIDB4NTRkMTliNWIsIDB4NDNjYzg5NDAsIDB4NGVjNzg3NDksIDB4MDVhZWRkM2UsIDB4MDhhNWQzMzcsIDB4MWZiOGMxMmMsIDB4MTJiM2NmMjUsIDB4MzE4MmU1MWEsIDB4M2M4OWViMTMsIDB4MmI5NGY5MDgsIDB4MjY5ZmY3MDEsIDB4YmQ0NjRkZTYsIDB4YjA0ZDQzZWYsIDB4YTc1MDUxZjQsIDB4YWE1YjVmZmQsIDB4ODk2YTc1YzIsIDB4ODQ2MTdiY2IsIDB4OTM3YzY5ZDAsIDB4OWU3NzY3ZDksIDB4ZDUxZTNkYWUsIDB4ZDgxNTMzYTcsIDB4Y2YwODIxYmMsIDB4YzIwMzJmYjUsIDB4ZTEzMjA1OGEsIDB4ZWMzOTBiODMsIDB4ZmIyNDE5OTgsIDB4ZjYyZjE3OTEsIDB4ZDY4ZDc2NGQsIDB4ZGI4Njc4NDQsIDB4Y2M5YjZhNWYsIDB4YzE5MDY0NTYsIDB4ZTJhMTRlNjksIDB4ZWZhYTQwNjAsIDB4ZjhiNzUyN2IsIDB4ZjViYzVjNzIsIDB4YmVkNTA2MDUsIDB4YjNkZTA4MGMsIDB4YTRjMzFhMTcsIDB4YTljODE0MWUsIDB4OGFmOTNlMjEsIDB4ODdmMjMwMjgsIDB4OTBlZjIyMzMsIDB4OWRlNDJjM2EsIDB4MDYzZDk2ZGQsIDB4MGIzNjk4ZDQsIDB4MWMyYjhhY2YsIDB4MTEyMDg0YzYsIDB4MzIxMWFlZjksIDB4M2YxYWEwZjAsIDB4MjgwN2IyZWIsIDB4MjUwY2JjZTIsIDB4NmU2NWU2OTUsIDB4NjM2ZWU4OWMsIDB4NzQ3M2ZhODcsIDB4Nzk3OGY0OGUsIDB4NWE0OWRlYjEsIDB4NTc0MmQwYjgsIDB4NDA1ZmMyYTMsIDB4NGQ1NGNjYWEsIDB4ZGFmNzQxZWMsIDB4ZDdmYzRmZTUsIDB4YzBlMTVkZmUsIDB4Y2RlYTUzZjcsIDB4ZWVkYjc5YzgsIDB4ZTNkMDc3YzEsIDB4ZjRjZDY1ZGEsIDB4ZjljNjZiZDMsIDB4YjJhZjMxYTQsIDB4YmZhNDNmYWQsIDB4YThiOTJkYjYsIDB4YTViMjIzYmYsIDB4ODY4MzA5ODAsIDB4OGI4ODA3ODksIDB4OWM5NTE1OTIsIDB4OTE5ZTFiOWIsIDB4MGE0N2ExN2MsIDB4MDc0Y2FmNzUsIDB4MTA1MWJkNmUsIDB4MWQ1YWIzNjcsIDB4M2U2Yjk5NTgsIDB4MzM2MDk3NTEsIDB4MjQ3ZDg1NGEsIDB4Mjk3NjhiNDMsIDB4NjIxZmQxMzQsIDB4NmYxNGRmM2QsIDB4NzgwOWNkMjYsIDB4NzUwMmMzMmYsIDB4NTYzM2U5MTAsIDB4NWIzOGU3MTksIDB4NGMyNWY1MDIsIDB4NDEyZWZiMGIsIDB4NjE4YzlhZDcsIDB4NmM4Nzk0ZGUsIDB4N2I5YTg2YzUsIDB4NzY5MTg4Y2MsIDB4NTVhMGEyZjMsIDB4NThhYmFjZmEsIDB4NGZiNmJlZTEsIDB4NDJiZGIwZTgsIDB4MDlkNGVhOWYsIDB4MDRkZmU0OTYsIDB4MTNjMmY2OGQsIDB4MWVjOWY4ODQsIDB4M2RmOGQyYmIsIDB4MzBmM2RjYjIsIDB4MjdlZWNlYTksIDB4MmFlNWMwYTAsIDB4YjEzYzdhNDcsIDB4YmMzNzc0NGUsIDB4YWIyYTY2NTUsIDB4YTYyMTY4NWMsIDB4ODUxMDQyNjMsIDB4ODgxYjRjNmEsIDB4OWYwNjVlNzEsIDB4OTIwZDUwNzgsIDB4ZDk2NDBhMGYsIDB4ZDQ2ZjA0MDYsIDB4YzM3MjE2MWQsIDB4Y2U3OTE4MTQsIDB4ZWQ0ODMyMmIsIDB4ZTA0MzNjMjIsIDB4Zjc1ZTJlMzksIDB4ZmE1NTIwMzAsIDB4YjcwMWVjOWEsIDB4YmEwYWUyOTMsIDB4YWQxN2YwODgsIDB4YTAxY2ZlODEsIDB4ODMyZGQ0YmUsIDB4OGUyNmRhYjcsIDB4OTkzYmM4YWMsIDB4OTQzMGM2YTUsIDB4ZGY1OTljZDIsIDB4ZDI1MjkyZGIsIDB4YzU0ZjgwYzAsIDB4Yzg0NDhlYzksIDB4ZWI3NWE0ZjYsIDB4ZTY3ZWFhZmYsIDB4ZjE2M2I4ZTQsIDB4ZmM2OGI2ZWQsIDB4NjdiMTBjMGEsIDB4NmFiYTAyMDMsIDB4N2RhNzEwMTgsIDB4NzBhYzFlMTEsIDB4NTM5ZDM0MmUsIDB4NWU5NjNhMjcsIDB4NDk4YjI4M2MsIDB4NDQ4MDI2MzUsIDB4MGZlOTdjNDIsIDB4MDJlMjcyNGIsIDB4MTVmZjYwNTAsIDB4MThmNDZlNTksIDB4M2JjNTQ0NjYsIDB4MzZjZTRhNmYsIDB4MjFkMzU4NzQsIDB4MmNkODU2N2QsIDB4MGM3YTM3YTEsIDB4MDE3MTM5YTgsIDB4MTY2YzJiYjMsIDB4MWI2NzI1YmEsIDB4Mzg1NjBmODUsIDB4MzU1ZDAxOGMsIDB4MjI0MDEzOTcsIDB4MmY0YjFkOWUsIDB4NjQyMjQ3ZTksIDB4NjkyOTQ5ZTAsIDB4N2UzNDViZmIsIDB4NzMzZjU1ZjIsIDB4NTAwZTdmY2QsIDB4NWQwNTcxYzQsIDB4NGExODYzZGYsIDB4NDcxMzZkZDYsIDB4ZGNjYWQ3MzEsIDB4ZDFjMWQ5MzgsIDB4YzZkY2NiMjMsIDB4Y2JkN2M1MmEsIDB4ZThlNmVmMTUsIDB4ZTVlZGUxMWMsIDB4ZjJmMGYzMDcsIDB4ZmZmYmZkMGUsIDB4YjQ5MmE3NzksIDB4Yjk5OWE5NzAsIDB4YWU4NGJiNmIsIDB4YTM4ZmI1NjIsIDB4ODBiZTlmNWQsIDB4OGRiNTkxNTQsIDB4OWFhODgzNGYsIDB4OTdhMzhkNDZdO1xuICAgIHZhciBVNCA9IFsweDAwMDAwMDAwLCAweDA5MGQwYjBlLCAweDEyMWExNjFjLCAweDFiMTcxZDEyLCAweDI0MzQyYzM4LCAweDJkMzkyNzM2LCAweDM2MmUzYTI0LCAweDNmMjMzMTJhLCAweDQ4Njg1ODcwLCAweDQxNjU1MzdlLCAweDVhNzI0ZTZjLCAweDUzN2Y0NTYyLCAweDZjNWM3NDQ4LCAweDY1NTE3ZjQ2LCAweDdlNDY2MjU0LCAweDc3NGI2OTVhLCAweDkwZDBiMGUwLCAweDk5ZGRiYmVlLCAweDgyY2FhNmZjLCAweDhiYzdhZGYyLCAweGI0ZTQ5Y2Q4LCAweGJkZTk5N2Q2LCAweGE2ZmU4YWM0LCAweGFmZjM4MWNhLCAweGQ4YjhlODkwLCAweGQxYjVlMzllLCAweGNhYTJmZThjLCAweGMzYWZmNTgyLCAweGZjOGNjNGE4LCAweGY1ODFjZmE2LCAweGVlOTZkMmI0LCAweGU3OWJkOWJhLCAweDNiYmI3YmRiLCAweDMyYjY3MGQ1LCAweDI5YTE2ZGM3LCAweDIwYWM2NmM5LCAweDFmOGY1N2UzLCAweDE2ODI1Y2VkLCAweDBkOTU0MWZmLCAweDA0OTg0YWYxLCAweDczZDMyM2FiLCAweDdhZGUyOGE1LCAweDYxYzkzNWI3LCAweDY4YzQzZWI5LCAweDU3ZTcwZjkzLCAweDVlZWEwNDlkLCAweDQ1ZmQxOThmLCAweDRjZjAxMjgxLCAweGFiNmJjYjNiLCAweGEyNjZjMDM1LCAweGI5NzFkZDI3LCAweGIwN2NkNjI5LCAweDhmNWZlNzAzLCAweDg2NTJlYzBkLCAweDlkNDVmMTFmLCAweDk0NDhmYTExLCAweGUzMDM5MzRiLCAweGVhMGU5ODQ1LCAweGYxMTk4NTU3LCAweGY4MTQ4ZTU5LCAweGM3MzdiZjczLCAweGNlM2FiNDdkLCAweGQ1MmRhOTZmLCAweGRjMjBhMjYxLCAweDc2NmRmNmFkLCAweDdmNjBmZGEzLCAweDY0NzdlMGIxLCAweDZkN2FlYmJmLCAweDUyNTlkYTk1LCAweDViNTRkMTliLCAweDQwNDNjYzg5LCAweDQ5NGVjNzg3LCAweDNlMDVhZWRkLCAweDM3MDhhNWQzLCAweDJjMWZiOGMxLCAweDI1MTJiM2NmLCAweDFhMzE4MmU1LCAweDEzM2M4OWViLCAweDA4MmI5NGY5LCAweDAxMjY5ZmY3LCAweGU2YmQ0NjRkLCAweGVmYjA0ZDQzLCAweGY0YTc1MDUxLCAweGZkYWE1YjVmLCAweGMyODk2YTc1LCAweGNiODQ2MTdiLCAweGQwOTM3YzY5LCAweGQ5OWU3NzY3LCAweGFlZDUxZTNkLCAweGE3ZDgxNTMzLCAweGJjY2YwODIxLCAweGI1YzIwMzJmLCAweDhhZTEzMjA1LCAweDgzZWMzOTBiLCAweDk4ZmIyNDE5LCAweDkxZjYyZjE3LCAweDRkZDY4ZDc2LCAweDQ0ZGI4Njc4LCAweDVmY2M5YjZhLCAweDU2YzE5MDY0LCAweDY5ZTJhMTRlLCAweDYwZWZhYTQwLCAweDdiZjhiNzUyLCAweDcyZjViYzVjLCAweDA1YmVkNTA2LCAweDBjYjNkZTA4LCAweDE3YTRjMzFhLCAweDFlYTljODE0LCAweDIxOGFmOTNlLCAweDI4ODdmMjMwLCAweDMzOTBlZjIyLCAweDNhOWRlNDJjLCAweGRkMDYzZDk2LCAweGQ0MGIzNjk4LCAweGNmMWMyYjhhLCAweGM2MTEyMDg0LCAweGY5MzIxMWFlLCAweGYwM2YxYWEwLCAweGViMjgwN2IyLCAweGUyMjUwY2JjLCAweDk1NmU2NWU2LCAweDljNjM2ZWU4LCAweDg3NzQ3M2ZhLCAweDhlNzk3OGY0LCAweGIxNWE0OWRlLCAweGI4NTc0MmQwLCAweGEzNDA1ZmMyLCAweGFhNGQ1NGNjLCAweGVjZGFmNzQxLCAweGU1ZDdmYzRmLCAweGZlYzBlMTVkLCAweGY3Y2RlYTUzLCAweGM4ZWVkYjc5LCAweGMxZTNkMDc3LCAweGRhZjRjZDY1LCAweGQzZjljNjZiLCAweGE0YjJhZjMxLCAweGFkYmZhNDNmLCAweGI2YThiOTJkLCAweGJmYTViMjIzLCAweDgwODY4MzA5LCAweDg5OGI4ODA3LCAweDkyOWM5NTE1LCAweDliOTE5ZTFiLCAweDdjMGE0N2ExLCAweDc1MDc0Y2FmLCAweDZlMTA1MWJkLCAweDY3MWQ1YWIzLCAweDU4M2U2Yjk5LCAweDUxMzM2MDk3LCAweDRhMjQ3ZDg1LCAweDQzMjk3NjhiLCAweDM0NjIxZmQxLCAweDNkNmYxNGRmLCAweDI2NzgwOWNkLCAweDJmNzUwMmMzLCAweDEwNTYzM2U5LCAweDE5NWIzOGU3LCAweDAyNGMyNWY1LCAweDBiNDEyZWZiLCAweGQ3NjE4YzlhLCAweGRlNmM4Nzk0LCAweGM1N2I5YTg2LCAweGNjNzY5MTg4LCAweGYzNTVhMGEyLCAweGZhNThhYmFjLCAweGUxNGZiNmJlLCAweGU4NDJiZGIwLCAweDlmMDlkNGVhLCAweDk2MDRkZmU0LCAweDhkMTNjMmY2LCAweDg0MWVjOWY4LCAweGJiM2RmOGQyLCAweGIyMzBmM2RjLCAweGE5MjdlZWNlLCAweGEwMmFlNWMwLCAweDQ3YjEzYzdhLCAweDRlYmMzNzc0LCAweDU1YWIyYTY2LCAweDVjYTYyMTY4LCAweDYzODUxMDQyLCAweDZhODgxYjRjLCAweDcxOWYwNjVlLCAweDc4OTIwZDUwLCAweDBmZDk2NDBhLCAweDA2ZDQ2ZjA0LCAweDFkYzM3MjE2LCAweDE0Y2U3OTE4LCAweDJiZWQ0ODMyLCAweDIyZTA0MzNjLCAweDM5Zjc1ZTJlLCAweDMwZmE1NTIwLCAweDlhYjcwMWVjLCAweDkzYmEwYWUyLCAweDg4YWQxN2YwLCAweDgxYTAxY2ZlLCAweGJlODMyZGQ0LCAweGI3OGUyNmRhLCAweGFjOTkzYmM4LCAweGE1OTQzMGM2LCAweGQyZGY1OTljLCAweGRiZDI1MjkyLCAweGMwYzU0ZjgwLCAweGM5Yzg0NDhlLCAweGY2ZWI3NWE0LCAweGZmZTY3ZWFhLCAweGU0ZjE2M2I4LCAweGVkZmM2OGI2LCAweDBhNjdiMTBjLCAweDAzNmFiYTAyLCAweDE4N2RhNzEwLCAweDExNzBhYzFlLCAweDJlNTM5ZDM0LCAweDI3NWU5NjNhLCAweDNjNDk4YjI4LCAweDM1NDQ4MDI2LCAweDQyMGZlOTdjLCAweDRiMDJlMjcyLCAweDUwMTVmZjYwLCAweDU5MThmNDZlLCAweDY2M2JjNTQ0LCAweDZmMzZjZTRhLCAweDc0MjFkMzU4LCAweDdkMmNkODU2LCAweGExMGM3YTM3LCAweGE4MDE3MTM5LCAweGIzMTY2YzJiLCAweGJhMWI2NzI1LCAweDg1Mzg1NjBmLCAweDhjMzU1ZDAxLCAweDk3MjI0MDEzLCAweDllMmY0YjFkLCAweGU5NjQyMjQ3LCAweGUwNjkyOTQ5LCAweGZiN2UzNDViLCAweGYyNzMzZjU1LCAweGNkNTAwZTdmLCAweGM0NWQwNTcxLCAweGRmNGExODYzLCAweGQ2NDcxMzZkLCAweDMxZGNjYWQ3LCAweDM4ZDFjMWQ5LCAweDIzYzZkY2NiLCAweDJhY2JkN2M1LCAweDE1ZThlNmVmLCAweDFjZTVlZGUxLCAweDA3ZjJmMGYzLCAweDBlZmZmYmZkLCAweDc5YjQ5MmE3LCAweDcwYjk5OWE5LCAweDZiYWU4NGJiLCAweDYyYTM4ZmI1LCAweDVkODBiZTlmLCAweDU0OGRiNTkxLCAweDRmOWFhODgzLCAweDQ2OTdhMzhkXTtcblxuICAgIGZ1bmN0aW9uIGNvbnZlcnRUb0ludDMyKGJ5dGVzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gNCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgICAgICAgKGJ5dGVzW2kgICAgXSA8PCAyNCkgfFxuICAgICAgICAgICAgICAgIChieXRlc1tpICsgMV0gPDwgMTYpIHxcbiAgICAgICAgICAgICAgICAoYnl0ZXNbaSArIDJdIDw8ICA4KSB8XG4gICAgICAgICAgICAgICAgIGJ5dGVzW2kgKyAzXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBBRVMgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEFFUykpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdrZXknLCB7XG4gICAgICAgICAgICB2YWx1ZTogY29lcmNlQXJyYXkoa2V5LCB0cnVlKVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9wcmVwYXJlKCk7XG4gICAgfVxuXG5cbiAgICBBRVMucHJvdG90eXBlLl9wcmVwYXJlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIHJvdW5kcyA9IG51bWJlck9mUm91bmRzW3RoaXMua2V5Lmxlbmd0aF07XG4gICAgICAgIGlmIChyb3VuZHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGtleSBzaXplIChtdXN0IGJlIDE2LCAyNCBvciAzMiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGVuY3J5cHRpb24gcm91bmQga2V5c1xuICAgICAgICB0aGlzLl9LZSA9IFtdO1xuXG4gICAgICAgIC8vIGRlY3J5cHRpb24gcm91bmQga2V5c1xuICAgICAgICB0aGlzLl9LZCA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IHJvdW5kczsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9LZS5wdXNoKFswLCAwLCAwLCAwXSk7XG4gICAgICAgICAgICB0aGlzLl9LZC5wdXNoKFswLCAwLCAwLCAwXSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcm91bmRLZXlDb3VudCA9IChyb3VuZHMgKyAxKSAqIDQ7XG4gICAgICAgIHZhciBLQyA9IHRoaXMua2V5Lmxlbmd0aCAvIDQ7XG5cbiAgICAgICAgLy8gY29udmVydCB0aGUga2V5IGludG8gaW50c1xuICAgICAgICB2YXIgdGsgPSBjb252ZXJ0VG9JbnQzMih0aGlzLmtleSk7XG5cbiAgICAgICAgLy8gY29weSB2YWx1ZXMgaW50byByb3VuZCBrZXkgYXJyYXlzXG4gICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBLQzsgaSsrKSB7XG4gICAgICAgICAgICBpbmRleCA9IGkgPj4gMjtcbiAgICAgICAgICAgIHRoaXMuX0tlW2luZGV4XVtpICUgNF0gPSB0a1tpXTtcbiAgICAgICAgICAgIHRoaXMuX0tkW3JvdW5kcyAtIGluZGV4XVtpICUgNF0gPSB0a1tpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGtleSBleHBhbnNpb24gKGZpcHMtMTk3IHNlY3Rpb24gNS4yKVxuICAgICAgICB2YXIgcmNvbnBvaW50ZXIgPSAwO1xuICAgICAgICB2YXIgdCA9IEtDLCB0dDtcbiAgICAgICAgd2hpbGUgKHQgPCByb3VuZEtleUNvdW50KSB7XG4gICAgICAgICAgICB0dCA9IHRrW0tDIC0gMV07XG4gICAgICAgICAgICB0a1swXSBePSAoKFNbKHR0ID4+IDE2KSAmIDB4RkZdIDw8IDI0KSBeXG4gICAgICAgICAgICAgICAgICAgICAgKFNbKHR0ID4+ICA4KSAmIDB4RkZdIDw8IDE2KSBeXG4gICAgICAgICAgICAgICAgICAgICAgKFNbIHR0ICAgICAgICAmIDB4RkZdIDw8ICA4KSBeXG4gICAgICAgICAgICAgICAgICAgICAgIFNbKHR0ID4+IDI0KSAmIDB4RkZdICAgICAgICBeXG4gICAgICAgICAgICAgICAgICAgICAgKHJjb25bcmNvbnBvaW50ZXJdIDw8IDI0KSk7XG4gICAgICAgICAgICByY29ucG9pbnRlciArPSAxO1xuXG4gICAgICAgICAgICAvLyBrZXkgZXhwYW5zaW9uIChmb3Igbm9uLTI1NiBiaXQpXG4gICAgICAgICAgICBpZiAoS0MgIT0gOCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgS0M7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0a1tpXSBePSB0a1tpIC0gMV07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBrZXkgZXhwYW5zaW9uIGZvciAyNTYtYml0IGtleXMgaXMgXCJzbGlnaHRseSBkaWZmZXJlbnRcIiAoZmlwcy0xOTcpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgKEtDIC8gMik7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0a1tpXSBePSB0a1tpIC0gMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHR0ID0gdGtbKEtDIC8gMikgLSAxXTtcblxuICAgICAgICAgICAgICAgIHRrW0tDIC8gMl0gXj0gKFNbIHR0ICAgICAgICAmIDB4RkZdICAgICAgICBeXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoU1sodHQgPj4gIDgpICYgMHhGRl0gPDwgIDgpIF5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChTWyh0dCA+PiAxNikgJiAweEZGXSA8PCAxNikgXlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFNbKHR0ID4+IDI0KSAmIDB4RkZdIDw8IDI0KSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gKEtDIC8gMikgKyAxOyBpIDwgS0M7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB0a1tpXSBePSB0a1tpIC0gMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjb3B5IHZhbHVlcyBpbnRvIHJvdW5kIGtleSBhcnJheXNcbiAgICAgICAgICAgIHZhciBpID0gMCwgciwgYztcbiAgICAgICAgICAgIHdoaWxlIChpIDwgS0MgJiYgdCA8IHJvdW5kS2V5Q291bnQpIHtcbiAgICAgICAgICAgICAgICByID0gdCA+PiAyO1xuICAgICAgICAgICAgICAgIGMgPSB0ICUgNDtcbiAgICAgICAgICAgICAgICB0aGlzLl9LZVtyXVtjXSA9IHRrW2ldO1xuICAgICAgICAgICAgICAgIHRoaXMuX0tkW3JvdW5kcyAtIHJdW2NdID0gdGtbaSsrXTtcbiAgICAgICAgICAgICAgICB0Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpbnZlcnNlLWNpcGhlci1pZnkgdGhlIGRlY3J5cHRpb24gcm91bmQga2V5IChmaXBzLTE5NyBzZWN0aW9uIDUuMylcbiAgICAgICAgZm9yICh2YXIgciA9IDE7IHIgPCByb3VuZHM7IHIrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCA0OyBjKyspIHtcbiAgICAgICAgICAgICAgICB0dCA9IHRoaXMuX0tkW3JdW2NdO1xuICAgICAgICAgICAgICAgIHRoaXMuX0tkW3JdW2NdID0gKFUxWyh0dCA+PiAyNCkgJiAweEZGXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVTJbKHR0ID4+IDE2KSAmIDB4RkZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVM1sodHQgPj4gIDgpICYgMHhGRl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFU0WyB0dCAgICAgICAgJiAweEZGXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBBRVMucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbihwbGFpbnRleHQpIHtcbiAgICAgICAgaWYgKHBsYWludGV4dC5sZW5ndGggIT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwbGFpbnRleHQgc2l6ZSAobXVzdCBiZSAxNiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByb3VuZHMgPSB0aGlzLl9LZS5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgYSA9IFswLCAwLCAwLCAwXTtcblxuICAgICAgICAvLyBjb252ZXJ0IHBsYWludGV4dCB0byAoaW50cyBeIGtleSlcbiAgICAgICAgdmFyIHQgPSBjb252ZXJ0VG9JbnQzMihwbGFpbnRleHQpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgdFtpXSBePSB0aGlzLl9LZVswXVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFwcGx5IHJvdW5kIHRyYW5zZm9ybXNcbiAgICAgICAgZm9yICh2YXIgciA9IDE7IHIgPCByb3VuZHM7IHIrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gKFQxWyh0WyBpICAgICAgICAgXSA+PiAyNCkgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICBUMlsodFsoaSArIDEpICUgNF0gPj4gMTYpICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgVDNbKHRbKGkgKyAyKSAlIDRdID4+ICA4KSAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIFQ0WyB0WyhpICsgMykgJSA0XSAgICAgICAgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9LZVtyXVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ID0gYS5zbGljZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhlIGxhc3Qgcm91bmQgaXMgc3BlY2lhbFxuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQXJyYXkoMTYpLCB0dDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgIHR0ID0gdGhpcy5fS2Vbcm91bmRzXVtpXTtcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSAgICBdID0gKFNbKHRbIGkgICAgICAgICBdID4+IDI0KSAmIDB4ZmZdIF4gKHR0ID4+IDI0KSkgJiAweGZmO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgMV0gPSAoU1sodFsoaSArIDEpICUgNF0gPj4gMTYpICYgMHhmZl0gXiAodHQgPj4gMTYpKSAmIDB4ZmY7XG4gICAgICAgICAgICByZXN1bHRbNCAqIGkgKyAyXSA9IChTWyh0WyhpICsgMikgJSA0XSA+PiAgOCkgJiAweGZmXSBeICh0dCA+PiAgOCkpICYgMHhmZjtcbiAgICAgICAgICAgIHJlc3VsdFs0ICogaSArIDNdID0gKFNbIHRbKGkgKyAzKSAlIDRdICAgICAgICAmIDB4ZmZdIF4gIHR0ICAgICAgICkgJiAweGZmO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBBRVMucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbihjaXBoZXJ0ZXh0KSB7XG4gICAgICAgIGlmIChjaXBoZXJ0ZXh0Lmxlbmd0aCAhPSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSAxNiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByb3VuZHMgPSB0aGlzLl9LZC5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgYSA9IFswLCAwLCAwLCAwXTtcblxuICAgICAgICAvLyBjb252ZXJ0IHBsYWludGV4dCB0byAoaW50cyBeIGtleSlcbiAgICAgICAgdmFyIHQgPSBjb252ZXJ0VG9JbnQzMihjaXBoZXJ0ZXh0KTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgICAgICAgIHRbaV0gXj0gdGhpcy5fS2RbMF1baV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhcHBseSByb3VuZCB0cmFuc2Zvcm1zXG4gICAgICAgIGZvciAodmFyIHIgPSAxOyByIDwgcm91bmRzOyByKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYVtpXSA9IChUNVsodFsgaSAgICAgICAgICBdID4+IDI0KSAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIFQ2Wyh0WyhpICsgMykgJSA0XSA+PiAxNikgJiAweGZmXSBeXG4gICAgICAgICAgICAgICAgICAgICAgICBUN1sodFsoaSArIDIpICUgNF0gPj4gIDgpICYgMHhmZl0gXlxuICAgICAgICAgICAgICAgICAgICAgICAgVDhbIHRbKGkgKyAxKSAlIDRdICAgICAgICAmIDB4ZmZdIF5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX0tkW3JdW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHQgPSBhLnNsaWNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGUgbGFzdCByb3VuZCBpcyBzcGVjaWFsXG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVBcnJheSgxNiksIHR0O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xuICAgICAgICAgICAgdHQgPSB0aGlzLl9LZFtyb3VuZHNdW2ldO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICAgIF0gPSAoU2lbKHRbIGkgICAgICAgICBdID4+IDI0KSAmIDB4ZmZdIF4gKHR0ID4+IDI0KSkgJiAweGZmO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgMV0gPSAoU2lbKHRbKGkgKyAzKSAlIDRdID4+IDE2KSAmIDB4ZmZdIF4gKHR0ID4+IDE2KSkgJiAweGZmO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgMl0gPSAoU2lbKHRbKGkgKyAyKSAlIDRdID4+ICA4KSAmIDB4ZmZdIF4gKHR0ID4+ICA4KSkgJiAweGZmO1xuICAgICAgICAgICAgcmVzdWx0WzQgKiBpICsgM10gPSAoU2lbIHRbKGkgKyAxKSAlIDRdICAgICAgICAmIDB4ZmZdIF4gIHR0ICAgICAgICkgJiAweGZmO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqICBNb2RlIE9mIE9wZXJhdGlvbiAtIEVsZWN0b25pYyBDb2RlYm9vayAoRUNCKVxuICAgICAqL1xuICAgIHZhciBNb2RlT2ZPcGVyYXRpb25FQ0IgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1vZGVPZk9wZXJhdGlvbkVDQikpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiRWxlY3Ryb25pYyBDb2RlIEJsb2NrXCI7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiZWNiXCI7XG5cbiAgICAgICAgdGhpcy5fYWVzID0gbmV3IEFFUyhrZXkpO1xuICAgIH1cblxuICAgIE1vZGVPZk9wZXJhdGlvbkVDQi5wcm90b3R5cGUuZW5jcnlwdCA9IGZ1bmN0aW9uKHBsYWludGV4dCkge1xuICAgICAgICBwbGFpbnRleHQgPSBjb2VyY2VBcnJheShwbGFpbnRleHQpO1xuXG4gICAgICAgIGlmICgocGxhaW50ZXh0Lmxlbmd0aCAlIDE2KSAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHBsYWludGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBjcmVhdGVBcnJheShwbGFpbnRleHQubGVuZ3RoKTtcbiAgICAgICAgdmFyIGJsb2NrID0gY3JlYXRlQXJyYXkoMTYpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhaW50ZXh0Lmxlbmd0aDsgaSArPSAxNikge1xuICAgICAgICAgICAgY29weUFycmF5KHBsYWludGV4dCwgYmxvY2ssIDAsIGksIGkgKyAxNik7XG4gICAgICAgICAgICBibG9jayA9IHRoaXMuX2Flcy5lbmNyeXB0KGJsb2NrKTtcbiAgICAgICAgICAgIGNvcHlBcnJheShibG9jaywgY2lwaGVydGV4dCwgaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2lwaGVydGV4dDtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25FQ0IucHJvdG90eXBlLmRlY3J5cHQgPSBmdW5jdGlvbihjaXBoZXJ0ZXh0KSB7XG4gICAgICAgIGNpcGhlcnRleHQgPSBjb2VyY2VBcnJheShjaXBoZXJ0ZXh0KTtcblxuICAgICAgICBpZiAoKGNpcGhlcnRleHQubGVuZ3RoICUgMTYpICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY2lwaGVydGV4dCBzaXplIChtdXN0IGJlIG11bHRpcGxlIG9mIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBsYWludGV4dCA9IGNyZWF0ZUFycmF5KGNpcGhlcnRleHQubGVuZ3RoKTtcbiAgICAgICAgdmFyIGJsb2NrID0gY3JlYXRlQXJyYXkoMTYpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2lwaGVydGV4dC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICAgICAgICAgIGNvcHlBcnJheShjaXBoZXJ0ZXh0LCBibG9jaywgMCwgaSwgaSArIDE2KTtcbiAgICAgICAgICAgIGJsb2NrID0gdGhpcy5fYWVzLmRlY3J5cHQoYmxvY2spO1xuICAgICAgICAgICAgY29weUFycmF5KGJsb2NrLCBwbGFpbnRleHQsIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBsYWludGV4dDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqICBNb2RlIE9mIE9wZXJhdGlvbiAtIENpcGhlciBCbG9jayBDaGFpbmluZyAoQ0JDKVxuICAgICAqL1xuICAgIHZhciBNb2RlT2ZPcGVyYXRpb25DQkMgPSBmdW5jdGlvbihrZXksIGl2KSB7XG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBNb2RlT2ZPcGVyYXRpb25DQkMpKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcignQUVTIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBcIkNpcGhlciBCbG9jayBDaGFpbmluZ1wiO1xuICAgICAgICB0aGlzLm5hbWUgPSBcImNiY1wiO1xuXG4gICAgICAgIGlmICghaXYpIHtcbiAgICAgICAgICAgIGl2ID0gY3JlYXRlQXJyYXkoMTYpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoaXYubGVuZ3RoICE9IDE2KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaW5pdGlhbGF0aW9uIHZlY3RvciBzaXplIChtdXN0IGJlIDE2IGJ5dGVzKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdENpcGhlcmJsb2NrID0gY29lcmNlQXJyYXkoaXYsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuX2FlcyA9IG5ldyBBRVMoa2V5KTtcbiAgICB9XG5cbiAgICBNb2RlT2ZPcGVyYXRpb25DQkMucHJvdG90eXBlLmVuY3J5cHQgPSBmdW5jdGlvbihwbGFpbnRleHQpIHtcbiAgICAgICAgcGxhaW50ZXh0ID0gY29lcmNlQXJyYXkocGxhaW50ZXh0KTtcblxuICAgICAgICBpZiAoKHBsYWludGV4dC5sZW5ndGggJSAxNikgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwbGFpbnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gY3JlYXRlQXJyYXkocGxhaW50ZXh0Lmxlbmd0aCk7XG4gICAgICAgIHZhciBibG9jayA9IGNyZWF0ZUFycmF5KDE2KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsYWludGV4dC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICAgICAgICAgIGNvcHlBcnJheShwbGFpbnRleHQsIGJsb2NrLCAwLCBpLCBpICsgMTYpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyBqKyspIHtcbiAgICAgICAgICAgICAgICBibG9ja1tqXSBePSB0aGlzLl9sYXN0Q2lwaGVyYmxvY2tbal07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2xhc3RDaXBoZXJibG9jayA9IHRoaXMuX2Flcy5lbmNyeXB0KGJsb2NrKTtcbiAgICAgICAgICAgIGNvcHlBcnJheSh0aGlzLl9sYXN0Q2lwaGVyYmxvY2ssIGNpcGhlcnRleHQsIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNpcGhlcnRleHQ7XG4gICAgfVxuXG4gICAgTW9kZU9mT3BlcmF0aW9uQ0JDLnByb3RvdHlwZS5kZWNyeXB0ID0gZnVuY3Rpb24oY2lwaGVydGV4dCkge1xuICAgICAgICBjaXBoZXJ0ZXh0ID0gY29lcmNlQXJyYXkoY2lwaGVydGV4dCk7XG5cbiAgICAgICAgaWYgKChjaXBoZXJ0ZXh0Lmxlbmd0aCAlIDE2KSAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGNpcGhlcnRleHQgc2l6ZSAobXVzdCBiZSBtdWx0aXBsZSBvZiAxNiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwbGFpbnRleHQgPSBjcmVhdGVBcnJheShjaXBoZXJ0ZXh0Lmxlbmd0aCk7XG4gICAgICAgIHZhciBibG9jayA9IGNyZWF0ZUFycmF5KDE2KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNpcGhlcnRleHQubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgICAgICAgICBjb3B5QXJyYXkoY2lwaGVydGV4dCwgYmxvY2ssIDAsIGksIGkgKyAxNik7XG4gICAgICAgICAgICBibG9jayA9IHRoaXMuX2Flcy5kZWNyeXB0KGJsb2NrKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgaisrKSB7XG4gICAgICAgICAgICAgICAgcGxhaW50ZXh0W2kgKyBqXSA9IGJsb2NrW2pdIF4gdGhpcy5fbGFzdENpcGhlcmJsb2NrW2pdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb3B5QXJyYXkoY2lwaGVydGV4dCwgdGhpcy5fbGFzdENpcGhlcmJsb2NrLCAwLCBpLCBpICsgMTYpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBsYWludGV4dDtcbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqICBNb2RlIE9mIE9wZXJhdGlvbiAtIENpcGhlciBGZWVkYmFjayAoQ0ZCKVxuICAgICAqL1xuICAgIHZhciBNb2RlT2ZPcGVyYXRpb25DRkIgPSBmdW5jdGlvbihrZXksIGl2LCBzZWdtZW50U2l6ZSkge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTW9kZU9mT3BlcmF0aW9uQ0ZCKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0FFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJDaXBoZXIgRmVlZGJhY2tcIjtcbiAgICAgICAgdGhpcy5uYW1lID0gXCJjZmJcIjtcblxuICAgICAgICBpZiAoIWl2KSB7XG4gICAgICAgICAgICBpdiA9IGNyZWF0ZUFycmF5KDE2KTtcblxuICAgICAgICB9IGVsc2UgaWYgKGl2Lmxlbmd0aCAhPSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGluaXRpYWxhdGlvbiB2ZWN0b3Igc2l6ZSAobXVzdCBiZSAxNiBzaXplKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzZWdtZW50U2l6ZSkgeyBzZWdtZW50U2l6ZSA9IDE7IH1cblxuICAgICAgICB0aGlzLnNlZ21lbnRTaXplID0gc2VnbWVudFNpemU7XG5cbiAgICAgICAgdGhpcy5fc2hpZnRSZWdpc3RlciA9IGNvZXJjZUFycmF5KGl2LCB0cnVlKTtcblxuICAgICAgICB0aGlzLl9hZXMgPSBuZXcgQUVTKGtleSk7XG4gICAgfVxuXG4gICAgTW9kZU9mT3BlcmF0aW9uQ0ZCLnByb3RvdHlwZS5lbmNyeXB0ID0gZnVuY3Rpb24ocGxhaW50ZXh0KSB7XG4gICAgICAgIGlmICgocGxhaW50ZXh0Lmxlbmd0aCAlIHRoaXMuc2VnbWVudFNpemUpICE9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBwbGFpbnRleHQgc2l6ZSAobXVzdCBiZSBzZWdtZW50U2l6ZSBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbmNyeXB0ZWQgPSBjb2VyY2VBcnJheShwbGFpbnRleHQsIHRydWUpO1xuXG4gICAgICAgIHZhciB4b3JTZWdtZW50O1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY3J5cHRlZC5sZW5ndGg7IGkgKz0gdGhpcy5zZWdtZW50U2l6ZSkge1xuICAgICAgICAgICAgeG9yU2VnbWVudCA9IHRoaXMuX2Flcy5lbmNyeXB0KHRoaXMuX3NoaWZ0UmVnaXN0ZXIpO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLnNlZ21lbnRTaXplOyBqKyspIHtcbiAgICAgICAgICAgICAgICBlbmNyeXB0ZWRbaSArIGpdIF49IHhvclNlZ21lbnRbal07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNoaWZ0IHRoZSByZWdpc3RlclxuICAgICAgICAgICAgY29weUFycmF5KHRoaXMuX3NoaWZ0UmVnaXN0ZXIsIHRoaXMuX3NoaWZ0UmVnaXN0ZXIsIDAsIHRoaXMuc2VnbWVudFNpemUpO1xuICAgICAgICAgICAgY29weUFycmF5KGVuY3J5cHRlZCwgdGhpcy5fc2hpZnRSZWdpc3RlciwgMTYgLSB0aGlzLnNlZ21lbnRTaXplLCBpLCBpICsgdGhpcy5zZWdtZW50U2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW5jcnlwdGVkO1xuICAgIH1cblxuICAgIE1vZGVPZk9wZXJhdGlvbkNGQi5wcm90b3R5cGUuZGVjcnlwdCA9IGZ1bmN0aW9uKGNpcGhlcnRleHQpIHtcbiAgICAgICAgaWYgKChjaXBoZXJ0ZXh0Lmxlbmd0aCAlIHRoaXMuc2VnbWVudFNpemUpICE9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBjaXBoZXJ0ZXh0IHNpemUgKG11c3QgYmUgc2VnbWVudFNpemUgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGxhaW50ZXh0ID0gY29lcmNlQXJyYXkoY2lwaGVydGV4dCwgdHJ1ZSk7XG5cbiAgICAgICAgdmFyIHhvclNlZ21lbnQ7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhaW50ZXh0Lmxlbmd0aDsgaSArPSB0aGlzLnNlZ21lbnRTaXplKSB7XG4gICAgICAgICAgICB4b3JTZWdtZW50ID0gdGhpcy5fYWVzLmVuY3J5cHQodGhpcy5fc2hpZnRSZWdpc3Rlcik7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5zZWdtZW50U2l6ZTsgaisrKSB7XG4gICAgICAgICAgICAgICAgcGxhaW50ZXh0W2kgKyBqXSBePSB4b3JTZWdtZW50W2pdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTaGlmdCB0aGUgcmVnaXN0ZXJcbiAgICAgICAgICAgIGNvcHlBcnJheSh0aGlzLl9zaGlmdFJlZ2lzdGVyLCB0aGlzLl9zaGlmdFJlZ2lzdGVyLCAwLCB0aGlzLnNlZ21lbnRTaXplKTtcbiAgICAgICAgICAgIGNvcHlBcnJheShjaXBoZXJ0ZXh0LCB0aGlzLl9zaGlmdFJlZ2lzdGVyLCAxNiAtIHRoaXMuc2VnbWVudFNpemUsIGksIGkgKyB0aGlzLnNlZ21lbnRTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwbGFpbnRleHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIE1vZGUgT2YgT3BlcmF0aW9uIC0gT3V0cHV0IEZlZWRiYWNrIChPRkIpXG4gICAgICovXG4gICAgdmFyIE1vZGVPZk9wZXJhdGlvbk9GQiA9IGZ1bmN0aW9uKGtleSwgaXYpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE1vZGVPZk9wZXJhdGlvbk9GQikpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdBRVMgbXVzdCBiZSBpbnN0YW5pdGF0ZWQgd2l0aCBgbmV3YCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IFwiT3V0cHV0IEZlZWRiYWNrXCI7XG4gICAgICAgIHRoaXMubmFtZSA9IFwib2ZiXCI7XG5cbiAgICAgICAgaWYgKCFpdikge1xuICAgICAgICAgICAgaXYgPSBjcmVhdGVBcnJheSgxNik7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpdi5sZW5ndGggIT0gMTYpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbml0aWFsYXRpb24gdmVjdG9yIHNpemUgKG11c3QgYmUgMTYgYnl0ZXMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sYXN0UHJlY2lwaGVyID0gY29lcmNlQXJyYXkoaXYsIHRydWUpO1xuICAgICAgICB0aGlzLl9sYXN0UHJlY2lwaGVySW5kZXggPSAxNjtcblxuICAgICAgICB0aGlzLl9hZXMgPSBuZXcgQUVTKGtleSk7XG4gICAgfVxuXG4gICAgTW9kZU9mT3BlcmF0aW9uT0ZCLnByb3RvdHlwZS5lbmNyeXB0ID0gZnVuY3Rpb24ocGxhaW50ZXh0KSB7XG4gICAgICAgIHZhciBlbmNyeXB0ZWQgPSBjb2VyY2VBcnJheShwbGFpbnRleHQsIHRydWUpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jcnlwdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fbGFzdFByZWNpcGhlckluZGV4ID09PSAxNikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RQcmVjaXBoZXIgPSB0aGlzLl9hZXMuZW5jcnlwdCh0aGlzLl9sYXN0UHJlY2lwaGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0UHJlY2lwaGVySW5kZXggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW5jcnlwdGVkW2ldIF49IHRoaXMuX2xhc3RQcmVjaXBoZXJbdGhpcy5fbGFzdFByZWNpcGhlckluZGV4KytdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVuY3J5cHRlZDtcbiAgICB9XG5cbiAgICAvLyBEZWNyeXB0aW9uIGlzIHN5bWV0cmljXG4gICAgTW9kZU9mT3BlcmF0aW9uT0ZCLnByb3RvdHlwZS5kZWNyeXB0ID0gTW9kZU9mT3BlcmF0aW9uT0ZCLnByb3RvdHlwZS5lbmNyeXB0O1xuXG5cbiAgICAvKipcbiAgICAgKiAgQ291bnRlciBvYmplY3QgZm9yIENUUiBjb21tb24gbW9kZSBvZiBvcGVyYXRpb25cbiAgICAgKi9cbiAgICB2YXIgQ291bnRlciA9IGZ1bmN0aW9uKGluaXRpYWxWYWx1ZSkge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQ291bnRlcikpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdDb3VudGVyIG11c3QgYmUgaW5zdGFuaXRhdGVkIHdpdGggYG5ld2AnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIGFsbG93IDAsIGJ1dCBhbnl0aGluZyBmYWxzZS1pc2ggdXNlcyB0aGUgZGVmYXVsdCAxXG4gICAgICAgIGlmIChpbml0aWFsVmFsdWUgIT09IDAgJiYgIWluaXRpYWxWYWx1ZSkgeyBpbml0aWFsVmFsdWUgPSAxOyB9XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbml0aWFsVmFsdWUpID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdGhpcy5fY291bnRlciA9IGNyZWF0ZUFycmF5KDE2KTtcbiAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUoaW5pdGlhbFZhbHVlKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRCeXRlcyhpbml0aWFsVmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgQ291bnRlci5wcm90b3R5cGUuc2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mKHZhbHVlKSAhPT0gJ251bWJlcicgfHwgcGFyc2VJbnQodmFsdWUpICE9IHZhbHVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgY291bnRlciB2YWx1ZSAobXVzdCBiZSBhbiBpbnRlZ2VyKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gV2UgY2Fubm90IHNhZmVseSBoYW5kbGUgbnVtYmVycyBiZXlvbmQgdGhlIHNhZmUgcmFuZ2UgZm9yIGludGVnZXJzXG4gICAgICAgIGlmICh2YWx1ZSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludGVnZXIgdmFsdWUgb3V0IG9mIHNhZmUgcmFuZ2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMTU7IGluZGV4ID49IDA7IC0taW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvdW50ZXJbaW5kZXhdID0gdmFsdWUgJSAyNTY7XG4gICAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KHZhbHVlIC8gMjU2KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIENvdW50ZXIucHJvdG90eXBlLnNldEJ5dGVzID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgICAgICAgYnl0ZXMgPSBjb2VyY2VBcnJheShieXRlcywgdHJ1ZSk7XG5cbiAgICAgICAgaWYgKGJ5dGVzLmxlbmd0aCAhPSAxNikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGNvdW50ZXIgYnl0ZXMgc2l6ZSAobXVzdCBiZSAxNiBieXRlcyknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSBieXRlcztcbiAgICB9O1xuXG4gICAgQ291bnRlci5wcm90b3R5cGUuaW5jcmVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxNTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb3VudGVyW2ldID09PSAyNTUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb3VudGVyW2ldID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY291bnRlcltpXSsrO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiAgTW9kZSBPZiBPcGVyYXRpb24gLSBDb3VudGVyIChDVFIpXG4gICAgICovXG4gICAgdmFyIE1vZGVPZk9wZXJhdGlvbkNUUiA9IGZ1bmN0aW9uKGtleSwgY291bnRlcikge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTW9kZU9mT3BlcmF0aW9uQ1RSKSkge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ0FFUyBtdXN0IGJlIGluc3Rhbml0YXRlZCB3aXRoIGBuZXdgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gXCJDb3VudGVyXCI7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiY3RyXCI7XG5cbiAgICAgICAgaWYgKCEoY291bnRlciBpbnN0YW5jZW9mIENvdW50ZXIpKSB7XG4gICAgICAgICAgICBjb3VudGVyID0gbmV3IENvdW50ZXIoY291bnRlcilcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NvdW50ZXIgPSBjb3VudGVyO1xuXG4gICAgICAgIHRoaXMuX3JlbWFpbmluZ0NvdW50ZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9yZW1haW5pbmdDb3VudGVySW5kZXggPSAxNjtcblxuICAgICAgICB0aGlzLl9hZXMgPSBuZXcgQUVTKGtleSk7XG4gICAgfVxuXG4gICAgTW9kZU9mT3BlcmF0aW9uQ1RSLnByb3RvdHlwZS5lbmNyeXB0ID0gZnVuY3Rpb24ocGxhaW50ZXh0KSB7XG4gICAgICAgIHZhciBlbmNyeXB0ZWQgPSBjb2VyY2VBcnJheShwbGFpbnRleHQsIHRydWUpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW5jcnlwdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVtYWluaW5nQ291bnRlckluZGV4ID09PSAxNikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbWFpbmluZ0NvdW50ZXIgPSB0aGlzLl9hZXMuZW5jcnlwdCh0aGlzLl9jb3VudGVyLl9jb3VudGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1haW5pbmdDb3VudGVySW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvdW50ZXIuaW5jcmVtZW50KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbmNyeXB0ZWRbaV0gXj0gdGhpcy5fcmVtYWluaW5nQ291bnRlclt0aGlzLl9yZW1haW5pbmdDb3VudGVySW5kZXgrK107XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZW5jcnlwdGVkO1xuICAgIH1cblxuICAgIC8vIERlY3J5cHRpb24gaXMgc3ltZXRyaWNcbiAgICBNb2RlT2ZPcGVyYXRpb25DVFIucHJvdG90eXBlLmRlY3J5cHQgPSBNb2RlT2ZPcGVyYXRpb25DVFIucHJvdG90eXBlLmVuY3J5cHQ7XG5cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gUGFkZGluZ1xuXG4gICAgLy8gU2VlOmh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMyMzE1XG4gICAgZnVuY3Rpb24gcGtjczdwYWQoZGF0YSkge1xuICAgICAgICBkYXRhID0gY29lcmNlQXJyYXkoZGF0YSwgdHJ1ZSk7XG4gICAgICAgIHZhciBwYWRkZXIgPSAxNiAtIChkYXRhLmxlbmd0aCAlIDE2KTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUFycmF5KGRhdGEubGVuZ3RoICsgcGFkZGVyKTtcbiAgICAgICAgY29weUFycmF5KGRhdGEsIHJlc3VsdCk7XG4gICAgICAgIGZvciAodmFyIGkgPSBkYXRhLmxlbmd0aDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0W2ldID0gcGFkZGVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGtjczdzdHJpcChkYXRhKSB7XG4gICAgICAgIGRhdGEgPSBjb2VyY2VBcnJheShkYXRhLCB0cnVlKTtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgMTYpIHsgdGhyb3cgbmV3IEVycm9yKCdQS0NTIzcgaW52YWxpZCBsZW5ndGgnKTsgfVxuXG4gICAgICAgIHZhciBwYWRkZXIgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChwYWRkZXIgPiAxNikgeyB0aHJvdyBuZXcgRXJyb3IoJ1BLQ1MjNyBwYWRkaW5nIGJ5dGUgb3V0IG9mIHJhbmdlJyk7IH1cblxuICAgICAgICB2YXIgbGVuZ3RoID0gZGF0YS5sZW5ndGggLSBwYWRkZXI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFkZGVyOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChkYXRhW2xlbmd0aCArIGldICE9PSBwYWRkZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BLQ1MjNyBpbnZhbGlkIHBhZGRpbmcgYnl0ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUFycmF5KGxlbmd0aCk7XG4gICAgICAgIGNvcHlBcnJheShkYXRhLCByZXN1bHQsIDAsIDAsIGxlbmd0aCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBFeHBvcnRpbmdcblxuXG4gICAgLy8gVGhlIGJsb2NrIGNpcGhlclxuICAgIHZhciBhZXNqcyA9IHtcbiAgICAgICAgQUVTOiBBRVMsXG4gICAgICAgIENvdW50ZXI6IENvdW50ZXIsXG5cbiAgICAgICAgTW9kZU9mT3BlcmF0aW9uOiB7XG4gICAgICAgICAgICBlY2I6IE1vZGVPZk9wZXJhdGlvbkVDQixcbiAgICAgICAgICAgIGNiYzogTW9kZU9mT3BlcmF0aW9uQ0JDLFxuICAgICAgICAgICAgY2ZiOiBNb2RlT2ZPcGVyYXRpb25DRkIsXG4gICAgICAgICAgICBvZmI6IE1vZGVPZk9wZXJhdGlvbk9GQixcbiAgICAgICAgICAgIGN0cjogTW9kZU9mT3BlcmF0aW9uQ1RSXG4gICAgICAgIH0sXG5cbiAgICAgICAgdXRpbHM6IHtcbiAgICAgICAgICAgIGhleDogY29udmVydEhleCxcbiAgICAgICAgICAgIHV0Zjg6IGNvbnZlcnRVdGY4XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgICAgcGtjczc6IHtcbiAgICAgICAgICAgICAgICBwYWQ6IHBrY3M3cGFkLFxuICAgICAgICAgICAgICAgIHN0cmlwOiBwa2NzN3N0cmlwXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2FycmF5VGVzdDoge1xuICAgICAgICAgICAgY29lcmNlQXJyYXk6IGNvZXJjZUFycmF5LFxuICAgICAgICAgICAgY3JlYXRlQXJyYXk6IGNyZWF0ZUFycmF5LFxuICAgICAgICAgICAgY29weUFycmF5OiBjb3B5QXJyYXksXG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICAvLyBub2RlLmpzXG4gICAgaWYgKHRydWUpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBhZXNqc1xuXG4gICAgLy8gUmVxdWlyZUpTL0FNRFxuICAgIC8vIGh0dHA6Ly93d3cucmVxdWlyZWpzLm9yZy9kb2NzL2FwaS5odG1sXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FtZGpzL2FtZGpzLWFwaS93aWtpL0FNRFxuICAgIH0gZWxzZSB7fVxuXG5cbn0pKHRoaXMpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL2JuLmpzL2xpYi9ibi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvYm4uanMvbGliL2JuLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24obW9kdWxlKSB7KGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFV0aWxzXG4gIGZ1bmN0aW9uIGFzc2VydCAodmFsLCBtc2cpIHtcbiAgICBpZiAoIXZhbCkgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCAnQXNzZXJ0aW9uIGZhaWxlZCcpO1xuICB9XG5cbiAgLy8gQ291bGQgdXNlIGBpbmhlcml0c2AgbW9kdWxlLCBidXQgZG9uJ3Qgd2FudCB0byBtb3ZlIGZyb20gc2luZ2xlIGZpbGVcbiAgLy8gYXJjaGl0ZWN0dXJlIHlldC5cbiAgZnVuY3Rpb24gaW5oZXJpdHMgKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yO1xuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9O1xuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGU7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKTtcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3I7XG4gIH1cblxuICAvLyBCTlxuXG4gIGZ1bmN0aW9uIEJOIChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmIChCTi5pc0JOKG51bWJlcikpIHtcbiAgICAgIHJldHVybiBudW1iZXI7XG4gICAgfVxuXG4gICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgdGhpcy53b3JkcyA9IG51bGw7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuXG4gICAgLy8gUmVkdWN0aW9uIGNvbnRleHRcbiAgICB0aGlzLnJlZCA9IG51bGw7XG5cbiAgICBpZiAobnVtYmVyICE9PSBudWxsKSB7XG4gICAgICBpZiAoYmFzZSA9PT0gJ2xlJyB8fCBiYXNlID09PSAnYmUnKSB7XG4gICAgICAgIGVuZGlhbiA9IGJhc2U7XG4gICAgICAgIGJhc2UgPSAxMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faW5pdChudW1iZXIgfHwgMCwgYmFzZSB8fCAxMCwgZW5kaWFuIHx8ICdiZScpO1xuICAgIH1cbiAgfVxuICBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEJOO1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydHMuQk4gPSBCTjtcbiAgfVxuXG4gIEJOLkJOID0gQk47XG4gIEJOLndvcmRTaXplID0gMjY7XG5cbiAgdmFyIEJ1ZmZlcjtcbiAgdHJ5IHtcbiAgICBCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBidWZmZXIgKi8gMCkuQnVmZmVyO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cblxuICBCTi5pc0JOID0gZnVuY3Rpb24gaXNCTiAobnVtKSB7XG4gICAgaWYgKG51bSBpbnN0YW5jZW9mIEJOKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVtICE9PSBudWxsICYmIHR5cGVvZiBudW0gPT09ICdvYmplY3QnICYmXG4gICAgICBudW0uY29uc3RydWN0b3Iud29yZFNpemUgPT09IEJOLndvcmRTaXplICYmIEFycmF5LmlzQXJyYXkobnVtLndvcmRzKTtcbiAgfTtcblxuICBCTi5tYXggPSBmdW5jdGlvbiBtYXggKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA+IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5taW4gPSBmdW5jdGlvbiBtaW4gKGxlZnQsIHJpZ2h0KSB7XG4gICAgaWYgKGxlZnQuY21wKHJpZ2h0KSA8IDApIHJldHVybiBsZWZ0O1xuICAgIHJldHVybiByaWdodDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0IChudW1iZXIsIGJhc2UsIGVuZGlhbikge1xuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXROdW1iZXIobnVtYmVyLCBiYXNlLCBlbmRpYW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbnVtYmVyID09PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRBcnJheShudW1iZXIsIGJhc2UsIGVuZGlhbik7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBiYXNlID0gMTY7XG4gICAgfVxuICAgIGFzc2VydChiYXNlID09PSAoYmFzZSB8IDApICYmIGJhc2UgPj0gMiAmJiBiYXNlIDw9IDM2KTtcblxuICAgIG51bWJlciA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJycpO1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgaWYgKG51bWJlclswXSA9PT0gJy0nKSB7XG4gICAgICBzdGFydCsrO1xuICAgIH1cblxuICAgIGlmIChiYXNlID09PSAxNikge1xuICAgICAgdGhpcy5fcGFyc2VIZXgobnVtYmVyLCBzdGFydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BhcnNlQmFzZShudW1iZXIsIGJhc2UsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBpZiAobnVtYmVyWzBdID09PSAnLScpIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuICAgIH1cblxuICAgIHRoaXMuc3RyaXAoKTtcblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIHRoaXMuX2luaXRBcnJheSh0aGlzLnRvQXJyYXkoKSwgYmFzZSwgZW5kaWFuKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2luaXROdW1iZXIgPSBmdW5jdGlvbiBfaW5pdE51bWJlciAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICBudW1iZXIgPSAtbnVtYmVyO1xuICAgIH1cbiAgICBpZiAobnVtYmVyIDwgMHg0MDAwMDAwKSB7XG4gICAgICB0aGlzLndvcmRzID0gWyBudW1iZXIgJiAweDNmZmZmZmYgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKG51bWJlciA8IDB4MTAwMDAwMDAwMDAwMDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbXG4gICAgICAgIG51bWJlciAmIDB4M2ZmZmZmZixcbiAgICAgICAgKG51bWJlciAvIDB4NDAwMDAwMCkgJiAweDNmZmZmZmZcbiAgICAgIF07XG4gICAgICB0aGlzLmxlbmd0aCA9IDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChudW1iZXIgPCAweDIwMDAwMDAwMDAwMDAwKTsgLy8gMiBeIDUzICh1bnNhZmUpXG4gICAgICB0aGlzLndvcmRzID0gW1xuICAgICAgICBudW1iZXIgJiAweDNmZmZmZmYsXG4gICAgICAgIChudW1iZXIgLyAweDQwMDAwMDApICYgMHgzZmZmZmZmLFxuICAgICAgICAxXG4gICAgICBdO1xuICAgICAgdGhpcy5sZW5ndGggPSAzO1xuICAgIH1cblxuICAgIGlmIChlbmRpYW4gIT09ICdsZScpIHJldHVybjtcblxuICAgIC8vIFJldmVyc2UgdGhlIGJ5dGVzXG4gICAgdGhpcy5faW5pdEFycmF5KHRoaXMudG9BcnJheSgpLCBiYXNlLCBlbmRpYW4pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faW5pdEFycmF5ID0gZnVuY3Rpb24gX2luaXRBcnJheSAobnVtYmVyLCBiYXNlLCBlbmRpYW4pIHtcbiAgICAvLyBQZXJoYXBzIGEgVWludDhBcnJheVxuICAgIGFzc2VydCh0eXBlb2YgbnVtYmVyLmxlbmd0aCA9PT0gJ251bWJlcicpO1xuICAgIGlmIChudW1iZXIubGVuZ3RoIDw9IDApIHtcbiAgICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gTWF0aC5jZWlsKG51bWJlci5sZW5ndGggLyAzKTtcbiAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgIH1cblxuICAgIHZhciBqLCB3O1xuICAgIHZhciBvZmYgPSAwO1xuICAgIGlmIChlbmRpYW4gPT09ICdiZScpIHtcbiAgICAgIGZvciAoaSA9IG51bWJlci5sZW5ndGggLSAxLCBqID0gMDsgaSA+PSAwOyBpIC09IDMpIHtcbiAgICAgICAgdyA9IG51bWJlcltpXSB8IChudW1iZXJbaSAtIDFdIDw8IDgpIHwgKG51bWJlcltpIC0gMl0gPDwgMTYpO1xuICAgICAgICB0aGlzLndvcmRzW2pdIHw9ICh3IDw8IG9mZikgJiAweDNmZmZmZmY7XG4gICAgICAgIHRoaXMud29yZHNbaiArIDFdID0gKHcgPj4+ICgyNiAtIG9mZikpICYgMHgzZmZmZmZmO1xuICAgICAgICBvZmYgKz0gMjQ7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbmRpYW4gPT09ICdsZScpIHtcbiAgICAgIGZvciAoaSA9IDAsIGogPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHcgPSBudW1iZXJbaV0gfCAobnVtYmVyW2kgKyAxXSA8PCA4KSB8IChudW1iZXJbaSArIDJdIDw8IDE2KTtcbiAgICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgICB0aGlzLndvcmRzW2ogKyAxXSA9ICh3ID4+PiAoMjYgLSBvZmYpKSAmIDB4M2ZmZmZmZjtcbiAgICAgICAgb2ZmICs9IDI0O1xuICAgICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgICAgb2ZmIC09IDI2O1xuICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBhcnNlSGV4IChzdHIsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IDA7XG4gICAgdmFyIGxlbiA9IE1hdGgubWluKHN0ci5sZW5ndGgsIGVuZCk7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSkgLSA0ODtcblxuICAgICAgciA8PD0gNDtcblxuICAgICAgLy8gJ2EnIC0gJ2YnXG4gICAgICBpZiAoYyA+PSA0OSAmJiBjIDw9IDU0KSB7XG4gICAgICAgIHIgfD0gYyAtIDQ5ICsgMHhhO1xuXG4gICAgICAvLyAnQScgLSAnRidcbiAgICAgIH0gZWxzZSBpZiAoYyA+PSAxNyAmJiBjIDw9IDIyKSB7XG4gICAgICAgIHIgfD0gYyAtIDE3ICsgMHhhO1xuXG4gICAgICAvLyAnMCcgLSAnOSdcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIgfD0gYyAmIDB4ZjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3BhcnNlSGV4ID0gZnVuY3Rpb24gX3BhcnNlSGV4IChudW1iZXIsIHN0YXJ0KSB7XG4gICAgLy8gQ3JlYXRlIHBvc3NpYmx5IGJpZ2dlciBhcnJheSB0byBlbnN1cmUgdGhhdCBpdCBmaXRzIHRoZSBudW1iZXJcbiAgICB0aGlzLmxlbmd0aCA9IE1hdGguY2VpbCgobnVtYmVyLmxlbmd0aCAtIHN0YXJ0KSAvIDYpO1xuICAgIHRoaXMud29yZHMgPSBuZXcgQXJyYXkodGhpcy5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGosIHc7XG4gICAgLy8gU2NhbiAyNC1iaXQgY2h1bmtzIGFuZCBhZGQgdGhlbSB0byB0aGUgbnVtYmVyXG4gICAgdmFyIG9mZiA9IDA7XG4gICAgZm9yIChpID0gbnVtYmVyLmxlbmd0aCAtIDYsIGogPSAwOyBpID49IHN0YXJ0OyBpIC09IDYpIHtcbiAgICAgIHcgPSBwYXJzZUhleChudW1iZXIsIGksIGkgKyA2KTtcbiAgICAgIHRoaXMud29yZHNbal0gfD0gKHcgPDwgb2ZmKSAmIDB4M2ZmZmZmZjtcbiAgICAgIC8vIE5PVEU6IGAweDNmZmZmZmAgaXMgaW50ZW50aW9uYWwgaGVyZSwgMjZiaXRzIG1heCBzaGlmdCArIDI0Yml0IGhleCBsaW1iXG4gICAgICB0aGlzLndvcmRzW2ogKyAxXSB8PSB3ID4+PiAoMjYgLSBvZmYpICYgMHgzZmZmZmY7XG4gICAgICBvZmYgKz0gMjQ7XG4gICAgICBpZiAob2ZmID49IDI2KSB7XG4gICAgICAgIG9mZiAtPSAyNjtcbiAgICAgICAgaisrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSArIDYgIT09IHN0YXJ0KSB7XG4gICAgICB3ID0gcGFyc2VIZXgobnVtYmVyLCBzdGFydCwgaSArIDYpO1xuICAgICAgdGhpcy53b3Jkc1tqXSB8PSAodyA8PCBvZmYpICYgMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tqICsgMV0gfD0gdyA+Pj4gKDI2IC0gb2ZmKSAmIDB4M2ZmZmZmO1xuICAgIH1cbiAgICB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gcGFyc2VCYXNlIChzdHIsIHN0YXJ0LCBlbmQsIG11bCkge1xuICAgIHZhciByID0gMDtcbiAgICB2YXIgbGVuID0gTWF0aC5taW4oc3RyLmxlbmd0aCwgZW5kKTtcbiAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKSAtIDQ4O1xuXG4gICAgICByICo9IG11bDtcblxuICAgICAgLy8gJ2EnXG4gICAgICBpZiAoYyA+PSA0OSkge1xuICAgICAgICByICs9IGMgLSA0OSArIDB4YTtcblxuICAgICAgLy8gJ0EnXG4gICAgICB9IGVsc2UgaWYgKGMgPj0gMTcpIHtcbiAgICAgICAgciArPSBjIC0gMTcgKyAweGE7XG5cbiAgICAgIC8vICcwJyAtICc5J1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgciArPSBjO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5fcGFyc2VCYXNlID0gZnVuY3Rpb24gX3BhcnNlQmFzZSAobnVtYmVyLCBiYXNlLCBzdGFydCkge1xuICAgIC8vIEluaXRpYWxpemUgYXMgemVyb1xuICAgIHRoaXMud29yZHMgPSBbIDAgXTtcbiAgICB0aGlzLmxlbmd0aCA9IDE7XG5cbiAgICAvLyBGaW5kIGxlbmd0aCBvZiBsaW1iIGluIGJhc2VcbiAgICBmb3IgKHZhciBsaW1iTGVuID0gMCwgbGltYlBvdyA9IDE7IGxpbWJQb3cgPD0gMHgzZmZmZmZmOyBsaW1iUG93ICo9IGJhc2UpIHtcbiAgICAgIGxpbWJMZW4rKztcbiAgICB9XG4gICAgbGltYkxlbi0tO1xuICAgIGxpbWJQb3cgPSAobGltYlBvdyAvIGJhc2UpIHwgMDtcblxuICAgIHZhciB0b3RhbCA9IG51bWJlci5sZW5ndGggLSBzdGFydDtcbiAgICB2YXIgbW9kID0gdG90YWwgJSBsaW1iTGVuO1xuICAgIHZhciBlbmQgPSBNYXRoLm1pbih0b3RhbCwgdG90YWwgLSBtb2QpICsgc3RhcnQ7XG5cbiAgICB2YXIgd29yZCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IGxpbWJMZW4pIHtcbiAgICAgIHdvcmQgPSBwYXJzZUJhc2UobnVtYmVyLCBpLCBpICsgbGltYkxlbiwgYmFzZSk7XG5cbiAgICAgIHRoaXMuaW11bG4obGltYlBvdyk7XG4gICAgICBpZiAodGhpcy53b3Jkc1swXSArIHdvcmQgPCAweDQwMDAwMDApIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSArPSB3b3JkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faWFkZG4od29yZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1vZCAhPT0gMCkge1xuICAgICAgdmFyIHBvdyA9IDE7XG4gICAgICB3b3JkID0gcGFyc2VCYXNlKG51bWJlciwgaSwgbnVtYmVyLmxlbmd0aCwgYmFzZSk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBtb2Q7IGkrKykge1xuICAgICAgICBwb3cgKj0gYmFzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pbXVsbihwb3cpO1xuICAgICAgaWYgKHRoaXMud29yZHNbMF0gKyB3b3JkIDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIHRoaXMud29yZHNbMF0gKz0gd29yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2lhZGRuKHdvcmQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCTi5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKGRlc3QpIHtcbiAgICBkZXN0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlc3Qud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldO1xuICAgIH1cbiAgICBkZXN0Lmxlbmd0aCA9IHRoaXMubGVuZ3RoO1xuICAgIGRlc3QubmVnYXRpdmUgPSB0aGlzLm5lZ2F0aXZlO1xuICAgIGRlc3QucmVkID0gdGhpcy5yZWQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24gY2xvbmUgKCkge1xuICAgIHZhciByID0gbmV3IEJOKG51bGwpO1xuICAgIHRoaXMuY29weShyKTtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX2V4cGFuZCA9IGZ1bmN0aW9uIF9leHBhbmQgKHNpemUpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBzaXplKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gUmVtb3ZlIGxlYWRpbmcgYDBgIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdHJpcCA9IGZ1bmN0aW9uIHN0cmlwICgpIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPiAxICYmIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgdGhpcy5sZW5ndGgtLTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9ub3JtU2lnbiA9IGZ1bmN0aW9uIF9ub3JtU2lnbiAoKSB7XG4gICAgLy8gLTAgPSAwXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICAgIHJldHVybiAodGhpcy5yZWQgPyAnPEJOLVI6ICcgOiAnPEJOOiAnKSArIHRoaXMudG9TdHJpbmcoMTYpICsgJz4nO1xuICB9O1xuXG4gIC8qXG5cbiAgdmFyIHplcm9zID0gW107XG4gIHZhciBncm91cFNpemVzID0gW107XG4gIHZhciBncm91cEJhc2VzID0gW107XG5cbiAgdmFyIHMgPSAnJztcbiAgdmFyIGkgPSAtMTtcbiAgd2hpbGUgKCsraSA8IEJOLndvcmRTaXplKSB7XG4gICAgemVyb3NbaV0gPSBzO1xuICAgIHMgKz0gJzAnO1xuICB9XG4gIGdyb3VwU2l6ZXNbMF0gPSAwO1xuICBncm91cFNpemVzWzFdID0gMDtcbiAgZ3JvdXBCYXNlc1swXSA9IDA7XG4gIGdyb3VwQmFzZXNbMV0gPSAwO1xuICB2YXIgYmFzZSA9IDIgLSAxO1xuICB3aGlsZSAoKytiYXNlIDwgMzYgKyAxKSB7XG4gICAgdmFyIGdyb3VwU2l6ZSA9IDA7XG4gICAgdmFyIGdyb3VwQmFzZSA9IDE7XG4gICAgd2hpbGUgKGdyb3VwQmFzZSA8ICgxIDw8IEJOLndvcmRTaXplKSAvIGJhc2UpIHtcbiAgICAgIGdyb3VwQmFzZSAqPSBiYXNlO1xuICAgICAgZ3JvdXBTaXplICs9IDE7XG4gICAgfVxuICAgIGdyb3VwU2l6ZXNbYmFzZV0gPSBncm91cFNpemU7XG4gICAgZ3JvdXBCYXNlc1tiYXNlXSA9IGdyb3VwQmFzZTtcbiAgfVxuXG4gICovXG5cbiAgdmFyIHplcm9zID0gW1xuICAgICcnLFxuICAgICcwJyxcbiAgICAnMDAnLFxuICAgICcwMDAnLFxuICAgICcwMDAwJyxcbiAgICAnMDAwMDAnLFxuICAgICcwMDAwMDAnLFxuICAgICcwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJyxcbiAgICAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnLFxuICAgICcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJ1xuICBdO1xuXG4gIHZhciBncm91cFNpemVzID0gW1xuICAgIDAsIDAsXG4gICAgMjUsIDE2LCAxMiwgMTEsIDEwLCA5LCA4LFxuICAgIDgsIDcsIDcsIDcsIDcsIDYsIDYsXG4gICAgNiwgNiwgNiwgNiwgNiwgNSwgNSxcbiAgICA1LCA1LCA1LCA1LCA1LCA1LCA1LFxuICAgIDUsIDUsIDUsIDUsIDUsIDUsIDVcbiAgXTtcblxuICB2YXIgZ3JvdXBCYXNlcyA9IFtcbiAgICAwLCAwLFxuICAgIDMzNTU0NDMyLCA0MzA0NjcyMSwgMTY3NzcyMTYsIDQ4ODI4MTI1LCA2MDQ2NjE3NiwgNDAzNTM2MDcsIDE2Nzc3MjE2LFxuICAgIDQzMDQ2NzIxLCAxMDAwMDAwMCwgMTk0ODcxNzEsIDM1ODMxODA4LCA2Mjc0ODUxNywgNzUyOTUzNiwgMTEzOTA2MjUsXG4gICAgMTY3NzcyMTYsIDI0MTM3NTY5LCAzNDAxMjIyNCwgNDcwNDU4ODEsIDY0MDAwMDAwLCA0MDg0MTAxLCA1MTUzNjMyLFxuICAgIDY0MzYzNDMsIDc5NjI2MjQsIDk3NjU2MjUsIDExODgxMzc2LCAxNDM0ODkwNywgMTcyMTAzNjgsIDIwNTExMTQ5LFxuICAgIDI0MzAwMDAwLCAyODYyOTE1MSwgMzM1NTQ0MzIsIDM5MTM1MzkzLCA0NTQzNTQyNCwgNTI1MjE4NzUsIDYwNDY2MTc2XG4gIF07XG5cbiAgQk4ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKGJhc2UsIHBhZGRpbmcpIHtcbiAgICBiYXNlID0gYmFzZSB8fCAxMDtcbiAgICBwYWRkaW5nID0gcGFkZGluZyB8IDAgfHwgMTtcblxuICAgIHZhciBvdXQ7XG4gICAgaWYgKGJhc2UgPT09IDE2IHx8IGJhc2UgPT09ICdoZXgnKSB7XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBvZmYgPSAwO1xuICAgICAgdmFyIGNhcnJ5ID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdyA9IHRoaXMud29yZHNbaV07XG4gICAgICAgIHZhciB3b3JkID0gKCgodyA8PCBvZmYpIHwgY2FycnkpICYgMHhmZmZmZmYpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgY2FycnkgPSAodyA+Pj4gKDI0IC0gb2ZmKSkgJiAweGZmZmZmZjtcbiAgICAgICAgaWYgKGNhcnJ5ICE9PSAwIHx8IGkgIT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIG91dCA9IHplcm9zWzYgLSB3b3JkLmxlbmd0aF0gKyB3b3JkICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHdvcmQgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgICAgb2ZmICs9IDI7XG4gICAgICAgIGlmIChvZmYgPj0gMjYpIHtcbiAgICAgICAgICBvZmYgLT0gMjY7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgICAgb3V0ID0gY2FycnkudG9TdHJpbmcoMTYpICsgb3V0O1xuICAgICAgfVxuICAgICAgd2hpbGUgKG91dC5sZW5ndGggJSBwYWRkaW5nICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIG91dCA9ICctJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgaWYgKGJhc2UgPT09IChiYXNlIHwgMCkgJiYgYmFzZSA+PSAyICYmIGJhc2UgPD0gMzYpIHtcbiAgICAgIC8vIHZhciBncm91cFNpemUgPSBNYXRoLmZsb29yKEJOLndvcmRTaXplICogTWF0aC5MTjIgLyBNYXRoLmxvZyhiYXNlKSk7XG4gICAgICB2YXIgZ3JvdXBTaXplID0gZ3JvdXBTaXplc1tiYXNlXTtcbiAgICAgIC8vIHZhciBncm91cEJhc2UgPSBNYXRoLnBvdyhiYXNlLCBncm91cFNpemUpO1xuICAgICAgdmFyIGdyb3VwQmFzZSA9IGdyb3VwQmFzZXNbYmFzZV07XG4gICAgICBvdXQgPSAnJztcbiAgICAgIHZhciBjID0gdGhpcy5jbG9uZSgpO1xuICAgICAgYy5uZWdhdGl2ZSA9IDA7XG4gICAgICB3aGlsZSAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgdmFyIHIgPSBjLm1vZG4oZ3JvdXBCYXNlKS50b1N0cmluZyhiYXNlKTtcbiAgICAgICAgYyA9IGMuaWRpdm4oZ3JvdXBCYXNlKTtcblxuICAgICAgICBpZiAoIWMuaXNaZXJvKCkpIHtcbiAgICAgICAgICBvdXQgPSB6ZXJvc1tncm91cFNpemUgLSByLmxlbmd0aF0gKyByICsgb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dCA9IHIgKyBvdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmlzWmVybygpKSB7XG4gICAgICAgIG91dCA9ICcwJyArIG91dDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChvdXQubGVuZ3RoICUgcGFkZGluZyAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnMCcgKyBvdXQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICBvdXQgPSAnLScgKyBvdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGFzc2VydChmYWxzZSwgJ0Jhc2Ugc2hvdWxkIGJlIGJldHdlZW4gMiBhbmQgMzYnKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9OdW1iZXIgPSBmdW5jdGlvbiB0b051bWJlciAoKSB7XG4gICAgdmFyIHJldCA9IHRoaXMud29yZHNbMF07XG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAyKSB7XG4gICAgICByZXQgKz0gdGhpcy53b3Jkc1sxXSAqIDB4NDAwMDAwMDtcbiAgICB9IGVsc2UgaWYgKHRoaXMubGVuZ3RoID09PSAzICYmIHRoaXMud29yZHNbMl0gPT09IDB4MDEpIHtcbiAgICAgIC8vIE5PVEU6IGF0IHRoaXMgc3RhZ2UgaXQgaXMga25vd24gdGhhdCB0aGUgdG9wIGJpdCBpcyBzZXRcbiAgICAgIHJldCArPSAweDEwMDAwMDAwMDAwMDAwICsgKHRoaXMud29yZHNbMV0gKiAweDQwMDAwMDApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiAyKSB7XG4gICAgICBhc3NlcnQoZmFsc2UsICdOdW1iZXIgY2FuIG9ubHkgc2FmZWx5IHN0b3JlIHVwIHRvIDUzIGJpdHMnKTtcbiAgICB9XG4gICAgcmV0dXJuICh0aGlzLm5lZ2F0aXZlICE9PSAwKSA/IC1yZXQgOiByZXQ7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoMTYpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS50b0J1ZmZlciA9IGZ1bmN0aW9uIHRvQnVmZmVyIChlbmRpYW4sIGxlbmd0aCkge1xuICAgIGFzc2VydCh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyk7XG4gICAgcmV0dXJuIHRoaXMudG9BcnJheUxpa2UoQnVmZmVyLCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5IChlbmRpYW4sIGxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLnRvQXJyYXlMaWtlKEFycmF5LCBlbmRpYW4sIGxlbmd0aCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnRvQXJyYXlMaWtlID0gZnVuY3Rpb24gdG9BcnJheUxpa2UgKEFycmF5VHlwZSwgZW5kaWFuLCBsZW5ndGgpIHtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCgpO1xuICAgIHZhciByZXFMZW5ndGggPSBsZW5ndGggfHwgTWF0aC5tYXgoMSwgYnl0ZUxlbmd0aCk7XG4gICAgYXNzZXJ0KGJ5dGVMZW5ndGggPD0gcmVxTGVuZ3RoLCAnYnl0ZSBhcnJheSBsb25nZXIgdGhhbiBkZXNpcmVkIGxlbmd0aCcpO1xuICAgIGFzc2VydChyZXFMZW5ndGggPiAwLCAnUmVxdWVzdGVkIGFycmF5IGxlbmd0aCA8PSAwJyk7XG5cbiAgICB0aGlzLnN0cmlwKCk7XG4gICAgdmFyIGxpdHRsZUVuZGlhbiA9IGVuZGlhbiA9PT0gJ2xlJztcbiAgICB2YXIgcmVzID0gbmV3IEFycmF5VHlwZShyZXFMZW5ndGgpO1xuXG4gICAgdmFyIGIsIGk7XG4gICAgdmFyIHEgPSB0aGlzLmNsb25lKCk7XG4gICAgaWYgKCFsaXR0bGVFbmRpYW4pIHtcbiAgICAgIC8vIEFzc3VtZSBiaWctZW5kaWFuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgcmVxTGVuZ3RoIC0gYnl0ZUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IDA7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7ICFxLmlzWmVybygpOyBpKyspIHtcbiAgICAgICAgYiA9IHEuYW5kbG4oMHhmZik7XG4gICAgICAgIHEuaXVzaHJuKDgpO1xuXG4gICAgICAgIHJlc1tyZXFMZW5ndGggLSBpIC0gMV0gPSBiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyAhcS5pc1plcm8oKTsgaSsrKSB7XG4gICAgICAgIGIgPSBxLmFuZGxuKDB4ZmYpO1xuICAgICAgICBxLml1c2hybig4KTtcblxuICAgICAgICByZXNbaV0gPSBiO1xuICAgICAgfVxuXG4gICAgICBmb3IgKDsgaSA8IHJlcUxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBpZiAoTWF0aC5jbHozMikge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgcmV0dXJuIDMyIC0gTWF0aC5jbHozMih3KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIEJOLnByb3RvdHlwZS5fY291bnRCaXRzID0gZnVuY3Rpb24gX2NvdW50Qml0cyAodykge1xuICAgICAgdmFyIHQgPSB3O1xuICAgICAgdmFyIHIgPSAwO1xuICAgICAgaWYgKHQgPj0gMHgxMDAwKSB7XG4gICAgICAgIHIgKz0gMTM7XG4gICAgICAgIHQgPj4+PSAxMztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4NDApIHtcbiAgICAgICAgciArPSA3O1xuICAgICAgICB0ID4+Pj0gNztcbiAgICAgIH1cbiAgICAgIGlmICh0ID49IDB4OCkge1xuICAgICAgICByICs9IDQ7XG4gICAgICAgIHQgPj4+PSA0O1xuICAgICAgfVxuICAgICAgaWYgKHQgPj0gMHgwMikge1xuICAgICAgICByICs9IDI7XG4gICAgICAgIHQgPj4+PSAyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIgKyB0O1xuICAgIH07XG4gIH1cblxuICBCTi5wcm90b3R5cGUuX3plcm9CaXRzID0gZnVuY3Rpb24gX3plcm9CaXRzICh3KSB7XG4gICAgLy8gU2hvcnQtY3V0XG4gICAgaWYgKHcgPT09IDApIHJldHVybiAyNjtcblxuICAgIHZhciB0ID0gdztcbiAgICB2YXIgciA9IDA7XG4gICAgaWYgKCh0ICYgMHgxZmZmKSA9PT0gMCkge1xuICAgICAgciArPSAxMztcbiAgICAgIHQgPj4+PSAxMztcbiAgICB9XG4gICAgaWYgKCh0ICYgMHg3ZikgPT09IDApIHtcbiAgICAgIHIgKz0gNztcbiAgICAgIHQgPj4+PSA3O1xuICAgIH1cbiAgICBpZiAoKHQgJiAweGYpID09PSAwKSB7XG4gICAgICByICs9IDQ7XG4gICAgICB0ID4+Pj0gNDtcbiAgICB9XG4gICAgaWYgKCh0ICYgMHgzKSA9PT0gMCkge1xuICAgICAgciArPSAyO1xuICAgICAgdCA+Pj49IDI7XG4gICAgfVxuICAgIGlmICgodCAmIDB4MSkgPT09IDApIHtcbiAgICAgIHIrKztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG51bWJlciBvZiB1c2VkIGJpdHMgaW4gYSBCTlxuICBCTi5wcm90b3R5cGUuYml0TGVuZ3RoID0gZnVuY3Rpb24gYml0TGVuZ3RoICgpIHtcbiAgICB2YXIgdyA9IHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXTtcbiAgICB2YXIgaGkgPSB0aGlzLl9jb3VudEJpdHModyk7XG4gICAgcmV0dXJuICh0aGlzLmxlbmd0aCAtIDEpICogMjYgKyBoaTtcbiAgfTtcblxuICBmdW5jdGlvbiB0b0JpdEFycmF5IChudW0pIHtcbiAgICB2YXIgdyA9IG5ldyBBcnJheShudW0uYml0TGVuZ3RoKCkpO1xuXG4gICAgZm9yICh2YXIgYml0ID0gMDsgYml0IDwgdy5sZW5ndGg7IGJpdCsrKSB7XG4gICAgICB2YXIgb2ZmID0gKGJpdCAvIDI2KSB8IDA7XG4gICAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgICB3W2JpdF0gPSAobnVtLndvcmRzW29mZl0gJiAoMSA8PCB3Yml0KSkgPj4+IHdiaXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHc7XG4gIH1cblxuICAvLyBOdW1iZXIgb2YgdHJhaWxpbmcgemVybyBiaXRzXG4gIEJOLnByb3RvdHlwZS56ZXJvQml0cyA9IGZ1bmN0aW9uIHplcm9CaXRzICgpIHtcbiAgICBpZiAodGhpcy5pc1plcm8oKSkgcmV0dXJuIDA7XG5cbiAgICB2YXIgciA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYiA9IHRoaXMuX3plcm9CaXRzKHRoaXMud29yZHNbaV0pO1xuICAgICAgciArPSBiO1xuICAgICAgaWYgKGIgIT09IDI2KSBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmJ5dGVMZW5ndGggPSBmdW5jdGlvbiBieXRlTGVuZ3RoICgpIHtcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuYml0TGVuZ3RoKCkgLyA4KTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9Ud29zID0gZnVuY3Rpb24gdG9Ud29zICh3aWR0aCkge1xuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5hYnMoKS5pbm90bih3aWR0aCkuaWFkZG4oMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNsb25lKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21Ud29zID0gZnVuY3Rpb24gZnJvbVR3b3MgKHdpZHRoKSB7XG4gICAgaWYgKHRoaXMudGVzdG4od2lkdGggLSAxKSkge1xuICAgICAgcmV0dXJuIHRoaXMubm90bih3aWR0aCkuaWFkZG4oMSkuaW5lZygpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pc05lZyA9IGZ1bmN0aW9uIGlzTmVnICgpIHtcbiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSAhPT0gMDtcbiAgfTtcblxuICAvLyBSZXR1cm4gbmVnYXRpdmUgY2xvbmUgb2YgYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5uZWcgPSBmdW5jdGlvbiBuZWcgKCkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW5lZygpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pbmVnID0gZnVuY3Rpb24gaW5lZyAoKSB7XG4gICAgaWYgKCF0aGlzLmlzWmVybygpKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlIF49IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1b3IgPSBmdW5jdGlvbiBpdW9yIChudW0pIHtcbiAgICB3aGlsZSAodGhpcy5sZW5ndGggPCBudW0ubGVuZ3RoKSB7XG4gICAgICB0aGlzLndvcmRzW3RoaXMubGVuZ3RoKytdID0gMDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV0gfCBudW0ud29yZHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW9yID0gZnVuY3Rpb24gaW9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdW9yKG51bSk7XG4gIH07XG5cbiAgLy8gT3IgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaW9yKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudW9yID0gZnVuY3Rpb24gdW9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXVvcih0aGlzKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1YW5kID0gZnVuY3Rpb24gaXVhbmQgKG51bSkge1xuICAgIC8vIGIgPSBtaW4tbGVuZ3RoKG51bSwgdGhpcylcbiAgICB2YXIgYjtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSB7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBiID0gdGhpcztcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB0aGlzLndvcmRzW2ldICYgbnVtLndvcmRzW2ldO1xuICAgIH1cblxuICAgIHRoaXMubGVuZ3RoID0gYi5sZW5ndGg7XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5pYW5kID0gZnVuY3Rpb24gaWFuZCAobnVtKSB7XG4gICAgYXNzZXJ0KCh0aGlzLm5lZ2F0aXZlIHwgbnVtLm5lZ2F0aXZlKSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVhbmQobnVtKTtcbiAgfTtcblxuICAvLyBBbmQgYG51bWAgd2l0aCBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZCAobnVtKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhbmQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnVhbmQgPSBmdW5jdGlvbiB1YW5kIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml1YW5kKG51bSk7XG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLml1YW5kKHRoaXMpO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXV4b3IgPSBmdW5jdGlvbiBpdXhvciAobnVtKSB7XG4gICAgLy8gYS5sZW5ndGggPiBiLmxlbmd0aFxuICAgIHZhciBhO1xuICAgIHZhciBiO1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHtcbiAgICAgIGEgPSB0aGlzO1xuICAgICAgYiA9IG51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IG51bTtcbiAgICAgIGIgPSB0aGlzO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV0gXiBiLndvcmRzW2ldO1xuICAgIH1cblxuICAgIGlmICh0aGlzICE9PSBhKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLml4b3IgPSBmdW5jdGlvbiBpeG9yIChudW0pIHtcbiAgICBhc3NlcnQoKHRoaXMubmVnYXRpdmUgfCBudW0ubmVnYXRpdmUpID09PSAwKTtcbiAgICByZXR1cm4gdGhpcy5pdXhvcihudW0pO1xuICB9O1xuXG4gIC8vIFhvciBgbnVtYCB3aXRoIGB0aGlzYFxuICBCTi5wcm90b3R5cGUueG9yID0gZnVuY3Rpb24geG9yIChudW0pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPiBudW0ubGVuZ3RoKSByZXR1cm4gdGhpcy5jbG9uZSgpLml4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXhvcih0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXhvciA9IGZ1bmN0aW9uIHV4b3IgKG51bSkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaXV4b3IobnVtKTtcbiAgICByZXR1cm4gbnVtLmNsb25lKCkuaXV4b3IodGhpcyk7XG4gIH07XG5cbiAgLy8gTm90IGBgdGhpc2BgIHdpdGggYGB3aWR0aGBgIGJpdHdpZHRoXG4gIEJOLnByb3RvdHlwZS5pbm90biA9IGZ1bmN0aW9uIGlub3RuICh3aWR0aCkge1xuICAgIGFzc2VydCh0eXBlb2Ygd2lkdGggPT09ICdudW1iZXInICYmIHdpZHRoID49IDApO1xuXG4gICAgdmFyIGJ5dGVzTmVlZGVkID0gTWF0aC5jZWlsKHdpZHRoIC8gMjYpIHwgMDtcbiAgICB2YXIgYml0c0xlZnQgPSB3aWR0aCAlIDI2O1xuXG4gICAgLy8gRXh0ZW5kIHRoZSBidWZmZXIgd2l0aCBsZWFkaW5nIHplcm9lc1xuICAgIHRoaXMuX2V4cGFuZChieXRlc05lZWRlZCk7XG5cbiAgICBpZiAoYml0c0xlZnQgPiAwKSB7XG4gICAgICBieXRlc05lZWRlZC0tO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBjb21wbGV0ZSB3b3Jkc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXNOZWVkZWQ7IGkrKykge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IH50aGlzLndvcmRzW2ldICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSB0aGUgcmVzaWR1ZVxuICAgIGlmIChiaXRzTGVmdCA+IDApIHtcbiAgICAgIHRoaXMud29yZHNbaV0gPSB+dGhpcy53b3Jkc1tpXSAmICgweDNmZmZmZmYgPj4gKDI2IC0gYml0c0xlZnQpKTtcbiAgICB9XG5cbiAgICAvLyBBbmQgcmVtb3ZlIGxlYWRpbmcgemVyb2VzXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubm90biA9IGZ1bmN0aW9uIG5vdG4gKHdpZHRoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbm90bih3aWR0aCk7XG4gIH07XG5cbiAgLy8gU2V0IGBiaXRgIG9mIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuc2V0biA9IGZ1bmN0aW9uIHNldG4gKGJpdCwgdmFsKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXQgPT09ICdudW1iZXInICYmIGJpdCA+PSAwKTtcblxuICAgIHZhciBvZmYgPSAoYml0IC8gMjYpIHwgMDtcbiAgICB2YXIgd2JpdCA9IGJpdCAlIDI2O1xuXG4gICAgdGhpcy5fZXhwYW5kKG9mZiArIDEpO1xuXG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy53b3Jkc1tvZmZdID0gdGhpcy53b3Jkc1tvZmZdIHwgKDEgPDwgd2JpdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud29yZHNbb2ZmXSA9IHRoaXMud29yZHNbb2ZmXSAmIH4oMSA8PCB3Yml0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIEFkZCBgbnVtYCB0byBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChudW0pIHtcbiAgICB2YXIgcjtcblxuICAgIC8vIG5lZ2F0aXZlICsgcG9zaXRpdmVcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgciA9IHRoaXMuaXN1YihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSBePSAxO1xuICAgICAgcmV0dXJuIHRoaXMuX25vcm1TaWduKCk7XG5cbiAgICAvLyBwb3NpdGl2ZSArIG5lZ2F0aXZlXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHIgPSB0aGlzLmlzdWIobnVtKTtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gci5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBhLmxlbmd0aCA+IGIubGVuZ3RoXG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbnVtLmxlbmd0aCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgICBjYXJyeSA9IHIgPj4+IDI2O1xuICAgIH1cbiAgICBmb3IgKDsgY2FycnkgIT09IDAgJiYgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApICsgY2Fycnk7XG4gICAgICB0aGlzLndvcmRzW2ldID0gciAmIDB4M2ZmZmZmZjtcbiAgICAgIGNhcnJ5ID0gciA+Pj4gMjY7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGggPSBhLmxlbmd0aDtcbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGhdID0gY2Fycnk7XG4gICAgICB0aGlzLmxlbmd0aCsrO1xuICAgIC8vIENvcHkgdGhlIHJlc3Qgb2YgdGhlIHdvcmRzXG4gICAgfSBlbHNlIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICBmb3IgKDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGEud29yZHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gQWRkIGBudW1gIHRvIGB0aGlzYFxuICBCTi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChudW0pIHtcbiAgICB2YXIgcmVzO1xuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDAgJiYgdGhpcy5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMDtcbiAgICAgIHJlcyA9IHRoaXMuc3ViKG51bSk7XG4gICAgICBudW0ubmVnYXRpdmUgXj0gMTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfSBlbHNlIGlmIChudW0ubmVnYXRpdmUgPT09IDAgJiYgdGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXMgPSBudW0uc3ViKHRoaXMpO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZChudW0pO1xuXG4gICAgcmV0dXJuIG51bS5jbG9uZSgpLmlhZGQodGhpcyk7XG4gIH07XG5cbiAgLy8gU3VidHJhY3QgYG51bWAgZnJvbSBgdGhpc2AgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChudW0pIHtcbiAgICAvLyB0aGlzIC0gKC1udW0pID0gdGhpcyArIG51bVxuICAgIGlmIChudW0ubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIG51bS5uZWdhdGl2ZSA9IDA7XG4gICAgICB2YXIgciA9IHRoaXMuaWFkZChudW0pO1xuICAgICAgbnVtLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiByLl9ub3JtU2lnbigpO1xuXG4gICAgLy8gLXRoaXMgLSBudW0gPSAtKHRoaXMgKyBudW0pXG4gICAgfSBlbHNlIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMuaWFkZChudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcy5fbm9ybVNpZ24oKTtcbiAgICB9XG5cbiAgICAvLyBBdCB0aGlzIHBvaW50IGJvdGggbnVtYmVycyBhcmUgcG9zaXRpdmVcbiAgICB2YXIgY21wID0gdGhpcy5jbXAobnVtKTtcblxuICAgIC8vIE9wdGltaXphdGlvbiAtIHplcm9pZnlcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gYSA+IGJcbiAgICB2YXIgYSwgYjtcbiAgICBpZiAoY21wID4gMCkge1xuICAgICAgYSA9IHRoaXM7XG4gICAgICBiID0gbnVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBhID0gbnVtO1xuICAgICAgYiA9IHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiAgICAgIHIgPSAoYS53b3Jkc1tpXSB8IDApIC0gKGIud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSByID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHIgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIGZvciAoOyBjYXJyeSAhPT0gMCAmJiBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgciA9IChhLndvcmRzW2ldIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gciA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaV0gPSByICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIC8vIENvcHkgcmVzdCBvZiB0aGUgd29yZHNcbiAgICBpZiAoY2FycnkgPT09IDAgJiYgaSA8IGEubGVuZ3RoICYmIGEgIT09IHRoaXMpIHtcbiAgICAgIGZvciAoOyBpIDwgYS5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gYS53b3Jkc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpKTtcblxuICAgIGlmIChhICE9PSB0aGlzKSB7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdHJpcCgpO1xuICB9O1xuXG4gIC8vIFN1YnRyYWN0IGBudW1gIGZyb20gYHRoaXNgXG4gIEJOLnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1YihudW0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHNtYWxsTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICB2YXIgbGVuID0gKHNlbGYubGVuZ3RoICsgbnVtLmxlbmd0aCkgfCAwO1xuICAgIG91dC5sZW5ndGggPSBsZW47XG4gICAgbGVuID0gKGxlbiAtIDEpIHwgMDtcblxuICAgIC8vIFBlZWwgb25lIGl0ZXJhdGlvbiAoY29tcGlsZXIgY2FuJ3QgZG8gaXQsIGJlY2F1c2Ugb2YgY29kZSBjb21wbGV4aXR5KVxuICAgIHZhciBhID0gc2VsZi53b3Jkc1swXSB8IDA7XG4gICAgdmFyIGIgPSBudW0ud29yZHNbMF0gfCAwO1xuICAgIHZhciByID0gYSAqIGI7XG5cbiAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgIHZhciBjYXJyeSA9IChyIC8gMHg0MDAwMDAwKSB8IDA7XG4gICAgb3V0LndvcmRzWzBdID0gbG87XG5cbiAgICBmb3IgKHZhciBrID0gMTsgayA8IGxlbjsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGNhcnJ5ID4+PiAyNjtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gKGsgLSBqKSB8IDA7XG4gICAgICAgIGEgPSBzZWxmLndvcmRzW2ldIHwgMDtcbiAgICAgICAgYiA9IG51bS53b3Jkc1tqXSB8IDA7XG4gICAgICAgIHIgPSBhICogYiArIHJ3b3JkO1xuICAgICAgICBuY2FycnkgKz0gKHIgLyAweDQwMDAwMDApIHwgMDtcbiAgICAgICAgcndvcmQgPSByICYgMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQgfCAwO1xuICAgICAgY2FycnkgPSBuY2FycnkgfCAwO1xuICAgIH1cbiAgICBpZiAoY2FycnkgIT09IDApIHtcbiAgICAgIG91dC53b3Jkc1trXSA9IGNhcnJ5IHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0Lmxlbmd0aC0tO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuc3RyaXAoKTtcbiAgfVxuXG4gIC8vIFRPRE8oaW5kdXRueSk6IGl0IG1heSBiZSByZWFzb25hYmxlIHRvIG9taXQgaXQgZm9yIHVzZXJzIHdobyBkb24ndCBuZWVkXG4gIC8vIHRvIHdvcmsgd2l0aCAyNTYtYml0IG51bWJlcnMsIG90aGVyd2lzZSBpdCBnaXZlcyAyMCUgaW1wcm92ZW1lbnQgZm9yIDI1Ni1iaXRcbiAgLy8gbXVsdGlwbGljYXRpb24gKGxpa2UgZWxsaXB0aWMgc2VjcDI1NmsxKS5cbiAgdmFyIGNvbWIxME11bFRvID0gZnVuY3Rpb24gY29tYjEwTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgdmFyIGEgPSBzZWxmLndvcmRzO1xuICAgIHZhciBiID0gbnVtLndvcmRzO1xuICAgIHZhciBvID0gb3V0LndvcmRzO1xuICAgIHZhciBjID0gMDtcbiAgICB2YXIgbG87XG4gICAgdmFyIG1pZDtcbiAgICB2YXIgaGk7XG4gICAgdmFyIGEwID0gYVswXSB8IDA7XG4gICAgdmFyIGFsMCA9IGEwICYgMHgxZmZmO1xuICAgIHZhciBhaDAgPSBhMCA+Pj4gMTM7XG4gICAgdmFyIGExID0gYVsxXSB8IDA7XG4gICAgdmFyIGFsMSA9IGExICYgMHgxZmZmO1xuICAgIHZhciBhaDEgPSBhMSA+Pj4gMTM7XG4gICAgdmFyIGEyID0gYVsyXSB8IDA7XG4gICAgdmFyIGFsMiA9IGEyICYgMHgxZmZmO1xuICAgIHZhciBhaDIgPSBhMiA+Pj4gMTM7XG4gICAgdmFyIGEzID0gYVszXSB8IDA7XG4gICAgdmFyIGFsMyA9IGEzICYgMHgxZmZmO1xuICAgIHZhciBhaDMgPSBhMyA+Pj4gMTM7XG4gICAgdmFyIGE0ID0gYVs0XSB8IDA7XG4gICAgdmFyIGFsNCA9IGE0ICYgMHgxZmZmO1xuICAgIHZhciBhaDQgPSBhNCA+Pj4gMTM7XG4gICAgdmFyIGE1ID0gYVs1XSB8IDA7XG4gICAgdmFyIGFsNSA9IGE1ICYgMHgxZmZmO1xuICAgIHZhciBhaDUgPSBhNSA+Pj4gMTM7XG4gICAgdmFyIGE2ID0gYVs2XSB8IDA7XG4gICAgdmFyIGFsNiA9IGE2ICYgMHgxZmZmO1xuICAgIHZhciBhaDYgPSBhNiA+Pj4gMTM7XG4gICAgdmFyIGE3ID0gYVs3XSB8IDA7XG4gICAgdmFyIGFsNyA9IGE3ICYgMHgxZmZmO1xuICAgIHZhciBhaDcgPSBhNyA+Pj4gMTM7XG4gICAgdmFyIGE4ID0gYVs4XSB8IDA7XG4gICAgdmFyIGFsOCA9IGE4ICYgMHgxZmZmO1xuICAgIHZhciBhaDggPSBhOCA+Pj4gMTM7XG4gICAgdmFyIGE5ID0gYVs5XSB8IDA7XG4gICAgdmFyIGFsOSA9IGE5ICYgMHgxZmZmO1xuICAgIHZhciBhaDkgPSBhOSA+Pj4gMTM7XG4gICAgdmFyIGIwID0gYlswXSB8IDA7XG4gICAgdmFyIGJsMCA9IGIwICYgMHgxZmZmO1xuICAgIHZhciBiaDAgPSBiMCA+Pj4gMTM7XG4gICAgdmFyIGIxID0gYlsxXSB8IDA7XG4gICAgdmFyIGJsMSA9IGIxICYgMHgxZmZmO1xuICAgIHZhciBiaDEgPSBiMSA+Pj4gMTM7XG4gICAgdmFyIGIyID0gYlsyXSB8IDA7XG4gICAgdmFyIGJsMiA9IGIyICYgMHgxZmZmO1xuICAgIHZhciBiaDIgPSBiMiA+Pj4gMTM7XG4gICAgdmFyIGIzID0gYlszXSB8IDA7XG4gICAgdmFyIGJsMyA9IGIzICYgMHgxZmZmO1xuICAgIHZhciBiaDMgPSBiMyA+Pj4gMTM7XG4gICAgdmFyIGI0ID0gYls0XSB8IDA7XG4gICAgdmFyIGJsNCA9IGI0ICYgMHgxZmZmO1xuICAgIHZhciBiaDQgPSBiNCA+Pj4gMTM7XG4gICAgdmFyIGI1ID0gYls1XSB8IDA7XG4gICAgdmFyIGJsNSA9IGI1ICYgMHgxZmZmO1xuICAgIHZhciBiaDUgPSBiNSA+Pj4gMTM7XG4gICAgdmFyIGI2ID0gYls2XSB8IDA7XG4gICAgdmFyIGJsNiA9IGI2ICYgMHgxZmZmO1xuICAgIHZhciBiaDYgPSBiNiA+Pj4gMTM7XG4gICAgdmFyIGI3ID0gYls3XSB8IDA7XG4gICAgdmFyIGJsNyA9IGI3ICYgMHgxZmZmO1xuICAgIHZhciBiaDcgPSBiNyA+Pj4gMTM7XG4gICAgdmFyIGI4ID0gYls4XSB8IDA7XG4gICAgdmFyIGJsOCA9IGI4ICYgMHgxZmZmO1xuICAgIHZhciBiaDggPSBiOCA+Pj4gMTM7XG4gICAgdmFyIGI5ID0gYls5XSB8IDA7XG4gICAgdmFyIGJsOSA9IGI5ICYgMHgxZmZmO1xuICAgIHZhciBiaDkgPSBiOSA+Pj4gMTM7XG5cbiAgICBvdXQubmVnYXRpdmUgPSBzZWxmLm5lZ2F0aXZlIF4gbnVtLm5lZ2F0aXZlO1xuICAgIG91dC5sZW5ndGggPSAxOTtcbiAgICAvKiBrID0gMCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwwLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgwLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgwLCBiaDApO1xuICAgIHZhciB3MCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzAgPj4+IDI2KSkgfCAwO1xuICAgIHcwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwxLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgxLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoMSkpIHwgMDtcbiAgICB2YXIgdzEgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxID4+PiAyNikpIHwgMDtcbiAgICB3MSAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDIgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDIsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsMiwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMiwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoMiwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgyKSkgfCAwO1xuICAgIHZhciB3MiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzIgPj4+IDI2KSkgfCAwO1xuICAgIHcyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsMywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWwzLCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgzLCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWgzLCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmgzKSkgfCAwO1xuICAgIHZhciB3MyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzMgPj4+IDI2KSkgfCAwO1xuICAgIHczICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNCwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw0LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg0LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNCkpIHwgMDtcbiAgICB2YXIgdzQgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc0ID4+PiAyNikpIHwgMDtcbiAgICB3NCAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDUgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDUsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsNSwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNSwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoNSwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg1KSkgfCAwO1xuICAgIHZhciB3NSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzUgPj4+IDI2KSkgfCAwO1xuICAgIHc1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNiwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw2LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg2LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg2LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg2KSkgfCAwO1xuICAgIHZhciB3NiA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzYgPj4+IDI2KSkgfCAwO1xuICAgIHc2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gNyAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsNywgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw3LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg3LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwwLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDAsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDAsIGJoNykpIHwgMDtcbiAgICB2YXIgdzcgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHc3ID4+PiAyNikpIHwgMDtcbiAgICB3NyAmPSAweDNmZmZmZmY7XG4gICAgLyogayA9IDggKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDgsIGJsMCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOCwgYmgwKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOCwgYmwwKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOCwgYmgwKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDEpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDEpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDIpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwyKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgyKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmwzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsMykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoMykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDQpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDQpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw1KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg1KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNikpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNikpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDcpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDcpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw4KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg4KSkgfCAwO1xuICAgIHZhciB3OCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzggPj4+IDI2KSkgfCAwO1xuICAgIHc4ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gOSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwwKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDApO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDApKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDApO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmwxKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDEpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsMSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoMSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwyLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDIsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDIsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDEsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgxLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgxLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwwLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDAsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMCwgYmg5KSkgfCAwO1xuICAgIHZhciB3OSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzkgPj4+IDI2KSkgfCAwO1xuICAgIHc5ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTAgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgxKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwxKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgxKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgyKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDIpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDIpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDMpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmwzKSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmgzKSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwxLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDEsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMSwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMSwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTAgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMCA+Pj4gMjYpKSB8IDA7XG4gICAgdzEwICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTEgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsMik7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmgyKTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmwyKSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmgyKTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsMykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmgzKSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDMpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDMpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw0KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg0KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDUpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNSkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNSkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsMywgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWwzLCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDMsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDMsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDIsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsMiwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWgyLCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWgyLCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxMSA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzExID4+PiAyNikpIHwgMDtcbiAgICB3MTEgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxMiAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmwzKTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDMpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDMpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDMpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw0KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDQpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNSwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw1LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDUsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDUsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDQsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg0LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg0LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWwzLCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDMsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoMywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoMywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTIgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMiA+Pj4gMjYpKSB8IDA7XG4gICAgdzEyICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTMgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg0KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw0KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg0KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg1KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDUpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDUpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDYpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw2KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg2KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw0LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDQsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNCwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNCwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTMgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxMyA+Pj4gMjYpKSB8IDA7XG4gICAgdzEzICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTQgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNSk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg1KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw1KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg1KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsNikpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg2KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDYpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDYpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoNykpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw3KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg3KSkgfCAwO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsNiwgYmw4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw2LCBiaDgpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDYsIGJsOCkpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDYsIGJoOCkpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDUsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNSwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg1LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg1LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNCA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE0ID4+PiAyNikpIHwgMDtcbiAgICB3MTQgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxNSAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw2KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDYpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDYpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDYpO1xuICAgIGxvID0gKGxvICsgTWF0aC5pbXVsKGFsOCwgYmw3KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWw4LCBiaDcpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhaDgsIGJsNykpIHwgMDtcbiAgICBoaSA9IChoaSArIE1hdGguaW11bChhaDgsIGJoNykpIHwgMDtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDcsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsNywgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg3LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg3LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw2LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDYsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNiwgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNiwgYmg5KSkgfCAwO1xuICAgIHZhciB3MTUgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNSA+Pj4gMjYpKSB8IDA7XG4gICAgdzE1ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTYgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsNyk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg3KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw3KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg3KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOCkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg4KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDgpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDgpKSB8IDA7XG4gICAgbG8gPSAobG8gKyBNYXRoLmltdWwoYWw3LCBibDkpKSB8IDA7XG4gICAgbWlkID0gKG1pZCArIE1hdGguaW11bChhbDcsIGJoOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoNywgYmw5KSkgfCAwO1xuICAgIGhpID0gKGhpICsgTWF0aC5pbXVsKGFoNywgYmg5KSkgfCAwO1xuICAgIHZhciB3MTYgPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxNiA+Pj4gMjYpKSB8IDA7XG4gICAgdzE2ICY9IDB4M2ZmZmZmZjtcbiAgICAvKiBrID0gMTcgKi9cbiAgICBsbyA9IE1hdGguaW11bChhbDksIGJsOCk7XG4gICAgbWlkID0gTWF0aC5pbXVsKGFsOSwgYmg4KTtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFoOSwgYmw4KSkgfCAwO1xuICAgIGhpID0gTWF0aC5pbXVsKGFoOSwgYmg4KTtcbiAgICBsbyA9IChsbyArIE1hdGguaW11bChhbDgsIGJsOSkpIHwgMDtcbiAgICBtaWQgPSAobWlkICsgTWF0aC5pbXVsKGFsOCwgYmg5KSkgfCAwO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg4LCBibDkpKSB8IDA7XG4gICAgaGkgPSAoaGkgKyBNYXRoLmltdWwoYWg4LCBiaDkpKSB8IDA7XG4gICAgdmFyIHcxNyA9ICgoKGMgKyBsbykgfCAwKSArICgobWlkICYgMHgxZmZmKSA8PCAxMykpIHwgMDtcbiAgICBjID0gKCgoaGkgKyAobWlkID4+PiAxMykpIHwgMCkgKyAodzE3ID4+PiAyNikpIHwgMDtcbiAgICB3MTcgJj0gMHgzZmZmZmZmO1xuICAgIC8qIGsgPSAxOCAqL1xuICAgIGxvID0gTWF0aC5pbXVsKGFsOSwgYmw5KTtcbiAgICBtaWQgPSBNYXRoLmltdWwoYWw5LCBiaDkpO1xuICAgIG1pZCA9IChtaWQgKyBNYXRoLmltdWwoYWg5LCBibDkpKSB8IDA7XG4gICAgaGkgPSBNYXRoLmltdWwoYWg5LCBiaDkpO1xuICAgIHZhciB3MTggPSAoKChjICsgbG8pIHwgMCkgKyAoKG1pZCAmIDB4MWZmZikgPDwgMTMpKSB8IDA7XG4gICAgYyA9ICgoKGhpICsgKG1pZCA+Pj4gMTMpKSB8IDApICsgKHcxOCA+Pj4gMjYpKSB8IDA7XG4gICAgdzE4ICY9IDB4M2ZmZmZmZjtcbiAgICBvWzBdID0gdzA7XG4gICAgb1sxXSA9IHcxO1xuICAgIG9bMl0gPSB3MjtcbiAgICBvWzNdID0gdzM7XG4gICAgb1s0XSA9IHc0O1xuICAgIG9bNV0gPSB3NTtcbiAgICBvWzZdID0gdzY7XG4gICAgb1s3XSA9IHc3O1xuICAgIG9bOF0gPSB3ODtcbiAgICBvWzldID0gdzk7XG4gICAgb1sxMF0gPSB3MTA7XG4gICAgb1sxMV0gPSB3MTE7XG4gICAgb1sxMl0gPSB3MTI7XG4gICAgb1sxM10gPSB3MTM7XG4gICAgb1sxNF0gPSB3MTQ7XG4gICAgb1sxNV0gPSB3MTU7XG4gICAgb1sxNl0gPSB3MTY7XG4gICAgb1sxN10gPSB3MTc7XG4gICAgb1sxOF0gPSB3MTg7XG4gICAgaWYgKGMgIT09IDApIHtcbiAgICAgIG9bMTldID0gYztcbiAgICAgIG91dC5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfTtcblxuICAvLyBQb2x5ZmlsbCBjb21iXG4gIGlmICghTWF0aC5pbXVsKSB7XG4gICAgY29tYjEwTXVsVG8gPSBzbWFsbE11bFRvO1xuICB9XG5cbiAgZnVuY3Rpb24gYmlnTXVsVG8gKHNlbGYsIG51bSwgb3V0KSB7XG4gICAgb3V0Lm5lZ2F0aXZlID0gbnVtLm5lZ2F0aXZlIF4gc2VsZi5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0gc2VsZi5sZW5ndGggKyBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICB2YXIgaG5jYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBvdXQubGVuZ3RoIC0gMTsgaysrKSB7XG4gICAgICAvLyBTdW0gYWxsIHdvcmRzIHdpdGggdGhlIHNhbWUgYGkgKyBqID0ga2AgYW5kIGFjY3VtdWxhdGUgYG5jYXJyeWAsXG4gICAgICAvLyBub3RlIHRoYXQgbmNhcnJ5IGNvdWxkIGJlID49IDB4M2ZmZmZmZlxuICAgICAgdmFyIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgICBobmNhcnJ5ID0gMDtcbiAgICAgIHZhciByd29yZCA9IGNhcnJ5ICYgMHgzZmZmZmZmO1xuICAgICAgdmFyIG1heEogPSBNYXRoLm1pbihrLCBudW0ubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBqID0gTWF0aC5tYXgoMCwgayAtIHNlbGYubGVuZ3RoICsgMSk7IGogPD0gbWF4SjsgaisrKSB7XG4gICAgICAgIHZhciBpID0gayAtIGo7XG4gICAgICAgIHZhciBhID0gc2VsZi53b3Jkc1tpXSB8IDA7XG4gICAgICAgIHZhciBiID0gbnVtLndvcmRzW2pdIHwgMDtcbiAgICAgICAgdmFyIHIgPSBhICogYjtcblxuICAgICAgICB2YXIgbG8gPSByICYgMHgzZmZmZmZmO1xuICAgICAgICBuY2FycnkgPSAobmNhcnJ5ICsgKChyIC8gMHg0MDAwMDAwKSB8IDApKSB8IDA7XG4gICAgICAgIGxvID0gKGxvICsgcndvcmQpIHwgMDtcbiAgICAgICAgcndvcmQgPSBsbyAmIDB4M2ZmZmZmZjtcbiAgICAgICAgbmNhcnJ5ID0gKG5jYXJyeSArIChsbyA+Pj4gMjYpKSB8IDA7XG5cbiAgICAgICAgaG5jYXJyeSArPSBuY2FycnkgPj4+IDI2O1xuICAgICAgICBuY2FycnkgJj0gMHgzZmZmZmZmO1xuICAgICAgfVxuICAgICAgb3V0LndvcmRzW2tdID0gcndvcmQ7XG4gICAgICBjYXJyeSA9IG5jYXJyeTtcbiAgICAgIG5jYXJyeSA9IGhuY2Fycnk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgb3V0LndvcmRzW2tdID0gY2Fycnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dC5sZW5ndGgtLTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH1cblxuICBmdW5jdGlvbiBqdW1ib011bFRvIChzZWxmLCBudW0sIG91dCkge1xuICAgIHZhciBmZnRtID0gbmV3IEZGVE0oKTtcbiAgICByZXR1cm4gZmZ0bS5tdWxwKHNlbGYsIG51bSwgb3V0KTtcbiAgfVxuXG4gIEJOLnByb3RvdHlwZS5tdWxUbyA9IGZ1bmN0aW9uIG11bFRvIChudW0sIG91dCkge1xuICAgIHZhciByZXM7XG4gICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aDtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDEwICYmIG51bS5sZW5ndGggPT09IDEwKSB7XG4gICAgICByZXMgPSBjb21iMTBNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCA2Mykge1xuICAgICAgcmVzID0gc21hbGxNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIGlmIChsZW4gPCAxMDI0KSB7XG4gICAgICByZXMgPSBiaWdNdWxUbyh0aGlzLCBudW0sIG91dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IGp1bWJvTXVsVG8odGhpcywgbnVtLCBvdXQpO1xuICAgIH1cblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gQ29vbGV5LVR1a2V5IGFsZ29yaXRobSBmb3IgRkZUXG4gIC8vIHNsaWdodGx5IHJldmlzaXRlZCB0byByZWx5IG9uIGxvb3BpbmcgaW5zdGVhZCBvZiByZWN1cnNpb25cblxuICBmdW5jdGlvbiBGRlRNICh4LCB5KSB7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICB9XG5cbiAgRkZUTS5wcm90b3R5cGUubWFrZVJCVCA9IGZ1bmN0aW9uIG1ha2VSQlQgKE4pIHtcbiAgICB2YXIgdCA9IG5ldyBBcnJheShOKTtcbiAgICB2YXIgbCA9IEJOLnByb3RvdHlwZS5fY291bnRCaXRzKE4pIC0gMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgICAgdFtpXSA9IHRoaXMucmV2QmluKGksIGwsIE4pO1xuICAgIH1cblxuICAgIHJldHVybiB0O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYmluYXJ5LXJldmVyc2VkIHJlcHJlc2VudGF0aW9uIG9mIGB4YFxuICBGRlRNLnByb3RvdHlwZS5yZXZCaW4gPSBmdW5jdGlvbiByZXZCaW4gKHgsIGwsIE4pIHtcbiAgICBpZiAoeCA9PT0gMCB8fCB4ID09PSBOIC0gMSkgcmV0dXJuIHg7XG5cbiAgICB2YXIgcmIgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICByYiB8PSAoeCAmIDEpIDw8IChsIC0gaSAtIDEpO1xuICAgICAgeCA+Pj0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmI7XG4gIH07XG5cbiAgLy8gUGVyZm9ybXMgXCJ0d2VlZGxpbmdcIiBwaGFzZSwgdGhlcmVmb3JlICdlbXVsYXRpbmcnXG4gIC8vIGJlaGF2aW91ciBvZiB0aGUgcmVjdXJzaXZlIGFsZ29yaXRobVxuICBGRlRNLnByb3RvdHlwZS5wZXJtdXRlID0gZnVuY3Rpb24gcGVybXV0ZSAocmJ0LCByd3MsIGl3cywgcnR3cywgaXR3cywgTikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBydHdzW2ldID0gcndzW3JidFtpXV07XG4gICAgICBpdHdzW2ldID0gaXdzW3JidFtpXV07XG4gICAgfVxuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIHRyYW5zZm9ybSAocndzLCBpd3MsIHJ0d3MsIGl0d3MsIE4sIHJidCkge1xuICAgIHRoaXMucGVybXV0ZShyYnQsIHJ3cywgaXdzLCBydHdzLCBpdHdzLCBOKTtcblxuICAgIGZvciAodmFyIHMgPSAxOyBzIDwgTjsgcyA8PD0gMSkge1xuICAgICAgdmFyIGwgPSBzIDw8IDE7XG5cbiAgICAgIHZhciBydHdkZiA9IE1hdGguY29zKDIgKiBNYXRoLlBJIC8gbCk7XG4gICAgICB2YXIgaXR3ZGYgPSBNYXRoLnNpbigyICogTWF0aC5QSSAvIGwpO1xuXG4gICAgICBmb3IgKHZhciBwID0gMDsgcCA8IE47IHAgKz0gbCkge1xuICAgICAgICB2YXIgcnR3ZGZfID0gcnR3ZGY7XG4gICAgICAgIHZhciBpdHdkZl8gPSBpdHdkZjtcblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHM7IGorKykge1xuICAgICAgICAgIHZhciByZSA9IHJ0d3NbcCArIGpdO1xuICAgICAgICAgIHZhciBpZSA9IGl0d3NbcCArIGpdO1xuXG4gICAgICAgICAgdmFyIHJvID0gcnR3c1twICsgaiArIHNdO1xuICAgICAgICAgIHZhciBpbyA9IGl0d3NbcCArIGogKyBzXTtcblxuICAgICAgICAgIHZhciByeCA9IHJ0d2RmXyAqIHJvIC0gaXR3ZGZfICogaW87XG5cbiAgICAgICAgICBpbyA9IHJ0d2RmXyAqIGlvICsgaXR3ZGZfICogcm87XG4gICAgICAgICAgcm8gPSByeDtcblxuICAgICAgICAgIHJ0d3NbcCArIGpdID0gcmUgKyBybztcbiAgICAgICAgICBpdHdzW3AgKyBqXSA9IGllICsgaW87XG5cbiAgICAgICAgICBydHdzW3AgKyBqICsgc10gPSByZSAtIHJvO1xuICAgICAgICAgIGl0d3NbcCArIGogKyBzXSA9IGllIC0gaW87XG5cbiAgICAgICAgICAvKiBqc2hpbnQgbWF4ZGVwdGggOiBmYWxzZSAqL1xuICAgICAgICAgIGlmIChqICE9PSBsKSB7XG4gICAgICAgICAgICByeCA9IHJ0d2RmICogcnR3ZGZfIC0gaXR3ZGYgKiBpdHdkZl87XG5cbiAgICAgICAgICAgIGl0d2RmXyA9IHJ0d2RmICogaXR3ZGZfICsgaXR3ZGYgKiBydHdkZl87XG4gICAgICAgICAgICBydHdkZl8gPSByeDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUuZ3Vlc3NMZW4xM2IgPSBmdW5jdGlvbiBndWVzc0xlbjEzYiAobiwgbSkge1xuICAgIHZhciBOID0gTWF0aC5tYXgobSwgbikgfCAxO1xuICAgIHZhciBvZGQgPSBOICYgMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgZm9yIChOID0gTiAvIDIgfCAwOyBOOyBOID0gTiA+Pj4gMSkge1xuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiAxIDw8IGkgKyAxICsgb2RkO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbmp1Z2F0ZSA9IGZ1bmN0aW9uIGNvbmp1Z2F0ZSAocndzLCBpd3MsIE4pIHtcbiAgICBpZiAoTiA8PSAxKSByZXR1cm47XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IE4gLyAyOyBpKyspIHtcbiAgICAgIHZhciB0ID0gcndzW2ldO1xuXG4gICAgICByd3NbaV0gPSByd3NbTiAtIGkgLSAxXTtcbiAgICAgIHJ3c1tOIC0gaSAtIDFdID0gdDtcblxuICAgICAgdCA9IGl3c1tpXTtcblxuICAgICAgaXdzW2ldID0gLWl3c1tOIC0gaSAtIDFdO1xuICAgICAgaXdzW04gLSBpIC0gMV0gPSAtdDtcbiAgICB9XG4gIH07XG5cbiAgRkZUTS5wcm90b3R5cGUubm9ybWFsaXplMTNiID0gZnVuY3Rpb24gbm9ybWFsaXplMTNiICh3cywgTikge1xuICAgIHZhciBjYXJyeSA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBOIC8gMjsgaSsrKSB7XG4gICAgICB2YXIgdyA9IE1hdGgucm91bmQod3NbMiAqIGkgKyAxXSAvIE4pICogMHgyMDAwICtcbiAgICAgICAgTWF0aC5yb3VuZCh3c1syICogaV0gLyBOKSArXG4gICAgICAgIGNhcnJ5O1xuXG4gICAgICB3c1tpXSA9IHcgJiAweDNmZmZmZmY7XG5cbiAgICAgIGlmICh3IDwgMHg0MDAwMDAwKSB7XG4gICAgICAgIGNhcnJ5ID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcnJ5ID0gdyAvIDB4NDAwMDAwMCB8IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdzO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLmNvbnZlcnQxM2IgPSBmdW5jdGlvbiBjb252ZXJ0MTNiICh3cywgbGVuLCByd3MsIE4pIHtcbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNhcnJ5ID0gY2FycnkgKyAod3NbaV0gfCAwKTtcblxuICAgICAgcndzWzIgKiBpXSA9IGNhcnJ5ICYgMHgxZmZmOyBjYXJyeSA9IGNhcnJ5ID4+PiAxMztcbiAgICAgIHJ3c1syICogaSArIDFdID0gY2FycnkgJiAweDFmZmY7IGNhcnJ5ID0gY2FycnkgPj4+IDEzO1xuICAgIH1cblxuICAgIC8vIFBhZCB3aXRoIHplcm9lc1xuICAgIGZvciAoaSA9IDIgKiBsZW47IGkgPCBOOyArK2kpIHtcbiAgICAgIHJ3c1tpXSA9IDA7XG4gICAgfVxuXG4gICAgYXNzZXJ0KGNhcnJ5ID09PSAwKTtcbiAgICBhc3NlcnQoKGNhcnJ5ICYgfjB4MWZmZikgPT09IDApO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLnN0dWIgPSBmdW5jdGlvbiBzdHViIChOKSB7XG4gICAgdmFyIHBoID0gbmV3IEFycmF5KE4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICBwaFtpXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBoO1xuICB9O1xuXG4gIEZGVE0ucHJvdG90eXBlLm11bHAgPSBmdW5jdGlvbiBtdWxwICh4LCB5LCBvdXQpIHtcbiAgICB2YXIgTiA9IDIgKiB0aGlzLmd1ZXNzTGVuMTNiKHgubGVuZ3RoLCB5Lmxlbmd0aCk7XG5cbiAgICB2YXIgcmJ0ID0gdGhpcy5tYWtlUkJUKE4pO1xuXG4gICAgdmFyIF8gPSB0aGlzLnN0dWIoTik7XG5cbiAgICB2YXIgcndzID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciByd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBpd3N0ID0gbmV3IEFycmF5KE4pO1xuXG4gICAgdmFyIG5yd3MgPSBuZXcgQXJyYXkoTik7XG4gICAgdmFyIG5yd3N0ID0gbmV3IEFycmF5KE4pO1xuICAgIHZhciBuaXdzdCA9IG5ldyBBcnJheShOKTtcblxuICAgIHZhciBybXdzID0gb3V0LndvcmRzO1xuICAgIHJtd3MubGVuZ3RoID0gTjtcblxuICAgIHRoaXMuY29udmVydDEzYih4LndvcmRzLCB4Lmxlbmd0aCwgcndzLCBOKTtcbiAgICB0aGlzLmNvbnZlcnQxM2IoeS53b3JkcywgeS5sZW5ndGgsIG5yd3MsIE4pO1xuXG4gICAgdGhpcy50cmFuc2Zvcm0ocndzLCBfLCByd3N0LCBpd3N0LCBOLCByYnQpO1xuICAgIHRoaXMudHJhbnNmb3JtKG5yd3MsIF8sIG5yd3N0LCBuaXdzdCwgTiwgcmJ0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTjsgaSsrKSB7XG4gICAgICB2YXIgcnggPSByd3N0W2ldICogbnJ3c3RbaV0gLSBpd3N0W2ldICogbml3c3RbaV07XG4gICAgICBpd3N0W2ldID0gcndzdFtpXSAqIG5pd3N0W2ldICsgaXdzdFtpXSAqIG5yd3N0W2ldO1xuICAgICAgcndzdFtpXSA9IHJ4O1xuICAgIH1cblxuICAgIHRoaXMuY29uanVnYXRlKHJ3c3QsIGl3c3QsIE4pO1xuICAgIHRoaXMudHJhbnNmb3JtKHJ3c3QsIGl3c3QsIHJtd3MsIF8sIE4sIHJidCk7XG4gICAgdGhpcy5jb25qdWdhdGUocm13cywgXywgTik7XG4gICAgdGhpcy5ub3JtYWxpemUxM2Iocm13cywgTik7XG5cbiAgICBvdXQubmVnYXRpdmUgPSB4Lm5lZ2F0aXZlIF4geS5uZWdhdGl2ZTtcbiAgICBvdXQubGVuZ3RoID0geC5sZW5ndGggKyB5Lmxlbmd0aDtcbiAgICByZXR1cm4gb3V0LnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gTXVsdGlwbHkgYHRoaXNgIGJ5IGBudW1gXG4gIEJOLnByb3RvdHlwZS5tdWwgPSBmdW5jdGlvbiBtdWwgKG51bSkge1xuICAgIHZhciBvdXQgPSBuZXcgQk4obnVsbCk7XG4gICAgb3V0LndvcmRzID0gbmV3IEFycmF5KHRoaXMubGVuZ3RoICsgbnVtLmxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMubXVsVG8obnVtLCBvdXQpO1xuICB9O1xuXG4gIC8vIE11bHRpcGx5IGVtcGxveWluZyBGRlRcbiAgQk4ucHJvdG90eXBlLm11bGYgPSBmdW5jdGlvbiBtdWxmIChudW0pIHtcbiAgICB2YXIgb3V0ID0gbmV3IEJOKG51bGwpO1xuICAgIG91dC53b3JkcyA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCArIG51bS5sZW5ndGgpO1xuICAgIHJldHVybiBqdW1ib011bFRvKHRoaXMsIG51bSwgb3V0KTtcbiAgfTtcblxuICAvLyBJbi1wbGFjZSBNdWx0aXBsaWNhdGlvblxuICBCTi5wcm90b3R5cGUuaW11bCA9IGZ1bmN0aW9uIGltdWwgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkubXVsVG8obnVtLCB0aGlzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaW11bG4gPSBmdW5jdGlvbiBpbXVsbiAobnVtKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBudW0gPT09ICdudW1iZXInKTtcbiAgICBhc3NlcnQobnVtIDwgMHg0MDAwMDAwKTtcblxuICAgIC8vIENhcnJ5XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gKHRoaXMud29yZHNbaV0gfCAwKSAqIG51bTtcbiAgICAgIHZhciBsbyA9ICh3ICYgMHgzZmZmZmZmKSArIChjYXJyeSAmIDB4M2ZmZmZmZik7XG4gICAgICBjYXJyeSA+Pj0gMjY7XG4gICAgICBjYXJyeSArPSAodyAvIDB4NDAwMDAwMCkgfCAwO1xuICAgICAgLy8gTk9URTogbG8gaXMgMjdiaXQgbWF4aW11bVxuICAgICAgY2FycnkgKz0gbG8gPj4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGxvICYgMHgzZmZmZmZmO1xuICAgIH1cblxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubXVsbiA9IGZ1bmN0aW9uIG11bG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaW11bG4obnVtKTtcbiAgfTtcblxuICAvLyBgdGhpc2AgKiBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLnNxciA9IGZ1bmN0aW9uIHNxciAoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKHRoaXMpO1xuICB9O1xuXG4gIC8vIGB0aGlzYCAqIGB0aGlzYCBpbi1wbGFjZVxuICBCTi5wcm90b3R5cGUuaXNxciA9IGZ1bmN0aW9uIGlzcXIgKCkge1xuICAgIHJldHVybiB0aGlzLmltdWwodGhpcy5jbG9uZSgpKTtcbiAgfTtcblxuICAvLyBNYXRoLnBvdyhgdGhpc2AsIGBudW1gKVxuICBCTi5wcm90b3R5cGUucG93ID0gZnVuY3Rpb24gcG93IChudW0pIHtcbiAgICB2YXIgdyA9IHRvQml0QXJyYXkobnVtKTtcbiAgICBpZiAody5sZW5ndGggPT09IDApIHJldHVybiBuZXcgQk4oMSk7XG5cbiAgICAvLyBTa2lwIGxlYWRpbmcgemVyb2VzXG4gICAgdmFyIHJlcyA9IHRoaXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3Lmxlbmd0aDsgaSsrLCByZXMgPSByZXMuc3FyKCkpIHtcbiAgICAgIGlmICh3W2ldICE9PSAwKSBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoKytpIDwgdy5sZW5ndGgpIHtcbiAgICAgIGZvciAodmFyIHEgPSByZXMuc3FyKCk7IGkgPCB3Lmxlbmd0aDsgaSsrLCBxID0gcS5zcXIoKSkge1xuICAgICAgICBpZiAod1tpXSA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgcmVzID0gcmVzLm11bChxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vIFNoaWZ0LWxlZnQgaW4tcGxhY2VcbiAgQk4ucHJvdG90eXBlLml1c2hsbiA9IGZ1bmN0aW9uIGl1c2hsbiAoYml0cykge1xuICAgIGFzc2VydCh0eXBlb2YgYml0cyA9PT0gJ251bWJlcicgJiYgYml0cyA+PSAwKTtcbiAgICB2YXIgciA9IGJpdHMgJSAyNjtcbiAgICB2YXIgcyA9IChiaXRzIC0gcikgLyAyNjtcbiAgICB2YXIgY2FycnlNYXNrID0gKDB4M2ZmZmZmZiA+Pj4gKDI2IC0gcikpIDw8ICgyNiAtIHIpO1xuICAgIHZhciBpO1xuXG4gICAgaWYgKHIgIT09IDApIHtcbiAgICAgIHZhciBjYXJyeSA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBuZXdDYXJyeSA9IHRoaXMud29yZHNbaV0gJiBjYXJyeU1hc2s7XG4gICAgICAgIHZhciBjID0gKCh0aGlzLndvcmRzW2ldIHwgMCkgLSBuZXdDYXJyeSkgPDwgcjtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IGMgfCBjYXJyeTtcbiAgICAgICAgY2FycnkgPSBuZXdDYXJyeSA+Pj4gKDI2IC0gcik7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYXJyeSkge1xuICAgICAgICB0aGlzLndvcmRzW2ldID0gY2Fycnk7XG4gICAgICAgIHRoaXMubGVuZ3RoKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHMgIT09IDApIHtcbiAgICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpICsgc10gPSB0aGlzLndvcmRzW2ldO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgczsgaSsrKSB7XG4gICAgICAgIHRoaXMud29yZHNbaV0gPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxlbmd0aCArPSBzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaGxuID0gZnVuY3Rpb24gaXNobG4gKGJpdHMpIHtcbiAgICAvLyBUT0RPKGluZHV0bnkpOiBpbXBsZW1lbnQgbWVcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCk7XG4gICAgcmV0dXJuIHRoaXMuaXVzaGxuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFNoaWZ0LXJpZ2h0IGluLXBsYWNlXG4gIC8vIE5PVEU6IGBoaW50YCBpcyBhIGxvd2VzdCBiaXQgYmVmb3JlIHRyYWlsaW5nIHplcm9lc1xuICAvLyBOT1RFOiBpZiBgZXh0ZW5kZWRgIGlzIHByZXNlbnQgLSBpdCB3aWxsIGJlIGZpbGxlZCB3aXRoIGRlc3Ryb3llZCBiaXRzXG4gIEJOLnByb3RvdHlwZS5pdXNocm4gPSBmdW5jdGlvbiBpdXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciBoO1xuICAgIGlmIChoaW50KSB7XG4gICAgICBoID0gKGhpbnQgLSAoaGludCAlIDI2KSkgLyAyNjtcbiAgICB9IGVsc2Uge1xuICAgICAgaCA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHIgPSBiaXRzICUgMjY7XG4gICAgdmFyIHMgPSBNYXRoLm1pbigoYml0cyAtIHIpIC8gMjYsIHRoaXMubGVuZ3RoKTtcbiAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICB2YXIgbWFza2VkV29yZHMgPSBleHRlbmRlZDtcblxuICAgIGggLT0gcztcbiAgICBoID0gTWF0aC5tYXgoMCwgaCk7XG5cbiAgICAvLyBFeHRlbmRlZCBtb2RlLCBjb3B5IG1hc2tlZCBwYXJ0XG4gICAgaWYgKG1hc2tlZFdvcmRzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHM7IGkrKykge1xuICAgICAgICBtYXNrZWRXb3Jkcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaV07XG4gICAgICB9XG4gICAgICBtYXNrZWRXb3Jkcy5sZW5ndGggPSBzO1xuICAgIH1cblxuICAgIGlmIChzID09PSAwKSB7XG4gICAgICAvLyBOby1vcCwgd2Ugc2hvdWxkIG5vdCBtb3ZlIGFueXRoaW5nIGF0IGFsbFxuICAgIH0gZWxzZSBpZiAodGhpcy5sZW5ndGggPiBzKSB7XG4gICAgICB0aGlzLmxlbmd0aCAtPSBzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSA9IHRoaXMud29yZHNbaSArIHNdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmRzWzBdID0gMDtcbiAgICAgIHRoaXMubGVuZ3RoID0gMTtcbiAgICB9XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAoaSA9IHRoaXMubGVuZ3RoIC0gMTsgaSA+PSAwICYmIChjYXJyeSAhPT0gMCB8fCBpID49IGgpOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB0aGlzLndvcmRzW2ldID0gKGNhcnJ5IDw8ICgyNiAtIHIpKSB8ICh3b3JkID4+PiByKTtcbiAgICAgIGNhcnJ5ID0gd29yZCAmIG1hc2s7XG4gICAgfVxuXG4gICAgLy8gUHVzaCBjYXJyaWVkIGJpdHMgYXMgYSBtYXNrXG4gICAgaWYgKG1hc2tlZFdvcmRzICYmIGNhcnJ5ICE9PSAwKSB7XG4gICAgICBtYXNrZWRXb3Jkcy53b3Jkc1ttYXNrZWRXb3Jkcy5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMud29yZHNbMF0gPSAwO1xuICAgICAgdGhpcy5sZW5ndGggPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzaHJuID0gZnVuY3Rpb24gaXNocm4gKGJpdHMsIGhpbnQsIGV4dGVuZGVkKSB7XG4gICAgLy8gVE9ETyhpbmR1dG55KTogaW1wbGVtZW50IG1lXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDApO1xuICAgIHJldHVybiB0aGlzLml1c2hybihiaXRzLCBoaW50LCBleHRlbmRlZCk7XG4gIH07XG5cbiAgLy8gU2hpZnQtbGVmdFxuICBCTi5wcm90b3R5cGUuc2hsbiA9IGZ1bmN0aW9uIHNobG4gKGJpdHMpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlzaGxuKGJpdHMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51c2hsbiA9IGZ1bmN0aW9uIHVzaGxuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pdXNobG4oYml0cyk7XG4gIH07XG5cbiAgLy8gU2hpZnQtcmlnaHRcbiAgQk4ucHJvdG90eXBlLnNocm4gPSBmdW5jdGlvbiBzaHJuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pc2hybihiaXRzKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudXNocm4gPSBmdW5jdGlvbiB1c2hybiAoYml0cykge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXVzaHJuKGJpdHMpO1xuICB9O1xuXG4gIC8vIFRlc3QgaWYgbiBiaXQgaXMgc2V0XG4gIEJOLnByb3RvdHlwZS50ZXN0biA9IGZ1bmN0aW9uIHRlc3RuIChiaXQpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJpdCA9PT0gJ251bWJlcicgJiYgYml0ID49IDApO1xuICAgIHZhciByID0gYml0ICUgMjY7XG4gICAgdmFyIHMgPSAoYml0IC0gcikgLyAyNjtcbiAgICB2YXIgcSA9IDEgPDwgcjtcblxuICAgIC8vIEZhc3QgY2FzZTogYml0IGlzIG11Y2ggaGlnaGVyIHRoYW4gYWxsIGV4aXN0aW5nIHdvcmRzXG4gICAgaWYgKHRoaXMubGVuZ3RoIDw9IHMpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIENoZWNrIGJpdCBhbmQgcmV0dXJuXG4gICAgdmFyIHcgPSB0aGlzLndvcmRzW3NdO1xuXG4gICAgcmV0dXJuICEhKHcgJiBxKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gb25seSBsb3dlcnMgYml0cyBvZiBudW1iZXIgKGluLXBsYWNlKVxuICBCTi5wcm90b3R5cGUuaW1hc2tuID0gZnVuY3Rpb24gaW1hc2tuIChiaXRzKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBiaXRzID09PSAnbnVtYmVyJyAmJiBiaXRzID49IDApO1xuICAgIHZhciByID0gYml0cyAlIDI2O1xuICAgIHZhciBzID0gKGJpdHMgLSByKSAvIDI2O1xuXG4gICAgYXNzZXJ0KHRoaXMubmVnYXRpdmUgPT09IDAsICdpbWFza24gd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlIG51bWJlcnMnKTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA8PSBzKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBpZiAociAhPT0gMCkge1xuICAgICAgcysrO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWluKHMsIHRoaXMubGVuZ3RoKTtcblxuICAgIGlmIChyICE9PSAwKSB7XG4gICAgICB2YXIgbWFzayA9IDB4M2ZmZmZmZiBeICgoMHgzZmZmZmZmID4+PiByKSA8PCByKTtcbiAgICAgIHRoaXMud29yZHNbdGhpcy5sZW5ndGggLSAxXSAmPSBtYXNrO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIG9ubHkgbG93ZXJzIGJpdHMgb2YgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5tYXNrbiA9IGZ1bmN0aW9uIG1hc2tuIChiaXRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pbWFza24oYml0cyk7XG4gIH07XG5cbiAgLy8gQWRkIHBsYWluIG51bWJlciBgbnVtYCB0byBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlhZGRuID0gZnVuY3Rpb24gaWFkZG4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlzdWJuKC1udW0pO1xuXG4gICAgLy8gUG9zc2libGUgc2lnbiBjaGFuZ2VcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID09PSAxICYmICh0aGlzLndvcmRzWzBdIHwgMCkgPCBudW0pIHtcbiAgICAgICAgdGhpcy53b3Jkc1swXSA9IG51bSAtICh0aGlzLndvcmRzWzBdIHwgMCk7XG4gICAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDA7XG4gICAgICB0aGlzLmlzdWJuKG51bSk7XG4gICAgICB0aGlzLm5lZ2F0aXZlID0gMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRob3V0IGNoZWNrc1xuICAgIHJldHVybiB0aGlzLl9pYWRkbihudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5faWFkZG4gPSBmdW5jdGlvbiBfaWFkZG4gKG51bSkge1xuICAgIHRoaXMud29yZHNbMF0gKz0gbnVtO1xuXG4gICAgLy8gQ2FycnlcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPj0gMHg0MDAwMDAwOyBpKyspIHtcbiAgICAgIHRoaXMud29yZHNbaV0gLT0gMHg0MDAwMDAwO1xuICAgICAgaWYgKGkgPT09IHRoaXMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLndvcmRzW2kgKyAxXSsrO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCA9IE1hdGgubWF4KHRoaXMubGVuZ3RoLCBpICsgMSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBTdWJ0cmFjdCBwbGFpbiBudW1iZXIgYG51bWAgZnJvbSBgdGhpc2BcbiAgQk4ucHJvdG90eXBlLmlzdWJuID0gZnVuY3Rpb24gaXN1Ym4gKG51bSkge1xuICAgIGFzc2VydCh0eXBlb2YgbnVtID09PSAnbnVtYmVyJyk7XG4gICAgYXNzZXJ0KG51bSA8IDB4NDAwMDAwMCk7XG4gICAgaWYgKG51bSA8IDApIHJldHVybiB0aGlzLmlhZGRuKC1udW0pO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuICAgICAgdGhpcy5pYWRkbihudW0pO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICB0aGlzLndvcmRzWzBdIC09IG51bTtcblxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSAmJiB0aGlzLndvcmRzWzBdIDwgMCkge1xuICAgICAgdGhpcy53b3Jkc1swXSA9IC10aGlzLndvcmRzWzBdO1xuICAgICAgdGhpcy5uZWdhdGl2ZSA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENhcnJ5XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoICYmIHRoaXMud29yZHNbaV0gPCAwOyBpKyspIHtcbiAgICAgICAgdGhpcy53b3Jkc1tpXSArPSAweDQwMDAwMDA7XG4gICAgICAgIHRoaXMud29yZHNbaSArIDFdIC09IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuYWRkbiA9IGZ1bmN0aW9uIGFkZG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaWFkZG4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuc3VibiA9IGZ1bmN0aW9uIHN1Ym4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNsb25lKCkuaXN1Ym4obnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuaWFicyA9IGZ1bmN0aW9uIGlhYnMgKCkge1xuICAgIHRoaXMubmVnYXRpdmUgPSAwO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uIGFicyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5pYWJzKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLl9pc2hsbnN1Ym11bCA9IGZ1bmN0aW9uIF9pc2hsbnN1Ym11bCAobnVtLCBtdWwsIHNoaWZ0KSB7XG4gICAgdmFyIGxlbiA9IG51bS5sZW5ndGggKyBzaGlmdDtcbiAgICB2YXIgaTtcblxuICAgIHRoaXMuX2V4cGFuZChsZW4pO1xuXG4gICAgdmFyIHc7XG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtLmxlbmd0aDsgaSsrKSB7XG4gICAgICB3ID0gKHRoaXMud29yZHNbaSArIHNoaWZ0XSB8IDApICsgY2Fycnk7XG4gICAgICB2YXIgcmlnaHQgPSAobnVtLndvcmRzW2ldIHwgMCkgKiBtdWw7XG4gICAgICB3IC09IHJpZ2h0ICYgMHgzZmZmZmZmO1xuICAgICAgY2FycnkgPSAodyA+PiAyNikgLSAoKHJpZ2h0IC8gMHg0MDAwMDAwKSB8IDApO1xuICAgICAgdGhpcy53b3Jkc1tpICsgc2hpZnRdID0gdyAmIDB4M2ZmZmZmZjtcbiAgICB9XG4gICAgZm9yICg7IGkgPCB0aGlzLmxlbmd0aCAtIHNoaWZ0OyBpKyspIHtcbiAgICAgIHcgPSAodGhpcy53b3Jkc1tpICsgc2hpZnRdIHwgMCkgKyBjYXJyeTtcbiAgICAgIGNhcnJ5ID0gdyA+PiAyNjtcbiAgICAgIHRoaXMud29yZHNbaSArIHNoaWZ0XSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuXG4gICAgaWYgKGNhcnJ5ID09PSAwKSByZXR1cm4gdGhpcy5zdHJpcCgpO1xuXG4gICAgLy8gU3VidHJhY3Rpb24gb3ZlcmZsb3dcbiAgICBhc3NlcnQoY2FycnkgPT09IC0xKTtcbiAgICBjYXJyeSA9IDA7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHcgPSAtKHRoaXMud29yZHNbaV0gfCAwKSArIGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+IDI2O1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHcgJiAweDNmZmZmZmY7XG4gICAgfVxuICAgIHRoaXMubmVnYXRpdmUgPSAxO1xuXG4gICAgcmV0dXJuIHRoaXMuc3RyaXAoKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuX3dvcmREaXYgPSBmdW5jdGlvbiBfd29yZERpdiAobnVtLCBtb2RlKSB7XG4gICAgdmFyIHNoaWZ0ID0gdGhpcy5sZW5ndGggLSBudW0ubGVuZ3RoO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW07XG5cbiAgICAvLyBOb3JtYWxpemVcbiAgICB2YXIgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB2YXIgYmhpQml0cyA9IHRoaXMuX2NvdW50Qml0cyhiaGkpO1xuICAgIHNoaWZ0ID0gMjYgLSBiaGlCaXRzO1xuICAgIGlmIChzaGlmdCAhPT0gMCkge1xuICAgICAgYiA9IGIudXNobG4oc2hpZnQpO1xuICAgICAgYS5pdXNobG4oc2hpZnQpO1xuICAgICAgYmhpID0gYi53b3Jkc1tiLmxlbmd0aCAtIDFdIHwgMDtcbiAgICB9XG5cbiAgICAvLyBJbml0aWFsaXplIHF1b3RpZW50XG4gICAgdmFyIG0gPSBhLmxlbmd0aCAtIGIubGVuZ3RoO1xuICAgIHZhciBxO1xuXG4gICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICBxID0gbmV3IEJOKG51bGwpO1xuICAgICAgcS5sZW5ndGggPSBtICsgMTtcbiAgICAgIHEud29yZHMgPSBuZXcgQXJyYXkocS5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHEud29yZHNbaV0gPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkaWZmID0gYS5jbG9uZSgpLl9pc2hsbnN1Ym11bChiLCAxLCBtKTtcbiAgICBpZiAoZGlmZi5uZWdhdGl2ZSA9PT0gMCkge1xuICAgICAgYSA9IGRpZmY7XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW21dID0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBqID0gbSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICB2YXIgcWogPSAoYS53b3Jkc1tiLmxlbmd0aCArIGpdIHwgMCkgKiAweDQwMDAwMDAgK1xuICAgICAgICAoYS53b3Jkc1tiLmxlbmd0aCArIGogLSAxXSB8IDApO1xuXG4gICAgICAvLyBOT1RFOiAocWogLyBiaGkpIGlzICgweDNmZmZmZmYgKiAweDQwMDAwMDAgKyAweDNmZmZmZmYpIC8gMHgyMDAwMDAwIG1heFxuICAgICAgLy8gKDB4N2ZmZmZmZilcbiAgICAgIHFqID0gTWF0aC5taW4oKHFqIC8gYmhpKSB8IDAsIDB4M2ZmZmZmZik7XG5cbiAgICAgIGEuX2lzaGxuc3VibXVsKGIsIHFqLCBqKTtcbiAgICAgIHdoaWxlIChhLm5lZ2F0aXZlICE9PSAwKSB7XG4gICAgICAgIHFqLS07XG4gICAgICAgIGEubmVnYXRpdmUgPSAwO1xuICAgICAgICBhLl9pc2hsbnN1Ym11bChiLCAxLCBqKTtcbiAgICAgICAgaWYgKCFhLmlzWmVybygpKSB7XG4gICAgICAgICAgYS5uZWdhdGl2ZSBePSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocSkge1xuICAgICAgICBxLndvcmRzW2pdID0gcWo7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChxKSB7XG4gICAgICBxLnN0cmlwKCk7XG4gICAgfVxuICAgIGEuc3RyaXAoKTtcblxuICAgIC8vIERlbm9ybWFsaXplXG4gICAgaWYgKG1vZGUgIT09ICdkaXYnICYmIHNoaWZ0ICE9PSAwKSB7XG4gICAgICBhLml1c2hybihzaGlmdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGRpdjogcSB8fCBudWxsLFxuICAgICAgbW9kOiBhXG4gICAgfTtcbiAgfTtcblxuICAvLyBOT1RFOiAxKSBgbW9kZWAgY2FuIGJlIHNldCB0byBgbW9kYCB0byByZXF1ZXN0IG1vZCBvbmx5LFxuICAvLyAgICAgICB0byBgZGl2YCB0byByZXF1ZXN0IGRpdiBvbmx5LCBvciBiZSBhYnNlbnQgdG9cbiAgLy8gICAgICAgcmVxdWVzdCBib3RoIGRpdiAmIG1vZFxuICAvLyAgICAgICAyKSBgcG9zaXRpdmVgIGlzIHRydWUgaWYgdW5zaWduZWQgbW9kIGlzIHJlcXVlc3RlZFxuICBCTi5wcm90b3R5cGUuZGl2bW9kID0gZnVuY3Rpb24gZGl2bW9kIChudW0sIG1vZGUsIHBvc2l0aXZlKSB7XG4gICAgYXNzZXJ0KCFudW0uaXNaZXJvKCkpO1xuXG4gICAgaWYgKHRoaXMuaXNaZXJvKCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogbmV3IEJOKDApLFxuICAgICAgICBtb2Q6IG5ldyBCTigwKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGl2LCBtb2QsIHJlcztcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCAmJiBudW0ubmVnYXRpdmUgPT09IDApIHtcbiAgICAgIHJlcyA9IHRoaXMubmVnKCkuZGl2bW9kKG51bSwgbW9kZSk7XG5cbiAgICAgIGlmIChtb2RlICE9PSAnbW9kJykge1xuICAgICAgICBkaXYgPSByZXMuZGl2Lm5lZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9kZSAhPT0gJ2RpdicpIHtcbiAgICAgICAgbW9kID0gcmVzLm1vZC5uZWcoKTtcbiAgICAgICAgaWYgKHBvc2l0aXZlICYmIG1vZC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgICAgIG1vZC5pYWRkKG51bSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiBkaXYsXG4gICAgICAgIG1vZDogbW9kXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5lZ2F0aXZlID09PSAwICYmIG51bS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdtb2QnKSB7XG4gICAgICAgIGRpdiA9IHJlcy5kaXYubmVnKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogZGl2LFxuICAgICAgICBtb2Q6IHJlcy5tb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLm5lZ2F0aXZlICYgbnVtLm5lZ2F0aXZlKSAhPT0gMCkge1xuICAgICAgcmVzID0gdGhpcy5uZWcoKS5kaXZtb2QobnVtLm5lZygpLCBtb2RlKTtcblxuICAgICAgaWYgKG1vZGUgIT09ICdkaXYnKSB7XG4gICAgICAgIG1vZCA9IHJlcy5tb2QubmVnKCk7XG4gICAgICAgIGlmIChwb3NpdGl2ZSAmJiBtb2QubmVnYXRpdmUgIT09IDApIHtcbiAgICAgICAgICBtb2QuaXN1YihudW0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpdjogcmVzLmRpdixcbiAgICAgICAgbW9kOiBtb2RcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gQm90aCBudW1iZXJzIGFyZSBwb3NpdGl2ZSBhdCB0aGlzIHBvaW50XG5cbiAgICAvLyBTdHJpcCBib3RoIG51bWJlcnMgdG8gYXBwcm94aW1hdGUgc2hpZnQgdmFsdWVcbiAgICBpZiAobnVtLmxlbmd0aCA+IHRoaXMubGVuZ3RoIHx8IHRoaXMuY21wKG51bSkgPCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkaXY6IG5ldyBCTigwKSxcbiAgICAgICAgbW9kOiB0aGlzXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFZlcnkgc2hvcnQgcmVkdWN0aW9uXG4gICAgaWYgKG51bS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmIChtb2RlID09PSAnZGl2Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogdGhpcy5kaXZuKG51bS53b3Jkc1swXSksXG4gICAgICAgICAgbW9kOiBudWxsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGlmIChtb2RlID09PSAnbW9kJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRpdjogbnVsbCxcbiAgICAgICAgICBtb2Q6IG5ldyBCTih0aGlzLm1vZG4obnVtLndvcmRzWzBdKSlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGl2OiB0aGlzLmRpdm4obnVtLndvcmRzWzBdKSxcbiAgICAgICAgbW9kOiBuZXcgQk4odGhpcy5tb2RuKG51bS53b3Jkc1swXSkpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl93b3JkRGl2KG51bSwgbW9kZSk7XG4gIH07XG5cbiAgLy8gRmluZCBgdGhpc2AgLyBgbnVtYFxuICBCTi5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24gZGl2IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5kaXZtb2QobnVtLCAnZGl2JywgZmFsc2UpLmRpdjtcbiAgfTtcblxuICAvLyBGaW5kIGB0aGlzYCAlIGBudW1gXG4gIEJOLnByb3RvdHlwZS5tb2QgPSBmdW5jdGlvbiBtb2QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmRpdm1vZChudW0sICdtb2QnLCBmYWxzZSkubW9kO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS51bW9kID0gZnVuY3Rpb24gdW1vZCAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuZGl2bW9kKG51bSwgJ21vZCcsIHRydWUpLm1vZDtcbiAgfTtcblxuICAvLyBGaW5kIFJvdW5kKGB0aGlzYCAvIGBudW1gKVxuICBCTi5wcm90b3R5cGUuZGl2Um91bmQgPSBmdW5jdGlvbiBkaXZSb3VuZCAobnVtKSB7XG4gICAgdmFyIGRtID0gdGhpcy5kaXZtb2QobnVtKTtcblxuICAgIC8vIEZhc3QgY2FzZSAtIGV4YWN0IGRpdmlzaW9uXG4gICAgaWYgKGRtLm1vZC5pc1plcm8oKSkgcmV0dXJuIGRtLmRpdjtcblxuICAgIHZhciBtb2QgPSBkbS5kaXYubmVnYXRpdmUgIT09IDAgPyBkbS5tb2QuaXN1YihudW0pIDogZG0ubW9kO1xuXG4gICAgdmFyIGhhbGYgPSBudW0udXNocm4oMSk7XG4gICAgdmFyIHIyID0gbnVtLmFuZGxuKDEpO1xuICAgIHZhciBjbXAgPSBtb2QuY21wKGhhbGYpO1xuXG4gICAgLy8gUm91bmQgZG93blxuICAgIGlmIChjbXAgPCAwIHx8IHIyID09PSAxICYmIGNtcCA9PT0gMCkgcmV0dXJuIGRtLmRpdjtcblxuICAgIC8vIFJvdW5kIHVwXG4gICAgcmV0dXJuIGRtLmRpdi5uZWdhdGl2ZSAhPT0gMCA/IGRtLmRpdi5pc3VibigxKSA6IGRtLmRpdi5pYWRkbigxKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubW9kbiA9IGZ1bmN0aW9uIG1vZG4gKG51bSkge1xuICAgIGFzc2VydChudW0gPD0gMHgzZmZmZmZmKTtcbiAgICB2YXIgcCA9ICgxIDw8IDI2KSAlIG51bTtcblxuICAgIHZhciBhY2MgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBhY2MgPSAocCAqIGFjYyArICh0aGlzLndvcmRzW2ldIHwgMCkpICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiBhY2M7XG4gIH07XG5cbiAgLy8gSW4tcGxhY2UgZGl2aXNpb24gYnkgbnVtYmVyXG4gIEJOLnByb3RvdHlwZS5pZGl2biA9IGZ1bmN0aW9uIGlkaXZuIChudW0pIHtcbiAgICBhc3NlcnQobnVtIDw9IDB4M2ZmZmZmZik7XG5cbiAgICB2YXIgY2FycnkgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgdyA9ICh0aGlzLndvcmRzW2ldIHwgMCkgKyBjYXJyeSAqIDB4NDAwMDAwMDtcbiAgICAgIHRoaXMud29yZHNbaV0gPSAodyAvIG51bSkgfCAwO1xuICAgICAgY2FycnkgPSB3ICUgbnVtO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnN0cmlwKCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmRpdm4gPSBmdW5jdGlvbiBkaXZuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmlkaXZuKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmVnY2QgPSBmdW5jdGlvbiBlZ2NkIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgeCA9IHRoaXM7XG4gICAgdmFyIHkgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoeC5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgeCA9IHgudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeCA9IHguY2xvbmUoKTtcbiAgICB9XG5cbiAgICAvLyBBICogeCArIEIgKiB5ID0geFxuICAgIHZhciBBID0gbmV3IEJOKDEpO1xuICAgIHZhciBCID0gbmV3IEJOKDApO1xuXG4gICAgLy8gQyAqIHggKyBEICogeSA9IHlcbiAgICB2YXIgQyA9IG5ldyBCTigwKTtcbiAgICB2YXIgRCA9IG5ldyBCTigxKTtcblxuICAgIHZhciBnID0gMDtcblxuICAgIHdoaWxlICh4LmlzRXZlbigpICYmIHkuaXNFdmVuKCkpIHtcbiAgICAgIHguaXVzaHJuKDEpO1xuICAgICAgeS5pdXNocm4oMSk7XG4gICAgICArK2c7XG4gICAgfVxuXG4gICAgdmFyIHlwID0geS5jbG9uZSgpO1xuICAgIHZhciB4cCA9IHguY2xvbmUoKTtcblxuICAgIHdoaWxlICgheC5pc1plcm8oKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKHgud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICB4Lml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoQS5pc09kZCgpIHx8IEIuaXNPZGQoKSkge1xuICAgICAgICAgICAgQS5pYWRkKHlwKTtcbiAgICAgICAgICAgIEIuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQS5pdXNocm4oMSk7XG4gICAgICAgICAgQi5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaiA9IDAsIGptID0gMTsgKHkud29yZHNbMF0gJiBqbSkgPT09IDAgJiYgaiA8IDI2OyArK2osIGptIDw8PSAxKTtcbiAgICAgIGlmIChqID4gMCkge1xuICAgICAgICB5Lml1c2hybihqKTtcbiAgICAgICAgd2hpbGUgKGotLSA+IDApIHtcbiAgICAgICAgICBpZiAoQy5pc09kZCgpIHx8IEQuaXNPZGQoKSkge1xuICAgICAgICAgICAgQy5pYWRkKHlwKTtcbiAgICAgICAgICAgIEQuaXN1Yih4cCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgQy5pdXNocm4oMSk7XG4gICAgICAgICAgRC5pdXNocm4oMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHguY21wKHkpID49IDApIHtcbiAgICAgICAgeC5pc3ViKHkpO1xuICAgICAgICBBLmlzdWIoQyk7XG4gICAgICAgIEIuaXN1YihEKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHkuaXN1Yih4KTtcbiAgICAgICAgQy5pc3ViKEEpO1xuICAgICAgICBELmlzdWIoQik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGE6IEMsXG4gICAgICBiOiBELFxuICAgICAgZ2NkOiB5Lml1c2hsbihnKVxuICAgIH07XG4gIH07XG5cbiAgLy8gVGhpcyBpcyByZWR1Y2VkIGluY2FybmF0aW9uIG9mIHRoZSBiaW5hcnkgRUVBXG4gIC8vIGFib3ZlLCBkZXNpZ25hdGVkIHRvIGludmVydCBtZW1iZXJzIG9mIHRoZVxuICAvLyBfcHJpbWVfIGZpZWxkcyBGKHApIGF0IGEgbWF4aW1hbCBzcGVlZFxuICBCTi5wcm90b3R5cGUuX2ludm1wID0gZnVuY3Rpb24gX2ludm1wIChwKSB7XG4gICAgYXNzZXJ0KHAubmVnYXRpdmUgPT09IDApO1xuICAgIGFzc2VydCghcC5pc1plcm8oKSk7XG5cbiAgICB2YXIgYSA9IHRoaXM7XG4gICAgdmFyIGIgPSBwLmNsb25lKCk7XG5cbiAgICBpZiAoYS5uZWdhdGl2ZSAhPT0gMCkge1xuICAgICAgYSA9IGEudW1vZChwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGEuY2xvbmUoKTtcbiAgICB9XG5cbiAgICB2YXIgeDEgPSBuZXcgQk4oMSk7XG4gICAgdmFyIHgyID0gbmV3IEJOKDApO1xuXG4gICAgdmFyIGRlbHRhID0gYi5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKGEuY21wbigxKSA+IDAgJiYgYi5jbXBuKDEpID4gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGltID0gMTsgKGEud29yZHNbMF0gJiBpbSkgPT09IDAgJiYgaSA8IDI2OyArK2ksIGltIDw8PSAxKTtcbiAgICAgIGlmIChpID4gMCkge1xuICAgICAgICBhLml1c2hybihpKTtcbiAgICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgICBpZiAoeDEuaXNPZGQoKSkge1xuICAgICAgICAgICAgeDEuaWFkZChkZWx0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgeDEuaXVzaHJuKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGogPSAwLCBqbSA9IDE7IChiLndvcmRzWzBdICYgam0pID09PSAwICYmIGogPCAyNjsgKytqLCBqbSA8PD0gMSk7XG4gICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgYi5pdXNocm4oaik7XG4gICAgICAgIHdoaWxlIChqLS0gPiAwKSB7XG4gICAgICAgICAgaWYgKHgyLmlzT2RkKCkpIHtcbiAgICAgICAgICAgIHgyLmlhZGQoZGVsdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHgyLml1c2hybigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYS5jbXAoYikgPj0gMCkge1xuICAgICAgICBhLmlzdWIoYik7XG4gICAgICAgIHgxLmlzdWIoeDIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYi5pc3ViKGEpO1xuICAgICAgICB4Mi5pc3ViKHgxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzO1xuICAgIGlmIChhLmNtcG4oMSkgPT09IDApIHtcbiAgICAgIHJlcyA9IHgxO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMgPSB4MjtcbiAgICB9XG5cbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZChwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5nY2QgPSBmdW5jdGlvbiBnY2QgKG51bSkge1xuICAgIGlmICh0aGlzLmlzWmVybygpKSByZXR1cm4gbnVtLmFicygpO1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiB0aGlzLmFicygpO1xuXG4gICAgdmFyIGEgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIGIgPSBudW0uY2xvbmUoKTtcbiAgICBhLm5lZ2F0aXZlID0gMDtcbiAgICBiLm5lZ2F0aXZlID0gMDtcblxuICAgIC8vIFJlbW92ZSBjb21tb24gZmFjdG9yIG9mIHR3b1xuICAgIGZvciAodmFyIHNoaWZ0ID0gMDsgYS5pc0V2ZW4oKSAmJiBiLmlzRXZlbigpOyBzaGlmdCsrKSB7XG4gICAgICBhLml1c2hybigxKTtcbiAgICAgIGIuaXVzaHJuKDEpO1xuICAgIH1cblxuICAgIGRvIHtcbiAgICAgIHdoaWxlIChhLmlzRXZlbigpKSB7XG4gICAgICAgIGEuaXVzaHJuKDEpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGIuaXNFdmVuKCkpIHtcbiAgICAgICAgYi5pdXNocm4oMSk7XG4gICAgICB9XG5cbiAgICAgIHZhciByID0gYS5jbXAoYik7XG4gICAgICBpZiAociA8IDApIHtcbiAgICAgICAgLy8gU3dhcCBgYWAgYW5kIGBiYCB0byBtYWtlIGBhYCBhbHdheXMgYmlnZ2VyIHRoYW4gYGJgXG4gICAgICAgIHZhciB0ID0gYTtcbiAgICAgICAgYSA9IGI7XG4gICAgICAgIGIgPSB0O1xuICAgICAgfSBlbHNlIGlmIChyID09PSAwIHx8IGIuY21wbigxKSA9PT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgYS5pc3ViKGIpO1xuICAgIH0gd2hpbGUgKHRydWUpO1xuXG4gICAgcmV0dXJuIGIuaXVzaGxuKHNoaWZ0KTtcbiAgfTtcblxuICAvLyBJbnZlcnQgbnVtYmVyIGluIHRoZSBmaWVsZCBGKG51bSlcbiAgQk4ucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5lZ2NkKG51bSkuYS51bW9kKG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uIGlzRXZlbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLndvcmRzWzBdICYgMSkgPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzT2RkID0gZnVuY3Rpb24gaXNPZGQgKCkge1xuICAgIHJldHVybiAodGhpcy53b3Jkc1swXSAmIDEpID09PSAxO1xuICB9O1xuXG4gIC8vIEFuZCBmaXJzdCB3b3JkIGFuZCBudW1cbiAgQk4ucHJvdG90eXBlLmFuZGxuID0gZnVuY3Rpb24gYW5kbG4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLndvcmRzWzBdICYgbnVtO1xuICB9O1xuXG4gIC8vIEluY3JlbWVudCBhdCB0aGUgYml0IHBvc2l0aW9uIGluLWxpbmVcbiAgQk4ucHJvdG90eXBlLmJpbmNuID0gZnVuY3Rpb24gYmluY24gKGJpdCkge1xuICAgIGFzc2VydCh0eXBlb2YgYml0ID09PSAnbnVtYmVyJyk7XG4gICAgdmFyIHIgPSBiaXQgJSAyNjtcbiAgICB2YXIgcyA9IChiaXQgLSByKSAvIDI2O1xuICAgIHZhciBxID0gMSA8PCByO1xuXG4gICAgLy8gRmFzdCBjYXNlOiBiaXQgaXMgbXVjaCBoaWdoZXIgdGhhbiBhbGwgZXhpc3Rpbmcgd29yZHNcbiAgICBpZiAodGhpcy5sZW5ndGggPD0gcykge1xuICAgICAgdGhpcy5fZXhwYW5kKHMgKyAxKTtcbiAgICAgIHRoaXMud29yZHNbc10gfD0gcTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBiaXQgYW5kIHByb3BhZ2F0ZSwgaWYgbmVlZGVkXG4gICAgdmFyIGNhcnJ5ID0gcTtcbiAgICBmb3IgKHZhciBpID0gczsgY2FycnkgIT09IDAgJiYgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3ID0gdGhpcy53b3Jkc1tpXSB8IDA7XG4gICAgICB3ICs9IGNhcnJ5O1xuICAgICAgY2FycnkgPSB3ID4+PiAyNjtcbiAgICAgIHcgJj0gMHgzZmZmZmZmO1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IHc7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgdGhpcy53b3Jkc1tpXSA9IGNhcnJ5O1xuICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmlzWmVybyA9IGZ1bmN0aW9uIGlzWmVybyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubGVuZ3RoID09PSAxICYmIHRoaXMud29yZHNbMF0gPT09IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmNtcG4gPSBmdW5jdGlvbiBjbXBuIChudW0pIHtcbiAgICB2YXIgbmVnYXRpdmUgPSBudW0gPCAwO1xuXG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgIW5lZ2F0aXZlKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbmVnYXRpdmUpIHJldHVybiAxO1xuXG4gICAgdGhpcy5zdHJpcCgpO1xuXG4gICAgdmFyIHJlcztcbiAgICBpZiAodGhpcy5sZW5ndGggPiAxKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobmVnYXRpdmUpIHtcbiAgICAgICAgbnVtID0gLW51bTtcbiAgICAgIH1cblxuICAgICAgYXNzZXJ0KG51bSA8PSAweDNmZmZmZmYsICdOdW1iZXIgaXMgdG9vIGJpZycpO1xuXG4gICAgICB2YXIgdyA9IHRoaXMud29yZHNbMF0gfCAwO1xuICAgICAgcmVzID0gdyA9PT0gbnVtID8gMCA6IHcgPCBudW0gPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmICh0aGlzLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gLXJlcyB8IDA7XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICAvLyBDb21wYXJlIHR3byBudW1iZXJzIGFuZCByZXR1cm46XG4gIC8vIDEgLSBpZiBgdGhpc2AgPiBgbnVtYFxuICAvLyAwIC0gaWYgYHRoaXNgID09IGBudW1gXG4gIC8vIC0xIC0gaWYgYHRoaXNgIDwgYG51bWBcbiAgQk4ucHJvdG90eXBlLmNtcCA9IGZ1bmN0aW9uIGNtcCAobnVtKSB7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgIT09IDAgJiYgbnVtLm5lZ2F0aXZlID09PSAwKSByZXR1cm4gLTE7XG4gICAgaWYgKHRoaXMubmVnYXRpdmUgPT09IDAgJiYgbnVtLm5lZ2F0aXZlICE9PSAwKSByZXR1cm4gMTtcblxuICAgIHZhciByZXMgPSB0aGlzLnVjbXAobnVtKTtcbiAgICBpZiAodGhpcy5uZWdhdGl2ZSAhPT0gMCkgcmV0dXJuIC1yZXMgfCAwO1xuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgLy8gVW5zaWduZWQgY29tcGFyaXNvblxuICBCTi5wcm90b3R5cGUudWNtcCA9IGZ1bmN0aW9uIHVjbXAgKG51bSkge1xuICAgIC8vIEF0IHRoaXMgcG9pbnQgYm90aCBudW1iZXJzIGhhdmUgdGhlIHNhbWUgc2lnblxuICAgIGlmICh0aGlzLmxlbmd0aCA+IG51bS5sZW5ndGgpIHJldHVybiAxO1xuICAgIGlmICh0aGlzLmxlbmd0aCA8IG51bS5sZW5ndGgpIHJldHVybiAtMTtcblxuICAgIHZhciByZXMgPSAwO1xuICAgIGZvciAodmFyIGkgPSB0aGlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgYSA9IHRoaXMud29yZHNbaV0gfCAwO1xuICAgICAgdmFyIGIgPSBudW0ud29yZHNbaV0gfCAwO1xuXG4gICAgICBpZiAoYSA9PT0gYikgY29udGludWU7XG4gICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgcmVzID0gLTE7XG4gICAgICB9IGVsc2UgaWYgKGEgPiBiKSB7XG4gICAgICAgIHJlcyA9IDE7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZ3RuID0gZnVuY3Rpb24gZ3RuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IDE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ID0gZnVuY3Rpb24gZ3QgKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcChudW0pID09PSAxO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5ndGVuID0gZnVuY3Rpb24gZ3RlbiAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wbihudW0pID49IDA7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmd0ZSA9IGZ1bmN0aW9uIGd0ZSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPj0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRuID0gZnVuY3Rpb24gbHRuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPT09IC0xO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5sdCA9IGZ1bmN0aW9uIGx0IChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA9PT0gLTE7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmx0ZW4gPSBmdW5jdGlvbiBsdGVuIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXBuKG51bSkgPD0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUubHRlID0gZnVuY3Rpb24gbHRlIChudW0pIHtcbiAgICByZXR1cm4gdGhpcy5jbXAobnVtKSA8PSAwO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5lcW4gPSBmdW5jdGlvbiBlcW4gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmNtcG4obnVtKSA9PT0gMDtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAobnVtKSB7XG4gICAgcmV0dXJuIHRoaXMuY21wKG51bSkgPT09IDA7XG4gIH07XG5cbiAgLy9cbiAgLy8gQSByZWR1Y2UgY29udGV4dCwgY291bGQgYmUgdXNpbmcgbW9udGdvbWVyeSBvciBzb21ldGhpbmcgYmV0dGVyLCBkZXBlbmRpbmdcbiAgLy8gb24gdGhlIGBtYCBpdHNlbGYuXG4gIC8vXG4gIEJOLnJlZCA9IGZ1bmN0aW9uIHJlZCAobnVtKSB7XG4gICAgcmV0dXJuIG5ldyBSZWQobnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUudG9SZWQgPSBmdW5jdGlvbiB0b1JlZCAoY3R4KSB7XG4gICAgYXNzZXJ0KCF0aGlzLnJlZCwgJ0FscmVhZHkgYSBudW1iZXIgaW4gcmVkdWN0aW9uIGNvbnRleHQnKTtcbiAgICBhc3NlcnQodGhpcy5uZWdhdGl2ZSA9PT0gMCwgJ3JlZCB3b3JrcyBvbmx5IHdpdGggcG9zaXRpdmVzJyk7XG4gICAgcmV0dXJuIGN0eC5jb252ZXJ0VG8odGhpcykuX2ZvcmNlUmVkKGN0eCk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLmZyb21SZWQgPSBmdW5jdGlvbiBmcm9tUmVkICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdmcm9tUmVkIHdvcmtzIG9ubHkgd2l0aCBudW1iZXJzIGluIHJlZHVjdGlvbiBjb250ZXh0Jyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmNvbnZlcnRGcm9tKHRoaXMpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5fZm9yY2VSZWQgPSBmdW5jdGlvbiBfZm9yY2VSZWQgKGN0eCkge1xuICAgIHRoaXMucmVkID0gY3R4O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5mb3JjZVJlZCA9IGZ1bmN0aW9uIGZvcmNlUmVkIChjdHgpIHtcbiAgICBhc3NlcnQoIXRoaXMucmVkLCAnQWxyZWFkeSBhIG51bWJlciBpbiByZWR1Y3Rpb24gY29udGV4dCcpO1xuICAgIHJldHVybiB0aGlzLl9mb3JjZVJlZChjdHgpO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRBZGQgPSBmdW5jdGlvbiByZWRBZGQgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZEFkZCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICByZXR1cm4gdGhpcy5yZWQuYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElBZGQgPSBmdW5jdGlvbiByZWRJQWRkIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJQWRkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pYWRkKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFN1YiA9IGZ1bmN0aW9uIHJlZFN1YiAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3ViIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSVN1YiA9IGZ1bmN0aW9uIHJlZElTdWIgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZElTdWIgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLmlzdWIodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkU2hsID0gZnVuY3Rpb24gcmVkU2hsIChudW0pIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRTaGwgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNobCh0aGlzLCBudW0pO1xuICB9O1xuXG4gIEJOLnByb3RvdHlwZS5yZWRNdWwgPSBmdW5jdGlvbiByZWRNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5tdWwodGhpcywgbnVtKTtcbiAgfTtcblxuICBCTi5wcm90b3R5cGUucmVkSU11bCA9IGZ1bmN0aW9uIHJlZElNdWwgKG51bSkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZE11bCB3b3JrcyBvbmx5IHdpdGggcmVkIG51bWJlcnMnKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5Mih0aGlzLCBudW0pO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbXVsKHRoaXMsIG51bSk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFNxciA9IGZ1bmN0aW9uIHJlZFNxciAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5zcXIodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZElTcXIgPSBmdW5jdGlvbiByZWRJU3FyICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJU3FyIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pc3FyKHRoaXMpO1xuICB9O1xuXG4gIC8vIFNxdWFyZSByb290IG92ZXIgcFxuICBCTi5wcm90b3R5cGUucmVkU3FydCA9IGZ1bmN0aW9uIHJlZFNxcnQgKCkge1xuICAgIGFzc2VydCh0aGlzLnJlZCwgJ3JlZFNxcnQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gICAgdGhpcy5yZWQuX3ZlcmlmeTEodGhpcyk7XG4gICAgcmV0dXJuIHRoaXMucmVkLnNxcnQodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZEludm0gPSBmdW5jdGlvbiByZWRJbnZtICgpIHtcbiAgICBhc3NlcnQodGhpcy5yZWQsICdyZWRJbnZtIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5pbnZtKHRoaXMpO1xuICB9O1xuXG4gIC8vIFJldHVybiBuZWdhdGl2ZSBjbG9uZSBvZiBgdGhpc2AgJSBgcmVkIG1vZHVsb2BcbiAgQk4ucHJvdG90eXBlLnJlZE5lZyA9IGZ1bmN0aW9uIHJlZE5lZyAoKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkLCAncmVkTmVnIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICAgIHRoaXMucmVkLl92ZXJpZnkxKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnJlZC5uZWcodGhpcyk7XG4gIH07XG5cbiAgQk4ucHJvdG90eXBlLnJlZFBvdyA9IGZ1bmN0aW9uIHJlZFBvdyAobnVtKSB7XG4gICAgYXNzZXJ0KHRoaXMucmVkICYmICFudW0ucmVkLCAncmVkUG93KG5vcm1hbE51bSknKTtcbiAgICB0aGlzLnJlZC5fdmVyaWZ5MSh0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5yZWQucG93KHRoaXMsIG51bSk7XG4gIH07XG5cbiAgLy8gUHJpbWUgbnVtYmVycyB3aXRoIGVmZmljaWVudCByZWR1Y3Rpb25cbiAgdmFyIHByaW1lcyA9IHtcbiAgICBrMjU2OiBudWxsLFxuICAgIHAyMjQ6IG51bGwsXG4gICAgcDE5MjogbnVsbCxcbiAgICBwMjU1MTk6IG51bGxcbiAgfTtcblxuICAvLyBQc2V1ZG8tTWVyc2VubmUgcHJpbWVcbiAgZnVuY3Rpb24gTVByaW1lIChuYW1lLCBwKSB7XG4gICAgLy8gUCA9IDIgXiBOIC0gS1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5wID0gbmV3IEJOKHAsIDE2KTtcbiAgICB0aGlzLm4gPSB0aGlzLnAuYml0TGVuZ3RoKCk7XG4gICAgdGhpcy5rID0gbmV3IEJOKDEpLml1c2hsbih0aGlzLm4pLmlzdWIodGhpcy5wKTtcblxuICAgIHRoaXMudG1wID0gdGhpcy5fdG1wKCk7XG4gIH1cblxuICBNUHJpbWUucHJvdG90eXBlLl90bXAgPSBmdW5jdGlvbiBfdG1wICgpIHtcbiAgICB2YXIgdG1wID0gbmV3IEJOKG51bGwpO1xuICAgIHRtcC53b3JkcyA9IG5ldyBBcnJheShNYXRoLmNlaWwodGhpcy5uIC8gMTMpKTtcbiAgICByZXR1cm4gdG1wO1xuICB9O1xuXG4gIE1QcmltZS5wcm90b3R5cGUuaXJlZHVjZSA9IGZ1bmN0aW9uIGlyZWR1Y2UgKG51bSkge1xuICAgIC8vIEFzc3VtZXMgdGhhdCBgbnVtYCBpcyBsZXNzIHRoYW4gYFBeMmBcbiAgICAvLyBudW0gPSBISSAqICgyIF4gTiAtIEspICsgSEkgKiBLICsgTE8gPSBISSAqIEsgKyBMTyAobW9kIFApXG4gICAgdmFyIHIgPSBudW07XG4gICAgdmFyIHJsZW47XG5cbiAgICBkbyB7XG4gICAgICB0aGlzLnNwbGl0KHIsIHRoaXMudG1wKTtcbiAgICAgIHIgPSB0aGlzLmltdWxLKHIpO1xuICAgICAgciA9IHIuaWFkZCh0aGlzLnRtcCk7XG4gICAgICBybGVuID0gci5iaXRMZW5ndGgoKTtcbiAgICB9IHdoaWxlIChybGVuID4gdGhpcy5uKTtcblxuICAgIHZhciBjbXAgPSBybGVuIDwgdGhpcy5uID8gLTEgOiByLnVjbXAodGhpcy5wKTtcbiAgICBpZiAoY21wID09PSAwKSB7XG4gICAgICByLndvcmRzWzBdID0gMDtcbiAgICAgIHIubGVuZ3RoID0gMTtcbiAgICB9IGVsc2UgaWYgKGNtcCA+IDApIHtcbiAgICAgIHIuaXN1Yih0aGlzLnApO1xuICAgIH0gZWxzZSB7XG4gICAgICByLnN0cmlwKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgTVByaW1lLnByb3RvdHlwZS5zcGxpdCA9IGZ1bmN0aW9uIHNwbGl0IChpbnB1dCwgb3V0KSB7XG4gICAgaW5wdXQuaXVzaHJuKHRoaXMubiwgMCwgb3V0KTtcbiAgfTtcblxuICBNUHJpbWUucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIHJldHVybiBudW0uaW11bCh0aGlzLmspO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEsyNTYgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdrMjU2JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZSBmZmZmZmMyZicpO1xuICB9XG4gIGluaGVyaXRzKEsyNTYsIE1QcmltZSk7XG5cbiAgSzI1Ni5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdCAoaW5wdXQsIG91dHB1dCkge1xuICAgIC8vIDI1NiA9IDkgKiAyNiArIDIyXG4gICAgdmFyIG1hc2sgPSAweDNmZmZmZjtcblxuICAgIHZhciBvdXRMZW4gPSBNYXRoLm1pbihpbnB1dC5sZW5ndGgsIDkpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0TGVuOyBpKyspIHtcbiAgICAgIG91dHB1dC53b3Jkc1tpXSA9IGlucHV0LndvcmRzW2ldO1xuICAgIH1cbiAgICBvdXRwdXQubGVuZ3RoID0gb3V0TGVuO1xuXG4gICAgaWYgKGlucHV0Lmxlbmd0aCA8PSA5KSB7XG4gICAgICBpbnB1dC53b3Jkc1swXSA9IDA7XG4gICAgICBpbnB1dC5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNoaWZ0IGJ5IDkgbGltYnNcbiAgICB2YXIgcHJldiA9IGlucHV0LndvcmRzWzldO1xuICAgIG91dHB1dC53b3Jkc1tvdXRwdXQubGVuZ3RoKytdID0gcHJldiAmIG1hc2s7XG5cbiAgICBmb3IgKGkgPSAxMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmV4dCA9IGlucHV0LndvcmRzW2ldIHwgMDtcbiAgICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSAoKG5leHQgJiBtYXNrKSA8PCA0KSB8IChwcmV2ID4+PiAyMik7XG4gICAgICBwcmV2ID0gbmV4dDtcbiAgICB9XG4gICAgcHJldiA+Pj49IDIyO1xuICAgIGlucHV0LndvcmRzW2kgLSAxMF0gPSBwcmV2O1xuICAgIGlmIChwcmV2ID09PSAwICYmIGlucHV0Lmxlbmd0aCA+IDEwKSB7XG4gICAgICBpbnB1dC5sZW5ndGggLT0gMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0Lmxlbmd0aCAtPSA5O1xuICAgIH1cbiAgfTtcblxuICBLMjU2LnByb3RvdHlwZS5pbXVsSyA9IGZ1bmN0aW9uIGltdWxLIChudW0pIHtcbiAgICAvLyBLID0gMHgxMDAwMDAzZDEgPSBbIDB4NDAsIDB4M2QxIF1cbiAgICBudW0ud29yZHNbbnVtLmxlbmd0aF0gPSAwO1xuICAgIG51bS53b3Jkc1tudW0ubGVuZ3RoICsgMV0gPSAwO1xuICAgIG51bS5sZW5ndGggKz0gMjtcblxuICAgIC8vIGJvdW5kZWQgYXQ6IDB4NDAgKiAweDNmZmZmZmYgKyAweDNkMCA9IDB4MTAwMDAwMzkwXG4gICAgdmFyIGxvID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHcgPSBudW0ud29yZHNbaV0gfCAwO1xuICAgICAgbG8gKz0gdyAqIDB4M2QxO1xuICAgICAgbnVtLndvcmRzW2ldID0gbG8gJiAweDNmZmZmZmY7XG4gICAgICBsbyA9IHcgKiAweDQwICsgKChsbyAvIDB4NDAwMDAwMCkgfCAwKTtcbiAgICB9XG5cbiAgICAvLyBGYXN0IGxlbmd0aCByZWR1Y3Rpb25cbiAgICBpZiAobnVtLndvcmRzW251bS5sZW5ndGggLSAxXSA9PT0gMCkge1xuICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgaWYgKG51bS53b3Jkc1tudW0ubGVuZ3RoIC0gMV0gPT09IDApIHtcbiAgICAgICAgbnVtLmxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFAyMjQgKCkge1xuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICdwMjI0JyxcbiAgICAgICdmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiBmZmZmZmZmZiAwMDAwMDAwMCAwMDAwMDAwMCAwMDAwMDAwMScpO1xuICB9XG4gIGluaGVyaXRzKFAyMjQsIE1QcmltZSk7XG5cbiAgZnVuY3Rpb24gUDE5MiAoKSB7XG4gICAgTVByaW1lLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgJ3AxOTInLFxuICAgICAgJ2ZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZmIGZmZmZmZmZlIGZmZmZmZmZmIGZmZmZmZmZmJyk7XG4gIH1cbiAgaW5oZXJpdHMoUDE5MiwgTVByaW1lKTtcblxuICBmdW5jdGlvbiBQMjU1MTkgKCkge1xuICAgIC8vIDIgXiAyNTUgLSAxOVxuICAgIE1QcmltZS5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgICcyNTUxOScsXG4gICAgICAnN2ZmZmZmZmZmZmZmZmZmZiBmZmZmZmZmZmZmZmZmZmZmIGZmZmZmZmZmZmZmZmZmZmYgZmZmZmZmZmZmZmZmZmZlZCcpO1xuICB9XG4gIGluaGVyaXRzKFAyNTUxOSwgTVByaW1lKTtcblxuICBQMjU1MTkucHJvdG90eXBlLmltdWxLID0gZnVuY3Rpb24gaW11bEsgKG51bSkge1xuICAgIC8vIEsgPSAweDEzXG4gICAgdmFyIGNhcnJ5ID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhpID0gKG51bS53b3Jkc1tpXSB8IDApICogMHgxMyArIGNhcnJ5O1xuICAgICAgdmFyIGxvID0gaGkgJiAweDNmZmZmZmY7XG4gICAgICBoaSA+Pj49IDI2O1xuXG4gICAgICBudW0ud29yZHNbaV0gPSBsbztcbiAgICAgIGNhcnJ5ID0gaGk7XG4gICAgfVxuICAgIGlmIChjYXJyeSAhPT0gMCkge1xuICAgICAgbnVtLndvcmRzW251bS5sZW5ndGgrK10gPSBjYXJyeTtcbiAgICB9XG4gICAgcmV0dXJuIG51bTtcbiAgfTtcblxuICAvLyBFeHBvcnRlZCBtb3N0bHkgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHVzZSBwbGFpbiBuYW1lIGluc3RlYWRcbiAgQk4uX3ByaW1lID0gZnVuY3Rpb24gcHJpbWUgKG5hbWUpIHtcbiAgICAvLyBDYWNoZWQgdmVyc2lvbiBvZiBwcmltZVxuICAgIGlmIChwcmltZXNbbmFtZV0pIHJldHVybiBwcmltZXNbbmFtZV07XG5cbiAgICB2YXIgcHJpbWU7XG4gICAgaWYgKG5hbWUgPT09ICdrMjU2Jykge1xuICAgICAgcHJpbWUgPSBuZXcgSzI1NigpO1xuICAgIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3AyMjQnKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjI0KCk7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAncDE5MicpIHtcbiAgICAgIHByaW1lID0gbmV3IFAxOTIoKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdwMjU1MTknKSB7XG4gICAgICBwcmltZSA9IG5ldyBQMjU1MTkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHByaW1lICcgKyBuYW1lKTtcbiAgICB9XG4gICAgcHJpbWVzW25hbWVdID0gcHJpbWU7XG5cbiAgICByZXR1cm4gcHJpbWU7XG4gIH07XG5cbiAgLy9cbiAgLy8gQmFzZSByZWR1Y3Rpb24gZW5naW5lXG4gIC8vXG4gIGZ1bmN0aW9uIFJlZCAobSkge1xuICAgIGlmICh0eXBlb2YgbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBwcmltZSA9IEJOLl9wcmltZShtKTtcbiAgICAgIHRoaXMubSA9IHByaW1lLnA7XG4gICAgICB0aGlzLnByaW1lID0gcHJpbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2VydChtLmd0bigxKSwgJ21vZHVsdXMgbXVzdCBiZSBncmVhdGVyIHRoYW4gMScpO1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMucHJpbWUgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIFJlZC5wcm90b3R5cGUuX3ZlcmlmeTEgPSBmdW5jdGlvbiBfdmVyaWZ5MSAoYSkge1xuICAgIGFzc2VydChhLm5lZ2F0aXZlID09PSAwLCAncmVkIHdvcmtzIG9ubHkgd2l0aCBwb3NpdGl2ZXMnKTtcbiAgICBhc3NlcnQoYS5yZWQsICdyZWQgd29ya3Mgb25seSB3aXRoIHJlZCBudW1iZXJzJyk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5fdmVyaWZ5MiA9IGZ1bmN0aW9uIF92ZXJpZnkyIChhLCBiKSB7XG4gICAgYXNzZXJ0KChhLm5lZ2F0aXZlIHwgYi5uZWdhdGl2ZSkgPT09IDAsICdyZWQgd29ya3Mgb25seSB3aXRoIHBvc2l0aXZlcycpO1xuICAgIGFzc2VydChhLnJlZCAmJiBhLnJlZCA9PT0gYi5yZWQsXG4gICAgICAncmVkIHdvcmtzIG9ubHkgd2l0aCByZWQgbnVtYmVycycpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuaW1vZCA9IGZ1bmN0aW9uIGltb2QgKGEpIHtcbiAgICBpZiAodGhpcy5wcmltZSkgcmV0dXJuIHRoaXMucHJpbWUuaXJlZHVjZShhKS5fZm9yY2VSZWQodGhpcyk7XG4gICAgcmV0dXJuIGEudW1vZCh0aGlzLm0pLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLm5lZyA9IGZ1bmN0aW9uIG5lZyAoYSkge1xuICAgIGlmIChhLmlzWmVybygpKSB7XG4gICAgICByZXR1cm4gYS5jbG9uZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm0uc3ViKGEpLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG5cbiAgICB2YXIgcmVzID0gYS5hZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlhZGQgPSBmdW5jdGlvbiBpYWRkIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlhZGQoYik7XG4gICAgaWYgKHJlcy5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMuaXN1Yih0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3ViID0gZnVuY3Rpb24gc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLnN1YihiKTtcbiAgICBpZiAocmVzLmNtcG4oMCkgPCAwKSB7XG4gICAgICByZXMuaWFkZCh0aGlzLm0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzLl9mb3JjZVJlZCh0aGlzKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzdWIgPSBmdW5jdGlvbiBpc3ViIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcblxuICAgIHZhciByZXMgPSBhLmlzdWIoYik7XG4gICAgaWYgKHJlcy5jbXBuKDApIDwgMCkge1xuICAgICAgcmVzLmlhZGQodGhpcy5tKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLnNobCA9IGZ1bmN0aW9uIHNobCAoYSwgbnVtKSB7XG4gICAgdGhpcy5fdmVyaWZ5MShhKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEudXNobG4obnVtKSk7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIHRoaXMuX3ZlcmlmeTIoYSwgYik7XG4gICAgcmV0dXJuIHRoaXMuaW1vZChhLmltdWwoYikpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUubXVsID0gZnVuY3Rpb24gbXVsIChhLCBiKSB7XG4gICAgdGhpcy5fdmVyaWZ5MihhLCBiKTtcbiAgICByZXR1cm4gdGhpcy5pbW9kKGEubXVsKGIpKTtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmlzcXIgPSBmdW5jdGlvbiBpc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMuaW11bChhLCBhLmNsb25lKCkpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FyID0gZnVuY3Rpb24gc3FyIChhKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsKGEsIGEpO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuc3FydCA9IGZ1bmN0aW9uIHNxcnQgKGEpIHtcbiAgICBpZiAoYS5pc1plcm8oKSkgcmV0dXJuIGEuY2xvbmUoKTtcblxuICAgIHZhciBtb2QzID0gdGhpcy5tLmFuZGxuKDMpO1xuICAgIGFzc2VydChtb2QzICUgMiA9PT0gMSk7XG5cbiAgICAvLyBGYXN0IGNhc2VcbiAgICBpZiAobW9kMyA9PT0gMykge1xuICAgICAgdmFyIHBvdyA9IHRoaXMubS5hZGQobmV3IEJOKDEpKS5pdXNocm4oMik7XG4gICAgICByZXR1cm4gdGhpcy5wb3coYSwgcG93KTtcbiAgICB9XG5cbiAgICAvLyBUb25lbGxpLVNoYW5rcyBhbGdvcml0aG0gKFRvdGFsbHkgdW5vcHRpbWl6ZWQgYW5kIHNsb3cpXG4gICAgLy9cbiAgICAvLyBGaW5kIFEgYW5kIFMsIHRoYXQgUSAqIDIgXiBTID0gKFAgLSAxKVxuICAgIHZhciBxID0gdGhpcy5tLnN1Ym4oMSk7XG4gICAgdmFyIHMgPSAwO1xuICAgIHdoaWxlICghcS5pc1plcm8oKSAmJiBxLmFuZGxuKDEpID09PSAwKSB7XG4gICAgICBzKys7XG4gICAgICBxLml1c2hybigxKTtcbiAgICB9XG4gICAgYXNzZXJ0KCFxLmlzWmVybygpKTtcblxuICAgIHZhciBvbmUgPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgdmFyIG5PbmUgPSBvbmUucmVkTmVnKCk7XG5cbiAgICAvLyBGaW5kIHF1YWRyYXRpYyBub24tcmVzaWR1ZVxuICAgIC8vIE5PVEU6IE1heCBpcyBzdWNoIGJlY2F1c2Ugb2YgZ2VuZXJhbGl6ZWQgUmllbWFubiBoeXBvdGhlc2lzLlxuICAgIHZhciBscG93ID0gdGhpcy5tLnN1Ym4oMSkuaXVzaHJuKDEpO1xuICAgIHZhciB6ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIHogPSBuZXcgQk4oMiAqIHogKiB6KS50b1JlZCh0aGlzKTtcblxuICAgIHdoaWxlICh0aGlzLnBvdyh6LCBscG93KS5jbXAobk9uZSkgIT09IDApIHtcbiAgICAgIHoucmVkSUFkZChuT25lKTtcbiAgICB9XG5cbiAgICB2YXIgYyA9IHRoaXMucG93KHosIHEpO1xuICAgIHZhciByID0gdGhpcy5wb3coYSwgcS5hZGRuKDEpLml1c2hybigxKSk7XG4gICAgdmFyIHQgPSB0aGlzLnBvdyhhLCBxKTtcbiAgICB2YXIgbSA9IHM7XG4gICAgd2hpbGUgKHQuY21wKG9uZSkgIT09IDApIHtcbiAgICAgIHZhciB0bXAgPSB0O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IHRtcC5jbXAob25lKSAhPT0gMDsgaSsrKSB7XG4gICAgICAgIHRtcCA9IHRtcC5yZWRTcXIoKTtcbiAgICAgIH1cbiAgICAgIGFzc2VydChpIDwgbSk7XG4gICAgICB2YXIgYiA9IHRoaXMucG93KGMsIG5ldyBCTigxKS5pdXNobG4obSAtIGkgLSAxKSk7XG5cbiAgICAgIHIgPSByLnJlZE11bChiKTtcbiAgICAgIGMgPSBiLnJlZFNxcigpO1xuICAgICAgdCA9IHQucmVkTXVsKGMpO1xuICAgICAgbSA9IGk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHI7XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5pbnZtID0gZnVuY3Rpb24gaW52bSAoYSkge1xuICAgIHZhciBpbnYgPSBhLl9pbnZtcCh0aGlzLm0pO1xuICAgIGlmIChpbnYubmVnYXRpdmUgIT09IDApIHtcbiAgICAgIGludi5uZWdhdGl2ZSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbW9kKGludikucmVkTmVnKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmltb2QoaW52KTtcbiAgICB9XG4gIH07XG5cbiAgUmVkLnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3cgKGEsIG51bSkge1xuICAgIGlmIChudW0uaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgaWYgKG51bS5jbXBuKDEpID09PSAwKSByZXR1cm4gYS5jbG9uZSgpO1xuXG4gICAgdmFyIHdpbmRvd1NpemUgPSA0O1xuICAgIHZhciB3bmQgPSBuZXcgQXJyYXkoMSA8PCB3aW5kb3dTaXplKTtcbiAgICB3bmRbMF0gPSBuZXcgQk4oMSkudG9SZWQodGhpcyk7XG4gICAgd25kWzFdID0gYTtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IHduZC5sZW5ndGg7IGkrKykge1xuICAgICAgd25kW2ldID0gdGhpcy5tdWwod25kW2kgLSAxXSwgYSk7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHduZFswXTtcbiAgICB2YXIgY3VycmVudCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW4gPSAwO1xuICAgIHZhciBzdGFydCA9IG51bS5iaXRMZW5ndGgoKSAlIDI2O1xuICAgIGlmIChzdGFydCA9PT0gMCkge1xuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBudW0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciB3b3JkID0gbnVtLndvcmRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IHN0YXJ0IC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgdmFyIGJpdCA9ICh3b3JkID4+IGopICYgMTtcbiAgICAgICAgaWYgKHJlcyAhPT0gd25kWzBdKSB7XG4gICAgICAgICAgcmVzID0gdGhpcy5zcXIocmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiaXQgPT09IDAgJiYgY3VycmVudCA9PT0gMCkge1xuICAgICAgICAgIGN1cnJlbnRMZW4gPSAwO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudCA8PD0gMTtcbiAgICAgICAgY3VycmVudCB8PSBiaXQ7XG4gICAgICAgIGN1cnJlbnRMZW4rKztcbiAgICAgICAgaWYgKGN1cnJlbnRMZW4gIT09IHdpbmRvd1NpemUgJiYgKGkgIT09IDAgfHwgaiAhPT0gMCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIHJlcyA9IHRoaXMubXVsKHJlcywgd25kW2N1cnJlbnRdKTtcbiAgICAgICAgY3VycmVudExlbiA9IDA7XG4gICAgICAgIGN1cnJlbnQgPSAwO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSAyNjtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIFJlZC5wcm90b3R5cGUuY29udmVydFRvID0gZnVuY3Rpb24gY29udmVydFRvIChudW0pIHtcbiAgICB2YXIgciA9IG51bS51bW9kKHRoaXMubSk7XG5cbiAgICByZXR1cm4gciA9PT0gbnVtID8gci5jbG9uZSgpIDogcjtcbiAgfTtcblxuICBSZWQucHJvdG90eXBlLmNvbnZlcnRGcm9tID0gZnVuY3Rpb24gY29udmVydEZyb20gKG51bSkge1xuICAgIHZhciByZXMgPSBudW0uY2xvbmUoKTtcbiAgICByZXMucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9O1xuXG4gIC8vXG4gIC8vIE1vbnRnb21lcnkgbWV0aG9kIGVuZ2luZVxuICAvL1xuXG4gIEJOLm1vbnQgPSBmdW5jdGlvbiBtb250IChudW0pIHtcbiAgICByZXR1cm4gbmV3IE1vbnQobnVtKTtcbiAgfTtcblxuICBmdW5jdGlvbiBNb250IChtKSB7XG4gICAgUmVkLmNhbGwodGhpcywgbSk7XG5cbiAgICB0aGlzLnNoaWZ0ID0gdGhpcy5tLmJpdExlbmd0aCgpO1xuICAgIGlmICh0aGlzLnNoaWZ0ICUgMjYgIT09IDApIHtcbiAgICAgIHRoaXMuc2hpZnQgKz0gMjYgLSAodGhpcy5zaGlmdCAlIDI2KTtcbiAgICB9XG5cbiAgICB0aGlzLnIgPSBuZXcgQk4oMSkuaXVzaGxuKHRoaXMuc2hpZnQpO1xuICAgIHRoaXMucjIgPSB0aGlzLmltb2QodGhpcy5yLnNxcigpKTtcbiAgICB0aGlzLnJpbnYgPSB0aGlzLnIuX2ludm1wKHRoaXMubSk7XG5cbiAgICB0aGlzLm1pbnYgPSB0aGlzLnJpbnYubXVsKHRoaXMucikuaXN1Ym4oMSkuZGl2KHRoaXMubSk7XG4gICAgdGhpcy5taW52ID0gdGhpcy5taW52LnVtb2QodGhpcy5yKTtcbiAgICB0aGlzLm1pbnYgPSB0aGlzLnIuc3ViKHRoaXMubWludik7XG4gIH1cbiAgaW5oZXJpdHMoTW9udCwgUmVkKTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0VG8gPSBmdW5jdGlvbiBjb252ZXJ0VG8gKG51bSkge1xuICAgIHJldHVybiB0aGlzLmltb2QobnVtLnVzaGxuKHRoaXMuc2hpZnQpKTtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5jb252ZXJ0RnJvbSA9IGZ1bmN0aW9uIGNvbnZlcnRGcm9tIChudW0pIHtcbiAgICB2YXIgciA9IHRoaXMuaW1vZChudW0ubXVsKHRoaXMucmludikpO1xuICAgIHIucmVkID0gbnVsbDtcbiAgICByZXR1cm4gcjtcbiAgfTtcblxuICBNb250LnByb3RvdHlwZS5pbXVsID0gZnVuY3Rpb24gaW11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHtcbiAgICAgIGEud29yZHNbMF0gPSAwO1xuICAgICAgYS5sZW5ndGggPSAxO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfVxuXG4gICAgdmFyIHQgPSBhLmltdWwoYik7XG4gICAgdmFyIGMgPSB0Lm1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm1pbnYpLmltYXNrbih0aGlzLnNoaWZ0KS5tdWwodGhpcy5tKTtcbiAgICB2YXIgdSA9IHQuaXN1YihjKS5pdXNocm4odGhpcy5zaGlmdCk7XG4gICAgdmFyIHJlcyA9IHU7XG5cbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCAoYSwgYikge1xuICAgIGlmIChhLmlzWmVybygpIHx8IGIuaXNaZXJvKCkpIHJldHVybiBuZXcgQk4oMCkuX2ZvcmNlUmVkKHRoaXMpO1xuXG4gICAgdmFyIHQgPSBhLm11bChiKTtcbiAgICB2YXIgYyA9IHQubWFza24odGhpcy5zaGlmdCkubXVsKHRoaXMubWludikuaW1hc2tuKHRoaXMuc2hpZnQpLm11bCh0aGlzLm0pO1xuICAgIHZhciB1ID0gdC5pc3ViKGMpLml1c2hybih0aGlzLnNoaWZ0KTtcbiAgICB2YXIgcmVzID0gdTtcbiAgICBpZiAodS5jbXAodGhpcy5tKSA+PSAwKSB7XG4gICAgICByZXMgPSB1LmlzdWIodGhpcy5tKTtcbiAgICB9IGVsc2UgaWYgKHUuY21wbigwKSA8IDApIHtcbiAgICAgIHJlcyA9IHUuaWFkZCh0aGlzLm0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xuXG4gIE1vbnQucHJvdG90eXBlLmludm0gPSBmdW5jdGlvbiBpbnZtIChhKSB7XG4gICAgLy8gKEFSKV4tMSAqIFJeMiA9IChBXi0xICogUl4tMSkgKiBSXjIgPSBBXi0xICogUlxuICAgIHZhciByZXMgPSB0aGlzLmltb2QoYS5faW52bXAodGhpcy5tKS5tdWwodGhpcy5yMikpO1xuICAgIHJldHVybiByZXMuX2ZvcmNlUmVkKHRoaXMpO1xuICB9O1xufSkoIGZhbHNlIHx8IG1vZHVsZSwgdGhpcyk7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLy4uLy4uL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMgKi8gXCIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vbW9kdWxlLmpzXCIpKG1vZHVsZSkpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL25vZGVfbW9kdWxlcy9qc3NoYS9zcmMvc2hhLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvanNzaGEvc3JjL3NoYS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xudmFyIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8qXG4gQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBTSEEgZmFtaWx5IG9mIGhhc2hlcywgYXNcbiBkZWZpbmVkIGluIEZJUFMgUFVCIDE4MC00IGFuZCBGSVBTIFBVQiAyMDIsIGFzIHdlbGwgYXMgdGhlIGNvcnJlc3BvbmRpbmdcbiBITUFDIGltcGxlbWVudGF0aW9uIGFzIGRlZmluZWQgaW4gRklQUyBQVUIgMTk4YVxuXG4gQ29weXJpZ2h0IEJyaWFuIFR1cmVrIDIwMDgtMjAxN1xuIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuIFNlZSBodHRwOi8vY2FsaWdhdGlvLmdpdGh1Yi5jb20vanNTSEEvIGZvciBtb3JlIGluZm9ybWF0aW9uXG5cbiBTZXZlcmFsIGZ1bmN0aW9ucyB0YWtlbiBmcm9tIFBhdWwgSm9obnN0b25cbiovXG4oZnVuY3Rpb24oWSl7ZnVuY3Rpb24gQyhjLGEsYil7dmFyIGU9MCxoPVtdLG49MCxnLGwsZCxmLG0scSx1LHIsST0hMSx2PVtdLHc9W10sdCx5PSExLHo9ITEseD0tMTtiPWJ8fHt9O2c9Yi5lbmNvZGluZ3x8XCJVVEY4XCI7dD1iLm51bVJvdW5kc3x8MTtpZih0IT09cGFyc2VJbnQodCwxMCl8fDE+dCl0aHJvdyBFcnJvcihcIm51bVJvdW5kcyBtdXN0IGEgaW50ZWdlciA+PSAxXCIpO2lmKFwiU0hBLTFcIj09PWMpbT01MTIscT1LLHU9WixmPTE2MCxyPWZ1bmN0aW9uKGEpe3JldHVybiBhLnNsaWNlKCl9O2Vsc2UgaWYoMD09PWMubGFzdEluZGV4T2YoXCJTSEEtXCIsMCkpaWYocT1mdW5jdGlvbihhLGIpe3JldHVybiBMKGEsYixjKX0sdT1mdW5jdGlvbihhLGIsaCxlKXt2YXIgayxmO2lmKFwiU0hBLTIyNFwiPT09Y3x8XCJTSEEtMjU2XCI9PT1jKWs9KGIrNjU+Pj45PDw0KSsxNSxmPTE2O2Vsc2UgaWYoXCJTSEEtMzg0XCI9PT1jfHxcIlNIQS01MTJcIj09PWMpaz0oYisxMjk+Pj4xMDw8XG41KSszMSxmPTMyO2Vsc2UgdGhyb3cgRXJyb3IoXCJVbmV4cGVjdGVkIGVycm9yIGluIFNIQS0yIGltcGxlbWVudGF0aW9uXCIpO2Zvcig7YS5sZW5ndGg8PWs7KWEucHVzaCgwKTthW2I+Pj41XXw9MTI4PDwyNC1iJTMyO2I9YitoO2Fba109YiY0Mjk0OTY3Mjk1O2Fbay0xXT1iLzQyOTQ5NjcyOTZ8MDtoPWEubGVuZ3RoO2ZvcihiPTA7YjxoO2IrPWYpZT1MKGEuc2xpY2UoYixiK2YpLGUsYyk7aWYoXCJTSEEtMjI0XCI9PT1jKWE9W2VbMF0sZVsxXSxlWzJdLGVbM10sZVs0XSxlWzVdLGVbNl1dO2Vsc2UgaWYoXCJTSEEtMjU2XCI9PT1jKWE9ZTtlbHNlIGlmKFwiU0hBLTM4NFwiPT09YylhPVtlWzBdLmEsZVswXS5iLGVbMV0uYSxlWzFdLmIsZVsyXS5hLGVbMl0uYixlWzNdLmEsZVszXS5iLGVbNF0uYSxlWzRdLmIsZVs1XS5hLGVbNV0uYl07ZWxzZSBpZihcIlNIQS01MTJcIj09PWMpYT1bZVswXS5hLGVbMF0uYixlWzFdLmEsZVsxXS5iLGVbMl0uYSxlWzJdLmIsZVszXS5hLGVbM10uYixlWzRdLmEsXG5lWzRdLmIsZVs1XS5hLGVbNV0uYixlWzZdLmEsZVs2XS5iLGVbN10uYSxlWzddLmJdO2Vsc2UgdGhyb3cgRXJyb3IoXCJVbmV4cGVjdGVkIGVycm9yIGluIFNIQS0yIGltcGxlbWVudGF0aW9uXCIpO3JldHVybiBhfSxyPWZ1bmN0aW9uKGEpe3JldHVybiBhLnNsaWNlKCl9LFwiU0hBLTIyNFwiPT09YyltPTUxMixmPTIyNDtlbHNlIGlmKFwiU0hBLTI1NlwiPT09YyltPTUxMixmPTI1NjtlbHNlIGlmKFwiU0hBLTM4NFwiPT09YyltPTEwMjQsZj0zODQ7ZWxzZSBpZihcIlNIQS01MTJcIj09PWMpbT0xMDI0LGY9NTEyO2Vsc2UgdGhyb3cgRXJyb3IoXCJDaG9zZW4gU0hBIHZhcmlhbnQgaXMgbm90IHN1cHBvcnRlZFwiKTtlbHNlIGlmKDA9PT1jLmxhc3RJbmRleE9mKFwiU0hBMy1cIiwwKXx8MD09PWMubGFzdEluZGV4T2YoXCJTSEFLRVwiLDApKXt2YXIgRj02O3E9RDtyPWZ1bmN0aW9uKGEpe3ZhciBjPVtdLGU7Zm9yKGU9MDs1PmU7ZSs9MSljW2VdPWFbZV0uc2xpY2UoKTtyZXR1cm4gY307eD0xO2lmKFwiU0hBMy0yMjRcIj09PVxuYyltPTExNTIsZj0yMjQ7ZWxzZSBpZihcIlNIQTMtMjU2XCI9PT1jKW09MTA4OCxmPTI1NjtlbHNlIGlmKFwiU0hBMy0zODRcIj09PWMpbT04MzIsZj0zODQ7ZWxzZSBpZihcIlNIQTMtNTEyXCI9PT1jKW09NTc2LGY9NTEyO2Vsc2UgaWYoXCJTSEFLRTEyOFwiPT09YyltPTEzNDQsZj0tMSxGPTMxLHo9ITA7ZWxzZSBpZihcIlNIQUtFMjU2XCI9PT1jKW09MTA4OCxmPS0xLEY9MzEsej0hMDtlbHNlIHRocm93IEVycm9yKFwiQ2hvc2VuIFNIQSB2YXJpYW50IGlzIG5vdCBzdXBwb3J0ZWRcIik7dT1mdW5jdGlvbihhLGMsZSxiLGgpe2U9bTt2YXIgaz1GLGYsZz1bXSxuPWU+Pj41LGw9MCxkPWM+Pj41O2ZvcihmPTA7ZjxkJiZjPj1lO2YrPW4pYj1EKGEuc2xpY2UoZixmK24pLGIpLGMtPWU7YT1hLnNsaWNlKGYpO2ZvcihjJT1lO2EubGVuZ3RoPG47KWEucHVzaCgwKTtmPWM+Pj4zO2FbZj4+Ml1ePWs8PGYlNCo4O2Fbbi0xXV49MjE0NzQ4MzY0ODtmb3IoYj1EKGEsYik7MzIqZy5sZW5ndGg8aDspe2E9YltsJVxuNV1bbC81fDBdO2cucHVzaChhLmIpO2lmKDMyKmcubGVuZ3RoPj1oKWJyZWFrO2cucHVzaChhLmEpO2wrPTE7MD09PTY0KmwlZSYmRChudWxsLGIpfXJldHVybiBnfX1lbHNlIHRocm93IEVycm9yKFwiQ2hvc2VuIFNIQSB2YXJpYW50IGlzIG5vdCBzdXBwb3J0ZWRcIik7ZD1NKGEsZyx4KTtsPUEoYyk7dGhpcy5zZXRITUFDS2V5PWZ1bmN0aW9uKGEsYixoKXt2YXIgaztpZighMD09PUkpdGhyb3cgRXJyb3IoXCJITUFDIGtleSBhbHJlYWR5IHNldFwiKTtpZighMD09PXkpdGhyb3cgRXJyb3IoXCJDYW5ub3Qgc2V0IEhNQUMga2V5IGFmdGVyIGNhbGxpbmcgdXBkYXRlXCIpO2lmKCEwPT09eil0aHJvdyBFcnJvcihcIlNIQUtFIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIEhNQUNcIik7Zz0oaHx8e30pLmVuY29kaW5nfHxcIlVURjhcIjtiPU0oYixnLHgpKGEpO2E9Yi5iaW5MZW47Yj1iLnZhbHVlO2s9bT4+PjM7aD1rLzQtMTtpZihrPGEvOCl7Zm9yKGI9dShiLGEsMCxBKGMpLGYpO2IubGVuZ3RoPD1oOyliLnB1c2goMCk7XG5iW2hdJj00Mjk0OTY3MDQwfWVsc2UgaWYoaz5hLzgpe2Zvcig7Yi5sZW5ndGg8PWg7KWIucHVzaCgwKTtiW2hdJj00Mjk0OTY3MDQwfWZvcihhPTA7YTw9aDthKz0xKXZbYV09YlthXV45MDk1MjI0ODYsd1thXT1iW2FdXjE1NDk1NTY4Mjg7bD1xKHYsbCk7ZT1tO0k9ITB9O3RoaXMudXBkYXRlPWZ1bmN0aW9uKGEpe3ZhciBjLGIsayxmPTAsZz1tPj4+NTtjPWQoYSxoLG4pO2E9Yy5iaW5MZW47Yj1jLnZhbHVlO2M9YT4+PjU7Zm9yKGs9MDtrPGM7ays9ZylmK208PWEmJihsPXEoYi5zbGljZShrLGsrZyksbCksZis9bSk7ZSs9ZjtoPWIuc2xpY2UoZj4+PjUpO249YSVtO3k9ITB9O3RoaXMuZ2V0SGFzaD1mdW5jdGlvbihhLGIpe3ZhciBrLGcsZCxtO2lmKCEwPT09SSl0aHJvdyBFcnJvcihcIkNhbm5vdCBjYWxsIGdldEhhc2ggYWZ0ZXIgc2V0dGluZyBITUFDIGtleVwiKTtkPU4oYik7aWYoITA9PT16KXtpZigtMT09PWQuc2hha2VMZW4pdGhyb3cgRXJyb3IoXCJzaGFrZUxlbiBtdXN0IGJlIHNwZWNpZmllZCBpbiBvcHRpb25zXCIpO1xuZj1kLnNoYWtlTGVufXN3aXRjaChhKXtjYXNlIFwiSEVYXCI6az1mdW5jdGlvbihhKXtyZXR1cm4gTyhhLGYseCxkKX07YnJlYWs7Y2FzZSBcIkI2NFwiOms9ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmLHgsZCl9O2JyZWFrO2Nhc2UgXCJCWVRFU1wiOms9ZnVuY3Rpb24oYSl7cmV0dXJuIFEoYSxmLHgpfTticmVhaztjYXNlIFwiQVJSQVlCVUZGRVJcIjp0cnl7Zz1uZXcgQXJyYXlCdWZmZXIoMCl9Y2F0Y2gocCl7dGhyb3cgRXJyb3IoXCJBUlJBWUJVRkZFUiBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgZW52aXJvbm1lbnRcIik7fWs9ZnVuY3Rpb24oYSl7cmV0dXJuIFIoYSxmLHgpfTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKFwiZm9ybWF0IG11c3QgYmUgSEVYLCBCNjQsIEJZVEVTLCBvciBBUlJBWUJVRkZFUlwiKTt9bT11KGguc2xpY2UoKSxuLGUscihsKSxmKTtmb3IoZz0xO2c8dDtnKz0xKSEwPT09eiYmMCE9PWYlMzImJihtW20ubGVuZ3RoLTFdJj0xNjc3NzIxNT4+PjI0LWYlMzIpLG09dShtLGYsXG4wLEEoYyksZik7cmV0dXJuIGsobSl9O3RoaXMuZ2V0SE1BQz1mdW5jdGlvbihhLGIpe3ZhciBrLGcsZCxwO2lmKCExPT09SSl0aHJvdyBFcnJvcihcIkNhbm5vdCBjYWxsIGdldEhNQUMgd2l0aG91dCBmaXJzdCBzZXR0aW5nIEhNQUMga2V5XCIpO2Q9TihiKTtzd2l0Y2goYSl7Y2FzZSBcIkhFWFwiOms9ZnVuY3Rpb24oYSl7cmV0dXJuIE8oYSxmLHgsZCl9O2JyZWFrO2Nhc2UgXCJCNjRcIjprPWZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZix4LGQpfTticmVhaztjYXNlIFwiQllURVNcIjprPWZ1bmN0aW9uKGEpe3JldHVybiBRKGEsZix4KX07YnJlYWs7Y2FzZSBcIkFSUkFZQlVGRkVSXCI6dHJ5e2s9bmV3IEFycmF5QnVmZmVyKDApfWNhdGNoKHYpe3Rocm93IEVycm9yKFwiQVJSQVlCVUZGRVIgbm90IHN1cHBvcnRlZCBieSB0aGlzIGVudmlyb25tZW50XCIpO31rPWZ1bmN0aW9uKGEpe3JldHVybiBSKGEsZix4KX07YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIm91dHB1dEZvcm1hdCBtdXN0IGJlIEhFWCwgQjY0LCBCWVRFUywgb3IgQVJSQVlCVUZGRVJcIik7XG59Zz11KGguc2xpY2UoKSxuLGUscihsKSxmKTtwPXEodyxBKGMpKTtwPXUoZyxmLG0scCxmKTtyZXR1cm4gayhwKX19ZnVuY3Rpb24gYihjLGEpe3RoaXMuYT1jO3RoaXMuYj1hfWZ1bmN0aW9uIE8oYyxhLGIsZSl7dmFyIGg9XCJcIjthLz04O3ZhciBuLGcsZDtkPS0xPT09Yj8zOjA7Zm9yKG49MDtuPGE7bis9MSlnPWNbbj4+PjJdPj4+OCooZCtuJTQqYiksaCs9XCIwMTIzNDU2Nzg5YWJjZGVmXCIuY2hhckF0KGc+Pj40JjE1KStcIjAxMjM0NTY3ODlhYmNkZWZcIi5jaGFyQXQoZyYxNSk7cmV0dXJuIGUub3V0cHV0VXBwZXI/aC50b1VwcGVyQ2FzZSgpOmh9ZnVuY3Rpb24gUChjLGEsYixlKXt2YXIgaD1cIlwiLG49YS84LGcsZCxwLGY7Zj0tMT09PWI/MzowO2ZvcihnPTA7ZzxuO2crPTMpZm9yKGQ9ZysxPG4/Y1tnKzE+Pj4yXTowLHA9ZysyPG4/Y1tnKzI+Pj4yXTowLHA9KGNbZz4+PjJdPj4+OCooZitnJTQqYikmMjU1KTw8MTZ8KGQ+Pj44KihmKyhnKzEpJTQqYikmMjU1KTw8OHxwPj4+OCooZitcbihnKzIpJTQqYikmMjU1LGQ9MDs0PmQ7ZCs9MSk4KmcrNipkPD1hP2grPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrL1wiLmNoYXJBdChwPj4+NiooMy1kKSY2Myk6aCs9ZS5iNjRQYWQ7cmV0dXJuIGh9ZnVuY3Rpb24gUShjLGEsYil7dmFyIGU9XCJcIjthLz04O3ZhciBoLGQsZztnPS0xPT09Yj8zOjA7Zm9yKGg9MDtoPGE7aCs9MSlkPWNbaD4+PjJdPj4+OCooZytoJTQqYikmMjU1LGUrPVN0cmluZy5mcm9tQ2hhckNvZGUoZCk7cmV0dXJuIGV9ZnVuY3Rpb24gUihjLGEsYil7YS89ODt2YXIgZSxoPW5ldyBBcnJheUJ1ZmZlcihhKSxkLGc7Zz1uZXcgVWludDhBcnJheShoKTtkPS0xPT09Yj8zOjA7Zm9yKGU9MDtlPGE7ZSs9MSlnW2VdPWNbZT4+PjJdPj4+OCooZCtlJTQqYikmMjU1O3JldHVybiBofWZ1bmN0aW9uIE4oYyl7dmFyIGE9e291dHB1dFVwcGVyOiExLGI2NFBhZDpcIj1cIixzaGFrZUxlbjotMX07Yz1jfHx7fTtcbmEub3V0cHV0VXBwZXI9Yy5vdXRwdXRVcHBlcnx8ITE7ITA9PT1jLmhhc093blByb3BlcnR5KFwiYjY0UGFkXCIpJiYoYS5iNjRQYWQ9Yy5iNjRQYWQpO2lmKCEwPT09Yy5oYXNPd25Qcm9wZXJ0eShcInNoYWtlTGVuXCIpKXtpZigwIT09Yy5zaGFrZUxlbiU4KXRocm93IEVycm9yKFwic2hha2VMZW4gbXVzdCBiZSBhIG11bHRpcGxlIG9mIDhcIik7YS5zaGFrZUxlbj1jLnNoYWtlTGVufWlmKFwiYm9vbGVhblwiIT09dHlwZW9mIGEub3V0cHV0VXBwZXIpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIG91dHB1dFVwcGVyIGZvcm1hdHRpbmcgb3B0aW9uXCIpO2lmKFwic3RyaW5nXCIhPT10eXBlb2YgYS5iNjRQYWQpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGI2NFBhZCBmb3JtYXR0aW5nIG9wdGlvblwiKTtyZXR1cm4gYX1mdW5jdGlvbiBNKGMsYSxiKXtzd2l0Y2goYSl7Y2FzZSBcIlVURjhcIjpjYXNlIFwiVVRGMTZCRVwiOmNhc2UgXCJVVEYxNkxFXCI6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcImVuY29kaW5nIG11c3QgYmUgVVRGOCwgVVRGMTZCRSwgb3IgVVRGMTZMRVwiKTtcbn1zd2l0Y2goYyl7Y2FzZSBcIkhFWFwiOmM9ZnVuY3Rpb24oYSxjLGQpe3ZhciBnPWEubGVuZ3RoLGwscCxmLG0scSx1O2lmKDAhPT1nJTIpdGhyb3cgRXJyb3IoXCJTdHJpbmcgb2YgSEVYIHR5cGUgbXVzdCBiZSBpbiBieXRlIGluY3JlbWVudHNcIik7Yz1jfHxbMF07ZD1kfHwwO3E9ZD4+PjM7dT0tMT09PWI/MzowO2ZvcihsPTA7bDxnO2wrPTIpe3A9cGFyc2VJbnQoYS5zdWJzdHIobCwyKSwxNik7aWYoaXNOYU4ocCkpdGhyb3cgRXJyb3IoXCJTdHJpbmcgb2YgSEVYIHR5cGUgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzXCIpO209KGw+Pj4xKStxO2ZvcihmPW0+Pj4yO2MubGVuZ3RoPD1mOyljLnB1c2goMCk7Y1tmXXw9cDw8OCoodSttJTQqYil9cmV0dXJue3ZhbHVlOmMsYmluTGVuOjQqZytkfX07YnJlYWs7Y2FzZSBcIlRFWFRcIjpjPWZ1bmN0aW9uKGMsaCxkKXt2YXIgZyxsLHA9MCxmLG0scSx1LHIsdDtoPWh8fFswXTtkPWR8fDA7cT1kPj4+MztpZihcIlVURjhcIj09PWEpZm9yKHQ9LTE9PT1cbmI/MzowLGY9MDtmPGMubGVuZ3RoO2YrPTEpZm9yKGc9Yy5jaGFyQ29kZUF0KGYpLGw9W10sMTI4Pmc/bC5wdXNoKGcpOjIwNDg+Zz8obC5wdXNoKDE5MnxnPj4+NiksbC5wdXNoKDEyOHxnJjYzKSk6NTUyOTY+Z3x8NTczNDQ8PWc/bC5wdXNoKDIyNHxnPj4+MTIsMTI4fGc+Pj42JjYzLDEyOHxnJjYzKTooZis9MSxnPTY1NTM2KygoZyYxMDIzKTw8MTB8Yy5jaGFyQ29kZUF0KGYpJjEwMjMpLGwucHVzaCgyNDB8Zz4+PjE4LDEyOHxnPj4+MTImNjMsMTI4fGc+Pj42JjYzLDEyOHxnJjYzKSksbT0wO208bC5sZW5ndGg7bSs9MSl7cj1wK3E7Zm9yKHU9cj4+PjI7aC5sZW5ndGg8PXU7KWgucHVzaCgwKTtoW3VdfD1sW21dPDw4Kih0K3IlNCpiKTtwKz0xfWVsc2UgaWYoXCJVVEYxNkJFXCI9PT1hfHxcIlVURjE2TEVcIj09PWEpZm9yKHQ9LTE9PT1iPzI6MCxsPVwiVVRGMTZMRVwiPT09YSYmMSE9PWJ8fFwiVVRGMTZMRVwiIT09YSYmMT09PWIsZj0wO2Y8Yy5sZW5ndGg7Zis9MSl7Zz1jLmNoYXJDb2RlQXQoZik7XG4hMD09PWwmJihtPWcmMjU1LGc9bTw8OHxnPj4+OCk7cj1wK3E7Zm9yKHU9cj4+PjI7aC5sZW5ndGg8PXU7KWgucHVzaCgwKTtoW3VdfD1nPDw4Kih0K3IlNCpiKTtwKz0yfXJldHVybnt2YWx1ZTpoLGJpbkxlbjo4KnArZH19O2JyZWFrO2Nhc2UgXCJCNjRcIjpjPWZ1bmN0aW9uKGEsYyxkKXt2YXIgZz0wLGwscCxmLG0scSx1LHIsdDtpZigtMT09PWEuc2VhcmNoKC9eW2EtekEtWjAtOT0rXFwvXSskLykpdGhyb3cgRXJyb3IoXCJJbnZhbGlkIGNoYXJhY3RlciBpbiBiYXNlLTY0IHN0cmluZ1wiKTtwPWEuaW5kZXhPZihcIj1cIik7YT1hLnJlcGxhY2UoL1xcPS9nLFwiXCIpO2lmKC0xIT09cCYmcDxhLmxlbmd0aCl0aHJvdyBFcnJvcihcIkludmFsaWQgJz0nIGZvdW5kIGluIGJhc2UtNjQgc3RyaW5nXCIpO2M9Y3x8WzBdO2Q9ZHx8MDt1PWQ+Pj4zO3Q9LTE9PT1iPzM6MDtmb3IocD0wO3A8YS5sZW5ndGg7cCs9NCl7cT1hLnN1YnN0cihwLDQpO2ZvcihmPW09MDtmPHEubGVuZ3RoO2YrPTEpbD1cIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIi5pbmRleE9mKHFbZl0pLFxubXw9bDw8MTgtNipmO2ZvcihmPTA7ZjxxLmxlbmd0aC0xO2YrPTEpe3I9Zyt1O2ZvcihsPXI+Pj4yO2MubGVuZ3RoPD1sOyljLnB1c2goMCk7Y1tsXXw9KG0+Pj4xNi04KmYmMjU1KTw8OCoodCtyJTQqYik7Zys9MX19cmV0dXJue3ZhbHVlOmMsYmluTGVuOjgqZytkfX07YnJlYWs7Y2FzZSBcIkJZVEVTXCI6Yz1mdW5jdGlvbihhLGMsZCl7dmFyIGcsbCxwLGYsbSxxO2M9Y3x8WzBdO2Q9ZHx8MDtwPWQ+Pj4zO3E9LTE9PT1iPzM6MDtmb3IobD0wO2w8YS5sZW5ndGg7bCs9MSlnPWEuY2hhckNvZGVBdChsKSxtPWwrcCxmPW0+Pj4yLGMubGVuZ3RoPD1mJiZjLnB1c2goMCksY1tmXXw9Zzw8OCoocSttJTQqYik7cmV0dXJue3ZhbHVlOmMsYmluTGVuOjgqYS5sZW5ndGgrZH19O2JyZWFrO2Nhc2UgXCJBUlJBWUJVRkZFUlwiOnRyeXtjPW5ldyBBcnJheUJ1ZmZlcigwKX1jYXRjaChlKXt0aHJvdyBFcnJvcihcIkFSUkFZQlVGRkVSIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBlbnZpcm9ubWVudFwiKTt9Yz1cbmZ1bmN0aW9uKGEsYyxkKXt2YXIgZyxsLHAsZixtLHE7Yz1jfHxbMF07ZD1kfHwwO2w9ZD4+PjM7bT0tMT09PWI/MzowO3E9bmV3IFVpbnQ4QXJyYXkoYSk7Zm9yKGc9MDtnPGEuYnl0ZUxlbmd0aDtnKz0xKWY9ZytsLHA9Zj4+PjIsYy5sZW5ndGg8PXAmJmMucHVzaCgwKSxjW3BdfD1xW2ddPDw4KihtK2YlNCpiKTtyZXR1cm57dmFsdWU6YyxiaW5MZW46OCphLmJ5dGVMZW5ndGgrZH19O2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoXCJmb3JtYXQgbXVzdCBiZSBIRVgsIFRFWFQsIEI2NCwgQllURVMsIG9yIEFSUkFZQlVGRkVSXCIpO31yZXR1cm4gY31mdW5jdGlvbiB5KGMsYSl7cmV0dXJuIGM8PGF8Yz4+PjMyLWF9ZnVuY3Rpb24gUyhjLGEpe3JldHVybiAzMjxhPyhhLT0zMixuZXcgYihjLmI8PGF8Yy5hPj4+MzItYSxjLmE8PGF8Yy5iPj4+MzItYSkpOjAhPT1hP25ldyBiKGMuYTw8YXxjLmI+Pj4zMi1hLGMuYjw8YXxjLmE+Pj4zMi1hKTpjfWZ1bmN0aW9uIHcoYyxhKXtyZXR1cm4gYz4+PlxuYXxjPDwzMi1hfWZ1bmN0aW9uIHQoYyxhKXt2YXIgaz1udWxsLGs9bmV3IGIoYy5hLGMuYik7cmV0dXJuIGs9MzI+PWE/bmV3IGIoay5hPj4+YXxrLmI8PDMyLWEmNDI5NDk2NzI5NSxrLmI+Pj5hfGsuYTw8MzItYSY0Mjk0OTY3Mjk1KTpuZXcgYihrLmI+Pj5hLTMyfGsuYTw8NjQtYSY0Mjk0OTY3Mjk1LGsuYT4+PmEtMzJ8ay5iPDw2NC1hJjQyOTQ5NjcyOTUpfWZ1bmN0aW9uIFQoYyxhKXt2YXIgaz1udWxsO3JldHVybiBrPTMyPj1hP25ldyBiKGMuYT4+PmEsYy5iPj4+YXxjLmE8PDMyLWEmNDI5NDk2NzI5NSk6bmV3IGIoMCxjLmE+Pj5hLTMyKX1mdW5jdGlvbiBhYShjLGEsYil7cmV0dXJuIGMmYV5+YyZifWZ1bmN0aW9uIGJhKGMsYSxrKXtyZXR1cm4gbmV3IGIoYy5hJmEuYV5+Yy5hJmsuYSxjLmImYS5iXn5jLmImay5iKX1mdW5jdGlvbiBVKGMsYSxiKXtyZXR1cm4gYyZhXmMmYl5hJmJ9ZnVuY3Rpb24gY2EoYyxhLGspe3JldHVybiBuZXcgYihjLmEmYS5hXmMuYSZrLmFeYS5hJlxuay5hLGMuYiZhLmJeYy5iJmsuYl5hLmImay5iKX1mdW5jdGlvbiBkYShjKXtyZXR1cm4gdyhjLDIpXncoYywxMyledyhjLDIyKX1mdW5jdGlvbiBlYShjKXt2YXIgYT10KGMsMjgpLGs9dChjLDM0KTtjPXQoYywzOSk7cmV0dXJuIG5ldyBiKGEuYV5rLmFeYy5hLGEuYl5rLmJeYy5iKX1mdW5jdGlvbiBmYShjKXtyZXR1cm4gdyhjLDYpXncoYywxMSledyhjLDI1KX1mdW5jdGlvbiBnYShjKXt2YXIgYT10KGMsMTQpLGs9dChjLDE4KTtjPXQoYyw0MSk7cmV0dXJuIG5ldyBiKGEuYV5rLmFeYy5hLGEuYl5rLmJeYy5iKX1mdW5jdGlvbiBoYShjKXtyZXR1cm4gdyhjLDcpXncoYywxOCleYz4+PjN9ZnVuY3Rpb24gaWEoYyl7dmFyIGE9dChjLDEpLGs9dChjLDgpO2M9VChjLDcpO3JldHVybiBuZXcgYihhLmFeay5hXmMuYSxhLmJeay5iXmMuYil9ZnVuY3Rpb24gamEoYyl7cmV0dXJuIHcoYywxNyledyhjLDE5KV5jPj4+MTB9ZnVuY3Rpb24ga2EoYyl7dmFyIGE9dChjLDE5KSxrPXQoYyw2MSk7XG5jPVQoYyw2KTtyZXR1cm4gbmV3IGIoYS5hXmsuYV5jLmEsYS5iXmsuYl5jLmIpfWZ1bmN0aW9uIEcoYyxhKXt2YXIgYj0oYyY2NTUzNSkrKGEmNjU1MzUpO3JldHVybigoYz4+PjE2KSsoYT4+PjE2KSsoYj4+PjE2KSY2NTUzNSk8PDE2fGImNjU1MzV9ZnVuY3Rpb24gbGEoYyxhLGIsZSl7dmFyIGg9KGMmNjU1MzUpKyhhJjY1NTM1KSsoYiY2NTUzNSkrKGUmNjU1MzUpO3JldHVybigoYz4+PjE2KSsoYT4+PjE2KSsoYj4+PjE2KSsoZT4+PjE2KSsoaD4+PjE2KSY2NTUzNSk8PDE2fGgmNjU1MzV9ZnVuY3Rpb24gSChjLGEsYixlLGgpe3ZhciBkPShjJjY1NTM1KSsoYSY2NTUzNSkrKGImNjU1MzUpKyhlJjY1NTM1KSsoaCY2NTUzNSk7cmV0dXJuKChjPj4+MTYpKyhhPj4+MTYpKyhiPj4+MTYpKyhlPj4+MTYpKyhoPj4+MTYpKyhkPj4+MTYpJjY1NTM1KTw8MTZ8ZCY2NTUzNX1mdW5jdGlvbiBtYShjLGEpe3ZhciBkLGUsaDtkPShjLmImNjU1MzUpKyhhLmImNjU1MzUpO2U9KGMuYj4+PjE2KStcbihhLmI+Pj4xNikrKGQ+Pj4xNik7aD0oZSY2NTUzNSk8PDE2fGQmNjU1MzU7ZD0oYy5hJjY1NTM1KSsoYS5hJjY1NTM1KSsoZT4+PjE2KTtlPShjLmE+Pj4xNikrKGEuYT4+PjE2KSsoZD4+PjE2KTtyZXR1cm4gbmV3IGIoKGUmNjU1MzUpPDwxNnxkJjY1NTM1LGgpfWZ1bmN0aW9uIG5hKGMsYSxkLGUpe3ZhciBoLG4sZztoPShjLmImNjU1MzUpKyhhLmImNjU1MzUpKyhkLmImNjU1MzUpKyhlLmImNjU1MzUpO249KGMuYj4+PjE2KSsoYS5iPj4+MTYpKyhkLmI+Pj4xNikrKGUuYj4+PjE2KSsoaD4+PjE2KTtnPShuJjY1NTM1KTw8MTZ8aCY2NTUzNTtoPShjLmEmNjU1MzUpKyhhLmEmNjU1MzUpKyhkLmEmNjU1MzUpKyhlLmEmNjU1MzUpKyhuPj4+MTYpO249KGMuYT4+PjE2KSsoYS5hPj4+MTYpKyhkLmE+Pj4xNikrKGUuYT4+PjE2KSsoaD4+PjE2KTtyZXR1cm4gbmV3IGIoKG4mNjU1MzUpPDwxNnxoJjY1NTM1LGcpfWZ1bmN0aW9uIG9hKGMsYSxkLGUsaCl7dmFyIG4sZyxsO249KGMuYiZcbjY1NTM1KSsoYS5iJjY1NTM1KSsoZC5iJjY1NTM1KSsoZS5iJjY1NTM1KSsoaC5iJjY1NTM1KTtnPShjLmI+Pj4xNikrKGEuYj4+PjE2KSsoZC5iPj4+MTYpKyhlLmI+Pj4xNikrKGguYj4+PjE2KSsobj4+PjE2KTtsPShnJjY1NTM1KTw8MTZ8biY2NTUzNTtuPShjLmEmNjU1MzUpKyhhLmEmNjU1MzUpKyhkLmEmNjU1MzUpKyhlLmEmNjU1MzUpKyhoLmEmNjU1MzUpKyhnPj4+MTYpO2c9KGMuYT4+PjE2KSsoYS5hPj4+MTYpKyhkLmE+Pj4xNikrKGUuYT4+PjE2KSsoaC5hPj4+MTYpKyhuPj4+MTYpO3JldHVybiBuZXcgYigoZyY2NTUzNSk8PDE2fG4mNjU1MzUsbCl9ZnVuY3Rpb24gQihjLGEpe3JldHVybiBuZXcgYihjLmFeYS5hLGMuYl5hLmIpfWZ1bmN0aW9uIEEoYyl7dmFyIGE9W10sZDtpZihcIlNIQS0xXCI9PT1jKWE9WzE3MzI1ODQxOTMsNDAyMzIzMzQxNywyNTYyMzgzMTAyLDI3MTczMzg3OCwzMjg1Mzc3NTIwXTtlbHNlIGlmKDA9PT1jLmxhc3RJbmRleE9mKFwiU0hBLVwiLDApKXN3aXRjaChhPVxuWzMyMzgzNzEwMzIsOTE0MTUwNjYzLDgxMjcwMjk5OSw0MTQ0OTEyNjk3LDQyOTA3NzU4NTcsMTc1MDYwMzAyNSwxNjk0MDc2ODM5LDMyMDQwNzU0MjhdLGQ9WzE3NzkwMzM3MDMsMzE0NDEzNDI3NywxMDEzOTA0MjQyLDI3NzM0ODA3NjIsMTM1OTg5MzExOSwyNjAwODIyOTI0LDUyODczNDYzNSwxNTQxNDU5MjI1XSxjKXtjYXNlIFwiU0hBLTIyNFwiOmJyZWFrO2Nhc2UgXCJTSEEtMjU2XCI6YT1kO2JyZWFrO2Nhc2UgXCJTSEEtMzg0XCI6YT1bbmV3IGIoMzQxODA3MDM2NSxhWzBdKSxuZXcgYigxNjU0MjcwMjUwLGFbMV0pLG5ldyBiKDI0Mzg1MjkzNzAsYVsyXSksbmV3IGIoMzU1NDYyMzYwLGFbM10pLG5ldyBiKDE3MzE0MDU0MTUsYVs0XSksbmV3IGIoNDEwNDg4ODU4OTUsYVs1XSksbmV3IGIoMzY3NTAwODUyNSxhWzZdKSxuZXcgYigxMjAzMDYyODEzLGFbN10pXTticmVhaztjYXNlIFwiU0hBLTUxMlwiOmE9W25ldyBiKGRbMF0sNDA4OTIzNTcyMCksbmV3IGIoZFsxXSwyMjI3ODczNTk1KSxcbm5ldyBiKGRbMl0sNDI3MTE3NTcyMyksbmV3IGIoZFszXSwxNTk1NzUwMTI5KSxuZXcgYihkWzRdLDI5MTc1NjUxMzcpLG5ldyBiKGRbNV0sNzI1NTExMTk5KSxuZXcgYihkWzZdLDQyMTUzODk1NDcpLG5ldyBiKGRbN10sMzI3MDMzMjA5KV07YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIlVua25vd24gU0hBIHZhcmlhbnRcIik7fWVsc2UgaWYoMD09PWMubGFzdEluZGV4T2YoXCJTSEEzLVwiLDApfHwwPT09Yy5sYXN0SW5kZXhPZihcIlNIQUtFXCIsMCkpZm9yKGM9MDs1PmM7Yys9MSlhW2NdPVtuZXcgYigwLDApLG5ldyBiKDAsMCksbmV3IGIoMCwwKSxuZXcgYigwLDApLG5ldyBiKDAsMCldO2Vsc2UgdGhyb3cgRXJyb3IoXCJObyBTSEEgdmFyaWFudHMgc3VwcG9ydGVkXCIpO3JldHVybiBhfWZ1bmN0aW9uIEsoYyxhKXt2YXIgYj1bXSxlLGQsbixnLGwscCxmO2U9YVswXTtkPWFbMV07bj1hWzJdO2c9YVszXTtsPWFbNF07Zm9yKGY9MDs4MD5mO2YrPTEpYltmXT0xNj5mP2NbZl06eShiW2YtXG4zXV5iW2YtOF1eYltmLTE0XV5iW2YtMTZdLDEpLHA9MjA+Zj9IKHkoZSw1KSxkJm5efmQmZyxsLDE1MTg1MDAyNDksYltmXSk6NDA+Zj9IKHkoZSw1KSxkXm5eZyxsLDE4NTk3NzUzOTMsYltmXSk6NjA+Zj9IKHkoZSw1KSxVKGQsbixnKSxsLDI0MDA5NTk3MDgsYltmXSk6SCh5KGUsNSksZF5uXmcsbCwzMzk1NDY5NzgyLGJbZl0pLGw9ZyxnPW4sbj15KGQsMzApLGQ9ZSxlPXA7YVswXT1HKGUsYVswXSk7YVsxXT1HKGQsYVsxXSk7YVsyXT1HKG4sYVsyXSk7YVszXT1HKGcsYVszXSk7YVs0XT1HKGwsYVs0XSk7cmV0dXJuIGF9ZnVuY3Rpb24gWihjLGEsYixlKXt2YXIgZDtmb3IoZD0oYSs2NT4+Pjk8PDQpKzE1O2MubGVuZ3RoPD1kOyljLnB1c2goMCk7Y1thPj4+NV18PTEyODw8MjQtYSUzMjthKz1iO2NbZF09YSY0Mjk0OTY3Mjk1O2NbZC0xXT1hLzQyOTQ5NjcyOTZ8MDthPWMubGVuZ3RoO2ZvcihkPTA7ZDxhO2QrPTE2KWU9SyhjLnNsaWNlKGQsZCsxNiksZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChjLFxuYSxrKXt2YXIgZSxoLG4sZyxsLHAsZixtLHEsdSxyLHQsdix3LHksQSx6LHgsRixCLEMsRCxFPVtdLEo7aWYoXCJTSEEtMjI0XCI9PT1rfHxcIlNIQS0yNTZcIj09PWspdT02NCx0PTEsRD1OdW1iZXIsdj1HLHc9bGEseT1ILEE9aGEsej1qYSx4PWRhLEY9ZmEsQz1VLEI9YWEsSj1kO2Vsc2UgaWYoXCJTSEEtMzg0XCI9PT1rfHxcIlNIQS01MTJcIj09PWspdT04MCx0PTIsRD1iLHY9bWEsdz1uYSx5PW9hLEE9aWEsej1rYSx4PWVhLEY9Z2EsQz1jYSxCPWJhLEo9VjtlbHNlIHRocm93IEVycm9yKFwiVW5leHBlY3RlZCBlcnJvciBpbiBTSEEtMiBpbXBsZW1lbnRhdGlvblwiKTtrPWFbMF07ZT1hWzFdO2g9YVsyXTtuPWFbM107Zz1hWzRdO2w9YVs1XTtwPWFbNl07Zj1hWzddO2ZvcihyPTA7cjx1O3IrPTEpMTY+cj8ocT1yKnQsbT1jLmxlbmd0aDw9cT8wOmNbcV0scT1jLmxlbmd0aDw9cSsxPzA6Y1txKzFdLEVbcl09bmV3IEQobSxxKSk6RVtyXT13KHooRVtyLTJdKSxFW3ItN10sQShFW3ItMTVdKSxFW3ItXG4xNl0pLG09eShmLEYoZyksQihnLGwscCksSltyXSxFW3JdKSxxPXYoeChrKSxDKGssZSxoKSksZj1wLHA9bCxsPWcsZz12KG4sbSksbj1oLGg9ZSxlPWssaz12KG0scSk7YVswXT12KGssYVswXSk7YVsxXT12KGUsYVsxXSk7YVsyXT12KGgsYVsyXSk7YVszXT12KG4sYVszXSk7YVs0XT12KGcsYVs0XSk7YVs1XT12KGwsYVs1XSk7YVs2XT12KHAsYVs2XSk7YVs3XT12KGYsYVs3XSk7cmV0dXJuIGF9ZnVuY3Rpb24gRChjLGEpe3ZhciBkLGUsaCxuLGc9W10sbD1bXTtpZihudWxsIT09Yylmb3IoZT0wO2U8Yy5sZW5ndGg7ZSs9MilhWyhlPj4+MSklNV1bKGU+Pj4xKS81fDBdPUIoYVsoZT4+PjEpJTVdWyhlPj4+MSkvNXwwXSxuZXcgYihjW2UrMV0sY1tlXSkpO2ZvcihkPTA7MjQ+ZDtkKz0xKXtuPUEoXCJTSEEzLVwiKTtmb3IoZT0wOzU+ZTtlKz0xKXtoPWFbZV1bMF07dmFyIHA9YVtlXVsxXSxmPWFbZV1bMl0sbT1hW2VdWzNdLHE9YVtlXVs0XTtnW2VdPW5ldyBiKGguYV5wLmFeZi5hXlxubS5hXnEuYSxoLmJecC5iXmYuYl5tLmJecS5iKX1mb3IoZT0wOzU+ZTtlKz0xKWxbZV09QihnWyhlKzQpJTVdLFMoZ1soZSsxKSU1XSwxKSk7Zm9yKGU9MDs1PmU7ZSs9MSlmb3IoaD0wOzU+aDtoKz0xKWFbZV1baF09QihhW2VdW2hdLGxbZV0pO2ZvcihlPTA7NT5lO2UrPTEpZm9yKGg9MDs1Pmg7aCs9MSluW2hdWygyKmUrMypoKSU1XT1TKGFbZV1baF0sV1tlXVtoXSk7Zm9yKGU9MDs1PmU7ZSs9MSlmb3IoaD0wOzU+aDtoKz0xKWFbZV1baF09QihuW2VdW2hdLG5ldyBiKH5uWyhlKzEpJTVdW2hdLmEmblsoZSsyKSU1XVtoXS5hLH5uWyhlKzEpJTVdW2hdLmImblsoZSsyKSU1XVtoXS5iKSk7YVswXVswXT1CKGFbMF1bMF0sWFtkXSl9cmV0dXJuIGF9dmFyIGQsVixXLFg7ZD1bMTExNjM1MjQwOCwxODk5NDQ3NDQxLDMwNDkzMjM0NzEsMzkyMTAwOTU3Myw5NjE5ODcxNjMsMTUwODk3MDk5MywyNDUzNjM1NzQ4LDI4NzA3NjMyMjEsMzYyNDM4MTA4MCwzMTA1OTg0MDEsNjA3MjI1Mjc4LFxuMTQyNjg4MTk4NywxOTI1MDc4Mzg4LDIxNjIwNzgyMDYsMjYxNDg4ODEwMywzMjQ4MjIyNTgwLDM4MzUzOTA0MDEsNDAyMjIyNDc3NCwyNjQzNDcwNzgsNjA0ODA3NjI4LDc3MDI1NTk4MywxMjQ5MTUwMTIyLDE1NTUwODE2OTIsMTk5NjA2NDk4NiwyNTU0MjIwODgyLDI4MjE4MzQzNDksMjk1Mjk5NjgwOCwzMjEwMzEzNjcxLDMzMzY1NzE4OTEsMzU4NDUyODcxMSwxMTM5MjY5OTMsMzM4MjQxODk1LDY2NjMwNzIwNSw3NzM1Mjk5MTIsMTI5NDc1NzM3MiwxMzk2MTgyMjkxLDE2OTUxODM3MDAsMTk4NjY2MTA1MSwyMTc3MDI2MzUwLDI0NTY5NTYwMzcsMjczMDQ4NTkyMSwyODIwMzAyNDExLDMyNTk3MzA4MDAsMzM0NTc2NDc3MSwzNTE2MDY1ODE3LDM2MDAzNTI4MDQsNDA5NDU3MTkwOSwyNzU0MjMzNDQsNDMwMjI3NzM0LDUwNjk0ODYxNiw2NTkwNjA1NTYsODgzOTk3ODc3LDk1ODEzOTU3MSwxMzIyODIyMjE4LDE1MzcwMDIwNjMsMTc0Nzg3Mzc3OSwxOTU1NTYyMjIyLDIwMjQxMDQ4MTUsXG4yMjI3NzMwNDUyLDIzNjE4NTI0MjQsMjQyODQzNjQ3NCwyNzU2NzM0MTg3LDMyMDQwMzE0NzksMzMyOTMyNTI5OF07Vj1bbmV3IGIoZFswXSwzNjA5NzY3NDU4KSxuZXcgYihkWzFdLDYwMjg5MTcyNSksbmV3IGIoZFsyXSwzOTY0NDg0Mzk5KSxuZXcgYihkWzNdLDIxNzMyOTU1NDgpLG5ldyBiKGRbNF0sNDA4MTYyODQ3MiksbmV3IGIoZFs1XSwzMDUzODM0MjY1KSxuZXcgYihkWzZdLDI5Mzc2NzE1NzkpLG5ldyBiKGRbN10sMzY2NDYwOTU2MCksbmV3IGIoZFs4XSwyNzM0ODgzMzk0KSxuZXcgYihkWzldLDExNjQ5OTY1NDIpLG5ldyBiKGRbMTBdLDEzMjM2MTA3NjQpLG5ldyBiKGRbMTFdLDM1OTAzMDQ5OTQpLG5ldyBiKGRbMTJdLDQwNjgxODIzODMpLG5ldyBiKGRbMTNdLDk5MTMzNjExMyksbmV3IGIoZFsxNF0sNjMzODAzMzE3KSxuZXcgYihkWzE1XSwzNDc5Nzc0ODY4KSxuZXcgYihkWzE2XSwyNjY2NjEzNDU4KSxuZXcgYihkWzE3XSw5NDQ3MTExMzkpLG5ldyBiKGRbMThdLDIzNDEyNjI3NzMpLFxubmV3IGIoZFsxOV0sMjAwNzgwMDkzMyksbmV3IGIoZFsyMF0sMTQ5NTk5MDkwMSksbmV3IGIoZFsyMV0sMTg1NjQzMTIzNSksbmV3IGIoZFsyMl0sMzE3NTIxODEzMiksbmV3IGIoZFsyM10sMjE5ODk1MDgzNyksbmV3IGIoZFsyNF0sMzk5OTcxOTMzOSksbmV3IGIoZFsyNV0sNzY2Nzg0MDE2KSxuZXcgYihkWzI2XSwyNTY2NTk0ODc5KSxuZXcgYihkWzI3XSwzMjAzMzM3OTU2KSxuZXcgYihkWzI4XSwxMDM0NDU3MDI2KSxuZXcgYihkWzI5XSwyNDY2OTQ4OTAxKSxuZXcgYihkWzMwXSwzNzU4MzI2MzgzKSxuZXcgYihkWzMxXSwxNjg3MTc5MzYpLG5ldyBiKGRbMzJdLDExODgxNzk5NjQpLG5ldyBiKGRbMzNdLDE1NDYwNDU3MzQpLG5ldyBiKGRbMzRdLDE1MjI4MDU0ODUpLG5ldyBiKGRbMzVdLDI2NDM4MzM4MjMpLG5ldyBiKGRbMzZdLDIzNDM1MjczOTApLG5ldyBiKGRbMzddLDEwMTQ0Nzc0ODApLG5ldyBiKGRbMzhdLDEyMDY3NTkxNDIpLG5ldyBiKGRbMzldLDM0NDA3NzYyNyksXG5uZXcgYihkWzQwXSwxMjkwODYzNDYwKSxuZXcgYihkWzQxXSwzMTU4NDU0MjczKSxuZXcgYihkWzQyXSwzNTA1OTUyNjU3KSxuZXcgYihkWzQzXSwxMDYyMTcwMDgpLG5ldyBiKGRbNDRdLDM2MDYwMDgzNDQpLG5ldyBiKGRbNDVdLDE0MzI3MjU3NzYpLG5ldyBiKGRbNDZdLDE0NjcwMzE1OTQpLG5ldyBiKGRbNDddLDg1MTE2OTcyMCksbmV3IGIoZFs0OF0sMzEwMDgyMzc1MiksbmV3IGIoZFs0OV0sMTM2MzI1ODE5NSksbmV3IGIoZFs1MF0sMzc1MDY4NTU5MyksbmV3IGIoZFs1MV0sMzc4NTA1MDI4MCksbmV3IGIoZFs1Ml0sMzMxODMwNzQyNyksbmV3IGIoZFs1M10sMzgxMjcyMzQwMyksbmV3IGIoZFs1NF0sMjAwMzAzNDk5NSksbmV3IGIoZFs1NV0sMzYwMjAzNjg5OSksbmV3IGIoZFs1Nl0sMTU3NTk5MDAxMiksbmV3IGIoZFs1N10sMTEyNTU5MjkyOCksbmV3IGIoZFs1OF0sMjcxNjkwNDMwNiksbmV3IGIoZFs1OV0sNDQyNzc2MDQ0KSxuZXcgYihkWzYwXSw1OTM2OTgzNDQpLG5ldyBiKGRbNjFdLFxuMzczMzExMDI0OSksbmV3IGIoZFs2Ml0sMjk5OTM1MTU3MyksbmV3IGIoZFs2M10sMzgxNTkyMDQyNyksbmV3IGIoMzM5MTU2OTYxNCwzOTI4MzgzOTAwKSxuZXcgYigzNTE1MjY3MjcxLDU2NjI4MDcxMSksbmV3IGIoMzk0MDE4NzYwNiwzNDU0MDY5NTM0KSxuZXcgYig0MTE4NjMwMjcxLDQwMDAyMzk5OTIpLG5ldyBiKDExNjQxODQ3NCwxOTE0MTM4NTU0KSxuZXcgYigxNzQyOTI0MjEsMjczMTA1NTI3MCksbmV3IGIoMjg5MzgwMzU2LDMyMDM5OTMwMDYpLG5ldyBiKDQ2MDM5MzI2OSwzMjA2MjAzMTUpLG5ldyBiKDY4NTQ3MTczMyw1ODc0OTY4MzYpLG5ldyBiKDg1MjE0Mjk3MSwxMDg2NzkyODUxKSxuZXcgYigxMDE3MDM2Mjk4LDM2NTU0MzEwMCksbmV3IGIoMTEyNjAwMDU4MCwyNjE4Mjk3Njc2KSxuZXcgYigxMjg4MDMzNDcwLDM0MDk4NTUxNTgpLG5ldyBiKDE1MDE1MDU5NDgsNDIzNDUwOTg2NiksbmV3IGIoMTYwNzE2NzkxNSw5ODcxNjc0NjgpLG5ldyBiKDE4MTY0MDIzMTYsXG4xMjQ2MTg5NTkxKV07WD1bbmV3IGIoMCwxKSxuZXcgYigwLDMyODk4KSxuZXcgYigyMTQ3NDgzNjQ4LDMyOTA2KSxuZXcgYigyMTQ3NDgzNjQ4LDIxNDc1MTY0MTYpLG5ldyBiKDAsMzI5MDcpLG5ldyBiKDAsMjE0NzQ4MzY0OSksbmV3IGIoMjE0NzQ4MzY0OCwyMTQ3NTE2NTQ1KSxuZXcgYigyMTQ3NDgzNjQ4LDMyNzc3KSxuZXcgYigwLDEzOCksbmV3IGIoMCwxMzYpLG5ldyBiKDAsMjE0NzUxNjQyNSksbmV3IGIoMCwyMTQ3NDgzNjU4KSxuZXcgYigwLDIxNDc1MTY1NTUpLG5ldyBiKDIxNDc0ODM2NDgsMTM5KSxuZXcgYigyMTQ3NDgzNjQ4LDMyOTA1KSxuZXcgYigyMTQ3NDgzNjQ4LDMyNzcxKSxuZXcgYigyMTQ3NDgzNjQ4LDMyNzcwKSxuZXcgYigyMTQ3NDgzNjQ4LDEyOCksbmV3IGIoMCwzMjc3OCksbmV3IGIoMjE0NzQ4MzY0OCwyMTQ3NDgzNjU4KSxuZXcgYigyMTQ3NDgzNjQ4LDIxNDc1MTY1NDUpLG5ldyBiKDIxNDc0ODM2NDgsMzI4OTYpLG5ldyBiKDAsMjE0NzQ4MzY0OSksXG5uZXcgYigyMTQ3NDgzNjQ4LDIxNDc1MTY0MjQpXTtXPVtbMCwzNiwzLDQxLDE4XSxbMSw0NCwxMCw0NSwyXSxbNjIsNiw0MywxNSw2MV0sWzI4LDU1LDI1LDIxLDU2XSxbMjcsMjAsMzksOCwxNF1dOyB0cnVlPyEoX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAoZnVuY3Rpb24oKXtyZXR1cm4gQ30pLmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXywgZXhwb3J0cywgbW9kdWxlKSxcblx0XHRcdFx0X19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gIT09IHVuZGVmaW5lZCAmJiAobW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXykpOnVuZGVmaW5lZH0pKHRoaXMpO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBleHBvcnRzLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgIHRydWUgPyBtb2R1bGUuZXhwb3J0cyA6IHVuZGVmaW5lZFxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0Nhc2hvdXQuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9DYXNob3V0LmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogQ2FzaG91dE9ubHlSZXF1ZXN0LCBDYXNob3V0T25seVJlc3BvbnNlICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkNhc2hvdXRPbmx5UmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIENhc2hvdXRPbmx5UmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQ2FzaG91dE9ubHlSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIENhc2hvdXRPbmx5UmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NZXNzYWdlcyAqLyBcIi4vc3JjL01lc3NhZ2VzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU3BpTW9kZWxzICovIFwiLi9zcmMvU3BpTW9kZWxzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUmVxdWVzdElkSGVscGVyICovIFwiLi9zcmMvUmVxdWVzdElkSGVscGVyLmpzXCIpO1xuXG5cblxuXG5cbnZhciBDYXNob3V0T25seVJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDYXNob3V0T25seVJlcXVlc3QoYW1vdW50Q2VudHMsIHBvc1JlZklkKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBDYXNob3V0T25seVJlcXVlc3QpO1xuXG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuQ2FzaG91dEFtb3VudCA9IGFtb3VudENlbnRzO1xuICAgIHRoaXMuU3VyY2hhcmdlQW1vdW50ID0gbnVsbDtcbiAgICB0aGlzLkNvbmZpZyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJTcGlDb25maWdcIl0oKTtcbiAgICB0aGlzLk9wdGlvbnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKENhc2hvdXRPbmx5UmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBcInBvc19yZWZfaWRcIjogdGhpcy5Qb3NSZWZJZCxcbiAgICAgICAgXCJjYXNoX2Ftb3VudFwiOiB0aGlzLkNhc2hvdXRBbW91bnQsXG4gICAgICAgIFwic3VyY2hhcmdlX2Ftb3VudFwiOiB0aGlzLlN1cmNoYXJnZUFtb3VudFxuICAgICAgfTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcmludE1lcmNoYW50Q29weSA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJvbXB0Rm9yQ3VzdG9tZXJDb3B5T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFNpZ25hdHVyZUZsb3dPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5BZGRSZWNlaXB0Q29uZmlnKGRhdGEpO1xuICAgICAgdGhpcy5PcHRpb25zLkFkZE9wdGlvbnMoZGF0YSk7XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJjc2hvdXRcIiksIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLkNhc2hvdXRPbmx5UmVxdWVzdCwgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENhc2hvdXRPbmx5UmVxdWVzdDtcbn0oKTtcbnZhciBDYXNob3V0T25seVJlc3BvbnNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2FzaG91dE9ubHlSZXNwb25zZShtKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBDYXNob3V0T25seVJlc3BvbnNlKTtcblxuICAgIHRoaXMuX20gPSBtO1xuICAgIHRoaXMuUmVxdWVzdElkID0gbS5JZDtcbiAgICB0aGlzLlBvc1JlZklkID0gbS5EYXRhLnBvc19yZWZfaWQ7XG4gICAgdGhpcy5TY2hlbWVOYW1lID0gbS5EYXRhLnNjaGVtZV9uYW1lO1xuICAgIHRoaXMuU3VjY2VzcyA9IG0uR2V0U3VjY2Vzc1N0YXRlKCkgPT0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJTdWNjZXNzU3RhdGVcIl0uU3VjY2VzcztcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoQ2FzaG91dE9ubHlSZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiR2V0UlJOXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJSTigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJycm5cIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldENhc2hvdXRBbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0Q2FzaG91dEFtb3VudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJjYXNoX2Ftb3VudFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmFua05vbkNhc2hBbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmFua05vbkNhc2hBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiYmFua19ub25jYXNoX2Ftb3VudFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmFua0Nhc2hBbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmFua0Nhc2hBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiYmFua19jYXNoX2Ftb3VudFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0Q3VzdG9tZXJSZWNlaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEN1c3RvbWVyUmVjZWlwdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJjdXN0b21lcl9yZWNlaXB0XCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRNZXJjaGFudFJlY2VpcHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0TWVyY2hhbnRSZWNlaXB0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcIm1lcmNoYW50X3JlY2VpcHRcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFJlc3BvbnNlVGV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZXNwb25zZVRleHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiaG9zdF9yZXNwb25zZV90ZXh0XCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSZXNwb25zZUNvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UmVzcG9uc2VDb2RlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImhvc3RfcmVzcG9uc2VfY29kZVwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0VGVybWluYWxSZWZlcmVuY2VJZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRUZXJtaW5hbFJlZmVyZW5jZUlkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcInRlcm1pbmFsX3JlZl9pZFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QWNjb3VudFR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QWNjb3VudFR5cGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiYWNjb3VudF90eXBlXCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRBdXRoQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRBdXRoQ29kZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJhdXRoX2NvZGVcIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEJhbmtEYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbmtEYXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImJhbmtfZGF0ZVwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmFua1RpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmFua1RpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiYmFua190aW1lXCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRNYXNrZWRQYW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0TWFza2VkUGFuKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcIm1hc2tlZF9wYW5cIl07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRlcm1pbmFsSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VGVybWluYWxJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJ0ZXJtaW5hbF9pZFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2FzTWVyY2hhbnRSZWNlaXB0UHJpbnRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNNZXJjaGFudFJlY2VpcHRQcmludGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcIm1lcmNoYW50X3JlY2VpcHRfcHJpbnRlZFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2FzQ3VzdG9tZXJSZWNlaXB0UHJpbnRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNDdXN0b21lclJlY2VpcHRQcmludGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcImN1c3RvbWVyX3JlY2VpcHRfcHJpbnRlZFwiXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0U3VyY2hhcmdlQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFN1cmNoYXJnZUFtb3VudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJzdXJjaGFyZ2VfYW1vdW50XCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSZXNwb25zZVZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlVmFsdWUoYXR0cmlidXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW2F0dHJpYnV0ZV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENhc2hvdXRPbmx5UmVzcG9uc2U7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0Nvbm5lY3Rpb24uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9Db25uZWN0aW9uLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogQ29ubmVjdGlvblN0YXRlLCBTUElfUFJPVE9DT0wsIENvbm5lY3Rpb25TdGF0ZUV2ZW50QXJncywgTWVzc2FnZUV2ZW50QXJncywgQ29ubmVjdGlvbiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJDb25uZWN0aW9uU3RhdGVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBDb25uZWN0aW9uU3RhdGU7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNQSV9QUk9UT0NPTFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNQSV9QUk9UT0NPTDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQ29ubmVjdGlvblN0YXRlRXZlbnRBcmdzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQ29ubmVjdGlvblN0YXRlRXZlbnRBcmdzOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJNZXNzYWdlRXZlbnRBcmdzXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTWVzc2FnZUV2ZW50QXJnczsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQ29ubmVjdGlvblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIENvbm5lY3Rpb247IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuXG5cbnZhciBDb25uZWN0aW9uU3RhdGUgPSB7XG4gIERpc2Nvbm5lY3RlZDogJ0Rpc2Nvbm5lY3RlZCcsXG4gIENvbm5lY3Rpbmc6ICdDb25uZWN0aW5nJyxcbiAgQ29ubmVjdGVkOiAnQ29ubmVjdGVkJ1xufTtcbnZhciBTUElfUFJPVE9DT0wgPSAnc3BpLjIuNi4wJztcbnZhciBDb25uZWN0aW9uU3RhdGVFdmVudEFyZ3MgPSBmdW5jdGlvbiBDb25uZWN0aW9uU3RhdGVFdmVudEFyZ3MoY29ubmVjdGlvblN0YXRlKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkodGhpcywgQ29ubmVjdGlvblN0YXRlRXZlbnRBcmdzKTtcblxuICB0aGlzLkNvbm5lY3Rpb25TdGF0ZSA9IGNvbm5lY3Rpb25TdGF0ZTtcbn07XG52YXIgTWVzc2FnZUV2ZW50QXJncyA9IGZ1bmN0aW9uIE1lc3NhZ2VFdmVudEFyZ3MobWVzc2FnZSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIE1lc3NhZ2VFdmVudEFyZ3MpO1xuXG4gIHRoaXMuTWVzc2FnZSA9IG1lc3NhZ2U7XG59O1xudmFyIENvbm5lY3Rpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb25uZWN0aW9uKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkodGhpcywgQ29ubmVjdGlvbik7XG5cbiAgICB0aGlzLkFkZHJlc3MgPSBudWxsO1xuICAgIHRoaXMuQ29ubmVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5TdGF0ZSA9IENvbm5lY3Rpb25TdGF0ZS5EaXNjb25uZWN0ZWQ7XG4gICAgdGhpcy5TcGlQcm90b2NvbCA9IFNQSV9QUk9UT0NPTDtcbiAgICB0aGlzLl93cyA9IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIFdlYlNvY2tldCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBXZWJTb2NrZXRzJyk7XG4gICAgfVxuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKShDb25uZWN0aW9uLCBbe1xuICAgIGtleTogXCJDb25uZWN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIENvbm5lY3QoVXNlU2VjdXJlV2ViU29ja2V0cykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuU3RhdGUgPT09IENvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQgfHwgdGhpcy5TdGF0ZSA9PT0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RpbmcpIHtcbiAgICAgICAgLy8gYWxyZWFkeSBjb25uZWN0ZWQgb3IgY29ubmVjdGluZy4gZGlzY29ubmVjdCBmaXJzdC5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLlN0YXRlID0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3Rpbmc7IC8vQ3JlYXRlIGEgbmV3IHNvY2tldCBpbnN0YW5jZSBzcGVjaWZ5aW5nIHRoZSB1cmwsIFNQSSBwcm90b2NvbCBhbmQgV2Vic29ja2V0IHRvIHVzZS5cbiAgICAgIC8vVGhlIHdpbGwgY3JlYXRlIGEgVENQL0lQIHNvY2tldCBjb25uZWN0aW9uIHRvIHRoZSBwcm92aWRlZCBVUkwgYW5kIHBlcmZvcm0gSFRUUCB3ZWJzb2NrZXQgbmVnb3RpYXRpb25cblxuICAgICAgdGhpcy5fd3MgPSBuZXcgV2ViU29ja2V0KHRoaXMuQWRkcmVzcywgdGhpcy5TcGlQcm90b2NvbCk7XG5cbiAgICAgIHRoaXMuX3dzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLnBvbGxXZWJTb2NrZXRDb25uZWN0aW9uKCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl93cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgICByZXR1cm4gX3RoaXMub25NZXNzYWdlUmVjZWl2ZWQocGF5bG9hZCk7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl93cy5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMub25DbG9zZWQoKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX3dzLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5vbkVycm9yKGVycik7XG4gICAgICB9O1xuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnQ29ubmVjdGlvblN0YXR1c0NoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogbmV3IENvbm5lY3Rpb25TdGF0ZUV2ZW50QXJncyhDb25uZWN0aW9uU3RhdGUuQ29ubmVjdGluZylcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiRGlzY29ubmVjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBEaXNjb25uZWN0KCkge1xuICAgICAgaWYgKHRoaXMuU3RhdGUgPT0gQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZCkgcmV0dXJuO1xuXG4gICAgICBpZiAodGhpcy5fd3MgJiYgdGhpcy5fd3MucmVhZHlTdGF0ZSAhPSB0aGlzLl93cy5DTE9TRUQpIHtcbiAgICAgICAgdGhpcy5fd3MuY2xvc2UoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX3dzKSB7XG4gICAgICAgIHRoaXMuX3dzLm9ub3BlbiA9IG51bGw7XG4gICAgICAgIHRoaXMuX3dzLm9ubWVzc2FnZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3dzLm9uY2xvc2UgPSBudWxsO1xuICAgICAgICB0aGlzLl93cy5vbmVycm9yID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5vbkNsb3NlZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJTZW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNlbmQobWVzc2FnZSkge1xuICAgICAgdGhpcy5fd3Muc2VuZChtZXNzYWdlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25PcGVuZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25PcGVuZWQoKSB7XG4gICAgICB0aGlzLlN0YXRlID0gQ29ubmVjdGlvblN0YXRlLkNvbm5lY3RlZDtcbiAgICAgIHRoaXMuQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdDb25uZWN0aW9uU3RhdHVzQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiBuZXcgQ29ubmVjdGlvblN0YXRlRXZlbnRBcmdzKENvbm5lY3Rpb25TdGF0ZS5Db25uZWN0ZWQpXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uQ2xvc2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xvc2VkKCkge1xuICAgICAgdGhpcy5Db25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuU3RhdGUgPSBDb25uZWN0aW9uU3RhdGUuRGlzY29ubmVjdGVkO1xuICAgICAgdGhpcy5fd3MgPSBudWxsO1xuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ0Nvbm5lY3Rpb25TdGF0dXNDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IG5ldyBDb25uZWN0aW9uU3RhdGVFdmVudEFyZ3MoQ29ubmVjdGlvblN0YXRlLkRpc2Nvbm5lY3RlZClcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicG9sbFdlYlNvY2tldENvbm5lY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9sbFdlYlNvY2tldENvbm5lY3Rpb24oKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGNvdW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAwO1xuXG4gICAgICAvLyBUaW1lb3V0IHRyeWluZyB0byBjb25uZWN0IGFmdGVyIDIwICogMjAwbXMgPSA0MDAwIG1zXG4gICAgICBpZiAodGhpcy5fd3MucmVhZHlTdGF0ZSA9PT0gdGhpcy5fd3MuT1BFTikge1xuICAgICAgICB0aGlzLm9uT3BlbmVkKCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjb3VudCA8IDIwKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIucG9sbFdlYlNvY2tldENvbm5lY3Rpb24oY291bnQpO1xuICAgICAgICB9LCAyMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5EaXNjb25uZWN0KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwib25NZXNzYWdlUmVjZWl2ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25NZXNzYWdlUmVjZWl2ZWQobWVzc2FnZSkge1xuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ01lc3NhZ2VSZWNlaXZlZCcsIHtcbiAgICAgICAgZGV0YWlsOiBuZXcgTWVzc2FnZUV2ZW50QXJncyhtZXNzYWdlLmRhdGEpXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uRXJyb3JcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25FcnJvcihlcnIpIHtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdFcnJvclJlY2VpdmVkJywge1xuICAgICAgICBkZXRhaWw6IG5ldyBNZXNzYWdlRXZlbnRBcmdzKGVycilcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29ubmVjdGlvbjtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvQ3J5cHRvLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9DcnlwdG8uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IENyeXB0byAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJDcnlwdG9cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBDcnlwdG87IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGpzc2hhX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBqc3NoYSAqLyBcIi4vbm9kZV9tb2R1bGVzL2pzc2hhL3NyYy9zaGEuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIganNzaGFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihqc3NoYV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBhZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGFlcy1qcyAqLyBcIi4vbm9kZV9tb2R1bGVzL2Flcy1qcy9pbmRleC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBhZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihhZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyk7XG5cblxuXG5cbnZhciBDcnlwdG8gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDcnlwdG8oKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBDcnlwdG8pO1xuICB9IC8vIDxzdW1tYXJ5PlxuICAvLyBFbmNyeXB0IGEgYmxvY2sgdXNpbmcgQ0JDIGFuZCBQS0NTNy5cbiAgLy8gPC9zdW1tYXJ5PlxuICAvLyA8cGFyYW0gbmFtZT1cImtleVwiPlRoZSBrZXkgdmFsdWU8L3BhcmFtPlxuICAvLyA8cGFyYW0gbmFtZT1cImRhdGFcIj5UaGUgbWVzc2FnZSB0byBlbmNyeXB0PC9wYXJhbT5cbiAgLy8gPHJldHVybnM+UmV0dXJucyB0aGUgcmVzdWx0aW5nIGVuY3J5cHRlZCBzdHJpbmcgZGF0YSBhcyBIRVguPC9yZXR1cm5zPlxuXG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShDcnlwdG8sIG51bGwsIFt7XG4gICAga2V5OiBcIkFlc0VuY3J5cHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQWVzRW5jcnlwdChrZXksIGRhdGEpIHtcbiAgICAgIHZhciBieXRlcyA9IGFlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQuYS51dGlscy5oZXgudG9CeXRlcyhrZXkpO1xuICAgICAgdmFyIGl2ID0gWzB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDBdO1xuICAgICAgdmFyIHRleHRCeXRlcyA9IGFlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQuYS5wYWRkaW5nLnBrY3M3LnBhZChhZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0LmEudXRpbHMudXRmOC50b0J5dGVzKGRhdGEpKTtcbiAgICAgIHZhciBhZXNDYmMgPSBuZXcgYWVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdC5hLk1vZGVPZk9wZXJhdGlvbi5jYmMoYnl0ZXMsIGl2KTtcbiAgICAgIHZhciBlbmNyeXB0ZWRCeXRlcyA9IGFlc0NiYy5lbmNyeXB0KHRleHRCeXRlcyk7XG4gICAgICB2YXIgZW5jcnlwdGVkU3RyaW5nID0gYWVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdC5hLnV0aWxzLmhleC5mcm9tQnl0ZXMoZW5jcnlwdGVkQnl0ZXMpO1xuICAgICAgcmV0dXJuIGVuY3J5cHRlZFN0cmluZztcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIERlY3J5cHQgYSBibG9jayB1c2luZyBhIENCQyBhbmQgUEtDUzcuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwia2V5XCI+VGhlIGtleSB2YWx1ZTwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJkYXRhXCI+dGhlIGRhdGEgdG8gZGVjcnlwdDwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+UmV0dXJucyB0aGUgcmVzdWx0aW5nIGRhdGEgZGVjcnlwdGVkIGluIHBsYWludGV4dC48L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJBZXNEZWNyeXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEFlc0RlY3J5cHQoa2V5LCBkYXRhKSB7XG4gICAgICB2YXIgYnl0ZXMgPSBhZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0LmEudXRpbHMuaGV4LnRvQnl0ZXMoa2V5KTtcbiAgICAgIHZhciBpdiA9IFsweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwLCAweDAwXTtcbiAgICAgIHZhciBlbmNyeXB0ZWRCeXRlcyA9IGFlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQuYS51dGlscy5oZXgudG9CeXRlcyhkYXRhKTtcbiAgICAgIHZhciBhZXNDYmMgPSBuZXcgYWVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdC5hLk1vZGVPZk9wZXJhdGlvbi5jYmMoYnl0ZXMsIGl2KTtcbiAgICAgIHZhciBkZWNyeXB0ZWRCeXRlcyA9IGFlc0NiYy5kZWNyeXB0KGVuY3J5cHRlZEJ5dGVzKTtcbiAgICAgIHZhciBkZWNyeXB0ZWQgPSBhZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0LmEudXRpbHMudXRmOC5mcm9tQnl0ZXMoYWVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdC5hLnBhZGRpbmcucGtjczcuc3RyaXAoZGVjcnlwdGVkQnl0ZXMpKTtcbiAgICAgIHJldHVybiBkZWNyeXB0ZWQ7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBDYWxjdWxhdGVzIHRoZSBITUFDU0hBMjU2IHNpZ25hdHVyZSBvZiBhIG1lc3NhZ2UuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwia2V5XCI+VGhlIEhtYWMgS2V5IGFzIEhFWDwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtZXNzYWdlVG9TaWduXCI+VGhlIG1lc3NhZ2UgdG8gc2lnbjwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+VGhlIEhNQUNTSEEyNTYgc2lnbmF0dXJlIGFzIGEgaGV4IHN0cmluZzwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIkhtYWNTaWduYXR1cmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSG1hY1NpZ25hdHVyZShrZXksIG1lc3NhZ2VUb1NpZ24pIHtcbiAgICAgIHZhciBzaGFPYmogPSBuZXcganNzaGFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEoXCJTSEEtMjU2XCIsIFwiVEVYVFwiKTtcbiAgICAgIHNoYU9iai5zZXRITUFDS2V5KGtleSwgJ0hFWCcpO1xuICAgICAgc2hhT2JqLnVwZGF0ZShtZXNzYWdlVG9TaWduKTtcbiAgICAgIHJldHVybiBzaGFPYmouZ2V0SE1BQyhcIkhFWFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyB1dGlsaXR5IGZ1bmN0aW9uIGNhbGN1bGF0ZXMgdGhlIFNIQS0yNTYgdmFsdWUgaW4gaGV4YWRlY2ltYWwgZm9ybWF0XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlIHRoZSB2YWx1ZSB0byBiZSBoYXNoZWRcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIkdlbmVyYXRlSGFzaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZW5lcmF0ZUhhc2godmFsdWUpIHtcbiAgICAgIHZhciBzaGFPYmogPSBuZXcganNzaGFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEoJ1NIQS0yNTYnLCAnSEVYJyk7XG4gICAgICBzaGFPYmoudXBkYXRlKHZhbHVlKTtcbiAgICAgIHZhciBzaGFIYXNoID0gc2hhT2JqLmdldEhhc2goJ0hFWCcpO1xuICAgICAgcmV0dXJuIHNoYUhhc2g7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIENyeXB0bztcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvRGlmZmllSGVsbG1hbi5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL0RpZmZpZUhlbGxtYW4uanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBEaWZmaWVIZWxsbWFuICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkRpZmZpZUhlbGxtYW5cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBEaWZmaWVIZWxsbWFuOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBibl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYm4uanMgKi8gXCIuL25vZGVfbW9kdWxlcy9ibi5qcy9saWIvYm4uanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgYm5fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihibl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fKTtcblxuXG4gLy8gVGhpcyBjcmVhdGVzIHRoZSBwcml2YXRlIGFuZCBwdWJsaWMga2V5cyBmb3IgZGlmZmllLWhlbGxtYW4gKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RpZmZpZSVFMiU4MCU5M0hlbGxtYW5fa2V5X2V4Y2hhbmdlI0NyeXB0b2dyYXBoaWNfZXhwbGFuYXRpb24pXG4vLyBSRVFVSVJFTUVOVFM6IGJuLmpzXG4vLyBBU1NVTVBUSU9OUzogSW5wdXRzIHRvIHRoZSBmdW5jdGlvbnMgYXJlIGhleGFkZWNpbWFsIHN0cmluZ3Ncbi8vIDxzdW1tYXJ5PlxuLy8gVGhpcyBjbGFzcyBpbXBsZW1lbnRzIHRoZSBEaWZmaWUtSGVsbG1hbiBhbGdvcml0aG0gdXNpbmcgQmlnSW50ZWdlcnMuXG4vLyBJdCBjYW4gZG8gdGhlIDMgbWFpbiB0aGluZ3M6XG4vLyAxLiBHZW5lcmF0ZSBhIHJhbmRvbSBQcml2YXRlIEtleSBmb3IgeW91LlxuLy8gMi4gR2VuZXJhdGUgeW91ciBQdWJsaWMgS2V5IGJhc2VkIG9uIHlvdXIgUHJpdmF0ZSBLZXkuXG4vLyAzLiBHZW5lcmF0ZSB0aGUgU2VjcmV0IGdpdmVuIHRoZWlyIFB1YmxpYyBLZXkgYW5kIHlvdXIgUHJpdmF0ZSBLZXlcbi8vIHAgYW5kIGcgYXJlIHRoZSBzaGFyZWQgY29uc3RhbnRzIGZvciB0aGUgYWxnb3JpdGhtLCBha2EgcHJpbWVQIGFuZCBwcmltZUcuXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBEaWZmaWVIZWxsbWFuID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRGlmZmllSGVsbG1hbigpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIERpZmZpZUhlbGxtYW4pO1xuICB9IC8vIDxzdW1tYXJ5PlxuICAvLyBHZW5lcmF0ZXMgYSByYW5kb20gUHJpdmF0ZSBLZXkgdGhhdCB5b3UgY2FuIHVzZS5cbiAgLy8gPC9zdW1tYXJ5PlxuICAvLyA8cGFyYW0gbmFtZT1cInBcIj48L3BhcmFtPlxuICAvLyA8cmV0dXJucz5SYW5kb20gUHJpdmF0ZSBLZXk8L3JldHVybnM+XG5cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKERpZmZpZUhlbGxtYW4sIFt7XG4gICAga2V5OiBcIlJhbmRvbVByaXZhdGVLZXlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gUmFuZG9tUHJpdmF0ZUtleShtYXhWYWx1ZSkge1xuICAgICAgdmFyIG1heFZhbHVlQk4gPSBuZXcgYm5fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEobWF4VmFsdWUpO1xuICAgICAgdmFyIHNoaWZ0RGlzdGFuY2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwICsgMSk7XG4gICAgICB2YXIgcmFuZEJpdEludCA9IG1heFZhbHVlQk4uc2hybihzaGlmdERpc3RhbmNlKTsgLy8gUmlnaHQgc2hpZnQgZGl2aWRlcyBieSBhIHBvd2VyIG9mIDJcblxuICAgICAgdmFyIG1pbiA9IG5ldyBibl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYSgyKTtcblxuICAgICAgaWYgKHJhbmRCaXRJbnQuY21wKG1pbikgPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1pbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJhbmRCaXRJbnQ7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBDYWxjdWxhdGVzIHRoZSBQdWJsaWMgS2V5IGZyb20gYSBQcml2YXRlIEtleS5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJwXCI+PC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cImdcIj48L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwicHJpdmF0ZUtleVwiPjwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+UHVibGljIEtleSAoSGV4KTwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIlB1YmxpY0tleVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBQdWJsaWNLZXkocCwgZywgcHJpdmF0ZUtleSkge1xuICAgICAgdmFyIGFIZXggPSBuZXcgYm5fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEocHJpdmF0ZUtleSwgMTYpO1xuICAgICAgdmFyIGdIZXggPSBuZXcgYm5fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEoZywgMTYpO1xuICAgICAgdmFyIG1vbnRQcmltZSA9IGJuX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLm1vbnQobmV3IGJuX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hKHAsIDE2KSk7XG4gICAgICB2YXIgZ1JlZCA9IGdIZXgudG9SZWQobW9udFByaW1lKTtcbiAgICAgIHZhciBzZWNyZXQgPSBnUmVkLnJlZFBvdyhhSGV4KS5mcm9tUmVkKCkudG9TdHJpbmcoMTYpO1xuICAgICAgcmV0dXJuIHNlY3JldDtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIENhbGN1bGF0ZXMgdGhlIHNoYXJlZCBzZWNyZXQgZ2l2ZW4gdGhlaXIgUHVibGljIEtleSAoQSkgYW5kIHlvdXIgUHJpdmF0ZSBLZXkgKGIpXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwicFwiPjwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJ0aGVpclB1YmxpY0tleVwiPjwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJ5b3VyUHJpdmF0ZUtleVwiPjwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+PC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiU2VjcmV0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNlY3JldChwLCB0aGVpclB1YmxpY0tleSwgeW91clByaXZhdGVLZXkpIHtcbiAgICAgIHZhciBiSGV4ID0gbmV3IGJuX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hKHRoZWlyUHVibGljS2V5LCAxNik7XG4gICAgICB2YXIgQUhleCA9IG5ldyBibl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYSh5b3VyUHJpdmF0ZUtleSwgMTYpO1xuICAgICAgdmFyIG1vbnRQcmltZSA9IGJuX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLm1vbnQobmV3IGJuX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hKHAsIDE2KSk7XG4gICAgICB2YXIgQlJlZCA9IGJIZXgudG9SZWQobW9udFByaW1lKTtcbiAgICAgIHJldHVybiBCUmVkLnJlZFBvdyhBSGV4KS5mcm9tUmVkKCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIERpZmZpZUhlbGxtYW47XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0tleVJvbGxpbmdIZWxwZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9LZXlSb2xsaW5nSGVscGVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogS2V5Um9sbGluZ0hlbHBlciwgS2V5Um9sbGluZ1Jlc3VsdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJLZXlSb2xsaW5nSGVscGVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gS2V5Um9sbGluZ0hlbHBlcjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiS2V5Um9sbGluZ1Jlc3VsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEtleVJvbGxpbmdSZXN1bHQ7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NZXNzYWdlcyAqLyBcIi4vc3JjL01lc3NhZ2VzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9DcnlwdG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ3J5cHRvICovIFwiLi9zcmMvQ3J5cHRvLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZWNyZXRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NlY3JldHMgKi8gXCIuL3NyYy9TZWNyZXRzLmpzXCIpO1xuXG5cblxuXG5cbnZhciBLZXlSb2xsaW5nSGVscGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gS2V5Um9sbGluZ0hlbHBlcigpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIEtleVJvbGxpbmdIZWxwZXIpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShLZXlSb2xsaW5nSGVscGVyLCBudWxsLCBbe1xuICAgIGtleTogXCJQZXJmb3JtS2V5Um9sbGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBQZXJmb3JtS2V5Um9sbGluZyhrclJlcXVlc3QsIGN1cnJlbnRTZWNyZXRzKSB7XG4gICAgICB2YXIgbSA9IG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0oa3JSZXF1ZXN0LklkLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5LZXlSb2xsUmVzcG9uc2UsIHtcbiAgICAgICAgXCJzdGF0dXNcIjogXCJjb25maXJtZWRcIlxuICAgICAgfSwgdHJ1ZSk7XG4gICAgICB2YXIgbmV3U2VjcmV0cyA9IG5ldyBfU2VjcmV0c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiU2VjcmV0c1wiXShfQ3J5cHRvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJDcnlwdG9cIl0uR2VuZXJhdGVIYXNoKGN1cnJlbnRTZWNyZXRzLkVuY0tleSkudG9VcHBlckNhc2UoKSwgX0NyeXB0b19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiQ3J5cHRvXCJdLkdlbmVyYXRlSGFzaChjdXJyZW50U2VjcmV0cy5IbWFjS2V5KS50b1VwcGVyQ2FzZSgpKTtcbiAgICAgIHJldHVybiBuZXcgS2V5Um9sbGluZ1Jlc3VsdChtLCBuZXdTZWNyZXRzKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gS2V5Um9sbGluZ0hlbHBlcjtcbn0oKTtcbnZhciBLZXlSb2xsaW5nUmVzdWx0ID0gZnVuY3Rpb24gS2V5Um9sbGluZ1Jlc3VsdChrZXlSb2xsaW5nQ29uZmlybWF0aW9uLCBuZXdTZWNyZXRzKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgS2V5Um9sbGluZ1Jlc3VsdCk7XG5cbiAgdGhpcy5LZXlSb2xsaW5nQ29uZmlybWF0aW9uID0ga2V5Um9sbGluZ0NvbmZpcm1hdGlvbjtcbiAgdGhpcy5OZXdTZWNyZXRzID0gbmV3U2VjcmV0cztcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL0xvZ2dlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvTG9nZ2VyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBMb2dnZXIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTG9nZ2VyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTG9nZ2VyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcblxuXG52YXIgTG9nZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTG9nZ2VyKGVsZW1lbnQpIHtcbiAgICB2YXIgbGluZVNlcGVyYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ1xcbic7XG5cbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIExvZ2dlcik7XG5cbiAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5saW5lU2VwZXJhdG9yID0gbGluZVNlcGVyYXRvcjtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoTG9nZ2VyLCBbe1xuICAgIGtleTogXCJJbmZvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluZm8oKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWZmZXIucHVzaChhcmdzLmpvaW4oJyAnKSk7XG5cbiAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJEZWJ1Z1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBEZWJ1ZygpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVmZmVyLnB1c2goYXJncy5qb2luKCcgJykpO1xuXG4gICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2FyblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXJuKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgICAgIGFyZ3NbX2tleTNdID0gYXJndW1lbnRzW19rZXkzXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5idWZmZXIucHVzaChhcmdzLmpvaW4oJyAnKSk7XG5cbiAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJFcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBFcnJvcigpIHtcbiAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNCksIF9rZXk0ID0gMDsgX2tleTQgPCBfbGVuNDsgX2tleTQrKykge1xuICAgICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVmZmVyLnB1c2goYXJncy5qb2luKCcgJykpO1xuXG4gICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiQ29uc29sZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDb25zb2xlKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleTVdID0gYXJndW1lbnRzW19rZXk1XTtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5sb2coYXJncy5qb2luKCcgJykpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfcmVuZGVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW5kZXIoKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuaW5uZXJUZXh0ID0gdGhpcy5idWZmZXIuam9pbih0aGlzLmxpbmVTZXBlcmF0b3IpO1xuICAgICAgdGhpcy5lbGVtZW50LnNjcm9sbFRvcCA9IHRoaXMuZWxlbWVudC5zY3JvbGxIZWlnaHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkNsZWFyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIENsZWFyKCkge1xuICAgICAgdGhpcy5idWZmZXIgPSBbXTtcblxuICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExvZ2dlcjtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvTWVzc2FnZXMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvTWVzc2FnZXMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogRXZlbnRzLCBTdWNjZXNzU3RhdGUsIE1lc3NhZ2VTdGFtcCwgTWVzc2FnZUVudmVsb3BlLCBNZXNzYWdlICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkV2ZW50c1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEV2ZW50czsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU3VjY2Vzc1N0YXRlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU3VjY2Vzc1N0YXRlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJNZXNzYWdlU3RhbXBcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBNZXNzYWdlU3RhbXA7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIk1lc3NhZ2VFbnZlbG9wZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1lc3NhZ2VFbnZlbG9wZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTWVzc2FnZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1lc3NhZ2U7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9DcnlwdG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ3J5cHRvICovIFwiLi9zcmMvQ3J5cHRvLmpzXCIpO1xuXG5cbiAvLyA8c3VtbWFyeT5cbi8vIEV2ZW50cyBzdGF0aWNhbGx5IGRlY2xhcmVzIHRoZSB2YXJpb3VzIGV2ZW50IG5hbWVzIGluIG1lc3NhZ2VzLlxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgRXZlbnRzID0ge1xuICBQYWlyUmVxdWVzdDogXCJwYWlyX3JlcXVlc3RcIixcbiAgS2V5UmVxdWVzdDogXCJrZXlfcmVxdWVzdFwiLFxuICBLZXlSZXNwb25zZTogXCJrZXlfcmVzcG9uc2VcIixcbiAgS2V5Q2hlY2s6IFwia2V5X2NoZWNrXCIsXG4gIFBhaXJSZXNwb25zZTogXCJwYWlyX3Jlc3BvbnNlXCIsXG4gIERyb3BLZXlzQWR2aWNlOiBcImRyb3Bfa2V5c1wiLFxuICBMb2dpblJlcXVlc3Q6IFwibG9naW5fcmVxdWVzdFwiLFxuICBMb2dpblJlc3BvbnNlOiBcImxvZ2luX3Jlc3BvbnNlXCIsXG4gIFBpbmc6IFwicGluZ1wiLFxuICBQb25nOiBcInBvbmdcIixcbiAgUHVyY2hhc2VSZXF1ZXN0OiBcInB1cmNoYXNlXCIsXG4gIFB1cmNoYXNlUmVzcG9uc2U6IFwicHVyY2hhc2VfcmVzcG9uc2VcIixcbiAgQ2FuY2VsVHJhbnNhY3Rpb25SZXF1ZXN0OiBcImNhbmNlbF90cmFuc2FjdGlvblwiLFxuICBDYW5jZWxUcmFuc2FjdGlvblJlc3BvbnNlOiBcImNhbmNlbF9yZXNwb25zZVwiLFxuICBHZXRMYXN0VHJhbnNhY3Rpb25SZXF1ZXN0OiBcImdldF9sYXN0X3RyYW5zYWN0aW9uXCIsXG4gIEdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlOiBcImxhc3RfdHJhbnNhY3Rpb25cIixcbiAgUmVmdW5kUmVxdWVzdDogXCJyZWZ1bmRcIixcbiAgUmVmdW5kUmVzcG9uc2U6IFwicmVmdW5kX3Jlc3BvbnNlXCIsXG4gIFNpZ25hdHVyZVJlcXVpcmVkOiBcInNpZ25hdHVyZV9yZXF1aXJlZFwiLFxuICBTaWduYXR1cmVEZWNsaW5lZDogXCJzaWduYXR1cmVfZGVjbGluZVwiLFxuICBTaWduYXR1cmVBY2NlcHRlZDogXCJzaWduYXR1cmVfYWNjZXB0XCIsXG4gIEF1dGhDb2RlUmVxdWlyZWQ6IFwiYXV0aG9yaXNhdGlvbl9jb2RlX3JlcXVpcmVkXCIsXG4gIEF1dGhDb2RlQWR2aWNlOiBcImF1dGhvcmlzYXRpb25fY29kZV9hZHZpY2VcIixcbiAgQ2FzaG91dE9ubHlSZXF1ZXN0OiBcImNhc2hcIixcbiAgQ2FzaG91dE9ubHlSZXNwb25zZTogXCJjYXNoX3Jlc3BvbnNlXCIsXG4gIE1vdG9QdXJjaGFzZVJlcXVlc3Q6IFwibW90b19wdXJjaGFzZVwiLFxuICBNb3RvUHVyY2hhc2VSZXNwb25zZTogXCJtb3RvX3B1cmNoYXNlX3Jlc3BvbnNlXCIsXG4gIFNldHRsZVJlcXVlc3Q6IFwic2V0dGxlXCIsXG4gIFNldHRsZVJlc3BvbnNlOiBcInNldHRsZV9yZXNwb25zZVwiLFxuICBTZXR0bGVtZW50RW5xdWlyeVJlcXVlc3Q6IFwic2V0dGxlbWVudF9lbnF1aXJ5XCIsXG4gIFNldHRsZW1lbnRFbnF1aXJ5UmVzcG9uc2U6IFwic2V0dGxlbWVudF9lbnF1aXJ5X3Jlc3BvbnNlXCIsXG4gIFNldFBvc0luZm9SZXF1ZXN0OiBcInNldF9wb3NfaW5mb1wiLFxuICBTZXRQb3NJbmZvUmVzcG9uc2U6IFwic2V0X3Bvc19pbmZvX3Jlc3BvbnNlXCIsXG4gIEtleVJvbGxSZXF1ZXN0OiBcInJlcXVlc3RfdXNlX25leHRfa2V5c1wiLFxuICBLZXlSb2xsUmVzcG9uc2U6IFwicmVzcG9uc2VfdXNlX25leHRfa2V5c1wiLFxuICBFcnJvcjogXCJlcnJvclwiLFxuICBJbnZhbGlkSG1hY1NpZ25hdHVyZTogXCJfSU5WQUxJRF9TSUdOQVRVUkVfXCIsXG4gIC8vIFBheSBBdCBUYWJsZSBSZWxhdGVkIE1lc3NhZ2VzXG4gIFBheUF0VGFibGVHZXRUYWJsZUNvbmZpZzogXCJnZXRfdGFibGVfY29uZmlnXCIsXG4gIC8vIGluY29taW5nLiBXaGVuIGVmdHBvcyB3YW50cyB0byBhc2sgdXMgZm9yIFBAVCBjb25maWd1cmF0aW9uLlxuICBQYXlBdFRhYmxlU2V0VGFibGVDb25maWc6IFwic2V0X3RhYmxlX2NvbmZpZ1wiLFxuICAvLyBvdXRnb2luZy4gV2hlbiB3ZSB3YW50IHRvIGluc3RydWN0IGVmdHBvcyB3aXRoIHRoZSBQQFQgY29uZmlndXJhdGlvbi5cbiAgUGF5QXRUYWJsZUdldEJpbGxEZXRhaWxzOiBcImdldF9iaWxsX2RldGFpbHNcIixcbiAgLy8gaW5jb21pbmcuIFdoZW4gZWZ0cG9zIHdhbnRzIHRvIGFyZXRyaWV2ZSB0aGUgYmlsbCBmb3IgYSB0YWJsZS5cbiAgUGF5QXRUYWJsZUJpbGxEZXRhaWxzOiBcImJpbGxfZGV0YWlsc1wiLFxuICAvLyBvdXRnb2luZy4gV2UgcmVwbHkgd2l0aCB0aGlzIHdoZW4gZWZ0cG9zIHJlcXVlc3RzIHRvIHVzIGdldF9iaWxsX2RldGFpbHMuXG4gIFBheUF0VGFibGVCaWxsUGF5bWVudDogXCJiaWxsX3BheW1lbnRcIixcbiAgLy8gaW5jb21pbmcuIFdoZW4gdGhlIGVmdHBvcyBhZHZpY2VzIFxuICBQcmludGluZ1JlcXVlc3Q6IFwicHJpbnRcIixcbiAgUHJpbnRpbmdSZXNwb25zZTogXCJwcmludF9yZXNwb25zZVwiLFxuICBUZXJtaW5hbFN0YXR1c1JlcXVlc3Q6IFwiZ2V0X3Rlcm1pbmFsX3N0YXR1c1wiLFxuICBUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlOiBcInRlcm1pbmFsX3N0YXR1c1wiLFxuICBCYXR0ZXJ5TGV2ZWxDaGFuZ2VkOiBcImJhdHRlcnlfbGV2ZWxfY2hhbmdlZFwiLFxuICBQYXlBdFRhYmxlR2V0T3BlblRhYmxlczogXCJnZXRfb3Blbl90YWJsZXNcIixcbiAgUGF5QXRUYWJsZU9wZW5UYWJsZXM6IFwib3Blbl90YWJsZXNcIixcbiAgUGF5QXRUYWJsZUJpbGxQYXltZW50Rmxvd0VuZGVkOiBcImJpbGxfcGF5bWVudF9mbG93X2VuZGVkXCJcbn07XG52YXIgU3VjY2Vzc1N0YXRlID0ge1xuICBVbmtub3duOiAnVW5rbm93bicsXG4gIFN1Y2Nlc3M6ICdTdWNjZXNzJyxcbiAgRmFpbGVkOiAnRmFpbGVkJ1xufTsgLy8gPHN1bW1hcnk+XG4vLyBNZXNzYWdlU3RhbXAgcmVwcmVzZW50cyB3aGF0IGlzIHJlcXVpcmVkIHRvIHR1cm4gYW4gb3V0Z29pbmcgTWVzc2FnZSBpbnRvIEpzb25cbi8vIGluY2x1ZGluZyBlbmNyeXB0aW9uIGFuZCBkYXRlIHNldHRpbmcuXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBNZXNzYWdlU3RhbXAgPSBmdW5jdGlvbiBNZXNzYWdlU3RhbXAocG9zSWQsIHNlY3JldHMsIHNlcnZlclRpbWVEZWx0YSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIE1lc3NhZ2VTdGFtcCk7XG5cbiAgdGhpcy5Qb3NJZCA9IHBvc0lkO1xuICB0aGlzLlNlY3JldHMgPSBzZWNyZXRzO1xuICB0aGlzLlNlcnZlclRpbWVEZWx0YSA9IHNlcnZlclRpbWVEZWx0YTtcbn07IC8vIDxzdW1tYXJ5PlxuLy8gTWVzc2FnZUVudmVsb3BlIHJlcHJlc2VudHMgdGhlIG91dGVyIHN0cnVjdHVyZSBvZiBhbnkgbWVzc2FnZSB0aGF0IGlzIGV4Y2hhbmdlZFxuLy8gYmV0d2VlbiB0aGUgUG9zIGFuZCB0aGUgUGluUGFkIGFuZCB2aWNlLXZlcnNhLlxuLy8gU2VlIGh0dHA6Ly93d3cuc2ltcGxlcGF5bWVudGFwaS5jb20vIy9hcGkvbWVzc2FnZS1lbmNyeXB0aW9uXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBNZXNzYWdlRW52ZWxvcGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNZXNzYWdlRW52ZWxvcGUobWVzc2FnZSwgZW5jLCBobWFjLCBwb3NJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkodGhpcywgTWVzc2FnZUVudmVsb3BlKTtcblxuICAgIC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBNZXNzYWdlIGZpZWxkIGlzIHNldCBvbmx5IHdoZW4gaW4gVW4tZW5jcnlwdGVkIGZvcm0uXG4gICAgLy8gSW4gZmFjdCBpdCBpcyB0aGUgb25seSBmaWVsZCBpbiBhbiBlbnZlbG9wZSBpbiB0aGUgVW4tRW5jcnlwdGVkIGZvcm0uXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIHRoaXMuTWVzc2FnZSA9IG1lc3NhZ2U7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBlbmMgZmllbGQgaXMgc2V0IG9ubHkgd2hlbiBpbiBFbmNyeXB0ZWQgZm9ybS5cbiAgICAvLyBJdCBjb250YWlucyB0aGUgZW5jcnlwdGVkIEpzb24gb2YgYW5vdGhlciBNZXNzYWdlRW52ZWxvcGUgXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5FbmMgPSBlbmM7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBobWFjIGZpZWxkIGlzIHNldCBvbmx5IHdoZW4gaW4gRW5jcnlwdGVkIGZvcm0uXG4gICAgLy8gSXQgaXMgdGhlIHNpZ25hdHVyZSBvZiB0aGUgXCJlbmNcIiBmaWVsZC5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkhtYWMgPSBobWFjOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgcG9zX2lkIGZpZWxkIGlzIG9ubHkgZmlsbGVkIGZvciBvdXRnb2luZyBFbmNyeXB0ZWQgbWVzc2FnZXMuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5Qb3NJZCA9IHBvc0lkO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKShNZXNzYWdlRW52ZWxvcGUsIFt7XG4gICAga2V5OiBcInRvSlNPTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiB0aGlzLk1lc3NhZ2UsXG4gICAgICAgIGVuYzogdGhpcy5FbmMsXG4gICAgICAgIGhtYWM6IHRoaXMuSG1hYyxcbiAgICAgICAgcG9zX2lkOiB0aGlzLlBvc0lkXG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBNZXNzYWdlRW52ZWxvcGU7XG59KCk7IC8vIDxzdW1tYXJ5PlxuLy8gTWVzc2FnZSByZXByZXNlbnRzIHRoZSBjb250ZW50cyBvZiBhIE1lc3NhZ2UuXG4vLyBTZWUgaHR0cDovL3d3dy5zaW1wbGVwYXltZW50YXBpLmNvbS8jL2FwaS9tZXNzYWdlLWVuY3J5cHRpb25cbi8vIDwvc3VtbWFyeT5cblxudmFyIE1lc3NhZ2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNZXNzYWdlKGlkLCBldmVudE5hbWUsIGRhdGEsIG5lZWRzRW5jcnlwdGlvbikge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkodGhpcywgTWVzc2FnZSk7XG5cbiAgICB0aGlzLklkID0gaWQ7XG4gICAgdGhpcy5FdmVudE5hbWUgPSBldmVudE5hbWU7XG4gICAgdGhpcy5EYXRhID0gZGF0YTtcbiAgICB0aGlzLkRhdGVUaW1lU3RhbXAgPSAnJztcbiAgICB0aGlzLlBvc0lkID0gJyc7IC8vIFBvc19pZCBpcyBzZXQgaGVyZSBvbmx5IGZvciBvdXRnb2luZyBVbi1lbmNyeXB0ZWQgbWVzc2FnZXMuIFxuXG4gICAgdGhpcy5JbmNvbW1pbmdIbWFjID0gJyc7IC8vIFNvbWV0aW1lcyB0aGUgbG9naWMgYXJvdW5kIHRoZSBpbmNvbWluZyBtZXNzYWdlIG1pZ2h0IG5lZWQgYWNjZXNzIHRvIHRoZSBzdWduYXR1cmUsIGZvciBleGFtcGxlIGluIHRoZSBrZXlfY2hlY2suXG5cbiAgICB0aGlzLl9uZWVkc0VuY3J5cHRpb24gPSBuZWVkc0VuY3J5cHRpb247IC8vIERlbm90ZXMgd2hldGhlciBhbiBvdXRnb2luZyBtZXNzYWdlIG5lZWRzIHRvIGJlIGVuY3J5cHRlZCBpbiBUb0pzb24oKVxuXG4gICAgdGhpcy5EZWNyeXB0ZWRKc29uID0gJyc7IC8vIFNldCBvbiBhbiBpbmNvbWluZyBtZXNzYWdlIGp1c3Qgc28geW91IGNhbiBoYXZlIGEgbG9vayBhdCB3aGF0IGl0IGxvb2tlZCBsaWtlIGluIGl0cyBqc29uIGZvcm0uXG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKE1lc3NhZ2UsIFt7XG4gICAga2V5OiBcIkdldFN1Y2Nlc3NTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTdWNjZXNzU3RhdGUoKSB7XG4gICAgICBpZiAoIXRoaXMuRGF0YSB8fCB0eXBlb2YgdGhpcy5EYXRhLnN1Y2Nlc3MgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgcmV0dXJuIFN1Y2Nlc3NTdGF0ZS5Vbmtub3duO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5EYXRhLnN1Y2Nlc3MgPyBTdWNjZXNzU3RhdGUuU3VjY2VzcyA6IFN1Y2Nlc3NTdGF0ZS5GYWlsZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEVycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEVycm9yKCkge1xuICAgICAgcmV0dXJuIHRoaXMuRGF0YS5lcnJvcl9yZWFzb24gPyB0aGlzLkRhdGEuZXJyb3JfcmVhc29uIDogXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0RXJyb3JEZXRhaWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0RXJyb3JEZXRhaWwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5EYXRhLmVycm9yX2RldGFpbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0U2VydmVyVGltZURlbHRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFNlcnZlclRpbWVEZWx0YSgpIHtcbiAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpOyAvLyBTdGFtcCBmb3JtYXQ6IDIwMTgtMDQtMTlUMDE6NDI6MzguMjc5XG5cbiAgICAgIHZhciBkdHMgPSB0aGlzLkRhdGVUaW1lU3RhbXAuc3BsaXQoL1tcXC1cXCtcXC4gOlRdLyk7XG4gICAgICB2YXIgbXNnVGltZSA9IG5ldyBEYXRlKCAvLyB5ZWFyLCBtb250aCwgZGF0ZVxuICAgICAgZHRzWzBdLCBkdHNbMV0gLSAxLCBkdHNbMl0sIC8vIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNcbiAgICAgIGR0c1szXSwgZHRzWzRdLCBkdHNbNV0sIGR0c1s2XSkuZ2V0VGltZSgpOyAvLyBMb2NhbCB0aW1lIHpvbmVcblxuICAgICAgcmV0dXJuIG1zZ1RpbWUgLSBub3c7XG4gICAgfSAvLyBIZWxwZXIgbWV0aG9kIHRvIHBhcnNlIGJhbmsgZGF0ZSBmb3JtYXQgMjAwNDIwMTggKGRkTU15eXl5KVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiVG9Kc29uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvSnNvbihzdGFtcCkge1xuICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICB2YXIgdHpvZmZzZXQgPSBuZXcgRGF0ZSgpLmdldFRpbWV6b25lT2Zmc2V0KCkgKiA2MCAqIDEwMDA7XG4gICAgICB2YXIgYWRqdXN0ZWRUaW1lID0gbmV3IERhdGUobm93IC0gdHpvZmZzZXQgKyBzdGFtcC5TZXJ2ZXJUaW1lRGVsdGEpOyAvLyBGb3JtYXQgZGF0ZTogXCJ5eXl5LU1NLWRkVEhIOm1tOnNzLmZmZlwiXG5cbiAgICAgIHRoaXMuRGF0ZVRpbWVTdGFtcCA9IGFkanVzdGVkVGltZS50b0lTT1N0cmluZygpLnNsaWNlKDAsIC0xKTtcbiAgICAgIHRoaXMuUG9zSWQgPSBzdGFtcC5Qb3NJZDtcbiAgICAgIHZhciBlbnZlbG9wZSA9IHtcbiAgICAgICAgbWVzc2FnZToge1xuICAgICAgICAgIGlkOiB0aGlzLklkLFxuICAgICAgICAgIGV2ZW50OiB0aGlzLkV2ZW50TmFtZSxcbiAgICAgICAgICBkYXRhOiB0aGlzLkRhdGEsXG4gICAgICAgICAgZGF0ZXRpbWU6IHRoaXMuRGF0ZVRpbWVTdGFtcFxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAoIXRoaXMuX25lZWRzRW5jcnlwdGlvbikge1xuICAgICAgICAvLyBVbmVuY3J5cHRlZCBNZXNzYWdlcyBuZWVkIFBvc0lEIGluc2lkZSB0aGUgbWVzc2FnZVxuICAgICAgICBlbnZlbG9wZS5tZXNzYWdlLnBvc19pZCA9IHRoaXMuUG9zSWQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuRGVjcnlwdGVkSnNvbiA9IEpTT04uc3RyaW5naWZ5KGVudmVsb3BlKTtcblxuICAgICAgaWYgKCF0aGlzLl9uZWVkc0VuY3J5cHRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuRGVjcnlwdGVkSnNvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGVuY01zZyA9IF9DcnlwdG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkNyeXB0b1wiXS5BZXNFbmNyeXB0KHN0YW1wLlNlY3JldHMuRW5jS2V5LCB0aGlzLkRlY3J5cHRlZEpzb24pO1xuICAgICAgdmFyIGhtYWNTaWcgPSBfQ3J5cHRvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJDcnlwdG9cIl0uSG1hY1NpZ25hdHVyZShzdGFtcC5TZWNyZXRzLkhtYWNLZXksIGVuY01zZyk7XG4gICAgICB2YXIgZW5jck1lc3NhZ2VFbnZlbG9wZSA9IHtcbiAgICAgICAgZW5jOiBlbmNNc2csXG4gICAgICAgIGhtYWM6IGhtYWNTaWcudG9VcHBlckNhc2UoKSxcbiAgICAgICAgcG9zX2lkOiBzdGFtcC5Qb3NJZFxuICAgICAgfTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShlbmNyTWVzc2FnZUVudmVsb3BlKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJQYXJzZUJhbmtEYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFBhcnNlQmFua0RhdGUoYmFua0RhdGUpIHtcbiAgICAgIGlmIChiYW5rRGF0ZS5sZW5ndGggIT09IDgpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKFwiXCIuY29uY2F0KGJhbmtEYXRlLnN1YnN0cig0LCA0KSwgXCItXCIpLmNvbmNhdChiYW5rRGF0ZS5zdWJzdHIoMiwgMiksIFwiLVwiKS5jb25jYXQoYmFua0RhdGUuc3Vic3RyKDAsIDIpKSk7XG4gICAgfSAvLyBQYXJzZXMgYSBiYW5rIGRhdGUgJiB0aW1lIHN0ciBmcm9tIFwiMDVPY3QxN1wiIC8gXCIwNTowMFwiIChcImRkTU1NeXkvSEg6bW1cIikgaW50byBkYXRlIG9ialxuXG4gIH0sIHtcbiAgICBrZXk6IFwiUGFyc2VCYW5rRGF0ZVRpbWVTdHJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gUGFyc2VCYW5rRGF0ZVRpbWVTdHIoZGF0ZSwgdGltZSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKFwiXCIuY29uY2F0KGRhdGUuc3Vic3RyKDAsIDIpLCBcIiBcIikuY29uY2F0KGRhdGUuc3Vic3RyKDIsIDMpLCBcIiBcIikuY29uY2F0KGRhdGUuc3Vic3RyKDUsIDIpLCBcIiBcIikuY29uY2F0KHRpbWUpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiRnJvbUpzb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gRnJvbUpzb24obXNnSnNvbiwgc2VjcmV0cykge1xuICAgICAgdmFyIGVudiA9IEpTT04ucGFyc2UobXNnSnNvbik7XG5cbiAgICAgIGlmIChlbnYubWVzc2FnZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gbmV3IE1lc3NhZ2UoZW52Lm1lc3NhZ2UuaWQsIGVudi5tZXNzYWdlLmV2ZW50LCBlbnYubWVzc2FnZS5kYXRhLCBmYWxzZSk7XG4gICAgICAgIG1lc3NhZ2UuRGVjcnlwdGVkSnNvbiA9IG1zZ0pzb247XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VjcmV0cyA9PSBudWxsKSB7XG4gICAgICAgIC8vIFRoaXMgbWF5IGhhcHBlbiBpZiB3ZSBzb21laG93IHJlY2VpdmVkIGFuIGVuY3J5cHRlZCBtZXNzYWdlIGZyb20gZWZ0cG9zIGJ1dCB3ZSdyZSBub3QgY29uZmlnZXJlZCB3aXRoIHNlY3JldHMuXG4gICAgICAgIC8vIEZvciBleGFtcGxlLCBpZiB3ZSBjYW5jZWwgdGhlIHBhaXJpbmcgcHJvY2VzcyBhIGxpdHRsZSBsYXRlIGluIHRoZSBnYW1lIGFuZCB3ZSBnZXQgYW4gZW5jcnlwdGVkIGtleV9jaGVjayBtZXNzYWdlIGFmdGVyIHdlJ3ZlIGRyb3BwZWQgdGhlIGtleXMuXG4gICAgICAgIHJldHVybiBuZXcgTWVzc2FnZShcIlVOS05PV05cIiwgXCJOT1NFQ1JFVFNcIiwgbnVsbCwgZmFsc2UpO1xuICAgICAgfSAvLyBJdHMgZW5jcnlwdGVkLCB2ZXJpZnkgc2lnXG5cblxuICAgICAgdmFyIHNpZyA9IF9DcnlwdG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkNyeXB0b1wiXS5IbWFjU2lnbmF0dXJlKHNlY3JldHMuSG1hY0tleSwgZW52LmVuYyk7XG5cbiAgICAgIGlmIChzaWcudG9VcHBlckNhc2UoKSAhPSBlbnYuaG1hYykge1xuICAgICAgICByZXR1cm4gbmV3IE1lc3NhZ2UoXCJfXCIsIEV2ZW50cy5JbnZhbGlkSG1hY1NpZ25hdHVyZSwgbnVsbCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVjcnlwdGVkSnNvbiA9IF9DcnlwdG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkNyeXB0b1wiXS5BZXNEZWNyeXB0KHNlY3JldHMuRW5jS2V5LCBlbnYuZW5jKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIGRlY3J5cHRlZE1zZyA9IEpTT04ucGFyc2UoZGVjcnlwdGVkSnNvbik7XG5cbiAgICAgICAgdmFyIF9tZXNzYWdlID0gbmV3IE1lc3NhZ2UoZGVjcnlwdGVkTXNnLm1lc3NhZ2UuaWQsIGRlY3J5cHRlZE1zZy5tZXNzYWdlLmV2ZW50LCBkZWNyeXB0ZWRNc2cubWVzc2FnZS5kYXRhLCB0cnVlKTtcblxuICAgICAgICBfbWVzc2FnZS5EYXRlVGltZVN0YW1wID0gZGVjcnlwdGVkTXNnLm1lc3NhZ2UuZGF0ZXRpbWU7XG4gICAgICAgIF9tZXNzYWdlLlBvc0lkID0gZGVjcnlwdGVkTXNnLm1lc3NhZ2UucG9zX2lkO1xuICAgICAgICBfbWVzc2FnZS5JbmNvbWluZ0htYWMgPSBlbnYuaG1hYztcbiAgICAgICAgX21lc3NhZ2UuRGVjcnlwdGVkSnNvbiA9IGRlY3J5cHRlZEpzb247XG4gICAgICAgIHJldHVybiBfbWVzc2FnZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNZXNzYWdlKFwiVU5LTk9XTlwiLCBcIlVOUEFSU0VBQkxFXCIsIHtcbiAgICAgICAgICBcIm1zZ1wiOiBkZWNyeXB0ZWRKc29uXG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gTWVzc2FnZTtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUGFpcmluZy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1BhaXJpbmcuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBQYWlyUmVxdWVzdCwgS2V5UmVxdWVzdCwgS2V5UmVzcG9uc2UsIEtleUNoZWNrLCBQYWlyUmVzcG9uc2UsIFNlY3JldHNBbmRLZXlSZXNwb25zZSwgRHJvcEtleXNSZXF1ZXN0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBhaXJSZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUGFpclJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIktleVJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBLZXlSZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJLZXlSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEtleVJlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJLZXlDaGVja1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEtleUNoZWNrOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQYWlyUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQYWlyUmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNlY3JldHNBbmRLZXlSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNlY3JldHNBbmRLZXlSZXNwb25zZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiRHJvcEtleXNSZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRHJvcEtleXNSZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1JlcXVlc3RJZEhlbHBlciAqLyBcIi4vc3JjL1JlcXVlc3RJZEhlbHBlci5qc1wiKTtcblxuXG5cbiAvLyA8c3VtbWFyeT5cbi8vIFBhaXJpbmcgSW50ZXJhY3Rpb24gMTogT3V0Z29pbmdcbi8vIDwvc3VtbWFyeT5cblxudmFyIFBhaXJSZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFpclJlcXVlc3QoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQYWlyUmVxdWVzdCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFBhaXJSZXF1ZXN0LCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIHBhZGRpbmc6IHRydWVcbiAgICAgIH07XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJwclwiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uUGFpclJlcXVlc3QsIGRhdGEsIGZhbHNlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGFpclJlcXVlc3Q7XG59KCk7IC8vIFBhaXJpbmcgSW50ZXJhY3Rpb24gMjogSW5jb21pbmdcblxudmFyIEtleVJlcXVlc3QgPSBmdW5jdGlvbiBLZXlSZXF1ZXN0KG0pIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBLZXlSZXF1ZXN0KTtcblxuICB0aGlzLlJlcXVlc3RJZCA9IG0uSWQ7XG4gIHRoaXMuQWVuYyA9IG0uRGF0YS5lbmMuQTtcbiAgdGhpcy5BaG1hYyA9IG0uRGF0YS5obWFjLkE7XG59OyAvLyBQYWlyaW5nIEludGVyYWN0aW9uIDM6IE91dGdvaW5nXG5cbnZhciBLZXlSZXNwb25zZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleVJlc3BvbnNlKHJlcXVlc3RJZCwgQmVuYywgQmhtYWMpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIEtleVJlc3BvbnNlKTtcblxuICAgIHRoaXMuUmVxdWVzdElkID0gcmVxdWVzdElkO1xuICAgIHRoaXMuQmVuYyA9IEJlbmM7XG4gICAgdGhpcy5CaG1hYyA9IEJobWFjO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShLZXlSZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBlbmM6IHtcbiAgICAgICAgICBCOiB0aGlzLkJlbmNcbiAgICAgICAgfSxcbiAgICAgICAgaG1hYzoge1xuICAgICAgICAgIEI6IHRoaXMuQmhtYWNcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKHRoaXMuUmVxdWVzdElkLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5LZXlSZXNwb25zZSwgZGF0YSwgZmFsc2UpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBLZXlSZXNwb25zZTtcbn0oKTsgLy8gUGFpcmluZyBJbnRlcmFjdGlvbiA0OiBJbmNvbWluZ1xuXG52YXIgS2V5Q2hlY2sgPSBmdW5jdGlvbiBLZXlDaGVjayhtKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgS2V5Q2hlY2spO1xuXG4gIHRoaXMuQ29uZmlybWF0aW9uQ29kZSA9IG0uSW5jb21pbmdIbWFjLnN1YnN0cmluZygwLCA2KTtcbn07IC8vIFBhaXJpbmcgSW50ZXJhY3Rpb24gNTogSW5jb21pbmdcblxudmFyIFBhaXJSZXNwb25zZSA9IGZ1bmN0aW9uIFBhaXJSZXNwb25zZShtKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUGFpclJlc3BvbnNlKTtcblxuICB0aGlzLlN1Y2Nlc3MgPSBtLkRhdGEuc3VjY2Vzcztcbn07IC8vIEhvbGRlciBjbGFzcyBmb3IgU2VjcmV0cyBhbmQgS2V5UmVzcG9uc2UsIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIHRvZ2V0aGVyIGluIG1ldGhvZCBzaWduYXR1cmVzLlxuXG52YXIgU2VjcmV0c0FuZEtleVJlc3BvbnNlID0gZnVuY3Rpb24gU2VjcmV0c0FuZEtleVJlc3BvbnNlKHNlY3JldHMsIGtleVJlc3BvbnNlKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2VjcmV0c0FuZEtleVJlc3BvbnNlKTtcblxuICB0aGlzLlNlY3JldHMgPSBzZWNyZXRzO1xuICB0aGlzLktleVJlc3BvbnNlID0ga2V5UmVzcG9uc2U7XG59O1xudmFyIERyb3BLZXlzUmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERyb3BLZXlzUmVxdWVzdCgpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIERyb3BLZXlzUmVxdWVzdCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKERyb3BLZXlzUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcImRycGt5c1wiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uRHJvcEtleXNBZHZpY2UsIG51bGwsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEcm9wS2V5c1JlcXVlc3Q7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1BhaXJpbmdIZWxwZXIuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9QYWlyaW5nSGVscGVyLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogR0VORVJBVE9SLCBHUk9VUDE0XzIwNDhfQklUX01PRFAsIFBhaXJpbmdIZWxwZXIsIFB1YmxpY0tleUFuZFNlY3JldCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJHRU5FUkFUT1JcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBHRU5FUkFUT1I7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkdST1VQMTRfMjA0OF9CSVRfTU9EUFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEdST1VQMTRfMjA0OF9CSVRfTU9EUDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUGFpcmluZ0hlbHBlclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBhaXJpbmdIZWxwZXI7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlB1YmxpY0tleUFuZFNlY3JldFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFB1YmxpY0tleUFuZFNlY3JldDsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BhaXJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUGFpcmluZyAqLyBcIi4vc3JjL1BhaXJpbmcuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1NlY3JldHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU2VjcmV0cyAqLyBcIi4vc3JjL1NlY3JldHMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0NyeXB0b19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9DcnlwdG8gKi8gXCIuL3NyYy9DcnlwdG8uanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0RpZmZpZUhlbGxtYW5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vRGlmZmllSGVsbG1hbiAqLyBcIi4vc3JjL0RpZmZpZUhlbGxtYW4uanNcIik7XG5cblxuXG5cblxuIC8vIFRoaXMgaXMgdGhlIGdlbmVyYXRvciB1c2VkIGZvciBkaWZmaWUtaGVsbG1hbiBpbiAyMDQ4LWJpdCBNT0RQIEdyb3VwIDE0IGFzIHBlciAoaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM1MjYjc2VjdGlvbi0zKVxuXG52YXIgR0VORVJBVE9SID0gMjsgLy8gVGhpcyBpcyB0aGUgcHJpbWUgdXNlZCBmb3IgZGlmZmllLWhlbGxtYW4gdXNpbmcgMjA0OC1iaXQgTU9EUCBHcm91cCAxNCBhcyBwZXIgKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNTI2I3NlY3Rpb24tMylcblxudmFyIEdST1VQMTRfMjA0OF9CSVRfTU9EUCA9ICdGRkZGRkZGRkZGRkZGRkZGQzkwRkRBQTIyMTY4QzIzNEM0QzY2MjhCODBEQzFDRDEyOTAyNEUwODhBNjdDQzc0MDIwQkJFQTYzQjEzOUIyMjUxNEEwODc5OEUzNDA0RERFRjk1MTlCM0NEM0E0MzFCMzAyQjBBNkRGMjVGMTQzNzRGRTEzNTZENkQ1MUMyNDVFNDg1QjU3NjYyNUU3RUM2RjQ0QzQyRTlBNjM3RUQ2QjBCRkY1Q0I2RjQwNkI3RURFRTM4NkJGQjVBODk5RkE1QUU5RjI0MTE3QzRCMUZFNjQ5Mjg2NjUxRUNFNDVCM0RDMjAwN0NCOEExNjNCRjA1OThEQTQ4MzYxQzU1RDM5QTY5MTYzRkE4RkQyNENGNUY4MzY1NUQyM0RDQTNBRDk2MUM2MkYzNTYyMDg1NTJCQjlFRDUyOTA3NzA5Njk2NkQ2NzBDMzU0RTRBQkM5ODA0RjE3NDZDMDhDQTE4MjE3QzMyOTA1RTQ2MkUzNkNFM0JFMzlFNzcyQzE4MEU4NjAzOUIyNzgzQTJFQzA3QTI4RkI1QzU1REYwNkY0QzUyQzlERTJCQ0JGNjk1NTgxNzE4Mzk5NTQ5N0NFQTk1NkFFNTE1RDIyNjE4OThGQTA1MTAxNTcyOEU1QThBQUNBQTY4RkZGRkZGRkZGRkZGRkZGRic7IC8vIDxzdW1tYXJ5PlxuLy8gVGhpcyBzdGF0aWMgY2xhc3MgaGVscHMgeW91IHdpdGggdGhlIHBhaXJpbmcgcHJvY2VzcyBhcyBkb2N1bWVudGVkIGhlcmU6XG4vLyBodHRwOi8vd3d3LnNpbXBsZXBheW1lbnRhcGkuY29tLyMvYXBpL3BhaXJpbmctcHJvY2Vzc1xuLy8gPC9zdW1tYXJ5PlxuXG52YXIgUGFpcmluZ0hlbHBlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBhaXJpbmdIZWxwZXIoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQYWlyaW5nSGVscGVyKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUGFpcmluZ0hlbHBlciwgW3tcbiAgICBrZXk6IFwiR2VuZXJhdGVTZWNyZXRzQW5kS2V5UmVzcG9uc2VcIixcbiAgICAvLyA8c3VtbWFyeT5cbiAgICAvLyBDYWxjdWxhdGVzL0dlbmVyYXRlcyBTZWNyZXRzIGFuZCBLZXlSZXNwb25zZSBnaXZlbiBhbiBpbmNvbWluZyBLZXlSZXF1ZXN0LlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cImtleVJlcXVlc3RcIj48L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPlNlY3JldHMgYW5kIEtleVJlc3BvbnNlIHRvIHNlbmQgYmFjay48L3JldHVybnM+XG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdlbmVyYXRlU2VjcmV0c0FuZEtleVJlc3BvbnNlKGtleVJlcXVlc3QpIHtcbiAgICAgIHZhciBlbmNQdWJBbmRTZWMgPSB0aGlzLl9jYWxjdWxhdGVNeVB1YmxpY0tleUFuZFNlY3JldChrZXlSZXF1ZXN0LkFlbmMpO1xuXG4gICAgICB2YXIgQmVuYyA9IGVuY1B1YkFuZFNlYy5NeVB1YmxpY0tleTtcbiAgICAgIHZhciBTZW5jID0gZW5jUHViQW5kU2VjLlNoYXJlZFNlY3JldEtleTtcblxuICAgICAgdmFyIGhtYWNQdWJBbmRTZWMgPSB0aGlzLl9jYWxjdWxhdGVNeVB1YmxpY0tleUFuZFNlY3JldChrZXlSZXF1ZXN0LkFobWFjKTtcblxuICAgICAgdmFyIEJobWFjID0gaG1hY1B1YkFuZFNlYy5NeVB1YmxpY0tleTtcbiAgICAgIHZhciBTaG1hYyA9IGhtYWNQdWJBbmRTZWMuU2hhcmVkU2VjcmV0S2V5O1xuICAgICAgdmFyIHNlY3JldHMgPSBuZXcgX1NlY3JldHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlNlY3JldHNcIl0oU2VuYywgU2htYWMpO1xuICAgICAgdmFyIGtleVJlc3BvbnNlID0gbmV3IF9QYWlyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJLZXlSZXNwb25zZVwiXShrZXlSZXF1ZXN0LlJlcXVlc3RJZCwgQmVuYywgQmhtYWMpO1xuICAgICAgcmV0dXJuIG5ldyBfUGFpcmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiU2VjcmV0c0FuZEtleVJlc3BvbnNlXCJdKHNlY3JldHMsIGtleVJlc3BvbnNlKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFR1cm5zIGFuIGluY29taW5nIFwiQVwiIHZhbHVlIGZyb20gdGhlIFBpblBhZCBpbnRvIHRoZSBvdXRnb2luZyBcIkJcIiB2YWx1ZSBcbiAgICAvLyBhbmQgdGhlIHNlY3JldCB2YWx1ZSB1c2luZyBEaWZmaWVIZWxtbWFuIGhlbHBlci5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJ0aGVpclB1YmxpY0tleVwiPlRoZSBpbmNvbWluZyBBIHZhbHVlPC9wYXJhbT5cbiAgICAvLyA8cmV0dXJucz5Zb3VyIEIgdmFsdWUgYW5kIHRoZSBTZWNyZXQ8L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJfY2FsY3VsYXRlTXlQdWJsaWNLZXlBbmRTZWNyZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NhbGN1bGF0ZU15UHVibGljS2V5QW5kU2VjcmV0KHRoZWlyUHVibGljS2V5KSB7XG4gICAgICB2YXIgZGlmZmllSGVsbG1hbiA9IG5ldyBfRGlmZmllSGVsbG1hbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiRGlmZmllSGVsbG1hblwiXSgpO1xuICAgICAgdmFyIG15UHJpdmF0ZUJJID0gZGlmZmllSGVsbG1hbi5SYW5kb21Qcml2YXRlS2V5KEdST1VQMTRfMjA0OF9CSVRfTU9EUCk7XG4gICAgICB2YXIgbXlQdWJsaWNCSSA9IGRpZmZpZUhlbGxtYW4uUHVibGljS2V5KEdST1VQMTRfMjA0OF9CSVRfTU9EUCwgR0VORVJBVE9SLCBteVByaXZhdGVCSSk7XG4gICAgICB2YXIgc2VjcmV0QkkgPSBkaWZmaWVIZWxsbWFuLlNlY3JldChHUk9VUDE0XzIwNDhfQklUX01PRFAsIHRoZWlyUHVibGljS2V5LCBteVByaXZhdGVCSSk7XG4gICAgICB2YXIgc2VjcmV0ID0gdGhpcy5ESFNlY3JldFRvU1BJU2VjcmV0KHNlY3JldEJJKTtcbiAgICAgIHJldHVybiBuZXcgUHVibGljS2V5QW5kU2VjcmV0KG15UHVibGljQkksIHNlY3JldCk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBDb252ZXJ0cyB0aGUgREggc2VjcmV0IEJpZ0ludGVnZXIgaW50byB0aGUgaGV4LXN0cmluZyB0byBiZSB1c2VkIGFzIHRoZSBzZWNyZXQuXG4gICAgLy8gVGhlcmUgYXJlIHNvbWUgXCJnb3RjaHlhc1wiIGhlcmUgd2hpY2ggaXMgd2h5IHRoaXMgcGllY2Ugb2Ygd29yayBpcyBhYnN0cmFjdGVkIHNvIGl0IGNhbiBiZSB0ZXN0ZWQgc2VwYXJhdGVseS5cbiAgICAvLyBTZWU6IGh0dHA6Ly93d3cuc2ltcGxlcGF5bWVudGFwaS5jb20vIy9hcGkvcGFpcmluZy1wcm9jZXNzXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwic2VjcmV0QklcIj5TZWNyZXQgYXMgQmlnSW50ZWdlcjwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+U2VjcmV0IGFzIEhleC1TdHJpbmc8L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJESFNlY3JldFRvU1BJU2VjcmV0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIERIU2VjcmV0VG9TUElTZWNyZXQoc2VjcmV0KSB7XG4gICAgICAvLyBJZiB0aGUgY2FsY3VsYXRlZCBoZXhhZGVjaW1hbCBzZWNyZXQgZG9lc24ndCBoYXZlIGFuIGV2ZW4gbnVtYmVyIG9mIGNoYXJhY3RlcnMsIHdlIGFkZCBhbiBleHRyYSAwIHRvIHRoZSBzdGFydC4gVGhpcyBhbGxvd3MgU0hBLTI1NiB0byBvcGVyYXRlIG9uIHRoZSBoZXhhZGVjaW1hbCBzZWNyZXQgYXMgaWYgaXQgd2VyZSBhIGhleGFkZWNpbWFsIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RyaW5nLlxuICAgICAgaWYgKHNlY3JldC5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgICAgIHNlY3JldCA9ICcwJyArIHNlY3JldDtcbiAgICAgIH1cblxuICAgICAgc2VjcmV0ID0gc2VjcmV0LnBhZFN0YXJ0KDUxMiwgJzAnKTsgLy8gV2Ugc2hhMjU2IHRoYXQgYnl0ZSBhcnJheSBhbmQgcmV0dXJuIHRoZSBoZXggc3RyaW5nIHJlc3VsdFxuXG4gICAgICByZXR1cm4gX0NyeXB0b19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiQ3J5cHRvXCJdLkdlbmVyYXRlSGFzaChzZWNyZXQpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcIk5ld1BhaXJSZXF1ZXN0XCIsXG4gICAgLy8gPHN1bW1hcnk+XG4gICAgLy8gR2VuZXJhdGVzIGEgcGFpcmluZyBSZXF1ZXN0LlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cmV0dXJucz5OZXcgUGFpclJlcXVlc3Q8L3JldHVybnM+XG4gICAgdmFsdWU6IGZ1bmN0aW9uIE5ld1BhaXJSZXF1ZXN0KCkge1xuICAgICAgcmV0dXJuIG5ldyBfUGFpcmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUGFpclJlcXVlc3RcIl0oKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGFpcmluZ0hlbHBlcjtcbn0oKTsgLy8gPHN1bW1hcnk+XG4vLyBJbnRlcm5hbCBIb2xkZXIgY2xhc3MgZm9yIFB1YmxpYyBhbmQgU2VjcmV0LCBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSB0b2dldGhlciBpbiBtZXRob2Qgc2lnbmF0dXJlcy4gXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBQdWJsaWNLZXlBbmRTZWNyZXQgPSBmdW5jdGlvbiBQdWJsaWNLZXlBbmRTZWNyZXQobXlQdWJsaWNLZXksIHNoYXJlZFNlY3JldEtleSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFB1YmxpY0tleUFuZFNlY3JldCk7XG5cbiAgdGhpcy5NeVB1YmxpY0tleSA9IG15UHVibGljS2V5O1xuICB0aGlzLlNoYXJlZFNlY3JldEtleSA9IHNoYXJlZFNlY3JldEtleTtcbn07XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1BheUF0VGFibGUuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9QYXlBdFRhYmxlLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogQmlsbFN0YXR1c1Jlc3BvbnNlLCBCaWxsUmV0cmlldmFsUmVzdWx0LCBQYXltZW50VHlwZSwgQmlsbFBheW1lbnQsIFBheW1lbnRIaXN0b3J5RW50cnksIFBheUF0VGFibGVDb25maWcsIEdldE9wZW5UYWJsZXNSZXNwb25zZSwgT3BlblRhYmxlc0VudHJ5LCBCaWxsUGF5bWVudEZsb3dFbmRlZFJlc3BvbnNlICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkJpbGxTdGF0dXNSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEJpbGxTdGF0dXNSZXNwb25zZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQmlsbFJldHJpZXZhbFJlc3VsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEJpbGxSZXRyaWV2YWxSZXN1bHQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBheW1lbnRUeXBlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUGF5bWVudFR5cGU7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkJpbGxQYXltZW50XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQmlsbFBheW1lbnQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBheW1lbnRIaXN0b3J5RW50cnlcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQYXltZW50SGlzdG9yeUVudHJ5OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQYXlBdFRhYmxlQ29uZmlnXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUGF5QXRUYWJsZUNvbmZpZzsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiR2V0T3BlblRhYmxlc1Jlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gR2V0T3BlblRhYmxlc1Jlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJPcGVuVGFibGVzRW50cnlcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBPcGVuVGFibGVzRW50cnk7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkJpbGxQYXltZW50Rmxvd0VuZGVkUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBCaWxsUGF5bWVudEZsb3dFbmRlZFJlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUHVyY2hhc2UgKi8gXCIuL3NyYy9QdXJjaGFzZS5qc1wiKTtcblxuXG5cbiAvLyA8c3VtbWFyeT5cbi8vIFRoaXMgY2xhc3MgcmVwcmVzZW50cyB0aGUgQmlsbERldGFpbHMgdGhhdCB0aGUgUE9TIHdpbGwgYmUgYXNrZWQgZm9yIHRocm91Z2hvdXQgYSBQYXlBdFRhYmxlIGZsb3cuXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBCaWxsU3RhdHVzUmVzcG9uc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCaWxsU3RhdHVzUmVzcG9uc2UoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBCaWxsU3RhdHVzUmVzcG9uc2UpO1xuXG4gICAgLy8gPHN1bW1hcnk+XG4gICAgLy8gU2V0IHRoaXMgRXJyb3IgYWNjb3JkaW5nbHkgaWYgeW91IGFyZSBub3QgYWJsZSB0byByZXR1cm4gdGhlIEJpbGxEZXRhaWxzIHRoYXQgd2VyZSBhc2tlZCBmcm9tIHlvdS5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgdGhpcy5SZXN1bHQgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGlzIGlzIGEgdW5pcXVlIGlkZW50aWZpZXIgdGhhdCB5b3UgYXNzaWduIHRvIGVhY2ggYmlsbC5cbiAgICAvLyBJdCBtaWd0IGJlIGZvciBleGFtcGxlLCB0aGUgdGltZXN0YW1wIG9mIHdoZW4gdGhlIGNvdmVyIHdhcyBvcGVuZWQuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5CaWxsSWQgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGlzIGlzIHRoZSB0YWJsZSBpZCB0aGF0IHRoaXMgYmlsbCB3YXMgZm9yLlxuICAgIC8vIFRoZSB3YWl0ZXIgd2lsbCBlbnRlciBpdCBvbiB0aGUgRWZ0cG9zIGF0IHRoZSBzdGFydCBvZiB0aGUgUGF5QXRUYWJsZSBmbG93IGFuZCB0aGUgRWZ0cG9zIHdpbGwgXG4gICAgLy8gcmV0cmlldmUgdGhlIGJpbGwgdXNpbmcgdGhlIHRhYmxlIGlkLiBcbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLlRhYmxlSWQgPSBudWxsO1xuICAgIHRoaXMuT3BlcmF0b3JJZCA9IG51bGw7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBUb3RhbCBBbW91bnQgb24gdGhpcyBiaWxsLCBpbiBjZW50cy5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLlRvdGFsQW1vdW50ID0gMDsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIGN1cnJlbnRseSBvdXRzYW5kaW5nIGFtb3VudCBvbiB0aGlzIGJpbGwsIGluIGNlbnRzLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuT3V0c3RhbmRpbmdBbW91bnQgPSAwOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBZb3VyIFBPUyBpcyByZXF1aXJlZCB0byBwZXJzaXN0IHNvbWUgc3RhdGUgb24gYmVoYWxmIG9mIHRoZSBFZnRwb3Mgc28gdGhlIEVmdHBvcyBjYW4gcmVjb3ZlciBzdGF0ZS5cbiAgICAvLyBJdCBpcyBqdXN0IGEgcGllY2Ugb2Ygc3RyaW5nIHRoYXQgeW91IHNhdmUgYWdhaW5zdCB5b3VyIGJpbGxJZC5cbiAgICAvLyBXSGVuZXZlciB5b3UncmUgYXNrZWQgZm9yIEJpbGxEZXRhaWxzLCBtYWtlIHN1cmUgeW91IHJldHVybiB0aGlzIHBpZWNlIG9mIGRhdGEgaWYgeW91IGhhdmUgaXQuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5CaWxsRGF0YSA9IFwiXCI7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKEJpbGxTdGF0dXNSZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiZ2V0QmlsbFBheW1lbnRIaXN0b3J5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJpbGxQYXltZW50SGlzdG9yeSgpIHtcbiAgICAgIGlmICghdGhpcy5CaWxsRGF0YSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG5cbiAgICAgIHZhciBiaWxsUGF5bWVudEhpc3RvcnkgPSBbXTtcbiAgICAgIHZhciBzYXZlZEJpbGxEYXRhID0gSlNPTi5wYXJzZSh0aGlzLkJpbGxEYXRhKTtcbiAgICAgIHJldHVybiBzYXZlZEJpbGxEYXRhLm1hcChmdW5jdGlvbiAoYmlsbCkge1xuICAgICAgICByZXR1cm4gbmV3IFBheW1lbnRIaXN0b3J5RW50cnkoYmlsbC5wYXltZW50X3R5cGUsIGJpbGwucGF5bWVudF9zdW1tYXJ5KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKG1lc3NhZ2VJZCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIFwic3VjY2Vzc1wiOiB0aGlzLlJlc3VsdCA9PSBCaWxsUmV0cmlldmFsUmVzdWx0LlNVQ0NFU1NcbiAgICAgIH07XG4gICAgICBpZiAodGhpcy5CaWxsSWQpIGRhdGEuYmlsbF9pZCA9IHRoaXMuQmlsbElkO1xuICAgICAgaWYgKHRoaXMuVGFibGVJZCkgZGF0YS50YWJsZV9pZCA9IHRoaXMuVGFibGVJZDtcblxuICAgICAgaWYgKHRoaXMuUmVzdWx0ID09IEJpbGxSZXRyaWV2YWxSZXN1bHQuU1VDQ0VTUykge1xuICAgICAgICBkYXRhLmJpbGxfdG90YWxfYW1vdW50ID0gdGhpcy5Ub3RhbEFtb3VudDtcbiAgICAgICAgZGF0YS5iaWxsX291dHN0YW5kaW5nX2Ftb3VudCA9IHRoaXMuT3V0c3RhbmRpbmdBbW91bnQ7XG4gICAgICAgIGRhdGEuYmlsbF9wYXltZW50X2hpc3RvcnkgPSB0aGlzLmdldEJpbGxQYXltZW50SGlzdG9yeSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YS5lcnJvcl9yZWFzb24gPSB0aGlzLlJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICBkYXRhLmVycm9yX2RldGFpbCA9IHRoaXMuUmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKG1lc3NhZ2VJZCwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uUGF5QXRUYWJsZUJpbGxEZXRhaWxzLCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dLCBbe1xuICAgIGtleTogXCJUb0JpbGxEYXRhXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvQmlsbERhdGEocGgpIHtcbiAgICAgIGlmIChwaC5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocGgpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBCaWxsU3RhdHVzUmVzcG9uc2U7XG59KCk7XG52YXIgQmlsbFJldHJpZXZhbFJlc3VsdCA9IHtcbiAgU1VDQ0VTUzogJ1NVQ0NFU1MnLFxuICBJTlZBTElEX1RBQkxFX0lEOiAnSU5WQUxJRF9UQUJMRV9JRCcsXG4gIElOVkFMSURfQklMTF9JRDogJ0lOVkFMSURfQklMTF9JRCcsXG4gIElOVkFMSURfT1BFUkFUT1JfSUQ6ICdJTlZBTElEX09QRVJBVE9SX0lEJ1xufTtcbnZhciBQYXltZW50VHlwZSA9IHtcbiAgQ0FSRDogJ0NBUkQnLFxuICBDQVNIOiAnQ0FTSCdcbn07XG52YXIgQmlsbFBheW1lbnQgPSBmdW5jdGlvbiBCaWxsUGF5bWVudChtKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgQmlsbFBheW1lbnQpO1xuXG4gIHRoaXMuX2luY29taW5nQWR2aWNlID0gbTtcbiAgdGhpcy5CaWxsSWQgPSB0aGlzLl9pbmNvbWluZ0FkdmljZS5EYXRhW1wiYmlsbF9pZFwiXTtcbiAgdGhpcy5UYWJsZUlkID0gdGhpcy5faW5jb21pbmdBZHZpY2UuRGF0YVtcInRhYmxlX2lkXCJdO1xuICB0aGlzLk9wZXJhdG9ySWQgPSB0aGlzLl9pbmNvbWluZ0FkdmljZS5EYXRhW1wib3BlcmF0b3JfaWRcIl07XG4gIHRoaXMuUGF5bWVudEZsb3dTdGFydGVkID0gbnVsbDtcbiAgdmFyIHB0ID0gdGhpcy5faW5jb21pbmdBZHZpY2UuRGF0YVtcInBheW1lbnRfdHlwZVwiXTtcbiAgdGhpcy5QYXltZW50VHlwZSA9IHB0OyAvLyB0aGlzIGlzIHdoZW4gd2UgcGx5IHRoZSBzdWIgb2JqZWN0IFwicGF5bWVudF9kZXRhaWxzXCIgaW50byBhIHB1cmNoYXNlIHJlc3BvbnNlIGZvciBjb252ZW5pZW5jZS5cblxuICB2YXIgcHVyY2hhc2VNc2cgPSBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKG0uSWQsIFwicGF5bWVudF9kZXRhaWxzXCIsIG0uRGF0YVtcInBheW1lbnRfZGV0YWlsc1wiXSwgZmFsc2UpO1xuICB0aGlzLlB1cmNoYXNlUmVzcG9uc2UgPSBuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJQdXJjaGFzZVJlc3BvbnNlXCJdKHB1cmNoYXNlTXNnKTtcbiAgdGhpcy5QdXJjaGFzZUFtb3VudCA9IHRoaXMuUHVyY2hhc2VSZXNwb25zZS5HZXRQdXJjaGFzZUFtb3VudCgpO1xuICB0aGlzLlRpcEFtb3VudCA9IHRoaXMuUHVyY2hhc2VSZXNwb25zZS5HZXRUaXBBbW91bnQoKTtcbiAgdGhpcy5TdXJjaGFyZ2VBbW91bnQgPSB0aGlzLlB1cmNoYXNlUmVzcG9uc2UuR2V0U3VyY2hhcmdlQW1vdW50KCk7XG59O1xudmFyIFBheW1lbnRIaXN0b3J5RW50cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQYXltZW50SGlzdG9yeUVudHJ5KHBheW1lbnRUeXBlLCBwYXltZW50U3VtbWFyeSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUGF5bWVudEhpc3RvcnlFbnRyeSk7XG5cbiAgICB0aGlzLlBheW1lbnRUeXBlID0gcGF5bWVudFR5cGU7XG4gICAgdGhpcy5QYXltZW50U3VtbWFyeSA9IHBheW1lbnRTdW1tYXJ5O1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQYXltZW50SGlzdG9yeUVudHJ5LCBbe1xuICAgIGtleTogXCJ0b0pTT05cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF5bWVudF90eXBlOiB0aGlzLlBheW1lbnRUeXBlLFxuICAgICAgICBwYXltZW50X3N1bW1hcnk6IHRoaXMuUGF5bWVudFN1bW1hcnlcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRlcm1pbmFsUmVmSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VGVybWluYWxSZWZJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLlBheW1lbnRTdW1tYXJ5W1widGVybWluYWxfcmVmX2lkXCJdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQYXltZW50SGlzdG9yeUVudHJ5O1xufSgpO1xudmFyIFBheUF0VGFibGVDb25maWcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQYXlBdFRhYmxlQ29uZmlnKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUGF5QXRUYWJsZUNvbmZpZyk7XG5cbiAgICB0aGlzLlBheUF0VGFibGVFbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5PcGVyYXRvcklkRW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuU3BsaXRCeUFtb3VudEVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLkVxdWFsU3BsaXRFbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5UYWJsZVJldHJpZXZhbEVuYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLlRpcHBpbmdFbmFibGVkID0gZmFsc2U7XG4gICAgdGhpcy5TdW1tYXJ5UmVwb3J0RW5hYmxlZCA9IGZhbHNlO1xuICAgIHRoaXMuTGFiZWxQYXlCdXR0b24gPSAnJztcbiAgICB0aGlzLkxhYmVsT3BlcmF0b3JJZCA9ICcnO1xuICAgIHRoaXMuTGFiZWxUYWJsZUlkID0gJyc7IC8vIFxuICAgIC8vIDxzdW1tYXJ5PlxuICAgIC8vIEZpbGwgaW4gd2l0aCBvcGVyYXRvciBpZHMgdGhhdCB0aGUgZWZ0cG9zIHRlcm1pbmFsIHdpbGwgdmFsaWRhdGUgYWdhaW5zdC4gXG4gICAgLy8gTGVhdmUgRW1wdHkgdG8gYWxsb3cgYW55IG9wZXJhdG9yX2lkIHRocm91Z2guIFxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuQWxsb3dlZE9wZXJhdG9ySWRzID0gW107XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFBheUF0VGFibGVDb25maWcsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UobWVzc2FnZUlkKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgXCJwYXlfYXRfdGFibGVfZW5hYmxlZFwiOiB0aGlzLlBheUF0VGFibGVFbmFibGVkLFxuICAgICAgICBcIm9wZXJhdG9yX2lkX2VuYWJsZWRcIjogdGhpcy5PcGVyYXRvcklkRW5hYmxlZCxcbiAgICAgICAgXCJzcGxpdF9ieV9hbW91bnRfZW5hYmxlZFwiOiB0aGlzLlNwbGl0QnlBbW91bnRFbmFibGVkLFxuICAgICAgICBcImVxdWFsX3NwbGl0X2VuYWJsZWRcIjogdGhpcy5FcXVhbFNwbGl0RW5hYmxlZCxcbiAgICAgICAgXCJ0aXBwaW5nX2VuYWJsZWRcIjogdGhpcy5UaXBwaW5nRW5hYmxlZCxcbiAgICAgICAgXCJzdW1tYXJ5X3JlcG9ydF9lbmFibGVkXCI6IHRoaXMuU3VtbWFyeVJlcG9ydEVuYWJsZWQsXG4gICAgICAgIFwicGF5X2J1dHRvbl9sYWJlbFwiOiB0aGlzLkxhYmVsUGF5QnV0dG9uLFxuICAgICAgICBcIm9wZXJhdG9yX2lkX2xhYmVsXCI6IHRoaXMuTGFiZWxPcGVyYXRvcklkLFxuICAgICAgICBcInRhYmxlX2lkX2xhYmVsXCI6IHRoaXMuTGFiZWxUYWJsZUlkLFxuICAgICAgICBcIm9wZXJhdG9yX2lkX2xpc3RcIjogdGhpcy5BbGxvd2VkT3BlcmF0b3JJZHMsXG4gICAgICAgIFwidGFibGVfcmV0cmlldmFsX2VuYWJsZWRcIjogdGhpcy5UYWJsZVJldHJpZXZhbEVuYWJsZWRcbiAgICAgIH07XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShtZXNzYWdlSWQsIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLlBheUF0VGFibGVTZXRUYWJsZUNvbmZpZywgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiRmVhdHVyZURpc2FibGVNZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEZlYXR1cmVEaXNhYmxlTWVzc2FnZShtZXNzYWdlSWQpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBcInBheV9hdF90YWJsZV9lbmFibGVkXCI6IGZhbHNlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0obWVzc2FnZUlkLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5QYXlBdFRhYmxlU2V0VGFibGVDb25maWcsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQYXlBdFRhYmxlQ29uZmlnO1xufSgpOyAvLyA8c3VtbWFyeT5cbi8vIFRoZXNlIGF0dHJpYnV0ZXMgd29yayBmb3IgQ09NIGludGVyb3AuXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBHZXRPcGVuVGFibGVzUmVzcG9uc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHZXRPcGVuVGFibGVzUmVzcG9uc2UoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBHZXRPcGVuVGFibGVzUmVzcG9uc2UpO1xuXG4gICAgLy8vIDxzdW1tYXJ5PlxuICAgIC8vLyBZb3VyIFBPUyBpcyByZXF1aXJlZCB0byBwZXJzaXN0IHNvbWUgc3RhdGUgb24gYmVoYWxmIG9mIHRoZSBFZnRwb3Mgc28gdGhlIEVmdHBvcyBjYW4gcmVjb3ZlciBzdGF0ZS5cbiAgICAvLy8gSXQgaXMganVzdCBhIHBpZWNlIG9mIHN0cmluZyB0aGF0IHlvdSBzYXZlIGFnYWluc3QgeW91ciBvcGVyYXRvcklkLlxuICAgIC8vLyBXaGVuZXZlciB5b3UncmUgYXNrZWQgZm9yIE9wZW5UYWJsZXMsIG1ha2Ugc3VyZSB5b3UgcmV0dXJuIHRoaXMgcGllY2Ugb2YgZGF0YSBpZiB5b3UgaGF2ZSBpdC5cbiAgICAvLy8gPC9zdW1tYXJ5PlxuICAgIHRoaXMuVGFibGVEYXRhID0gbnVsbDtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoR2V0T3BlblRhYmxlc1Jlc3BvbnNlLCBbe1xuICAgIGtleTogXCJHZXRPcGVuVGFibGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldE9wZW5UYWJsZXMoKSB7XG4gICAgICBpZiAoIXRoaXMuVGFibGVEYXRhKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UodGhpcy5UYWJsZURhdGEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKG1lc3NhZ2VJZCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIHRhYmxlczogdGhpcy5HZXRPcGVuVGFibGVzKClcbiAgICAgIH07XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShtZXNzYWdlSWQsIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLlBheUF0VGFibGVPcGVuVGFibGVzLCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR2V0T3BlblRhYmxlc1Jlc3BvbnNlO1xufSgpOyAvLyA8c3VtbWFyeT5cbi8vIFRoZXNlIGF0dHJpYnV0ZXMgd29yayBmb3IgQ09NIGludGVyb3AuXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBPcGVuVGFibGVzRW50cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBPcGVuVGFibGVzRW50cnkoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBPcGVuVGFibGVzRW50cnkpO1xuXG4gICAgdGhpcy5UYWJsZUlkID0gbnVsbDtcbiAgICB0aGlzLkxhYmVsID0gbnVsbDtcbiAgICB0aGlzLkJpbGxPdXRzdGFuZGluZ0Ftb3VudCA9IG51bGw7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKE9wZW5UYWJsZXNFbnRyeSwgW3tcbiAgICBrZXk6IFwidG9KU09OXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRhYmxlX2lkOiB0aGlzLlRhYmxlSWQsXG4gICAgICAgIGxhYmVsOiB0aGlzLkxhYmVsLFxuICAgICAgICBiaWxsX291dHN0YW5kaW5nX2Ftb3VudDogdGhpcy5CaWxsT3V0c3RhbmRpbmdBbW91bnRcbiAgICAgIH07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE9wZW5UYWJsZXNFbnRyeTtcbn0oKTsgLy8vIDxzdW1tYXJ5PlxuLy8vIFRoZXNlIGF0dHJpYnV0ZXMgd29yayBmb3IgQ09NIGludGVyb3AuXG4vLy8gPC9zdW1tYXJ5PlxuXG52YXIgQmlsbFBheW1lbnRGbG93RW5kZWRSZXNwb25zZSA9IGZ1bmN0aW9uIEJpbGxQYXltZW50Rmxvd0VuZGVkUmVzcG9uc2UobSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIEJpbGxQYXltZW50Rmxvd0VuZGVkUmVzcG9uc2UpO1xuXG4gIHRoaXMuQmlsbElkID0gbS5EYXRhLmJpbGxfaWQ7XG4gIHRoaXMuQmlsbE91dHN0YW5kaW5nQW1vdW50ID0gbS5EYXRhLmJpbGxfb3V0c3RhbmRpbmdfYW1vdW50O1xuICB0aGlzLkJpbGxUb3RhbEFtb3VudCA9IG0uRGF0YS5iaWxsX3RvdGFsX2Ftb3VudDtcbiAgdGhpcy5PcGVyYXRvcklkID0gbS5EYXRhLm9wZXJhdG9yX2lkO1xuICB0aGlzLlRhYmxlSWQgPSBtLkRhdGEudGFibGVfaWQ7XG4gIHRoaXMuQ2FyZFRvdGFsQ291bnQgPSBtLkRhdGEuY2FyZF90b3RhbF9jb3VudDtcbiAgdGhpcy5DYXJkVG90YWxBbW91bnQgPSBtLkRhdGEuY2FyZF90b3RhbF9hbW91bnQ7XG4gIHRoaXMuQ2FzaFRvdGFsQ291bnQgPSBtLkRhdGEuY2FzaF90b3RhbF9jb3VudDtcbiAgdGhpcy5DYXNoVG90YWxBbW91bnQgPSBtLkRhdGEuY2FzaF90b3RhbF9hbW91bnQ7XG59O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QaW5nSGVscGVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUGluZ0hlbHBlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IFBvbmdIZWxwZXIsIFBpbmdIZWxwZXIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUG9uZ0hlbHBlclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFBvbmdIZWxwZXI7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBpbmdIZWxwZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQaW5nSGVscGVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1JlcXVlc3RJZEhlbHBlciAqLyBcIi4vc3JjL1JlcXVlc3RJZEhlbHBlci5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcblxuXG5cblxudmFyIFBvbmdIZWxwZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQb25nSGVscGVyKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUG9uZ0hlbHBlcik7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFBvbmdIZWxwZXIsIG51bGwsIFt7XG4gICAga2V5OiBcIkdlbmVyYXRlUG9uZ1Jlc3Nwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZW5lcmF0ZVBvbmdSZXNzcG9uc2UocGluZykge1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIk1lc3NhZ2VcIl0ocGluZy5JZCwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJFdmVudHNcIl0uUG9uZywgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBvbmdIZWxwZXI7XG59KCk7XG52YXIgUGluZ0hlbHBlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBpbmdIZWxwZXIoKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQaW5nSGVscGVyKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUGluZ0hlbHBlciwgbnVsbCwgW3tcbiAgICBrZXk6IFwiR2VuZXJhdGVQaW5nUmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZW5lcmF0ZVBpbmdSZXF1ZXN0KCkge1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicGluZ1wiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJFdmVudHNcIl0uUGluZywgbnVsbCwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBpbmdIZWxwZXI7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1Bvc0luZm8uanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9Qb3NJbmZvLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogU2V0UG9zSW5mb1JlcXVlc3QsIFNldFBvc0luZm9SZXNwb25zZSwgRGV2aWNlSW5mbyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTZXRQb3NJbmZvUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNldFBvc0luZm9SZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTZXRQb3NJbmZvUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTZXRQb3NJbmZvUmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkRldmljZUluZm9cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBEZXZpY2VJbmZvOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1JlcXVlc3RJZEhlbHBlciAqLyBcIi4vc3JjL1JlcXVlc3RJZEhlbHBlci5qc1wiKTtcblxuXG5cblxudmFyIFNldFBvc0luZm9SZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2V0UG9zSW5mb1JlcXVlc3QodmVyc2lvbiwgdmVuZG9ySWQsIGxpYnJhcnlMYW5ndWFnZSwgbGlicmFyeVZlcnNpb24sIG90aGVySW5mbykge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2V0UG9zSW5mb1JlcXVlc3QpO1xuXG4gICAgdGhpcy5fdmVyc2lvbiA9IHZlcnNpb247XG4gICAgdGhpcy5fdmVuZG9ySWQgPSB2ZW5kb3JJZDtcbiAgICB0aGlzLl9saWJyYXJ5TGFuZ3VhZ2UgPSBsaWJyYXJ5TGFuZ3VhZ2U7XG4gICAgdGhpcy5fbGlicmFyeVZlcnNpb24gPSBsaWJyYXJ5VmVyc2lvbjtcbiAgICB0aGlzLl9vdGhlckluZm8gPSBvdGhlckluZm87XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFNldFBvc0luZm9SZXF1ZXN0LCBbe1xuICAgIGtleTogXCJ0b01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIHBvc192ZXJzaW9uOiB0aGlzLl92ZXJzaW9uLFxuICAgICAgICBwb3NfdmVuZG9yX2lkOiB0aGlzLl92ZW5kb3JJZCxcbiAgICAgICAgbGlicmFyeV9sYW5ndWFnZTogdGhpcy5fbGlicmFyeUxhbmd1YWdlLFxuICAgICAgICBsaWJyYXJ5X3ZlcnNpb246IHRoaXMuX2xpYnJhcnlWZXJzaW9uLFxuICAgICAgICBvdGhlcl9pbmZvOiB0aGlzLl9vdGhlckluZm9cbiAgICAgIH07XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJwcmF2XCIpLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5TZXRQb3NJbmZvUmVxdWVzdCwgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNldFBvc0luZm9SZXF1ZXN0O1xufSgpO1xudmFyIFNldFBvc0luZm9SZXNwb25zZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNldFBvc0luZm9SZXNwb25zZShtKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBTZXRQb3NJbmZvUmVzcG9uc2UpO1xuXG4gICAgdGhpcy5fc3VjY2VzcyA9IG0uR2V0U3VjY2Vzc1N0YXRlKCkgPT0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJTdWNjZXNzU3RhdGVcIl0uU3VjY2VzcztcbiAgICB0aGlzLl9tID0gbTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoU2V0UG9zSW5mb1Jlc3BvbnNlLCBbe1xuICAgIGtleTogXCJpc1N1Y2Nlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNTdWNjZXNzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N1Y2Nlc3M7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEVycm9yUmVhc29uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVycm9yUmVhc29uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5lcnJvcl9yZWFzb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEVycm9yRGV0YWlsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVycm9yRGV0YWlsKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5lcnJvcl9kZXRhaWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFJlc3BvbnNlVmFsdWVXaXRoQXR0cmlidXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlc3BvbnNlVmFsdWVXaXRoQXR0cmlidXRlKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVthdHRyaWJ1dGVdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZXRQb3NJbmZvUmVzcG9uc2U7XG59KCk7XG52YXIgRGV2aWNlSW5mbyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERldmljZUluZm8oKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBEZXZpY2VJbmZvKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoRGV2aWNlSW5mbywgbnVsbCwgW3tcbiAgICBrZXk6IFwiR2V0QXBwRGV2aWNlSW5mb1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRBcHBEZXZpY2VJbmZvKCkge1xuICAgICAgdmFyIGRldmljZUluZm8gPSB7fTtcbiAgICAgIGRldmljZUluZm9bJ2RldmljZV9zeXN0ZW0nXSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7IC8vIGRldmljZUluZm8uQWRkKFwiZGV2aWNlX3N5c3RlbVwiLCBFbnZpcm9ubWVudC5PU1ZlcnNpb24uUGxhdGZvcm0uVG9TdHJpbmcoKSArIFwiIFwiICsgRW52aXJvbm1lbnQuT1NWZXJzaW9uLlZlcnNpb24uVG9TdHJpbmcoKSk7XG5cbiAgICAgIHJldHVybiBkZXZpY2VJbmZvO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBEZXZpY2VJbmZvO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QcmVhdXRoLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvUHJlYXV0aC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IFByZWF1dGhFdmVudHMsIEFjY291bnRWZXJpZnlSZXF1ZXN0LCBBY2NvdW50VmVyaWZ5UmVzcG9uc2UsIFByZWF1dGhPcGVuUmVxdWVzdCwgUHJlYXV0aFRvcHVwUmVxdWVzdCwgUHJlYXV0aFBhcnRpYWxDYW5jZWxsYXRpb25SZXF1ZXN0LCBQcmVhdXRoRXh0ZW5kUmVxdWVzdCwgUHJlYXV0aENhbmNlbFJlcXVlc3QsIFByZWF1dGhDb21wbGV0aW9uUmVxdWVzdCwgUHJlYXV0aFJlc3BvbnNlICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlByZWF1dGhFdmVudHNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQcmVhdXRoRXZlbnRzOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJBY2NvdW50VmVyaWZ5UmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEFjY291bnRWZXJpZnlSZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJBY2NvdW50VmVyaWZ5UmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBBY2NvdW50VmVyaWZ5UmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlByZWF1dGhPcGVuUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFByZWF1dGhPcGVuUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHJlYXV0aFRvcHVwUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFByZWF1dGhUb3B1cFJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlByZWF1dGhQYXJ0aWFsQ2FuY2VsbGF0aW9uUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFByZWF1dGhQYXJ0aWFsQ2FuY2VsbGF0aW9uUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHJlYXV0aEV4dGVuZFJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQcmVhdXRoRXh0ZW5kUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHJlYXV0aENhbmNlbFJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQcmVhdXRoQ2FuY2VsUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHJlYXV0aENvbXBsZXRpb25SZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUHJlYXV0aENvbXBsZXRpb25SZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQcmVhdXRoUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQcmVhdXRoUmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUmVxdWVzdElkSGVscGVyICovIFwiLi9zcmMvUmVxdWVzdElkSGVscGVyLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NZXNzYWdlcyAqLyBcIi4vc3JjL01lc3NhZ2VzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QdXJjaGFzZSAqLyBcIi4vc3JjL1B1cmNoYXNlLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU3BpTW9kZWxzICovIFwiLi9zcmMvU3BpTW9kZWxzLmpzXCIpO1xuXG5cblxuXG5cblxudmFyIFByZWF1dGhFdmVudHMgPSB7XG4gIEFjY291bnRWZXJpZnlSZXF1ZXN0OiBcImFjY291bnRfdmVyaWZ5XCIsXG4gIEFjY291bnRWZXJpZnlSZXNwb25zZTogXCJhY2NvdW50X3ZlcmlmeV9yZXNwb25zZVwiLFxuICBQcmVhdXRoT3BlblJlcXVlc3Q6IFwicHJlYXV0aFwiLFxuICBQcmVhdXRoT3BlblJlc3BvbnNlOiBcInByZWF1dGhfcmVzcG9uc2VcIixcbiAgUHJlYXV0aFRvcHVwUmVxdWVzdDogXCJwcmVhdXRoX3RvcHVwXCIsXG4gIFByZWF1dGhUb3B1cFJlc3BvbnNlOiBcInByZWF1dGhfdG9wdXBfcmVzcG9uc2VcIixcbiAgUHJlYXV0aEV4dGVuZFJlcXVlc3Q6IFwicHJlYXV0aF9leHRlbmRcIixcbiAgUHJlYXV0aEV4dGVuZFJlc3BvbnNlOiBcInByZWF1dGhfZXh0ZW5kX3Jlc3BvbnNlXCIsXG4gIFByZWF1dGhQYXJ0aWFsQ2FuY2VsbGF0aW9uUmVxdWVzdDogXCJwcmVhdXRoX3BhcnRpYWxfY2FuY2VsbGF0aW9uXCIsXG4gIFByZWF1dGhQYXJ0aWFsQ2FuY2VsbGF0aW9uUmVzcG9uc2U6IFwicHJlYXV0aF9wYXJ0aWFsX2NhbmNlbGxhdGlvbl9yZXNwb25zZVwiLFxuICBQcmVhdXRoQ2FuY2VsbGF0aW9uUmVxdWVzdDogXCJwcmVhdXRoX2NhbmNlbGxhdGlvblwiLFxuICBQcmVhdXRoQ2FuY2VsbGF0aW9uUmVzcG9uc2U6IFwicHJlYXV0aF9jYW5jZWxsYXRpb25fcmVzcG9uc2VcIixcbiAgUHJlYXV0aENvbXBsZXRlUmVxdWVzdDogXCJjb21wbGV0aW9uXCIsXG4gIFByZWF1dGhDb21wbGV0ZVJlc3BvbnNlOiBcImNvbXBsZXRpb25fcmVzcG9uc2VcIlxufTtcbnZhciBBY2NvdW50VmVyaWZ5UmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFjY291bnRWZXJpZnlSZXF1ZXN0KHBvc1JlZklkKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBBY2NvdW50VmVyaWZ5UmVxdWVzdCk7XG5cbiAgICB0aGlzLlBvc1JlZklkID0gcG9zUmVmSWQ7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKEFjY291bnRWZXJpZnlSZXF1ZXN0LCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIFwicG9zX3JlZl9pZFwiOiB0aGlzLlBvc1JlZklkXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicHJhdlwiKSwgUHJlYXV0aEV2ZW50cy5BY2NvdW50VmVyaWZ5UmVxdWVzdCwgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFjY291bnRWZXJpZnlSZXF1ZXN0O1xufSgpO1xudmFyIEFjY291bnRWZXJpZnlSZXNwb25zZSA9IGZ1bmN0aW9uIEFjY291bnRWZXJpZnlSZXNwb25zZShtKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgQWNjb3VudFZlcmlmeVJlc3BvbnNlKTtcblxuICB0aGlzLkRldGFpbHMgPSBuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJQdXJjaGFzZVJlc3BvbnNlXCJdKG0pO1xuICB0aGlzLlBvc1JlZklkID0gdGhpcy5EZXRhaWxzLlBvc1JlZklkO1xuICB0aGlzLl9tID0gbTtcbn07XG52YXIgUHJlYXV0aE9wZW5SZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUHJlYXV0aE9wZW5SZXF1ZXN0KGFtb3VudENlbnRzLCBwb3NSZWZJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHJlYXV0aE9wZW5SZXF1ZXN0KTtcblxuICAgIHRoaXMuUG9zUmVmSWQgPSBwb3NSZWZJZDtcbiAgICB0aGlzLlByZWF1dGhBbW91bnQgPSBhbW91bnRDZW50cztcbiAgICB0aGlzLkNvbmZpZyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlDb25maWdcIl0oKTtcbiAgICB0aGlzLk9wdGlvbnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFByZWF1dGhPcGVuUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBcInBvc19yZWZfaWRcIjogdGhpcy5Qb3NSZWZJZCxcbiAgICAgICAgXCJwcmVhdXRoX2Ftb3VudFwiOiB0aGlzLlByZWF1dGhBbW91bnRcbiAgICAgIH07XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRTaWduYXR1cmVGbG93T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuQWRkUmVjZWlwdENvbmZpZyhkYXRhKTtcbiAgICAgIHRoaXMuT3B0aW9ucy5BZGRPcHRpb25zKGRhdGEpO1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicHJhY1wiKSwgUHJlYXV0aEV2ZW50cy5QcmVhdXRoT3BlblJlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcmVhdXRoT3BlblJlcXVlc3Q7XG59KCk7XG52YXIgUHJlYXV0aFRvcHVwUmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByZWF1dGhUb3B1cFJlcXVlc3QocHJlYXV0aElkLCB0b3B1cEFtb3VudENlbnRzLCBwb3NSZWZJZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHJlYXV0aFRvcHVwUmVxdWVzdCk7XG5cbiAgICB0aGlzLlByZWF1dGhJZCA9IHByZWF1dGhJZDtcbiAgICB0aGlzLlRvcHVwQW1vdW50ID0gdG9wdXBBbW91bnRDZW50cztcbiAgICB0aGlzLlBvc1JlZklkID0gcG9zUmVmSWQ7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5PcHRpb25zID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQcmVhdXRoVG9wdXBSZXF1ZXN0LCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIFwicG9zX3JlZl9pZFwiOiB0aGlzLlBvc1JlZklkLFxuICAgICAgICBcInByZWF1dGhfaWRcIjogdGhpcy5QcmVhdXRoSWQsXG4gICAgICAgIFwidG9wdXBfYW1vdW50XCI6IHRoaXMuVG9wdXBBbW91bnRcbiAgICAgIH07XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRTaWduYXR1cmVGbG93T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuQWRkUmVjZWlwdENvbmZpZyhkYXRhKTtcbiAgICAgIHRoaXMuT3B0aW9ucy5BZGRPcHRpb25zKGRhdGEpO1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicHJ0dVwiKSwgUHJlYXV0aEV2ZW50cy5QcmVhdXRoVG9wdXBSZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJlYXV0aFRvcHVwUmVxdWVzdDtcbn0oKTtcbnZhciBQcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlcXVlc3QocHJlYXV0aElkLCBwYXJ0aWFsQ2FuY2VsbGF0aW9uQW1vdW50Q2VudHMsIHBvc1JlZklkKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlcXVlc3QpO1xuXG4gICAgdGhpcy5QcmVhdXRoSWQgPSBwcmVhdXRoSWQ7XG4gICAgdGhpcy5QYXJ0aWFsQ2FuY2VsbGF0aW9uQW1vdW50ID0gcGFydGlhbENhbmNlbGxhdGlvbkFtb3VudENlbnRzO1xuICAgIHRoaXMuUG9zUmVmSWQgPSBwb3NSZWZJZDtcbiAgICB0aGlzLkNvbmZpZyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlDb25maWdcIl0oKTtcbiAgICB0aGlzLk9wdGlvbnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFByZWF1dGhQYXJ0aWFsQ2FuY2VsbGF0aW9uUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBcInBvc19yZWZfaWRcIjogdGhpcy5Qb3NSZWZJZCxcbiAgICAgICAgXCJwcmVhdXRoX2lkXCI6IHRoaXMuUHJlYXV0aElkLFxuICAgICAgICBcInByZWF1dGhfY2FuY2VsX2Ftb3VudFwiOiB0aGlzLlBhcnRpYWxDYW5jZWxsYXRpb25BbW91bnRcbiAgICAgIH07XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRTaWduYXR1cmVGbG93T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuQWRkUmVjZWlwdENvbmZpZyhkYXRhKTtcbiAgICAgIHRoaXMuT3B0aW9ucy5BZGRPcHRpb25zKGRhdGEpO1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicHJwY1wiKSwgUHJlYXV0aEV2ZW50cy5QcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlcXVlc3Q7XG59KCk7XG52YXIgUHJlYXV0aEV4dGVuZFJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcmVhdXRoRXh0ZW5kUmVxdWVzdChwcmVhdXRoSWQsIHBvc1JlZklkKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQcmVhdXRoRXh0ZW5kUmVxdWVzdCk7XG5cbiAgICB0aGlzLlByZWF1dGhJZCA9IHByZWF1dGhJZDtcbiAgICB0aGlzLlBvc1JlZklkID0gcG9zUmVmSWQ7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5PcHRpb25zID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQcmVhdXRoRXh0ZW5kUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBcInBvc19yZWZfaWRcIjogdGhpcy5Qb3NSZWZJZCxcbiAgICAgICAgXCJwcmVhdXRoX2lkXCI6IHRoaXMuUHJlYXV0aElkXG4gICAgICB9O1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkFkZFJlY2VpcHRDb25maWcoZGF0YSk7XG4gICAgICB0aGlzLk9wdGlvbnMuQWRkT3B0aW9ucyhkYXRhKTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInByZXh0XCIpLCBQcmVhdXRoRXZlbnRzLlByZWF1dGhFeHRlbmRSZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJlYXV0aEV4dGVuZFJlcXVlc3Q7XG59KCk7XG52YXIgUHJlYXV0aENhbmNlbFJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcmVhdXRoQ2FuY2VsUmVxdWVzdChwcmVhdXRoSWQsIHBvc1JlZklkKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQcmVhdXRoQ2FuY2VsUmVxdWVzdCk7XG5cbiAgICB0aGlzLlByZWF1dGhJZCA9IHByZWF1dGhJZDtcbiAgICB0aGlzLlBvc1JlZklkID0gcG9zUmVmSWQ7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5PcHRpb25zID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQcmVhdXRoQ2FuY2VsUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBcInBvc19yZWZfaWRcIjogdGhpcy5Qb3NSZWZJZCxcbiAgICAgICAgXCJwcmVhdXRoX2lkXCI6IHRoaXMuUHJlYXV0aElkXG4gICAgICB9O1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkFkZFJlY2VpcHRDb25maWcoZGF0YSk7XG4gICAgICB0aGlzLk9wdGlvbnMuQWRkT3B0aW9ucyhkYXRhKTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInByYWNcIiksIFByZWF1dGhFdmVudHMuUHJlYXV0aENhbmNlbGxhdGlvblJlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcmVhdXRoQ2FuY2VsUmVxdWVzdDtcbn0oKTtcbnZhciBQcmVhdXRoQ29tcGxldGlvblJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcmVhdXRoQ29tcGxldGlvblJlcXVlc3QocHJlYXV0aElkLCBjb21wbGV0aW9uQW1vdW50Q2VudHMsIHBvc1JlZklkLCBzdXJjaGFyZ2VBbW91bnQpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFByZWF1dGhDb21wbGV0aW9uUmVxdWVzdCk7XG5cbiAgICB0aGlzLlByZWF1dGhJZCA9IHByZWF1dGhJZDtcbiAgICB0aGlzLkNvbXBsZXRpb25BbW91bnQgPSBjb21wbGV0aW9uQW1vdW50Q2VudHM7XG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuU3VyY2hhcmdlQW1vdW50ID0gc3VyY2hhcmdlQW1vdW50O1xuICAgIHRoaXMuQ29uZmlnID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUNvbmZpZ1wiXSgpO1xuICAgIHRoaXMuT3B0aW9ucyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUHJlYXV0aENvbXBsZXRpb25SZXF1ZXN0LCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIFwicG9zX3JlZl9pZFwiOiB0aGlzLlBvc1JlZklkLFxuICAgICAgICBcInByZWF1dGhfaWRcIjogdGhpcy5QcmVhdXRoSWQsXG4gICAgICAgIFwiY29tcGxldGlvbl9hbW91bnRcIjogdGhpcy5Db21wbGV0aW9uQW1vdW50LFxuICAgICAgICBcInN1cmNoYXJnZV9hbW91bnRcIjogdGhpcy5TdXJjaGFyZ2VBbW91bnRcbiAgICAgIH07XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRTaWduYXR1cmVGbG93T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuQWRkUmVjZWlwdENvbmZpZyhkYXRhKTtcbiAgICAgIHRoaXMuT3B0aW9ucy5BZGRPcHRpb25zKGRhdGEpO1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicHJhY1wiKSwgUHJlYXV0aEV2ZW50cy5QcmVhdXRoQ29tcGxldGVSZXF1ZXN0LCBkYXRhLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUHJlYXV0aENvbXBsZXRpb25SZXF1ZXN0O1xufSgpO1xudmFyIFByZWF1dGhSZXNwb25zZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByZWF1dGhSZXNwb25zZShtKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQcmVhdXRoUmVzcG9uc2UpO1xuXG4gICAgdGhpcy5QcmVhdXRoSWQgPSBtLkRhdGFbXCJwcmVhdXRoX2lkXCJdO1xuICAgIHRoaXMuRGV0YWlscyA9IG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlB1cmNoYXNlUmVzcG9uc2VcIl0obSk7XG4gICAgdGhpcy5Qb3NSZWZJZCA9IHRoaXMuRGV0YWlscy5Qb3NSZWZJZDtcbiAgICB0aGlzLl9tID0gbTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUHJlYXV0aFJlc3BvbnNlLCBbe1xuICAgIGtleTogXCJHZXRCYWxhbmNlQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbGFuY2VBbW91bnQoKSB7XG4gICAgICB2YXIgdHhUeXBlID0gdGhpcy5fbS5EYXRhW1widHJhbnNhY3Rpb25fdHlwZVwiXTtcblxuICAgICAgc3dpdGNoICh0eFR5cGUpIHtcbiAgICAgICAgY2FzZSBcIlBSRS1BVVRIXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcInByZWF1dGhfYW1vdW50XCJdO1xuXG4gICAgICAgIGNhc2UgXCJUT1BVUFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJiYWxhbmNlX2Ftb3VudFwiXTtcblxuICAgICAgICBjYXNlIFwiQ0FOQ0VMXCI6XG4gICAgICAgICAgLy8gUEFSVElBTCBDQU5DRUxMQVRJT05cbiAgICAgICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiYmFsYW5jZV9hbW91bnRcIl07XG5cbiAgICAgICAgY2FzZSBcIlBSRS1BVVRIIEVYVFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJiYWxhbmNlX2Ftb3VudFwiXTtcblxuICAgICAgICBjYXNlIFwiUENPTVBcIjpcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgLy8gQmFsYW5jZSBpcyAwIGFmdGVyIGNvbXBsZXRpb25cblxuICAgICAgICBjYXNlIFwiUFJFLUFVVEggQ0FOQ0VMXCI6XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIC8vIEJhbGFuY2UgaXMgMCBhZnRlciBjYW5jZWxsYXRpb25cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRQcmV2aW91c0JhbGFuY2VBbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UHJldmlvdXNCYWxhbmNlQW1vdW50KCkge1xuICAgICAgdmFyIHR4VHlwZSA9IHRoaXMuX20uRGF0YVtcInRyYW5zYWN0aW9uX3R5cGVcIl07XG5cbiAgICAgIHN3aXRjaCAodHhUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJQUkUtQVVUSFwiOlxuICAgICAgICAgIHJldHVybiAwO1xuXG4gICAgICAgIGNhc2UgXCJUT1BVUFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJleGlzdGluZ19wcmVhdXRoX2Ftb3VudFwiXTtcblxuICAgICAgICBjYXNlIFwiQ0FOQ0VMXCI6XG4gICAgICAgICAgLy8gUEFSVElBTCBDQU5DRUxMQVRJT05cbiAgICAgICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiZXhpc3RpbmdfcHJlYXV0aF9hbW91bnRcIl07XG5cbiAgICAgICAgY2FzZSBcIlBSRS1BVVRIIEVYVFwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJleGlzdGluZ19wcmVhdXRoX2Ftb3VudFwiXTtcblxuICAgICAgICBjYXNlIFwiUENPTVBcIjpcbiAgICAgICAgICAvLyBUSElTIElTIFRFQ0hOSUNBTExZIE5PVCBDT1JSRUNUIFdIRU4gQ09NUExFVElPTiBIQVBQRU5TIEZPUiBBIFBBUlRJQUwgQU1PVU5ULlxuICAgICAgICAgIC8vIEJVVCBVTkZPUlRVTkFURUxZLCBUSElTIFJFU1BPTlNFIERPRVMgTk9UIENPTlRBSU4gXCJleGlzdGluZ19wcmVhdXRoX2Ftb3VudFwiLlxuICAgICAgICAgIC8vIFNPIFwiY29tcGxldGlvbl9hbW91bnRcIiBJUyBUSEUgQ0xPU0VTVCBXRSBIQVZFLlxuICAgICAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbXCJjb21wbGV0aW9uX2Ftb3VudFwiXTtcblxuICAgICAgICBjYXNlIFwiUFJFLUFVVEggQ0FOQ0VMXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVtcInByZWF1dGhfYW1vdW50XCJdO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldENvbXBsZXRpb25BbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0Q29tcGxldGlvbkFtb3VudCgpIHtcbiAgICAgIHZhciB0eFR5cGUgPSB0aGlzLl9tLkRhdGFbXCJ0cmFuc2FjdGlvbl90eXBlXCJdO1xuXG4gICAgICBzd2l0Y2ggKHR4VHlwZSkge1xuICAgICAgICBjYXNlIFwiUENPTVBcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiY29tcGxldGlvbl9hbW91bnRcIl07XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0U3VyY2hhcmdlQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFN1cmNoYXJnZUFtb3VudCgpIHtcbiAgICAgIHZhciB0eFR5cGUgPSB0aGlzLl9tLkRhdGFbXCJ0cmFuc2FjdGlvbl90eXBlXCJdO1xuXG4gICAgICBzd2l0Y2ggKHR4VHlwZSkge1xuICAgICAgICBjYXNlIFwiUENPTVBcIjpcbiAgICAgICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wic3VyY2hhcmdlX2Ftb3VudFwiXTtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJXYXNNZXJjaGFudFJlY2VpcHRQcmludGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFdhc01lcmNoYW50UmVjZWlwdFByaW50ZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wibWVyY2hhbnRfcmVjZWlwdF9wcmludGVkXCJdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJXYXNDdXN0b21lclJlY2VpcHRQcmludGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFdhc0N1c3RvbWVyUmVjZWlwdFByaW50ZWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW1wiY3VzdG9tZXJfcmVjZWlwdF9wcmludGVkXCJdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcmVhdXRoUmVzcG9uc2U7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1ByaW50aW5nLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1ByaW50aW5nLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IFByaW50aW5nUmVxdWVzdCwgUHJpbnRpbmdSZXNwb25zZSwgUHJpbnRlciAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQcmludGluZ1JlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQcmludGluZ1JlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlByaW50aW5nUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQcmludGluZ1Jlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQcmludGVyXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUHJpbnRlcjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01lc3NhZ2VzICovIFwiLi9zcmMvTWVzc2FnZXMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9SZXF1ZXN0SWRIZWxwZXIgKi8gXCIuL3NyYy9SZXF1ZXN0SWRIZWxwZXIuanNcIik7XG5cblxuXG5cbnZhciBQcmludGluZ1JlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQcmludGluZ1JlcXVlc3Qoa2V5LCBwYXlsb2FkKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQcmludGluZ1JlcXVlc3QpO1xuXG4gICAgdGhpcy5fa2V5ID0ga2V5O1xuICAgIHRoaXMuX3BheWxvYWQgPSBwYXlsb2FkO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQcmludGluZ1JlcXVlc3QsIFt7XG4gICAga2V5OiBcInRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgXCJrZXlcIjogdGhpcy5fa2V5LFxuICAgICAgICBcInBheWxvYWRcIjogdGhpcy5fcGF5bG9hZFxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInByaW50XCIpLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5QcmludGluZ1JlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcmludGluZ1JlcXVlc3Q7XG59KCk7XG52YXIgUHJpbnRpbmdSZXNwb25zZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByaW50aW5nUmVzcG9uc2UobSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHJpbnRpbmdSZXNwb25zZSk7XG5cbiAgICB0aGlzLl9zdWNjZXNzID0gbS5HZXRTdWNjZXNzU3RhdGUoKSA9PSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlN1Y2Nlc3NTdGF0ZVwiXS5TdWNjZXNzO1xuICAgIHRoaXMuX20gPSBtO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQcmludGluZ1Jlc3BvbnNlLCBbe1xuICAgIGtleTogXCJpc1N1Y2Nlc3NcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNTdWNjZXNzKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N1Y2Nlc3M7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEVycm9yUmVhc29uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVycm9yUmVhc29uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5lcnJvcl9yZWFzb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldEVycm9yRGV0YWlsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVycm9yRGV0YWlsKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5lcnJvcl9kZXRhaWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldFJlc3BvbnNlVmFsdWVXaXRoQXR0cmlidXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFJlc3BvbnNlVmFsdWVXaXRoQXR0cmlidXRlKGF0dHJpYnV0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YVthdHRyaWJ1dGVdO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcmludGluZ1Jlc3BvbnNlO1xufSgpO1xuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIGEgbW9jayBwcmludGVyIGZvciB0aGUgdGVybWluYWwgdG8gcHJpbnQgUmVjZWlwdHNcbiAqL1xuXG52YXIgUHJpbnRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFByaW50ZXIoZWxlbWVudCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHJpbnRlcik7XG5cbiAgICB0aGlzLmJ1ZmZlciA9IFtdO1xuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFByaW50ZXIsIFt7XG4gICAga2V5OiBcInByaW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByaW50KCkge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnVmZmVyLnB1c2goYXJncy5qb2luKCcgJykpO1xuXG4gICAgICB0aGlzLl9yZW5kZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX3JlbmRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVuZGVyKCkge1xuICAgICAgdGhpcy5lbGVtZW50LmlubmVyVGV4dCA9IHRoaXMuYnVmZmVyLmpvaW4oXCJcXG5cXG4gXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvXFxcXC9cXFxcL1xcXFwvIFxcblxcblwiKTtcbiAgICAgIHRoaXMuZWxlbWVudC5zY3JvbGxUb3AgPSB0aGlzLmVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJDbGVhclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDbGVhcigpIHtcbiAgICAgIHRoaXMuYnVmZmVyID0gW107XG5cbiAgICAgIHRoaXMuX3JlbmRlcigpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQcmludGVyO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QdXJjaGFzZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9QdXJjaGFzZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBQdXJjaGFzZVJlcXVlc3QsIFB1cmNoYXNlUmVzcG9uc2UsIENhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdCwgQ2FuY2VsVHJhbnNhY3Rpb25SZXNwb25zZSwgR2V0TGFzdFRyYW5zYWN0aW9uUmVxdWVzdCwgR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2UsIFJlZnVuZFJlcXVlc3QsIFJlZnVuZFJlc3BvbnNlLCBTaWduYXR1cmVSZXF1aXJlZCwgU2lnbmF0dXJlRGVjbGluZSwgU2lnbmF0dXJlQWNjZXB0LCBNb3RvUHVyY2hhc2VSZXF1ZXN0LCBNb3RvUHVyY2hhc2VSZXNwb25zZSwgUGhvbmVGb3JBdXRoUmVxdWlyZWQsIEF1dGhDb2RlQWR2aWNlICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlB1cmNoYXNlUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFB1cmNoYXNlUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUHVyY2hhc2VSZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFB1cmNoYXNlUmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkNhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIENhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiQ2FuY2VsVHJhbnNhY3Rpb25SZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIENhbmNlbFRyYW5zYWN0aW9uUmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkdldExhc3RUcmFuc2FjdGlvblJlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBHZXRMYXN0VHJhbnNhY3Rpb25SZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJSZWZ1bmRSZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUmVmdW5kUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiUmVmdW5kUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBSZWZ1bmRSZXNwb25zZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU2lnbmF0dXJlUmVxdWlyZWRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTaWduYXR1cmVSZXF1aXJlZDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU2lnbmF0dXJlRGVjbGluZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNpZ25hdHVyZURlY2xpbmU7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNpZ25hdHVyZUFjY2VwdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNpZ25hdHVyZUFjY2VwdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiTW90b1B1cmNoYXNlUmVxdWVzdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1vdG9QdXJjaGFzZVJlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIk1vdG9QdXJjaGFzZVJlc3BvbnNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gTW90b1B1cmNoYXNlUmVzcG9uc2U7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBob25lRm9yQXV0aFJlcXVpcmVkXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gUGhvbmVGb3JBdXRoUmVxdWlyZWQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkF1dGhDb2RlQWR2aWNlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gQXV0aENvZGVBZHZpY2U7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NZXNzYWdlcyAqLyBcIi4vc3JjL01lc3NhZ2VzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUmVxdWVzdElkSGVscGVyICovIFwiLi9zcmMvUmVxdWVzdElkSGVscGVyLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU3BpTW9kZWxzICovIFwiLi9zcmMvU3BpTW9kZWxzLmpzXCIpO1xuXG5cblxuXG5cbnZhciBQdXJjaGFzZVJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQdXJjaGFzZVJlcXVlc3QoYW1vdW50Q2VudHMsIHBvc1JlZklkKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBQdXJjaGFzZVJlcXVlc3QpO1xuXG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuUHVyY2hhc2VBbW91bnQgPSBhbW91bnRDZW50cztcbiAgICB0aGlzLlRpcEFtb3VudCA9IDA7XG4gICAgdGhpcy5DYXNob3V0QW1vdW50ID0gMDtcbiAgICB0aGlzLlByb21wdEZvckNhc2hvdXQgPSBmYWxzZTtcbiAgICB0aGlzLlN1cmNoYXJnZUFtb3VudCA9IDA7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5PcHRpb25zID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpOyAvLyBMaWJyYXJ5IEJhY2t3YXJkcyBDb21wYXRpYmlsaXR5XG5cbiAgICB0aGlzLklkID0gcG9zUmVmSWQ7XG4gICAgdGhpcy5BbW91bnRDZW50cyA9IGFtb3VudENlbnRzO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQdXJjaGFzZVJlcXVlc3QsIFt7XG4gICAga2V5OiBcIkFtb3VudFN1bW1hcnlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQW1vdW50U3VtbWFyeSgpIHtcbiAgICAgIHJldHVybiBcIlB1cmNoYXNlOiBcIi5jb25jYXQoKHRoaXMuUHVyY2hhc2VBbW91bnQgLyAxMDAuMCkudG9GaXhlZCgyKSwgXCI7IFxcbiAgICAgICAgICAgIFRpcDogXCIpLmNvbmNhdCgodGhpcy5UaXBBbW91bnQgLyAxMDAuMCkudG9GaXhlZCgyKSwgXCI7IFxcbiAgICAgICAgICAgIENhc2hvdXQ6IFwiKS5jb25jYXQoKHRoaXMuQ2FzaG91dEFtb3VudCAvIDEwMC4wKS50b0ZpeGVkKDIpLCBcIjtcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgcG9zX3JlZl9pZDogdGhpcy5Qb3NSZWZJZCxcbiAgICAgICAgcHVyY2hhc2VfYW1vdW50OiB0aGlzLlB1cmNoYXNlQW1vdW50LFxuICAgICAgICB0aXBfYW1vdW50OiB0aGlzLlRpcEFtb3VudCxcbiAgICAgICAgY2FzaF9hbW91bnQ6IHRoaXMuQ2FzaG91dEFtb3VudCxcbiAgICAgICAgcHJvbXB0X2Zvcl9jYXNob3V0OiB0aGlzLlByb21wdEZvckNhc2hvdXQsXG4gICAgICAgIHN1cmNoYXJnZV9hbW91bnQ6IHRoaXMuU3VyY2hhcmdlQW1vdW50XG4gICAgICB9O1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkFkZFJlY2VpcHRDb25maWcoZGF0YSk7XG4gICAgICB0aGlzLk9wdGlvbnMuQWRkT3B0aW9ucyhkYXRhKTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInByY2hzXCIpLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5QdXJjaGFzZVJlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQdXJjaGFzZVJlcXVlc3Q7XG59KCk7XG52YXIgUHVyY2hhc2VSZXNwb25zZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFB1cmNoYXNlUmVzcG9uc2UobSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHVyY2hhc2VSZXNwb25zZSk7XG5cbiAgICB0aGlzLl9tID0gbTtcbiAgICB0aGlzLlJlcXVlc3RJZCA9IG0uSWQ7XG4gICAgdGhpcy5Qb3NSZWZJZCA9IG0uRGF0YS5wb3NfcmVmX2lkO1xuICAgIHRoaXMuU2NoZW1lTmFtZSA9IG0uRGF0YS5zY2hlbWVfbmFtZTtcbiAgICB0aGlzLlNjaGVtZUFwcE5hbWUgPSBtLkRhdGEuc2NoZW1lX25hbWU7XG4gICAgdGhpcy5TdWNjZXNzID0gbS5HZXRTdWNjZXNzU3RhdGUoKSA9PSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlN1Y2Nlc3NTdGF0ZVwiXS5TdWNjZXNzO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQdXJjaGFzZVJlc3BvbnNlLCBbe1xuICAgIGtleTogXCJHZXRSUk5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UlJOKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5ycm47XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFB1cmNoYXNlQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFB1cmNoYXNlQW1vdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5wdXJjaGFzZV9hbW91bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRpcEFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRUaXBBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnRpcF9hbW91bnQgfHwgMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0U3VyY2hhcmdlQW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFN1cmNoYXJnZUFtb3VudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuc3VyY2hhcmdlX2Ftb3VudCB8fCAwO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRDYXNob3V0QW1vdW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldENhc2hvdXRBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmNhc2hfYW1vdW50O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRCYW5rTm9uQ2FzaEFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRCYW5rTm9uQ2FzaEFtb3VudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuYmFua19ub25jYXNoX2Ftb3VudDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmFua0Nhc2hBbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmFua0Nhc2hBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmJhbmtfY2FzaF9hbW91bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEN1c3RvbWVyUmVjZWlwdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRDdXN0b21lclJlY2VpcHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmN1c3RvbWVyX3JlY2VpcHQgfHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0TWVyY2hhbnRSZWNlaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldE1lcmNoYW50UmVjZWlwdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEubWVyY2hhbnRfcmVjZWlwdCB8fCBcIlwiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSZXNwb25zZVRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UmVzcG9uc2VUZXh0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5ob3N0X3Jlc3BvbnNlX3RleHQgfHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlQ29kZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuaG9zdF9yZXNwb25zZV9jb2RlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRUZXJtaW5hbFJlZmVyZW5jZUlkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFRlcm1pbmFsUmVmZXJlbmNlSWQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnRlcm1pbmFsX3JlZl9pZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0Q2FyZEVudHJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldENhcmRFbnRyeSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuY2FyZF9lbnRyeTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QWNjb3VudFR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QWNjb3VudFR5cGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmFjY291bnRfdHlwZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QXV0aENvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QXV0aENvZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmF1dGhfY29kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmFua0RhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmFua0RhdGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmJhbmtfZGF0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmFua1RpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmFua1RpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmJhbmtfdGltZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0TWFza2VkUGFuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldE1hc2tlZFBhbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEubWFza2VkX3BhbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0VGVybWluYWxJZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRUZXJtaW5hbElkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS50ZXJtaW5hbF9pZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2FzTWVyY2hhbnRSZWNlaXB0UHJpbnRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNNZXJjaGFudFJlY2VpcHRQcmludGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5tZXJjaGFudF9yZWNlaXB0X3ByaW50ZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc0N1c3RvbWVyUmVjZWlwdFByaW50ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gV2FzQ3VzdG9tZXJSZWNlaXB0UHJpbnRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuY3VzdG9tZXJfcmVjZWlwdF9wcmludGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRTZXR0bGVtZW50RGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTZXR0bGVtZW50RGF0ZSgpIHtcbiAgICAgIC8vXCJiYW5rX3NldHRsZW1lbnRfZGF0ZVwiOlwiMjAwNDIwMThcIlxuICAgICAgdmFyIGRhdGVTdHIgPSB0aGlzLl9tLkRhdGEuYmFua19zZXR0bGVtZW50X2RhdGU7XG4gICAgICBpZiAoIWRhdGVTdHIpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXS5QYXJzZUJhbmtEYXRlKGRhdGVTdHIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSZXNwb25zZVZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlVmFsdWUoYXR0cmlidXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW2F0dHJpYnV0ZV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlRvUGF5bWVudFN1bW1hcnlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9QYXltZW50U3VtbWFyeSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFjY291bnRfdHlwZTogdGhpcy5HZXRBY2NvdW50VHlwZSgpLFxuICAgICAgICBhdXRoX2NvZGU6IHRoaXMuR2V0QXV0aENvZGUoKSxcbiAgICAgICAgYmFua19kYXRlOiB0aGlzLkdldEJhbmtEYXRlKCksXG4gICAgICAgIGJhbmtfdGltZTogdGhpcy5HZXRCYW5rVGltZSgpLFxuICAgICAgICBob3N0X3Jlc3BvbnNlX2NvZGU6IHRoaXMuR2V0UmVzcG9uc2VDb2RlKCksXG4gICAgICAgIGhvc3RfcmVzcG9uc2VfdGV4dDogdGhpcy5HZXRSZXNwb25zZVRleHQoKSxcbiAgICAgICAgbWFza2VkX3BhbjogdGhpcy5HZXRNYXNrZWRQYW4oKSxcbiAgICAgICAgcHVyY2hhc2VfYW1vdW50OiB0aGlzLkdldFB1cmNoYXNlQW1vdW50KCksXG4gICAgICAgIHJybjogdGhpcy5HZXRSUk4oKSxcbiAgICAgICAgc2NoZW1lX25hbWU6IHRoaXMuU2NoZW1lTmFtZSxcbiAgICAgICAgdGVybWluYWxfaWQ6IHRoaXMuR2V0VGVybWluYWxJZCgpLFxuICAgICAgICB0ZXJtaW5hbF9yZWZfaWQ6IHRoaXMuR2V0VGVybWluYWxSZWZlcmVuY2VJZCgpLFxuICAgICAgICB0aXBfYW1vdW50OiB0aGlzLkdldFRpcEFtb3VudCgpLFxuICAgICAgICBzdXJjaGFyZ2VfYW1vdW50OiB0aGlzLkdldFN1cmNoYXJnZUFtb3VudCgpXG4gICAgICB9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQdXJjaGFzZVJlc3BvbnNlO1xufSgpO1xudmFyIENhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdCgpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIENhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKENhbmNlbFRyYW5zYWN0aW9uUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcImN0eFwiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uQ2FuY2VsVHJhbnNhY3Rpb25SZXF1ZXN0LCBudWxsLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2FuY2VsVHJhbnNhY3Rpb25SZXF1ZXN0O1xufSgpO1xudmFyIENhbmNlbFRyYW5zYWN0aW9uUmVzcG9uc2UgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDYW5jZWxUcmFuc2FjdGlvblJlc3BvbnNlKG0pIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIENhbmNlbFRyYW5zYWN0aW9uUmVzcG9uc2UpO1xuXG4gICAgdGhpcy5fbSA9IG07XG4gICAgdGhpcy5Qb3NSZWZJZCA9IHRoaXMuX20uRGF0YS5wb3NfcmVmX2lkO1xuICAgIHRoaXMuU3VjY2VzcyA9IHRoaXMuX20uR2V0U3VjY2Vzc1N0YXRlKCkgPT0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJTdWNjZXNzU3RhdGVcIl0uU3VjY2VzcztcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoQ2FuY2VsVHJhbnNhY3Rpb25SZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiR2V0RXJyb3JSZWFzb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0RXJyb3JSZWFzb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmVycm9yX3JlYXNvbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0RXJyb3JEZXRhaWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0RXJyb3JEZXRhaWwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmVycm9yX2RldGFpbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2FzVHhuUGFzdFBvaW50T2ZOb1JldHVyblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNUeG5QYXN0UG9pbnRPZk5vUmV0dXJuKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uR2V0RXJyb3IoKS5zdGFydHNXaXRoKFwiVFhOX1BBU1RfUE9JTlRfT0ZfTk9fUkVUVVJOXCIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSZXNwb25zZVZhbHVlV2l0aEF0dHJpYnV0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZXNwb25zZVZhbHVlV2l0aEF0dHJpYnV0ZShhdHRyaWJ1dGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGFbYXR0cmlidXRlXTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ2FuY2VsVHJhbnNhY3Rpb25SZXNwb25zZTtcbn0oKTtcbnZhciBHZXRMYXN0VHJhbnNhY3Rpb25SZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR2V0TGFzdFRyYW5zYWN0aW9uUmVxdWVzdCgpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIEdldExhc3RUcmFuc2FjdGlvblJlcXVlc3QpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShHZXRMYXN0VHJhbnNhY3Rpb25SZXF1ZXN0LCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwiZ2x0XCIpLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5HZXRMYXN0VHJhbnNhY3Rpb25SZXF1ZXN0LCBudWxsLCB0cnVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR2V0TGFzdFRyYW5zYWN0aW9uUmVxdWVzdDtcbn0oKTtcbnZhciBHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlKG0pIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIEdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlKTtcblxuICAgIHRoaXMuX20gPSBtO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiV2FzUmV0cmlldmVkU3VjY2Vzc2Z1bGx5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFdhc1JldHJpZXZlZFN1Y2Nlc3NmdWxseSgpIHtcbiAgICAgIC8vIFdlIGNhbid0IHJlbHkgb24gY2hlY2tpbmcgXCJzdWNjZXNzXCIgZmxhZyBvciBcImVycm9yXCIgZmllbGRzIGhlcmUsXG4gICAgICAvLyBhcyByZXRyaWV2YWwgbWF5IGJlIHN1Y2Nlc3NmdWwsIGJ1dCB0aGUgcmV0cmlldmVkIHRyYW5zYWN0aW9uIHdhcyBhIGZhaWwuXG4gICAgICAvLyBTbyB3ZSBjaGVjayBpZiB3ZSBnb3QgYmFjayBhbiBSZXNwb25zZUNvZGUuXG4gICAgICAvLyAoYXMgb3Bwb3NlZCB0byBzYXkgYW4gb3BlcmF0aW9uX2luX3Byb2dyZXNzX2Vycm9yKVxuICAgICAgcmV0dXJuICEhdGhpcy5HZXRSZXNwb25zZUNvZGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2FzVGltZU91dE9mU3luY0Vycm9yXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFdhc1RpbWVPdXRPZlN5bmNFcnJvcigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkdldEVycm9yKCkuc3RhcnRzV2l0aChcIlRJTUVfT1VUX09GX1NZTkNcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc09wZXJhdGlvbkluUHJvZ3Jlc3NFcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNPcGVyYXRpb25JblByb2dyZXNzRXJyb3IoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5HZXRFcnJvcigpLnN0YXJ0c1dpdGgoXCJPUEVSQVRJT05fSU5fUFJPR1JFU1NcIik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIklzV2FpdGluZ0ZvclNpZ25hdHVyZVJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIElzV2FpdGluZ0ZvclNpZ25hdHVyZVJlc3BvbnNlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uR2V0RXJyb3IoKS5zdGFydHNXaXRoKFwiT1BFUkFUSU9OX0lOX1BST0dSRVNTX0FXQUlUSU5HX1NJR05BVFVSRVwiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiSXNXYWl0aW5nRm9yQXV0aENvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSXNXYWl0aW5nRm9yQXV0aENvZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5HZXRFcnJvcigpLnN0YXJ0c1dpdGgoXCJPUEVSQVRJT05fSU5fUFJPR1JFU1NfQVdBSVRJTkdfUEhPTkVfQVVUSF9DT0RFXCIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJJc1N0aWxsSW5Qcm9ncmVzc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJc1N0aWxsSW5Qcm9ncmVzcyhwb3NSZWZJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuV2FzT3BlcmF0aW9uSW5Qcm9ncmVzc0Vycm9yKCkgJiYgKHRoaXMuR2V0UG9zUmVmSWQoKSA9PSBwb3NSZWZJZCB8fCB0aGlzLkdldFBvc1JlZklkKCkgPT0gbnVsbCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFN1Y2Nlc3NTdGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTdWNjZXNzU3RhdGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5HZXRTdWNjZXNzU3RhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2FzU3VjY2Vzc2Z1bFR4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFdhc1N1Y2Nlc3NmdWxUeCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkdldFN1Y2Nlc3NTdGF0ZSgpID09IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiU3VjY2Vzc1N0YXRlXCJdLlN1Y2Nlc3M7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFR4VHlwZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRUeFR5cGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnRyYW5zYWN0aW9uX3R5cGU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFBvc1JlZklkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFBvc1JlZklkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5wb3NfcmVmX2lkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRCYW5rTm9uQ2FzaEFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRCYW5rTm9uQ2FzaEFtb3VudCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuYmFua19ub25jYXNoX2Ftb3VudDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0U2NoZW1lQXBwXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFNjaGVtZUFwcCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuc2NoZW1lX25hbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFNjaGVtZU5hbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0U2NoZW1lTmFtZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuc2NoZW1lX25hbWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmFtb3VudF9wdXJjaGFzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0VHJhbnNhY3Rpb25BbW91bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VHJhbnNhY3Rpb25BbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmFtb3VudF90cmFuc2FjdGlvbl90eXBlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRCYW5rRGF0ZVRpbWVTdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmFua0RhdGVUaW1lU3RyaW5nKCkge1xuICAgICAgdmFyIGRzID0gdGhpcy5fbS5EYXRhLmJhbmtfZGF0ZSArIHRoaXMuX20uRGF0YS5iYW5rX3RpbWU7XG4gICAgICByZXR1cm4gZHM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFJSTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSUk4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnJybjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VUZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlVGV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuaG9zdF9yZXNwb25zZV90ZXh0IHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlQ29kZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuaG9zdF9yZXNwb25zZV9jb2RlO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlcmUgaXMgYSBidWcsIFZTVi05MjAsIHdoZXJlYnkgdGhlIGN1c3RvbWVyX3JlY2VpcHQgaXMgbWlzc2luZyBmcm9tIGEgZ2x0IHJlc3BvbnNlLlxuICAgIC8vIFRoZSBjdXJyZW50IHJlY29tbWVuZGF0aW9uIGlzIHRvIHVzZSB0aGUgbWVyY2hhbnQgcmVjZWlwdCBpbiBwbGFjZSBvZiBpdCBpZiByZXF1aXJlZC5cbiAgICAvLyBUaGlzIG1ldGhvZCBtb2RpZmllcyB0aGUgdW5kZXJseWluZyBpbmNvbWluZyBtZXNzYWdlIGRhdGEgYnkgY29weWluZ1xuICAgIC8vIHRoZSBtZXJjaGFudCByZWNlaXB0IGludG8gdGhlIGN1c3RvbWVyIHJlY2VpcHQgb25seSBpZiB0aGVyZSBcbiAgICAvLyBpcyBhIG1lcmNoYW50X3JlY2VpcHQgYW5kIHRoZXJlIGlzIG5vdCBhIGN1c3RvbWVyX3JlY2VpcHQuICAgXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiQ29weU1lcmNoYW50UmVjZWlwdFRvQ3VzdG9tZXJSZWNlaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIENvcHlNZXJjaGFudFJlY2VpcHRUb0N1c3RvbWVyUmVjZWlwdCgpIHtcbiAgICAgIHZhciBjciA9IHRoaXMuX20uRGF0YS5jdXN0b21lcl9yZWNlaXB0O1xuICAgICAgdmFyIG1yID0gdGhpcy5fbS5EYXRhLm1lcmNoYW50X3JlY2VpcHQ7XG5cbiAgICAgIGlmIChtciAhPSBcIlwiICYmICFjcikge1xuICAgICAgICB0aGlzLl9tLkRhdGEuY3VzdG9tZXJfcmVjZWlwdCA9IG1yO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZTtcbn0oKTtcbnZhciBSZWZ1bmRSZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVmdW5kUmVxdWVzdChhbW91bnRDZW50cywgcG9zUmVmSWQsIHN1cHByZXNzTWVyY2hhbnRQYXNzd29yZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUmVmdW5kUmVxdWVzdCk7XG5cbiAgICB0aGlzLkFtb3VudENlbnRzID0gYW1vdW50Q2VudHM7XG4gICAgdGhpcy5JZCA9IF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInJlZnVuZFwiKTtcbiAgICB0aGlzLlBvc1JlZklkID0gcG9zUmVmSWQ7XG4gICAgdGhpcy5TdXBwcmVzc01lcmNoYW50UGFzc3dvcmQgPSBzdXBwcmVzc01lcmNoYW50UGFzc3dvcmQ7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5PcHRpb25zID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShSZWZ1bmRSZXF1ZXN0LCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7XG4gICAgICAgIHJlZnVuZF9hbW91bnQ6IHRoaXMuQW1vdW50Q2VudHMsXG4gICAgICAgIHBvc19yZWZfaWQ6IHRoaXMuUG9zUmVmSWQsXG4gICAgICAgIHN1cHByZXNzX21lcmNoYW50X3Bhc3N3b3JkOiB0aGlzLlN1cHByZXNzTWVyY2hhbnRQYXNzd29yZFxuICAgICAgfTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcmludE1lcmNoYW50Q29weSA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJvbXB0Rm9yQ3VzdG9tZXJDb3B5T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFNpZ25hdHVyZUZsb3dPbkVmdHBvcyA9IHRydWU7XG4gICAgICB0aGlzLkNvbmZpZy5BZGRSZWNlaXB0Q29uZmlnKGRhdGEpO1xuICAgICAgdGhpcy5PcHRpb25zLkFkZE9wdGlvbnMoZGF0YSk7XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXShfUmVxdWVzdElkSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJSZXF1ZXN0SWRIZWxwZXJcIl0uSWQoXCJyZWZ1bmRcIiksIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiRXZlbnRzXCJdLlJlZnVuZFJlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZWZ1bmRSZXF1ZXN0O1xufSgpO1xudmFyIFJlZnVuZFJlc3BvbnNlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVmdW5kUmVzcG9uc2UobSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUmVmdW5kUmVzcG9uc2UpO1xuXG4gICAgdGhpcy5fbSA9IG07XG4gICAgdGhpcy5SZXF1ZXN0SWQgPSBtLklkO1xuICAgIHRoaXMuUG9zUmVmSWQgPSBtLkRhdGEucG9zX3JlZl9pZDtcbiAgICB0aGlzLlNjaGVtZU5hbWUgPSBtLkRhdGEuc2NoZW1lX25hbWU7XG4gICAgdGhpcy5TY2hlbWVBcHBOYW1lID0gbS5EYXRhLnNjaGVtZV9uYW1lO1xuICAgIHRoaXMuU3VjY2VzcyA9IG0uR2V0U3VjY2Vzc1N0YXRlKCkgPT0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJTdWNjZXNzU3RhdGVcIl0uU3VjY2VzcztcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoUmVmdW5kUmVzcG9uc2UsIFt7XG4gICAga2V5OiBcIkdldFJlZnVuZEFtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSZWZ1bmRBbW91bnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnJlZnVuZF9hbW91bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFJSTlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRSUk4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLnJybjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0Q3VzdG9tZXJSZWNlaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEN1c3RvbWVyUmVjZWlwdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuY3VzdG9tZXJfcmVjZWlwdCB8fCBcIlwiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRNZXJjaGFudFJlY2VpcHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0TWVyY2hhbnRSZWNlaXB0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5tZXJjaGFudF9yZWNlaXB0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSZXNwb25zZVRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UmVzcG9uc2VUZXh0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5ob3N0X3Jlc3BvbnNlX3RleHQgfHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlQ29kZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuaG9zdF9yZXNwb25zZV9jb2RlIHx8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRlcm1pbmFsUmVmZXJlbmNlSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VGVybWluYWxSZWZlcmVuY2VJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEudGVybWluYWxfcmVmX2lkIHx8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldENhcmRFbnRyeVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRDYXJkRW50cnkoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmNhcmRfZW50cnkgfHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QWNjb3VudFR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QWNjb3VudFR5cGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmFjY291bnRfdHlwZSB8fCBcIlwiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRBdXRoQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRBdXRoQ29kZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuYXV0aF9jb2RlIHx8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldEJhbmtEYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldEJhbmtEYXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5iYW5rX2RhdGUgfHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0QmFua1RpbWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmFua1RpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmJhbmtfdGltZSB8fCBcIlwiO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRNYXNrZWRQYW5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0TWFza2VkUGFuKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5tYXNrZWRfcGFuIHx8IFwiXCI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRlcm1pbmFsSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VGVybWluYWxJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEudGVybWluYWxfaWQgfHwgXCJcIjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiV2FzTWVyY2hhbnRSZWNlaXB0UHJpbnRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBXYXNNZXJjaGFudFJlY2VpcHRQcmludGVkKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5tZXJjaGFudF9yZWNlaXB0X3ByaW50ZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc0N1c3RvbWVyUmVjZWlwdFByaW50ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gV2FzQ3VzdG9tZXJSZWNlaXB0UHJpbnRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuY3VzdG9tZXJfcmVjZWlwdF9wcmludGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRTZXR0bGVtZW50RGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTZXR0bGVtZW50RGF0ZSgpIHtcbiAgICAgIC8vXCJiYW5rX3NldHRsZW1lbnRfZGF0ZVwiOlwiMjAwNDIwMThcIlxuICAgICAgdmFyIGRhdGVTdHIgPSB0aGlzLl9tLkRhdGEuYmFua19zZXR0bGVtZW50X2RhdGU7XG4gICAgICBpZiAoIWRhdGVTdHIpIHJldHVybiBudWxsO1xuICAgICAgcmV0dXJuIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXS5QYXJzZUJhbmtEYXRlKGRhdGVTdHIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSZXNwb25zZVZhbHVlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlVmFsdWUoYXR0cmlidXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhW2F0dHJpYnV0ZV07XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlZnVuZFJlc3BvbnNlO1xufSgpO1xudmFyIFNpZ25hdHVyZVJlcXVpcmVkID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2lnbmF0dXJlUmVxdWlyZWQobSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2lnbmF0dXJlUmVxdWlyZWQpO1xuXG4gICAgdGhpcy5SZXF1ZXN0SWQgPSBtLklkO1xuICAgIHRoaXMuUG9zUmVmSWQgPSBtLkRhdGEucG9zX3JlZl9pZDtcbiAgICB0aGlzLl9yZWNlaXB0VG9TaWduID0gbS5EYXRhLm1lcmNoYW50X3JlY2VpcHQ7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFNpZ25hdHVyZVJlcXVpcmVkLCBbe1xuICAgIGtleTogXCJTaWduYXR1cmVSZXF1aXJlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTaWduYXR1cmVSZXF1aXJlZChwb3NSZWZJZCwgcmVxdWVzdElkLCByZWNlaXB0VG9TaWduKSB7XG4gICAgICB0aGlzLlJlcXVlc3RJZCA9IHJlcXVlc3RJZDtcbiAgICAgIHRoaXMuUG9zUmVmSWQgPSBwb3NSZWZJZDtcbiAgICAgIHRoaXMuX3JlY2VpcHRUb1NpZ24gPSByZWNlaXB0VG9TaWduO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRNZXJjaGFudFJlY2VpcHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0TWVyY2hhbnRSZWNlaXB0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3JlY2VpcHRUb1NpZ247XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNpZ25hdHVyZVJlcXVpcmVkO1xufSgpO1xudmFyIFNpZ25hdHVyZURlY2xpbmUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaWduYXR1cmVEZWNsaW5lKHBvc1JlZklkKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBTaWduYXR1cmVEZWNsaW5lKTtcblxuICAgIHRoaXMuUG9zUmVmSWQgPSBwb3NSZWZJZDtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoU2lnbmF0dXJlRGVjbGluZSwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBwb3NfcmVmX2lkOiB0aGlzLlBvc1JlZklkXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwic2lnZGVjXCIpLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5TaWduYXR1cmVEZWNsaW5lZCwgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNpZ25hdHVyZURlY2xpbmU7XG59KCk7XG52YXIgU2lnbmF0dXJlQWNjZXB0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2lnbmF0dXJlQWNjZXB0KHBvc1JlZklkKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBTaWduYXR1cmVBY2NlcHQpO1xuXG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShTaWduYXR1cmVBY2NlcHQsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgcG9zX3JlZl9pZDogdGhpcy5Qb3NSZWZJZFxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInNpZ2FjY1wiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uU2lnbmF0dXJlQWNjZXB0ZWQsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaWduYXR1cmVBY2NlcHQ7XG59KCk7XG52YXIgTW90b1B1cmNoYXNlUmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1vdG9QdXJjaGFzZVJlcXVlc3QoYW1vdW50Q2VudHMsIHBvc1JlZklkLCBzdXJjaGFyZ2VBbW91bnQpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIE1vdG9QdXJjaGFzZVJlcXVlc3QpO1xuXG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuUHVyY2hhc2VBbW91bnQgPSBhbW91bnRDZW50cztcbiAgICB0aGlzLlN1cmNoYXJnZUFtb3VudCA9IHN1cmNoYXJnZUFtb3VudDtcbiAgICB0aGlzLlN1cHByZXNzTWVyY2hhbnRQYXNzd29yZCA9IGZhbHNlO1xuICAgIHRoaXMuQ29uZmlnID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlNwaUNvbmZpZ1wiXSgpO1xuICAgIHRoaXMuT3B0aW9ucyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoTW90b1B1cmNoYXNlUmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICBwb3NfcmVmX2lkOiB0aGlzLlBvc1JlZklkLFxuICAgICAgICBwdXJjaGFzZV9hbW91bnQ6IHRoaXMuUHVyY2hhc2VBbW91bnQsXG4gICAgICAgIHN1cmNoYXJnZV9hbW91bnQ6IHRoaXMuU3VyY2hhcmdlQW1vdW50LFxuICAgICAgICBzdXBwcmVzc19tZXJjaGFudF9wYXNzd29yZDogdGhpcy5TdXBwcmVzc01lcmNoYW50UGFzc3dvcmRcbiAgICAgIH07XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRTaWduYXR1cmVGbG93T25FZnRwb3MgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuQWRkUmVjZWlwdENvbmZpZyhkYXRhKTtcbiAgICAgIHRoaXMuT3B0aW9ucy5BZGRPcHRpb25zKGRhdGEpO1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwibW90b1wiKSwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uTW90b1B1cmNoYXNlUmVxdWVzdCwgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1vdG9QdXJjaGFzZVJlcXVlc3Q7XG59KCk7XG52YXIgTW90b1B1cmNoYXNlUmVzcG9uc2UgPSBmdW5jdGlvbiBNb3RvUHVyY2hhc2VSZXNwb25zZShtKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgTW90b1B1cmNoYXNlUmVzcG9uc2UpO1xuXG4gIHRoaXMuUHVyY2hhc2VSZXNwb25zZSA9IG5ldyBQdXJjaGFzZVJlc3BvbnNlKG0pO1xuICB0aGlzLlBvc1JlZklkID0gUHVyY2hhc2VSZXNwb25zZS5Qb3NSZWZJZDtcbn07XG52YXIgUGhvbmVGb3JBdXRoUmVxdWlyZWQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQaG9uZUZvckF1dGhSZXF1aXJlZCgpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFBob25lRm9yQXV0aFJlcXVpcmVkKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDQpIHtcbiAgICAgIHRoaXMuUG9zUmVmSWQgPSBhcmdzWzBdO1xuICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBhcmdzWzFdO1xuICAgICAgdGhpcy5fcGhvbmVOdW1iZXIgPSBhcmdzWzJdO1xuICAgICAgdGhpcy5fbWVyY2hhbnRJZCA9IGFyZ3NbM107XG4gICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdGhpcy5SZXF1ZXN0SWQgPSBhcmdzWzBdLklkO1xuICAgICAgdGhpcy5Qb3NSZWZJZCA9IGFyZ3NbMF0uRGF0YS5wb3NfcmVmX2lkO1xuICAgICAgdGhpcy5fcGhvbmVOdW1iZXIgPSBhcmdzWzBdLkRhdGEuYXV0aF9jZW50cmVfcGhvbmVfbnVtYmVyO1xuICAgICAgdGhpcy5fbWVyY2hhbnRJZCA9IGFyZ3NbMF0uRGF0YS5tZXJjaGFudF9pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNhbGwgc2lnIGZvciBQaG9uZSBhdXRoIHJlcXVpcmVkIGNsYXNzJyk7XG4gICAgfVxuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQaG9uZUZvckF1dGhSZXF1aXJlZCwgW3tcbiAgICBrZXk6IFwiR2V0UGhvbmVOdW1iZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0UGhvbmVOdW1iZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGhvbmVOdW1iZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldE1lcmNoYW50SWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0TWVyY2hhbnRJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tZXJjaGFudElkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQaG9uZUZvckF1dGhSZXF1aXJlZDtcbn0oKTtcbnZhciBBdXRoQ29kZUFkdmljZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEF1dGhDb2RlQWR2aWNlKHBvc1JlZklkLCBhdXRoQ29kZSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgQXV0aENvZGVBZHZpY2UpO1xuXG4gICAgdGhpcy5Qb3NSZWZJZCA9IHBvc1JlZklkO1xuICAgIHRoaXMuQXV0aENvZGUgPSBhdXRoQ29kZTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoQXV0aENvZGVBZHZpY2UsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgcG9zX3JlZl9pZDogdGhpcy5Qb3NSZWZJZCxcbiAgICAgICAgYXV0aF9jb2RlOiB0aGlzLkF1dGhDb2RlXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0oX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwiYXV0aGFkXCIpLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5BdXRoQ29kZUFkdmljZSwgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEF1dGhDb2RlQWR2aWNlO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9QdXJjaGFzZUhlbHBlci5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9QdXJjaGFzZUhlbHBlci5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBQdXJjaGFzZUhlbHBlciAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJQdXJjaGFzZUhlbHBlclwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFB1cmNoYXNlSGVscGVyOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUHVyY2hhc2UgKi8gXCIuL3NyYy9QdXJjaGFzZS5qc1wiKTtcblxuXG5cbnZhciBQdXJjaGFzZUhlbHBlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFB1cmNoYXNlSGVscGVyKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgUHVyY2hhc2VIZWxwZXIpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShQdXJjaGFzZUhlbHBlciwgbnVsbCwgW3tcbiAgICBrZXk6IFwiQ3JlYXRlUHVyY2hhc2VSZXF1ZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIENyZWF0ZVB1cmNoYXNlUmVxdWVzdChhbW91bnRDZW50cywgcHVyY2hhc2VJZCkge1xuICAgICAgcmV0dXJuIG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlB1cmNoYXNlUmVxdWVzdFwiXShhbW91bnRDZW50cywgcHVyY2hhc2VJZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkNyZWF0ZVB1cmNoYXNlUmVxdWVzdFYyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIENyZWF0ZVB1cmNoYXNlUmVxdWVzdFYyKHBvc1JlZklkLCBwdXJjaGFzZUFtb3VudCwgdGlwQW1vdW50LCBjYXNob3V0QW1vdW50LCBwcm9tcHRGb3JDYXNob3V0LCBzdXJjaGFyZ2VBbW91bnQpIHtcbiAgICAgIHZhciBwciA9IE9iamVjdC5hc3NpZ24obmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHVyY2hhc2VSZXF1ZXN0XCJdKHB1cmNoYXNlQW1vdW50LCBwb3NSZWZJZCksIHtcbiAgICAgICAgQ2FzaG91dEFtb3VudDogY2FzaG91dEFtb3VudCxcbiAgICAgICAgVGlwQW1vdW50OiB0aXBBbW91bnQsXG4gICAgICAgIFByb21wdEZvckNhc2hvdXQ6IHByb21wdEZvckNhc2hvdXQsXG4gICAgICAgIFN1cmNoYXJnZUFtb3VudDogc3VyY2hhcmdlQW1vdW50XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiQ3JlYXRlUmVmdW5kUmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDcmVhdGVSZWZ1bmRSZXF1ZXN0KGFtb3VudENlbnRzLCBwdXJjaGFzZUlkLCBzdXBwcmVzc01lcmNoYW50UGFzc3dvcmQpIHtcbiAgICAgIHJldHVybiBuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJSZWZ1bmRSZXF1ZXN0XCJdKGFtb3VudENlbnRzLCBwdXJjaGFzZUlkLCBzdXBwcmVzc01lcmNoYW50UGFzc3dvcmQpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQdXJjaGFzZUhlbHBlcjtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvUmVxdWVzdElkSGVscGVyLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9SZXF1ZXN0SWRIZWxwZXIuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IFJlcXVlc3RJZEhlbHBlciAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJSZXF1ZXN0SWRIZWxwZXJcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBSZXF1ZXN0SWRIZWxwZXI7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuXG5cbnZhciBfX1JlcXVlc3RJZEhlbHBlckNvdW50ZXIgPSAxO1xudmFyIFJlcXVlc3RJZEhlbHBlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFJlcXVlc3RJZEhlbHBlcigpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFJlcXVlc3RJZEhlbHBlcik7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFJlcXVlc3RJZEhlbHBlciwgbnVsbCwgW3tcbiAgICBrZXk6IFwiSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSWQocHJlZml4KSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgX19SZXF1ZXN0SWRIZWxwZXJDb3VudGVyKys7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlcXVlc3RJZEhlbHBlcjtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvU2VjcmV0cy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1NlY3JldHMuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBTZWNyZXRzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNlY3JldHNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTZWNyZXRzOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcblxuXG52YXIgU2VjcmV0cyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNlY3JldHMoZW5jS2V5LCBobWFjS2V5KSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBTZWNyZXRzKTtcblxuICAgIHRoaXMuRW5jS2V5ID0gZW5jS2V5O1xuICAgIHRoaXMuSG1hY0tleSA9IGhtYWNLZXk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFNlY3JldHMsIG51bGwsIFt7XG4gICAga2V5OiBcInNhdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZShFbmNLZXksIEhtYWNLZXkpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdFbmNLZXknLCBFbmNLZXkpO1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ0htYWNLZXknLCBIbWFjS2V5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzdG9yZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXN0b3JlKCkge1xuICAgICAgcmV0dXJuIG5ldyBTZWNyZXRzKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdFbmNLZXknKSwgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0htYWNLZXknKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzU2F2ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaXNTYXZlZCgpIHtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnRW5jS2V5JykgJiYgbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0htYWNLZXknKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiUmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gUmVzZXQoKSB7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnRW5jS2V5Jyk7XG4gICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgnSG1hY0tleScpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZWNyZXRzO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9TZXJ2aWNlL0RldmljZVNlcnZpY2UuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1NlcnZpY2UvRGV2aWNlU2VydmljZS5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogRGV2aWNlQWRkcmVzc1N0YXR1cywgRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZSwgSHR0cFN0YXR1c0NvZGUsIERldmljZUFkZHJlc3NTZXJ2aWNlICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkRldmljZUFkZHJlc3NTdGF0dXNcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBEZXZpY2VBZGRyZXNzU3RhdHVzOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJEZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiSHR0cFN0YXR1c0NvZGVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBIdHRwU3RhdHVzQ29kZTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiRGV2aWNlQWRkcmVzc1NlcnZpY2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBEZXZpY2VBZGRyZXNzU2VydmljZTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfcmVnZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfcmVnZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9yZWdlbmVyYXRvcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2FzeW5jVG9HZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2FzeW5jVG9HZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2FzeW5jVG9HZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyk7XG5cblxuXG5cbnZhciBEZXZpY2VBZGRyZXNzU3RhdHVzID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQoKShEZXZpY2VBZGRyZXNzU3RhdHVzLCBbe1xuICAgIGtleTogXCJBZGRyZXNzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAodGhpcy5Vc2VTZWN1cmVXZWJTb2NrZXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZxZG47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5pcDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KGFkZHJlc3MpIHtcbiAgICAgIGlmICh0aGlzLlVzZVNlY3VyZVdlYlNvY2tldHMpIHtcbiAgICAgICAgdGhpcy5mcWRuID0gYWRkcmVzZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmlwID0gYWRkcmVzcztcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBEZXZpY2VBZGRyZXNzU3RhdHVzKHVzZVNlY3VyZVdlYlNvY2tldHMpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCgpKHRoaXMsIERldmljZUFkZHJlc3NTdGF0dXMpO1xuXG4gICAgdGhpcy5Vc2VTZWN1cmVXZWJTb2NrZXRzID0gdXNlU2VjdXJlV2ViU29ja2V0cztcbiAgICB0aGlzLmlwID0gbnVsbDtcbiAgICB0aGlzLmZxZG4gPSBudWxsO1xuICAgIHRoaXMuTGFzdFVwZGF0ZWQgPSBudWxsO1xuICAgIHRoaXMuRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZSA9IG51bGw7XG4gICAgdGhpcy5SZXNwb25zZVN0YXR1c0Rlc2NyaXB0aW9uID0gbnVsbDtcbiAgICB0aGlzLlJlc3BvbnNlTWVzc2FnZSA9IG51bGw7XG4gIH1cblxuICByZXR1cm4gRGV2aWNlQWRkcmVzc1N0YXR1cztcbn0oKTtcbnZhciBEZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlID0ge1xuICBTVUNDRVNTOiAnU1VDQ0VTUycsXG4gIElOVkFMSURfU0VSSUFMX05VTUJFUjogJ0lOVkFMSURfU0VSSUFMX05VTUJFUicsXG4gIEFERFJFU1NfTk9UX0NIQU5HRUQ6ICdBRERSRVNTX05PVF9DSEFOR0VEJyxcbiAgU0VSSUFMX05VTUJFUl9OT1RfQ0hBTkdFRDogJ1NFUklBTF9OVU1CRVJfTk9UX0NIQU5HRUQnLFxuICBERVZJQ0VfU0VSVklDRV9FUlJPUjogJ0RFVklDRV9TRVJWSUNFX0VSUk9SJ1xufTtcbnZhciBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgTm90Rm91bmQ6IDQwNFxufTtcbnZhciBEZXZpY2VBZGRyZXNzU2VydmljZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIERldmljZUFkZHJlc3NTZXJ2aWNlKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0KCkodGhpcywgRGV2aWNlQWRkcmVzc1NlcnZpY2UpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQoKShEZXZpY2VBZGRyZXNzU2VydmljZSwgW3tcbiAgICBrZXk6IFwiUmV0cmlldmVTZXJ2aWNlXCIsXG4gICAgLy8gUmV0cmlldmVTZXJ2aWNlKHNlcmlhbE51bWJlciwgYXBpS2V5ID0gJ3NwaS1zYW1wbGUtcG9zMScsIGFjcXVpcmVyQ29kZSwgdXNlU2VjdXJlV2ViU29ja2V0cywgaXNUZXN0TW9kZSlcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9SZXRyaWV2ZVNlcnZpY2UgPSBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2FzeW5jVG9HZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICBfYmFiZWxfcnVudGltZV9yZWdlbmVyYXRvcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoc2VyaWFsTnVtYmVyKSB7XG4gICAgICAgIHZhciBhcGlLZXksXG4gICAgICAgICAgICBhY3F1aXJlckNvZGUsXG4gICAgICAgICAgICBpc1NlY3VyZUNvbm5lY3Rpb24sXG4gICAgICAgICAgICBpc1Rlc3RNb2RlLFxuICAgICAgICAgICAgQ09OTkVDVElPTl9USU1FT1VULFxuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIGRldmljZUFkZHJlc3NVcmksXG4gICAgICAgICAgICBfYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgcmV0dXJuIF9iYWJlbF9ydW50aW1lX3JlZ2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdC5hLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgYXBpS2V5ID0gX2FyZ3MubGVuZ3RoID4gMSAmJiBfYXJnc1sxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3NbMV0gOiAnc3BpLXNhbXBsZS1wb3MxJztcbiAgICAgICAgICAgICAgICBhY3F1aXJlckNvZGUgPSBfYXJncy5sZW5ndGggPiAyID8gX2FyZ3NbMl0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgaXNTZWN1cmVDb25uZWN0aW9uID0gX2FyZ3MubGVuZ3RoID4gMyA/IF9hcmdzWzNdIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGlzVGVzdE1vZGUgPSBfYXJncy5sZW5ndGggPiA0ID8gX2FyZ3NbNF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgQ09OTkVDVElPTl9USU1FT1VUID0gODAwMDtcbiAgICAgICAgICAgICAgICBwYXRoID0gaXNTZWN1cmVDb25uZWN0aW9uID8gJ2ZxZG4nIDogJ2lwJztcbiAgICAgICAgICAgICAgICBkZXZpY2VBZGRyZXNzVXJpID0gaXNUZXN0TW9kZSA/IFwiaHR0cHM6Ly9kZXZpY2UtYWRkcmVzcy1hcGktc2IuXCIuY29uY2F0KGFjcXVpcmVyQ29kZSwgXCIubXNwLmFzc2VtYmx5cGF5bWVudHMuY29tL3YxL1wiKS5jb25jYXQoc2VyaWFsTnVtYmVyLCBcIi9cIikuY29uY2F0KHBhdGgpIDogXCJodHRwczovL2RldmljZS1hZGRyZXNzLWFwaS5cIi5jb25jYXQoYWNxdWlyZXJDb2RlLCBcIi5tc3AuYXNzZW1ibHlwYXltZW50cy5jb20vdjEvXCIpLmNvbmNhdChzZXJpYWxOdW1iZXIsIFwiL1wiKS5jb25jYXQocGF0aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiLCBQcm9taXNlLnJhY2UoW2ZldGNoKGRldmljZUFkZHJlc3NVcmksIHtcbiAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdBU00tTVNQLURFVklDRS1BRERSRVNTLUFQSS1LRVknOiBhcGlLZXlcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSwgbmV3IFByb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBFcnJvcignVGltZW91dCB3aGlsZSB0cnlpbmcgdG8gcmV0cmlldmUgSVAgYWRkcmVzcycpKTtcbiAgICAgICAgICAgICAgICAgIH0sIENPTk5FQ1RJT05fVElNRU9VVCk7XG4gICAgICAgICAgICAgICAgfSldKSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICBjYXNlIFwiZW5kXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBSZXRyaWV2ZVNlcnZpY2UoX3gpIHtcbiAgICAgICAgcmV0dXJuIF9SZXRyaWV2ZVNlcnZpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJldHJpZXZlU2VydmljZTtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBEZXZpY2VBZGRyZXNzU2VydmljZTtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvU2V0dGxlbWVudC5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1NldHRsZW1lbnQuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBTZXR0bGVSZXF1ZXN0LCBTZXR0bGVtZW50LCBTY2hlbWVTZXR0bGVtZW50RW50cnksIFNldHRsZW1lbnRFbnF1aXJ5UmVxdWVzdCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTZXR0bGVSZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU2V0dGxlUmVxdWVzdDsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU2V0dGxlbWVudFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNldHRsZW1lbnQ7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNjaGVtZVNldHRsZW1lbnRFbnRyeVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNjaGVtZVNldHRsZW1lbnRFbnRyeTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU2V0dGxlbWVudEVucXVpcnlSZXF1ZXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU2V0dGxlbWVudEVucXVpcnlSZXF1ZXN0OyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vTWVzc2FnZXMgKi8gXCIuL3NyYy9NZXNzYWdlcy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwaU1vZGVscyAqLyBcIi4vc3JjL1NwaU1vZGVscy5qc1wiKTtcblxuXG5cblxudmFyIFNldHRsZVJlcXVlc3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZXR0bGVSZXF1ZXN0KGlkKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBTZXR0bGVSZXF1ZXN0KTtcblxuICAgIHRoaXMuSWQgPSBpZDtcbiAgICB0aGlzLkNvbmZpZyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJTcGlDb25maWdcIl0oKTtcbiAgICB0aGlzLk9wdGlvbnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFNldHRsZVJlcXVlc3QsIFt7XG4gICAga2V5OiBcIlRvTWVzc2FnZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUb01lc3NhZ2UoKSB7XG4gICAgICB2YXIgZGF0YSA9IHt9O1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ29uZmlnLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyA9IGZhbHNlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFNpZ25hdHVyZUZsb3dPbkVmdHBvcyA9IGZhbHNlO1xuICAgICAgdGhpcy5Db25maWcuQWRkUmVjZWlwdENvbmZpZyhkYXRhKTtcbiAgICAgIHRoaXMuT3B0aW9ucy5BZGRPcHRpb25zKGRhdGEpO1xuICAgICAgcmV0dXJuIG5ldyBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIk1lc3NhZ2VcIl0odGhpcy5JZCwgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJFdmVudHNcIl0uU2V0dGxlUmVxdWVzdCwgZGF0YSwgdHJ1ZSk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNldHRsZVJlcXVlc3Q7XG59KCk7XG52YXIgU2V0dGxlbWVudCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNldHRsZW1lbnQobSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2V0dGxlbWVudCk7XG5cbiAgICB0aGlzLlJlcXVlc3RJZCA9IG0uSWQ7XG4gICAgdGhpcy5fbSA9IG07XG4gICAgdGhpcy5TdWNjZXNzID0gbS5HZXRTdWNjZXNzU3RhdGUoKSA9PSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlN1Y2Nlc3NTdGF0ZVwiXS5TdWNjZXNzO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShTZXR0bGVtZW50LCBbe1xuICAgIGtleTogXCJHZXRTZXR0bGVCeUFjcXVpcmVyQ291bnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0U2V0dGxlQnlBY3F1aXJlckNvdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5hY2N1bXVsYXRlZF9zZXR0bGVfYnlfYWNxdWlyZXJfY291bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFNldHRsZUJ5QWNxdWlyZXJWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTZXR0bGVCeUFjcXVpcmVyVmFsdWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLmFjY3VtdWxhdGVkX3NldHRsZV9ieV9hY3F1aXJlcl92YWx1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0VG90YWxDb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRUb3RhbENvdW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5hY2N1bXVsYXRlZF90b3RhbF9jb3VudDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0VG90YWxWYWx1ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRUb3RhbFZhbHVlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX20uRGF0YS5hY2N1bXVsYXRlZF90b3RhbF92YWx1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UGVyaW9kU3RhcnRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFBlcmlvZFN0YXJ0VGltZSgpIHtcbiAgICAgIHZhciB0aW1lU3RyID0gdGhpcy5fbS5EYXRhLnNldHRsZW1lbnRfcGVyaW9kX3N0YXJ0X3RpbWU7IC8vIFwiMDU6MDBcIlxuXG4gICAgICB2YXIgZGF0ZVN0ciA9IHRoaXMuX20uRGF0YS5zZXR0bGVtZW50X3BlcmlvZF9zdGFydF9kYXRlOyAvLyBcIjA1T2N0MTdcIlxuXG4gICAgICByZXR1cm4gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdLlBhcnNlQmFua0RhdGVUaW1lU3RyKGRhdGVTdHIsIHRpbWVTdHIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRQZXJpb2RFbmRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFBlcmlvZEVuZFRpbWUoKSB7XG4gICAgICB2YXIgdGltZVN0ciA9IHRoaXMuX20uRGF0YS5zZXR0bGVtZW50X3BlcmlvZF9lbmRfdGltZTsgLy8gXCIwNTowMFwiXG5cbiAgICAgIHZhciBkYXRlU3RyID0gdGhpcy5fbS5EYXRhLnNldHRsZW1lbnRfcGVyaW9kX2VuZF9kYXRlOyAvLyBcIjA1T2N0MTdcIlxuXG4gICAgICByZXR1cm4gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdLlBhcnNlQmFua0RhdGVUaW1lU3RyKGRhdGVTdHIsIHRpbWVTdHIpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRUcmlnZ2VyZWRUaW1lXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFRyaWdnZXJlZFRpbWUoKSB7XG4gICAgICB2YXIgdGltZVN0ciA9IHRoaXMuX20uRGF0YS5zZXR0bGVtZW50X3RyaWdnZXJlZF90aW1lOyAvLyBcIjA1OjAwOjQ1XCJcblxuICAgICAgdmFyIGRhdGVTdHIgPSB0aGlzLl9tLkRhdGEuc2V0dGxlbWVudF90cmlnZ2VyZWRfZGF0ZTsgLy8gXCIwNU9jdDE3XCJcblxuICAgICAgcmV0dXJuIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXS5QYXJzZUJhbmtEYXRlVGltZVN0cihkYXRlU3RyLCB0aW1lU3RyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0UmVzcG9uc2VUZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlc3BvbnNlVGV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuaG9zdF9yZXNwb25zZV90ZXh0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRSZWNlaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFJlY2VpcHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fbS5EYXRhLm1lcmNoYW50X3JlY2VpcHQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRyYW5zYWN0aW9uUmFuZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VHJhbnNhY3Rpb25SYW5nZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEudHJhbnNhY3Rpb25fcmFuZ2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdldFRlcm1pbmFsSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VGVybWluYWxJZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEudGVybWluYWxfaWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIldhc01lcmNoYW50UmVjZWlwdFByaW50ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gV2FzTWVyY2hhbnRSZWNlaXB0UHJpbnRlZCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEubWVyY2hhbnRfcmVjZWlwdF9wcmludGVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRTY2hlbWVTZXR0bGVtZW50RW50cmllc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRTY2hlbWVTZXR0bGVtZW50RW50cmllcygpIHtcbiAgICAgIHZhciBzY2hlbWVzID0gdGhpcy5fbS5EYXRhLnNjaGVtZXM7XG4gICAgICBpZiAoIXNjaGVtZXMpIHJldHVybiBbXTtcbiAgICAgIHJldHVybiBzY2hlbWVzLm1hcChmdW5jdGlvbiAoc2NoZW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2NoZW1lU2V0dGxlbWVudEVudHJ5KHNjaGVtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2V0dGxlbWVudDtcbn0oKTtcbnZhciBTY2hlbWVTZXR0bGVtZW50RW50cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvLyBTY2hlbWVTZXR0bGVtZW50RW50cnkoc3RyaW5nIHNjaGVtZU5hbWUsIGJvb2wgc2V0dGxlQnlBY3F1aXJlciwgaW50IHRvdGFsQ291bnQsIGludCB0b3RhbFZhbHVlKVxuICAvLyBTY2hlbWVTZXR0bGVtZW50RW50cnkoT2JqZWN0IHNjaGVtZU9iailcbiAgZnVuY3Rpb24gU2NoZW1lU2V0dGxlbWVudEVudHJ5KCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2NoZW1lU2V0dGxlbWVudEVudHJ5KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuU2NoZW1lTmFtZSA9IGFyZ3NbMF0uc2NoZW1lX25hbWU7XG4gICAgICB0aGlzLlNldHRsZUJ5QWNxdWlyZXIgPSBhcmdzWzBdLnNldHRsZV9ieV9hY3F1aXJlci50b0xvd2VyQ2FzZSgpID09IFwieWVzXCI7XG4gICAgICB0aGlzLlRvdGFsVmFsdWUgPSBwYXJzZUludChhcmdzWzBdLnRvdGFsX3ZhbHVlLCAxMCk7XG4gICAgICB0aGlzLlRvdGFsQ291bnQgPSBwYXJzZUludChhcmdzWzBdLnRvdGFsX2NvdW50LCAxMCk7XG4gICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gNCkge1xuICAgICAgdGhpcy5TY2hlbWVOYW1lID0gYXJnc1swXTtcbiAgICAgIHRoaXMuU2V0dGxlQnlBY3F1aXJlciA9IGFyZ3NbMV07XG4gICAgICB0aGlzLlRvdGFsQ291bnQgPSBhcmdzWzJdO1xuICAgICAgdGhpcy5Ub3RhbFZhbHVlID0gYXJnc1szXTtcbiAgICB9XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFNjaGVtZVNldHRsZW1lbnRFbnRyeSwgW3tcbiAgICBrZXk6IFwiVG9TdHJpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gXCJTY2hlbWVOYW1lOiBcIi5jb25jYXQodGhpcy5TY2hlbWVOYW1lLCBcIiwgU2V0dGxlQnlBY3F1aXJlcjogXCIpLmNvbmNhdCh0aGlzLlNldHRsZUJ5QWNxdWlyZXIsIFwiLCBUb3RhbENvdW50OiBcIikuY29uY2F0KHRoaXMuVG90YWxDb3VudCwgXCIsIFRvdGFsVmFsdWU6IFwiKS5jb25jYXQodGhpcy5Ub3RhbFZhbHVlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2NoZW1lU2V0dGxlbWVudEVudHJ5O1xufSgpO1xudmFyIFNldHRsZW1lbnRFbnF1aXJ5UmVxdWVzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNldHRsZW1lbnRFbnF1aXJ5UmVxdWVzdChpZCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgU2V0dGxlbWVudEVucXVpcnlSZXF1ZXN0KTtcblxuICAgIHRoaXMuSWQgPSBpZDtcbiAgICB0aGlzLkNvbmZpZyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJTcGlDb25maWdcIl0oKTtcbiAgICB0aGlzLk9wdGlvbnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKFNldHRsZW1lbnRFbnF1aXJ5UmVxdWVzdCwgW3tcbiAgICBrZXk6IFwiVG9NZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvTWVzc2FnZSgpIHtcbiAgICAgIHZhciBkYXRhID0ge307XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkUHJpbnRNZXJjaGFudENvcHkgPSB0cnVlO1xuICAgICAgdGhpcy5Db25maWcuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gZmFsc2U7XG4gICAgICB0aGlzLkNvbmZpZy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gZmFsc2U7XG4gICAgICB0aGlzLkNvbmZpZy5BZGRSZWNlaXB0Q29uZmlnKGRhdGEpO1xuICAgICAgdGhpcy5PcHRpb25zLkFkZE9wdGlvbnMoZGF0YSk7XG4gICAgICByZXR1cm4gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiTWVzc2FnZVwiXSh0aGlzLklkLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5TZXR0bGVtZW50RW5xdWlyeVJlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZXR0bGVtZW50RW5xdWlyeVJlcXVlc3Q7XG59KCk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyBcIi4vc3JjL1NwaS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvU3BpLmpzICoqKiFcbiAgXFwqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBTcGksIFNQSV9WRVJTSU9OICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNwaVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNwaTsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU1BJX1ZFUlNJT05cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTUElfVkVSU0lPTjsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfcmVnZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yICovIFwiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfcmVnZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9yZWdlbmVyYXRvcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2FzeW5jVG9HZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvciAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvci5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2FzeW5jVG9HZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2FzeW5jVG9HZW5lcmF0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01lc3NhZ2VzICovIFwiLi9zcmMvTWVzc2FnZXMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TcGlNb2RlbHMgKi8gXCIuL3NyYy9TcGlNb2RlbHMuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9SZXF1ZXN0SWRIZWxwZXIgKi8gXCIuL3NyYy9SZXF1ZXN0SWRIZWxwZXIuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BhaXJpbmdIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUGFpcmluZ0hlbHBlciAqLyBcIi4vc3JjL1BhaXJpbmdIZWxwZXIuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX0Nvbm5lY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ29ubmVjdGlvbiAqLyBcIi4vc3JjL0Nvbm5lY3Rpb24uanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1NwaVBheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU3BpUGF5QXRUYWJsZSAqLyBcIi4vc3JjL1NwaVBheUF0VGFibGUuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEwX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1BheUF0VGFibGUgKi8gXCIuL3NyYy9QYXlBdFRhYmxlLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TcGlQcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9TcGlQcmVhdXRoICovIFwiLi9zcmMvU3BpUHJlYXV0aC5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfQ2FzaG91dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vQ2FzaG91dCAqLyBcIi4vc3JjL0Nhc2hvdXQuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1NldHRsZW1lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NldHRsZW1lbnQgKi8gXCIuL3NyYy9TZXR0bGVtZW50LmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QYWlyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QYWlyaW5nICovIFwiLi9zcmMvUGFpcmluZy5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUG9zSW5mb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUG9zSW5mbyAqLyBcIi4vc3JjL1Bvc0luZm8uanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1B1cmNoYXNlSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QdXJjaGFzZUhlbHBlciAqLyBcIi4vc3JjL1B1cmNoYXNlSGVscGVyLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9LZXlSb2xsaW5nSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9LZXlSb2xsaW5nSGVscGVyICovIFwiLi9zcmMvS2V5Um9sbGluZ0hlbHBlci5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUGluZ0hlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUGluZ0hlbHBlciAqLyBcIi4vc3JjL1BpbmdIZWxwZXIuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9QdXJjaGFzZSAqLyBcIi4vc3JjL1B1cmNoYXNlLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TZXJ2aWNlX0RldmljZVNlcnZpY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIwX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NlcnZpY2UvRGV2aWNlU2VydmljZSAqLyBcIi4vc3JjL1NlcnZpY2UvRGV2aWNlU2VydmljZS5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfUHJpbnRpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIxX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1ByaW50aW5nICovIFwiLi9zcmMvUHJpbnRpbmcuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1Rlcm1pbmFsU3RhdHVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9UZXJtaW5hbFN0YXR1cyAqLyBcIi4vc3JjL1Rlcm1pbmFsU3RhdHVzLmpzXCIpO1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBTUElfVkVSU0lPTiA9ICcyLjYuMCc7XG5cbnZhciBTcGkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCgpKFNwaSwgW3tcbiAgICBrZXk6IFwiQ3VycmVudFN0YXR1c1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRTdGF0dXM7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTdGF0dXMgPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY3VycmVudFN0YXR1cyA9IHZhbHVlO1xuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1N0YXR1c0NoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdmFsdWVcbiAgICAgIH0pKTtcbiAgICB9XG4gIH1dKTtcblxuICBmdW5jdGlvbiBTcGkocG9zSWQsIHNlcmlhbE51bWJlciwgZWZ0cG9zQWRkcmVzcywgc2VjcmV0cykge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0KCkodGhpcywgU3BpKTtcblxuICAgIHRoaXMuX3Bvc0lkID0gcG9zSWQ7XG4gICAgdGhpcy5fc2VyaWFsTnVtYmVyID0gc2VyaWFsTnVtYmVyO1xuICAgIHRoaXMuX3NlY3JldHMgPSBzZWNyZXRzO1xuICAgIHRoaXMuX2ZvcmNlU2VjdXJlV2ViU29ja2V0cyA9IGZhbHNlO1xuICAgIHRoaXMuX2VmdHBvc0FkZHJlc3MgPSBcIndzOi8vXCIgKyBlZnRwb3NBZGRyZXNzO1xuICAgIHRoaXMuX2xvZyA9IGNvbnNvbGU7XG4gICAgdGhpcy5Db25maWcgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpQ29uZmlnXCJdKCk7XG4gICAgdGhpcy5fY29ubiA9IG5ldyBfQ29ubmVjdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fW1wiQ29ubmVjdGlvblwiXSgpO1xuICAgIHRoaXMuQ3VycmVudERldmljZVN0YXR1cyA9IG51bGw7XG4gICAgdGhpcy5fZGV2aWNlQXBpS2V5ID0gbnVsbDtcbiAgICB0aGlzLl9hY3F1aXJlckNvZGUgPSBudWxsO1xuICAgIHRoaXMuX2luVGVzdE1vZGUgPSBmYWxzZTtcbiAgICB0aGlzLl9hdXRvQWRkcmVzc1Jlc29sdXRpb25FbmFibGVkID0gZmFsc2U7IC8vIE91ciBzdGFtcCBmb3Igc2lnbmluZyBvdXRnb2luZyBtZXNzYWdlc1xuXG4gICAgdGhpcy5fc3BpTWVzc2FnZVN0YW1wID0gbmV3IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiTWVzc2FnZVN0YW1wXCJdKHRoaXMuX3Bvc0lkLCB0aGlzLl9zZWNyZXRzLCAwKTtcbiAgICB0aGlzLl9wb3NWZW5kb3JJZCA9IG51bGw7XG4gICAgdGhpcy5fcG9zVmVyc2lvbiA9IG51bGw7XG4gICAgdGhpcy5faGFzU2V0SW5mbyA9IG51bGw7IC8vIFdlIHdpbGwgbWFpbnRhaW4gc29tZSBzdGF0ZVxuXG4gICAgdGhpcy5fbW9zdFJlY2VudFBpbmdTZW50ID0gbnVsbDtcbiAgICB0aGlzLl9tb3N0UmVjZW50UG9uZ1JlY2VpdmVkID0gbnVsbDtcbiAgICB0aGlzLl9taXNzZWRQb25nc0NvdW50ID0gMDtcbiAgICB0aGlzLl9yZXRyaWVzU2luY2VMYXN0RGV2aWNlQWRkcmVzc1Jlc29sdXRpb24gPSAwO1xuICAgIHRoaXMuX21vc3RSZWNlbnRMb2dpblJlc3BvbnNlID0gbnVsbDtcbiAgICB0aGlzLl9wb25nVGltZW91dCA9IDUwMDA7XG4gICAgdGhpcy5fcGluZ0ZyZXF1ZW5jeSA9IDE4MDAwO1xuICAgIHRoaXMuX3JlYWR5VG9UcmFuc2FjdCA9IG51bGw7XG4gICAgdGhpcy5fcGVyaW9kaWNQaW5nVGhyZWFkID0gbnVsbDtcbiAgICB0aGlzLl90eE1vbml0b3JDaGVja0ZyZXF1ZW5jeSA9IDEwMDA7XG4gICAgdGhpcy5fY2hlY2tPblR4RnJlcXVlbmN5ID0gMjAwMDA7XG4gICAgdGhpcy5fbWF4V2FpdEZvckNhbmNlbFR4ID0gMTAwMDA7XG4gICAgdGhpcy5fc2xlZXBCZWZvcmVSZWNvbm5lY3RNcyA9IDMwMDA7XG4gICAgdGhpcy5fbWlzc2VkUG9uZ3NUb0Rpc2Nvbm5lY3QgPSAyO1xuICAgIHRoaXMuX3JldHJpZXNCZWZvcmVSZXNvbHZpbmdEZXZpY2VBZGRyZXNzID0gMztcbiAgICB0aGlzLl9yZXRyaWVzU2luY2VMYXN0UGFpcmluZyA9IDA7XG4gICAgdGhpcy5fcmV0cmllc0JlZm9yZVBhaXJpbmcgPSAzO1xuICAgIHRoaXMuX3JlZ2V4SXRlbXNGb3JFZnRwb3NBZGRyZXNzID0gL15bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31cXC5bMC05XXsxLDN9JC87XG4gICAgdGhpcy5fcmVnZXhJdGVtc0ZvckZxZG5FZnRwb3NBZGRyZXNzID0gL15bYS16QS1aMC05XFwuLV0rJC87XG4gICAgdGhpcy5fcmVnZXhJdGVtc0ZvclBvc0lkID0gL15bYS16QS1aMC05XSokLztcbiAgICB0aGlzLkN1cnJlbnRGbG93ID0gbnVsbDtcbiAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlID0gbnVsbDtcbiAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZSA9IG51bGw7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCgpKFNwaSwgW3tcbiAgICBrZXk6IFwiRW5hYmxlUGF5QXRUYWJsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBFbmFibGVQYXlBdFRhYmxlKCkge1xuICAgICAgdGhpcy5fc3BpUGF0ID0gbmV3IF9TcGlQYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV85X19bXCJTcGlQYXlBdFRhYmxlXCJdKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXMuX3NwaVBhdDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiRGlzYWJsZVBheUF0VGFibGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gRGlzYWJsZVBheUF0VGFibGUoKSB7XG4gICAgICB0aGlzLl9zcGlQYXQgPSBuZXcgX1NwaVBheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfX1tcIlNwaVBheUF0VGFibGVcIl0odGhpcyk7XG4gICAgICB0aGlzLl9zcGlQYXQuQ29uZmlnLlBheUF0VGFibGVFbmFibGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcy5fc3BpUGF0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJFbmFibGVQcmVhdXRoXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEVuYWJsZVByZWF1dGgoKSB7XG4gICAgICB0aGlzLl9zcGlQcmVhdXRoID0gbmV3IF9TcGlQcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fW1wiU3BpUHJlYXV0aFwiXSh0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzLl9zcGlQcmVhdXRoO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJTdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTdGFydCgpIHtcbiAgICAgIGlmICghdGhpcy5fcG9zVmVuZG9ySWQgfHwgIXRoaXMuX3Bvc1ZlcnNpb24pIHtcbiAgICAgICAgLy8gUE9TIGluZm9ybWF0aW9uIGlzIG5vdyByZXF1aXJlZCB0byBiZSBzZXRcbiAgICAgICAgdGhpcy5fbG9nLndhcm4oXCJNaXNzaW5nIFBPUyB2ZW5kb3IgSUQgYW5kIHZlcnNpb24uIHBvc1ZlbmRvcklkIGFuZCBwb3NWZXJzaW9uIGFyZSByZXF1aXJlZCBiZWZvcmUgc3RhcnRpbmdcIik7XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWlzc2luZyBQT1MgdmVuZG9yIElEIGFuZCB2ZXJzaW9uLiBwb3NWZW5kb3JJZCBhbmQgcG9zVmVyc2lvbiBhcmUgcmVxdWlyZWQgYmVmb3JlIHN0YXJ0aW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzUG9zSWRWYWxpZCh0aGlzLl9wb3NJZCkpIHtcbiAgICAgICAgLy8gY29udGludWUsIGFzIHRoZXkgY2FuIHNldCB0aGUgcG9zSWQgbGF0ZXIgb25cbiAgICAgICAgdGhpcy5fcG9zSWQgPSBcIlwiO1xuXG4gICAgICAgIHRoaXMuX2xvZy53YXJuKFwiSW52YWxpZCBwYXJhbWV0ZXIsIHBsZWFzZSBjb3JyZWN0IHRoZW0gYmVmb3JlIHBhaXJpbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5faXNFZnRwb3NBZGRyZXNzVmFsaWQodGhpcy5fZWZ0cG9zQWRkcmVzcykpIHtcbiAgICAgICAgLy8gY29udGludWUsIGFzIHRoZXkgY2FuIHNldCB0aGUgZWZ0cG9zQWRkcmVzcyBsYXRlciBvblxuICAgICAgICB0aGlzLl9lZnRwb3NBZGRyZXNzID0gXCJcIjtcblxuICAgICAgICB0aGlzLl9sb2cud2FybihcIkludmFsaWQgcGFyYW1ldGVyLCBwbGVhc2UgY29ycmVjdCB0aGVtIGJlZm9yZSBwYWlyaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZXNldENvbm4oKTtcblxuICAgICAgdGhpcy5fc3RhcnRUcmFuc2FjdGlvbk1vbml0b3JpbmdUaHJlYWQoKTtcblxuICAgICAgdGhpcy5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uSWRsZTtcblxuICAgICAgaWYgKHRoaXMuX3NlY3JldHMgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlN0YXJ0aW5nIGluIFBhaXJlZCBTdGF0ZVwiKTtcblxuICAgICAgICB0aGlzLl9jdXJyZW50U3RhdHVzID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlBhaXJlZENvbm5lY3Rpbmc7XG5cbiAgICAgICAgdGhpcy5fY29ubi5Db25uZWN0KCk7IC8vIFRoaXMgaXMgbm9uLWJsb2NraW5nXG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiU3RhcnRpbmcgaW4gVW5wYWlyZWQgU3RhdGVcIik7XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFN0YXR1cyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZDtcbiAgICAgIH1cbiAgICB9IC8vLyA8c3VtbWFyeT5cbiAgICAvLy8gU2V0IHRoZSBhY3F1aXJlciBjb2RlIG9mIHlvdXIgYmFuaywgcGxlYXNlIGNvbnRhY3QgQXNzZW1ibHkncyBJbnRlZ3JhdGlvbiBFbmdpbmVlcnMgZm9yIGFjcXVpcmVyIGNvZGUuXG4gICAgLy8vIDwvc3VtbWFyeT5cblxuICB9LCB7XG4gICAga2V5OiBcIlNldEFjcXVpcmVyQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTZXRBY3F1aXJlckNvZGUoYWNxdWlyZXJDb2RlKSB7XG4gICAgICB0aGlzLl9hY3F1aXJlckNvZGUgPSBhY3F1aXJlckNvZGU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vLyA8c3VtbWFyeT5cbiAgICAvLy8gU2V0IHRoZSBhcGkga2V5IHVzZWQgZm9yIGF1dG8gYWRkcmVzcyBkaXNjb3ZlcnkgZmVhdHVyZVxuICAgIC8vLyA8L3N1bW1hcnk+XG4gICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIlNldERldmljZUFwaUtleVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTZXREZXZpY2VBcGlLZXkoZGV2aWNlQXBpS2V5KSB7XG4gICAgICB0aGlzLl9kZXZpY2VBcGlLZXkgPSBkZXZpY2VBcGlLZXk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vLyA8c3VtbWFyeT5cbiAgICAvLy8gQWxsb3dzIHlvdSB0byBzZXQgdGhlIHNlcmlhbCBudW1iZXIgb2YgdGhlIEVmdHBvc1xuICAgIC8vLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJTZXRTZXJpYWxOdW1iZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2V0U2VyaWFsTnVtYmVyKHNlcmlhbE51bWJlcikge1xuICAgICAgaWYgKHRoaXMuQ3VycmVudFN0YXR1cyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHJldHVybiBmYWxzZTtcbiAgICAgIHZhciB3YXMgPSB0aGlzLl9zZXJpYWxOdW1iZXI7XG4gICAgICB0aGlzLl9zZXJpYWxOdW1iZXIgPSBzZXJpYWxOdW1iZXI7XG5cbiAgICAgIGlmICh0aGlzLkhhc1NlcmlhbE51bWJlckNoYW5nZWQod2FzKSkge1xuICAgICAgICB0aGlzLl9hdXRvUmVzb2x2ZUVmdHBvc0FkZHJlc3MoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXMgPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuQ3VycmVudERldmljZVN0YXR1cyA9IG5ldyBfU2VydmljZV9EZXZpY2VTZXJ2aWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fW1wiRGV2aWNlQWRkcmVzc1N0YXR1c1wiXSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzLkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGUgPSBfU2VydmljZV9EZXZpY2VTZXJ2aWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fW1wiRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZVwiXS5TRVJJQUxfTlVNQkVSX05PVF9DSEFOR0VEO1xuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnRGV2aWNlQWRkcmVzc0NoYW5nZWQnLCB7XG4gICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXNcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vLyA8c3VtbWFyeT5cbiAgICAvLy8gQWxsb3dzIHlvdSB0byBzZXQgdGhlIGF1dG8gYWRkcmVzcyBkaXNjb3ZlcnkgZmVhdHVyZS4gXG4gICAgLy8vIDwvc3VtbWFyeT5cbiAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiU2V0QXV0b0FkZHJlc3NSZXNvbHV0aW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNldEF1dG9BZGRyZXNzUmVzb2x1dGlvbihhdXRvQWRkcmVzc1Jlc29sdXRpb25FbmFibGUpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlBhaXJlZENvbm5lY3RlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgdmFyIHdhcyA9IHRoaXMuX2F1dG9BZGRyZXNzUmVzb2x1dGlvbkVuYWJsZWQ7XG4gICAgICB0aGlzLl9hdXRvQWRkcmVzc1Jlc29sdXRpb25FbmFibGVkID0gYXV0b0FkZHJlc3NSZXNvbHV0aW9uRW5hYmxlO1xuXG4gICAgICBpZiAoYXV0b0FkZHJlc3NSZXNvbHV0aW9uRW5hYmxlICYmICF3YXMpIHtcbiAgICAgICAgLy8gd2UncmUgdHVybmluZyBpdCBvblxuICAgICAgICB0aGlzLl9hdXRvUmVzb2x2ZUVmdHBvc0FkZHJlc3MoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSAvLy8gPHN1bW1hcnk+XG4gICAgLy8vIENhbGwgdGhpcyBtZXRob2QgdG8gc2V0IHRoZSBjbGllbnQgbGlicmFyeSB0ZXN0IG1vZGUuXG4gICAgLy8vIFNldCBpdCB0byB0cnVlIG9ubHkgd2hpbGUgeW91IGFyZSBkZXZlbG9waW5nIHRoZSBpbnRlZ3JhdGlvbi4gXG4gICAgLy8vIEl0IGRlZmF1bHRzIHRvIGZhbHNlLiBGb3IgYSByZWFsIG1lcmNoYW50LCBhbHdheXMgbGVhdmUgaXQgc2V0IHRvIGZhbHNlLiBcbiAgICAvLy8gPC9zdW1tYXJ5PlxuICAgIC8vLyA8cGFyYW0gbmFtZT1cInRlc3RNb2RlXCI+PC9wYXJhbT5cbiAgICAvLy8gPHJldHVybnM+PC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiU2V0VGVzdE1vZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2V0VGVzdE1vZGUodGVzdE1vZGUpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgJiYgdGhpcy5DdXJyZW50U3RhdHVzICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKHRlc3RNb2RlID09IHRoaXMuX2luVGVzdE1vZGUpIHJldHVybiB0cnVlOyAvLyB3ZSdyZSBjaGFuZ2luZyBtb2RlXG5cbiAgICAgIHRoaXMuX2luVGVzdE1vZGUgPSB0ZXN0TW9kZTtcblxuICAgICAgdGhpcy5fYXV0b1Jlc29sdmVFZnRwb3NBZGRyZXNzKCk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8vIDxzdW1tYXJ5PlxuICAgIC8vLyBTZXQgdGhlIGNsaWVudCBsaWJyYXJ5IHRvIHVzZSBzZWN1cmUgd2ViIHNvY2tldHMgVExTICh3c3MgcHJvdG9jb2wpXG4gICAgLy8vIDwvc3VtbWFyeT5cbiAgICAvLy8gPHBhcmFtIG5hbWU9XCJpc1NlY3VyZVwiPjwvcGFyYW0+XG4gICAgLy8vIDxyZXR1cm5zPjwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIlNldFNlY3VyZVdlYlNvY2tldHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2V0U2VjdXJlV2ViU29ja2V0cyh1c2VTZWN1cmVXZWJTb2NrZXRzKSB7XG4gICAgICB0aGlzLl9mb3JjZVNlY3VyZVdlYlNvY2tldHMgPSB1c2VTZWN1cmVXZWJTb2NrZXRzO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gQWxsb3dzIHlvdSB0byBzZXQgdGhlIFBvc0lkIHdoaWNoIGlkZW50aWZpZXMgdGhpcyBpbnN0YW5jZSBvZiB5b3VyIFBPUy5cbiAgICAvLyBDYW4gb25seSBiZSBjYWxsZWQgaW4gdGhnZSBVbnBhaXJlZCBzdGF0ZS4gXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiU2V0UG9zSWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2V0UG9zSWQocG9zSWQpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSByZXR1cm4gZmFsc2U7XG4gICAgICB0aGlzLl9wb3NJZCA9IFwiXCI7IC8vIHJlc2V0IHBvc0lkIHRvIGdpdmUgbW9yZSBleHBsaWNpdCBmZWVkYmFja1xuXG4gICAgICBpZiAoIXRoaXMuX2lzUG9zSWRWYWxpZChwb3NJZCkpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJQb3MgSWQgc2V0IHRvIG51bGxcIik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9wb3NJZCA9IHBvc0lkO1xuICAgICAgdGhpcy5fc3BpTWVzc2FnZVN0YW1wLlBvc0lkID0gcG9zSWQ7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEFsbG93cyB5b3UgdG8gc2V0IHRoZSBQaW5QYWQgYWRkcmVzcy4gU29tZXRpbWVzIHRoZSBQaW5QYWQgbWlnaHQgY2hhbmdlIElQIGFkZHJlc3MgXG4gICAgLy8gKHdlIHJlY29tbWVuZCByZXNlcnZpbmcgc3RhdGljIElQcyBpZiBwb3NzaWJsZSkuXG4gICAgLy8gRWl0aGVyIHdheSB5b3UgbmVlZCB0byBhbGxvdyB5b3VyIFVzZXIgdG8gZW50ZXIgdGhlIElQIGFkZHJlc3Mgb2YgdGhlIFBpblBhZC5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJTZXRFZnRwb3NBZGRyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNldEVmdHBvc0FkZHJlc3MoYWRkcmVzcykge1xuICAgICAgaWYgKHRoaXMuQ3VycmVudFN0YXR1cyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uUGFpcmVkQ29ubmVjdGVkIHx8IHRoaXMuX2F1dG9BZGRyZXNzUmVzb2x1dGlvbkVuYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9lZnRwb3NBZGRyZXNzID0gXCJcIjsgLy8gcmVzZXQgZWZ0cG9zQWRkcmVzcyB0byBnaXZlIG1vcmUgZXhwbGljaXQgZmVlZGJhY2tcblxuICAgICAgaWYgKCF0aGlzLl9pc0VmdHBvc0FkZHJlc3NWYWxpZChhZGRyZXNzKSkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkVmdHBvcyBBZGRyZXNzIHNldCB0byBudWxsXCIpO1xuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWZ0cG9zQWRkcmVzcyA9IFwid3M6Ly9cIiArIGFkZHJlc3M7XG4gICAgICB0aGlzLl9jb25uLkFkZHJlc3MgPSB0aGlzLl9lZnRwb3NBZGRyZXNzO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlNldFBvc0luZm9cIixcblxuICAgIC8qKlxuICAgICAqIFNldHMgdmFsdWVzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFBPUyBzb2Z0d2FyZSB0byB0aGUgRUZUUE9TIHRlcm1pbmFsLlxuICAgICAqIE11c3QgYmUgc2V0IGJlZm9yZSBzdGFydGluZyFcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwb3NWZW5kb3JJZCBWZW5kb3IgaWRlbnRpZmllciBvZiB0aGUgUE9TIGl0c2VsZi5cbiAgICAgKiBAcGFyYW0gcG9zVmVyc2lvbiAgVmVyc2lvbiBzdHJpbmcgb2YgdGhlIFBPUyBpdHNlbGYuXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFNldFBvc0luZm8ocG9zVmVuZG9ySWQsIHBvc1ZlcnNpb24pIHtcbiAgICAgIHRoaXMuX3Bvc1ZlbmRvcklkID0gcG9zVmVuZG9ySWQ7XG4gICAgICB0aGlzLl9wb3NWZXJzaW9uID0gcG9zVmVyc2lvbjtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIENhbGwgdGhpcyBvbmUgd2hlbiBhIGZsb3cgaXMgZmluaXNoZWQgYW5kIHlvdSB3YW50IHRvIGdvIGJhY2sgdG8gaWRsZSBzdGF0ZS5cbiAgICAvLyBUeXBpY2FsbHkgd2hlbiB5b3VyIHVzZXIgY2xpY2tzIHRoZSBcIk9LXCIgYnVidHRvbiB0byBhY2tub3dsZGdlIHRoYXQgcGFpcmluZyBpc1xuICAgIC8vIGZpbmlzaGVkLCBvciB0aGF0IHRyYW5zYWN0aW9uIGlzIGZpbmlzaGVkLlxuICAgIC8vIFdoZW4gdHJ1ZSwgeW91IGNhbiBkaXNtaXNzIHRoZSBmbG93IHNjcmVlbiBhbmQgc2hvdyBiYWNrIHRoZSBpZGxlIHNjcmVlbi5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHJldHVybnM+dHJ1ZSBtZWFucyB3ZSBoYXZlIG1vdmVkIGJhY2sgdG8gdGhlIElkbGUgc3RhdGUuIGZhbHNlIG1lYW5zIGN1cnJlbnQgZmxvdyB3YXMgbm90IGZpbmlzaGVkIHlldC48L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJBY2tGbG93RW5kZWRBbmRCYWNrVG9JZGxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEFja0Zsb3dFbmRlZEFuZEJhY2tUb0lkbGUoKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGUpIHJldHVybiB0cnVlOyAvLyBhbHJlYWR5IGlkbGVcblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5QYWlyaW5nICYmIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuRmluaXNoZWQpIHtcbiAgICAgICAgdGhpcy5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uSWRsZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gJiYgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuRmluaXNoZWQpIHtcbiAgICAgICAgdGhpcy5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uSWRsZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIGVuZHJlZ2lvblxuICAgIC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoaXMgd2lsbCBjb25uZWN0IHRvIHRoZSBFZnRwb3MgYW5kIHN0YXJ0IHRoZSBwYWlyaW5nIHByb2Nlc3MuXG4gICAgLy8gT25seSBjYWxsIHRoaXMgaWYgeW91IGFyZSBpbiB0aGUgVW5wYWlyZWQgc3RhdGUuXG4gICAgLy8gU3Vic2NyaWJlIHRvIHRoZSBQYWlyaW5nRmxvd1N0YXRlQ2hhbmdlZCBldmVudCB0byBnZXQgdXBkYXRlcyBvbiB0aGUgcGFpcmluZyBwcm9jZXNzLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cmV0dXJucz5XaGV0aGVyIHBhaXJpbmcgaGFzIGluaXRpYXRlZCBvciBub3Q8L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJQYWlyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFBhaXIoKSB7XG4gICAgICB0aGlzLl9sb2cubG9nKFwiVHJ5aW5nIHRvIHBhaXIgLi4uLlwiKTtcblxuICAgICAgaWYgKHRoaXMuQ3VycmVudFN0YXR1cyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLndhcm4oXCJUcmllZCB0byBQYWlyLCBidXQgd2UncmUgYWxyZWFkeSBwYWlyZWQuIFN0b3AgcGFpcmluZy5cIik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2lzUG9zSWRWYWxpZCh0aGlzLl9wb3NJZCkgfHwgIXRoaXMuX2lzRWZ0cG9zQWRkcmVzc1ZhbGlkKHRoaXMuX2VmdHBvc0FkZHJlc3MpKSB7XG4gICAgICAgIHRoaXMuX2xvZy53YXJuKFwiSW52YWxpZCBQb3MgSWQgb3IgRWZ0cG9zIGFkZHJlc3MsIHN0b3AgcGFpcmluZy5cIik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLkN1cnJlbnRGbG93ID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5QYWlyaW5nO1xuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZSA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJQYWlyaW5nRmxvd1N0YXRlXCJdKHtcbiAgICAgICAgU3VjY2Vzc2Z1bDogZmFsc2UsXG4gICAgICAgIEZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgTWVzc2FnZTogXCJDb25uZWN0aW5nLi4uXCIsXG4gICAgICAgIEF3YWl0aW5nQ2hlY2tGcm9tRWZ0cG9zOiBmYWxzZSxcbiAgICAgICAgQXdhaXRpbmdDaGVja0Zyb21Qb3M6IGZhbHNlLFxuICAgICAgICBDb25maXJtYXRpb25Db2RlOiBcIlwiXG4gICAgICB9KTtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdQYWlyaW5nRmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlXG4gICAgICB9KSk7XG5cbiAgICAgIHRoaXMuX2Nvbm4uQ29ubmVjdCgpOyAvLyBOb24tQmxvY2tpbmdcblxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIENhbGwgdGhpcyB3aGVuIHlvdXIgdXNlciBjbGlja3MgeWVzIHRvIGNvbmZpcm0gdGhlIHBhaXJpbmcgY29kZSBvbiB5b3VyIFxuICAgIC8vIHNjcmVlbiBtYXRjaGVzIHRoZSBvbmUgb24gdGhlIEVmdHBvcy5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJQYWlyaW5nQ29uZmlybUNvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gUGFpcmluZ0NvbmZpcm1Db2RlKCkge1xuICAgICAgaWYgKCF0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tUG9zKSB7XG4gICAgICAgIC8vIFdlIHdlcmVuJ3QgZXhwZWN0aW5nIHRoaXNcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tUG9zID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tRWZ0cG9zKSB7XG4gICAgICAgIC8vIEJ1dCB3ZSBhcmUgc3RpbGwgd2FpdGluZyBmb3IgY29uZmlybWF0aW9uIGZyb20gRWZ0cG9zIHNpZGUuXG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiUGFpciBDb2RlIENvbmZpcm1lZCBmcm9tIFBPUyBzaWRlLCBidXQgYW0gc3RpbGwgd2FpdGluZyBmb3IgY29uZmlybWF0aW9uIGZyb20gRWZ0cG9zLlwiKTtcblxuICAgICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLk1lc3NhZ2UgPSBcIkNsaWNrIFlFUyBvbiBFRlRQT1MgaWYgY29kZSBpczogXCIgKyB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkNvbmZpcm1hdGlvbkNvZGU7XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdQYWlyaW5nRmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGVcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWxyZWFkeSBjb25maXJtZWQgZnJvbSBFZnRwb3MgLSBTbyBhbGwgZ29vZCBub3cuIFdlJ3JlIFBhaXJlZCBhbHNvIGZyb20gdGhlIFBPUyBwZXJzcGVjdGl2ZS5cbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJQYWlyIENvZGUgQ29uZmlybWVkIGZyb20gUE9TIHNpZGUsIGFuZCB3YXMgYWxyZWFkeSBjb25maXJtZWQgZnJvbSBFZnRwb3Mgc2lkZS4gUGFpcmluZyBmaW5hbGlzZWQuXCIpO1xuXG4gICAgICAgIHRoaXMuX29uUGFpcmluZ1N1Y2Nlc3MoKTtcblxuICAgICAgICB0aGlzLl9vblJlYWR5VG9UcmFuc2FjdCgpO1xuICAgICAgfVxuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gQ2FsbCB0aGlzIGlmIHlvdXIgdXNlciBjbGlja3MgQ0FOQ0VMIG9yIE5PIGR1cmluZyB0aGUgcGFpcmluZyBwcm9jZXNzLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICB9LCB7XG4gICAga2V5OiBcIlBhaXJpbmdDYW5jZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gUGFpcmluZ0NhbmNlbCgpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uUGFpcmluZyB8fCB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkZpbmlzaGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuQXdhaXRpbmdDaGVja0Zyb21Qb3MgJiYgIXRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuQXdhaXRpbmdDaGVja0Zyb21FZnRwb3MpIHtcbiAgICAgICAgLy8gVGhpcyBtZWFucyB0aGF0IHRoZSBFZnRwb3MgYWxyZWFkeSB0aGlua3MgaXQncyBwYWlyZWQuXG4gICAgICAgIC8vIExldCdzIHRlbGwgaXQgdG8gZHJvcCBrZXlzXG4gICAgICAgIHRoaXMuX3NlbmQobmV3IF9QYWlyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNF9fW1wiRHJvcEtleXNSZXF1ZXN0XCJdKCkuVG9NZXNzYWdlKCkpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9vblBhaXJpbmdGYWlsZWQoKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIENhbGwgdGhpcyB3aGVuIHlvdXIgdXNlcyBjbGlja3MgdGhlIFVucGFpciBidXR0b24uXG4gICAgLy8gVGhpcyB3aWxsIGRpc2Nvbm5lY3QgZnJvbSB0aGUgRWZ0cG9zIGFuZCBmb3JnZXQgdGhlIHNlY3JldHMuXG4gICAgLy8gVGhlIEN1cnJlbnRTdGF0ZSBpcyB0aGVuIGNoYW5nZWQgdG8gVW5wYWlyZWQuXG4gICAgLy8gQ2FsbCB0aGlzIG9ubHkgaWYgeW91IGFyZSBub3QgeWV0IGluIHRoZSBVbnBhaXJlZCBzdGF0ZS5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJVbnBhaXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVW5wYWlyKCkge1xuICAgICAgaWYgKHRoaXMuQ3VycmVudFN0YXR1cyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSAvLyBCZXN0IGVmZm9ydCBsZXR0aW5nIHRoZSBlZnRwb3Mga25vdyB0aGF0IHdlJ3JlIGRyb3BwaW5nIHRoZSBrZXlzLCBzbyBpdCBjYW4gZHJvcCB0aGVtIGFzIHdlbGwuXG5cblxuICAgICAgdGhpcy5fc2VuZChuZXcgX1BhaXJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X19bXCJEcm9wS2V5c1JlcXVlc3RcIl0oKS5Ub01lc3NhZ2UoKSk7XG5cbiAgICAgIHRoaXMuX2RvVW5wYWlyKCk7XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gZW5kcmVnaW9uXG4gICAgLy8gcmVnaW9uIFRyYW5zYWN0aW9uIE1ldGhvZHNcbiAgICAvLyA8c3VtbWFyeT5cbiAgICAvLyBJbml0aWF0ZXMgYSBwdXJjaGFzZSB0cmFuc2FjdGlvbi4gQmUgc3Vic2NyaWJlZCB0byBUeEZsb3dTdGF0ZUNoYW5nZWQgZXZlbnQgdG8gZ2V0IHVwZGF0ZXMgb24gdGhlIHByb2Nlc3MuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwicG9zUmVmSWRcIj5BbHBoYW51bWVyaWMgSWRlbnRpZmllciBmb3IgeW91ciBwdXJjaGFzZS48L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwiYW1vdW50Q2VudHNcIj5BbW91bnQgaW4gQ2VudHMgdG8gY2hhcmdlPC9wYXJhbT5cbiAgICAvLyA8cmV0dXJucz5Jbml0aWF0ZVR4UmVzdWx0PC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiSW5pdGlhdGVQdXJjaGFzZVR4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlUHVyY2hhc2VUeChwb3NSZWZJZCwgYW1vdW50Q2VudHMpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgUGFpcmVkXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBJZGxlXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHVyY2hhc2VSZXF1ZXN0ID0gX1B1cmNoYXNlSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fW1wiUHVyY2hhc2VIZWxwZXJcIl0uQ3JlYXRlUHVyY2hhc2VSZXF1ZXN0KGFtb3VudENlbnRzLCBwb3NSZWZJZCk7XG4gICAgICBwdXJjaGFzZVJlcXVlc3QuQ29uZmlnID0gdGhpcy5Db25maWc7XG4gICAgICB2YXIgcHVyY2hhc2VNc2cgPSBwdXJjaGFzZVJlcXVlc3QuVG9NZXNzYWdlKCk7XG4gICAgICB0aGlzLkN1cnJlbnRGbG93ID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbjtcbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvblR5cGVcIl0uUHVyY2hhc2UsIGFtb3VudENlbnRzLCBwdXJjaGFzZU1zZywgXCJXYWl0aW5nIGZvciBFRlRQT1MgY29ubmVjdGlvbiB0byBtYWtlIHBheW1lbnQgcmVxdWVzdCBmb3IgXCIuY29uY2F0KGFtb3VudENlbnRzIC8gMTAwLjApKTtcblxuICAgICAgaWYgKHRoaXMuX3NlbmQocHVyY2hhc2VNc2cpKSB7XG4gICAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNlbnQoXCJBc2tlZCBFRlRQT1MgdG8gYWNjZXB0IHBheW1lbnQgZm9yIFwiLmNvbmNhdChhbW91bnRDZW50cyAvIDEwMC4wKSk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXSh0cnVlLCBcIlB1cmNoYXNlIEluaXRpYXRlZFwiKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEluaXRpYXRlcyBhIHB1cmNoYXNlIHRyYW5zYWN0aW9uLiBCZSBzdWJzY3JpYmVkIHRvIFR4Rmxvd1N0YXRlQ2hhbmdlZCBldmVudCB0byBnZXQgdXBkYXRlcyBvbiB0aGUgcHJvY2Vzcy5cbiAgICAvLyA8cGFyYT5UaXAgYW5kIGNhc2hvdXQgYXJlIG5vdCBhbGxvd2VkIHNpbXVsdGFuZW91c2x5LjwvcGFyYT5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJwb3NSZWZJZFwiPkFuIFVuaXF1ZSBJZGVudGlmaWVyIGZvciB5b3VyIE9yZGVyL1B1cmNoYXNlPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInB1cmNoYXNlQW1vdW50XCI+VGhlIFB1cmNoYXNlIEFtb3VudCBpbiBDZW50cy48L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwidGlwQW1vdW50XCI+VGhlIFRpcCBBbW91bnQgaW4gQ2VudHM8L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwiY2FzaG91dEFtb3VudFwiPlRoZSBDYXNob3V0IEFtb3VudCBpbiBDZW50czwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJwcm9tcHRGb3JDYXNob3V0XCI+V2hldGhlciB0byBwcm9tcHQgeW91ciBjdXN0b21lciBmb3IgY2FzaG91dCBvbiB0aGUgRWZ0cG9zPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm9wdGlvbnNcIj5UaGUgU2V0dGluZyB0byBzZXQgSGVhZGVyIGFuZCBGb290ZXIgZm9yIHRoZSBSZWNlaXB0PC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInN1cmNoYXJnZUFtb3VudFwiPlRoZSBTdXJjaGFyZ2UgQW1vdW50IGluIENlbnRzPC9wYXJhbT5cbiAgICAvLyA8cmV0dXJucz5Jbml0aWF0ZVR4UmVzdWx0PC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiSW5pdGlhdGVQdXJjaGFzZVR4VjJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVQdXJjaGFzZVR4VjIocG9zUmVmSWQsIHB1cmNoYXNlQW1vdW50LCB0aXBBbW91bnQsIGNhc2hvdXRBbW91bnQsIHByb21wdEZvckNhc2hvdXQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gICAgICB2YXIgc3VyY2hhcmdlQW1vdW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiAwO1xuICAgICAgaWYgKHRoaXMuQ3VycmVudFN0YXR1cyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgUGFpcmVkXCIpO1xuICAgICAgaWYgKHRpcEFtb3VudCA+IDAgJiYgKGNhc2hvdXRBbW91bnQgPiAwIHx8IHByb21wdEZvckNhc2hvdXQpKSByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiQ2Fubm90IEFjY2VwdCBUaXBzIGFuZCBDYXNob3V0IGF0IHRoZSBzYW1lIHRpbWUuXCIpO1xuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5JZGxlKSByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiTm90IElkbGVcIik7XG4gICAgICB0aGlzLkN1cnJlbnRGbG93ID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbjtcbiAgICAgIHZhciBwdXJjaGFzZSA9IF9QdXJjaGFzZUhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTZfX1tcIlB1cmNoYXNlSGVscGVyXCJdLkNyZWF0ZVB1cmNoYXNlUmVxdWVzdFYyKHBvc1JlZklkLCBwdXJjaGFzZUFtb3VudCwgdGlwQW1vdW50LCBjYXNob3V0QW1vdW50LCBwcm9tcHRGb3JDYXNob3V0LCBzdXJjaGFyZ2VBbW91bnQpO1xuICAgICAgcHVyY2hhc2UuQ29uZmlnID0gdGhpcy5Db25maWc7XG4gICAgICBwdXJjaGFzZS5PcHRpb25zID0gb3B0aW9ucztcbiAgICAgIHZhciBwdXJjaGFzZU1zZyA9IHB1cmNoYXNlLlRvTWVzc2FnZSgpO1xuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5QdXJjaGFzZSwgcHVyY2hhc2VBbW91bnQsIHB1cmNoYXNlTXNnLCBcIldhaXRpbmcgZm9yIEVGVFBPUyBjb25uZWN0aW9uIHRvIG1ha2UgcGF5bWVudCByZXF1ZXN0LiBcIi5jb25jYXQocHVyY2hhc2UuQW1vdW50U3VtbWFyeSgpKSk7XG5cbiAgICAgIGlmICh0aGlzLl9zZW5kKHB1cmNoYXNlTXNnKSkge1xuICAgICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5TZW50KFwiQXNrZWQgRUZUUE9TIHRvIGFjY2VwdCBwYXltZW50IGZvciBcIi5jb25jYXQocHVyY2hhc2UuQW1vdW50U3VtbWFyeSgpKSk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXSh0cnVlLCBcIlB1cmNoYXNlIEluaXRpYXRlZFwiKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEluaXRpYXRlcyBhIHJlZnVuZCB0cmFuc2FjdGlvbi4gQmUgc3Vic2NyaWJlZCB0byBUeEZsb3dTdGF0ZUNoYW5nZWQgZXZlbnQgdG8gZ2V0IHVwZGF0ZXMgb24gdGhlIHByb2Nlc3MuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwicG9zUmVmSWRcIj5BbHBoYW51bWVyaWMgSWRlbnRpZmllciBmb3IgeW91ciByZWZ1bmQuPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cImFtb3VudENlbnRzXCI+QW1vdW50IGluIENlbnRzIHRvIGNoYXJnZTwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJzdXBwcmVzc01lcmNoYW50UGFzc3dvcmRcIj5NZXJjaGFudCBQYXNzd29yZCBjb250cm9sIGluIFZBQTwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJvcHRpb25zXCI+VGhlIFNldHRpbmcgdG8gc2V0IEhlYWRlciBhbmQgRm9vdGVyIGZvciB0aGUgUmVjZWlwdDwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+SW5pdGlhdGVUeFJlc3VsdDwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlUmVmdW5kVHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVSZWZ1bmRUeChwb3NSZWZJZCwgYW1vdW50Q2VudHMpIHtcbiAgICAgIHZhciBzdXBwcmVzc01lcmNoYW50UGFzc3dvcmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcblxuICAgICAgaWYgKHRoaXMuQ3VycmVudFN0YXR1cyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBQYWlyZWRcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uSWRsZSkge1xuICAgICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiTm90IElkbGVcIik7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWZ1bmRSZXF1ZXN0ID0gX1B1cmNoYXNlSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xNl9fW1wiUHVyY2hhc2VIZWxwZXJcIl0uQ3JlYXRlUmVmdW5kUmVxdWVzdChhbW91bnRDZW50cywgcG9zUmVmSWQsIHN1cHByZXNzTWVyY2hhbnRQYXNzd29yZCk7XG4gICAgICByZWZ1bmRSZXF1ZXN0LkNvbmZpZyA9IHRoaXMuQ29uZmlnO1xuICAgICAgcmVmdW5kUmVxdWVzdC5PcHRpb25zID0gb3B0aW9ucztcbiAgICAgIHZhciByZWZ1bmRNc2cgPSByZWZ1bmRSZXF1ZXN0LlRvTWVzc2FnZSgpO1xuICAgICAgdGhpcy5DdXJyZW50RmxvdyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb247XG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZSA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbkZsb3dTdGF0ZVwiXShwb3NSZWZJZCwgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25UeXBlXCJdLlJlZnVuZCwgYW1vdW50Q2VudHMsIHJlZnVuZE1zZywgXCJXYWl0aW5nIGZvciBFRlRQT1MgY29ubmVjdGlvbiB0byBtYWtlIHJlZnVuZCByZXF1ZXN0IGZvciBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwLjApLnRvRml4ZWQoMikpKTtcblxuICAgICAgaWYgKHRoaXMuX3NlbmQocmVmdW5kTXNnKSkge1xuICAgICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5TZW50KFwiQXNrZWQgRUZUUE9TIHRvIHJlZnVuZCBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwLjApLnRvRml4ZWQoMikpKTtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKHRydWUsIFwiUmVmdW5kIEluaXRpYXRlZFwiKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIExldCB0aGUgRUZUUE9TIGtub3cgd2hldGhlciBtZXJjaGFudCBhY2NlcHRlZCBvciBkZWNsaW5lZCB0aGUgc2lnbmF0dXJlXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwiYWNjZXB0ZWRcIj53aGV0aGVyIG1lcmNoYW50IGFjY2VwdGVkIHRoZSBzaWduYXR1cmUgZnJvbSBjdXN0b21lciBvciBub3Q8L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiQWNjZXB0U2lnbmF0dXJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEFjY2VwdFNpZ25hdHVyZShhY2NlcHRlZCkge1xuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiB8fCB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCB8fCAhdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuQXdhaXRpbmdTaWduYXR1cmVDaGVjaykge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkFza2VkIHRvIGFjY2VwdCBzaWduYXR1cmUgYnV0IEkgd2FzIG5vdCB3YWl0aW5nIGZvciBvbmUuXCIpO1xuXG4gICAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiTWlkVHhSZXN1bHRcIl0oZmFsc2UsIFwiQXNrZWQgdG8gYWNjZXB0IHNpZ25hdHVyZSBidXQgSSB3YXMgbm90IHdhaXRpbmcgZm9yIG9uZS5cIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNpZ25hdHVyZVJlc3BvbmRlZChhY2NlcHRlZCA/IFwiQWNjZXB0aW5nIFNpZ25hdHVyZS4uLlwiIDogXCJEZWNsaW5pbmcgU2lnbmF0dXJlLi4uXCIpO1xuICAgICAgdmFyIHNpZ1JlcU1zZyA9IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNpZ25hdHVyZVJlcXVpcmVkTWVzc2FnZTtcblxuICAgICAgdGhpcy5fc2VuZChhY2NlcHRlZCA/IG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJTaWduYXR1cmVBY2NlcHRcIl0odGhpcy5DdXJyZW50VHhGbG93U3RhdGUuUG9zUmVmSWQpLlRvTWVzc2FnZSgpIDogbmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfX1tcIlNpZ25hdHVyZURlY2xpbmVcIl0odGhpcy5DdXJyZW50VHhGbG93U3RhdGUuUG9zUmVmSWQpLlRvTWVzc2FnZSgpKTtcblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJNaWRUeFJlc3VsdFwiXSh0cnVlLCBcIlwiKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFN1Ym1pdCB0aGUgQ29kZSBvYnRhaW5lZCBieSB5b3VyIHVzZXIgd2hlbiBwaG9uaW5nIGZvciBhdXRoLiBcbiAgICAvLyBJdCB3aWxsIHJldHVybiBpbW1lZGlhdGVseSB0byB0ZWxsIHlvdSB3aGV0aGVyIHRoZSBjb2RlIGhhcyBhIHZhbGlkIGZvcm1hdCBvciBub3QuIFxuICAgIC8vIElmIHZhbGlkPT10cnVlIGlzIHJldHVybmVkLCBubyBuZWVkIHRvIGRvIGFueXRoaW5nIGVsc2UuIEV4cGVjdCB1cGRhdGVzIHZpYSBzdGFuZGFyZCBjYWxsYmFjay5cbiAgICAvLyBJZiB2YWxpZD09ZmFsc2UgaXMgcmV0dXJuZWQsIHlvdSBjYW4gc2hvdyB5b3VyIHVzZXIgdGhlIGFjY29tcGFueWluZyBtZXNzYWdlLCBhbmQgaW52aXRlIHRoZW0gdG8gZW50ZXIgYW5vdGhlciBjb2RlLiBcbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJhdXRoQ29kZVwiPlRoZSBjb2RlIG9idGFpbmVkIGJ5IHlvdXIgdXNlciBmcm9tIHRoZSBtZXJjaGFudCBjYWxsIGNlbnRyZS4gSXQgc2hvdWxkIGJlIGEgNi1jaGFyYWN0ZXIgYWxwaGEtbnVtZXJpYyB2YWx1ZS48L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPldoZXRoZXIgY29kZSBoYXMgYSB2YWxpZCBmb3JtYXQgb3Igbm90LjwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIlN1Ym1pdEF1dGhDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFN1Ym1pdEF1dGhDb2RlKGF1dGhDb2RlKSB7XG4gICAgICBpZiAoYXV0aENvZGUubGVuZ3RoICE9IDYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTdWJtaXRBdXRoQ29kZVJlc3VsdFwiXShmYWxzZSwgXCJOb3QgYSA2LWRpZ2l0IGNvZGUuXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkIHx8ICF0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5Bd2FpdGluZ1Bob25lRm9yQXV0aCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkFza2VkIHRvIHNlbmQgYXV0aCBjb2RlIGJ1dCBJIHdhcyBub3Qgd2FpdGluZyBmb3Igb25lLlwiKTtcblxuICAgICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlN1Ym1pdEF1dGhDb2RlUmVzdWx0XCJdKGZhbHNlLCBcIldhcyBub3Qgd2FpdGluZyBmb3Igb25lLlwiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuQXV0aENvZGVTZW50KFwiU3VibWl0dGluZyBBdXRoIENvZGUgXCIuY29uY2F0KGF1dGhDb2RlKSk7XG5cbiAgICAgIHRoaXMuX3NlbmQobmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfX1tcIkF1dGhDb2RlQWR2aWNlXCJdKHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlBvc1JlZklkLCBhdXRoQ29kZSkuVG9NZXNzYWdlKCkpO1xuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlN1Ym1pdEF1dGhDb2RlUmVzdWx0XCJdKHRydWUsIFwiVmFsaWQgQ29kZS5cIik7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBBdHRlbXB0cyB0byBjYW5jZWwgYSBUcmFuc2FjdGlvbi4gXG4gICAgLy8gQmUgc3Vic2NyaWJlZCB0byBUeEZsb3dTdGF0ZUNoYW5nZWQgZXZlbnQgdG8gc2VlIGhvdyBpdCBnb2VzLlxuICAgIC8vIFdhaXQgZm9yIHRoZSB0cmFuc2FjdGlvbiB0byBiZSBmaW5pc2hlZCBhbmQgdGhlbiBzZWUgd2hldGhlciBjYW5jZWxsYXRpb24gd2FzIHN1Y2Nlc3NmdWwgb3Igbm90LlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cmV0dXJucz5NaWRUeFJlc3VsdCAtIGZhbHNlIG9ubHkgaWYgeW91IGNhbGxlZCBpdCBpbiB0aGUgd3Jvbmcgc3RhdGU8L3JldHVybnM+XG5cbiAgfSwge1xuICAgIGtleTogXCJDYW5jZWxUcmFuc2FjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDYW5jZWxUcmFuc2FjdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gfHwgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuRmluaXNoZWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJBc2tlZCB0byBjYW5jZWwgdHJhbnNhY3Rpb24gYnV0IEkgd2FzIG5vdCBpbiB0aGUgbWlkZGxlIG9mIG9uZS5cIik7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJNaWRUeFJlc3VsdFwiXShmYWxzZSwgXCJBc2tlZCB0byBjYW5jZWwgdHJhbnNhY3Rpb24gYnV0IEkgd2FzIG5vdCBpbiB0aGUgbWlkZGxlIG9mIG9uZS5cIik7XG4gICAgICB9IC8vIFRILTFDLCBUSC0zQyAtIE1lcmNoYW50IHByZXNzZWQgY2FuY2VsXG5cblxuICAgICAgaWYgKHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlJlcXVlc3RTZW50KSB7XG4gICAgICAgIHZhciBjYW5jZWxSZXEgPSBuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOV9fW1wiQ2FuY2VsVHJhbnNhY3Rpb25SZXF1ZXN0XCJdKCk7XG4gICAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkNhbmNlbGxpbmcoXCJBdHRlbXB0aW5nIHRvIENhbmNlbCBUcmFuc2FjdGlvbi4uLlwiKTtcblxuICAgICAgICB0aGlzLl9zZW5kKGNhbmNlbFJlcS5Ub01lc3NhZ2UoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSBIYWQgTm90IEV2ZW4gU2VudCBSZXF1ZXN0IFlldC4gQ29uc2lkZXIgYXMga25vd24gZmFpbGVkLlxuICAgICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GYWlsZWQobnVsbCwgXCJUcmFuc2FjdGlvbiBDYW5jZWxsZWQuIFJlcXVlc3QgSGFkIG5vdCBldmVuIGJlZW4gc2VudCB5ZXQuXCIpO1xuICAgICAgfVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIk1pZFR4UmVzdWx0XCJdKHRydWUsIFwiXCIpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gSW5pdGlhdGVzIGEgY2FzaG91dCBvbmx5IHRyYW5zYWN0aW9uLiBCZSBzdWJzY3JpYmVkIHRvIFR4Rmxvd1N0YXRlQ2hhbmdlZCBldmVudCB0byBnZXQgdXBkYXRlcyBvbiB0aGUgcHJvY2Vzcy5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJwb3NSZWZJZFwiPkFscGhhbnVtZXJpYyBJZGVudGlmaWVyIGZvciB5b3VyIHRyYW5zYWN0aW9uLjwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJhbW91bnRDZW50c1wiPkFtb3VudCBpbiBDZW50cyB0byBjYXNoIG91dDwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJzdXJjaGFyZ2VBbW91bnRcIj5UaGUgU3VyY2hhcmdlIEFtb3VudCBpbiBDZW50czwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+SW5pdGlhdGVUeFJlc3VsdDwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlQ2FzaG91dE9ubHlUeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJbml0aWF0ZUNhc2hvdXRPbmx5VHgocG9zUmVmSWQsIGFtb3VudENlbnRzKSB7XG4gICAgICB2YXIgc3VyY2hhcmdlQW1vdW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiTm90IFBhaXJlZFwiKTtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uSWRsZSkgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBJZGxlXCIpO1xuICAgICAgdmFyIGNhc2hvdXRNc2cgPSBPYmplY3QuYXNzaWduKG5ldyBfQ2FzaG91dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfX1tcIkNhc2hvdXRPbmx5UmVxdWVzdFwiXShhbW91bnRDZW50cywgcG9zUmVmSWQpLCB7XG4gICAgICAgIFN1cmNoYXJnZUFtb3VudDogc3VyY2hhcmdlQW1vdW50LFxuICAgICAgICBPcHRpb25zOiBvcHRpb25zLFxuICAgICAgICBDb25maWc6IHRoaXMuQ29uZmlnXG4gICAgICB9KS5Ub01lc3NhZ2UoKTtcbiAgICAgIHRoaXMuQ3VycmVudEZsb3cgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uO1xuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5DYXNob3V0T25seSwgYW1vdW50Q2VudHMsIGNhc2hvdXRNc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gc2VuZCBjYXNob3V0IHJlcXVlc3QgZm9yIFwiLmNvbmNhdCgoYW1vdW50Q2VudHMgLyAxMDApLnRvRml4ZWQoMikpKTtcblxuICAgICAgaWYgKHRoaXMuX3NlbmQoY2FzaG91dE1zZykpIHtcbiAgICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuU2VudChcIkFza2VkIEVGVFBPUyB0byBkbyBjYXNob3V0IGZvciBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwKS50b0ZpeGVkKDIpKSk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXSh0cnVlLCBcIkNhc2hvdXQgSW5pdGlhdGVkXCIpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gSW5pdGlhdGVzIGEgTWFpbCBPcmRlciAvIFRlbGVwaG9uZSBPcmRlciBQdXJjaGFzZSBUcmFuc2FjdGlvblxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInBvc1JlZklkXCI+QWxwaGFudW1lcmljIElkZW50aWZpZXIgZm9yIHlvdXIgdHJhbnNhY3Rpb24uPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cImFtb3VudENlbnRzXCI+QW1vdW50IGluIENlbnRzPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInN1cmNoYXJnZUFtb3VudFwiPlRoZSBTdXJjaGFyZ2UgQW1vdW50IGluIENlbnRzPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInN1cHByZXNzTWVyY2hhbnRQYXNzd29yZFwiPj5NZXJjaGFudCBQYXNzd29yZCBjb250cm9sIGluIFZBQTwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJvcHRpb25zXCI+VGhlIFNldHRpbmcgdG8gc2V0IEhlYWRlciBhbmQgRm9vdGVyIGZvciB0aGUgUmVjZWlwdDwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+SW5pdGlhdGVUeFJlc3VsdDwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlTW90b1B1cmNoYXNlVHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVNb3RvUHVyY2hhc2VUeChwb3NSZWZJZCwgYW1vdW50Q2VudHMpIHtcbiAgICAgIHZhciBzdXJjaGFyZ2VBbW91bnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDA7XG4gICAgICB2YXIgc3VwcHJlc3NNZXJjaGFudFBhc3N3b3JkID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBQYWlyZWRcIik7XG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGUpIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgSWRsZVwiKTtcbiAgICAgIHZhciBtb3RvUHVyY2hhc2VNc2cgPSBPYmplY3QuYXNzaWduKG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJNb3RvUHVyY2hhc2VSZXF1ZXN0XCJdKGFtb3VudENlbnRzLCBwb3NSZWZJZCksIHtcbiAgICAgICAgU3VyY2hhcmdlQW1vdW50OiBzdXJjaGFyZ2VBbW91bnQsXG4gICAgICAgIFN1cHByZXNzTWVyY2hhbnRQYXNzd29yZDogc3VwcHJlc3NNZXJjaGFudFBhc3N3b3JkLFxuICAgICAgICBDb25maWc6IHRoaXMuQ29uZmlnLFxuICAgICAgICBPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KS5Ub01lc3NhZ2UoKTtcbiAgICAgIHRoaXMuQ3VycmVudEZsb3cgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uO1xuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5NT1RPLCBhbW91bnRDZW50cywgbW90b1B1cmNoYXNlTXNnLCBcIldhaXRpbmcgZm9yIEVGVFBPUyBjb25uZWN0aW9uIHRvIHNlbmQgTU9UTyByZXF1ZXN0IGZvciBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwKS50b0ZpeGVkKDIpKSk7XG5cbiAgICAgIGlmICh0aGlzLl9zZW5kKG1vdG9QdXJjaGFzZU1zZykpIHtcbiAgICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuU2VudChcIkFza2VkIEVGVFBPUyBkbyBNT1RPIGZvciBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwKS50b0ZpeGVkKDIpKSk7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXSh0cnVlLCBcIk1PVE8gSW5pdGlhdGVkXCIpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gSW5pdGlhdGVzIGEgc2V0dGxlbWVudCB0cmFuc2FjdGlvbi5cbiAgICAvLyBCZSBzdWJzY3JpYmVkIHRvIFR4Rmxvd1N0YXRlQ2hhbmdlZCBldmVudCB0byBnZXQgdXBkYXRlcyBvbiB0aGUgcHJvY2Vzcy5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm9wdGlvbnNcIj5UaGUgU2V0dGluZyB0byBzZXQgSGVhZGVyIGFuZCBGb290ZXIgZm9yIHRoZSBSZWNlaXB0PC9wYXJhbT5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZVNldHRsZVR4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlU2V0dGxlVHgocG9zUmVmSWQpIHtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgUGFpcmVkXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBJZGxlXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2V0dGxlTXNnID0gT2JqZWN0LmFzc2lnbihuZXcgX1NldHRsZW1lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzEzX19bXCJTZXR0bGVSZXF1ZXN0XCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInNldHRsZVwiKSksIHtcbiAgICAgICAgQ29uZmlnOiB0aGlzLkNvbmZpZyxcbiAgICAgICAgT3B0aW9uczogb3B0aW9uc1xuICAgICAgfSkuVG9NZXNzYWdlKCk7XG4gICAgICB0aGlzLkN1cnJlbnRGbG93ID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbjtcbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvblR5cGVcIl0uU2V0dGxlLCAwLCBzZXR0bGVNc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gbWFrZSBhIHNldHRsZSByZXF1ZXN0XCIpO1xuXG4gICAgICBpZiAodGhpcy5fc2VuZChzZXR0bGVNc2cpKSB7XG4gICAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNlbnQoXCJBc2tlZCBFRlRQT1MgdG8gc2V0dGxlLlwiKTtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKHRydWUsIFwiU2V0dGxlIEluaXRpYXRlZFwiKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwib3B0aW9uc1wiPlRoZSBTZXR0aW5nIHRvIHNldCBIZWFkZXIgYW5kIEZvb3RlciBmb3IgdGhlIFJlY2VpcHQ8L3BhcmFtPlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlU2V0dGxlbWVudEVucXVpcnlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVTZXR0bGVtZW50RW5xdWlyeShwb3NSZWZJZCkge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0oZmFsc2UsIFwiTm90IFBhaXJlZFwiKTtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uSWRsZSkgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBJZGxlXCIpO1xuICAgICAgdmFyIHN0bEVucU1zZyA9IE9iamVjdC5hc3NpZ24obmV3IF9TZXR0bGVtZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xM19fW1wiU2V0dGxlbWVudEVucXVpcnlSZXF1ZXN0XCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInN0bGVucVwiKSksIHtcbiAgICAgICAgQ29uZmlnOiB0aGlzLkNvbmZpZyxcbiAgICAgICAgT3B0aW9uczogb3B0aW9uc1xuICAgICAgfSkuVG9NZXNzYWdlKCk7XG4gICAgICB0aGlzLkN1cnJlbnRGbG93ID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbjtcbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJUcmFuc2FjdGlvblR5cGVcIl0uU2V0dGxlbWVudEVucXVpcnksIDAsIHN0bEVucU1zZywgXCJXYWl0aW5nIGZvciBFRlRQT1MgY29ubmVjdGlvbiB0byBtYWtlIGEgc2V0dGxlbWVudCBlbnF1aXJ5XCIpO1xuXG4gICAgICBpZiAodGhpcy5fc2VuZChzdGxFbnFNc2cpKSB7XG4gICAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNlbnQoXCJBc2tlZCBFRlRQT1MgdG8gbWFrZSBhIHNldHRsZW1lbnQgZW5xdWlyeS5cIik7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXSh0cnVlLCBcIlNldHRsZSBJbml0aWF0ZWRcIik7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBJbml0aWF0ZXMgYSBHZXQgTGFzdCBUcmFuc2FjdGlvbi4gVXNlIHRoaXMgd2hlbiB5b3Ugd2FudCB0byByZXRyaWV2ZSB0aGUgbW9zdCByZWNlbnQgdHJhbnNhY3Rpb25cbiAgICAvLyB0aGF0IHdhcyBwcm9jZXNzZWQgYnkgdGhlIEVmdHBvcy5cbiAgICAvLyBCZSBzdWJzY3JpYmVkIHRvIFR4Rmxvd1N0YXRlQ2hhbmdlZCBldmVudCB0byBnZXQgdXBkYXRlcyBvbiB0aGUgcHJvY2Vzcy5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZUdldExhc3RUeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJbml0aWF0ZUdldExhc3RUeCgpIHtcbiAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgUGFpcmVkXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBJZGxlXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZ2x0UmVxdWVzdE1zZyA9IG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJHZXRMYXN0VHJhbnNhY3Rpb25SZXF1ZXN0XCJdKCkuVG9NZXNzYWdlKCk7XG4gICAgICB0aGlzLkN1cnJlbnRGbG93ID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbjtcbiAgICAgIHZhciBwb3NSZWZJZCA9IGdsdFJlcXVlc3RNc2cuSWQ7IC8vIEdldExhc3RUeCBpcyBub3QgdHJ5aW5nIHRvIGdldCBhbnl0aGluZyBzcGVjaWZpYyBiYWNrLiBTbyB3ZSBqdXN0IHVzZSB0aGUgbWVzc2FnZSBpZC5cblxuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5HZXRMYXN0VHJhbnNhY3Rpb24sIDAsIGdsdFJlcXVlc3RNc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gbWFrZSBhIEdldC1MYXN0LVRyYW5zYWN0aW9uIHJlcXVlc3QuXCIpO1xuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuQ2FsbGluZ0dsdChnbHRSZXF1ZXN0TXNnLklkKTtcblxuICAgICAgaWYgKHRoaXMuX3NlbmQoZ2x0UmVxdWVzdE1zZykpIHtcbiAgICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuU2VudChcIkFza2VkIEVGVFBPUyBmb3IgbGFzdCB0cmFuc2FjdGlvbi5cIik7XG4gICAgICB9XG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXSh0cnVlLCBcIkdMVCBJbml0aWF0ZWRcIik7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGlzIGlzIHVzZWZ1bCB0byByZWNvdmVyIGZyb20geW91ciBQT1MgY3Jhc2hpbmcgaW4gdGhlIG1pZGRsZSBvZiBhIHRyYW5zYWN0aW9uLlxuICAgIC8vIFdoZW4geW91IHJlc3RhcnQgeW91ciBQT1MsIGlmIHlvdSBoYWQgc2F2ZWQgZW5vdWdoIHN0YXRlLCB5b3UgY2FuIGNhbGwgdGhpcyBtZXRob2QgdG8gcmVjb3ZlciB0aGUgY2xpZW50IGxpYnJhcnkgc3RhdGUuXG4gICAgLy8gWW91IG5lZWQgdG8gaGF2ZSB0aGUgcG9zUmVmSWQgdGhhdCB5b3UgcGFzc2VkIGluIHdpdGggdGhlIG9yaWdpbmFsIHRyYW5zYWN0aW9uLCBhbmQgdGhlIHRyYW5zYWN0aW9uIHR5cGUuXG4gICAgLy8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gaW1tZWRpYXRlbHkgd2hldGhlciByZWNvdmVyeSBoYXMgc3RhcnRlZCBvciBub3QuXG4gICAgLy8gSWYgcmVjb3ZlcnkgaGFzIHN0YXJ0ZWQsIHlvdSBuZWVkIHRvIGJyaW5nIHVwIHRoZSB0cmFuc2FjdGlvbiBtb2RhbCB0byB5b3VyIHVzZXIgYSBiZSBsaXN0ZW5pbmcgdG8gVHhGbG93U3RhdGVDaGFuZ2VkLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInBvc1JlZklkXCI+VGhlIGlzIHRoYXQgeW91IGhhZCBhc3NpZ25lZCB0byB0aGUgdHJhbnNhY3Rpb24gdGhhdCB5b3UgYXJlIHRyeWluZyB0byByZWNvdmVyLjwvcGFyYW0+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJ0eFR5cGVcIj5UaGUgdHJhbnNhY3Rpb24gdHlwZS48L3BhcmFtPlxuICAgIC8vIDxyZXR1cm5zPjwvcmV0dXJucz5cblxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlUmVjb3ZlcnlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVSZWNvdmVyeShwb3NSZWZJZCwgdHhUeXBlKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50U3RhdHVzID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBQYWlyZWRcIik7XG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLklkbGUpIHJldHVybiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiSW5pdGlhdGVUeFJlc3VsdFwiXShmYWxzZSwgXCJOb3QgSWRsZVwiKTtcbiAgICAgIHRoaXMuQ3VycmVudEZsb3cgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uO1xuICAgICAgdmFyIGdsdFJlcXVlc3RNc2cgPSBuZXcgX1B1cmNoYXNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOV9fW1wiR2V0TGFzdFRyYW5zYWN0aW9uUmVxdWVzdFwiXSgpLlRvTWVzc2FnZSgpO1xuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIHR4VHlwZSwgMCwgZ2x0UmVxdWVzdE1zZywgXCJXYWl0aW5nIGZvciBFRlRQT1MgY29ubmVjdGlvbiB0byBhdHRlbXB0IHJlY292ZXJ5LlwiKTtcblxuICAgICAgaWYgKHRoaXMuX3NlbmQoZ2x0UmVxdWVzdE1zZykpIHtcbiAgICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuU2VudChcIkFza2VkIEVGVFBPUyB0byByZWNvdmVyIHN0YXRlLlwiKTtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgICAgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKHRydWUsIFwiUmVjb3ZlcnkgSW5pdGlhdGVkXCIpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gR2x0TWF0Y2ggYXR0ZW1wdHMgdG8gY29uY2x1ZGUgd2hldGhlciBhIGdsdFJlc3BvbnNlIG1hdGNoZXMgYW4gZXhwZWN0ZWQgdHJhbnNhY3Rpb24gYW5kIHJldHVybnNcbiAgICAvLyB0aGUgb3V0Y29tZS4gXG4gICAgLy8gSWYgU3VjY2Vzcy9GYWlsZWQgaXMgcmV0dXJuZWQsIGl0IG1lYW5zIHRoYXQgdGhlIGd0bFJlc3BvbnNlIGRpZCBtYXRjaCwgYW5kIHRoYXQgdHJhbnNhY3Rpb24gd2FzIHN1Y2Nlc2Z1bC9mYWlsZWQuXG4gICAgLy8gSWYgVW5rbm93biBpcyByZXR1cm5lZCwgaXQgbWVhbnMgdGhhdCB0aGUgZ2x0UmVzcG9uc2UgZG9lcyBub3QgbWF0Y2ggdGhlIGV4cGVjdGVkIHRyYW5zYWN0aW9uLiBcbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJnbHRSZXNwb25zZVwiPlRoZSBHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZSBtZXNzYWdlIHRvIGNoZWNrPC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInBvc1JlZklkXCI+VGhlIFJlZmVyZW5jZSBJZCB0aGF0IHlvdSBwYXNzZWQgaW4gd2l0aCB0aGUgb3JpZ2luYWwgcmVxdWVzdC48L3BhcmFtPlxuICAgIC8vIDxwYXJhbSBuYW1lPVwiZXhwZWN0ZWRBbW91bnRcIj5UaGUgdG90YWwgYW1vdW50IGluIHRoZSBvcmlnaW5hbCByZXF1ZXN0PC9wYXJhbT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cInJlcXVlc3RUaW1lXCI+VGhlIHJlcXVlc3QgdGltZTwvcGFyYW0+XG4gICAgLy8gPHJldHVybnM+PC9yZXR1cm5zPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiR2x0TWF0Y2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2x0TWF0Y2goZ2x0UmVzcG9uc2UsIHBvc1JlZklkLCBleHBlY3RlZEFtb3VudCwgcmVxdWVzdFRpbWUpIHtcbiAgICAgIC8vIE9ic29sZXRlIG1ldGhvZCBjYWxsIGNoZWNrXG4gICAgICAvLyBPbGQgaW50ZXJmYWNlOiBHbHRNYXRjaChHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZSBnbHRSZXNwb25zZSwgVHJhbnNhY3Rpb25UeXBlIGV4cGVjdGVkVHlwZSwgaW50IGV4cGVjdGVkQW1vdW50LCBEYXRlVGltZSByZXF1ZXN0VGltZSwgc3RyaW5nIHBvc1JlZklkKVxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IDAgOiBhcmd1bWVudHMubGVuZ3RoIC0gNCkge1xuICAgICAgICBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IDAgOiBhcmd1bWVudHMubGVuZ3RoIC0gNCkgPT09IDEpIHtcbiAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIk9ic29sZXRlIG1ldGhvZCBjYWxsIGRldGVjdGVkOiBVc2UgR2x0TWF0Y2goZ2x0UmVzcG9uc2UsIHBvc1JlZklkKVwiKTtcblxuICAgICAgICAgIHJldHVybiB0aGlzLkdsdE1hdGNoKGdsdFJlc3BvbnNlLCBhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9ic29sZXRlIG1ldGhvZCBjYWxsIHdpdGggdW5rbm93biBhcmdzOiBVc2UgR2x0TWF0Y2goR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2UgZ2x0UmVzcG9uc2UsIHN0cmluZyBwb3NSZWZJZClcIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fbG9nLmluZm8oXCJHTFQgQ0hFQ0s6IFBvc1JlZklkOiBcIi5jb25jYXQocG9zUmVmSWQsIFwiLT5cIikuY29uY2F0KGdsdFJlc3BvbnNlLkdldFBvc1JlZklkKCkpKTtcblxuICAgICAgdmFyIGdsdEJhbmtEYXRlVGltZVN0ciA9IGdsdFJlc3BvbnNlLkdldEJhbmtEYXRlVGltZVN0cmluZygpOyAvLyBkZE1NeXl5eUhIbW1zc1xuXG4gICAgICB2YXIgZ2x0QmFua0RhdGVUaW1lID0gbmV3IERhdGUoXCJcIi5jb25jYXQoZ2x0QmFua0RhdGVUaW1lU3RyLnN1YnN0cig0LCA0KSwgXCItXCIpLmNvbmNhdChnbHRCYW5rRGF0ZVRpbWVTdHIuc3Vic3RyKDIsIDIpLCBcIi1cIikuY29uY2F0KGdsdEJhbmtEYXRlVGltZVN0ci5zdWJzdHIoMCwgMiksIFwiIFwiKS5jb25jYXQoZ2x0QmFua0RhdGVUaW1lU3RyLnN1YnN0cig4LCAyKSwgXCI6XCIpLmNvbmNhdChnbHRCYW5rRGF0ZVRpbWVTdHIuc3Vic3RyKDEwLCAyKSwgXCI6XCIpLmNvbmNhdChnbHRCYW5rRGF0ZVRpbWVTdHIuc3Vic3RyKDEyLCAyKSkpO1xuICAgICAgdmFyIGNvbXBhcmUgPSBwYXJzZUludChyZXF1ZXN0VGltZSkgLSBnbHRCYW5rRGF0ZVRpbWUuZ2V0VGltZSgpO1xuXG4gICAgICBpZiAoIXBvc1JlZklkID09IGdsdFJlc3BvbnNlLkdldFBvc1JlZklkKCkpIHtcbiAgICAgICAgcmV0dXJuIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiU3VjY2Vzc1N0YXRlXCJdLlVua25vd247XG4gICAgICB9XG5cbiAgICAgIGlmIChnbHRSZXNwb25zZS5HZXRUeFR5cGUoKS50b1VwcGVyQ2FzZSgpID09IFwiUFVSQ0hBU0VcIiAmJiBnbHRSZXNwb25zZS5HZXRCYW5rTm9uQ2FzaEFtb3VudCgpICE9IGV4cGVjdGVkQW1vdW50ICYmIGNvbXBhcmUgPiAwKSB7XG4gICAgICAgIHJldHVybiBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIk1lc3NhZ2VcIl0uU3VjY2Vzc1N0YXRlLlVua25vd247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnbHRSZXNwb25zZS5HZXRTdWNjZXNzU3RhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiUHJpbnRSZWNlaXB0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFByaW50UmVjZWlwdChrZXksIHBheWxvYWQpIHtcbiAgICAgIHRoaXMuX3NlbmQobmV3IF9QcmludGluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjFfX1tcIlByaW50aW5nUmVxdWVzdFwiXShrZXksIHBheWxvYWQpLnRvTWVzc2FnZSgpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiR2V0VGVybWluYWxTdGF0dXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0VGVybWluYWxTdGF0dXMoKSB7XG4gICAgICB0aGlzLl9zZW5kKG5ldyBfVGVybWluYWxTdGF0dXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIyX19bXCJUZXJtaW5hbFN0YXR1c1JlcXVlc3RcIl0oKS5Ub01lc3NhZ2UoKSk7XG4gICAgfSAvLyBlbmRyZWdpb25cbiAgICAvLyByZWdpb24gSW50ZXJuYWxzIGZvciBQYWlyaW5nIEZsb3dcbiAgICAvLyA8c3VtbWFyeT5cbiAgICAvLyBIYW5kbGluZyB0aGUgMm5kIGludGVyYWN0aW9uIG9mIHRoZSBwYWlyaW5nIHByb2Nlc3MsIGkuZS4gYW4gaW5jb21pbmcgS2V5UmVxdWVzdC5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtXCI+aW5jb21pbmcgbWVzc2FnZTwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlS2V5UmVxdWVzdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlS2V5UmVxdWVzdChtKSB7XG4gICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLk1lc3NhZ2UgPSBcIk5lZ290aWF0aW5nIFBhaXJpbmcuLi5cIjtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdQYWlyaW5nRmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlXG4gICAgICB9KSk7IC8vIFVzZSB0aGUgaGVscGVyLiBJdCB0YWtlcyB0aGUgaW5jb21pbmcgcmVxdWVzdCwgYW5kIGdlbmVyYXRlcyB0aGUgc2VjcmV0cyBhbmQgdGhlIHJlc3BvbnNlLlxuXG4gICAgICB2YXIgcGggPSBuZXcgX1BhaXJpbmdIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX1tcIlBhaXJpbmdIZWxwZXJcIl0oKTtcbiAgICAgIHZhciByZXN1bHQgPSBwaC5HZW5lcmF0ZVNlY3JldHNBbmRLZXlSZXNwb25zZShuZXcgX1BhaXJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X19bXCJLZXlSZXF1ZXN0XCJdKG0pKTtcbiAgICAgIHRoaXMuX3NlY3JldHMgPSByZXN1bHQuU2VjcmV0czsgLy8gd2Ugbm93IGhhdmUgc2VjcmV0cywgYWx0aG91Z2ggcGFpcmluZyBpcyBub3QgZnVsbHkgZmluaXNoZWQgeWV0LlxuXG4gICAgICB0aGlzLl9zcGlNZXNzYWdlU3RhbXAuU2VjcmV0cyA9IHRoaXMuX3NlY3JldHM7IC8vIHVwZGF0aW5nIG91ciBzdGFtcCB3aXRoIHRoZSBzZWNyZXRzIHNvIGNhbiBlbmNyeXB0IG1lc3NhZ2VzIGxhdGVyLlxuXG4gICAgICB0aGlzLl9zZW5kKHJlc3VsdC5LZXlSZXNwb25zZS5Ub01lc3NhZ2UoKSk7IC8vIHNlbmQgdGhlIGtleV9yZXNwb25zZSwgaS5lLiBpbnRlcmFjdGlvbiAzIG9mIHBhaXJpbmcuXG5cbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEhhbmRsaW5nIHRoZSA0dGggaW50ZXJhY3Rpb24gb2YgdGhlIHBhaXJpbmcgcHJvY2VzcyBpLmUuIGFuIGluY29taW5nIEtleUNoZWNrLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUtleUNoZWNrXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVLZXlDaGVjayhtKSB7XG4gICAgICB2YXIga2V5Q2hlY2sgPSBuZXcgX1BhaXJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X19bXCJLZXlDaGVja1wiXShtKTtcbiAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuQ29uZmlybWF0aW9uQ29kZSA9IGtleUNoZWNrLkNvbmZpcm1hdGlvbkNvZGU7XG4gICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tRWZ0cG9zID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuQXdhaXRpbmdDaGVja0Zyb21Qb3MgPSB0cnVlO1xuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5NZXNzYWdlID0gXCJDb25maXJtIHRoYXQgdGhlIGZvbGxvd2luZyBDb2RlIGlzIHNob3dpbmcgb24gdGhlIFRlcm1pbmFsXCI7XG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnUGFpcmluZ0Zsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gSGFuZGxpbmcgdGhlIDV0aCBhbmQgZmluYWwgaW50ZXJhY3Rpb24gb2YgdGhlIHBhaXJpbmcgcHJvY2VzcywgaS5lLiBhbiBpbmNvbWluZyBQYWlyUmVzcG9uc2VcbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtXCI+PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVQYWlyUmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVBhaXJSZXNwb25zZShtKSB7XG4gICAgICB2YXIgcGFpclJlc3AgPSBuZXcgX1BhaXJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE0X19bXCJQYWlyUmVzcG9uc2VcIl0obSk7XG4gICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tRWZ0cG9zID0gZmFsc2U7XG5cbiAgICAgIGlmIChwYWlyUmVzcC5TdWNjZXNzKSB7XG4gICAgICAgIGlmICh0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLkF3YWl0aW5nQ2hlY2tGcm9tUG9zKSB7XG4gICAgICAgICAgLy8gU3RpbGwgV2FpdGluZyBmb3IgVXNlciB0byBzYXkgeWVzIG9uIFBPU1xuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiR290IFBhaXIgQ29uZmlybSBmcm9tIEVmdHBvcywgYnV0IHN0aWxsIHdhaXRpbmcgZm9yIHVzZSB0byBjb25maXJtIGZyb20gUE9TLlwiKTtcblxuICAgICAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuTWVzc2FnZSA9IFwiQ29uZmlybSB0aGF0IHRoZSBmb2xsb3dpbmcgQ29kZSBpcyB3aGF0IHRoZSBFRlRQT1Mgc2hvd2VkXCI7XG4gICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1BhaXJpbmdGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiR290IFBhaXIgQ29uZmlybSBmcm9tIEVmdHBvcywgYW5kIGFscmVhZHkgaGFkIGNvbmZpcm0gZnJvbSBQT1MuIE5vdyBqdXN0IHdhaXRpbmcgZm9yIGZpcnN0IHBvbmcuXCIpO1xuXG4gICAgICAgICAgdGhpcy5fb25QYWlyaW5nU3VjY2VzcygpO1xuICAgICAgICB9IC8vIEkgbmVlZCB0byBwaW5nL2xvZ2luIGV2ZW4gaWYgdGhlIHBvcyB1c2VyIGhhcyBub3Qgc2FpZCB5ZXMgeWV0LCBcbiAgICAgICAgLy8gYmVjYXVzZSBvdGhlcndpc2Ugd2l0aGluIDUgc2Vjb25kcyBjb25uZWN0aW9uZyB3aWxsIGJlIGRyb3BwZWQgYnkgZWZ0cG9zLlxuXG5cbiAgICAgICAgdGhpcy5fc3RhcnRQZXJpb2RpY1BpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX29uUGFpcmluZ0ZhaWxlZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlRHJvcEtleXNBZHZpY2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZURyb3BLZXlzQWR2aWNlKG0pIHtcbiAgICAgIHRoaXMuX2xvZy5pbmZvKFwiRWZ0cG9zIHdhcyBVbnBhaXJlZC4gSSBzaGFsbCB1bnBhaXIgZnJvbSBteSBlbmQgYXMgd2VsbC5cIik7XG5cbiAgICAgIHRoaXMuX2RvVW5wYWlyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9vblBhaXJpbmdTdWNjZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblBhaXJpbmdTdWNjZXNzKCkge1xuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5TdWNjZXNzZnVsID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuRmluaXNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5NZXNzYWdlID0gXCJQYWlyaW5nIFN1Y2Nlc3NmdWwhXCI7XG4gICAgICB0aGlzLkN1cnJlbnRTdGF0dXMgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uUGFpcmVkQ29ubmVjdGVkO1xuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1NlY3JldHNDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuX3NlY3JldHNcbiAgICAgIH0pKTtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdQYWlyaW5nRmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9vblBhaXJpbmdGYWlsZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUGFpcmluZ0ZhaWxlZCgpIHtcbiAgICAgIHRoaXMuX3NlY3JldHMgPSBudWxsO1xuICAgICAgdGhpcy5fc3BpTWVzc2FnZVN0YW1wLlNlY3JldHMgPSBudWxsO1xuXG4gICAgICB0aGlzLl9jb25uLkRpc2Nvbm5lY3QoKTtcblxuICAgICAgdGhpcy5DdXJyZW50U3RhdHVzID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkO1xuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5NZXNzYWdlID0gXCJQYWlyaW5nIEZhaWxlZFwiO1xuICAgICAgdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5GaW5pc2hlZCA9IHRydWU7XG4gICAgICB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlLlN1Y2Nlc3NmdWwgPSBmYWxzZTtcbiAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuQXdhaXRpbmdDaGVja0Zyb21Qb3MgPSBmYWxzZTtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdQYWlyaW5nRmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9kb1VucGFpclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZG9VbnBhaXIoKSB7XG4gICAgICB0aGlzLkN1cnJlbnRTdGF0dXMgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQ7XG5cbiAgICAgIHRoaXMuX2Nvbm4uRGlzY29ubmVjdCgpO1xuXG4gICAgICB0aGlzLl9zZWNyZXRzID0gbnVsbDtcbiAgICAgIHRoaXMuX3NwaU1lc3NhZ2VTdGFtcC5TZWNyZXRzID0gbnVsbDtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdTZWNyZXRzQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLl9zZWNyZXRzXG4gICAgICB9KSk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBTb21ldGltZXMgdGhlIHNlcnZlciBhc2tzIHVzIHRvIHJvbGwgb3VyIHNlY3JldHMuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlS2V5Um9sbGluZ1JlcXVlc3RcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUtleVJvbGxpbmdSZXF1ZXN0KG0pIHtcbiAgICAgIC8vIHdlIGNhbGN1bGF0ZSB0aGUgbmV3IG9uZXMuLi5cbiAgICAgIHZhciBrclJlcyA9IF9LZXlSb2xsaW5nSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xN19fW1wiS2V5Um9sbGluZ0hlbHBlclwiXS5QZXJmb3JtS2V5Um9sbGluZyhtLCB0aGlzLl9zZWNyZXRzKTtcbiAgICAgIHRoaXMuX3NlY3JldHMgPSBrclJlcy5OZXdTZWNyZXRzOyAvLyBhbmQgdXBkYXRlIG91ciBzZWNyZXRzIHdpdGggdGhlbVxuXG4gICAgICB0aGlzLl9zcGlNZXNzYWdlU3RhbXAuU2VjcmV0cyA9IHRoaXMuX3NlY3JldHM7IC8vIGFuZCBvdXIgc3RhbXBcblxuICAgICAgdGhpcy5fc2VuZChrclJlcy5LZXlSb2xsaW5nQ29uZmlybWF0aW9uKTsgLy8gYW5kIHdlIHRlbGwgdGhlIHNlcnZlciB0aGF0IGFsbCBpcyB3ZWxsLlxuXG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdTZWNyZXRzQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLl9zZWNyZXRzXG4gICAgICB9KSk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgUGluUGFkIHNlcnZlciB3aWxsIHNlbmQgdXMgdGhpcyBtZXNzYWdlIHdoZW4gYSBjdXN0b21lciBzaWduYXR1cmUgaXMgcmVxaXJlZC5cbiAgICAvLyBXZSBuZWVkIHRvIGFzayB0aGUgY3VzdG9tZXIgdG8gc2lnbiB0aGUgaW5jb21pbmcgcmVjZWlwdC5cbiAgICAvLyBBbmQgdGhlbiB0ZWxsIHRoZSBwaW5wYWQgd2hldGhlciB0aGUgc2lnbmF0dXJlIGlzIG9rIG9yIG5vdC5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtXCI+PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVTaWduYXR1cmVSZXF1aXJlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlU2lnbmF0dXJlUmVxdWlyZWQobSkge1xuICAgICAgdmFyIGluY29taW5nUG9zUmVmSWQgPSBtLkRhdGEucG9zX3JlZl9pZDtcblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiB8fCB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCB8fCAhdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuUG9zUmVmSWQgPT0gaW5jb21pbmdQb3NSZWZJZCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlJlY2VpdmVkIFNpZ25hdHVyZSBSZXF1aXJlZCBidXQgSSB3YXMgbm90IHdhaXRpbmcgZm9yIG9uZS4gSW5jb21pbmcgUG9zIFJlZiBJRDogXCIuY29uY2F0KGluY29taW5nUG9zUmVmSWQpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNpZ25hdHVyZVJlcXVpcmVkKG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJTaWduYXR1cmVSZXF1aXJlZFwiXShtKSwgXCJBc2sgQ3VzdG9tZXIgdG8gU2lnbiB0aGUgUmVjZWlwdFwiKTtcbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBQaW5QYWQgc2VydmVyIHdpbGwgc2VuZCB1cyB0aGlzIG1lc3NhZ2Ugd2hlbiBhbiBhdXRoIGNvZGUgaXMgcmVxdWlyZWQuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlQXV0aENvZGVSZXF1aXJlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlQXV0aENvZGVSZXF1aXJlZChtKSB7XG4gICAgICB2YXIgaW5jb21pbmdQb3NSZWZJZCA9IG0uRGF0YS5wb3NfcmVmX2lkO1xuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkIHx8ICF0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5Qb3NSZWZJZCA9PSBpbmNvbWluZ1Bvc1JlZklkKSB7XG4gICAgICAgIF9sb2cuaW5mbyhcIlJlY2VpdmVkIEF1dGggQ29kZSBSZXF1aXJlZCBidXQgSSB3YXMgbm90IHdhaXRpbmcgZm9yIG9uZS4gSW5jb21pbmcgUG9zIFJlZiBJRDogXCIuY29uY2F0KGluY29taW5nUG9zUmVmSWQpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwaG9uZUZvckF1dGhSZXF1aXJlZCA9IG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJQaG9uZUZvckF1dGhSZXF1aXJlZFwiXShtKTtcbiAgICAgIHZhciBtc2cgPSBcIkF1dGggQ29kZSBSZXF1aXJlZC4gQ2FsbCBcIi5jb25jYXQocGhvbmVGb3JBdXRoUmVxdWlyZWQuR2V0UGhvbmVOdW1iZXIoKSwgXCIgYW5kIHF1b3RlIG1lcmNoYW50IGlkIFwiKS5jb25jYXQocGhvbmVGb3JBdXRoUmVxdWlyZWQuR2V0TWVyY2hhbnRJZCgpKTtcbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlBob25lRm9yQXV0aFJlcXVpcmVkKHBob25lRm9yQXV0aFJlcXVpcmVkLCBtc2cpO1xuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIFBpblBhZCBzZXJ2ZXIgd2lsbCByZXBseSB0byBvdXIgUHVyY2hhc2VSZXF1ZXN0IHdpdGggYSBQdXJjaGFzZVJlc3BvbnNlLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZVB1cmNoYXNlUmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVB1cmNoYXNlUmVzcG9uc2UobSkge1xuICAgICAgdmFyIGluY29taW5nUG9zUmVmSWQgPSBtLkRhdGEucG9zX3JlZl9pZDtcblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiB8fCB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCB8fCAhdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuUG9zUmVmSWQgPT0gaW5jb21pbmdQb3NSZWZJZCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlJlY2VpdmVkIFB1cmNoYXNlIHJlc3BvbnNlIGJ1dCBJIHdhcyBub3Qgd2FpdGluZyBmb3Igb25lLiBJbmNvbWluZyBQb3MgUmVmIElEOiBcIi5jb25jYXQoaW5jb21pbmdQb3NSZWZJZCwgXCJcXFwiXCIpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFRILTFBLCBUSC0yQVxuXG5cbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkNvbXBsZXRlZChtLkdldFN1Y2Nlc3NTdGF0ZSgpLCBtLCBcIlB1cmNoYXNlIFRyYW5zYWN0aW9uIEVuZGVkLlwiKTsgLy8gVEgtNkEsIFRILTZFXG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBQaW5QYWQgc2VydmVyIHdpbGwgcmVwbHkgdG8gb3VyIENhc2hvdXRPbmx5UmVxdWVzdCB3aXRoIGEgQ2FzaG91dE9ubHlSZXNwb25zZS5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtXCI+PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVDYXNob3V0T25seVJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVDYXNob3V0T25seVJlc3BvbnNlKG0pIHtcbiAgICAgIHZhciBpbmNvbWluZ1Bvc1JlZklkID0gbS5EYXRhLnBvc19yZWZfaWQ7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gfHwgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuRmluaXNoZWQgfHwgIXRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlBvc1JlZklkID09IGluY29taW5nUG9zUmVmSWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZWNlaXZlZCBDYXNob3V0IFJlc3BvbnNlIGJ1dCBJIHdhcyBub3Qgd2FpdGluZyBmb3Igb25lLiBJbmNvbWluZyBQb3MgUmVmIElEOiBcIi5jb25jYXQoaW5jb21pbmdQb3NSZWZJZCkpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVEgtMUEsIFRILTJBXG5cblxuICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuQ29tcGxldGVkKG0uR2V0U3VjY2Vzc1N0YXRlKCksIG0sIFwiQ2FzaG91dCBUcmFuc2FjdGlvbiBFbmRlZC5cIik7IC8vIFRILTZBLCBUSC02RVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgUGluUGFkIHNlcnZlciB3aWxsIHJlcGx5IHRvIG91ciBNb3RvUHVyY2hhc2VSZXF1ZXN0IHdpdGggYSBNb3RvUHVyY2hhc2VSZXNwb25zZS5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtXCI+PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVNb3RvUHVyY2hhc2VSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlTW90b1B1cmNoYXNlUmVzcG9uc2UobSkge1xuICAgICAgdmFyIGluY29taW5nUG9zUmVmSWQgPSBtLkRhdGEucG9zX3JlZl9pZDtcblxuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiB8fCB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCB8fCAhdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuUG9zUmVmSWQgPT0gaW5jb21pbmdQb3NSZWZJZCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlJlY2VpdmVkIE1vdG8gUmVzcG9uc2UgYnV0IEkgd2FzIG5vdCB3YWl0aW5nIGZvciBvbmUuIEluY29taW5nIFBvcyBSZWYgSUQ6IFwiLmNvbmNhdChpbmNvbWluZ1Bvc1JlZklkKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUSC0xQSwgVEgtMkFcblxuXG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5Db21wbGV0ZWQobS5HZXRTdWNjZXNzU3RhdGUoKSwgbSwgXCJNb3RvIFRyYW5zYWN0aW9uIEVuZGVkLlwiKTsgLy8gVEgtNkEsIFRILTZFXG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBQaW5QYWQgc2VydmVyIHdpbGwgcmVwbHkgdG8gb3VyIFJlZnVuZFJlcXVlc3Qgd2l0aCBhIFJlZnVuZFJlc3BvbnNlLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZVJlZnVuZFJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVSZWZ1bmRSZXNwb25zZShtKSB7XG4gICAgICB2YXIgaW5jb21pbmdQb3NSZWZJZCA9IG0uRGF0YS5wb3NfcmVmX2lkO1xuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkIHwgIXRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlBvc1JlZklkID09IGluY29taW5nUG9zUmVmSWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZWNlaXZlZCBSZWZ1bmQgcmVzcG9uc2UgYnV0IEkgd2FzIG5vdCB3YWl0aW5nIGZvciB0aGlzIG9uZS4gSW5jb21pbmcgUG9zIFJlZiBJRDogXCIuY29uY2F0KGluY29taW5nUG9zUmVmSWQpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFRILTFBLCBUSC0yQVxuXG5cbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkNvbXBsZXRlZChtLkdldFN1Y2Nlc3NTdGF0ZSgpLCBtLCBcIlJlZnVuZCBUcmFuc2FjdGlvbiBFbmRlZC5cIik7IC8vIFRILTZBLCBUSC02RVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBUT0RPOiBIYW5kbGUgdGhlIFNldHRsZW1lbnQgUmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSB0aGUgUGluUGFkXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJIYW5kbGVTZXR0bGVSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBIYW5kbGVTZXR0bGVSZXNwb25zZShtKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkKSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiUmVjZWl2ZWQgU2V0dGxlIHJlc3BvbnNlIGJ1dCBJIHdhcyBub3Qgd2FpdGluZyBmb3Igb25lLiBcIi5jb25jYXQobS5EZWNyeXB0ZWRKc29uKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUSC0xQSwgVEgtMkFcblxuXG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5Db21wbGV0ZWQobS5HZXRTdWNjZXNzU3RhdGUoKSwgbSwgXCJTZXR0bGUgVHJhbnNhY3Rpb24gRW5kZWQuXCIpOyAvLyBUSC02QSwgVEgtNkVcblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gSGFuZGxlIHRoZSBTZXR0bGVtZW50IEVucXVpcnkgUmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSB0aGUgUGluUGFkXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlU2V0dGxlbWVudEVucXVpcnlSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlU2V0dGxlbWVudEVucXVpcnlSZXNwb25zZShtKSB7XG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkKSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiUmVjZWl2ZWQgU2V0dGxlbWVudCBFbnF1aXJ5IHJlc3BvbnNlIGJ1dCBJIHdhcyBub3Qgd2FpdGluZyBmb3Igb25lLiBcIi5jb25jYXQobS5EZWNyeXB0ZWRKc29uKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUSC0xQSwgVEgtMkFcblxuXG4gICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5Db21wbGV0ZWQobS5HZXRTdWNjZXNzU3RhdGUoKSwgbSwgXCJTZXR0bGVtZW50IEVucXVpcnkgRW5kZWQuXCIpOyAvLyBUSC02QSwgVEgtNkVcblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gU29tZXRpbWVzIHdlIHJlY2VpdmUgZXZlbnQgdHlwZSBcImVycm9yXCIgZnJvbSB0aGUgc2VydmVyLCBzdWNoIGFzIHdoZW4gY2FsbGluZyBjYW5jZWxfdHJhbnNhY3Rpb24gYW5kIHRoZXJlIGlzIG5vIHRyYW5zYWN0aW9uIGluIHByb2dyZXNzLlxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICAvLyA8cGFyYW0gbmFtZT1cIm1cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUVycm9yRXZlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUVycm9yRXZlbnQobSkge1xuICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiAmJiAhdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuRmluaXNoZWQgJiYgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuQXR0ZW1wdGluZ1RvQ2FuY2VsICYmIG0uR2V0RXJyb3IoKSA9PSBcIk5PX1RSQU5TQUNUSU9OXCIpIHtcbiAgICAgICAgLy8gVEgtMkVcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJXYXMgdHJ5aW5nIHRvIGNhbmNlbCBhIHRyYW5zYWN0aW9uIGJ1dCB0aGVyZSBpcyBub3RoaW5nIHRvIGNhbmNlbC4gQ2FsbGluZyBHTFQgdG8gc2VlIHdoYXQncyB1cFwiKTtcblxuICAgICAgICB0aGlzLl9jYWxsR2V0TGFzdFRyYW5zYWN0aW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlJlY2VpdmVkIEVycm9yIEV2ZW50IEJ1dCBEb24ndCBrbm93IHdoYXQgdG8gZG8gd2l0aCBpdC4gXCIuY29uY2F0KG0uRGVjcnlwdGVkSnNvbikpO1xuICAgICAgfVxuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gV2hlbiB0aGUgUGluUGFkIHJldHVybnMgdG8gdXMgd2hhdCB0aGUgTGFzdCBUcmFuc2FjdGlvbiB3YXMuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlR2V0TGFzdFRyYW5zYWN0aW9uUmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlKG0pIHtcbiAgICAgIHZhciB0eFN0YXRlID0gdGhpcy5DdXJyZW50VHhGbG93U3RhdGU7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gfHwgdHhTdGF0ZS5GaW5pc2hlZCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlJlY2VpdmVkIGdsdCByZXNwb25zZSBidXQgd2Ugd2VyZSBub3QgaW4gdGhlIG1pZGRsZSBvZiBhIHR4LiBpZ25vcmluZy5cIik7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXR4U3RhdGUuQXdhaXRpbmdHbHRSZXNwb25zZSkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcInJlY2VpdmVkIGEgZ2x0IHJlc3BvbnNlIGJ1dCB3ZSBoYWQgbm90IGFza2VkIGZvciBvbmUgd2l0aGluIHRoaXMgdHJhbnNhY3Rpb24uIFBlcmhhcHMgbGVmdG92ZXIgZnJvbSBwcmV2aW91cyBvbmUuIGlnbm9yaW5nLlwiKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0eFN0YXRlLkxhc3RHbHRSZXF1ZXN0SWQgIT0gbS5JZCkge1xuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcInJlY2VpdmVkIGEgZ2x0IHJlc3BvbnNlIGJ1dCB0aGUgbWVzc2FnZSBpZCBkb2VzIG5vdCBtYXRjaCB0aGUgZ2x0IHJlcXVlc3QgdGhhdCB3ZSBzZW50LiBzdHJhbmdlLiBpZ25vcmluZy5cIik7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBUSC00IFdlIHdlcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHRyYW5zYWN0aW9uLlxuICAgICAgLy8gTGV0J3MgYXR0ZW1wdCByZWNvdmVyeS4gVGhpcyBpcyBzdGVwIDQgb2YgVHJhbnNhY3Rpb24gUHJvY2Vzc2luZyBIYW5kbGluZ1xuXG5cbiAgICAgIHRoaXMuX2xvZy5pbmZvKFwiR290IExhc3QgVHJhbnNhY3Rpb24uLlwiKTtcblxuICAgICAgdHhTdGF0ZS5Hb3RHbHRSZXNwb25zZSgpO1xuICAgICAgdmFyIGd0bFJlc3BvbnNlID0gbmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfX1tcIkdldExhc3RUcmFuc2FjdGlvblJlc3BvbnNlXCJdKG0pO1xuICAgICAgdHhTdGF0ZS5HTFRSZXNwb25zZVBvc1JlZklkID0gZ3RsUmVzcG9uc2UuR2V0UG9zUmVmSWQoKTtcblxuICAgICAgaWYgKCFndGxSZXNwb25zZS5XYXNSZXRyaWV2ZWRTdWNjZXNzZnVsbHkoKSkge1xuICAgICAgICBpZiAoZ3RsUmVzcG9uc2UuSXNTdGlsbEluUHJvZ3Jlc3ModHhTdGF0ZS5Qb3NSZWZJZCkpIHtcbiAgICAgICAgICAvLyBUSC00RSAtIE9wZXJhdGlvbiBJbiBQcm9ncmVzc1xuICAgICAgICAgIGlmIChndGxSZXNwb25zZS5Jc1dhaXRpbmdGb3JTaWduYXR1cmVSZXNwb25zZSgpICYmICF0eFN0YXRlLkF3YWl0aW5nU2lnbmF0dXJlQ2hlY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiRWZ0cG9zIGlzIHdhaXRpbmcgZm9yIHVzIHRvIHNlbmQgaXQgc2lnbmF0dXJlIGFjY2VwdC9kZWNsaW5lLCBidXQgd2Ugd2VyZSBub3QgYXdhcmUgb2YgdGhpcy4gXCIgKyBcIlRoZSB1c2VyIGNhbiBvbmx5IHJlYWxseSBkZWNsaW5lIGF0IHRoaXMgc3RhZ2UgYXMgdGhlcmUgaXMgbm8gcmVjZWlwdCB0byBwcmludCBmb3Igc2lnbmluZy5cIik7XG5cbiAgICAgICAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLlNpZ25hdHVyZVJlcXVpcmVkKG5ldyBfUHVyY2hhc2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE5X19bXCJTaWduYXR1cmVSZXF1aXJlZFwiXSh0eFN0YXRlLlBvc1JlZklkLCBtLklkLCBcIk1JU1NJTkcgUkVDRUlQVFxcbiBERUNMSU5FIEFORCBUUlkgQUdBSU4uXCIpLCBcIlJlY292ZXJlZCBpbiBTaWduYXR1cmUgUmVxdWlyZWQgYnV0IHdlIGRvbid0IGhhdmUgcmVjZWlwdC4gWW91IG1heSBEZWNsaW5lIHRoZW4gUmV0cnkuXCIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZ3RsUmVzcG9uc2UuSXNXYWl0aW5nRm9yQXV0aENvZGUoKSAmJiAhdHhTdGF0ZS5Bd2FpdGluZ1Bob25lRm9yQXV0aCkge1xuICAgICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJFZnRwb3MgaXMgd2FpdGluZyBmb3IgdXMgdG8gc2VuZCBpdCBhdXRoIGNvZGUsIGJ1dCB3ZSB3ZXJlIG5vdCBhd2FyZSBvZiB0aGlzLiBcIiArIFwiV2UgY2FuIG9ubHkgY2FuY2VsIHRoZSB0cmFuc2FjdGlvbiBhdCB0aGlzIHN0YWdlIGFzIHdlIGRvbid0IGhhdmUgZW5vdWdoIGluZm9ybWF0aW9uIHRvIHJlY292ZXIgZnJvbSB0aGlzLlwiKTtcblxuICAgICAgICAgICAgdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuUGhvbmVGb3JBdXRoUmVxdWlyZWQobmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfX1tcIlBob25lRm9yQXV0aFJlcXVpcmVkXCJdKHR4U3RhdGUuUG9zUmVmSWQsIG0uSWQsIFwiVU5LTk9XTlwiLCBcIlVOS05PV05cIiksIFwiUmVjb3ZlcmVkIG1pZCBQaG9uZS1Gb3ItQXV0aCBidXQgZG9uJ3QgaGF2ZSBkZXRhaWxzLiBZb3UgbWF5IENhbmNlbCB0aGVuIFJldHJ5LlwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJPcGVyYXRpb24gc3RpbGwgaW4gcHJvZ3Jlc3MuLi4gc3RheSB3YWl0aW5nLlwiKTsgLy8gTm8gbmVlZCB0byBwdWJsaXNoIHR4Rmxvd1N0YXRlQ2hhbmdlZC4gQ2FuIHJldHVybjtcblxuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGd0bFJlc3BvbnNlLldhc1RpbWVPdXRPZlN5bmNFcnJvcigpKSB7XG4gICAgICAgICAgLy8gTGV0J3Mgbm90IGdpdmUgdXAgYmFzZWQgb24gYSBUT09TIGVycm9yLlxuICAgICAgICAgIC8vIExldCdzIGxvZyBpdCwgYW5kIGlnbm9yZSBpdC4gXG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJUaW1lLU91dC1PZi1TeW5jIGVycm9yIGluIEdldCBMYXN0IFRyYW5zYWN0aW9uIHJlc3BvbnNlLiBMZXQncyBpZ25vcmUgaXQgYW5kIHdlJ2xsIHRyeSBhZ2Fpbi5cIik7IC8vIE5vIG5lZWQgdG8gcHVibGlzaCB0eEZsb3dTdGF0ZUNoYW5nZWQuIENhbiByZXR1cm47XG5cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUSC00WCAtIFVuZXhwZWN0ZWQgUmVzcG9uc2Ugd2hlbiByZWNvdmVyaW5nXG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJVbmV4cGVjdGVkIFJlc3BvbnNlIGluIEdldCBMYXN0IFRyYW5zYWN0aW9uIGR1cmluZyAtIFJlY2VpdmVkIHBvc1JlZklkOlwiLmNvbmNhdChndGxSZXNwb25zZS5HZXRQb3NSZWZJZCgpLCBcIiBFcnJvcjpcIikuY29uY2F0KG0uR2V0RXJyb3IoKSwgXCIuIElnbm9yaW5nLlwiKSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eFN0YXRlLlR5cGUgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiVHJhbnNhY3Rpb25UeXBlXCJdLkdldExhc3RUcmFuc2FjdGlvbikge1xuICAgICAgICAgIC8vIFRISVMgV0FTIEEgUExBSU4gR0VUIExBU1QgVFJBTlNBQ1RJT04gUkVRVUVTVCwgTk9UIEZPUiBSRUNPVkVSWSBQVVJQT1NFUy5cbiAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlJldHJpZXZlZCBMYXN0IFRyYW5zYWN0aW9uIGFzIGFza2VkIGRpcmVjdGx5IGJ5IHRoZSB1c2VyLlwiKTtcblxuICAgICAgICAgIGd0bFJlc3BvbnNlLkNvcHlNZXJjaGFudFJlY2VpcHRUb0N1c3RvbWVyUmVjZWlwdCgpO1xuICAgICAgICAgIHR4U3RhdGUuQ29tcGxldGVkKG0uR2V0U3VjY2Vzc1N0YXRlKCksIG0sIFwiTGFzdCBUcmFuc2FjdGlvbiBSZXRyaWV2ZWRcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVEgtNEEgLSBMZXQncyB0cnkgdG8gbWF0Y2ggdGhlIHJlY2VpdmVkIGxhc3QgdHJhbnNhY3Rpb24gYWdhaW5zdCB0aGUgY3VycmVudCB0cmFuc2FjdGlvblxuICAgICAgICAgIHZhciBzdWNjZXNzU3RhdGUgPSB0aGlzLkdsdE1hdGNoKGd0bFJlc3BvbnNlLCB0eFN0YXRlLlBvc1JlZklkLCB0eFN0YXRlLkFtb3VudENlbnRzLCB0eFN0YXRlLlJlcXVlc3RUaW1lKTtcblxuICAgICAgICAgIGlmIChzdWNjZXNzU3RhdGUgPT0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJTdWNjZXNzU3RhdGVcIl0uVW5rbm93bikge1xuICAgICAgICAgICAgLy8gVEgtNE46IERpZG4ndCBNYXRjaCBvdXIgdHJhbnNhY3Rpb24uIENvbnNpZGVyIFVua25vd24gU3RhdGUuXG4gICAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkRpZCBub3QgbWF0Y2ggdHJhbnNhY3Rpb24uXCIpO1xuXG4gICAgICAgICAgICB0eFN0YXRlLlVua25vd25Db21wbGV0ZWQoXCJGYWlsZWQgdG8gcmVjb3ZlciBUcmFuc2FjdGlvbiBTdGF0dXMuIENoZWNrIEVGVFBPUy4gXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUSC00WTogV2UgTWF0Y2hlZCwgdHJhbnNhY3Rpb24gZmluaXNoZWQsIGxldCdzIHVwZGF0ZSBvdXJzZWx2ZXNcbiAgICAgICAgICAgIGd0bFJlc3BvbnNlLkNvcHlNZXJjaGFudFJlY2VpcHRUb0N1c3RvbWVyUmVjZWlwdCgpO1xuICAgICAgICAgICAgdHhTdGF0ZS5Db21wbGV0ZWQoc3VjY2Vzc1N0YXRlLCBtLCBcIlRyYW5zYWN0aW9uIEVuZGVkLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0eFN0YXRlXG4gICAgICB9KSk7XG4gICAgfSAvL1doZW4gdGhlIHRyYW5zYWN0aW9uIGNhbmNlbCByZXNwb25zZSBpcyByZXR1cm5lZC5cblxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVDYW5jZWxUcmFuc2FjdGlvblJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVDYW5jZWxUcmFuc2FjdGlvblJlc3BvbnNlKG0pIHtcbiAgICAgIHZhciBpbmNvbWluZ1Bvc1JlZklkID0gbS5EYXRhLnBvc19yZWZfaWQ7XG4gICAgICB2YXIgdHhTdGF0ZSA9IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlO1xuICAgICAgdmFyIGNhbmNlbFJlc3BvbnNlID0gbmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfX1tcIkNhbmNlbFRyYW5zYWN0aW9uUmVzcG9uc2VcIl0obSk7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gfHwgdHhTdGF0ZS5GaW5pc2hlZCB8fCAhdHhTdGF0ZS5Qb3NSZWZJZCA9PSBpbmNvbWluZ1Bvc1JlZklkKSB7XG4gICAgICAgIGlmICghY2FuY2VsUmVzcG9uc2UuV2FzVHhuUGFzdFBvaW50T2ZOb1JldHVybigpKSB7XG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZWNlaXZlZCBDYW5jZWwgUmVxdWlyZWQgYnV0IEkgd2FzIG5vdCB3YWl0aW5nIGZvciBvbmUuIEluY29taW5nIFBvcyBSZWYgSUQ6IFwiLmNvbmNhdChpbmNvbWluZ1Bvc1JlZklkKSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGNhbmNlbFJlc3BvbnNlLlN1Y2Nlc3MpIHJldHVybjtcblxuICAgICAgdGhpcy5fbG9nLndhcm4oXCJGYWlsZWQgdG8gY2FuY2VsIHRyYW5zYWN0aW9uOiByZWFzb249XCIgKyBjYW5jZWxSZXNwb25zZS5HZXRFcnJvclJlYXNvbigpICsgXCIsIGRldGFpbD1cIiArIGNhbmNlbFJlc3BvbnNlLkdldEVycm9yRGV0YWlsKCkpO1xuXG4gICAgICB0eFN0YXRlLkNhbmNlbEZhaWxlZChcIkZhaWxlZCB0byBjYW5jZWwgdHJhbnNhY3Rpb246IFwiICsgY2FuY2VsUmVzcG9uc2UuR2V0RXJyb3JEZXRhaWwoKSArIFwiLiBDaGVjayBFRlRQT1MuXCIpO1xuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0eFN0YXRlXG4gICAgICB9KSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVTZXRQb3NJbmZvUmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZVNldFBvc0luZm9SZXNwb25zZShtKSB7XG4gICAgICB2YXIgcmVzcG9uc2UgPSBuZXcgX1Bvc0luZm9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzE1X19bXCJTZXRQb3NJbmZvUmVzcG9uc2VcIl0obSk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5pc1N1Y2Nlc3MoKSkge1xuICAgICAgICB0aGlzLl9oYXNTZXRJbmZvID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIlNldHRpbmcgUE9TIGluZm8gc3VjY2Vzc2Z1bFwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2xvZy53YXJuKFwiU2V0dGluZyBQT1MgaW5mbyBmYWlsZWQ6IHJlYXNvbj1cIiArIHJlc3BvbnNlLmdldEVycm9yUmVhc29uKCkgKyBcIiwgZGV0YWlsPVwiICsgcmVzcG9uc2UuZ2V0RXJyb3JEZXRhaWwoKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zdGFydFRyYW5zYWN0aW9uTW9uaXRvcmluZ1RocmVhZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc3RhcnRUcmFuc2FjdGlvbk1vbml0b3JpbmdUaHJlYWQoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgbmVlZHNQdWJsaXNoaW5nID0gZmFsc2U7XG4gICAgICB2YXIgdHhTdGF0ZSA9IHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlO1xuXG4gICAgICBpZiAodGhpcy5DdXJyZW50RmxvdyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uICYmICF0eFN0YXRlLkZpbmlzaGVkKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHR4U3RhdGU7XG5cbiAgICAgICAgaWYgKHN0YXRlLkF0dGVtcHRpbmdUb0NhbmNlbCAmJiBEYXRlLm5vdygpID4gc3RhdGUuQ2FuY2VsQXR0ZW1wdFRpbWUgKyB0aGlzLl9tYXhXYWl0Rm9yQ2FuY2VsVHgpIHtcbiAgICAgICAgICAvLyBUSC0yVCAtIHRvbyBsb25nIHNpbmNlIGNhbmNlbCBhdHRlbXB0IC0gQ29uc2lkZXIgdW5rbm93blxuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiQmVlbiB0b28gbG9uZyB3YWl0aW5nIGZvciB0cmFuc2FjdGlvbiB0byBjYW5jZWwuXCIpO1xuXG4gICAgICAgICAgdHhTdGF0ZS5Vbmtub3duQ29tcGxldGVkKFwiV2FpdGVkIGxvbmcgZW5vdWdoIGZvciBDYW5jZWwgVHJhbnNhY3Rpb24gcmVzdWx0LiBDaGVjayBFRlRQT1MuIFwiKTtcbiAgICAgICAgICBuZWVkc1B1Ymxpc2hpbmcgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLlJlcXVlc3RTZW50ICYmIERhdGUubm93KCkgPiBzdGF0ZS5MYXN0U3RhdGVSZXF1ZXN0VGltZSArIHRoaXMuX2NoZWNrT25UeEZyZXF1ZW5jeSkge1xuICAgICAgICAgIC8vIFRILTFULCBUSC00VCAtIEl0J3MgYmVlbiBhIHdoaWxlIHNpbmNlIHdlIHJlY2VpdmVkIGFuIHVwZGF0ZSwgbGV0J3MgY2FsbCBhIEdMVFxuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiQ2hlY2tpbmcgb24gb3VyIHRyYW5zYWN0aW9uLiBMYXN0IHdlIGFza2VkIHdhcyBhdCBcIi5jb25jYXQoc3RhdGUuTGFzdFN0YXRlUmVxdWVzdFRpbWUsIFwiLi4uXCIpKTtcblxuICAgICAgICAgIHRoaXMuX2NhbGxHZXRMYXN0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobmVlZHNQdWJsaXNoaW5nKSB7XG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX3N0YXJ0VHJhbnNhY3Rpb25Nb25pdG9yaW5nVGhyZWFkKCk7XG4gICAgICB9LCB0aGlzLl90eE1vbml0b3JDaGVja0ZyZXF1ZW5jeSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlByaW50aW5nUmVzcG9uc2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gUHJpbnRpbmdSZXNwb25zZShtKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuIFBsZWFzZSBvdmVyd3JpdGUgdGhpcyBtZXRob2QgaW4geW91ciBQT1MnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiVGVybWluYWxTdGF0dXNSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlKG0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4gUGxlYXNlIG92ZXJ3cml0ZSB0aGlzIG1ldGhvZCBpbiB5b3VyIFBPUycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJCYXR0ZXJ5TGV2ZWxDaGFuZ2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEJhdHRlcnlMZXZlbENoYW5nZWQobSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLiBQbGVhc2Ugb3ZlcndyaXRlIHRoaXMgbWV0aG9kIGluIHlvdXIgUE9TJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVQcmludGluZ1Jlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVQcmludGluZ1Jlc3BvbnNlKG0pIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5QcmludGluZ1Jlc3BvbnNlID09PSAnZnVuY3Rpb24nKSB0aGlzLlByaW50aW5nUmVzcG9uc2UobSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlKG0pIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5UZXJtaW5hbFN0YXR1c1Jlc3BvbnNlID09PSAnZnVuY3Rpb24nKSB0aGlzLlRlcm1pbmFsU3RhdHVzUmVzcG9uc2UobSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVCYXR0ZXJ5TGV2ZWxDaGFuZ2VkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVCYXR0ZXJ5TGV2ZWxDaGFuZ2VkKG0pIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5CYXR0ZXJ5TGV2ZWxDaGFuZ2VkID09PSAnZnVuY3Rpb24nKSB0aGlzLkJhdHRlcnlMZXZlbENoYW5nZWQobSk7XG4gICAgfSAvLyBlbmRyZWdpb25cbiAgICAvLyByZWdpb24gSW50ZXJuYWxzIGZvciBDb25uZWN0aW9uIE1hbmFnZW1lbnRcblxuICB9LCB7XG4gICAga2V5OiBcIl9yZXNldENvbm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc2V0Q29ubigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAvLyBTZXR1cCB0aGUgQ29ubmVjdGlvblxuICAgICAgdGhpcy5fY29ubiA9IG5ldyBfQ29ubmVjdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fW1wiQ29ubmVjdGlvblwiXSgpO1xuXG4gICAgICBpZiAodGhpcy5faXNVc2luZ0h0dHBzKCkgfHwgdGhpcy5fZm9yY2VTZWN1cmVXZWJTb2NrZXRzKSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiU2VjdXJlIGNvbm5lY3Rpb24gZGV0ZWN0ZWQuXCIpO1xuXG4gICAgICAgIHRoaXMuX2VmdHBvc0FkZHJlc3MgPSB0aGlzLl9lZnRwb3NBZGRyZXNzLnJlcGxhY2UoXCJ3czovL1wiLCBcIndzczovL1wiKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY29ubi5BZGRyZXNzID0gdGhpcy5fZWZ0cG9zQWRkcmVzczsgLy8gUmVnaXN0ZXIgb3VyIEV2ZW50IEhhbmRsZXJzXG5cbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0Nvbm5lY3Rpb25TdGF0dXNDaGFuZ2VkJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5fb25TcGlDb25uZWN0aW9uU3RhdHVzQ2hhbmdlZChlLmRldGFpbCk7XG4gICAgICB9KTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ01lc3NhZ2VSZWNlaXZlZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuX29uU3BpTWVzc2FnZVJlY2VpdmVkKGUuZGV0YWlsKTtcbiAgICAgIH0pO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRXJyb3JSZWNlaXZlZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuX29uV3NFcnJvclJlY2VpdmVkKGUuZGV0YWlsKTtcbiAgICAgIH0pO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgY29ubmVjdGlvbiBzdGF0dXMgY2hhbmdlcy5cbiAgICAvLyBZb3UgYXJlIGVuY291cmFnZWQgdG8gZGlzcGxheSBhIFBpblBhZCBDb25uZWN0aW9uIEluZGljYXRvciBvbiB0aGUgUE9TIHNjcmVlbi5cbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJzdGF0ZVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfb25TcGlDb25uZWN0aW9uU3RhdHVzQ2hhbmdlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25TcGlDb25uZWN0aW9uU3RhdHVzQ2hhbmdlZChzdGF0ZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHN3aXRjaCAoc3RhdGUuQ29ubmVjdGlvblN0YXRlKSB7XG4gICAgICAgIGNhc2UgX0Nvbm5lY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX1tcIkNvbm5lY3Rpb25TdGF0ZVwiXS5Db25uZWN0aW5nOlxuICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiSSdtIENvbm5lY3RpbmcgdG8gdGhlIEVmdHBvcyBhdCBcIi5jb25jYXQodGhpcy5fZWZ0cG9zQWRkcmVzcywgXCIuLi5cIikpO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfQ29ubmVjdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fW1wiQ29ubmVjdGlvblN0YXRlXCJdLkNvbm5lY3RlZDpcbiAgICAgICAgICB0aGlzLl9yZXRyaWVzU2luY2VMYXN0RGV2aWNlQWRkcmVzc1Jlc29sdXRpb24gPSAwO1xuXG4gICAgICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5QYWlyaW5nICYmIHRoaXMuQ3VycmVudFN0YXR1cyA9PSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuQ3VycmVudFBhaXJpbmdGbG93U3RhdGUuTWVzc2FnZSA9IFwiUmVxdWVzdGluZyB0byBQYWlyLi4uXCI7XG4gICAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnUGFpcmluZ0Zsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgICAgICAgIGRldGFpbDogdGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdmFyIHByID0gX1BhaXJpbmdIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX1tcIlBhaXJpbmdIZWxwZXJcIl0uTmV3UGFpclJlcXVlc3QoKTtcblxuICAgICAgICAgICAgdGhpcy5fc2VuZChwci5Ub01lc3NhZ2UoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiSSdtIENvbm5lY3RlZCB0byBcIi5jb25jYXQodGhpcy5fZWZ0cG9zQWRkcmVzcywgXCIuLi5cIikpO1xuXG4gICAgICAgICAgICB0aGlzLl9zcGlNZXNzYWdlU3RhbXAuU2VjcmV0cyA9IHRoaXMuX3NlY3JldHM7XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0UGVyaW9kaWNQaW5nKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfQ29ubmVjdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fW1wiQ29ubmVjdGlvblN0YXRlXCJdLkRpc2Nvbm5lY3RlZDpcbiAgICAgICAgICAvLyBMZXQncyByZXNldCBzb21lIGxpZmVjeWNsZSByZWxhdGVkIHRvIGNvbm5lY3Rpb24gc3RhdGUsIHJlYWR5IGZvciBuZXh0IGNvbm5lY3Rpb25cbiAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkknbSBkaXNjb25uZWN0ZWQgZnJvbSBcIi5jb25jYXQodGhpcy5fZWZ0cG9zQWRkcmVzcywgXCIuLi5cIikpO1xuXG4gICAgICAgICAgdGhpcy5fbW9zdFJlY2VudFBpbmdTZW50ID0gbnVsbDtcbiAgICAgICAgICB0aGlzLl9tb3N0UmVjZW50UG9uZ1JlY2VpdmVkID0gbnVsbDtcbiAgICAgICAgICB0aGlzLl9taXNzZWRQb25nc0NvdW50ID0gMDtcblxuICAgICAgICAgIHRoaXMuX3N0b3BQZXJpb2RpY1BpbmcoKTtcblxuICAgICAgICAgIGlmICh0aGlzLkN1cnJlbnRTdGF0dXMgIT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpU3RhdHVzXCJdLlVucGFpcmVkKSB7XG4gICAgICAgICAgICB0aGlzLkN1cnJlbnRTdGF0dXMgPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uUGFpcmVkQ29ubmVjdGluZztcblxuICAgICAgICAgICAgaWYgKHRoaXMuQ3VycmVudEZsb3cgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbiAmJiAhdGhpcy5DdXJyZW50VHhGbG93U3RhdGUuRmluaXNoZWQpIHtcbiAgICAgICAgICAgICAgLy8gd2UncmUgaW4gdGhlIG1pZGRsZSBvZiBhIHRyYW5zYWN0aW9uLCBqdXN0IHNvIHlvdSBrbm93IVxuICAgICAgICAgICAgICAvLyBUSC0xRFxuICAgICAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkxvc3QgY29ubmVjdGlvbiBpbiB0aGUgbWlkZGxlIG9mIGEgdHJhbnNhY3Rpb24uLi5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9jb25uID09IG51bGwpIHJldHVybjsgLy8gVGhpcyBtZWFucyB0aGUgaW5zdGFuY2UgaGFzIGJlZW4gZGlzcG9zZWQuIEFib3J0aW5nLlxuXG4gICAgICAgICAgICBpZiAodGhpcy5fYXV0b0FkZHJlc3NSZXNvbHV0aW9uRW5hYmxlZCkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5fcmV0cmllc1NpbmNlTGFzdERldmljZUFkZHJlc3NSZXNvbHV0aW9uID49IHRoaXMuX3JldHJpZXNCZWZvcmVSZXNvbHZpbmdEZXZpY2VBZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXV0b1Jlc29sdmVFZnRwb3NBZGRyZXNzKCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9yZXRyaWVzU2luY2VMYXN0RGV2aWNlQWRkcmVzc1Jlc29sdXRpb24gPSAwO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JldHJpZXNTaW5jZUxhc3REZXZpY2VBZGRyZXNzUmVzb2x1dGlvbiArPSAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiV2lsbCB0cnkgdG8gcmVjb25uZWN0IGluIFwiLmNvbmNhdCh0aGlzLl9zbGVlcEJlZm9yZVJlY29ubmVjdE1zLCBcIm1zLi4uXCIpKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGlmIChfdGhpczMuQ3VycmVudFN0YXR1cyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIG5vbi1ibG9ja2luZ1xuICAgICAgICAgICAgICAgIGlmIChfdGhpczMuX2Nvbm4pIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzMy5fY29ubi5Db25uZWN0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCB0aGlzLl9zbGVlcEJlZm9yZVJlY29ubmVjdE1zKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuQ3VycmVudEZsb3cgPT0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fW1wiU3BpRmxvd1wiXS5QYWlyaW5nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5DdXJyZW50UGFpcmluZ0Zsb3dTdGF0ZS5GaW5pc2hlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fcmV0cmllc1NpbmNlTGFzdFBhaXJpbmcgPj0gdGhpcy5fcmV0cmllc0JlZm9yZVBhaXJpbmcpIHtcbiAgICAgICAgICAgICAgdGhpcy5fcmV0cmllc1NpbmNlTGFzdFBhaXJpbmcgPSAwO1xuXG4gICAgICAgICAgICAgIHRoaXMuX2xvZy53YXJuKFwiTG9zdCBDb25uZWN0aW9uIGR1cmluZyBwYWlyaW5nLlwiKTtcblxuICAgICAgICAgICAgICB0aGlzLl9vblBhaXJpbmdGYWlsZWQoKTtcblxuICAgICAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnUGFpcmluZ0Zsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRQYWlyaW5nRmxvd1N0YXRlXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJXaWxsIHRyeSB0byByZS1wYWlyIGluIFwiLmNvbmNhdCh0aGlzLl9zbGVlcEJlZm9yZVJlY29ubmVjdE1zLCBcIm1zIC4uLlwiKSk7XG5cbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzMy5DdXJyZW50U3RhdHVzICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5QYWlyZWRDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgbm9uLWJsb2NraW5nXG4gICAgICAgICAgICAgICAgICBpZiAoX3RoaXMzLl9jb25uKSBfdGhpczMuX2Nvbm4uQ29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIF90aGlzMy5fcmV0cmllc1NpbmNlTGFzdFBhaXJpbmcgKz0gMTtcbiAgICAgICAgICAgICAgfSwgdGhpcy5fc2xlZXBCZWZvcmVSZWNvbm5lY3RNcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gc3RhdGU6ICcgKyBzdGF0ZSk7XG4gICAgICB9XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGlzIGlzIGFuIGltcG9ydGFudCBwaWVjZSBvZiB0aGUgcHV6emxlLiBJdCdzIGEgYmFja2dyb3VuZCB0aHJlYWQgdGhhdCBwZXJpb2RpY2FsbHlcbiAgICAvLyBzZW5kcyBQaW5ncyB0byB0aGUgc2VydmVyLiBJZiBpdCBkb2Vzbid0IHJlY2VpdmUgUG9uZ3MsIGl0IGNvbnNpZGVycyB0aGUgY29ubmVjdGlvbiBhcyBicm9rZW5cbiAgICAvLyBzbyBpdCBkaXNjb25uZWN0cy4gXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3N0YXJ0UGVyaW9kaWNQaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zdGFydFBlcmlvZGljUGluZygpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB0aGlzLl9zdG9wUGVyaW9kaWNQaW5nKCk7XG5cbiAgICAgIHRoaXMuX3BlcmlvZGljUGluZ1RocmVhZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzNC5fcGVyaW9kaWNQaW5nKCk7XG4gICAgICB9LCB0aGlzLl9waW5nRnJlcXVlbmN5KTtcblxuICAgICAgdGhpcy5fcGVyaW9kaWNQaW5nKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9wZXJpb2RpY1BpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3BlcmlvZGljUGluZygpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAvLyB3aGlsZSBpJ20gc3RpbGwgY29ubmVjdGVkIEFORCBwYWlyZWQuLi5cbiAgICAgIGlmICh0aGlzLl9jb25uLkNvbm5lY3RlZCAmJiB0aGlzLl9zZWNyZXRzICE9IG51bGwpIHtcbiAgICAgICAgdGhpcy5fZG9QaW5nKCk7XG5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKF90aGlzNS5fbW9zdFJlY2VudFBpbmdTZW50ICE9IG51bGwgJiYgKF90aGlzNS5fbW9zdFJlY2VudFBvbmdSZWNlaXZlZCA9PSBudWxsIHx8IF90aGlzNS5fbW9zdFJlY2VudFBvbmdSZWNlaXZlZC5JZCAhPSBfdGhpczUuX21vc3RSZWNlbnRQaW5nU2VudC5JZCkpIHtcbiAgICAgICAgICAgIF90aGlzNS5fbWlzc2VkUG9uZ3NDb3VudCArPSAxO1xuXG4gICAgICAgICAgICBfdGhpczUuX2xvZy5pbmZvKFwiRWZ0cG9zIGRpZG4ndCByZXBseSB0byBteSBQaW5nLiBNaXNzZWQgQ291bnQ6IFwiLmNvbmNhdChfdGhpczUuX21pc3NlZFBvbmdzQ291bnQsIFwiL1wiKS5jb25jYXQoX3RoaXM1Ll9taXNzZWRQb25nc1RvRGlzY29ubmVjdCwgXCIuXCIpKTtcblxuICAgICAgICAgICAgaWYgKF90aGlzNS5fbWlzc2VkUG9uZ3NDb3VudCA8IF90aGlzNS5fbWlzc2VkUG9uZ3NUb0Rpc2Nvbm5lY3QpIHtcbiAgICAgICAgICAgICAgX3RoaXM1Ll9sb2cuaW5mbyhcIlRyeWluZyBhbm90aGVyIHBpbmcuLi5cIik7XG5cbiAgICAgICAgICAgICAgX3RoaXM1Ll9zdGFydFBlcmlvZGljUGluZygpO1xuXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gLy8gVGhpcyBtZWFucyB0aGF0IHdlIGhhdmUgbm90IHJlY2VpdmVkIGEgcG9uZyBmb3Igb3VyIG1vc3QgcmVjZW50IHBpbmcuXG4gICAgICAgICAgICAvLyBXZSBjb25zaWRlciB0aGlzIGNvbm5lY3Rpb24gYXMgYnJva2VuLlxuICAgICAgICAgICAgLy8gTGV0J3MgRGlzY29ubmVjdC5cblxuXG4gICAgICAgICAgICBfdGhpczUuX2xvZy5pbmZvKFwiRGlzY29ubmVjdGluZy4uLlwiKTtcblxuICAgICAgICAgICAgX3RoaXM1Ll9jb25uLkRpc2Nvbm5lY3QoKTtcblxuICAgICAgICAgICAgX3RoaXM1Ll9zdG9wUGVyaW9kaWNQaW5nKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXM1Ll9taXNzZWRQb25nc0NvdW50ID0gMDtcbiAgICAgICAgfSwgdGhpcy5fcG9uZ1RpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RvcFBlcmlvZGljUGluZygpO1xuXG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiQ2FuY2VsbGluZyBwZXJpb2RpYyBwaW5nIGFzIHdlcmUgZGlzY29ubmVjdGVkIG9yIG5vdCBwYWlyZWRcIik7XG4gICAgICB9XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBXZSBjYWxsIHRoaXMgb3Vyc2VsdmVzIGFzIHNvb24gYXMgd2UncmUgcmVhZHkgdG8gdHJhbnNhY3Qgd2l0aCB0aGUgUGluUGFkIGFmdGVyIGEgY29ubmVjdGlvbiBpcyBlc3RhYmxpc2hlZC5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIGVmZmVjdGl2ZWx5IGNhbGxlZCBhZnRlciB3ZSByZWNlaXZlZCB0aGUgZmlyc3QgTG9naW4gUmVzcG9uc2UgZnJvbSB0aGUgUGluUGFkLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9vblJlYWR5VG9UcmFuc2FjdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZWFkeVRvVHJhbnNhY3QoKSB7XG4gICAgICB0aGlzLl9sb2cuaW5mbyhcIk9uIFJlYWR5IFRvIFRyYW5zYWN0IVwiKTsgLy8gU28sIHdlIGhhdmUganVzdCBtYWRlIGEgY29ubmVjdGlvbiwgcGluZ2VkIGFuZCBsb2dnZWQgaW4gc3VjY2Vzc2Z1bGx5LlxuXG5cbiAgICAgIHRoaXMuQ3VycmVudFN0YXR1cyA9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaVN0YXR1c1wiXS5QYWlyZWRDb25uZWN0ZWQ7XG5cbiAgICAgIGlmICh0aGlzLkN1cnJlbnRGbG93ID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gJiYgIXRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkKSB7XG4gICAgICAgIGlmICh0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5SZXF1ZXN0U2VudCkge1xuICAgICAgICAgIC8vIFRILTNBIC0gV2UndmUganVzdCByZWNvbm5lY3RlZCBhbmQgd2VyZSBpbiB0aGUgbWlkZGxlIG9mIFR4LlxuICAgICAgICAgIC8vIExldCdzIGdldCB0aGUgbGFzdCB0cmFuc2FjdGlvbiB0byBjaGVjayB3aGF0IHdlIG1pZ2h0IGhhdmUgbWlzc2VkIG91dCBvbi5cbiAgICAgICAgICB0aGlzLl9jYWxsR2V0TGFzdFRyYW5zYWN0aW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVEgtM0FSIC0gV2UgaGFkIG5vdCBldmVuIHNlbnQgdGhlIHJlcXVlc3QgeWV0LiBMZXQncyBkbyB0aGF0IG5vd1xuICAgICAgICAgIHRoaXMuX3NlbmQodGhpcy5DdXJyZW50VHhGbG93U3RhdGUuUmVxdWVzdCk7XG5cbiAgICAgICAgICB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZS5TZW50KFwiU2VuZGluZyBSZXF1ZXN0IE5vdy4uLlwiKTtcbiAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0aGlzLl9oYXNTZXRJbmZvKSB7XG4gICAgICAgICAgdGhpcy5fY2FsbFNldFBvc0luZm8oKTtcbiAgICAgICAgfSAvLyBsZXQncyBhbHNvIHRlbGwgdGhlIGVmdHBvcyBvdXIgbGF0ZXN0IHRhYmxlIGNvbmZpZ3VyYXRpb24uXG5cblxuICAgICAgICBpZiAodGhpcy5fc3BpUGF0KSB7XG4gICAgICAgICAgdGhpcy5fc3BpUGF0LlB1c2hQYXlBdFRhYmxlQ29uZmlnKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2NhbGxTZXRQb3NJbmZvXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jYWxsU2V0UG9zSW5mbygpIHtcbiAgICAgIHZhciBzZXRQb3NJbmZvUmVxdWVzdCA9IG5ldyBfUG9zSW5mb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfX1tcIlNldFBvc0luZm9SZXF1ZXN0XCJdKHRoaXMuX3Bvc1ZlcnNpb24sIHRoaXMuX3Bvc1ZlbmRvcklkLCBcImpzXCIsIFNQSV9WRVJTSU9OLCBfUG9zSW5mb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTVfX1tcIkRldmljZUluZm9cIl0uR2V0QXBwRGV2aWNlSW5mbygpKTtcblxuICAgICAgdGhpcy5fc2VuZChzZXRQb3NJbmZvUmVxdWVzdC50b01lc3NhZ2UoKSk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBXaGVuIHdlIGRpc2Nvbm5lY3QsIHdlIHNob3VsZCBhbHNvIHN0b3AgdGhlIHBlcmlvZGljIHBpbmcuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX3N0b3BQZXJpb2RpY1BpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3N0b3BQZXJpb2RpY1BpbmcoKSB7XG4gICAgICBpZiAodGhpcy5fcGVyaW9kaWNQaW5nVGhyZWFkKSB7XG4gICAgICAgIC8vIElmIHdlIHdlcmUgYWxyZWFkeSBzZXQgdXAsIGNsZWFuIHVwIGJlZm9yZSByZXN0YXJ0aW5nLlxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX3BlcmlvZGljUGluZ1RocmVhZCk7XG4gICAgICAgIHRoaXMuX3BlcmlvZGljUGluZ1RocmVhZCA9IG51bGw7XG4gICAgICB9XG4gICAgfSAvLyBTZW5kIGEgUGluZyB0byB0aGUgU2VydmVyXG5cbiAgfSwge1xuICAgIGtleTogXCJfZG9QaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9kb1BpbmcoKSB7XG4gICAgICB2YXIgcGluZyA9IF9QaW5nSGVscGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xOF9fW1wiUGluZ0hlbHBlclwiXS5HZW5lcmF0ZVBpbmdSZXF1ZXN0KCk7XG4gICAgICB0aGlzLl9tb3N0UmVjZW50UGluZ1NlbnQgPSBwaW5nO1xuXG4gICAgICB0aGlzLl9zZW5kKHBpbmcpO1xuXG4gICAgICB0aGlzLl9tb3N0UmVjZW50UGluZ1NlbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB9IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFJlY2VpdmVkIGEgUG9uZyBmcm9tIHRoZSBzZXJ2ZXJcbiAgICAvLyA8L3N1bW1hcnk+XG4gICAgLy8gPHBhcmFtIG5hbWU9XCJtXCI+PC9wYXJhbT5cblxuICB9LCB7XG4gICAga2V5OiBcIl9oYW5kbGVJbmNvbWluZ1BvbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUluY29taW5nUG9uZyhtKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIG1haW50YWluIHRoaXMgdGltZSBkZWx0YSBvdGhlcndpc2UgdGhlIHNlcnZlciB3aWxsIG5vdCBhY2NlcHQgb3VyIG1lc3NhZ2VzLlxuICAgICAgdGhpcy5fc3BpTWVzc2FnZVN0YW1wLlNlcnZlclRpbWVEZWx0YSA9IG0uR2V0U2VydmVyVGltZURlbHRhKCk7XG5cbiAgICAgIGlmICh0aGlzLl9tb3N0UmVjZW50UG9uZ1JlY2VpdmVkID09IG51bGwpIHtcbiAgICAgICAgLy8gRmlyc3QgcG9uZyByZWNlaXZlZCBhZnRlciBhIGNvbm5lY3Rpb24sIGFuZCBhZnRlciB0aGUgcGFpcmluZyBwcm9jZXNzIGlzIGZ1bGx5IGZpbmFsaXNlZC5cbiAgICAgICAgaWYgKHRoaXMuQ3VycmVudFN0YXR1cyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X19bXCJTcGlTdGF0dXNcIl0uVW5wYWlyZWQpIHtcbiAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkZpcnN0IHBvbmcgb2YgY29ubmVjdGlvbiBhbmQgaW4gcGFpcmVkIHN0YXRlLlwiKTtcblxuICAgICAgICAgIHRoaXMuX29uUmVhZHlUb1RyYW5zYWN0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJGaXJzdCBwb25nIG9mIGNvbm5lY3Rpb24gYnV0IHBhaXJpbmcgcHJvY2VzcyBub3QgZmluYWxpc2VkIHlldC5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fbW9zdFJlY2VudFBvbmdSZWNlaXZlZCA9IG07XG5cbiAgICAgIHRoaXMuX2xvZy5kZWJ1ZyhcIlBvbmdMYXRlbmN5OlwiLmNvbmNhdChEYXRlLm5vdygpIC0gdGhpcy5fbW9zdFJlY2VudFBpbmdTZW50VGltZSkpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIHNlcnZlciB3aWxsIGFsc28gc2VuZCB1cyBwaW5ncy4gV2UgbmVlZCB0byByZXBseSB3aXRoIGEgcG9uZyBzbyBpdCBkb2Vzbid0IGRpc2Nvbm5lY3QgdXMuXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibVwiPjwvcGFyYW0+XG5cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlSW5jb21pbmdQaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVJbmNvbWluZ1BpbmcobSkge1xuICAgICAgdmFyIHBvbmcgPSBfUGluZ0hlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMThfX1tcIlBvbmdIZWxwZXJcIl0uR2VuZXJhdGVQb25nUmVzc3BvbnNlKG0pO1xuXG4gICAgICB0aGlzLl9zZW5kKHBvbmcpO1xuICAgIH0gLy8gPHN1bW1hcnk+XG4gICAgLy8gQXNrIHRoZSBQaW5QYWQgdG8gdGVsbCB1cyB3aGF0IHRoZSBNb3N0IFJlY2VudCBUcmFuc2FjdGlvbiB3YXNcbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgfSwge1xuICAgIGtleTogXCJfY2FsbEdldExhc3RUcmFuc2FjdGlvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfY2FsbEdldExhc3RUcmFuc2FjdGlvbigpIHtcbiAgICAgIHZhciBnbHRSZXF1ZXN0TXNnID0gbmV3IF9QdXJjaGFzZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTlfX1tcIkdldExhc3RUcmFuc2FjdGlvblJlcXVlc3RcIl0oKS5Ub01lc3NhZ2UoKTtcbiAgICAgIHRoaXMuQ3VycmVudFR4Rmxvd1N0YXRlLkNhbGxpbmdHbHQoZ2x0UmVxdWVzdE1zZy5JZCk7XG5cbiAgICAgIHRoaXMuX3NlbmQoZ2x0UmVxdWVzdE1zZyk7XG4gICAgfSAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGlzIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCB3aGVuZXZlciB3ZSByZWNlaXZlIGEgbWVzc2FnZSBmcm9tIHRoZSBDb25uZWN0aW9uXG4gICAgLy8gPC9zdW1tYXJ5PlxuICAgIC8vIDxwYXJhbSBuYW1lPVwibWVzc2FnZUpzb25cIj48L3BhcmFtPlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiX29uU3BpTWVzc2FnZVJlY2VpdmVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9vblNwaU1lc3NhZ2VSZWNlaXZlZChtZXNzYWdlSnNvbikge1xuICAgICAgLy8gRmlyc3Qgd2UgcGFyc2UgdGhlIGluY29taW5nIG1lc3NhZ2VcbiAgICAgIHZhciBtID0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJNZXNzYWdlXCJdLkZyb21Kc29uKG1lc3NhZ2VKc29uLk1lc3NhZ2UsIHRoaXMuX3NlY3JldHMpO1xuXG4gICAgICB0aGlzLl9sb2cuaW5mbyhcIlJlY2VpdmVkOlwiICsgbS5EZWNyeXB0ZWRKc29uKTtcblxuICAgICAgaWYgKF9TcGlQcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fW1wiU3BpUHJlYXV0aFwiXS5Jc1ByZWF1dGhFdmVudChtLkV2ZW50TmFtZSkpIHtcbiAgICAgICAgdGhpcy5fc3BpUHJlYXV0aC5faGFuZGxlUHJlYXV0aE1lc3NhZ2UobSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBBbmQgdGhlbiB3ZSBzd2l0Y2ggb24gdGhlIGV2ZW50IHR5cGUuXG5cblxuICAgICAgc3dpdGNoIChtLkV2ZW50TmFtZSkge1xuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLktleVJlcXVlc3Q6XG4gICAgICAgICAgdGhpcy5faGFuZGxlS2V5UmVxdWVzdChtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uS2V5Q2hlY2s6XG4gICAgICAgICAgdGhpcy5faGFuZGxlS2V5Q2hlY2sobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLlBhaXJSZXNwb25zZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVQYWlyUmVzcG9uc2UobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLkRyb3BLZXlzQWR2aWNlOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZURyb3BLZXlzQWR2aWNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5QdXJjaGFzZVJlc3BvbnNlOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZVB1cmNoYXNlUmVzcG9uc2UobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLlJlZnVuZFJlc3BvbnNlOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZVJlZnVuZFJlc3BvbnNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5DYXNob3V0T25seVJlc3BvbnNlOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZUNhc2hvdXRPbmx5UmVzcG9uc2UobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLk1vdG9QdXJjaGFzZVJlc3BvbnNlOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZU1vdG9QdXJjaGFzZVJlc3BvbnNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5TaWduYXR1cmVSZXF1aXJlZDpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVTaWduYXR1cmVSZXF1aXJlZChtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uQXV0aENvZGVSZXF1aXJlZDpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVBdXRoQ29kZVJlcXVpcmVkKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5HZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVHZXRMYXN0VHJhbnNhY3Rpb25SZXNwb25zZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uU2V0dGxlUmVzcG9uc2U6XG4gICAgICAgICAgdGhpcy5IYW5kbGVTZXR0bGVSZXNwb25zZShtKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLlNldHRsZW1lbnRFbnF1aXJ5UmVzcG9uc2U6XG4gICAgICAgICAgdGhpcy5faGFuZGxlU2V0dGxlbWVudEVucXVpcnlSZXNwb25zZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uUGluZzpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVJbmNvbWluZ1BpbmcobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLlBvbmc6XG4gICAgICAgICAgdGhpcy5faGFuZGxlSW5jb21pbmdQb25nKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5LZXlSb2xsUmVxdWVzdDpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVLZXlSb2xsaW5nUmVxdWVzdChtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uQ2FuY2VsVHJhbnNhY3Rpb25SZXNwb25zZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVDYW5jZWxUcmFuc2FjdGlvblJlc3BvbnNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5TZXRQb3NJbmZvUmVzcG9uc2U6XG4gICAgICAgICAgdGhpcy5faGFuZGxlU2V0UG9zSW5mb1Jlc3BvbnNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5QYXlBdFRhYmxlR2V0VGFibGVDb25maWc6XG4gICAgICAgICAgaWYgKHRoaXMuX3NwaVBhdCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9zZW5kKF9QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fW1wiUGF5QXRUYWJsZUNvbmZpZ1wiXS5GZWF0dXJlRGlzYWJsZU1lc3NhZ2UoX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicGF0Y29uZlwiKSkpO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9zcGlQYXQuX2hhbmRsZUdldFRhYmxlQ29uZmlnKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5QYXlBdFRhYmxlR2V0QmlsbERldGFpbHM6XG4gICAgICAgICAgdGhpcy5fc3BpUGF0Ll9oYW5kbGVHZXRCaWxsRGV0YWlsc1JlcXVlc3QobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLlBheUF0VGFibGVCaWxsUGF5bWVudDpcbiAgICAgICAgICB0aGlzLl9zcGlQYXQuX2hhbmRsZUJpbGxQYXltZW50QWR2aWNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5QYXlBdFRhYmxlR2V0T3BlblRhYmxlczpcbiAgICAgICAgICB0aGlzLl9zcGlQYXQuX2hhbmRsZUdldE9wZW5UYWJsZXNSZXF1ZXN0KG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5QYXlBdFRhYmxlQmlsbFBheW1lbnRGbG93RW5kZWQ6XG4gICAgICAgICAgdGhpcy5fc3BpUGF0Ll9oYW5kbGVCaWxsUGF5bWVudEZsb3dFbmRlZChtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uUHJpbnRpbmdSZXNwb25zZTpcbiAgICAgICAgICB0aGlzLl9oYW5kbGVQcmludGluZ1Jlc3BvbnNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkV2ZW50c1wiXS5UZXJtaW5hbFN0YXR1c1Jlc3BvbnNlOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZVRlcm1pbmFsU3RhdHVzUmVzcG9uc2UobSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiRXZlbnRzXCJdLkJhdHRlcnlMZXZlbENoYW5nZWQ6XG4gICAgICAgICAgdGhpcy5faGFuZGxlQmF0dGVyeUxldmVsQ2hhbmdlZChtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uRXJyb3I6XG4gICAgICAgICAgdGhpcy5faGFuZGxlRXJyb3JFdmVudChtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJFdmVudHNcIl0uSW52YWxpZEhtYWNTaWduYXR1cmU6XG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJJIGNvdWxkIG5vdCB2ZXJpZnkgbWVzc2FnZSBmcm9tIEVmdHBvcy4gWW91IG1pZ2h0IGhhdmUgdG8gVW4tcGFpciBFZnRwb3MgYW5kIHRoZW4gcmVjb25uZWN0LlwiKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJJIGRvbid0IFVuZGVyc3RhbmQgRXZlbnQ6IFwiLmNvbmNhdChtLkV2ZW50TmFtZSwgXCIsIFwiKS5jb25jYXQobS5EYXRhLCBcIi4gUGVyaGFwcyBJIGhhdmUgbm90IGltcGxlbWVudGVkIGl0IHlldC5cIikpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9vbldzRXJyb3JSZWNlaXZlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Xc0Vycm9yUmVjZWl2ZWQoZXJyb3IpIHtcbiAgICAgIHRoaXMuX2xvZy53YXJuKFwiUmVjZWl2ZWQgV1MgRXJyb3JcIiwgZXJyb3IuTWVzc2FnZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9zZW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kKG1lc3NhZ2UpIHtcbiAgICAgIHZhciBqc29uID0gbWVzc2FnZS5Ub0pzb24odGhpcy5fc3BpTWVzc2FnZVN0YW1wKTtcblxuICAgICAgaWYgKHRoaXMuX2Nvbm4uQ29ubmVjdGVkKSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiU2VuZGluZzogXCIgKyBtZXNzYWdlLkRlY3J5cHRlZEpzb24pO1xuXG4gICAgICAgIHRoaXMuX2Nvbm4uU2VuZChqc29uKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiQXNrZWQgdG8gc2VuZCwgYnV0IG5vdCBjb25uZWN0ZWQ6IFwiICsgbWVzc2FnZS5EZWNyeXB0ZWRKc29uKTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9pc1Bvc0lkVmFsaWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzUG9zSWRWYWxpZChwb3NJZCkge1xuICAgICAgaWYgKCFwb3NJZCkge1xuICAgICAgICB0aGlzLl9sb2cud2FybihcIlBvcyBJZCBjYW5ub3QgYmUgbnVsbCBvciBlbXB0eVwiKTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChwb3NJZC5sZW5ndGggPiAxNikge1xuICAgICAgICB0aGlzLl9sb2cud2FybihcIlBvcyBJZCBpcyBncmVhdGVyIHRoYW4gMTYgY2hhcmFjdGVyc1wiKTtcblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghcG9zSWQubWF0Y2godGhpcy5fcmVnZXhJdGVtc0ZvclBvc0lkKSkge1xuICAgICAgICB0aGlzLl9sb2cud2FybihcIlBvcyBJZCBjYW5ub3QgaW5jbHVkZSBzcGVjaWFsIGNoYXJhY3RlcnNcIik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2lzRWZ0cG9zQWRkcmVzc1ZhbGlkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9pc0VmdHBvc0FkZHJlc3NWYWxpZChlZnRwb3NBZGRyZXNzKSB7XG4gICAgICBpZiAoIWVmdHBvc0FkZHJlc3MpIHtcbiAgICAgICAgdGhpcy5fbG9nLndhcm4oXCJUaGUgRWZ0cG9zIGFkZHJlc3MgY2Fubm90IGJlIG51bGwgb3IgZW1wdHlcIik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2FuaXRpc2VkRWZ0cG9zQWRkcmVzcyA9IGVmdHBvc0FkZHJlc3MucmVwbGFjZSgvXndbc10/czpcXC9cXC8vLCBcIlwiKTsgLy8gVGhlIGVmdHBvc0FkZHJlc3MgbWF5IGJlIGFuIElQIGFkZHJlc3Mgb3IgaWYgYXV0b0FkZHJlc3NSZXNvbHV0aW9uRW5hYmxlZCBpcyB0cnVlLCBhIEZRRE5cblxuICAgICAgaWYgKCF0aGlzLl9hdXRvQWRkcmVzc1Jlc29sdXRpb25FbmFibGVkICYmICFzYW5pdGlzZWRFZnRwb3NBZGRyZXNzLm1hdGNoKHRoaXMuX3JlZ2V4SXRlbXNGb3JFZnRwb3NBZGRyZXNzKSB8fCB0aGlzLl9hdXRvQWRkcmVzc1Jlc29sdXRpb25FbmFibGVkICYmICFzYW5pdGlzZWRFZnRwb3NBZGRyZXNzLm1hdGNoKHRoaXMuX3JlZ2V4SXRlbXNGb3JGcWRuRWZ0cG9zQWRkcmVzcykpIHtcbiAgICAgICAgdGhpcy5fbG9nLndhcm4oXCJUaGUgRWZ0cG9zIGFkZHJlc3MgaXMgbm90IGluIHRoZSByaWdodCBmb3JtYXRcIik7XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiSGFzU2VyaWFsTnVtYmVyQ2hhbmdlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBIYXNTZXJpYWxOdW1iZXJDaGFuZ2VkKHVwZGF0ZWRTZXJpYWxOdW1iZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZXJpYWxOdW1iZXIgIT0gdXBkYXRlZFNlcmlhbE51bWJlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiSGFzRWZ0cG9zQWRkcmVzc0NoYW5nZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSGFzRWZ0cG9zQWRkcmVzc0NoYW5nZWQodXBkYXRlZEVmdHBvc0FkZHJlc3MpIHtcbiAgICAgIHJldHVybiB0aGlzLl9lZnRwb3NBZGRyZXNzICE9IHVwZGF0ZWRFZnRwb3NBZGRyZXNzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfYXV0b1Jlc29sdmVFZnRwb3NBZGRyZXNzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfYXV0b1Jlc29sdmVFZnRwb3NBZGRyZXNzMiA9IF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfYXN5bmNUb0dlbmVyYXRvcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShcbiAgICAgIC8qI19fUFVSRV9fKi9cbiAgICAgIF9iYWJlbF9ydW50aW1lX3JlZ2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdC5hLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHtcbiAgICAgICAgdmFyIGlzU2VjdXJlQ29ubmVjdGlvbiwgc2VydmljZSwgYWRkcmVzc1Jlc3BvbnNlLCBhZGRyZXNzUmVzcG9uc2VKc29uLCBwcm90b2NvbDtcbiAgICAgICAgcmV0dXJuIF9iYWJlbF9ydW50aW1lX3JlZ2VuZXJhdG9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdC5hLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2F1dG9BZGRyZXNzUmVzb2x1dGlvbkVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiKTtcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgaWYgKCEoIXRoaXMuX3NlcmlhbE51bWJlciB8fCAhdGhpcy5fZGV2aWNlQXBpS2V5KSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9sb2cud2FybihcIk1pc3Npbmcgc2VyaWFsTnVtYmVyIGFuZC9vciBkZXZpY2VBcGlLZXkuIE5lZWQgdG8gc2V0IHRoZW0gYmVmb3JlIGZvciBBdXRvIEFkZHJlc3MgdG8gd29yay5cIik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBpc1NlY3VyZUNvbm5lY3Rpb24gPSB0aGlzLl9pc1NlY3VyZUNvbm5lY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlID0gbmV3IF9TZXJ2aWNlX0RldmljZVNlcnZpY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIwX19bXCJEZXZpY2VBZGRyZXNzU2VydmljZVwiXSgpO1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA3O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VydmljZS5SZXRyaWV2ZVNlcnZpY2UodGhpcy5fc2VyaWFsTnVtYmVyLCB0aGlzLl9kZXZpY2VBcGlLZXksIHRoaXMuX2FjcXVpcmVyQ29kZSwgaXNTZWN1cmVDb25uZWN0aW9uLCB0aGlzLl9pblRlc3RNb2RlKTtcblxuICAgICAgICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgICAgICAgIGFkZHJlc3NSZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEzO1xuICAgICAgICAgICAgICAgIHJldHVybiBhZGRyZXNzUmVzcG9uc2UuanNvbigpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTM6XG4gICAgICAgICAgICAgICAgYWRkcmVzc1Jlc3BvbnNlSnNvbiA9IF9jb250ZXh0LnNlbnQ7XG4gICAgICAgICAgICAgICAgdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzID0gT2JqZWN0LmFzc2lnbihuZXcgX1NlcnZpY2VfRGV2aWNlU2VydmljZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfX1tcIkRldmljZUFkZHJlc3NTdGF0dXNcIl0oaXNTZWN1cmVDb25uZWN0aW9uKSwge1xuICAgICAgICAgICAgICAgICAgaXA6IGFkZHJlc3NSZXNwb25zZUpzb24uaXAsXG4gICAgICAgICAgICAgICAgICBmcWRuOiBhZGRyZXNzUmVzcG9uc2VKc29uLmZxZG4sXG4gICAgICAgICAgICAgICAgICBEZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlOiBhZGRyZXNzUmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgUmVzcG9uc2VTdGF0dXNEZXNjcmlwdGlvbjogYWRkcmVzc1Jlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICBSZXNwb25zZU1lc3NhZ2U6IGFkZHJlc3NSZXNwb25zZS5zdGF0dXNUZXh0LFxuICAgICAgICAgICAgICAgICAgTGFzdFVwZGF0ZWQ6IGFkZHJlc3NSZXNwb25zZUpzb24ubGFzdF91cGRhdGVkXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTc6XG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE3O1xuICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbXCJjYXRjaFwiXSg3KTtcbiAgICAgICAgICAgICAgICB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXMgPSB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXMgfHwgbmV3IF9TZXJ2aWNlX0RldmljZVNlcnZpY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIwX19bXCJEZXZpY2VBZGRyZXNzU3RhdHVzXCJdKGlzU2VjdXJlQ29ubmVjdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzLkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGUgPSBfU2VydmljZV9EZXZpY2VTZXJ2aWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fW1wiRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZVwiXS5ERVZJQ0VfU0VSVklDRV9FUlJPUjtcbiAgICAgICAgICAgICAgICB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXMuUmVzcG9uc2VTdGF0dXNEZXNjcmlwdGlvbiA9IF9jb250ZXh0LnQwO1xuICAgICAgICAgICAgICAgIHRoaXMuQ3VycmVudERldmljZVN0YXR1cy5SZXNwb25zZU1lc3NhZ2UgPSBfY29udGV4dC50MDtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2xvZy53YXJuKF9jb250ZXh0LnQwLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ0RldmljZUFkZHJlc3NDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXNcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiKTtcblxuICAgICAgICAgICAgICBjYXNlIDI2OlxuICAgICAgICAgICAgICAgIGlmICghKGFkZHJlc3NSZXNwb25zZS5zdGF0dXMgPT0gX1NlcnZpY2VfRGV2aWNlU2VydmljZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMjBfX1tcIkh0dHBTdGF0dXNDb2RlXCJdLk5vdEZvdW5kKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMwO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzLkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGUgPSBfU2VydmljZV9EZXZpY2VTZXJ2aWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fW1wiRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZVwiXS5JTlZBTElEX1NFUklBTF9OVU1CRVI7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ0RldmljZUFkZHJlc3NDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXNcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiKTtcblxuICAgICAgICAgICAgICBjYXNlIDMwOlxuICAgICAgICAgICAgICAgIGlmICghKCFhZGRyZXNzUmVzcG9uc2Uub2sgfHwgIWFkZHJlc3NSZXNwb25zZUpzb24gfHwgIXRoaXMuQ3VycmVudERldmljZVN0YXR1cy5BZGRyZXNzKSkge1xuICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM0O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzLkRldmljZUFkZHJlc3NSZXNwb25zZUNvZGUgPSBfU2VydmljZV9EZXZpY2VTZXJ2aWNlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yMF9fW1wiRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZVwiXS5ERVZJQ0VfU0VSVklDRV9FUlJPUjtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnRGV2aWNlQWRkcmVzc0NoYW5nZWQnLCB7XG4gICAgICAgICAgICAgICAgICBkZXRhaWw6IHRoaXMuQ3VycmVudERldmljZVN0YXR1c1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KFwicmV0dXJuXCIpO1xuXG4gICAgICAgICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuSGFzRWZ0cG9zQWRkcmVzc0NoYW5nZWQodGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzLkFkZHJlc3MpKSB7XG4gICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzg7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXMuRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZSA9IF9TZXJ2aWNlX0RldmljZVNlcnZpY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIwX19bXCJEZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlXCJdLkFERFJFU1NfTk9UX0NIQU5HRUQ7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ0RldmljZUFkZHJlc3NDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXNcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdChcInJldHVyblwiKTtcblxuICAgICAgICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBkZXZpY2UgYW5kIGNvbm5lY3Rpb24gYWRkcmVzc1xuICAgICAgICAgICAgICAgIHByb3RvY29sID0gaXNTZWN1cmVDb25uZWN0aW9uID8gXCJ3c3NcIiA6IFwid3NcIjtcbiAgICAgICAgICAgICAgICB0aGlzLl9lZnRwb3NBZGRyZXNzID0gcHJvdG9jb2wgKyBcIjovL1wiICsgdGhpcy5DdXJyZW50RGV2aWNlU3RhdHVzLkFkZHJlc3M7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29ubi5BZGRyZXNzID0gdGhpcy5fZWZ0cG9zQWRkcmVzcztcbiAgICAgICAgICAgICAgICB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXMuRGV2aWNlQWRkcmVzc1Jlc3BvbnNlQ29kZSA9IF9TZXJ2aWNlX0RldmljZVNlcnZpY2VfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzIwX19bXCJEZXZpY2VBZGRyZXNzUmVzcG9uc2VDb2RlXCJdLlNVQ0NFU1M7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ0RldmljZUFkZHJlc3NDaGFuZ2VkJywge1xuICAgICAgICAgICAgICAgICAgZGV0YWlsOiB0aGlzLkN1cnJlbnREZXZpY2VTdGF0dXNcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA0MzpcbiAgICAgICAgICAgICAgY2FzZSBcImVuZFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzcsIDE3XV0pO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBfYXV0b1Jlc29sdmVFZnRwb3NBZGRyZXNzKCkge1xuICAgICAgICByZXR1cm4gX2F1dG9SZXNvbHZlRWZ0cG9zQWRkcmVzczIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9hdXRvUmVzb2x2ZUVmdHBvc0FkZHJlc3M7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6IFwiX2lzVXNpbmdIdHRwc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNVc2luZ0h0dHBzKCkge1xuICAgICAgcmV0dXJuICdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH0gLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gdXNlIHdzcyBvciBub3RcblxuICB9LCB7XG4gICAga2V5OiBcIl9pc1NlY3VyZUNvbm5lY3Rpb25cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2lzU2VjdXJlQ29ubmVjdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1VzaW5nSHR0cHMoKSB8fCB0aGlzLl9mb3JjZVNlY3VyZVdlYlNvY2tldHM7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiR2V0VmVyc2lvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRWZXJzaW9uKCkge1xuICAgICAgcmV0dXJuIFNQSV9WRVJTSU9OO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTcGk7XG59KCk7XG5cblxuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9TcGlNb2RlbHMuanNcIjpcbi8qISoqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1NwaU1vZGVscy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKiEgZXhwb3J0cyBwcm92aWRlZDogU3BpU3RhdHVzLCBTcGlGbG93LCBQYWlyaW5nRmxvd1N0YXRlLCBUcmFuc2FjdGlvblR5cGUsIEluaXRpYXRlVHhSZXN1bHQsIE1pZFR4UmVzdWx0LCBUcmFuc2FjdGlvbkZsb3dTdGF0ZSwgU3VibWl0QXV0aENvZGVSZXN1bHQsIFNwaUNvbmZpZywgVHJhbnNhY3Rpb25PcHRpb25zICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNwaVN0YXR1c1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNwaVN0YXR1czsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU3BpRmxvd1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNwaUZsb3c7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlBhaXJpbmdGbG93U3RhdGVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBQYWlyaW5nRmxvd1N0YXRlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJUcmFuc2FjdGlvblR5cGVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUcmFuc2FjdGlvblR5cGU7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIkluaXRpYXRlVHhSZXN1bHRcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBJbml0aWF0ZVR4UmVzdWx0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJNaWRUeFJlc3VsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIE1pZFR4UmVzdWx0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJUcmFuc2FjdGlvbkZsb3dTdGF0ZVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFRyYW5zYWN0aW9uRmxvd1N0YXRlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTdWJtaXRBdXRoQ29kZVJlc3VsdFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFN1Ym1pdEF1dGhDb2RlUmVzdWx0OyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJTcGlDb25maWdcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTcGlDb25maWc7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlRyYW5zYWN0aW9uT3B0aW9uc1wiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFRyYW5zYWN0aW9uT3B0aW9uczsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL01lc3NhZ2VzICovIFwiLi9zcmMvTWVzc2FnZXMuanNcIik7XG5cblxuIC8vIDxzdW1tYXJ5PlxuLy8gUmVwcmVzZW50cyB0aGUgMyBQYWlyaW5nIHN0YXR1c2VzIHRoYXQgdGhlIFNwaSBpbnN0YW54Y2UgY2FuIGJlIGluLlxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgU3BpU3RhdHVzID0ge1xuICAvLyA8c3VtbWFyeT5cbiAgLy8gUGFpcmVkIGFuZCBDb25uZWN0ZWRcbiAgLy8gPC9zdW1tYXJ5PlxuICBQYWlyZWRDb25uZWN0ZWQ6ICdQYWlyZWRDb25uZWN0ZWQnLFxuICAvLyA8c3VtbWFyeT5cbiAgLy8gUGFpcmVkIGJ1dCB0cnlpbmcgdG8gZXN0YWJsaXNoIGEgY29ubmVjdGlvbiBcbiAgLy8gPC9zdW1tYXJ5PlxuICBQYWlyZWRDb25uZWN0aW5nOiAnUGFpcmVkQ29ubmVjdGluZycsXG4gIC8vIDxzdW1tYXJ5PlxuICAvLyBVbnBhaXJlZFxuICAvLyA8L3N1bW1hcnk+XG4gIFVucGFpcmVkOiAnVW5wYWlyZWQnXG59OyAvLyA8c3VtbWFyeT5cbi8vIFRoZSBTcGkgaW5zdGFuY2UgY2FuIGJlIGluIG9uZSBvZiB0aGVzZSBmbG93cyBhdCBhbnkgcG9pbnQgaW4gdGltZS5cbi8vIDwvc3VtbWFyeT5cblxudmFyIFNwaUZsb3cgPSB7XG4gIC8vIDxzdW1tYXJ5PlxuICAvLyBDdXJyZW50bHkgZ29pbmcgdGhyb3VnaCB0aGUgUGFpcmluZyBQcm9jZXNzIEZsb3cuXG4gIC8vIEhhcHBlbnMgZHVyaW5nIHRoZSBVbnBhaXJlZCBTcGlTdGF0dXMuXG4gIC8vIDwvc3VtbWFyeT5cbiAgUGFpcmluZzogJ1BhaXJpbmcnLFxuICAvLyA8c3VtbWFyeT5cbiAgLy8gQ3VycmVudGx5IGdvaW5nIHRocm91Z2ggdGhlIHRyYW5zYWN0aW9uIFByb2Nlc3MgRmxvdy5cbiAgLy8gQ2Fubm90IGhhcHBlbiBpbiB0aGUgVW5wYWlyZWQgU3BpU3RhdHVzLlxuICAvLyA8L3N1bW1hcnk+XG4gIFRyYW5zYWN0aW9uOiAnVHJhbnNhY3Rpb24nLFxuICAvLyA8c3VtbWFyeT5cbiAgLy8gTm90IGluIGFueSBvZiB0aGUgb3RoZXIgc3RhdGVzLlxuICAvLyA8L3N1bW1hcnk+XG4gIElkbGU6ICdJZGxlJ1xufTsgLy8gPHN1bW1hcnk+XG4vLyBSZXByZXNlbnRzIHRoZSBQYWlyaW5nIEZsb3cgU3RhdGUgZHVyaW5nIHRoZSBwYWlyaW5nIHByb2Nlc3MgXG4vLyA8L3N1bW1hcnk+XG5cbnZhciBQYWlyaW5nRmxvd1N0YXRlID0gZnVuY3Rpb24gUGFpcmluZ0Zsb3dTdGF0ZShzdGF0ZSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIFBhaXJpbmdGbG93U3RhdGUpO1xuXG4gIC8vIDxzdW1tYXJ5PlxuICAvLyBTb21lIHRleHQgdGhhdCBjYW4gYmUgZGlzcGxheWVkIGluIHRoZSBQYWlyaW5nIFByb2Nlc3MgU2NyZWVuXG4gIC8vIHRoYXQgaW5kaWNhdGVzIHdoYXQgdGhlIHBhaXJpbmcgcHJvY2VzcyBpcyB1cCB0by5cbiAgLy8gPC9zdW1tYXJ5PlxuICB0aGlzLk1lc3NhZ2UgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgLy8gV2hlbiB0cnVlLCBpdCBtZWFucyB0aGF0IHRoZSBFRlRQT1MgaXMgc2hvaW5nIHRoZSBjb25maXJtYXRpb24gY29kZSxcbiAgLy8gYW5kIHlvdXIgdXNlciBuZWVkcyB0byBwcmVzcyBZRVMgb3IgTk8gb24gdGhlIEVGVFBPUy5cbiAgLy8gPC9zdW1tYXJ5PlxuXG4gIHRoaXMuQXdhaXRpbmdDaGVja0Zyb21FZnRwb3MgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgLy8gV2hlbiB0cnVlLCB5b3UgbmVlZCB0byBkaXNwbGF5IHRoZSBZRVMvTk8gYnV0dG9ucyBvbiB5b3UgcGFpcmluZyBzY3JlZW5cbiAgLy8gZm9yIHlvdXIgdXNlciB0byBjb25maXJtIHRoZSBjb2RlLlxuICAvLyA8L3N1bW1hcnk+XG5cbiAgdGhpcy5Bd2FpdGluZ0NoZWNrRnJvbVBvcyA9IG51bGw7IC8vIDxzdW1tYXJ5PlxuICAvLyBUaGlzIGlzIHRoZSBjb25maXJtYXRpb24gY29kZSBmb3IgdGhlIHBhaXJpbmcgcHJvY2Vzcy5cbiAgLy8gPC9zdW1tYXJ5PlxuXG4gIHRoaXMuQ29uZmlybWF0aW9uQ29kZSA9IG51bGw7IC8vIDxzdW1tYXJ5PlxuICAvLyBJbmRpY2F0ZXMgd2hldGhlciB0aGUgUGFpcmluZyBGbG93IGhhcyBmaW5pc2hlZCBpdHMgam9iLlxuICAvLyA8L3N1bW1hcnk+XG5cbiAgdGhpcy5GaW5pc2hlZCA9IG51bGw7IC8vIDxzdW1tYXJ5PlxuICAvLyBJbmRpY2F0ZXMgd2hldGhlciBwYWlyaW5nIHdhcyBzdWNjZXNzZnVsIG9yIG5vdC5cbiAgLy8gPC9zdW1tYXJ5PlxuXG4gIHRoaXMuU3VjY2Vzc2Z1bCA9IG51bGw7XG5cbiAgaWYgKHN0YXRlKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBzdGF0ZSk7XG4gIH1cbn07XG52YXIgVHJhbnNhY3Rpb25UeXBlID0ge1xuICBQdXJjaGFzZTogJ1B1cmNoYXNlJyxcbiAgUmVmdW5kOiAnUmVmdW5kJyxcbiAgQ2FzaG91dE9ubHk6ICdDYXNob3V0T25seScsXG4gIE1PVE86ICdNT1RPJyxcbiAgU2V0dGxlOiAnU2V0dGxlJyxcbiAgU2V0dGxlbWVudEVucXVpcnk6ICdTZXR0bGVtZW50RW5xdWlyeScsXG4gIEdldExhc3RUcmFuc2FjdGlvbjogJ0dldExhc3RUcmFuc2FjdGlvbicsXG4gIFByZWF1dGg6ICdQcmVhdXRoJyxcbiAgQWNjb3VudFZlcmlmeTogJ0FjY291bnRWZXJpZnknXG59OyAvLyA8c3VtbWFyeT5cbi8vIFVzZWQgYXMgYSByZXR1cm4gaW4gdGhlIEluaXRpYXRlVHggbWV0aG9kcyB0byBzaWduaWZ5IHdoZXRoZXIgXG4vLyB0aGUgdHJhbnNhY3Rpb24gd2FzIGluaXRpYXRlZCBvciBub3QsIGFuZCBhIHJlYXNvbiB0byBnbyB3aXRoIGl0LlxuLy8gPC9zdW1tYXJ5PlxuXG52YXIgSW5pdGlhdGVUeFJlc3VsdCA9IGZ1bmN0aW9uIEluaXRpYXRlVHhSZXN1bHQoaW5pdGlhdGVkLCBtZXNzYWdlKSB7XG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkodGhpcywgSW5pdGlhdGVUeFJlc3VsdCk7XG5cbiAgLy8gPHN1bW1hcnk+XG4gIC8vIFdoZXRoZXIgdGhlIHR4IHdhcyBpbml0aWF0ZWQuXG4gIC8vIFdoZW4gdHJ1ZSwgeW91IGNhbiBleHBlY3QgdXBkYXRlZCB0byB5b3VyIHJlZ2lzdGVyZWQgY2FsbGJhY2suXG4gIC8vIFdoZW4gZmFsc2UsIHlvdSBjYW4gcmV0cnkgY2FsbGluZyB0aGUgSW5pdGlhdGVYIG1ldGhvZC5cbiAgLy8gPC9zdW1tYXJ5PlxuICB0aGlzLkluaXRpYXRlZCA9IGluaXRpYXRlZDsgLy8gPHN1bW1hcnk+XG4gIC8vIFRleHQgdGhhdCBnaXZlcyByZWFzb24gZm9yIHRoZSBJbml0aWF0ZWQgZmxhZywgZXNwZWNpYWxseSBpbiBjYXNlIG9mIGZhbHNlLiBcbiAgLy8gPC9zdW1tYXJ5PlxuXG4gIHRoaXMuTWVzc2FnZSA9IG1lc3NhZ2U7XG59OyAvLyA8c3VtbWFyeT5cbi8vIFVzZWQgYXMgYSByZXR1cm4gaW4gY2FsbHMgbWlkIHRyYW5zYWN0aW9uIHRvIGxldCB5b3Uga25vd1xuLy8gd2hldGhlciB0aGUgY2FsbCB3YXMgdmFsaWQgb3Igbm90LlxuLy8gVGhlc2UgYXR0cmlidXRlcyB3b3JrIGZvciBDT00gaW50ZXJvcC5cbi8vIDwvc3VtbWFyeT5cblxudmFyIE1pZFR4UmVzdWx0ID0gLy8gPHN1bW1hcnk+XG4vLyBUaGlzIGRlZmF1bHQgc3R1Y3R1cmUgd29ya3MgZm9yIENPTSBpbnRlcm9wLlxuLy8gPC9zdW1tYXJ5PlxuZnVuY3Rpb24gTWlkVHhSZXN1bHQodmFsaWQsIG1lc3NhZ2UpIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKSh0aGlzLCBNaWRUeFJlc3VsdCk7XG5cbiAgdGhpcy5WYWxpZCA9IHZhbGlkO1xuICB0aGlzLk1lc3NhZ2UgPSBtZXNzYWdlO1xufTsgLy8gPHN1bW1hcnk+XG4vLyBSZXByZXNlbnRzIHRoZSBTdGF0ZSBkdXJpbmcgYSBUcmFuc2FjdGlvbkZsb3dcbi8vIDwvc3VtbWFyeT5cblxudmFyIFRyYW5zYWN0aW9uRmxvd1N0YXRlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb25GbG93U3RhdGUocG9zUmVmSWQsIHR5cGUsIGFtb3VudENlbnRzLCBtZXNzYWdlLCBtc2cpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIFRyYW5zYWN0aW9uRmxvd1N0YXRlKTtcblxuICAgIC8vIDxzdW1tYXJ5PlxuICAgIC8vICBUaGUgaWQgZ2l2ZW4gdG8gdGhpcyB0cmFuc2FjdGlvblxuICAgIC8vIDwvc3VtbWFyeT5cbiAgICB0aGlzLlBvc1JlZklkID0gcG9zUmVmSWQ7XG4gICAgdGhpcy5JZCA9IHBvc1JlZklkOyAvLyBvYnNvbGV0ZSwgYnV0IGxldCdzIG1haW50YWluIGl0IGZvciBub3csIHRvIG1lYW4gc2FtZSBhcyBQb3NSZWZJZC5cbiAgICAvLyA8c3VtbWFyeT5cbiAgICAvLyBQdXJjaGFzZS9SZWZ1bmQvU2V0dGxlLy4uLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuVHlwZSA9IHR5cGU7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEEgdGV4dCBtZXNzYWdlIHRvIGRpc3BsYXkgb24geW91ciBUcmFuc2FjdGlvbiBGbG93IFNjcmVlblxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuRGlzcGxheU1lc3NhZ2UgPSBtc2c7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIEFtb3VudCBpbiBjZW50cyBmb3IgdGhpcyB0cmFuc2FjdGlvblxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuQW1vdW50Q2VudHMgPSBhbW91bnRDZW50czsgLy8gPHN1bW1hcnk+XG4gICAgLy8gV2h0aGVyIHRoZSByZXF1ZXN0IGhhcyBiZWVuIHNlbnQgdG8gdGhlIEVGVFBPUyB5ZXQgb3Igbm90LlxuICAgIC8vIEluIHRoZSBQYWlyZWRDb25uZWN0aW5nIHN0YXRlLCB0aGUgdHJhbnNhY3Rpb24gaXMgaW5pdGlhdGVkXG4gICAgLy8gYnV0IHRoZSByZXF1ZXN0IGlzIG9ubHkgc2VudCBvbmNlIHRoZSBjb25uZWN0aW9uIGlzIHJlY292ZXJlZC5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLlJlcXVlc3RTZW50ID0gZmFsc2U7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSB0aW1lIHdoZW4gdGhlIHJlcXVlc3Qgd2FzIHNlbnQgdG8gdGhlIEVGVFBPUy5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLlJlcXVlc3RUaW1lID0gbnVsbDsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIHRpbWUgd2hlbiB3ZSBsYXN0IGFza2VkIGZvciBhbiB1cGRhdGUsIGluY2x1ZGluZyB0aGUgb3JpZ2luYWwgcmVxdWVzdCBhdCBmaXJzdFxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuTGFzdFN0YXRlUmVxdWVzdFRpbWUgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgaWQgb2YgdGhlIGxhc3QgZ2x0IHJlcXVlc3QgbWVzc2FnZSB0aGF0IHdhcyBzZW50LiB1c2VkIHRvIG1hdGNoIHdpdGggdGhlIHJlc3BvbnNlLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuTGFzdEdsdFJlcXVlc3RJZCA9IG51bGw7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFdoZXRoZXIgd2UncmUgY3VycmVudGx5IGF0dGVtcHRpbmcgdG8gQ2FuY2VsIHRoZSB0cmFuc2FjdGlvbi5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkF0dGVtcHRpbmdUb0NhbmNlbCA9IG51bGw7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFdoZW4gdGhpcyBmbGFnIGlzIG9uLCB5b3UgbmVlZCB0byBkaXNwbGF5IHRoZSBkaWduYXR1cmUgYWNjZXB0L2RlY2xpbmUgYnV0dG9ucyBpbiB5b3VyIFxuICAgIC8vIHRyYW5zYWN0aW9uIGZsb3cgc2NyZWVuLlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuQXdhaXRpbmdTaWduYXR1cmVDaGVjayA9IGZhbHNlOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBXaGVuIHRoaXMgZmxhZyBpcyBvbiwgeW91IG5lZWQgdG8gc2hvdyB5b3VyIHVzZXIgdGhlIHBob25lIG51bWJlciB0byBjYWxsIHRvIGdldCB0aGUgYXV0aG9yaXNhdGlvbiBjb2RlLlxuICAgIC8vIFRoZW4geW91IG5lZWQgdG8gcHJvdmlkZSB5b3VyIHVzZXIgbWVhbnMgdG8gZW50ZXIgdGhhdCBnaXZlbiBjb2RlIGFuZCBzdWJtaXQgaXQgdmlhIFN1Ym1pdEF1dGhDb2RlKCkuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5Bd2FpdGluZ1Bob25lRm9yQXV0aCA9IG51bGw7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFdoZXRoZXIgdGhpcyB0cmFuc2FjdGlvbiBmbG93IGlzIG92ZXIgb3Igbm90LlxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuRmluaXNoZWQgPSBmYWxzZTsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIHN1Y2Nlc3Mgc3RhdGUgb2YgdGhpcyB0cmFuc2FjdGlvbi4gU3RhcnRzIG9mZiBhcyBVbmtub3duLlxuICAgIC8vIFdoZW4gZmluaXNoZWQsIGNhbiBiZSBTdWNjZXNzLCBGYWlsZWQgT1IgVW5rbm93bi5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLlN1Y2Nlc3MgPSBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlN1Y2Nlc3NTdGF0ZVwiXS5Vbmtub3duOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgcmVzcG9uc2UgYXQgdGhlIGVuZCBvZiB0aGUgdHJhbnNhY3Rpb24uIFxuICAgIC8vIE1pZ2h0IG5vdCBiZSBwcmVzZW50IGluIGFsbCBlZGdlIGNhc2VzLlxuICAgIC8vIFlvdSBjYW4gdGhlbiB0dXJuIHRoaXMgTWVzc2FnZSBpbnRvIHRoZSBhcHByb3ByaWF0ZSBzdHJ1Y3R1cmUsXG4gICAgLy8gc3VjaCBhcyBQdXJjaGFzZVJlc3BvbnNlLCBSZWZ1bmRSZXNwb25zZSwgZXRjXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5SZXNwb25zZSA9IG51bGw7IC8vIDxzdW1tYXJ5PlxuICAgIC8vIFRoZSBtZXNzYWdlIHRoZSB3ZSByZWNlaXZlZCBmcm9tIEVGVFBPUyB0aGF0IHRvbGQgdXMgdGhhdCBzaWduYXR1cmUgaXMgcmVxdWlyZWQuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5TaWduYXR1cmVSZXF1aXJlZE1lc3NhZ2UgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgbWVzc2FnZSB0aGUgd2UgcmVjZWl2ZWQgZnJvbSBFRlRQT1MgdGhhdCB0b2xkIHVzIHRoYXQgUGhvbmUgRm9yIEF1dGggaXMgcmVxdWlyZWQuXG4gICAgLy8gPC9zdW1tYXJ5PlxuXG4gICAgdGhpcy5QaG9uZUZvckF1dGhSZXF1aXJlZE1lc3NhZ2UgPSBudWxsOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBUaGUgdGltZSB3aGVuIHRoZSBjYW5jZWwgYXR0ZW1wdCB3YXMgbWFkZS5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLkNhbmNlbEF0dGVtcHRUaW1lID0gbnVsbDsgLy8gPHN1bW1hcnk+XG4gICAgLy8gVGhlIHJlcXVlc3QgbWVzc2FnZSB0aGF0IHdlIGFyZSBzZW5kaW5nL3NlbnQgdG8gdGhlIHNlcnZlci5cbiAgICAvLyA8L3N1bW1hcnk+XG5cbiAgICB0aGlzLlJlcXVlc3QgPSBtZXNzYWdlOyAvLyA8c3VtbWFyeT5cbiAgICAvLyBXaGV0aGVyIHdlJ3JlIGN1cnJlbnRseSB3YWl0aW5nIGZvciBhIEdldCBMYXN0IFRyYW5zYWN0aW9uIFJlc3BvbnNlIHRvIGdldCBhbiB1cGRhdGUuIFxuICAgIC8vIDwvc3VtbWFyeT5cblxuICAgIHRoaXMuQXdhaXRpbmdHbHRSZXNwb25zZSA9IG51bGw7XG4gICAgdGhpcy5HTFRSZXNwb25zZVBvc1JlZklkID0gbnVsbDtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkoVHJhbnNhY3Rpb25GbG93U3RhdGUsIFt7XG4gICAga2V5OiBcIlNlbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2VudChtc2cpIHtcbiAgICAgIHRoaXMuUmVxdWVzdFNlbnQgPSB0cnVlO1xuICAgICAgdGhpcy5SZXF1ZXN0VGltZSA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLkxhc3RTdGF0ZVJlcXVlc3RUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIHRoaXMuRGlzcGxheU1lc3NhZ2UgPSBtc2c7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkNhbmNlbGxpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQ2FuY2VsbGluZyhtc2cpIHtcbiAgICAgIHRoaXMuQXR0ZW1wdGluZ1RvQ2FuY2VsID0gdHJ1ZTtcbiAgICAgIHRoaXMuQ2FuY2VsQXR0ZW1wdFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgdGhpcy5EaXNwbGF5TWVzc2FnZSA9IG1zZztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiQ2FuY2VsRmFpbGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIENhbmNlbEZhaWxlZChtc2cpIHtcbiAgICAgIHRoaXMuQXR0ZW1wdGluZ1RvQ2FuY2VsID0gZmFsc2U7XG4gICAgICB0aGlzLkRpc3BsYXlNZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJDYWxsaW5nR2x0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIENhbGxpbmdHbHQoZ2x0UmVxdWVzdElkKSB7XG4gICAgICB0aGlzLkF3YWl0aW5nR2x0UmVzcG9uc2UgPSB0cnVlO1xuICAgICAgdGhpcy5MYXN0U3RhdGVSZXF1ZXN0VGltZSA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLkxhc3RHbHRSZXF1ZXN0SWQgPSBnbHRSZXF1ZXN0SWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkdvdEdsdFJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdvdEdsdFJlc3BvbnNlKCkge1xuICAgICAgdGhpcy5Bd2FpdGluZ0dsdFJlc3BvbnNlID0gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkZhaWxlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBGYWlsZWQocmVzcG9uc2UsIG1zZykge1xuICAgICAgdGhpcy5TdWNjZXNzID0gX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJTdWNjZXNzU3RhdGVcIl0uRmFpbGVkO1xuICAgICAgdGhpcy5GaW5pc2hlZCA9IHRydWU7XG4gICAgICB0aGlzLlJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICB0aGlzLkRpc3BsYXlNZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJTaWduYXR1cmVSZXF1aXJlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTaWduYXR1cmVSZXF1aXJlZChzcGlNZXNzYWdlLCBtc2cpIHtcbiAgICAgIHRoaXMuU2lnbmF0dXJlUmVxdWlyZWRNZXNzYWdlID0gc3BpTWVzc2FnZTtcbiAgICAgIHRoaXMuQXdhaXRpbmdTaWduYXR1cmVDaGVjayA9IHRydWU7XG4gICAgICB0aGlzLkRpc3BsYXlNZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJTaWduYXR1cmVSZXNwb25kZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gU2lnbmF0dXJlUmVzcG9uZGVkKG1zZykge1xuICAgICAgdGhpcy5Bd2FpdGluZ1NpZ25hdHVyZUNoZWNrID0gZmFsc2U7XG4gICAgICB0aGlzLkRpc3BsYXlNZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJQaG9uZUZvckF1dGhSZXF1aXJlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBQaG9uZUZvckF1dGhSZXF1aXJlZChzcGlNZXNzYWdlLCBtc2cpIHtcbiAgICAgIHRoaXMuUGhvbmVGb3JBdXRoUmVxdWlyZWRNZXNzYWdlID0gc3BpTWVzc2FnZTtcbiAgICAgIHRoaXMuQXdhaXRpbmdQaG9uZUZvckF1dGggPSB0cnVlO1xuICAgICAgdGhpcy5EaXNwbGF5TWVzc2FnZSA9IG1zZztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiQXV0aENvZGVTZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEF1dGhDb2RlU2VudChtc2cpIHtcbiAgICAgIHRoaXMuQXdhaXRpbmdQaG9uZUZvckF1dGggPSBmYWxzZTtcbiAgICAgIHRoaXMuRGlzcGxheU1lc3NhZ2UgPSBtc2c7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkNvbXBsZXRlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBDb21wbGV0ZWQoc3RhdGUsIHJlc3BvbnNlLCBtc2cpIHtcbiAgICAgIHRoaXMuU3VjY2VzcyA9IHN0YXRlO1xuICAgICAgdGhpcy5SZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgdGhpcy5GaW5pc2hlZCA9IHRydWU7XG4gICAgICB0aGlzLkF0dGVtcHRpbmdUb0NhbmNlbCA9IGZhbHNlO1xuICAgICAgdGhpcy5Bd2FpdGluZ0dsdFJlc3BvbnNlID0gZmFsc2U7XG4gICAgICB0aGlzLkF3YWl0aW5nU2lnbmF0dXJlQ2hlY2sgPSBmYWxzZTtcbiAgICAgIHRoaXMuQXdhaXRpbmdQaG9uZUZvckF1dGggPSBmYWxzZTtcbiAgICAgIHRoaXMuRGlzcGxheU1lc3NhZ2UgPSBtc2c7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlVua25vd25Db21wbGV0ZWRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVW5rbm93bkNvbXBsZXRlZChtc2cpIHtcbiAgICAgIHRoaXMuU3VjY2VzcyA9IF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiU3VjY2Vzc1N0YXRlXCJdLlVua25vd247XG4gICAgICB0aGlzLlJlc3BvbnNlID0gbnVsbDtcbiAgICAgIHRoaXMuRmluaXNoZWQgPSB0cnVlO1xuICAgICAgdGhpcy5BdHRlbXB0aW5nVG9DYW5jZWwgPSBmYWxzZTtcbiAgICAgIHRoaXMuQXdhaXRpbmdHbHRSZXNwb25zZSA9IGZhbHNlO1xuICAgICAgdGhpcy5Bd2FpdGluZ1NpZ25hdHVyZUNoZWNrID0gZmFsc2U7XG4gICAgICB0aGlzLkF3YWl0aW5nUGhvbmVGb3JBdXRoID0gZmFsc2U7XG4gICAgICB0aGlzLkRpc3BsYXlNZXNzYWdlID0gbXNnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUcmFuc2FjdGlvbkZsb3dTdGF0ZTtcbn0oKTsgLy8gPHN1bW1hcnk+XG4vLyBVc2VkIGFzIGEgcmV0dXJuIGluIHRoZSBTdWJtaXRBdXRoQ29kZSBtZXRob2QgdG8gc2lnbmlmeSB3aGV0aGVyIENvZGUgaXMgdmFsaWRcbi8vIDwvc3VtbWFyeT5cblxudmFyIFN1Ym1pdEF1dGhDb2RlUmVzdWx0ID0gZnVuY3Rpb24gU3VibWl0QXV0aENvZGVSZXN1bHQodmFsaWRGb3JtYXQsIG1lc3NhZ2UpIHtcbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKSh0aGlzLCBTdWJtaXRBdXRoQ29kZVJlc3VsdCk7XG5cbiAgdGhpcy5WYWxpZEZvcm1hdCA9IHZhbGlkRm9ybWF0OyAvLyA8c3VtbWFyeT5cbiAgLy8gVGV4dCB0aGF0IGdpdmVzIHJlYXNvbiBmb3IgSW52YWxpZGl0eVxuICAvLyA8L3N1bW1hcnk+XG5cbiAgdGhpcy5NZXNzYWdlID0gbWVzc2FnZTtcbn07XG52YXIgU3BpQ29uZmlnID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3BpQ29uZmlnKCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkodGhpcywgU3BpQ29uZmlnKTtcblxuICAgIHRoaXMuUHJpbnRNZXJjaGFudENvcHkgPSBmYWxzZTtcbiAgICB0aGlzLlByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gZmFsc2U7XG4gICAgdGhpcy5TaWduYXR1cmVGbG93T25FZnRwb3MgPSBmYWxzZTtcbiAgICB0aGlzLkVuYWJsZWRQcmludE1lcmNoYW50Q29weSA9IGZhbHNlO1xuICAgIHRoaXMuRW5hYmxlZFByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zID0gZmFsc2U7XG4gICAgdGhpcy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zID0gZmFsc2U7XG4gIH1cblxuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKFNwaUNvbmZpZywgW3tcbiAgICBrZXk6IFwiQWRkUmVjZWlwdENvbmZpZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBBZGRSZWNlaXB0Q29uZmlnKG1lc3NhZ2VEYXRhKSB7XG4gICAgICBpZiAodGhpcy5Qcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcyAmJiB0aGlzLkVuYWJsZWRQcm9tcHRGb3JDdXN0b21lckNvcHlPbkVmdHBvcykge1xuICAgICAgICBtZXNzYWdlRGF0YS5wcm9tcHRfZm9yX2N1c3RvbWVyX2NvcHkgPSB0aGlzLlByb21wdEZvckN1c3RvbWVyQ29weU9uRWZ0cG9zO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5TaWduYXR1cmVGbG93T25FZnRwb3MgJiYgdGhpcy5FbmFibGVkU2lnbmF0dXJlRmxvd09uRWZ0cG9zKSB7XG4gICAgICAgIG1lc3NhZ2VEYXRhLnByaW50X2Zvcl9zaWduYXR1cmVfcmVxdWlyZWRfdHJhbnNhY3Rpb25zID0gdGhpcy5TaWduYXR1cmVGbG93T25FZnRwb3M7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLlByaW50TWVyY2hhbnRDb3B5ICYmIHRoaXMuRW5hYmxlZFByaW50TWVyY2hhbnRDb3B5KSB7XG4gICAgICAgIG1lc3NhZ2VEYXRhLnByaW50X21lcmNoYW50X2NvcHkgPSB0aGlzLlByaW50TWVyY2hhbnRDb3B5O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVzc2FnZURhdGE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIFRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIFwiUHJvbXB0Rm9yQ3VzdG9tZXJDb3B5T25FZnRwb3M6XCIuY29uY2F0KHRoaXMuUHJvbXB0Rm9yQ3VzdG9tZXJDb3B5T25FZnRwb3MsIFwiIFNpZ25hdHVyZUZsb3dPbkVmdHBvczpcIikuY29uY2F0KHRoaXMuU2lnbmF0dXJlRmxvd09uRWZ0cG9zLCBcIiBQcmludE1lcmNoYW50Q29weTogXCIpLmNvbmNhdCh0aGlzLlByaW50TWVyY2hhbnRDb3B5KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU3BpQ29uZmlnO1xufSgpO1xudmFyIFRyYW5zYWN0aW9uT3B0aW9ucyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRyYW5zYWN0aW9uT3B0aW9ucygpIHtcbiAgICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKHRoaXMsIFRyYW5zYWN0aW9uT3B0aW9ucyk7XG5cbiAgICB0aGlzLl9jdXN0b21lclJlY2VpcHRIZWFkZXIgPSBcIlwiO1xuICAgIHRoaXMuX2N1c3RvbWVyUmVjZWlwdEZvb3RlciA9IFwiXCI7XG4gICAgdGhpcy5fbWVyY2hhbnRSZWNlaXB0SGVhZGVyID0gXCJcIjtcbiAgICB0aGlzLl9tZXJjaGFudFJlY2VpcHRGb290ZXIgPSBcIlwiO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKShUcmFuc2FjdGlvbk9wdGlvbnMsIFt7XG4gICAga2V5OiBcIlNldEN1c3RvbWVyUmVjZWlwdEhlYWRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTZXRDdXN0b21lclJlY2VpcHRIZWFkZXIoY3VzdG9tZXJSZWNlaXB0SGVhZGVyKSB7XG4gICAgICB0aGlzLl9jdXN0b21lclJlY2VpcHRIZWFkZXIgPSBjdXN0b21lclJlY2VpcHRIZWFkZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlNldEN1c3RvbWVyUmVjZWlwdEZvb3RlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTZXRDdXN0b21lclJlY2VpcHRGb290ZXIoY3VzdG9tZXJSZWNlaXB0Rm9vdGVyKSB7XG4gICAgICB0aGlzLl9jdXN0b21lclJlY2VpcHRGb290ZXIgPSBjdXN0b21lclJlY2VpcHRGb290ZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlNldE1lcmNoYW50UmVjZWlwdEhlYWRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTZXRNZXJjaGFudFJlY2VpcHRIZWFkZXIobWVyY2hhbnRSZWNlaXB0SGVhZGVyKSB7XG4gICAgICB0aGlzLl9tZXJjaGFudFJlY2VpcHRIZWFkZXIgPSBtZXJjaGFudFJlY2VpcHRIZWFkZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIlNldE1lcmNoYW50UmVjZWlwdEZvb3RlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBTZXRNZXJjaGFudFJlY2VpcHRGb290ZXIobWVyY2hhbnRSZWNlaXB0Rm9vdGVyKSB7XG4gICAgICB0aGlzLl9tZXJjaGFudFJlY2VpcHRGb290ZXIgPSBtZXJjaGFudFJlY2VpcHRGb290ZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkFkZE9wdGlvbnNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gQWRkT3B0aW9ucyhtZXNzYWdlRGF0YSkge1xuICAgICAgbWVzc2FnZURhdGEuY3VzdG9tZXJfcmVjZWlwdF9oZWFkZXIgPSB0aGlzLl9jdXN0b21lclJlY2VpcHRIZWFkZXI7XG4gICAgICBtZXNzYWdlRGF0YS5jdXN0b21lcl9yZWNlaXB0X2Zvb3RlciA9IHRoaXMuX2N1c3RvbWVyUmVjZWlwdEZvb3RlcjtcbiAgICAgIG1lc3NhZ2VEYXRhLm1lcmNoYW50X3JlY2VpcHRfaGVhZGVyID0gdGhpcy5fbWVyY2hhbnRSZWNlaXB0SGVhZGVyO1xuICAgICAgbWVzc2FnZURhdGEubWVyY2hhbnRfcmVjZWlwdF9mb290ZXIgPSB0aGlzLl9tZXJjaGFudFJlY2VpcHRGb290ZXI7XG4gICAgICByZXR1cm4gbWVzc2FnZURhdGE7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRyYW5zYWN0aW9uT3B0aW9ucztcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIFwiLi9zcmMvU3BpUGF5QXRUYWJsZS5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcXFxuICAhKioqIC4vc3JjL1NwaVBheUF0VGFibGUuanMgKioqIVxuICBcXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBTcGlQYXlBdFRhYmxlICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlNwaVBheUF0VGFibGVcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBTcGlQYXlBdFRhYmxlOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX3JlYWRPbmx5RXJyb3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVhZE9ubHlFcnJvciAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcmVhZE9ubHlFcnJvci5qc1wiKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYmFiZWxfcnVudGltZV9oZWxwZXJzX3JlYWRPbmx5RXJyb3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX3JlYWRPbmx5RXJyb3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyAqLyBcIi4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9SZXF1ZXN0SWRIZWxwZXIgKi8gXCIuL3NyYy9SZXF1ZXN0SWRIZWxwZXIuanNcIik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX1BheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUGF5QXRUYWJsZSAqLyBcIi4vc3JjL1BheUF0VGFibGUuanNcIik7XG5cblxuXG5cblxudmFyIFNwaVBheUF0VGFibGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTcGlQYXlBdFRhYmxlKHNwaSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkodGhpcywgU3BpUGF5QXRUYWJsZSk7XG5cbiAgICB0aGlzLl9zcGkgPSBzcGk7XG4gICAgdGhpcy5fbG9nID0gY29uc29sZTtcbiAgICB0aGlzLkNvbmZpZyA9IG5ldyBfUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiUGF5QXRUYWJsZUNvbmZpZ1wiXSgpO1xuICB9IC8vIDxzdW1tYXJ5PlxuICAvLyBUaGlzIGRlbGVnYXRlIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIEVmdHBvcyBuZWVkcyB0byBrbm93IHRoZSBjdXJyZW50IHN0YXRlIG9mIGEgYmlsbCBmb3IgYSB0YWJsZS4gXG4gIC8vIDxwYXJhIC8+XG4gIC8vIFBhcmFtZXRlcnM6PHBhcmEgLz5cbiAgLy8gYmlsbElkIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIG9mIHRoZSBiaWxsLiBJZiBlbXB0eSwgaXQgbWVhbnMgdGhhdCB0aGUgUGF5QXRUYWJsZSBmbG93IG9uIHRoZSBFZnRwb3MgaXMganVzdCBzdGFydGluZywgYW5kIHRoZSBsb29rdXAgaXMgYnkgdGFibGVJZC48cGFyYSAvPlxuICAvLyB0YWJsZUlkIC0gVGhlIGlkZW50aWZpZXIgb2YgdGhlIHRhYmxlIHRoYXQgdGhlIGJpbGwgaXMgZm9yLiA8cGFyYSAvPlxuICAvLyBvcGVyYXRvcklkIC0gVGhlIGlkIG9mIHRoZSBvcGVyYXRvciBlbnRlcmVkIG9uIHRoZSBlZnRwb3MuIDxwYXJhIC8+XG4gIC8vIDxwYXJhIC8+XG4gIC8vIFJldHVybjo8cGFyYSAvPlxuICAvLyBZb3UgbmVlZCB0byByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGJpbGwuXG4gIC8vIDwvc3VtbWFyeT5cblxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0KCkoU3BpUGF5QXRUYWJsZSwgW3tcbiAgICBrZXk6IFwiR2V0QmlsbFN0YXR1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBHZXRCaWxsU3RhdHVzKGJpbGxJZCwgdGFibGVJZCwgb3BlcmF0b3JJZCwgcGF5bWVudEZsb3dTdGFydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01ldGhvZCBub3QgaW1wbGVtZW50ZWQuIFBsZWFzZSBvdmVyd3JpdGUgdGhpcyBtZXRob2QgaW4geW91ciBQT1MnKTtcbiAgICB9IC8vIEFic3RyYWN0IG1ldGhvZCwgbXVzdCBpbXBsZW1lbnQgaW4gUE9TIHN5c3RlbVxuXG4gIH0sIHtcbiAgICBrZXk6IFwiQmlsbFBheW1lbnRSZWNlaXZlZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBCaWxsUGF5bWVudFJlY2VpdmVkKGJpbGxQYXltZW50LCB1cGRhdGVkQmlsbERhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4gUGxlYXNlIG92ZXJ3cml0ZSB0aGlzIG1ldGhvZCBpbiB5b3VyIFBPUycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRPcGVuVGFibGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldE9wZW5UYWJsZXMob3BlcmF0b3JJZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLiBQbGVhc2Ugb3ZlcndyaXRlIHRoaXMgbWV0aG9kIGluIHlvdXIgUE9TJyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkJpbGxQYXltZW50Rmxvd0VuZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEJpbGxQYXltZW50Rmxvd0VuZGVkKG1lc3NhZ2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4gUGxlYXNlIG92ZXJ3cml0ZSB0aGlzIG1ldGhvZCBpbiB5b3VyIFBPUycpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJQdXNoUGF5QXRUYWJsZUNvbmZpZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBQdXNoUGF5QXRUYWJsZUNvbmZpZygpIHtcbiAgICAgIHRoaXMuX3NwaS5fc2VuZCh0aGlzLkNvbmZpZy5Ub01lc3NhZ2UoX1JlcXVlc3RJZEhlbHBlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiUmVxdWVzdElkSGVscGVyXCJdLklkKFwicGF0Y29uZlwiKSkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlR2V0QmlsbERldGFpbHNSZXF1ZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVHZXRCaWxsRGV0YWlsc1JlcXVlc3QobSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG9wZXJhdG9ySWQgPSBtLkRhdGFbXCJvcGVyYXRvcl9pZFwiXTtcbiAgICAgIHZhciB0YWJsZUlkID0gbS5EYXRhW1widGFibGVfaWRcIl07XG4gICAgICB2YXIgcGF5bWVudEZsb3dTdGFydGVkID0gbS5EYXRhW1wicGF5bWVudF9mbG93X3N0YXJ0ZWRcIl07IC8vIEFzayBQT1MgZm9yIEJpbGwgRGV0YWlscyBmb3IgdGhpcyB0YWJsZUlkLCBpbmx1ZGluZyBlbmNvZGVkIFBheW1lbnREYXRhXG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5HZXRCaWxsU3RhdHVzKFwiXCIsIHRhYmxlSWQsIG9wZXJhdG9ySWQsIHBheW1lbnRGbG93U3RhcnRlZCkpLnRoZW4oZnVuY3Rpb24gKGJpbGxTdGF0dXMpIHtcbiAgICAgICAgYmlsbFN0YXR1cy5UYWJsZUlkID0gdGFibGVJZDtcblxuICAgICAgICBpZiAoYmlsbFN0YXR1cy5Ub3RhbEFtb3VudCA8PSAwKSB7XG4gICAgICAgICAgX3RoaXMuX2xvZy5pbmZvKFwiVGFibGUgaGFzIDAgdG90YWwgYW1vdW50LiBub3Qgc2VuZGluZyBpdCB0byBlZnRwb3MuXCIpO1xuXG4gICAgICAgICAgYmlsbFN0YXR1cy5SZXN1bHQgPSBfUGF5QXRUYWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fW1wiQmlsbFJldHJpZXZhbFJlc3VsdFwiXS5JTlZBTElEX1RBQkxFX0lEO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMuX3NwaS5fc2VuZChiaWxsU3RhdHVzLlRvTWVzc2FnZShtLklkKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUJpbGxQYXltZW50QWR2aWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVCaWxsUGF5bWVudEFkdmljZShtKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGJpbGxQYXltZW50ID0gbmV3IF9QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJCaWxsUGF5bWVudFwiXShtKTsgLy8gQXNrIFBPUyBmb3IgQmlsbCBEZXRhaWxzLCBpbmx1ZGluZyBlbmNvZGVkIFBheW1lbnREYXRhXG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5HZXRCaWxsU3RhdHVzKGJpbGxQYXltZW50LkJpbGxJZCwgYmlsbFBheW1lbnQuVGFibGVJZCwgYmlsbFBheW1lbnQuT3BlcmF0b3JJZCwgYmlsbFBheW1lbnQuUGF5bWVudEZsb3dTdGFydGVkKSkudGhlbihmdW5jdGlvbiAoZXhpc3RpbmdCaWxsU3RhdHVzKSB7XG4gICAgICAgIGlmIChleGlzdGluZ0JpbGxTdGF0dXMuUmVzdWx0ICE9IF9QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJCaWxsUmV0cmlldmFsUmVzdWx0XCJdLlNVQ0NFU1MpIHtcbiAgICAgICAgICBfdGhpczIuX2xvZy53YXJuKFwiQ291bGQgbm90IHJldHJpZXZlIEJpbGwgU3RhdHVzIGZvciBQYXltZW50IEFkdmljZS4gU2VuZGluZyBFcnJvciB0byBFZnRwb3MuXCIpO1xuXG4gICAgICAgICAgX3RoaXMyLl9zcGkuX3NlbmQoZXhpc3RpbmdCaWxsU3RhdHVzLlRvTWVzc2FnZShtLklkKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXhpc3RpbmdQYXltZW50SGlzdG9yeSA9IGV4aXN0aW5nQmlsbFN0YXR1cy5nZXRCaWxsUGF5bWVudEhpc3RvcnkoKTtcbiAgICAgICAgdmFyIGZvdW5kRXhpc3RpbmdFbnRyeSA9IGV4aXN0aW5nUGF5bWVudEhpc3RvcnkuZmluZChmdW5jdGlvbiAocGhlKSB7XG4gICAgICAgICAgcmV0dXJuIHBoZS5HZXRUZXJtaW5hbFJlZklkKCkgPT0gYmlsbFBheW1lbnQuUHVyY2hhc2VSZXNwb25zZS5HZXRUZXJtaW5hbFJlZmVyZW5jZUlkKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChmb3VuZEV4aXN0aW5nRW50cnkpIHtcbiAgICAgICAgICAvLyBXZSBoYXZlIGFscmVhZHkgcHJvY2Vzc2VkIHRoaXMgcGF5bWVudC5cbiAgICAgICAgICAvLyBwZXJoYXBzIEVmdHBvcyBkaWQgZ2V0IG91ciBhY2tub3dsZWRnZW1lbnQuXG4gICAgICAgICAgLy8gTGV0J3MgdXBkYXRlIEVmdHBvcy5cbiAgICAgICAgICBfdGhpczIuX2xvZy53YXJuKFwiSGFkIGFscmVhZHkgcmVjZWl2ZWQgdGhpcyBiaWxsX3BheW1lbW50IGFkdmljZSBmcm9tIGVmdHBvcy4gSWdub3JpbmcuXCIpO1xuXG4gICAgICAgICAgX3RoaXMyLl9zcGkuX3NlbmQoZXhpc3RpbmdCaWxsU3RhdHVzLlRvTWVzc2FnZShtLklkKSk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gTGV0J3MgYWRkIHRoZSBuZXcgZW50cnkgdG8gdGhlIGhpc3RvcnlcblxuXG4gICAgICAgIHZhciB1cGRhdGVkSGlzdG9yeUVudHJpZXMgPSBleGlzdGluZ1BheW1lbnRIaXN0b3J5O1xuICAgICAgICB1cGRhdGVkSGlzdG9yeUVudHJpZXMucHVzaChuZXcgX1BheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIlBheW1lbnRIaXN0b3J5RW50cnlcIl0oYmlsbFBheW1lbnQuUGF5bWVudFR5cGUudG9Mb3dlckNhc2UoKSwgYmlsbFBheW1lbnQuUHVyY2hhc2VSZXNwb25zZS5Ub1BheW1lbnRTdW1tYXJ5KCkpKTtcbiAgICAgICAgdmFyIHVwZGF0ZWRCaWxsRGF0YSA9IF9QYXlBdFRhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19bXCJCaWxsU3RhdHVzUmVzcG9uc2VcIl0uVG9CaWxsRGF0YSh1cGRhdGVkSGlzdG9yeUVudHJpZXMpOyAvLyBBZHZpc2UgUE9TIG9mIG5ldyBwYXltZW50IGFnYWluc3QgdGhpcyBiaWxsLCBhbmQgdGhlIHVwZGF0ZWQgQmlsbERhdGEgdG8gU2F2ZS5cblxuICAgICAgICBQcm9taXNlLnJlc29sdmUoX3RoaXMyLkJpbGxQYXltZW50UmVjZWl2ZWQoYmlsbFBheW1lbnQsIHVwZGF0ZWRCaWxsRGF0YSkpLnRoZW4oZnVuY3Rpb24gKHVwZGF0ZWRCaWxsU3RhdHVzKSB7XG4gICAgICAgICAgLy8gSnVzdCBpbiBjYXNlIGNsaWVudCBmb3Jnb3QgdG8gc2V0IHRoZXNlOlxuICAgICAgICAgIHVwZGF0ZWRCaWxsU3RhdHVzLkJpbGxJZCA9IGJpbGxQYXltZW50LkJpbGxJZDtcbiAgICAgICAgICB1cGRhdGVkQmlsbFN0YXR1cy5UYWJsZUlkID0gYmlsbFBheW1lbnQuVGFibGVJZDtcblxuICAgICAgICAgIGlmICh1cGRhdGVkQmlsbFN0YXR1cy5SZXN1bHQgIT0gX1BheUF0VGFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX1tcIkJpbGxSZXRyaWV2YWxSZXN1bHRcIl0uU1VDQ0VTUykge1xuICAgICAgICAgICAgX3RoaXMyLl9sb2cud2FybihcIlBPUyBFcnJvcmVkIHdoZW4gYmVpbmcgQWR2aXNlZCBvZiBQYXltZW50LiBMZXR0aW5nIEVGVFBPUyBrbm93LCBhbmQgc2VuZGluZyBleGlzdGluZyBiaWxsIGRhdGEuXCIpO1xuXG4gICAgICAgICAgICB1cGRhdGVkQmlsbFN0YXR1cy5CaWxsRGF0YSA9IGV4aXN0aW5nQmlsbFN0YXR1cy5CaWxsRGF0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlZEJpbGxTdGF0dXMuQmlsbERhdGEgPSB1cGRhdGVkQmlsbERhdGE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMyLl9zcGkuX3NlbmQodXBkYXRlZEJpbGxTdGF0dXMuVG9NZXNzYWdlKG0uSWQpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUdldFRhYmxlQ29uZmlnXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVHZXRUYWJsZUNvbmZpZyhtKSB7XG4gICAgICB0aGlzLl9zcGkuX3NlbmQodGhpcy5Db25maWcuVG9NZXNzYWdlKG0uSWQpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUdldE9wZW5UYWJsZXNSZXF1ZXN0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVHZXRPcGVuVGFibGVzUmVxdWVzdChtKSB7XG4gICAgICB2YXIgb3BlcmF0b3JJZCA9IG0uRGF0YVtcIm9wZXJhdG9yX2lkXCJdOyAvLyBBc2sgUE9TIGZvciBCaWxsIERldGFpbHMgZm9yIHRoaXMgdGFibGVJZCwgaW5sdWRpbmcgZW5jb2RlZCBQYXltZW50RGF0YVxuXG4gICAgICB2YXIgb3BlblRhYmxlc1Jlc3BvbnNlID0gdHlwZW9mIHRoaXMuR2V0T3BlblRhYmxlcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMuR2V0T3BlblRhYmxlcyhvcGVyYXRvcklkKSA6IG51bGw7XG5cbiAgICAgIGlmICghb3BlblRhYmxlc1Jlc3BvbnNlIHx8ICFvcGVuVGFibGVzUmVzcG9uc2UuVGFibGVEYXRhIHx8ICFvcGVuVGFibGVzUmVzcG9uc2UuVGFibGVEYXRhLmxlbmd0aCkge1xuICAgICAgICBvcGVuVGFibGVzUmVzcG9uc2UgPSAoX2JhYmVsX3J1bnRpbWVfaGVscGVyc19yZWFkT25seUVycm9yX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKFwib3BlblRhYmxlc1Jlc3BvbnNlXCIpLCBuZXcgR2V0T3BlblRhYmxlc1Jlc3BvbnNlKCkpO1xuXG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiVGhlcmUgaXMgbm8gb3BlbiB0YWJsZS5cIik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NwaS5fc2VuZChvcGVuVGFibGVzUmVzcG9uc2UuVG9NZXNzYWdlKG0uSWQpKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZUJpbGxQYXltZW50Rmxvd0VuZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVCaWxsUGF5bWVudEZsb3dFbmRlZChtKSB7XG4gICAgICB0aGlzLkJpbGxQYXltZW50Rmxvd0VuZGVkKG0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTcGlQYXlBdFRhYmxlO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9TcGlQcmVhdXRoLmpzXCI6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogLi9zcmMvU3BpUHJlYXV0aC5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIGV4cG9ydHMgcHJvdmlkZWQ6IFNwaVByZWF1dGggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiU3BpUHJlYXV0aFwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFNwaVByZWF1dGg7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1ByZWF1dGggKi8gXCIuL3NyYy9QcmVhdXRoLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vU3BpTW9kZWxzICovIFwiLi9zcmMvU3BpTW9kZWxzLmpzXCIpO1xuXG5cblxuXG52YXIgU3BpUHJlYXV0aCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNwaVByZWF1dGgoc3BpKSB7XG4gICAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSh0aGlzLCBTcGlQcmVhdXRoKTtcblxuICAgIHRoaXMuX3NwaSA9IHNwaTtcbiAgICB0aGlzLl9sb2cgPSBjb25zb2xlO1xuICAgIHRoaXMuQ29uZmlnID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlNwaUNvbmZpZ1wiXSgpO1xuICB9XG5cbiAgX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jcmVhdGVDbGFzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShTcGlQcmVhdXRoLCBbe1xuICAgIGtleTogXCJJbml0aWF0ZUFjY291bnRWZXJpZnlUeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJbml0aWF0ZUFjY291bnRWZXJpZnlUeChwb3NSZWZJZCkge1xuICAgICAgdmFyIHZlcmlmeU1zZyA9IG5ldyBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiQWNjb3VudFZlcmlmeVJlcXVlc3RcIl0ocG9zUmVmSWQpLlRvTWVzc2FnZSgpO1xuICAgICAgdmFyIHRmcyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvbkZsb3dTdGF0ZVwiXShwb3NSZWZJZCwgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25UeXBlXCJdLkFjY291bnRWZXJpZnksIDAsIHZlcmlmeU1zZywgXCJXYWl0aW5nIGZvciBFRlRQT1MgY29ubmVjdGlvbiB0byBtYWtlIGFjY291bnQgdmVyaWZ5IHJlcXVlc3RcIik7XG4gICAgICB2YXIgc2VudE1zZyA9IFwiQXNrZWQgRUZUUE9TIHRvIHZlcmlmeSBhY2NvdW50XCI7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdGlhdGVQcmVhdXRoVHgodGZzLCBzZW50TXNnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiSW5pdGlhdGVPcGVuVHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVPcGVuVHgocG9zUmVmSWQsIGFtb3VudENlbnRzKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICAgICAgdmFyIG1zZyA9IE9iamVjdC5hc3NpZ24obmV3IF9QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJQcmVhdXRoT3BlblJlcXVlc3RcIl0oYW1vdW50Q2VudHMsIHBvc1JlZklkKSwge1xuICAgICAgICBDb25maWc6IHRoaXMuQ29uZmlnLFxuICAgICAgICBPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KS5Ub01lc3NhZ2UoKTtcbiAgICAgIHZhciB0ZnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5QcmVhdXRoLCBhbW91bnRDZW50cywgbXNnLCBcIldhaXRpbmcgZm9yIEVGVFBPUyBjb25uZWN0aW9uIHRvIG1ha2UgcHJlYXV0aCByZXF1ZXN0IGZvciBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwLjApLnRvRml4ZWQoMikpKTtcbiAgICAgIHZhciBzZW50TXNnID0gXCJBc2tlZCBFRlRQT1MgdG8gY3JlYXRlIHByZWF1dGggZm9yIFwiLmNvbmNhdCgoYW1vdW50Q2VudHMgLyAxMDAuMCkudG9GaXhlZCgyKSk7XG4gICAgICByZXR1cm4gdGhpcy5faW5pdGlhdGVQcmVhdXRoVHgodGZzLCBzZW50TXNnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiSW5pdGlhdGVUb3B1cFR4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEluaXRpYXRlVG9wdXBUeChwb3NSZWZJZCwgcHJlYXV0aElkLCBhbW91bnRDZW50cykge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgICAgIHZhciBtc2cgPSBPYmplY3QuYXNzaWduKG5ldyBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aFRvcHVwUmVxdWVzdFwiXShwcmVhdXRoSWQsIGFtb3VudENlbnRzLCBwb3NSZWZJZCksIHtcbiAgICAgICAgQ29uZmlnOiB0aGlzLkNvbmZpZyxcbiAgICAgICAgT3B0aW9uczogb3B0aW9uc1xuICAgICAgfSkuVG9NZXNzYWdlKCk7XG4gICAgICB2YXIgdGZzID0gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uRmxvd1N0YXRlXCJdKHBvc1JlZklkLCBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvblR5cGVcIl0uUHJlYXV0aCwgYW1vdW50Q2VudHMsIG1zZywgXCJXYWl0aW5nIGZvciBFRlRQT1MgY29ubmVjdGlvbiB0byBtYWtlIHByZWF1dGggdG9wdXAgcmVxdWVzdCBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMC4wKS50b0ZpeGVkKDIpKSk7XG4gICAgICB2YXIgc2VudE1zZyA9IFwiQXNrZWQgRUZUUE9TIHRvIG1ha2UgcHJlYXV0aCB0b3B1cCBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMC4wKS50b0ZpeGVkKDIpKTtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0aWF0ZVByZWF1dGhUeCh0ZnMsIHNlbnRNc2cpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZVBhcnRpYWxDYW5jZWxsYXRpb25UeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJbml0aWF0ZVBhcnRpYWxDYW5jZWxsYXRpb25UeChwb3NSZWZJZCwgcHJlYXV0aElkLCBhbW91bnRDZW50cykge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvbk9wdGlvbnNcIl0oKTtcbiAgICAgIHZhciBtc2cgPSBPYmplY3QuYXNzaWduKG5ldyBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aFBhcnRpYWxDYW5jZWxsYXRpb25SZXF1ZXN0XCJdKHByZWF1dGhJZCwgYW1vdW50Q2VudHMsIHBvc1JlZklkKSwge1xuICAgICAgICBDb25maWc6IHRoaXMuQ29uZmlnLFxuICAgICAgICBPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KS5Ub01lc3NhZ2UoKTtcbiAgICAgIHZhciB0ZnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5QcmVhdXRoLCBhbW91bnRDZW50cywgbXNnLCBcIldhaXRpbmcgZm9yIEVGVFBPUyBjb25uZWN0aW9uIHRvIG1ha2UgcHJlYXV0aCBwYXJ0aWFsIGNhbmNlbGxhdGlvbiByZXF1ZXN0IGZvciBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwLjApLnRvRml4ZWQoMikpKTtcbiAgICAgIHZhciBzZW50TXNnID0gXCJBc2tlZCBFRlRQT1MgdG8gbWFrZSBwcmVhdXRoIHBhcnRpYWwgY2FuY2VsbGF0aW9uIGZvciBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwLjApLnRvRml4ZWQoMikpO1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRpYXRlUHJlYXV0aFR4KHRmcywgc2VudE1zZyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlRXh0ZW5kVHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVFeHRlbmRUeChwb3NSZWZJZCwgcHJlYXV0aElkKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICAgICAgdmFyIG1zZyA9IE9iamVjdC5hc3NpZ24obmV3IF9QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJQcmVhdXRoRXh0ZW5kUmVxdWVzdFwiXShwcmVhdXRoSWQsIHBvc1JlZklkKSwge1xuICAgICAgICBDb25maWc6IHRoaXMuQ29uZmlnLFxuICAgICAgICBPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KS5Ub01lc3NhZ2UoKTtcbiAgICAgIHZhciB0ZnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5QcmVhdXRoLCAwLCBtc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gbWFrZSBwcmVhdXRoIEV4dGVuZCByZXF1ZXN0XCIpO1xuICAgICAgdmFyIHNlbnRNc2cgPSBcIkFza2VkIEVGVFBPUyB0byBtYWtlIHByZWF1dGggRXh0ZW5kIHJlcXVlc3RcIjtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0aWF0ZVByZWF1dGhUeCh0ZnMsIHNlbnRNc2cpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJJbml0aWF0ZUNvbXBsZXRpb25UeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJbml0aWF0ZUNvbXBsZXRpb25UeChwb3NSZWZJZCwgcHJlYXV0aElkLCBhbW91bnRDZW50cykge1xuICAgICAgdmFyIHN1cmNoYXJnZUFtb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMDtcbiAgICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25PcHRpb25zXCJdKCk7XG4gICAgICB2YXIgbXNnID0gT2JqZWN0LmFzc2lnbihuZXcgX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhDb21wbGV0aW9uUmVxdWVzdFwiXShwcmVhdXRoSWQsIGFtb3VudENlbnRzLCBwb3NSZWZJZCksIHtcbiAgICAgICAgQ29uZmlnOiB0aGlzLkNvbmZpZyxcbiAgICAgICAgU3VyY2hhcmdlQW1vdW50OiBzdXJjaGFyZ2VBbW91bnQsXG4gICAgICAgIE9wdGlvbnM6IG9wdGlvbnNcbiAgICAgIH0pLlRvTWVzc2FnZSgpO1xuICAgICAgdmFyIHRmcyA9IG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJUcmFuc2FjdGlvbkZsb3dTdGF0ZVwiXShwb3NSZWZJZCwgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25UeXBlXCJdLlByZWF1dGgsIGFtb3VudENlbnRzLCBtc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gbWFrZSBwcmVhdXRoIGNvbXBsZXRpb24gcmVxdWVzdCBmb3IgXCIuY29uY2F0KChhbW91bnRDZW50cyAvIDEwMC4wKS50b0ZpeGVkKDIpKSk7XG4gICAgICB2YXIgc2VudE1zZyA9IFwiQXNrZWQgRUZUUE9TIHRvIG1ha2UgcHJlYXV0aCBjb21wbGV0aW9uIGZvciBcIi5jb25jYXQoKGFtb3VudENlbnRzIC8gMTAwLjApLnRvRml4ZWQoMikpO1xuICAgICAgcmV0dXJuIHRoaXMuX2luaXRpYXRlUHJlYXV0aFR4KHRmcywgc2VudE1zZyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIkluaXRpYXRlQ2FuY2VsVHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSW5pdGlhdGVDYW5jZWxUeChwb3NSZWZJZCwgcHJlYXV0aElkKSB7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uT3B0aW9uc1wiXSgpO1xuICAgICAgdmFyIG1zZyA9IE9iamVjdC5hc3NpZ24obmV3IF9QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJQcmVhdXRoQ2FuY2VsUmVxdWVzdFwiXShwcmVhdXRoSWQsIHBvc1JlZklkKSwge1xuICAgICAgICBDb25maWc6IHRoaXMuQ29uZmlnLFxuICAgICAgICBPcHRpb25zOiBvcHRpb25zXG4gICAgICB9KS5Ub01lc3NhZ2UoKTtcbiAgICAgIHZhciB0ZnMgPSBuZXcgX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiVHJhbnNhY3Rpb25GbG93U3RhdGVcIl0ocG9zUmVmSWQsIF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlRyYW5zYWN0aW9uVHlwZVwiXS5QcmVhdXRoLCAwLCBtc2csIFwiV2FpdGluZyBmb3IgRUZUUE9TIGNvbm5lY3Rpb24gdG8gbWFrZSBwcmVhdXRoIGNhbmNlbGxhdGlvbiByZXF1ZXN0XCIpO1xuICAgICAgdmFyIHNlbnRNc2cgPSBcIkFza2VkIEVGVFBPUyB0byBtYWtlIHByZWF1dGggY2FuY2VsbGF0aW9uIHJlcXVlc3RcIjtcbiAgICAgIHJldHVybiB0aGlzLl9pbml0aWF0ZVByZWF1dGhUeCh0ZnMsIHNlbnRNc2cpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaW5pdGlhdGVQcmVhdXRoVHhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2luaXRpYXRlUHJlYXV0aFR4KHRmcywgc2VudE1zZykge1xuICAgICAgaWYgKHRoaXMuX3NwaS5DdXJyZW50U3RhdHVzID09IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlNwaVN0YXR1c1wiXS5VbnBhaXJlZCkgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBQYWlyZWRcIik7XG4gICAgICBpZiAodGhpcy5fc3BpLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlNwaUZsb3dcIl0uSWRsZSkgcmV0dXJuIG5ldyBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJJbml0aWF0ZVR4UmVzdWx0XCJdKGZhbHNlLCBcIk5vdCBJZGxlXCIpO1xuICAgICAgdGhpcy5fc3BpLkN1cnJlbnRGbG93ID0gX1NwaU1vZGVsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fW1wiU3BpRmxvd1wiXS5UcmFuc2FjdGlvbjtcbiAgICAgIHRoaXMuX3NwaS5DdXJyZW50VHhGbG93U3RhdGUgPSB0ZnM7XG5cbiAgICAgIGlmICh0aGlzLl9zcGkuX3NlbmQodGZzLlJlcXVlc3QpKSB7XG4gICAgICAgIHRoaXMuX3NwaS5DdXJyZW50VHhGbG93U3RhdGUuU2VudChzZW50TXNnKTtcbiAgICAgIH1cblxuICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ1R4Rmxvd1N0YXRlQ2hhbmdlZCcsIHtcbiAgICAgICAgZGV0YWlsOiB0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlXG4gICAgICB9KSk7XG4gICAgICByZXR1cm4gbmV3IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIkluaXRpYXRlVHhSZXN1bHRcIl0odHJ1ZSwgXCJQcmVhdXRoIEluaXRpYXRlZFwiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZVByZWF1dGhNZXNzYWdlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVQcmVhdXRoTWVzc2FnZShtKSB7XG4gICAgICBzd2l0Y2ggKG0uRXZlbnROYW1lKSB7XG4gICAgICAgIGNhc2UgX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhFdmVudHNcIl0uQWNjb3VudFZlcmlmeVJlc3BvbnNlOlxuICAgICAgICAgIHRoaXMuX2hhbmRsZUFjY291bnRWZXJpZnlSZXNwb25zZShtKTtcblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhFdmVudHNcIl0uUHJlYXV0aE9wZW5SZXNwb25zZTpcbiAgICAgICAgY2FzZSBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aEV2ZW50c1wiXS5QcmVhdXRoVG9wdXBSZXNwb25zZTpcbiAgICAgICAgY2FzZSBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aEV2ZW50c1wiXS5QcmVhdXRoUGFydGlhbENhbmNlbGxhdGlvblJlc3BvbnNlOlxuICAgICAgICBjYXNlIF9QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJQcmVhdXRoRXZlbnRzXCJdLlByZWF1dGhFeHRlbmRSZXNwb25zZTpcbiAgICAgICAgY2FzZSBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aEV2ZW50c1wiXS5QcmVhdXRoQ29tcGxldGVSZXNwb25zZTpcbiAgICAgICAgY2FzZSBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aEV2ZW50c1wiXS5QcmVhdXRoQ2FuY2VsbGF0aW9uUmVzcG9uc2U6XG4gICAgICAgICAgdGhpcy5faGFuZGxlUHJlYXV0aFJlc3BvbnNlKG0pO1xuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aGlzLl9sb2cuaW5mbyhcIkkgZG9uJ3QgVW5kZXJzdGFuZCBQcmVhdXRoIEV2ZW50OiBcIi5jb25jYXQobS5FdmVudE5hbWUsIFwiLCBcIikuY29uY2F0KG0uRGF0YSwgXCIuIFBlcmhhcHMgSSBoYXZlIG5vdCBpbXBsZW1lbnRlZCBpdCB5ZXQuXCIpKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfaGFuZGxlQWNjb3VudFZlcmlmeVJlc3BvbnNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oYW5kbGVBY2NvdW50VmVyaWZ5UmVzcG9uc2UobSkge1xuICAgICAgdmFyIGluY29taW5nUG9zUmVmSWQgPSBtLkRhdGEucG9zX3JlZl9pZDtcbiAgICAgIHZhciBjdXJyZW50VHhGbG93U3RhdGUgPSB0aGlzLl9zcGkuQ3VycmVudFR4Rmxvd1N0YXRlO1xuXG4gICAgICBpZiAodGhpcy5fc3BpLkN1cnJlbnRGbG93ICE9IF9TcGlNb2RlbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlNwaUZsb3dcIl0uVHJhbnNhY3Rpb24gfHwgY3VycmVudFR4Rmxvd1N0YXRlLkZpbmlzaGVkIHx8ICFjdXJyZW50VHhGbG93U3RhdGUuUG9zUmVmSWQgPT09IGluY29taW5nUG9zUmVmSWQpIHtcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oXCJSZWNlaXZlZCBBY2NvdW50IFZlcmlmeSByZXNwb25zZSBidXQgSSB3YXMgbm90IHdhaXRpbmcgZm9yIG9uZS4gSW5jb21pbmcgUG9zIFJlZiBJRDogXCIuY29uY2F0KGluY29taW5nUG9zUmVmSWQpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFRILTFBLCBUSC0yQVxuXG5cbiAgICAgIGN1cnJlbnRUeEZsb3dTdGF0ZS5Db21wbGV0ZWQobS5HZXRTdWNjZXNzU3RhdGUoKSwgbSwgXCJBY2NvdW50IFZlcmlmeSBUcmFuc2FjdGlvbiBFbmRlZC5cIik7IC8vIFRILTZBLCBUSC02RVxuXG4gICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnVHhGbG93U3RhdGVDaGFuZ2VkJywge1xuICAgICAgICBkZXRhaWw6IHRoaXMuX3NwaS5DdXJyZW50VHhGbG93U3RhdGVcbiAgICAgIH0pKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiX2hhbmRsZVByZWF1dGhSZXNwb25zZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaGFuZGxlUHJlYXV0aFJlc3BvbnNlKG0pIHtcbiAgICAgIHZhciBpbmNvbWluZ1Bvc1JlZklkID0gbS5EYXRhLnBvc19yZWZfaWQ7XG4gICAgICB2YXIgY3VycmVudFR4Rmxvd1N0YXRlID0gdGhpcy5fc3BpLkN1cnJlbnRUeEZsb3dTdGF0ZTtcblxuICAgICAgaWYgKHRoaXMuX3NwaS5DdXJyZW50RmxvdyAhPSBfU3BpTW9kZWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bXCJTcGlGbG93XCJdLlRyYW5zYWN0aW9uIHx8IGN1cnJlbnRUeEZsb3dTdGF0ZS5GaW5pc2hlZCB8fCAhY3VycmVudFR4Rmxvd1N0YXRlLlBvc1JlZklkID09PSBpbmNvbWluZ1Bvc1JlZklkKSB7XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKFwiUmVjZWl2ZWQgUHJlYXV0aCByZXNwb25zZSBidXQgSSB3YXMgbm90IHdhaXRpbmcgZm9yIG9uZS4gSW5jb21pbmcgUG9zIFJlZiBJRDogXCIuY29uY2F0KGluY29taW5nUG9zUmVmSWQpKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIFRILTFBLCBUSC0yQVxuXG5cbiAgICAgIGN1cnJlbnRUeEZsb3dTdGF0ZS5Db21wbGV0ZWQobS5HZXRTdWNjZXNzU3RhdGUoKSwgbSwgXCJQcmVhdXRoIFRyYW5zYWN0aW9uIEVuZGVkLlwiKTsgLy8gVEgtNkEsIFRILTZFXG5cbiAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdUeEZsb3dTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICAgIGRldGFpbDogdGhpcy5fc3BpLkN1cnJlbnRUeEZsb3dTdGF0ZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiBcIklzUHJlYXV0aEV2ZW50XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIElzUHJlYXV0aEV2ZW50KGV2ZW50TmFtZSkge1xuICAgICAgcmV0dXJuIGV2ZW50TmFtZS5sYXN0SW5kZXhPZihcInByZWF1dGhcIiwgMCkgPT09IDAgfHwgZXZlbnROYW1lID09IF9QcmVhdXRoX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJQcmVhdXRoRXZlbnRzXCJdLlByZWF1dGhDb21wbGV0ZVJlc3BvbnNlIHx8IGV2ZW50TmFtZSA9PSBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aEV2ZW50c1wiXS5QcmVhdXRoQ29tcGxldGVSZXF1ZXN0IHx8IGV2ZW50TmFtZSA9PSBfUHJlYXV0aF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fW1wiUHJlYXV0aEV2ZW50c1wiXS5BY2NvdW50VmVyaWZ5UmVxdWVzdCB8fCBldmVudE5hbWUgPT0gX1ByZWF1dGhfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIlByZWF1dGhFdmVudHNcIl0uQWNjb3VudFZlcmlmeVJlc3BvbnNlO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTcGlQcmVhdXRoO1xufSgpO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gXCIuL3NyYy9UZXJtaW5hbFN0YXR1cy5qc1wiOlxuLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXFxcbiAgISoqKiAuL3NyYy9UZXJtaW5hbFN0YXR1cy5qcyAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qISBleHBvcnRzIHByb3ZpZGVkOiBUZXJtaW5hbFN0YXR1c1JlcXVlc3QsIFRlcm1pbmFsU3RhdHVzUmVzcG9uc2UsIFRlcm1pbmFsQmF0dGVyeSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJUZXJtaW5hbFN0YXR1c1JlcXVlc3RcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUZXJtaW5hbFN0YXR1c1JlcXVlc3Q7IH0pO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcIlRlcm1pbmFsU3RhdHVzUmVzcG9uc2VcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUZXJtaW5hbFN0YXR1c1Jlc3BvbnNlOyB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJUZXJtaW5hbEJhdHRlcnlcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBUZXJtaW5hbEJhdHRlcnk7IH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2sgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIEBiYWJlbC9ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MgKi8gXCIuL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NyZWF0ZUNsYXNzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9NZXNzYWdlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9NZXNzYWdlcyAqLyBcIi4vc3JjL01lc3NhZ2VzLmpzXCIpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vUmVxdWVzdElkSGVscGVyICovIFwiLi9zcmMvUmVxdWVzdElkSGVscGVyLmpzXCIpO1xuXG5cblxuXG52YXIgVGVybWluYWxTdGF0dXNSZXF1ZXN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVGVybWluYWxTdGF0dXNSZXF1ZXN0KCkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgVGVybWluYWxTdGF0dXNSZXF1ZXN0KTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoVGVybWluYWxTdGF0dXNSZXF1ZXN0LCBbe1xuICAgIGtleTogXCJUb01lc3NhZ2VcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gVG9NZXNzYWdlKCkge1xuICAgICAgdmFyIGRhdGEgPSB7fTtcbiAgICAgIHJldHVybiBuZXcgX01lc3NhZ2VzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bXCJNZXNzYWdlXCJdKF9SZXF1ZXN0SWRIZWxwZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX1tcIlJlcXVlc3RJZEhlbHBlclwiXS5JZChcInRybW5sXCIpLCBfTWVzc2FnZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1tcIkV2ZW50c1wiXS5UZXJtaW5hbFN0YXR1c1JlcXVlc3QsIGRhdGEsIHRydWUpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUZXJtaW5hbFN0YXR1c1JlcXVlc3Q7XG59KCk7XG52YXIgVGVybWluYWxTdGF0dXNSZXNwb25zZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRlcm1pbmFsU3RhdHVzUmVzcG9uc2UobSkge1xuICAgIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY2xhc3NDYWxsQ2hlY2tfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkodGhpcywgVGVybWluYWxTdGF0dXNSZXNwb25zZSk7XG5cbiAgICB0aGlzLl9tID0gbTtcbiAgfVxuXG4gIF9iYWJlbF9ydW50aW1lX2hlbHBlcnNfY3JlYXRlQ2xhc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0KCkoVGVybWluYWxTdGF0dXNSZXNwb25zZSwgW3tcbiAgICBrZXk6IFwiR2V0U3RhdHVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIEdldFN0YXR1cygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9tLkRhdGEuc3RhdHVzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJHZXRCYXR0ZXJ5TGV2ZWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gR2V0QmF0dGVyeUxldmVsKCkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuX20uRGF0YS5iYXR0ZXJ5X2xldmVsLCAxMCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIklzQ2hhcmdpbmdcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gSXNDaGFyZ2luZygpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuX20uRGF0YS5jaGFyZ2luZztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGVybWluYWxTdGF0dXNSZXNwb25zZTtcbn0oKTtcbnZhciBUZXJtaW5hbEJhdHRlcnkgPSBmdW5jdGlvbiBUZXJtaW5hbEJhdHRlcnkobSkge1xuICBfYmFiZWxfcnVudGltZV9oZWxwZXJzX2NsYXNzQ2FsbENoZWNrX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpKHRoaXMsIFRlcm1pbmFsQmF0dGVyeSk7XG5cbiAgdGhpcy5CYXR0ZXJ5TGV2ZWwgPSBwYXJzZUludChtLkRhdGEuYmF0dGVyeV9sZXZlbCwgMTApO1xufTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDA6XG4vKiEqKioqKioqKioqKioqKioqKioqKioqKiohKlxcXG4gICEqKiogYnVmZmVyIChpZ25vcmVkKSAqKiohXG4gIFxcKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qIChpZ25vcmVkKSAqL1xuXG4vKioqLyB9KVxuXG4vKioqKioqLyB9KTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk5emNHa3RZMnhwWlc1MExXcHpMM2RsWW5CaFkyc3ZkVzVwZG1WeWMyRnNUVzlrZFd4bFJHVm1hVzVwZEdsdmJpSXNJbmRsWW5CaFkyczZMeTl6Y0drdFkyeHBaVzUwTFdwekwzZGxZbkJoWTJzdlltOXZkSE4wY21Gd0lpd2lkMlZpY0dGamF6b3ZMM053YVMxamJHbGxiblF0YW5NdkxpOXBibVJsZUM1cWN5SXNJbmRsWW5CaFkyczZMeTl6Y0drdFkyeHBaVzUwTFdwekx5NHZibTlrWlY5dGIyUjFiR1Z6TDBCaVlXSmxiQzl5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZWE41Ym1OVWIwZGxibVZ5WVhSdmNpNXFjeUlzSW5kbFluQmhZMnM2THk5emNHa3RZMnhwWlc1MExXcHpMeTR2Ym05a1pWOXRiMlIxYkdWekwwQmlZV0psYkM5eWRXNTBhVzFsTDJobGJIQmxjbk12WTJ4aGMzTkRZV3hzUTJobFkyc3Vhbk1pTENKM1pXSndZV05yT2k4dmMzQnBMV05zYVdWdWRDMXFjeTh1TDI1dlpHVmZiVzlrZFd4bGN5OUFZbUZpWld3dmNuVnVkR2x0WlM5b1pXeHdaWEp6TDJOeVpXRjBaVU5zWVhOekxtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZMaTl1YjJSbFgyMXZaSFZzWlhNdlFHSmhZbVZzTDNKMWJuUnBiV1V2YUdWc2NHVnljeTl5WldGa1QyNXNlVVZ5Y205eUxtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZMaTl1YjJSbFgyMXZaSFZzWlhNdlFHSmhZbVZzTDNKMWJuUnBiV1V2Y21WblpXNWxjbUYwYjNJdmFXNWtaWGd1YW5NaUxDSjNaV0p3WVdOck9pOHZjM0JwTFdOc2FXVnVkQzFxY3k4dUwyNXZaR1ZmYlc5a2RXeGxjeTloWlhNdGFuTXZhVzVrWlhndWFuTWlMQ0ozWldKd1lXTnJPaTh2YzNCcExXTnNhV1Z1ZEMxcWN5OHVMMjV2WkdWZmJXOWtkV3hsY3k5aWJpNXFjeTlzYVdJdlltNHVhbk1pTENKM1pXSndZV05yT2k4dmMzQnBMV05zYVdWdWRDMXFjeTh1TDI1dlpHVmZiVzlrZFd4bGN5OXFjM05vWVM5emNtTXZjMmhoTG1weklpd2lkMlZpY0dGamF6b3ZMM053YVMxamJHbGxiblF0YW5NdkxpOXViMlJsWDIxdlpIVnNaWE12Y21WblpXNWxjbUYwYjNJdGNuVnVkR2x0WlM5eWRXNTBhVzFsTG1weklpd2lkMlZpY0dGamF6b3ZMM053YVMxamJHbGxiblF0YW5NdktIZGxZbkJoWTJzcEwySjFhV3hrYVc0dmJXOWtkV3hsTG1weklpd2lkMlZpY0dGamF6b3ZMM053YVMxamJHbGxiblF0YW5NdkxpOXpjbU12UTJGemFHOTFkQzVxY3lJc0luZGxZbkJoWTJzNkx5OXpjR2t0WTJ4cFpXNTBMV3B6THk0dmMzSmpMME52Ym01bFkzUnBiMjR1YW5NaUxDSjNaV0p3WVdOck9pOHZjM0JwTFdOc2FXVnVkQzFxY3k4dUwzTnlZeTlEY25sd2RHOHVhbk1pTENKM1pXSndZV05yT2k4dmMzQnBMV05zYVdWdWRDMXFjeTh1TDNOeVl5OUVhV1ptYVdWSVpXeHNiV0Z1TG1weklpd2lkMlZpY0dGamF6b3ZMM053YVMxamJHbGxiblF0YW5NdkxpOXpjbU12UzJWNVVtOXNiR2x1WjBobGJIQmxjaTVxY3lJc0luZGxZbkJoWTJzNkx5OXpjR2t0WTJ4cFpXNTBMV3B6THk0dmMzSmpMMHh2WjJkbGNpNXFjeUlzSW5kbFluQmhZMnM2THk5emNHa3RZMnhwWlc1MExXcHpMeTR2YzNKakwwMWxjM05oWjJWekxtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZMaTl6Y21NdlVHRnBjbWx1Wnk1cWN5SXNJbmRsWW5CaFkyczZMeTl6Y0drdFkyeHBaVzUwTFdwekx5NHZjM0pqTDFCaGFYSnBibWRJWld4d1pYSXVhbk1pTENKM1pXSndZV05yT2k4dmMzQnBMV05zYVdWdWRDMXFjeTh1TDNOeVl5OVFZWGxCZEZSaFlteGxMbXB6SWl3aWQyVmljR0ZqYXpvdkwzTndhUzFqYkdsbGJuUXRhbk12TGk5emNtTXZVR2x1WjBobGJIQmxjaTVxY3lJc0luZGxZbkJoWTJzNkx5OXpjR2t0WTJ4cFpXNTBMV3B6THk0dmMzSmpMMUJ2YzBsdVptOHVhbk1pTENKM1pXSndZV05yT2k4dmMzQnBMV05zYVdWdWRDMXFjeTh1TDNOeVl5OVFjbVZoZFhSb0xtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZMaTl6Y21NdlVISnBiblJwYm1jdWFuTWlMQ0ozWldKd1lXTnJPaTh2YzNCcExXTnNhV1Z1ZEMxcWN5OHVMM055WXk5UWRYSmphR0Z6WlM1cWN5SXNJbmRsWW5CaFkyczZMeTl6Y0drdFkyeHBaVzUwTFdwekx5NHZjM0pqTDFCMWNtTm9ZWE5sU0dWc2NHVnlMbXB6SWl3aWQyVmljR0ZqYXpvdkwzTndhUzFqYkdsbGJuUXRhbk12TGk5emNtTXZVbVZ4ZFdWemRFbGtTR1ZzY0dWeUxtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZMaTl6Y21NdlUyVmpjbVYwY3k1cWN5SXNJbmRsWW5CaFkyczZMeTl6Y0drdFkyeHBaVzUwTFdwekx5NHZjM0pqTDFObGNuWnBZMlV2UkdWMmFXTmxVMlZ5ZG1salpTNXFjeUlzSW5kbFluQmhZMnM2THk5emNHa3RZMnhwWlc1MExXcHpMeTR2YzNKakwxTmxkSFJzWlcxbGJuUXVhbk1pTENKM1pXSndZV05yT2k4dmMzQnBMV05zYVdWdWRDMXFjeTh1TDNOeVl5OVRjR2t1YW5NaUxDSjNaV0p3WVdOck9pOHZjM0JwTFdOc2FXVnVkQzFxY3k4dUwzTnlZeTlUY0dsTmIyUmxiSE11YW5NaUxDSjNaV0p3WVdOck9pOHZjM0JwTFdOc2FXVnVkQzFxY3k4dUwzTnlZeTlUY0dsUVlYbEJkRlJoWW14bExtcHpJaXdpZDJWaWNHRmphem92TDNOd2FTMWpiR2xsYm5RdGFuTXZMaTl6Y21NdlUzQnBVSEpsWVhWMGFDNXFjeUlzSW5kbFluQmhZMnM2THk5emNHa3RZMnhwWlc1MExXcHpMeTR2YzNKakwxUmxjbTFwYm1Gc1UzUmhkSFZ6TG1weklpd2lkMlZpY0dGamF6b3ZMM053YVMxamJHbGxiblF0YW5NdlluVm1abVZ5SUNocFoyNXZjbVZrS1NKZExDSnVZVzFsY3lJNld5SkRZWE5vYjNWMFQyNXNlVkpsY1hWbGMzUWlMQ0poYlc5MWJuUkRaVzUwY3lJc0luQnZjMUpsWmtsa0lpd2lVRzl6VW1WbVNXUWlMQ0pEWVhOb2IzVjBRVzF2ZFc1MElpd2lVM1Z5WTJoaGNtZGxRVzF2ZFc1MElpd2lRMjl1Wm1sbklpd2lVM0JwUTI5dVptbG5JaXdpVDNCMGFXOXVjeUlzSWxSeVlXNXpZV04wYVc5dVQzQjBhVzl1Y3lJc0ltUmhkR0VpTENKRmJtRmliR1ZrVUhKcGJuUk5aWEpqYUdGdWRFTnZjSGtpTENKRmJtRmliR1ZrVUhKdmJYQjBSbTl5UTNWemRHOXRaWEpEYjNCNVQyNUZablJ3YjNNaUxDSkZibUZpYkdWa1UybG5ibUYwZFhKbFJteHZkMDl1UldaMGNHOXpJaXdpUVdSa1VtVmpaV2x3ZEVOdmJtWnBaeUlzSWtGa1pFOXdkR2x2Ym5NaUxDSk5aWE56WVdkbElpd2lVbVZ4ZFdWemRFbGtTR1ZzY0dWeUlpd2lTV1FpTENKRmRtVnVkSE1pTENKRFlYTm9iM1YwVDI1c2VWSmxjM0J2Ym5ObElpd2liU0lzSWw5dElpd2lVbVZ4ZFdWemRFbGtJaXdpUkdGMFlTSXNJbkJ2YzE5eVpXWmZhV1FpTENKVFkyaGxiV1ZPWVcxbElpd2ljMk5vWlcxbFgyNWhiV1VpTENKVGRXTmpaWE56SWl3aVIyVjBVM1ZqWTJWemMxTjBZWFJsSWl3aVUzVmpZMlZ6YzFOMFlYUmxJaXdpWVhSMGNtbGlkWFJsSWl3aVEyOXVibVZqZEdsdmJsTjBZWFJsSWl3aVJHbHpZMjl1Ym1WamRHVmtJaXdpUTI5dWJtVmpkR2x1WnlJc0lrTnZibTVsWTNSbFpDSXNJbE5RU1Y5UVVrOVVUME5QVENJc0lrTnZibTVsWTNScGIyNVRkR0YwWlVWMlpXNTBRWEpuY3lJc0ltTnZibTVsWTNScGIyNVRkR0YwWlNJc0lrMWxjM05oWjJWRmRtVnVkRUZ5WjNNaUxDSnRaWE56WVdkbElpd2lRMjl1Ym1WamRHbHZiaUlzSWtGa1pISmxjM01pTENKVGRHRjBaU0lzSWxOd2FWQnliM1J2WTI5c0lpd2lYM2R6SWl3aVYyVmlVMjlqYTJWMElpd2lSWEp5YjNJaUxDSlZjMlZUWldOMWNtVlhaV0pUYjJOclpYUnpJaXdpYjI1dmNHVnVJaXdpY0c5c2JGZGxZbE52WTJ0bGRFTnZibTVsWTNScGIyNGlMQ0p2Ym0xbGMzTmhaMlVpTENKd1lYbHNiMkZrSWl3aWIyNU5aWE56WVdkbFVtVmpaV2wyWldRaUxDSnZibU5zYjNObElpd2liMjVEYkc5elpXUWlMQ0p2Ym1WeWNtOXlJaXdpWlhKeUlpd2liMjVGY25KdmNpSXNJbVJ2WTNWdFpXNTBJaXdpWkdsemNHRjBZMmhGZG1WdWRDSXNJa04xYzNSdmJVVjJaVzUwSWl3aVpHVjBZV2xzSWl3aWNtVmhaSGxUZEdGMFpTSXNJa05NVDFORlJDSXNJbU5zYjNObElpd2ljMlZ1WkNJc0ltTnZkVzUwSWl3aVQxQkZUaUlzSW05dVQzQmxibVZrSWl3aWMyVjBWR2x0Wlc5MWRDSXNJa1JwYzJOdmJtNWxZM1FpTENKRGNubHdkRzhpTENKclpYa2lMQ0ppZVhSbGN5SXNJbUZsYzJweklpd2lkWFJwYkhNaUxDSm9aWGdpTENKMGIwSjVkR1Z6SWl3aWFYWWlMQ0owWlhoMFFubDBaWE1pTENKd1lXUmthVzVuSWl3aWNHdGpjemNpTENKd1lXUWlMQ0oxZEdZNElpd2lZV1Z6UTJKaklpd2lUVzlrWlU5bVQzQmxjbUYwYVc5dUlpd2lZMkpqSWl3aVpXNWpjbmx3ZEdWa1FubDBaWE1pTENKbGJtTnllWEIwSWl3aVpXNWpjbmx3ZEdWa1UzUnlhVzVuSWl3aVpuSnZiVUo1ZEdWeklpd2laR1ZqY25sd2RHVmtRbmwwWlhNaUxDSmtaV055ZVhCMElpd2laR1ZqY25sd2RHVmtJaXdpYzNSeWFYQWlMQ0p0WlhOellXZGxWRzlUYVdkdUlpd2ljMmhoVDJKcUlpd2lhbk5UU0VFaUxDSnpaWFJJVFVGRFMyVjVJaXdpZFhCa1lYUmxJaXdpWjJWMFNFMUJReUlzSW5aaGJIVmxJaXdpYzJoaFNHRnphQ0lzSW1kbGRFaGhjMmdpTENKRWFXWm1hV1ZJWld4c2JXRnVJaXdpYldGNFZtRnNkV1VpTENKdFlYaFdZV3gxWlVKT0lpd2lRazRpTENKemFHbG1kRVJwYzNSaGJtTmxJaXdpVFdGMGFDSXNJbVpzYjI5eUlpd2ljbUZ1Wkc5dElpd2ljbUZ1WkVKcGRFbHVkQ0lzSW5Ob2NtNGlMQ0p0YVc0aUxDSmpiWEFpTENKd0lpd2laeUlzSW5CeWFYWmhkR1ZMWlhraUxDSmhTR1Y0SWl3aVowaGxlQ0lzSW0xdmJuUlFjbWx0WlNJc0ltMXZiblFpTENKblVtVmtJaXdpZEc5U1pXUWlMQ0p6WldOeVpYUWlMQ0p5WldSUWIzY2lMQ0ptY205dFVtVmtJaXdpZEc5VGRISnBibWNpTENKMGFHVnBjbEIxWW14cFkwdGxlU0lzSW5sdmRYSlFjbWwyWVhSbFMyVjVJaXdpWWtobGVDSXNJa0ZJWlhnaUxDSkNVbVZrSWl3aWRHOVZjSEJsY2tOaGMyVWlMQ0pMWlhsU2IyeHNhVzVuU0dWc2NHVnlJaXdpYTNKU1pYRjFaWE4wSWl3aVkzVnljbVZ1ZEZObFkzSmxkSE1pTENKTFpYbFNiMnhzVW1WemNHOXVjMlVpTENKdVpYZFRaV055WlhSeklpd2lVMlZqY21WMGN5SXNJa2RsYm1WeVlYUmxTR0Z6YUNJc0lrVnVZMHRsZVNJc0lraHRZV05MWlhraUxDSkxaWGxTYjJ4c2FXNW5VbVZ6ZFd4MElpd2lhMlY1VW05c2JHbHVaME52Ym1acGNtMWhkR2x2YmlJc0lrdGxlVkp2Ykd4cGJtZERiMjVtYVhKdFlYUnBiMjRpTENKT1pYZFRaV055WlhSeklpd2lURzluWjJWeUlpd2laV3hsYldWdWRDSXNJbXhwYm1WVFpYQmxjbUYwYjNJaUxDSmlkV1ptWlhJaUxDSmhjbWR6SWl3aWNIVnphQ0lzSW1wdmFXNGlMQ0pmY21WdVpHVnlJaXdpWTI5dWMyOXNaU0lzSW14dlp5SXNJbWx1Ym1WeVZHVjRkQ0lzSW5OamNtOXNiRlJ2Y0NJc0luTmpjbTlzYkVobGFXZG9kQ0lzSWxCaGFYSlNaWEYxWlhOMElpd2lTMlY1VW1WeGRXVnpkQ0lzSWt0bGVWSmxjM0J2Ym5ObElpd2lTMlY1UTJobFkyc2lMQ0pRWVdseVVtVnpjRzl1YzJVaUxDSkVjbTl3UzJWNWMwRmtkbWxqWlNJc0lreHZaMmx1VW1WeGRXVnpkQ0lzSWt4dloybHVVbVZ6Y0c5dWMyVWlMQ0pRYVc1bklpd2lVRzl1WnlJc0lsQjFjbU5vWVhObFVtVnhkV1Z6ZENJc0lsQjFjbU5vWVhObFVtVnpjRzl1YzJVaUxDSkRZVzVqWld4VWNtRnVjMkZqZEdsdmJsSmxjWFZsYzNRaUxDSkRZVzVqWld4VWNtRnVjMkZqZEdsdmJsSmxjM0J2Ym5ObElpd2lSMlYwVEdGemRGUnlZVzV6WVdOMGFXOXVVbVZ4ZFdWemRDSXNJa2RsZEV4aGMzUlVjbUZ1YzJGamRHbHZibEpsYzNCdmJuTmxJaXdpVW1WbWRXNWtVbVZ4ZFdWemRDSXNJbEpsWm5WdVpGSmxjM0J2Ym5ObElpd2lVMmxuYm1GMGRYSmxVbVZ4ZFdseVpXUWlMQ0pUYVdkdVlYUjFjbVZFWldOc2FXNWxaQ0lzSWxOcFoyNWhkSFZ5WlVGalkyVndkR1ZrSWl3aVFYVjBhRU52WkdWU1pYRjFhWEpsWkNJc0lrRjFkR2hEYjJSbFFXUjJhV05sSWl3aVRXOTBiMUIxY21Ob1lYTmxVbVZ4ZFdWemRDSXNJazF2ZEc5UWRYSmphR0Z6WlZKbGMzQnZibk5sSWl3aVUyVjBkR3hsVW1WeGRXVnpkQ0lzSWxObGRIUnNaVkpsYzNCdmJuTmxJaXdpVTJWMGRHeGxiV1Z1ZEVWdWNYVnBjbmxTWlhGMVpYTjBJaXdpVTJWMGRHeGxiV1Z1ZEVWdWNYVnBjbmxTWlhOd2IyNXpaU0lzSWxObGRGQnZjMGx1Wm05U1pYRjFaWE4wSWl3aVUyVjBVRzl6U1c1bWIxSmxjM0J2Ym5ObElpd2lTMlY1VW05c2JGSmxjWFZsYzNRaUxDSkpiblpoYkdsa1NHMWhZMU5wWjI1aGRIVnlaU0lzSWxCaGVVRjBWR0ZpYkdWSFpYUlVZV0pzWlVOdmJtWnBaeUlzSWxCaGVVRjBWR0ZpYkdWVFpYUlVZV0pzWlVOdmJtWnBaeUlzSWxCaGVVRjBWR0ZpYkdWSFpYUkNhV3hzUkdWMFlXbHNjeUlzSWxCaGVVRjBWR0ZpYkdWQ2FXeHNSR1YwWVdsc2N5SXNJbEJoZVVGMFZHRmliR1ZDYVd4c1VHRjViV1Z1ZENJc0lsQnlhVzUwYVc1blVtVnhkV1Z6ZENJc0lsQnlhVzUwYVc1blVtVnpjRzl1YzJVaUxDSlVaWEp0YVc1aGJGTjBZWFIxYzFKbGNYVmxjM1FpTENKVVpYSnRhVzVoYkZOMFlYUjFjMUpsYzNCdmJuTmxJaXdpUW1GMGRHVnllVXhsZG1Wc1EyaGhibWRsWkNJc0lsQmhlVUYwVkdGaWJHVkhaWFJQY0dWdVZHRmliR1Z6SWl3aVVHRjVRWFJVWVdKc1pVOXdaVzVVWVdKc1pYTWlMQ0pRWVhsQmRGUmhZbXhsUW1sc2JGQmhlVzFsYm5SR2JHOTNSVzVrWldRaUxDSlZibXR1YjNkdUlpd2lSbUZwYkdWa0lpd2lUV1Z6YzJGblpWTjBZVzF3SWl3aWNHOXpTV1FpTENKelpXTnlaWFJ6SWl3aWMyVnlkbVZ5VkdsdFpVUmxiSFJoSWl3aVVHOXpTV1FpTENKVFpYSjJaWEpVYVcxbFJHVnNkR0VpTENKTlpYTnpZV2RsUlc1MlpXeHZjR1VpTENKbGJtTWlMQ0pvYldGaklpd2lSVzVqSWl3aVNHMWhZeUlzSW5CdmMxOXBaQ0lzSW1sa0lpd2laWFpsYm5ST1lXMWxJaXdpYm1WbFpITkZibU55ZVhCMGFXOXVJaXdpUlhabGJuUk9ZVzFsSWl3aVJHRjBaVlJwYldWVGRHRnRjQ0lzSWtsdVkyOXRiV2x1WjBodFlXTWlMQ0pmYm1WbFpITkZibU55ZVhCMGFXOXVJaXdpUkdWamNubHdkR1ZrU25OdmJpSXNJbk4xWTJObGMzTWlMQ0psY25KdmNsOXlaV0Z6YjI0aUxDSmxjbkp2Y2w5a1pYUmhhV3dpTENKdWIzY2lMQ0pFWVhSbElpd2laSFJ6SWl3aWMzQnNhWFFpTENKdGMyZFVhVzFsSWl3aVoyVjBWR2x0WlNJc0luTjBZVzF3SWl3aWRIcHZabVp6WlhRaUxDSm5aWFJVYVcxbGVtOXVaVTltWm5ObGRDSXNJbUZrYW5WemRHVmtWR2x0WlNJc0luUnZTVk5QVTNSeWFXNW5JaXdpYzJ4cFkyVWlMQ0psYm5abGJHOXdaU0lzSW1WMlpXNTBJaXdpWkdGMFpYUnBiV1VpTENKS1UwOU9JaXdpYzNSeWFXNW5hV1o1SWl3aVpXNWpUWE5uSWl3aVFXVnpSVzVqY25sd2RDSXNJbWh0WVdOVGFXY2lMQ0pJYldGalUybG5ibUYwZFhKbElpd2laVzVqY2sxbGMzTmhaMlZGYm5abGJHOXdaU0lzSW1KaGJtdEVZWFJsSWl3aWJHVnVaM1JvSWl3aWMzVmljM1J5SWl3aVpHRjBaU0lzSW5ScGJXVWlMQ0p0YzJkS2MyOXVJaXdpWlc1Mklpd2ljR0Z5YzJVaUxDSnphV2NpTENKa1pXTnllWEIwWldSS2MyOXVJaXdpUVdWelJHVmpjbmx3ZENJc0ltUmxZM0o1Y0hSbFpFMXpaeUlzSWtsdVkyOXRhVzVuU0cxaFl5SXNJbVVpTENKQlpXNWpJaXdpUVNJc0lrRm9iV0ZqSWl3aWNtVnhkV1Z6ZEVsa0lpd2lRbVZ1WXlJc0lrSm9iV0ZqSWl3aVFpSXNJa052Ym1acGNtMWhkR2x2YmtOdlpHVWlMQ0p6ZFdKemRISnBibWNpTENKVFpXTnlaWFJ6UVc1a1MyVjVVbVZ6Y0c5dWMyVWlMQ0pyWlhsU1pYTndiMjV6WlNJc0lrUnliM0JMWlhselVtVnhkV1Z6ZENJc0lrZEZUa1ZTUVZSUFVpSXNJa2RTVDFWUU1UUmZNakEwT0Y5Q1NWUmZUVTlFVUNJc0lsQmhhWEpwYm1kSVpXeHdaWElpTENKclpYbFNaWEYxWlhOMElpd2laVzVqVUhWaVFXNWtVMlZqSWl3aVgyTmhiR04xYkdGMFpVMTVVSFZpYkdsalMyVjVRVzVrVTJWamNtVjBJaXdpVFhsUWRXSnNhV05MWlhraUxDSlRaVzVqSWl3aVUyaGhjbVZrVTJWamNtVjBTMlY1SWl3aWFHMWhZMUIxWWtGdVpGTmxZeUlzSWxOb2JXRmpJaXdpWkdsbVptbGxTR1ZzYkcxaGJpSXNJbTE1VUhKcGRtRjBaVUpKSWl3aVVtRnVaRzl0VUhKcGRtRjBaVXRsZVNJc0ltMTVVSFZpYkdsalFra2lMQ0pRZFdKc2FXTkxaWGtpTENKelpXTnlaWFJDU1NJc0lsTmxZM0psZENJc0lrUklVMlZqY21WMFZHOVRVRWxUWldOeVpYUWlMQ0pRZFdKc2FXTkxaWGxCYm1SVFpXTnlaWFFpTENKd1lXUlRkR0Z5ZENJc0ltMTVVSFZpYkdsalMyVjVJaXdpYzJoaGNtVmtVMlZqY21WMFMyVjVJaXdpUW1sc2JGTjBZWFIxYzFKbGMzQnZibk5sSWl3aVVtVnpkV3gwSWl3aVFtbHNiRWxrSWl3aVZHRmliR1ZKWkNJc0lrOXdaWEpoZEc5eVNXUWlMQ0pVYjNSaGJFRnRiM1Z1ZENJc0lrOTFkSE4wWVc1a2FXNW5RVzF2ZFc1MElpd2lRbWxzYkVSaGRHRWlMQ0ppYVd4c1VHRjViV1Z1ZEVocGMzUnZjbmtpTENKellYWmxaRUpwYkd4RVlYUmhJaXdpYldGd0lpd2lZbWxzYkNJc0lsQmhlVzFsYm5SSWFYTjBiM0o1Ulc1MGNua2lMQ0p3WVhsdFpXNTBYM1I1Y0dVaUxDSndZWGx0Wlc1MFgzTjFiVzFoY25raUxDSnRaWE56WVdkbFNXUWlMQ0pDYVd4c1VtVjBjbWxsZG1Gc1VtVnpkV3gwSWl3aVUxVkRRMFZUVXlJc0ltSnBiR3hmYVdRaUxDSjBZV0pzWlY5cFpDSXNJbUpwYkd4ZmRHOTBZV3hmWVcxdmRXNTBJaXdpWW1sc2JGOXZkWFJ6ZEdGdVpHbHVaMTloYlc5MWJuUWlMQ0ppYVd4c1gzQmhlVzFsYm5SZmFHbHpkRzl5ZVNJc0ltZGxkRUpwYkd4UVlYbHRaVzUwU0dsemRHOXllU0lzSW5Cb0lpd2lTVTVXUVV4SlJGOVVRVUpNUlY5SlJDSXNJa2xPVmtGTVNVUmZRa2xNVEY5SlJDSXNJa2xPVmtGTVNVUmZUMUJGVWtGVVQxSmZTVVFpTENKUVlYbHRaVzUwVkhsd1pTSXNJa05CVWtRaUxDSkRRVk5JSWl3aVFtbHNiRkJoZVcxbGJuUWlMQ0pmYVc1amIyMXBibWRCWkhacFkyVWlMQ0pRWVhsdFpXNTBSbXh2ZDFOMFlYSjBaV1FpTENKd2RDSXNJbkIxY21Ob1lYTmxUWE5uSWl3aVVIVnlZMmhoYzJWQmJXOTFiblFpTENKSFpYUlFkWEpqYUdGelpVRnRiM1Z1ZENJc0lsUnBjRUZ0YjNWdWRDSXNJa2RsZEZScGNFRnRiM1Z1ZENJc0lrZGxkRk4xY21Ob1lYSm5aVUZ0YjNWdWRDSXNJbkJoZVcxbGJuUlVlWEJsSWl3aWNHRjViV1Z1ZEZOMWJXMWhjbmtpTENKUVlYbHRaVzUwVTNWdGJXRnllU0lzSWxCaGVVRjBWR0ZpYkdWRGIyNW1hV2NpTENKUVlYbEJkRlJoWW14bFJXNWhZbXhsWkNJc0lrOXdaWEpoZEc5eVNXUkZibUZpYkdWa0lpd2lVM0JzYVhSQ2VVRnRiM1Z1ZEVWdVlXSnNaV1FpTENKRmNYVmhiRk53YkdsMFJXNWhZbXhsWkNJc0lsUmhZbXhsVW1WMGNtbGxkbUZzUlc1aFlteGxaQ0lzSWxScGNIQnBibWRGYm1GaWJHVmtJaXdpVTNWdGJXRnllVkpsY0c5eWRFVnVZV0pzWldRaUxDSk1ZV0psYkZCaGVVSjFkSFJ2YmlJc0lreGhZbVZzVDNCbGNtRjBiM0pKWkNJc0lreGhZbVZzVkdGaWJHVkpaQ0lzSWtGc2JHOTNaV1JQY0dWeVlYUnZja2xrY3lJc0lrZGxkRTl3Wlc1VVlXSnNaWE5TWlhOd2IyNXpaU0lzSWxSaFlteGxSR0YwWVNJc0luUmhZbXhsY3lJc0lrZGxkRTl3Wlc1VVlXSnNaWE1pTENKUGNHVnVWR0ZpYkdWelJXNTBjbmtpTENKTVlXSmxiQ0lzSWtKcGJHeFBkWFJ6ZEdGdVpHbHVaMEZ0YjNWdWRDSXNJbXhoWW1Wc0lpd2lRbWxzYkZCaGVXMWxiblJHYkc5M1JXNWtaV1JTWlhOd2IyNXpaU0lzSWtKcGJHeFViM1JoYkVGdGIzVnVkQ0lzSW05d1pYSmhkRzl5WDJsa0lpd2lRMkZ5WkZSdmRHRnNRMjkxYm5RaUxDSmpZWEprWDNSdmRHRnNYMk52ZFc1MElpd2lRMkZ5WkZSdmRHRnNRVzF2ZFc1MElpd2lZMkZ5WkY5MGIzUmhiRjloYlc5MWJuUWlMQ0pEWVhOb1ZHOTBZV3hEYjNWdWRDSXNJbU5oYzJoZmRHOTBZV3hmWTI5MWJuUWlMQ0pEWVhOb1ZHOTBZV3hCYlc5MWJuUWlMQ0pqWVhOb1gzUnZkR0ZzWDJGdGIzVnVkQ0lzSWxCdmJtZElaV3h3WlhJaUxDSndhVzVuSWl3aVVHbHVaMGhsYkhCbGNpSXNJblpsY25OcGIyNGlMQ0oyWlc1a2IzSkpaQ0lzSW14cFluSmhjbmxNWVc1bmRXRm5aU0lzSW14cFluSmhjbmxXWlhKemFXOXVJaXdpYjNSb1pYSkpibVp2SWl3aVgzWmxjbk5wYjI0aUxDSmZkbVZ1Wkc5eVNXUWlMQ0pmYkdsaWNtRnllVXhoYm1kMVlXZGxJaXdpWDJ4cFluSmhjbmxXWlhKemFXOXVJaXdpWDI5MGFHVnlTVzVtYnlJc0luQnZjMTkyWlhKemFXOXVJaXdpY0c5elgzWmxibVJ2Y2w5cFpDSXNJbXhwWW5KaGNubGZiR0Z1WjNWaFoyVWlMQ0pzYVdKeVlYSjVYM1psY25OcGIyNGlMQ0p2ZEdobGNsOXBibVp2SWl3aVgzTjFZMk5sYzNNaUxDSkVaWFpwWTJWSmJtWnZJaXdpWkdWMmFXTmxTVzVtYnlJc0ltNWhkbWxuWVhSdmNpSXNJblZ6WlhKQloyVnVkQ0lzSWxCeVpXRjFkR2hGZG1WdWRITWlMQ0pCWTJOdmRXNTBWbVZ5YVdaNVVtVnhkV1Z6ZENJc0lrRmpZMjkxYm5SV1pYSnBabmxTWlhOd2IyNXpaU0lzSWxCeVpXRjFkR2hQY0dWdVVtVnhkV1Z6ZENJc0lsQnlaV0YxZEdoUGNHVnVVbVZ6Y0c5dWMyVWlMQ0pRY21WaGRYUm9WRzl3ZFhCU1pYRjFaWE4wSWl3aVVISmxZWFYwYUZSdmNIVndVbVZ6Y0c5dWMyVWlMQ0pRY21WaGRYUm9SWGgwWlc1a1VtVnhkV1Z6ZENJc0lsQnlaV0YxZEdoRmVIUmxibVJTWlhOd2IyNXpaU0lzSWxCeVpXRjFkR2hRWVhKMGFXRnNRMkZ1WTJWc2JHRjBhVzl1VW1WeGRXVnpkQ0lzSWxCeVpXRjFkR2hRWVhKMGFXRnNRMkZ1WTJWc2JHRjBhVzl1VW1WemNHOXVjMlVpTENKUWNtVmhkWFJvUTJGdVkyVnNiR0YwYVc5dVVtVnhkV1Z6ZENJc0lsQnlaV0YxZEdoRFlXNWpaV3hzWVhScGIyNVNaWE53YjI1elpTSXNJbEJ5WldGMWRHaERiMjF3YkdWMFpWSmxjWFZsYzNRaUxDSlFjbVZoZFhSb1EyOXRjR3hsZEdWU1pYTndiMjV6WlNJc0lrUmxkR0ZwYkhNaUxDSlFjbVZoZFhSb1FXMXZkVzUwSWl3aWNISmxZWFYwYUVsa0lpd2lkRzl3ZFhCQmJXOTFiblJEWlc1MGN5SXNJbEJ5WldGMWRHaEpaQ0lzSWxSdmNIVndRVzF2ZFc1MElpd2ljR0Z5ZEdsaGJFTmhibU5sYkd4aGRHbHZia0Z0YjNWdWRFTmxiblJ6SWl3aVVHRnlkR2xoYkVOaGJtTmxiR3hoZEdsdmJrRnRiM1Z1ZENJc0lsQnlaV0YxZEdoRFlXNWpaV3hTWlhGMVpYTjBJaXdpVUhKbFlYVjBhRU52YlhCc1pYUnBiMjVTWlhGMVpYTjBJaXdpWTI5dGNHeGxkR2x2YmtGdGIzVnVkRU5sYm5Seklpd2ljM1Z5WTJoaGNtZGxRVzF2ZFc1MElpd2lRMjl0Y0d4bGRHbHZia0Z0YjNWdWRDSXNJbEJ5WldGMWRHaFNaWE53YjI1elpTSXNJblI0Vkhsd1pTSXNJbDlyWlhraUxDSmZjR0Y1Ykc5aFpDSXNJbEJ5YVc1MFpYSWlMQ0pRY205dGNIUkdiM0pEWVhOb2IzVjBJaXdpUVcxdmRXNTBRMlZ1ZEhNaUxDSjBiMFpwZUdWa0lpd2ljSFZ5WTJoaGMyVmZZVzF2ZFc1MElpd2lkR2x3WDJGdGIzVnVkQ0lzSW1OaGMyaGZZVzF2ZFc1MElpd2ljSEp2YlhCMFgyWnZjbDlqWVhOb2IzVjBJaXdpYzNWeVkyaGhjbWRsWDJGdGIzVnVkQ0lzSWxOamFHVnRaVUZ3Y0U1aGJXVWlMQ0p5Y200aUxDSmlZVzVyWDI1dmJtTmhjMmhmWVcxdmRXNTBJaXdpWW1GdWExOWpZWE5vWDJGdGIzVnVkQ0lzSW1OMWMzUnZiV1Z5WDNKbFkyVnBjSFFpTENKdFpYSmphR0Z1ZEY5eVpXTmxhWEIwSWl3aWFHOXpkRjl5WlhOd2IyNXpaVjkwWlhoMElpd2lhRzl6ZEY5eVpYTndiMjV6WlY5amIyUmxJaXdpZEdWeWJXbHVZV3hmY21WbVgybGtJaXdpWTJGeVpGOWxiblJ5ZVNJc0ltRmpZMjkxYm5SZmRIbHdaU0lzSW1GMWRHaGZZMjlrWlNJc0ltSmhibXRmWkdGMFpTSXNJbUpoYm10ZmRHbHRaU0lzSW0xaGMydGxaRjl3WVc0aUxDSjBaWEp0YVc1aGJGOXBaQ0lzSW0xbGNtTm9ZVzUwWDNKbFkyVnBjSFJmY0hKcGJuUmxaQ0lzSW1OMWMzUnZiV1Z5WDNKbFkyVnBjSFJmY0hKcGJuUmxaQ0lzSW1SaGRHVlRkSElpTENKaVlXNXJYM05sZEhSc1pXMWxiblJmWkdGMFpTSXNJbEJoY25ObFFtRnVhMFJoZEdVaUxDSkhaWFJCWTJOdmRXNTBWSGx3WlNJc0lrZGxkRUYxZEdoRGIyUmxJaXdpUjJWMFFtRnVhMFJoZEdVaUxDSkhaWFJDWVc1clZHbHRaU0lzSWtkbGRGSmxjM0J2Ym5ObFEyOWtaU0lzSWtkbGRGSmxjM0J2Ym5ObFZHVjRkQ0lzSWtkbGRFMWhjMnRsWkZCaGJpSXNJa2RsZEZKU1RpSXNJa2RsZEZSbGNtMXBibUZzU1dRaUxDSkhaWFJVWlhKdGFXNWhiRkpsWm1WeVpXNWpaVWxrSWl3aVIyVjBSWEp5YjNJaUxDSnpkR0Z5ZEhOWGFYUm9JaXdpVjJGelQzQmxjbUYwYVc5dVNXNVFjbTluY21WemMwVnljbTl5SWl3aVIyVjBVRzl6VW1WbVNXUWlMQ0owY21GdWMyRmpkR2x2Ymw5MGVYQmxJaXdpWVcxdmRXNTBYM0IxY21Ob1lYTmxJaXdpWVcxdmRXNTBYM1J5WVc1ellXTjBhVzl1WDNSNWNHVWlMQ0prY3lJc0ltTnlJaXdpYlhJaUxDSnpkWEJ3Y21WemMwMWxjbU5vWVc1MFVHRnpjM2R2Y21RaUxDSlRkWEJ3Y21WemMwMWxjbU5vWVc1MFVHRnpjM2R2Y21RaUxDSnlaV1oxYm1SZllXMXZkVzUwSWl3aWMzVndjSEpsYzNOZmJXVnlZMmhoYm5SZmNHRnpjM2R2Y21RaUxDSmZjbVZqWldsd2RGUnZVMmxuYmlJc0luSmxZMlZwY0hSVWIxTnBaMjRpTENKVGFXZHVZWFIxY21WRVpXTnNhVzVsSWl3aVUybG5ibUYwZFhKbFFXTmpaWEIwSWl3aVVHaHZibVZHYjNKQmRYUm9VbVZ4ZFdseVpXUWlMQ0pmY0dodmJtVk9kVzFpWlhJaUxDSmZiV1Z5WTJoaGJuUkpaQ0lzSW1GMWRHaGZZMlZ1ZEhKbFgzQm9iMjVsWDI1MWJXSmxjaUlzSW0xbGNtTm9ZVzUwWDJsa0lpd2lZWFYwYUVOdlpHVWlMQ0pCZFhSb1EyOWtaU0lzSWxCMWNtTm9ZWE5sU0dWc2NHVnlJaXdpY0hWeVkyaGhjMlZKWkNJc0luQjFjbU5vWVhObFFXMXZkVzUwSWl3aWRHbHdRVzF2ZFc1MElpd2lZMkZ6YUc5MWRFRnRiM1Z1ZENJc0luQnliMjF3ZEVadmNrTmhjMmh2ZFhRaUxDSndjaUlzSWs5aWFtVmpkQ0lzSW1GemMybG5iaUlzSWw5ZlVtVnhkV1Z6ZEVsa1NHVnNjR1Z5UTI5MWJuUmxjaUlzSW5CeVpXWnBlQ0lzSW1WdVkwdGxlU0lzSW1odFlXTkxaWGtpTENKc2IyTmhiRk4wYjNKaFoyVWlMQ0p6WlhSSmRHVnRJaXdpWjJWMFNYUmxiU0lzSW5KbGJXOTJaVWwwWlcwaUxDSkVaWFpwWTJWQlpHUnlaWE56VTNSaGRIVnpJaXdpWm5Ga2JpSXNJbWx3SWl3aVlXUmtjbVZ6Y3lJc0ltRmtaSEpsYzJWeklpd2lkWE5sVTJWamRYSmxWMlZpVTI5amEyVjBjeUlzSWt4aGMzUlZjR1JoZEdWa0lpd2lSR1YyYVdObFFXUmtjbVZ6YzFKbGMzQnZibk5sUTI5a1pTSXNJbEpsYzNCdmJuTmxVM1JoZEhWelJHVnpZM0pwY0hScGIyNGlMQ0pTWlhOd2IyNXpaVTFsYzNOaFoyVWlMQ0pKVGxaQlRFbEVYMU5GVWtsQlRGOU9WVTFDUlZJaUxDSkJSRVJTUlZOVFgwNVBWRjlEU0VGT1IwVkVJaXdpVTBWU1NVRk1YMDVWVFVKRlVsOU9UMVJmUTBoQlRrZEZSQ0lzSWtSRlZrbERSVjlUUlZKV1NVTkZYMFZTVWs5U0lpd2lTSFIwY0ZOMFlYUjFjME52WkdVaUxDSk9iM1JHYjNWdVpDSXNJa1JsZG1salpVRmtaSEpsYzNOVFpYSjJhV05sSWl3aWMyVnlhV0ZzVG5WdFltVnlJaXdpWVhCcFMyVjVJaXdpWVdOeGRXbHlaWEpEYjJSbElpd2lhWE5UWldOMWNtVkRiMjV1WldOMGFXOXVJaXdpYVhOVVpYTjBUVzlrWlNJc0lrTlBUazVGUTFSSlQwNWZWRWxOUlU5VlZDSXNJbkJoZEdnaUxDSmtaWFpwWTJWQlpHUnlaWE56VlhKcElpd2lVSEp2YldselpTSXNJbkpoWTJVaUxDSm1aWFJqYUNJc0ltMWxkR2h2WkNJc0ltaGxZV1JsY25NaUxDSmZJaXdpY21WcVpXTjBJaXdpVTJWMGRHeGxiV1Z1ZENJc0ltRmpZM1Z0ZFd4aGRHVmtYM05sZEhSc1pWOWllVjloWTNGMWFYSmxjbDlqYjNWdWRDSXNJbUZqWTNWdGRXeGhkR1ZrWDNObGRIUnNaVjlpZVY5aFkzRjFhWEpsY2w5MllXeDFaU0lzSW1GalkzVnRkV3hoZEdWa1gzUnZkR0ZzWDJOdmRXNTBJaXdpWVdOamRXMTFiR0YwWldSZmRHOTBZV3hmZG1Gc2RXVWlMQ0owYVcxbFUzUnlJaXdpYzJWMGRHeGxiV1Z1ZEY5d1pYSnBiMlJmYzNSaGNuUmZkR2x0WlNJc0luTmxkSFJzWlcxbGJuUmZjR1Z5YVc5a1gzTjBZWEowWDJSaGRHVWlMQ0pRWVhKelpVSmhibXRFWVhSbFZHbHRaVk4wY2lJc0luTmxkSFJzWlcxbGJuUmZjR1Z5YVc5a1gyVnVaRjkwYVcxbElpd2ljMlYwZEd4bGJXVnVkRjl3WlhKcGIyUmZaVzVrWDJSaGRHVWlMQ0p6WlhSMGJHVnRaVzUwWDNSeWFXZG5aWEpsWkY5MGFXMWxJaXdpYzJWMGRHeGxiV1Z1ZEY5MGNtbG5aMlZ5WldSZlpHRjBaU0lzSW5SeVlXNXpZV04wYVc5dVgzSmhibWRsSWl3aWMyTm9aVzFsY3lJc0luTmphR1Z0WlNJc0lsTmphR1Z0WlZObGRIUnNaVzFsYm5SRmJuUnllU0lzSWxObGRIUnNaVUo1UVdOeGRXbHlaWElpTENKelpYUjBiR1ZmWW5sZllXTnhkV2x5WlhJaUxDSjBiMHh2ZDJWeVEyRnpaU0lzSWxSdmRHRnNWbUZzZFdVaUxDSndZWEp6WlVsdWRDSXNJblJ2ZEdGc1gzWmhiSFZsSWl3aVZHOTBZV3hEYjNWdWRDSXNJblJ2ZEdGc1gyTnZkVzUwSWl3aVUxQkpYMVpGVWxOSlQwNGlMQ0pUY0draUxDSmZZM1Z5Y21WdWRGTjBZWFIxY3lJc0ltVm1kSEJ2YzBGa1pISmxjM01pTENKZmNHOXpTV1FpTENKZmMyVnlhV0ZzVG5WdFltVnlJaXdpWDNObFkzSmxkSE1pTENKZlptOXlZMlZUWldOMWNtVlhaV0pUYjJOclpYUnpJaXdpWDJWbWRIQnZjMEZrWkhKbGMzTWlMQ0pmYkc5bklpd2lYMk52Ym00aUxDSkRkWEp5Wlc1MFJHVjJhV05sVTNSaGRIVnpJaXdpWDJSbGRtbGpaVUZ3YVV0bGVTSXNJbDloWTNGMWFYSmxja052WkdVaUxDSmZhVzVVWlhOMFRXOWtaU0lzSWw5aGRYUnZRV1JrY21WemMxSmxjMjlzZFhScGIyNUZibUZpYkdWa0lpd2lYM053YVUxbGMzTmhaMlZUZEdGdGNDSXNJbDl3YjNOV1pXNWtiM0pKWkNJc0lsOXdiM05XWlhKemFXOXVJaXdpWDJoaGMxTmxkRWx1Wm04aUxDSmZiVzl6ZEZKbFkyVnVkRkJwYm1kVFpXNTBJaXdpWDIxdmMzUlNaV05sYm5SUWIyNW5VbVZqWldsMlpXUWlMQ0pmYldsemMyVmtVRzl1WjNORGIzVnVkQ0lzSWw5eVpYUnlhV1Z6VTJsdVkyVk1ZWE4wUkdWMmFXTmxRV1JrY21WemMxSmxjMjlzZFhScGIyNGlMQ0pmYlc5emRGSmxZMlZ1ZEV4dloybHVVbVZ6Y0c5dWMyVWlMQ0pmY0c5dVoxUnBiV1Z2ZFhRaUxDSmZjR2x1WjBaeVpYRjFaVzVqZVNJc0lsOXlaV0ZrZVZSdlZISmhibk5oWTNRaUxDSmZjR1Z5YVc5a2FXTlFhVzVuVkdoeVpXRmtJaXdpWDNSNFRXOXVhWFJ2Y2tOb1pXTnJSbkpsY1hWbGJtTjVJaXdpWDJOb1pXTnJUMjVVZUVaeVpYRjFaVzVqZVNJc0lsOXRZWGhYWVdsMFJtOXlRMkZ1WTJWc1ZIZ2lMQ0pmYzJ4bFpYQkNaV1p2Y21WU1pXTnZibTVsWTNSTmN5SXNJbDl0YVhOelpXUlFiMjVuYzFSdlJHbHpZMjl1Ym1WamRDSXNJbDl5WlhSeWFXVnpRbVZtYjNKbFVtVnpiMngyYVc1blJHVjJhV05sUVdSa2NtVnpjeUlzSWw5eVpYUnlhV1Z6VTJsdVkyVk1ZWE4wVUdGcGNtbHVaeUlzSWw5eVpYUnlhV1Z6UW1WbWIzSmxVR0ZwY21sdVp5SXNJbDl5WldkbGVFbDBaVzF6Um05eVJXWjBjRzl6UVdSa2NtVnpjeUlzSWw5eVpXZGxlRWwwWlcxelJtOXlSbkZrYmtWbWRIQnZjMEZrWkhKbGMzTWlMQ0pmY21WblpYaEpkR1Z0YzBadmNsQnZjMGxrSWl3aVEzVnljbVZ1ZEVac2IzY2lMQ0pEZFhKeVpXNTBVR0ZwY21sdVowWnNiM2RUZEdGMFpTSXNJa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaU0lzSWw5emNHbFFZWFFpTENKVGNHbFFZWGxCZEZSaFlteGxJaXdpWDNOd2FWQnlaV0YxZEdnaUxDSlRjR2xRY21WaGRYUm9JaXdpZDJGeWJpSXNJbDlwYzFCdmMwbGtWbUZzYVdRaUxDSmZhWE5GWm5Sd2IzTkJaR1J5WlhOelZtRnNhV1FpTENKZmNtVnpaWFJEYjI1dUlpd2lYM04wWVhKMFZISmhibk5oWTNScGIyNU5iMjVwZEc5eWFXNW5WR2h5WldGa0lpd2lVM0JwUm14dmR5SXNJa2xrYkdVaUxDSnBibVp2SWl3aVUzQnBVM1JoZEhWeklpd2lVR0ZwY21Wa1EyOXVibVZqZEdsdVp5SXNJa052Ym01bFkzUWlMQ0pWYm5CaGFYSmxaQ0lzSW1SbGRtbGpaVUZ3YVV0bGVTSXNJa04xY25KbGJuUlRkR0YwZFhNaUxDSjNZWE1pTENKSVlYTlRaWEpwWVd4T2RXMWlaWEpEYUdGdVoyVmtJaXdpWDJGMWRHOVNaWE52YkhabFJXWjBjRzl6UVdSa2NtVnpjeUlzSW1GMWRHOUJaR1J5WlhOelVtVnpiMngxZEdsdmJrVnVZV0pzWlNJc0lsQmhhWEpsWkVOdmJtNWxZM1JsWkNJc0luUmxjM1JOYjJSbElpd2ljRzl6Vm1WdVpHOXlTV1FpTENKd2IzTldaWEp6YVc5dUlpd2lVR0ZwY21sdVp5SXNJa1pwYm1semFHVmtJaXdpVkhKaGJuTmhZM1JwYjI0aUxDSlFZV2x5YVc1blJteHZkMU4wWVhSbElpd2lVM1ZqWTJWemMyWjFiQ0lzSWtGM1lXbDBhVzVuUTJobFkydEdjbTl0UldaMGNHOXpJaXdpUVhkaGFYUnBibWREYUdWamEwWnliMjFRYjNNaUxDSmZiMjVRWVdseWFXNW5VM1ZqWTJWemN5SXNJbDl2YmxKbFlXUjVWRzlVY21GdWMyRmpkQ0lzSWw5elpXNWtJaXdpVkc5TlpYTnpZV2RsSWl3aVgyOXVVR0ZwY21sdVowWmhhV3hsWkNJc0lsOWtiMVZ1Y0dGcGNpSXNJa2x1YVhScFlYUmxWSGhTWlhOMWJIUWlMQ0p3ZFhKamFHRnpaVkpsY1hWbGMzUWlMQ0pEY21WaGRHVlFkWEpqYUdGelpWSmxjWFZsYzNRaUxDSlVjbUZ1YzJGamRHbHZia1pzYjNkVGRHRjBaU0lzSWxSeVlXNXpZV04wYVc5dVZIbHdaU0lzSWxCMWNtTm9ZWE5sSWl3aVUyVnVkQ0lzSW05d2RHbHZibk1pTENKd2RYSmphR0Z6WlNJc0lrTnlaV0YwWlZCMWNtTm9ZWE5sVW1WeGRXVnpkRll5SWl3aVFXMXZkVzUwVTNWdGJXRnllU0lzSW5KbFpuVnVaRkpsY1hWbGMzUWlMQ0pEY21WaGRHVlNaV1oxYm1SU1pYRjFaWE4wSWl3aWNtVm1kVzVrVFhObklpd2lVbVZtZFc1a0lpd2lZV05qWlhCMFpXUWlMQ0pCZDJGcGRHbHVaMU5wWjI1aGRIVnlaVU5vWldOcklpd2lUV2xrVkhoU1pYTjFiSFFpTENKVGFXZHVZWFIxY21WU1pYTndiMjVrWldRaUxDSnphV2RTWlhGTmMyY2lMQ0pUYVdkdVlYUjFjbVZTWlhGMWFYSmxaRTFsYzNOaFoyVWlMQ0pUZFdKdGFYUkJkWFJvUTI5a1pWSmxjM1ZzZENJc0lrRjNZV2wwYVc1blVHaHZibVZHYjNKQmRYUm9JaXdpUVhWMGFFTnZaR1ZUWlc1MElpd2lVbVZ4ZFdWemRGTmxiblFpTENKallXNWpaV3hTWlhFaUxDSkRZVzVqWld4c2FXNW5JaXdpWTJGemFHOTFkRTF6WnlJc0lrTmhjMmh2ZFhSUGJteDVJaXdpYlc5MGIxQjFjbU5vWVhObFRYTm5JaXdpVFU5VVR5SXNJbk5sZEhSc1pVMXpaeUlzSWxObGRIUnNaU0lzSW5OMGJFVnVjVTF6WnlJc0lsTmxkSFJzWlcxbGJuUkZibkYxYVhKNUlpd2laMngwVW1WeGRXVnpkRTF6WnlJc0lrZGxkRXhoYzNSVWNtRnVjMkZqZEdsdmJpSXNJa05oYkd4cGJtZEhiSFFpTENKbmJIUlNaWE53YjI1elpTSXNJbVY0Y0dWamRHVmtRVzF2ZFc1MElpd2ljbVZ4ZFdWemRGUnBiV1VpTENKSGJIUk5ZWFJqYUNJc0ltZHNkRUpoYm10RVlYUmxWR2x0WlZOMGNpSXNJa2RsZEVKaGJtdEVZWFJsVkdsdFpWTjBjbWx1WnlJc0ltZHNkRUpoYm10RVlYUmxWR2x0WlNJc0ltTnZiWEJoY21VaUxDSkhaWFJVZUZSNWNHVWlMQ0pIWlhSQ1lXNXJUbTl1UTJGemFFRnRiM1Z1ZENJc0luUnZUV1Z6YzJGblpTSXNJbkpsYzNWc2RDSXNJa2RsYm1WeVlYUmxVMlZqY21WMGMwRnVaRXRsZVZKbGMzQnZibk5sSWl3aWEyVjVRMmhsWTJzaUxDSndZV2x5VW1WemNDSXNJbDl6ZEdGeWRGQmxjbWx2WkdsalVHbHVaeUlzSW10eVVtVnpJaXdpVUdWeVptOXliVXRsZVZKdmJHeHBibWNpTENKcGJtTnZiV2x1WjFCdmMxSmxaa2xrSWl3aWNHaHZibVZHYjNKQmRYUm9VbVZ4ZFdseVpXUWlMQ0p0YzJjaUxDSkhaWFJRYUc5dVpVNTFiV0psY2lJc0lrZGxkRTFsY21Ob1lXNTBTV1FpTENKRGIyMXdiR1YwWldRaUxDSkJkSFJsYlhCMGFXNW5WRzlEWVc1alpXd2lMQ0pmWTJGc2JFZGxkRXhoYzNSVWNtRnVjMkZqZEdsdmJpSXNJblI0VTNSaGRHVWlMQ0pCZDJGcGRHbHVaMGRzZEZKbGMzQnZibk5sSWl3aVRHRnpkRWRzZEZKbGNYVmxjM1JKWkNJc0lrZHZkRWRzZEZKbGMzQnZibk5sSWl3aVozUnNVbVZ6Y0c5dWMyVWlMQ0pIVEZSU1pYTndiMjV6WlZCdmMxSmxaa2xrSWl3aVYyRnpVbVYwY21sbGRtVmtVM1ZqWTJWemMyWjFiR3g1SWl3aVNYTlRkR2xzYkVsdVVISnZaM0psYzNNaUxDSkpjMWRoYVhScGJtZEdiM0pUYVdkdVlYUjFjbVZTWlhOd2IyNXpaU0lzSWtselYyRnBkR2x1WjBadmNrRjFkR2hEYjJSbElpd2lWMkZ6VkdsdFpVOTFkRTltVTNsdVkwVnljbTl5SWl3aVZIbHdaU0lzSWtOdmNIbE5aWEpqYUdGdWRGSmxZMlZwY0hSVWIwTjFjM1J2YldWeVVtVmpaV2x3ZENJc0luTjFZMk5sYzNOVGRHRjBaU0lzSWxKbGNYVmxjM1JVYVcxbElpd2lWVzVyYm05M2JrTnZiWEJzWlhSbFpDSXNJbU5oYm1ObGJGSmxjM0J2Ym5ObElpd2lWMkZ6VkhodVVHRnpkRkJ2YVc1MFQyWk9iMUpsZEhWeWJpSXNJa2RsZEVWeWNtOXlVbVZoYzI5dUlpd2lSMlYwUlhKeWIzSkVaWFJoYVd3aUxDSkRZVzVqWld4R1lXbHNaV1FpTENKeVpYTndiMjV6WlNJc0ltbHpVM1ZqWTJWemN5SXNJbWRsZEVWeWNtOXlVbVZoYzI5dUlpd2laMlYwUlhKeWIzSkVaWFJoYVd3aUxDSnVaV1ZrYzFCMVlteHBjMmhwYm1jaUxDSnpkR0YwWlNJc0lrTmhibU5sYkVGMGRHVnRjSFJVYVcxbElpd2lUR0Z6ZEZOMFlYUmxVbVZ4ZFdWemRGUnBiV1VpTENKZmFYTlZjMmx1WjBoMGRIQnpJaXdpY21Wd2JHRmpaU0lzSW1Ga1pFVjJaVzUwVEdsemRHVnVaWElpTENKZmIyNVRjR2xEYjI1dVpXTjBhVzl1VTNSaGRIVnpRMmhoYm1kbFpDSXNJbDl2YmxOd2FVMWxjM05oWjJWU1pXTmxhWFpsWkNJc0lsOXZibGR6UlhKeWIzSlNaV05sYVhabFpDSXNJazVsZDFCaGFYSlNaWEYxWlhOMElpd2lYM04wYjNCUVpYSnBiMlJwWTFCcGJtY2lMQ0p6WlhSSmJuUmxjblpoYkNJc0lsOXdaWEpwYjJScFkxQnBibWNpTENKZlpHOVFhVzVuSWl3aVVtVnhkV1Z6ZENJc0lsOWpZV3hzVTJWMFVHOXpTVzVtYnlJc0lsQjFjMmhRWVhsQmRGUmhZbXhsUTI5dVptbG5JaXdpYzJWMFVHOXpTVzVtYjFKbGNYVmxjM1FpTENKSFpYUkJjSEJFWlhacFkyVkpibVp2SWl3aVkyeGxZWEpKYm5SbGNuWmhiQ0lzSWtkbGJtVnlZWFJsVUdsdVoxSmxjWFZsYzNRaUxDSmZiVzl6ZEZKbFkyVnVkRkJwYm1kVFpXNTBWR2x0WlNJc0lrZGxkRk5sY25abGNsUnBiV1ZFWld4MFlTSXNJbVJsWW5Wbklpd2ljRzl1WnlJc0lrZGxibVZ5WVhSbFVHOXVaMUpsYzNOd2IyNXpaU0lzSW0xbGMzTmhaMlZLYzI5dUlpd2lSbkp2YlVwemIyNGlMQ0pKYzFCeVpXRjFkR2hGZG1WdWRDSXNJbDlvWVc1a2JHVlFjbVZoZFhSb1RXVnpjMkZuWlNJc0lsOW9ZVzVrYkdWTFpYbFNaWEYxWlhOMElpd2lYMmhoYm1Sc1pVdGxlVU5vWldOcklpd2lYMmhoYm1Sc1pWQmhhWEpTWlhOd2IyNXpaU0lzSWw5b1lXNWtiR1ZFY205d1MyVjVjMEZrZG1salpTSXNJbDlvWVc1a2JHVlFkWEpqYUdGelpWSmxjM0J2Ym5ObElpd2lYMmhoYm1Sc1pWSmxablZ1WkZKbGMzQnZibk5sSWl3aVgyaGhibVJzWlVOaGMyaHZkWFJQYm14NVVtVnpjRzl1YzJVaUxDSmZhR0Z1Wkd4bFRXOTBiMUIxY21Ob1lYTmxVbVZ6Y0c5dWMyVWlMQ0pmYUdGdVpHeGxVMmxuYm1GMGRYSmxVbVZ4ZFdseVpXUWlMQ0pmYUdGdVpHeGxRWFYwYUVOdlpHVlNaWEYxYVhKbFpDSXNJbDlvWVc1a2JHVkhaWFJNWVhOMFZISmhibk5oWTNScGIyNVNaWE53YjI1elpTSXNJa2hoYm1Sc1pWTmxkSFJzWlZKbGMzQnZibk5sSWl3aVgyaGhibVJzWlZObGRIUnNaVzFsYm5SRmJuRjFhWEo1VW1WemNHOXVjMlVpTENKZmFHRnVaR3hsU1c1amIyMXBibWRRYVc1bklpd2lYMmhoYm1Sc1pVbHVZMjl0YVc1blVHOXVaeUlzSWw5b1lXNWtiR1ZMWlhsU2IyeHNhVzVuVW1WeGRXVnpkQ0lzSWw5b1lXNWtiR1ZEWVc1alpXeFVjbUZ1YzJGamRHbHZibEpsYzNCdmJuTmxJaXdpWDJoaGJtUnNaVk5sZEZCdmMwbHVabTlTWlhOd2IyNXpaU0lzSWtabFlYUjFjbVZFYVhOaFlteGxUV1Z6YzJGblpTSXNJbDlvWVc1a2JHVkhaWFJVWVdKc1pVTnZibVpwWnlJc0lsOW9ZVzVrYkdWSFpYUkNhV3hzUkdWMFlXbHNjMUpsY1hWbGMzUWlMQ0pmYUdGdVpHeGxRbWxzYkZCaGVXMWxiblJCWkhacFkyVWlMQ0pmYUdGdVpHeGxSMlYwVDNCbGJsUmhZbXhsYzFKbGNYVmxjM1FpTENKZmFHRnVaR3hsUW1sc2JGQmhlVzFsYm5SR2JHOTNSVzVrWldRaUxDSmZhR0Z1Wkd4bFVISnBiblJwYm1kU1pYTndiMjV6WlNJc0lsOW9ZVzVrYkdWVVpYSnRhVzVoYkZOMFlYUjFjMUpsYzNCdmJuTmxJaXdpWDJoaGJtUnNaVUpoZEhSbGNubE1aWFpsYkVOb1lXNW5aV1FpTENKZmFHRnVaR3hsUlhKeWIzSkZkbVZ1ZENJc0ltVnljbTl5SWl3aWFuTnZiaUlzSWxSdlNuTnZiaUlzSWxObGJtUWlMQ0p0WVhSamFDSXNJbk5oYm1sMGFYTmxaRVZtZEhCdmMwRmtaSEpsYzNNaUxDSjFjR1JoZEdWa1UyVnlhV0ZzVG5WdFltVnlJaXdpZFhCa1lYUmxaRVZtZEhCdmMwRmtaSEpsYzNNaUxDSmZhWE5UWldOMWNtVkRiMjV1WldOMGFXOXVJaXdpYzJWeWRtbGpaU0lzSWxKbGRISnBaWFpsVTJWeWRtbGpaU0lzSW1Ga1pISmxjM05TWlhOd2IyNXpaU0lzSW1Ga1pISmxjM05TWlhOd2IyNXpaVXB6YjI0aUxDSnpkR0YwZFhNaUxDSnpkR0YwZFhOVVpYaDBJaXdpYkdGemRGOTFjR1JoZEdWa0lpd2liMnNpTENKSVlYTkZablJ3YjNOQlpHUnlaWE56UTJoaGJtZGxaQ0lzSW5CeWIzUnZZMjlzSWl3aWJHOWpZWFJwYjI0aUxDSlFjbVZoZFhSb0lpd2lRV05qYjNWdWRGWmxjbWxtZVNJc0ltbHVhWFJwWVhSbFpDSXNJa2x1YVhScFlYUmxaQ0lzSW5aaGJHbGtJaXdpVm1Gc2FXUWlMQ0owZVhCbElpd2lSR2x6Y0d4aGVVMWxjM05oWjJVaUxDSlNaWE53YjI1elpTSXNJbEJvYjI1bFJtOXlRWFYwYUZKbGNYVnBjbVZrVFdWemMyRm5aU0lzSW1kc2RGSmxjWFZsYzNSSlpDSXNJbk53YVUxbGMzTmhaMlVpTENKMllXeHBaRVp2Y20xaGRDSXNJbFpoYkdsa1JtOXliV0YwSWl3aVVISnBiblJOWlhKamFHRnVkRU52Y0hraUxDSlFjbTl0Y0hSR2IzSkRkWE4wYjIxbGNrTnZjSGxQYmtWbWRIQnZjeUlzSWxOcFoyNWhkSFZ5WlVac2IzZFBia1ZtZEhCdmN5SXNJbTFsYzNOaFoyVkVZWFJoSWl3aWNISnZiWEIwWDJadmNsOWpkWE4wYjIxbGNsOWpiM0I1SWl3aWNISnBiblJmWm05eVgzTnBaMjVoZEhWeVpWOXlaWEYxYVhKbFpGOTBjbUZ1YzJGamRHbHZibk1pTENKd2NtbHVkRjl0WlhKamFHRnVkRjlqYjNCNUlpd2lYMk4xYzNSdmJXVnlVbVZqWldsd2RFaGxZV1JsY2lJc0lsOWpkWE4wYjIxbGNsSmxZMlZwY0hSR2IyOTBaWElpTENKZmJXVnlZMmhoYm5SU1pXTmxhWEIwU0dWaFpHVnlJaXdpWDIxbGNtTm9ZVzUwVW1WalpXbHdkRVp2YjNSbGNpSXNJbU4xYzNSdmJXVnlVbVZqWldsd2RFaGxZV1JsY2lJc0ltTjFjM1J2YldWeVVtVmpaV2x3ZEVadmIzUmxjaUlzSW0xbGNtTm9ZVzUwVW1WalpXbHdkRWhsWVdSbGNpSXNJbTFsY21Ob1lXNTBVbVZqWldsd2RFWnZiM1JsY2lJc0ltTjFjM1J2YldWeVgzSmxZMlZwY0hSZmFHVmhaR1Z5SWl3aVkzVnpkRzl0WlhKZmNtVmpaV2x3ZEY5bWIyOTBaWElpTENKdFpYSmphR0Z1ZEY5eVpXTmxhWEIwWDJobFlXUmxjaUlzSW0xbGNtTm9ZVzUwWDNKbFkyVnBjSFJmWm05dmRHVnlJaXdpYzNCcElpd2lYM053YVNJc0ltSnBiR3hKWkNJc0luUmhZbXhsU1dRaUxDSnZjR1Z5WVhSdmNrbGtJaXdpY0dGNWJXVnVkRVpzYjNkVGRHRnlkR1ZrSWl3aVltbHNiRkJoZVcxbGJuUWlMQ0oxY0dSaGRHVmtRbWxzYkVSaGRHRWlMQ0p5WlhOdmJIWmxJaXdpUjJWMFFtbHNiRk4wWVhSMWN5SXNJblJvWlc0aUxDSmlhV3hzVTNSaGRIVnpJaXdpWlhocGMzUnBibWRDYVd4c1UzUmhkSFZ6SWl3aVpYaHBjM1JwYm1kUVlYbHRaVzUwU0dsemRHOXllU0lzSW1admRXNWtSWGhwYzNScGJtZEZiblJ5ZVNJc0ltWnBibVFpTENKd2FHVWlMQ0pIWlhSVVpYSnRhVzVoYkZKbFprbGtJaXdpZFhCa1lYUmxaRWhwYzNSdmNubEZiblJ5YVdWeklpd2lWRzlRWVhsdFpXNTBVM1Z0YldGeWVTSXNJbFJ2UW1sc2JFUmhkR0VpTENKQ2FXeHNVR0Y1YldWdWRGSmxZMlZwZG1Wa0lpd2lkWEJrWVhSbFpFSnBiR3hUZEdGMGRYTWlMQ0p2Y0dWdVZHRmliR1Z6VW1WemNHOXVjMlVpTENKQ2FXeHNVR0Y1YldWdWRFWnNiM2RGYm1SbFpDSXNJblpsY21sbWVVMXpaeUlzSW5SbWN5SXNJbk5sYm5STmMyY2lMQ0pmYVc1cGRHbGhkR1ZRY21WaGRYUm9WSGdpTENKZmFHRnVaR3hsUVdOamIzVnVkRlpsY21sbWVWSmxjM0J2Ym5ObElpd2lYMmhoYm1Sc1pWQnlaV0YxZEdoU1pYTndiMjV6WlNJc0ltTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTSXNJbXhoYzNSSmJtUmxlRTltSWl3aVltRjBkR1Z5ZVY5c1pYWmxiQ0lzSW1Ob1lYSm5hVzVuSWl3aVZHVnliV2x1WVd4Q1lYUjBaWEo1SWl3aVFtRjBkR1Z5ZVV4bGRtVnNJbDBzSW0xaGNIQnBibWR6SWpvaVFVRkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE8wRkJRMFFzVHp0UlExWkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVN4SFFVRkhPenRSUVVWSU8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN08xRkJSVUU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVN4TFFVRkxPMUZCUTB3N1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFc1RVRkJUVHRSUVVOT08xRkJRMEU3VVVGRFFTeE5RVUZOTzFGQlEwNDdVVUZEUVR0UlFVTkJMRTFCUVUwN1VVRkRUanRSUVVOQk8xRkJRMEU3VVVGRFFTeFBRVUZQTzFGQlExQTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEVzU1VGQlNUdFJRVU5LT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPenRSUVVWQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEVzVFVGQlRUdFJRVU5PTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQkxFdEJRVXM3VVVGRFREdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQkxFMUJRVTA3VVVGRFRqdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRXNTMEZCU3pzN1VVRkZURHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN08xRkJSVUU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVN3MlFrRkJOa0k3VVVGRE4wSXNOa0pCUVRaQ08xRkJRemRDTzFGQlEwRTdVVUZEUVR0UlFVTkJPenRSUVVWQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJMSEZDUVVGeFFpeG5Ra0ZCWjBJN1VVRkRja003VVVGRFFUdFJRVU5CTEV0QlFVczdVVUZEVER0UlFVTkJPMUZCUTBFN1VVRkRRU3h4UWtGQmNVSXNaMEpCUVdkQ08xRkJRM0pETzFGQlEwRTdVVUZEUVN4TFFVRkxPMUZCUTB3N1VVRkRRVHRSUVVOQkxFdEJRVXM3VVVGRFREdFJRVU5CTzFGQlEwRXNTMEZCU3p0UlFVTk1PMUZCUTBFN1VVRkRRVHRSUVVOQkxFdEJRVXM3TzFGQlJVdzdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEVzUzBGQlN6dFJRVU5NTzFGQlEwRTdVVUZEUVN4TFFVRkxPMUZCUTB3N1VVRkRRVHRSUVVOQk8xRkJRMEVzUzBGQlN6czdVVUZGVER0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3TzFGQlJVRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEVzYTBKQlFXdENMRGhDUVVFNFFqdFJRVU5vUkR0UlFVTkJPenRSUVVWQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPenRSUVVWQk8xRkJRMEU3TzFGQlJVRTdVVUZEUVR0UlFVTkJPMUZCUTBFN08xRkJSVUU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPenRSUVVWQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJMRXRCUVVzN1VVRkRURHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVN4SlFVRkpPMUZCUTBvN08xRkJSVUU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeEpRVUZKTzFGQlEwbzdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHM3VVVGRlFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVN4TlFVRk5PMUZCUTA0N1VVRkRRVHRSUVVOQk8xRkJRMEVzVDBGQlR6dFJRVU5RTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFc1NVRkJTVHRSUVVOS08xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHM3VVVGRlFUdFJRVU5CTzFGQlEwRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHM3VVVGRlFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFc1MwRkJTenRSUVVOTU8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeHZRa0ZCYjBJc01rSkJRVEpDTzFGQlF5OURPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeFBRVUZQTzFGQlExQTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVRzN1VVRkZRVHRSUVVOQkxHMUNRVUZ0UWl4alFVRmpPMUZCUTJwRE8xRkJRMEU3VVVGRFFUdFJRVU5CT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3TzFGQlJVRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHM3VVVGRlFUdFJRVU5CTzFGQlEwRTdVVUZEUVN4blFrRkJaMElzUzBGQlN6dFJRVU55UWp0UlFVTkJPMUZCUTBFN1VVRkRRU3hOUVVGTk8xRkJRMDQ3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJMR2RDUVVGblFpeFpRVUZaTzFGQlF6VkNPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHM3VVVGRlFUdFJRVU5CTzFGQlEwRXNZMEZCWXl3MFFrRkJORUk3VVVGRE1VTTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVN4TlFVRk5PMUZCUTA0N1VVRkRRVHM3VVVGRlFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRU3hKUVVGSk96dFJRVVZLTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHM3VVVGRlFUczdVVUZGUVR0UlFVTkJPMUZCUTBFc1pVRkJaU3cwUWtGQk5FSTdVVUZETTBNN1VVRkRRVHRSUVVOQk8xRkJRMEU3TzFGQlJVRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk96dFJRVVZCTzFGQlEwRTdPMUZCUlVFN1VVRkRRU3hsUVVGbExEUkNRVUUwUWp0UlFVTXpRenRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPenRSUVVWQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEVzYVVKQlFXbENMSFZEUVVGMVF6dFJRVU40UkR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUczdVVUZGUVR0UlFVTkJPenRSUVVWQk96dFJRVVZCTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHM3VVVGRlFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTEdsQ1FVRnBRaXgxUTBGQmRVTTdVVUZEZUVRN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVN4cFFrRkJhVUlzYzBKQlFYTkNPMUZCUTNaRE8xRkJRMEU3VVVGRFFUdFJRVU5CTEZGQlFWRTdVVUZEVWp0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeFZRVUZWTzFGQlExWTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CT3p0UlFVVkJPMUZCUTBFc1kwRkJZeXgzUTBGQmQwTTdVVUZEZEVRN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTEV0QlFVczdVVUZEVER0UlFVTkJPMUZCUTBFN1VVRkRRU3hQUVVGUE8xRkJRMUE3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFc1UwRkJVenRSUVVOVU8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJMRTFCUVUwN1VVRkRUanRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRXNVVUZCVVR0UlFVTlNPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFUdFJRVU5CT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3TzFGQlJVRTdVVUZEUVR0UlFVTkJPMUZCUTBFc1NVRkJTVHRSUVVOS096dFJRVVZCTzFGQlEwRTdPMUZCUlVFN1VVRkRRVHM3VVVGRlFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEVzWlVGQlpUdFJRVU5tTzFGQlEwRTdVVUZEUVR0UlFVTkJPenRSUVVWQk8xRkJRMEU3TzFGQlJVRTdVVUZEUVRzN1VVRkZRVHRSUVVOQk8xRkJRMEU3T3p0UlFVZEJPMUZCUTBFN08xRkJSVUU3VVVGRFFUczdVVUZGUVR0UlFVTkJPMUZCUTBFN1VVRkRRU3d3UTBGQk1FTXNaME5CUVdkRE8xRkJRekZGTzFGQlEwRTdPMUZCUlVFN1VVRkRRVHRSUVVOQk8xRkJRMEVzZDBSQlFYZEVMR3RDUVVGclFqdFJRVU14UlR0UlFVTkJMR2xFUVVGcFJDeGpRVUZqTzFGQlF5OUVPenRSUVVWQk8xRkJRMEU3VVVGRFFUdFJRVU5CTzFGQlEwRTdVVUZEUVR0UlFVTkJPMUZCUTBFN1VVRkRRVHRSUVVOQk8xRkJRMEU3VVVGRFFTeDVRMEZCZVVNc2FVTkJRV2xETzFGQlF6RkZMR2RJUVVGblNDeHRRa0ZCYlVJc1JVRkJSVHRSUVVOeVNUdFJRVU5CT3p0UlFVVkJPMUZCUTBFN1VVRkRRVHRSUVVOQkxESkNRVUV5UWl3d1FrRkJNRUlzUlVGQlJUdFJRVU4yUkN4cFEwRkJhVU1zWlVGQlpUdFJRVU5vUkR0UlFVTkJPMUZCUTBFN08xRkJSVUU3VVVGRFFTeHpSRUZCYzBRc0swUkJRU3RFT3p0UlFVVnlTRHRSUVVOQk96dFJRVVZCTzFGQlEwRXNjME5CUVhORExIVkNRVUYxUWpzN08xRkJSemRFTzFGQlEwRTdPenM3T3pzN096czdPenM3UVVONGVFSkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czdPenM3T3pzN08wRkRZa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN08wRkJSVUVzYlVNN096czdPenM3T3pzN08wRkRjRU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzYVVNN096czdPenM3T3pzN08wRkRUa0U3UVVGRFFTeHBRa0ZCYVVJc2EwSkJRV3RDTzBGQlEyNURPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNPRUk3T3pzN096czdPenM3TzBGRGFFSkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeG5RenM3T3pzN096czdPenM3UVVOS1FTeHBRa0ZCYVVJc2JVSkJRVThzUTBGQlF5d3dSVUZCY1VJN096czdPenM3T3pzN096dEJRMEU1UXp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2VVTkJRWGxETEdOQlFXTTdPMEZCUlhaRUxIVkNRVUYxUWl4eFFrRkJjVUk3UVVGRE5VTTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2xDUVVGcFFqdEJRVU5xUWp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVN4NVFrRkJlVUk3UVVGRGVrSTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR0ZCUVdFN1FVRkRZanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08wRkJTVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2FVSkJRV2xDTzBGQlEycENPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hwUWtGQmFVSTdRVUZEYWtJN1FVRkRRVHRCUVVOQkxHbENRVUZwUWp0QlFVTnFRanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEU3UVVGRFFTd3lRa0ZCTWtJc2FVSkJRV2xDTzBGQlF6VkRPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTd3JRa0ZCSzBJc2EwSkJRV3RDTzBGQlEycEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE96czdRVUZIVER0QlFVTkJMREJDUVVFd1FqczdRVUZGTVVJN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEhWQ1FVRjFRaXhyUWtGQmEwSTdRVUZEZWtNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hUUVVGVE96dEJRVVZVTzBGQlEwRTdPenRCUVVkQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRU3gxUWtGQmRVSXNZVUZCWVR0QlFVTndRenRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4MVFrRkJkVUlzVVVGQlVUdEJRVU12UWp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3dyUWtGQkswSXNVVUZCVVR0QlFVTjJRenRCUVVOQk96dEJRVVZCTzBGQlEwRXNZVUZCWVR0QlFVTmlMQ3RDUVVFclFpeGpRVUZqTzBGQlF6ZERPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3d3UTBGQk1FTXNVVUZCVVR0QlFVTnNSRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3gxUWtGQmRVSXNXVUZCV1R0QlFVTnVReXd5UWtGQk1rSXNUMEZCVHp0QlFVTnNRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEhWQ1FVRjFRaXhQUVVGUE8wRkJRemxDTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3gxUWtGQmRVSXNXVUZCV1R0QlFVTnVReXd5UWtGQk1rSXNUMEZCVHp0QlFVTnNRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeDFRa0ZCZFVJc1QwRkJUenRCUVVNNVFqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3gxUWtGQmRVSXNUMEZCVHp0QlFVTTVRanRCUVVOQk96dEJRVVZCTzBGQlEwRXNkVUpCUVhWQ0xGbEJRVms3UVVGRGJrTXNNa0pCUVRKQ0xFOUJRVTg3UVVGRGJFTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2RVSkJRWFZDTEU5QlFVODdRVUZET1VJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN096dEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMSFZDUVVGMVFpeHpRa0ZCYzBJN1FVRkROME03UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMSFZDUVVGMVFpeDFRa0ZCZFVJN1FVRkRPVU03UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTEZOQlFWTTdRVUZEVkR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFTeDFRa0ZCZFVJc2MwSkJRWE5DTzBGQlF6ZERPenRCUVVWQkxESkNRVUV5UWl4UlFVRlJPMEZCUTI1RE8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRU3gxUWtGQmRVSXNkVUpCUVhWQ08wRkJRemxETzBGQlEwRTdPMEZCUlVFc01rSkJRVEpDTEZGQlFWRTdRVUZEYmtNN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN096dEJRVWRCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFTeFRRVUZUTzBGQlExUTdRVUZEUVRzN1FVRkZRU3d5UWtGQk1rSXNhVUpCUVdsQ096dEJRVVUxUXpzN1FVRkZRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFc2RVSkJRWFZDTEhOQ1FVRnpRanRCUVVNM1F6dEJRVU5CTERKQ1FVRXlRaXh6UWtGQmMwSTdRVUZEYWtRN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRXNkVUpCUVhWQ0xITkNRVUZ6UWp0QlFVTTNRenM3UVVGRlFTd3lRa0ZCTWtJc2MwSkJRWE5DTzBGQlEycEVPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUVzVTBGQlV6dEJRVU5VTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUVzZFVKQlFYVkNMSE5DUVVGelFqdEJRVU0zUXp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMR3RFUVVGclJDeHJRa0ZCYTBJN08wRkJSWEJGTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hUUVVGVE8wRkJRMVE3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxEUkNRVUUwUWl4WlFVRlpPMEZCUTNoRE8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeDNRa0ZCZDBJc1VVRkJVVHRCUVVOb1F6dEJRVU5CTzBGQlEwRXNZVUZCWVR0QlFVTmlPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3p0QlFVZEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTEhWQ1FVRjFRaXh6UWtGQmMwSTdRVUZETjBNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3pzN1FVRkhRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHbERRVUZwUXl4dFFrRkJiVUk3UVVGRGNFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEN0Q1FVRXJRaXd3UTBGQk1FTTdPMEZCUlhwRk8wRkJRMEVzTUVKQlFUQkNMSEZFUVVGeFJEczdRVUZGTDBVN1FVRkRRU3gxUWtGQmRVSXNXVUZCV1R0QlFVTnVRenRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3pzN1FVRkhRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUT3p0QlFVVlVPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03TzBGQlJWUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGTkJRVk03TzBGQlJWUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdRVUZIUVR0QlFVTkJMRkZCUVZFc1NVRkJPRUk3UVVGRGRFTTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN5eE5RVUZOTEVWQldVNDdPenRCUVVkTUxFTkJRVU03T3pzN096czdPenM3T3p0QlEyeDVRa1E3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSU8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzWVVGQllTeHRRa0ZCVHl4RFFVRkRMR1ZCUVZFN1FVRkROMElzUjBGQlJ6dEJRVU5JT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTEhkRFFVRjNRenRCUVVONFF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRXNiVUpCUVcxQ0xHbENRVUZwUWp0QlFVTndRenRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMSGREUVVGM1F5eFJRVUZSTzBGQlEyaEVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRUQ3gzUWtGQmQwSXNiVUpCUVcxQ08wRkJRek5ETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDFRa0ZCZFVJc1UwRkJVenRCUVVOb1F6czdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4UFFVRlBPMEZCUTFBN08wRkJSVUU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRzFDUVVGdFFpeHBRa0ZCYVVJN1FVRkRjRU03UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h6UTBGQmMwTXNXVUZCV1R0QlFVTnNSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhWQ1FVRjFRaXhUUVVGVE8wRkJRMmhET3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHM3UVVGRlFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzYzBOQlFYTkRMSE5DUVVGelFqdEJRVU0xUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3gxUWtGQmRVSXNVMEZCVXp0QlFVTm9RenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hwUWtGQmFVSXNVMEZCVXp0QlFVTXhRanRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc2JVSkJRVzFDTEdsQ1FVRnBRanRCUVVOd1F6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2NVSkJRWEZDTEdsQ1FVRnBRanRCUVVOMFF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVenRCUVVOVU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2FVSkJRV2xDTERSQ1FVRTBRanRCUVVNM1F6dEJRVU5CT3p0QlFVVkJMR2xDUVVGcFFpeGhRVUZoTzBGQlF6bENPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVEN4cFFrRkJhVUlzWVVGQllUdEJRVU01UWp0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRXNXVUZCV1N4bFFVRmxPMEZCUXpOQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQkxIRkNRVUZ4UWl4blFrRkJaMEk3UVVGRGNrTTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNiVUpCUVcxQ0xHbENRVUZwUWp0QlFVTndRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeHRRa0ZCYlVJc1owSkJRV2RDTzBGQlEyNURPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPenRCUVVWQkxHMUNRVUZ0UWl4alFVRmpPMEZCUTJwRE8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJPenRCUVVWQkxHMUNRVUZ0UWl4alFVRmpPMEZCUTJwRE8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4WlFVRlpMR05CUVdNN1FVRkRNVUk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRzFDUVVGdFFpeHBRa0ZCYVVJN1FVRkRjRU03UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHMUNRVUZ0UWl4alFVRmpPMEZCUTJwRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWVUZCVlN3MlFrRkJOa0k3UVVGRGRrTTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRUQ3haUVVGWkxHTkJRV003UVVGRE1VSTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHRRa0ZCYlVJc1kwRkJZenRCUVVOcVF6dEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRlZCUVZVc05rSkJRVFpDTzBGQlEzWkRPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4WlFVRlpMR05CUVdNN1FVRkRNVUk3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRzFDUVVGdFFpeFRRVUZUTzBGQlF6VkNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHZSRUZCYjBRc1YwRkJWenRCUVVNdlJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEcxQ1FVRnRRaXh2UWtGQmIwSTdRVUZEZGtNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNiMFJCUVc5RUxGZEJRVmM3UVVGREwwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNiVUpCUVcxQ0xFOUJRVTg3UVVGRE1VSTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHMUNRVUZ0UWl4UFFVRlBPMEZCUXpGQ08wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEcxQ1FVRnRRaXhQUVVGUE8wRkJRekZDTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRXNiVUpCUVcxQ0xFOUJRVTg3UVVGRE1VSTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFTeHhRa0ZCY1VJc1QwRkJUenRCUVVNMVFqdEJRVU5CT3p0QlFVVkJMSFZDUVVGMVFpeFBRVUZQTzBGQlF6bENPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDFRa0ZCZFVJc1IwRkJSenRCUVVNeFFqdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVN4dFFrRkJiVUlzVjBGQlZ6dEJRVU01UWpzN1FVRkZRVHRCUVVOQk96dEJRVVZCT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4dFFrRkJiVUlzVjBGQlZ6dEJRVU01UWp0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRTlCUVU4N1FVRkRVRHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzYlVKQlFXMUNMRk5CUVZNN1FVRkROVUk3TzBGQlJVRXNhME5CUVd0RE8wRkJRMnhETEhORFFVRnpRenRCUVVOMFF6czdRVUZGUVR0QlFVTkJMSEZDUVVGeFFpeFBRVUZQTzBGQlF6VkNPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3h0UWtGQmJVSXNUMEZCVHp0QlFVTXhRanRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTEcxQ1FVRnRRaXhQUVVGUE8wRkJRekZDTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4dFFrRkJiVUlzYVVKQlFXbENPMEZCUTNCRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxHMUNRVUZ0UWl4alFVRmpPMEZCUTJwRE8wRkJRMEU3TzBGQlJVRTdRVUZEUVN3MlFrRkJOa0lzWTBGQll6dEJRVU16UXpzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTEdsQ1FVRnBRaXhwUWtGQmFVSTdRVUZEYkVNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNLMEpCUVN0Q0xGRkJRVkU3UVVGRGRrTTdRVUZEUVRzN1FVRkZRU3hwUWtGQmFVSXNUMEZCVHp0QlFVTjRRanRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3h4UWtGQmNVSXNUMEZCVHp0QlFVTTFRanRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEVzYVVKQlFXbENMR2xDUVVGcFFqdEJRVU5zUXp0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRFpDUVVFMlFpeHRRMEZCYlVNN1FVRkRhRVU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2JVSkJRVzFDTEN0RFFVRXJRenRCUVVOc1JUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVN4eFFrRkJjVUlzYzBOQlFYTkRPMEZCUXpORU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1pVRkJaU3huUWtGQlowSTdRVUZETDBJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNWVUZCVlN4NVFrRkJlVUk3UVVGRGJrTTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1pVRkJaU3hwUWtGQmFVSTdRVUZEYUVNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzY1VKQlFYRkNMR05CUVdNN1FVRkRia003UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMSFZDUVVGMVFpeFJRVUZSTzBGQlF5OUNPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMR2xEUVVGcFF5eFJRVUZSTzBGQlEzcERPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHBRMEZCYVVNc1VVRkJVVHRCUVVONlF6dEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN3MlFrRkJOa0lzYlVOQlFXMURPMEZCUTJoRk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRFpDUVVFMlFpeHRRMEZCYlVNN1FVRkRhRVU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFTdzJRa0ZCTmtJc2JVTkJRVzFETzBGQlEyaEZPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzTmtKQlFUWkNMRzFEUVVGdFF6dEJRVU5vUlR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4MVFrRkJkVUlzTUVKQlFUQkNPMEZCUTJwRU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFBRVUZQTzBGQlExQTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxFdEJRVXM3TzBGQlJVdzdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEcxQ1FVRnRRaXhuUTBGQlowTTdRVUZEYmtRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQkxHbERRVUZwUXl4UlFVRlJPMEZCUTNwRE8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJUenRCUVVOUU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPenRCUVVWTU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJMRzFDUVVGdFFpeFpRVUZaTzBGQlF5OUNPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4blFrRkJaMElzYTBKQlFXdENPMEZCUTJ4RE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRzFDUVVGdFFpeG5Ra0ZCWjBJN1FVRkRia003UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4dFFrRkJiVUlzWjBKQlFXZENPMEZCUTI1RE8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3h4UWtGQmNVSXNiMEpCUVc5Q08wRkJRM3BETzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4dFFrRkJiVUlzWjBKQlFXZENPMEZCUTI1RE8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNORUpCUVRSQ0xGRkJRVkU3UVVGRGNFTTdRVUZEUVN3MlFrRkJOa0lzVVVGQlVUdEJRVU55UXp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF5eEZRVUZGTEUxQlFUWkNPenM3T3pzN096czdPenM3T3p0QlEyd3lSMmhETzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTJFc1lVRkJZU3hyUWtGQmEwSXNhVVZCUVdsRkxGRkJRVkVzY1VKQlFYRkNMR2xDUVVGcFFpeDNSVUZCZDBVc2FVUkJRV2xFTEd0Q1FVRnJRaXgxUkVGQmRVUXNaMEpCUVdkQ0xIRkNRVUZ4UWl4UlFVRlJMSGRFUVVGM1JEdEJRVU5zWXl4WFFVRlhMRFpFUVVFMlJDeExRVUZMTEZsQlFWa3NWMEZCVnl4MVFrRkJkVUlzVFVGQlRTeHJRa0ZCYTBJc2MwSkJRWE5DTEZkQlFWY3NVVUZCVVN4SlFVRkpMRFpDUVVFMlFpeDNSRUZCZDBRc01FSkJRVEJDTERoSFFVRTRSenRCUVVNM1dpeHJSRUZCYTBRc05rUkJRVFpFTEZOQlFWTXNaVUZCWlN4cFFrRkJhVUlzTWtKQlFUSkNMR3REUVVGclF5eHRRMEZCYlVNc2JVTkJRVzFETEhkRVFVRjNSQ3h2UlVGQmIwVXNVVUZCVVN4SlFVRkpMR05CUVdNc1YwRkJWeXhSUVVGUkxFbEJRVWtzZFVKQlFYVkNMRlZCUVZVc1NVRkJTVHRCUVVNM1pTeGxRVUZsTEc5RFFVRnZReXh0UTBGQmJVTXNiVU5CUVcxRExEWkRRVUUyUXl3MlEwRkJOa01zZDBSQlFYZEVMSE5DUVVGelFpeEpRVUZKTEcxRFFVRnRReXhSUVVGUkxGVkJRVlVzWjBOQlFXZERMR0ZCUVdFc1UwRkJVeXhYUVVGWExGZEJRVmNzVVVGQlVTeHJRa0ZCYTBJc2JVSkJRVzFDTEdGQlFXRXNZMEZCWXl4RlFVRkZPMEZCUTJobUxGVkJRVlVzV1VGQldTeDNRa0ZCZDBJc1dVRkJXU3hMUVVGTExITkNRVUZ6UWl4VlFVRlZMSGRFUVVGM1JDeFhRVUZYTEU5QlFVOHNaME5CUVdkRExFMUJRVTBzT0VOQlFUaERMR3RGUVVGclJTeDVSRUZCZVVRc1VVRkJVU3h0UWtGQmJVSXNZMEZCWXl4WFFVRlhMRlZCUVZVc1VVRkJVU3hSUVVGUkxGVkJRVlVzYzBKQlFYTkNMRmxCUVZrN1FVRkRiR1lzYVVKQlFXbENMR1ZCUVdVc1MwRkJTeXhaUVVGWkxGZEJRVmNzYVVKQlFXbENMRkZCUVZFc1MwRkJTeXc0UTBGQk9FTXNVMEZCVXl4SlFVRkpMRTFCUVUwc2QwSkJRWGRDTEhOQ1FVRnpRaXhYUVVGWExGZEJRVmNzVlVGQlZTeFJRVUZSTEZGQlFWRXNTVUZCU1N3d1EwRkJNRU1zUzBGQlN5eHBRa0ZCYVVJc1RVRkJUU3hOUVVGTkxESkNRVUV5UWl4WlFVRlpMRzlGUVVGdlJTeFBRVUZQTEZkQlFWYzdRVUZEZEdNc1lVRkJZU3hWUVVGVkxIbENRVUY1UWl4dFFrRkJiVUlzVFVGQlRTeDVRa0ZCZVVJc2JVSkJRVzFDTEUxQlFVMHNNa0pCUVRKQ0xHbENRVUZwUWl4TlFVRk5MSFZDUVVGMVFpeHhRa0ZCY1VJc1UwRkJVeXc0UkVGQk9FUXNZMEZCWXl4cFFrRkJhVUlzVFVGQlRTeDFSVUZCZFVVc01FSkJRVEJDTEZGQlFWRXNTVUZCU1R0QlFVTnNZaXhWUVVGVkxHRkJRV0VzTWtKQlFUSkNMRmxCUVZrc05FVkJRVFJGTEU5QlFVOHNWVUZCVlN4NVFrRkJlVUlzYlVKQlFXMUNMRTFCUVUwc2VVSkJRWGxDTEcxQ1FVRnRRaXhOUVVGTkxESkNRVUV5UWl4cFFrRkJhVUlzVFVGQlRTeDFRa0ZCZFVJc2NVSkJRWEZDTEZOQlFWTXNPRVJCUVRoRUxHTkJRV01zYVVKQlFXbENMRTFCUVUwN1FVRkRlbU1zUTBGQlF5d3dRa0ZCTUVJc1dVRkJXU3hsUVVGbExHRkJRV0VzWjBKQlFXZENMRk5CUVZNc1UwRkJVeXh2UWtGQmIwSXNVMEZCVXl4TFFVRkxMRlZCUVZVc1lVRkJZU3hSUVVGUkxFbEJRVWtzY1VkQlFYRkhMSFZEUVVGMVF5eHZRa0ZCYjBJc2RVSkJRWFZDTEdGQlFXRXNVVUZCVVN4SlFVRkpPMEZCUXpGWUxHMUNRVUZ0UWl4SlFVRkpMSGxJUVVGNVNDeFRRVUZUTEd0Q1FVRnJRaXhUUVVGVExFdEJRVXNzVlVGQlZTeGhRVUZoTEZGQlFWRXNTVUZCU1N3MFJFRkJORVFzVTBGQlV5eHJRa0ZCYTBJc1MwRkJTeXdyUWtGQkswSXNiMEpCUVc5Q0xHRkJRV0VzVVVGQlVTeEpRVUZKTEhGRFFVRnhReXhUUVVGVExHTkJRV01zVDBGQlR5eDFRMEZCZFVNN1FVRkRPV1VzWjBOQlFXZERMSEZFUVVGeFJDeHpRMEZCYzBNc2IwVkJRVzlGTEhOQ1FVRnpRaXg1UmtGQmVVWXNPRVZCUVRoRkxGTkJRVk1zYTBKQlFXdENMRlZCUVZVc1owUkJRV2RFTzBGQlEycGtMRU5CUVVNc1ZVRkJWU3cyUWtGQk5rSXNNa0pCUVRKQ0xIZEZRVUYzUlN4VFFVRlRMRTlCUVU4c1VVRkJVU3hoUVVGaExGRkJRVkVzU1VGQlNTeE5RVUZOTERaQ1FVRTJRaXd3UlVGQk1FVXNXVUZCV1N4WlFVRlpMRmxCUVZrc1YwRkJWeXh4UWtGQmNVSXNUMEZCVHl4MVFrRkJkVUlzVFVGQlRTdzRRa0ZCT0VJc2QwSkJRWGRDTEZOQlFWTXNUMEZCVHl4UlFVRlJPMEZCUXk5a0xGVkJRVlVzVjBGQlZ5eHhVVUZCY1ZFc1YwRkJWeXhOUVVGTkxFMUJRVTBzV1VGQldTeFpRVUZaTEZkQlFWY3NkMEpCUVhkQ0xFdEJRVXNzZFVkQlFYVkhMRmRCUVZjc1RVRkJUVHRCUVVONlpTd3JRa0ZCSzBJc1RVRkJUU3haUVVGWkxGbEJRVmtzVjBGQlZ5eHhRa0ZCY1VJc1MwRkJTeXhQUVVGUExIVkNRVUYxUWl4TlFVRk5MRFpDUVVFMlFpeDNRa0ZCZDBJc01FWkJRVEJHTEdsQ1FVRnBRaXh6UWtGQmMwSXNlVVZCUVhsRkxGTkJRVk1zVDBGQlR5eFJRVUZSTEdGQlFXRXNVVUZCVVN4WFFVRlhMRTFCUVUwc1owSkJRV2RDTEZWQlFWVXNWMEZCVnp0QlFVTjRaU3hoUVVGaExGRkJRVkVzWVVGQllTeE5RVUZOTEUxQlFVMHNXVUZCV1N4WlFVRlpMRmRCUVZjc2IwTkJRVzlETEUxQlFVMHNUMEZCVHl4MVFrRkJkVUlzVFVGQlRTd3JRa0ZCSzBJc1owSkJRV2RDTEZOQlFWTXNUMEZCVHl4UlFVRlJMR0ZCUVdFc1VVRkJVU3hYUVVGWExHbEdRVUZwUml4UFFVRlBMRGhDUVVFNFFpeE5RVUZOTEhWQ1FVRjFRaXh4UWtGQmNVSXNVMEZCVXl3NFJFRkJPRVE3UVVGRGNtWXNaMEpCUVdkQ0xHZENRVUZuUWl4VFFVRlRMRTlCUVU4c1VVRkJVU3hoUVVGaExHOUNRVUZ2UWl4UlFVRlJMR1ZCUVdVc2EwVkJRV3RGTEU5QlFVOHNhME5CUVd0RExFMUJRVTBzTmtWQlFUWkZMRk5CUVZNc1owSkJRV2RDTEhGQ1FVRnhRaXhuUWtGQlowSXNhMGhCUVd0SUxHZENRVUZuUWp0QlFVTTVaU3hWUVVGVkxHZENRVUZuUWl3MFFrRkJORUlzZFVwQlFYVktMR2RDUVVGblFpeFhRVUZYTEN0RlFVRXJSU3h0UWtGQmJVSXNaMEpCUVdkQ0xHMUNRVUZ0UWl4blJFRkJaMFFzYTBKQlFXdENMRzFDUVVGdFFpeHRRa0ZCYlVJN1FVRkRjbVFzTmtKQlFUWkNMR1ZCUVdVc09FSkJRVGhDTEdWQlFXVXNkMEpCUVhkQ0xGVkJRVlVzYzBOQlFYTkRMR1ZCUVdVc09FSkJRVGhDTEdWQlFXVXNkMEpCUVhkQ0xGVkJRVlVzYzBOQlFYTkRMR1ZCUVdVc05FSkJRVFJDTEdWQlFXVXNjMEpCUVhOQ0xGTkJRVk1zYzBOQlFYTkRMR1ZCUVdVc09FSkJRVGhDTEdWQlFXVTdRVUZEYUdVc1UwRkJVeXh6UTBGQmMwTXNaMEpCUVdkQ0xEQkNRVUV3UWl4eFJFRkJjVVFzY1VKQlFYRkNMRGhEUVVFNFF5eDFSVUZCZFVVc2MwSkJRWE5DTEhkRVFVRjNSQ3huUmtGQlowWXNhVUpCUVdsQ0xGVkJRVlVzTUVKQlFUQkNPMEZCUXpObExHOUNRVUZ2UWl4M1FrRkJkMElzYlVOQlFXMURMR2xEUVVGcFF5eHpRMEZCYzBNc2NVSkJRWEZDTEZWQlFWVXNhMFJCUVd0RUxIVkVRVUYxUkN4M1FrRkJkMElzTWtSQlFUSkVMSFZFUVVGMVJDeHpRMEZCYzBNc2RVSkJRWFZDTEZWQlFWVTdRVUZETDJVc2RVUkJRWFZFTEd0RlFVRnJSU3gzUWtGQmQwSXNkVVZCUVhWRkxHdEZRVUZyUlN4elEwRkJjME1zWjBKQlFXZENMRGhDUVVFNFFpeGpRVUZqTEZkQlFWY3NlVVZCUVhsRk8wRkJRMmhrTEhOTVFVRnpUQ3h4UWtGQmNVSXNiVUpCUVcxQ0xFMUJRVTBzTWsxQlFUSk5MRTFCUVUwN1FVRkRjbUlzZVVsQlFYbEpMRTFCUVUwc05FTkJRVFJETERKRlFVRXlSU3hKUVVGSkxHMUZRVUZ0UlN3NFEwRkJPRU1zVTBGQlV5eG5Ra0ZCWjBJc2RVSkJRWFZDTEU5QlFVOHNUMEZCVHl4UFFVRlBMRTlCUVU4c1QwRkJUeXhSUVVGUkxFdEJRVXM3UVVGRE0yUXNjMDVCUVhOT0xHVkJRV1VzWlVGQlpTeGxRVUZsTEdWQlFXVXNaVUZCWlN4VFFVRlRMRzlDUVVGdlFpeE5RVUZOTEhWQ1FVRjFRaXhaUVVGWkxGZEJRVmNzZFVKQlFYVkNMRXRCUVVzc2EwSkJRV3RDTEhOQ1FVRnpRaXhYUVVGWExGRkJRVkVzU1VGQlNTdzJRa0ZCTmtJc1UwRkJVenRCUVVOdVppeExRVUZMTEhWRVFVRjFSQ3huUjBGQlowY3NiVWRCUVcxSExEWkVRVUUyUkN4UFFVRlBMRTlCUVU4c1QwRkJUeXhQUVVGUExFOUJRVThzVDBGQlR5eFBRVUZQTEU5QlFVOHNVVUZCVVN4SlFVRkpPMEZCUTJoWkxHbEhRVUZwUnl4bFFVRmxMR1ZCUVdVc1pVRkJaU3hsUVVGbExHVkJRV1VzWlVGQlpTeGxRVUZsTEdWQlFXVXNVMEZCVXl4blFrRkJaMElzYzBKQlFYTkNMRzlDUVVGdlFpeFhRVUZYTEN0RlFVRXJSU3hSUVVGUkxFdEJRVXNzVFVGQlRTeGhRVUZoTEZGQlFWRXNTVUZCU1N4TlFVRk5MRlZCUVZVc05FTkJRVFJETzBGQlF6bGtMRFpDUVVFMlFpeFJRVUZSTEVsQlFVa3NkME5CUVhkRExGRkJRVkVzU1VGQlNTeGhRVUZoTEVsQlFVa3NOa0pCUVRaQ0xGRkJRVkVzU1VGQlNTeGhRVUZoTEVsQlFVa3NNRU5CUVRCRExGRkJRVkVzU1VGQlNTeGhRVUZoTEVsQlFVa3NhVWRCUVdsSExIZENRVUYzUWl4VFFVRlRMRmxCUVZrN1FVRkROMWc3UVVGRFFTeHRSVUZCYlVVN1FVRkRia1U3UVVGRFFUdEJRVU5CTzBGQlEwRXNZVUZCWVR0QlFVTmlMRGhDUVVFNFFpeHRSa0ZCYlVZc1MwRkJjME1zUTBGQlF5eHRRMEZCVHl4WFFVRlhMRk5CUVZNN1FVRkJRU3h2UjBGQlF5eERRVUZETEZOQlFXdElMRU5CUVVNN096czdPenM3T3pzN096dEJRelZEZUZNN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEdkQ1FVRm5RanRCUVVOb1FqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWTBGQll6dEJRVU5rTEV0QlFVczdRVUZEVEN4alFVRmpPMEZCUTJRN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3g1UkVGQmVVUTdRVUZEZWtRN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxGbEJRVms3UVVGRFdqczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVjBGQlZ6dEJRVU5ZTzBGQlEwRXNWMEZCVnp0QlFVTllPenRCUVVWQk8wRkJRMEU3UVVGRFFTeDNRMEZCZDBNc1YwRkJWenRCUVVOdVJEdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk8wRkJRMEVzVTBGQlV6dEJRVU5VTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4VFFVRlRPMEZCUTFRN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzTWtKQlFUSkNPMEZCUXpOQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeFRRVUZUTzBGQlExUTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVN4VFFVRlRPMEZCUTFRN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFc1UwRkJVenRCUVVOVU8wRkJRMEU3TzBGQlJVRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQkxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVN4dlEwRkJiME1zWTBGQll6dEJRVU5zUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeHBRMEZCYVVNc2EwSkJRV3RDTzBGQlEyNUVPMEZCUTBFN08wRkJSVUU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHBRa0ZCYVVJN08wRkJSV3BDTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhkQ1FVRjNRaXhwUWtGQmFVSTdRVUZEZWtNN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3haUVVGWk8wRkJRMW83UVVGRFFUczdRVUZGUVR0QlFVTkJMRmxCUVZrN1FVRkRXanM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN08wRkJSVXc3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJMRGhEUVVFNFF5eFJRVUZSTzBGQlEzUkVPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hoUVVGaE8wRkJRMkk3UVVGRFFUczdRVUZGUVN4WFFVRlhPMEZCUTFnN1FVRkRRVHRCUVVOQk96dEJRVVZCTEZkQlFWYzdRVUZEV0R0QlFVTkJPMEZCUTBFN08wRkJSVUVzVjBGQlZ6dEJRVU5ZTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1MwRkJTenM3UVVGRlREdEJRVU5CTERoRFFVRTRReXhSUVVGUk8wRkJRM1JFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEVzUzBGQlN6czdRVUZGVER0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4UFFVRlBPMEZCUTFBN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR6dEJRVU5RTzBGQlEwRTdPMEZCUlVFN1FVRkRRU3hMUVVGTE96dEJRVVZNTzBGQlEwRXNPRU5CUVRoRExGRkJRVkU3UVVGRGRFUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMT3p0QlFVVk1PMEZCUTBFc09FTkJRVGhETEZGQlFWRTdRVUZEZEVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3pzN1FVRkZURHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3hEUVVGRE8wRkJRMFE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RlFVRkZMRXRCUVRCQ0xHOUNRVUZ2UWl4VFFVRkZPMEZCUTJ4RU96dEJRVVZCTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3pzN096czdPenM3TzBGRGNuUkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTnlRa0U3UVVGRFFUdEJRVU5CTzBGQlJVOHNTVUZCVFVFc2EwSkJRV0k3UVVGQlFUdEJRVUZCTzBGQlJVa3NPRUpCUVZsRExGZEJRVm9zUlVGQmVVSkRMRkZCUVhwQ0xFVkJRMEU3UVVGQlFUczdRVUZEU1N4VFFVRkxReXhSUVVGTUxFZEJRV2RDUkN4UlFVRm9RanRCUVVOQkxGTkJRVXRGTEdGQlFVd3NSMEZCY1VKSUxGZEJRWEpDTzBGQlJVRXNVMEZCUzBrc1pVRkJUQ3hIUVVGMVFpeEpRVUYyUWp0QlFVTkJMRk5CUVV0RExFMUJRVXdzUjBGQll5eEpRVUZKUXl4dlJFRkJTaXhGUVVGa08wRkJRMEVzVTBGQlMwTXNUMEZCVEN4SFFVRmxMRWxCUVVsRExEWkVRVUZLTEVWQlFXWTdRVUZEU0RzN1FVRldURHRCUVVGQk8wRkJRVUVzWjBOQllVazdRVUZEU1N4VlFVRkpReXhKUVVGSkxFZEJRVWM3UVVGRFVDeHpRa0ZCWXl4TFFVRkxVQ3hSUVVSYU8wRkJSVkFzZFVKQlFXVXNTMEZCUzBNc1lVRkdZanRCUVVkUUxEUkNRVUZ2UWl4TFFVRkxRenRCUVVoc1FpeFBRVUZZTzBGQlRVRXNWMEZCUzBNc1RVRkJUQ3hEUVVGWlN5eDNRa0ZCV2l4SFFVRjFReXhKUVVGMlF6dEJRVU5CTEZkQlFVdE1MRTFCUVV3c1EwRkJXVTBzYjBOQlFWb3NSMEZCYlVRc1NVRkJia1E3UVVGRFFTeFhRVUZMVGl4TlFVRk1MRU5CUVZsUExEUkNRVUZhTEVkQlFUSkRMRWxCUVRORE8wRkJRMEVzVjBGQlMxQXNUVUZCVEN4RFFVRlpVU3huUWtGQldpeERRVUUyUWtvc1NVRkJOMEk3UVVGRFFTeFhRVUZMUml4UFFVRk1MRU5CUVdGUExGVkJRV0lzUTBGQmQwSk1MRWxCUVhoQ08wRkJSVUVzWVVGQlR5eEpRVUZKVFN4cFJFRkJTaXhEUVVGWlF5eG5SVUZCWlN4RFFVRkRReXhGUVVGb1FpeERRVUZ0UWl4UlFVRnVRaXhEUVVGYUxFVkJRVEJEUXl4blJFRkJUU3hEUVVGRGJrSXNhMEpCUVdwRUxFVkJRWEZGVlN4SlFVRnlSU3hGUVVFeVJTeEpRVUV6UlN4RFFVRlFPMEZCUTBnN1FVRXpRa3c3TzBGQlFVRTdRVUZCUVR0QlFUaENUeXhKUVVGTlZTeHRRa0ZCWWp0QlFVRkJPMEZCUVVFN1FVRkZTU3dyUWtGQldVTXNRMEZCV2l4RlFVTkJPMEZCUVVFN08wRkJRMGtzVTBGQlMwTXNSVUZCVEN4SFFVRlZSQ3hEUVVGV08wRkJRMEVzVTBGQlMwVXNVMEZCVEN4SFFVRnBRa1lzUTBGQlF5eERRVUZEU0N4RlFVRnVRanRCUVVOQkxGTkJRVXRtTEZGQlFVd3NSMEZCWjBKclFpeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUME1zVlVGQmRrSTdRVUZEUVN4VFFVRkxReXhWUVVGTUxFZEJRV3RDVEN4RFFVRkRMRU5CUVVOSExFbEJRVVlzUTBGQlQwY3NWMEZCZWtJN1FVRkRRU3hUUVVGTFF5eFBRVUZNTEVkQlFXVlFMRU5CUVVNc1EwRkJRMUVzWlVGQlJpeE5RVUYxUWtNc2MwUkJRVmtzUTBGQlEwWXNUMEZCYmtRN1FVRkRTRHM3UVVGVVREdEJRVUZCTzBGQlFVRXNOa0pCV1VrN1FVRkRTU3hoUVVGUExFdEJRVXRPTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaExFdEJRV0lzUTBGQlVEdEJRVU5JTzBGQlpFdzdRVUZCUVR0QlFVRkJMSFZEUVdsQ1NUdEJRVU5KTEdGQlFVOHNTMEZCUzBZc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRXNZVUZCWWl4RFFVRlFPMEZCUTBnN1FVRnVRa3c3UVVGQlFUdEJRVUZCTERKRFFYTkNTVHRCUVVOSkxHRkJRVThzUzBGQlMwWXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VzY1VKQlFXSXNRMEZCVUR0QlFVTklPMEZCZUVKTU8wRkJRVUU3UVVGQlFTeDNRMEV5UWtrN1FVRkRTU3hoUVVGUExFdEJRVXRHTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaExHdENRVUZpTEVOQlFWQTdRVUZEU0R0QlFUZENURHRCUVVGQk8wRkJRVUVzZVVOQlowTkpPMEZCUTBrc1lVRkJUeXhMUVVGTFJpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZU3hyUWtGQllpeERRVUZRTzBGQlEwZzdRVUZzUTB3N1FVRkJRVHRCUVVGQkxIbERRWEZEU1R0QlFVTkpMR0ZCUVU4c1MwRkJTMFlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFc2EwSkJRV0lzUTBGQlVEdEJRVU5JTzBGQmRrTk1PMEZCUVVFN1FVRkJRU3h6UTBFd1EwazdRVUZEU1N4aFFVRlBMRXRCUVV0R0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhMRzlDUVVGaUxFTkJRVkE3UVVGRFNEdEJRVFZEVER0QlFVRkJPMEZCUVVFc2MwTkJLME5KTzBGQlEwa3NZVUZCVHl4TFFVRkxSaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVN4dlFrRkJZaXhEUVVGUU8wRkJRMGc3UVVGcVJFdzdRVUZCUVR0QlFVRkJMRFpEUVc5RVNUdEJRVU5KTEdGQlFVOHNTMEZCUzBZc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRXNhVUpCUVdJc1EwRkJVRHRCUVVOSU8wRkJkRVJNTzBGQlFVRTdRVUZCUVN4eFEwRjVSRWs3UVVGRFNTeGhRVUZQTEV0QlFVdEdMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTEdOQlFXSXNRMEZCVUR0QlFVTklPMEZCTTBSTU8wRkJRVUU3UVVGQlFTeHJRMEU0UkVrN1FVRkRTU3hoUVVGUExFdEJRVXRHTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaExGZEJRV0lzUTBGQlVEdEJRVU5JTzBGQmFFVk1PMEZCUVVFN1FVRkJRU3hyUTBGdFJVazdRVUZEU1N4aFFVRlBMRXRCUVV0R0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhMRmRCUVdJc1EwRkJVRHRCUVVOSU8wRkJja1ZNTzBGQlFVRTdRVUZCUVN4clEwRjNSVWs3UVVGRFNTeGhRVUZQTEV0QlFVdEdMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTEZkQlFXSXNRMEZCVUR0QlFVTklPMEZCTVVWTU8wRkJRVUU3UVVGQlFTeHRRMEUyUlVrN1FVRkRTU3hoUVVGUExFdEJRVXRHTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaExGbEJRV0lzUTBGQlVEdEJRVU5JTzBGQkwwVk1PMEZCUVVFN1FVRkJRU3h2UTBGclJrazdRVUZEU1N4aFFVRlBMRXRCUVV0R0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhMR0ZCUVdJc1EwRkJVRHRCUVVOSU8wRkJjRVpNTzBGQlFVRTdRVUZCUVN4blJFRjFSa2s3UVVGRFNTeGhRVUZQTEV0QlFVdEdMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTERCQ1FVRmlMRU5CUVZBN1FVRkRTRHRCUVhwR1REdEJRVUZCTzBGQlFVRXNaMFJCTkVaSk8wRkJRMGtzWVVGQlR5eExRVUZMUml4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllTd3dRa0ZCWWl4RFFVRlFPMEZCUTBnN1FVRTVSa3c3UVVGQlFUdEJRVUZCTEhsRFFXbEhTVHRCUVVOSkxHRkJRVThzUzBGQlMwWXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VzYTBKQlFXSXNRMEZCVUR0QlFVTklPMEZCYmtkTU8wRkJRVUU3UVVGQlFTeHhRMEZ4UjNGQ1R5eFRRWEpIY2tJc1JVRnpSMGs3UVVGRFNTeGhRVUZQTEV0QlFVdFVMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoVHl4VFFVRmlMRU5CUVZBN1FVRkRTRHRCUVhoSFREczdRVUZCUVR0QlFVRkJMRWs3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMnhEVHl4SlFVRk5ReXhsUVVGbExFZEJRVWM3UVVGRE0wSkRMR05CUVZrc1JVRkJSU3hqUVVSaE8wRkJSVE5DUXl4WlFVRlZMRVZCUVVVc1dVRkdaVHRCUVVjelFrTXNWMEZCVXl4RlFVRkZPMEZCU0dkQ0xFTkJRWGhDTzBGQlRVRXNTVUZCVFVNc1dVRkJXU3hIUVVGTExGZEJRWFpDTzBGQlJVRXNTVUZCVFVNc2QwSkJRV0lzUjBGRlNTeHJRMEZCV1VNc1pVRkJXaXhGUVVFMlFqdEJRVUZCT3p0QlFVTjZRaXhQUVVGTFRpeGxRVUZNTEVkQlFYVkNUU3hsUVVGMlFqdEJRVU5JTEVOQlNrdzdRVUZQVHl4SlFVRk5ReXhuUWtGQllpeEhRVVZKTERCQ1FVRlpReXhQUVVGYUxFVkJRWEZDTzBGQlFVRTdPMEZCUTJwQ0xFOUJRVXQ0UWl4UFFVRk1MRWRCUVdWM1FpeFBRVUZtTzBGQlEwZ3NRMEZLVER0QlFVOVBMRWxCUVUxRExGVkJRV0k3UVVGQlFUdEJRVUZCTzBGQlEwa3NkMEpCUVdNN1FVRkJRVHM3UVVGRFZpeFRRVUZMUXl4UFFVRk1MRWRCUVd0Q0xFbEJRV3hDTzBGQlEwRXNVMEZCUzFBc1UwRkJUQ3hIUVVGclFpeExRVUZzUWp0QlFVTkJMRk5CUVV0UkxFdEJRVXdzUjBGQmEwSllMR1ZCUVdVc1EwRkJRME1zV1VGQmJFTTdRVUZEUVN4VFFVRkxWeXhYUVVGTUxFZEJRVzFDVWl4WlFVRnVRanRCUVVOQkxGTkJRVXRUTEVkQlFVd3NSMEZCYTBJc1NVRkJiRUk3TzBGQlJVRXNVVUZCUnl4UFFVRlBReXhUUVVGUUxFdEJRWEZDTEZkQlFYaENMRVZCUVhGRE8wRkJRMnBETEZsQlFVMHNTVUZCU1VNc1MwRkJTaXhEUVVGVkxIbERRVUZXTEVOQlFVNDdRVUZEU0R0QlFVTktPenRCUVZoTU8wRkJRVUU3UVVGQlFTdzBRa0ZoV1VNc2JVSkJZbG9zUlVGaGFVTTdRVUZCUVRzN1FVRkRla0lzVlVGQlJ5eExRVUZMVEN4TFFVRk1MRXRCUVdWWUxHVkJRV1VzUTBGQlEwY3NVMEZCTDBJc1NVRkJORU1zUzBGQlMxRXNTMEZCVEN4TFFVRmxXQ3hsUVVGbExFTkJRVU5GTEZWQlFUbEZMRVZCUVRCR08wRkJRM1JHTzBGQlEwRTdRVUZEU0RzN1FVRkZSQ3hYUVVGTFV5eExRVUZNTEVkQlFXRllMR1ZCUVdVc1EwRkJRMFVzVlVGQk4wSXNRMEZPZVVJc1EwRlJla0k3UVVGRFFUczdRVUZEUVN4WFFVRkxWeXhIUVVGTUxFZEJRWEZDTEVsQlFVbERMRk5CUVVvc1EwRkJZeXhMUVVGTFNpeFBRVUZ1UWl4RlFVRTBRaXhMUVVGTFJTeFhRVUZxUXl4RFFVRnlRanM3UVVGRFFTeFhRVUZMUXl4SFFVRk1MRU5CUVZOSkxFMUJRVlFzUjBGQmNVSTdRVUZCUVN4bFFVRk5MRXRCUVVrc1EwRkJRME1zZFVKQlFVd3NSVUZCVGp0QlFVRkJMRTlCUVhKQ096dEJRVU5CTEZkQlFVdE1MRWRCUVV3c1EwRkJVMDBzVTBGQlZDeEhRVUZ4UWl4VlFVRkRReXhQUVVGRU8wRkJRVUVzWlVGQllTeExRVUZKTEVOQlFVTkRMR2xDUVVGTUxFTkJRWFZDUkN4UFFVRjJRaXhEUVVGaU8wRkJRVUVzVDBGQmNrSTdPMEZCUTBFc1YwRkJTMUFzUjBGQlRDeERRVUZUVXl4UFFVRlVMRWRCUVhGQ08wRkJRVUVzWlVGQlRTeExRVUZKTEVOQlFVTkRMRkZCUVV3c1JVRkJUanRCUVVGQkxFOUJRWEpDT3p0QlFVTkJMRmRCUVV0V0xFZEJRVXdzUTBGQlUxY3NUMEZCVkN4SFFVRnhRaXhWUVVGRFF5eEhRVUZFTzBGQlFVRXNaVUZCVXl4TFFVRkpMRU5CUVVORExFOUJRVXdzUTBGQllVUXNSMEZCWWl4RFFVRlVPMEZCUVVFc1QwRkJja0k3TzBGQlJVRkZMR05CUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4SlFVRkpReXhYUVVGS0xFTkJRV2RDTEhsQ1FVRm9RaXhGUVVFeVF6dEJRVUZEUXl4alFVRk5MRVZCUVVVc1NVRkJTWHBDTEhkQ1FVRktMRU5CUVRaQ1RDeGxRVUZsTEVOQlFVTkZMRlZCUVRkRE8wRkJRVlFzVDBGQk0wTXNRMEZCZGtJN1FVRkRTRHRCUVRsQ1REdEJRVUZCTzBGQlFVRXNhVU5CWjBOcFFqdEJRVU5VTEZWQlFVa3NTMEZCUzFNc1MwRkJUQ3hKUVVGaldDeGxRVUZsTEVOQlFVTkRMRmxCUVd4RExFVkJRV2RFT3p0QlFVVm9SQ3hWUVVGSExFdEJRVXRaTEVkQlFVd3NTVUZCV1N4TFFVRkxRU3hIUVVGTUxFTkJRVk5yUWl4VlFVRlVMRWxCUVhWQ0xFdEJRVXRzUWl4SFFVRk1MRU5CUVZOdFFpeE5RVUV2UXl4RlFVRjFSRHRCUVVOdVJDeGhRVUZMYmtJc1IwRkJUQ3hEUVVGVGIwSXNTMEZCVkR0QlFVTklPenRCUVVWRUxGVkJRVWtzUzBGQlMzQkNMRWRCUVZRc1JVRkJZenRCUVVOV0xHRkJRVXRCTEVkQlFVd3NRMEZCVTBrc1RVRkJWQ3hIUVVGeFFpeEpRVUZ5UWp0QlFVTkJMR0ZCUVV0S0xFZEJRVXdzUTBGQlUwMHNVMEZCVkN4SFFVRnhRaXhKUVVGeVFqdEJRVU5CTEdGQlFVdE9MRWRCUVV3c1EwRkJVMU1zVDBGQlZDeEhRVUZ4UWl4SlFVRnlRanRCUVVOQkxHRkJRVXRVTEVkQlFVd3NRMEZCVTFjc1QwRkJWQ3hIUVVGeFFpeEpRVUZ5UWp0QlFVTklPenRCUVVWRUxGZEJRVXRFTEZGQlFVdzdRVUZEU0R0QlFTOURURHRCUVVGQk8wRkJRVUVzZVVKQmFVUlRaaXhQUVdwRVZDeEZRV2xFYTBJN1FVRkRWaXhYUVVGTFN5eEhRVUZNTEVOQlFWTnhRaXhKUVVGVUxFTkJRV014UWl4UFFVRmtPMEZCUTBnN1FVRnVSRXc3UVVGQlFUdEJRVUZCTEN0Q1FYRkVaVHRCUVVOUUxGZEJRVXRITEV0QlFVd3NSMEZCWVZnc1pVRkJaU3hEUVVGRFJ5eFRRVUUzUWp0QlFVTkJMRmRCUVV0QkxGTkJRVXdzUjBGQmFVSXNTVUZCYWtJN1FVRkRRWGRDTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xIbENRVUZvUWl4RlFVRXlRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTVUZCU1hwQ0xIZENRVUZLTEVOQlFUWkNUQ3hsUVVGbExFTkJRVU5ITEZOQlFUZERPMEZCUVZRc1QwRkJNME1zUTBGQmRrSTdRVUZEU0R0QlFYcEVURHRCUVVGQk8wRkJRVUVzSzBKQk1rUmxPMEZCUTFBc1YwRkJTMEVzVTBGQlRDeEhRVUZwUWl4TFFVRnFRanRCUVVOQkxGZEJRVXRSTEV0QlFVd3NSMEZCWVZnc1pVRkJaU3hEUVVGRFF5eFpRVUUzUWp0QlFVTkJMRmRCUVV0WkxFZEJRVXdzUjBGQlZ5eEpRVUZZTzBGQlEwRmpMR05CUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4SlFVRkpReXhYUVVGS0xFTkJRV2RDTEhsQ1FVRm9RaXhGUVVFeVF6dEJRVUZEUXl4alFVRk5MRVZCUVVVc1NVRkJTWHBDTEhkQ1FVRktMRU5CUVRaQ1RDeGxRVUZsTEVOQlFVTkRMRmxCUVRkRE8wRkJRVlFzVDBGQk0wTXNRMEZCZGtJN1FVRkRTRHRCUVdoRlREdEJRVUZCTzBGQlFVRXNPRU5CYTBWMVF6dEJRVUZCT3p0QlFVRkJMRlZCUVZoclF5eExRVUZYTEhWRlFVRklMRU5CUVVjN08wRkJReTlDTzBGQlJVRXNWVUZCUnl4TFFVRkxkRUlzUjBGQlRDeERRVUZUYTBJc1ZVRkJWQ3hMUVVGM1FpeExRVUZMYkVJc1IwRkJUQ3hEUVVGVGRVSXNTVUZCY0VNc1JVRkJNRU03UVVGRGRFTXNZVUZCUzBNc1VVRkJURHRCUVVOQkxHVkJRVThzU1VGQlVEdEJRVU5JTEU5QlNFUXNUVUZIVHl4SlFVRkhSaXhMUVVGTExFZEJRVWNzUlVGQldDeEZRVUZsTzBGQlEyeENRU3hoUVVGTE8wRkJRMHhITEd0Q1FVRlZMRU5CUVVNN1FVRkJRU3hwUWtGQlRTeE5RVUZKTEVOQlFVTndRaXgxUWtGQlRDeERRVUUyUW1sQ0xFdEJRVGRDTEVOQlFVNDdRVUZCUVN4VFFVRkVMRVZCUVRSRExFZEJRVFZETEVOQlFWWTdRVUZEU0N4UFFVaE5MRTFCUjBFN1FVRkRTQ3hoUVVGTFNTeFZRVUZNTzBGQlEwRXNaVUZCVHl4TFFVRlFPMEZCUTBnN1FVRkRTanRCUVM5RlREdEJRVUZCTzBGQlFVRXNjME5CYVVaelFpOUNMRTlCYWtaMFFpeEZRV2xHSzBJN1FVRkRka0p0UWl4alFVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSXNTVUZCU1VNc1YwRkJTaXhEUVVGblFpeHBRa0ZCYUVJc1JVRkJiVU03UVVGQlEwTXNZMEZCVFN4RlFVRkZMRWxCUVVsMlFpeG5Ra0ZCU2l4RFFVRnhRa01zVDBGQlR5eERRVUZET1VJc1NVRkJOMEk3UVVGQlZDeFBRVUZ1UXl4RFFVRjJRanRCUVVOSU8wRkJia1pNTzBGQlFVRTdRVUZCUVN3MFFrRnhSbGtyUXl4SFFYSkdXaXhGUVhGR2FVSTdRVUZEVkVVc1kwRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNaVUZCYUVJc1JVRkJhVU03UVVGQlEwTXNZMEZCVFN4RlFVRkZMRWxCUVVsMlFpeG5Ra0ZCU2l4RFFVRnhRbXRDTEVkQlFYSkNPMEZCUVZRc1QwRkJha01zUTBGQmRrSTdRVUZEU0R0QlFYWkdURHM3UVVGQlFUdEJRVUZCTEVrN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNSQ1FUdEJRVU5CTzBGQlJVOHNTVUZCVFdVc1RVRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNTeHZRa0ZCWXp0QlFVRkJPMEZCUldJc1IwRktUQ3hEUVUxSk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN08wRkJXRW83UVVGQlFUdEJRVUZCTEN0Q1FWbDFRa01zUjBGYWRrSXNSVUZaTkVJdlJDeEpRVm8xUWl4RlFWbHJRenRCUVVNeFFpeFZRVUZKWjBVc1MwRkJTeXhIUVVGSFF5dzJRMEZCU3l4RFFVRkRReXhMUVVGT0xFTkJRVmxETEVkQlFWb3NRMEZCWjBKRExFOUJRV2hDTEVOQlFYZENUQ3hIUVVGNFFpeERRVUZhTzBGQlEwRXNWVUZCVFUwc1JVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlJDeEZRVUZQTEVsQlFWQXNSVUZCWVN4SlFVRmlMRVZCUVcxQ0xFbEJRVzVDTEVWQlFYbENMRWxCUVhwQ0xFVkJRU3RDTEVsQlFTOUNMRVZCUVhGRExFbEJRWEpETEVWQlFUSkRMRWxCUVRORExFVkJRV2xFTEVsQlFXcEVMRVZCUVhWRUxFbEJRWFpFTEVWQlFUWkVMRWxCUVRkRUxFVkJRVzFGTEVsQlFXNUZMRVZCUVhsRkxFbEJRWHBGTEVWQlFTdEZMRWxCUVM5RkxFVkJRWEZHTEVsQlFYSkdMRVZCUVRKR0xFbEJRVE5HTEVOQlFWZzdRVUZEUVN4VlFVRk5ReXhUUVVGVExFZEJRVWRNTERaRFFVRkxMRU5CUVVOTkxFOUJRVTRzUTBGQlkwTXNTMEZCWkN4RFFVRnZRa01zUjBGQmNFSXNRMEZCZDBKU0xEWkRRVUZMTEVOQlFVTkRMRXRCUVU0c1EwRkJXVkVzU1VGQldpeERRVUZwUWs0c1QwRkJha0lzUTBGQmVVSndSU3hKUVVGNlFpeERRVUY0UWl4RFFVRnNRanRCUVVOQkxGVkJRVTB5UlN4TlFVRk5MRWRCUVVjc1NVRkJTVllzTmtOQlFVc3NRMEZCUTFjc1pVRkJUaXhEUVVGelFrTXNSMEZCTVVJc1EwRkJPRUppTEV0QlFUbENMRVZCUVhGRFN5eEZRVUZ5UXl4RFFVRm1PMEZCUTBFc1ZVRkJUVk1zWTBGQll5eEhRVUZIU0N4TlFVRk5MRU5CUVVOSkxFOUJRVkFzUTBGQlpWUXNVMEZCWml4RFFVRjJRanRCUVVOQkxGVkJRVTFWTEdWQlFXVXNSMEZCUjJZc05rTkJRVXNzUTBGQlEwTXNTMEZCVGl4RFFVRlpReXhIUVVGYUxFTkJRV2RDWXl4VFFVRm9RaXhEUVVFd1FrZ3NZMEZCTVVJc1EwRkJlRUk3UVVGRlFTeGhRVUZQUlN4bFFVRlFPMEZCUTBnc1MwRnlRa3dzUTBGMVFrazdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVFZDU2p0QlFVRkJPMEZCUVVFc0swSkJOa0p6UW1wQ0xFZEJOMEowUWl4RlFUWkNNa0l2UkN4SlFUZENNMElzUlVFMlFtbERPMEZCUTNwQ0xGVkJRVWxuUlN4TFFVRkxMRWRCUVVkRExEWkRRVUZMTEVOQlFVTkRMRXRCUVU0c1EwRkJXVU1zUjBGQldpeERRVUZuUWtNc1QwRkJhRUlzUTBGQmQwSk1MRWRCUVhoQ0xFTkJRVm83UVVGRFFTeFZRVUZOVFN4RlFVRkZMRWRCUVVjc1EwRkJReXhKUVVGRUxFVkJRVThzU1VGQlVDeEZRVUZoTEVsQlFXSXNSVUZCYlVJc1NVRkJia0lzUlVGQmVVSXNTVUZCZWtJc1JVRkJLMElzU1VGQkwwSXNSVUZCY1VNc1NVRkJja01zUlVGQk1rTXNTVUZCTTBNc1JVRkJhVVFzU1VGQmFrUXNSVUZCZFVRc1NVRkJka1FzUlVGQk5rUXNTVUZCTjBRc1JVRkJiVVVzU1VGQmJrVXNSVUZCZVVVc1NVRkJla1VzUlVGQkswVXNTVUZCTDBVc1JVRkJjVVlzU1VGQmNrWXNSVUZCTWtZc1NVRkJNMFlzUTBGQldEdEJRVU5CTEZWQlFVMVRMR05CUVdNc1IwRkJSMklzTmtOQlFVc3NRMEZCUTBNc1MwRkJUaXhEUVVGWlF5eEhRVUZhTEVOQlFXZENReXhQUVVGb1FpeERRVUYzUW5CRkxFbEJRWGhDTEVOQlFYWkNPMEZCUTBFc1ZVRkJUVEpGTEUxQlFVMHNSMEZCUnl4SlFVRkpWaXcyUTBGQlN5eERRVUZEVnl4bFFVRk9MRU5CUVhOQ1F5eEhRVUV4UWl4RFFVRTRRbUlzUzBGQk9VSXNSVUZCY1VOTExFVkJRWEpETEVOQlFXWTdRVUZEUVN4VlFVRk5ZU3hqUVVGakxFZEJRVWRRTEUxQlFVMHNRMEZCUTFFc1QwRkJVQ3hEUVVGbFRDeGpRVUZtTEVOQlFYWkNPMEZCUTBFc1ZVRkJUVTBzVTBGQlV5eEhRVUZIYmtJc05rTkJRVXNzUTBGQlEwTXNTMEZCVGl4RFFVRlpVU3hKUVVGYUxFTkJRV2xDVHl4VFFVRnFRaXhEUVVFeVFtaENMRFpEUVVGTExFTkJRVU5OTEU5QlFVNHNRMEZCWTBNc1MwRkJaQ3hEUVVGdlFtRXNTMEZCY0VJc1EwRkJNRUpJTEdOQlFURkNMRU5CUVROQ0xFTkJRV3hDTzBGQlJVRXNZVUZCVDBVc1UwRkJVRHRCUVVOSUxFdEJkRU5NTEVOQmQwTkpPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUUzUTBvN1FVRkJRVHRCUVVGQkxHdERRVGhEZVVKeVFpeEhRVGxEZWtJc1JVRTRRemhDZFVJc1lVRTVRemxDTEVWQk9FTTJRenRCUVVOeVF5eFZRVUZKUXl4TlFVRk5MRWRCUVVjc1NVRkJTVU1zTkVOQlFVb3NRMEZCVlN4VFFVRldMRVZCUVhGQ0xFMUJRWEpDTEVOQlFXSTdRVUZGUVVRc1dVRkJUU3hEUVVGRFJTeFZRVUZRTEVOQlFXdENNVUlzUjBGQmJFSXNSVUZCYzBJc1MwRkJkRUk3UVVGRFFYZENMRmxCUVUwc1EwRkJRMGNzVFVGQlVDeERRVUZqU2l4aFFVRmtPMEZCUlVFc1lVRkJUME1zVFVGQlRTeERRVUZEU1N4UFFVRlFMRU5CUVdVc1MwRkJaaXhEUVVGUU8wRkJRMGc3UVVGSFJEczdPenM3UVVGNFJFbzdRVUZCUVR0QlFVRkJMR2xEUVRSRWQwSkRMRXRCTlVSNFFpeEZRVFJFSzBJN1FVRkRka0lzVlVGQlNVd3NUVUZCVFN4SFFVRkhMRWxCUVVsRExEUkRRVUZLTEVOQlFWVXNVMEZCVml4RlFVRnhRaXhMUVVGeVFpeERRVUZpTzBGQlEwRkVMRmxCUVUwc1EwRkJRMGNzVFVGQlVDeERRVUZqUlN4TFFVRmtPMEZCUTBFc1ZVRkJUVU1zVDBGQlR5eEhRVUZIVGl4TlFVRk5MRU5CUVVOUExFOUJRVkFzUTBGQlpTeExRVUZtTEVOQlFXaENPMEZCUTBFc1lVRkJUMFFzVDBGQlVEdEJRVU5JTzBGQmFrVk1PenRCUVVGQk8wRkJRVUVzU1RzN096czdPenM3T3pzN096czdPenM3T3pzN096dERRMFJCTzBGQlEwRTdRVUZEUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTA4c1NVRkJUVVVzWVVGQllqdEJRVUZCTzBGQlFVRTdRVUZGU1N3eVFrRkJaVHRCUVVGQk8wRkJSV1FzUjBGS1RDeERRVTFKTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRVlpLTzBGQlFVRTdRVUZCUVN4eFEwRlhjVUpETEZGQldISkNMRVZCVnl0Q08wRkJRM1pDTEZWQlFVbERMRlZCUVZVc1IwRkJVU3hKUVVGSlF5dzBRMEZCU2l4RFFVRlBSaXhSUVVGUUxFTkJRWFJDTzBGQlEwRXNWVUZCU1Vjc1lVRkJZU3hIUVVGTFF5eEpRVUZKTEVOQlFVTkRMRXRCUVV3c1EwRkJXVVFzU1VGQlNTeERRVUZEUlN4TlFVRk1MRXRCUVdkQ0xFbEJRV3BDTEVkQlFYbENMRU5CUVhCRExFTkJRWFJDTzBGQlEwRXNWVUZCU1VNc1ZVRkJWU3hIUVVGUlRpeFZRVUZWTEVOQlFVTlBMRWxCUVZnc1EwRkJaMEpNTEdGQlFXaENMRU5CUVhSQ0xFTkJTSFZDTEVOQlJ5dENPenRCUVVOMFJDeFZRVUZKVFN4SFFVRkhMRWRCUVdVc1NVRkJTVkFzTkVOQlFVb3NRMEZCVHl4RFFVRlFMRU5CUVhSQ096dEJRVVZCTEZWQlFVZExMRlZCUVZVc1EwRkJRMGNzUjBGQldDeERRVUZsUkN4SFFVRm1MRXRCUVhWQ0xFTkJRVU1zUTBGQk0wSXNSVUZCT0VJN1FVRkRNVUlzWlVGQlQwRXNSMEZCVUR0QlFVTklPenRCUVVWRUxHRkJRVTlHTEZWQlFWQTdRVUZEU0N4TFFYUkNUQ3hEUVhkQ1NUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVFNVFrbzdRVUZCUVR0QlFVRkJMRGhDUVN0Q1kwa3NRMEV2UW1Rc1JVRXJRbWxDUXl4RFFTOUNha0lzUlVFclFtOUNReXhWUVM5Q2NFSXNSVUVyUW1kRE8wRkJRM2hDTEZWQlFVMURMRWxCUVVrc1IwRkJSeXhKUVVGSldpdzBRMEZCU2l4RFFVRlBWeXhWUVVGUUxFVkJRVzFDTEVWQlFXNUNMRU5CUVdJN1FVRkRRU3hWUVVGTlJTeEpRVUZKTEVkQlFVY3NTVUZCU1dJc05FTkJRVW9zUTBGQlQxVXNRMEZCVUN4RlFVRlZMRVZCUVZZc1EwRkJZanRCUVVOQkxGVkJRVTFKTEZOQlFWTXNSMEZCUjJRc05FTkJRVVVzUTBGQlEyVXNTVUZCU0N4RFFVRlJMRWxCUVVsbUxEUkRRVUZLTEVOQlFVOVRMRU5CUVZBc1JVRkJWU3hGUVVGV0xFTkJRVklzUTBGQmJFSTdRVUZEUVN4VlFVRk5UeXhKUVVGSkxFZEJRVWRJTEVsQlFVa3NRMEZCUTBrc1MwRkJUQ3hEUVVGWFNDeFRRVUZZTEVOQlFXSTdRVUZEUVN4VlFVRk5TU3hOUVVGTkxFZEJRVWRHTEVsQlFVa3NRMEZCUTBjc1RVRkJUQ3hEUVVGWlVDeEpRVUZhTEVWQlFXdENVU3hQUVVGc1FpeEhRVUUwUWtNc1VVRkJOVUlzUTBGQmNVTXNSVUZCY2tNc1EwRkJaanRCUVVWQkxHRkJRVTlJTEUxQlFWQTdRVUZEU0N4TFFYWkRUQ3hEUVhsRFNUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVFdlEwbzdRVUZCUVR0QlFVRkJMREpDUVdkRVYxUXNRMEZvUkZnc1JVRm5SR05oTEdOQmFFUmtMRVZCWjBRNFFrTXNZMEZvUkRsQ0xFVkJaMFE0UXp0QlFVTjBReXhWUVVGTlF5eEpRVUZKTEVkQlFVY3NTVUZCU1hoQ0xEUkRRVUZLTEVOQlFVOXpRaXhqUVVGUUxFVkJRWFZDTEVWQlFYWkNMRU5CUVdJN1FVRkRRU3hWUVVGTlJ5eEpRVUZKTEVkQlFVY3NTVUZCU1hwQ0xEUkRRVUZLTEVOQlFVOTFRaXhqUVVGUUxFVkJRWFZDTEVWQlFYWkNMRU5CUVdJN1FVRkRRU3hWUVVGTlZDeFRRVUZUTEVkQlFVZGtMRFJEUVVGRkxFTkJRVU5sTEVsQlFVZ3NRMEZCVVN4SlFVRkpaaXcwUTBGQlNpeERRVUZQVXl4RFFVRlFMRVZCUVZVc1JVRkJWaXhEUVVGU0xFTkJRV3hDTzBGQlEwRXNWVUZCVFdsQ0xFbEJRVWtzUjBGQlIwWXNTVUZCU1N4RFFVRkRVQ3hMUVVGTUxFTkJRVmRJTEZOQlFWZ3NRMEZCWWp0QlFVVkJMR0ZCUVU5WkxFbEJRVWtzUTBGQlExQXNUVUZCVEN4RFFVRlpUU3hKUVVGYUxFVkJRV3RDVEN4UFFVRnNRaXhIUVVFMFFrTXNVVUZCTlVJc1EwRkJjVU1zUlVGQmNrTXNSVUZCZVVOTkxGZEJRWHBETEVWQlFWQTdRVUZEU0R0QlFYWkVURHM3UVVGQlFUdEJRVUZCTEVrN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJSQk8wRkJRMEU3UVVGRFFUdEJRVVZQTEVsQlFVMURMR2RDUVVGaU8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUVzYzBOQlF6WkNReXhUUVVRM1FpeEZRVU4zUTBNc1kwRkVlRU1zUlVGRlNUdEJRVU5KTEZWQlFVbHlTQ3hEUVVGRExFZEJRVWNzU1VGQlNVd3NhVVJCUVVvc1EwRkJXWGxJTEZOQlFWTXNRMEZCUTNaSUxFVkJRWFJDTEVWQlFUQkNReXhuUkVGQlRTeERRVUZEZDBnc1pVRkJha01zUlVGQmEwUTdRVUZCUXl4clFrRkJWVHRCUVVGWUxFOUJRV3hFTEVWQlFUSkZMRWxCUVRORkxFTkJRVkk3UVVGRFFTeFZRVUZKUXl4VlFVRlZMRWRCUVVjc1NVRkJTVU1zWjBSQlFVb3NRMEZCV1hKRkxEaERRVUZOTEVOQlFVTnpSU3haUVVGUUxFTkJRVzlDU2l4alFVRmpMRU5CUVVOTExFMUJRVzVETEVWQlFUSkRVaXhYUVVFelF5eEZRVUZhTEVWQlFYRkZMMFFzT0VOQlFVMHNRMEZCUTNORkxGbEJRVkFzUTBGQmIwSktMR05CUVdNc1EwRkJRMDBzVDBGQmJrTXNSVUZCTkVOVUxGZEJRVFZETEVWQlFYSkZMRU5CUVdwQ08wRkJRMEVzWVVGQlR5eEpRVUZKVlN4blFrRkJTaXhEUVVGeFFqVklMRU5CUVhKQ0xFVkJRWGRDZFVnc1ZVRkJlRUlzUTBGQlVEdEJRVU5JTzBGQlRrdzdPMEZCUVVFN1FVRkJRVHRCUVZOUExFbEJRVTFMTEdkQ1FVRmlMRWRCUTBrc01FSkJRVmxETEhOQ1FVRmFMRVZCUVc5RFRpeFZRVUZ3UXl4RlFVRm5SRHRCUVVGQk96dEJRVU0xUXl4UFFVRkxUeXh6UWtGQlRDeEhRVUU0UWtRc2MwSkJRVGxDTzBGQlEwRXNUMEZCUzBVc1ZVRkJUQ3hIUVVGclFsSXNWVUZCYkVJN1FVRkRTQ3hEUVVwTUxFTTdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEWWs4c1NVRkJUVk1zVFVGQllqdEJRVUZCTzBGQlFVRTdRVUZEU1N4clFrRkJXVU1zVDBGQldpeEZRVUV5UXp0QlFVRkJMRkZCUVhSQ1F5eGhRVUZ6UWl4MVJVRkJUaXhKUVVGTk96dEJRVUZCT3p0QlFVTjJReXhUUVVGTFF5eE5RVUZNTEVkQlFXdENMRVZCUVd4Q08wRkJRMEVzVTBGQlMwWXNUMEZCVEN4SFFVRnJRa0VzVDBGQmJFSTdRVUZEUVN4VFFVRkxReXhoUVVGTUxFZEJRWEZDUVN4aFFVRnlRanRCUVVOSU96dEJRVXhNTzBGQlFVRTdRVUZCUVN3eVFrRlBhMEk3UVVGQlFTeDNRMEZCVGtVc1NVRkJUVHRCUVVGT1FTeFpRVUZOTzBGQlFVRTdPMEZCUTFZc1YwRkJTMFFzVFVGQlRDeERRVUZaUlN4SlFVRmFMRU5CUVdsQ1JDeEpRVUZKTEVOQlFVTkZMRWxCUVV3c1EwRkJWU3hIUVVGV0xFTkJRV3BDT3p0QlFVTkJMRmRCUVV0RExFOUJRVXc3UVVGRFNEdEJRVlpNTzBGQlFVRTdRVUZCUVN3MFFrRlpiVUk3UVVGQlFTeDVRMEZCVGtnc1NVRkJUVHRCUVVGT1FTeFpRVUZOTzBGQlFVRTdPMEZCUTFnc1YwRkJTMFFzVFVGQlRDeERRVUZaUlN4SlFVRmFMRU5CUVdsQ1JDeEpRVUZKTEVOQlFVTkZMRWxCUVV3c1EwRkJWU3hIUVVGV0xFTkJRV3BDT3p0QlFVTkJMRmRCUVV0RExFOUJRVXc3UVVGRFNEdEJRV1pNTzBGQlFVRTdRVUZCUVN3eVFrRnBRbXRDTzBGQlFVRXNlVU5CUVU1SUxFbEJRVTA3UVVGQlRrRXNXVUZCVFR0QlFVRkJPenRCUVVOV0xGZEJRVXRFTEUxQlFVd3NRMEZCV1VVc1NVRkJXaXhEUVVGcFFrUXNTVUZCU1N4RFFVRkRSU3hKUVVGTUxFTkJRVlVzUjBGQlZpeERRVUZxUWpzN1FVRkRRU3hYUVVGTFF5eFBRVUZNTzBGQlEwZzdRVUZ3UWt3N1FVRkJRVHRCUVVGQkxEUkNRWE5DYlVJN1FVRkJRU3g1UTBGQlRrZ3NTVUZCVFR0QlFVRk9RU3haUVVGTk8wRkJRVUU3TzBGQlExZ3NWMEZCUzBRc1RVRkJUQ3hEUVVGWlJTeEpRVUZhTEVOQlFXbENSQ3hKUVVGSkxFTkJRVU5GTEVsQlFVd3NRMEZCVlN4SFFVRldMRU5CUVdwQ096dEJRVU5CTEZkQlFVdERMRTlCUVV3N1FVRkRTRHRCUVhwQ1REdEJRVUZCTzBGQlFVRXNPRUpCTWtKeFFqdEJRVUZCTEhsRFFVRk9TQ3hKUVVGTk8wRkJRVTVCTEZsQlFVMDdRVUZCUVRzN1FVRkRZa2tzWVVGQlR5eERRVUZEUXl4SFFVRlNMRU5CUVZsTUxFbEJRVWtzUTBGQlEwVXNTVUZCVEN4RFFVRlZMRWRCUVZZc1EwRkJXanRCUVVOSU8wRkJOMEpNTzBGQlFVRTdRVUZCUVN3NFFrRXJRbU03UVVGRFRpeFhRVUZMVEN4UFFVRk1MRU5CUVdGVExGTkJRV0lzUjBGQmVVSXNTMEZCUzFBc1RVRkJUQ3hEUVVGWlJ5eEpRVUZhTEVOQlFXbENMRXRCUVV0S0xHRkJRWFJDTEVOQlFYcENPMEZCUTBFc1YwRkJTMFFzVDBGQlRDeERRVUZoVlN4VFFVRmlMRWRCUVhsQ0xFdEJRVXRXTEU5QlFVd3NRMEZCWVZjc1dVRkJkRU03UVVGRFNEdEJRV3hEVER0QlFVRkJPMEZCUVVFc05FSkJiME5aTzBGQlEwb3NWMEZCUzFRc1RVRkJUQ3hIUVVGakxFVkJRV1E3TzBGQlEwRXNWMEZCUzBrc1QwRkJURHRCUVVOSU8wRkJka05NT3p0QlFVRkJPMEZCUVVFc1NUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0RFEwVkJPMEZCUTBFN1FVRkRRVHM3UVVGRFR5eEpRVUZOZWtrc1RVRkJUU3hIUVVGSE8wRkJRMnBDSzBrc1lVRkJWeXhGUVVGSExHTkJSRWM3UVVGRmFrSkRMRmxCUVZVc1JVRkJSeXhoUVVaSk8wRkJSMnBDUXl4aFFVRlhMRVZCUVVjc1kwRklSenRCUVVscVFrTXNWVUZCVVN4RlFVRkhMRmRCU2swN1FVRkxha0pETEdOQlFWa3NSVUZCUnl4bFFVeEZPMEZCVFdwQ1F5eG5Ra0ZCWXl4RlFVRkhMRmRCVGtFN1FVRlJha0pETEdOQlFWa3NSVUZCUnl4bFFWSkZPMEZCVTJwQ1F5eGxRVUZoTEVWQlFVY3NaMEpCVkVNN1FVRlhha0pETEUxQlFVa3NSVUZCUnl4TlFWaFZPMEZCV1dwQ1F5eE5RVUZKTEVWQlFVY3NUVUZhVlR0QlFXTnFRa01zYVVKQlFXVXNSVUZCUnl4VlFXUkVPMEZCWldwQ1F5eHJRa0ZCWjBJc1JVRkJSeXh0UWtGbVJqdEJRV2RDYWtKRExEQkNRVUYzUWl4RlFVRkhMRzlDUVdoQ1ZqdEJRV2xDYWtKRExESkNRVUY1UWl4RlFVRkhMR2xDUVdwQ1dEdEJRV3RDYWtKRExESkNRVUY1UWl4RlFVRkhMSE5DUVd4Q1dEdEJRVzFDYWtKRExEUkNRVUV3UWl4RlFVRkhMR3RDUVc1Q1dqdEJRVzlDYWtKRExHVkJRV0VzUlVGQlJ5eFJRWEJDUXp0QlFYRkNha0pETEdkQ1FVRmpMRVZCUVVjc2FVSkJja0pCTzBGQmMwSnFRa01zYlVKQlFXbENMRVZCUVVjc2IwSkJkRUpJTzBGQmRVSnFRa01zYlVKQlFXbENMRVZCUVVjc2JVSkJka0pJTzBGQmQwSnFRa01zYlVKQlFXbENMRVZCUVVjc2EwSkJlRUpJTzBGQmVVSnFRa01zYTBKQlFXZENMRVZCUVVjc05rSkJla0pHTzBGQk1FSnFRa01zWjBKQlFXTXNSVUZCUnl3eVFrRXhRa0U3UVVFMFFtcENlRXdzYjBKQlFXdENMRVZCUVVjc1RVRTFRa283UVVFMlFtcENiMElzY1VKQlFXMUNMRVZCUVVjc1pVRTNRa3c3UVVFclFtcENjVXNzY1VKQlFXMUNMRVZCUVVjc1pVRXZRa3c3UVVGblEycENReXh6UWtGQmIwSXNSVUZCUnl4M1FrRm9RMDQ3UVVGclEycENReXhsUVVGaExFVkJRVWNzVVVGc1EwTTdRVUZ0UTJwQ1F5eG5Ra0ZCWXl4RlFVRkhMR2xDUVc1RFFUdEJRVzlEYWtKRExEQkNRVUYzUWl4RlFVRkhMRzlDUVhCRFZqdEJRWEZEYWtKRExESkNRVUY1UWl4RlFVRkhMRFpDUVhKRFdEdEJRWFZEYWtKRExHMUNRVUZwUWl4RlFVRkhMR05CZGtOSU8wRkJkME5xUWtNc2IwSkJRV3RDTEVWQlFVY3NkVUpCZUVOS08wRkJNRU5xUWtNc1owSkJRV01zUlVGQlJ5eDFRa0V4UTBFN1FVRXlRMnBDZEVRc2FVSkJRV1VzUlVGQlJ5eDNRa0V6UTBRN1FVRTJRMnBDTlVZc1QwRkJTeXhGUVVGSExFOUJOME5UTzBGQkswTnFRbTFLTEhOQ1FVRnZRaXhGUVVGSExIRkNRUzlEVGp0QlFXbEViRUk3UVVGRFFVTXNNRUpCUVhkQ0xFVkJRVWNzYTBKQmJFUlVPMEZCYTBRMlFqdEJRVU12UTBNc01FSkJRWGRDTEVWQlFVY3NhMEpCYmtSVU8wRkJiVVEyUWp0QlFVTXZRME1zTUVKQlFYZENMRVZCUVVjc2EwSkJjRVJVTzBGQmIwUTJRanRCUVVNdlEwTXNkVUpCUVhGQ0xFVkJRVWNzWTBGeVJFNDdRVUZ4UkRaQ08wRkJReTlEUXl4MVFrRkJjVUlzUlVGQlJ5eGpRWFJFVGp0QlFYTkVOa0k3UVVGRkwwTkRMR2xDUVVGbExFVkJRVWNzVDBGNFJFRTdRVUY1Ukd4Q1F5eHJRa0ZCWjBJc1JVRkJSeXhuUWtGNlJFUTdRVUV5Ukd4Q1F5eDFRa0ZCY1VJc1JVRkJSeXh4UWtFelJFNDdRVUUwUkd4Q1F5eDNRa0ZCYzBJc1JVRkJSeXhwUWtFMVJGQTdRVUU0Ukd4Q1F5eHhRa0ZCYlVJc1JVRkJSeXgxUWtFNVJFbzdRVUZuUld4Q1F5eDVRa0ZCZFVJc1JVRkJSU3hwUWtGb1JWQTdRVUZwUld4Q1F5eHpRa0ZCYjBJc1JVRkJSU3hoUVdwRlNqdEJRVzFGYkVKRExHZERRVUU0UWl4RlFVRkZPMEZCYmtWa0xFTkJRV1k3UVVGelJVRXNTVUZCVFdwTUxGbEJRVmtzUjBGQlJ6dEJRVU40UW10TUxGTkJRVThzUlVGQlJTeFRRVVJsTzBGQlEwcHdUQ3hUUVVGUExFVkJRVVVzVTBGRVREdEJRVU5uUW5GTUxGRkJRVTBzUlVGQlJUdEJRVVI0UWl4RFFVRnlRaXhETEVOQlNWQTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMDhzU1VGQlRVTXNXVUZCWWl4SFFVTkpMSE5DUVVGWlF5eExRVUZhTEVWQlFXMUNReXhQUVVGdVFpeEZRVUUwUWtNc1pVRkJOVUlzUlVGQk5rTTdRVUZCUVRzN1FVRkRla01zVDBGQlMwTXNTMEZCVEN4SFFVRmhTQ3hMUVVGaU8wRkJRMEVzVDBGQlMzUkZMRTlCUVV3c1IwRkJaWFZGTEU5QlFXWTdRVUZEUVN4UFFVRkxSeXhsUVVGTUxFZEJRWFZDUml4bFFVRjJRanRCUVVOSUxFTkJURXdzUXl4RFFWRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwOHNTVUZCVFVjc1pVRkJZanRCUVVGQk8wRkJRVUU3UVVGRFNTd3lRa0ZCV1doTUxFOUJRVm9zUlVGQmNVSnBUQ3hIUVVGeVFpeEZRVUV3UWtNc1NVRkJNVUlzUlVGQlowTlFMRXRCUVdoRExFVkJRWFZETzBGQlFVRTdPMEZCUTI1RE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVMEZCUzI1TkxFOUJRVXdzUjBGQlpYZENMRTlCUVdZc1EwRk1iVU1zUTBGUGJrTTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEVzVTBGQlMyMU1MRWRCUVV3c1IwRkJWMFlzUjBGQldDeERRVmh0UXl4RFFXRnVRenRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZEUVN4VFFVRkxSeXhKUVVGTUxFZEJRVmxHTEVsQlFWb3NRMEZxUW0xRExFTkJiVUp1UXp0QlFVTkJPMEZCUTBFN08wRkJRMEVzVTBGQlMwb3NTMEZCVEN4SFFVRmhTQ3hMUVVGaU8wRkJRMGc3TzBGQmVFSk1PMEZCUVVFN1FVRkJRU3cyUWtFd1FtRTdRVUZEVEN4aFFVRlBPMEZCUTBnelN5eGxRVUZQTEVWQlFVVXNTMEZCUzNoQ0xFOUJSRmc3UVVGRlNIbE5MRmRCUVVjc1JVRkJSU3hMUVVGTFJTeEhRVVpRTzBGQlIwaEVMRmxCUVVrc1JVRkJSU3hMUVVGTFJTeEpRVWhTTzBGQlNVaERMR05CUVUwc1JVRkJSU3hMUVVGTFVEdEJRVXBXTEU5QlFWQTdRVUZOU0R0QlFXcERURHM3UVVGQlFUdEJRVUZCTEVrc1EwRnZRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTA4c1NVRkJUWFJOTEU5QlFXSTdRVUZCUVR0QlFVRkJPMEZCUTBrc2JVSkJRVms0VFN4RlFVRmFMRVZCUVdkQ1F5eFRRVUZvUWl4RlFVRXlRbkpPTEVsQlFUTkNMRVZCUVdsRGMwNHNaVUZCYWtNc1JVRkJhMFE3UVVGQlFUczdRVUZET1VNc1UwRkJTemxOTEVWQlFVd3NSMEZCVlRSTkxFVkJRVlk3UVVGRFFTeFRRVUZMUnl4VFFVRk1MRWRCUVdsQ1JpeFRRVUZxUWp0QlFVTkJMRk5CUVV0MlRTeEpRVUZNTEVkQlFWbGtMRWxCUVZvN1FVRkRRU3hUUVVGTGQwNHNZVUZCVEN4SFFVRnhRaXhGUVVGeVFqdEJRVU5CTEZOQlFVdGFMRXRCUVV3c1IwRkJZU3hGUVVGaUxFTkJURGhETEVOQlN6ZENPenRCUVVOcVFpeFRRVUZMWVN4aFFVRk1MRWRCUVhGQ0xFVkJRWEpDTEVOQlRqaERMRU5CVFhKQ096dEJRVU42UWl4VFFVRkxReXhuUWtGQlRDeEhRVUYzUWtvc1pVRkJlRUlzUTBGUU9FTXNRMEZQVERzN1FVRkRla01zVTBGQlMwc3NZVUZCVEN4SFFVRnhRaXhGUVVGeVFpeERRVkk0UXl4RFFWRnlRanRCUVVNMVFqczdRVUZXVER0QlFVRkJPMEZCUVVFc2MwTkJXWE5DTzBGQlEyUXNWVUZCUnl4RFFVRkRMRXRCUVVzM1RTeEpRVUZPTEVsQlFXTXNUMEZCVHl4TFFVRkxRU3hKUVVGTUxFTkJRVlU0VFN4UFFVRnFRaXhMUVVFMlFpeFhRVUU1UXl4RlFVRXlSRHRCUVVOMlJDeGxRVUZQZUUwc1dVRkJXU3hEUVVGRGEwd3NUMEZCY0VJN1FVRkRTRHM3UVVGRlJDeGhRVUZQTEV0QlFVdDRUQ3hKUVVGTUxFTkJRVlU0VFN4UFFVRldMRWRCUVc5Q2VFMHNXVUZCV1N4RFFVRkRSaXhQUVVGcVF5eEhRVUV5UTBVc1dVRkJXU3hEUVVGRGJVd3NUVUZCTDBRN1FVRkRTRHRCUVd4Q1REdEJRVUZCTzBGQlFVRXNLMEpCYjBKbE8wRkJRMUFzWVVGQlR5eExRVUZMZWt3c1NVRkJUQ3hEUVVGVkswMHNXVUZCVml4SFFVRjVRaXhMUVVGTEwwMHNTVUZCVEN4RFFVRlZLMDBzV1VGQmJrTXNSMEZCYTBRc1JVRkJla1E3UVVGRFNEdEJRWFJDVER0QlFVRkJPMEZCUVVFc2NVTkJkMEp4UWp0QlFVTmlMR0ZCUVU4c1MwRkJTeTlOTEVsQlFVd3NRMEZCVldkT0xGbEJRV3BDTzBGQlEwZzdRVUV4UWt3N1FVRkJRVHRCUVVGQkxIbERRVFpDU1R0QlFVTkpMRlZCUVVsRExFZEJRVWNzUjBGQlIwTXNTVUZCU1N4RFFVRkRSQ3hIUVVGTUxFVkJRVllzUTBGRVNpeERRVWRKT3p0QlFVTkJMRlZCUVVsRkxFZEJRVWNzUjBGQlJ5eExRVUZMVkN4aFFVRk1MRU5CUVcxQ1ZTeExRVUZ1UWl4RFFVRjVRaXhoUVVGNlFpeERRVUZXTzBGQlEwRXNWVUZCU1VNc1QwRkJUeXhIUVVGSExFbEJRVWxJTEVsQlFVb3NSVUZEVmp0QlFVTkJReXhUUVVGSExFTkJRVU1zUTBGQlJDeERRVVpQTEVWQlJVWkJMRWRCUVVjc1EwRkJReXhEUVVGRUxFTkJRVWdzUjBGQlV5eERRVVpRTEVWQlJWVkJMRWRCUVVjc1EwRkJReXhEUVVGRUxFTkJSbUlzUlVGSFZqdEJRVU5CUVN4VFFVRkhMRU5CUVVNc1EwRkJSQ3hEUVVwUExFVkJTVVpCTEVkQlFVY3NRMEZCUXl4RFFVRkVMRU5CU2tRc1JVRkpUVUVzUjBGQlJ5eERRVUZETEVOQlFVUXNRMEZLVkN4RlFVbGpRU3hIUVVGSExFTkJRVU1zUTBGQlJDeERRVXBxUWl4RlFVdGFSeXhQUVV4WkxFVkJRV1FzUTBGTVNpeERRVlZwUWpzN1FVRkZZaXhoUVVGUFJDeFBRVUZQTEVkQlFVZEtMRWRCUVdwQ08wRkJRMGdzUzBFeFEwd3NRMEUwUTBrN08wRkJOVU5LTzBGQlFVRTdRVUZCUVN3eVFrRnBSMWROTEV0QmFrZFlMRVZCYVVkclFqdEJRVU5XTEZWQlFVbE9MRWRCUVVjc1IwRkJSME1zU1VGQlNTeERRVUZEUkN4SFFVRk1MRVZCUVZZN1FVRkRRU3hWUVVGSlR5eFJRVUZSTEVkQlFVY3NTVUZCU1U0c1NVRkJTaXhIUVVGWFR5eHBRa0ZCV0N4TFFVRnBReXhGUVVGcVF5eEhRVUZ6UXl4SlFVRnlSRHRCUVVOQkxGVkJRVWxETEZsQlFWa3NSMEZCUnl4SlFVRkpVaXhKUVVGS0xFTkJRVk5FTEVkQlFVY3NSMEZCUjA4c1VVRkJUaXhIUVVGcFFrUXNTMEZCU3l4RFFVRkRlRUlzWlVGQmFFTXNRMEZCYmtJc1EwRklWU3hEUVV0V096dEJRVU5CTEZkQlFVdFhMR0ZCUVV3c1IwRkJjVUpuUWl4WlFVRlpMRU5CUVVORExGZEJRV0lzUjBGQk1rSkRMRXRCUVROQ0xFTkJRV2xETEVOQlFXcERMRVZCUVcxRExFTkJRVU1zUTBGQmNFTXNRMEZCY2tJN1FVRkRRU3hYUVVGTE9VSXNTMEZCVEN4SFFVRmhlVUlzUzBGQlN5eERRVUZEZWtJc1MwRkJia0k3UVVGRlFTeFZRVUZKSzBJc1VVRkJVU3hIUVVGSE8wRkJRMWczVFN4bFFVRlBMRVZCUVVVN1FVRkRUSE5NTEZsQlFVVXNSVUZCUlN4TFFVRkxOVTBzUlVGRVNqdEJRVVZNYjA4c1pVRkJTeXhGUVVGRkxFdEJRVXR5UWl4VFFVWlFPMEZCUjB4MlRpeGpRVUZKTEVWQlFVVXNTMEZCUzJNc1NVRklUanRCUVVsTUswNHNhMEpCUVZFc1JVRkJSU3hMUVVGTGNrSTdRVUZLVmp0QlFVUkZMRTlCUVdZN08wRkJVMEVzVlVGQlNTeERRVUZETEV0QlFVdEZMR2RDUVVGV0xFVkJRVFJDTzBGQlEzaENPMEZCUTBGcFFpeG5Ra0ZCVVN4RFFVRkROMDBzVDBGQlZDeERRVUZwUW5GTUxFMUJRV3BDTEVkQlFUQkNMRXRCUVV0UUxFdEJRUzlDTzBGQlEwZzdPMEZCUTBRc1YwRkJTMlVzWVVGQlRDeEhRVUZ4UW0xQ0xFbEJRVWtzUTBGQlEwTXNVMEZCVEN4RFFVRmxTaXhSUVVGbUxFTkJRWEpDT3p0QlFVVkJMRlZCUVVrc1EwRkJReXhMUVVGTGFrSXNaMEpCUVZZc1JVRkJORUk3UVVGRGVFSXNaVUZCVHl4TFFVRkxReXhoUVVGYU8wRkJRMGc3TzBGQlJVUXNWVUZCU1hGQ0xFMUJRVTBzUjBGQlIyeE1MRGhEUVVGTkxFTkJRVU50VEN4VlFVRlFMRU5CUVd0Q1dpeExRVUZMTEVOQlFVTnNSeXhQUVVGT0xFTkJRV05GTEUxQlFXaERMRVZCUVhkRExFdEJRVXR6Uml4aFFVRTNReXhEUVVGaU8wRkJRMEVzVlVGQlNYVkNMRTlCUVU4c1IwRkJSM0JNTERoRFFVRk5MRU5CUVVOeFRDeGhRVUZRTEVOQlFYRkNaQ3hMUVVGTExFTkJRVU5zUnl4UFFVRk9MRU5CUVdOSExFOUJRVzVETEVWQlFUUkRNRWNzVFVGQk5VTXNRMEZCWkR0QlFVTkJMRlZCUVVsSkxHMUNRVUZ0UWl4SFFVRkhPMEZCUVVOeVF5eFhRVUZITEVWQlFVVnBReXhOUVVGT08wRkJRV05vUXl4WlFVRkpMRVZCUVVWclF5eFBRVUZQTEVOQlFVTnlTQ3hYUVVGU0xFVkJRWEJDTzBGQlFUSkRjMFlzWTBGQlRTeEZRVUZGYTBJc1MwRkJTeXhEUVVGRGVrSTdRVUZCZWtRc1QwRkJNVUk3UVVGRlFTeGhRVUZQYTBNc1NVRkJTU3hEUVVGRFF5eFRRVUZNTEVOQlFXVkxMRzFDUVVGbUxFTkJRVkE3UVVGRFNEdEJRV3hKVER0QlFVRkJPMEZCUVVFc2EwTkJOa041UWtNc1VVRTNRM3BDTEVWQk5rTnRRenRCUVVNelFpeFZRVUZIUVN4UlFVRlJMRU5CUVVORExFMUJRVlFzUzBGQmIwSXNRMEZCZGtJc1JVRkJNRUlzVDBGQlR5eEpRVUZRTzBGQlJURkNMR0ZCUVU4c1NVRkJTWFJDTEVsQlFVb3NWMEZCV1hGQ0xGRkJRVkVzUTBGQlEwVXNUVUZCVkN4RFFVRm5RaXhEUVVGb1FpeEZRVUZyUWl4RFFVRnNRaXhEUVVGYUxHTkJRVzlEUml4UlFVRlJMRU5CUVVORkxFMUJRVlFzUTBGQlowSXNRMEZCYUVJc1JVRkJhMElzUTBGQmJFSXNRMEZCY0VNc1kwRkJORVJHTEZGQlFWRXNRMEZCUTBVc1RVRkJWQ3hEUVVGblFpeERRVUZvUWl4RlFVRnJRaXhEUVVGc1FpeERRVUUxUkN4RlFVRlFPMEZCUTBnc1MwRnFSRXdzUTBGdFJFazdPMEZCYmtSS08wRkJRVUU3UVVGQlFTeDVRMEZ2UkdkRFF5eEpRWEJFYUVNc1JVRnZSSE5EUXl4SlFYQkVkRU1zUlVGdlJEUkRPMEZCUTNCRExHRkJRVThzU1VGQlNYcENMRWxCUVVvc1YwRkJXWGRDTEVsQlFVa3NRMEZCUTBRc1RVRkJUQ3hEUVVGWkxFTkJRVm9zUlVGQll5eERRVUZrTEVOQlFWb3NZMEZCWjBORExFbEJRVWtzUTBGQlEwUXNUVUZCVEN4RFFVRlpMRU5CUVZvc1JVRkJZeXhEUVVGa0xFTkJRV2hETEdOQlFXOUVReXhKUVVGSkxFTkJRVU5FTEUxQlFVd3NRMEZCV1N4RFFVRmFMRVZCUVdNc1EwRkJaQ3hEUVVGd1JDeGpRVUYzUlVVc1NVRkJlRVVzUlVGQlVEdEJRVU5JTzBGQmRFUk1PMEZCUVVFN1FVRkJRU3cyUWtGM1JHOUNReXhQUVhoRWNFSXNSVUYzUkRaQ2FFUXNUMEY0UkRkQ0xFVkJkMFJ6UXp0QlFVTTVRaXhWUVVGSmFVUXNSMEZCUnl4SFFVRkhZaXhKUVVGSkxFTkJRVU5qTEV0QlFVd3NRMEZCVjBZc1QwRkJXQ3hEUVVGV096dEJRVVZCTEZWQlFVZERMRWRCUVVjc1EwRkJRemRPTEU5QlFVb3NTVUZCWlN4SlFVRnNRaXhGUVVGM1FqdEJRVU53UWl4WlFVRkpRU3hQUVVGUExFZEJRVWNzU1VGQlNYaENMRTlCUVVvc1EwRkJXWEZRTEVkQlFVY3NRMEZCUXpkT0xFOUJRVW9zUTBGQldYTk1MRVZCUVhoQ0xFVkJRVFJDZFVNc1IwRkJSeXhEUVVGRE4wNHNUMEZCU2l4RFFVRlpPRTBzUzBGQmVFTXNSVUZCSzBObExFZEJRVWNzUTBGQlF6ZE9MRTlCUVVvc1EwRkJXVGxDTEVsQlFUTkVMRVZCUVdsRkxFdEJRV3BGTEVOQlFXUTdRVUZEUVRoQ0xHVkJRVThzUTBGQlF6Wk1MR0ZCUVZJc1IwRkJkMElyUWl4UFFVRjRRanRCUVVOQkxHVkJRVTgxVGl4UFFVRlFPMEZCUTBnN08wRkJSVVFzVlVGQlNUUkxMRTlCUVU4c1NVRkJTU3hKUVVGbUxFVkJRMEU3UVVGRFNUdEJRVU5CTzBGQlEwRXNaVUZCVHl4SlFVRkpjRTBzVDBGQlNpeERRVUZaTEZOQlFWb3NSVUZCZFVJc1YwRkJka0lzUlVGQmIwTXNTVUZCY0VNc1JVRkJNRU1zUzBGQk1VTXNRMEZCVUR0QlFVTklMRTlCWkRaQ0xFTkJaMEk1UWpzN08wRkJRMEVzVlVGQlNYVlFMRWRCUVVjc1IwRkJSeTlNTERoRFFVRk5MRU5CUVVOeFRDeGhRVUZRTEVOQlFYRkNla01zVDBGQlR5eERRVUZEY0VVc1QwRkJOMElzUlVGQmMwTnhTQ3hIUVVGSExFTkJRVU0xUXl4SFFVRXhReXhEUVVGV096dEJRVU5CTEZWQlFVazRReXhIUVVGSExFTkJRVU5vU1N4WFFVRktMRTFCUVhGQ09FZ3NSMEZCUnl4RFFVRkRNME1zU1VGQk4wSXNSVUZCYlVNN1FVRkRMMElzWlVGQlR5eEpRVUZKTVUwc1QwRkJTaXhEUVVGWkxFZEJRVm9zUlVGQmFVSkhMRTFCUVUwc1EwRkJReXRMTEc5Q1FVRjRRaXhGUVVFNFF5eEpRVUU1UXl4RlFVRnZSQ3hMUVVGd1JDeERRVUZRTzBGQlEwZzdPMEZCUlVRc1ZVRkJTWE5GTEdGQlFXRXNSMEZCUjJoTkxEaERRVUZOTEVOQlFVTnBUU3hWUVVGUUxFTkJRV3RDY2tRc1QwRkJUeXhEUVVGRGNrVXNUVUZCTVVJc1JVRkJhME56U0N4SFFVRkhMRU5CUVVNMVF5eEhRVUYwUXl4RFFVRndRanM3UVVGRlFTeFZRVUZKTzBGQlEwRXNXVUZCU1dsRUxGbEJRVmtzUjBGQlIyeENMRWxCUVVrc1EwRkJRMk1zUzBGQlRDeERRVUZYUlN4aFFVRllMRU5CUVc1Q096dEJRVVZCTEZsQlFVbG9UeXhSUVVGUExFZEJRVWNzU1VGQlNYaENMRTlCUVVvc1EwRkJXVEJRTEZsQlFWa3NRMEZCUTJ4UExFOUJRV0lzUTBGQmNVSnpUQ3hGUVVGcVF5eEZRVUZ4UXpSRExGbEJRVmtzUTBGQlEyeFBMRTlCUVdJc1EwRkJjVUk0VFN4TFFVRXhSQ3hGUVVGcFJXOUNMRmxCUVZrc1EwRkJRMnhQTEU5QlFXSXNRMEZCY1VJNVFpeEpRVUYwUml4RlFVRTBSaXhKUVVFMVJpeERRVUZrT3p0QlFVVkJPRUlzWjBKQlFVOHNRMEZCUXpCTUxHRkJRVklzUjBGQmQwSjNReXhaUVVGWkxFTkJRVU5zVHl4UFFVRmlMRU5CUVhGQ0swMHNVVUZCTjBNN1FVRkRRUzlOTEdkQ1FVRlBMRU5CUVVNNFN5eExRVUZTTEVkQlFXZENiMFFzV1VGQldTeERRVUZEYkU4c1QwRkJZaXhEUVVGeFFuRk1MRTFCUVhKRE8wRkJRMEZ5VEN4blFrRkJUeXhEUVVGRGJVOHNXVUZCVWl4SFFVRjFRazRzUjBGQlJ5eERRVUZETTBNc1NVRkJNMEk3UVVGRFFXeE1MR2RDUVVGUExFTkJRVU0yVEN4aFFVRlNMRWRCUVhkQ2JVTXNZVUZCZUVJN1FVRkZRU3hsUVVGUGFFOHNVVUZCVUR0QlFVVklMRTlCV2tRc1EwRlpSU3hQUVVGTmIwOHNRMEZCVGl4RlFVRlRPMEZCUTFBc1pVRkJUeXhKUVVGSk5WQXNUMEZCU2l4RFFVRlpMRk5CUVZvc1JVRkJkVUlzWVVGQmRrSXNSVUZCYzBNN1FVRkJReXhwUWtGQlQzZFFPMEZCUVZJc1UwRkJkRU1zUlVGQk9FUXNTMEZCT1VRc1EwRkJVRHRCUVVOSU8wRkJRMG83UVVFdlJrdzdPMEZCUVVFN1FVRkJRU3hKT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGVFbEJPME5CUjBFN1FVRkRRVHRCUVVOQk96dEJRVU5QTEVsQlFVMTBSeXhYUVVGaU8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUVzWjBOQlEyZENPMEZCUTFJc1ZVRkJTWGhLTEVsQlFVa3NSMEZCUnp0QlFVRkRkVVVzWlVGQlR5eEZRVUZGTzBGQlFWWXNUMEZCV0R0QlFVTkJMR0ZCUVU4c1NVRkJTV3BGTEdsRVFVRktMRU5CUVZsRExHZEZRVUZsTEVOQlFVTkRMRVZCUVdoQ0xFTkJRVzFDTEVsQlFXNUNMRU5CUVZvc1JVRkJjME5ETEdkRVFVRk5MRU5CUVVNclNTeFhRVUUzUXl4RlFVRXdSSGhLTEVsQlFURkVMRVZCUVdkRkxFdEJRV2hGTEVOQlFWQTdRVUZEU0R0QlFVcE1PenRCUVVGQk8wRkJRVUVzU1N4RFFVOUJPenRCUVVOUExFbEJRVTE1U2l4VlFVRmlMRWRCUTBrc2IwSkJRVms1U1N4RFFVRmFMRVZCUVdVN1FVRkJRVHM3UVVGRFdDeFBRVUZMUlN4VFFVRk1MRWRCUVdsQ1JpeERRVUZETEVOQlFVTklMRVZCUVc1Q08wRkJRMEVzVDBGQlN6SlFMRWxCUVV3c1IwRkJXWGhRTEVOQlFVTXNRMEZCUTBjc1NVRkJSaXhEUVVGUGFVMHNSMEZCVUN4RFFVRlhjVVFzUTBGQmRrSTdRVUZEUVN4UFFVRkxReXhMUVVGTUxFZEJRV0V4VUN4RFFVRkRMRU5CUVVOSExFbEJRVVlzUTBGQlQydE5MRWxCUVZBc1EwRkJXVzlFTEVOQlFYcENPMEZCUTBnc1EwRk1UQ3hETEVOQlVVRTdPMEZCUTA4c1NVRkJUVEZITEZkQlFXSTdRVUZCUVR0QlFVRkJPMEZCUTBrc2RVSkJRVmswUnl4VFFVRmFMRVZCUVhWQ1F5eEpRVUYyUWl4RlFVRTJRa01zUzBGQk4wSXNSVUZCYjBNN1FVRkJRVHM3UVVGRGFFTXNVMEZCU3pOUUxGTkJRVXdzUjBGQmFVSjVVQ3hUUVVGcVFqdEJRVU5CTEZOQlFVdERMRWxCUVV3c1IwRkJXVUVzU1VGQldqdEJRVU5CTEZOQlFVdERMRXRCUVV3c1IwRkJZVUVzUzBGQllqdEJRVU5JT3p0QlFVeE1PMEZCUVVFN1FVRkJRU3huUTBGUFowSTdRVUZEVWl4VlFVRkplRkVzU1VGQlNTeEhRVUZITzBGQlExQXJUU3hYUVVGSExFVkJRVVU3UVVGRFJEQkVMRmRCUVVNc1JVRkJSU3hMUVVGTFJqdEJRVVJRTEZOQlJFVTdRVUZKVUhaRUxGbEJRVWtzUlVGQlJUdEJRVU5HZVVRc1YwRkJReXhGUVVGRkxFdEJRVXRFTzBGQlJFNDdRVUZLUXl4UFFVRllPMEZCVTBFc1lVRkJUeXhKUVVGSmJGRXNhVVJCUVVvc1EwRkJXU3hMUVVGTFR5eFRRVUZxUWl4RlFVRTBRa29zWjBSQlFVMHNRMEZCUTJsS0xGZEJRVzVETEVWQlFXZEVNVW9zU1VGQmFFUXNSVUZCYzBRc1MwRkJkRVFzUTBGQlVEdEJRVU5JTzBGQmJFSk1PenRCUVVGQk8wRkJRVUVzU1N4RFFYRkNRVHM3UVVGRFR5eEpRVUZOTWtvc1VVRkJZaXhIUVVOSkxHdENRVUZaYUVvc1EwRkJXaXhGUVVGbE8wRkJRVUU3TzBGQlExZ3NUMEZCU3l0UUxHZENRVUZNTEVkQlFYZENMMUFzUTBGQlF5eERRVUZEYzFBc1dVRkJSaXhEUVVGbFZTeFRRVUZtTEVOQlFYbENMRU5CUVhwQ0xFVkJRVEpDTEVOQlFUTkNMRU5CUVhoQ08wRkJRMGdzUTBGSVRDeERMRU5CVFVFN08wRkJRMDhzU1VGQlRTOUhMRmxCUVdJc1IwRkRTU3h6UWtGQldXcEtMRU5CUVZvc1JVRkJaVHRCUVVGQk96dEJRVU5ZTEU5QlFVdFBMRTlCUVV3c1IwRkJaVkFzUTBGQlF5eERRVUZEUnl4SlFVRkdMRU5CUVU4NFRTeFBRVUYwUWp0QlFVTklMRU5CU0V3c1F5eERRVTFCT3p0QlFVTlBMRWxCUVUxblJDeHhRa0ZCWWl4SFFVTkpMQ3RDUVVGWmJFVXNUMEZCV2l4RlFVRnhRbTFGTEZkQlFYSkNMRVZCUVd0RE8wRkJRVUU3TzBGQlF6bENMRTlCUVVzeFNTeFBRVUZNTEVkQlFXVjFSU3hQUVVGbU8wRkJRMEVzVDBGQlMyaEVMRmRCUVV3c1IwRkJiVUp0U0N4WFFVRnVRanRCUVVOSUxFTkJTa3c3UVVGUFR5eEpRVUZOUXl4bFFVRmlPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFc1owTkJSMGs3UVVGRFNTeGhRVUZQTEVsQlFVbDRVU3hwUkVGQlNpeERRVUZaUXl4blJVRkJaU3hEUVVGRFF5eEZRVUZvUWl4RFFVRnRRaXhSUVVGdVFpeERRVUZhTEVWQlFUQkRReXhuUkVGQlRTeERRVUZEYjBvc1kwRkJha1FzUlVGQmFVVXNTVUZCYWtVc1JVRkJkVVVzU1VGQmRrVXNRMEZCVUR0QlFVTklPMEZCVEV3N08wRkJRVUU3UVVGQlFTeEpPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU5zUlVFN1FVRkRRVHRCUVVOQk8wTkJSMEU3TzBGQlEwOHNTVUZCVFd0SUxGTkJRVk1zUjBGQlJ5eERRVUZzUWl4RExFTkJSVkE3TzBGQlEwOHNTVUZCVFVNc2NVSkJRWEZDTEVkQlFVY3NhMmRDUVVFNVFpeERMRU5CUlZBN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwOHNTVUZCVFVNc1lVRkJZanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRkJRVHRCUVZOSk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZpU2l4clJFRmphME5ETEZWQlpHeERMRVZCWXpoRE8wRkJRM1JETEZWQlFVbERMRmxCUVZrc1IwRkJSeXhMUVVGTFF5dzRRa0ZCVEN4RFFVRnZRMFlzVlVGQlZTeERRVUZEWml4SlFVRXZReXhEUVVGdVFqczdRVUZEUVN4VlFVRkpTU3hKUVVGSkxFZEJRVWRaTEZsQlFWa3NRMEZCUTBVc1YwRkJlRUk3UVVGRFFTeFZRVUZKUXl4SlFVRkpMRWRCUVVkSUxGbEJRVmtzUTBGQlEwa3NaVUZCZUVJN08wRkJSVUVzVlVGQlNVTXNZVUZCWVN4SFFVRkhMRXRCUVV0S0xEaENRVUZNTEVOQlFXOURSaXhWUVVGVkxFTkJRVU5pTEV0QlFTOURMRU5CUVhCQ096dEJRVU5CTEZWQlFVbEhMRXRCUVVzc1IwRkJSMmRDTEdGQlFXRXNRMEZCUTBnc1YwRkJNVUk3UVVGRFFTeFZRVUZKU1N4TFFVRkxMRWRCUVVkRUxHRkJRV0VzUTBGQlEwUXNaVUZCTVVJN1FVRkZRU3hWUVVGSk4wVXNUMEZCVHl4SFFVRkhMRWxCUVVsMlJTeG5SRUZCU2l4RFFVRlpiVW9zU1VGQldpeEZRVUZyUWtjc1MwRkJiRUlzUTBGQlpEdEJRVU5CTEZWQlFVbGFMRmRCUVZjc1IwRkJSeXhKUVVGSmJrZ3NiMFJCUVVvc1EwRkJaMEozU0N4VlFVRlZMRU5CUVVOeVVTeFRRVUV6UWl4RlFVRnpRekJRTEVsQlFYUkRMRVZCUVRSRFF5eExRVUUxUXl4RFFVRnNRanRCUVVWQkxHRkJRVThzU1VGQlNVa3NPRVJCUVVvc1EwRkJNRUpzUlN4UFFVRXhRaXhGUVVGdFEyMUZMRmRCUVc1RExFTkJRVkE3UVVGRFNDeExRVE5DVEN4RFFUWkNTVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCYkVOS08wRkJRVUU3UVVGQlFTeHRSRUZ0UTIxRGNrb3NZMEZ1UTI1RExFVkJiVU50UkR0QlFVVXpReXhWUVVGSmEwc3NZVUZCWVN4SFFVRkhMRWxCUVVrelRDdzBSRUZCU2l4RlFVRndRanRCUVVOQkxGVkJRVWswVEN4WFFVRlhMRWRCUVVkRUxHRkJRV0VzUTBGQlEwVXNaMEpCUVdRc1EwRkJLMEphTEhGQ1FVRXZRaXhEUVVGc1FqdEJRVU5CTEZWQlFVbGhMRlZCUVZVc1IwRkJSMGdzWVVGQllTeERRVUZEU1N4VFFVRmtMRU5CUVhkQ1pDeHhRa0ZCZUVJc1JVRkJLME5FTEZOQlFTOURMRVZCUVRCRVdTeFhRVUV4UkN4RFFVRnFRanRCUVVOQkxGVkJRVWxKTEZGQlFWRXNSMEZCUjB3c1lVRkJZU3hEUVVGRFRTeE5RVUZrTEVOQlFYRkNhRUlzY1VKQlFYSkNMRVZCUVRSRGVFb3NZMEZCTlVNc1JVRkJORVJ0U3l4WFFVRTFSQ3hEUVVGbU8wRkJSVUVzVlVGQlNYWkxMRTFCUVUwc1IwRkJSeXhMUVVGTE5rc3NiVUpCUVV3c1EwRkJlVUpHTEZGQlFYcENMRU5CUVdJN1FVRkZRU3hoUVVGUExFbEJRVWxITEd0Q1FVRktMRU5CUVhWQ1RDeFZRVUYyUWl4RlFVRnRRM3BMTEUxQlFXNURMRU5CUVZBN1FVRkRTQ3hMUVRkRFRDeERRU3REU1R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZ5UkVvN1FVRkJRVHRCUVVGQkxIZERRWE5FZDBKQkxFMUJkRVI0UWl4RlFYVkVTVHRCUVVOSk8wRkJRMEVzVlVGQlNVRXNUVUZCVFN4RFFVRkRhMGtzVFVGQlVDeEhRVUZuUWl4RFFVRm9RaXhMUVVGelFpeERRVUV4UWl4RlFVRTBRanRCUVVONFFteEpMR05CUVUwc1IwRkJSeXhOUVVGTlFTeE5RVUZtTzBGQlEwZzdPMEZCUlVSQkxGbEJRVTBzUjBGQlIwRXNUVUZCVFN4RFFVRkRLMHNzVVVGQlVDeERRVUZuUWl4SFFVRm9RaXhGUVVGeFFpeEhRVUZ5UWl4RFFVRlVMRU5CVGtvc1EwRlJTVHM3UVVGRFFTeGhRVUZQY2s4c09FTkJRVTBzUTBGQlEzTkZMRmxCUVZBc1EwRkJiMEpvUWl4TlFVRndRaXhEUVVGUU8wRkJRMGc3UVVGcVJVdzdRVUZCUVR0QlFVTkpPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJTa29zY1VOQlN6UkNPMEZCUTNCQ0xHRkJRVThzU1VGQlNXOURMRzlFUVVGS0xFVkJRVkE3UVVGRFNEdEJRVkJNT3p0QlFVRkJPMEZCUVVFc1NTeERRVzlGUVR0QlFVTkJPMEZCUTBFN08wRkJRMDhzU1VGQlRUQkpMR3RDUVVGaUxFZEJRMGtzTkVKQlFWbEZMRmRCUVZvc1JVRkJlVUpETEdWQlFYcENMRVZCUVRCRE8wRkJRVUU3TzBGQlEzUkRMRTlCUVV0b1FpeFhRVUZNTEVkQlFXMUNaU3hYUVVGdVFqdEJRVU5CTEU5QlFVdGlMR1ZCUVV3c1IwRkJkVUpqTEdWQlFYWkNPMEZCUTBnc1EwRktUQ3hET3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTjBSa0U3UTBGSFFUdEJRVU5CTzBGQlEwRTdPMEZCUTA4c1NVRkJUVU1zYTBKQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc1owTkJRV003UVVGQlFUczdRVUZEVmp0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGTFF5eE5RVUZNTEVkQlFXTXNTVUZCWkN4RFFVcFZMRU5CVFZZN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNVMEZCUzBNc1RVRkJUQ3hIUVVGakxFbEJRV1FzUTBGV1ZTeERRVmxXTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJRMEVzVTBGQlMwTXNUMEZCVEN4SFFVRmxMRWxCUVdZN1FVRkZRU3hUUVVGTFF5eFZRVUZNTEVkQlFXdENMRWxCUVd4Q0xFTkJia0pWTEVOQmNVSldPMEZCUTBFN1FVRkRRVHM3UVVGRFFTeFRRVUZMUXl4WFFVRk1MRWRCUVcxQ0xFTkJRVzVDTEVOQmVFSlZMRU5CTUVKV08wRkJRMEU3UVVGRFFUczdRVUZEUVN4VFFVRkxReXhwUWtGQlRDeEhRVUY1UWl4RFFVRjZRaXhEUVRkQ1ZTeERRU3RDVmp0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVU5CTEZOQlFVdERMRkZCUVV3c1IwRkJaMElzUlVGQmFFSTdRVUZEU0RzN1FVRjJRMHc3UVVGQlFUdEJRVUZCTERSRFFUQkRTVHRCUVVOSkxGVkJRVWtzUTBGQlF5eExRVUZMUVN4UlFVRldMRVZCUTBFN1FVRkRTU3hsUVVGUExFVkJRVkE3UVVGRFNEczdRVUZGUkN4VlFVRkpReXhyUWtGQmEwSXNSMEZCUnl4RlFVRjZRanRCUVVOQkxGVkJRVWxETEdGQlFXRXNSMEZCUjJwRkxFbEJRVWtzUTBGQlEyTXNTMEZCVEN4RFFVRlhMRXRCUVV0cFJDeFJRVUZvUWl4RFFVRndRanRCUVVWQkxHRkJRVTlGTEdGQlFXRXNRMEZCUTBNc1IwRkJaQ3hEUVVGclFpeFZRVUZEUXl4SlFVRkVMRVZCUVZVN1FVRkRMMElzWlVGQlR5eEpRVUZKUXl4dFFrRkJTaXhEUVVGM1FrUXNTVUZCU1N4RFFVRkRSU3haUVVFM1FpeEZRVUV5UTBZc1NVRkJTU3hEUVVGRFJ5eGxRVUZvUkN4RFFVRlFPMEZCUTBnc1QwRkdUU3hEUVVGUU8wRkJSMGc3UVVGMFJFdzdRVUZCUVR0QlFVRkJMRGhDUVd0RlkwTXNVMEZzUldRc1JVRnRSVWs3UVVGRFNTeFZRVUZKY2xRc1NVRkJTU3hIUVVGSE8wRkJRMUFzYlVKQlFWY3NTMEZCUzNWVExFMUJRVXdzU1VGQllXVXNiVUpCUVcxQ0xFTkJRVU5ETzBGQlJISkRMRTlCUVZnN1FVRkpRU3hWUVVGSkxFdEJRVXRtTEUxQlFWUXNSVUZCYVVKNFV5eEpRVUZKTEVOQlFVTjNWQ3hQUVVGTUxFZEJRV1VzUzBGQlMyaENMRTFCUVhCQ08wRkJRMnBDTEZWQlFVa3NTMEZCUzBNc1QwRkJWQ3hGUVVGclFucFRMRWxCUVVrc1EwRkJRM2xVTEZGQlFVd3NSMEZCWjBJc1MwRkJTMmhDTEU5QlFYSkNPenRCUVVWc1FpeFZRVUZKTEV0QlFVdEdMRTFCUVV3c1NVRkJaV1VzYlVKQlFXMUNMRU5CUVVORExFOUJRWFpETEVWQlEwRTdRVUZEU1haVUxGbEJRVWtzUTBGQlF6QlVMR2xDUVVGTUxFZEJRWGxDTEV0QlFVdG1MRmRCUVRsQ08wRkJRMEV6VXl4WlFVRkpMRU5CUVVNeVZDeDFRa0ZCVEN4SFFVRXJRaXhMUVVGTFppeHBRa0ZCY0VNN1FVRkRRVFZUTEZsQlFVa3NRMEZCUXpSVUxHOUNRVUZNTEVkQlFUUkNMRXRCUVV0RExIRkNRVUZNTEVWQlFUVkNPMEZCUTBnc1QwRk1SQ3hOUVU5Qk8wRkJRMGszVkN4WlFVRkpMRU5CUVVNMlRpeFpRVUZNTEVkQlFXOUNMRXRCUVVzd1JTeE5RVUZNTEVOQlFWbG9UQ3hSUVVGYUxFVkJRWEJDTzBGQlEwRjJTQ3haUVVGSkxFTkJRVU00VGl4WlFVRk1MRWRCUVc5Q0xFdEJRVXQ1UlN4TlFVRk1MRU5CUVZsb1RDeFJRVUZhTEVWQlFYQkNPMEZCUTBnN08wRkJSVVFzWVVGQlR5eEpRVUZKYWtnc2FVUkJRVW9zUTBGQldTdFRMRk5CUVZvc1JVRkJkVUkxVXl4blJFRkJUU3hEUVVGRGJVd3NjVUpCUVRsQ0xFVkJRWEZFTlV3c1NVRkJja1FzUlVGQk1rUXNTVUZCTTBRc1EwRkJVRHRCUVVOSU8wRkJlRVpNTzBGQlFVRTdRVUZCUVN3clFrRjNSSE5DT0ZRc1JVRjRSSFJDTEVWQmVVUkpPMEZCUTBrc1ZVRkJTVUVzUlVGQlJTeERRVUZEZUVVc1RVRkJTQ3hIUVVGWkxFTkJRV2hDTEVWQlEwRTdRVUZEU1N4bFFVRlBMRVZCUVZBN1FVRkRTRHM3UVVGRlJDeGhRVUZQVWl4SlFVRkpMRU5CUVVORExGTkJRVXdzUTBGQlpTdEZMRVZCUVdZc1EwRkJVRHRCUVVOSU8wRkJhRVZNT3p0QlFVRkJPMEZCUVVFN1FVRXlSazhzU1VGQlRWSXNiVUpCUVcxQ0xFZEJRMmhETzBGQlEwbERMRk5CUVU4c1JVRkJSU3hUUVVSaU8wRkJSVWxSTEd0Q1FVRm5RaXhGUVVGRkxHdENRVVowUWp0QlFVZEpReXhwUWtGQlpTeEZRVUZGTEdsQ1FVaHlRanRCUVVsSlF5eHhRa0ZCYlVJc1JVRkJSVHRCUVVwNlFpeERRVVJQTzBGQlVVRXNTVUZCVFVNc1YwRkJWeXhIUVVONFFqdEJRVU5KUXl4TlFVRkpMRVZCUVVVc1RVRkVWanRCUVVWSlF5eE5RVUZKTEVWQlFVVTdRVUZHVml4RFFVUlBPMEZCVFVFc1NVRkJUVU1zVjBGQllpeEhRVVZKTEhGQ1FVRlpNVlFzUTBGQldpeEZRVU5CTzBGQlFVRTdPMEZCUTBrc1QwRkJTekpVTEdWQlFVd3NSMEZCZFVJelZDeERRVUYyUWp0QlFVTkJMRTlCUVVzMlVpeE5RVUZNTEVkQlFXTXNTMEZCU3poQ0xHVkJRVXdzUTBGQmNVSjRWQ3hKUVVGeVFpeERRVUV3UWl4VFFVRXhRaXhEUVVGa08wRkJRMEVzVDBGQlN6SlNMRTlCUVV3c1IwRkJaU3hMUVVGTE5rSXNaVUZCVEN4RFFVRnhRbmhVTEVsQlFYSkNMRU5CUVRCQ0xGVkJRVEZDTEVOQlFXWTdRVUZEUVN4UFFVRkxORklzVlVGQlRDeEhRVUZyUWl4TFFVRkxORUlzWlVGQlRDeERRVUZ4UW5oVUxFbEJRWEpDTEVOQlFUQkNMR0ZCUVRGQ0xFTkJRV3hDTzBGQlEwRXNUMEZCUzNsVUxHdENRVUZNTEVkQlFUQkNMRWxCUVRGQ08wRkJSVUVzVFVGQlNVTXNSVUZCUlN4SFFVRkhMRXRCUVV0R0xHVkJRVXdzUTBGQmNVSjRWQ3hKUVVGeVFpeERRVUV3UWl4alFVRXhRaXhEUVVGVU8wRkJRMEVzVDBGQlMyOVVMRmRCUVV3c1IwRkJiVUpOTEVWQlFXNUNMRU5CVWtvc1EwRlZTVHM3UVVGRFFTeE5RVUZKUXl4WFFVRlhMRWRCUVVjc1NVRkJTVzVWTEdsRVFVRktMRU5CUVZsTExFTkJRVU1zUTBGQlEwZ3NSVUZCWkN4RlFVRnJRaXhwUWtGQmJFSXNSVUZCY1VOSExFTkJRVU1zUTBGQlEwY3NTVUZCUml4RFFVRlBMR2xDUVVGUUxFTkJRWEpETEVWQlFXZEZMRXRCUVdoRkxFTkJRV3hDTzBGQlEwRXNUMEZCUzNGS0xHZENRVUZNTEVkQlFYZENMRWxCUVVsQkxEQkVRVUZLTEVOQlFYRkNjMHNzVjBGQmNrSXNRMEZCZUVJN1FVRkZRU3hQUVVGTFF5eGpRVUZNTEVkQlFYTkNMRXRCUVV0MlN5eG5Ra0ZCVEN4RFFVRnpRbmRMTEdsQ1FVRjBRaXhGUVVGMFFqdEJRVU5CTEU5QlFVdERMRk5CUVV3c1IwRkJhVUlzUzBGQlMzcExMR2RDUVVGTUxFTkJRWE5DTUVzc1dVRkJkRUlzUlVGQmFrSTdRVUZEUVN4UFFVRkxiRllzWlVGQlRDeEhRVUYxUWl4TFFVRkxkMHNzWjBKQlFVd3NRMEZCYzBJeVN5eHJRa0ZCZEVJc1JVRkJka0k3UVVGRFNDeERRWEJDVER0QlFYVkNUeXhKUVVGTk5VSXNiVUpCUVdJN1FVRkJRVHRCUVVGQk8wRkJSVWtzSzBKQlFWazJRaXhYUVVGYUxFVkJRWGxDUXl4alFVRjZRaXhGUVVOQk8wRkJRVUU3TzBGQlEwa3NVMEZCUzJRc1YwRkJUQ3hIUVVGdFFtRXNWMEZCYmtJN1FVRkRRU3hUUVVGTFJTeGpRVUZNTEVkQlFYTkNSQ3hqUVVGMFFqdEJRVU5JT3p0QlFVNU1PMEZCUVVFN1FVRkJRU3cyUWtGUllUdEJRVU5NTEdGQlFVODdRVUZEU0RkQ0xHOUNRVUZaTEVWQlFVVXNTMEZCUzJVc1YwRkVhRUk3UVVGRlNHUXNkVUpCUVdVc1JVRkJSU3hMUVVGTE5rSTdRVUZHYmtJc1QwRkJVRHRCUVVsSU8wRkJZa3c3UVVGQlFUdEJRVUZCTEhWRFFXZENTVHRCUVVOSkxHRkJRVThzUzBGQlMwRXNZMEZCVEN4RFFVRnZRaXhwUWtGQmNFSXNRMEZCVUR0QlFVTklPMEZCYkVKTU96dEJRVUZCTzBGQlFVRTdRVUZ4UWs4c1NVRkJUVU1zWjBKQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc09FSkJRV003UVVGQlFUczdRVUZEVml4VFFVRkxReXhwUWtGQlRDeEhRVUY1UWl4TFFVRjZRanRCUVVOQkxGTkJRVXRETEdsQ1FVRk1MRWRCUVhsQ0xFdEJRWHBDTzBGQlEwRXNVMEZCUzBNc2IwSkJRVXdzUjBGQk5FSXNTMEZCTlVJN1FVRkRRU3hUUVVGTFF5eHBRa0ZCVEN4SFFVRjVRaXhMUVVGNlFqdEJRVU5CTEZOQlFVdERMSEZDUVVGTUxFZEJRVFpDTEV0QlFUZENPMEZCUlVFc1UwRkJTME1zWTBGQlRDeEhRVUZ6UWl4TFFVRjBRanRCUVVWQkxGTkJRVXRETEc5Q1FVRk1MRWRCUVRSQ0xFdEJRVFZDTzBGQlJVRXNVMEZCUzBNc1kwRkJUQ3hIUVVGelFpeEZRVUYwUWp0QlFVTkJMRk5CUVV0RExHVkJRVXdzUjBGQmRVSXNSVUZCZGtJN1FVRkRRU3hUUVVGTFF5eFpRVUZNTEVkQlFXOUNMRVZCUVhCQ0xFTkJZbFVzUTBGbFZqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVORUxGTkJRVXRETEd0Q1FVRk1MRWRCUVRCQ0xFVkJRVEZDTzBGQlEwWTdPMEZCZGtKTU8wRkJRVUU3UVVGQlFTdzRRa0Y1UW1ONFF5eFRRWHBDWkN4RlFUQkNTVHRCUVVOSkxGVkJRVWx5VkN4SlFVRkpMRWRCUVVjN1FVRkRVQ3huUTBGQmQwSXNTMEZCUzIxV0xHbENRVVIwUWp0QlFVVlFMQ3RDUVVGMVFpeExRVUZMUXl4cFFrRkdja0k3UVVGSFVDeHRRMEZCTWtJc1MwRkJTME1zYjBKQlNIcENPMEZCU1ZBc0swSkJRWFZDTEV0QlFVdERMR2xDUVVweVFqdEJRVXRRTERKQ1FVRnRRaXhMUVVGTFJTeGpRVXhxUWp0QlFVMVFMR3REUVVFd1FpeExRVUZMUXl4dlFrRk9lRUk3UVVGUFVDdzBRa0ZCYjBJc1MwRkJTME1zWTBGUWJFSTdRVUZSVUN3MlFrRkJjVUlzUzBGQlMwTXNaVUZTYmtJN1FVRlRVQ3d3UWtGQmEwSXNTMEZCUzBNc1dVRlVhRUk3UVVGVlVDdzBRa0ZCYjBJc1MwRkJTME1zYTBKQlZteENPMEZCVjFBc2JVTkJRVEpDTEV0QlFVdE9PMEZCV0hwQ0xFOUJRVmc3UVVGalFTeGhRVUZQTEVsQlFVbHFWaXhwUkVGQlNpeERRVUZaSzFNc1UwRkJXaXhGUVVGMVFqVlRMR2RFUVVGTkxFTkJRVU5wVEN4M1FrRkJPVUlzUlVGQmQwUXhUQ3hKUVVGNFJDeEZRVUU0UkN4SlFVRTVSQ3hEUVVGUU8wRkJRMGc3UVVFeFEwdzdRVUZCUVR0QlFVRkJMREJEUVRSRGFVTnhWQ3hUUVRWRGFrTXNSVUUwUXpSRE8wRkJRM0JETEZWQlFVbHlWQ3hKUVVGSkxFZEJRVWM3UVVGRFVDeG5RMEZCZDBJN1FVRkVha0lzVDBGQldEdEJRVWRCTEdGQlFVOHNTVUZCU1Uwc2FVUkJRVW9zUTBGQldTdFRMRk5CUVZvc1JVRkJkVUkxVXl4blJFRkJUU3hEUVVGRGFVd3NkMEpCUVRsQ0xFVkJRWGRFTVV3c1NVRkJlRVFzUlVGQk9FUXNTVUZCT1VRc1EwRkJVRHRCUVVOSU8wRkJha1JNT3p0QlFVRkJPMEZCUVVFc1NTeERRVzlFUVR0QlFVTkJPMEZCUTBFN08wRkJRMDhzU1VGQlRUaFdMSEZDUVVGaU8wRkJRVUU3UVVGQlFUdEJRVVZKTEcxRFFVRmpPMEZCUVVFN08wRkJRMVk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRk5CUVV0RExGTkJRVXdzUjBGQmFVSXNTVUZCYWtJN1FVRkRTRHM3UVVGVVREdEJRVUZCTzBGQlFVRXNiME5CV1VrN1FVRkRTU3hWUVVGSkxFTkJRVU1zUzBGQlMwRXNVMEZCVml4RlFVTkJPMEZCUTBrc1pVRkJUeXhGUVVGUU8wRkJRMGc3TzBGQlJVUXNZVUZCVDJwSUxFbEJRVWtzUTBGQlEyTXNTMEZCVEN4RFFVRlhMRXRCUVV0dFJ5eFRRVUZvUWl4RFFVRlFPMEZCUTBnN1FVRnVRa3c3UVVGQlFUdEJRVUZCTERoQ1FYRkNZekZETEZOQmNrSmtMRVZCYzBKSk8wRkJRMGtzVlVGQlNYSlVMRWxCUVVrc1IwRkJSenRCUVVOUVoxY3NZMEZCVFN4RlFVRkZMRXRCUVV0RExHRkJRVXc3UVVGRVJDeFBRVUZZTzBGQlNVRXNZVUZCVHl4SlFVRkpNMVlzYVVSQlFVb3NRMEZCV1N0VExGTkJRVm9zUlVGQmRVSTFVeXhuUkVGQlRTeERRVUZETWt3c2IwSkJRVGxDTEVWQlFXOUVjRTBzU1VGQmNFUXNSVUZCTUVRc1NVRkJNVVFzUTBGQlVEdEJRVU5JTzBGQk5VSk1PenRCUVVGQk8wRkJRVUVzU1N4RFFTdENRVHRCUVVOQk8wRkJRMEU3TzBGQlEwOHNTVUZCVFd0WExHVkJRV0k3UVVGQlFUdEJRVUZCTzBGQlJVa3NOa0pCUVdNN1FVRkJRVHM3UVVGRFZpeFRRVUZMZWtRc1QwRkJUQ3hIUVVGbExFbEJRV1k3UVVGRFFTeFRRVUZMTUVRc1MwRkJUQ3hIUVVGaExFbEJRV0k3UVVGRFFTeFRRVUZMUXl4eFFrRkJUQ3hIUVVFMlFpeEpRVUUzUWp0QlFVTklPenRCUVU1TU8wRkJRVUU3UVVGQlFTdzJRa0ZSWVR0QlFVTk1MR0ZCUVU4N1FVRkRTRE5ETEdkQ1FVRlJMRVZCUVVVc1MwRkJTMmhDTEU5QlJGbzdRVUZGU0RSRUxHRkJRVXNzUlVGQlJTeExRVUZMUml4TFFVWlVPMEZCUjBoNFF5d3JRa0ZCZFVJc1JVRkJSU3hMUVVGTGVVTTdRVUZJTTBJc1QwRkJVRHRCUVV0SU8wRkJaRXc3TzBGQlFVRTdRVUZCUVN4SkxFTkJhVUpCTzBGQlEwRTdRVUZEUVRzN1FVRkZUeXhKUVVGTlJTdzBRa0ZCWWl4SFFVVkpMSE5EUVVGWk0xWXNRMEZCV2l4RlFVTkJPMEZCUVVFN08wRkJRMGtzVDBGQlN6WlNMRTFCUVV3c1IwRkJZemRTTEVOQlFVTXNRMEZCUTBjc1NVRkJSaXhEUVVGUE1GTXNUMEZCY2tJN1FVRkRRU3hQUVVGTE5FTXNjVUpCUVV3c1IwRkJOa0o2Vml4RFFVRkRMRU5CUVVOSExFbEJRVVlzUTBGQlR6WlRMSFZDUVVGd1F6dEJRVU5CTEU5QlFVczBReXhsUVVGTUxFZEJRWFZDTlZZc1EwRkJReXhEUVVGRFJ5eEpRVUZHTEVOQlFVODBVeXhwUWtGQk9VSTdRVUZEUVN4UFFVRkxhRUlzVlVGQlRDeEhRVUZyUWk5U0xFTkJRVU1zUTBGQlEwY3NTVUZCUml4RFFVRlBNRllzVjBGQmVrSTdRVUZEUVN4UFFVRkxMMFFzVDBGQlRDeEhRVUZsT1ZJc1EwRkJReXhEUVVGRFJ5eEpRVUZHTEVOQlFVOHlVeXhSUVVGMFFqdEJRVU5CTEU5QlFVdG5SQ3hqUVVGTUxFZEJRWE5DT1ZZc1EwRkJReXhEUVVGRFJ5eEpRVUZHTEVOQlFVODBWaXhuUWtGQk4wSTdRVUZEUVN4UFFVRkxReXhsUVVGTUxFZEJRWFZDYUZjc1EwRkJReXhEUVVGRFJ5eEpRVUZHTEVOQlFVODRWaXhwUWtGQk9VSTdRVUZEUVN4UFFVRkxReXhqUVVGTUxFZEJRWE5DYkZjc1EwRkJReXhEUVVGRFJ5eEpRVUZHTEVOQlFVOW5WeXhuUWtGQk4wSTdRVUZEUVN4UFFVRkxReXhsUVVGTUxFZEJRWFZDY0Zjc1EwRkJReXhEUVVGRFJ5eEpRVUZHTEVOQlFVOXJWeXhwUWtGQk9VSTdRVUZEU0N4RFFXSk1MRU03T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRlbEZCTzBGQlEwRTdRVUZGVHl4SlFVRk5ReXhWUVVGaU8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUVzTUVOQlJXbERReXhKUVVacVF5eEZRVWRKTzBGQlEwa3NZVUZCVHl4SlFVRkpOVmNzYVVSQlFVb3NRMEZCV1RSWExFbEJRVWtzUTBGQlF6RlhMRVZCUVdwQ0xFVkJRWEZDUXl4blJFRkJUU3hEUVVGRGQwb3NTVUZCTlVJc1JVRkJhME1zU1VGQmJFTXNSVUZCZDBNc1NVRkJlRU1zUTBGQlVEdEJRVU5JTzBGQlRFdzdPMEZCUVVFN1FVRkJRVHRCUVZGUExFbEJRVTFyVGl4VlFVRmlPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFc01FTkJSMGs3UVVGRFNTeGhRVUZQTEVsQlFVazNWeXhwUkVGQlNpeERRVUZaUXl4blJVRkJaU3hEUVVGRFF5eEZRVUZvUWl4RFFVRnRRaXhOUVVGdVFpeERRVUZhTEVWQlFYZERReXhuUkVGQlRTeERRVUZEZFVvc1NVRkJMME1zUlVGQmNVUXNTVUZCY2tRc1JVRkJNa1FzU1VGQk0wUXNRMEZCVUR0QlFVTklPMEZCVEV3N08wRkJRVUU3UVVGQlFTeEpPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTllRVHRCUVVOQk8wRkJSVThzU1VGQlRYRkNMR2xDUVVGaU8wRkJRVUU3UVVGQlFUdEJRVVZKTERaQ1FVRlpLMHdzVDBGQldpeEZRVUZ4UWtNc1VVRkJja0lzUlVGQkswSkRMR1ZCUVM5Q0xFVkJRV2RFUXl4alFVRm9SQ3hGUVVGblJVTXNVMEZCYUVVc1JVRkRRVHRCUVVGQk96dEJRVU5KTEZOQlFVdERMRkZCUVV3c1IwRkJaMEpNTEU5QlFXaENPMEZCUTBFc1UwRkJTMDBzVTBGQlRDeEhRVUZwUWt3c1VVRkJha0k3UVVGRFFTeFRRVUZMVFN4blFrRkJUQ3hIUVVGM1Frd3NaVUZCZUVJN1FVRkRRU3hUUVVGTFRTeGxRVUZNTEVkQlFYVkNUQ3hqUVVGMlFqdEJRVU5CTEZOQlFVdE5MRlZCUVV3c1IwRkJhMEpNTEZOQlFXeENPMEZCUTBnN08wRkJWRXc3UVVGQlFUdEJRVUZCTEdkRFFWbEpPMEZCUTBrc1ZVRkJTWGhZTEVsQlFVa3NSMEZCUnp0QlFVTlFPRmdzYlVKQlFWY3NSVUZCUlN4TFFVRkxUQ3hSUVVSWU8wRkJSVkJOTEhGQ1FVRmhMRVZCUVVVc1MwRkJTMHdzVTBGR1lqdEJRVWRRVFN4M1FrRkJaMElzUlVGQlJTeExRVUZMVEN4blFrRklhRUk3UVVGSlVFMHNkVUpCUVdVc1JVRkJSU3hMUVVGTFRDeGxRVXBtTzBGQlMxQk5MR3RDUVVGVkxFVkJRVVVzUzBGQlMwdzdRVUZNVml4UFFVRllPMEZCVVVFc1lVRkJUeXhKUVVGSmRsZ3NhVVJCUVVvc1EwRkJXVU1zWjBWQlFXVXNRMEZCUTBNc1JVRkJhRUlzUTBGQmJVSXNUVUZCYmtJc1EwRkJXaXhGUVVGM1EwTXNaMFJCUVUwc1EwRkJRelJMTEdsQ1FVRXZReXhGUVVGclJYSk1MRWxCUVd4RkxFVkJRWGRGTEVsQlFYaEZMRU5CUVZBN1FVRkRTRHRCUVhSQ1REczdRVUZCUVR0QlFVRkJPMEZCZVVKUExFbEJRVTF6VEN4clFrRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNTdzRRa0ZCV1ROTExFTkJRVm9zUlVGRFFUdEJRVUZCT3p0QlFVTkpMRk5CUVV0M1dDeFJRVUZNTEVkQlFXZENlRmdzUTBGQlF5eERRVUZEVVN4bFFVRkdMRTFCUVhWQ1F5eHpSRUZCV1N4RFFVRkRSaXhQUVVGd1JEdEJRVU5CTEZOQlFVdE9MRVZCUVV3c1IwRkJWVVFzUTBGQlZqdEJRVU5JT3p0QlFVNU1PMEZCUVVFN1FVRkJRU3huUTBGUlNUdEJRVU5KTEdGQlFVOHNTMEZCUzNkWUxGRkJRVm83UVVGRFNEdEJRVlpNTzBGQlFVRTdRVUZCUVN4eFEwRlpTVHRCUVVOSkxHRkJRVThzUzBGQlMzWllMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoSzAwc1dVRkJjRUk3UVVGRFNEdEJRV1JNTzBGQlFVRTdRVUZCUVN4eFEwRm5Ra2s3UVVGRFNTeGhRVUZQTEV0QlFVdHFUaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVdkT0xGbEJRWEJDTzBGQlEwZzdRVUZzUWt3N1FVRkJRVHRCUVVGQkxHdEVRVzFDYTBONlRTeFRRVzVDYkVNc1JVRnZRa2s3UVVGRFNTeGhRVUZQTEV0QlFVdFVMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoVHl4VFFVRmlMRU5CUVZBN1FVRkRTRHRCUVhSQ1REczdRVUZCUVR0QlFVRkJPMEZCZVVKUExFbEJRVTByVnl4VlFVRmlPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFc2RVTkJSMGs3UVVGRFNTeFZRVUZKUXl4VlFVRlZMRWRCUVVjc1JVRkJha0k3UVVGRFFVRXNaMEpCUVZVc1EwRkJReXhsUVVGRUxFTkJRVllzUjBGQk9FSkRMRk5CUVZNc1EwRkJRME1zVTBGQmVFTXNRMEZHU2l4RFFVZEpPenRCUVVOQkxHRkJRVTlHTEZWQlFWQTdRVUZEU0R0QlFWSk1PenRCUVVGQk8wRkJRVUVzU1RzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEY2tSQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVOHNTVUZCVFVjc1lVRkJZU3hIUVVNeFFqdEJRVU5KUXl4elFrRkJiMElzUlVGQlJTeG5Ra0ZFTVVJN1FVRkZTVU1zZFVKQlFYRkNMRVZCUVVVc2VVSkJSak5DTzBGQlNVbERMRzlDUVVGclFpeEZRVUZITEZOQlNucENPMEZCUzBsRExIRkNRVUZ0UWl4RlFVRkhMR3RDUVV3eFFqdEJRVTlKUXl4eFFrRkJiVUlzUlVGQlJTeGxRVkI2UWp0QlFWRkpReXh6UWtGQmIwSXNSVUZCUlN4M1FrRlNNVUk3UVVGVlNVTXNjMEpCUVc5Q0xFVkJRVVVzWjBKQlZqRkNPMEZCVjBsRExIVkNRVUZ4UWl4RlFVRkZMSGxDUVZnelFqdEJRV0ZKUXl4dFEwRkJhVU1zUlVGQlJ5dzRRa0ZpZUVNN1FVRmpTVU1zYjBOQlFXdERMRVZCUVVjc2RVTkJaSHBETzBGQlowSkpReXcwUWtGQk1FSXNSVUZCUnl4elFrRm9RbXBETzBGQmFVSkpReXcyUWtGQk1rSXNSVUZCUnl3clFrRnFRbXhETzBGQmJVSkpReXgzUWtGQmMwSXNSVUZCUnl4WlFXNUNOMEk3UVVGdlFrbERMSGxDUVVGMVFpeEZRVUZITzBGQmNFSTVRaXhEUVVSUE8wRkJkMEpCTEVsQlFVMWlMRzlDUVVGaU8wRkJRVUU3UVVGQlFUdEJRVVZKTEdkRFFVRlphbG9zVVVGQldpeEZRVU5CTzBGQlFVRTdPMEZCUTBrc1UwRkJTME1zVVVGQlRDeEhRVUZuUWtRc1VVRkJhRUk3UVVGRFNEczdRVUZNVER0QlFVRkJPMEZCUVVFc1owTkJVVWs3UVVGRFNTeFZRVUZKVVN4SlFVRkpMRWRCUVVjN1FVRkRVQ3h6UWtGQll5eExRVUZMVUR0QlFVUmFMRTlCUVZnN1FVRkpRU3hoUVVGUExFbEJRVWxoTEdsRVFVRktMRU5CUVZsRExHZEZRVUZsTEVOQlFVTkRMRVZCUVdoQ0xFTkJRVzFDTEUxQlFXNUNMRU5CUVZvc1JVRkJkME5uV1N4aFFVRmhMRU5CUVVORExHOUNRVUYwUkN4RlFVRTBSWHBaTEVsQlFUVkZMRVZCUVd0R0xFbEJRV3hHTEVOQlFWQTdRVUZEU0R0QlFXUk1PenRCUVVGQk8wRkJRVUU3UVVGcFFrOHNTVUZCVFRCWkxIRkNRVUZpTEVkQlJVa3NLMEpCUVZrdldDeERRVUZhTEVWQlEwRTdRVUZCUVRzN1FVRkRTU3hQUVVGTE5Ga3NUMEZCVEN4SFFVRmxMRWxCUVVsd1VDd3dSRUZCU2l4RFFVRnhRbmhLTEVOQlFYSkNMRU5CUVdZN1FVRkRRU3hQUVVGTGJFSXNVVUZCVEN4SFFVRm5RaXhMUVVGTE9Gb3NUMEZCVEN4RFFVRmhPVm9zVVVGQk4wSTdRVUZEUVN4UFFVRkxiVUlzUlVGQlRDeEhRVUZWUkN4RFFVRldPMEZCUTBnc1EwRlFURHRCUVZWUExFbEJRVTFuV1N4clFrRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNTdzRRa0ZCV1hCYUxGZEJRVm9zUlVGQmVVSkRMRkZCUVhwQ0xFVkJRMEU3UVVGQlFUczdRVUZEU1N4VFFVRkxReXhSUVVGTUxFZEJRV2RDUkN4UlFVRm9RanRCUVVOQkxGTkJRVXRuWVN4aFFVRk1MRWRCUVhGQ2FtRXNWMEZCY2tJN1FVRkRRU3hUUVVGTFN5eE5RVUZNTEVkQlFXTXNTVUZCU1VNc2IwUkJRVW9zUlVGQlpEdEJRVU5CTEZOQlFVdERMRTlCUVV3c1IwRkJaU3hKUVVGSlF5dzJSRUZCU2l4RlFVRm1PMEZCUTBnN08wRkJVa3c3UVVGQlFUdEJRVUZCTEdkRFFWZEpPMEZCUTBrc1ZVRkJTVU1zU1VGQlNTeEhRVUZITzBGQlExQXNjMEpCUVdNc1MwRkJTMUFzVVVGRVdqdEJRVVZRTERCQ1FVRnJRaXhMUVVGTEsxbzdRVUZHYUVJc1QwRkJXRHRCUVV0QkxGZEJRVXMxV2l4TlFVRk1MRU5CUVZsTExIZENRVUZhTEVkQlFYVkRMRWxCUVhaRE8wRkJRMEVzVjBGQlMwd3NUVUZCVEN4RFFVRlpUU3h2UTBGQldpeEhRVUZ0UkN4SlFVRnVSRHRCUVVOQkxGZEJRVXRPTEUxQlFVd3NRMEZCV1U4c05FSkJRVm9zUjBGQk1rTXNTVUZCTTBNN1FVRkRRU3hYUVVGTFVDeE5RVUZNTEVOQlFWbFJMR2RDUVVGYUxFTkJRVFpDU2l4SlFVRTNRanRCUVVOQkxGZEJRVXRHTEU5QlFVd3NRMEZCWVU4c1ZVRkJZaXhEUVVGM1Frd3NTVUZCZUVJN1FVRkRRU3hoUVVGUExFbEJRVWxOTEdsRVFVRktMRU5CUVZsRExHZEZRVUZsTEVOQlFVTkRMRVZCUVdoQ0xFTkJRVzFDTEUxQlFXNUNMRU5CUVZvc1JVRkJkME5uV1N4aFFVRmhMRU5CUVVOSExHdENRVUYwUkN4RlFVRXdSVE5aTEVsQlFURkZMRVZCUVdkR0xFbEJRV2hHTEVOQlFWQTdRVUZEU0R0QlFYWkNURHM3UVVGQlFUdEJRVUZCTzBGQk1FSlBMRWxCUVUwMldTeHRRa0ZCWWp0QlFVRkJPMEZCUVVFN1FVRkZTU3dyUWtGQldWa3NVMEZCV2l4RlFVRjFRa01zWjBKQlFYWkNMRVZCUVhsRGJHRXNVVUZCZWtNc1JVRkRRVHRCUVVGQk96dEJRVU5KTEZOQlFVdHRZU3hUUVVGTUxFZEJRV2xDUml4VFFVRnFRanRCUVVOQkxGTkJRVXRITEZkQlFVd3NSMEZCYlVKR0xHZENRVUZ1UWp0QlFVTkJMRk5CUVV0cVlTeFJRVUZNTEVkQlFXZENSQ3hSUVVGb1FqdEJRVU5CTEZOQlFVdEpMRTFCUVV3c1IwRkJZeXhKUVVGSlF5eHZSRUZCU2l4RlFVRmtPMEZCUTBFc1UwRkJTME1zVDBGQlRDeEhRVUZsTEVsQlFVbERMRFpFUVVGS0xFVkJRV1k3UVVGRFNEczdRVUZVVER0QlFVRkJPMEZCUVVFc1owTkJXVWs3UVVGRFNTeFZRVUZKUXl4SlFVRkpMRWRCUVVjN1FVRkRVQ3h6UWtGQll5eExRVUZMVUN4UlFVUmFPMEZCUlZBc2MwSkJRV01zUzBGQlMydGhMRk5CUmxvN1FVRkhVQ3gzUWtGQlowSXNTMEZCUzBNN1FVRklaQ3hQUVVGWU8wRkJUVUVzVjBGQlMyaGhMRTFCUVV3c1EwRkJXVXNzZDBKQlFWb3NSMEZCZFVNc1NVRkJka003UVVGRFFTeFhRVUZMVEN4TlFVRk1MRU5CUVZsTkxHOURRVUZhTEVkQlFXMUVMRWxCUVc1RU8wRkJRMEVzVjBGQlMwNHNUVUZCVEN4RFFVRlpUeXcwUWtGQldpeEhRVUV5UXl4SlFVRXpRenRCUVVOQkxGZEJRVXRRTEUxQlFVd3NRMEZCV1ZFc1owSkJRVm9zUTBGQk5rSktMRWxCUVRkQ08wRkJRMEVzVjBGQlMwWXNUMEZCVEN4RFFVRmhUeXhWUVVGaUxFTkJRWGRDVEN4SlFVRjRRanRCUVVOQkxHRkJRVThzU1VGQlNVMHNhVVJCUVVvc1EwRkJXVU1zWjBWQlFXVXNRMEZCUTBNc1JVRkJhRUlzUTBGQmJVSXNUVUZCYmtJc1EwRkJXaXhGUVVGM1EyZFpMR0ZCUVdFc1EwRkJRMHNzYlVKQlFYUkVMRVZCUVRKRk4xa3NTVUZCTTBVc1JVRkJhVVlzU1VGQmFrWXNRMEZCVUR0QlFVTklPMEZCZWtKTU96dEJRVUZCTzBGQlFVRTdRVUUwUWs4c1NVRkJUV2xhTEdsRFFVRmlPMEZCUVVFN1FVRkJRVHRCUVVWSkxEWkRRVUZaVVN4VFFVRmFMRVZCUVhWQ1NTdzRRa0ZCZGtJc1JVRkJkVVJ5WVN4UlFVRjJSQ3hGUVVOQk8wRkJRVUU3TzBGQlEwa3NVMEZCUzIxaExGTkJRVXdzUjBGQmFVSkdMRk5CUVdwQ08wRkJRMEVzVTBGQlMwc3NlVUpCUVV3c1IwRkJhVU5FTERoQ1FVRnFRenRCUVVOQkxGTkJRVXR3WVN4UlFVRk1MRWRCUVdkQ1JDeFJRVUZvUWp0QlFVTkJMRk5CUVV0SkxFMUJRVXdzUjBGQll5eEpRVUZKUXl4dlJFRkJTaXhGUVVGa08wRkJRMEVzVTBGQlMwTXNUMEZCVEN4SFFVRmxMRWxCUVVsRExEWkVRVUZLTEVWQlFXWTdRVUZEU0RzN1FVRlVURHRCUVVGQk8wRkJRVUVzWjBOQldVazdRVUZEU1N4VlFVRkpReXhKUVVGSkxFZEJRVWM3UVVGRFVDeHpRa0ZCWXl4TFFVRkxVQ3hSUVVSYU8wRkJSVkFzYzBKQlFXTXNTMEZCUzJ0aExGTkJSbG83UVVGSFVDeHBRMEZCZVVJc1MwRkJTMGM3UVVGSWRrSXNUMEZCV0R0QlFVMUJMRmRCUVV0c1lTeE5RVUZNTEVOQlFWbExMSGRDUVVGYUxFZEJRWFZETEVsQlFYWkRPMEZCUTBFc1YwRkJTMHdzVFVGQlRDeERRVUZaVFN4dlEwRkJXaXhIUVVGdFJDeEpRVUZ1UkR0QlFVTkJMRmRCUVV0T0xFMUJRVXdzUTBGQldVOHNORUpCUVZvc1IwRkJNa01zU1VGQk0wTTdRVUZEUVN4WFFVRkxVQ3hOUVVGTUxFTkJRVmxSTEdkQ1FVRmFMRU5CUVRaQ1NpeEpRVUUzUWp0QlFVTkJMRmRCUVV0R0xFOUJRVXdzUTBGQllVOHNWVUZCWWl4RFFVRjNRa3dzU1VGQmVFSTdRVUZEUVN4aFFVRlBMRWxCUVVsTkxHbEVRVUZLTEVOQlFWbERMR2RGUVVGbExFTkJRVU5ETEVWQlFXaENMRU5CUVcxQ0xFMUJRVzVDTEVOQlFWb3NSVUZCZDBObldTeGhRVUZoTEVOQlFVTlRMR2xEUVVGMFJDeEZRVUY1Um1wYUxFbEJRWHBHTEVWQlFTdEdMRWxCUVM5R0xFTkJRVkE3UVVGRFNEdEJRWHBDVERzN1FVRkJRVHRCUVVGQk8wRkJORUpQTEVsQlFVMHJXU3h2UWtGQllqdEJRVUZCTzBGQlFVRTdRVUZGU1N4blEwRkJXVlVzVTBGQldpeEZRVUYxUW1waExGRkJRWFpDTEVWQlEwRTdRVUZCUVRzN1FVRkRTU3hUUVVGTGJXRXNVMEZCVEN4SFFVRnBRa1lzVTBGQmFrSTdRVUZEUVN4VFFVRkxhR0VzVVVGQlRDeEhRVUZuUWtRc1VVRkJhRUk3UVVGRFFTeFRRVUZMU1N4TlFVRk1MRWRCUVdNc1NVRkJTVU1zYjBSQlFVb3NSVUZCWkR0QlFVTkJMRk5CUVV0RExFOUJRVXdzUjBGQlpTeEpRVUZKUXl3MlJFRkJTaXhGUVVGbU8wRkJRMGc3TzBGQlVrdzdRVUZCUVR0QlFVRkJMR2REUVZkSk8wRkJRMGtzVlVGQlNVTXNTVUZCU1N4SFFVRkhPMEZCUTFBc2MwSkJRV01zUzBGQlMxQXNVVUZFV2p0QlFVVlFMSE5DUVVGakxFdEJRVXRyWVR0QlFVWmFMRTlCUVZnN1FVRkxRU3hYUVVGTEwxb3NUVUZCVEN4RFFVRlpTeXgzUWtGQldpeEhRVUYxUXl4SlFVRjJRenRCUVVOQkxGZEJRVXRNTEUxQlFVd3NRMEZCV1Uwc2IwTkJRVm9zUjBGQmJVUXNTVUZCYmtRN1FVRkRRU3hYUVVGTFRpeE5RVUZNTEVOQlFWbFBMRFJDUVVGYUxFZEJRVEpETEVsQlFUTkRPMEZCUTBFc1YwRkJTMUFzVFVGQlRDeERRVUZaVVN4blFrRkJXaXhEUVVFMlFrb3NTVUZCTjBJN1FVRkRRU3hYUVVGTFJpeFBRVUZNTEVOQlFXRlBMRlZCUVdJc1EwRkJkMEpNTEVsQlFYaENPMEZCUTBFc1lVRkJUeXhKUVVGSlRTeHBSRUZCU2l4RFFVRlpReXhuUlVGQlpTeERRVUZEUXl4RlFVRm9RaXhEUVVGdFFpeFBRVUZ1UWl4RFFVRmFMRVZCUVhsRFoxa3NZVUZCWVN4RFFVRkRUeXh2UWtGQmRrUXNSVUZCTmtVdldTeEpRVUUzUlN4RlFVRnRSaXhKUVVGdVJpeERRVUZRTzBGQlEwZzdRVUYyUWt3N08wRkJRVUU3UVVGQlFUdEJRVEJDVHl4SlFVRk5LMW9zYjBKQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc1owTkJRVmxPTEZOQlFWb3NSVUZCZFVKcVlTeFJRVUYyUWl4RlFVTkJPMEZCUVVFN08wRkJRMGtzVTBGQlMyMWhMRk5CUVV3c1IwRkJhVUpHTEZOQlFXcENPMEZCUTBFc1UwRkJTMmhoTEZGQlFVd3NSMEZCWjBKRUxGRkJRV2hDTzBGQlEwRXNVMEZCUzBrc1RVRkJUQ3hIUVVGakxFbEJRVWxETEc5RVFVRktMRVZCUVdRN1FVRkRRU3hUUVVGTFF5eFBRVUZNTEVkQlFXVXNTVUZCU1VNc05rUkJRVW9zUlVGQlpqdEJRVU5JT3p0QlFWSk1PMEZCUVVFN1FVRkJRU3huUTBGWFNUdEJRVU5KTEZWQlFVbERMRWxCUVVrc1IwRkJSenRCUVVOUUxITkNRVUZqTEV0QlFVdFFMRkZCUkZvN1FVRkZVQ3h6UWtGQll5eExRVUZMYTJFN1FVRkdXaXhQUVVGWU8wRkJTMEVzVjBGQlN5OWFMRTFCUVV3c1EwRkJXVXNzZDBKQlFWb3NSMEZCZFVNc1NVRkJka003UVVGRFFTeFhRVUZMVEN4TlFVRk1MRU5CUVZsTkxHOURRVUZhTEVkQlFXMUVMRWxCUVc1RU8wRkJRMEVzVjBGQlMwNHNUVUZCVEN4RFFVRlpUeXcwUWtGQldpeEhRVUV5UXl4SlFVRXpRenRCUVVOQkxGZEJRVXRRTEUxQlFVd3NRMEZCV1ZFc1owSkJRVm9zUTBGQk5rSktMRWxCUVRkQ08wRkJRMEVzVjBGQlMwWXNUMEZCVEN4RFFVRmhUeXhWUVVGaUxFTkJRWGRDVEN4SlFVRjRRanRCUVVOQkxHRkJRVThzU1VGQlNVMHNhVVJCUVVvc1EwRkJXVU1zWjBWQlFXVXNRMEZCUTBNc1JVRkJhRUlzUTBGQmJVSXNUVUZCYmtJc1EwRkJXaXhGUVVGM1EyZFpMR0ZCUVdFc1EwRkJRMWNzTUVKQlFYUkVMRVZCUVd0R2Jsb3NTVUZCYkVZc1JVRkJkMFlzU1VGQmVFWXNRMEZCVUR0QlFVTklPMEZCZGtKTU96dEJRVUZCTzBGQlFVRTdRVUV3UWs4c1NVRkJUV2RoTEhkQ1FVRmlPMEZCUVVFN1FVRkJRVHRCUVVWSkxHOURRVUZaVUN4VFFVRmFMRVZCUVhWQ1VTeHhRa0ZCZGtJc1JVRkJPRU42WVN4UlFVRTVReXhGUVVGM1JEQmhMR1ZCUVhoRUxFVkJRMEU3UVVGQlFUczdRVUZEU1N4VFFVRkxVQ3hUUVVGTUxFZEJRV2xDUml4VFFVRnFRanRCUVVOQkxGTkJRVXRWTEdkQ1FVRk1MRWRCUVhkQ1JpeHhRa0ZCZUVJN1FVRkRRU3hUUVVGTGVHRXNVVUZCVEN4SFFVRm5Ra1FzVVVGQmFFSTdRVUZEUVN4VFFVRkxSeXhsUVVGTUxFZEJRWFZDZFdFc1pVRkJka0k3UVVGRFFTeFRRVUZMZEdFc1RVRkJUQ3hIUVVGakxFbEJRVWxETEc5RVFVRktMRVZCUVdRN1FVRkRRU3hUUVVGTFF5eFBRVUZNTEVkQlFXVXNTVUZCU1VNc05rUkJRVW9zUlVGQlpqdEJRVU5JT3p0QlFWWk1PMEZCUVVFN1FVRkJRU3huUTBGaFNUdEJRVU5KTEZWQlFVbERMRWxCUVVrc1IwRkJSenRCUVVOUUxITkNRVUZqTEV0QlFVdFFMRkZCUkZvN1FVRkZVQ3h6UWtGQll5eExRVUZMYTJFc1UwRkdXanRCUVVkUUxEWkNRVUZ4UWl4TFFVRkxVU3huUWtGSWJrSTdRVUZKVUN3MFFrRkJiMElzUzBGQlMzaGhPMEZCU214Q0xFOUJRVmc3UVVGUFFTeFhRVUZMUXl4TlFVRk1MRU5CUVZsTExIZENRVUZhTEVkQlFYVkRMRWxCUVhaRE8wRkJRMEVzVjBGQlMwd3NUVUZCVEN4RFFVRlpUU3h2UTBGQldpeEhRVUZ0UkN4SlFVRnVSRHRCUVVOQkxGZEJRVXRPTEUxQlFVd3NRMEZCV1U4c05FSkJRVm9zUjBGQk1rTXNTVUZCTTBNN1FVRkRRU3hYUVVGTFVDeE5RVUZNTEVOQlFWbFJMR2RDUVVGYUxFTkJRVFpDU2l4SlFVRTNRanRCUVVOQkxGZEJRVXRHTEU5QlFVd3NRMEZCWVU4c1ZVRkJZaXhEUVVGM1Frd3NTVUZCZUVJN1FVRkRRU3hoUVVGUExFbEJRVWxOTEdsRVFVRktMRU5CUVZsRExHZEZRVUZsTEVOQlFVTkRMRVZCUVdoQ0xFTkJRVzFDTEUxQlFXNUNMRU5CUVZvc1JVRkJkME5uV1N4aFFVRmhMRU5CUVVOaExITkNRVUYwUkN4RlFVRTRSWEphTEVsQlFUbEZMRVZCUVc5R0xFbEJRWEJHTEVOQlFWQTdRVUZEU0R0QlFUTkNURHM3UVVGQlFUdEJRVUZCTzBGQk9FSlBMRWxCUVUxdllTeGxRVUZpTzBGQlFVRTdRVUZCUVR0QlFVVkpMREpDUVVGWmVsb3NRMEZCV2l4RlFVTkJPMEZCUVVFN08wRkJRMGtzVTBGQlMyZGFMRk5CUVV3c1IwRkJhVUpvV2l4RFFVRkRMRU5CUVVOSExFbEJRVVlzUTBGQlR5eFpRVUZRTEVOQlFXcENPMEZCUTBFc1UwRkJTM2xaTEU5QlFVd3NSMEZCWlN4SlFVRkpjRkFzTUVSQlFVb3NRMEZCY1VKNFNpeERRVUZ5UWl4RFFVRm1PMEZCUTBFc1UwRkJTMnhDTEZGQlFVd3NSMEZCWjBJc1MwRkJTemhhTEU5QlFVd3NRMEZCWVRsYUxGRkJRVGRDTzBGQlEwRXNVMEZCUzIxQ0xFVkJRVXdzUjBGQlZVUXNRMEZCVmp0QlFVTklPenRCUVZKTU8wRkJRVUU3UVVGQlFTeDFRMEZYU1R0QlFVTkpMRlZCUVVrd1dpeE5RVUZOTEVkQlFVY3NTMEZCUzNwYUxFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhMR3RDUVVGaUxFTkJRV0k3TzBGQlEwRXNZMEZCVVhWYUxFMUJRVkk3UVVGRlNTeGhRVUZMTEZWQlFVdzdRVUZEU1N4cFFrRkJUeXhMUVVGTGVsb3NSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VzWjBKQlFXSXNRMEZCVURzN1FVRkRTaXhoUVVGTExFOUJRVXc3UVVGRFNTeHBRa0ZCVHl4TFFVRkxSaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVN4blFrRkJZaXhEUVVGUU96dEJRVU5LTEdGQlFVc3NVVUZCVER0QlFVRmxPMEZCUTFnc2FVSkJRVThzUzBGQlMwWXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VzWjBKQlFXSXNRMEZCVURzN1FVRkRTaXhoUVVGTExHTkJRVXc3UVVGRFNTeHBRa0ZCVHl4TFFVRkxSaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVN4blFrRkJZaXhEUVVGUU96dEJRVU5LTEdGQlFVc3NUMEZCVER0QlFVTkpMR2xDUVVGUExFTkJRVkE3UVVGQlZUczdRVUZEWkN4aFFVRkxMR2xDUVVGTU8wRkJRMGtzYVVKQlFVOHNRMEZCVUR0QlFVRlZPenRCUVVOa08wRkJRMGtzYVVKQlFVOHNRMEZCVUR0QlFXWlNPMEZCYVVKSU8wRkJPVUpNTzBGQlFVRTdRVUZCUVN3clEwRnBRMGs3UVVGRFNTeFZRVUZKZFZvc1RVRkJUU3hIUVVGSExFdEJRVXQ2V2l4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllTeHJRa0ZCWWl4RFFVRmlPenRCUVVOQkxHTkJRVkYxV2l4TlFVRlNPMEZCUlVrc1lVRkJTeXhWUVVGTU8wRkJRMGtzYVVKQlFVOHNRMEZCVURzN1FVRkRTaXhoUVVGTExFOUJRVXc3UVVGRFNTeHBRa0ZCVHl4TFFVRkxlbG9zUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFc2VVSkJRV0lzUTBGQlVEczdRVUZEU2l4aFFVRkxMRkZCUVV3N1FVRkJaVHRCUVVOWUxHbENRVUZQTEV0QlFVdEdMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTEhsQ1FVRmlMRU5CUVZBN08wRkJRMG9zWVVGQlN5eGpRVUZNTzBGQlEwa3NhVUpCUVU4c1MwRkJTMFlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFc2VVSkJRV0lzUTBGQlVEczdRVUZEU2l4aFFVRkxMRTlCUVV3N1FVRkRTVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHBRa0ZCVHl4TFFVRkxSaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVN4dFFrRkJZaXhEUVVGUU96dEJRVU5LTEdGQlFVc3NhVUpCUVV3N1FVRkRTU3hwUWtGQlR5eExRVUZMUml4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllTeG5Ra0ZCWWl4RFFVRlFPenRCUVVOS08wRkJRMGtzYVVKQlFVOHNRMEZCVUR0QlFXeENVanRCUVc5Q1NEdEJRWFpFVER0QlFVRkJPMEZCUVVFc01FTkJNRVJKTzBGQlEwa3NWVUZCU1hWYUxFMUJRVTBzUjBGQlJ5eExRVUZMZWxvc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRXNhMEpCUVdJc1EwRkJZanM3UVVGRFFTeGpRVUZSZFZvc1RVRkJVanRCUVVWSkxHRkJRVXNzVDBGQlREdEJRVU5KTEdsQ1FVRlBMRXRCUVV0NldpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZU3h0UWtGQllpeERRVUZRT3p0QlFVTktPMEZCUTBrc2FVSkJRVThzUTBGQlVEdEJRVXhTTzBGQlVVZzdRVUZ3UlV3N1FVRkJRVHRCUVVGQkxIbERRWFZGU1R0QlFVTkpMRlZCUVVsMVdpeE5RVUZOTEVkQlFVY3NTMEZCUzNwYUxFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhMR3RDUVVGaUxFTkJRV0k3TzBGQlEwRXNZMEZCVVhWYUxFMUJRVkk3UVVGRlNTeGhRVUZMTEU5QlFVdzdRVUZEU1N4cFFrRkJUeXhMUVVGTGVsb3NSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VzYTBKQlFXSXNRMEZCVURzN1FVRkRTanRCUVVOSkxHbENRVUZQTEVOQlFWQTdRVUZNVWp0QlFVOUlPMEZCYUVaTU8wRkJRVUU3UVVGQlFTeG5SRUZ0UmtrN1FVRkRTU3hoUVVGUExFdEJRVXRHTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaExEQkNRVUZpTEVOQlFWQTdRVUZEU0R0QlFYSkdURHRCUVVGQk8wRkJRVUVzWjBSQmQwWkpPMEZCUTBrc1lVRkJUeXhMUVVGTFJpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZU3d3UWtGQllpeERRVUZRTzBGQlEwZzdRVUV4Umt3N08wRkJRVUU3UVVGQlFTeEpPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTTFUa0U3UVVGRFFUdEJRVVZQTEVsQlFVMW5UQ3hsUVVGaU8wRkJRVUU3UVVGQlFUdEJRVVZKTERKQ1FVRlpMMGdzUjBGQldpeEZRVUZwUW5KQ0xFOUJRV3BDTEVWQlEwRTdRVUZCUVRzN1FVRkRTU3hUUVVGTE5GZ3NTVUZCVEN4SFFVRlpkbGNzUjBGQldqdEJRVU5CTEZOQlFVdDNWeXhSUVVGTUxFZEJRV2RDTjFnc1QwRkJhRUk3UVVGRFNEczdRVUZPVER0QlFVRkJPMEZCUVVFc1owTkJVMGs3UVVGRFNTeFZRVUZKTVVNc1NVRkJTU3hIUVVGSE8wRkJRMUFzWlVGQlR5eExRVUZMYzJFc1NVRkVURHRCUVVWUUxHMUNRVUZYTEV0QlFVdERPMEZCUmxRc1QwRkJXRHRCUVV0QkxHRkJRVThzU1VGQlNXcGhMR2xFUVVGS0xFTkJRVmxETEdkRlFVRmxMRU5CUVVORExFVkJRV2hDTEVOQlFXMUNMRTlCUVc1Q0xFTkJRVm9zUlVGQmVVTkRMR2RFUVVGTkxFTkJRVU54VEN4bFFVRm9SQ3hGUVVGcFJUbE1MRWxCUVdwRkxFVkJRWFZGTEVsQlFYWkZMRU5CUVZBN1FVRkRTRHRCUVdoQ1REczdRVUZCUVR0QlFVRkJPMEZCYlVKUExFbEJRVTByVEN4blFrRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNTdzBRa0ZCV1hCTUxFTkJRVm9zUlVGRFFUdEJRVUZCT3p0QlFVTkpMRk5CUVV0M1dDeFJRVUZNTEVkQlFXZENlRmdzUTBGQlF5eERRVUZEVVN4bFFVRkdMRTFCUVhWQ1F5eHpSRUZCV1N4RFFVRkRSaXhQUVVGd1JEdEJRVU5CTEZOQlFVdE9MRVZCUVV3c1IwRkJWVVFzUTBGQlZqdEJRVU5JT3p0QlFVNU1PMEZCUVVFN1FVRkJRU3huUTBGUlNUdEJRVU5KTEdGQlFVOHNTMEZCUzNkWUxGRkJRVm83UVVGRFNEdEJRVlpNTzBGQlFVRTdRVUZCUVN4eFEwRlpTVHRCUVVOSkxHRkJRVThzUzBGQlMzWllMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoSzAwc1dVRkJjRUk3UVVGRFNEdEJRV1JNTzBGQlFVRTdRVUZCUVN4eFEwRm5Ra2s3UVVGRFNTeGhRVUZQTEV0QlFVdHFUaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVdkT0xGbEJRWEJDTzBGQlEwZzdRVUZzUWt3N1FVRkJRVHRCUVVGQkxHdEVRVzFDYTBONlRTeFRRVzVDYkVNc1JVRnZRa2s3UVVGRFNTeGhRVUZQTEV0QlFVdFVMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoVHl4VFFVRmlMRU5CUVZBN1FVRkRTRHRCUVhSQ1REczdRVUZCUVR0QlFVRkJPMEZCZVVKQk96czdPMEZCUjA4c1NVRkJUVzFhTEU5QlFXSTdRVUZCUVR0QlFVRkJPMEZCUTBrc2JVSkJRVmsxVWl4UFFVRmFMRVZCUVhGQ08wRkJRVUU3TzBGQlEycENMRk5CUVV0RkxFMUJRVXdzUjBGQmEwSXNSVUZCYkVJN1FVRkRRU3hUUVVGTFJpeFBRVUZNTEVkQlFXdENRU3hQUVVGc1FqdEJRVU5JT3p0QlFVcE1PMEZCUVVFN1FVRkJRU3cwUWtGTmJVSTdRVUZCUVN4M1EwRkJUa2NzU1VGQlRUdEJRVUZPUVN4WlFVRk5PMEZCUVVFN08wRkJRMWdzVjBGQlMwUXNUVUZCVEN4RFFVRlpSU3hKUVVGYUxFTkJRV2xDUkN4SlFVRkpMRU5CUVVORkxFbEJRVXdzUTBGQlZTeEhRVUZXTEVOQlFXcENPenRCUVVOQkxGZEJRVXRETEU5QlFVdzdRVUZEU0R0QlFWUk1PMEZCUVVFN1FVRkJRU3c0UWtGWFl6dEJRVU5PTEZkQlFVdE9MRTlCUVV3c1EwRkJZVk1zVTBGQllpeEhRVUY1UWl4TFFVRkxVQ3hOUVVGTUxFTkJRVmxITEVsQlFWb3NNa1JCUVhwQ08wRkJRMEVzVjBGQlMwd3NUMEZCVEN4RFFVRmhWU3hUUVVGaUxFZEJRWGxDTEV0QlFVdFdMRTlCUVV3c1EwRkJZVmNzV1VGQmRFTTdRVUZEU0R0QlFXUk1PMEZCUVVFN1FVRkJRU3cwUWtGblFsazdRVUZEU2l4WFFVRkxWQ3hOUVVGTUxFZEJRV01zUlVGQlpEczdRVUZEUVN4WFFVRkxTU3hQUVVGTU8wRkJRMGc3UVVGdVFrdzdPMEZCUVVFN1FVRkJRU3hKT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRGJFUkJPMEZCUTBFN1FVRkRRVHRCUVVWUExFbEJRVTFuUWl4bFFVRmlPMEZCUVVFN1FVRkJRVHRCUVVOSkxESkNRVUZaTTBzc1YwRkJXaXhGUVVGNVFrTXNVVUZCZWtJc1JVRkJiVU03UVVGQlFUczdRVUZETDBJc1UwRkJTME1zVVVGQlRDeEhRVUZuUWtRc1VVRkJhRUk3UVVGRFFTeFRRVUZMYTFZc1kwRkJUQ3hIUVVGelFtNVdMRmRCUVhSQ08wRkJRMEVzVTBGQlMzRldMRk5CUVV3c1IwRkJhVUlzUTBGQmFrSTdRVUZEUVN4VFFVRkxiRllzWVVGQlRDeEhRVUZ4UWl4RFFVRnlRanRCUVVOQkxGTkJRVXNyWVN4blFrRkJUQ3hIUVVGM1FpeExRVUY0UWp0QlFVTkJMRk5CUVVzNVlTeGxRVUZNTEVkQlFYVkNMRU5CUVhaQ08wRkJRMEVzVTBGQlMwTXNUVUZCVEN4SFFVRmpMRWxCUVVsRExHOUVRVUZLTEVWQlFXUTdRVUZEUVN4VFFVRkxReXhQUVVGTUxFZEJRV1VzU1VGQlNVTXNOa1JCUVVvc1JVRkJaaXhEUVZJclFpeERRVlV2UWpzN1FVRkRRU3hUUVVGTFV5eEZRVUZNTEVkQlFWVm9RaXhSUVVGV08wRkJRMEVzVTBGQlMydGlMRmRCUVV3c1IwRkJiVUp1WWl4WFFVRnVRanRCUVVOSU96dEJRV1JNTzBGQlFVRTdRVUZCUVN4dlEwRnBRa2s3UVVGRFNTeHBRMEZCYjBJc1EwRkJReXhMUVVGTGJWWXNZMEZCVEN4SFFVRnpRaXhMUVVGMlFpeEZRVUU0UW1sSExFOUJRVGxDTEVOQlFYTkRMRU5CUVhSRExFTkJRWEJDTEd0RFFVTlhMRU5CUVVNc1MwRkJTeTlHTEZOQlFVd3NSMEZCYVVJc1MwRkJiRUlzUlVGQmVVSXJSaXhQUVVGNlFpeERRVUZwUXl4RFFVRnFReXhEUVVSWUxITkRRVVZsTEVOQlFVTXNTMEZCUzJwaUxHRkJRVXdzUjBGQmNVSXNTMEZCZEVJc1JVRkJOa0pwWWl4UFFVRTNRaXhEUVVGeFF5eERRVUZ5UXl4RFFVWm1PMEZCUjBnN1FVRnlRa3c3UVVGQlFUdEJRVUZCTEdkRFFYVkNaMEk3UVVGRFVpeFZRVUZKTTJFc1NVRkJTU3hIUVVGSE8wRkJRMUJsTEd0Q1FVRlZMRVZCUVVVc1MwRkJTM1JDTEZGQlJGWTdRVUZGVUcxaUxIVkNRVUZsTEVWQlFVVXNTMEZCUzJ4SExHTkJSbVk3UVVGSFVHMUhMR3RDUVVGVkxFVkJRVVVzUzBGQlMycEhMRk5CU0ZZN1FVRkpVR3RITEcxQ1FVRlhMRVZCUVVVc1MwRkJTM0JpTEdGQlNsZzdRVUZMVUhGaUxEQkNRVUZyUWl4RlFVRkZMRXRCUVV0T0xHZENRVXhzUWp0QlFVMVFUeXgzUWtGQlowSXNSVUZCUlN4TFFVRkxjbUk3UVVGT2FFSXNUMEZCV0R0QlFWTkJMRmRCUVV0RExFMUJRVXdzUTBGQldVc3NkMEpCUVZvc1IwRkJkVU1zU1VGQmRrTTdRVUZEUVN4WFFVRkxUQ3hOUVVGTUxFTkJRVmxOTEc5RFFVRmFMRWRCUVcxRUxFbEJRVzVFTzBGQlEwRXNWMEZCUzA0c1RVRkJUQ3hEUVVGWlR5dzBRa0ZCV2l4SFFVRXlReXhKUVVFelF6dEJRVU5CTEZkQlFVdFFMRTFCUVV3c1EwRkJXVkVzWjBKQlFWb3NRMEZCTmtKS0xFbEJRVGRDTzBGQlEwRXNWMEZCUzBZc1QwRkJUQ3hEUVVGaFR5eFZRVUZpTEVOQlFYZENUQ3hKUVVGNFFqdEJRVU5CTEdGQlFVOHNTVUZCU1Uwc2FVUkJRVW9zUTBGQldVTXNaMFZCUVdVc1EwRkJRME1zUlVGQmFFSXNRMEZCYlVJc1QwRkJia0lzUTBGQldpeEZRVUY1UTBNc1owUkJRVTBzUTBGQlEzbEtMR1ZCUVdoRUxFVkJRV2xGYkVzc1NVRkJha1VzUlVGQmRVVXNTVUZCZGtVc1EwRkJVRHRCUVVOSU8wRkJka05NT3p0QlFVRkJPMEZCUVVFN1FVRXdRMDhzU1VGQlRXMUxMR2RDUVVGaU8wRkJRVUU3UVVGQlFUdEJRVVZKTERSQ1FVRlplRW9zUTBGQldpeEZRVU5CTzBGQlFVRTdPMEZCUTBrc1UwRkJTME1zUlVGQlRDeEhRVUZWUkN4RFFVRldPMEZCUTBFc1UwRkJTMFVzVTBGQlRDeEhRVUZwUWtZc1EwRkJReXhEUVVGRFNDeEZRVUZ1UWp0QlFVTkJMRk5CUVV0bUxGRkJRVXdzUjBGQlowSnJRaXhEUVVGRExFTkJRVU5ITEVsQlFVWXNRMEZCVDBNc1ZVRkJka0k3UVVGRFFTeFRRVUZMUXl4VlFVRk1MRWRCUVd0Q1RDeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUMGNzVjBGQmVrSTdRVUZEUVN4VFFVRkxaMkVzWVVGQlRDeEhRVUZ4UW5SaExFTkJRVU1zUTBGQlEwY3NTVUZCUml4RFFVRlBSeXhYUVVFMVFqdEJRVU5CTEZOQlFVdERMRTlCUVV3c1IwRkJaVkFzUTBGQlF5eERRVUZEVVN4bFFVRkdMRTFCUVhWQ1F5eHpSRUZCV1N4RFFVRkRSaXhQUVVGdVJEdEJRVU5JT3p0QlFWWk1PMEZCUVVFN1FVRkJRU3cyUWtGaFNUdEJRVU5KTEdGQlFVOHNTMEZCUzA0c1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRnZZU3hIUVVGd1FqdEJRVU5JTzBGQlprdzdRVUZCUVR0QlFVRkJMSGREUVd0Q1NUdEJRVU5KTEdGQlFVOHNTMEZCUzNSaExFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhPRm9zWlVGQmNFSTdRVUZEU0R0QlFYQkNURHRCUVVGQk8wRkJRVUVzYlVOQmRVSkpPMEZCUTBrc1lVRkJUeXhMUVVGTGFHRXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VyV2l4VlFVRmlMRWxCUVRKQ0xFTkJRV3hETzBGQlEwZzdRVUY2UWt3N1FVRkJRVHRCUVVGQkxIbERRVFJDU1R0QlFVTkpMR0ZCUVU4c1MwRkJTMnBoTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGEyRXNaMEpCUVdJc1NVRkJhVU1zUTBGQmVFTTdRVUZEU0R0QlFUbENURHRCUVVGQk8wRkJRVUVzZFVOQmFVTkpPMEZCUTBrc1lVRkJUeXhMUVVGTGNHRXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0ZuWVN4WFFVRndRanRCUVVOSU8wRkJia05NTzBGQlFVRTdRVUZCUVN3eVEwRnpRMGs3UVVGRFNTeGhRVUZQTEV0QlFVdHNZU3hGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVhGaExHMUNRVUZ3UWp0QlFVTklPMEZCZUVOTU8wRkJRVUU3UVVGQlFTeDNRMEV5UTBrN1FVRkRTU3hoUVVGUExFdEJRVXQyWVN4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllYTmhMR2RDUVVGd1FqdEJRVU5JTzBGQk4wTk1PMEZCUVVFN1FVRkJRU3g1UTBGblJFazdRVUZEU1N4aFFVRlBMRXRCUVV0NFlTeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZWFZoTEdkQ1FVRmlMRWxCUVdsRExFVkJRWGhETzBGQlEwZzdRVUZzUkV3N1FVRkJRVHRCUVVGQkxIbERRWEZFU1R0QlFVTkpMR0ZCUVU4c1MwRkJTM3BoTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGQyRXNaMEpCUVdJc1NVRkJhVU1zUlVGQmVFTTdRVUZEU0R0QlFYWkVURHRCUVVGQk8wRkJRVUVzYzBOQk1FUkpPMEZCUTBrc1lVRkJUeXhMUVVGTE1XRXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0Y1WVN4clFrRkJZaXhKUVVGdFF5eEZRVUV4UXp0QlFVTklPMEZCTlVSTU8wRkJRVUU3UVVGQlFTeHpRMEVyUkVrN1FVRkRTU3hoUVVGUExFdEJRVXN6WVN4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllUQmhMR3RDUVVGd1FqdEJRVU5JTzBGQmFrVk1PMEZCUVVFN1FVRkJRU3cyUTBGdlJVazdRVUZEU1N4aFFVRlBMRXRCUVVzMVlTeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVEpoTEdWQlFYQkNPMEZCUTBnN1FVRjBSVXc3UVVGQlFUdEJRVUZCTEcxRFFYbEZTVHRCUVVOSkxHRkJRVThzUzBGQlN6ZGhMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTkdFc1ZVRkJjRUk3UVVGRFNEdEJRVE5GVER0QlFVRkJPMEZCUVVFc2NVTkJPRVZKTzBGQlEwa3NZVUZCVHl4TFFVRkxPV0VzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFMllTeFpRVUZ3UWp0QlFVTklPMEZCYUVaTU8wRkJRVUU3UVVGQlFTeHJRMEZ0UmtrN1FVRkRTU3hoUVVGUExFdEJRVXN2WVN4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllUaGhMRk5CUVhCQ08wRkJRMGc3UVVGeVJrdzdRVUZCUVR0QlFVRkJMR3REUVhkR1NUdEJRVU5KTEdGQlFVOHNTMEZCUzJoaUxFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhLMkVzVTBGQmNFSTdRVUZEU0R0QlFURkdURHRCUVVGQk8wRkJRVUVzYTBOQk5rWkpPMEZCUTBrc1lVRkJUeXhMUVVGTGFtSXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0ZuWWl4VFFVRndRanRCUVVOSU8wRkJMMFpNTzBGQlFVRTdRVUZCUVN4dFEwRnJSMGs3UVVGRFNTeGhRVUZQTEV0QlFVdHNZaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVdsaUxGVkJRWEJDTzBGQlEwZzdRVUZ3UjB3N1FVRkJRVHRCUVVGQkxHOURRWFZIU1R0QlFVTkpMR0ZCUVU4c1MwRkJTMjVpTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGEySXNWMEZCY0VJN1FVRkRTRHRCUVhwSFREdEJRVUZCTzBGQlFVRXNaMFJCTkVkSk8wRkJRMGtzWVVGQlR5eExRVUZMY0dJc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRnRZaXgzUWtGQmNFSTdRVUZEU0R0QlFUbEhURHRCUVVGQk8wRkJRVUVzWjBSQmFVaEpPMEZCUTBrc1lVRkJUeXhMUVVGTGNtSXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0Z2WWl4M1FrRkJjRUk3UVVGRFNEdEJRVzVJVER0QlFVRkJPMEZCUVVFc2QwTkJjMGhKTzBGQlEwazdRVUZEUVN4VlFVRkpReXhQUVVGUExFZEJRVWNzUzBGQlMzWmlMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoYzJJc2IwSkJRVE5DTzBGQlEwRXNWVUZCU1N4RFFVRkRSQ3hQUVVGTUxFVkJRV01zVDBGQlR5eEpRVUZRTzBGQlEyUXNZVUZCVHpkaUxHbEVRVUZQTEVOQlFVTXJZaXhoUVVGU0xFTkJRWE5DUml4UFFVRjBRaXhEUVVGUU8wRkJRMGc3UVVFelNFdzdRVUZCUVR0QlFVRkJMSEZEUVRaSWNVSTVZU3hUUVRkSWNrSXNSVUU0U0VrN1FVRkRTU3hoUVVGUExFdEJRVXRVTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaFR5eFRRVUZpTEVOQlFWQTdRVUZEU0R0QlFXaEpURHRCUVVGQk8wRkJRVUVzZFVOQmJVbEpPMEZCUTBrc1lVRkJUenRCUVVOSWMyRXNiMEpCUVZrc1JVRkJSU3hMUVVGTFZ5eGpRVUZNTEVWQlJGZzdRVUZGU0ZZc2FVSkJRVk1zUlVGQlJTeExRVUZMVnl4WFFVRk1MRVZCUmxJN1FVRkhTRllzYVVKQlFWTXNSVUZCUlN4TFFVRkxWeXhYUVVGTUxFVkJTRkk3UVVGSlNGWXNhVUpCUVZNc1JVRkJSU3hMUVVGTFZ5eFhRVUZNTEVWQlNsSTdRVUZMU0dwQ0xEQkNRVUZyUWl4RlFVRkZMRXRCUVV0clFpeGxRVUZNTEVWQlRHcENPMEZCVFVodVFpd3dRa0ZCYTBJc1JVRkJSU3hMUVVGTGIwSXNaVUZCVEN4RlFVNXFRanRCUVU5SVdpeHJRa0ZCVlN4RlFVRkZMRXRCUVV0aExGbEJRVXdzUlVGUVZEdEJRVkZJYUVNc2RVSkJRV1VzUlVGQlJTeExRVUZMYWtjc2FVSkJRVXdzUlVGU1pEdEJRVk5JZFVjc1YwRkJSeXhGUVVGRkxFdEJRVXN5UWl4TlFVRk1MRVZCVkVZN1FVRlZTRFZpTEcxQ1FVRlhMRVZCUVVVc1MwRkJTMFFzVlVGV1pqdEJRVmRJWjJJc2JVSkJRVmNzUlVGQlJTeExRVUZMWXl4aFFVRk1MRVZCV0ZZN1FVRlpTSEpDTEhWQ1FVRmxMRVZCUVVVc1MwRkJTM05DTEhOQ1FVRk1MRVZCV21RN1FVRmhTR3hETEd0Q1FVRlZMRVZCUVVVc1MwRkJTMmhITEZsQlFVd3NSVUZpVkR0QlFXTkliVWNzZDBKQlFXZENMRVZCUVVVc1MwRkJTMnhITEd0Q1FVRk1PMEZCWkdZc1QwRkJVRHRCUVdkQ1NEdEJRWEJLVERzN1FVRkJRVHRCUVVGQk8wRkJkVXBQTEVsQlFVMHhTeXgzUWtGQllqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUU3UVVGQlFUdEJRVUZCTEdkRFFVbEpPMEZCUTBrc1lVRkJUeXhKUVVGSk9Vb3NhVVJCUVVvc1EwRkJXVU1zWjBWQlFXVXNRMEZCUTBNc1JVRkJhRUlzUTBGQmJVSXNTMEZCYmtJc1EwRkJXaXhGUVVGMVEwTXNaMFJCUVUwc1EwRkJRekpLTEhkQ1FVRTVReXhGUVVGM1JTeEpRVUY0UlN4RlFVRTRSU3hKUVVFNVJTeERRVUZRTzBGQlEwZzdRVUZPVERzN1FVRkJRVHRCUVVGQk8wRkJVMDhzU1VGQlRVTXNlVUpCUVdJN1FVRkJRVHRCUVVGQk8wRkJSVWtzY1VOQlFWa3hTaXhEUVVGYUxFVkJRMEU3UVVGQlFUczdRVUZEU1N4VFFVRkxReXhGUVVGTUxFZEJRVlZFTEVOQlFWWTdRVUZEUVN4VFFVRkxiRUlzVVVGQlRDeEhRVUZuUWl4TFFVRkxiVUlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGRExGVkJRVGRDTzBGQlEwRXNVMEZCUzBjc1QwRkJUQ3hIUVVGbExFdEJRVXRPTEVWQlFVd3NRMEZCVVU4c1pVRkJVaXhOUVVFMlFrTXNjMFJCUVZrc1EwRkJRMFlzVDBGQmVrUTdRVUZEU0RzN1FVRlFURHRCUVVGQk8wRkJRVUVzY1VOQlZVazdRVUZEU1N4aFFVRlBMRXRCUVV0T0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhLMDBzV1VGQmNFSTdRVUZEU0R0QlFWcE1PMEZCUVVFN1FVRkJRU3h4UTBGbFNUdEJRVU5KTEdGQlFVOHNTMEZCUzJwT0xFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhaMDRzV1VGQmNFSTdRVUZEU0R0QlFXcENURHRCUVVGQk8wRkJRVUVzWjBSQmIwSkpPMEZCUTBrc1lVRkJUeXhMUVVGTGJFNHNSVUZCVEN4RFFVRlJiMk1zVVVGQlVpeEhRVUZ0UWtNc1ZVRkJia0lzUTBGQk9FSXNOa0pCUVRsQ0xFTkJRVkE3UVVGRFNEdEJRWFJDVER0QlFVRkJPMEZCUVVFc2EwUkJkMEpyUXpWaUxGTkJlRUpzUXl4RlFYbENTVHRCUVVOSkxHRkJRVThzUzBGQlMxUXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0ZQTEZOQlFXSXNRMEZCVUR0QlFVTklPMEZCTTBKTU96dEJRVUZCTzBGQlFVRTdRVUU0UWs4c1NVRkJUV2xLTEhsQ1FVRmlPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFc1owTkJSMGs3UVVGRFNTeGhRVUZQTEVsQlFVbG9TeXhwUkVGQlNpeERRVUZaUXl4blJVRkJaU3hEUVVGRFF5eEZRVUZvUWl4RFFVRnRRaXhMUVVGdVFpeERRVUZhTEVWQlFYVkRReXhuUkVGQlRTeERRVUZETmtvc2VVSkJRVGxETEVWQlFYbEZMRWxCUVhwRkxFVkJRU3RGTEVsQlFTOUZMRU5CUVZBN1FVRkRTRHRCUVV4TU96dEJRVUZCTzBGQlFVRTdRVUZSVHl4SlFVRk5ReXd3UWtGQllqdEJRVUZCTzBGQlFVRTdRVUZGU1N4elEwRkJXVFZLTEVOQlFWb3NSVUZEUVR0QlFVRkJPenRCUVVOSkxGTkJRVXRETEVWQlFVd3NSMEZCVlVRc1EwRkJWanRCUVVOSU96dEJRVXhNTzBGQlFVRTdRVUZCUVN3clEwRlJTVHRCUVVOSk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNZVUZCVHl4RFFVRkRMRU5CUVVNc1MwRkJTeXRpTEdWQlFVd3NSVUZCVkR0QlFVTklPMEZCWkV3N1FVRkJRVHRCUVVGQkxEUkRRV2xDU1R0QlFVTkpMR0ZCUVU4c1MwRkJTemxpTEVWQlFVd3NRMEZCVVc5akxGRkJRVklzUjBGQmJVSkRMRlZCUVc1Q0xFTkJRVGhDTEd0Q1FVRTVRaXhEUVVGUU8wRkJRMGc3UVVGdVFrdzdRVUZCUVR0QlFVRkJMR3RFUVhOQ1NUdEJRVU5KTEdGQlFVOHNTMEZCUzNKakxFVkJRVXdzUTBGQlVXOWpMRkZCUVZJc1IwRkJiVUpETEZWQlFXNUNMRU5CUVRoQ0xIVkNRVUU1UWl4RFFVRlFPMEZCUTBnN1FVRjRRa3c3UVVGQlFUdEJRVUZCTEc5RVFUSkNTVHRCUVVOSkxHRkJRVThzUzBGQlMzSmpMRVZCUVV3c1EwRkJVVzlqTEZGQlFWSXNSMEZCYlVKRExGVkJRVzVDTEVOQlFUaENMREJEUVVFNVFpeERRVUZRTzBGQlEwZzdRVUUzUWt3N1FVRkJRVHRCUVVGQkxESkRRV2REU1R0QlFVTkpMR0ZCUVU4c1MwRkJTM0pqTEVWQlFVd3NRMEZCVVc5akxGRkJRVklzUjBGQmJVSkRMRlZCUVc1Q0xFTkJRVGhDTEdkRVFVRTVRaXhEUVVGUU8wRkJRMGc3UVVGc1EwdzdRVUZCUVR0QlFVRkJMSE5EUVc5RGMwSjZaQ3hSUVhCRGRFSXNSVUZ4UTBrN1FVRkRTU3hoUVVGUExFdEJRVXN3WkN3eVFrRkJUQ3hQUVVGMVF5eExRVUZMUXl4WFFVRk1MRTFCUVhOQ00yUXNVVUZCZEVJc1NVRkJhME1zUzBGQlN6SmtMRmRCUVV3c1RVRkJjMElzU1VGQkwwWXNRMEZCVUR0QlFVTklPMEZCZGtOTU8wRkJRVUU3UVVGQlFTeHpRMEV3UTBrN1FVRkRTU3hoUVVGUExFdEJRVXQyWXl4RlFVRk1MRU5CUVZGUExHVkJRVklzUlVGQlVEdEJRVU5JTzBGQk5VTk1PMEZCUVVFN1FVRkJRU3h6UTBFclEwazdRVUZEU1N4aFFVRlBMRXRCUVV0UUxFVkJRVXdzUTBGQlVVOHNaVUZCVWl4TlFVRTJRa01zYzBSQlFWa3NRMEZCUTBZc1QwRkJha1E3UVVGRFNEdEJRV3BFVER0QlFVRkJPMEZCUVVFc1owTkJiMFJKTzBGQlEwa3NZVUZCVHl4TFFVRkxUaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVhOakxHZENRVUZ3UWp0QlFVTklPMEZCZEVSTU8wRkJRVUU3UVVGQlFTeHJRMEY1UkVrN1FVRkRTU3hoUVVGUExFdEJRVXQ0WXl4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllVTXNWVUZCY0VJN1FVRkRTRHRCUVRORVREdEJRVUZCTzBGQlFVRXNNa05CT0VSSk8wRkJRMGtzWVVGQlR5eExRVUZMU0N4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllYRmhMRzFDUVVGd1FqdEJRVU5JTzBGQmFFVk1PMEZCUVVFN1FVRkJRU3h0UTBGdFJVazdRVUZEU1N4aFFVRlBMRXRCUVV0MllTeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVWNzVjBGQmNFSTdRVUZEU0R0QlFYSkZURHRCUVVGQk8wRkJRVUVzYjBOQmQwVkpPMEZCUTBrc1lVRkJUeXhMUVVGTFRDeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVWNzVjBGQmNFSTdRVUZEU0R0QlFURkZURHRCUVVGQk8wRkJRVUVzWjBOQk5rVkpPMEZCUTBrc1lVRkJUeXhMUVVGTFRDeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZWFZqTEdWQlFYQkNPMEZCUTBnN1FVRXZSVXc3UVVGQlFUdEJRVUZCTERKRFFXdEdTVHRCUVVOSkxHRkJRVThzUzBGQlMzcGpMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoZDJNc2RVSkJRWEJDTzBGQlEwZzdRVUZ3Umt3N1FVRkJRVHRCUVVGQkxEUkRRWFZHU1R0QlFVTkpMRlZCUVVsRExFVkJRVVVzUjBGQlJ5eExRVUZMTTJNc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRXJZU3hUUVVGaUxFZEJRWGxDTEV0QlFVdHFZaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVdkaUxGTkJRUzlETzBGQlEwRXNZVUZCVDNsQ0xFVkJRVkE3UVVGRFNEdEJRVEZHVER0QlFVRkJPMEZCUVVFc05rSkJOa1pKTzBGQlEwa3NZVUZCVHl4TFFVRkxNMk1zUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGdllTeEhRVUZ3UWp0QlFVTklPMEZCTDBaTU8wRkJRVUU3UVVGQlFTeHpRMEZyUjBrN1FVRkRTU3hoUVVGUExFdEJRVXQwWVN4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllYbGhMR3RDUVVGaUxFZEJRV3RETEVWQlFYcERPMEZCUTBnN1FVRndSMHc3UVVGQlFUdEJRVUZCTEhORFFYVkhTVHRCUVVOSkxHRkJRVThzUzBGQlN6TmhMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTUdFc2EwSkJRWEJDTzBGQlEwZ3NTMEY2UjB3c1EwRXlSMGs3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJha2hLTzBGQlFVRTdRVUZCUVN3eVJFRnRTRWs3UVVGRFNTeFZRVUZKWjBNc1JVRkJSU3hIUVVGSExFdEJRVXMxWXl4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllYVmhMR2RDUVVGMFFqdEJRVU5CTEZWQlFVbHZReXhGUVVGRkxFZEJRVWNzUzBGQlN6ZGpMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoZDJFc1owSkJRWFJDT3p0QlFVTkJMRlZCUVVsdFF5eEZRVUZGTEVsQlFVa3NSVUZCVGl4SlFVRlpMRU5CUVVWRUxFVkJRV3hDTEVWQlEwRTdRVUZEU1N4aFFVRkxOV01zUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGMVlTeG5Ra0ZCWWl4SFFVRm5RMjlETEVWQlFXaERPMEZCUTBnN1FVRkRTanRCUVRGSVREczdRVUZCUVR0QlFVRkJPMEZCTmtoUExFbEJRVTFxVkN4aFFVRmlPMEZCUVVFN1FVRkJRVHRCUVVWSkxIbENRVUZaYWt3c1YwRkJXaXhGUVVGNVFrTXNVVUZCZWtJc1JVRkJiVU5yWlN4M1FrRkJia01zUlVGRFFUdEJRVUZCT3p0QlFVTkpMRk5CUVV0b1JDeFhRVUZNTEVkQlFXMUNibUlzVjBGQmJrSTdRVUZEUVN4VFFVRkxhVUlzUlVGQlRDeEhRVUZWUkN4blJVRkJaU3hEUVVGRFF5eEZRVUZvUWl4RFFVRnRRaXhSUVVGdVFpeERRVUZXTzBGQlEwRXNVMEZCUzJZc1VVRkJUQ3hIUVVGblFrUXNVVUZCYUVJN1FVRkRRU3hUUVVGTGJXVXNkMEpCUVV3c1IwRkJaME5FTEhkQ1FVRm9RenRCUVVOQkxGTkJRVXM1WkN4TlFVRk1MRWRCUVdNc1NVRkJTVU1zYjBSQlFVb3NSVUZCWkR0QlFVTkJMRk5CUVV0RExFOUJRVXdzUjBGQlpTeEpRVUZKUXl3MlJFRkJTaXhGUVVGbU8wRkJRMGc3TzBGQlZrdzdRVUZCUVR0QlFVRkJMR2REUVdGSk8wRkJRMGtzVlVGQlNVTXNTVUZCU1N4SFFVRkhPMEZCUTFBMFpDeHhRa0ZCWVN4RlFVRkZMRXRCUVV0c1JDeFhRVVJpTzBGQlJWQXpXaXhyUWtGQlZTeEZRVUZGTEV0QlFVdDBRaXhSUVVaV08wRkJSMUJ2WlN4clEwRkJNRUlzUlVGQlJTeExRVUZMUmp0QlFVZ3hRaXhQUVVGWU8wRkJUVUVzVjBGQlN5OWtMRTFCUVV3c1EwRkJXVXNzZDBKQlFWb3NSMEZCZFVNc1NVRkJka003UVVGRFFTeFhRVUZMVEN4TlFVRk1MRU5CUVZsTkxHOURRVUZhTEVkQlFXMUVMRWxCUVc1RU8wRkJRMEVzVjBGQlMwNHNUVUZCVEN4RFFVRlpUeXcwUWtGQldpeEhRVUV5UXl4SlFVRXpRenRCUVVOQkxGZEJRVXRRTEUxQlFVd3NRMEZCV1ZFc1owSkJRVm9zUTBGQk5rSktMRWxCUVRkQ08wRkJRMEVzVjBGQlMwWXNUMEZCVEN4RFFVRmhUeXhWUVVGaUxFTkJRWGRDVEN4SlFVRjRRanRCUVVOQkxHRkJRVThzU1VGQlNVMHNhVVJCUVVvc1EwRkJXVU1zWjBWQlFXVXNRMEZCUTBNc1JVRkJhRUlzUTBGQmJVSXNVVUZCYmtJc1EwRkJXaXhGUVVFd1EwTXNaMFJCUVUwc1EwRkJReXRLTEdGQlFXcEVMRVZCUVdkRmVFc3NTVUZCYUVVc1JVRkJjMFVzU1VGQmRFVXNRMEZCVUR0QlFVTklPMEZCTVVKTU96dEJRVUZCTzBGQlFVRTdRVUUyUWs4c1NVRkJUWGxMTEdOQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc01FSkJRVms1U2l4RFFVRmFMRVZCUTBFN1FVRkJRVHM3UVVGRFNTeFRRVUZMUXl4RlFVRk1MRWRCUVZWRUxFTkJRVlk3UVVGRFFTeFRRVUZMUlN4VFFVRk1MRWRCUVdsQ1JpeERRVUZETEVOQlFVTklMRVZCUVc1Q08wRkJRMEVzVTBGQlMyWXNVVUZCVEN4SFFVRm5RbXRDTEVOQlFVTXNRMEZCUTBjc1NVRkJSaXhEUVVGUFF5eFZRVUYyUWp0QlFVTkJMRk5CUVV0RExGVkJRVXdzUjBGQmEwSk1MRU5CUVVNc1EwRkJRMGNzU1VGQlJpeERRVUZQUnl4WFFVRjZRanRCUVVOQkxGTkJRVXRuWVN4aFFVRk1MRWRCUVhGQ2RHRXNRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVTlITEZkQlFUVkNPMEZCUTBFc1UwRkJTME1zVDBGQlRDeEhRVUZsVUN4RFFVRkRMRU5CUVVOUkxHVkJRVVlzVFVGQmRVSkRMSE5FUVVGWkxFTkJRVU5HTEU5QlFXNUVPMEZCUTBnN08wRkJWa3c3UVVGQlFUdEJRVUZCTEhORFFXRkpPMEZCUTBrc1lVRkJUeXhMUVVGTFRpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVGhqTEdGQlFYQkNPMEZCUTBnN1FVRm1URHRCUVVGQk8wRkJRVUVzTmtKQmEwSkpPMEZCUTBrc1lVRkJUeXhMUVVGTGFHUXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0Z2WVN4SFFVRndRanRCUVVOSU8wRkJjRUpNTzBGQlFVRTdRVUZCUVN4NVEwRjFRa2s3UVVGRFNTeGhRVUZQTEV0QlFVdDBZU3hGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVhWaExHZENRVUZpTEVsQlFXbERMRVZCUVhoRE8wRkJRMGc3UVVGNlFrdzdRVUZCUVR0QlFVRkJMSGxEUVRSQ1NUdEJRVU5KTEdGQlFVOHNTMEZCUzNwaExFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhkMkVzWjBKQlFYQkNPMEZCUTBnN1FVRTVRa3c3UVVGQlFUdEJRVUZCTEhORFFXbERTVHRCUVVOSkxHRkJRVThzUzBGQlN6RmhMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoZVdFc2EwSkJRV0lzU1VGQmJVTXNSVUZCTVVNN1FVRkRTRHRCUVc1RFREdEJRVUZCTzBGQlFVRXNjME5CYzBOSk8wRkJRMGtzWVVGQlR5eExRVUZMTTJFc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRXdZU3hyUWtGQllpeEpRVUZ0UXl4RlFVRXhRenRCUVVOSU8wRkJlRU5NTzBGQlFVRTdRVUZCUVN3MlEwRTBRMGs3UVVGRFNTeGhRVUZQTEV0QlFVczFZU3hGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVRKaExHVkJRV0lzU1VGQlowTXNSVUZCZGtNN1FVRkRTRHRCUVRsRFREdEJRVUZCTzBGQlFVRXNiVU5CWjBSSk8wRkJRMGtzWVVGQlR5eExRVUZMTjJFc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRTBZU3hWUVVGaUxFbEJRVEpDTEVWQlFXeERPMEZCUTBnN1FVRnNSRXc3UVVGQlFUdEJRVUZCTEhGRFFXOUVTVHRCUVVOSkxHRkJRVThzUzBGQlN6bGhMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoTm1Fc1dVRkJZaXhKUVVFMlFpeEZRVUZ3UXp0QlFVTklPMEZCZEVSTU8wRkJRVUU3UVVGQlFTeHJRMEYzUkVrN1FVRkRTU3hoUVVGUExFdEJRVXN2WVN4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllUaGhMRk5CUVdJc1NVRkJNRUlzUlVGQmFrTTdRVUZEU0R0QlFURkVURHRCUVVGQk8wRkJRVUVzYTBOQk5FUkpPMEZCUTBrc1lVRkJUeXhMUVVGTGFHSXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0VyWVN4VFFVRmlMRWxCUVRCQ0xFVkJRV3BETzBGQlEwZzdRVUU1UkV3N1FVRkJRVHRCUVVGQkxHdERRV2RGU1R0QlFVTkpMR0ZCUVU4c1MwRkJTMnBpTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaFoySXNVMEZCWWl4SlFVRXdRaXhGUVVGcVF6dEJRVU5JTzBGQmJFVk1PMEZCUVVFN1FVRkJRU3h0UTBGdlJVazdRVUZEU1N4aFFVRlBMRXRCUVV0c1lpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZV2xpTEZWQlFXSXNTVUZCTWtJc1JVRkJiRU03UVVGRFNEdEJRWFJGVER0QlFVRkJPMEZCUVVFc2IwTkJkMFZKTzBGQlEwa3NZVUZCVHl4TFFVRkxibUlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGcllpeFhRVUZpTEVsQlFUUkNMRVZCUVc1RE8wRkJRMGc3UVVFeFJVdzdRVUZCUVR0QlFVRkJMR2RFUVRSRlNUdEJRVU5KTEdGQlFVOHNTMEZCUzNCaUxFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhiV0lzZDBKQlFYQkNPMEZCUTBnN1FVRTVSVXc3UVVGQlFUdEJRVUZCTEdkRVFXZEdTVHRCUVVOSkxHRkJRVThzUzBGQlMzSmlMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoYjJJc2QwSkJRWEJDTzBGQlEwZzdRVUZzUmt3N1FVRkJRVHRCUVVGQkxIZERRVzlHU1R0QlFVTkpPMEZCUTBFc1ZVRkJTVU1zVDBGQlR5eEhRVUZITEV0QlFVdDJZaXhGUVVGTUxFTkJRVkZGTEVsQlFWSXNRMEZCWVhOaUxHOUNRVUV6UWp0QlFVTkJMRlZCUVVrc1EwRkJRMFFzVDBGQlRDeEZRVUZqTEU5QlFVOHNTVUZCVUR0QlFVTmtMR0ZCUVU4M1lpeHBSRUZCVHl4RFFVRkRLMklzWVVGQlVpeERRVUZ6UWtZc1QwRkJkRUlzUTBGQlVEdEJRVU5JTzBGQmVrWk1PMEZCUVVFN1FVRkJRU3h4UTBFeVJuRkNPV0VzVTBFelJuSkNMRVZCTkVaSk8wRkJRMGtzWVVGQlR5eExRVUZMVkN4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllVOHNVMEZCWWl4RFFVRlFPMEZCUTBnN1FVRTVSa3c3TzBGQlFVRTdRVUZCUVR0QlFXbEhUeXhKUVVGTmNVb3NhVUpCUVdJN1FVRkJRVHRCUVVGQk8wRkJSVWtzTmtKQlFWa3ZTaXhEUVVGYUxFVkJRMEU3UVVGQlFUczdRVUZEU1N4VFFVRkxSU3hUUVVGTUxFZEJRV2xDUml4RFFVRkRMRU5CUVVOSUxFVkJRVzVDTzBGQlEwRXNVMEZCUzJZc1VVRkJUQ3hIUVVGblFtdENMRU5CUVVNc1EwRkJRMGNzU1VGQlJpeERRVUZQUXl4VlFVRjJRanRCUVVOQkxGTkJRVXNyWXl4alFVRk1MRWRCUVhOQ2JtUXNRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVTkzWVN4blFrRkJOMEk3UVVGRFNEczdRVUZRVER0QlFVRkJPMEZCUVVFc2MwTkJVM05DT1dJc1VVRlVkRUlzUlVGVFowTTRVU3hUUVZSb1F5eEZRVk15UTNsT0xHRkJWRE5ETEVWQlZVazdRVUZEU1N4WFFVRkxiR1FzVTBGQlRDeEhRVUZwUW5sUUxGTkJRV3BDTzBGQlEwRXNWMEZCU3pkUkxGRkJRVXdzUjBGQlowSkVMRkZCUVdoQ08wRkJRMEVzVjBGQlMzTmxMR05CUVV3c1IwRkJjMEpETEdGQlFYUkNPMEZCUTBnN1FVRmtURHRCUVVGQk8wRkJRVUVzZVVOQmFVSkpPMEZCUTBrc1lVRkJUeXhMUVVGTFJDeGpRVUZhTzBGQlEwZzdRVUZ1UWt3N08wRkJRVUU3UVVGQlFUdEJRWE5DVHl4SlFVRk5SU3huUWtGQllqdEJRVUZCTzBGQlFVRTdRVUZGU1N3MFFrRkJXWGhsTEZGQlFWb3NSVUZEUVR0QlFVRkJPenRCUVVOSkxGTkJRVXRETEZGQlFVd3NSMEZCWjBKRUxGRkJRV2hDTzBGQlEwZzdPMEZCVEV3N1FVRkJRVHRCUVVGQkxHZERRVkZKTzBGQlEwa3NWVUZCU1ZFc1NVRkJTU3hIUVVGSE8wRkJRMUJsTEd0Q1FVRlZMRVZCUVVVc1MwRkJTM1JDTzBGQlJGWXNUMEZCV0R0QlFVZEJMR0ZCUVU4c1NVRkJTV0VzYVVSQlFVb3NRMEZCV1VNc1owVkJRV1VzUTBGQlEwTXNSVUZCYUVJc1EwRkJiVUlzVVVGQmJrSXNRMEZCV2l4RlFVRXdRME1zWjBSQlFVMHNRMEZCUTJ0TExHbENRVUZxUkN4RlFVRnZSVE5MTEVsQlFYQkZMRVZCUVRCRkxFbEJRVEZGTEVOQlFWQTdRVUZEU0R0QlFXSk1PenRCUVVGQk8wRkJRVUU3UVVGblFrOHNTVUZCVFdsbExHVkJRV0k3UVVGQlFUdEJRVUZCTzBGQlJVa3NNa0pCUVZsNlpTeFJRVUZhTEVWQlEwRTdRVUZCUVRzN1FVRkRTU3hUUVVGTFF5eFJRVUZNTEVkQlFXZENSQ3hSUVVGb1FqdEJRVU5JT3p0QlFVeE1PMEZCUVVFN1FVRkJRU3huUTBGUlNUdEJRVU5KTEZWQlFVbFJMRWxCUVVrc1IwRkJSenRCUVVOUVpTeHJRa0ZCVlN4RlFVRkZMRXRCUVV0MFFqdEJRVVJXTEU5QlFWZzdRVUZIUVN4aFFVRlBMRWxCUVVsaExHbEVRVUZLTEVOQlFWbERMR2RGUVVGbExFTkJRVU5ETEVWQlFXaENMRU5CUVcxQ0xGRkJRVzVDTEVOQlFWb3NSVUZCTUVORExHZEVRVUZOTEVOQlFVTnRTeXhwUWtGQmFrUXNSVUZCYjBVMVN5eEpRVUZ3UlN4RlFVRXdSU3hKUVVFeFJTeERRVUZRTzBGQlEwZzdRVUZpVERzN1FVRkJRVHRCUVVGQk8wRkJaMEpQTEVsQlFVMHJTeXh0UWtGQllqdEJRVUZCTzBGQlFVRTdRVUZGU1N3clFrRkJXWGhNTEZkQlFWb3NSVUZCZVVKRExGRkJRWHBDTEVWQlFXMURNR0VzWlVGQmJrTXNSVUZEUVR0QlFVRkJPenRCUVVOSkxGTkJRVXQ2WVN4UlFVRk1MRWRCUVdkQ1JDeFJRVUZvUWp0QlFVTkJMRk5CUVV0clZpeGpRVUZNTEVkQlFYTkNibFlzVjBGQmRFSTdRVUZEUVN4VFFVRkxTU3hsUVVGTUxFZEJRWFZDZFdFc1pVRkJka0k3UVVGRFFTeFRRVUZMZVVRc2QwSkJRVXdzUjBGQlowTXNTMEZCYUVNN1FVRkRRU3hUUVVGTEwyUXNUVUZCVEN4SFFVRmpMRWxCUVVsRExHOUVRVUZLTEVWQlFXUTdRVUZEUVN4VFFVRkxReXhQUVVGTUxFZEJRV1VzU1VGQlNVTXNOa1JCUVVvc1JVRkJaanRCUVVOSU96dEJRVlpNTzBGQlFVRTdRVUZCUVN4blEwRmhTVHRCUVVOSkxGVkJRVWxETEVsQlFVa3NSMEZCUnp0QlFVTlFaU3hyUWtGQlZTeEZRVUZGTEV0QlFVdDBRaXhSUVVSV08wRkJSVkJ0WWl4MVFrRkJaU3hGUVVGRkxFdEJRVXRzUnl4alFVWm1PMEZCUjFCelJ5eDNRa0ZCWjBJc1JVRkJSU3hMUVVGTGNtSXNaVUZJYUVJN1FVRkpVR3RsTEd0RFFVRXdRaXhGUVVGRkxFdEJRVXRHTzBGQlNqRkNMRTlCUVZnN1FVRlBRU3hYUVVGTEwyUXNUVUZCVEN4RFFVRlpTeXgzUWtGQldpeEhRVUYxUXl4SlFVRjJRenRCUVVOQkxGZEJRVXRNTEUxQlFVd3NRMEZCV1Uwc2IwTkJRVm9zUjBGQmJVUXNTVUZCYmtRN1FVRkRRU3hYUVVGTFRpeE5RVUZNTEVOQlFWbFBMRFJDUVVGYUxFZEJRVEpETEVsQlFUTkRPMEZCUTBFc1YwRkJTMUFzVFVGQlRDeERRVUZaVVN4blFrRkJXaXhEUVVFMlFrb3NTVUZCTjBJN1FVRkRRU3hYUVVGTFJpeFBRVUZNTEVOQlFXRlBMRlZCUVdJc1EwRkJkMEpNTEVsQlFYaENPMEZCUTBFc1lVRkJUeXhKUVVGSlRTeHBSRUZCU2l4RFFVRlpReXhuUlVGQlpTeERRVUZEUXl4RlFVRm9RaXhEUVVGdFFpeE5RVUZ1UWl4RFFVRmFMRVZCUVhkRFF5eG5SRUZCVFN4RFFVRkRjMHNzYlVKQlFTOURMRVZCUVc5Rkwwc3NTVUZCY0VVc1JVRkJNRVVzU1VGQk1VVXNRMEZCVUR0QlFVTklPMEZCTTBKTU96dEJRVUZCTzBGQlFVRTdRVUU0UWs4c1NVRkJUV2RNTEc5Q1FVRmlMRWRCUlVrc09FSkJRVmx5U3l4RFFVRmFMRVZCUTBFN1FVRkJRVHM3UVVGRFNTeFBRVUZMZDBvc1owSkJRVXdzUjBGQmQwSXNTVUZCU1VFc1owSkJRVW9zUTBGQmNVSjRTaXhEUVVGeVFpeERRVUY0UWp0QlFVTkJMRTlCUVV0c1FpeFJRVUZNTEVkQlFXZENNRXNzWjBKQlFXZENMRU5CUVVNeFN5eFJRVUZxUXp0QlFVTklMRU5CVGt3N1FVRlRUeXhKUVVGTmVXVXNiMEpCUVdJN1FVRkJRVHRCUVVGQk8wRkJSVWtzYTBOQlEwRTdRVUZCUVRzN1FVRkJRU3h6UTBGRVpXNVdMRWxCUTJZN1FVRkVaVUVzVlVGRFpqdEJRVUZCT3p0QlFVTkpMRkZCUVVkQkxFbEJRVWtzUTBGQlEzVkhMRTFCUVV3c1MwRkJaMElzUTBGQmJrSXNSVUZCYzBJN1FVRkRiRUlzVjBGQlN6ZFFMRkZCUVV3c1IwRkJaMEp6U2l4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGd1FqdEJRVU5CTEZkQlFVdHNTU3hUUVVGTUxFZEJRV2xDYTBrc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQmNrSTdRVUZEUVN4WFFVRkxiMVlzV1VGQlRDeEhRVUZ2UW5CV0xFbEJRVWtzUTBGQlF5eERRVUZFTEVOQlFYaENPMEZCUTBFc1YwRkJTM0ZXTEZkQlFVd3NSMEZCYlVKeVZpeEpRVUZKTEVOQlFVTXNRMEZCUkN4RFFVRjJRanRCUVVOSUxFdEJURVFzVFVGTFR5eEpRVUZIUVN4SlFVRkpMRU5CUVVOMVJ5eE5RVUZNTEV0QlFXZENMRU5CUVc1Q0xFVkJRWE5DTzBGQlEzcENMRmRCUVV0NlR5eFRRVUZNTEVkQlFXbENhMGtzU1VGQlNTeERRVUZETEVOQlFVUXNRMEZCU2l4RFFVRlJka2tzUlVGQmVrSTdRVUZEUVN4WFFVRkxaaXhSUVVGTUxFZEJRV2RDYzBvc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQlNpeERRVUZSYWtrc1NVRkJVaXhEUVVGaFF5eFZRVUUzUWp0QlFVTkJMRmRCUVV0dlpDeFpRVUZNTEVkQlFXOUNjRllzU1VGQlNTeERRVUZETEVOQlFVUXNRMEZCU2l4RFFVRlJha2tzU1VGQlVpeERRVUZoZFdRc2QwSkJRV3BETzBGQlEwRXNWMEZCUzBRc1YwRkJUQ3hIUVVGdFFuSldMRWxCUVVrc1EwRkJReXhEUVVGRUxFTkJRVW9zUTBGQlVXcEpMRWxCUVZJc1EwRkJZWGRrTEZkQlFXaERPMEZCUTBnc1MwRk1UU3hOUVV0Qk8wRkJRMGdzV1VGQlRTeEpRVUZKYW1Nc1MwRkJTaXhEUVVGVkxHZEVRVUZXTEVOQlFVNDdRVUZEU0R0QlFVTktPenRCUVdwQ1REdEJRVUZCTzBGQlFVRXNjVU5CYjBKSk8wRkJRMGtzWVVGQlR5eExRVUZMT0dJc1dVRkJXanRCUVVOSU8wRkJkRUpNTzBGQlFVRTdRVUZCUVN4dlEwRjVRa2s3UVVGRFNTeGhRVUZQTEV0QlFVdERMRmRCUVZvN1FVRkRTRHRCUVROQ1REczdRVUZCUVR0QlFVRkJPMEZCT0VKUExFbEJRVTEwVkN4alFVRmlPMEZCUVVFN1FVRkJRVHRCUVVWSkxEQkNRVUZaZEV3c1VVRkJXaXhGUVVGelFpdGxMRkZCUVhSQ0xFVkJRMEU3UVVGQlFUczdRVUZEU1N4VFFVRkxPV1VzVVVGQlRDeEhRVUZuUWtRc1VVRkJhRUk3UVVGRFFTeFRRVUZMWjJZc1VVRkJUQ3hIUVVGblFrUXNVVUZCYUVJN1FVRkRTRHM3UVVGT1REdEJRVUZCTzBGQlFVRXNaME5CVTBrN1FVRkRTU3hWUVVGSmRtVXNTVUZCU1N4SFFVRkhPMEZCUTFCbExHdENRVUZWTEVWQlFVVXNTMEZCUzNSQ0xGRkJSRlk3UVVGRlVHMWpMR2xDUVVGVExFVkJRVVVzUzBGQlN6UkRPMEZCUmxRc1QwRkJXRHRCUVVsQkxHRkJRVThzU1VGQlNXeGxMR2xFUVVGS0xFTkJRVmxETEdkRlFVRmxMRU5CUVVORExFVkJRV2hDTEVOQlFXMUNMRkZCUVc1Q0xFTkJRVm9zUlVGQk1FTkRMR2RFUVVGTkxFTkJRVU54U3l4alFVRnFSQ3hGUVVGcFJUbExMRWxCUVdwRkxFVkJRWFZGTEVsQlFYWkZMRU5CUVZBN1FVRkRTRHRCUVdaTU96dEJRVUZCTzBGQlFVRXNTVHM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE1XMUNRVHRCUVVWUExFbEJRVTE1WlN4alFVRmlPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFc01FTkJSV2xEYkdZc1YwRkdha01zUlVGRk9FTnRaaXhWUVVZNVF5eEZRVWRKTzBGQlEwa3NZVUZCVHl4SlFVRkplRlVzZVVSQlFVb3NRMEZCYjBJelN5eFhRVUZ3UWl4RlFVRnBRMjFtTEZWQlFXcERMRU5CUVZBN1FVRkRTRHRCUVV4TU8wRkJRVUU3UVVGQlFTdzBRMEZQYlVOc1ppeFJRVkJ1UXl4RlFVODJRMjFtTEdOQlVEZERMRVZCVHpaRVF5eFRRVkEzUkN4RlFVOTNSVU1zWVVGUWVFVXNSVUZQZFVaRExHZENRVkIyUml4RlFVOTVSelZGTEdWQlVIcEhMRVZCVVVrN1FVRkRTU3hWUVVGSk5rVXNSVUZCUlN4SFFVRkhReXhOUVVGTkxFTkJRVU5ETEUxQlFWQXNRMEZCWXl4SlFVRkpMMVVzZVVSQlFVb3NRMEZCYjBKNVZTeGpRVUZ3UWl4RlFVRnZRMjVtTEZGQlFYQkRMRU5CUVdRc1JVRkRWRHRCUVVOSlJTeHhRa0ZCWVN4RlFVRkZiV1lzWVVGRWJrSTdRVUZGU1dwTExHbENRVUZUTEVWQlFVVm5TeXhUUVVabU8wRkJSMGx1UlN4M1FrRkJaMElzUlVGQlJYRkZMR2RDUVVoMFFqdEJRVWxKYm1Zc2RVSkJRV1VzUlVGQlJYVmhPMEZCU25KQ0xFOUJSRk1zUTBGQlZEdEJRVkZCTEdGQlFVODJSU3hGUVVGUU8wRkJRMGc3UVVGc1FrdzdRVUZCUVR0QlFVRkJMSGREUVc5Q0swSjRaaXhYUVhCQ0wwSXNSVUZ2UWpSRGJXWXNWVUZ3UWpWRExFVkJiMEozUkdoQ0xIZENRWEJDZUVRc1JVRnhRa2s3UVVGRFNTeGhRVUZQTEVsQlFVbHNWQ3gxUkVGQlNpeERRVUZyUW1wTUxGZEJRV3hDTEVWQlFTdENiV1lzVlVGQkwwSXNSVUZCTWtOb1FpeDNRa0ZCTTBNc1EwRkJVRHRCUVVOSU8wRkJka0pNT3p0QlFVRkJPMEZCUVVFc1NUczdPenM3T3pzN096czdPenM3T3pzN096czdRVU5HUVN4SlFVRkpkMElzZDBKQlFYZENMRWRCUVVjc1EwRkJMMEk3UVVGRlR5eEpRVUZOTTJVc1pVRkJZanRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCUVVFN1FVRkJRVHRCUVVGQkxIVkNRVU5qTkdVc1RVRkVaQ3hGUVVOelFqdEJRVU5rTEdGQlFVOUJMRTFCUVUwc1IwRkJSMFFzZDBKQlFYZENMRVZCUVhoRE8wRkJRMGc3UVVGSVREczdRVUZCUVR0QlFVRkJMRWs3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRFJrOHNTVUZCVFM5WExFOUJRV0k3UVVGQlFUdEJRVUZCTzBGQlEwa3NiVUpCUVZscFdDeE5RVUZhTEVWQlFXOUNReXhQUVVGd1FpeEZRVUUyUWp0QlFVRkJPenRCUVVONlFpeFRRVUZMYUZnc1RVRkJUQ3hIUVVGclFpdFhMRTFCUVd4Q08wRkJRMEVzVTBGQlN6bFhMRTlCUVV3c1IwRkJhMElyVnl4UFFVRnNRanRCUVVOSU96dEJRVXBNTzBGQlFVRTdRVUZCUVN4NVFrRk5aMEpvV0N4TlFVNW9RaXhGUVUxM1FrTXNUMEZPZUVJc1JVRk5hVU03UVVGRGVrSm5XQ3hyUWtGQldTeERRVUZEUXl4UFFVRmlMRU5CUVhGQ0xGRkJRWEpDTEVWQlFTdENiRmdzVFVGQkwwSTdRVUZEUVdsWUxHdENRVUZaTEVOQlFVTkRMRTlCUVdJc1EwRkJjVUlzVTBGQmNrSXNSVUZCWjBOcVdDeFBRVUZvUXp0QlFVTklPMEZCVkV3N1FVRkJRVHRCUVVGQkxEaENRVmR4UWp0QlFVTmlMR0ZCUVU4c1NVRkJTVWdzVDBGQlNpeERRVUZaYlZnc1dVRkJXU3hEUVVGRFJTeFBRVUZpTEVOQlFYRkNMRkZCUVhKQ0xFTkJRVm9zUlVGQk5FTkdMRmxCUVZrc1EwRkJRMFVzVDBGQllpeERRVUZ4UWl4VFFVRnlRaXhEUVVFMVF5eERRVUZRTzBGQlEwZzdRVUZpVER0QlFVRkJPMEZCUVVFc09FSkJaWEZDTzBGQlEySXNZVUZCVDBZc1dVRkJXU3hEUVVGRFJTeFBRVUZpTEVOQlFYRkNMRkZCUVhKQ0xFdEJRV3REUml4WlFVRlpMRU5CUVVORkxFOUJRV0lzUTBGQmNVSXNVMEZCY2tJc1EwRkJla003UVVGRFNEdEJRV3BDVER0QlFVRkJPMEZCUVVFc05FSkJiVUp0UWp0QlFVTllSaXhyUWtGQldTeERRVUZEUnl4VlFVRmlMRU5CUVhkQ0xGRkJRWGhDTzBGQlEwRklMR3RDUVVGWkxFTkJRVU5ITEZWQlFXSXNRMEZCZDBJc1UwRkJlRUk3UVVGRFNEdEJRWFJDVERzN1FVRkJRVHRCUVVGQkxFazdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEUVU4c1NVRkJUVU1zYlVKQlFXSTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQkxIZENRVWRKTzBGQlEwa3NWVUZCUnl4TFFVRkxjR1FzYlVKQlFWSXNSVUZEUVR0QlFVTkpMR1ZCUVU4c1MwRkJTM0ZrTEVsQlFWbzdRVUZEU0N4UFFVaEVMRTFCUzBFN1FVRkRTU3hsUVVGUExFdEJRVXRETEVWQlFWbzdRVUZEU0R0QlFVTktMRXRCV2t3N1FVRkJRU3h6UWtGalowSkRMRTlCWkdoQ0xFVkJaVWs3UVVGRFNTeFZRVUZITEV0QlFVdDJaQ3h0UWtGQlVpeEZRVU5CTzBGQlEwa3NZVUZCUzNGa0xFbEJRVXdzUjBGQldVY3NVVUZCV2p0QlFVTklMRTlCU0VRc1RVRkxRVHRCUVVOSkxHRkJRVXRHTEVWQlFVd3NSMEZCVlVNc1QwRkJWanRCUVVOSU8wRkJRMG83UVVGNFFrdzdPMEZCTUVKSkxDdENRVUZaUlN4dFFrRkJXaXhGUVVOQk8wRkJRVUU3TzBGQlEwa3NVMEZCUzNwa0xHMUNRVUZNTEVkQlFUSkNlV1FzYlVKQlFUTkNPMEZCUlVFc1UwRkJTMGdzUlVGQlRDeEhRVUZWTEVsQlFWWTdRVUZEUVN4VFFVRkxSQ3hKUVVGTUxFZEJRVmtzU1VGQldqdEJRVU5CTEZOQlFVdExMRmRCUVV3c1IwRkJiVUlzU1VGQmJrSTdRVUZGUVN4VFFVRkxReXg1UWtGQlRDeEhRVUZwUXl4SlFVRnFRenRCUVVOQkxGTkJRVXRETEhsQ1FVRk1MRWRCUVdsRExFbEJRV3BETzBGQlEwRXNVMEZCUzBNc1pVRkJUQ3hIUVVGMVFpeEpRVUYyUWp0QlFVTklPenRCUVhKRFREdEJRVUZCTzBGQmQwTlBMRWxCUVUxR0xIbENRVUY1UWl4SFFVTjBRenRCUVVOSk1VMHNVMEZCVHl4RlFVRkZMRk5CUkdJN1FVRkZTVFpOTEhWQ1FVRnhRaXhGUVVGRkxIVkNRVVl6UWp0QlFVZEpReXh4UWtGQmJVSXNSVUZCUlN4eFFrRklla0k3UVVGSlNVTXNNa0pCUVhsQ0xFVkJRVVVzTWtKQlNpOUNPMEZCUzBsRExITkNRVUZ2UWl4RlFVRkZPMEZCVERGQ0xFTkJSRTg3UVVGVFFTeEpRVUZOUXl4alFVRmpMRWRCUXpOQ08wRkJRMGxETEZWQlFWRXNSVUZCUlR0QlFVUmtMRU5CUkU4N1FVRkxRU3hKUVVGTlF5eHZRa0ZCWWp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVVkpPMEZCUmtvN1FVRkJRVHRCUVVGQk8wRkJRVUVzT0VaQlJ6QkNReXhaUVVneFFqdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVZDNRME1zYzBKQlNIaERMREpFUVVkcFJDeHBRa0ZJYWtRN1FVRkhiMFZETERSQ1FVaHdSVHRCUVVkclJrTXNhME5CU0d4R08wRkJSM05IUXl3d1FrRklkRWM3UVVGTFkwTXNhME5CVEdRc1IwRkxiVU1zU1VGTWJrTTdRVUZOV1VNc2IwSkJUbG9zUjBGTmJVSklMR3RDUVVGclFpeEhRVUZITEUxQlFVZ3NSMEZCV1N4SlFVNXFSRHRCUVU5WlNTeG5RMEZRV2l4SFFVOHJRa2dzVlVGQlZTd3lRMEZCYjBOR0xGbEJRWEJETERCRFFVRm5Sa1lzV1VGQmFFWXNZMEZCWjBkTkxFbEJRV2hITEhsRFFVRjFTVW9zV1VGQmRra3NNRU5CUVcxTVJpeFpRVUZ1VEN4alFVRnRUVTBzU1VGQmJrMHNRMEZRZWtNN1FVRkJRU3hwUkVGVFpVVXNUMEZCVHl4RFFVRkRReXhKUVVGU0xFTkJRV0VzUTBGRGFFSkRMRXRCUVVzc1EwRkJRMGdzWjBKQlFVUXNSVUZCYlVJN1FVRkRkRUpKTEhkQ1FVRk5MRVZCUVVVc1MwRkVZenRCUVVWMFFrTXNlVUpCUVU4c1JVRkJSVHRCUVVOUUxITkVRVUZyUTFnN1FVRkVNMEk3UVVGR1lTeHBRa0ZCYmtJc1EwRkVWeXhGUVU5b1FpeEpRVUZKVHl4UFFVRktMRU5CUVZrc1ZVRkJRMHNzUTBGQlJDeEZRVUZKUXl4TlFVRktPMEZCUVVFc2VVSkJRMVkzWkN4VlFVRlZMRU5CUVVNN1FVRkJRU3d5UWtGQlRUWmtMRTFCUVUwc1EwRkJReXhKUVVGSmNHWXNTMEZCU2l4RFFVRlZMRFpEUVVGV0xFTkJRVVFzUTBGQldqdEJRVUZCTEcxQ1FVRkVMRVZCUVhsRk1tVXNhMEpCUVhwRkxFTkJSRUU3UVVGQlFTeHBRa0ZCV2l4RFFWQm5RaXhEUVVGaUxFTkJWR1k3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVR0QlFVRkJMRWs3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU4wUkVFN1FVRkRRVHRCUVVWUExFbEJRVTB2Vml4aFFVRmlPMEZCUVVFN1FVRkJRVHRCUVVOSkxIbENRVUZaYlVNc1JVRkJXaXhGUVVGblFqdEJRVUZCT3p0QlFVTmFMRk5CUVVzMVRTeEZRVUZNTEVkQlFWVTBUU3hGUVVGV08wRkJRMEVzVTBGQlMzaE9MRTFCUVV3c1IwRkJZeXhKUVVGSlF5eHZSRUZCU2l4RlFVRmtPMEZCUTBFc1UwRkJTME1zVDBGQlRDeEhRVUZsTEVsQlFVbERMRFpFUVVGS0xFVkJRV1k3UVVGRFNEczdRVUZNVER0QlFVRkJPMEZCUVVFc1owTkJUMmRDTzBGQlExSXNWVUZCU1VNc1NVRkJTU3hIUVVGSExFVkJRVmc3UVVGRlFTeFhRVUZMU2l4TlFVRk1MRU5CUVZsTExIZENRVUZhTEVkQlFYVkRMRWxCUVhaRE8wRkJRMEVzVjBGQlMwd3NUVUZCVEN4RFFVRlpUU3h2UTBGQldpeEhRVUZ0UkN4TFFVRnVSRHRCUVVOQkxGZEJRVXRPTEUxQlFVd3NRMEZCV1U4c05FSkJRVm9zUjBGQk1rTXNTMEZCTTBNN1FVRkRRU3hYUVVGTFVDeE5RVUZNTEVOQlFWbFJMR2RDUVVGYUxFTkJRVFpDU2l4SlFVRTNRanRCUVVOQkxGZEJRVXRHTEU5QlFVd3NRMEZCWVU4c1ZVRkJZaXhEUVVGM1Frd3NTVUZCZUVJN1FVRkRRU3hoUVVGUExFbEJRVWxOTEdsRVFVRktMRU5CUVZrc1MwRkJTMFVzUlVGQmFrSXNSVUZCY1VKRExHZEVRVUZOTEVOQlFVTjNTeXhoUVVFMVFpeEZRVUV5UTJwTUxFbEJRVE5ETEVWQlFXbEVMRWxCUVdwRUxFTkJRVkE3UVVGRFNEdEJRV2hDVERzN1FVRkJRVHRCUVVGQk8wRkJiVUpQTEVsQlFVMHdhRUlzVlVGQllqdEJRVUZCTzBGQlFVRTdRVUZEU1N4elFrRkJXUzluUWl4RFFVRmFMRVZCUVdVN1FVRkJRVHM3UVVGRFdDeFRRVUZMUlN4VFFVRk1MRWRCUVdsQ1JpeERRVUZETEVOQlFVTklMRVZCUVc1Q08wRkJRMEVzVTBGQlMwa3NSVUZCVEN4SFFVRlZSQ3hEUVVGV08wRkJRMEVzVTBGQlMwOHNUMEZCVEN4SFFVRmxVQ3hEUVVGRExFTkJRVU5STEdWQlFVWXNUVUZCZFVKRExITkVRVUZaTEVOQlFVTkdMRTlCUVc1RU8wRkJRMGc3TzBGQlRFdzdRVUZCUVR0QlFVRkJMQ3REUVZGSk8wRkJRMGtzWVVGQlR5eExRVUZMVGl4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllUWm5RaXh2UTBGQmNFSTdRVUZEU0R0QlFWWk1PMEZCUVVFN1FVRkJRU3dyUTBGaFNUdEJRVU5KTEdGQlFVOHNTMEZCU3k5blFpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVGhuUWl4dlEwRkJjRUk3UVVGRFNEdEJRV1pNTzBGQlFVRTdRVUZCUVN4dlEwRnJRa2s3UVVGRFNTeGhRVUZQTEV0QlFVdG9hRUlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdFclowSXNkVUpCUVhCQ08wRkJRMGc3UVVGd1FrdzdRVUZCUVR0QlFVRkJMRzlEUVhWQ1NUdEJRVU5KTEdGQlFVOHNTMEZCUzJwb1FpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZV2RvUWl4MVFrRkJjRUk3UVVGRFNEdEJRWHBDVER0QlFVRkJPMEZCUVVFc2VVTkJORUpKTzBGQlEwa3NWVUZCU1VNc1QwRkJUeXhIUVVGSExFdEJRVXR1YUVJc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRnJhRUlzTkVKQlFUTkNMRU5CUkVvc1EwRkROa1E3TzBGQlEzcEVMRlZCUVVrM1JpeFBRVUZQTEVkQlFVY3NTMEZCUzNaaUxFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhiV2hDTERSQ1FVRXpRaXhEUVVaS0xFTkJSVFpFT3p0QlFVTjZSQ3hoUVVGUE0yaENMR2xFUVVGUExFTkJRVU0wYUVJc2IwSkJRVklzUTBGQk5rSXZSaXhQUVVFM1FpeEZRVUZ6UXpSR0xFOUJRWFJETEVOQlFWQTdRVUZEU0R0QlFXaERURHRCUVVGQk8wRkJRVUVzZFVOQmJVTkpPMEZCUTBrc1ZVRkJTVUVzVDBGQlR5eEhRVUZITEV0QlFVdHVhRUlzUlVGQlRDeERRVUZSUlN4SlFVRlNMRU5CUVdGeGFFSXNNRUpCUVROQ0xFTkJSRW9zUTBGRE1rUTdPMEZCUTNaRUxGVkJRVWxvUnl4UFFVRlBMRWRCUVVjc1MwRkJTM1ppTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGMyaENMREJDUVVFelFpeERRVVpLTEVOQlJUSkVPenRCUVVOMlJDeGhRVUZQT1doQ0xHbEVRVUZQTEVOQlFVTTBhRUlzYjBKQlFWSXNRMEZCTmtJdlJpeFBRVUUzUWl4RlFVRnpRelJHTEU5QlFYUkRMRU5CUVZBN1FVRkRTRHRCUVhaRFREdEJRVUZCTzBGQlFVRXNkVU5CTUVOSk8wRkJRMGtzVlVGQlNVRXNUMEZCVHl4SFFVRkhMRXRCUVV0dWFFSXNSVUZCVEN4RFFVRlJSU3hKUVVGU0xFTkJRV0YxYUVJc2VVSkJRVE5DTEVOQlJFb3NRMEZETUVRN08wRkJRM1JFTEZWQlFVbHNSeXhQUVVGUExFZEJRVWNzUzBGQlMzWmlMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoZDJoQ0xIbENRVUV6UWl4RFFVWktMRU5CUlRCRU96dEJRVU4wUkN4aFFVRlBhR2xDTEdsRVFVRlBMRU5CUVVNMGFFSXNiMEpCUVZJc1EwRkJOa0l2Uml4UFFVRTNRaXhGUVVGelF6UkdMRTlCUVhSRExFTkJRVkE3UVVGRFNEdEJRVGxEVER0QlFVRkJPMEZCUVVFc2MwTkJhVVJKTzBGQlEwa3NZVUZCVHl4TFFVRkxibWhDTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGVXRXNhMEpCUVhCQ08wRkJRMGc3UVVGdVJFdzdRVUZCUVR0QlFVRkJMR2xEUVhORVNUdEJRVU5KTEdGQlFVOHNTMEZCU3pOaExFVkJRVXdzUTBGQlVVVXNTVUZCVWl4RFFVRmhkMkVzWjBKQlFYQkNPMEZCUTBnN1FVRjRSRXc3UVVGQlFUdEJRVUZCTERCRFFUSkVTVHRCUVVOSkxHRkJRVThzUzBGQlN6RmhMRVZCUVV3c1EwRkJVVVVzU1VGQlVpeERRVUZoZVdoQ0xHbENRVUZ3UWp0QlFVTklPMEZCTjBSTU8wRkJRVUU3UVVGQlFTeHZRMEZuUlVrN1FVRkRTU3hoUVVGUExFdEJRVXN6YUVJc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRnJZaXhYUVVGd1FqdEJRVU5JTzBGQmJFVk1PMEZCUVVFN1FVRkJRU3huUkVGeFJVazdRVUZEU1N4aFFVRlBMRXRCUVV0d1lpeEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZVzFpTEhkQ1FVRndRanRCUVVOSU8wRkJka1ZNTzBGQlFVRTdRVUZCUVN4cFJFRXdSVWs3UVVGRFNTeFZRVUZKZFVjc1QwRkJUeXhIUVVGSExFdEJRVXMxYUVJc1JVRkJUQ3hEUVVGUlJTeEpRVUZTTEVOQlFXRXdhRUlzVDBGQk0wSTdRVUZEUVN4VlFVRkpMRU5CUVVOQkxFOUJRVXdzUlVGQll5eFBRVUZQTEVWQlFWQTdRVUZGWkN4aFFVRlBRU3hQUVVGUExFTkJRVU40VUN4SFFVRlNMRU5CUVZrc1ZVRkJRM2xRTEUxQlFVUXNSVUZCV1R0QlFVTXpRaXhsUVVGUExFbEJRVWxETEhGQ1FVRktMRU5CUVRCQ1JDeE5RVUV4UWl4RFFVRlFPMEZCUTBnc1QwRkdUU3hEUVVGUU8wRkJSMGc3UVVGcVJrdzdPMEZCUVVFN1FVRkJRVHRCUVc5R1R5eEpRVUZOUXl4eFFrRkJZanRCUVVGQk8wRkJRVUU3UVVGRlNUdEJRVU5CTzBGQlEwRXNiVU5CUTBFN1FVRkJRVHM3UVVGQlFTeHpRMEZFWlROYUxFbEJRMlk3UVVGRVpVRXNWVUZEWmp0QlFVRkJPenRCUVVOSkxGRkJRVWRCTEVsQlFVa3NRMEZCUTNWSExFMUJRVXdzUzBGQlowSXNRMEZCYmtJc1JVRkJjMEk3UVVGRGJFSXNWMEZCUzNSUExGVkJRVXdzUjBGQmEwSXJTQ3hKUVVGSkxFTkJRVU1zUTBGQlJDeERRVUZLTEVOQlFWRTVTQ3hYUVVFeFFqdEJRVU5CTEZkQlFVc3dhRUlzWjBKQlFVd3NSMEZCZDBJMVdpeEpRVUZKTEVOQlFVTXNRMEZCUkN4RFFVRktMRU5CUVZFMldpeHJRa0ZCVWl4RFFVRXlRa01zVjBGQk0wSXNUVUZCTkVNc1MwRkJjRVU3UVVGRFFTeFhRVUZMUXl4VlFVRk1MRWRCUVd0Q1F5eFJRVUZSTEVOQlFVTm9ZU3hKUVVGSkxFTkJRVU1zUTBGQlJDeERRVUZLTEVOQlFWRnBZU3hYUVVGVUxFVkJRWEZDTEVWQlFYSkNMRU5CUVRGQ08wRkJRMEVzVjBGQlMwTXNWVUZCVEN4SFFVRnJRa1lzVVVGQlVTeERRVUZEYUdFc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQlNpeERRVUZSYldFc1YwRkJWQ3hGUVVGeFFpeEZRVUZ5UWl4RFFVRXhRanRCUVVOSUxFdEJURVFzVFVGTFR5eEpRVUZIYm1Fc1NVRkJTU3hEUVVGRGRVY3NUVUZCVEN4TFFVRm5RaXhEUVVGdVFpeEZRVUZ6UWp0QlFVTjZRaXhYUVVGTGRFOHNWVUZCVEN4SFFVRnJRaXRJTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVhSQ08wRkJRMEVzVjBGQlN6UmFMR2RDUVVGTUxFZEJRWGRDTlZvc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQk5VSTdRVUZEUVN4WFFVRkxhMkVzVlVGQlRDeEhRVUZyUW14aExFbEJRVWtzUTBGQlF5eERRVUZFTEVOQlFYUkNPMEZCUTBFc1YwRkJTeXRhTEZWQlFVd3NSMEZCYTBJdldpeEpRVUZKTEVOQlFVTXNRMEZCUkN4RFFVRjBRanRCUVVOSU8wRkJRMG83TzBGQmFrSk1PMEZCUVVFN1FVRkJRU3dyUWtGdlFrazdRVUZEU1N4dFEwRkJjMElzUzBGQlN5OUlMRlZCUVROQ0xHbERRVUUwUkN4TFFVRkxNbWhDTEdkQ1FVRnFSU3d5UWtGQmEwY3NTMEZCUzAwc1ZVRkJka2NzTWtKQlFXdEpMRXRCUVV0SUxGVkJRWFpKTzBGQlEwZzdRVUYwUWt3N08wRkJRVUU3UVVGQlFUdEJRWGxDVHl4SlFVRk5NMWdzZDBKQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc2IwTkJRVmxwUXl4RlFVRmFMRVZCUTBFN1FVRkJRVHM3UVVGRFNTeFRRVUZMTlUwc1JVRkJUQ3hIUVVGVk5FMHNSVUZCVmp0QlFVTkJMRk5CUVV0NFRpeE5RVUZNTEVkQlFXTXNTVUZCU1VNc2IwUkJRVW9zUlVGQlpEdEJRVU5CTEZOQlFVdERMRTlCUVV3c1IwRkJaU3hKUVVGSlF5dzJSRUZCU2l4RlFVRm1PMEZCUTBnN08wRkJVRXc3UVVGQlFUdEJRVUZCTEdkRFFWVkpPMEZCUTBrc1ZVRkJTVU1zU1VGQlNTeEhRVUZITEVWQlFWZzdRVUZGUVN4WFFVRkxTaXhOUVVGTUxFTkJRVmxMTEhkQ1FVRmFMRWRCUVhWRExFbEJRWFpETzBGQlEwRXNWMEZCUzB3c1RVRkJUQ3hEUVVGWlRTeHZRMEZCV2l4SFFVRnRSQ3hMUVVGdVJEdEJRVU5CTEZkQlFVdE9MRTFCUVV3c1EwRkJXVThzTkVKQlFWb3NSMEZCTWtNc1MwRkJNME03UVVGRFFTeFhRVUZMVUN4TlFVRk1MRU5CUVZsUkxHZENRVUZhTEVOQlFUWkNTaXhKUVVFM1FqdEJRVU5CTEZkQlFVdEdMRTlCUVV3c1EwRkJZVThzVlVGQllpeERRVUYzUWt3c1NVRkJlRUk3UVVGRFFTeGhRVUZQTEVsQlFVbE5MR2xFUVVGS0xFTkJRVmtzUzBGQlMwVXNSVUZCYWtJc1JVRkJjVUpETEdkRVFVRk5MRU5CUVVNd1N5eDNRa0ZCTlVJc1JVRkJjMFJ1VEN4SlFVRjBSQ3hGUVVFMFJDeEpRVUUxUkN4RFFVRlFPMEZCUTBnN1FVRnVRa3c3TzBGQlFVRTdRVUZCUVN4Sk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkRia2xCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlJVRXNTVUZCVFcxcVFpeFhRVUZYTEVkQlFVY3NUMEZCY0VJN08wbEJSVTFETEVjN096czdPM2RDUVVWclFqdEJRVU5vUWl4aFFVRlBMRXRCUVV0RExHTkJRVm83UVVGRFNDeExPM05DUVVWcFFucGtMRXNzUlVGQlR6dEJRVU55UWl4VlFVRkhMRXRCUVV0NVpDeGpRVUZNTEV0QlFYZENlbVFzUzBGQk0wSXNSVUZCYTBNN1FVRkRPVUk3UVVGRFNEczdRVUZGUkN4WFFVRkxlV1FzWTBGQlRDeEhRVUZ6UW5wa0xFdEJRWFJDTzBGQlEwRXpReXhqUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4bFFVRm9RaXhGUVVGcFF6dEJRVUZEUXl4alFVRk5MRVZCUVVWM1F6dEJRVUZVTEU5QlFXcERMRU5CUVhaQ08wRkJRMGc3T3p0QlFVVkVMR1ZCUVZrMlJ5eExRVUZhTEVWQlFXMUNhMVVzV1VGQmJrSXNSVUZCYVVNeVF5eGhRVUZxUXl4RlFVRm5SRFZYTEU5QlFXaEVMRVZCUTBFN1FVRkJRVHM3UVVGRFNTeFRRVUZMTmxjc1RVRkJUQ3hIUVVGak9WY3NTMEZCWkR0QlFVTkJMRk5CUVVzclZ5eGhRVUZNTEVkQlFYRkNOME1zV1VGQmNrSTdRVUZEUVN4VFFVRkxPRU1zVVVGQlRDeEhRVUZuUWk5WExFOUJRV2hDTzBGQlEwRXNVMEZCUzJkWUxITkNRVUZNTEVkQlFUaENMRXRCUVRsQ08wRkJRMEVzVTBGQlMwTXNZMEZCVEN4SFFVRnpRaXhWUVVGVlRDeGhRVUZvUXp0QlFVTkJMRk5CUVV0TkxFbEJRVXdzUjBGQldYcGhMRTlCUVZvN1FVRkRRU3hUUVVGTGRrb3NUVUZCVEN4SFFVRmpMRWxCUVVsRExHOUVRVUZLTEVWQlFXUTdRVUZEUVN4VFFVRkxaMnRDTEV0QlFVd3NSMEZCWVN4SlFVRkpPV2hDTEhORVFVRktMRVZCUVdJN1FVRkZRU3hUUVVGTEsyaENMRzFDUVVGTUxFZEJRVEpDTEVsQlFUTkNPMEZCUTBFc1UwRkJTME1zWVVGQlRDeEhRVUZ6UWl4SlFVRjBRanRCUVVOQkxGTkJRVXRETEdGQlFVd3NSMEZCYzBJc1NVRkJkRUk3UVVGRFFTeFRRVUZMUXl4WFFVRk1MRWRCUVhOQ0xFdEJRWFJDTzBGQlEwRXNVMEZCUzBNc05rSkJRVXdzUjBGQmNVTXNTMEZCY2tNc1EwRmtTaXhEUVdkQ1NUczdRVUZEUVN4VFFVRkxReXhuUWtGQlRDeEhRVUYzUWl4SlFVRkpNMWdzYzBSQlFVb3NRMEZCYVVJc1MwRkJTeXRYTEUxQlFYUkNMRVZCUVRoQ0xFdEJRVXRGTEZGQlFXNURMRVZCUVRaRExFTkJRVGRETEVOQlFYaENPMEZCUlVFc1UwRkJTMWNzV1VGQlRDeEhRVUZ2UWl4SlFVRndRanRCUVVOQkxGTkJRVXRETEZkQlFVd3NSMEZCYlVJc1NVRkJia0k3UVVGRFFTeFRRVUZMUXl4WFFVRk1MRWRCUVcxQ0xFbEJRVzVDTEVOQmNrSktMRU5CZFVKSk96dEJRVU5CTEZOQlFVdERMRzFDUVVGTUxFZEJRVEpDTEVsQlFUTkNPMEZCUTBFc1UwRkJTME1zZFVKQlFVd3NSMEZCSzBJc1NVRkJMMEk3UVVGRFFTeFRRVUZMUXl4cFFrRkJUQ3hIUVVGNVFpeERRVUY2UWp0QlFVTkJMRk5CUVV0RExIZERRVUZNTEVkQlFXZEVMRU5CUVdoRU8wRkJRMEVzVTBGQlMwTXNkMEpCUVV3c1IwRkJaME1zU1VGQmFFTTdRVUZGUVN4VFFVRkxReXhaUVVGTUxFZEJRVzlDTEVsQlFYQkNPMEZCUTBFc1UwRkJTME1zWTBGQlRDeEhRVUZ6UWl4TFFVRjBRanRCUVVWQkxGTkJRVXRETEdkQ1FVRk1MRWRCUVhkQ0xFbEJRWGhDTzBGQlEwRXNVMEZCUzBNc2JVSkJRVXdzUjBGQk1rSXNTVUZCTTBJN1FVRkZRU3hUUVVGTFF5eDNRa0ZCVEN4SFFVRm5ReXhKUVVGb1F6dEJRVU5CTEZOQlFVdERMRzFDUVVGTUxFZEJRVEpDTEV0QlFUTkNPMEZCUTBFc1UwRkJTME1zYlVKQlFVd3NSMEZCTWtJc1MwRkJNMEk3UVVGRFFTeFRRVUZMUXl4MVFrRkJUQ3hIUVVFclFpeEpRVUV2UWp0QlFVTkJMRk5CUVV0RExIZENRVUZNTEVkQlFXZERMRU5CUVdoRE8wRkJRMEVzVTBGQlMwTXNiME5CUVV3c1IwRkJORU1zUTBGQk5VTTdRVUZEUVN4VFFVRkxReXgzUWtGQlRDeEhRVUZuUXl4RFFVRm9RenRCUVVOQkxGTkJRVXRETEhGQ1FVRk1MRWRCUVRaQ0xFTkJRVGRDTzBGQlJVRXNVMEZCUzBNc01rSkJRVXdzUjBGQmJVTXNhMFJCUVc1RE8wRkJRMEVzVTBGQlMwTXNLMEpCUVV3c1IwRkJkVU1zYlVKQlFYWkRPMEZCUTBFc1UwRkJTME1zYlVKQlFVd3NSMEZCTWtJc1owSkJRVE5DTzBGQlJVRXNVMEZCUzBNc1YwRkJUQ3hIUVVGclF5eEpRVUZzUXp0QlFVTkJMRk5CUVV0RExIVkNRVUZNTEVkQlFXdERMRWxCUVd4RE8wRkJRMEVzVTBGQlMwTXNhMEpCUVV3c1IwRkJhME1zU1VGQmJFTTdRVUZEU0RzN096dDFRMEZIUkR0QlFVTkpMRmRCUVV0RExFOUJRVXdzUjBGQlpTeEpRVUZKUXl3MFJFRkJTaXhEUVVGclFpeEpRVUZzUWl4RFFVRm1PMEZCUTBFc1lVRkJUeXhMUVVGTFJDeFBRVUZhTzBGQlEwZzdPenQzUTBGSFJEdEJRVU5KTEZkQlFVdEJMRTlCUVV3c1IwRkJaU3hKUVVGSlF5dzBSRUZCU2l4RFFVRnJRaXhKUVVGc1FpeERRVUZtTzBGQlEwRXNWMEZCUzBRc1QwRkJUQ3hEUVVGaGJHMUNMRTFCUVdJc1EwRkJiMEoxVml4cFFrRkJjRUlzUjBGQmQwTXNTMEZCZUVNN1FVRkRRU3hoUVVGUExFdEJRVXN5VVN4UFFVRmFPMEZCUTBnN096dHZRMEZIUkR0QlFVTkpMRmRCUVV0RkxGZEJRVXdzUjBGQmJVSXNTVUZCU1VNc2RVUkJRVW9zUTBGQlpTeEpRVUZtTEVOQlFXNUNPMEZCUTBFc1lVRkJUeXhMUVVGTFJDeFhRVUZhTzBGQlEwZzdPenMwUWtGRlR6dEJRVVZLTEZWQlFVa3NRMEZCUXl4TFFVRkxOVUlzV1VGQlRpeEpRVUZ6UWl4RFFVRkRMRXRCUVV0RExGZEJRV2hETEVWQlEwRTdRVUZEU1R0QlFVTkJMR0ZCUVV0VUxFbEJRVXdzUTBGQlZYTkRMRWxCUVZZc1EwRkJaU3cwUmtGQlpqczdRVUZEUVN4alFVRk5MRWxCUVVrM2FrSXNTMEZCU2l4RFFVRlZMRFJHUVVGV0xFTkJRVTQ3UVVGRFNEczdRVUZGUkN4VlFVRkpMRU5CUVVNc1MwRkJTemhxUWl4aFFVRk1MRU5CUVcxQ0xFdEJRVXMxUXl4TlFVRjRRaXhEUVVGTUxFVkJRMEU3UVVGRFNUdEJRVU5CTEdGQlFVdEJMRTFCUVV3c1IwRkJZeXhGUVVGa096dEJRVU5CTEdGQlFVdExMRWxCUVV3c1EwRkJWWE5ETEVsQlFWWXNRMEZCWlN4MVJFRkJaanRCUVVOSU96dEJRVVZFTEZWQlFVa3NRMEZCUXl4TFFVRkxSU3h4UWtGQlRDeERRVUV5UWl4TFFVRkxla01zWTBGQmFFTXNRMEZCVEN4RlFVTkJPMEZCUTBrN1FVRkRRU3hoUVVGTFFTeGpRVUZNTEVkQlFYTkNMRVZCUVhSQ096dEJRVU5CTEdGQlFVdERMRWxCUVV3c1EwRkJWWE5ETEVsQlFWWXNRMEZCWlN4MVJFRkJaanRCUVVOSU96dEJRVVZFTEZkQlFVdEhMRlZCUVV3N08wRkJRMEVzVjBGQlMwTXNhVU5CUVV3N08wRkJSVUVzVjBGQlMxZ3NWMEZCVEN4SFFVRnRRbGtzYTBSQlFVOHNRMEZCUTBNc1NVRkJNMEk3TzBGQlEwRXNWVUZCU1N4TFFVRkxMME1zVVVGQlRDeEpRVUZwUWl4SlFVRnlRaXhGUVVOQk8wRkJRMGtzWVVGQlMwY3NTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTERCQ1FVRm1PenRCUVVOQkxHRkJRVXR3UkN4alFVRk1MRWRCUVhOQ2NVUXNiMFJCUVZNc1EwRkJRME1zWjBKQlFXaERPenRCUVVOQkxHRkJRVXM1UXl4TFFVRk1MRU5CUVZjclF5eFBRVUZZTEVkQlNFb3NRMEZITUVJN08wRkJRM3BDTEU5QlRFUXNUVUZQUVR0QlFVTkpMR0ZCUVV0b1JDeEpRVUZNTEVOQlFWVTJReXhKUVVGV0xFTkJRV1VzTkVKQlFXWTdPMEZCUTBFc1lVRkJTM0JFTEdOQlFVd3NSMEZCYzBKeFJDeHZSRUZCVXl4RFFVRkRSeXhSUVVGb1F6dEJRVU5JTzBGQlEwb3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUczdPenR2UTBGRFowSm9SeXhaTEVWQlEyaENPMEZCUTBrc1YwRkJTMjFFTEdGQlFVd3NSMEZCY1VKdVJDeFpRVUZ5UWp0QlFVTkJMR0ZCUVU4c1NVRkJVRHRCUVVOSUxFc3NRMEZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0dlEwRkRaMEpwUnl4WkxFVkJRMmhDTzBGQlEwa3NWMEZCU3k5RExHRkJRVXdzUjBGQmNVSXJReXhaUVVGeVFqdEJRVU5CTEdGQlFVOHNTVUZCVUR0QlFVTklMRXNzUTBGRlJEdEJRVU5CTzBGQlEwRTdPenM3YjBOQlEyZENia2NzV1N4RlFVTm9RanRCUVVOSkxGVkJRVWtzUzBGQlMyOUhMR0ZCUVV3c1NVRkJjMEpNTEc5RVFVRlRMRU5CUVVOSExGRkJRWEJETEVWQlEwa3NUMEZCVHl4TFFVRlFPMEZCUlVvc1ZVRkJTVWNzUjBGQlJ5eEhRVUZITEV0QlFVdDRSQ3hoUVVGbU8wRkJRMEVzVjBGQlMwRXNZVUZCVEN4SFFVRnhRamRETEZsQlFYSkNPenRCUVVOQkxGVkJRVWtzUzBGQlMzTkhMSE5DUVVGTUxFTkJRVFJDUkN4SFFVRTFRaXhEUVVGS0xFVkJRMEU3UVVGRFNTeGhRVUZMUlN4NVFrRkJURHRCUVVOSUxFOUJTRVFzVFVGTFFUdEJRVU5KTEZsQlFVa3NTMEZCUzNCRUxHMUNRVUZNTEVsQlFUUkNMRWxCUVdoRExFVkJRMEU3UVVGRFNTeGxRVUZMUVN4dFFrRkJUQ3hIUVVFeVFpeEpRVUZKY0VVc01rVkJRVW9zUlVGQk0wSTdRVUZEU0RzN1FVRkZSQ3hoUVVGTGIwVXNiVUpCUVV3c1EwRkJlVUkzUkN4NVFrRkJla0lzUjBGQmNVUkJMR2xHUVVGNVFpeERRVUZEU3l4NVFrRkJMMFU3UVVGRFFYSmtMR2RDUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4elFrRkJhRUlzUlVGQmQwTTdRVUZCUTBNc1owSkJRVTBzUlVGQlJTeExRVUZMTUdkQ08wRkJRV1FzVTBGQmVFTXNRMEZCZGtJN1FVRkRTRHM3UVVGRlJDeGhRVUZQTEVsQlFWQTdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TmtOQlEzbENjVVFzTWtJc1JVRkRla0k3UVVGRFNTeFZRVUZKTEV0QlFVdEtMR0ZCUVV3c1NVRkJjMEpNTEc5RVFVRlRMRU5CUVVOVkxHVkJRWEJETEVWQlEwa3NUMEZCVHl4TFFVRlFPMEZCUlVvc1ZVRkJTVW9zUjBGQlJ5eEhRVUZITEV0QlFVczVReXcyUWtGQlpqdEJRVU5CTEZkQlFVdEJMRFpDUVVGTUxFZEJRWEZEYVVRc01rSkJRWEpET3p0QlFVTkJMRlZCUVVsQkxESkNRVUV5UWl4SlFVRkpMRU5CUVVOSUxFZEJRWEJETEVWQlEwRTdRVUZEU1R0QlFVTkJMR0ZCUVV0RkxIbENRVUZNTzBGQlEwZzdPMEZCUlVRc1lVRkJUeXhKUVVGUU8wRkJRMGdzU3l4RFFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08yZERRVU5aUnl4UkxFVkJRMW83UVVGRFNTeFZRVUZKTEV0QlFVdE9MR0ZCUVV3c1NVRkJjMElzUzBGQlMwRXNZVUZCVEN4SlFVRnpRa3dzYjBSQlFWTXNRMEZCUTBjc1VVRkJNVVFzUlVGRFNTeFBRVUZQTEV0QlFWQTdRVUZGU2l4VlFVRkpVU3hSUVVGUkxFbEJRVWtzUzBGQlMzQkVMRmRCUVhKQ0xFVkJRMGtzVDBGQlR5eEpRVUZRTEVOQlRGSXNRMEZQU1RzN1FVRkRRU3hYUVVGTFFTeFhRVUZNTEVkQlFXMUNiMFFzVVVGQmJrSTdPMEZCUTBFc1YwRkJTMGdzZVVKQlFVdzdPMEZCUlVFc1lVRkJUeXhKUVVGUU8wRkJRMGdzU3l4RFFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN2QwTkJRMjlDYmtnc2JVSXNSVUZEY0VJN1FVRkRTU3hYUVVGTE1rUXNjMEpCUVV3c1IwRkJPRUl6UkN4dFFrRkJPVUk3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN05rSkJRMU4wVkN4TExFVkJRMVE3UVVGRFNTeFZRVUZKTEV0QlFVdHpZU3hoUVVGTUxFbEJRWE5DVEN4dlJFRkJVeXhEUVVGRFJ5eFJRVUZ3UXl4RlFVTkpMRTlCUVU4c1MwRkJVRHRCUVVWS0xGZEJRVXQwUkN4TlFVRk1MRWRCUVdNc1JVRkJaQ3hEUVVwS0xFTkJTWE5DT3p0QlFVVnNRaXhWUVVGSkxFTkJRVU1zUzBGQlN6UkRMR0ZCUVV3c1EwRkJiVUl4V2l4TFFVRnVRaXhEUVVGTUxFVkJRMEU3UVVGRFNTeGhRVUZMYlZnc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml4RFFVRmxMRzlDUVVGbU96dEJRVU5CTEdWQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxGZEJRVXRzUkN4TlFVRk1MRWRCUVdNNVZ5eExRVUZrTzBGQlEwRXNWMEZCU3pCWUxHZENRVUZNTEVOQlFYTkNkbGdzUzBGQmRFSXNSMEZCT0VKSUxFdEJRVGxDTzBGQlEwRXNZVUZCVHl4SlFVRlFPMEZCUTBnc1N5eERRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdjVU5CUTJsQ2IxUXNUeXhGUVVOcVFqdEJRVU5KTEZWQlFVa3NTMEZCUzJ0SUxHRkJRVXdzU1VGQmMwSk1MRzlFUVVGVExFTkJRVU5WTEdWQlFXaERMRWxCUVcxRUxFdEJRVXRzUkN3MlFrRkJOVVFzUlVGQk1rWTdRVUZEZGtZc1pVRkJUeXhMUVVGUU8wRkJRMGc3TzBGQlJVUXNWMEZCUzFBc1kwRkJUQ3hIUVVGelFpeEZRVUYwUWl4RFFVeEtMRU5CU3poQ096dEJRVVV4UWl4VlFVRkpMRU5CUVVNc1MwRkJTM2xETEhGQ1FVRk1MRU5CUVRKQ2RrY3NUMEZCTTBJc1EwRkJUQ3hGUVVOQk8wRkJRMGtzWVVGQlN5dEVMRWxCUVV3c1EwRkJWVFpETEVsQlFWWXNRMEZCWlN3MFFrRkJaanM3UVVGRFFTeGxRVUZQTEV0QlFWQTdRVUZEU0RzN1FVRkZSQ3hYUVVGTE9VTXNZMEZCVEN4SFFVRnpRaXhWUVVGVk9VUXNUMEZCYUVNN1FVRkRRU3hYUVVGTFowVXNTMEZCVEN4RFFVRlhOMmhDTEU5QlFWZ3NSMEZCY1VJc1MwRkJTekpvUWl4alFVRXhRanRCUVVOQkxHRkJRVThzU1VGQlVEdEJRVU5JT3pzN08wRkJUMFE3T3pzN096czdLMEpCVDFjeVJDeFhMRVZCUVdGRExGVXNSVUZEZUVJN1FVRkRTU3hYUVVGTGJrUXNXVUZCVEN4SFFVRnZRbXRFTEZkQlFYQkNPMEZCUTBFc1YwRkJTMnBFTEZkQlFVd3NSMEZCYlVKclJDeFZRVUZ1UWp0QlFVTklMRXNzUTBGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0blJFRkZRVHRCUVVOSkxGVkJRVWtzUzBGQlN6VkNMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVORExFbEJRV2hETEVWQlEwa3NUMEZCVHl4SlFVRlFMRU5CUmxJc1EwRkZjVUk3TzBGQlJXcENMRlZCUVVrc1MwRkJTMklzVjBGQlRDeEpRVUZ2UWxrc2EwUkJRVThzUTBGQlEybENMRTlCUVRWQ0xFbEJRWFZETEV0QlFVczFRaXgxUWtGQlRDeERRVUUyUWpaQ0xGRkJRWGhGTEVWQlEwRTdRVUZEU1N4aFFVRkxPVUlzVjBGQlRDeEhRVUZ0UWxrc2EwUkJRVThzUTBGQlEwTXNTVUZCTTBJN1FVRkRRU3hsUVVGUExFbEJRVkE3UVVGRFNEczdRVUZGUkN4VlFVRkpMRXRCUVV0aUxGZEJRVXdzU1VGQmIwSlpMR3RFUVVGUExFTkJRVU50UWl4WFFVRTFRaXhKUVVFeVF5eExRVUZMTjBJc2EwSkJRVXdzUTBGQmQwSTBRaXhSUVVGMlJTeEZRVU5CTzBGQlEwa3NZVUZCU3psQ0xGZEJRVXdzUjBGQmJVSlpMR3RFUVVGUExFTkJRVU5ETEVsQlFUTkNPMEZCUTBFc1pVRkJUeXhKUVVGUU8wRkJRMGc3TzBGQlJVUXNZVUZCVHl4TFFVRlFPMEZCUTBnc1N5eERRVVZFTzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPekpDUVVWQk8wRkJRMGtzVjBGQlN6VkRMRWxCUVV3c1EwRkJWWGhoTEVkQlFWWXNRMEZCWXl4eFFrRkJaRHM3UVVGRlFTeFZRVUZKTEV0QlFVc3laQ3hoUVVGTUxFbEJRWE5DVEN4dlJFRkJVeXhEUVVGRFJ5eFJRVUZ3UXl4RlFVRTRRenRCUVVNeFF5eGhRVUZMYWtRc1NVRkJUQ3hEUVVGVmMwTXNTVUZCVml4RFFVRmxMSGRFUVVGbU96dEJRVU5CTEdWQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxGVkJRVWtzUTBGQlF5eExRVUZMUXl4aFFVRk1MRU5CUVcxQ0xFdEJRVXMxUXl4TlFVRjRRaXhEUVVGRUxFbEJRVzlETEVOQlFVTXNTMEZCU3paRExIRkNRVUZNTEVOQlFUSkNMRXRCUVV0NlF5eGpRVUZvUXl4RFFVRjZReXhGUVVOQk8wRkJRMGtzWVVGQlMwTXNTVUZCVEN4RFFVRlZjME1zU1VGQlZpeERRVUZsTEdsRVFVRm1PenRCUVVOQkxHVkJRVThzUzBGQlVEdEJRVU5JT3p0QlFVVkVMRmRCUVV0UUxGZEJRVXdzUjBGQmJVSlpMR3RFUVVGUExFTkJRVU5wUWl4UFFVRXpRanRCUVVOQkxGZEJRVXMxUWl4MVFrRkJUQ3hIUVVFclFpeEpRVUZKSzBJc01rUkJRVW9zUTBGRE9VSTdRVUZEUjBNc2EwSkJRVlVzUlVGQlJTeExRVVJtTzBGQlJVZElMR2RDUVVGUkxFVkJRVVVzUzBGR1lqdEJRVWRIYm01Q0xHVkJRVThzUlVGQlJTeGxRVWhhTzBGQlNVZDFia0lzSzBKQlFYVkNMRVZCUVVVc1MwRktOVUk3UVVGTFIwTXNORUpCUVc5Q0xFVkJRVVVzUzBGTWVrSTdRVUZOUjNCWUxIZENRVUZuUWl4RlFVRkZPMEZCVG5KQ0xFOUJSRGhDTEVOQlFTOUNPMEZCVlVGNlRpeGpRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXg1UWtGQmFFSXNSVUZCTWtNN1FVRkJRME1zWTBGQlRTeEZRVUZGTEV0QlFVdDNhVUk3UVVGQlpDeFBRVUV6UXl4RFFVRjJRanM3UVVGRFFTeFhRVUZMTDBJc1MwRkJUQ3hEUVVGWEswTXNUMEZCV0N4SFFURkNTaXhEUVRCQ01FSTdPenRCUVVOMFFpeGhRVUZQTEVsQlFWQTdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3ZVVOQlJVRTdRVUZEU1N4VlFVRkpMRU5CUVVNc1MwRkJTMmhDTEhWQ1FVRk1MRU5CUVRaQ2EwTXNiMEpCUVd4RExFVkJRMEU3UVVGRFNUdEJRVU5CTzBGQlEwZzdPMEZCUlVRc1YwRkJTMnhETEhWQ1FVRk1MRU5CUVRaQ2EwTXNiMEpCUVRkQ0xFZEJRVzlFTEV0QlFYQkVPenRCUVVOQkxGVkJRVWtzUzBGQlMyeERMSFZDUVVGTUxFTkJRVFpDYVVNc2RVSkJRV3BETEVWQlEwRTdRVUZEU1R0QlFVTkJMR0ZCUVV0cVJTeEpRVUZNTEVOQlFWVTJReXhKUVVGV0xFTkJRV1VzZFVaQlFXWTdPMEZCUTBFc1lVRkJTMklzZFVKQlFVd3NRMEZCTmtKMGJFSXNUMEZCTjBJc1IwRkRTU3h4UTBGQmNVTXNTMEZCUzNOc1FpeDFRa0ZCVEN4RFFVRTJRbXhXTEdkQ1FVUjBSVHRCUVVWQmVrNHNaMEpCUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4SlFVRkpReXhYUVVGS0xFTkJRV2RDTEhsQ1FVRm9RaXhGUVVFeVF6dEJRVUZEUXl4blFrRkJUU3hGUVVGRkxFdEJRVXQzYVVJN1FVRkJaQ3hUUVVFelF5eERRVUYyUWp0QlFVTklMRTlCVUVRc1RVRlRRVHRCUVVOSk8wRkJRMEVzWVVGQlMyaERMRWxCUVV3c1EwRkJWVFpETEVsQlFWWXNRMEZCWlN4dFIwRkJaanM3UVVGRFFTeGhRVUZMYzBJc2FVSkJRVXc3TzBGQlEwRXNZVUZCUzBNc2EwSkJRVXc3UVVGRFNEdEJRVU5LTEVzc1EwRkZSRHRCUVVOQk8wRkJRMEU3T3pzN2IwTkJSVUU3UVVGRFNTeFZRVUZKTEV0QlFVdHlReXhYUVVGTUxFbEJRVzlDV1N4clJFRkJUeXhEUVVGRGFVSXNUMEZCTlVJc1NVRkJkVU1zUzBGQlN6VkNMSFZDUVVGTUxFTkJRVFpDTmtJc1VVRkJlRVVzUlVGQmEwWTdRVUZET1VVN1FVRkRTRHM3UVVGRlJDeFZRVUZKTEV0QlFVczNRaXgxUWtGQlRDeERRVUUyUW10RExHOUNRVUUzUWl4SlFVRnhSQ3hEUVVGRExFdEJRVXRzUXl4MVFrRkJUQ3hEUVVFMlFtbERMSFZDUVVGMlJpeEZRVU5CTzBGQlEwazdRVUZEUVR0QlFVTkJMR0ZCUVV0SkxFdEJRVXdzUTBGQlZ5eEpRVUZKYmxnc2VVUkJRVW9zUjBGQmMwSnZXQ3hUUVVGMFFpeEZRVUZZTzBGQlEwZzdPMEZCUTBRc1YwRkJTME1zWjBKQlFVdzdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3T3paQ1FVVkJPMEZCUTBrc1ZVRkJTU3hMUVVGTGNFSXNZVUZCVEN4SlFVRnpRa3dzYjBSQlFWTXNRMEZCUTBjc1VVRkJjRU1zUlVGQk9FTTdRVUZETVVNc1pVRkJUeXhMUVVGUU8wRkJRMGc3TzBGQlJVUXNWVUZCU1N4TFFVRkxiRUlzVjBGQlRDeEpRVUZ2UWxrc2EwUkJRVThzUTBGQlEwTXNTVUZCYUVNc1JVRkJjME03UVVGRGJFTXNaVUZCVHl4TFFVRlFPMEZCUTBnc1QwRlFUQ3hEUVZOSk96czdRVUZEUVN4WFFVRkxlVUlzUzBGQlRDeERRVUZYTEVsQlFVbHVXQ3g1UkVGQlNpeEhRVUZ6UW05WUxGTkJRWFJDTEVWQlFWZzdPMEZCUTBFc1YwRkJTMFVzVTBGQlREczdRVUZEUVN4aFFVRlBMRWxCUVZBN1FVRkRTQ3hMTEVOQlJVUTdRVUZGUVR0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenQxUTBGRGJVSTFiMElzVVN4RlFVRlZSQ3hYTEVWQlF6ZENPMEZCUTBrc1ZVRkJTU3hMUVVGTGQyNUNMR0ZCUVV3c1NVRkJjMEpNTEc5RVFVRlRMRU5CUVVOSExGRkJRWEJETEVWQlFUaERPMEZCUXpGRExHVkJRVThzU1VGQlNYZENMREpFUVVGS0xFTkJRWEZDTEV0QlFYSkNMRVZCUVRSQ0xGbEJRVFZDTEVOQlFWQTdRVUZEU0RzN1FVRkZSQ3hWUVVGSkxFdEJRVXN4UXl4WFFVRk1MRWxCUVc5Q1dTeHJSRUZCVHl4RFFVRkRReXhKUVVGb1F5eEZRVUZ6UXp0QlFVTnNReXhsUVVGUExFbEJRVWsyUWl3eVJFRkJTaXhEUVVGeFFpeExRVUZ5UWl4RlFVRTBRaXhWUVVFMVFpeERRVUZRTzBGQlEwZzdPMEZCUlVRc1ZVRkJTVU1zWlVGQlpTeEhRVUZITjBvc0swUkJRV01zUTBGQlF6aEtMSEZDUVVGbUxFTkJRWEZEYUhCQ0xGZEJRWEpETEVWQlFXdEVReXhSUVVGc1JDeERRVUYwUWp0QlFVTkJPRzlDTEhGQ1FVRmxMRU5CUVVNeGIwSXNUVUZCYUVJc1IwRkJlVUlzUzBGQlMwRXNUVUZCT1VJN1FVRkRRU3hWUVVGSk5sVXNWMEZCVnl4SFFVRkhObFFzWlVGQlpTeERRVUZEU2l4VFFVRm9RaXhGUVVGc1FqdEJRVU5CTEZkQlFVdDJReXhYUVVGTUxFZEJRVzFDV1N4clJFRkJUeXhEUVVGRGJVSXNWMEZCTTBJN1FVRkRRU3hYUVVGTE4wSXNhMEpCUVV3c1IwRkJNRUlzU1VGQlNUSkRMQ3RFUVVGS0xFTkJRM1JDYUhCQ0xGRkJSSE5DTEVWQlExcHBjRUlzTUVSQlFXVXNRMEZCUTBNc1VVRkVTaXhGUVVOamJuQkNMRmRCUkdRc1JVRkRNa0pyVml4WFFVUXpRaXh6UlVGRmRVTnNWaXhYUVVGWExFZEJRVWNzUzBGR2NrUXNSVUZCTVVJN08wRkJSMEVzVlVGQlNTeExRVUZMTUc5Q0xFdEJRVXdzUTBGQlYzaFVMRmRCUVZnc1EwRkJTaXhGUVVOQk8wRkJRMGtzWVVGQlMyOVNMR3RDUVVGTUxFTkJRWGRDT0VNc1NVRkJlRUlzT0VOQlFXMUZjSEJDTEZkQlFWY3NSMEZCUnl4TFFVRnFSanRCUVVOSU96dEJRVVZFTUVRc1kwRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNiMEpCUVdoQ0xFVkJRWE5ETzBGQlFVTkRMR05CUVUwc1JVRkJSU3hMUVVGTGVXbENPMEZCUVdRc1QwRkJkRU1zUTBGQmRrSTdRVUZEUVN4aFFVRlBMRWxCUVVsM1F5d3lSRUZCU2l4RFFVRnhRaXhKUVVGeVFpeEZRVUV5UWl4dlFrRkJNMElzUTBGQlVEdEJRVU5JTEVzc1EwRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN2VVTkJRM0ZDTjI5Q0xGRXNSVUZCVlcxbUxHTXNSVUZCWjBKRExGTXNSVUZCVjBNc1lTeEZRVUZsUXl4blFpeEZRVU42UlR0QlFVRkJMRlZCUkRKR09Fb3NUMEZETTBZc2RVVkJSSEZITEVsQlFVazNiMElzTmtSQlFVb3NSVUZEY2tjN1FVRkJRU3hWUVVRclNHMWhMR1ZCUXk5SUxIVkZRVVJwU2l4RFFVTnFTanRCUVVOSkxGVkJRVWtzUzBGQlN6Wk5MR0ZCUVV3c1NVRkJjMEpNTEc5RVFVRlRMRU5CUVVOSExGRkJRWEJETEVWQlFUaERMRTlCUVU4c1NVRkJTWGRDTERKRVFVRktMRU5CUVhGQ0xFdEJRWEpDTEVWQlFUUkNMRmxCUVRWQ0xFTkJRVkE3UVVGRk9VTXNWVUZCU1hwS0xGTkJRVk1zUjBGQlJ5eERRVUZhTEV0QlFXdENReXhoUVVGaExFZEJRVWNzUTBGQmFFSXNTVUZCY1VKRExHZENRVUYyUXl4RFFVRktMRVZCUVRoRUxFOUJRVThzU1VGQlNYVktMREpFUVVGS0xFTkJRWEZDTEV0QlFYSkNMRVZCUVRSQ0xHdEVRVUUxUWl4RFFVRlFPMEZCUlRsRUxGVkJRVWtzUzBGQlN6RkRMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVORExFbEJRV2hETEVWQlFYTkRMRTlCUVU4c1NVRkJTVFpDTERKRVFVRktMRU5CUVhGQ0xFdEJRWEpDTEVWQlFUUkNMRlZCUVRWQ0xFTkJRVkE3UVVGRGRFTXNWMEZCU3pGRExGZEJRVXdzUjBGQmJVSlpMR3RFUVVGUExFTkJRVU50UWl4WFFVRXpRanRCUVVWQkxGVkJRVWx0UWl4UlFVRlJMRWRCUVVkd1N5d3JSRUZCWXl4RFFVRkRjVXNzZFVKQlFXWXNRMEZCZFVOMGNFSXNVVUZCZGtNc1JVRkJhVVJ0Wml4alFVRnFSQ3hGUVVGcFJVTXNVMEZCYWtVc1JVRkJORVZETEdGQlFUVkZMRVZCUVRKR1F5eG5Ra0ZCTTBZc1JVRkJOa2MxUlN4bFFVRTNSeXhEUVVGbU8wRkJRMEV5VHl4alFVRlJMRU5CUVVOcWNFSXNUVUZCVkN4SFFVRnJRaXhMUVVGTFFTeE5RVUYyUWp0QlFVTkJhWEJDTEdOQlFWRXNRMEZCUXk5dlFpeFBRVUZVTEVkQlFXMUNPRzlDTEU5QlFXNUNPMEZCUTBFc1ZVRkJTVzVWTEZkQlFWY3NSMEZCUjI5VkxGRkJRVkVzUTBGQlExZ3NVMEZCVkN4RlFVRnNRanRCUVVOQkxGZEJRVXR5UXl4clFrRkJUQ3hIUVVFd1FpeEpRVUZKTWtNc0swUkJRVW9zUTBGRGRFSm9jRUlzVVVGRWMwSXNSVUZEV21sd1Fpd3dSRUZCWlN4RFFVRkRReXhSUVVSS0xFVkJRMk12U2l4alFVUmtMRVZCUXpoQ2JFc3NWMEZFT1VJc2JVVkJSVzlEYjFVc1VVRkJVU3hEUVVGRFJTeGhRVUZVTEVWQlJuQkRMRVZCUVRGQ096dEJRVWRCTEZWQlFVa3NTMEZCUzJRc1MwRkJUQ3hEUVVGWGVGUXNWMEZCV0N4RFFVRktMRVZCUTBFN1FVRkRTU3hoUVVGTGIxSXNhMEpCUVV3c1EwRkJkMEk0UXl4SlFVRjRRaXc0UTBGQmJVVkZMRkZCUVZFc1EwRkJRMFVzWVVGQlZDeEZRVUZ1UlR0QlFVTklPenRCUVVWRU9XeENMR05CUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4SlFVRkpReXhYUVVGS0xFTkJRV2RDTEc5Q1FVRm9RaXhGUVVGelF6dEJRVUZEUXl4alFVRk5MRVZCUVVVc1MwRkJTM2xwUWp0QlFVRmtMRTlCUVhSRExFTkJRWFpDTzBGQlEwRXNZVUZCVHl4SlFVRkpkME1zTWtSQlFVb3NRMEZCY1VJc1NVRkJja0lzUlVGQk1rSXNiMEpCUVROQ0xFTkJRVkE3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dHhRMEZEYVVJM2IwSXNVU3hGUVVGVlJDeFhMRVZCUXpOQ08wRkJRVUVzVlVGRWQwTnRaU3gzUWtGRGVFTXNkVVZCUkcxRkxFdEJRMjVGTzBGQlFVRXNWVUZFTUVWclRDeFBRVU14UlN4MVJVRkViMFlzU1VGQlNUZHZRaXcyUkVGQlNpeEZRVU53UmpzN1FVRkRTU3hWUVVGSkxFdEJRVXRuYmtJc1lVRkJUQ3hKUVVGelFrd3NiMFJCUVZNc1EwRkJRMGNzVVVGQmNFTXNSVUZCT0VNN1FVRkRNVU1zWlVGQlR5eEpRVUZKZDBJc01rUkJRVW9zUTBGQmNVSXNTMEZCY2tJc1JVRkJORUlzV1VGQk5VSXNRMEZCVUR0QlFVTklPenRCUVVWRUxGVkJRVWtzUzBGQlN6RkRMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVORExFbEJRV2hETEVWQlFYTkRPMEZCUTJ4RExHVkJRVThzU1VGQlNUWkNMREpFUVVGS0xFTkJRWEZDTEV0QlFYSkNMRVZCUVRSQ0xGVkJRVFZDTEVOQlFWQTdRVUZEU0RzN1FVRkZSQ3hWUVVGSlZ5eGhRVUZoTEVkQlFVZDJTeXdyUkVGQll5eERRVUZEZDBzc2JVSkJRV1lzUTBGQmJVTXhjRUlzVjBGQmJrTXNSVUZCWjBSRExGRkJRV2hFTEVWQlFUQkVhMlVzZDBKQlFURkVMRU5CUVhCQ08wRkJRMEZ6VEN4dFFrRkJZU3hEUVVGRGNIQkNMRTFCUVdRc1IwRkJkVUlzUzBGQlMwRXNUVUZCTlVJN1FVRkRRVzl3UWl4dFFrRkJZU3hEUVVGRGJIQkNMRTlCUVdRc1IwRkJkMEk0YjBJc1QwRkJlRUk3UVVGRFFTeFZRVUZKVFN4VFFVRlRMRWRCUVVkR0xHRkJRV0VzUTBGQlEyUXNVMEZCWkN4RlFVRm9RanRCUVVOQkxGZEJRVXQyUXl4WFFVRk1MRWRCUVcxQ1dTeHJSRUZCVHl4RFFVRkRiVUlzVjBGQk0wSTdRVUZEUVN4WFFVRkxOMElzYTBKQlFVd3NSMEZCTUVJc1NVRkJTVEpETEN0RVFVRktMRU5CUTNSQ2FIQkNMRkZCUkhOQ0xFVkJRMXBwY0VJc01FUkJRV1VzUTBGQlExVXNUVUZFU2l4RlFVTlpOWEJDTEZkQlJGb3NSVUZEZVVJeWNFSXNVMEZFZWtJc2NVVkJSWE5ETEVOQlFVTXpjRUlzVjBGQlZ5eEhRVUZITEV0QlFXWXNSVUZCYzBKdllpeFBRVUYwUWl4RFFVRTRRaXhEUVVFNVFpeERRVVowUXl4RlFVRXhRanM3UVVGSFFTeFZRVUZKTEV0QlFVdHpUaXhMUVVGTUxFTkJRVmRwUWl4VFFVRllMRU5CUVVvc1JVRkRRVHRCUVVOSkxHRkJRVXR5UkN4clFrRkJUQ3hEUVVGM1FqaERMRWxCUVhoQ0xHdERRVUYxUkN4RFFVRkRjSEJDTEZkQlFWY3NSMEZCUnl4TFFVRm1MRVZCUVhOQ2IySXNUMEZCZEVJc1EwRkJPRUlzUTBGQk9VSXNRMEZCZGtRN1FVRkRTRHM3UVVGRlJERllMR05CUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4SlFVRkpReXhYUVVGS0xFTkJRV2RDTEc5Q1FVRm9RaXhGUVVGelF6dEJRVUZEUXl4alFVRk5MRVZCUVVVc1MwRkJTM2xwUWp0QlFVRmtMRTlCUVhSRExFTkJRWFpDTzBGQlEwRXNZVUZCVHl4SlFVRkpkME1zTWtSQlFVb3NRMEZCY1VJc1NVRkJja0lzUlVGQk1rSXNhMEpCUVROQ0xFTkJRVkE3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3T3pzN2IwTkJRMmRDWlN4UkxFVkJRMmhDTzBGQlEwa3NWVUZCU1N4TFFVRkxla1FzVjBGQlRDeEpRVUZ2UWxrc2EwUkJRVThzUTBGQlEyMUNMRmRCUVRWQ0xFbEJRVEpETEV0QlFVczNRaXhyUWtGQlRDeERRVUYzUWpSQ0xGRkJRVzVGTEVsQlFTdEZMRU5CUVVNc1MwRkJTelZDTEd0Q1FVRk1MRU5CUVhkQ2QwUXNjMEpCUVRWSExFVkJRMEU3UVVGRFNTeGhRVUZMZWtZc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml4RFFVRmxMREJFUVVGbU96dEJRVU5CTEdWQlFVOHNTVUZCU1RaRExITkVRVUZLTEVOQlFXZENMRXRCUVdoQ0xFVkJRWFZDTERCRVFVRjJRaXhEUVVGUU8wRkJRMGc3TzBGQlJVUXNWMEZCUzNwRUxHdENRVUZNTEVOQlFYZENNRVFzYTBKQlFYaENMRU5CUVRKRFNDeFJRVUZSTEVkQlFVY3NkMEpCUVVnc1IwRkJPRUlzZDBKQlFXcEdPMEZCUTBFc1ZVRkJTVWtzVTBGQlV5eEhRVUZITEV0QlFVc3pSQ3hyUWtGQlRDeERRVUYzUWpSRUxIZENRVUY0UXpzN1FVRkRRU3hYUVVGTGVFSXNTMEZCVEN4RFFVRlhiVUlzVVVGQlVTeEhRVU5pTEVsQlFVbHVUQ3d3UkVGQlNpeERRVUZ2UWl4TFFVRkxORWdzYTBKQlFVd3NRMEZCZDBKd2JVSXNVVUZCTlVNc1JVRkJjMFI1YjBJc1UwRkJkRVFzUlVGRVlTeEhRVVZpTEVsQlFVbHNTeXd5UkVGQlNpeERRVUZ4UWl4TFFVRkxOa2dzYTBKQlFVd3NRMEZCZDBKd2JVSXNVVUZCTjBNc1JVRkJkVVI1YjBJc1UwRkJka1FzUlVGR1RqczdRVUZKUVdwc1FpeGpRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh2UWtGQmFFSXNSVUZCYzBNN1FVRkJRME1zWTBGQlRTeEZRVUZGTEV0QlFVdDVhVUk3UVVGQlpDeFBRVUYwUXl4RFFVRjJRanRCUVVOQkxHRkJRVThzU1VGQlNYbEVMSE5FUVVGS0xFTkJRV2RDTEVsQlFXaENMRVZCUVhOQ0xFVkJRWFJDTEVOQlFWQTdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0dFEwRkRaUzlMTEZFc1JVRkRaanRCUVVOSkxGVkJRVWxCTEZGQlFWRXNRMEZCUTJwUUxFMUJRVlFzU1VGQmJVSXNRMEZCZGtJc1JVRkRRVHRCUVVOSkxHVkJRVThzU1VGQlNXOWhMQ3RFUVVGS0xFTkJRWGxDTEV0QlFYcENMRVZCUVdkRExIRkNRVUZvUXl4RFFVRlFPMEZCUTBnN08wRkJSVVFzVlVGQlNTeExRVUZMTDBRc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRMjFDTEZkQlFUVkNMRWxCUVRKRExFdEJRVXMzUWl4clFrRkJUQ3hEUVVGM1FqUkNMRkZCUVc1RkxFbEJRU3RGTEVOQlFVTXNTMEZCU3pWQ0xHdENRVUZNTEVOQlFYZENPRVFzYjBKQlFUVkhMRVZCUTBFN1FVRkRTU3hoUVVGTEwwWXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTEhkRVFVRm1PenRCUVVOQkxHVkJRVThzU1VGQlNXbEVMQ3RFUVVGS0xFTkJRWGxDTEV0QlFYcENMRVZCUVdkRExEQkNRVUZvUXl4RFFVRlFPMEZCUTBnN08wRkJSVVFzVjBGQlN6ZEVMR3RDUVVGTUxFTkJRWGRDSzBRc1dVRkJlRUlzWjBOQlFUWkVja3dzVVVGQk4wUTdPMEZCUTBFc1YwRkJTekJLTEV0QlFVd3NRMEZCVnl4SlFVRkpibVFzZVVSQlFVb3NRMEZCYlVJc1MwRkJTeXRoTEd0Q1FVRk1MRU5CUVhkQ2NHMUNMRkZCUVRORExFVkJRWEZFT0dVc1VVRkJja1FzUlVGQkswUXlTaXhUUVVFdlJDeEZRVUZZT3p0QlFVVkJhbXhDTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xHOUNRVUZvUWl4RlFVRnpRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTMEZCUzNscFFqdEJRVUZrTEU5QlFYUkRMRU5CUVhaQ08wRkJRMEVzWVVGQlR5eEpRVUZKTmtRc0swUkJRVW9zUTBGQmVVSXNTVUZCZWtJc1JVRkJLMElzWVVGQkwwSXNRMEZCVUR0QlFVTklMRXNzUTBGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdkME5CUlVFN1FVRkRTU3hWUVVGSkxFdEJRVXN2UkN4WFFVRk1MRWxCUVc5Q1dTeHJSRUZCVHl4RFFVRkRiVUlzVjBGQk5VSXNTVUZCTWtNc1MwRkJTemRDTEd0Q1FVRk1MRU5CUVhkQ05FSXNVVUZCZGtVc1JVRkRRVHRCUVVOSkxHRkJRVXMzUkN4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEVOQlFXVXNhVVZCUVdZN08wRkJRMEVzWlVGQlR5eEpRVUZKTmtNc2MwUkJRVW9zUTBGQlowSXNTMEZCYUVJc1JVRkJkVUlzYVVWQlFYWkNMRU5CUVZBN1FVRkRTQ3hQUVV4TUxFTkJUMGs3T3p0QlFVTkJMRlZCUVVrc1MwRkJTM3BFTEd0Q1FVRk1MRU5CUVhkQ1owVXNWMEZCTlVJc1JVRkRRVHRCUVVOSkxGbEJRVWxETEZOQlFWTXNSMEZCUnl4SlFVRkpNV1lzYlVWQlFVb3NSVUZCYUVJN1FVRkRRU3hoUVVGTGVXSXNhMEpCUVV3c1EwRkJkMEpyUlN4VlFVRjRRaXhEUVVGdFF5eHhRMEZCYmtNN08wRkJRMEVzWVVGQlN6bENMRXRCUVV3c1EwRkJWelpDTEZOQlFWTXNRMEZCUXpWQ0xGTkJRVllzUlVGQldEdEJRVU5JTEU5QlRFUXNUVUZQUVR0QlFVTkpPMEZCUTBFc1lVRkJTM0pETEd0Q1FVRk1MRU5CUVhkQ2RGb3NUVUZCZUVJc1EwRkJLMElzU1VGQkwwSXNSVUZCY1VNc05FUkJRWEpETzBGQlEwZzdPMEZCUlVSMFNpeGpRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh2UWtGQmFFSXNSVUZCYzBNN1FVRkJRME1zWTBGQlRTeEZRVUZGTEV0QlFVdDVhVUk3UVVGQlpDeFBRVUYwUXl4RFFVRjJRanRCUVVOQkxHRkJRVThzU1VGQlNYbEVMSE5FUVVGS0xFTkJRV2RDTEVsQlFXaENMRVZCUVhOQ0xFVkJRWFJDTEVOQlFWQTdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdNRU5CUTNOQ09YQkNMRkVzUlVGQlZVUXNWeXhGUVVOb1F6dEJRVUZCTEZWQlJEWkRNbUVzWlVGRE4wTXNkVVZCUkN0RUxFTkJReTlFTzBGQlFVRXNWVUZFYTBVd1R5eFBRVU5zUlN4MVJVRkVORVVzU1VGQlNUZHZRaXcyUkVGQlNpeEZRVU0xUlR0QlFVTkpMRlZCUVVrc1MwRkJTMmR1UWl4aFFVRk1MRWxCUVhOQ1RDeHZSRUZCVXl4RFFVRkRSeXhSUVVGd1F5eEZRVUU0UXl4UFFVRlBMRWxCUVVsM1Fpd3lSRUZCU2l4RFFVRnhRaXhMUVVGeVFpeEZRVUUwUWl4WlFVRTFRaXhEUVVGUU8wRkJSVGxETEZWQlFVa3NTMEZCU3pGRExGZEJRVXdzU1VGQmIwSlpMR3RFUVVGUExFTkJRVU5ETEVsQlFXaERMRVZCUVhORExFOUJRVThzU1VGQlNUWkNMREpFUVVGS0xFTkJRWEZDTEV0QlFYSkNMRVZCUVRSQ0xGVkJRVFZDTEVOQlFWQTdRVUZGZEVNc1ZVRkJTVEpDTEZWQlFWVXNSMEZCUjJoTUxFMUJRVTBzUTBGQlEwTXNUVUZCVUN4RFFVRmpMRWxCUVVrelppdzBSRUZCU2l4RFFVRjFRa01zVjBGQmRrSXNSVUZCYjBORExGRkJRWEJETEVOQlFXUXNSVUZCTmtRN1FVRkRNVVZITEhWQ1FVRmxMRVZCUVVWMVlTeGxRVVI1UkR0QlFVVXhSWEJoTEdWQlFVOHNSVUZCUlRodlFpeFBRVVpwUlR0QlFVY3hSV2h3UWl4alFVRk5MRVZCUVVVc1MwRkJTMEU3UVVGSU5rUXNUMEZCTjBRc1JVRkpaSE52UWl4VFFVcGpMRVZCUVdwQ08wRkJUVUVzVjBGQlMzWkRMRmRCUVV3c1IwRkJiVUpaTEd0RVFVRlBMRU5CUVVOdFFpeFhRVUV6UWp0QlFVTkJMRmRCUVVzM1FpeHJRa0ZCVEN4SFFVRXdRaXhKUVVGSk1rTXNLMFJCUVVvc1EwRkRkRUpvY0VJc1VVRkVjMElzUlVGRFdtbHdRaXd3UkVGQlpTeERRVUZEZDBJc1YwRkVTaXhGUVVOcFFqRnhRaXhYUVVScVFpeEZRVU00UW5seFFpeFZRVVE1UWl4elJVRkZkVU1zUTBGQlEzcHhRaXhYUVVGWExFZEJRVWNzUjBGQlppeEZRVUZ2UW05aUxFOUJRWEJDTEVOQlFUUkNMRU5CUVRWQ0xFTkJSblpETEVWQlFURkNPenRCUVVkQkxGVkJRVWtzUzBGQlMzTk9MRXRCUVV3c1EwRkJWeXRDTEZWQlFWZ3NRMEZCU2l4RlFVTkJPMEZCUTBrc1lVRkJTMjVGTEd0Q1FVRk1MRU5CUVhkQ09FTXNTVUZCZUVJc01FTkJRU3RFTEVOQlFVTndjRUlzVjBGQlZ5eEhRVUZITEVkQlFXWXNSVUZCYjBKdllpeFBRVUZ3UWl4RFFVRTBRaXhEUVVFMVFpeERRVUV2UkR0QlFVTklPenRCUVVWRU1WZ3NZMEZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzYjBKQlFXaENMRVZCUVhORE8wRkJRVU5ETEdOQlFVMHNSVUZCUlN4TFFVRkxlV2xDTzBGQlFXUXNUMEZCZEVNc1EwRkJka0k3UVVGRFFTeGhRVUZQTEVsQlFVbDNReXd5UkVGQlNpeERRVUZ4UWl4SlFVRnlRaXhGUVVFeVFpeHRRa0ZCTTBJc1EwRkJVRHRCUVVOSUxFc3NRMEZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TWtOQlEzVkNOMjlDTEZFc1JVRkJWVVFzVnl4RlFVTnFRenRCUVVGQkxGVkJSRGhETW1Fc1pVRkRPVU1zZFVWQlJHZEZMRU5CUTJoRk8wRkJRVUVzVlVGRWJVVjNSQ3gzUWtGRGJrVXNkVVZCUkRoR0xFdEJRemxHTzBGQlFVRXNWVUZFY1VkclRDeFBRVU55Unl4MVJVRkVLMGNzU1VGQlNUZHZRaXcyUkVGQlNpeEZRVU12Unp0QlFVTkpMRlZCUVVrc1MwRkJTMmR1UWl4aFFVRk1MRWxCUVhOQ1RDeHZSRUZCVXl4RFFVRkRSeXhSUVVGd1F5eEZRVUU0UXl4UFFVRlBMRWxCUVVsM1Fpd3lSRUZCU2l4RFFVRnhRaXhMUVVGeVFpeEZRVUUwUWl4WlFVRTFRaXhEUVVGUU8wRkJSVGxETEZWQlFVa3NTMEZCU3pGRExGZEJRVXdzU1VGQmIwSlpMR3RFUVVGUExFTkJRVU5ETEVsQlFXaERMRVZCUVhORExFOUJRVThzU1VGQlNUWkNMREpFUVVGS0xFTkJRWEZDTEV0QlFYSkNMRVZCUVRSQ0xGVkJRVFZDTEVOQlFWQTdRVUZEZEVNc1ZVRkJTVFpDTEdWQlFXVXNSMEZCUjJ4TUxFMUJRVTBzUTBGQlEwTXNUVUZCVUN4RFFVRmpMRWxCUVVsc1ZTdzRSRUZCU2l4RFFVRjNRbmhNTEZkQlFYaENMRVZCUVhGRFF5eFJRVUZ5UXl4RFFVRmtMRVZCUTNSQ08wRkJRMGxITEhWQ1FVRmxMRVZCUVVWMVlTeGxRVVJ5UWp0QlFVVkplVVFzWjBOQlFYZENMRVZCUVVWRUxIZENRVVk1UWp0QlFVZEpPV1FzWTBGQlRTeEZRVUZGTEV0QlFVdEJMRTFCU0dwQ08wRkJTVWxGTEdWQlFVOHNSVUZCUlRodlFqdEJRVXBpTEU5QlJITkNMRVZCVFc1Q1ZpeFRRVTV0UWl4RlFVRjBRanRCUVZGQkxGZEJRVXQyUXl4WFFVRk1MRWRCUVcxQ1dTeHJSRUZCVHl4RFFVRkRiVUlzVjBGQk0wSTdRVUZEUVN4WFFVRkxOMElzYTBKQlFVd3NSMEZCTUVJc1NVRkJTVEpETEN0RVFVRktMRU5CUTNSQ2FIQkNMRkZCUkhOQ0xFVkJRMXBwY0VJc01FUkJRV1VzUTBGQlF6QkNMRWxCUkVvc1JVRkRWVFZ4UWl4WFFVUldMRVZCUTNWQ01uRkNMR1ZCUkhaQ0xHMUZRVVZ2UXl4RFFVRkRNM0ZDTEZkQlFWY3NSMEZCUnl4SFFVRm1MRVZCUVc5Q2IySXNUMEZCY0VJc1EwRkJORUlzUTBGQk5VSXNRMEZHY0VNc1JVRkJNVUk3TzBGQlIwRXNWVUZCU1N4TFFVRkxjMDRzUzBGQlRDeERRVUZYYVVNc1pVRkJXQ3hEUVVGS0xFVkJRMEU3UVVGRFNTeGhRVUZMY2tVc2EwSkJRVXdzUTBGQmQwSTRReXhKUVVGNFFpeHZRMEZCZVVRc1EwRkJRM0J3UWl4WFFVRlhMRWRCUVVjc1IwRkJaaXhGUVVGdlFtOWlMRTlCUVhCQ0xFTkJRVFJDTEVOQlFUVkNMRU5CUVhwRU8wRkJRMGc3TzBGQlJVUXhXQ3hqUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4dlFrRkJhRUlzUlVGQmMwTTdRVUZCUTBNc1kwRkJUU3hGUVVGRkxFdEJRVXQ1YVVJN1FVRkJaQ3hQUVVGMFF5eERRVUYyUWp0QlFVTkJMR0ZCUVU4c1NVRkJTWGRETERKRVFVRktMRU5CUVhGQ0xFbEJRWEpDTEVWQlFUSkNMR2RDUVVFelFpeERRVUZRTzBGQlEwZ3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3Y1VOQlEybENOMjlDTEZFc1JVRkRha0k3UVVGQlFTeFZRVVF5UW05d1FpeFBRVU16UWl4MVJVRkVjVU1zU1VGQlNUZHZRaXcyUkVGQlNpeEZRVU55UXpzN1FVRkRTU3hWUVVGSkxFdEJRVXRuYmtJc1lVRkJUQ3hKUVVGelFrd3NiMFJCUVZNc1EwRkJRMGNzVVVGQmNFTXNSVUZCT0VNN1FVRkRNVU1zWlVGQlR5eEpRVUZKZDBJc01rUkJRVW9zUTBGQmNVSXNTMEZCY2tJc1JVRkJORUlzV1VGQk5VSXNRMEZCVUR0QlFVTklPenRCUVVWRUxGVkJRVWtzUzBGQlN6RkRMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVORExFbEJRV2hETEVWQlFYTkRPMEZCUTJ4RExHVkJRVThzU1VGQlNUWkNMREpFUVVGS0xFTkJRWEZDTEV0QlFYSkNMRVZCUVRSQ0xGVkJRVFZDTEVOQlFWQTdRVUZEU0RzN1FVRkZSQ3hWUVVGSkswSXNVMEZCVXl4SFFVRkhjRXdzVFVGQlRTeERRVUZEUXl4TlFVRlFMRU5CUVdNc1NVRkJTV2hWTERCRVFVRktMRU5CUVd0Q01Vc3NaMFZCUVdVc1EwRkJRME1zUlVGQmFFSXNRMEZCYlVJc1VVRkJia0lzUTBGQmJFSXNRMEZCWkN4RlFVTm9RanRCUVVOSldpeGpRVUZOTEVWQlFVVXNTMEZCUzBFc1RVRkVha0k3UVVGRlNVVXNaVUZCVHl4RlFVRkZPRzlDTzBGQlJtSXNUMEZFWjBJc1JVRkpZbFlzVTBGS1lTeEZRVUZvUWp0QlFVMUJMRmRCUVV0MlF5eFhRVUZNTEVkQlFXMUNXU3hyUkVGQlR5eERRVUZEYlVJc1YwRkJNMEk3UVVGRFFTeFhRVUZMTjBJc2EwSkJRVXdzUjBGQk1FSXNTVUZCU1RKRExDdEVRVUZLTEVOQlEzUkNhSEJDTEZGQlJITkNMRVZCUTFwcGNFSXNNRVJCUVdVc1EwRkJRelJDTEUxQlJFb3NSVUZEV1N4RFFVUmFMRVZCUTJWRUxGTkJSR1lzTWtSQlFURkNPenRCUVVsQkxGVkJRVWtzUzBGQlMyNURMRXRCUVV3c1EwRkJWMjFETEZOQlFWZ3NRMEZCU2l4RlFVTkJPMEZCUTBrc1lVRkJTM1pGTEd0Q1FVRk1MRU5CUVhkQ09FTXNTVUZCZUVJN1FVRkRTRHM3UVVGRlJERnNRaXhqUVVGUkxFTkJRVU5ETEdGQlFWUXNRMEZCZFVJc1NVRkJTVU1zVjBGQlNpeERRVUZuUWl4dlFrRkJhRUlzUlVGQmMwTTdRVUZCUTBNc1kwRkJUU3hGUVVGRkxFdEJRVXQ1YVVJN1FVRkJaQ3hQUVVGMFF5eERRVUYyUWp0QlFVTkJMR0ZCUVU4c1NVRkJTWGRETERKRVFVRktMRU5CUVhGQ0xFbEJRWEpDTEVWQlFUSkNMR3RDUVVFelFpeERRVUZRTzBGQlEwZ3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUczdPenM0UTBGRE1FSTNiMElzVVN4RlFVTXhRanRCUVVGQkxGVkJSRzlEYjNCQ0xFOUJRM0JETEhWRlFVUTRReXhKUVVGSk4yOUNMRFpFUVVGS0xFVkJRemxETzBGQlEwa3NWVUZCU1N4TFFVRkxaMjVDTEdGQlFVd3NTVUZCYzBKTUxHOUVRVUZUTEVOQlFVTkhMRkZCUVhCRExFVkJRVGhETEU5QlFVOHNTVUZCU1hkQ0xESkVRVUZLTEVOQlFYRkNMRXRCUVhKQ0xFVkJRVFJDTEZsQlFUVkNMRU5CUVZBN1FVRkZPVU1zVlVGQlNTeExRVUZMTVVNc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRME1zU1VGQmFFTXNSVUZCYzBNc1QwRkJUeXhKUVVGSk5rSXNNa1JCUVVvc1EwRkJjVUlzUzBGQmNrSXNSVUZCTkVJc1ZVRkJOVUlzUTBGQlVEdEJRVU4wUXl4VlFVRkphVU1zVTBGQlV5eEhRVUZIZEV3c1RVRkJUU3hEUVVGRFF5eE5RVUZRTEVOQlFXTXNTVUZCU1RsVUxIRkZRVUZLTEVOQlFUWkNOVXNzWjBWQlFXVXNRMEZCUTBNc1JVRkJhRUlzUTBGQmJVSXNVVUZCYmtJc1EwRkJOMElzUTBGQlpDeEZRVU5vUWp0QlFVTkpXaXhqUVVGTkxFVkJRVVVzUzBGQlMwRXNUVUZFYWtJN1FVRkZTVVVzWlVGQlR5eEZRVUZGT0c5Q08wRkJSbUlzVDBGRVowSXNSVUZKWWxZc1UwRktZU3hGUVVGb1FqdEJRVTFCTEZkQlFVdDJReXhYUVVGTUxFZEJRVzFDV1N4clJFRkJUeXhEUVVGRGJVSXNWMEZCTTBJN1FVRkRRU3hYUVVGTE4wSXNhMEpCUVV3c1IwRkJNRUlzU1VGQlNUSkRMQ3RFUVVGS0xFTkJRM1JDYUhCQ0xGRkJSSE5DTEVWQlExcHBjRUlzTUVSQlFXVXNRMEZCUXpoQ0xHbENRVVJLTEVWQlEzVkNMRU5CUkhaQ0xFVkJRekJDUkN4VFFVUXhRaXhGUVVWMFFpdzBSRUZHYzBJc1EwRkJNVUk3TzBGQlIwRXNWVUZCU1N4TFFVRkxja01zUzBGQlRDeERRVUZYY1VNc1UwRkJXQ3hEUVVGS0xFVkJRMEU3UVVGRFNTeGhRVUZMZWtVc2EwSkJRVXdzUTBGQmQwSTRReXhKUVVGNFFpeERRVUUyUWl3MFEwRkJOMEk3UVVGRFNEczdRVUZGUkRGc1FpeGpRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh2UWtGQmFFSXNSVUZCYzBNN1FVRkJRME1zWTBGQlRTeEZRVUZGTEV0QlFVdDVhVUk3UVVGQlpDeFBRVUYwUXl4RFFVRjJRanRCUVVOQkxHRkJRVThzU1VGQlNYZERMREpFUVVGS0xFTkJRWEZDTEVsQlFYSkNMRVZCUVRKQ0xHdENRVUV6UWl4RFFVRlFPMEZCUTBnc1N5eERRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdkME5CUlVFN1FVRkRTU3hWUVVGSkxFdEJRVXQwUWl4aFFVRk1MRWxCUVhOQ1RDeHZSRUZCVXl4RFFVRkRSeXhSUVVGd1F5eEZRVUU0UXp0QlFVTXhReXhsUVVGUExFbEJRVWwzUWl3eVJFRkJTaXhEUVVGeFFpeExRVUZ5UWl4RlFVRTBRaXhaUVVFMVFpeERRVUZRTzBGQlEwZzdPMEZCUlVRc1ZVRkJTU3hMUVVGTE1VTXNWMEZCVEN4SlFVRnZRbGtzYTBSQlFVOHNRMEZCUTBNc1NVRkJhRU1zUlVGQmMwTTdRVUZEYkVNc1pVRkJUeXhKUVVGSk5rSXNNa1JCUVVvc1EwRkJjVUlzUzBGQmNrSXNSVUZCTkVJc1ZVRkJOVUlzUTBGQlVEdEJRVU5JT3p0QlFVVkVMRlZCUVVsdFF5eGhRVUZoTEVkQlFVY3NTVUZCU1d4blFpeHZSVUZCU2l4SFFVRm5RelJrTEZOQlFXaERMRVZCUVhCQ08wRkJRMEVzVjBGQlMzWkRMRmRCUVV3c1IwRkJiVUpaTEd0RVFVRlBMRU5CUVVOdFFpeFhRVUV6UWp0QlFVTkJMRlZCUVVsc2IwSXNVVUZCVVN4SFFVRkhaM0pDTEdGQlFXRXNRMEZCUTJoeFFpeEZRVUUzUWl4RFFWaEtMRU5CVjNGRE96dEJRVU5xUXl4WFFVRkxjV3hDTEd0Q1FVRk1MRWRCUVRCQ0xFbEJRVWt5UXl3clJFRkJTaXhEUVVOMFFtaHdRaXhSUVVSelFpeEZRVU5hYVhCQ0xEQkVRVUZsTEVOQlFVTm5ReXhyUWtGRVNpeEZRVU4zUWl4RFFVUjRRaXhGUVVNeVFrUXNZVUZFTTBJc1JVRkZkRUlzZFVWQlJuTkNMRU5CUVRGQ08wRkJSMEVzVjBGQlN6TkZMR3RDUVVGTUxFTkJRWGRDTmtVc1ZVRkJlRUlzUTBGQmJVTkdMR0ZCUVdFc1EwRkJRMmh4UWl4RlFVRnFSRHM3UVVGRFFTeFZRVUZKTEV0QlFVdDVia0lzUzBGQlRDeERRVUZYZFVNc1lVRkJXQ3hEUVVGS0xFVkJRMEU3UVVGRFNTeGhRVUZMTTBVc2EwSkJRVXdzUTBGQmQwSTRReXhKUVVGNFFqdEJRVU5JT3p0QlFVVkVNV3hDTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xHOUNRVUZvUWl4RlFVRnpRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTMEZCUzNscFFqdEJRVUZrTEU5QlFYUkRMRU5CUVhaQ08wRkJRMEVzWVVGQlR5eEpRVUZKZDBNc01rUkJRVW9zUTBGQmNVSXNTVUZCY2tJc1JVRkJNa0lzWlVGQk0wSXNRMEZCVUR0QlFVTklMRXNzUTBGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenR4UTBGRGFVSTNiMElzVVN4RlFVRlZObUVzVFN4RlFVTXpRanRCUVVOSkxGVkJRVWtzUzBGQlN6Qk5MR0ZCUVV3c1NVRkJjMEpNTEc5RVFVRlRMRU5CUVVOSExGRkJRWEJETEVWQlFUaERMRTlCUVU4c1NVRkJTWGRDTERKRVFVRktMRU5CUVhGQ0xFdEJRWEpDTEVWQlFUUkNMRmxCUVRWQ0xFTkJRVkE3UVVGRk9VTXNWVUZCU1N4TFFVRkxNVU1zVjBGQlRDeEpRVUZ2UWxrc2EwUkJRVThzUTBGQlEwTXNTVUZCYUVNc1JVRkJjME1zVDBGQlR5eEpRVUZKTmtJc01rUkJRVW9zUTBGQmNVSXNTMEZCY2tJc1JVRkJORUlzVlVGQk5VSXNRMEZCVUR0QlFVVjBReXhYUVVGTE1VTXNWMEZCVEN4SFFVRnRRbGtzYTBSQlFVOHNRMEZCUTIxQ0xGZEJRVE5DTzBGQlJVRXNWVUZCU1RoRExHRkJRV0VzUjBGQlJ5eEpRVUZKYkdkQ0xHOUZRVUZLTEVkQlFXZEROR1FzVTBGQmFFTXNSVUZCY0VJN1FVRkRRU3hYUVVGTGNrTXNhMEpCUVV3c1IwRkJNRUlzU1VGQlNUSkRMQ3RFUVVGS0xFTkJRM1JDYUhCQ0xGRkJSSE5DTEVWQlExbzJZU3hOUVVSWkxFVkJRMG9zUTBGRVNTeEZRVU5FYlZFc1lVRkVReXhGUVVWMFFpeHZSRUZHYzBJc1EwRkJNVUk3TzBGQlNVRXNWVUZCU1N4TFFVRkxka01zUzBGQlRDeERRVUZYZFVNc1lVRkJXQ3hEUVVGS0xFVkJRMEU3UVVGRFNTeGhRVUZMTTBVc2EwSkJRVXdzUTBGQmQwSTRReXhKUVVGNFFqdEJRVU5JT3p0QlFVVkVNV3hDTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xHOUNRVUZvUWl4RlFVRnpRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTMEZCUzNscFFqdEJRVUZrTEU5QlFYUkRMRU5CUVhaQ08wRkJRMEVzWVVGQlR5eEpRVUZKZDBNc01rUkJRVW9zUTBGQmNVSXNTVUZCY2tJc1JVRkJNa0lzYjBKQlFUTkNMRU5CUVZBN1FVRkRTQ3hMTEVOQlJVUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096czJRa0ZEVTNORExGY3NSVUZCWVc1eVFpeFJMRVZCUVZWdmNrSXNZeXhGUVVGblFrTXNWeXhGUVVOb1JEdEJRVU5KTzBGQlEwRTdRVUZEUVN3MFJFRkJNRUk3UVVGRGRFSXNXVUZCUnl4MVJFRkJNRUlzUTBGQk4wSXNSVUZCWjBNN1FVRkROVUlzWlVGQlMycElMRWxCUVV3c1EwRkJWVFpETEVsQlFWWXNRMEZCWlN4dlJVRkJaanM3UVVGRFFTeHBRa0ZCVHl4TFFVRkxjVVVzVVVGQlRDeERRVUZqU0N4WFFVRmtMRzFFUVVGUU8wRkJRMGdzVTBGSVJDeE5RVWRQTzBGQlEwZ3NaMEpCUVUwc1NVRkJTWFJ2UWl4TFFVRktMRU5CUVZVc0swZEJRVllzUTBGQlRqdEJRVU5JTzBGQlEwbzdPMEZCUlVRc1YwRkJTM1ZvUWl4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEdkRFFVRjFRMnB1UWl4UlFVRjJReXhsUVVGdlJHMXlRaXhYUVVGWExFTkJRVU40VGl4WFFVRmFMRVZCUVhCRU96dEJRVVZCTEZWQlFVazBUaXhyUWtGQmEwSXNSMEZCUjBvc1YwRkJWeXhEUVVGRFN5eHhRa0ZCV2l4RlFVRjZRaXhEUVdSS0xFTkJZMnRGT3p0QlFVTTVSQ3hWUVVGSlF5eGxRVUZsTEVkQlFVY3NTVUZCU1dwa0xFbEJRVW9zVjBGQldTdGpMR3RDUVVGclFpeERRVUZEZUdJc1RVRkJia0lzUTBGQk1FSXNRMEZCTVVJc1JVRkJORUlzUTBGQk5VSXNRMEZCV2l4alFVRTRRM2RpTEd0Q1FVRnJRaXhEUVVGRGVHSXNUVUZCYmtJc1EwRkJNRUlzUTBGQk1VSXNSVUZCTkVJc1EwRkJOVUlzUTBGQk9VTXNZMEZCWjBaM1lpeHJRa0ZCYTBJc1EwRkJRM2hpTEUxQlFXNUNMRU5CUVRCQ0xFTkJRVEZDTEVWQlFUUkNMRU5CUVRWQ0xFTkJRV2hHTEdOQlFXdElkMklzYTBKQlFXdENMRU5CUVVONFlpeE5RVUZ1UWl4RFFVRXdRaXhEUVVFeFFpeEZRVUUwUWl4RFFVRTFRaXhEUVVGc1NDeGpRVUZ2U25kaUxHdENRVUZyUWl4RFFVRkRlR0lzVFVGQmJrSXNRMEZCTUVJc1JVRkJNVUlzUlVGQk5rSXNRMEZCTjBJc1EwRkJjRW9zWTBGQmRVeDNZaXhyUWtGQmEwSXNRMEZCUTNoaUxFMUJRVzVDTEVOQlFUQkNMRVZCUVRGQ0xFVkJRVFpDTEVOQlFUZENMRU5CUVhaTUxFVkJRWFJDTzBGQlEwRXNWVUZCU1RKaUxFOUJRVThzUjBGQlIyNUpMRkZCUVZFc1EwRkJRemhJTEZkQlFVUXNRMEZCVWl4SFFVRjNRa2tzWlVGQlpTeERRVUZETjJNc1QwRkJhRUlzUlVGQmRFTTdPMEZCUlVFc1ZVRkJTU3hEUVVGRE5VOHNVVUZCUkN4SlFVRmhiWEpDTEZkQlFWY3NRMEZCUTNoT0xGZEJRVm9zUlVGQmFrSXNSVUZEUVR0QlFVTkpMR1ZCUVU4dllpeHpSRUZCV1N4RFFVRkRhMHdzVDBGQmNFSTdRVUZEU0RzN1FVRkZSQ3hWUVVGSmNXVXNWMEZCVnl4RFFVRkRVU3hUUVVGYUxFZEJRWGRDZEdwQ0xGZEJRWGhDTEUxQlFYbERMRlZCUVhwRExFbEJRWFZFT0dsQ0xGZEJRVmNzUTBGQlExTXNiMEpCUVZvc1RVRkJjME5TTEdOQlFUZEdMRWxCUVN0SFRTeFBRVUZQTEVkQlFVY3NRMEZCTjBnc1JVRkRRVHRCUVVOSkxHVkJRVTgxY1VJc2FVUkJRVThzUTBGQlEyTXNXVUZCVWl4RFFVRnhRbXRNTEU5QlFUVkNPMEZCUTBnN08wRkJSVVFzWVVGQlQzRmxMRmRCUVZjc1EwRkJRM2h3UWl4bFFVRmFMRVZCUVZBN1FVRkRTRHM3TzJsRFFVVlpORU1zUnl4RlFVRkxja0lzVHl4RlFVTnNRanRCUVVOSkxGZEJRVXQxYkVJc1MwRkJUQ3hEUVVGWExFbEJRVWx1WXl3d1JFRkJTaXhEUVVGdlFpOUlMRWRCUVhCQ0xFVkJRWGxDY2tJc1QwRkJla0lzUlVGQmEwTXliMElzVTBGQmJFTXNSVUZCV0R0QlFVTklPenM3ZDBOQlIwUTdRVUZEU1N4WFFVRkxjRVFzUzBGQlRDeERRVUZYTEVsQlFVbHFZeXh6UlVGQlNpeEhRVUUwUW10akxGTkJRVFZDTEVWQlFWZzdRVUZEU0N4TExFTkJSVVE3UVVGRlFUdEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzNORFFVTnJRblp1UWl4RExFVkJRMnhDTzBGQlEwa3NWMEZCUzJsc1FpeDFRa0ZCVEN4RFFVRTJRblJzUWl4UFFVRTNRaXhIUVVGMVF5eDNRa0ZCZGtNN1FVRkRRVEpETEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xIbENRVUZvUWl4RlFVRXlRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTMEZCUzNkcFFqdEJRVUZrTEU5QlFUTkRMRU5CUVhaQ0xFVkJSa29zUTBGSlNUczdRVUZEUVN4VlFVRkpPVklzUlVGQlJTeEhRVUZSTEVsQlFVazNReXcwUkVGQlNpeEZRVUZrTzBGQlEwRXNWVUZCU1hGaExFMUJRVTBzUjBGQlNYaFlMRVZCUVVVc1EwRkJRM2xZTERaQ1FVRklMRU5CUVdsRExFbEJRVWs1YUVJc2IwUkJRVW9zUTBGQlpUbEpMRU5CUVdZc1EwRkJha01zUTBGQlpEdEJRVU5CTEZkQlFVczRhVUlzVVVGQlRDeEhRVUZuUWpaSUxFMUJRVTBzUTBGQlEyNXFRaXhQUVVGMlFpeERRVkJLTEVOQlQyOURPenRCUVVOb1F5eFhRVUZMWjJNc1owSkJRVXdzUTBGQmMwSm9ZeXhQUVVGMFFpeEhRVUZuUXl4TFFVRkxjMklzVVVGQmNrTXNRMEZTU2l4RFFWRnRSRHM3UVVGREwwTXNWMEZCUzNkRkxFdEJRVXdzUTBGQlYzRkVMRTFCUVUwc1EwRkJRelZvUWl4WFFVRlFMRU5CUVcxQ2QyVXNVMEZCYmtJc1JVRkJXQ3hGUVZSS0xFTkJVMmRFT3p0QlFVTXZReXhMTEVOQlJVUTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdiME5CUTJkQ2RtNUNMRU1zUlVGRGFFSTdRVUZEU1N4VlFVRkpObkZDTEZGQlFWRXNSMEZCUnl4SlFVRkpOMmhDTEd0RVFVRktMRU5CUVdGb1NpeERRVUZpTEVOQlFXWTdRVUZEUVN4WFFVRkxhV3hDTEhWQ1FVRk1MRU5CUVRaQ2JGWXNaMEpCUVRkQ0xFZEJRV2RFT0dFc1VVRkJVU3hEUVVGRE9XRXNaMEpCUVhwRU8wRkJRMEVzVjBGQlMydFdMSFZDUVVGTUxFTkJRVFpDYVVNc2RVSkJRVGRDTEVkQlFYVkVMRWxCUVhaRU8wRkJRMEVzVjBGQlMycERMSFZDUVVGTUxFTkJRVFpDYTBNc2IwSkJRVGRDTEVkQlFXOUVMRWxCUVhCRU8wRkJRMEVzVjBGQlMyeERMSFZDUVVGTUxFTkJRVFpDZEd4Q0xFOUJRVGRDTEVkQlFYVkRMRFJFUVVGMlF6dEJRVU5CTWtNc1kwRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNlVUpCUVdoQ0xFVkJRVEpETzBGQlFVTkRMR05CUVUwc1JVRkJSU3hMUVVGTGQybENPMEZCUVdRc1QwRkJNME1zUTBGQmRrSTdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3ZDBOQlEyOUNhbXhDTEVNc1JVRkRjRUk3UVVGRFNTeFZRVUZKT0hGQ0xGRkJRVkVzUjBGQlJ5eEpRVUZKTjJoQ0xITkVRVUZLTEVOQlFXbENha29zUTBGQmFrSXNRMEZCWmp0QlFVVkJMRmRCUVV0cGJFSXNkVUpCUVV3c1EwRkJOa0pwUXl4MVFrRkJOMElzUjBGQmRVUXNTMEZCZGtRN08wRkJRMEVzVlVGQlNUUkVMRkZCUVZFc1EwRkJRM1p4UWl4UFFVRmlMRVZCUTBFN1FVRkRTU3haUVVGSkxFdEJRVXN3YTBJc2RVSkJRVXdzUTBGQk5rSnJReXh2UWtGQmFrTXNSVUZEUVR0QlFVTkpPMEZCUTBFc1pVRkJTMnhGTEVsQlFVd3NRMEZCVlRaRExFbEJRVllzUTBGQlpTdzRSVUZCWmpzN1FVRkRRU3hsUVVGTFlpeDFRa0ZCVEN4RFFVRTJRblJzUWl4UFFVRTNRaXhIUVVGMVF5d3lSRUZCZGtNN1FVRkRRVEpETEd0Q1FVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSXNTVUZCU1VNc1YwRkJTaXhEUVVGblFpeDVRa0ZCYUVJc1JVRkJNa003UVVGQlEwTXNhMEpCUVUwc1JVRkJSU3hMUVVGTGQybENPMEZCUVdRc1YwRkJNME1zUTBGQmRrSTdRVUZEU0N4VFFVNUVMRTFCVVVFN1FVRkRTU3hsUVVGTGFFTXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTEd0SFFVRm1PenRCUVVOQkxHVkJRVXR6UWl4cFFrRkJURHRCUVVOSUxGTkJXa3dzUTBGaFNUdEJRVU5CT3pzN1FVRkRRU3hoUVVGTE1rUXNhMEpCUVV3N1FVRkRTQ3hQUVdwQ1JDeE5RVzFDUVR0QlFVTkpMR0ZCUVV0MlJDeG5Ra0ZCVER0QlFVTklPMEZCUTBvN096c3dRMEZGY1VKNGJrSXNReXhGUVVOMFFqdEJRVU5KTEZkQlFVdHBha0lzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExEQkVRVUZtT3p0QlFVTkJMRmRCUVVzeVFpeFRRVUZNTzBGQlEwZzdPenQzUTBGSFJEdEJRVU5KTEZkQlFVdDRReXgxUWtGQlRDeERRVUUyUW1kRExGVkJRVGRDTEVkQlFUQkRMRWxCUVRGRE8wRkJRMEVzVjBGQlMyaERMSFZDUVVGTUxFTkJRVFpDTmtJc1VVRkJOMElzUjBGQmQwTXNTVUZCZUVNN1FVRkRRU3hYUVVGTE4wSXNkVUpCUVV3c1EwRkJOa0owYkVJc1QwRkJOMElzUjBGQmRVTXNjVUpCUVhaRE8wRkJRMEVzVjBGQlMzbHRRaXhoUVVGTUxFZEJRWEZDVEN4dlJFRkJVeXhEUVVGRFZTeGxRVUV2UWp0QlFVTkJibXRDTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xHZENRVUZvUWl4RlFVRnJRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTMEZCUzNGblFqdEJRVUZrTEU5QlFXeERMRU5CUVhaQ08wRkJRMEY0WjBJc1kwRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNlVUpCUVdoQ0xFVkJRVEpETzBGQlFVTkRMR05CUVUwc1JVRkJSU3hMUVVGTGQybENPMEZCUVdRc1QwRkJNME1zUTBGQmRrSTdRVUZEU0RzN08zVkRRVWRFTzBGQlEwa3NWMEZCUzI1RExGRkJRVXdzUjBGQlowSXNTVUZCYUVJN1FVRkRRU3hYUVVGTFZTeG5Ra0ZCVEN4RFFVRnpRbWhqTEU5QlFYUkNMRWRCUVdkRExFbEJRV2hET3p0QlFVTkJMRmRCUVVzd1lpeExRVUZNTEVOQlFWZG9aMElzVlVGQldEczdRVUZGUVN4WFFVRkxhMnBDTEdGQlFVd3NSMEZCY1VKTUxHOUVRVUZUTEVOQlFVTkhMRkZCUVM5Q08wRkJRMEVzVjBGQlMycENMSFZDUVVGTUxFTkJRVFpDZEd4Q0xFOUJRVGRDTEVkQlFYVkRMR2RDUVVGMlF6dEJRVU5CTEZkQlFVdHpiRUlzZFVKQlFVd3NRMEZCTmtJMlFpeFJRVUUzUWl4SFFVRjNReXhKUVVGNFF6dEJRVU5CTEZkQlFVczNRaXgxUWtGQlRDeERRVUUyUW1kRExGVkJRVGRDTEVkQlFUQkRMRXRCUVRGRE8wRkJRMEVzVjBGQlMyaERMSFZDUVVGTUxFTkJRVFpDYTBNc2IwSkJRVGRDTEVkQlFXOUVMRXRCUVhCRU8wRkJRMEUzYTBJc1kwRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNlVUpCUVdoQ0xFVkJRVEpETzBGQlFVTkRMR05CUVUwc1JVRkJSU3hMUVVGTGQybENPMEZCUVdRc1QwRkJNME1zUTBGQmRrSTdRVUZEU0RzN08yZERRVWRFTzBGQlEwa3NWMEZCUzIxQ0xHRkJRVXdzUjBGQmNVSk1MRzlFUVVGVExFTkJRVU5ITEZGQlFTOUNPenRCUVVOQkxGZEJRVXRvUkN4TFFVRk1MRU5CUVZkb1owSXNWVUZCV0RzN1FVRkRRU3hYUVVGTE5HWXNVVUZCVEN4SFFVRm5RaXhKUVVGb1FqdEJRVU5CTEZkQlFVdFZMR2RDUVVGTUxFTkJRWE5DYUdNc1QwRkJkRUlzUjBGQlowTXNTVUZCYUVNN1FVRkRRV3hHTEdOQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xHZENRVUZvUWl4RlFVRnJRenRCUVVGRFF5eGpRVUZOTEVWQlFVVXNTMEZCUzNGblFqdEJRVUZrTEU5QlFXeERMRU5CUVhaQ08wRkJRMGdzU3l4RFFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk96czdPelpEUVVONVFqbHBRaXhETEVWQlEzcENPMEZCUTBrN1FVRkRRU3hWUVVGSlozSkNMRXRCUVVzc1IwRkJSemRxUWl4dFJVRkJaMElzUTBGQlF6aHFRaXhwUWtGQmFrSXNRMEZCYlVOcWNrSXNRMEZCYmtNc1JVRkJjME1zUzBGQlN6aHBRaXhSUVVFelF5eERRVUZhTzBGQlEwRXNWMEZCUzBFc1VVRkJUQ3hIUVVGblFtdEpMRXRCUVVzc1EwRkJRMnBxUWl4VlFVRjBRaXhEUVVoS0xFTkJSM05ET3p0QlFVTnNReXhYUVVGTGVXSXNaMEpCUVV3c1EwRkJjMEpvWXl4UFFVRjBRaXhIUVVGblF5eExRVUZMYzJJc1VVRkJja01zUTBGS1NpeERRVWx0UkRzN1FVRkRMME1zVjBGQlMzZEZMRXRCUVV3c1EwRkJWekJFTEV0QlFVc3NRMEZCUTJ4cVFpeHpRa0ZCYWtJc1JVRk1TaXhEUVVzNFF6czdPMEZCUXpGRGVFWXNZMEZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzWjBKQlFXaENMRVZCUVd0RE8wRkJRVU5ETEdOQlFVMHNSVUZCUlN4TFFVRkxjV2RDTzBGQlFXUXNUMEZCYkVNc1EwRkJka0k3UVVGRFNDeExMRU5CUlVRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN096WkRRVU41UWpscFFpeERMRVZCUTNwQ08wRkJRMGtzVlVGQlNXdHlRaXhuUWtGQlowSXNSMEZCUjJ4eVFpeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUME1zVlVGQk9VSTdPMEZCUTBFc1ZVRkJTU3hMUVVGTE5HdENMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVOdFFpeFhRVUUxUWl4SlFVRXlReXhMUVVGTE4wSXNhMEpCUVV3c1EwRkJkMEkwUWl4UlFVRnVSU3hKUVVFclJTeERRVUZETEV0QlFVczFRaXhyUWtGQlRDeERRVUYzUW5CdFFpeFJRVUY2UWl4SlFVRnhRMjl6UWl4blFrRkJlRWdzUlVGRFFUdEJRVU5KTEdGQlFVdHFTU3hKUVVGTUxFTkJRVlUyUXl4SlFVRldMREpHUVVGclIyOUdMR2RDUVVGc1J6czdRVUZEUVR0QlFVTklPenRCUVVORUxGZEJRVXRvUnl4clFrRkJUQ3hEUVVGM1FtNWlMR2xDUVVGNFFpeERRVUV3UXl4SlFVRkpRU3cwUkVGQlNpeERRVUZ6UWk5S0xFTkJRWFJDTEVOQlFURkRMRVZCUVc5RkxHdERRVUZ3UlR0QlFVVkJjME1zWTBGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xFbEJRVWxETEZkQlFVb3NRMEZCWjBJc2IwSkJRV2hDTEVWQlFYTkRPMEZCUVVORExHTkJRVTBzUlVGQlJTeExRVUZMZVdsQ08wRkJRV1FzVDBGQmRFTXNRMEZCZGtJN1FVRkRTQ3hMTEVOQlJVUTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdORU5CUTNkQ2JHeENMRU1zUlVGRGVFSTdRVUZEU1N4VlFVRkphM0pDTEdkQ1FVRm5RaXhIUVVGSGJISkNMRU5CUVVNc1EwRkJRMGNzU1VGQlJpeERRVUZQUXl4VlFVRTVRanM3UVVGRFFTeFZRVUZKTEV0QlFVczBhMElzVjBGQlRDeEpRVUZ2UWxrc2EwUkJRVThzUTBGQlEyMUNMRmRCUVRWQ0xFbEJRVEpETEV0QlFVczNRaXhyUWtGQlRDeERRVUYzUWpSQ0xGRkJRVzVGTEVsQlFTdEZMRU5CUVVNc1MwRkJTelZDTEd0Q1FVRk1MRU5CUVhkQ2NHMUNMRkZCUVhwQ0xFbEJRWEZEYjNOQ0xHZENRVUY0U0N4RlFVTkJPMEZCUTBscVNTeFpRVUZKTEVOQlFVTTJReXhKUVVGTUxESkdRVUUyUm05R0xHZENRVUUzUmpzN1FVRkRRVHRCUVVOSU96dEJRVU5FTEZWQlFVbERMRzlDUVVGdlFpeEhRVUZITEVsQlFVazFUaXdyUkVGQlNpeERRVUY1UW5aa0xFTkJRWHBDTEVOQlFUTkNPMEZCUTBFc1ZVRkJTVzl5UWl4SFFVRkhMSE5EUVVFclFrUXNiMEpCUVc5Q0xFTkJRVU5GTEdOQlFYSkNMRVZCUVM5Q0xHOURRVUU0UmtZc2IwSkJRVzlDTEVOQlFVTkhMR0ZCUVhKQ0xFVkJRVGxHTEVOQlFWQTdRVUZEUVN4WFFVRkxjRWNzYTBKQlFVd3NRMEZCZDBJelNDeHZRa0ZCZUVJc1EwRkJOa00wVGl4dlFrRkJOME1zUlVGQmJVVkRMRWRCUVc1Rk8wRkJSVUU1YjBJc1kwRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNiMEpCUVdoQ0xFVkJRWE5ETzBGQlFVTkRMR05CUVUwc1JVRkJSU3hMUVVGTGVXbENPMEZCUVdRc1QwRkJkRU1zUTBGQmRrSTdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TkVOQlEzZENiR3hDTEVNc1JVRkRlRUk3UVVGRFNTeFZRVUZKYTNKQ0xHZENRVUZuUWl4SFFVRkhiSEpDTEVOQlFVTXNRMEZCUTBjc1NVRkJSaXhEUVVGUFF5eFZRVUU1UWpzN1FVRkRRU3hWUVVGSkxFdEJRVXMwYTBJc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRMjFDTEZkQlFUVkNMRWxCUVRKRExFdEJRVXMzUWl4clFrRkJUQ3hEUVVGM1FqUkNMRkZCUVc1RkxFbEJRU3RGTEVOQlFVTXNTMEZCU3pWQ0xHdENRVUZNTEVOQlFYZENjRzFDTEZGQlFYcENMRWxCUVhGRGIzTkNMR2RDUVVGNFNDeEZRVU5CTzBGQlEwa3NZVUZCUzJwSkxFbEJRVXdzUTBGQlZUWkRMRWxCUVZZc01FWkJRV2xIYjBZc1owSkJRV3BIT3p0QlFVTkJPMEZCUTBnc1QwRk9UQ3hEUVU5Sk96czdRVUZGUVN4WFFVRkxhRWNzYTBKQlFVd3NRMEZCZDBKeFJ5eFRRVUY0UWl4RFFVRnJRM1p5UWl4RFFVRkRMRU5CUVVOUkxHVkJRVVlzUlVGQmJFTXNSVUZCZFVSU0xFTkJRWFpFTEVWQlFUQkVMRFpDUVVFeFJDeEZRVlJLTEVOQlZVazdPMEZCUlVGelF5eGpRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh2UWtGQmFFSXNSVUZCYzBNN1FVRkJRME1zWTBGQlRTeEZRVUZGTEV0QlFVdDVhVUk3UVVGQlpDeFBRVUYwUXl4RFFVRjJRanRCUVVOSUxFc3NRMEZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3pzclEwRkRNa0pzYkVJc1F5eEZRVU16UWp0QlFVTkpMRlZCUVVscmNrSXNaMEpCUVdkQ0xFZEJRVWRzY2tJc1EwRkJReXhEUVVGRFJ5eEpRVUZHTEVOQlFVOURMRlZCUVRsQ096dEJRVU5CTEZWQlFVa3NTMEZCU3pSclFpeFhRVUZNTEVsQlFXOUNXU3hyUkVGQlR5eERRVUZEYlVJc1YwRkJOVUlzU1VGQk1rTXNTMEZCU3pkQ0xHdENRVUZNTEVOQlFYZENORUlzVVVGQmJrVXNTVUZCSzBVc1EwRkJReXhMUVVGTE5VSXNhMEpCUVV3c1EwRkJkMEp3YlVJc1VVRkJla0lzU1VGQmNVTnZjMElzWjBKQlFYaElMRVZCUTBFN1FVRkRTU3hoUVVGTGFra3NTVUZCVEN4RFFVRlZOa01zU1VGQlZpeDVSa0ZCWjBkdlJpeG5Ra0ZCYUVjN08wRkJRMEU3UVVGRFNDeFBRVTVNTEVOQlQwazdPenRCUVVWQkxGZEJRVXRvUnl4clFrRkJUQ3hEUVVGM1FuRkhMRk5CUVhoQ0xFTkJRV3REZG5KQ0xFTkJRVU1zUTBGQlExRXNaVUZCUml4RlFVRnNReXhGUVVGMVJGSXNRMEZCZGtRc1JVRkJNRVFzTkVKQlFURkVMRVZCVkVvc1EwRlZTVHM3UVVGRlFYTkRMR05CUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4SlFVRkpReXhYUVVGS0xFTkJRV2RDTEc5Q1FVRm9RaXhGUVVGelF6dEJRVUZEUXl4alFVRk5MRVZCUVVVc1MwRkJTM2xwUWp0QlFVRmtMRTlCUVhSRExFTkJRWFpDTzBGQlEwZ3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08yZEVRVU0wUW14c1FpeERMRVZCUXpWQ08wRkJRMGtzVlVGQlNXdHlRaXhuUWtGQlowSXNSMEZCUjJ4eVFpeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUME1zVlVGQk9VSTdPMEZCUTBFc1ZVRkJTU3hMUVVGTE5HdENMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVOdFFpeFhRVUUxUWl4SlFVRXlReXhMUVVGTE4wSXNhMEpCUVV3c1EwRkJkMEkwUWl4UlFVRnVSU3hKUVVFclJTeERRVUZETEV0QlFVczFRaXhyUWtGQlRDeERRVUYzUW5CdFFpeFJRVUY2UWl4SlFVRnhRMjl6UWl4blFrRkJlRWdzUlVGRFFUdEJRVU5KTEdGQlFVdHFTU3hKUVVGTUxFTkJRVlUyUXl4SlFVRldMSE5HUVVFMlJtOUdMR2RDUVVFM1JqczdRVUZEUVR0QlFVTklMRTlCVGt3c1EwRlBTVHM3TzBGQlJVRXNWMEZCUzJoSExHdENRVUZNTEVOQlFYZENjVWNzVTBGQmVFSXNRMEZCYTBOMmNrSXNRMEZCUXl4RFFVRkRVU3hsUVVGR0xFVkJRV3hETEVWQlFYVkVVaXhEUVVGMlJDeEZRVUV3UkN4NVFrRkJNVVFzUlVGVVNpeERRVlZKT3p0QlFVVkJjME1zWTBGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xFbEJRVWxETEZkQlFVb3NRMEZCWjBJc2IwSkJRV2hDTEVWQlFYTkRPMEZCUVVORExHTkJRVTBzUlVGQlJTeExRVUZMZVdsQ08wRkJRV1FzVDBGQmRFTXNRMEZCZGtJN1FVRkRTQ3hMTEVOQlJVUTdRVUZEUVR0QlFVTkJPMEZCUTBFN096czdNRU5CUTNOQ2JHeENMRU1zUlVGRGRFSTdRVUZEU1N4VlFVRkphM0pDTEdkQ1FVRm5RaXhIUVVGSGJISkNMRU5CUVVNc1EwRkJRMGNzU1VGQlJpeERRVUZQUXl4VlFVRTVRanM3UVVGRFFTeFZRVUZKTEV0QlFVczBhMElzVjBGQlRDeEpRVUZ2UWxrc2EwUkJRVThzUTBGQlEyMUNMRmRCUVRWQ0xFbEJRVEpETEV0QlFVczNRaXhyUWtGQlRDeERRVUYzUWpSQ0xGRkJRWGhDTEVkQlFXMURMRU5CUVVNc1MwRkJTelZDTEd0Q1FVRk1MRU5CUVhkQ2NHMUNMRkZCUVhwQ0xFbEJRWEZEYjNOQ0xHZENRVUYyU0N4RlFVTkJPMEZCUTBrc1lVRkJTMnBKTEVsQlFVd3NRMEZCVlRaRExFbEJRVllzTmtaQlFXOUhiMFlzWjBKQlFYQkhPenRCUVVOQk8wRkJRMGdzVDBGT1RDeERRVTlKT3pzN1FVRkZRU3hYUVVGTGFFY3NhMEpCUVV3c1EwRkJkMEp4Unl4VFFVRjRRaXhEUVVGclEzWnlRaXhEUVVGRExFTkJRVU5STEdWQlFVWXNSVUZCYkVNc1JVRkJkVVJTTEVOQlFYWkVMRVZCUVRCRUxESkNRVUV4UkN4RlFWUktMRU5CVlVrN08wRkJSVUZ6UXl4alFVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSXNTVUZCU1VNc1YwRkJTaXhEUVVGblFpeHZRa0ZCYUVJc1JVRkJjME03UVVGQlEwTXNZMEZCVFN4RlFVRkZMRXRCUVV0NWFVSTdRVUZCWkN4UFFVRjBReXhEUVVGMlFqdEJRVU5JTEVzc1EwRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenQ1UTBGRGNVSnNiRUlzUXl4RlFVTnlRanRCUVVOSkxGVkJRVWtzUzBGQlMyZHNRaXhYUVVGTUxFbEJRVzlDV1N4clJFRkJUeXhEUVVGRGJVSXNWMEZCTlVJc1NVRkJNa01zUzBGQlN6ZENMR3RDUVVGTUxFTkJRWGRDTkVJc1VVRkJka1VzUlVGRFFUdEJRVU5KTEdGQlFVczNSQ3hKUVVGTUxFTkJRVlUyUXl4SlFVRldMRzFGUVVFd1JUbHNRaXhEUVVGRExFTkJRVU5uVGl4aFFVRTFSVHM3UVVGRFFUdEJRVU5JTEU5QlRFd3NRMEZOU1RzN08wRkJSVUVzVjBGQlMydFpMR3RDUVVGTUxFTkJRWGRDY1Vjc1UwRkJlRUlzUTBGQmEwTjJja0lzUTBGQlF5eERRVUZEVVN4bFFVRkdMRVZCUVd4RExFVkJRWFZFVWl4RFFVRjJSQ3hGUVVFd1JDd3lRa0ZCTVVRc1JVRlNTaXhEUVZOSk96dEJRVVZCYzBNc1kwRkJVU3hEUVVGRFF5eGhRVUZVTEVOQlFYVkNMRWxCUVVsRExGZEJRVW9zUTBGQlowSXNiMEpCUVdoQ0xFVkJRWE5ETzBGQlFVTkRMR05CUVUwc1JVRkJSU3hMUVVGTGVXbENPMEZCUVdRc1QwRkJkRU1zUTBGQmRrSTdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3Y1VSQlEybERiR3hDTEVNc1JVRkRha003UVVGRFNTeFZRVUZKTEV0QlFVdG5iRUlzVjBGQlRDeEpRVUZ2UWxrc2EwUkJRVThzUTBGQlEyMUNMRmRCUVRWQ0xFbEJRVEpETEV0QlFVczNRaXhyUWtGQlRDeERRVUYzUWpSQ0xGRkJRWFpGTEVWQlEwRTdRVUZEU1N4aFFVRkxOMFFzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXdyUlVGQmMwWTViRUlzUTBGQlF5eERRVUZEWjA0c1lVRkJlRVk3TzBGQlEwRTdRVUZEU0N4UFFVeE1MRU5CVFVrN096dEJRVVZCTEZkQlFVdHJXU3hyUWtGQlRDeERRVUYzUW5GSExGTkJRWGhDTEVOQlFXdERkbkpDTEVOQlFVTXNRMEZCUTFFc1pVRkJSaXhGUVVGc1F5eEZRVUYxUkZJc1EwRkJka1FzUlVGQk1FUXNNa0pCUVRGRUxFVkJVa29zUTBGVFNUczdRVUZGUVhORExHTkJRVkVzUTBGQlEwTXNZVUZCVkN4RFFVRjFRaXhKUVVGSlF5eFhRVUZLTEVOQlFXZENMRzlDUVVGb1FpeEZRVUZ6UXp0QlFVRkRReXhqUVVGTkxFVkJRVVVzUzBGQlMzbHBRanRCUVVGa0xFOUJRWFJETEVOQlFYWkNPMEZCUTBnc1N5eERRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPenM3TzNORFFVTnJRbXhzUWl4RExFVkJRMnhDTzBGQlEwa3NWVUZCU1N4TFFVRkxaMnhDTEZkQlFVd3NTVUZCYjBKWkxHdEVRVUZQTEVOQlFVTnRRaXhYUVVFMVFpeEpRVU5ITEVOQlFVTXNTMEZCU3pkQ0xHdENRVUZNTEVOQlFYZENORUlzVVVGRU5VSXNTVUZGUnl4TFFVRkxOVUlzYTBKQlFVd3NRMEZCZDBKelJ5eHJRa0ZHTTBJc1NVRkhSM2h5UWl4RFFVRkRMRU5CUVVOeFl5eFJRVUZHTEUxQlFXZENMR2RDUVVoMlFpeEZRVWxCTzBGQlEwazdRVUZEUVN4aFFVRkxORWNzU1VGQlRDeERRVUZWTmtNc1NVRkJWanM3UVVGRFFTeGhRVUZMTWtZc2RVSkJRVXc3UVVGRFNDeFBRVkpFTEUxQlZVRTdRVUZEU1N4aFFVRkxlRWtzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXh0UlVGQk1FVTViRUlzUTBGQlF5eERRVUZEWjA0c1lVRkJOVVU3UVVGRFNEdEJRVU5LTEVzc1EwRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdPenR6UkVGRGEwTm9UaXhETEVWQlEyeERPMEZCUTBrc1ZVRkJTVEJ5UWl4UFFVRlBMRWRCUVVjc1MwRkJTM2hITEd0Q1FVRnVRanM3UVVGRFFTeFZRVUZKTEV0QlFVdEdMRmRCUVV3c1NVRkJiMEpaTEd0RVFVRlBMRU5CUVVOdFFpeFhRVUUxUWl4SlFVRXlRekpGTEU5QlFVOHNRMEZCUXpWRkxGRkJRWFpFTEVWQlEwRTdRVUZEU1N4aFFVRkxOMFFzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExIZEZRVUZtT3p0QlFVTkJPMEZCUTBnN08wRkJSVVFzVlVGQlNTeERRVUZETkVZc1QwRkJUeXhEUVVGRFF5eHRRa0ZCWWl4RlFVTkJPMEZCUTBrc1lVRkJTekZKTEVsQlFVd3NRMEZCVlRaRExFbEJRVllzUTBGQlpTdzJTRUZCWmpzN1FVRkRRVHRCUVVOSU96dEJRVVZFTEZWQlFVazBSaXhQUVVGUExFTkJRVU5GTEdkQ1FVRlNMRWxCUVRSQ05YSkNMRU5CUVVNc1EwRkJRMGdzUlVGQmJFTXNSVUZEUVR0QlFVTkpMR0ZCUVV0dmFrSXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTERSSFFVRm1PenRCUVVOQk8wRkJRMGdzVDBGc1Frd3NRMEZ2UWtrN1FVRkRRVHM3TzBGQlEwRXNWMEZCU3pkRExFbEJRVXdzUTBGQlZUWkRMRWxCUVZZN08wRkJRMEUwUml4aFFVRlBMRU5CUVVOSExHTkJRVkk3UVVGRFFTeFZRVUZKUXl4WFFVRlhMRWRCUVVjc1NVRkJTV3hwUWl4eFJVRkJTaXhEUVVFclFqVktMRU5CUVM5Q0xFTkJRV3hDTzBGQlEwRXdja0lzWVVGQlR5eERRVUZEU3l4dFFrRkJVaXhIUVVFNFFrUXNWMEZCVnl4RFFVRkRkRkFzVjBGQldpeEZRVUU1UWpzN1FVRkRRU3hWUVVGSkxFTkJRVU56VUN4WFFVRlhMRU5CUVVORkxIZENRVUZhTEVWQlFVd3NSVUZEUVR0QlFVTkpMRmxCUVVsR0xGZEJRVmNzUTBGQlEwY3NhVUpCUVZvc1EwRkJPRUpRTEU5QlFVOHNRMEZCUXpWelFpeFJRVUYwUXl4RFFVRktMRVZCUTBFN1FVRkRTVHRCUVVWQkxHTkJRVWxuZEVJc1YwRkJWeXhEUVVGRFNTdzJRa0ZCV2l4TlFVRXJReXhEUVVGRFVpeFBRVUZQTEVOQlFVTm9SQ3h6UWtGQk5VUXNSVUZEUVR0QlFVTkpMR2xDUVVGTGVrWXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTEd0SFFVTk1MRFpHUVVSV096dEJRVVZCTEdsQ1FVRkxXaXhyUWtGQlRDeERRVUYzUW01aUxHbENRVUY0UWl4RFFVRXdReXhKUVVGSlFTdzBSRUZCU2l4RFFVRnpRakpvUWl4UFFVRlBMRU5CUVVNMWMwSXNVVUZCT1VJc1JVRkJkME5yUWl4RFFVRkRMRU5CUVVOSUxFVkJRVEZETEVWQlFUaERMREJEUVVFNVF5eERRVUV4UXl4RlFVRnhTU3gzUmtGQmNrazdRVUZEU0N4WFFVeEVMRTFCVFVzc1NVRkJTV2x6UWl4WFFVRlhMRU5CUVVOTExHOUNRVUZhTEUxQlFYTkRMRU5CUVVOVUxFOUJRVThzUTBGQlF6RkRMRzlDUVVGdVJDeEZRVU5NTzBGQlEwa3NhVUpCUVVzdlJpeEpRVUZNTEVOQlFWVTJReXhKUVVGV0xFTkJRV1VzYlVaQlEwd3NORWRCUkZZN08wRkJSVUVzYVVKQlFVdGFMR3RDUVVGTUxFTkJRWGRDTTBnc2IwSkJRWGhDTEVOQlFUWkRMRWxCUVVsQkxDdEVRVUZLTEVOQlFYbENiVThzVDBGQlR5eERRVUZETlhOQ0xGRkJRV3BETEVWQlFUSkRhMElzUTBGQlF5eERRVUZEU0N4RlFVRTNReXhGUVVGcFJDeFRRVUZxUkN4RlFVRTBSQ3hUUVVFMVJDeERRVUUzUXl4RlFVRnhTQ3hwUmtGQmNrZzdRVUZEU0N4WFFVeEpMRTFCVDB3N1FVRkRTU3hwUWtGQlMyOXFRaXhKUVVGTUxFTkJRVlUyUXl4SlFVRldMRU5CUVdVc09FTkJRV1lzUlVGRVNpeERRVVZKT3pzN1FVRkRRVHRCUVVOSU8wRkJRMG9zVTBGMFFrUXNUVUYxUWtzc1NVRkJTV2RITEZkQlFWY3NRMEZCUTAwc2NVSkJRVm9zUlVGQlNpeEZRVU5NTzBGQlEwazdRVUZEUVR0QlFVTkJMR1ZCUVV0dVNpeEpRVUZNTEVOQlFWVTJReXhKUVVGV0xHdEhRVWhLTEVOQlNVazdPenRCUVVOQk8wRkJRMGdzVTBGUVNTeE5RVk5NTzBGQlEwazdRVUZEUVN4bFFVRkxOME1zU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhyUmtGQmVVWm5SeXhYUVVGWExFTkJRVU4wVUN4WFFVRmFMRVZCUVhwR0xHOUNRVUUwU0hoakxFTkJRVU1zUTBGQlEzRmpMRkZCUVVZc1JVRkJOVWc3TzBGQlEwRTdRVUZEU0R0QlFVTktMRTlCZGtORUxFMUJlVU5CTzBGQlEwa3NXVUZCU1hGUUxFOUJRVThzUTBGQlExY3NTVUZCVWl4SlFVRm5RblpGTERCRVFVRmxMRU5CUVVOblF5eHJRa0ZCY0VNc1JVRkRRVHRCUVVOSk8wRkJRMEVzWlVGQlN6ZEhMRWxCUVV3c1EwRkJWVFpETEVsQlFWWXNRMEZCWlN3eVJFRkJaanM3UVVGRFFXZEhMSEZDUVVGWExFTkJRVU5STEc5RFFVRmFPMEZCUTBGYUxHbENRVUZQTEVOQlFVTklMRk5CUVZJc1EwRkJhMEoyY2tJc1EwRkJReXhEUVVGRFVTeGxRVUZHTEVWQlFXeENMRVZCUVhWRFVpeERRVUYyUXl4RlFVRXdReXcwUWtGQk1VTTdRVUZEU0N4VFFVNUVMRTFCVVVFN1FVRkRTVHRCUVVOQkxHTkJRVWwxYzBJc1dVRkJXU3hIUVVGSExFdEJRVXR3UXl4UlFVRk1MRU5CUVdNeVFpeFhRVUZrTEVWQlFUSkNTaXhQUVVGUExFTkJRVU0xYzBJc1VVRkJia01zUlVGQk5rTTBjMElzVDBGQlR5eERRVUZETTFJc1YwRkJja1FzUlVGQmEwVXlVaXhQUVVGUExFTkJRVU5qTEZkQlFURkZMRU5CUVc1Q096dEJRVU5CTEdOQlFVbEVMRmxCUVZrc1NVRkJTVGx5UWl4elJFRkJXU3hEUVVGRGEwd3NUMEZCYWtNc1JVRkRRVHRCUVVOSk8wRkJRMEVzYVVKQlFVdHpXQ3hKUVVGTUxFTkJRVlUyUXl4SlFVRldMRU5CUVdVc05FSkJRV1k3TzBGQlEwRTBSaXh0UWtGQlR5eERRVUZEWlN4blFrRkJVaXhEUVVGNVFpeHpSRUZCZWtJN1FVRkRTQ3hYUVV4RUxFMUJUMEU3UVVGRFNUdEJRVU5CV0N4MVFrRkJWeXhEUVVGRFVTeHZRMEZCV2p0QlFVTkJXaXh0UWtGQlR5eERRVUZEU0N4VFFVRlNMRU5CUVd0Q1owSXNXVUZCYkVJc1JVRkJaME4yYzBJc1EwRkJhRU1zUlVGQmJVTXNiMEpCUVc1RE8wRkJRMGc3UVVGRFNqdEJRVU5LT3p0QlFVTkVjME1zWTBGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xFbEJRVWxETEZkQlFVb3NRMEZCWjBJc2IwSkJRV2hDTEVWQlFYTkRPMEZCUVVORExHTkJRVTBzUlVGQlJXbHdRanRCUVVGVUxFOUJRWFJETEVOQlFYWkNPMEZCUTBnc1N5eERRVVZFT3pzN08zRkVRVU5wUXpGeVFpeERMRVZCUTJwRE8wRkJRMGtzVlVGQlRXdHlRaXhuUWtGQlowSXNSMEZCUjJ4eVFpeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUME1zVlVGQmFFTTdRVUZEUVN4VlFVRk5jM0pDTEU5QlFVOHNSMEZCUnl4TFFVRkxlRWNzYTBKQlFYSkNPMEZCUTBFc1ZVRkJUWGRJTEdOQlFXTXNSMEZCUnl4SlFVRkphR3BDTEc5RlFVRktMRU5CUVRoQ01Vb3NRMEZCT1VJc1EwRkJka0k3TzBGQlJVRXNWVUZCU1N4TFFVRkxaMnhDTEZkQlFVd3NTVUZCYjBKWkxHdEVRVUZQTEVOQlFVTnRRaXhYUVVFMVFpeEpRVUV5UXpKRkxFOUJRVThzUTBGQlF6VkZMRkZCUVc1RUxFbEJRU3RFTEVOQlFVTTBSU3hQUVVGUExFTkJRVU0xYzBJc1VVRkJWQ3hKUVVGeFFtOXpRaXhuUWtGQmVFWXNSVUZEUVR0QlFVTkpMRmxCUVVrc1EwRkJRM2RDTEdOQlFXTXNRMEZCUTBNc2VVSkJRV1lzUlVGQlRDeEZRVUZwUkR0QlFVTTNReXhsUVVGTE1Vb3NTVUZCVEN4RFFVRlZOa01zU1VGQlZpeDNSa0ZCSzBadlJpeG5Ra0ZCTDBZN08wRkJRMEU3UVVGRFNEdEJRVU5LT3p0QlFVVkVMRlZCUVVsM1FpeGpRVUZqTEVOQlFVTnVjMElzVDBGQmJrSXNSVUZCTkVJN08wRkJSVFZDTEZkQlFVc3dhVUlzU1VGQlRDeERRVUZWYzBNc1NVRkJWaXhEUVVGbExEQkRRVUV3UTIxSUxHTkJRV01zUTBGQlEwVXNZMEZCWml4RlFVRXhReXhIUVVFMFJTeFhRVUUxUlN4SFFVRXdSa1lzWTBGQll5eERRVUZEUnl4alFVRm1MRVZCUVhwSE96dEJRVVZCYmtJc1lVRkJUeXhEUVVGRGIwSXNXVUZCVWl4RFFVRnhRaXh0UTBGQmJVTktMR05CUVdNc1EwRkJRMGNzWTBGQlppeEZRVUZ1UXl4SFFVRnhSU3hwUWtGQk1VWTdRVUZGUVhaeFFpeGpRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh2UWtGQmFFSXNSVUZCYzBNN1FVRkJRME1zWTBGQlRTeEZRVUZGYVhCQ08wRkJRVlFzVDBGQmRFTXNRMEZCZGtJN1FVRkRTRHM3T3poRFFVVjVRakZ5UWl4RExFVkJRekZDTzBGQlEwa3NWVUZCU1N0elFpeFJRVUZSTEVkQlFVY3NTVUZCU1hCcFFpdzBSRUZCU2l4RFFVRjFRak5MTEVOQlFYWkNMRU5CUVdZN08wRkJRMEVzVlVGQlNTdHpRaXhSUVVGUkxFTkJRVU5ETEZOQlFWUXNSVUZCU2l4RlFVTkJPMEZCUTBrc1lVRkJTM0pLTEZkQlFVd3NSMEZCYlVJc1NVRkJia0k3TzBGQlEwRXNZVUZCUzFZc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml4RFFVRmxMRFpDUVVGbU8wRkJRMGdzVDBGS1JDeE5RVTFCTzBGQlEwa3NZVUZCU3pkRExFbEJRVXdzUTBGQlZYTkRMRWxCUVZZc1EwRkJaU3h4UTBGQmNVTjNTQ3hSUVVGUkxFTkJRVU5GTEdOQlFWUXNSVUZCY2tNc1IwRkJhVVVzVjBGQmFrVXNSMEZCSzBWR0xGRkJRVkVzUTBGQlEwY3NZMEZCVkN4RlFVRTVSanRCUVVOSU8wRkJRMG83T3p0M1JFRkhSRHRCUVVGQk96dEJRVU5KTEZWQlFVbERMR1ZCUVdVc1IwRkJSeXhMUVVGMFFqdEJRVVZCTEZWQlFVbDZRaXhQUVVGUExFZEJRVWNzUzBGQlMzaEhMR3RDUVVGdVFqczdRVUZEUVN4VlFVRkpMRXRCUVV0R0xGZEJRVXdzU1VGQmIwSlpMR3RFUVVGUExFTkJRVU50UWl4WFFVRTFRaXhKUVVFeVF5eERRVUZETWtVc1QwRkJUeXhEUVVGRE5VVXNVVUZCZUVRc1JVRkRRVHRCUVVOSkxGbEJRVWx6Unl4TFFVRkxMRWRCUVVjeFFpeFBRVUZhT3p0QlFVTkJMRmxCUVVrd1FpeExRVUZMTEVOQlFVTTFRaXhyUWtGQlRpeEpRVUUwUW01bExFbEJRVWtzUTBGQlEwUXNSMEZCVEN4TFFVRmhaMmRDTEV0QlFVc3NRMEZCUTBNc2FVSkJRVTRzUjBGQk1FSXNTMEZCU3psSkxHMUNRVUUxUlN4RlFVTkJPMEZCUTBrN1FVRkRRU3hsUVVGTGRFSXNTVUZCVEN4RFFVRlZOa01zU1VGQlZqczdRVUZEUVRSR0xHbENRVUZQTEVOQlFVTmxMR2RDUVVGU08wRkJRMEZWTEhsQ1FVRmxMRWRCUVVjc1NVRkJiRUk3UVVGRFNDeFRRVTVFTEUxQlQwc3NTVUZCU1VNc1MwRkJTeXhEUVVGRGJFVXNWMEZCVGl4SlFVRnhRamRpTEVsQlFVa3NRMEZCUTBRc1IwRkJUQ3hMUVVGaFoyZENMRXRCUVVzc1EwRkJRMFVzYjBKQlFVNHNSMEZCTmtJc1MwRkJTMmhLTEcxQ1FVRjRSU3hGUVVOTU8wRkJRMGs3UVVGRFFTeGxRVUZMY2tJc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml3MlJFRkJiMFZ6U0N4TFFVRkxMRU5CUVVORkxHOUNRVUV4UlRzN1FVRkRRU3hsUVVGTE4wSXNkVUpCUVV3N1FVRkRTRHRCUVVOS096dEJRVVZFTEZWQlFVa3dRaXhsUVVGS0xFVkJRWEZDTzBGQlEycENOM0ZDTEdkQ1FVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSXNTVUZCU1VNc1YwRkJTaXhEUVVGblFpeHZRa0ZCYUVJc1JVRkJjME03UVVGQlEwTXNaMEpCUVUwc1JVRkJSU3hMUVVGTGVXbENPMEZCUVdRc1UwRkJkRU1zUTBGQmRrSTdRVUZEU0RzN1FVRkZSR3BwUWl4blFrRkJWU3hEUVVGRE8wRkJRVUVzWlVGQlRTeExRVUZKTEVOQlFVTXdhVUlzYVVOQlFVd3NSVUZCVGp0QlFVRkJMRTlCUVVRc1JVRkJhVVFzUzBGQlMzUkNMSGRDUVVGMFJDeERRVUZXTzBGQlEwZzdPenR4UTBGRlowSnlhMElzUXl4RlFVRkhPMEZCUTJoQ0xGbEJRVTBzU1VGQlNUQkNMRXRCUVVvc1EwRkJWU3hyUlVGQlZpeERRVUZPTzBGQlEwZzdPenN5UTBGRmMwSXhRaXhETEVWQlFVYzdRVUZEZEVJc1dVRkJUU3hKUVVGSk1FSXNTMEZCU2l4RFFVRlZMR3RGUVVGV0xFTkJRVTQ3UVVGRFNEczdPM2REUVVWdFFqRkNMRU1zUlVGQlJ6dEJRVU51UWl4WlFVRk5MRWxCUVVrd1FpeExRVUZLTEVOQlFWVXNhMFZCUVZZc1EwRkJUanRCUVVOSU96czdORU5CUlhWQ01VSXNReXhGUVVONFFqdEJRVU5KTEZWQlFVa3NUMEZCVHl4TFFVRkxiMHdzWjBKQlFWb3NTMEZCYVVNc1ZVRkJja01zUlVGQmFVUXNTMEZCUzBFc1owSkJRVXdzUTBGQmMwSndUQ3hEUVVGMFFqdEJRVU53UkRzN08ydEVRVVUyUWtFc1F5eEZRVU01UWp0QlFVTkpMRlZCUVVrc1QwRkJUeXhMUVVGTGMwd3NjMEpCUVZvc1MwRkJkVU1zVlVGQk0wTXNSVUZCZFVRc1MwRkJTMEVzYzBKQlFVd3NRMEZCTkVKMFRDeERRVUUxUWp0QlFVTXhSRHM3T3l0RFFVVXdRa0VzUXl4RlFVTXpRanRCUVVOSkxGVkJRVWtzVDBGQlR5eExRVUZMZFV3c2JVSkJRVm9zUzBGQmIwTXNWVUZCZUVNc1JVRkJiMFFzUzBGQlMwRXNiVUpCUVV3c1EwRkJlVUoyVEN4RFFVRjZRanRCUVVOMlJDeExMRU5CUlVRN1FVRkZRVHM3T3p0cFEwRkhRVHRCUVVGQk96dEJRVU5KTzBGQlEwRXNWMEZCUzJ0cVFpeExRVUZNTEVkQlFXRXNTVUZCU1Rsb1FpeHpSRUZCU2l4RlFVRmlPenRCUVVWQkxGVkJRVWtzUzBGQlMyMXpRaXhoUVVGTUxFMUJRWGRDTEV0QlFVdDRTeXh6UWtGQmFrTXNSVUZCZVVRN1FVRkRja1FzWVVGQlMwVXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTERaQ1FVRm1PenRCUVVOQkxHRkJRVXM1UXl4alFVRk1MRWRCUVhOQ0xFdEJRVXRCTEdOQlFVd3NRMEZCYjBKM1N5eFBRVUZ3UWl4RFFVRTBRaXhQUVVFMVFpeEZRVUZ4UXl4UlFVRnlReXhEUVVGMFFqdEJRVU5FT3p0QlFVTkVMRmRCUVV0MFN5eExRVUZNTEVOQlFWYzNhRUlzVDBGQldDeEhRVUZ4UWl4TFFVRkxNbWhDTEdOQlFURkNMRU5CVWs0c1EwRlZTVHM3UVVGRFFURm5RaXhqUVVGUkxFTkJRVU50Y2tJc1owSkJRVlFzUTBGQk1FSXNlVUpCUVRGQ0xFVkJRWEZFTEZWQlFVTnNaU3hEUVVGRU8wRkJRVUVzWlVGQlR5eE5RVUZKTEVOQlFVTnRaU3cyUWtGQlRDeERRVUZ0UTI1bExFTkJRVU1zUTBGQlF6bE5MRTFCUVhKRExFTkJRVkE3UVVGQlFTeFBRVUZ5UkR0QlFVTkJTQ3hqUVVGUkxFTkJRVU50Y2tJc1owSkJRVlFzUTBGQk1FSXNhVUpCUVRGQ0xFVkJRVFpETEZWQlFVTnNaU3hEUVVGRU8wRkJRVUVzWlVGQlR5eE5RVUZKTEVOQlFVTnZaU3h4UWtGQlRDeERRVUV5UW5CbExFTkJRVU1zUTBGQlF6bE5MRTFCUVRkQ0xFTkJRVkE3UVVGQlFTeFBRVUUzUXp0QlFVTkJTQ3hqUVVGUkxFTkJRVU50Y2tJc1owSkJRVlFzUTBGQk1FSXNaVUZCTVVJc1JVRkJNa01zVlVGQlEyeGxMRU5CUVVRN1FVRkJRU3hsUVVGUExFMUJRVWtzUTBGQlEzRmxMR3RDUVVGTUxFTkJRWGRDY21Vc1EwRkJReXhEUVVGRE9VMHNUVUZCTVVJc1EwRkJVRHRCUVVGQkxFOUJRVE5ETzBGQlEwZ3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3YTBSQlF6aENNbkZDTEVzc1JVRkRPVUk3UVVGQlFUczdRVUZEU1N4alFVRlJRU3hMUVVGTExFTkJRVU42YzBJc1pVRkJaRHRCUVVWSkxHRkJRVXRCTERKRVFVRmxMRU5CUVVORkxGVkJRWEpDTzBGQlEwa3NaVUZCUzI5cFFpeEpRVUZNTEVOQlFWVTJReXhKUVVGV0xESkRRVUZyUkN4TFFVRkxPVU1zWTBGQmRrUTdPMEZCUTBFN08wRkJSVW9zWVVGQlMzSnBRaXd5UkVGQlpTeERRVUZEUnl4VFFVRnlRanRCUVVOSkxHVkJRVXRwYWtJc2QwTkJRVXdzUjBGQlowUXNRMEZCYUVRN08wRkJSVUVzWTBGQlNTeExRVUZMYVVJc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRMmxDTEU5QlFUVkNMRWxCUVhWRExFdEJRVXRVTEdGQlFVd3NTVUZCYzBKTUxHOUVRVUZUTEVOQlFVTkhMRkZCUVRORkxFVkJRMEU3UVVGRFNTeHBRa0ZCUzJwQ0xIVkNRVUZNTEVOQlFUWkNkR3hDTEU5QlFUZENMRWRCUVhWRExIVkNRVUYyUXp0QlFVTkJNa01zYjBKQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xIbENRVUZvUWl4RlFVRXlRenRCUVVGRFF5eHZRa0ZCVFN4RlFVRkZMRXRCUVV0M2FVSTdRVUZCWkN4aFFVRXpReXhEUVVGMlFqdEJRVU5CTEdkQ1FVRkpOMGNzUlVGQlJTeEhRVUZIT1U0c05FUkJRV0VzUTBGQlEzVmtMR05CUVdRc1JVRkJWRHM3UVVGRFFTeHBRa0ZCUzNaSExFdEJRVXdzUTBGQlYyeEtMRVZCUVVVc1EwRkJRMjFLTEZOQlFVZ3NSVUZCV0R0QlFVTklMRmRCVGtRc1RVRlJRVHRCUVVOSkxHbENRVUZMZEVVc1NVRkJUQ3hEUVVGVk5rTXNTVUZCVml3MFFrRkJiVU1zUzBGQlN6bERMR05CUVhoRE96dEJRVU5CTEdsQ1FVRkxVU3huUWtGQlRDeERRVUZ6UW1oakxFOUJRWFJDTEVkQlFXZERMRXRCUVV0ellpeFJRVUZ5UXpzN1FVRkRRU3hwUWtGQlMybEpMR3RDUVVGTU8wRkJRMGc3TzBGQlEwUTdPMEZCUlVvc1lVRkJTM0J4UWl3eVJFRkJaU3hEUVVGRFF5eFpRVUZ5UWp0QlFVTkpPMEZCUTBFc1pVRkJTM0ZwUWl4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEdsRFFVRjNReXhMUVVGTE9VTXNZMEZCTjBNN08wRkJRMEVzWlVGQlMxa3NiVUpCUVV3c1IwRkJNa0lzU1VGQk0wSTdRVUZEUVN4bFFVRkxReXgxUWtGQlRDeEhRVUVyUWl4SlFVRXZRanRCUVVOQkxHVkJRVXRETEdsQ1FVRk1MRWRCUVhsQ0xFTkJRWHBDT3p0QlFVTkJMR1ZCUVV0blN5eHBRa0ZCVERzN1FVRkZRU3hqUVVGSkxFdEJRVXN4U0N4aFFVRk1MRWxCUVhOQ1RDeHZSRUZCVXl4RFFVRkRSeXhSUVVGd1F5eEZRVU5CTzBGQlEwa3NhVUpCUVV0RkxHRkJRVXdzUjBGQmNVSk1MRzlFUVVGVExFTkJRVU5ETEdkQ1FVRXZRanM3UVVGRlFTeG5Ra0ZCU1N4TFFVRkxhRUlzVjBGQlRDeEpRVUZ2UWxrc2EwUkJRVThzUTBGQlEyMUNMRmRCUVRWQ0xFbEJRVEpETEVOQlFVTXNTMEZCU3pkQ0xHdENRVUZNTEVOQlFYZENORUlzVVVGQmVFVXNSVUZEUVR0QlFVTkpPMEZCUTBFN1FVRkRRU3h0UWtGQlN6ZEVMRWxCUVV3c1EwRkJWVFpETEVsQlFWWTdRVUZEU0RzN1FVRkZSQ3huUWtGQlNTeExRVUZMTlVNc1MwRkJUQ3hKUVVGakxFbEJRV3hDTEVWQlFYZENMRTlCVmpWQ0xFTkJWVzlET3p0QlFVVm9ReXhuUWtGQlNTeExRVUZMU3l3MlFrRkJWQ3hGUVVOQk8wRkJRMGtzYTBKQlFVa3NTMEZCUzFFc2QwTkJRVXdzU1VGQmFVUXNTMEZCUzFjc2IwTkJRVEZFTEVWQlEwRTdRVUZEU1N4eFFrRkJTelpDTEhsQ1FVRk1PenRCUVVOQkxIRkNRVUZMZUVNc2QwTkJRVXdzUjBGQlowUXNRMEZCYUVRN1FVRkRTQ3hsUVVwRUxFMUJUVUU3UVVGRFNTeHhRa0ZCUzBFc2QwTkJRVXdzU1VGQmFVUXNRMEZCYWtRN1FVRkRTRHRCUVVOS096dEJRVVZFTEdsQ1FVRkxaQ3hKUVVGTUxFTkJRVlUyUXl4SlFVRldMRzlEUVVFeVF5eExRVUZMZEVJc2RVSkJRV2hFT3p0QlFVTkJkbWhDTEhOQ1FVRlZMRU5CUVVNc1dVRkJUVHRCUVVOaUxHdENRVUZKTEUxQlFVa3NRMEZCUTIxcVFpeGhRVUZNTEVsQlFYTkNUQ3h2UkVGQlV5eERRVUZEUnl4UlFVRndReXhGUVVOQk8wRkJRMGs3UVVGRFFTeHZRa0ZCUnl4TlFVRkpMRU5CUVVOb1JDeExRVUZTTEVWQlEwRTdRVUZEU1N4M1FrRkJTU3hEUVVGRFFTeExRVUZNTEVOQlFWY3JReXhQUVVGWU8wRkJRMGc3UVVGRFNqdEJRVU5LTEdGQlZGTXNSVUZUVUN4TFFVRkxla0lzZFVKQlZFVXNRMEZCVmp0QlFWVklMRmRCY2tORUxFMUJjME5MTEVsQlFVa3NTMEZCUzFFc1YwRkJUQ3hKUVVGdlFsa3NhMFJCUVU4c1EwRkJRMmxDTEU5QlFXaERMRVZCUTB3N1FVRkRTU3huUWtGQlNTeExRVUZMTlVJc2RVSkJRVXdzUTBGQk5rSTJRaXhSUVVGcVF5eEZRVUV5UXpzN1FVRkZNME1zWjBKQlFVa3NTMEZCUzI1RExIZENRVUZNTEVsQlFXbERMRXRCUVV0RExIRkNRVUV4UXl4RlFVTkJPMEZCUTBrc2JVSkJRVXRFTEhkQ1FVRk1MRWRCUVdkRExFTkJRV2hET3p0QlFVTkJMRzFDUVVGTE1VSXNTVUZCVEN4RFFVRlZjME1zU1VGQlZpeERRVUZsTEdsRFFVRm1PenRCUVVOQkxHMUNRVUZMYVVNc1owSkJRVXc3TzBGQlEwRnNiRUlzYzBKQlFWRXNRMEZCUTBNc1lVRkJWQ3hEUVVGMVFpeEpRVUZKUXl4WFFVRktMRU5CUVdkQ0xIbENRVUZvUWl4RlFVRXlRenRCUVVGRFF5eHpRa0ZCVFN4RlFVRkZMRXRCUVV0M2FVSTdRVUZCWkN4bFFVRXpReXhEUVVGMlFqdEJRVU5CTzBGQlEwZ3NZVUZRUkN4TlFWTkJPMEZCUTBrc2JVSkJRVXRvUXl4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEd0RFFVRjVReXhMUVVGTGRFSXNkVUpCUVRsRE96dEJRVU5CZG1oQ0xIZENRVUZWTEVOQlFVTXNXVUZCVFR0QlFVTmlMRzlDUVVGSkxFMUJRVWtzUTBGQlEyMXFRaXhoUVVGTUxFbEJRWE5DVEN4dlJFRkJVeXhEUVVGRFZTeGxRVUZ3UXl4RlFVTkJPMEZCUTBrN1FVRkRRU3h6UWtGQlNTeE5RVUZKTEVOQlFVTjJSQ3hMUVVGVUxFVkJRV2RDTEUxQlFVa3NRMEZCUTBFc1MwRkJUQ3hEUVVGWEswTXNUMEZCV0R0QlFVTnVRanM3UVVGRlJDeHpRa0ZCU1N4RFFVRkRkRUlzZDBKQlFVd3NTVUZCYVVNc1EwRkJha003UVVGRFNDeGxRVkpUTEVWQlVWQXNTMEZCUzBnc2RVSkJVa1VzUTBGQlZqdEJRVk5JTzBGQlEwbzdPMEZCUTBRN08wRkJRMG83UVVGRFNTeG5Ra0ZCVFN4SlFVRkpPV2xDTEV0QlFVb3NRMEZCVlN4dlFrRkJiMEl3Y2tJc1MwRkJPVUlzUTBGQlRqdEJRV3hIVWp0QlFXOUhTQ3hMTEVOQlJVUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0NVEwRkRjVUk3UVVGQlFUczdRVUZEYWtJc1YwRkJTMVVzYVVKQlFVdzdPMEZCUTBFc1YwRkJTekZLTEcxQ1FVRk1MRWRCUVRKQ01rb3NWMEZCVnl4RFFVRkRPMEZCUVVFc1pVRkJUU3hOUVVGSkxFTkJRVU5ETEdGQlFVd3NSVUZCVGp0QlFVRkJMRTlCUVVRc1JVRkJORUlzUzBGQlN6bEtMR05CUVdwRExFTkJRWFJET3p0QlFVTkJMRmRCUVVzNFNpeGhRVUZNTzBGQlEwZzdPenR2UTBGRlpUdEJRVUZCT3p0QlFVTmFPMEZCUTBFc1ZVRkJSeXhMUVVGTE9Vc3NTMEZCVEN4RFFVRlhjR2xDTEZOQlFWZ3NTVUZCZDBJc1MwRkJTMmRwUWl4UlFVRk1MRWxCUVdsQ0xFbEJRVFZETEVWQlFXdEVPMEZCUXpsRExHRkJRVXR0VEN4UFFVRk1PenRCUVVWQmFISkNMR3RDUVVGVkxFTkJRVU1zV1VGQlRUdEJRVU5pTEdOQlFVa3NUVUZCU1N4RFFVRkRNbWRDTEcxQ1FVRk1MRWxCUVRSQ0xFbEJRVFZDTEV0QlEwTXNUVUZCU1N4RFFVRkRReXgxUWtGQlRDeEpRVUZuUXl4SlFVRm9ReXhKUVVGM1F5eE5RVUZKTEVOQlFVTkJMSFZDUVVGTUxFTkJRVFpDYUd0Q0xFVkJRVGRDTEVsQlFXMURMRTFCUVVrc1EwRkJReXRxUWl4dFFrRkJUQ3hEUVVGNVFpOXFRaXhGUVVSeVJ5eERRVUZLTEVWQlJVRTdRVUZEU1N4clFrRkJTU3hEUVVGRGFXdENMR2xDUVVGTUxFbEJRVEJDTEVOQlFURkNPenRCUVVWQkxHdENRVUZKTEVOQlFVTmlMRWxCUVV3c1EwRkJWVFpETEVsQlFWWXNlVVJCUVdkRkxFMUJRVWtzUTBGQlEyaERMR2xDUVVGeVJTeGpRVUV3Uml4TlFVRkpMRU5CUVVOWExIZENRVUV2UmpzN1FVRkZRU3huUWtGQlNTeE5RVUZKTEVOQlFVTllMR2xDUVVGTUxFZEJRWGxDTEUxQlFVa3NRMEZCUTFjc2QwSkJRV3hETEVWQlEwRTdRVUZEU1N4dlFrRkJTU3hEUVVGRGVFSXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTEhkQ1FVRm1PenRCUVVOQkxHOUNRVUZKTEVOQlFVTnBSaXhyUWtGQlREczdRVUZEUVR0QlFVTklMR0ZCVmt3c1EwRlpTVHRCUVVOQk8wRkJRMEU3T3p0QlFVTkJMR3RDUVVGSkxFTkJRVU01U0N4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEVOQlFXVXNhMEpCUVdZN08wRkJRMEVzYTBKQlFVa3NRMEZCUXpWRExFdEJRVXdzUTBGQlYyaG5RaXhWUVVGWU96dEJRVU5CTEd0Q1FVRkpMRU5CUVVNMGNVSXNhVUpCUVV3N1FVRkRTRHM3UVVGRlJDeG5Ra0ZCU1N4RFFVRkRhRXNzYVVKQlFVd3NSMEZCZVVJc1EwRkJla0k3UVVGRlNDeFRRWHBDVXl4RlFYbENVaXhMUVVGTFJ5eFpRWHBDUnl4RFFVRldPMEZCTWtKSUxFOUJPVUpFTEUxQk9FSlBPMEZCUTBnc1lVRkJTelpLTEdsQ1FVRk1PenRCUVVOQkxHRkJRVXMzU3l4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEVOQlFXVXNOa1JCUVdZN1FVRkRTRHRCUVVOS0xFc3NRMEZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3T3p0NVEwRkZRVHRCUVVOSkxGZEJRVXMzUXl4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEVOQlFXVXNkVUpCUVdZc1JVRkVTaXhEUVVkSk96czdRVUZEUVN4WFFVRkxUU3hoUVVGTUxFZEJRWEZDVEN4dlJFRkJVeXhEUVVGRFZTeGxRVUV2UWpzN1FVRkZRU3hWUVVGSkxFdEJRVXQ2UWl4WFFVRk1MRWxCUVc5Q1dTeHJSRUZCVHl4RFFVRkRiVUlzVjBGQk5VSXNTVUZCTWtNc1EwRkJReXhMUVVGTE4wSXNhMEpCUVV3c1EwRkJkMEkwUWl4UlFVRjRSU3hGUVVOQk8wRkJRMGtzV1VGQlNTeExRVUZMTlVJc2EwSkJRVXdzUTBGQmQwSm5SU3hYUVVFMVFpeEZRVU5CTzBGQlEwazdRVUZEUVR0QlFVTkJMR1ZCUVV0MVF5eDFRa0ZCVER0QlFVTklMRk5CVEVRc1RVRlBRVHRCUVVOSk8wRkJRMEVzWlVGQlMyNUZMRXRCUVV3c1EwRkJWeXhMUVVGTGNFTXNhMEpCUVV3c1EwRkJkMEpuU2l4UFFVRnVRenM3UVVGRFFTeGxRVUZMYUVvc2EwSkJRVXdzUTBGQmQwSTRReXhKUVVGNFFqdEJRVU5CTVd4Q0xHdENRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh2UWtGQmFFSXNSVUZCYzBNN1FVRkJRME1zYTBKQlFVMHNSVUZCUlN4TFFVRkxlV2xDTzBGQlFXUXNWMEZCZEVNc1EwRkJka0k3UVVGRFNEdEJRVU5LTEU5QlprUXNUVUZwUWtFN1FVRkRTU3haUVVGSkxFTkJRVU1zUzBGQlMzWkNMRmRCUVZZc1JVRkJkVUk3UVVGRGJrSXNaVUZCUzNkTExHVkJRVXc3UVVGRFNDeFRRVWhNTEVOQlMwazdPenRCUVVOQkxGbEJRVWNzUzBGQlMyaEtMRTlCUVZJc1JVRkJhVUk3UVVGRFlpeGxRVUZMUVN4UFFVRk1MRU5CUVdGcFNpeHZRa0ZCWWp0QlFVTklPMEZCUTBvN1FVRkRTanM3TzNORFFVZEVPMEZCUTBrc1ZVRkJTVU1zYVVKQlFXbENMRWRCUVVjc1NVRkJTVE5xUWl3eVJFRkJTaXhEUVVGelFpeExRVUZMWjFvc1YwRkJNMElzUlVGQmQwTXNTMEZCUzBRc1dVRkJOME1zUlVGQk1rUXNTVUZCTTBRc1JVRkJhVVZxUWl4WFFVRnFSU3hGUVVFNFJTOUxMRzlFUVVGVkxFTkJRVU0yVnl4blFrRkJXQ3hGUVVFNVJTeERRVUY0UWpzN1FVRkRRU3hYUVVGTGFFZ3NTMEZCVEN4RFFVRlhLMGNzYVVKQlFXbENMRU5CUVVNelJDeFRRVUZzUWl4RlFVRllPMEZCUTBnc1N5eERRVVZFTzBGQlEwRTdRVUZEUVRzN096dDNRMEZEYjBJN1FVRkRhRUlzVlVGQlJ5eExRVUZMZEVjc2JVSkJRVklzUlVGQk5rSTdRVUZEZWtJN1FVRkRRVzFMTEhGQ1FVRmhMRU5CUVVNc1MwRkJTMjVMTEcxQ1FVRk9MRU5CUVdJN1FVRkRRU3hoUVVGTFFTeHRRa0ZCVEN4SFFVRXlRaXhKUVVFelFqdEJRVU5JTzBGQlEwb3NTeXhEUVVWRU96czdPemhDUVVWQk8wRkJRMGtzVlVGQlNUZE9MRWxCUVVrc1IwRkJSME1zZFVSQlFWVXNRMEZCUTJkWkxHMUNRVUZZTEVWQlFWZzdRVUZEUVN4WFFVRkxOVXNzYlVKQlFVd3NSMEZCTWtKeVRpeEpRVUV6UWpzN1FVRkRRU3hYUVVGTEsxRXNTMEZCVEN4RFFVRlhMMUVzU1VGQldEczdRVUZEUVN4WFFVRkxhMWtzZFVKQlFVd3NSMEZCSzBKd2FFSXNTVUZCU1N4RFFVRkRSQ3hIUVVGTUxFVkJRUzlDTzBGQlEwZ3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CT3pzN08zZERRVU52UW5CT0xFTXNSVUZEY0VJN1FVRkRTVHRCUVVOQkxGZEJRVXQzYWtJc1owSkJRVXdzUTBGQmMwSjBXQ3hsUVVGMFFpeEhRVUYzUTJ4TkxFTkJRVU1zUTBGQlF6QjFRaXhyUWtGQlJpeEZRVUY0UXpzN1FVRkZRU3hWUVVGSkxFdEJRVXMzU3l4MVFrRkJUQ3hKUVVGblF5eEpRVUZ3UXl4RlFVTkJPMEZCUTBrN1FVRkRRU3haUVVGSkxFdEJRVXQxUXl4aFFVRk1MRWxCUVhOQ1RDeHZSRUZCVXl4RFFVRkRSeXhSUVVGd1F5eEZRVU5CTzBGQlEwa3NaVUZCUzJwRUxFbEJRVXdzUTBGQlZUWkRMRWxCUVZZc1EwRkJaU3dyUTBGQlpqczdRVUZEUVN4bFFVRkxkVUlzYTBKQlFVdzdRVUZEU0N4VFFVcEVMRTFCVFVFN1FVRkRTU3hsUVVGTGNFVXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpeERRVUZsTEdsRlFVRm1PMEZCUTBnN1FVRkRTanM3UVVGRlJDeFhRVUZMYWtNc2RVSkJRVXdzUjBGQkswSTNha0lzUTBGQkwwSTdPMEZCUTBFc1YwRkJTMmxxUWl4SlFVRk1MRU5CUVZVd1RDeExRVUZXTEhWQ1FVRXJRblJvUWl4SlFVRkpMRU5CUVVORUxFZEJRVXdzUzBGQllTeExRVUZMY1doQ0xIVkNRVUZxUkR0QlFVTklMRXNzUTBGRlJEdEJRVU5CTzBGQlEwRTdRVUZEUVRzN096dDNRMEZEYjBKNmRVSXNReXhGUVVOd1FqdEJRVU5KTEZWQlFVazBkVUlzU1VGQlNTeEhRVUZIZEZrc2RVUkJRVlVzUTBGQlEzVlpMSEZDUVVGWUxFTkJRV2xETjNWQ0xFTkJRV3BETEVOQlFWZzdPMEZCUTBFc1YwRkJTM051UWl4TFFVRk1MRU5CUVZkelNDeEpRVUZZTzBGQlEwZ3NTeXhEUVVWRU8wRkJRMEU3UVVGRFFUczdPenM0UTBGRlFUdEJRVU5KTEZWQlFVa3ZSU3hoUVVGaExFZEJRVWNzU1VGQlNXeG5RaXh2UlVGQlNpeEhRVUZuUXpSa0xGTkJRV2hETEVWQlFYQkNPMEZCUTBFc1YwRkJTM0pETEd0Q1FVRk1MRU5CUVhkQ05rVXNWVUZCZUVJc1EwRkJiVU5HTEdGQlFXRXNRMEZCUTJoeFFpeEZRVUZxUkRzN1FVRkRRU3hYUVVGTGVXNUNMRXRCUVV3c1EwRkJWM1ZETEdGQlFWZzdRVUZEU0N4TExFTkJSVVE3UVVGRFFUdEJRVU5CTzBGQlEwRTdPenM3TUVOQlEzTkNhVVlzVnl4RlFVTjBRanRCUVVOSk8wRkJRMEVzVlVGQlNUbDFRaXhEUVVGRExFZEJRVWRNTEdsRVFVRlBMRU5CUVVOdmRrSXNVVUZCVWl4RFFVRnBRa1FzVjBGQlZ5eERRVUZEYm5aQ0xFOUJRVGRDTEVWQlFYTkRMRXRCUVV0dGFrSXNVVUZCTTBNc1EwRkJVanM3UVVGRFFTeFhRVUZMUnl4SlFVRk1MRU5CUVZVMlF5eEpRVUZXTEVOQlFXVXNZMEZCWXpsc1FpeERRVUZETEVOQlFVTm5UaXhoUVVFdlFqczdRVUZGUVN4VlFVRkpjMWtzZFVSQlFWVXNRMEZCUXpCS0xHTkJRVmdzUTBGQk1FSm9ka0lzUTBGQlF5eERRVUZETkUwc1UwRkJOVUlzUTBGQlNpeEZRVU5CTzBGQlEwa3NZVUZCUzNsWkxGZEJRVXdzUTBGQmFVSTBTaXh4UWtGQmFrSXNRMEZCZFVOcWRrSXNRMEZCZGtNN08wRkJRMEU3UVVGRFNDeFBRVlJNTEVOQlYwazdPenRCUVVOQkxHTkJRVkZCTEVOQlFVTXNRMEZCUXpSTkxGTkJRVlk3UVVGRlNTeGhRVUZMT1Uwc1owUkJRVTBzUTBGQlEyZEtMRlZCUVZvN1FVRkRTU3hsUVVGTGIyMUNMR2xDUVVGTUxFTkJRWFZDYkhaQ0xFTkJRWFpDT3p0QlFVTkJPenRCUVVOS0xHRkJRVXRHTEdkRVFVRk5MRU5CUVVOclNpeFJRVUZhTzBGQlEwa3NaVUZCUzIxdFFpeGxRVUZNTEVOQlFYRkNiblpDTEVOQlFYSkNPenRCUVVOQk96dEJRVU5LTEdGQlFVdEdMR2RFUVVGTkxFTkJRVU50U2l4WlFVRmFPMEZCUTBrc1pVRkJTMjF0UWl4dFFrRkJUQ3hEUVVGNVFuQjJRaXhEUVVGNlFqczdRVUZEUVRzN1FVRkRTaXhoUVVGTFJpeG5SRUZCVFN4RFFVRkRiMG9zWTBGQldqdEJRVU5KTEdWQlFVdHRiVUlzY1VKQlFVd3NRMEZCTWtKeWRrSXNRMEZCTTBJN08wRkJRMEU3TzBGQlEwb3NZVUZCUzBZc1owUkJRVTBzUTBGQlF6QktMR2RDUVVGYU8wRkJRMGtzWlVGQlN6aHNRaXgxUWtGQlRDeERRVUUyUW5SMlFpeERRVUUzUWpzN1FVRkRRVHM3UVVGRFNpeGhRVUZMUml4blJFRkJUU3hEUVVGRFowc3NZMEZCV2p0QlFVTkpMR1ZCUVV0NWJFSXNjVUpCUVV3c1EwRkJNa0oyZGtJc1EwRkJNMEk3TzBGQlEwRTdPMEZCUTBvc1lVRkJTMFlzWjBSQlFVMHNRMEZCUTBNc2JVSkJRVm83UVVGRFNTeGxRVUZMZVhaQ0xEQkNRVUZNTEVOQlFXZERlSFpDTEVOQlFXaERPenRCUVVOQk96dEJRVU5LTEdGQlFVdEdMR2RFUVVGTkxFTkJRVU4xU3l4dlFrRkJXanRCUVVOSkxHVkJRVXR2YkVJc01rSkJRVXdzUTBGQmFVTjZka0lzUTBGQmFrTTdPMEZCUTBFN08wRkJRMG9zWVVGQlMwWXNaMFJCUVUwc1EwRkJRMmxMTEdsQ1FVRmFPMEZCUTBrc1pVRkJTekpzUWl4M1FrRkJUQ3hEUVVFNFFqRjJRaXhEUVVFNVFqczdRVUZEUVRzN1FVRkRTaXhoUVVGTFJpeG5SRUZCVFN4RFFVRkRiMHNzWjBKQlFWbzdRVUZEU1N4bFFVRkxlV3hDTEhWQ1FVRk1MRU5CUVRaQ00zWkNMRU5CUVRkQ096dEJRVU5CT3p0QlFVTktMR0ZCUVV0R0xHZEVRVUZOTEVOQlFVTTRTaXd3UWtGQldqdEJRVU5KTEdWQlFVdG5iVUlzYVVOQlFVd3NRMEZCZFVNMWRrSXNRMEZCZGtNN08wRkJRMEU3TzBGQlEwb3NZVUZCUzBZc1owUkJRVTBzUTBGQlEzbExMR05CUVZvN1FVRkRTU3hsUVVGTGMyeENMRzlDUVVGTUxFTkJRVEJDTjNaQ0xFTkJRVEZDTzBGQlEwRTdPMEZCUTBvc1lVRkJTMFlzWjBSQlFVMHNRMEZCUXpKTExIbENRVUZhTzBGQlEwa3NaVUZCUzNGc1FpeG5RMEZCVEN4RFFVRnpRemwyUWl4RFFVRjBRenM3UVVGRFFUczdRVUZEU2l4aFFVRkxSaXhuUkVGQlRTeERRVUZEZFVvc1NVRkJXanRCUVVOSkxHVkJRVXN3YlVJc2JVSkJRVXdzUTBGQmVVSXZka0lzUTBGQmVrSTdPMEZCUTBFN08wRkJRMG9zWVVGQlMwWXNaMFJCUVUwc1EwRkJRM2RLTEVsQlFWbzdRVUZEU1N4bFFVRkxNRzFDTEcxQ1FVRk1MRU5CUVhsQ2FIZENMRU5CUVhwQ096dEJRVU5CT3p0QlFVTktMR0ZCUVV0R0xHZEVRVUZOTEVOQlFVTTRTeXhqUVVGYU8wRkJRMGtzWlVGQlMzRnNRaXgzUWtGQlRDeERRVUU0UW1wM1FpeERRVUU1UWpzN1FVRkRRVHM3UVVGRFNpeGhRVUZMUml4blJFRkJUU3hEUVVGRE5Fb3NlVUpCUVZvN1FVRkRTU3hsUVVGTGQyMUNMR2REUVVGTUxFTkJRWE5EYkhkQ0xFTkJRWFJET3p0QlFVTkJPenRCUVVOS0xHRkJRVXRHTEdkRVFVRk5MRU5CUVVNMlN5eHJRa0ZCV2p0QlFVTkpMR1ZCUVV0M2JFSXNlVUpCUVV3c1EwRkJLMEp1ZDBJc1EwRkJMMEk3TzBGQlEwRTdPMEZCUTBvc1lVRkJTMFlzWjBSQlFVMHNRMEZCUTJkTUxIZENRVUZhTzBGQlEwa3NZMEZCU1N4TFFVRkxjV0VzVDBGQlRDeEpRVUZuUWl4SlFVRndRaXhGUVVOQk8wRkJRMGtzYVVKQlFVdHRReXhMUVVGTUxFTkJRVmN2VXl3MlJFRkJaMElzUTBGQlF6WmlMSEZDUVVGcVFpeERRVUYxUTNoM1FpeG5SVUZCWlN4RFFVRkRReXhGUVVGb1FpeERRVUZ0UWl4VFFVRnVRaXhEUVVGMlF5eERRVUZZT3p0QlFVTkJPMEZCUTBnN08wRkJRMFFzWlVGQlMzTnNRaXhQUVVGTUxFTkJRV0ZyVEN4eFFrRkJZaXhEUVVGdFEzSjNRaXhEUVVGdVF6czdRVUZEUVRzN1FVRkRTaXhoUVVGTFJpeG5SRUZCVFN4RFFVRkRhMHdzZDBKQlFWbzdRVUZEU1N4bFFVRkxiV0VzVDBGQlRDeERRVUZoYlV3c05FSkJRV0lzUTBGQk1FTjBkMElzUTBGQk1VTTdPMEZCUTBFN08wRkJRMG9zWVVGQlMwWXNaMFJCUVUwc1EwRkJRMjlNTEhGQ1FVRmFPMEZCUTBrc1pVRkJTMmxoTEU5QlFVd3NRMEZCWVc5TUxIZENRVUZpTEVOQlFYTkRkbmRDTEVOQlFYUkRPenRCUVVOQk96dEJRVU5LTEdGQlFVdEdMR2RFUVVGTkxFTkJRVU13VEN4MVFrRkJXanRCUVVOSkxHVkJRVXN5V2l4UFFVRk1MRU5CUVdGeFRDd3lRa0ZCWWl4RFFVRjVRM2gzUWl4RFFVRjZRenM3UVVGRFFUczdRVUZEU2l4aFFVRkxSaXhuUkVGQlRTeERRVUZETkV3c09FSkJRVm83UVVGRFNTeGxRVUZMZVZvc1QwRkJUQ3hEUVVGaGMwd3NNa0pCUVdJc1EwRkJlVU42ZDBJc1EwRkJla003TzBGQlEwRTdPMEZCUTBvc1lVRkJTMFlzWjBSQlFVMHNRMEZCUTNOTUxHZENRVUZhTzBGQlEwa3NaVUZCUzNOc1FpeDFRa0ZCVEN4RFFVRTJRakYzUWl4RFFVRTNRanM3UVVGRFFUczdRVUZEU2l4aFFVRkxSaXhuUkVGQlRTeERRVUZEZDB3c2MwSkJRVm83UVVGRFNTeGxRVUZMY1d4Q0xEWkNRVUZNTEVOQlFXMURNM2RDTEVOQlFXNURPenRCUVVOQk96dEJRVU5LTEdGQlFVdEdMR2RFUVVGTkxFTkJRVU41VEN4dFFrRkJXanRCUVVOSkxHVkJRVXR4YkVJc01FSkJRVXdzUTBGQlowTTFkMElzUTBGQmFFTTdPMEZCUTBFN08wRkJRMG9zWVVGQlMwWXNaMFJCUVUwc1EwRkJRelJDTEV0QlFWbzdRVUZEU1N4bFFVRkxiWFpDTEdsQ1FVRk1MRU5CUVhWQ04zZENMRU5CUVhaQ096dEJRVU5CT3p0QlFVTktMR0ZCUVV0R0xHZEVRVUZOTEVOQlFVTXJTeXh2UWtGQldqdEJRVU5KTEdWQlFVdHZXU3hKUVVGTUxFTkJRVlUyUXl4SlFVRldMRU5CUVdVc09FWkJRV1k3TzBGQlEwRTdPMEZCUTBvN1FVRkRTU3hsUVVGTE4wTXNTVUZCVEN4RFFVRlZOa01zU1VGQlZpeHhRMEZCTkVNNWJFSXNRMEZCUXl4RFFVRkRORTBzVTBGQk9VTXNaVUZCTkVRMVRTeERRVUZETEVOQlFVTkhMRWxCUVRsRU96dEJRVU5CTzBGQk4wWlNPMEZCSzBaSU96czdkVU5CUld0Q01uZENMRXNzUlVGRGJrSTdRVUZEU1N4WFFVRkxOMDRzU1VGQlRDeERRVUZWYzBNc1NVRkJWaXhEUVVGbExHMUNRVUZtTEVWQlFXOURkVXdzUzBGQlN5eERRVUZEYm5oQ0xFOUJRVEZETzBGQlEwZzdPenN3UWtGRlMzZENMRThzUlVGRFRqdEJRVU5KTEZWQlFVazBka0lzU1VGQlNTeEhRVUZITlhaQ0xFOUJRVThzUTBGQlF6WjJRaXhOUVVGU0xFTkJRV1VzUzBGQlMzaE9MR2RDUVVGd1FpeERRVUZZT3p0QlFVTkJMRlZCUVVrc1MwRkJTMDRzUzBGQlRDeERRVUZYY0dsQ0xGTkJRV1lzUlVGRFFUdEJRVU5KTEdGQlFVdHRhVUlzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExHTkJRV016YTBJc1QwRkJUeXhEUVVGRE5rd3NZVUZCY2tNN08wRkJRMEVzWVVGQlMydFhMRXRCUVV3c1EwRkJWeXRPTEVsQlFWZ3NRMEZCWjBKR0xFbEJRV2hDT3p0QlFVTkJMR1ZCUVU4c1NVRkJVRHRCUVVOSUxFOUJURVFzVFVGUFFUdEJRVU5KTEdGQlFVczVUaXhKUVVGTUxFTkJRVlUyUXl4SlFVRldMRU5CUVdVc2RVTkJRWFZETTJ0Q0xFOUJRVThzUTBGQlF6Wk1MR0ZCUVRsRU96dEJRVU5CTEdWQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvN096dHJRMEZGWVd4Q0xFc3NSVUZEWkR0QlFVTkpMRlZCUVVrc1EwRkJRMEVzUzBGQlRDeEZRVU5CTzBGQlEwa3NZVUZCUzIxWUxFbEJRVXdzUTBGQlZYTkRMRWxCUVZZc1EwRkJaU3huUTBGQlpqczdRVUZEUVN4bFFVRlBMRXRCUVZBN1FVRkRTRHM3UVVGRlJDeFZRVUZKZWxvc1MwRkJTeXhEUVVGRE5rTXNUVUZCVGl4SFFVRmxMRVZCUVc1Q0xFVkJRMEU3UVVGRFNTeGhRVUZMYzFVc1NVRkJUQ3hEUVVGVmMwTXNTVUZCVml4RFFVRmxMSE5EUVVGbU96dEJRVU5CTEdWQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxGVkJRVWtzUTBGQlEzcGFMRXRCUVVzc1EwRkJRMjlzUWl4TFFVRk9MRU5CUVZrc1MwRkJTMjVOTEcxQ1FVRnFRaXhEUVVGTUxFVkJRMEU3UVVGRFNTeGhRVUZMT1VJc1NVRkJUQ3hEUVVGVmMwTXNTVUZCVml4RFFVRmxMREJEUVVGbU96dEJRVU5CTEdWQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxHRkJRVThzU1VGQlVEdEJRVU5JT3pzN01FTkJSWEZDTlVNc1lTeEZRVU4wUWp0QlFVTkpMRlZCUVVrc1EwRkJRMEVzWVVGQlRDeEZRVU5CTzBGQlEwa3NZVUZCUzAwc1NVRkJUQ3hEUVVGVmMwTXNTVUZCVml4RFFVRmxMRFJEUVVGbU96dEJRVU5CTEdWQlFVOHNTMEZCVUR0QlFVTklPenRCUVVWRUxGVkJRVTAwVEN4elFrRkJjMElzUjBGQlIzaFBMR0ZCUVdFc1EwRkJRelpMTEU5QlFXUXNRMEZCYzBJc1kwRkJkRUlzUlVGQmMwTXNSVUZCZEVNc1EwRkJMMElzUTBGUVNpeERRVk5KT3p0QlFVTkJMRlZCUTBzc1EwRkJReXhMUVVGTGFrc3NOa0pCUVU0c1NVRkJkVU1zUTBGQlF6Uk9MSE5DUVVGelFpeERRVUZEUkN4TFFVRjJRaXhEUVVFMlFpeExRVUZMY2swc01rSkJRV3hETEVOQlFYcERMRWxCUTBNc1MwRkJTM1JDTERaQ1FVRk1MRWxCUVhORExFTkJRVU0wVGl4elFrRkJjMElzUTBGQlEwUXNTMEZCZGtJc1EwRkJOa0lzUzBGQlMzQk5MQ3RDUVVGc1F5eERRVVkxUXl4RlFVbEJPMEZCUTBrc1lVRkJTemRDTEVsQlFVd3NRMEZCVlhORExFbEJRVllzUTBGQlpTd3JRMEZCWmpzN1FVRkRRU3hsUVVGUExFdEJRVkE3UVVGRFNEczdRVUZGUkN4aFFVRlBMRWxCUVZBN1FVRkRTRHM3T3pKRFFVVnpRalpNTEcxQ0xFVkJRM1pDTzBGQlEwa3NZVUZCVHl4TFFVRkxkazhzWVVGQlRDeEpRVUZ6UW5WUExHMUNRVUUzUWp0QlFVTklPenM3TkVOQlJYVkNReXh2UWl4RlFVTjRRanRCUVVOSkxHRkJRVThzUzBGQlMzSlBMR05CUVV3c1NVRkJkVUp4VHl4dlFrRkJPVUk3UVVGRFNEczdPenM3T3pzN096czdPMjlDUVVsUkxFdEJRVXM1VGl3MlFqczdPenM3T3pzN2MwSkJSMDRzUTBGQlF5eExRVUZMVml4aFFVRk9MRWxCUVhWQ0xFTkJRVU1zUzBGQlMwOHNZVHM3T3pzN1FVRkROMElzY1VKQlFVdElMRWxCUVV3c1EwRkJWWE5ETEVsQlFWWXNRMEZCWlN3MlJrRkJaanM3T3pzN1FVRkpRWEJHTEd0RExFZEJRWEZDTEV0QlFVdHRVaXh0UWtGQlRDeEZPMEZCUlhKQ1F5eDFRaXhIUVVGVkxFbEJRVWw0VWl3MFJVRkJTaXhGT3pzN2RVSkJTWE5DZDFJc1QwRkJUeXhEUVVGRFF5eGxRVUZTTEVOQlFYZENMRXRCUVVzelR5eGhRVUUzUWl4RlFVRTBReXhMUVVGTFR5eGhRVUZxUkN4RlFVRm5SU3hMUVVGTFF5eGhRVUZ5UlN4RlFVRnZSbXhFTEd0Q1FVRndSaXhGUVVGM1J5eExRVUZMYlVRc1YwRkJOMGNzUXpzN08wRkJRVFZDYlU4c0swSTdPM1ZDUVVNMFFrRXNaVUZCWlN4RFFVRkRWaXhKUVVGb1FpeEZPenM3UVVGQk5VSlhMRzFETzBGQlJVb3NjVUpCUVV0MlR5eHRRa0ZCVEN4SFFVRXlRamxGTEUxQlFVMHNRMEZCUTBNc1RVRkJVQ3hEUVVGakxFbEJRVWxUTERKRlFVRktMRU5CUVhkQ2IwSXNhMEpCUVhoQ0xFTkJRV1FzUlVGRE0wSTdRVUZEU1d4Q0xHOUNRVUZGTEVWQlFVVjVVeXh0UWtGQmJVSXNRMEZCUTNwVExFVkJSRFZDTzBGQlJVbEVMSE5DUVVGSkxFVkJRVVV3VXl4dFFrRkJiVUlzUTBGQlF6RlRMRWxCUmpsQ08wRkJSMGxOTERKRFFVRjVRaXhGUVVGRmJWTXNaVUZCWlN4RFFVRkRSU3hOUVVndlF6dEJRVWxKY0ZNc01rTkJRWGxDTEVWQlFVVnJVeXhsUVVGbExFTkJRVU5ITEZWQlNpOURPMEZCUzBsd1V5eHBRMEZCWlN4RlFVRkZhVk1zWlVGQlpTeERRVUZEUnl4VlFVeHlRenRCUVUxSmRsTXNOa0pCUVZjc1JVRkJSWEZUTEcxQ1FVRnRRaXhEUVVGRFJ6dEJRVTV5UXl4cFFrRkVNa0lzUTBGQk0wSTdPenM3T3pzN1FVRlpRU3h4UWtGQlN6RlBMRzFDUVVGTUxFZEJRVEpDTEV0QlFVdEJMRzFDUVVGTUxFbEJRVFJDTEVsQlFVbHdSU3d5UlVGQlNpeERRVUYzUW05Q0xHdENRVUY0UWl4RFFVRjJSRHRCUVVOQkxIRkNRVUZMWjBRc2JVSkJRVXdzUTBGQmVVSTNSQ3g1UWtGQmVrSXNSMEZCY1VSQkxHbEdRVUY1UWl4RFFVRkRUU3h2UWtGQkwwVTdRVUZEUVN4eFFrRkJTM1ZFTEcxQ1FVRk1MRU5CUVhsQ05VUXNlVUpCUVhwQ08wRkJRMEVzY1VKQlFVczBSQ3h0UWtGQlRDeERRVUY1UWpORUxHVkJRWHBDT3p0QlFVVkJMSEZDUVVGTGVVUXNTVUZCVEN4RFFVRlZjME1zU1VGQlZpeERRVUZsTEZsQlFVbHdhMElzVDBGQmJrSTdPMEZCUTBGdFFpeDNRa0ZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzYzBKQlFXaENMRVZCUVhkRE8wRkJRVU5ETEhkQ1FVRk5MRVZCUVVVc1MwRkJTekJuUWp0QlFVRmtMR2xDUVVGNFF5eERRVUYyUWpzN096dHpRa0ZKUVhOUExHVkJRV1VzUTBGQlEwVXNUVUZCYUVJc1NVRkJNRUk1VWl4elJVRkJZeXhEUVVGRFF5eFJPenM3T3p0QlFVVjZReXh4UWtGQlMzRkVMRzFDUVVGTUxFTkJRWGxDTjBRc2VVSkJRWHBDTEVkQlFYRkVRU3hwUmtGQmVVSXNRMEZCUTBjc2NVSkJRUzlGTzBGQlJVRnVaQ3gzUWtGQlVTeERRVUZEUXl4aFFVRlVMRU5CUVhWQ0xFbEJRVWxETEZkQlFVb3NRMEZCWjBJc2MwSkJRV2hDTEVWQlFYZERPMEZCUVVORExIZENRVUZOTEVWQlFVVXNTMEZCU3pCblFqdEJRVUZrTEdsQ1FVRjRReXhEUVVGMlFqczdPenR6UWtGSlJDeERRVUZEYzA4c1pVRkJaU3hEUVVGRFN5eEZRVUZxUWl4SlFVRjFRaXhEUVVGRFNpeHRRa0ZCZUVJc1NVRkJLME1zUTBGQlF5eExRVUZMZGs4c2JVSkJRVXdzUTBGQmVVSTVhRUlzVHpzN096czdRVUZEZUVVc2NVSkJRVXM0YUVJc2JVSkJRVXdzUTBGQmVVSTNSQ3g1UWtGQmVrSXNSMEZCY1VSQkxHbEdRVUY1UWl4RFFVRkRUU3h2UWtGQkwwVTdRVUZGUVhSa0xIZENRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh6UWtGQmFFSXNSVUZCZDBNN1FVRkJRME1zZDBKQlFVMHNSVUZCUlN4TFFVRkxNR2RDTzBGQlFXUXNhVUpCUVhoRExFTkJRWFpDT3pzN08yOUNRVWxETEV0QlFVczBUeXgxUWtGQlRDeERRVUUyUWl4TFFVRkxOVThzYlVKQlFVd3NRMEZCZVVJNWFFSXNUMEZCZEVRc1F6czdPenM3UVVGRlJDeHhRa0ZCU3pob1FpeHRRa0ZCVEN4RFFVRjVRamRFTEhsQ1FVRjZRaXhIUVVGeFJFRXNhVVpCUVhsQ0xFTkJRVU5KTEcxQ1FVRXZSVHRCUVVWQmNHUXNkMEpCUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4SlFVRkpReXhYUVVGS0xFTkJRV2RDTEhOQ1FVRm9RaXhGUVVGM1F6dEJRVUZEUXl4M1FrRkJUU3hGUVVGRkxFdEJRVXN3WjBJN1FVRkJaQ3hwUWtGQmVFTXNRMEZCZGtJN096czdRVUZKU2p0QlFVTkpOazhzZDBJc1IwRkJWemRTTEd0Q1FVRnJRaXhIUVVGSExFdEJRVWdzUjBGQlZ5eEpPMEZCUXpWRExIRkNRVUZMTmtNc1kwRkJUQ3hIUVVGelFtZFFMRkZCUVZFc1IwRkJSeXhMUVVGWUxFZEJRVzFDTEV0QlFVczNUeXh0UWtGQlRDeERRVUY1UWpsb1FpeFBRVUZzUlR0QlFVTkJMSEZDUVVGTE5taENMRXRCUVV3c1EwRkJWemRvUWl4UFFVRllMRWRCUVhGQ0xFdEJRVXN5YUVJc1kwRkJNVUk3UVVGRFFTeHhRa0ZCUzBjc2JVSkJRVXdzUTBGQmVVSTNSQ3g1UWtGQmVrSXNSMEZCY1VSQkxHbEdRVUY1UWl4RFFVRkRNVTBzVDBGQkwwVTdRVUZGUVhSUkxIZENRVUZSTEVOQlFVTkRMR0ZCUVZRc1EwRkJkVUlzU1VGQlNVTXNWMEZCU2l4RFFVRm5RaXh6UWtGQmFFSXNSVUZCZDBNN1FVRkJRME1zZDBKQlFVMHNSVUZCUlN4TFFVRkxNR2RDTzBGQlFXUXNhVUpCUVhoRExFTkJRWFpDT3pzN096czdPenM3T3pzN096czdPenM3YjBOQlNVbzdRVUZEU1N4aFFVRlBMRmxCUVZrM1owSXNVVUZCVVN4RFFVRkRNblpDTEZGQlFWUXNRMEZCYTBKRUxGRkJRVGxDTEVkQlFYbERMRWxCUVhwRExFZEJRV2RFTEV0QlFYWkVPMEZCUTBnc1N5eERRVVZFT3pzN096QkRRVVZCTzBGQlEwa3NZVUZCVHl4TFFVRkxla1VzWVVGQlRDeE5RVUYzUWl4TFFVRkxlRXNzYzBKQlFYQkRPMEZCUTBnN096dHBRMEU1YlVSRU8wRkJRMGtzWVVGQlQxQXNWMEZCVUR0QlFVTklPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRME42VTB3N1FVRkRRVHRCUVVOQk96dEJRVU5QTEVsQlFVMTFSQ3hUUVVGVExFZEJRM1JDTzBGQlEwazdRVUZEUVR0QlFVTkJPMEZCUTBGVkxHbENRVUZsTEVWQlFVVXNhVUpCU25KQ08wRkJUVWs3UVVGRFFUdEJRVU5CTzBGQlEwRlVMR3RDUVVGblFpeEZRVUZGTEd0Q1FWUjBRanRCUVZkSk8wRkJRMEU3UVVGRFFUdEJRVU5CUlN4VlFVRlJMRVZCUVVVN1FVRmtaQ3hEUVVSUExFTXNRMEZyUWxBN1FVRkRRVHRCUVVOQk96dEJRVU5QTEVsQlFVMU9MRTlCUVU4c1IwRkRjRUk3UVVGRFNUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJhVUlzVTBGQlR5eEZRVUZGTEZOQlRHSTdRVUZQU1R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQlJTeGhRVUZYTEVWQlFVVXNZVUZZYWtJN1FVRmhTVHRCUVVOQk8wRkJRMEU3UVVGRFFXeENMRTFCUVVrc1JVRkJSVHRCUVdoQ1ZpeERRVVJQTEVNc1EwRnZRbEE3UVVGRFFUdEJRVU5CT3p0QlFVTlBMRWxCUVUxdFFpeG5Ra0ZCWWl4SFFVVkpMREJDUVVGWmIwY3NTMEZCV2l4RlFVRnRRanRCUVVGQk96dEJRVU5tTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1QwRkJTM3AwUWl4UFFVRk1MRWRCUVdVc1NVRkJaaXhEUVV4bExFTkJUMlk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUTBFc1QwRkJTM1Z1UWl4MVFrRkJUQ3hIUVVFclFpeEpRVUV2UWl4RFFWaGxMRU5CWVdZN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNUMEZCUzBNc2IwSkJRVXdzUjBGQk5FSXNTVUZCTlVJc1EwRnFRbVVzUTBGdFFtWTdRVUZEUVR0QlFVTkJPenRCUVVOQkxFOUJRVXR3V0N4blFrRkJUQ3hIUVVGM1FpeEpRVUY0UWl4RFFYUkNaU3hEUVhkQ1pqdEJRVU5CTzBGQlEwRTdPMEZCUTBFc1QwRkJTeXRYTEZGQlFVd3NSMEZCWjBJc1NVRkJhRUlzUTBFelFtVXNRMEUyUW1ZN1FVRkRRVHRCUVVOQk96dEJRVU5CTEU5QlFVdEhMRlZCUVV3c1IwRkJhMElzU1VGQmJFSTdPMEZCUlVFc1RVRkJSMjFITEV0QlFVZ3NSVUZCVlR0QlFVTk9MMDhzVlVGQlRTeERRVUZEUXl4TlFVRlFMRU5CUVdNc1NVRkJaQ3hGUVVGdlFqaFBMRXRCUVhCQ08wRkJRMGc3UVVGRFNpeERRWFpEVER0QlFUQkRUeXhKUVVGTmRFWXNaVUZCWlN4SFFVTTFRanRCUVVOSlF5eFZRVUZSTEVWQlFVVXNWVUZFWkR0QlFVVkpVeXhSUVVGTkxFVkJRVVVzVVVGR1dqdEJRVWRKWXl4aFFVRlhMRVZCUVVVc1lVRklha0k3UVVGSlNVVXNUVUZCU1N4RlFVRkZMRTFCU2xZN1FVRkxTVVVzVVVGQlRTeEZRVUZGTEZGQlRGbzdRVUZOU1VVc2JVSkJRV2xDTEVWQlFVVXNiVUpCVG5aQ08wRkJUMGxGTEc5Q1FVRnJRaXhGUVVGRkxHOUNRVkI0UWp0QlFWRkpiMGtzVTBGQlR5eEZRVUZGTEZOQlVtSTdRVUZUU1VNc1pVRkJZU3hGUVVGRk8wRkJWRzVDTEVOQlJFOHNReXhEUVdGUU8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVTlBMRWxCUVUxNlN5eG5Ra0ZCWWl4SFFVVkpMREJDUVVGWk1Fc3NVMEZCV2l4RlFVRjFRbXA0UWl4UFFVRjJRaXhGUVVOQk8wRkJRVUU3TzBGQlEwazdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFOUJRVXRyZUVJc1UwRkJUQ3hIUVVGcFFrUXNVMEZCYWtJc1EwRk9TaXhEUVZGSk8wRkJRMEU3UVVGRFFUczdRVUZEUVN4UFFVRkxlbmxDTEU5QlFVd3NSMEZCWlhkQ0xFOUJRV1k3UVVGRFNDeERRV1pNTEVNc1EwRnJRa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkRUeXhKUVVGTmQyNUNMRmRCUVdJc1IwRkZTVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHhRa0ZCV1RKS0xFdEJRVm9zUlVGQmJVSnVlRUlzVDBGQmJrSXNSVUZEUVR0QlFVRkJPenRCUVVOSkxFOUJRVXR2ZUVJc1MwRkJUQ3hIUVVGaFJDeExRVUZpTzBGQlEwRXNUMEZCU3pONVFpeFBRVUZNTEVkQlFXVjNRaXhQUVVGbU8wRkJRMGdzUTBGVVRDeERMRU5CV1VFN1FVRkRRVHRCUVVOQk96dEJRVU5QTEVsQlFVMHdiVUlzYjBKQlFXSTdRVUZCUVR0QlFVRkJPMEZCUlVrc1owTkJRVmxvY0VJc1VVRkJXaXhGUVVGelFqSjZRaXhKUVVGMFFpeEZRVUUwUWpWNlFpeFhRVUUxUWl4RlFVRjVRM1ZETEU5QlFYcERMRVZCUVd0RWFYRkNMRWRCUVd4RUxFVkJRMEU3UVVGQlFUczdRVUZEU1R0QlFVTkJPMEZCUTBFN1FVRkRRU3hUUVVGTGRITkNMRkZCUVV3c1IwRkJhMEpFTEZGQlFXeENPMEZCUTBFc1UwRkJTMmRDTEVWQlFVd3NSMEZCYTBKb1FpeFJRVUZzUWl4RFFVeEtMRU5CUzJkRE8wRkJSVFZDTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hUUVVGTGQzUkNMRWxCUVV3c1IwRkJXVzFITEVsQlFWb3NRMEZXU2l4RFFWbEpPMEZCUTBFN1FVRkRRVHM3UVVGRFFTeFRRVUZMUXl4alFVRk1MRWRCUVhOQ2NrZ3NSMEZCZEVJc1EwRm1TaXhEUVdsQ1NUdEJRVU5CTzBGQlEwRTdPMEZCUTBFc1UwRkJTM0pTTEZkQlFVd3NSMEZCYlVKdVlpeFhRVUZ1UWl4RFFYQkNTaXhEUVhOQ1NUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPenRCUVVOQkxGTkJRVXR6Y1VJc1YwRkJUQ3hIUVVGdFFpeExRVUZ1UWl4RFFUTkNTaXhEUVRaQ1NUdEJRVU5CTzBGQlEwRTdPMEZCUTBFc1UwRkJTM05FTEZkQlFVd3NSMEZCYlVJc1NVRkJia0lzUTBGb1Ewb3NRMEZyUTBrN1FVRkRRVHRCUVVOQk96dEJRVU5CTEZOQlFVdGpMRzlDUVVGTUxFZEJRVFJDTEVsQlFUVkNMRU5CY2tOS0xFTkJkVU5KTzBGQlEwRTdRVUZEUVRzN1FVRkRRU3hUUVVGTE1VSXNaMEpCUVV3c1IwRkJkMElzU1VGQmVFSXNRMEV4UTBvc1EwRTBRMGs3UVVGRFFUdEJRVU5CT3p0QlFVTkJMRk5CUVV0S0xHdENRVUZNTEVkQlFUQkNMRWxCUVRGQ0xFTkJMME5LTEVOQmFVUkpPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVU5CTEZOQlFVczVReXh6UWtGQlRDeEhRVUU0UWl4TFFVRTVRaXhEUVhKRVNpeERRWFZFU1R0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRFFTeFRRVUZMVFN4dlFrRkJUQ3hIUVVFMFFpeEpRVUUxUWl4RFFUTkVTaXhEUVRaRVNUdEJRVU5CTzBGQlEwRTdPMEZCUTBFc1UwRkJTMnhETEZGQlFVd3NSMEZCWjBJc1MwRkJhRUlzUTBGb1JVb3NRMEZyUlVrN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNVMEZCUzNadFFpeFBRVUZNTEVkQlFXVkZMSE5FUVVGWkxFTkJRVU5yVEN4UFFVRTFRaXhEUVhSRlNpeERRWGRGU1R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlEwRXNVMEZCU3l0dFFpeFJRVUZNTEVkQlFXZENMRWxCUVdoQ0xFTkJPVVZLTEVOQlowWkpPMEZCUTBFN1FVRkRRVHM3UVVGRFFTeFRRVUZMTlVvc2QwSkJRVXdzUjBGQlowTXNTVUZCYUVNc1EwRnVSa29zUTBGeFJrazdRVUZEUVR0QlFVTkJPenRCUVVOQkxGTkJRVXMyU2l3eVFrRkJUQ3hIUVVGdFF5eEpRVUZ1UXl4RFFYaEdTaXhEUVRCR1NUdEJRVU5CTzBGQlEwRTdPMEZCUTBFc1UwRkJTM1JHTEdsQ1FVRk1MRWRCUVhsQ0xFbEJRWHBDTEVOQk4wWktMRU5CSzBaSk8wRkJRMEU3UVVGRFFUczdRVUZEUVN4VFFVRkxZU3hQUVVGTUxFZEJRV1V2YzBJc1QwRkJaaXhEUVd4SFNpeERRVzlIU1R0QlFVTkJPMEZCUTBFN08wRkJRMEVzVTBGQlMzZHhRaXh0UWtGQlRDeEhRVUV5UWl4SlFVRXpRanRCUVVWQkxGTkJRVXRKTEcxQ1FVRk1MRWRCUVRKQ0xFbEJRVE5DTzBGQlEwZzdPMEZCTjBkTU8wRkJRVUU3UVVGQlFTeDVRa0VyUjFOWUxFZEJMMGRVTEVWQlowaEpPMEZCUTBrc1YwRkJTMnhETEZkQlFVd3NSMEZCYlVJc1NVRkJia0k3UVVGRFFTeFhRVUZMYzBRc1YwRkJUQ3hIUVVGdFFtNW1MRWxCUVVrc1EwRkJRMFFzUjBGQlRDeEZRVUZ1UWp0QlFVTkJMRmRCUVV0clowSXNiMEpCUVV3c1IwRkJORUpxWjBJc1NVRkJTU3hEUVVGRFJDeEhRVUZNTEVWQlFUVkNPMEZCUTBFc1YwRkJTM0ZzUWl4alFVRk1MRWRCUVhOQ2NrZ3NSMEZCZEVJN1FVRkRTRHRCUVhKSVREdEJRVUZCTzBGQlFVRXNLMEpCZFVobFFTeEhRWFpJWml4RlFYZElTVHRCUVVOSkxGZEJRVXRKTEd0Q1FVRk1MRWRCUVRCQ0xFbEJRVEZDTzBGQlEwRXNWMEZCU3paQ0xHbENRVUZNTEVkQlFYbENhR2RDTEVsQlFVa3NRMEZCUTBRc1IwRkJUQ3hGUVVGNlFqdEJRVU5CTEZkQlFVdHhiRUlzWTBGQlRDeEhRVUZ6UW5KSUxFZEJRWFJDTzBGQlEwZzdRVUUxU0V3N1FVRkJRVHRCUVVGQkxHbERRVGhJYVVKQkxFZEJPVWhxUWl4RlFTdElTVHRCUVVOSkxGZEJRVXRKTEd0Q1FVRk1MRWRCUVRCQ0xFdEJRVEZDTzBGQlEwRXNWMEZCUzJsSUxHTkJRVXdzUjBGQmMwSnlTQ3hIUVVGMFFqdEJRVU5JTzBGQmJFbE1PMEZCUVVFN1FVRkJRU3dyUWtGdlNXVjNTQ3haUVhCSlppeEZRWEZKU1R0QlFVTkpMRmRCUVV0cVNDeHRRa0ZCVEN4SFFVRXlRaXhKUVVFelFqdEJRVU5CTEZkQlFVc3lRaXh2UWtGQlRDeEhRVUUwUW1wblFpeEpRVUZKTEVOQlFVTkVMRWRCUVV3c1JVRkJOVUk3UVVGRFFTeFhRVUZMZDJVc1owSkJRVXdzUjBGQmQwSm5TQ3haUVVGNFFqdEJRVU5JTzBGQmVrbE1PMEZCUVVFN1FVRkJRU3h4UTBFMFNVazdRVUZEU1N4WFFVRkxha2dzYlVKQlFVd3NSMEZCTWtJc1MwRkJNMEk3UVVGRFNEdEJRVGxKVER0QlFVRkJPMEZCUVVFc01rSkJaMHBYYjBJc1VVRm9TbGdzUlVGblNuRkNNMElzUjBGb1NuSkNMRVZCYVVwSk8wRkJRMGtzVjBGQlN6ZHhRaXhQUVVGTUxFZEJRV1ZGTEhORVFVRlpMRU5CUVVOdFRDeE5RVUUxUWp0QlFVTkJMRmRCUVV0cllpeFJRVUZNTEVkQlFXZENMRWxCUVdoQ08wRkJRMEVzVjBGQlN6Uk1MRkZCUVV3c1IwRkJaMEl6Uml4UlFVRm9RanRCUVVOQkxGZEJRVXN3Uml4alFVRk1MRWRCUVhOQ2NrZ3NSMEZCZEVJN1FVRkRTRHRCUVhSS1REdEJRVUZCTzBGQlFVRXNjME5CZDBwelFubElMRlZCZUVwMFFpeEZRWGRLYTBONlNDeEhRWGhLYkVNc1JVRjVTa2s3UVVGRFNTeFhRVUZMZEVNc2QwSkJRVXdzUjBGQlowTXJTaXhWUVVGb1F6dEJRVU5CTEZkQlFVdHVTeXh6UWtGQlRDeEhRVUU0UWl4SlFVRTVRanRCUVVOQkxGZEJRVXNyU2l4alFVRk1MRWRCUVhOQ2NrZ3NSMEZCZEVJN1FVRkRTRHRCUVRkS1REdEJRVUZCTzBGQlFVRXNkVU5CSzBwMVFrRXNSMEV2U25aQ0xFVkJaMHRKTzBGQlEwa3NWMEZCU3pGRExITkNRVUZNTEVkQlFUaENMRXRCUVRsQ08wRkJRMEVzVjBGQlN5dEtMR05CUVV3c1IwRkJjMEp5U0N4SFFVRjBRanRCUVVOSU8wRkJia3RNTzBGQlFVRTdRVUZCUVN4NVEwRnhTM2xDZVVnc1ZVRnlTM3BDTEVWQmNVdHhRM3BJTEVkQmNrdHlReXhGUVhOTFNUdEJRVU5KTEZkQlFVdDFTQ3d5UWtGQlRDeEhRVUZ0UTBVc1ZVRkJia003UVVGRFFTeFhRVUZMTjBvc2IwSkJRVXdzUjBGQk5FSXNTVUZCTlVJN1FVRkRRU3hYUVVGTGVVb3NZMEZCVEN4SFFVRnpRbkpJTEVkQlFYUkNPMEZCUTBnN1FVRXhTMHc3UVVGQlFUdEJRVUZCTEdsRFFUUkxhVUpCTEVkQk5VdHFRaXhGUVRaTFNUdEJRVU5KTEZkQlFVdHdReXh2UWtGQlRDeEhRVUUwUWl4TFFVRTFRanRCUVVOQkxGZEJRVXQ1U2l4alFVRk1MRWRCUVhOQ2NrZ3NSMEZCZEVJN1FVRkRTRHRCUVdoTVREdEJRVUZCTzBGQlFVRXNPRUpCYTB4alowTXNTMEZzVEdRc1JVRnJUSEZDVEN4UlFXeE1ja0lzUlVGclRDdENNMElzUjBGc1RDOUNMRVZCYlV4Sk8wRkJRMGtzVjBGQlN6ZHhRaXhQUVVGTUxFZEJRV1UyYzBJc1MwRkJaanRCUVVOQkxGZEJRVXR6Uml4UlFVRk1MRWRCUVdkQ00wWXNVVUZCYUVJN1FVRkRRU3hYUVVGTGFrY3NVVUZCVEN4SFFVRm5RaXhKUVVGb1FqdEJRVU5CTEZkQlFVc3dSU3hyUWtGQlRDeEhRVUV3UWl4TFFVRXhRanRCUVVOQkxGZEJRVXRITEcxQ1FVRk1MRWRCUVRKQ0xFdEJRVE5DTzBGQlEwRXNWMEZCUzJwRUxITkNRVUZNTEVkQlFUaENMRXRCUVRsQ08wRkJRMEVzVjBGQlMwMHNiMEpCUVV3c1IwRkJORUlzUzBGQk5VSTdRVUZEUVN4WFFVRkxlVW9zWTBGQlRDeEhRVUZ6UW5KSUxFZEJRWFJDTzBGQlEwZzdRVUUxVEV3N1FVRkJRVHRCUVVGQkxIRkRRVGhNY1VKQkxFZEJPVXh5UWl4RlFTdE1TVHRCUVVOSkxGZEJRVXMzY1VJc1QwRkJUQ3hIUVVGbFJTeHpSRUZCV1N4RFFVRkRhMHdzVDBGQk5VSTdRVUZEUVN4WFFVRkxLMjFDTEZGQlFVd3NSMEZCWjBJc1NVRkJhRUk3UVVGRFFTeFhRVUZMTlV3c1VVRkJUQ3hIUVVGblFpeEpRVUZvUWp0QlFVTkJMRmRCUVVzd1JTeHJRa0ZCVEN4SFFVRXdRaXhMUVVFeFFqdEJRVU5CTEZkQlFVdEhMRzFDUVVGTUxFZEJRVEpDTEV0QlFUTkNPMEZCUTBFc1YwRkJTMnBFTEhOQ1FVRk1MRWRCUVRoQ0xFdEJRVGxDTzBGQlEwRXNWMEZCUzAwc2IwSkJRVXdzUjBGQk5FSXNTMEZCTlVJN1FVRkRRU3hYUVVGTGVVb3NZMEZCVEN4SFFVRnpRbkpJTEVkQlFYUkNPMEZCUTBnN1FVRjRUVXc3TzBGQlFVRTdRVUZCUVN4SkxFTkJNazFCTzBGQlEwRTdRVUZEUVRzN1FVRkRUeXhKUVVGTmNrTXNiMEpCUVdJc1IwRkZTU3c0UWtGQldTdEtMRmRCUVZvc1JVRkJlVUl6ZUVJc1QwRkJla0lzUlVGRFFUdEJRVUZCT3p0QlFVTkpMRTlCUVVzMGVFSXNWMEZCVEN4SFFVRnRRa1FzVjBGQmJrSXNRMEZFU2l4RFFVZEpPMEZCUTBFN1FVRkRRVHM3UVVGRFFTeFBRVUZMYm5wQ0xFOUJRVXdzUjBGQlpYZENMRTlCUVdZN1FVRkRTQ3hEUVZaTU8wRkJZVThzU1VGQlRXcERMRk5CUVdJN1FVRkJRVHRCUVVGQk8wRkJSVWtzZFVKQlFXTTdRVUZCUVRzN1FVRkRWaXhUUVVGTE9IcENMR2xDUVVGTUxFZEJRWGxDTEV0QlFYcENPMEZCUTBFc1UwRkJTME1zTmtKQlFVd3NSMEZCY1VNc1MwRkJja003UVVGRFFTeFRRVUZMUXl4eFFrRkJUQ3hIUVVFMlFpeExRVUUzUWp0QlFVVkJMRk5CUVVzMWVrSXNkMEpCUVV3c1IwRkJaME1zUzBGQmFFTTdRVUZEUVN4VFFVRkxReXh2UTBGQlRDeEhRVUUwUXl4TFFVRTFRenRCUVVOQkxGTkJRVXRETERSQ1FVRk1MRWRCUVc5RExFdEJRWEJETzBGQlEwZzdPMEZCVmt3N1FVRkJRVHRCUVVGQkxIRkRRVmx4UWpKNlFpeFhRVnB5UWl4RlFXRkpPMEZCUTBrc1ZVRkJTU3hMUVVGTFJpdzJRa0ZCVEN4SlFVRnpReXhMUVVGTE1YcENMRzlEUVVFdlF5eEZRVU5CTzBGQlEwazBla0lzYlVKQlFWY3NRMEZCUTBNc2QwSkJRVm9zUjBGQmRVTXNTMEZCUzBnc05rSkJRVFZETzBGQlEwZzdPMEZCUTBRc1ZVRkJTU3hMUVVGTFF5eHhRa0ZCVEN4SlFVRTRRaXhMUVVGTE1YcENMRFJDUVVGMlF5eEZRVU5CTzBGQlEwa3lla0lzYlVKQlFWY3NRMEZCUTBVc2VVTkJRVm9zUjBGQmQwUXNTMEZCUzBnc2NVSkJRVGRFTzBGQlEwZzdPMEZCUTBRc1ZVRkJTU3hMUVVGTFJpeHBRa0ZCVEN4SlFVRXdRaXhMUVVGTE1YcENMSGRDUVVGdVF5eEZRVU5CTzBGQlEwazJla0lzYlVKQlFWY3NRMEZCUTBjc2JVSkJRVm9zUjBGQmEwTXNTMEZCUzA0c2FVSkJRWFpETzBGQlEwZzdPMEZCUTBRc1lVRkJUMGNzVjBGQlVEdEJRVU5JTzBGQk0wSk1PMEZCUVVFN1FVRkJRU3dyUWtFNFFrazdRVUZEU1N4eFJFRkJkME1zUzBGQlMwWXNOa0pCUVRkRExHOURRVUZ2Unl4TFFVRkxReXh4UWtGQmVrY3NhVU5CUVhGS0xFdEJRVXRHTEdsQ1FVRXhTanRCUVVOSU8wRkJhRU5NT3p0QlFVRkJPMEZCUVVFN1FVRnRRMDhzU1VGQlRUVjZRaXhyUWtGQllqdEJRVUZCTzBGQlFVRTdRVUZGU1N4blEwRkJZenRCUVVGQk96dEJRVU5XTEZOQlFVdHRNRUlzYzBKQlFVd3NSMEZCT0VJc1JVRkJPVUk3UVVGRFFTeFRRVUZMUXl4elFrRkJUQ3hIUVVFNFFpeEZRVUU1UWp0QlFVTkJMRk5CUVV0RExITkNRVUZNTEVkQlFUaENMRVZCUVRsQ08wRkJRMEVzVTBGQlMwTXNjMEpCUVV3c1IwRkJPRUlzUlVGQk9VSTdRVUZEU0RzN1FVRlFURHRCUVVGQk8wRkJRVUVzTmtOQlV6WkNReXh4UWtGVU4wSXNSVUZWU1R0QlFVTkpMRmRCUVV0S0xITkNRVUZNTEVkQlFUaENTU3h4UWtGQk9VSTdRVUZEU0R0QlFWcE1PMEZCUVVFN1FVRkJRU3cyUTBGak5rSkRMSEZDUVdRM1FpeEZRV1ZKTzBGQlEwa3NWMEZCUzBvc2MwSkJRVXdzUjBGQk9FSkpMSEZDUVVFNVFqdEJRVU5JTzBGQmFrSk1PMEZCUVVFN1FVRkJRU3cyUTBGclFqWkNReXh4UWtGc1FqZENMRVZCYlVKSk8wRkJRMGtzVjBGQlMwb3NjMEpCUVV3c1IwRkJPRUpKTEhGQ1FVRTVRanRCUVVOSU8wRkJja0pNTzBGQlFVRTdRVUZCUVN3MlEwRnpRalpDUXl4eFFrRjBRamRDTEVWQmRVSkpPMEZCUTBrc1YwRkJTMG9zYzBKQlFVd3NSMEZCT0VKSkxIRkNRVUU1UWp0QlFVTklPMEZCZWtKTU8wRkJRVUU3UVVGQlFTd3JRa0V3UW1WWUxGZEJNVUptTEVWQk1rSkpPMEZCUTBsQkxHbENRVUZYTEVOQlFVTlpMSFZDUVVGYUxFZEJRWE5ETEV0QlFVdFNMSE5DUVVFelF6dEJRVU5CU2l4cFFrRkJWeXhEUVVGRFlTeDFRa0ZCV2l4SFFVRnpReXhMUVVGTFVpeHpRa0ZCTTBNN1FVRkRRVXdzYVVKQlFWY3NRMEZCUTJNc2RVSkJRVm9zUjBGQmMwTXNTMEZCUzFJc2MwSkJRVE5ETzBGQlEwRk9MR2xDUVVGWExFTkJRVU5sTEhWQ1FVRmFMRWRCUVhORExFdEJRVXRTTEhOQ1FVRXpRenRCUVVWQkxHRkJRVTlRTEZkQlFWQTdRVUZEU0R0QlFXeERURHM3UVVGQlFUdEJRVUZCTEVrN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOb1drRTdRVUZEUVR0QlFVVlBMRWxCUVUwdlRpeGhRVUZpTzBGQlFVRTdRVUZCUVR0QlFVVkpMSGxDUVVGWkswOHNSMEZCV2l4RlFVTkJPMEZCUVVFN08wRkJRMGtzVTBGQlMwTXNTVUZCVEN4SFFVRlpSQ3hIUVVGYU8wRkJRMEVzVTBGQlMyeFNMRWxCUVV3c1IwRkJXWHBoTEU5QlFWbzdRVUZGUVN4VFFVRkxka29zVFVGQlRDeEhRVUZqTEVsQlFVbHpWaXcwUkVGQlNpeEZRVUZrTzBGQlEwZ3NSMEZTVEN4RFFWVkpPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN096dEJRWEJDU2p0QlFVRkJPMEZCUVVFc2EwTkJjVUpyUWpobUxFMUJja0pzUWl4RlFYRkNNRUpETEU5QmNrSXhRaXhGUVhGQ2JVTkRMRlZCY2tKdVF5eEZRWEZDSzBORExHdENRWEpDTDBNc1JVRnhRbTFGTzBGQlF6TkVMRmxCUVUwc1NVRkJTVGw1UWl4TFFVRktMRU5CUVZVc2EwVkJRVllzUTBGQlRqdEJRVU5JTEV0QmRrSk1MRU5CZVVKSk96dEJRWHBDU2p0QlFVRkJPMEZCUVVFc2QwTkJNRUozUWl0NVFpeFhRVEZDZUVJc1JVRXdRbkZEUXl4bFFURkNja01zUlVFd1FuTkVPMEZCUXpsRExGbEJRVTBzU1VGQlNXaDZRaXhMUVVGS0xFTkJRVlVzYTBWQlFWWXNRMEZCVGp0QlFVTklPMEZCTlVKTU8wRkJRVUU3UVVGQlFTeHJRMEU0UW10Q05ubENMRlZCT1VKc1FpeEZRVGhDT0VJN1FVRkRkRUlzV1VGQlRTeEpRVUZKTjNsQ0xFdEJRVW9zUTBGQlZTeHJSVUZCVml4RFFVRk9PMEZCUTBnN1FVRm9RMHc3UVVGQlFUdEJRVUZCTEhsRFFXdERlVUpRTEU5QmJFTjZRaXhGUVd0RGEwTTdRVUZETVVJc1dVRkJUU3hKUVVGSlR5eExRVUZLTEVOQlFWVXNhMFZCUVZZc1EwRkJUanRCUVVOSU8wRkJjRU5NTzBGQlFVRTdRVUZCUVN3eVEwRjFRMGs3UVVGRFNTeFhRVUZMTUhsQ0xFbEJRVXdzUTBGQlZUbE5MRXRCUVZZc1EwRkJaMElzUzBGQlMzSnZRaXhOUVVGTUxFTkJRVmx6YjBJc1UwRkJXaXhEUVVGelFqTnVRaXhuUlVGQlpTeERRVUZEUXl4RlFVRm9RaXhEUVVGdFFpeFRRVUZ1UWl4RFFVRjBRaXhEUVVGb1FqdEJRVU5JTzBGQmVrTk1PMEZCUVVFN1FVRkJRU3hwUkVFeVEybERSeXhEUVRORGFrTXNSVUUwUTBrN1FVRkJRVHM3UVVGRFNTeFZRVUZKZFRCQ0xGVkJRVlVzUjBGQlIzWXdRaXhEUVVGRExFTkJRVU5ITEVsQlFVWXNRMEZCVHl4aFFVRlFMRU5CUVdwQ08wRkJRMEVzVlVGQlNXMHdRaXhQUVVGUExFZEJRVWQwTUVJc1EwRkJReXhEUVVGRFJ5eEpRVUZHTEVOQlFVOHNWVUZCVUN4RFFVRmtPMEZCUTBFc1ZVRkJTWEV3UWl4clFrRkJhMElzUjBGQlIzZ3dRaXhEUVVGRExFTkJRVU5ITEVsQlFVWXNRMEZCVHl4elFrRkJVQ3hEUVVGNlFpeERRVWhLTEVOQlMwazdPMEZCUTBFc1lVRkJUM0ZuUWl4UFFVRlBMRU5CUVVOdFZTeFBRVUZTTEVOQlFXZENMRXRCUVV0RExHRkJRVXdzUTBGQmJVSXNSVUZCYmtJc1JVRkJkVUpPTEU5QlFYWkNMRVZCUVdkRFF5eFZRVUZvUXl4RlFVRTBRME1zYTBKQlFUVkRMRU5CUVdoQ0xFVkJRV2xHU3l4SlFVRnFSaXhEUVVGelJpeFZRVUZCUXl4VlFVRlZMRVZCUVVrN1FVRkRka2RCTEd0Q1FVRlZMRU5CUVVOb2FrSXNUMEZCV0N4SFFVRnhRbmRwUWl4UFFVRnlRanM3UVVGRFFTeFpRVUZKVVN4VlFVRlZMRU5CUVVNNWFVSXNWMEZCV0N4SlFVRXdRaXhEUVVFNVFpeEZRVU5CTzBGQlEwVXNaVUZCU1N4RFFVRkRhVklzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXhEUVVGbExIRkVRVUZtT3p0QlFVTkJaMUFzYjBKQlFWVXNRMEZCUTJ4cVFpeE5RVUZZTEVkQlFXOUNaU3dyUkVGQmJVSXNRMEZCUTFNc1owSkJRWGhETzBGQlEwUTdPMEZCUlVRc1lVRkJTU3hEUVVGRFoyaENMRWxCUVV3c1EwRkJWVGxOTEV0QlFWWXNRMEZCWjBKM1RpeFZRVUZWTEVOQlFVTjJUaXhUUVVGWUxFTkJRWEZDZG01Q0xFTkJRVU1zUTBGQlEwZ3NSVUZCZGtJc1EwRkJhRUk3UVVGRFNDeFBRVlJOTEVOQlFWQTdRVUZWU0R0QlFUVkVURHRCUVVGQk8wRkJRVUVzTmtOQk9FUTJRa2NzUTBFNVJEZENMRVZCSzBSSk8wRkJRVUU3TzBGQlEwa3NWVUZCU1hrd1FpeFhRVUZYTEVkQlFVY3NTVUZCU1M5blFpeDFSRUZCU2l4RFFVRm5RakZVTEVOQlFXaENMRU5CUVd4Q0xFTkJSRW9zUTBGSFNUczdRVUZEUVN4aFFVRlBkMmRDTEU5QlFVOHNRMEZCUTIxVkxFOUJRVklzUTBGQlowSXNTMEZCUzBNc1lVRkJUQ3hEUVVGdFFrZ3NWMEZCVnl4RFFVRkROV2xDTEUxQlFTOUNMRVZCUVhWRE5HbENMRmRCUVZjc1EwRkJRek5wUWl4UFFVRnVSQ3hGUVVFMFJESnBRaXhYUVVGWExFTkJRVU14YVVJc1ZVRkJlRVVzUlVGQmIwWXdhVUlzVjBGQlZ5eERRVUZETjJkQ0xHdENRVUZvUnl4RFFVRm9RaXhGUVVGeFNXbG9RaXhKUVVGeVNTeERRVUV3U1N4VlFVRkJSU3hyUWtGQmEwSXNSVUZCU1R0QlFVTnVTeXhaUVVGSlFTeHJRa0ZCYTBJc1EwRkJRMjVxUWl4TlFVRnVRaXhKUVVFMlFtVXNLMFJCUVcxQ0xFTkJRVU5ETEU5QlFYSkVMRVZCUTBFN1FVRkRTU3huUWtGQlNTeERRVUZEY1ZFc1NVRkJUQ3hEUVVGVmMwTXNTVUZCVml4RFFVRmxMRFpGUVVGbU96dEJRVU5CTEdkQ1FVRkpMRU5CUVVNMlR5eEpRVUZNTEVOQlFWVTVUU3hMUVVGV0xFTkJRV2RDZVU0c2EwSkJRV3RDTEVOQlFVTjRUaXhUUVVGdVFpeERRVUUyUW5adVFpeERRVUZETEVOQlFVTklMRVZCUVM5Q0xFTkJRV2hDTzBGQlEwZzdPMEZCUlVRc1dVRkJTVzB4UWl4elFrRkJjMElzUjBGQlIwUXNhMEpCUVd0Q0xFTkJRVU0zYUVJc2NVSkJRVzVDTEVWQlFUZENPMEZCUlVFc1dVRkJTU3RvUWl4clFrRkJhMElzUjBGQlIwUXNjMEpCUVhOQ0xFTkJRVU5GTEVsQlFYWkNMRU5CUVRSQ0xGVkJRVUZETEVkQlFVYzdRVUZCUVN4cFFrRkJTVUVzUjBGQlJ5eERRVUZEUXl4blFrRkJTaXhOUVVFd1FsZ3NWMEZCVnl4RFFVRkRhbkpDTEdkQ1FVRmFMRU5CUVRaQ05GTXNjMEpCUVRkQ0xFVkJRVGxDTzBGQlFVRXNVMEZCTDBJc1EwRkJla0k3TzBGQlEwRXNXVUZCU1RaWkxHdENRVUZLTEVWQlEwRTdRVUZEU1R0QlFVTkJPMEZCUTBFN1FVRkRRU3huUWtGQlNTeERRVUZEYUZNc1NVRkJUQ3hEUVVGVmMwTXNTVUZCVml4RFFVRmxMSFZGUVVGbU96dEJRVU5CTEdkQ1FVRkpMRU5CUVVNMlR5eEpRVUZNTEVOQlFWVTVUU3hMUVVGV0xFTkJRV2RDZVU0c2EwSkJRV3RDTEVOQlFVTjRUaXhUUVVGdVFpeERRVUUyUW5adVFpeERRVUZETEVOQlFVTklMRVZCUVM5Q0xFTkJRV2hDT3p0QlFVTkJPMEZCUTBnc1UwRnNRbXRMTEVOQmIwSnVTenM3TzBGQlEwRXNXVUZCU1hjeFFpeHhRa0ZCY1VJc1IwRkJSMHdzYzBKQlFUVkNPMEZCUTBGTExEWkNRVUZ4UWl4RFFVRkRhSFJDTEVsQlFYUkNMRU5CUTBrc1NVRkJTV3RMTEN0RVFVRktMRU5CUVhkQ2EybENMRmRCUVZjc1EwRkJRMnhvUWl4WFFVRmFMRU5CUVhkQ01rOHNWMEZCZUVJc1JVRkJlRUlzUlVGQkswUjFVeXhYUVVGWExFTkJRVU5xY2tJc1owSkJRVm9zUTBGQk5rSTRja0lzWjBKQlFUZENMRVZCUVM5RUxFTkJSRW83UVVGSlFTeFpRVUZKV2l4bFFVRmxMRWRCUVVjdmFVSXNPRVJCUVd0Q0xFTkJRVU0wYWtJc1ZVRkJia0lzUTBGQk9FSkdMSEZDUVVFNVFpeERRVUYwUWl4RFFURkNiVXNzUTBFMFFtNUxPenRCUVVOQk4xVXNaVUZCVHl4RFFVRkRiVlVzVDBGQlVpeERRVUZuUWl4TlFVRkpMRU5CUVVOaExHMUNRVUZNTEVOQlFYbENaaXhYUVVGNlFpeEZRVUZ6UTBNc1pVRkJkRU1zUTBGQmFFSXNSVUZCZDBWSExFbEJRWGhGTEVOQlFUWkZMRlZCUVVGWkxHbENRVUZwUWl4RlFVRkpPMEZCUlRsR08wRkJRMEZCTERKQ1FVRnBRaXhEUVVGRE5XcENMRTFCUVd4Q0xFZEJRVEpDTkdsQ0xGZEJRVmNzUTBGQlF6VnBRaXhOUVVGMlF6dEJRVU5CTkdwQ0xESkNRVUZwUWl4RFFVRkRNMnBDTEU5QlFXeENMRWRCUVRSQ01tbENMRmRCUVZjc1EwRkJRek5wUWl4UFFVRjRRenM3UVVGRlFTeGpRVUZKTW1wQ0xHbENRVUZwUWl4RFFVRkROMnBDTEUxQlFXeENMRWxCUVRSQ1pTd3JSRUZCYlVJc1EwRkJRME1zVDBGQmNFUXNSVUZEUVR0QlFVTkZMR3RDUVVGSkxFTkJRVU54VVN4SlFVRk1MRU5CUVZWelF5eEpRVUZXTEVOQlFXVXNhVWRCUVdZN08wRkJRMEZyVVN3MlFrRkJhVUlzUTBGQlEzWnFRaXhSUVVGc1FpeEhRVUUyUWpacFFpeHJRa0ZCYTBJc1EwRkJRemRwUWl4UlFVRm9SRHRCUVVORUxGZEJTa1FzVFVGTlFUdEJRVU5GZFdwQ0xEWkNRVUZwUWl4RFFVRkRkbXBDTEZGQlFXeENMRWRCUVRaQ2QybENMR1ZCUVRkQ08wRkJRMFE3TzBGQlJVUXNaMEpCUVVrc1EwRkJRMDRzU1VGQlRDeERRVUZWT1Uwc1MwRkJWaXhEUVVGblFtMVBMR2xDUVVGcFFpeERRVUZEYkU4c1UwRkJiRUlzUTBGQk5FSjJia0lzUTBGQlF5eERRVUZEU0N4RlFVRTVRaXhEUVVGb1FqdEJRVU5JTEZOQmFrSkVPMEZCYTBKSUxFOUJMME5OTEVOQlFWQTdRVUZuUkVnN1FVRnVTRXc3UVVGQlFUdEJRVUZCTERCRFFYRklNRUpITEVOQmNrZ3hRaXhGUVhOSVNUdEJRVU5KTEZkQlFVdHZNRUlzU1VGQlRDeERRVUZWT1Uwc1MwRkJWaXhEUVVGblFpeExRVUZMY205Q0xFMUJRVXdzUTBGQldYTnZRaXhUUVVGYUxFTkJRWE5DZG01Q0xFTkJRVU1zUTBGQlEwZ3NSVUZCZUVJc1EwRkJhRUk3UVVGRFNEdEJRWGhJVER0QlFVRkJPMEZCUVVFc1owUkJNRWhuUTBjc1EwRXhTR2hETEVWQk1raEpPMEZCUTBrc1ZVRkJUWFV3UWl4VlFVRlZMRWRCUVVkMk1FSXNRMEZCUXl4RFFVRkRSeXhKUVVGR0xFTkJRVThzWVVGQlVDeERRVUZ1UWl4RFFVUktMRU5CUjBrN08wRkJRMEVzVlVGQlRYVXhRaXhyUWtGQmEwSXNSMEZCUnl4UFFVRlBMRXRCUVV0d1owSXNZVUZCV2l4TFFVRTRRaXhWUVVFNVFpeEhRVU55UWl4TFFVRkxRU3hoUVVGTUxFTkJRVzFDYVdZc1ZVRkJia0lzUTBGRWNVSXNSMEZGY2tJc1NVRkdUanM3UVVGSFFTeFZRVUZKTEVOQlFVTnRRaXhyUWtGQlJDeEpRVUYxUWl4RFFVRkRRU3hyUWtGQmEwSXNRMEZCUTNSblFpeFRRVUV6UXl4SlFVRjNSQ3hEUVVGRGMyZENMR3RDUVVGclFpeERRVUZEZEdkQ0xGTkJRVzVDTEVOQlFUWkNla2NzVFVGQk1VWXNSVUZEUVR0QlFVTkpLMjFDTERCQ1FVRnJRaXgxUjBGQlJ5eEpRVUZKZG1kQ0xIRkNRVUZLTEVWQlFVZ3NRMEZCYkVJN08wRkJRMEVzWVVGQlN6aE9MRWxCUVV3c1EwRkJWVFpETEVsQlFWWXNRMEZCWlN4NVFrRkJaanRCUVVOSU96dEJRVVZFTEZkQlFVdHpUeXhKUVVGTUxFTkJRVlU1VFN4TFFVRldMRU5CUVdkQ2IwOHNhMEpCUVd0Q0xFTkJRVU51VHl4VFFVRnVRaXhEUVVFMlFuWnVRaXhEUVVGRExFTkJRVU5JTEVWQlFTOUNMRU5CUVdoQ08wRkJRMGc3UVVGNlNVdzdRVUZCUVR0QlFVRkJMR2RFUVRKSlowTkhMRU5CTTBsb1F5eEZRVFJKU1R0QlFVTkpMRmRCUVVzeU1VSXNiMEpCUVV3c1EwRkJNRUl6TVVJc1EwRkJNVUk3UVVGRFNEdEJRVGxKVERzN1FVRkJRVHRCUVVGQkxFazdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVOSVFUdEJRVmRCTzBGQlJVOHNTVUZCVFhOc1FpeFZRVUZpTzBGQlFVRTdRVUZCUVR0QlFVVkpMSE5DUVVGWk5rOHNSMEZCV2l4RlFVTkJPMEZCUVVFN08wRkJRMGtzVTBGQlMwTXNTVUZCVEN4SFFVRlpSQ3hIUVVGYU8wRkJRMEVzVTBGQlMyeFNMRWxCUVV3c1IwRkJXWHBoTEU5QlFWbzdRVUZGUVN4VFFVRkxka29zVFVGQlRDeEhRVUZqTEVsQlFVbERMRzlFUVVGS0xFVkJRV1E3UVVGRFNEczdRVUZTVER0QlFVRkJPMEZCUVVFc05FTkJWVFJDVEN4UlFWWTFRaXhGUVZkSk8wRkJRMGtzVlVGQlNTc3lRaXhUUVVGVExFZEJRVWNzU1VGQlNUbGtMRFpFUVVGS0xFTkJRWGxDYWxvc1VVRkJla0lzUlVGQmJVTXdiMElzVTBGQmJrTXNSVUZCYUVJN1FVRkZRU3hWUVVGSmMwOHNSMEZCUnl4SFFVRkhMRWxCUVVsb1R5d3JSRUZCU2l4RFFVTk9hSEJDTEZGQlJFMHNSVUZEU1dsd1Fpd3dSRUZCWlN4RFFVRkRjVXNzWVVGRWNFSXNSVUZEYlVNc1EwRkVia01zUlVGRGMwTjVSQ3hUUVVSMFF5eEZRVVZPTERoRVFVWk5MRU5CUVZZN1FVRkhRU3hWUVVGSlJTeFBRVUZQTEVkQlFVY3NaME5CUVdRN1FVRkRRU3hoUVVGUExFdEJRVXRETEd0Q1FVRk1MRU5CUVhkQ1JpeEhRVUY0UWl4RlFVRTJRa01zVDBGQk4wSXNRMEZCVUR0QlFVTklPMEZCYmtKTU8wRkJRVUU3UVVGQlFTeHRRMEZ4UW0xQ2FqTkNMRkZCY2tKdVFpeEZRWEZDTmtKRUxGZEJja0kzUWl4RlFYTkNTVHRCUVVGQkxGVkJSSE5EY1hCQ0xFOUJRM1JETEhWRlFVUm5SQ3hKUVVGSk4yOUNMRFpFUVVGS0xFVkJRMmhFTzBGQlEwa3NWVUZCU1dkelFpeEhRVUZITEVkQlFVY3ZUU3hOUVVGTkxFTkJRVU5ETEUxQlFWQXNRMEZCWXl4SlFVRkpkRWNzTWtSQlFVb3NRMEZCZFVKd1dpeFhRVUYyUWl4RlFVRnZRME1zVVVGQmNFTXNRMEZCWkN4RlFVTldPMEZCUTBsSkxHTkJRVTBzUlVGQlJTeExRVUZMUVN4TlFVUnFRanRCUVVWSlJTeGxRVUZQTEVWQlFVVTRiMEk3UVVGR1lpeFBRVVJWTEVWQlNWQldMRk5CU2s4c1JVRkJWanRCUVUxQkxGVkJRVWx6VHl4SFFVRkhMRWRCUVVjc1NVRkJTV2hQTEN0RVFVRktMRU5CUTA1b2NFSXNVVUZFVFN4RlFVTkphWEJDTERCRVFVRmxMRU5CUVVOdlN5eFBRVVJ3UWl4RlFVTTJRblI2UWl4WFFVUTNRaXhGUVVNd1EzZHpRaXhIUVVReFF5eHpSVUZGZFVRc1EwRkJRM2h6UWl4WFFVRlhMRWRCUVVjc1MwRkJaaXhGUVVGelFtOWlMRTlCUVhSQ0xFTkJRVGhDTEVOQlFUbENMRU5CUm5aRUxFVkJRVlk3UVVGSFFTeFZRVUZKT0dJc1QwRkJUeXhuUkVGQmVVTXNRMEZCUTJ3elFpeFhRVUZYTEVkQlFVY3NTMEZCWml4RlFVRnpRbTlpTEU5QlFYUkNMRU5CUVRoQ0xFTkJRVGxDTEVOQlFYcERMRU5CUVZnN1FVRkRRU3hoUVVGUExFdEJRVXNyWWl4clFrRkJUQ3hEUVVGM1FrWXNSMEZCZUVJc1JVRkJOa0pETEU5QlFUZENMRU5CUVZBN1FVRkRTRHRCUVd4RFREdEJRVUZCTzBGQlFVRXNiME5CYjBOdlFtb3pRaXhSUVhCRGNFSXNSVUZ2UXpoQ2FXRXNVMEZ3UXpsQ0xFVkJiME41UTJ4aExGZEJjRU42UXl4RlFYRkRTVHRCUVVGQkxGVkJSR3RFY1hCQ0xFOUJRMnhFTEhWRlFVUTBSQ3hKUVVGSk4yOUNMRFpFUVVGS0xFVkJRelZFTzBGQlEwa3NWVUZCU1dkelFpeEhRVUZITEVkQlFVY3ZUU3hOUVVGTkxFTkJRVU5ETEUxQlFWQXNRMEZCWXl4SlFVRkpjRWNzTkVSQlFVb3NRMEZCZDBKWkxGTkJRWGhDTEVWQlFXMURiR0VzVjBGQmJrTXNSVUZCWjBSRExGRkJRV2hFTEVOQlFXUXNSVUZEVmp0QlFVTkpTU3hqUVVGTkxFVkJRVVVzUzBGQlMwRXNUVUZFYWtJN1FVRkZTVVVzWlVGQlR5eEZRVUZGT0c5Q08wRkJSbUlzVDBGRVZTeEZRVWxRVml4VFFVcFBMRVZCUVZZN1FVRk5RU3hWUVVGSmMwOHNSMEZCUnl4SFFVRkhMRWxCUVVsb1R5d3JSRUZCU2l4RFFVTk9hSEJDTEZGQlJFMHNSVUZEU1dsd1Fpd3dSRUZCWlN4RFFVRkRiMHNzVDBGRWNFSXNSVUZETmtKMGVrSXNWMEZFTjBJc1JVRkRNRU4zYzBJc1IwRkVNVU1zTkVWQlJUWkVMRU5CUVVONGMwSXNWMEZCVnl4SFFVRkhMRXRCUVdZc1JVRkJjMEp2WWl4UFFVRjBRaXhEUVVFNFFpeERRVUU1UWl4RFFVWTNSQ3hGUVVGV08wRkJSMEVzVlVGQlNUaGlMRTlCUVU4c2IwUkJRVFpETEVOQlFVTnNNMElzVjBGQlZ5eEhRVUZITEV0QlFXWXNSVUZCYzBKdllpeFBRVUYwUWl4RFFVRTRRaXhEUVVFNVFpeERRVUUzUXl4RFFVRllPMEZCUTBFc1lVRkJUeXhMUVVGTEsySXNhMEpCUVV3c1EwRkJkMEpHTEVkQlFYaENMRVZCUVRaQ1F5eFBRVUUzUWl4RFFVRlFPMEZCUTBnN1FVRnFSRXc3UVVGQlFUdEJRVUZCTEd0RVFXMUVhME5xTTBJc1VVRnVSR3hETEVWQmJVUTBRMmxoTEZOQmJrUTFReXhGUVcxRWRVUnNZU3hYUVc1RWRrUXNSVUZ2UkVrN1FVRkJRU3hWUVVSblJYRndRaXhQUVVOb1JTeDFSVUZFTUVVc1NVRkJTVGR2UWl3MlJFRkJTaXhGUVVNeFJUdEJRVU5KTEZWQlFVbG5jMElzUjBGQlJ5eEhRVUZITDAwc1RVRkJUU3hEUVVGRFF5eE5RVUZRTEVOQlFXTXNTVUZCU1doSExEQkZRVUZLTEVOQlFYTkRVU3hUUVVGMFF5eEZRVUZwUkd4aExGZEJRV3BFTEVWQlFUaEVReXhSUVVFNVJDeERRVUZrTEVWQlExWTdRVUZEU1Vrc1kwRkJUU3hGUVVGRkxFdEJRVXRCTEUxQlJHcENPMEZCUlVsRkxHVkJRVThzUlVGQlJUaHZRanRCUVVaaUxFOUJSRlVzUlVGSlVGWXNVMEZLVHl4RlFVRldPMEZCVFVFc1ZVRkJTWE5QTEVkQlFVY3NSMEZCUnl4SlFVRkphRThzSzBSQlFVb3NRMEZEVG1od1FpeFJRVVJOTEVWQlEwbHBjRUlzTUVSQlFXVXNRMEZCUTI5TExFOUJSSEJDTEVWQlF6WkNkSHBDTEZkQlJEZENMRVZCUXpCRGQzTkNMRWRCUkRGRExESkdRVVUwUlN4RFFVRkRlSE5DTEZkQlFWY3NSMEZCUnl4TFFVRm1MRVZCUVhOQ2IySXNUMEZCZEVJc1EwRkJPRUlzUTBGQk9VSXNRMEZHTlVVc1JVRkJWanRCUVVkQkxGVkJRVWs0WWl4UFFVRlBMRzFGUVVFMFJDeERRVUZEYkROQ0xGZEJRVmNzUjBGQlJ5eExRVUZtTEVWQlFYTkNiMklzVDBGQmRFSXNRMEZCT0VJc1EwRkJPVUlzUTBGQk5VUXNRMEZCV0R0QlFVTkJMR0ZCUVU4c1MwRkJTeXRpTEd0Q1FVRk1MRU5CUVhkQ1JpeEhRVUY0UWl4RlFVRTJRa01zVDBGQk4wSXNRMEZCVUR0QlFVTklPMEZCYUVWTU8wRkJRVUU3UVVGQlFTeHhRMEZyUlhGQ2FqTkNMRkZCYkVWeVFpeEZRV3RGSzBKcFlTeFRRV3hGTDBJc1JVRnRSVWs3UVVGQlFTeFZRVVJ6UTIxUUxFOUJRM1JETEhWRlFVUm5SQ3hKUVVGSk4yOUNMRFpFUVVGS0xFVkJRMmhFTzBGQlEwa3NWVUZCU1dkelFpeEhRVUZITEVkQlFVY3ZUU3hOUVVGTkxFTkJRVU5ETEUxQlFWQXNRMEZCWXl4SlFVRkpiRWNzTmtSQlFVb3NRMEZCZVVKVkxGTkJRWHBDTEVWQlFXOURhbUVzVVVGQmNFTXNRMEZCWkN4RlFVTldPMEZCUTBsSkxHTkJRVTBzUlVGQlJTeExRVUZMUVN4TlFVUnFRanRCUVVWSlJTeGxRVUZQTEVWQlFVVTRiMEk3UVVGR1lpeFBRVVJWTEVWQlNWQldMRk5CU2s4c1JVRkJWanRCUVUxQkxGVkJRVWx6VHl4SFFVRkhMRWRCUVVjc1NVRkJTV2hQTEN0RVFVRktMRU5CUTA1b2NFSXNVVUZFVFN4RlFVTkphWEJDTERCRVFVRmxMRU5CUVVOdlN5eFBRVVJ3UWl4RlFVTTJRaXhEUVVRM1FpeEZRVU5uUXpsSExFZEJSR2hETEVWQlJVNHNPRVJCUmswc1EwRkJWanRCUVVkQkxGVkJRVWt3U3l4UFFVRlBMRWRCUVVjc05rTkJRV1E3UVVGRFFTeGhRVUZQTEV0QlFVdERMR3RDUVVGTUxFTkJRWGRDUml4SFFVRjRRaXhGUVVFMlFrTXNUMEZCTjBJc1EwRkJVRHRCUVVOSU8wRkJMMFZNTzBGQlFVRTdRVUZCUVN4NVEwRnBSbmxDYWpOQ0xGRkJha1o2UWl4RlFXbEdiVU5wWVN4VFFXcEdia01zUlVGcFJqaERiR0VzVjBGcVJqbERMRVZCYTBaSk8wRkJRVUVzVlVGRWRVUXlZU3hsUVVOMlJDeDFSVUZFZVVVc1EwRkRla1U3UVVGQlFTeFZRVVEwUlRCUExFOUJRelZGTEhWRlFVUnpSaXhKUVVGSk4yOUNMRFpFUVVGS0xFVkJRM1JHTzBGQlEwa3NWVUZCU1dkelFpeEhRVUZITEVkQlFVY3ZUU3hOUVVGTkxFTkJRVU5ETEUxQlFWQXNRMEZCWXl4SlFVRkpha1lzYVVWQlFVb3NRMEZCTmtKUUxGTkJRVGRDTEVWQlFYZERiR0VzVjBGQmVFTXNSVUZCY1VSRExGRkJRWEpFTEVOQlFXUXNSVUZEVmp0QlFVTkpTU3hqUVVGTkxFVkJRVVVzUzBGQlMwRXNUVUZFYWtJN1FVRkZTVVFzZFVKQlFXVXNSVUZCUlhWaExHVkJSbkpDTzBGQlIwbHdZU3hsUVVGUExFVkJRVVU0YjBJN1FVRklZaXhQUVVSVkxFVkJTMUJXTEZOQlRFOHNSVUZCVmp0QlFVOUJMRlZCUVVselR5eEhRVUZITEVkQlFVY3NTVUZCU1doUExDdEVRVUZLTEVOQlEwNW9jRUlzVVVGRVRTeEZRVU5KYVhCQ0xEQkVRVUZsTEVOQlFVTnZTeXhQUVVSd1FpeEZRVU0yUW5SNlFpeFhRVVEzUWl4RlFVTXdRM2R6UWl4SFFVUXhReXhwUmtGRmEwVXNRMEZCUTNoelFpeFhRVUZYTEVkQlFVY3NTMEZCWml4RlFVRnpRbTlpTEU5QlFYUkNMRU5CUVRoQ0xFTkJRVGxDTEVOQlJteEZMRVZCUVZZN1FVRkhRU3hWUVVGSk9HSXNUMEZCVHl4NVJFRkJhMFFzUTBGQlEyd3pRaXhYUVVGWExFZEJRVWNzUzBGQlppeEZRVUZ6UW05aUxFOUJRWFJDTEVOQlFUaENMRU5CUVRsQ0xFTkJRV3hFTEVOQlFWZzdRVUZEUVN4aFFVRlBMRXRCUVVzcllpeHJRa0ZCVEN4RFFVRjNRa1lzUjBGQmVFSXNSVUZCTmtKRExFOUJRVGRDTEVOQlFWQTdRVUZEU0R0QlFTOUdURHRCUVVGQk8wRkJRVUVzY1VOQmFVZHhRbW96UWl4UlFXcEhja0lzUlVGcFJ5dENhV0VzVTBGcVJ5OUNMRVZCYTBkSk8wRkJRVUVzVlVGRWMwTnRVQ3hQUVVOMFF5eDFSVUZFWjBRc1NVRkJTVGR2UWl3MlJFRkJTaXhGUVVOb1JEdEJRVU5KTEZWQlFVbG5jMElzUjBGQlJ5eEhRVUZITDAwc1RVRkJUU3hEUVVGRFF5eE5RVUZRTEVOQlFXTXNTVUZCU1d4R0xEWkVRVUZLTEVOQlFYbENUaXhUUVVGNlFpeEZRVUZ2UTJwaExGRkJRWEJETEVOQlFXUXNSVUZEVmp0QlFVTkpTU3hqUVVGTkxFVkJRVVVzUzBGQlMwRXNUVUZFYWtJN1FVRkZTVVVzWlVGQlR5eEZRVUZGT0c5Q08wRkJSbUlzVDBGRVZTeEZRVWxRVml4VFFVcFBMRVZCUVZZN1FVRk5RU3hWUVVGSmMwOHNSMEZCUnl4SFFVRkhMRWxCUVVsb1R5d3JSRUZCU2l4RFFVTk9hSEJDTEZGQlJFMHNSVUZEU1dsd1Fpd3dSRUZCWlN4RFFVRkRiMHNzVDBGRWNFSXNSVUZETmtJc1EwRkVOMElzUlVGRFowTTVSeXhIUVVSb1F5eEZRVVZPTEc5RlFVWk5MRU5CUVZZN1FVRkhRU3hWUVVGSk1Fc3NUMEZCVHl4SFFVRkhMRzFFUVVGa08wRkJRMEVzWVVGQlR5eExRVUZMUXl4clFrRkJUQ3hEUVVGM1FrWXNSMEZCZUVJc1JVRkJOa0pETEU5QlFUZENMRU5CUVZBN1FVRkRTRHRCUVRsSFREdEJRVUZCTzBGQlFVRXNkVU5CWjBoMVFrUXNSMEZvU0haQ0xFVkJaMGcwUWtNc1QwRm9TRFZDTEVWQmFVaEpPMEZCUTBrc1ZVRkJTU3hMUVVGTE1VSXNTVUZCVEN4RFFVRlZhRThzWVVGQlZpeEpRVUV5UWt3c2IwUkJRVk1zUTBGQlEwY3NVVUZCZWtNc1JVRkJiVVFzVDBGQlR5eEpRVUZKZDBJc01rUkJRVW9zUTBGQmNVSXNTMEZCY2tJc1JVRkJORUlzV1VGQk5VSXNRMEZCVUR0QlFVVnVSQ3hWUVVGSkxFdEJRVXN3VFN4SlFVRk1MRU5CUVZWd1VDeFhRVUZXTEVsQlFYbENXU3hyUkVGQlR5eERRVUZEUXl4SlFVRnlReXhGUVVFeVF5eFBRVUZQTEVsQlFVazJRaXd5UkVGQlNpeERRVUZ4UWl4TFFVRnlRaXhGUVVFMFFpeFZRVUUxUWl4RFFVRlFPMEZCUlRORExGZEJRVXN3VFN4SlFVRk1MRU5CUVZWd1VDeFhRVUZXTEVkQlFYZENXU3hyUkVGQlR5eERRVUZEYlVJc1YwRkJhRU03UVVGRFFTeFhRVUZMY1U0c1NVRkJUQ3hEUVVGVmJGQXNhMEpCUVZZc1IwRkJLMEl5VVN4SFFVRXZRanM3UVVGRFFTeFZRVUZKTEV0QlFVdDZRaXhKUVVGTUxFTkJRVlU1VFN4TFFVRldMRU5CUVdkQ2RVOHNSMEZCUnl4RFFVRkRNMGdzVDBGQmNFSXNRMEZCU2l4RlFVTkJPMEZCUTBrc1lVRkJTMnRITEVsQlFVd3NRMEZCVld4UUxHdENRVUZXTEVOQlFUWkNPRU1zU1VGQk4wSXNRMEZCYTBNNFRpeFBRVUZzUXp0QlFVTklPenRCUVVWRWVIcENMR05CUVZFc1EwRkJRME1zWVVGQlZDeERRVUYxUWl4SlFVRkpReXhYUVVGS0xFTkJRV2RDTEc5Q1FVRm9RaXhGUVVGelF6dEJRVUZEUXl4alFVRk5MRVZCUVVVc1MwRkJTeko0UWl4SlFVRk1MRU5CUVZWc1VEdEJRVUZ1UWl4UFFVRjBReXhEUVVGMlFqdEJRVU5CTEdGQlFVOHNTVUZCU1hkRExESkVRVUZLTEVOQlFYRkNMRWxCUVhKQ0xFVkJRVEpDTEcxQ1FVRXpRaXhEUVVGUU8wRkJRMGc3UVVFdlNFdzdRVUZCUVR0QlFVRkJMREJEUVdsSk1FSXhia0lzUTBGcVNURkNMRVZCYTBsSk8wRkJRMGtzWTBGQlVVRXNRMEZCUXl4RFFVRkRORTBzVTBGQlZqdEJRVVZKTEdGQlFVdHBUQ3h6UkVGQllTeERRVUZEUlN4eFFrRkJia0k3UVVGRFNTeGxRVUZMYVdVc05FSkJRVXdzUTBGQmEwTm9Na0lzUTBGQmJFTTdPMEZCUTBFN08wRkJRMG9zWVVGQlN6WllMSE5FUVVGaExFTkJRVU5KTEcxQ1FVRnVRanRCUVVOQkxHRkJRVXRLTEhORVFVRmhMRU5CUVVOTkxHOUNRVUZ1UWp0QlFVTkJMR0ZCUVV0T0xITkVRVUZoTEVOQlFVTlZMR3REUVVGdVFqdEJRVU5CTEdGQlFVdFdMSE5FUVVGaExFTkJRVU5STEhGQ1FVRnVRanRCUVVOQkxHRkJRVXRTTEhORVFVRmhMRU5CUVVOakxIVkNRVUZ1UWp0QlFVTkJMR0ZCUVV0a0xITkVRVUZoTEVOQlFVTlpMREpDUVVGdVFqdEJRVU5KTEdWQlFVdDNaQ3h6UWtGQlRDeERRVUUwUW1veVFpeERRVUUxUWpzN1FVRkRRVHM3UVVGRFNqdEJRVU5KTEdWQlFVdHBha0lzU1VGQlRDeERRVUZWTmtNc1NVRkJWaXcyUTBGQmIwUTViRUlzUTBGQlF5eERRVUZETkUwc1UwRkJkRVFzWlVGQmIwVTFUU3hEUVVGRExFTkJRVU5ITEVsQlFYUkZPenRCUVVOQk8wRkJabEk3UVVGcFFrZzdRVUZ3U2t3N1FVRkJRVHRCUVVGQkxHbEVRWE5LYVVOSUxFTkJkRXBxUXl4RlFYVktTVHRCUVVOSkxGVkJRVWxyY2tJc1owSkJRV2RDTEVkQlFVZHNja0lzUTBGQlF5eERRVUZEUnl4SlFVRkdMRU5CUVU5RExGVkJRVGxDTzBGQlEwRXNWVUZCU1RneFFpeHJRa0ZCYTBJc1IwRkJSeXhMUVVGTE9VSXNTVUZCVEN4RFFVRlZiRkFzYTBKQlFXNURPenRCUVVOQkxGVkJRVWtzUzBGQlMydFFMRWxCUVV3c1EwRkJWWEJRTEZkQlFWWXNTVUZCZVVKWkxHdEVRVUZQTEVOQlFVTnRRaXhYUVVGcVF5eEpRVUZuUkcxUUxHdENRVUZyUWl4RFFVRkRjRkFzVVVGQmJrVXNTVUZCSzBVc1EwRkJRMjlRTEd0Q1FVRnJRaXhEUVVGRGNETkNMRkZCUVhCQ0xFdEJRV2xEYjNOQ0xHZENRVUZ3U0N4RlFVTkJPMEZCUTBrc1lVRkJTMnBKTEVsQlFVd3NRMEZCVlRaRExFbEJRVllzWjBkQlFYVkhiMFlzWjBKQlFYWkhPenRCUVVOQk8wRkJRMGdzVDBGUVRDeERRVkZKT3pzN1FVRkZRV2RNTEhkQ1FVRnJRaXhEUVVGRE0wc3NVMEZCYmtJc1EwRkJOa0oyY2tJc1EwRkJReXhEUVVGRFVTeGxRVUZHTEVWQlFUZENMRVZCUVd0RVVpeERRVUZzUkN4RlFVRnhSQ3h0UTBGQmNrUXNSVUZXU2l4RFFWZEpPenRCUVVWQmMwTXNZMEZCVVN4RFFVRkRReXhoUVVGVUxFTkJRWFZDTEVsQlFVbERMRmRCUVVvc1EwRkJaMElzYjBKQlFXaENMRVZCUVhORE8wRkJRVU5ETEdOQlFVMHNSVUZCUlN4TFFVRkxNbmhDTEVsQlFVd3NRMEZCVld4UU8wRkJRVzVDTEU5QlFYUkRMRU5CUVhaQ08wRkJRMGc3UVVGeVMwdzdRVUZCUVR0QlFVRkJMREpEUVhWTE1rSnNiRUlzUTBGMlN6TkNMRVZCZDB0Sk8wRkJRMGtzVlVGQlNXdHlRaXhuUWtGQlowSXNSMEZCUjJ4eVFpeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUME1zVlVGQk9VSTdRVUZEUVN4VlFVRkpPREZDTEd0Q1FVRnJRaXhIUVVGSExFdEJRVXM1UWl4SlFVRk1MRU5CUVZWc1VDeHJRa0ZCYmtNN08wRkJRMEVzVlVGQlNTeExRVUZMYTFBc1NVRkJUQ3hEUVVGVmNGQXNWMEZCVml4SlFVRjVRbGtzYTBSQlFVOHNRMEZCUTIxQ0xGZEJRV3BETEVsQlFXZEViVkFzYTBKQlFXdENMRU5CUVVOd1VDeFJRVUZ1UlN4SlFVRXJSU3hEUVVGRGIxQXNhMEpCUVd0Q0xFTkJRVU53TTBJc1VVRkJjRUlzUzBGQmFVTnZjMElzWjBKQlFYQklMRVZCUTBFN1FVRkRTU3hoUVVGTGFra3NTVUZCVEN4RFFVRlZOa01zU1VGQlZpeDVSa0ZCWjBkdlJpeG5Ra0ZCYUVjN08wRkJRMEU3UVVGRFNDeFBRVkJNTEVOQlVVazdPenRCUVVWQlowd3NkMEpCUVd0Q0xFTkJRVU16U3l4VFFVRnVRaXhEUVVFMlFuWnlRaXhEUVVGRExFTkJRVU5STEdWQlFVWXNSVUZCTjBJc1JVRkJhMFJTTEVOQlFXeEVMRVZCUVhGRUxEUkNRVUZ5UkN4RlFWWktMRU5CVjBrN08wRkJSVUZ6UXl4alFVRlJMRU5CUVVORExHRkJRVlFzUTBGQmRVSXNTVUZCU1VNc1YwRkJTaXhEUVVGblFpeHZRa0ZCYUVJc1JVRkJjME03UVVGQlEwTXNZMEZCVFN4RlFVRkZMRXRCUVVzeWVFSXNTVUZCVEN4RFFVRlZiRkE3UVVGQmJrSXNUMEZCZEVNc1EwRkJka0k3UVVGRFNEdEJRWFJNVER0QlFVRkJPMEZCUVVFc2JVTkJkMHd3UW5oWkxGTkJlRXd4UWl4RlFYbE1TVHRCUVVOSkxHRkJRVTlCTEZOQlFWTXNRMEZCUTNsd1FpeFhRVUZXTEVOQlFYTkNMRk5CUVhSQ0xFVkJRV2RETEVOQlFXaERMRTFCUVhWRExFTkJRWFpETEVsQlEwbDZjRUlzVTBGQlV5eEpRVUZKYlV3c2MwUkJRV0VzUTBGQlEyTXNkVUpCUkM5Q0xFbEJSVWxxVFN4VFFVRlRMRWxCUVVsdFRDeHpSRUZCWVN4RFFVRkRZU3h6UWtGR0wwSXNTVUZIU1doTkxGTkJRVk1zU1VGQlNXMU1MSE5FUVVGaExFTkJRVU5ETEc5Q1FVZ3ZRaXhKUVVsSmNFd3NVMEZCVXl4SlFVRkpiVXdzYzBSQlFXRXNRMEZCUTBVc2NVSkJTblJETzBGQlMwZzdRVUV2VEV3N08wRkJRVUU3UVVGQlFTeEpPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTmlRVHRCUVVOQk8wRkJSVThzU1VGQlRURk5MSEZDUVVGaU8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUVzWjBOQlIwazdRVUZEU1N4VlFVRkphRTBzU1VGQlNTeEhRVUZITEVWQlFWZzdRVUZGUVN4aFFVRlBMRWxCUVVsTkxHbEVRVUZLTEVOQlFWbERMR2RGUVVGbExFTkJRVU5ETEVWQlFXaENMRU5CUVcxQ0xFOUJRVzVDTEVOQlFWb3NSVUZCZVVORExHZEVRVUZOTEVOQlFVTjFUQ3h4UWtGQmFFUXNSVUZCZFVWb1RTeEpRVUYyUlN4RlFVRTJSU3hKUVVFM1JTeERRVUZRTzBGQlEwZzdRVUZRVERzN1FVRkJRVHRCUVVGQk8wRkJWVThzU1VGQlRXbE5MSE5DUVVGaU8wRkJRVUU3UVVGQlFUdEJRVVZKTEd0RFFVRlpkRXdzUTBGQldpeEZRVU5CTzBGQlFVRTdPMEZCUTBrc1UwRkJTME1zUlVGQlRDeEhRVUZWUkN4RFFVRldPMEZCUTBnN08wRkJURXc3UVVGQlFUdEJRVUZCTEdkRFFVOUpPMEZCUTBrc1lVRkJUeXhMUVVGTFF5eEZRVUZNTEVOQlFWRkZMRWxCUVZJc1EwRkJZWGQ0UWl4TlFVRndRanRCUVVOSU8wRkJWRXc3UVVGQlFUdEJRVUZCTEhORFFWZEpPMEZCUTBrc1lVRkJUM1pRTEZGQlFWRXNRMEZCUXl4TFFVRkxibWxDTEVWQlFVd3NRMEZCVVVVc1NVRkJVaXhEUVVGaGFUSkNMR0ZCUVdRc1JVRkJORUlzUlVGQk5VSXNRMEZCWmp0QlFVTklPMEZCWWt3N1FVRkJRVHRCUVVGQkxHbERRV1ZKTzBGQlEwa3NZVUZCVHl4RFFVRkRMRU5CUVVNc1MwRkJTMjR5UWl4RlFVRk1MRU5CUVZGRkxFbEJRVklzUTBGQllXc3lRaXhSUVVGMFFqdEJRVU5JTzBGQmFrSk1PenRCUVVGQk8wRkJRVUU3UVVGdlFrOHNTVUZCVFVNc1pVRkJZaXhIUVVWSkxIbENRVUZaZERKQ0xFTkJRVm9zUlVGRFFUdEJRVUZCT3p0QlFVTkpMRTlCUVV0MU1rSXNXVUZCVEN4SFFVRnZRbTVWTEZGQlFWRXNRMEZCUTNCcFFpeERRVUZETEVOQlFVTkhMRWxCUVVZc1EwRkJUMmt5UWl4aFFVRlNMRVZCUVhOQ0xFVkJRWFJDTEVOQlFUVkNPMEZCUTBnc1EwRk1UQ3hET3pzN096czdPenM3T3p0QlEycERRU3hsSWl3aVptbHNaU0k2SW5Od2FTMWpiR2xsYm5RdGFuTXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJb1puVnVZM1JwYjI0Z2QyVmljR0ZqYTFWdWFYWmxjbk5oYkUxdlpIVnNaVVJsWm1sdWFYUnBiMjRvY205dmRDd2dabUZqZEc5eWVTa2dlMXh1WEhScFppaDBlWEJsYjJZZ1pYaHdiM0owY3lBOVBUMGdKMjlpYW1WamRDY2dKaVlnZEhsd1pXOW1JRzF2WkhWc1pTQTlQVDBnSjI5aWFtVmpkQ2NwWEc1Y2RGeDBiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1ZV04wYjNKNUtDazdYRzVjZEdWc2MyVWdhV1lvZEhsd1pXOW1JR1JsWm1sdVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQmtaV1pwYm1VdVlXMWtLVnh1WEhSY2RHUmxabWx1WlNoYlhTd2dabUZqZEc5eWVTazdYRzVjZEdWc2MyVWdhV1lvZEhsd1pXOW1JR1Y0Y0c5eWRITWdQVDA5SUNkdlltcGxZM1FuS1Z4dVhIUmNkR1Y0Y0c5eWRITmJYQ0p6Y0drdFkyeHBaVzUwTFdwelhDSmRJRDBnWm1GamRHOXllU2dwTzF4dVhIUmxiSE5sWEc1Y2RGeDBjbTl2ZEZ0Y0luTndhUzFqYkdsbGJuUXRhbk5jSWwwZ1BTQm1ZV04wYjNKNUtDazdYRzU5S1NoM2FXNWtiM2NzSUdaMWJtTjBhVzl1S0NrZ2UxeHVjbVYwZFhKdUlDSXNJaUJjZEdaMWJtTjBhVzl1SUdodmRFUnBjM0J2YzJWRGFIVnVheWhqYUhWdWEwbGtLU0I3WEc0Z1hIUmNkR1JsYkdWMFpTQnBibk4wWVd4c1pXUkRhSFZ1YTNOYlkyaDFibXRKWkYwN1hHNGdYSFI5WEc0Z1hIUjJZWElnY0dGeVpXNTBTRzkwVlhCa1lYUmxRMkZzYkdKaFkyc2dQU0IzYVc1a2IzZGJYQ0ozWldKd1lXTnJTRzkwVlhCa1lYUmxjM0JwWDJOc2FXVnVkRjlxYzF3aVhUdGNiaUJjZEhkcGJtUnZkMXRjSW5kbFluQmhZMnRJYjNSVmNHUmhkR1Z6Y0dsZlkyeHBaVzUwWDJwelhDSmRJRDBnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnWEhSbWRXNWpkR2x2YmlCM1pXSndZV05yU0c5MFZYQmtZWFJsUTJGc2JHSmhZMnNvWTJoMWJtdEpaQ3dnYlc5eVpVMXZaSFZzWlhNcElIdGNiaUJjZEZ4MGFHOTBRV1JrVlhCa1lYUmxRMmgxYm1zb1kyaDFibXRKWkN3Z2JXOXlaVTF2WkhWc1pYTXBPMXh1SUZ4MFhIUnBaaUFvY0dGeVpXNTBTRzkwVlhCa1lYUmxRMkZzYkdKaFkyc3BJSEJoY21WdWRFaHZkRlZ3WkdGMFpVTmhiR3hpWVdOcktHTm9kVzVyU1dRc0lHMXZjbVZOYjJSMWJHVnpLVHRjYmlCY2RIMGdPMXh1WEc0Z1hIUXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdibTh0ZFc1MWMyVmtMWFpoY25OY2JpQmNkR1oxYm1OMGFXOXVJR2h2ZEVSdmQyNXNiMkZrVlhCa1lYUmxRMmgxYm1zb1kyaDFibXRKWkNrZ2UxeHVJRngwWEhSMllYSWdjMk55YVhCMElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENoY0luTmpjbWx3ZEZ3aUtUdGNiaUJjZEZ4MGMyTnlhWEIwTG1Ob1lYSnpaWFFnUFNCY0luVjBaaTA0WENJN1hHNGdYSFJjZEhOamNtbHdkQzV6Y21NZ1BTQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbkFnS3lCY0lsd2lJQ3NnWTJoMWJtdEpaQ0FySUZ3aUxsd2lJQ3NnYUc5MFEzVnljbVZ1ZEVoaGMyZ2dLeUJjSWk1b2IzUXRkWEJrWVhSbExtcHpYQ0k3WEc0Z1hIUmNkR2xtSUNodWRXeHNLU0J6WTNKcGNIUXVZM0p2YzNOUGNtbG5hVzRnUFNCdWRXeHNPMXh1SUZ4MFhIUmtiMk4xYldWdWRDNW9aV0ZrTG1Gd2NHVnVaRU5vYVd4a0tITmpjbWx3ZENrN1hHNGdYSFI5WEc1Y2JpQmNkQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0J1YnkxMWJuVnpaV1F0ZG1GeWMxeHVJRngwWm5WdVkzUnBiMjRnYUc5MFJHOTNibXh2WVdSTllXNXBabVZ6ZENoeVpYRjFaWE4wVkdsdFpXOTFkQ2tnZTF4dUlGeDBYSFJ5WlhGMVpYTjBWR2x0Wlc5MWRDQTlJSEpsY1hWbGMzUlVhVzFsYjNWMElIeDhJREV3TURBd08xeHVJRngwWEhSeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdYSFJjZEZ4MGFXWWdLSFI1Y0dWdlppQllUVXhJZEhSd1VtVnhkV1Z6ZENBOVBUMGdYQ0oxYm1SbFptbHVaV1JjSWlrZ2UxeHVJRngwWEhSY2RGeDBjbVYwZFhKdUlISmxhbVZqZENodVpYY2dSWEp5YjNJb1hDSk9ieUJpY205M2MyVnlJSE4xY0hCdmNuUmNJaWtwTzF4dUlGeDBYSFJjZEgxY2JpQmNkRngwWEhSMGNua2dlMXh1SUZ4MFhIUmNkRngwZG1GeUlISmxjWFZsYzNRZ1BTQnVaWGNnV0UxTVNIUjBjRkpsY1hWbGMzUW9LVHRjYmlCY2RGeDBYSFJjZEhaaGNpQnlaWEYxWlhOMFVHRjBhQ0E5SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWNDQXJJRndpWENJZ0t5Qm9iM1JEZFhKeVpXNTBTR0Z6YUNBcklGd2lMbWh2ZEMxMWNHUmhkR1V1YW5OdmJsd2lPMXh1SUZ4MFhIUmNkRngwY21WeGRXVnpkQzV2Y0dWdUtGd2lSMFZVWENJc0lISmxjWFZsYzNSUVlYUm9MQ0IwY25WbEtUdGNiaUJjZEZ4MFhIUmNkSEpsY1hWbGMzUXVkR2x0Wlc5MWRDQTlJSEpsY1hWbGMzUlVhVzFsYjNWME8xeHVJRngwWEhSY2RGeDBjbVZ4ZFdWemRDNXpaVzVrS0c1MWJHd3BPMXh1SUZ4MFhIUmNkSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJRngwWEhSY2RGeDBjbVYwZFhKdUlISmxhbVZqZENobGNuSXBPMXh1SUZ4MFhIUmNkSDFjYmlCY2RGeDBYSFJ5WlhGMVpYTjBMbTl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU0E5SUdaMWJtTjBhVzl1S0NrZ2UxeHVJRngwWEhSY2RGeDBhV1lnS0hKbGNYVmxjM1F1Y21WaFpIbFRkR0YwWlNBaFBUMGdOQ2tnY21WMGRYSnVPMXh1SUZ4MFhIUmNkRngwYVdZZ0tISmxjWFZsYzNRdWMzUmhkSFZ6SUQwOVBTQXdLU0I3WEc0Z1hIUmNkRngwWEhSY2RDOHZJSFJwYldWdmRYUmNiaUJjZEZ4MFhIUmNkRngwY21WcVpXTjBLRnh1SUZ4MFhIUmNkRngwWEhSY2RHNWxkeUJGY25KdmNpaGNJazFoYm1sbVpYTjBJSEpsY1hWbGMzUWdkRzhnWENJZ0t5QnlaWEYxWlhOMFVHRjBhQ0FySUZ3aUlIUnBiV1ZrSUc5MWRDNWNJaWxjYmlCY2RGeDBYSFJjZEZ4MEtUdGNiaUJjZEZ4MFhIUmNkSDBnWld4elpTQnBaaUFvY21WeGRXVnpkQzV6ZEdGMGRYTWdQVDA5SURRd05Da2dlMXh1SUZ4MFhIUmNkRngwWEhRdkx5QnVieUIxY0dSaGRHVWdZWFpoYVd4aFlteGxYRzRnWEhSY2RGeDBYSFJjZEhKbGMyOXNkbVVvS1R0Y2JpQmNkRngwWEhSY2RIMGdaV3h6WlNCcFppQW9jbVZ4ZFdWemRDNXpkR0YwZFhNZ0lUMDlJREl3TUNBbUppQnlaWEYxWlhOMExuTjBZWFIxY3lBaFBUMGdNekEwS1NCN1hHNGdYSFJjZEZ4MFhIUmNkQzh2SUc5MGFHVnlJR1poYVd4MWNtVmNiaUJjZEZ4MFhIUmNkRngwY21WcVpXTjBLRzVsZHlCRmNuSnZjaWhjSWsxaGJtbG1aWE4wSUhKbGNYVmxjM1FnZEc4Z1hDSWdLeUJ5WlhGMVpYTjBVR0YwYUNBcklGd2lJR1poYVd4bFpDNWNJaWtwTzF4dUlGeDBYSFJjZEZ4MGZTQmxiSE5sSUh0Y2JpQmNkRngwWEhSY2RGeDBMeThnYzNWalkyVnpjMXh1SUZ4MFhIUmNkRngwWEhSMGNua2dlMXh1SUZ4MFhIUmNkRngwWEhSY2RIWmhjaUIxY0dSaGRHVWdQU0JLVTA5T0xuQmhjbk5sS0hKbGNYVmxjM1F1Y21WemNHOXVjMlZVWlhoMEtUdGNiaUJjZEZ4MFhIUmNkRngwZlNCallYUmphQ0FvWlNrZ2UxeHVJRngwWEhSY2RGeDBYSFJjZEhKbGFtVmpkQ2hsS1R0Y2JpQmNkRngwWEhSY2RGeDBYSFJ5WlhSMWNtNDdYRzRnWEhSY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RGeDBjbVZ6YjJ4MlpTaDFjR1JoZEdVcE8xeHVJRngwWEhSY2RGeDBmVnh1SUZ4MFhIUmNkSDA3WEc0Z1hIUmNkSDBwTzF4dUlGeDBmVnh1WEc0Z1hIUjJZWElnYUc5MFFYQndiSGxQYmxWd1pHRjBaU0E5SUhSeWRXVTdYRzRnWEhRdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRkVzUxYzJWa0xYWmhjbk5jYmlCY2RIWmhjaUJvYjNSRGRYSnlaVzUwU0dGemFDQTlJRndpTWpOaU1UTTROR1E1TVRFd05qUXpZemMxTVRWY0lqdGNiaUJjZEhaaGNpQm9iM1JTWlhGMVpYTjBWR2x0Wlc5MWRDQTlJREV3TURBd08xeHVJRngwZG1GeUlHaHZkRU4xY25KbGJuUk5iMlIxYkdWRVlYUmhJRDBnZTMwN1hHNGdYSFIyWVhJZ2FHOTBRM1Z5Y21WdWRFTm9hV3hrVFc5a2RXeGxPMXh1SUZ4MEx5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMWFZ1ZFhObFpDMTJZWEp6WEc0Z1hIUjJZWElnYUc5MFEzVnljbVZ1ZEZCaGNtVnVkSE1nUFNCYlhUdGNiaUJjZEM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCdWJ5MTFiblZ6WldRdGRtRnljMXh1SUZ4MGRtRnlJR2h2ZEVOMWNuSmxiblJRWVhKbGJuUnpWR1Z0Y0NBOUlGdGRPMXh1WEc0Z1hIUXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdibTh0ZFc1MWMyVmtMWFpoY25OY2JpQmNkR1oxYm1OMGFXOXVJR2h2ZEVOeVpXRjBaVkpsY1hWcGNtVW9iVzlrZFd4bFNXUXBJSHRjYmlCY2RGeDBkbUZ5SUcxbElEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHRiMlIxYkdWSlpGMDdYRzRnWEhSY2RHbG1JQ2doYldVcElISmxkSFZ5YmlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5Zk8xeHVJRngwWEhSMllYSWdabTRnUFNCbWRXNWpkR2x2YmloeVpYRjFaWE4wS1NCN1hHNGdYSFJjZEZ4MGFXWWdLRzFsTG1odmRDNWhZM1JwZG1VcElIdGNiaUJjZEZ4MFhIUmNkR2xtSUNocGJuTjBZV3hzWldSTmIyUjFiR1Z6VzNKbGNYVmxjM1JkS1NCN1hHNGdYSFJjZEZ4MFhIUmNkR2xtSUNocGJuTjBZV3hzWldSTmIyUjFiR1Z6VzNKbGNYVmxjM1JkTG5CaGNtVnVkSE11YVc1a1pYaFBaaWh0YjJSMWJHVkpaQ2tnUFQwOUlDMHhLU0I3WEc0Z1hIUmNkRngwWEhSY2RGeDBhVzV6ZEdGc2JHVmtUVzlrZFd4bGMxdHlaWEYxWlhOMFhTNXdZWEpsYm5SekxuQjFjMmdvYlc5a2RXeGxTV1FwTzF4dUlGeDBYSFJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBYSFI5SUdWc2MyVWdlMXh1SUZ4MFhIUmNkRngwWEhSb2IzUkRkWEp5Wlc1MFVHRnlaVzUwY3lBOUlGdHRiMlIxYkdWSlpGMDdYRzRnWEhSY2RGeDBYSFJjZEdodmRFTjFjbkpsYm5SRGFHbHNaRTF2WkhWc1pTQTlJSEpsY1hWbGMzUTdYRzRnWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwWEhScFppQW9iV1V1WTJocGJHUnlaVzR1YVc1a1pYaFBaaWh5WlhGMVpYTjBLU0E5UFQwZ0xURXBJSHRjYmlCY2RGeDBYSFJjZEZ4MGJXVXVZMmhwYkdSeVpXNHVjSFZ6YUNoeVpYRjFaWE4wS1R0Y2JpQmNkRngwWEhSY2RIMWNiaUJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVJRngwWEhSY2RGeDBZMjl1YzI5c1pTNTNZWEp1S0Z4dUlGeDBYSFJjZEZ4MFhIUmNJbHRJVFZKZElIVnVaWGh3WldOMFpXUWdjbVZ4ZFdseVpTaGNJaUFyWEc0Z1hIUmNkRngwWEhSY2RGeDBjbVZ4ZFdWemRDQXJYRzRnWEhSY2RGeDBYSFJjZEZ4MFhDSXBJR1p5YjIwZ1pHbHpjRzl6WldRZ2JXOWtkV3hsSUZ3aUlDdGNiaUJjZEZ4MFhIUmNkRngwWEhSdGIyUjFiR1ZKWkZ4dUlGeDBYSFJjZEZ4MEtUdGNiaUJjZEZ4MFhIUmNkR2h2ZEVOMWNuSmxiblJRWVhKbGJuUnpJRDBnVzEwN1hHNGdYSFJjZEZ4MGZWeHVJRngwWEhSY2RISmxkSFZ5YmlCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktISmxjWFZsYzNRcE8xeHVJRngwWEhSOU8xeHVJRngwWEhSMllYSWdUMkpxWldOMFJtRmpkRzl5ZVNBOUlHWjFibU4wYVc5dUlFOWlhbVZqZEVaaFkzUnZjbmtvYm1GdFpTa2dlMXh1SUZ4MFhIUmNkSEpsZEhWeWJpQjdYRzRnWEhSY2RGeDBYSFJqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzWEc0Z1hIUmNkRngwWEhSbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dUlGeDBYSFJjZEZ4MFoyVjBPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQmNkRngwWEhSY2RGeDBjbVYwZFhKdUlGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOWJibUZ0WlYwN1hHNGdYSFJjZEZ4MFhIUjlMRnh1SUZ4MFhIUmNkRngwYzJWME9pQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJRngwWEhSY2RGeDBYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmVzI1aGJXVmRJRDBnZG1Gc2RXVTdYRzRnWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwZlR0Y2JpQmNkRngwZlR0Y2JpQmNkRngwWm05eUlDaDJZWElnYm1GdFpTQnBiaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS1NCN1hHNGdYSFJjZEZ4MGFXWWdLRnh1SUZ4MFhIUmNkRngwVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0Y5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4c0lHNWhiV1VwSUNZbVhHNGdYSFJjZEZ4MFhIUnVZVzFsSUNFOVBTQmNJbVZjSWlBbUpseHVJRngwWEhSY2RGeDBibUZ0WlNBaFBUMGdYQ0owWENKY2JpQmNkRngwWEhRcElIdGNiaUJjZEZ4MFhIUmNkRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobWJpd2dibUZ0WlN3Z1QySnFaV04wUm1GamRHOXllU2h1WVcxbEtTazdYRzRnWEhSY2RGeDBmVnh1SUZ4MFhIUjlYRzRnWEhSY2RHWnVMbVVnUFNCbWRXNWpkR2x2YmloamFIVnVhMGxrS1NCN1hHNGdYSFJjZEZ4MGFXWWdLR2h2ZEZOMFlYUjFjeUE5UFQwZ1hDSnlaV0ZrZVZ3aUtTQm9iM1JUWlhSVGRHRjBkWE1vWENKd2NtVndZWEpsWENJcE8xeHVJRngwWEhSY2RHaHZkRU5vZFc1cmMweHZZV1JwYm1jckt6dGNiaUJjZEZ4MFhIUnlaWFIxY200Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NWxLR05vZFc1clNXUXBMblJvWlc0b1ptbHVhWE5vUTJoMWJtdE1iMkZrYVc1bkxDQm1kVzVqZEdsdmJpaGxjbklwSUh0Y2JpQmNkRngwWEhSY2RHWnBibWx6YUVOb2RXNXJURzloWkdsdVp5Z3BPMXh1SUZ4MFhIUmNkRngwZEdoeWIzY2daWEp5TzF4dUlGeDBYSFJjZEgwcE8xeHVYRzRnWEhSY2RGeDBablZ1WTNScGIyNGdabWx1YVhOb1EyaDFibXRNYjJGa2FXNW5LQ2tnZTF4dUlGeDBYSFJjZEZ4MGFHOTBRMmgxYm10elRHOWhaR2x1WnkwdE8xeHVJRngwWEhSY2RGeDBhV1lnS0dodmRGTjBZWFIxY3lBOVBUMGdYQ0p3Y21Wd1lYSmxYQ0lwSUh0Y2JpQmNkRngwWEhSY2RGeDBhV1lnS0NGb2IzUlhZV2wwYVc1blJtbHNaWE5OWVhCYlkyaDFibXRKWkYwcElIdGNiaUJjZEZ4MFhIUmNkRngwWEhSb2IzUkZibk4xY21WVmNHUmhkR1ZEYUhWdWF5aGphSFZ1YTBsa0tUdGNiaUJjZEZ4MFhIUmNkRngwZlZ4dUlGeDBYSFJjZEZ4MFhIUnBaaUFvYUc5MFEyaDFibXR6VEc5aFpHbHVaeUE5UFQwZ01DQW1KaUJvYjNSWFlXbDBhVzVuUm1sc1pYTWdQVDA5SURBcElIdGNiaUJjZEZ4MFhIUmNkRngwWEhSb2IzUlZjR1JoZEdWRWIzZHViRzloWkdWa0tDazdYRzRnWEhSY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RIMWNiaUJjZEZ4MFhIUjlYRzRnWEhSY2RIMDdYRzRnWEhSY2RHWnVMblFnUFNCbWRXNWpkR2x2YmloMllXeDFaU3dnYlc5a1pTa2dlMXh1SUZ4MFhIUmNkR2xtSUNodGIyUmxJQ1lnTVNrZ2RtRnNkV1VnUFNCbWJpaDJZV3gxWlNrN1hHNGdYSFJjZEZ4MGNtVjBkWEp1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWRDaDJZV3gxWlN3Z2JXOWtaU0FtSUg0eEtUdGNiaUJjZEZ4MGZUdGNiaUJjZEZ4MGNtVjBkWEp1SUdadU8xeHVJRngwZlZ4dVhHNGdYSFF2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnYm04dGRXNTFjMlZrTFhaaGNuTmNiaUJjZEdaMWJtTjBhVzl1SUdodmRFTnlaV0YwWlUxdlpIVnNaU2h0YjJSMWJHVkpaQ2tnZTF4dUlGeDBYSFIyWVhJZ2FHOTBJRDBnZTF4dUlGeDBYSFJjZEM4dklIQnlhWFpoZEdVZ2MzUjFabVpjYmlCY2RGeDBYSFJmWVdOalpYQjBaV1JFWlhCbGJtUmxibU5wWlhNNklIdDlMRnh1SUZ4MFhIUmNkRjlrWldOc2FXNWxaRVJsY0dWdVpHVnVZMmxsY3pvZ2UzMHNYRzRnWEhSY2RGeDBYM05sYkdaQlkyTmxjSFJsWkRvZ1ptRnNjMlVzWEc0Z1hIUmNkRngwWDNObGJHWkVaV05zYVc1bFpEb2dabUZzYzJVc1hHNGdYSFJjZEZ4MFgyUnBjM0J2YzJWSVlXNWtiR1Z5Y3pvZ1cxMHNYRzRnWEhSY2RGeDBYMjFoYVc0NklHaHZkRU4xY25KbGJuUkRhR2xzWkUxdlpIVnNaU0FoUFQwZ2JXOWtkV3hsU1dRc1hHNWNiaUJjZEZ4MFhIUXZMeUJOYjJSMWJHVWdRVkJKWEc0Z1hIUmNkRngwWVdOMGFYWmxPaUIwY25WbExGeHVJRngwWEhSY2RHRmpZMlZ3ZERvZ1puVnVZM1JwYjI0b1pHVndMQ0JqWVd4c1ltRmpheWtnZTF4dUlGeDBYSFJjZEZ4MGFXWWdLR1JsY0NBOVBUMGdkVzVrWldacGJtVmtLU0JvYjNRdVgzTmxiR1pCWTJObGNIUmxaQ0E5SUhSeWRXVTdYRzRnWEhSY2RGeDBYSFJsYkhObElHbG1JQ2gwZVhCbGIyWWdaR1Z3SUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lwSUdodmRDNWZjMlZzWmtGalkyVndkR1ZrSUQwZ1pHVndPMXh1SUZ4MFhIUmNkRngwWld4elpTQnBaaUFvZEhsd1pXOW1JR1JsY0NBOVBUMGdYQ0p2WW1wbFkzUmNJaWxjYmlCY2RGeDBYSFJjZEZ4MFptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQmtaWEF1YkdWdVozUm9PeUJwS3lzcFhHNGdYSFJjZEZ4MFhIUmNkRngwYUc5MExsOWhZMk5sY0hSbFpFUmxjR1Z1WkdWdVkybGxjMXRrWlhCYmFWMWRJRDBnWTJGc2JHSmhZMnNnZkh3Z1puVnVZM1JwYjI0b0tTQjdmVHRjYmlCY2RGeDBYSFJjZEdWc2MyVWdhRzkwTGw5aFkyTmxjSFJsWkVSbGNHVnVaR1Z1WTJsbGMxdGtaWEJkSUQwZ1kyRnNiR0poWTJzZ2ZId2dablZ1WTNScGIyNG9LU0I3ZlR0Y2JpQmNkRngwWEhSOUxGeHVJRngwWEhSY2RHUmxZMnhwYm1VNklHWjFibU4wYVc5dUtHUmxjQ2tnZTF4dUlGeDBYSFJjZEZ4MGFXWWdLR1JsY0NBOVBUMGdkVzVrWldacGJtVmtLU0JvYjNRdVgzTmxiR1pFWldOc2FXNWxaQ0E5SUhSeWRXVTdYRzRnWEhSY2RGeDBYSFJsYkhObElHbG1JQ2gwZVhCbGIyWWdaR1Z3SUQwOVBTQmNJbTlpYW1WamRGd2lLVnh1SUZ4MFhIUmNkRngwWEhSbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHUmxjQzVzWlc1bmRHZzdJR2tyS3lsY2JpQmNkRngwWEhSY2RGeDBYSFJvYjNRdVgyUmxZMnhwYm1Wa1JHVndaVzVrWlc1amFXVnpXMlJsY0Z0cFhWMGdQU0IwY25WbE8xeHVJRngwWEhSY2RGeDBaV3h6WlNCb2IzUXVYMlJsWTJ4cGJtVmtSR1Z3Wlc1a1pXNWphV1Z6VzJSbGNGMGdQU0IwY25WbE8xeHVJRngwWEhSY2RIMHNYRzRnWEhSY2RGeDBaR2x6Y0c5elpUb2dablZ1WTNScGIyNG9ZMkZzYkdKaFkyc3BJSHRjYmlCY2RGeDBYSFJjZEdodmRDNWZaR2x6Y0c5elpVaGhibVJzWlhKekxuQjFjMmdvWTJGc2JHSmhZMnNwTzF4dUlGeDBYSFJjZEgwc1hHNGdYSFJjZEZ4MFlXUmtSR2x6Y0c5elpVaGhibVJzWlhJNklHWjFibU4wYVc5dUtHTmhiR3hpWVdOcktTQjdYRzRnWEhSY2RGeDBYSFJvYjNRdVgyUnBjM0J2YzJWSVlXNWtiR1Z5Y3k1d2RYTm9LR05oYkd4aVlXTnJLVHRjYmlCY2RGeDBYSFI5TEZ4dUlGeDBYSFJjZEhKbGJXOTJaVVJwYzNCdmMyVklZVzVrYkdWeU9pQm1kVzVqZEdsdmJpaGpZV3hzWW1GamF5a2dlMXh1SUZ4MFhIUmNkRngwZG1GeUlHbGtlQ0E5SUdodmRDNWZaR2x6Y0c5elpVaGhibVJzWlhKekxtbHVaR1Y0VDJZb1kyRnNiR0poWTJzcE8xeHVJRngwWEhSY2RGeDBhV1lnS0dsa2VDQStQU0F3S1NCb2IzUXVYMlJwYzNCdmMyVklZVzVrYkdWeWN5NXpjR3hwWTJVb2FXUjRMQ0F4S1R0Y2JpQmNkRngwWEhSOUxGeHVYRzRnWEhSY2RGeDBMeThnVFdGdVlXZGxiV1Z1ZENCQlVFbGNiaUJjZEZ4MFhIUmphR1ZqYXpvZ2FHOTBRMmhsWTJzc1hHNGdYSFJjZEZ4MFlYQndiSGs2SUdodmRFRndjR3g1TEZ4dUlGeDBYSFJjZEhOMFlYUjFjem9nWm5WdVkzUnBiMjRvYkNrZ2UxeHVJRngwWEhSY2RGeDBhV1lnS0NGc0tTQnlaWFIxY200Z2FHOTBVM1JoZEhWek8xeHVJRngwWEhSY2RGeDBhRzkwVTNSaGRIVnpTR0Z1Wkd4bGNuTXVjSFZ6YUNoc0tUdGNiaUJjZEZ4MFhIUjlMRnh1SUZ4MFhIUmNkR0ZrWkZOMFlYUjFjMGhoYm1Sc1pYSTZJR1oxYm1OMGFXOXVLR3dwSUh0Y2JpQmNkRngwWEhSY2RHaHZkRk4wWVhSMWMwaGhibVJzWlhKekxuQjFjMmdvYkNrN1hHNGdYSFJjZEZ4MGZTeGNiaUJjZEZ4MFhIUnlaVzF2ZG1WVGRHRjBkWE5JWVc1a2JHVnlPaUJtZFc1amRHbHZiaWhzS1NCN1hHNGdYSFJjZEZ4MFhIUjJZWElnYVdSNElEMGdhRzkwVTNSaGRIVnpTR0Z1Wkd4bGNuTXVhVzVrWlhoUFppaHNLVHRjYmlCY2RGeDBYSFJjZEdsbUlDaHBaSGdnUGowZ01Da2dhRzkwVTNSaGRIVnpTR0Z1Wkd4bGNuTXVjM0JzYVdObEtHbGtlQ3dnTVNrN1hHNGdYSFJjZEZ4MGZTeGNibHh1SUZ4MFhIUmNkQzh2YVc1b1pYSnBkQ0JtY205dElIQnlaWFpwYjNWeklHUnBjM0J2YzJVZ1kyRnNiRnh1SUZ4MFhIUmNkR1JoZEdFNklHaHZkRU4xY25KbGJuUk5iMlIxYkdWRVlYUmhXMjF2WkhWc1pVbGtYVnh1SUZ4MFhIUjlPMXh1SUZ4MFhIUm9iM1JEZFhKeVpXNTBRMmhwYkdSTmIyUjFiR1VnUFNCMWJtUmxabWx1WldRN1hHNGdYSFJjZEhKbGRIVnliaUJvYjNRN1hHNGdYSFI5WEc1Y2JpQmNkSFpoY2lCb2IzUlRkR0YwZFhOSVlXNWtiR1Z5Y3lBOUlGdGRPMXh1SUZ4MGRtRnlJR2h2ZEZOMFlYUjFjeUE5SUZ3aWFXUnNaVndpTzF4dVhHNGdYSFJtZFc1amRHbHZiaUJvYjNSVFpYUlRkR0YwZFhNb2JtVjNVM1JoZEhWektTQjdYRzRnWEhSY2RHaHZkRk4wWVhSMWN5QTlJRzVsZDFOMFlYUjFjenRjYmlCY2RGeDBabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JvYjNSVGRHRjBkWE5JWVc1a2JHVnljeTVzWlc1bmRHZzdJR2tyS3lsY2JpQmNkRngwWEhSb2IzUlRkR0YwZFhOSVlXNWtiR1Z5YzF0cFhTNWpZV3hzS0c1MWJHd3NJRzVsZDFOMFlYUjFjeWs3WEc0Z1hIUjlYRzVjYmlCY2RDOHZJSGRvYVd4bElHUnZkMjVzYjJGa2FXNW5YRzRnWEhSMllYSWdhRzkwVjJGcGRHbHVaMFpwYkdWeklEMGdNRHRjYmlCY2RIWmhjaUJvYjNSRGFIVnVhM05NYjJGa2FXNW5JRDBnTUR0Y2JpQmNkSFpoY2lCb2IzUlhZV2wwYVc1blJtbHNaWE5OWVhBZ1BTQjdmVHRjYmlCY2RIWmhjaUJvYjNSU1pYRjFaWE4wWldSR2FXeGxjMDFoY0NBOUlIdDlPMXh1SUZ4MGRtRnlJR2h2ZEVGMllXbHNZV0pzWlVacGJHVnpUV0Z3SUQwZ2UzMDdYRzRnWEhSMllYSWdhRzkwUkdWbVpYSnlaV1E3WEc1Y2JpQmNkQzh2SUZSb1pTQjFjR1JoZEdVZ2FXNW1iMXh1SUZ4MGRtRnlJR2h2ZEZWd1pHRjBaU3dnYUc5MFZYQmtZWFJsVG1WM1NHRnphRHRjYmx4dUlGeDBablZ1WTNScGIyNGdkRzlOYjJSMWJHVkpaQ2hwWkNrZ2UxeHVJRngwWEhSMllYSWdhWE5PZFcxaVpYSWdQU0FyYVdRZ0t5QmNJbHdpSUQwOVBTQnBaRHRjYmlCY2RGeDBjbVYwZFhKdUlHbHpUblZ0WW1WeUlEOGdLMmxrSURvZ2FXUTdYRzRnWEhSOVhHNWNiaUJjZEdaMWJtTjBhVzl1SUdodmRFTm9aV05yS0dGd2NHeDVLU0I3WEc0Z1hIUmNkR2xtSUNob2IzUlRkR0YwZFhNZ0lUMDlJRndpYVdSc1pWd2lLU0I3WEc0Z1hIUmNkRngwZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpWTJobFkyc29LU0JwY3lCdmJteDVJR0ZzYkc5M1pXUWdhVzRnYVdSc1pTQnpkR0YwZFhOY0lpazdYRzRnWEhSY2RIMWNiaUJjZEZ4MGFHOTBRWEJ3YkhsUGJsVndaR0YwWlNBOUlHRndjR3g1TzF4dUlGeDBYSFJvYjNSVFpYUlRkR0YwZFhNb1hDSmphR1ZqYTF3aUtUdGNiaUJjZEZ4MGNtVjBkWEp1SUdodmRFUnZkMjVzYjJGa1RXRnVhV1psYzNRb2FHOTBVbVZ4ZFdWemRGUnBiV1Z2ZFhRcExuUm9aVzRvWm5WdVkzUnBiMjRvZFhCa1lYUmxLU0I3WEc0Z1hIUmNkRngwYVdZZ0tDRjFjR1JoZEdVcElIdGNiaUJjZEZ4MFhIUmNkR2h2ZEZObGRGTjBZWFIxY3loY0ltbGtiR1ZjSWlrN1hHNGdYSFJjZEZ4MFhIUnlaWFIxY200Z2JuVnNiRHRjYmlCY2RGeDBYSFI5WEc0Z1hIUmNkRngwYUc5MFVtVnhkV1Z6ZEdWa1JtbHNaWE5OWVhBZ1BTQjdmVHRjYmlCY2RGeDBYSFJvYjNSWFlXbDBhVzVuUm1sc1pYTk5ZWEFnUFNCN2ZUdGNiaUJjZEZ4MFhIUm9iM1JCZG1GcGJHRmliR1ZHYVd4bGMwMWhjQ0E5SUhWd1pHRjBaUzVqTzF4dUlGeDBYSFJjZEdodmRGVndaR0YwWlU1bGQwaGhjMmdnUFNCMWNHUmhkR1V1YUR0Y2JseHVJRngwWEhSY2RHaHZkRk5sZEZOMFlYUjFjeWhjSW5CeVpYQmhjbVZjSWlrN1hHNGdYSFJjZEZ4MGRtRnlJSEJ5YjIxcGMyVWdQU0J1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JpQmNkRngwWEhSY2RHaHZkRVJsWm1WeWNtVmtJRDBnZTF4dUlGeDBYSFJjZEZ4MFhIUnlaWE52YkhabE9pQnlaWE52YkhabExGeHVJRngwWEhSY2RGeDBYSFJ5WldwbFkzUTZJSEpsYW1WamRGeHVJRngwWEhSY2RGeDBmVHRjYmlCY2RGeDBYSFI5S1R0Y2JpQmNkRngwWEhSb2IzUlZjR1JoZEdVZ1BTQjdmVHRjYmlCY2RGeDBYSFIyWVhJZ1kyaDFibXRKWkNBOUlGd2liV0ZwYmx3aU8xeHVJRngwWEhSY2RDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQnVieTFzYjI1bExXSnNiMk5yYzF4dUlGeDBYSFJjZEh0Y2JpQmNkRngwWEhSY2RDOHFaMnh2WW1Gc2N5QmphSFZ1YTBsa0lDb3ZYRzRnWEhSY2RGeDBYSFJvYjNSRmJuTjFjbVZWY0dSaGRHVkRhSFZ1YXloamFIVnVhMGxrS1R0Y2JpQmNkRngwWEhSOVhHNGdYSFJjZEZ4MGFXWWdLRnh1SUZ4MFhIUmNkRngwYUc5MFUzUmhkSFZ6SUQwOVBTQmNJbkJ5WlhCaGNtVmNJaUFtSmx4dUlGeDBYSFJjZEZ4MGFHOTBRMmgxYm10elRHOWhaR2x1WnlBOVBUMGdNQ0FtSmx4dUlGeDBYSFJjZEZ4MGFHOTBWMkZwZEdsdVowWnBiR1Z6SUQwOVBTQXdYRzRnWEhSY2RGeDBLU0I3WEc0Z1hIUmNkRngwWEhSb2IzUlZjR1JoZEdWRWIzZHViRzloWkdWa0tDazdYRzRnWEhSY2RGeDBmVnh1SUZ4MFhIUmNkSEpsZEhWeWJpQndjbTl0YVhObE8xeHVJRngwWEhSOUtUdGNiaUJjZEgxY2JseHVJRngwTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnWEhSbWRXNWpkR2x2YmlCb2IzUkJaR1JWY0dSaGRHVkRhSFZ1YXloamFIVnVhMGxrTENCdGIzSmxUVzlrZFd4bGN5a2dlMXh1SUZ4MFhIUnBaaUFvSVdodmRFRjJZV2xzWVdKc1pVWnBiR1Z6VFdGd1cyTm9kVzVyU1dSZElIeDhJQ0ZvYjNSU1pYRjFaWE4wWldSR2FXeGxjMDFoY0Z0amFIVnVhMGxrWFNsY2JpQmNkRngwWEhSeVpYUjFjbTQ3WEc0Z1hIUmNkR2h2ZEZKbGNYVmxjM1JsWkVacGJHVnpUV0Z3VzJOb2RXNXJTV1JkSUQwZ1ptRnNjMlU3WEc0Z1hIUmNkR1p2Y2lBb2RtRnlJRzF2WkhWc1pVbGtJR2x1SUcxdmNtVk5iMlIxYkdWektTQjdYRzRnWEhSY2RGeDBhV1lnS0U5aWFtVmpkQzV3Y205MGIzUjVjR1V1YUdGelQzZHVVSEp2Y0dWeWRIa3VZMkZzYkNodGIzSmxUVzlrZFd4bGN5d2diVzlrZFd4bFNXUXBLU0I3WEc0Z1hIUmNkRngwWEhSb2IzUlZjR1JoZEdWYmJXOWtkV3hsU1dSZElEMGdiVzl5WlUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTzF4dUlGeDBYSFJjZEgxY2JpQmNkRngwZlZ4dUlGeDBYSFJwWmlBb0xTMW9iM1JYWVdsMGFXNW5SbWxzWlhNZ1BUMDlJREFnSmlZZ2FHOTBRMmgxYm10elRHOWhaR2x1WnlBOVBUMGdNQ2tnZTF4dUlGeDBYSFJjZEdodmRGVndaR0YwWlVSdmQyNXNiMkZrWldRb0tUdGNiaUJjZEZ4MGZWeHVJRngwZlZ4dVhHNGdYSFJtZFc1amRHbHZiaUJvYjNSRmJuTjFjbVZWY0dSaGRHVkRhSFZ1YXloamFIVnVhMGxrS1NCN1hHNGdYSFJjZEdsbUlDZ2hhRzkwUVhaaGFXeGhZbXhsUm1sc1pYTk5ZWEJiWTJoMWJtdEpaRjBwSUh0Y2JpQmNkRngwWEhSb2IzUlhZV2wwYVc1blJtbHNaWE5OWVhCYlkyaDFibXRKWkYwZ1BTQjBjblZsTzF4dUlGeDBYSFI5SUdWc2MyVWdlMXh1SUZ4MFhIUmNkR2h2ZEZKbGNYVmxjM1JsWkVacGJHVnpUV0Z3VzJOb2RXNXJTV1JkSUQwZ2RISjFaVHRjYmlCY2RGeDBYSFJvYjNSWFlXbDBhVzVuUm1sc1pYTXJLenRjYmlCY2RGeDBYSFJvYjNSRWIzZHViRzloWkZWd1pHRjBaVU5vZFc1cktHTm9kVzVyU1dRcE8xeHVJRngwWEhSOVhHNGdYSFI5WEc1Y2JpQmNkR1oxYm1OMGFXOXVJR2h2ZEZWd1pHRjBaVVJ2ZDI1c2IyRmtaV1FvS1NCN1hHNGdYSFJjZEdodmRGTmxkRk4wWVhSMWN5aGNJbkpsWVdSNVhDSXBPMXh1SUZ4MFhIUjJZWElnWkdWbVpYSnlaV1FnUFNCb2IzUkVaV1psY25KbFpEdGNiaUJjZEZ4MGFHOTBSR1ZtWlhKeVpXUWdQU0J1ZFd4c08xeHVJRngwWEhScFppQW9JV1JsWm1WeWNtVmtLU0J5WlhSMWNtNDdYRzRnWEhSY2RHbG1JQ2hvYjNSQmNIQnNlVTl1VlhCa1lYUmxLU0I3WEc0Z1hIUmNkRngwTHk4Z1YzSmhjQ0JrWldabGNuSmxaQ0J2WW1wbFkzUWdhVzRnVUhKdmJXbHpaU0IwYnlCdFlYSnJJR2wwSUdGeklHRWdkMlZzYkMxb1lXNWtiR1ZrSUZCeWIyMXBjMlVnZEc5Y2JpQmNkRngwWEhRdkx5QmhkbTlwWkNCMGNtbG5aMlZ5YVc1bklIVnVZMkYxWjJoMElHVjRZMlZ3ZEdsdmJpQjNZWEp1YVc1bklHbHVJRU5vY205dFpTNWNiaUJjZEZ4MFhIUXZMeUJUWldVZ2FIUjBjSE02THk5aWRXZHpMbU5vY205dGFYVnRMbTl5Wnk5d0wyTm9jbTl0YVhWdEwybHpjM1ZsY3k5a1pYUmhhV3cvYVdROU5EWTFOalkyWEc0Z1hIUmNkRngwVUhKdmJXbHpaUzV5WlhOdmJIWmxLQ2xjYmlCY2RGeDBYSFJjZEM1MGFHVnVLR1oxYm1OMGFXOXVLQ2tnZTF4dUlGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z2FHOTBRWEJ3Ykhrb2FHOTBRWEJ3YkhsUGJsVndaR0YwWlNrN1hHNGdYSFJjZEZ4MFhIUjlLVnh1SUZ4MFhIUmNkRngwTG5Sb1pXNG9YRzRnWEhSY2RGeDBYSFJjZEdaMWJtTjBhVzl1S0hKbGMzVnNkQ2tnZTF4dUlGeDBYSFJjZEZ4MFhIUmNkR1JsWm1WeWNtVmtMbkpsYzI5c2RtVW9jbVZ6ZFd4MEtUdGNiaUJjZEZ4MFhIUmNkRngwZlN4Y2JpQmNkRngwWEhSY2RGeDBablZ1WTNScGIyNG9aWEp5S1NCN1hHNGdYSFJjZEZ4MFhIUmNkRngwWkdWbVpYSnlaV1F1Y21WcVpXTjBLR1Z5Y2lrN1hHNGdYSFJjZEZ4MFhIUmNkSDFjYmlCY2RGeDBYSFJjZENrN1hHNGdYSFJjZEgwZ1pXeHpaU0I3WEc0Z1hIUmNkRngwZG1GeUlHOTFkR1JoZEdWa1RXOWtkV3hsY3lBOUlGdGRPMXh1SUZ4MFhIUmNkR1p2Y2lBb2RtRnlJR2xrSUdsdUlHaHZkRlZ3WkdGMFpTa2dlMXh1SUZ4MFhIUmNkRngwYVdZZ0tFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaG9iM1JWY0dSaGRHVXNJR2xrS1NrZ2UxeHVJRngwWEhSY2RGeDBYSFJ2ZFhSa1lYUmxaRTF2WkhWc1pYTXVjSFZ6YUNoMGIwMXZaSFZzWlVsa0tHbGtLU2s3WEc0Z1hIUmNkRngwWEhSOVhHNGdYSFJjZEZ4MGZWeHVJRngwWEhSY2RHUmxabVZ5Y21Wa0xuSmxjMjlzZG1Vb2IzVjBaR0YwWldSTmIyUjFiR1Z6S1R0Y2JpQmNkRngwZlZ4dUlGeDBmVnh1WEc0Z1hIUm1kVzVqZEdsdmJpQm9iM1JCY0hCc2VTaHZjSFJwYjI1ektTQjdYRzRnWEhSY2RHbG1JQ2hvYjNSVGRHRjBkWE1nSVQwOUlGd2ljbVZoWkhsY0lpbGNiaUJjZEZ4MFhIUjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSmhjSEJzZVNncElHbHpJRzl1YkhrZ1lXeHNiM2RsWkNCcGJpQnlaV0ZrZVNCemRHRjBkWE5jSWlrN1hHNGdYSFJjZEc5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1WEc0Z1hIUmNkSFpoY2lCallqdGNiaUJjZEZ4MGRtRnlJR2s3WEc0Z1hIUmNkSFpoY2lCcU8xeHVJRngwWEhSMllYSWdiVzlrZFd4bE8xeHVJRngwWEhSMllYSWdiVzlrZFd4bFNXUTdYRzVjYmlCY2RGeDBablZ1WTNScGIyNGdaMlYwUVdabVpXTjBaV1JUZEhWbVppaDFjR1JoZEdWTmIyUjFiR1ZKWkNrZ2UxeHVJRngwWEhSY2RIWmhjaUJ2ZFhSa1lYUmxaRTF2WkhWc1pYTWdQU0JiZFhCa1lYUmxUVzlrZFd4bFNXUmRPMXh1SUZ4MFhIUmNkSFpoY2lCdmRYUmtZWFJsWkVSbGNHVnVaR1Z1WTJsbGN5QTlJSHQ5TzF4dVhHNGdYSFJjZEZ4MGRtRnlJSEYxWlhWbElEMGdiM1YwWkdGMFpXUk5iMlIxYkdWekxtMWhjQ2htZFc1amRHbHZiaWhwWkNrZ2UxeHVJRngwWEhSY2RGeDBjbVYwZFhKdUlIdGNiaUJjZEZ4MFhIUmNkRngwWTJoaGFXNDZJRnRwWkYwc1hHNGdYSFJjZEZ4MFhIUmNkR2xrT2lCcFpGeHVJRngwWEhSY2RGeDBmVHRjYmlCY2RGeDBYSFI5S1R0Y2JpQmNkRngwWEhSM2FHbHNaU0FvY1hWbGRXVXViR1Z1WjNSb0lENGdNQ2tnZTF4dUlGeDBYSFJjZEZ4MGRtRnlJSEYxWlhWbFNYUmxiU0E5SUhGMVpYVmxMbkJ2Y0NncE8xeHVJRngwWEhSY2RGeDBkbUZ5SUcxdlpIVnNaVWxrSUQwZ2NYVmxkV1ZKZEdWdExtbGtPMXh1SUZ4MFhIUmNkRngwZG1GeUlHTm9ZV2x1SUQwZ2NYVmxkV1ZKZEdWdExtTm9ZV2x1TzF4dUlGeDBYSFJjZEZ4MGJXOWtkV3hsSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwN1hHNGdYSFJjZEZ4MFhIUnBaaUFvSVcxdlpIVnNaU0I4ZkNCdGIyUjFiR1V1YUc5MExsOXpaV3htUVdOalpYQjBaV1FwSUdOdmJuUnBiblZsTzF4dUlGeDBYSFJjZEZ4MGFXWWdLRzF2WkhWc1pTNW9iM1F1WDNObGJHWkVaV05zYVc1bFpDa2dlMXh1SUZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnZTF4dUlGeDBYSFJjZEZ4MFhIUmNkSFI1Y0dVNklGd2ljMlZzWmkxa1pXTnNhVzVsWkZ3aUxGeHVJRngwWEhSY2RGeDBYSFJjZEdOb1lXbHVPaUJqYUdGcGJpeGNiaUJjZEZ4MFhIUmNkRngwWEhSdGIyUjFiR1ZKWkRvZ2JXOWtkV3hsU1dSY2JpQmNkRngwWEhSY2RGeDBmVHRjYmlCY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RHbG1JQ2h0YjJSMWJHVXVhRzkwTGw5dFlXbHVLU0I3WEc0Z1hIUmNkRngwWEhSY2RISmxkSFZ5YmlCN1hHNGdYSFJjZEZ4MFhIUmNkRngwZEhsd1pUb2dYQ0oxYm1GalkyVndkR1ZrWENJc1hHNGdYSFJjZEZ4MFhIUmNkRngwWTJoaGFXNDZJR05vWVdsdUxGeHVJRngwWEhSY2RGeDBYSFJjZEcxdlpIVnNaVWxrT2lCdGIyUjFiR1ZKWkZ4dUlGeDBYSFJjZEZ4MFhIUjlPMXh1SUZ4MFhIUmNkRngwZlZ4dUlGeDBYSFJjZEZ4MFptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnRiMlIxYkdVdWNHRnlaVzUwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUZ4MFhIUmNkRngwWEhSMllYSWdjR0Z5Wlc1MFNXUWdQU0J0YjJSMWJHVXVjR0Z5Wlc1MGMxdHBYVHRjYmlCY2RGeDBYSFJjZEZ4MGRtRnlJSEJoY21WdWRDQTlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJjR0Z5Wlc1MFNXUmRPMXh1SUZ4MFhIUmNkRngwWEhScFppQW9JWEJoY21WdWRDa2dZMjl1ZEdsdWRXVTdYRzRnWEhSY2RGeDBYSFJjZEdsbUlDaHdZWEpsYm5RdWFHOTBMbDlrWldOc2FXNWxaRVJsY0dWdVpHVnVZMmxsYzF0dGIyUjFiR1ZKWkYwcElIdGNiaUJjZEZ4MFhIUmNkRngwWEhSeVpYUjFjbTRnZTF4dUlGeDBYSFJjZEZ4MFhIUmNkRngwZEhsd1pUb2dYQ0prWldOc2FXNWxaRndpTEZ4dUlGeDBYSFJjZEZ4MFhIUmNkRngwWTJoaGFXNDZJR05vWVdsdUxtTnZibU5oZENoYmNHRnlaVzUwU1dSZEtTeGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RHMXZaSFZzWlVsa09pQnRiMlIxYkdWSlpDeGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RIQmhjbVZ1ZEVsa09pQndZWEpsYm5SSlpGeHVJRngwWEhSY2RGeDBYSFJjZEgwN1hHNGdYSFJjZEZ4MFhIUmNkSDFjYmlCY2RGeDBYSFJjZEZ4MGFXWWdLRzkxZEdSaGRHVmtUVzlrZFd4bGN5NXBibVJsZUU5bUtIQmhjbVZ1ZEVsa0tTQWhQVDBnTFRFcElHTnZiblJwYm5WbE8xeHVJRngwWEhSY2RGeDBYSFJwWmlBb2NHRnlaVzUwTG1odmRDNWZZV05qWlhCMFpXUkVaWEJsYm1SbGJtTnBaWE5iYlc5a2RXeGxTV1JkS1NCN1hHNGdYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDRnZkWFJrWVhSbFpFUmxjR1Z1WkdWdVkybGxjMXR3WVhKbGJuUkpaRjBwWEc0Z1hIUmNkRngwWEhSY2RGeDBYSFJ2ZFhSa1lYUmxaRVJsY0dWdVpHVnVZMmxsYzF0d1lYSmxiblJKWkYwZ1BTQmJYVHRjYmlCY2RGeDBYSFJjZEZ4MFhIUmhaR1JCYkd4VWIxTmxkQ2h2ZFhSa1lYUmxaRVJsY0dWdVpHVnVZMmxsYzF0d1lYSmxiblJKWkYwc0lGdHRiMlIxYkdWSlpGMHBPMXh1SUZ4MFhIUmNkRngwWEhSY2RHTnZiblJwYm5WbE8xeHVJRngwWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwWEhSY2RHUmxiR1YwWlNCdmRYUmtZWFJsWkVSbGNHVnVaR1Z1WTJsbGMxdHdZWEpsYm5SSlpGMDdYRzRnWEhSY2RGeDBYSFJjZEc5MWRHUmhkR1ZrVFc5a2RXeGxjeTV3ZFhOb0tIQmhjbVZ1ZEVsa0tUdGNiaUJjZEZ4MFhIUmNkRngwY1hWbGRXVXVjSFZ6YUNoN1hHNGdYSFJjZEZ4MFhIUmNkRngwWTJoaGFXNDZJR05vWVdsdUxtTnZibU5oZENoYmNHRnlaVzUwU1dSZEtTeGNiaUJjZEZ4MFhIUmNkRngwWEhScFpEb2djR0Z5Wlc1MFNXUmNiaUJjZEZ4MFhIUmNkRngwZlNrN1hHNGdYSFJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBmVnh1WEc0Z1hIUmNkRngwY21WMGRYSnVJSHRjYmlCY2RGeDBYSFJjZEhSNWNHVTZJRndpWVdOalpYQjBaV1JjSWl4Y2JpQmNkRngwWEhSY2RHMXZaSFZzWlVsa09pQjFjR1JoZEdWTmIyUjFiR1ZKWkN4Y2JpQmNkRngwWEhSY2RHOTFkR1JoZEdWa1RXOWtkV3hsY3pvZ2IzVjBaR0YwWldSTmIyUjFiR1Z6TEZ4dUlGeDBYSFJjZEZ4MGIzVjBaR0YwWldSRVpYQmxibVJsYm1OcFpYTTZJRzkxZEdSaGRHVmtSR1Z3Wlc1a1pXNWphV1Z6WEc0Z1hIUmNkRngwZlR0Y2JpQmNkRngwZlZ4dVhHNGdYSFJjZEdaMWJtTjBhVzl1SUdGa1pFRnNiRlJ2VTJWMEtHRXNJR0lwSUh0Y2JpQmNkRngwWEhSbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHSXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQmNkRngwWEhSY2RIWmhjaUJwZEdWdElEMGdZbHRwWFR0Y2JpQmNkRngwWEhSY2RHbG1JQ2hoTG1sdVpHVjRUMllvYVhSbGJTa2dQVDA5SUMweEtTQmhMbkIxYzJnb2FYUmxiU2s3WEc0Z1hIUmNkRngwZlZ4dUlGeDBYSFI5WEc1Y2JpQmNkRngwTHk4Z1lYUWdZbVZuYVc0Z1lXeHNJSFZ3WkdGMFpYTWdiVzlrZFd4bGN5QmhjbVVnYjNWMFpHRjBaV1JjYmlCY2RGeDBMeThnZEdobElGd2liM1YwWkdGMFpXUmNJaUJ6ZEdGMGRYTWdZMkZ1SUhCeWIzQmhaMkYwWlNCMGJ5QndZWEpsYm5SeklHbG1JSFJvWlhrZ1pHOXVKM1FnWVdOalpYQjBJSFJvWlNCamFHbHNaSEpsYmx4dUlGeDBYSFIyWVhJZ2IzVjBaR0YwWldSRVpYQmxibVJsYm1OcFpYTWdQU0I3ZlR0Y2JpQmNkRngwZG1GeUlHOTFkR1JoZEdWa1RXOWtkV3hsY3lBOUlGdGRPMXh1SUZ4MFhIUjJZWElnWVhCd2JHbGxaRlZ3WkdGMFpTQTlJSHQ5TzF4dVhHNGdYSFJjZEhaaGNpQjNZWEp1Vlc1bGVIQmxZM1JsWkZKbGNYVnBjbVVnUFNCbWRXNWpkR2x2YmlCM1lYSnVWVzVsZUhCbFkzUmxaRkpsY1hWcGNtVW9LU0I3WEc0Z1hIUmNkRngwWTI5dWMyOXNaUzUzWVhKdUtGeHVJRngwWEhSY2RGeDBYQ0piU0UxU1hTQjFibVY0Y0dWamRHVmtJSEpsY1hWcGNtVW9YQ0lnS3lCeVpYTjFiSFF1Ylc5a2RXeGxTV1FnS3lCY0lpa2dkRzhnWkdsemNHOXpaV1FnYlc5a2RXeGxYQ0pjYmlCY2RGeDBYSFFwTzF4dUlGeDBYSFI5TzF4dVhHNGdYSFJjZEdadmNpQW9kbUZ5SUdsa0lHbHVJR2h2ZEZWd1pHRjBaU2tnZTF4dUlGeDBYSFJjZEdsbUlDaFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29hRzkwVlhCa1lYUmxMQ0JwWkNrcElIdGNiaUJjZEZ4MFhIUmNkRzF2WkhWc1pVbGtJRDBnZEc5TmIyUjFiR1ZKWkNocFpDazdYRzRnWEhSY2RGeDBYSFF2S2lvZ1FIUjVjR1VnZTFSUFJFOTlJQ292WEc0Z1hIUmNkRngwWEhSMllYSWdjbVZ6ZFd4ME8xeHVJRngwWEhSY2RGeDBhV1lnS0dodmRGVndaR0YwWlZ0cFpGMHBJSHRjYmlCY2RGeDBYSFJjZEZ4MGNtVnpkV3gwSUQwZ1oyVjBRV1ptWldOMFpXUlRkSFZtWmlodGIyUjFiR1ZKWkNrN1hHNGdYSFJjZEZ4MFhIUjlJR1ZzYzJVZ2UxeHVJRngwWEhSY2RGeDBYSFJ5WlhOMWJIUWdQU0I3WEc0Z1hIUmNkRngwWEhSY2RGeDBkSGx3WlRvZ1hDSmthWE53YjNObFpGd2lMRnh1SUZ4MFhIUmNkRngwWEhSY2RHMXZaSFZzWlVsa09pQnBaRnh1SUZ4MFhIUmNkRngwWEhSOU8xeHVJRngwWEhSY2RGeDBmVnh1SUZ4MFhIUmNkRngwTHlvcUlFQjBlWEJsSUh0RmNuSnZjbnhtWVd4elpYMGdLaTljYmlCY2RGeDBYSFJjZEhaaGNpQmhZbTl5ZEVWeWNtOXlJRDBnWm1Gc2MyVTdYRzRnWEhSY2RGeDBYSFIyWVhJZ1pHOUJjSEJzZVNBOUlHWmhiSE5sTzF4dUlGeDBYSFJjZEZ4MGRtRnlJR1J2UkdsemNHOXpaU0E5SUdaaGJITmxPMXh1SUZ4MFhIUmNkRngwZG1GeUlHTm9ZV2x1U1c1bWJ5QTlJRndpWENJN1hHNGdYSFJjZEZ4MFhIUnBaaUFvY21WemRXeDBMbU5vWVdsdUtTQjdYRzRnWEhSY2RGeDBYSFJjZEdOb1lXbHVTVzVtYnlBOUlGd2lYRnh1VlhCa1lYUmxJSEJ5YjNCaFoyRjBhVzl1T2lCY0lpQXJJSEpsYzNWc2RDNWphR0ZwYmk1cWIybHVLRndpSUMwK0lGd2lLVHRjYmlCY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RITjNhWFJqYUNBb2NtVnpkV3gwTG5SNWNHVXBJSHRjYmlCY2RGeDBYSFJjZEZ4MFkyRnpaU0JjSW5ObGJHWXRaR1ZqYkdsdVpXUmNJanBjYmlCY2RGeDBYSFJjZEZ4MFhIUnBaaUFvYjNCMGFXOXVjeTV2YmtSbFkyeHBibVZrS1NCdmNIUnBiMjV6TG05dVJHVmpiR2x1WldRb2NtVnpkV3gwS1R0Y2JpQmNkRngwWEhSY2RGeDBYSFJwWmlBb0lXOXdkR2x2Ym5NdWFXZHViM0psUkdWamJHbHVaV1FwWEc0Z1hIUmNkRngwWEhSY2RGeDBYSFJoWW05eWRFVnljbTl5SUQwZ2JtVjNJRVZ5Y205eUtGeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNJa0ZpYjNKMFpXUWdZbVZqWVhWelpTQnZaaUJ6Wld4bUlHUmxZMnhwYm1VNklGd2lJQ3RjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkRngwWEhSeVpYTjFiSFF1Ylc5a2RXeGxTV1FnSzF4dUlGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RHTm9ZV2x1U1c1bWIxeHVJRngwWEhSY2RGeDBYSFJjZEZ4MEtUdGNiaUJjZEZ4MFhIUmNkRngwWEhSaWNtVmhhenRjYmlCY2RGeDBYSFJjZEZ4MFkyRnpaU0JjSW1SbFkyeHBibVZrWENJNlhHNGdYSFJjZEZ4MFhIUmNkRngwYVdZZ0tHOXdkR2x2Ym5NdWIyNUVaV05zYVc1bFpDa2diM0IwYVc5dWN5NXZia1JsWTJ4cGJtVmtLSEpsYzNWc2RDazdYRzRnWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0Z2Y0hScGIyNXpMbWxuYm05eVpVUmxZMnhwYm1Wa0tWeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFlXSnZjblJGY25KdmNpQTlJRzVsZHlCRmNuSnZjaWhjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkRngwWENKQlltOXlkR1ZrSUdKbFkyRjFjMlVnYjJZZ1pHVmpiR2x1WldRZ1pHVndaVzVrWlc1amVUb2dYQ0lnSzF4dUlGeDBYSFJjZEZ4MFhIUmNkRngwWEhSY2RISmxjM1ZzZEM1dGIyUjFiR1ZKWkNBclhHNGdYSFJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYQ0lnYVc0Z1hDSWdLMXh1SUZ4MFhIUmNkRngwWEhSY2RGeDBYSFJjZEhKbGMzVnNkQzV3WVhKbGJuUkpaQ0FyWEc0Z1hIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFkyaGhhVzVKYm1adlhHNGdYSFJjZEZ4MFhIUmNkRngwWEhRcE8xeHVJRngwWEhSY2RGeDBYSFJjZEdKeVpXRnJPMXh1SUZ4MFhIUmNkRngwWEhSallYTmxJRndpZFc1aFkyTmxjSFJsWkZ3aU9seHVJRngwWEhSY2RGeDBYSFJjZEdsbUlDaHZjSFJwYjI1ekxtOXVWVzVoWTJObGNIUmxaQ2tnYjNCMGFXOXVjeTV2YmxWdVlXTmpaWEIwWldRb2NtVnpkV3gwS1R0Y2JpQmNkRngwWEhSY2RGeDBYSFJwWmlBb0lXOXdkR2x2Ym5NdWFXZHViM0psVlc1aFkyTmxjSFJsWkNsY2JpQmNkRngwWEhSY2RGeDBYSFJjZEdGaWIzSjBSWEp5YjNJZ1BTQnVaWGNnUlhKeWIzSW9YRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUmNkRndpUVdKdmNuUmxaQ0JpWldOaGRYTmxJRndpSUNzZ2JXOWtkV3hsU1dRZ0t5QmNJaUJwY3lCdWIzUWdZV05qWlhCMFpXUmNJaUFySUdOb1lXbHVTVzVtYjF4dUlGeDBYSFJjZEZ4MFhIUmNkRngwS1R0Y2JpQmNkRngwWEhSY2RGeDBYSFJpY21WaGF6dGNiaUJjZEZ4MFhIUmNkRngwWTJGelpTQmNJbUZqWTJWd2RHVmtYQ0k2WEc0Z1hIUmNkRngwWEhSY2RGeDBhV1lnS0c5d2RHbHZibk11YjI1QlkyTmxjSFJsWkNrZ2IzQjBhVzl1Y3k1dmJrRmpZMlZ3ZEdWa0tISmxjM1ZzZENrN1hHNGdYSFJjZEZ4MFhIUmNkRngwWkc5QmNIQnNlU0E5SUhSeWRXVTdYRzRnWEhSY2RGeDBYSFJjZEZ4MFluSmxZV3M3WEc0Z1hIUmNkRngwWEhSY2RHTmhjMlVnWENKa2FYTndiM05sWkZ3aU9seHVJRngwWEhSY2RGeDBYSFJjZEdsbUlDaHZjSFJwYjI1ekxtOXVSR2x6Y0c5elpXUXBJRzl3ZEdsdmJuTXViMjVFYVhOd2IzTmxaQ2h5WlhOMWJIUXBPMXh1SUZ4MFhIUmNkRngwWEhSY2RHUnZSR2x6Y0c5elpTQTlJSFJ5ZFdVN1hHNGdYSFJjZEZ4MFhIUmNkRngwWW5KbFlXczdYRzRnWEhSY2RGeDBYSFJjZEdSbFptRjFiSFE2WEc0Z1hIUmNkRngwWEhSY2RGeDBkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lWVzVsZUdObGNIUnBiMjRnZEhsd1pTQmNJaUFySUhKbGMzVnNkQzUwZVhCbEtUdGNiaUJjZEZ4MFhIUmNkSDFjYmlCY2RGeDBYSFJjZEdsbUlDaGhZbTl5ZEVWeWNtOXlLU0I3WEc0Z1hIUmNkRngwWEhSY2RHaHZkRk5sZEZOMFlYUjFjeWhjSW1GaWIzSjBYQ0lwTzF4dUlGeDBYSFJjZEZ4MFhIUnlaWFIxY200Z1VISnZiV2x6WlM1eVpXcGxZM1FvWVdKdmNuUkZjbkp2Y2lrN1hHNGdYSFJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBYSFJwWmlBb1pHOUJjSEJzZVNrZ2UxeHVJRngwWEhSY2RGeDBYSFJoY0hCc2FXVmtWWEJrWVhSbFcyMXZaSFZzWlVsa1hTQTlJR2h2ZEZWd1pHRjBaVnR0YjJSMWJHVkpaRjA3WEc0Z1hIUmNkRngwWEhSY2RHRmtaRUZzYkZSdlUyVjBLRzkxZEdSaGRHVmtUVzlrZFd4bGN5d2djbVZ6ZFd4MExtOTFkR1JoZEdWa1RXOWtkV3hsY3lrN1hHNGdYSFJjZEZ4MFhIUmNkR1p2Y2lBb2JXOWtkV3hsU1dRZ2FXNGdjbVZ6ZFd4MExtOTFkR1JoZEdWa1JHVndaVzVrWlc1amFXVnpLU0I3WEc0Z1hIUmNkRngwWEhSY2RGeDBhV1lnS0Z4dUlGeDBYSFJjZEZ4MFhIUmNkRngwVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzS0Z4dUlGeDBYSFJjZEZ4MFhIUmNkRngwWEhSeVpYTjFiSFF1YjNWMFpHRjBaV1JFWlhCbGJtUmxibU5wWlhNc1hHNGdYSFJjZEZ4MFhIUmNkRngwWEhSY2RHMXZaSFZzWlVsa1hHNGdYSFJjZEZ4MFhIUmNkRngwWEhRcFhHNGdYSFJjZEZ4MFhIUmNkRngwS1NCN1hHNGdYSFJjZEZ4MFhIUmNkRngwWEhScFppQW9JVzkxZEdSaGRHVmtSR1Z3Wlc1a1pXNWphV1Z6VzIxdlpIVnNaVWxrWFNsY2JpQmNkRngwWEhSY2RGeDBYSFJjZEZ4MGIzVjBaR0YwWldSRVpYQmxibVJsYm1OcFpYTmJiVzlrZFd4bFNXUmRJRDBnVzEwN1hHNGdYSFJjZEZ4MFhIUmNkRngwWEhSaFpHUkJiR3hVYjFObGRDaGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RGeDBiM1YwWkdGMFpXUkVaWEJsYm1SbGJtTnBaWE5iYlc5a2RXeGxTV1JkTEZ4dUlGeDBYSFJjZEZ4MFhIUmNkRngwWEhSeVpYTjFiSFF1YjNWMFpHRjBaV1JFWlhCbGJtUmxibU5wWlhOYmJXOWtkV3hsU1dSZFhHNGdYSFJjZEZ4MFhIUmNkRngwWEhRcE8xeHVJRngwWEhSY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RGeDBmVnh1SUZ4MFhIUmNkRngwZlZ4dUlGeDBYSFJjZEZ4MGFXWWdLR1J2UkdsemNHOXpaU2tnZTF4dUlGeDBYSFJjZEZ4MFhIUmhaR1JCYkd4VWIxTmxkQ2h2ZFhSa1lYUmxaRTF2WkhWc1pYTXNJRnR5WlhOMWJIUXViVzlrZFd4bFNXUmRLVHRjYmlCY2RGeDBYSFJjZEZ4MFlYQndiR2xsWkZWd1pHRjBaVnR0YjJSMWJHVkpaRjBnUFNCM1lYSnVWVzVsZUhCbFkzUmxaRkpsY1hWcGNtVTdYRzRnWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwZlZ4dUlGeDBYSFI5WEc1Y2JpQmNkRngwTHk4Z1UzUnZjbVVnYzJWc1ppQmhZMk5sY0hSbFpDQnZkWFJrWVhSbFpDQnRiMlIxYkdWeklIUnZJSEpsY1hWcGNtVWdkR2hsYlNCc1lYUmxjaUJpZVNCMGFHVWdiVzlrZFd4bElITjVjM1JsYlZ4dUlGeDBYSFIyWVhJZ2IzVjBaR0YwWldSVFpXeG1RV05qWlhCMFpXUk5iMlIxYkdWeklEMGdXMTA3WEc0Z1hIUmNkR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQnZkWFJrWVhSbFpFMXZaSFZzWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlCY2RGeDBYSFJ0YjJSMWJHVkpaQ0E5SUc5MWRHUmhkR1ZrVFc5a2RXeGxjMXRwWFR0Y2JpQmNkRngwWEhScFppQW9YRzRnWEhSY2RGeDBYSFJwYm5OMFlXeHNaV1JOYjJSMWJHVnpXMjF2WkhWc1pVbGtYU0FtSmx4dUlGeDBYSFJjZEZ4MGFXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwdWFHOTBMbDl6Wld4bVFXTmpaWEIwWldRZ0ppWmNiaUJjZEZ4MFhIUmNkQzh2SUhKbGJXOTJaV1FnYzJWc1ppMWhZMk5sY0hSbFpDQnRiMlIxYkdWeklITm9iM1ZzWkNCdWIzUWdZbVVnY21WeGRXbHlaV1JjYmlCY2RGeDBYSFJjZEdGd2NHeHBaV1JWY0dSaGRHVmJiVzlrZFd4bFNXUmRJQ0U5UFNCM1lYSnVWVzVsZUhCbFkzUmxaRkpsY1hWcGNtVmNiaUJjZEZ4MFhIUXBJSHRjYmlCY2RGeDBYSFJjZEc5MWRHUmhkR1ZrVTJWc1prRmpZMlZ3ZEdWa1RXOWtkV3hsY3k1d2RYTm9LSHRjYmlCY2RGeDBYSFJjZEZ4MGJXOWtkV3hsT2lCdGIyUjFiR1ZKWkN4Y2JpQmNkRngwWEhSY2RGeDBaWEp5YjNKSVlXNWtiR1Z5T2lCcGJuTjBZV3hzWldSTmIyUjFiR1Z6VzIxdlpIVnNaVWxrWFM1b2IzUXVYM05sYkdaQlkyTmxjSFJsWkZ4dUlGeDBYSFJjZEZ4MGZTazdYRzRnWEhSY2RGeDBmVnh1SUZ4MFhIUjlYRzVjYmlCY2RGeDBMeThnVG05M0lHbHVJRndpWkdsemNHOXpaVndpSUhCb1lYTmxYRzRnWEhSY2RHaHZkRk5sZEZOMFlYUjFjeWhjSW1ScGMzQnZjMlZjSWlrN1hHNGdYSFJjZEU5aWFtVmpkQzVyWlhsektHaHZkRUYyWVdsc1lXSnNaVVpwYkdWelRXRndLUzVtYjNKRllXTm9LR1oxYm1OMGFXOXVLR05vZFc1clNXUXBJSHRjYmlCY2RGeDBYSFJwWmlBb2FHOTBRWFpoYVd4aFlteGxSbWxzWlhOTllYQmJZMmgxYm10SlpGMGdQVDA5SUdaaGJITmxLU0I3WEc0Z1hIUmNkRngwWEhSb2IzUkVhWE53YjNObFEyaDFibXNvWTJoMWJtdEpaQ2s3WEc0Z1hIUmNkRngwZlZ4dUlGeDBYSFI5S1R0Y2JseHVJRngwWEhSMllYSWdhV1I0TzF4dUlGeDBYSFIyWVhJZ2NYVmxkV1VnUFNCdmRYUmtZWFJsWkUxdlpIVnNaWE11YzJ4cFkyVW9LVHRjYmlCY2RGeDBkMmhwYkdVZ0tIRjFaWFZsTG14bGJtZDBhQ0ErSURBcElIdGNiaUJjZEZ4MFhIUnRiMlIxYkdWSlpDQTlJSEYxWlhWbExuQnZjQ2dwTzF4dUlGeDBYSFJjZEcxdlpIVnNaU0E5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTzF4dUlGeDBYSFJjZEdsbUlDZ2hiVzlrZFd4bEtTQmpiMjUwYVc1MVpUdGNibHh1SUZ4MFhIUmNkSFpoY2lCa1lYUmhJRDBnZTMwN1hHNWNiaUJjZEZ4MFhIUXZMeUJEWVd4c0lHUnBjM0J2YzJVZ2FHRnVaR3hsY25OY2JpQmNkRngwWEhSMllYSWdaR2x6Y0c5elpVaGhibVJzWlhKeklEMGdiVzlrZFd4bExtaHZkQzVmWkdsemNHOXpaVWhoYm1Sc1pYSnpPMXh1SUZ4MFhIUmNkR1p2Y2lBb2FpQTlJREE3SUdvZ1BDQmthWE53YjNObFNHRnVaR3hsY25NdWJHVnVaM1JvT3lCcUt5c3BJSHRjYmlCY2RGeDBYSFJjZEdOaUlEMGdaR2x6Y0c5elpVaGhibVJzWlhKelcycGRPMXh1SUZ4MFhIUmNkRngwWTJJb1pHRjBZU2s3WEc0Z1hIUmNkRngwZlZ4dUlGeDBYSFJjZEdodmRFTjFjbkpsYm5STmIyUjFiR1ZFWVhSaFcyMXZaSFZzWlVsa1hTQTlJR1JoZEdFN1hHNWNiaUJjZEZ4MFhIUXZMeUJrYVhOaFlteGxJRzF2WkhWc1pTQW9kR2hwY3lCa2FYTmhZbXhsY3lCeVpYRjFhWEpsY3lCbWNtOXRJSFJvYVhNZ2JXOWtkV3hsS1Z4dUlGeDBYSFJjZEcxdlpIVnNaUzVvYjNRdVlXTjBhWFpsSUQwZ1ptRnNjMlU3WEc1Y2JpQmNkRngwWEhRdkx5QnlaVzF2ZG1VZ2JXOWtkV3hsSUdaeWIyMGdZMkZqYUdWY2JpQmNkRngwWEhSa1pXeGxkR1VnYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjA3WEc1Y2JpQmNkRngwWEhRdkx5QjNhR1Z1SUdScGMzQnZjMmx1WnlCMGFHVnlaU0JwY3lCdWJ5QnVaV1ZrSUhSdklHTmhiR3dnWkdsemNHOXpaU0JvWVc1a2JHVnlYRzRnWEhSY2RGeDBaR1ZzWlhSbElHOTFkR1JoZEdWa1JHVndaVzVrWlc1amFXVnpXMjF2WkhWc1pVbGtYVHRjYmx4dUlGeDBYSFJjZEM4dklISmxiVzkyWlNCY0luQmhjbVZ1ZEhOY0lpQnlaV1psY21WdVkyVnpJR1p5YjIwZ1lXeHNJR05vYVd4a2NtVnVYRzRnWEhSY2RGeDBabTl5SUNocUlEMGdNRHNnYWlBOElHMXZaSFZzWlM1amFHbHNaSEpsYmk1c1pXNW5kR2c3SUdvckt5a2dlMXh1SUZ4MFhIUmNkRngwZG1GeUlHTm9hV3hrSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1V1WTJocGJHUnlaVzViYWwxZE8xeHVJRngwWEhSY2RGeDBhV1lnS0NGamFHbHNaQ2tnWTI5dWRHbHVkV1U3WEc0Z1hIUmNkRngwWEhScFpIZ2dQU0JqYUdsc1pDNXdZWEpsYm5SekxtbHVaR1Y0VDJZb2JXOWtkV3hsU1dRcE8xeHVJRngwWEhSY2RGeDBhV1lnS0dsa2VDQStQU0F3S1NCN1hHNGdYSFJjZEZ4MFhIUmNkR05vYVd4a0xuQmhjbVZ1ZEhNdWMzQnNhV05sS0dsa2VDd2dNU2s3WEc0Z1hIUmNkRngwWEhSOVhHNGdYSFJjZEZ4MGZWeHVJRngwWEhSOVhHNWNiaUJjZEZ4MEx5OGdjbVZ0YjNabElHOTFkR1JoZEdWa0lHUmxjR1Z1WkdWdVkza2dabkp2YlNCdGIyUjFiR1VnWTJocGJHUnlaVzVjYmlCY2RGeDBkbUZ5SUdSbGNHVnVaR1Z1WTNrN1hHNGdYSFJjZEhaaGNpQnRiMlIxYkdWUGRYUmtZWFJsWkVSbGNHVnVaR1Z1WTJsbGN6dGNiaUJjZEZ4MFptOXlJQ2h0YjJSMWJHVkpaQ0JwYmlCdmRYUmtZWFJsWkVSbGNHVnVaR1Z1WTJsbGN5a2dlMXh1SUZ4MFhIUmNkR2xtSUNoY2JpQmNkRngwWEhSY2RFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHZkWFJrWVhSbFpFUmxjR1Z1WkdWdVkybGxjeXdnYlc5a2RXeGxTV1FwWEc0Z1hIUmNkRngwS1NCN1hHNGdYSFJjZEZ4MFhIUnRiMlIxYkdVZ1BTQnBibk4wWVd4c1pXUk5iMlIxYkdWelcyMXZaSFZzWlVsa1hUdGNiaUJjZEZ4MFhIUmNkR2xtSUNodGIyUjFiR1VwSUh0Y2JpQmNkRngwWEhSY2RGeDBiVzlrZFd4bFQzVjBaR0YwWldSRVpYQmxibVJsYm1OcFpYTWdQU0J2ZFhSa1lYUmxaRVJsY0dWdVpHVnVZMmxsYzF0dGIyUjFiR1ZKWkYwN1hHNGdYSFJjZEZ4MFhIUmNkR1p2Y2lBb2FpQTlJREE3SUdvZ1BDQnRiMlIxYkdWUGRYUmtZWFJsWkVSbGNHVnVaR1Z1WTJsbGN5NXNaVzVuZEdnN0lHb3JLeWtnZTF4dUlGeDBYSFJjZEZ4MFhIUmNkR1JsY0dWdVpHVnVZM2tnUFNCdGIyUjFiR1ZQZFhSa1lYUmxaRVJsY0dWdVpHVnVZMmxsYzF0cVhUdGNiaUJjZEZ4MFhIUmNkRngwWEhScFpIZ2dQU0J0YjJSMWJHVXVZMmhwYkdSeVpXNHVhVzVrWlhoUFppaGtaWEJsYm1SbGJtTjVLVHRjYmlCY2RGeDBYSFJjZEZ4MFhIUnBaaUFvYVdSNElENDlJREFwSUcxdlpIVnNaUzVqYUdsc1pISmxiaTV6Y0d4cFkyVW9hV1I0TENBeEtUdGNiaUJjZEZ4MFhIUmNkRngwZlZ4dUlGeDBYSFJjZEZ4MGZWeHVJRngwWEhSY2RIMWNiaUJjZEZ4MGZWeHVYRzRnWEhSY2RDOHZJRTV2ZHlCcGJpQmNJbUZ3Y0d4NVhDSWdjR2hoYzJWY2JpQmNkRngwYUc5MFUyVjBVM1JoZEhWektGd2lZWEJ3YkhsY0lpazdYRzVjYmlCY2RGeDBhRzkwUTNWeWNtVnVkRWhoYzJnZ1BTQm9iM1JWY0dSaGRHVk9aWGRJWVhOb08xeHVYRzRnWEhSY2RDOHZJR2x1YzJWeWRDQnVaWGNnWTI5a1pWeHVJRngwWEhSbWIzSWdLRzF2WkhWc1pVbGtJR2x1SUdGd2NHeHBaV1JWY0dSaGRHVXBJSHRjYmlCY2RGeDBYSFJwWmlBb1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHRndjR3hwWldSVmNHUmhkR1VzSUcxdlpIVnNaVWxrS1NrZ2UxeHVJRngwWEhSY2RGeDBiVzlrZFd4bGMxdHRiMlIxYkdWSlpGMGdQU0JoY0hCc2FXVmtWWEJrWVhSbFcyMXZaSFZzWlVsa1hUdGNiaUJjZEZ4MFhIUjlYRzRnWEhSY2RIMWNibHh1SUZ4MFhIUXZMeUJqWVd4c0lHRmpZMlZ3ZENCb1lXNWtiR1Z5YzF4dUlGeDBYSFIyWVhJZ1pYSnliM0lnUFNCdWRXeHNPMXh1SUZ4MFhIUm1iM0lnS0cxdlpIVnNaVWxrSUdsdUlHOTFkR1JoZEdWa1JHVndaVzVrWlc1amFXVnpLU0I3WEc0Z1hIUmNkRngwYVdZZ0tGeHVJRngwWEhSY2RGeDBUMkpxWldOMExuQnliM1J2ZEhsd1pTNW9ZWE5QZDI1UWNtOXdaWEowZVM1allXeHNLRzkxZEdSaGRHVmtSR1Z3Wlc1a1pXNWphV1Z6TENCdGIyUjFiR1ZKWkNsY2JpQmNkRngwWEhRcElIdGNiaUJjZEZ4MFhIUmNkRzF2WkhWc1pTQTlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRPMXh1SUZ4MFhIUmNkRngwYVdZZ0tHMXZaSFZzWlNrZ2UxeHVJRngwWEhSY2RGeDBYSFJ0YjJSMWJHVlBkWFJrWVhSbFpFUmxjR1Z1WkdWdVkybGxjeUE5SUc5MWRHUmhkR1ZrUkdWd1pXNWtaVzVqYVdWelcyMXZaSFZzWlVsa1hUdGNiaUJjZEZ4MFhIUmNkRngwZG1GeUlHTmhiR3hpWVdOcmN5QTlJRnRkTzF4dUlGeDBYSFJjZEZ4MFhIUm1iM0lnS0drZ1BTQXdPeUJwSUR3Z2JXOWtkV3hsVDNWMFpHRjBaV1JFWlhCbGJtUmxibU5wWlhNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlCY2RGeDBYSFJjZEZ4MFhIUmtaWEJsYm1SbGJtTjVJRDBnYlc5a2RXeGxUM1YwWkdGMFpXUkVaWEJsYm1SbGJtTnBaWE5iYVYwN1hHNGdYSFJjZEZ4MFhIUmNkRngwWTJJZ1BTQnRiMlIxYkdVdWFHOTBMbDloWTJObGNIUmxaRVJsY0dWdVpHVnVZMmxsYzF0a1pYQmxibVJsYm1ONVhUdGNiaUJjZEZ4MFhIUmNkRngwWEhScFppQW9ZMklwSUh0Y2JpQmNkRngwWEhSY2RGeDBYSFJjZEdsbUlDaGpZV3hzWW1GamEzTXVhVzVrWlhoUFppaGpZaWtnSVQwOUlDMHhLU0JqYjI1MGFXNTFaVHRjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkR05oYkd4aVlXTnJjeTV3ZFhOb0tHTmlLVHRjYmlCY2RGeDBYSFJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RGeDBabTl5SUNocElEMGdNRHNnYVNBOElHTmhiR3hpWVdOcmN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlGeDBYSFJjZEZ4MFhIUmNkR05pSUQwZ1kyRnNiR0poWTJ0elcybGRPMXh1SUZ4MFhIUmNkRngwWEhSY2RIUnllU0I3WEc0Z1hIUmNkRngwWEhSY2RGeDBYSFJqWWlodGIyUjFiR1ZQZFhSa1lYUmxaRVJsY0dWdVpHVnVZMmxsY3lrN1hHNGdYSFJjZEZ4MFhIUmNkRngwZlNCallYUmphQ0FvWlhKeUtTQjdYRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUnBaaUFvYjNCMGFXOXVjeTV2YmtWeWNtOXlaV1FwSUh0Y2JpQmNkRngwWEhSY2RGeDBYSFJjZEZ4MGIzQjBhVzl1Y3k1dmJrVnljbTl5WldRb2UxeHVJRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSFI1Y0dVNklGd2lZV05qWlhCMExXVnljbTl5WldSY0lpeGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RGeDBYSFJ0YjJSMWJHVkpaRG9nYlc5a2RXeGxTV1FzWEc0Z1hIUmNkRngwWEhSY2RGeDBYSFJjZEZ4MFpHVndaVzVrWlc1amVVbGtPaUJ0YjJSMWJHVlBkWFJrWVhSbFpFUmxjR1Z1WkdWdVkybGxjMXRwWFN4Y2JpQmNkRngwWEhSY2RGeDBYSFJjZEZ4MFhIUmxjbkp2Y2pvZ1pYSnlYRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUmNkSDBwTzF4dUlGeDBYSFJjZEZ4MFhIUmNkRngwZlZ4dUlGeDBYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDRnZjSFJwYjI1ekxtbG5ibTl5WlVWeWNtOXlaV1FwSUh0Y2JpQmNkRngwWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0ZsY25KdmNpa2daWEp5YjNJZ1BTQmxjbkk3WEc0Z1hIUmNkRngwWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwWEhSY2RGeDBmVnh1SUZ4MFhIUmNkRngwWEhSOVhHNGdYSFJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBmVnh1SUZ4MFhIUjlYRzVjYmlCY2RGeDBMeThnVEc5aFpDQnpaV3htSUdGalkyVndkR1ZrSUcxdlpIVnNaWE5jYmlCY2RGeDBabTl5SUNocElEMGdNRHNnYVNBOElHOTFkR1JoZEdWa1UyVnNaa0ZqWTJWd2RHVmtUVzlrZFd4bGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlGeDBYSFJjZEhaaGNpQnBkR1Z0SUQwZ2IzVjBaR0YwWldSVFpXeG1RV05qWlhCMFpXUk5iMlIxYkdWelcybGRPMXh1SUZ4MFhIUmNkRzF2WkhWc1pVbGtJRDBnYVhSbGJTNXRiMlIxYkdVN1hHNGdYSFJjZEZ4MGFHOTBRM1Z5Y21WdWRGQmhjbVZ1ZEhNZ1BTQmJiVzlrZFd4bFNXUmRPMXh1SUZ4MFhIUmNkSFJ5ZVNCN1hHNGdYSFJjZEZ4MFhIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLRzF2WkhWc1pVbGtLVHRjYmlCY2RGeDBYSFI5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUJjZEZ4MFhIUmNkR2xtSUNoMGVYQmxiMllnYVhSbGJTNWxjbkp2Y2toaGJtUnNaWElnUFQwOUlGd2lablZ1WTNScGIyNWNJaWtnZTF4dUlGeDBYSFJjZEZ4MFhIUjBjbmtnZTF4dUlGeDBYSFJjZEZ4MFhIUmNkR2wwWlcwdVpYSnliM0pJWVc1a2JHVnlLR1Z5Y2lrN1hHNGdYSFJjZEZ4MFhIUmNkSDBnWTJGMFkyZ2dLR1Z5Y2pJcElIdGNiaUJjZEZ4MFhIUmNkRngwWEhScFppQW9iM0IwYVc5dWN5NXZia1Z5Y205eVpXUXBJSHRjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkRzl3ZEdsdmJuTXViMjVGY25KdmNtVmtLSHRjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkRngwZEhsd1pUb2dYQ0p6Wld4bUxXRmpZMlZ3ZEMxbGNuSnZjaTFvWVc1a2JHVnlMV1Z5Y205eVpXUmNJaXhjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkRngwYlc5a2RXeGxTV1E2SUcxdlpIVnNaVWxrTEZ4dUlGeDBYSFJjZEZ4MFhIUmNkRngwWEhSbGNuSnZjam9nWlhKeU1peGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RGeDBiM0pwWjJsdVlXeEZjbkp2Y2pvZ1pYSnlYRzRnWEhSY2RGeDBYSFJjZEZ4MFhIUjlLVHRjYmlCY2RGeDBYSFJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBYSFJjZEZ4MGFXWWdLQ0Z2Y0hScGIyNXpMbWxuYm05eVpVVnljbTl5WldRcElIdGNiaUJjZEZ4MFhIUmNkRngwWEhSY2RHbG1JQ2doWlhKeWIzSXBJR1Z5Y205eUlEMGdaWEp5TWp0Y2JpQmNkRngwWEhSY2RGeDBYSFI5WEc0Z1hIUmNkRngwWEhSY2RGeDBhV1lnS0NGbGNuSnZjaWtnWlhKeWIzSWdQU0JsY25JN1hHNGdYSFJjZEZ4MFhIUmNkSDFjYmlCY2RGeDBYSFJjZEgwZ1pXeHpaU0I3WEc0Z1hIUmNkRngwWEhSY2RHbG1JQ2h2Y0hScGIyNXpMbTl1UlhKeWIzSmxaQ2tnZTF4dUlGeDBYSFJjZEZ4MFhIUmNkRzl3ZEdsdmJuTXViMjVGY25KdmNtVmtLSHRjYmlCY2RGeDBYSFJjZEZ4MFhIUmNkSFI1Y0dVNklGd2ljMlZzWmkxaFkyTmxjSFF0WlhKeWIzSmxaRndpTEZ4dUlGeDBYSFJjZEZ4MFhIUmNkRngwYlc5a2RXeGxTV1E2SUcxdlpIVnNaVWxrTEZ4dUlGeDBYSFJjZEZ4MFhIUmNkRngwWlhKeWIzSTZJR1Z5Y2x4dUlGeDBYSFJjZEZ4MFhIUmNkSDBwTzF4dUlGeDBYSFJjZEZ4MFhIUjlYRzRnWEhSY2RGeDBYSFJjZEdsbUlDZ2hiM0IwYVc5dWN5NXBaMjV2Y21WRmNuSnZjbVZrS1NCN1hHNGdYSFJjZEZ4MFhIUmNkRngwYVdZZ0tDRmxjbkp2Y2lrZ1pYSnliM0lnUFNCbGNuSTdYRzRnWEhSY2RGeDBYSFJjZEgxY2JpQmNkRngwWEhSY2RIMWNiaUJjZEZ4MFhIUjlYRzRnWEhSY2RIMWNibHh1SUZ4MFhIUXZMeUJvWVc1a2JHVWdaWEp5YjNKeklHbHVJR0ZqWTJWd2RDQm9ZVzVrYkdWeWN5QmhibVFnYzJWc1ppQmhZMk5sY0hSbFpDQnRiMlIxYkdVZ2JHOWhaRnh1SUZ4MFhIUnBaaUFvWlhKeWIzSXBJSHRjYmlCY2RGeDBYSFJvYjNSVFpYUlRkR0YwZFhNb1hDSm1ZV2xzWENJcE8xeHVJRngwWEhSY2RISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGFtVmpkQ2hsY25KdmNpazdYRzRnWEhSY2RIMWNibHh1SUZ4MFhIUm9iM1JUWlhSVGRHRjBkWE1vWENKcFpHeGxYQ0lwTzF4dUlGeDBYSFJ5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU2tnZTF4dUlGeDBYSFJjZEhKbGMyOXNkbVVvYjNWMFpHRjBaV1JOYjJSMWJHVnpLVHRjYmlCY2RGeDBmU2s3WEc0Z1hIUjlYRzVjYmlCY2RDOHZJRlJvWlNCdGIyUjFiR1VnWTJGamFHVmNiaUJjZEhaaGNpQnBibk4wWVd4c1pXUk5iMlIxYkdWeklEMGdlMzA3WEc1Y2JpQmNkQzh2SUZSb1pTQnlaWEYxYVhKbElHWjFibU4wYVc5dVhHNGdYSFJtZFc1amRHbHZiaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0cxdlpIVnNaVWxrS1NCN1hHNWNiaUJjZEZ4MEx5OGdRMmhsWTJzZ2FXWWdiVzlrZFd4bElHbHpJR2x1SUdOaFkyaGxYRzRnWEhSY2RHbG1LR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRLU0I3WEc0Z1hIUmNkRngwY21WMGRYSnVJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRMbVY0Y0c5eWRITTdYRzRnWEhSY2RIMWNiaUJjZEZ4MEx5OGdRM0psWVhSbElHRWdibVYzSUcxdlpIVnNaU0FvWVc1a0lIQjFkQ0JwZENCcGJuUnZJSFJvWlNCallXTm9aU2xjYmlCY2RGeDBkbUZ5SUcxdlpIVnNaU0E5SUdsdWMzUmhiR3hsWkUxdlpIVnNaWE5iYlc5a2RXeGxTV1JkSUQwZ2UxeHVJRngwWEhSY2RHazZJRzF2WkhWc1pVbGtMRnh1SUZ4MFhIUmNkR3c2SUdaaGJITmxMRnh1SUZ4MFhIUmNkR1Y0Y0c5eWRITTZJSHQ5TEZ4dUlGeDBYSFJjZEdodmREb2dhRzkwUTNKbFlYUmxUVzlrZFd4bEtHMXZaSFZzWlVsa0tTeGNiaUJjZEZ4MFhIUndZWEpsYm5Sek9pQW9hRzkwUTNWeWNtVnVkRkJoY21WdWRITlVaVzF3SUQwZ2FHOTBRM1Z5Y21WdWRGQmhjbVZ1ZEhNc0lHaHZkRU4xY25KbGJuUlFZWEpsYm5SeklEMGdXMTBzSUdodmRFTjFjbkpsYm5SUVlYSmxiblJ6VkdWdGNDa3NYRzRnWEhSY2RGeDBZMmhwYkdSeVpXNDZJRnRkWEc0Z1hIUmNkSDA3WEc1Y2JpQmNkRngwTHk4Z1JYaGxZM1YwWlNCMGFHVWdiVzlrZFd4bElHWjFibU4wYVc5dVhHNGdYSFJjZEcxdlpIVnNaWE5iYlc5a2RXeGxTV1JkTG1OaGJHd29iVzlrZFd4bExtVjRjRzl5ZEhNc0lHMXZaSFZzWlN3Z2JXOWtkV3hsTG1WNGNHOXlkSE1zSUdodmRFTnlaV0YwWlZKbGNYVnBjbVVvYlc5a2RXeGxTV1FwS1R0Y2JseHVJRngwWEhRdkx5QkdiR0ZuSUhSb1pTQnRiMlIxYkdVZ1lYTWdiRzloWkdWa1hHNGdYSFJjZEcxdlpIVnNaUzVzSUQwZ2RISjFaVHRjYmx4dUlGeDBYSFF2THlCU1pYUjFjbTRnZEdobElHVjRjRzl5ZEhNZ2IyWWdkR2hsSUcxdlpIVnNaVnh1SUZ4MFhIUnlaWFIxY200Z2JXOWtkV3hsTG1WNGNHOXlkSE03WEc0Z1hIUjlYRzVjYmx4dUlGeDBMeThnWlhod2IzTmxJSFJvWlNCdGIyUjFiR1Z6SUc5aWFtVmpkQ0FvWDE5M1pXSndZV05yWDIxdlpIVnNaWE5mWHlsY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YlNBOUlHMXZaSFZzWlhNN1hHNWNiaUJjZEM4dklHVjRjRzl6WlNCMGFHVWdiVzlrZFd4bElHTmhZMmhsWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbU1nUFNCcGJuTjBZV3hzWldSTmIyUjFiR1Z6TzF4dVhHNGdYSFF2THlCa1pXWnBibVVnWjJWMGRHVnlJR1oxYm1OMGFXOXVJR1p2Y2lCb1lYSnRiMjU1SUdWNGNHOXlkSE5jYmlCY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVaQ0E5SUdaMWJtTjBhVzl1S0dWNGNHOXlkSE1zSUc1aGJXVXNJR2RsZEhSbGNpa2dlMXh1SUZ4MFhIUnBaaWdoWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dktHVjRjRzl5ZEhNc0lHNWhiV1VwS1NCN1hHNGdYSFJjZEZ4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRzVoYldVc0lIc2daVzUxYldWeVlXSnNaVG9nZEhKMVpTd2daMlYwT2lCblpYUjBaWElnZlNrN1hHNGdYSFJjZEgxY2JpQmNkSDA3WEc1Y2JpQmNkQzh2SUdSbFptbHVaU0JmWDJWelRXOWtkV3hsSUc5dUlHVjRjRzl5ZEhOY2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1Y2lBOUlHWjFibU4wYVc5dUtHVjRjRzl5ZEhNcElIdGNiaUJjZEZ4MGFXWW9kSGx3Wlc5bUlGTjViV0p2YkNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ1UzbHRZbTlzTG5SdlUzUnlhVzVuVkdGbktTQjdYRzRnWEhSY2RGeDBUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZONWJXSnZiQzUwYjFOMGNtbHVaMVJoWnl3Z2V5QjJZV3gxWlRvZ0owMXZaSFZzWlNjZ2ZTazdYRzRnWEhSY2RIMWNiaUJjZEZ4MFQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJQ2RmWDJWelRXOWtkV3hsSnl3Z2V5QjJZV3gxWlRvZ2RISjFaU0I5S1R0Y2JpQmNkSDA3WEc1Y2JpQmNkQzh2SUdOeVpXRjBaU0JoSUdaaGEyVWdibUZ0WlhOd1lXTmxJRzlpYW1WamRGeHVJRngwTHk4Z2JXOWtaU0FtSURFNklIWmhiSFZsSUdseklHRWdiVzlrZFd4bElHbGtMQ0J5WlhGMWFYSmxJR2wwWEc0Z1hIUXZMeUJ0YjJSbElDWWdNam9nYldWeVoyVWdZV3hzSUhCeWIzQmxjblJwWlhNZ2IyWWdkbUZzZFdVZ2FXNTBieUIwYUdVZ2JuTmNiaUJjZEM4dklHMXZaR1VnSmlBME9pQnlaWFIxY200Z2RtRnNkV1VnZDJobGJpQmhiSEpsWVdSNUlHNXpJRzlpYW1WamRGeHVJRngwTHk4Z2JXOWtaU0FtSURoOE1Ub2dZbVZvWVhabElHeHBhMlVnY21WeGRXbHlaVnh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NTBJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXNJRzF2WkdVcElIdGNiaUJjZEZ4MGFXWW9iVzlrWlNBbUlERXBJSFpoYkhWbElEMGdYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeWgyWVd4MVpTazdYRzRnWEhSY2RHbG1LRzF2WkdVZ0ppQTRLU0J5WlhSMWNtNGdkbUZzZFdVN1hHNGdYSFJjZEdsbUtDaHRiMlJsSUNZZ05Da2dKaVlnZEhsd1pXOW1JSFpoYkhWbElEMDlQU0FuYjJKcVpXTjBKeUFtSmlCMllXeDFaU0FtSmlCMllXeDFaUzVmWDJWelRXOWtkV3hsS1NCeVpYUjFjbTRnZG1Gc2RXVTdYRzRnWEhSY2RIWmhjaUJ1Y3lBOUlFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDazdYRzRnWEhSY2RGOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVjaWh1Y3lrN1hHNGdYSFJjZEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHVjeXdnSjJSbFptRjFiSFFuTENCN0lHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc0lIWmhiSFZsT2lCMllXeDFaU0I5S1R0Y2JpQmNkRngwYVdZb2JXOWtaU0FtSURJZ0ppWWdkSGx3Wlc5bUlIWmhiSFZsSUNFOUlDZHpkSEpwYm1jbktTQm1iM0lvZG1GeUlHdGxlU0JwYmlCMllXeDFaU2tnWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1a0tHNXpMQ0JyWlhrc0lHWjFibU4wYVc5dUtHdGxlU2tnZXlCeVpYUjFjbTRnZG1Gc2RXVmJhMlY1WFRzZ2ZTNWlhVzVrS0c1MWJHd3NJR3RsZVNrcE8xeHVJRngwWEhSeVpYUjFjbTRnYm5NN1hHNGdYSFI5TzF4dVhHNGdYSFF2THlCblpYUkVaV1poZFd4MFJYaHdiM0owSUdaMWJtTjBhVzl1SUdadmNpQmpiMjF3WVhScFltbHNhWFI1SUhkcGRHZ2dibTl1TFdoaGNtMXZibmtnYlc5a2RXeGxjMXh1SUZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NXVJRDBnWm5WdVkzUnBiMjRvYlc5a2RXeGxLU0I3WEc0Z1hIUmNkSFpoY2lCblpYUjBaWElnUFNCdGIyUjFiR1VnSmlZZ2JXOWtkV3hsTGw5ZlpYTk5iMlIxYkdVZ1AxeHVJRngwWEhSY2RHWjFibU4wYVc5dUlHZGxkRVJsWm1GMWJIUW9LU0I3SUhKbGRIVnliaUJ0YjJSMWJHVmJKMlJsWm1GMWJIUW5YVHNnZlNBNlhHNGdYSFJjZEZ4MFpuVnVZM1JwYjI0Z1oyVjBUVzlrZFd4bFJYaHdiM0owY3lncElIc2djbVYwZFhKdUlHMXZaSFZzWlRzZ2ZUdGNiaUJjZEZ4MFgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5NWtLR2RsZEhSbGNpd2dKMkVuTENCblpYUjBaWElwTzF4dUlGeDBYSFJ5WlhSMWNtNGdaMlYwZEdWeU8xeHVJRngwZlR0Y2JseHVJRngwTHk4Z1QySnFaV04wTG5CeWIzUnZkSGx3WlM1b1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c1hHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG04Z1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRc0lIQnliM0JsY25SNUtTQjdJSEpsZEhWeWJpQlBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29iMkpxWldOMExDQndjbTl3WlhKMGVTazdJSDA3WEc1Y2JpQmNkQzh2SUY5ZmQyVmljR0ZqYTE5d2RXSnNhV05mY0dGMGFGOWZYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxuQWdQU0JjSWx3aU8xeHVYRzRnWEhRdkx5QmZYM2RsWW5CaFkydGZhR0Z6YUY5ZlhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1nZ1BTQm1kVzVqZEdsdmJpZ3BJSHNnY21WMGRYSnVJR2h2ZEVOMWNuSmxiblJJWVhOb095QjlPMXh1WEc1Y2JpQmNkQzh2SUV4dllXUWdaVzUwY25rZ2JXOWtkV3hsSUdGdVpDQnlaWFIxY200Z1pYaHdiM0owYzF4dUlGeDBjbVYwZFhKdUlHaHZkRU55WldGMFpWSmxjWFZwY21Vb1hDSXVMMmx1WkdWNExtcHpYQ0lwS0Y5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWN5QTlJRndpTGk5cGJtUmxlQzVxYzF3aUtUdGNiaUlzSWk4dklGSmxMV1Y0Y0c5eWRHVmtJRzF2WkhWc1pYTWdjbVZ4ZFdseVpXUWdabTl5SUZCUFV5QjJaVzVrYjNKelhHNWxlSEJ2Y25RZ2UxTndhWDBnWm5KdmJTQW5MaTl6Y21NdlUzQnBKenRjYm1WNGNHOXlkQ0I3VEc5bloyVnlmU0JtY205dElDY3VMM055WXk5TWIyZG5aWEluTzF4dVpYaHdiM0owSUh0VFpXTnlaWFJ6ZlNCbWNtOXRJQ2N1TDNOeVl5OVRaV055WlhSekp6dGNibVY0Y0c5eWRDQjdVM1ZqWTJWemMxTjBZWFJsZlNCbWNtOXRJQ2N1TDNOeVl5OU5aWE56WVdkbGN5YzdYRzVsZUhCdmNuUWdlMVJ5WVc1ellXTjBhVzl1VDNCMGFXOXVjeXdnVkhKaGJuTmhZM1JwYjI1VWVYQmxMQ0JUY0dsR2JHOTNMQ0JUY0dsVGRHRjBkWE45SUdaeWIyMGdKeTR2YzNKakwxTndhVTF2WkdWc2N5YzdYRzVsZUhCdmNuUWdlMUJ5YVc1MGFXNW5VbVZ6Y0c5dWMyVjlJR1p5YjIwZ0p5NHZjM0pqTDFCeWFXNTBhVzVuSnp0Y2JtVjRjRzl5ZENCN1VtVm1kVzVrVW1WemNHOXVjMlVzSUZCMWNtTm9ZWE5sVW1WemNHOXVjMlVzSUVkbGRFeGhjM1JVY21GdWMyRmpkR2x2YmxKbGMzQnZibk5sTENCTmIzUnZVSFZ5WTJoaGMyVlNaWE53YjI1elpYMGdabkp2YlNBbkxpOXpjbU12VUhWeVkyaGhjMlVuTzF4dVpYaHdiM0owSUh0VVpYSnRhVzVoYkZOMFlYUjFjMUpsYzNCdmJuTmxMQ0JVWlhKdGFXNWhiRUpoZEhSbGNubDlJR1p5YjIwZ0p5NHZjM0pqTDFSbGNtMXBibUZzVTNSaGRIVnpKenRjYm1WNGNHOXlkQ0I3UTJGemFHOTFkRTl1YkhsU1pYTndiMjV6WlgwZ1puSnZiU0FuTGk5emNtTXZRMkZ6YUc5MWRDYzdYRzVsZUhCdmNuUWdlMU5sZEhSc1pXMWxiblI5SUdaeWIyMGdKeTR2YzNKakwxTmxkSFJzWlcxbGJuUW5PMXh1Wlhod2IzSjBJSHRTWlhGMVpYTjBTV1JJWld4d1pYSjlJR1p5YjIwZ0p5NHZjM0pqTDFKbGNYVmxjM1JKWkVobGJIQmxjaWM3WEc1bGVIQnZjblFnZTBSbGRtbGpaVUZrWkhKbGMzTlNaWE53YjI1elpVTnZaR1Y5SUdaeWIyMGdKeTR2YzNKakwxTmxjblpwWTJVdlJHVjJhV05sVTJWeWRtbGpaU2M3WEc1bGVIQnZjblFnZTBKcGJHeFRkR0YwZFhOU1pYTndiMjV6WlN3Z1FtbHNiRkpsZEhKcFpYWmhiRkpsYzNWc2RDd2dSMlYwVDNCbGJsUmhZbXhsYzFKbGMzQnZibk5sTENCUGNHVnVWR0ZpYkdWelJXNTBjbmtzSUVKcGJHeFFZWGx0Wlc1MFJteHZkMFZ1WkdWa1VtVnpjRzl1YzJWOUlHWnliMjBnSnk0dmMzSmpMMUJoZVVGMFZHRmliR1VuTzF4dVpYaHdiM0owSUh0QlkyTnZkVzUwVm1WeWFXWjVVbVZ6Y0c5dWMyVXNJRkJ5WldGMWRHaFNaWE53YjI1elpYMGdabkp2YlNBbkxpOXpjbU12VUhKbFlYVjBhQ2M3WEc0aUxDSm1kVzVqZEdsdmJpQmhjM2x1WTBkbGJtVnlZWFJ2Y2xOMFpYQW9aMlZ1TENCeVpYTnZiSFpsTENCeVpXcGxZM1FzSUY5dVpYaDBMQ0JmZEdoeWIzY3NJR3RsZVN3Z1lYSm5LU0I3WEc0Z0lIUnllU0I3WEc0Z0lDQWdkbUZ5SUdsdVptOGdQU0JuWlc1YmEyVjVYU2hoY21jcE8xeHVJQ0FnSUhaaGNpQjJZV3gxWlNBOUlHbHVabTh1ZG1Gc2RXVTdYRzRnSUgwZ1kyRjBZMmdnS0dWeWNtOXlLU0I3WEc0Z0lDQWdjbVZxWldOMEtHVnljbTl5S1R0Y2JpQWdJQ0J5WlhSMWNtNDdYRzRnSUgxY2JseHVJQ0JwWmlBb2FXNW1ieTVrYjI1bEtTQjdYRzRnSUNBZ2NtVnpiMngyWlNoMllXeDFaU2s3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnVUhKdmJXbHpaUzV5WlhOdmJIWmxLSFpoYkhWbEtTNTBhR1Z1S0Y5dVpYaDBMQ0JmZEdoeWIzY3BPMXh1SUNCOVhHNTlYRzVjYm1aMWJtTjBhVzl1SUY5aGMzbHVZMVJ2UjJWdVpYSmhkRzl5S0dadUtTQjdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZG1GeUlITmxiR1lnUFNCMGFHbHpMRnh1SUNBZ0lDQWdJQ0JoY21keklEMGdZWEpuZFcxbGJuUnpPMXh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQjJZWElnWjJWdUlEMGdabTR1WVhCd2JIa29jMlZzWml3Z1lYSm5jeWs3WEc1Y2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUY5dVpYaDBLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJR0Z6ZVc1alIyVnVaWEpoZEc5eVUzUmxjQ2huWlc0c0lISmxjMjlzZG1Vc0lISmxhbVZqZEN3Z1gyNWxlSFFzSUY5MGFISnZkeXdnWENKdVpYaDBYQ0lzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWm5WdVkzUnBiMjRnWDNSb2NtOTNLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQmhjM2x1WTBkbGJtVnlZWFJ2Y2xOMFpYQW9aMlZ1TENCeVpYTnZiSFpsTENCeVpXcGxZM1FzSUY5dVpYaDBMQ0JmZEdoeWIzY3NJRndpZEdoeWIzZGNJaXdnWlhKeUtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdYMjVsZUhRb2RXNWtaV1pwYm1Wa0tUdGNiaUFnSUNCOUtUdGNiaUFnZlR0Y2JuMWNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JmWVhONWJtTlViMGRsYm1WeVlYUnZjanNpTENKbWRXNWpkR2x2YmlCZlkyeGhjM05EWVd4c1EyaGxZMnNvYVc1emRHRnVZMlVzSUVOdmJuTjBjblZqZEc5eUtTQjdYRzRnSUdsbUlDZ2hLR2x1YzNSaGJtTmxJR2x1YzNSaGJtTmxiMllnUTI5dWMzUnlkV04wYjNJcEtTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJa05oYm01dmRDQmpZV3hzSUdFZ1kyeGhjM01nWVhNZ1lTQm1kVzVqZEdsdmJsd2lLVHRjYmlBZ2ZWeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUY5amJHRnpjME5oYkd4RGFHVmphenNpTENKbWRXNWpkR2x2YmlCZlpHVm1hVzVsVUhKdmNHVnlkR2xsY3loMFlYSm5aWFFzSUhCeWIzQnpLU0I3WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djSEp2Y0hNdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQjJZWElnWkdWelkzSnBjSFJ2Y2lBOUlIQnliM0J6VzJsZE8xeHVJQ0FnSUdSbGMyTnlhWEIwYjNJdVpXNTFiV1Z5WVdKc1pTQTlJR1JsYzJOeWFYQjBiM0l1Wlc1MWJXVnlZV0pzWlNCOGZDQm1ZV3h6WlR0Y2JpQWdJQ0JrWlhOamNtbHdkRzl5TG1OdmJtWnBaM1Z5WVdKc1pTQTlJSFJ5ZFdVN1hHNGdJQ0FnYVdZZ0tGd2lkbUZzZFdWY0lpQnBiaUJrWlhOamNtbHdkRzl5S1NCa1pYTmpjbWx3ZEc5eUxuZHlhWFJoWW14bElEMGdkSEoxWlR0Y2JpQWdJQ0JQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHRnlaMlYwTENCa1pYTmpjbWx3ZEc5eUxtdGxlU3dnWkdWelkzSnBjSFJ2Y2lrN1hHNGdJSDFjYm4xY2JseHVablZ1WTNScGIyNGdYMk55WldGMFpVTnNZWE56S0VOdmJuTjBjblZqZEc5eUxDQndjbTkwYjFCeWIzQnpMQ0J6ZEdGMGFXTlFjbTl3Y3lrZ2UxeHVJQ0JwWmlBb2NISnZkRzlRY205d2N5a2dYMlJsWm1sdVpWQnliM0JsY25ScFpYTW9RMjl1YzNSeWRXTjBiM0l1Y0hKdmRHOTBlWEJsTENCd2NtOTBiMUJ5YjNCektUdGNiaUFnYVdZZ0tITjBZWFJwWTFCeWIzQnpLU0JmWkdWbWFXNWxVSEp2Y0dWeWRHbGxjeWhEYjI1emRISjFZM1J2Y2l3Z2MzUmhkR2xqVUhKdmNITXBPMXh1SUNCeVpYUjFjbTRnUTI5dWMzUnlkV04wYjNJN1hHNTlYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWDJOeVpXRjBaVU5zWVhOek95SXNJbVoxYm1OMGFXOXVJRjl5WldGa1QyNXNlVVZ5Y205eUtHNWhiV1VwSUh0Y2JpQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lYRnhjSWx3aUlDc2dibUZ0WlNBcklGd2lYRnhjSWlCcGN5QnlaV0ZrTFc5dWJIbGNJaWs3WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdYM0psWVdSUGJteDVSWEp5YjNJN0lpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtGd2ljbVZuWlc1bGNtRjBiM0l0Y25WdWRHbHRaVndpS1R0Y2JpSXNJaThxSVNCTlNWUWdUR2xqWlc1elpTNGdRMjl3ZVhKcFoyaDBJREl3TVRVdE1qQXhPQ0JTYVdOb1lYSmtJRTF2YjNKbElEeHRaVUJ5YVdOdGIyOHVZMjl0UGk0Z1UyVmxJRXhKUTBWT1UwVXVkSGgwTGlBcUwxeHVLR1oxYm1OMGFXOXVLSEp2YjNRcElIdGNiaUFnSUNCY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dUlDQWdJR1oxYm1OMGFXOXVJR05vWldOclNXNTBLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQW9jR0Z5YzJWSmJuUW9kbUZzZFdVcElEMDlQU0IyWVd4MVpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z1kyaGxZMnRKYm5SektHRnljbUY1YVhOb0tTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaFkyaGxZMnRKYm5Rb1lYSnlZWGxwYzJndWJHVnVaM1JvS1NrZ2V5QnlaWFIxY200Z1ptRnNjMlU3SUgxY2JseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0Z5Y21GNWFYTm9MbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXTm9aV05yU1c1MEtHRnljbUY1YVhOb1cybGRLU0I4ZkNCaGNuSmhlV2x6YUZ0cFhTQThJREFnZkh3Z1lYSnlZWGxwYzJoYmFWMGdQaUF5TlRVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCbWRXNWpkR2x2YmlCamIyVnlZMlZCY25KaGVTaGhjbWNzSUdOdmNIa3BJSHRjYmx4dUlDQWdJQ0FnSUNBdkx5QkJjbkpoZVVKMVptWmxjaUIyYVdWM1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoY21jdVluVm1abVZ5SUNZbUlHRnlaeTV1WVcxbElEMDlQU0FuVldsdWREaEJjbkpoZVNjcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR052Y0hrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVhKbkxuTnNhV05sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z5WnlBOUlHRnlaeTV6YkdsalpTZ3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGeVp5QTlJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNXpiR2xqWlM1allXeHNLR0Z5WnlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWEpuTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnU1hRbmN5QmhiaUJoY25KaGVUc2dZMmhsWTJzZ2FYUWdhWE1nWVNCMllXeHBaQ0J5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUJoSUdKNWRHVmNiaUFnSUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29ZWEpuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmphR1ZqYTBsdWRITW9ZWEpuS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblFYSnlZWGtnWTI5dWRHRnBibk1nYVc1MllXeHBaQ0IyWVd4MVpUb2dKeUFySUdGeVp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1ZXbHVkRGhCY25KaGVTaGhjbWNwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnVTI5dFpYUm9hVzVuSUdWc2MyVXNJR0oxZENCaVpXaGhkbVZ6SUd4cGEyVWdZVzRnWVhKeVlYa2dLRzFoZVdKbElHRWdRblZtWm1WeVB5QkJjbWQxYldWdWRITS9LVnh1SUNBZ0lDQWdJQ0JwWmlBb1kyaGxZMnRKYm5Rb1lYSm5MbXhsYm1kMGFDa2dKaVlnWTJobFkydEpiblJ6S0dGeVp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dWV2x1ZERoQmNuSmhlU2hoY21jcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2QxYm5OMWNIQnZjblJsWkNCaGNuSmhlUzFzYVd0bElHOWlhbVZqZENjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdaMWJtTjBhVzl1SUdOeVpXRjBaVUZ5Y21GNUtHeGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRlZwYm5RNFFYSnlZWGtvYkdWdVozUm9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQm1kVzVqZEdsdmJpQmpiM0I1UVhKeVlYa29jMjkxY21ObFFYSnlZWGtzSUhSaGNtZGxkRUZ5Y21GNUxDQjBZWEpuWlhSVGRHRnlkQ3dnYzI5MWNtTmxVM1JoY25Rc0lITnZkWEpqWlVWdVpDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyOTFjbU5sVTNSaGNuUWdJVDBnYm5Wc2JDQjhmQ0J6YjNWeVkyVkZibVFnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hOdmRYSmpaVUZ5Y21GNUxuTnNhV05sS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyOTFjbU5sUVhKeVlYa2dQU0J6YjNWeVkyVkJjbkpoZVM1emJHbGpaU2h6YjNWeVkyVlRkR0Z5ZEN3Z2MyOTFjbU5sUlc1a0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWNtTmxRWEp5WVhrZ1BTQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMyeHBZMlV1WTJGc2JDaHpiM1Z5WTJWQmNuSmhlU3dnYzI5MWNtTmxVM1JoY25Rc0lITnZkWEpqWlVWdVpDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR0Z5WjJWMFFYSnlZWGt1YzJWMEtITnZkWEpqWlVGeWNtRjVMQ0IwWVhKblpYUlRkR0Z5ZENrN1hHNGdJQ0FnZlZ4dVhHNWNibHh1SUNBZ0lIWmhjaUJqYjI1MlpYSjBWWFJtT0NBOUlDaG1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnZEc5Q2VYUmxjeWgwWlhoMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdXMTBzSUdrZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHVjRkQ0E5SUdWdVkyOWtaVlZTU1NoMFpYaDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZG9hV3hsSUNocElEd2dkR1Y0ZEM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZeUE5SUhSbGVIUXVZMmhoY2tOdlpHVkJkQ2hwS3lzcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYVdZZ2FYUWdhWE1nWVNBbElITnBaMjRzSUdWdVkyOWtaU0IwYUdVZ1ptOXNiRzkzYVc1bklESWdZbmwwWlhNZ1lYTWdZU0JvWlhnZ2RtRnNkV1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1l5QTlQVDBnTXpjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbkIxYzJnb2NHRnljMlZKYm5Rb2RHVjRkQzV6ZFdKemRISW9hU3dnTWlrc0lERTJLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTQXJQU0F5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdiM1JvWlhKM2FYTmxMQ0JxZFhOMElIUm9aU0JoWTNSMVlXd2dZbmwwWlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjM1ZzZEM1d2RYTm9LR01wWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyOWxjbU5sUVhKeVlYa29jbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUdaeWIyMUNlWFJsY3loaWVYUmxjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUZ0ZExDQnBJRDBnTUR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZDJocGJHVWdLR2tnUENCaWVYUmxjeTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1l5QTlJR0o1ZEdWelcybGRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTWdQQ0F4TWpncElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbkIxYzJnb1UzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTaGpLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHa3JLenRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dNZ1BpQXhPVEVnSmlZZ1l5QThJREl5TkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUXVjSFZ6YUNoVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtDZ29ZeUFtSURCNE1XWXBJRHc4SURZcElId2dLR0o1ZEdWelcya2dLeUF4WFNBbUlEQjRNMllwS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tnS3owZ01qdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUXVjSFZ6YUNoVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtDZ29ZeUFtSURCNE1HWXBJRHc4SURFeUtTQjhJQ2dvWW5sMFpYTmJhU0FySURGZElDWWdNSGd6WmlrZ1BEd2dOaWtnZkNBb1lubDBaWE5iYVNBcklESmRJQ1lnTUhnelppa3BLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTQXJQU0F6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZEM1cWIybHVLQ2NuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGIwSjVkR1Z6T2lCMGIwSjVkR1Z6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdabkp2YlVKNWRHVnpPaUJtY205dFFubDBaWE1zWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5S1NncE8xeHVYRzRnSUNBZ2RtRnlJR052Ym5abGNuUklaWGdnUFNBb1puVnVZM1JwYjI0b0tTQjdYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJSFJ2UW5sMFpYTW9kR1Y0ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlGdGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBaWGgwTG14bGJtZDBhRHNnYVNBclBTQXlLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBMbkIxYzJnb2NHRnljMlZKYm5Rb2RHVjRkQzV6ZFdKemRISW9hU3dnTWlrc0lERTJLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQXZMeUJvZEhSd09pOHZhWGgwYVM1dVpYUXZaR1YyWld4dmNHMWxiblF2YW1GMllYTmpjbWx3ZEM4eU1ERXhMekV4THpFeEwySmhjMlUyTkMxbGJtTnZaR1ZrWldOdlpHVXRiMll0ZFhSbU9DMXBiaTFpY205M2MyVnlMWGRwZEdndGFuTXVhSFJ0YkZ4dUlDQWdJQ0FnSUNCMllYSWdTR1Y0SUQwZ0p6QXhNak0wTlRZM09EbGhZbU5rWldZbk8xeHVYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR1p5YjIxQ2VYUmxjeWhpZVhSbGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpYTjFiSFFnUFNCYlhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0o1ZEdWekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIySUQwZ1lubDBaWE5iYVYwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDNXdkWE5vS0VobGVGc29kaUFtSURCNFpqQXBJRDQrSURSZElDc2dTR1Y0VzNZZ0ppQXdlREJtWFNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFF1YW05cGJpZ25KeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5Q2VYUmxjem9nZEc5Q2VYUmxjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnliMjFDZVhSbGN6b2dabkp2YlVKNWRHVnpMRnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU2tvS1R0Y2JseHVYRzRnSUNBZ0x5OGdUblZ0WW1WeUlHOW1JSEp2ZFc1a2N5QmllU0JyWlhsemFYcGxYRzRnSUNBZ2RtRnlJRzUxYldKbGNrOW1VbTkxYm1SeklEMGdlekUyT2lBeE1Dd2dNalE2SURFeUxDQXpNam9nTVRSOVhHNWNiaUFnSUNBdkx5QlNiM1Z1WkNCamIyNXpkR0Z1ZENCM2IzSmtjMXh1SUNBZ0lIWmhjaUJ5WTI5dUlEMGdXekI0TURFc0lEQjRNRElzSURCNE1EUXNJREI0TURnc0lEQjRNVEFzSURCNE1qQXNJREI0TkRBc0lEQjRPREFzSURCNE1XSXNJREI0TXpZc0lEQjRObU1zSURCNFpEZ3NJREI0WVdJc0lEQjROR1FzSURCNE9XRXNJREI0TW1Zc0lEQjROV1VzSURCNFltTXNJREI0TmpNc0lEQjRZellzSURCNE9UY3NJREI0TXpVc0lEQjRObUVzSURCNFpEUXNJREI0WWpNc0lEQjROMlFzSURCNFptRXNJREI0WldZc0lEQjRZelVzSURCNE9URmRPMXh1WEc0Z0lDQWdMeThnVXkxaWIzZ2dZVzVrSUVsdWRtVnljMlVnVXkxaWIzZ2dLRk1nYVhNZ1ptOXlJRk4xWW5OMGFYUjFkR2x2YmlsY2JpQWdJQ0IyWVhJZ1V5QTlJRnN3ZURZekxDQXdlRGRqTENBd2VEYzNMQ0F3ZURkaUxDQXdlR1l5TENBd2VEWmlMQ0F3ZURabUxDQXdlR00xTENBd2VETXdMQ0F3ZURBeExDQXdlRFkzTENBd2VESmlMQ0F3ZUdabExDQXdlR1EzTENBd2VHRmlMQ0F3ZURjMkxDQXdlR05oTENBd2VEZ3lMQ0F3ZUdNNUxDQXdlRGRrTENBd2VHWmhMQ0F3ZURVNUxDQXdlRFEzTENBd2VHWXdMQ0F3ZUdGa0xDQXdlR1EwTENBd2VHRXlMQ0F3ZUdGbUxDQXdlRGxqTENBd2VHRTBMQ0F3ZURjeUxDQXdlR013TENBd2VHSTNMQ0F3ZUdaa0xDQXdlRGt6TENBd2VESTJMQ0F3ZURNMkxDQXdlRE5tTENBd2VHWTNMQ0F3ZUdOakxDQXdlRE0wTENBd2VHRTFMQ0F3ZUdVMUxDQXdlR1l4TENBd2VEY3hMQ0F3ZUdRNExDQXdlRE14TENBd2VERTFMQ0F3ZURBMExDQXdlR00zTENBd2VESXpMQ0F3ZUdNekxDQXdlREU0TENBd2VEazJMQ0F3ZURBMUxDQXdlRGxoTENBd2VEQTNMQ0F3ZURFeUxDQXdlRGd3TENBd2VHVXlMQ0F3ZUdWaUxDQXdlREkzTENBd2VHSXlMQ0F3ZURjMUxDQXdlREE1TENBd2VEZ3pMQ0F3ZURKakxDQXdlREZoTENBd2VERmlMQ0F3ZURabExDQXdlRFZoTENBd2VHRXdMQ0F3ZURVeUxDQXdlRE5pTENBd2VHUTJMQ0F3ZUdJekxDQXdlREk1TENBd2VHVXpMQ0F3ZURKbUxDQXdlRGcwTENBd2VEVXpMQ0F3ZUdReExDQXdlREF3TENBd2VHVmtMQ0F3ZURJd0xDQXdlR1pqTENBd2VHSXhMQ0F3ZURWaUxDQXdlRFpoTENBd2VHTmlMQ0F3ZUdKbExDQXdlRE01TENBd2VEUmhMQ0F3ZURSakxDQXdlRFU0TENBd2VHTm1MQ0F3ZUdRd0xDQXdlR1ZtTENBd2VHRmhMQ0F3ZUdaaUxDQXdlRFF6TENBd2VEUmtMQ0F3ZURNekxDQXdlRGcxTENBd2VEUTFMQ0F3ZUdZNUxDQXdlREF5TENBd2VEZG1MQ0F3ZURVd0xDQXdlRE5qTENBd2VEbG1MQ0F3ZUdFNExDQXdlRFV4TENBd2VHRXpMQ0F3ZURRd0xDQXdlRGhtTENBd2VEa3lMQ0F3ZURsa0xDQXdlRE00TENBd2VHWTFMQ0F3ZUdKakxDQXdlR0kyTENBd2VHUmhMQ0F3ZURJeExDQXdlREV3TENBd2VHWm1MQ0F3ZUdZekxDQXdlR1F5TENBd2VHTmtMQ0F3ZURCakxDQXdlREV6TENBd2VHVmpMQ0F3ZURWbUxDQXdlRGszTENBd2VEUTBMQ0F3ZURFM0xDQXdlR00wTENBd2VHRTNMQ0F3ZURkbExDQXdlRE5rTENBd2VEWTBMQ0F3ZURWa0xDQXdlREU1TENBd2VEY3pMQ0F3ZURZd0xDQXdlRGd4TENBd2VEUm1MQ0F3ZUdSakxDQXdlREl5TENBd2VESmhMQ0F3ZURrd0xDQXdlRGc0TENBd2VEUTJMQ0F3ZUdWbExDQXdlR0k0TENBd2VERTBMQ0F3ZUdSbExDQXdlRFZsTENBd2VEQmlMQ0F3ZUdSaUxDQXdlR1V3TENBd2VETXlMQ0F3ZUROaExDQXdlREJoTENBd2VEUTVMQ0F3ZURBMkxDQXdlREkwTENBd2VEVmpMQ0F3ZUdNeUxDQXdlR1F6TENBd2VHRmpMQ0F3ZURZeUxDQXdlRGt4TENBd2VEazFMQ0F3ZUdVMExDQXdlRGM1TENBd2VHVTNMQ0F3ZUdNNExDQXdlRE0zTENBd2VEWmtMQ0F3ZURoa0xDQXdlR1ExTENBd2VEUmxMQ0F3ZUdFNUxDQXdlRFpqTENBd2VEVTJMQ0F3ZUdZMExDQXdlR1ZoTENBd2VEWTFMQ0F3ZURkaExDQXdlR0ZsTENBd2VEQTRMQ0F3ZUdKaExDQXdlRGM0TENBd2VESTFMQ0F3ZURKbExDQXdlREZqTENBd2VHRTJMQ0F3ZUdJMExDQXdlR00yTENBd2VHVTRMQ0F3ZUdSa0xDQXdlRGMwTENBd2VERm1MQ0F3ZURSaUxDQXdlR0prTENBd2VEaGlMQ0F3ZURoaExDQXdlRGN3TENBd2VETmxMQ0F3ZUdJMUxDQXdlRFkyTENBd2VEUTRMQ0F3ZURBekxDQXdlR1kyTENBd2VEQmxMQ0F3ZURZeExDQXdlRE0xTENBd2VEVTNMQ0F3ZUdJNUxDQXdlRGcyTENBd2VHTXhMQ0F3ZURGa0xDQXdlRGxsTENBd2VHVXhMQ0F3ZUdZNExDQXdlRGs0TENBd2VERXhMQ0F3ZURZNUxDQXdlR1E1TENBd2VEaGxMQ0F3ZURrMExDQXdlRGxpTENBd2VERmxMQ0F3ZURnM0xDQXdlR1U1TENBd2VHTmxMQ0F3ZURVMUxDQXdlREk0TENBd2VHUm1MQ0F3ZURoakxDQXdlR0V4TENBd2VEZzVMQ0F3ZURCa0xDQXdlR0ptTENBd2VHVTJMQ0F3ZURReUxDQXdlRFk0TENBd2VEUXhMQ0F3ZURrNUxDQXdlREprTENBd2VEQm1MQ0F3ZUdJd0xDQXdlRFUwTENBd2VHSmlMQ0F3ZURFMlhUdGNiaUFnSUNCMllYSWdVMmtnUFZzd2VEVXlMQ0F3ZURBNUxDQXdlRFpoTENBd2VHUTFMQ0F3ZURNd0xDQXdlRE0yTENBd2VHRTFMQ0F3ZURNNExDQXdlR0ptTENBd2VEUXdMQ0F3ZUdFekxDQXdlRGxsTENBd2VEZ3hMQ0F3ZUdZekxDQXdlR1EzTENBd2VHWmlMQ0F3ZURkakxDQXdlR1V6TENBd2VETTVMQ0F3ZURneUxDQXdlRGxpTENBd2VESm1MQ0F3ZUdabUxDQXdlRGczTENBd2VETTBMQ0F3ZURobExDQXdlRFF6TENBd2VEUTBMQ0F3ZUdNMExDQXdlR1JsTENBd2VHVTVMQ0F3ZUdOaUxDQXdlRFUwTENBd2VEZGlMQ0F3ZURrMExDQXdlRE15TENBd2VHRTJMQ0F3ZUdNeUxDQXdlREl6TENBd2VETmtMQ0F3ZUdWbExDQXdlRFJqTENBd2VEazFMQ0F3ZURCaUxDQXdlRFF5TENBd2VHWmhMQ0F3ZUdNekxDQXdlRFJsTENBd2VEQTRMQ0F3ZURKbExDQXdlR0V4TENBd2VEWTJMQ0F3ZURJNExDQXdlR1E1TENBd2VESTBMQ0F3ZUdJeUxDQXdlRGMyTENBd2VEVmlMQ0F3ZUdFeUxDQXdlRFE1TENBd2VEWmtMQ0F3ZURoaUxDQXdlR1F4TENBd2VESTFMQ0F3ZURjeUxDQXdlR1k0TENBd2VHWTJMQ0F3ZURZMExDQXdlRGcyTENBd2VEWTRMQ0F3ZURrNExDQXdlREUyTENBd2VHUTBMQ0F3ZUdFMExDQXdlRFZqTENBd2VHTmpMQ0F3ZURWa0xDQXdlRFkxTENBd2VHSTJMQ0F3ZURreUxDQXdlRFpqTENBd2VEY3dMQ0F3ZURRNExDQXdlRFV3TENBd2VHWmtMQ0F3ZUdWa0xDQXdlR0k1TENBd2VHUmhMQ0F3ZURWbExDQXdlREUxTENBd2VEUTJMQ0F3ZURVM0xDQXdlR0UzTENBd2VEaGtMQ0F3ZURsa0xDQXdlRGcwTENBd2VEa3dMQ0F3ZUdRNExDQXdlR0ZpTENBd2VEQXdMQ0F3ZURoakxDQXdlR0pqTENBd2VHUXpMQ0F3ZURCaExDQXdlR1kzTENBd2VHVTBMQ0F3ZURVNExDQXdlREExTENBd2VHSTRMQ0F3ZUdJekxDQXdlRFExTENBd2VEQTJMQ0F3ZUdRd0xDQXdlREpqTENBd2VERmxMQ0F3ZURobUxDQXdlR05oTENBd2VETm1MQ0F3ZURCbUxDQXdlREF5TENBd2VHTXhMQ0F3ZUdGbUxDQXdlR0prTENBd2VEQXpMQ0F3ZURBeExDQXdlREV6TENBd2VEaGhMQ0F3ZURaaUxDQXdlRE5oTENBd2VEa3hMQ0F3ZURFeExDQXdlRFF4TENBd2VEUm1MQ0F3ZURZM0xDQXdlR1JqTENBd2VHVmhMQ0F3ZURrM0xDQXdlR1l5TENBd2VHTm1MQ0F3ZUdObExDQXdlR1l3TENBd2VHSTBMQ0F3ZUdVMkxDQXdlRGN6TENBd2VEazJMQ0F3ZUdGakxDQXdlRGMwTENBd2VESXlMQ0F3ZUdVM0xDQXdlR0ZrTENBd2VETTFMQ0F3ZURnMUxDQXdlR1V5TENBd2VHWTVMQ0F3ZURNM0xDQXdlR1U0TENBd2VERmpMQ0F3ZURjMUxDQXdlR1JtTENBd2VEWmxMQ0F3ZURRM0xDQXdlR1l4TENBd2VERmhMQ0F3ZURjeExDQXdlREZrTENBd2VESTVMQ0F3ZUdNMUxDQXdlRGc1TENBd2VEWm1MQ0F3ZUdJM0xDQXdlRFl5TENBd2VEQmxMQ0F3ZUdGaExDQXdlREU0TENBd2VHSmxMQ0F3ZURGaUxDQXdlR1pqTENBd2VEVTJMQ0F3ZURObExDQXdlRFJpTENBd2VHTTJMQ0F3ZUdReUxDQXdlRGM1TENBd2VESXdMQ0F3ZURsaExDQXdlR1JpTENBd2VHTXdMQ0F3ZUdabExDQXdlRGM0TENBd2VHTmtMQ0F3ZURWaExDQXdlR1kwTENBd2VERm1MQ0F3ZUdSa0xDQXdlR0U0TENBd2VETXpMQ0F3ZURnNExDQXdlREEzTENBd2VHTTNMQ0F3ZURNeExDQXdlR0l4TENBd2VERXlMQ0F3ZURFd0xDQXdlRFU1TENBd2VESTNMQ0F3ZURnd0xDQXdlR1ZqTENBd2VEVm1MQ0F3ZURZd0xDQXdlRFV4TENBd2VEZG1MQ0F3ZUdFNUxDQXdlREU1TENBd2VHSTFMQ0F3ZURSaExDQXdlREJrTENBd2VESmtMQ0F3ZUdVMUxDQXdlRGRoTENBd2VEbG1MQ0F3ZURrekxDQXdlR001TENBd2VEbGpMQ0F3ZUdWbUxDQXdlR0V3TENBd2VHVXdMQ0F3ZUROaUxDQXdlRFJrTENBd2VHRmxMQ0F3ZURKaExDQXdlR1kxTENBd2VHSXdMQ0F3ZUdNNExDQXdlR1ZpTENBd2VHSmlMQ0F3ZUROakxDQXdlRGd6TENBd2VEVXpMQ0F3ZURrNUxDQXdlRFl4TENBd2VERTNMQ0F3ZURKaUxDQXdlREEwTENBd2VEZGxMQ0F3ZUdKaExDQXdlRGMzTENBd2VHUTJMQ0F3ZURJMkxDQXdlR1V4TENBd2VEWTVMQ0F3ZURFMExDQXdlRFl6TENBd2VEVTFMQ0F3ZURJeExDQXdlREJqTENBd2VEZGtYVHRjYmx4dUlDQWdJQzh2SUZSeVlXNXpabTl5YldGMGFXOXVjeUJtYjNJZ1pXNWpjbmx3ZEdsdmJseHVJQ0FnSUhaaGNpQlVNU0E5SUZzd2VHTTJOak0yTTJFMUxDQXdlR1k0TjJNM1l6ZzBMQ0F3ZUdWbE56YzNOems1TENBd2VHWTJOMkkzWWpoa0xDQXdlR1ptWmpKbU1qQmtMQ0F3ZUdRMk5tSTJZbUprTENBd2VHUmxObVkyWm1JeExDQXdlRGt4WXpWak5UVTBMQ0F3ZURZd016QXpNRFV3TENBd2VEQXlNREV3TVRBekxDQXdlR05sTmpjMk4yRTVMQ0F3ZURVMk1tSXlZamRrTENBd2VHVTNabVZtWlRFNUxDQXdlR0kxWkRka056WXlMQ0F3ZURSa1lXSmhZbVUyTENBd2VHVmpOelkzTmpsaExDQXdlRGhtWTJGallUUTFMQ0F3ZURGbU9ESTRNamxrTENBd2VEZzVZemxqT1RRd0xDQXdlR1poTjJRM1pEZzNMQ0F3ZUdWbVptRm1ZVEUxTENBd2VHSXlOVGsxT1dWaUxDQXdlRGhsTkRjME4yTTVMQ0F3ZUdaaVpqQm1NREJpTENBd2VEUXhZV1JoWkdWakxDQXdlR0l6WkRSa05EWTNMQ0F3ZURWbVlUSmhNbVprTENBd2VEUTFZV1poWm1WaExDQXdlREl6T1dNNVkySm1MQ0F3ZURVellUUmhOR1kzTENBd2VHVTBOekkzTWprMkxDQXdlRGxpWXpCak1EVmlMQ0F3ZURjMVlqZGlOMk15TENBd2VHVXhabVJtWkRGakxDQXdlRE5rT1RNNU0yRmxMQ0F3ZURSak1qWXlOalpoTENBd2VEWmpNell6TmpWaExDQXdlRGRsTTJZelpqUXhMQ0F3ZUdZMVpqZG1OekF5TENBd2VEZ3pZMk5qWXpSbUxDQXdlRFk0TXpRek5EVmpMQ0F3ZURVeFlUVmhOV1kwTENBd2VHUXhaVFZsTlRNMExDQXdlR1k1WmpGbU1UQTRMQ0F3ZUdVeU56RTNNVGt6TENBd2VHRmlaRGhrT0RjekxDQXdlRFl5TXpFek1UVXpMQ0F3ZURKaE1UVXhOVE5tTENBd2VEQTRNRFF3TkRCakxDQXdlRGsxWXpkak56VXlMQ0F3ZURRMk1qTXlNelkxTENBd2VEbGtZek5qTXpWbExDQXdlRE13TVRneE9ESTRMQ0F3ZURNM09UWTVObUV4TENBd2VEQmhNRFV3TlRCbUxDQXdlREptT1dFNVlXSTFMQ0F3ZURCbE1EY3dOekE1TENBd2VESTBNVEl4TWpNMkxDQXdlREZpT0RBNE1EbGlMQ0F3ZUdSbVpUSmxNak5rTENBd2VHTmtaV0psWWpJMkxDQXdlRFJsTWpjeU56WTVMQ0F3ZURkbVlqSmlNbU5rTENBd2VHVmhOelUzTlRsbUxDQXdlREV5TURrd09URmlMQ0F3ZURGa09ETTRNemxsTENBd2VEVTRNbU15WXpjMExDQXdlRE0wTVdFeFlUSmxMQ0F3ZURNMk1XSXhZakprTENBd2VHUmpObVUyWldJeUxDQXdlR0kwTldFMVlXVmxMQ0F3ZURWaVlUQmhNR1ppTENBd2VHRTBOVEkxTW1ZMkxDQXdlRGMyTTJJellqUmtMQ0F3ZUdJM1pEWmtOall4TENBd2VEZGtZak5pTTJObExDQXdlRFV5TWpreU9UZGlMQ0F3ZUdSa1pUTmxNek5sTENBd2VEVmxNbVl5WmpjeExDQXdlREV6T0RRNE5EazNMQ0F3ZUdFMk5UTTFNMlkxTENBd2VHSTVaREZrTVRZNExDQXdlREF3TURBd01EQXdMQ0F3ZUdNeFpXUmxaREpqTENBd2VEUXdNakF5TURZd0xDQXdlR1V6Wm1ObVl6Rm1MQ0F3ZURjNVlqRmlNV000TENBd2VHSTJOV0kxWW1Wa0xDQXdlR1EwTm1FMllXSmxMQ0F3ZURoa1kySmpZalEyTENBd2VEWTNZbVZpWldRNUxDQXdlRGN5TXprek9UUmlMQ0F3ZURrME5HRTBZV1JsTENBd2VEazROR00wWTJRMExDQXdlR0l3TlRnMU9HVTRMQ0F3ZURnMVkyWmpaalJoTENBd2VHSmlaREJrTURaaUxDQXdlR00xWldabFpqSmhMQ0F3ZURSbVlXRmhZV1UxTENBd2VHVmtabUptWWpFMkxDQXdlRGcyTkRNME0yTTFMQ0F3ZURsaE5HUTBaR1EzTENBd2VEWTJNek16TXpVMUxDQXdlREV4T0RVNE5UazBMQ0F3ZURoaE5EVTBOV05tTENBd2VHVTVaamxtT1RFd0xDQXdlREEwTURJd01qQTJMQ0F3ZUdabE4yWTNaamd4TENBd2VHRXdOVEExTUdZd0xDQXdlRGM0TTJNell6UTBMQ0F3ZURJMU9XWTVabUpoTENBd2VEUmlZVGhoT0dVekxDQXdlR0V5TlRFMU1XWXpMQ0F3ZURWa1lUTmhNMlpsTENBd2VEZ3dOREEwTUdNd0xDQXdlREExT0dZNFpqaGhMQ0F3ZURObU9USTVNbUZrTENBd2VESXhPV1E1WkdKakxDQXdlRGN3TXpnek9EUTRMQ0F3ZUdZeFpqVm1OVEEwTENBd2VEWXpZbU5pWTJSbUxDQXdlRGMzWWpaaU5tTXhMQ0F3ZUdGbVpHRmtZVGMxTENBd2VEUXlNakV5TVRZekxDQXdlREl3TVRBeE1ETXdMQ0F3ZUdVMVptWm1aakZoTENBd2VHWmtaak5tTXpCbExDQXdlR0ptWkRKa01qWmtMQ0F3ZURneFkyUmpaRFJqTENBd2VERTRNR013WXpFMExDQXdlREkyTVRNeE16TTFMQ0F3ZUdNelpXTmxZekptTENBd2VHSmxOV1kxWm1VeExDQXdlRE0xT1RjNU4yRXlMQ0F3ZURnNE5EUTBOR05qTENBd2VESmxNVGN4TnpNNUxDQXdlRGt6WXpSak5EVTNMQ0F3ZURVMVlUZGhOMll5TENBd2VHWmpOMlUzWlRneUxDQXdlRGRoTTJRelpEUTNMQ0F3ZUdNNE5qUTJOR0ZqTENBd2VHSmhOV1ExWkdVM0xDQXdlRE15TVRreE9USmlMQ0F3ZUdVMk56TTNNemsxTENBd2VHTXdOakEyTUdFd0xDQXdlREU1T0RFNE1UazRMQ0F3ZURsbE5HWTBabVF4TENBd2VHRXpaR05rWXpkbUxDQXdlRFEwTWpJeU1qWTJMQ0F3ZURVME1tRXlZVGRsTENBd2VETmlPVEE1TUdGaUxDQXdlREJpT0RnNE9EZ3pMQ0F3ZURoak5EWTBObU5oTENBd2VHTTNaV1ZsWlRJNUxDQXdlRFppWWpoaU9HUXpMQ0F3ZURJNE1UUXhORE5qTENBd2VHRTNaR1ZrWlRjNUxDQXdlR0pqTldVMVpXVXlMQ0F3ZURFMk1HSXdZakZrTENBd2VHRmtaR0prWWpjMkxDQXdlR1JpWlRCbE1ETmlMQ0F3ZURZME16SXpNalUyTENBd2VEYzBNMkV6WVRSbExDQXdlREUwTUdFd1lURmxMQ0F3ZURreU5EazBPV1JpTENBd2VEQmpNRFl3TmpCaExDQXdlRFE0TWpReU5EWmpMQ0F3ZUdJNE5XTTFZMlUwTENBd2VEbG1ZekpqTWpWa0xDQXdlR0prWkROa016WmxMQ0F3ZURRellXTmhZMlZtTENBd2VHTTBOakkyTW1FMkxDQXdlRE01T1RFNU1XRTRMQ0F3ZURNeE9UVTVOV0UwTENBd2VHUXpaVFJsTkRNM0xDQXdlR1l5TnprM09UaGlMQ0F3ZUdRMVpUZGxOek15TENBd2VEaGlZemhqT0RRekxDQXdlRFpsTXpjek56VTVMQ0F3ZUdSaE5tUTJaR0kzTENBd2VEQXhPR1E0WkRoakxDQXdlR0l4WkRWa05UWTBMQ0F3ZURsak5HVTBaV1F5TENBd2VEUTVZVGxoT1dVd0xDQXdlR1E0Tm1NMlkySTBMQ0F3ZUdGak5UWTFObVpoTENBd2VHWXpaalJtTkRBM0xDQXdlR05tWldGbFlUSTFMQ0F3ZUdOaE5qVTJOV0ZtTENBd2VHWTBOMkUzWVRobExDQXdlRFEzWVdWaFpXVTVMQ0F3ZURFd01EZ3dPREU0TENBd2VEWm1ZbUZpWVdRMUxDQXdlR1l3TnpnM09EZzRMQ0F3ZURSaE1qVXlOVFptTENBd2VEVmpNbVV5WlRjeUxDQXdlRE00TVdNeFl6STBMQ0F3ZURVM1lUWmhObVl4TENBd2VEY3pZalJpTkdNM0xDQXdlRGszWXpaak5qVXhMQ0F3ZUdOaVpUaGxPREl6TENBd2VHRXhaR1JrWkRkakxDQXdlR1U0TnpRM05EbGpMQ0F3ZURObE1XWXhaakl4TENBd2VEazJOR0kwWW1Sa0xDQXdlRFl4WW1SaVpHUmpMQ0F3ZURCa09HSTRZamcyTENBd2VEQm1PR0U0WVRnMUxDQXdlR1V3TnpBM01Ea3dMQ0F3ZURkak0yVXpaVFF5TENBd2VEY3hZalZpTldNMExDQXdlR05qTmpZMk5tRmhMQ0F3ZURrd05EZzBPR1E0TENBd2VEQTJNRE13TXpBMUxDQXdlR1kzWmpabU5qQXhMQ0F3ZURGak1HVXdaVEV5TENBd2VHTXlOakUyTVdFekxDQXdlRFpoTXpVek5UVm1MQ0F3ZUdGbE5UYzFOMlk1TENBd2VEWTVZamxpT1dRd0xDQXdlREUzT0RZNE5qa3hMQ0F3ZURrNVl6RmpNVFU0TENBd2VETmhNV1F4WkRJM0xDQXdlREkzT1dVNVpXSTVMQ0F3ZUdRNVpURmxNVE00TENBd2VHVmlaamhtT0RFekxDQXdlREppT1RnNU9HSXpMQ0F3ZURJeU1URXhNVE16TENBd2VHUXlOamsyT1dKaUxDQXdlR0U1WkRsa09UY3dMQ0F3ZURBM09HVTRaVGc1TENBd2VETXpPVFE1TkdFM0xDQXdlREprT1dJNVltSTJMQ0F3ZUROak1XVXhaVEl5TENBd2VERTFPRGM0TnpreUxDQXdlR001WlRsbE9USXdMQ0F3ZURnM1kyVmpaVFE1TENBd2VHRmhOVFUxTldabUxDQXdlRFV3TWpneU9EYzRMQ0F3ZUdFMVpHWmtaamRoTENBd2VEQXpPR000WXpobUxDQXdlRFU1WVRGaE1XWTRMQ0F3ZURBNU9EazRPVGd3TENBd2VERmhNR1F3WkRFM0xDQXdlRFkxWW1aaVptUmhMQ0F3ZUdRM1pUWmxOak14TENBd2VEZzBOREkwTW1NMkxDQXdlR1F3TmpnMk9HSTRMQ0F3ZURneU5ERTBNV016TENBd2VESTVPVGs1T1dJd0xDQXdlRFZoTW1ReVpEYzNMQ0F3ZURGbE1HWXdaakV4TENBd2VEZGlZakJpTUdOaUxDQXdlR0U0TlRRMU5HWmpMQ0F3ZURaa1ltSmlZbVEyTENBd2VESmpNVFl4TmpOaFhUdGNiaUFnSUNCMllYSWdWRElnUFNCYk1IaGhOV00yTmpNMk15d2dNSGc0TkdZNE4yTTNZeXdnTUhnNU9XVmxOemMzTnl3Z01IZzRaR1kyTjJJM1lpd2dNSGd3WkdabVpqSm1NaXdnTUhoaVpHUTJObUkyWWl3Z01IaGlNV1JsTm1ZMlppd2dNSGcxTkRreFl6VmpOU3dnTUhnMU1EWXdNekF6TUN3Z01IZ3dNekF5TURFd01Td2dNSGhoT1dObE5qYzJOeXdnTUhnM1pEVTJNbUl5WWl3Z01IZ3hPV1UzWm1WbVpTd2dNSGcyTW1JMVpEZGtOeXdnTUhobE5qUmtZV0poWWl3Z01IZzVZV1ZqTnpZM05pd2dNSGcwTlRobVkyRmpZU3dnTUhnNVpERm1PREk0TWl3Z01IZzBNRGc1WXpsak9Td2dNSGc0TjJaaE4yUTNaQ3dnTUhneE5XVm1abUZtWVN3Z01IaGxZbUl5TlRrMU9Td2dNSGhqT1RobE5EYzBOeXdnTUhnd1ltWmlaakJtTUN3Z01IaGxZelF4WVdSaFpDd2dNSGcyTjJJelpEUmtOQ3dnTUhobVpEVm1ZVEpoTWl3Z01IaGxZVFExWVdaaFppd2dNSGhpWmpJek9XTTVZeXdnTUhobU56VXpZVFJoTkN3Z01IZzVObVUwTnpJM01pd2dNSGcxWWpsaVl6QmpNQ3dnTUhoak1qYzFZamRpTnl3Z01IZ3hZMlV4Wm1SbVpDd2dNSGhoWlROa09UTTVNeXdnTUhnMllUUmpNall5Tml3Z01IZzFZVFpqTXpZek5pd2dNSGcwTVRkbE0yWXpaaXdnTUhnd01tWTFaamRtTnl3Z01IZzBaamd6WTJOall5d2dNSGcxWXpZNE16UXpOQ3dnTUhobU5EVXhZVFZoTlN3Z01IZ3pOR1F4WlRWbE5Td2dNSGd3T0dZNVpqRm1NU3dnTUhnNU0yVXlOekUzTVN3Z01IZzNNMkZpWkRoa09Dd2dNSGcxTXpZeU16RXpNU3dnTUhnelpqSmhNVFV4TlN3Z01IZ3dZekE0TURRd05Dd2dNSGcxTWprMVl6ZGpOeXdnTUhnMk5UUTJNak15TXl3Z01IZzFaVGxrWXpOak15d2dNSGd5T0RNd01UZ3hPQ3dnTUhoaE1UTTNPVFk1Tml3Z01IZ3daakJoTURVd05Td2dNSGhpTlRKbU9XRTVZU3dnTUhnd09UQmxNRGN3Tnl3Z01IZ3pOakkwTVRJeE1pd2dNSGc1WWpGaU9EQTRNQ3dnTUhnelpHUm1aVEpsTWl3Z01IZ3lObU5rWldKbFlpd2dNSGcyT1RSbE1qY3lOeXdnTUhoalpEZG1ZakppTWl3Z01IZzVabVZoTnpVM05Td2dNSGd4WWpFeU1Ea3dPU3dnTUhnNVpURmtPRE00TXl3Z01IZzNORFU0TW1NeVl5d2dNSGd5WlRNME1XRXhZU3dnTUhneVpETTJNV0l4WWl3Z01IaGlNbVJqTm1VMlpTd2dNSGhsWldJME5XRTFZU3dnTUhobVlqVmlZVEJoTUN3Z01IaG1ObUUwTlRJMU1pd2dNSGcwWkRjMk0ySXpZaXdnTUhnMk1XSTNaRFprTml3Z01IaGpaVGRrWWpOaU15d2dNSGczWWpVeU1qa3lPU3dnTUhnelpXUmtaVE5sTXl3Z01IZzNNVFZsTW1ZeVppd2dNSGc1TnpFek9EUTROQ3dnTUhobU5XRTJOVE0xTXl3Z01IZzJPR0k1WkRGa01Td2dNSGd3TURBd01EQXdNQ3dnTUhneVkyTXhaV1JsWkN3Z01IZzJNRFF3TWpBeU1Dd2dNSGd4Wm1VelptTm1ZeXdnTUhoak9EYzVZakZpTVN3Z01IaGxaR0kyTldJMVlpd2dNSGhpWldRME5tRTJZU3dnTUhnME5qaGtZMkpqWWl3Z01IaGtPVFkzWW1WaVpTd2dNSGcwWWpjeU16a3pPU3dnTUhoa1pUazBOR0UwWVN3Z01IaGtORGs0TkdNMFl5d2dNSGhsT0dJd05UZzFPQ3dnTUhnMFlUZzFZMlpqWml3Z01IZzJZbUppWkRCa01Dd2dNSGd5WVdNMVpXWmxaaXdnTUhobE5UUm1ZV0ZoWVN3Z01IZ3hObVZrWm1KbVlpd2dNSGhqTlRnMk5ETTBNeXdnTUhoa056bGhOR1EwWkN3Z01IZzFOVFkyTXpNek15d2dNSGc1TkRFeE9EVTROU3dnTUhoalpqaGhORFUwTlN3Z01IZ3hNR1U1WmpsbU9Td2dNSGd3TmpBME1ESXdNaXdnTUhnNE1XWmxOMlkzWml3Z01IaG1NR0V3TlRBMU1Dd2dNSGcwTkRjNE0yTXpZeXdnTUhoaVlUSTFPV1k1Wml3Z01IaGxNelJpWVRoaE9Dd2dNSGhtTTJFeU5URTFNU3dnTUhobVpUVmtZVE5oTXl3Z01IaGpNRGd3TkRBME1Dd2dNSGc0WVRBMU9HWTRaaXdnTUhoaFpETm1PVEk1TWl3Z01IaGlZekl4T1dRNVpDd2dNSGcwT0Rjd016Z3pPQ3dnTUhnd05HWXhaalZtTlN3Z01IaGtaall6WW1OaVl5d2dNSGhqTVRjM1lqWmlOaXdnTUhnM05XRm1aR0ZrWVN3Z01IZzJNelF5TWpFeU1Td2dNSGd6TURJd01UQXhNQ3dnTUhneFlXVTFabVptWml3Z01IZ3daV1prWmpObU15d2dNSGcyWkdKbVpESmtNaXdnTUhnMFl6Z3hZMlJqWkN3Z01IZ3hOREU0TUdNd1l5d2dNSGd6TlRJMk1UTXhNeXdnTUhneVptTXpaV05sWXl3Z01IaGxNV0psTldZMVppd2dNSGhoTWpNMU9UYzVOeXdnTUhoall6ZzRORFEwTkN3Z01IZ3pPVEpsTVRjeE55d2dNSGcxTnprell6UmpOQ3dnTUhobU1qVTFZVGRoTnl3Z01IZzRNbVpqTjJVM1pTd2dNSGcwTnpkaE0yUXpaQ3dnTUhoaFkyTTROalEyTkN3Z01IaGxOMkpoTldRMVpDd2dNSGd5WWpNeU1Ua3hPU3dnTUhnNU5XVTJOek0zTXl3Z01IaGhNR013TmpBMk1Dd2dNSGc1T0RFNU9ERTRNU3dnTUhoa01UbGxOR1kwWml3Z01IZzNabUV6WkdOa1l5d2dNSGcyTmpRME1qSXlNaXdnTUhnM1pUVTBNbUV5WVN3Z01IaGhZak5pT1RBNU1Dd2dNSGc0TXpCaU9EZzRPQ3dnTUhoallUaGpORFkwTml3Z01IZ3lPV00zWldWbFpTd2dNSGhrTXpaaVlqaGlPQ3dnTUhnell6STRNVFF4TkN3Z01IZzNPV0UzWkdWa1pTd2dNSGhsTW1Kak5XVTFaU3dnTUhneFpERTJNR0l3WWl3Z01IZzNObUZrWkdKa1lpd2dNSGd6WW1SaVpUQmxNQ3dnTUhnMU5qWTBNekl6TWl3Z01IZzBaVGMwTTJFellTd2dNSGd4WlRFME1HRXdZU3dnTUhoa1lqa3lORGswT1N3Z01IZ3dZVEJqTURZd05pd2dNSGcyWXpRNE1qUXlOQ3dnTUhobE5HSTROV00xWXl3Z01IZzFaRGxtWXpKak1pd2dNSGcyWldKa1pETmtNeXdnTUhobFpqUXpZV05oWXl3Z01IaGhObU0wTmpJMk1pd2dNSGhoT0RNNU9URTVNU3dnTUhoaE5ETXhPVFU1TlN3Z01IZ3pOMlF6WlRSbE5Dd2dNSGc0WW1ZeU56azNPU3dnTUhnek1tUTFaVGRsTnl3Z01IZzBNemhpWXpoak9Dd2dNSGcxT1RabE16Y3pOeXdnTUhoaU4yUmhObVEyWkN3Z01IZzRZekF4T0dRNFpDd2dNSGcyTkdJeFpEVmtOU3dnTUhoa01qbGpOR1UwWlN3Z01IaGxNRFE1WVRsaE9Td2dNSGhpTkdRNE5tTTJZeXdnTUhobVlXRmpOVFkxTml3Z01IZ3dOMll6WmpSbU5Dd2dNSGd5TldObVpXRmxZU3dnTUhoaFptTmhOalUyTlN3Z01IZzRaV1kwTjJFM1lTd2dNSGhsT1RRM1lXVmhaU3dnTUhneE9ERXdNRGd3T0N3Z01IaGtOVFptWW1GaVlTd2dNSGc0T0dZd056ZzNPQ3dnTUhnMlpqUmhNalV5TlN3Z01IZzNNalZqTW1VeVpTd2dNSGd5TkRNNE1XTXhZeXdnTUhobU1UVTNZVFpoTml3Z01IaGpOemN6WWpSaU5Dd2dNSGcxTVRrM1l6WmpOaXdnTUhneU0yTmlaVGhsT0N3Z01IZzNZMkV4WkdSa1pDd2dNSGc1WTJVNE56UTNOQ3dnTUhneU1UTmxNV1l4Wml3Z01IaGtaRGsyTkdJMFlpd2dNSGhrWXpZeFltUmlaQ3dnTUhnNE5qQmtPR0k0WWl3Z01IZzROVEJtT0dFNFlTd2dNSGc1TUdVd056QTNNQ3dnTUhnME1qZGpNMlV6WlN3Z01IaGpORGN4WWpWaU5Td2dNSGhoWVdOak5qWTJOaXdnTUhoa09Ea3dORGcwT0N3Z01IZ3dOVEEyTURNd015d2dNSGd3TVdZM1pqWm1OaXdnTUhneE1qRmpNR1V3WlN3Z01IaGhNMk15TmpFMk1Td2dNSGcxWmpaaE16VXpOU3dnTUhobU9XRmxOVGMxTnl3Z01IaGtNRFk1WWpsaU9Td2dNSGc1TVRFM09EWTROaXdnTUhnMU9EazVZekZqTVN3Z01IZ3lOek5oTVdReFpDd2dNSGhpT1RJM09XVTVaU3dnTUhnek9HUTVaVEZsTVN3Z01IZ3hNMlZpWmpobU9Dd2dNSGhpTXpKaU9UZzVPQ3dnTUhnek16SXlNVEV4TVN3Z01IaGlZbVF5TmprMk9Td2dNSGczTUdFNVpEbGtPU3dnTUhnNE9UQTNPR1U0WlN3Z01IaGhOek16T1RRNU5Dd2dNSGhpTmpKa09XSTVZaXdnTUhneU1qTmpNV1V4WlN3Z01IZzVNakUxT0RjNE55d2dNSGd5TUdNNVpUbGxPU3dnTUhnME9UZzNZMlZqWlN3Z01IaG1abUZoTlRVMU5Td2dNSGczT0RVd01qZ3lPQ3dnTUhnM1lXRTFaR1prWml3Z01IZzRaakF6T0dNNFl5d2dNSGhtT0RVNVlURmhNU3dnTUhnNE1EQTVPRGs0T1N3Z01IZ3hOekZoTUdRd1pDd2dNSGhrWVRZMVltWmlaaXdnTUhnek1XUTNaVFpsTml3Z01IaGpOamcwTkRJME1pd2dNSGhpT0dRd05qZzJPQ3dnTUhoak16Z3lOREUwTVN3Z01IaGlNREk1T1RrNU9Td2dNSGczTnpWaE1tUXlaQ3dnTUhneE1URmxNR1l3Wml3Z01IaGpZamRpWWpCaU1Dd2dNSGhtWTJFNE5UUTFOQ3dnTUhoa05qWmtZbUppWWl3Z01IZ3pZVEpqTVRZeE5sMDdYRzRnSUNBZ2RtRnlJRlF6SUQwZ1d6QjROak5oTldNMk5qTXNJREI0TjJNNE5HWTROMk1zSURCNE56YzVPV1ZsTnpjc0lEQjROMkk0WkdZMk4ySXNJREI0WmpJd1pHWm1aaklzSURCNE5tSmlaR1EyTm1Jc0lEQjRObVppTVdSbE5tWXNJREI0WXpVMU5Ea3hZelVzSURCNE16QTFNRFl3TXpBc0lEQjRNREV3TXpBeU1ERXNJREI0TmpkaE9XTmxOamNzSURCNE1tSTNaRFUyTW1Jc0lEQjRabVV4T1dVM1ptVXNJREI0WkRjMk1tSTFaRGNzSURCNFlXSmxOalJrWVdJc0lEQjROelk1WVdWak56WXNJREI0WTJFME5UaG1ZMkVzSURCNE9ESTVaREZtT0RJc0lEQjRZemswTURnNVl6a3NJREI0TjJRNE4yWmhOMlFzSURCNFptRXhOV1ZtWm1Fc0lEQjROVGxsWW1JeU5Ua3NJREI0TkRkak9UaGxORGNzSURCNFpqQXdZbVppWmpBc0lEQjRZV1JsWXpReFlXUXNJREI0WkRRMk4ySXpaRFFzSURCNFlUSm1aRFZtWVRJc0lEQjRZV1psWVRRMVlXWXNJREI0T1dOaVpqSXpPV01zSURCNFlUUm1OelV6WVRRc0lEQjROekk1Tm1VME56SXNJREI0WXpBMVlqbGlZekFzSURCNFlqZGpNamMxWWpjc0lEQjRabVF4WTJVeFptUXNJREI0T1ROaFpUTmtPVE1zSURCNE1qWTJZVFJqTWpZc0lEQjRNelkxWVRaak16WXNJREI0TTJZME1UZGxNMllzSURCNFpqY3dNbVkxWmpjc0lEQjRZMk0wWmpnelkyTXNJREI0TXpRMVl6WTRNelFzSURCNFlUVm1ORFV4WVRVc0lEQjRaVFV6TkdReFpUVXNJREI0WmpFd09HWTVaakVzSURCNE56RTVNMlV5TnpFc0lEQjRaRGczTTJGaVpEZ3NJREI0TXpFMU16WXlNekVzSURCNE1UVXpaakpoTVRVc0lEQjRNRFF3WXpBNE1EUXNJREI0WXpjMU1qazFZemNzSURCNE1qTTJOVFEyTWpNc0lEQjRZek0xWlRsa1l6TXNJREI0TVRneU9ETXdNVGdzSURCNE9UWmhNVE0zT1RZc0lEQjRNRFV3WmpCaE1EVXNJREI0T1dGaU5USm1PV0VzSURCNE1EY3dPVEJsTURjc0lEQjRNVEl6TmpJME1USXNJREI0T0RBNVlqRmlPREFzSURCNFpUSXpaR1JtWlRJc0lEQjRaV0l5Tm1Oa1pXSXNJREI0TWpjMk9UUmxNamNzSURCNFlqSmpaRGRtWWpJc0lEQjROelU1Wm1WaE56VXNJREI0TURreFlqRXlNRGtzSURCNE9ETTVaVEZrT0RNc0lEQjRNbU0zTkRVNE1tTXNJREI0TVdFeVpUTTBNV0VzSURCNE1XSXlaRE0yTVdJc0lEQjRObVZpTW1Sak5tVXNJREI0TldGbFpXSTBOV0VzSURCNFlUQm1ZalZpWVRBc0lEQjROVEptTm1FME5USXNJREI0TTJJMFpEYzJNMklzSURCNFpEWTJNV0kzWkRZc0lEQjRZak5qWlRka1lqTXNJREI0TWprM1lqVXlNamtzSURCNFpUTXpaV1JrWlRNc0lEQjRNbVkzTVRWbE1tWXNJREI0T0RRNU56RXpPRFFzSURCNE5UTm1OV0UyTlRNc0lEQjRaREUyT0dJNVpERXNJREI0TURBd01EQXdNREFzSURCNFpXUXlZMk14WldRc0lEQjRNakEyTURRd01qQXNJREI0Wm1NeFptVXpabU1zSURCNFlqRmpPRGM1WWpFc0lEQjROV0psWkdJMk5XSXNJREI0Tm1GaVpXUTBObUVzSURCNFkySTBOamhrWTJJc0lEQjRZbVZrT1RZM1ltVXNJREI0TXprMFlqY3lNemtzSURCNE5HRmtaVGswTkdFc0lEQjROR05rTkRrNE5HTXNJREI0TlRobE9HSXdOVGdzSURCNFkyWTBZVGcxWTJZc0lEQjRaREEyWW1KaVpEQXNJREI0WldZeVlXTTFaV1lzSURCNFlXRmxOVFJtWVdFc0lEQjRabUl4Tm1Wa1ptSXNJREI0TkROak5UZzJORE1zSURCNE5HUmtOemxoTkdRc0lEQjRNek0xTlRZMk16TXNJREI0T0RVNU5ERXhPRFVzSURCNE5EVmpaamhoTkRVc0lEQjRaamt4TUdVNVpqa3NJREI0TURJd05qQTBNRElzSURCNE4yWTRNV1psTjJZc0lEQjROVEJtTUdFd05UQXNJREI0TTJNME5EYzRNMk1zSURCNE9XWmlZVEkxT1dZc0lEQjRZVGhsTXpSaVlUZ3NJREI0TlRGbU0yRXlOVEVzSURCNFlUTm1aVFZrWVRNc0lEQjROREJqTURnd05EQXNJREI0T0dZNFlUQTFPR1lzSURCNE9USmhaRE5tT1RJc0lEQjRPV1JpWXpJeE9XUXNJREI0TXpnME9EY3dNemdzSURCNFpqVXdOR1l4WmpVc0lEQjRZbU5rWmpZelltTXNJREI0WWpaak1UYzNZallzSURCNFpHRTNOV0ZtWkdFc0lEQjRNakUyTXpReU1qRXNJREI0TVRBek1ESXdNVEFzSURCNFptWXhZV1UxWm1Zc0lEQjRaak13Wldaa1pqTXNJREI0WkRJMlpHSm1aRElzSURCNFkyUTBZemd4WTJRc0lEQjRNR014TkRFNE1HTXNJREI0TVRNek5USTJNVE1zSURCNFpXTXlabU16WldNc0lEQjROV1psTVdKbE5XWXNJREI0T1RkaE1qTTFPVGNzSURCNE5EUmpZemc0TkRRc0lEQjRNVGN6T1RKbE1UY3NJREI0WXpRMU56a3pZelFzSURCNFlUZG1NalUxWVRjc0lEQjROMlU0TW1aak4yVXNJREI0TTJRME56ZGhNMlFzSURCNE5qUmhZMk00TmpRc0lEQjROV1JsTjJKaE5XUXNJREI0TVRreVlqTXlNVGtzSURCNE56TTVOV1UyTnpNc0lEQjROakJoTUdNd05qQXNJREI0T0RFNU9ERTVPREVzSURCNE5HWmtNVGxsTkdZc0lEQjRaR00zWm1FelpHTXNJREI0TWpJMk5qUTBNaklzSURCNE1tRTNaVFUwTW1Fc0lEQjRPVEJoWWpOaU9UQXNJREI0T0RnNE16QmlPRGdzSURCNE5EWmpZVGhqTkRZc0lEQjRaV1V5T1dNM1pXVXNJREI0WWpoa016WmlZamdzSURCNE1UUXpZekk0TVRRc0lEQjRaR1UzT1dFM1pHVXNJREI0TldWbE1tSmpOV1VzSURCNE1HSXhaREUyTUdJc0lEQjRaR0kzTm1Ga1pHSXNJREI0WlRBelltUmlaVEFzSURCNE16STFOalkwTXpJc0lEQjRNMkUwWlRjME0yRXNJREI0TUdFeFpURTBNR0VzSURCNE5EbGtZamt5TkRrc0lEQjRNRFl3WVRCak1EWXNJREI0TWpRMll6UTRNalFzSURCNE5XTmxOR0k0TldNc0lEQjRZekkxWkRsbVl6SXNJREI0WkRNMlpXSmtaRE1zSURCNFlXTmxaalF6WVdNc0lEQjROakpoTm1NME5qSXNJREI0T1RGaE9ETTVPVEVzSURCNE9UVmhORE14T1RVc0lEQjRaVFF6TjJRelpUUXNJREI0TnprNFltWXlOemtzSURCNFpUY3pNbVExWlRjc0lEQjRZemcwTXpoaVl6Z3NJREI0TXpjMU9UWmxNemNzSURCNE5tUmlOMlJoTm1Rc0lEQjRPR1E0WXpBeE9HUXNJREI0WkRVMk5HSXhaRFVzSURCNE5HVmtNamxqTkdVc0lEQjRZVGxsTURRNVlUa3NJREI0Tm1OaU5HUTRObU1zSURCNE5UWm1ZV0ZqTlRZc0lEQjRaalF3TjJZelpqUXNJREI0WldFeU5XTm1aV0VzSURCNE5qVmhabU5oTmpVc0lEQjROMkU0WldZME4yRXNJREI0WVdWbE9UUTNZV1VzSURCNE1EZ3hPREV3TURnc0lEQjRZbUZrTlRabVltRXNJREI0TnpnNE9HWXdOemdzSURCNE1qVTJaalJoTWpVc0lEQjRNbVUzTWpWak1tVXNJREI0TVdNeU5ETTRNV01zSURCNFlUWm1NVFUzWVRZc0lEQjRZalJqTnpjellqUXNJREI0WXpZMU1UazNZellzSURCNFpUZ3lNMk5pWlRnc0lEQjRaR1EzWTJFeFpHUXNJREI0TnpRNVkyVTROelFzSURCNE1XWXlNVE5sTVdZc0lEQjROR0prWkRrMk5HSXNJREI0WW1Sa1l6WXhZbVFzSURCNE9HSTROakJrT0dJc0lEQjRPR0U0TlRCbU9HRXNJREI0TnpBNU1HVXdOekFzSURCNE0yVTBNamRqTTJVc0lEQjRZalZqTkRjeFlqVXNJREI0TmpaaFlXTmpOallzSURCNE5EaGtPRGt3TkRnc0lEQjRNRE13TlRBMk1ETXNJREI0WmpZd01XWTNaallzSURCNE1HVXhNakZqTUdVc0lEQjROakZoTTJNeU5qRXNJREI0TXpVMVpqWmhNelVzSURCNE5UZG1PV0ZsTlRjc0lEQjRZamxrTURZNVlqa3NJREI0T0RZNU1URTNPRFlzSURCNFl6RTFPRGs1WXpFc0lEQjRNV1F5TnpOaE1XUXNJREI0T1dWaU9USTNPV1VzSURCNFpURXpPR1E1WlRFc0lEQjRaamd4TTJWaVpqZ3NJREI0T1RoaU16SmlPVGdzSURCNE1URXpNekl5TVRFc0lEQjROamxpWW1ReU5qa3NJREI0WkRrM01HRTVaRGtzSURCNE9HVTRPVEEzT0dVc0lEQjRPVFJoTnpNek9UUXNJREI0T1dKaU5qSmtPV0lzSURCNE1XVXlNak5qTVdVc0lEQjRPRGM1TWpFMU9EY3NJREI0WlRreU1HTTVaVGtzSURCNFkyVTBPVGczWTJVc0lEQjROVFZtWm1GaE5UVXNJREI0TWpnM09EVXdNamdzSURCNFpHWTNZV0UxWkdZc0lEQjRPR000WmpBek9HTXNJREI0WVRGbU9EVTVZVEVzSURCNE9EazRNREE1T0Rrc0lEQjRNR1F4TnpGaE1HUXNJREI0WW1aa1lUWTFZbVlzSURCNFpUWXpNV1EzWlRZc0lEQjROREpqTmpnME5ESXNJREI0TmpoaU9HUXdOamdzSURCNE5ERmpNemd5TkRFc0lEQjRPVGxpTURJNU9Ua3NJREI0TW1RM056VmhNbVFzSURCNE1HWXhNVEZsTUdZc0lEQjRZakJqWWpkaVlqQXNJREI0TlRSbVkyRTROVFFzSURCNFltSmtOalprWW1Jc0lEQjRNVFl6WVRKak1UWmRPMXh1SUNBZ0lIWmhjaUJVTkNBOUlGc3dlRFl6TmpOaE5XTTJMQ0F3ZURkak4yTTROR1k0TENBd2VEYzNOemM1T1dWbExDQXdlRGRpTjJJNFpHWTJMQ0F3ZUdZeVpqSXdaR1ptTENBd2VEWmlObUppWkdRMkxDQXdlRFptTm1aaU1XUmxMQ0F3ZUdNMVl6VTFORGt4TENBd2VETXdNekExTURZd0xDQXdlREF4TURFd016QXlMQ0F3ZURZM05qZGhPV05sTENBd2VESmlNbUkzWkRVMkxDQXdlR1psWm1VeE9XVTNMQ0F3ZUdRM1pEYzJNbUkxTENBd2VHRmlZV0psTmpSa0xDQXdlRGMyTnpZNVlXVmpMQ0F3ZUdOaFkyRTBOVGhtTENBd2VEZ3lPREk1WkRGbUxDQXdlR001WXprME1EZzVMQ0F3ZURka04yUTROMlpoTENBd2VHWmhabUV4TldWbUxDQXdlRFU1TlRsbFltSXlMQ0F3ZURRM05EZGpPVGhsTENBd2VHWXdaakF3WW1aaUxDQXdlR0ZrWVdSbFl6UXhMQ0F3ZUdRMFpEUTJOMkl6TENBd2VHRXlZVEptWkRWbUxDQXdlR0ZtWVdabFlUUTFMQ0F3ZURsak9XTmlaakl6TENBd2VHRTBZVFJtTnpVekxDQXdlRGN5TnpJNU5tVTBMQ0F3ZUdNd1l6QTFZamxpTENBd2VHSTNZamRqTWpjMUxDQXdlR1prWm1ReFkyVXhMQ0F3ZURrek9UTmhaVE5rTENBd2VESTJNalkyWVRSakxDQXdlRE0yTXpZMVlUWmpMQ0F3ZURObU0yWTBNVGRsTENBd2VHWTNaamN3TW1ZMUxDQXdlR05qWTJNMFpqZ3pMQ0F3ZURNME16UTFZelk0TENBd2VHRTFZVFZtTkRVeExDQXdlR1UxWlRVek5HUXhMQ0F3ZUdZeFpqRXdPR1k1TENBd2VEY3hOekU1TTJVeUxDQXdlR1E0WkRnM00yRmlMQ0F3ZURNeE16RTFNell5TENBd2VERTFNVFV6WmpKaExDQXdlREEwTURRd1l6QTRMQ0F3ZUdNM1l6YzFNamsxTENBd2VESXpNak0yTlRRMkxDQXdlR016WXpNMVpUbGtMQ0F3ZURFNE1UZ3lPRE13TENBd2VEazJPVFpoTVRNM0xDQXdlREExTURVd1pqQmhMQ0F3ZURsaE9XRmlOVEptTENBd2VEQTNNRGN3T1RCbExDQXdlREV5TVRJek5qSTBMQ0F3ZURnd09EQTVZakZpTENBd2VHVXlaVEl6WkdSbUxDQXdlR1ZpWldJeU5tTmtMQ0F3ZURJM01qYzJPVFJsTENBd2VHSXlZakpqWkRkbUxDQXdlRGMxTnpVNVptVmhMQ0F3ZURBNU1Ea3hZakV5TENBd2VEZ3pPRE01WlRGa0xDQXdlREpqTW1NM05EVTRMQ0F3ZURGaE1XRXlaVE0wTENBd2VERmlNV0l5WkRNMkxDQXdlRFpsTm1WaU1tUmpMQ0F3ZURWaE5XRmxaV0kwTENBd2VHRXdZVEJtWWpWaUxDQXdlRFV5TlRKbU5tRTBMQ0F3ZUROaU0ySTBaRGMyTENBd2VHUTJaRFkyTVdJM0xDQXdlR0l6WWpOalpUZGtMQ0F3ZURJNU1qazNZalV5TENBd2VHVXpaVE16WldSa0xDQXdlREptTW1ZM01UVmxMQ0F3ZURnME9EUTVOekV6TENBd2VEVXpOVE5tTldFMkxDQXdlR1F4WkRFMk9HSTVMQ0F3ZURBd01EQXdNREF3TENBd2VHVmtaV1F5WTJNeExDQXdlREl3TWpBMk1EUXdMQ0F3ZUdaalptTXhabVV6TENBd2VHSXhZakZqT0RjNUxDQXdlRFZpTldKbFpHSTJMQ0F3ZURaaE5tRmlaV1EwTENBd2VHTmlZMkkwTmpoa0xDQXdlR0psWW1Wa09UWTNMQ0F3ZURNNU16azBZamN5TENBd2VEUmhOR0ZrWlRrMExDQXdlRFJqTkdOa05EazRMQ0F3ZURVNE5UaGxPR0l3TENBd2VHTm1ZMlkwWVRnMUxDQXdlR1F3WkRBMlltSmlMQ0F3ZUdWbVpXWXlZV00xTENBd2VHRmhZV0ZsTlRSbUxDQXdlR1ppWm1JeE5tVmtMQ0F3ZURRek5ETmpOVGcyTENBd2VEUmtOR1JrTnpsaExDQXdlRE16TXpNMU5UWTJMQ0F3ZURnMU9EVTVOREV4TENBd2VEUTFORFZqWmpoaExDQXdlR1k1WmpreE1HVTVMQ0F3ZURBeU1ESXdOakEwTENBd2VEZG1OMlk0TVdabExDQXdlRFV3TlRCbU1HRXdMQ0F3ZUROak0yTTBORGM0TENBd2VEbG1PV1ppWVRJMUxDQXdlR0U0WVRobE16UmlMQ0F3ZURVeE5URm1NMkV5TENBd2VHRXpZVE5tWlRWa0xDQXdlRFF3TkRCak1EZ3dMQ0F3ZURobU9HWTRZVEExTENBd2VEa3lPVEpoWkRObUxDQXdlRGxrT1dSaVl6SXhMQ0F3ZURNNE16ZzBPRGN3TENBd2VHWTFaalV3TkdZeExDQXdlR0pqWW1Oa1pqWXpMQ0F3ZUdJMllqWmpNVGMzTENBd2VHUmhaR0UzTldGbUxDQXdlREl4TWpFMk16UXlMQ0F3ZURFd01UQXpNREl3TENBd2VHWm1abVl4WVdVMUxDQXdlR1l6WmpNd1pXWmtMQ0F3ZUdReVpESTJaR0ptTENBd2VHTmtZMlEwWXpneExDQXdlREJqTUdNeE5ERTRMQ0F3ZURFek1UTXpOVEkyTENBd2VHVmpaV015Wm1NekxDQXdlRFZtTldabE1XSmxMQ0F3ZURrM09UZGhNak0xTENBd2VEUTBORFJqWXpnNExDQXdlREUzTVRjek9USmxMQ0F3ZUdNMFl6UTFOemt6TENBd2VHRTNZVGRtTWpVMUxDQXdlRGRsTjJVNE1tWmpMQ0F3ZUROa00yUTBOemRoTENBd2VEWTBOalJoWTJNNExDQXdlRFZrTldSbE4ySmhMQ0F3ZURFNU1Ua3lZak15TENBd2VEY3pOek01TldVMkxDQXdlRFl3TmpCaE1HTXdMQ0F3ZURneE9ERTVPREU1TENBd2VEUm1OR1prTVRsbExDQXdlR1JqWkdNM1ptRXpMQ0F3ZURJeU1qSTJOalEwTENBd2VESmhNbUUzWlRVMExDQXdlRGt3T1RCaFlqTmlMQ0F3ZURnNE9EZzRNekJpTENBd2VEUTJORFpqWVRoakxDQXdlR1ZsWldVeU9XTTNMQ0F3ZUdJNFlqaGtNelppTENBd2VERTBNVFF6WXpJNExDQXdlR1JsWkdVM09XRTNMQ0F3ZURWbE5XVmxNbUpqTENBd2VEQmlNR0l4WkRFMkxDQXdlR1JpWkdJM05tRmtMQ0F3ZUdVd1pUQXpZbVJpTENBd2VETXlNekkxTmpZMExDQXdlRE5oTTJFMFpUYzBMQ0F3ZURCaE1HRXhaVEUwTENBd2VEUTVORGxrWWpreUxDQXdlREEyTURZd1lUQmpMQ0F3ZURJME1qUTJZelE0TENBd2VEVmpOV05sTkdJNExDQXdlR015WXpJMVpEbG1MQ0F3ZUdRelpETTJaV0prTENBd2VHRmpZV05sWmpRekxDQXdlRFl5TmpKaE5tTTBMQ0F3ZURreE9URmhPRE01TENBd2VEazFPVFZoTkRNeExDQXdlR1UwWlRRek4yUXpMQ0F3ZURjNU56azRZbVl5TENBd2VHVTNaVGN6TW1RMUxDQXdlR000WXpnME16aGlMQ0F3ZURNM016YzFPVFpsTENBd2VEWmtObVJpTjJSaExDQXdlRGhrT0dRNFl6QXhMQ0F3ZUdRMVpEVTJOR0l4TENBd2VEUmxOR1ZrTWpsakxDQXdlR0U1WVRsbE1EUTVMQ0F3ZURaak5tTmlOR1E0TENBd2VEVTJOVFptWVdGakxDQXdlR1kwWmpRd04yWXpMQ0F3ZUdWaFpXRXlOV05tTENBd2VEWTFOalZoWm1OaExDQXdlRGRoTjJFNFpXWTBMQ0F3ZUdGbFlXVmxPVFEzTENBd2VEQTRNRGd4T0RFd0xDQXdlR0poWW1Ga05UWm1MQ0F3ZURjNE56ZzRPR1l3TENBd2VESTFNalUyWmpSaExDQXdlREpsTW1VM01qVmpMQ0F3ZURGak1XTXlORE00TENBd2VHRTJZVFptTVRVM0xDQXdlR0kwWWpSak56Y3pMQ0F3ZUdNMll6WTFNVGszTENBd2VHVTRaVGd5TTJOaUxDQXdlR1JrWkdRM1kyRXhMQ0F3ZURjME56UTVZMlU0TENBd2VERm1NV1l5TVRObExDQXdlRFJpTkdKa1pEazJMQ0F3ZUdKa1ltUmtZell4TENBd2VEaGlPR0k0TmpCa0xDQXdlRGhoT0dFNE5UQm1MQ0F3ZURjd056QTVNR1V3TENBd2VETmxNMlUwTWpkakxDQXdlR0kxWWpWak5EY3hMQ0F3ZURZMk5qWmhZV05qTENBd2VEUTRORGhrT0Rrd0xDQXdlREF6TURNd05UQTJMQ0F3ZUdZMlpqWXdNV1kzTENBd2VEQmxNR1V4TWpGakxDQXdlRFl4TmpGaE0yTXlMQ0F3ZURNMU16VTFaalpoTENBd2VEVTNOVGRtT1dGbExDQXdlR0k1WWpsa01EWTVMQ0F3ZURnMk9EWTVNVEUzTENBd2VHTXhZekUxT0RrNUxDQXdlREZrTVdReU56TmhMQ0F3ZURsbE9XVmlPVEkzTENBd2VHVXhaVEV6T0dRNUxDQXdlR1k0WmpneE0yVmlMQ0F3ZURrNE9UaGlNekppTENBd2VERXhNVEV6TXpJeUxDQXdlRFk1TmpsaVltUXlMQ0F3ZUdRNVpEazNNR0U1TENBd2VEaGxPR1U0T1RBM0xDQXdlRGswT1RSaE56TXpMQ0F3ZURsaU9XSmlOakprTENBd2VERmxNV1V5TWpOakxDQXdlRGczT0RjNU1qRTFMQ0F3ZUdVNVpUa3lNR001TENBd2VHTmxZMlUwT1RnM0xDQXdlRFUxTlRWbVptRmhMQ0F3ZURJNE1qZzNPRFV3TENBd2VHUm1aR1kzWVdFMUxDQXdlRGhqT0dNNFpqQXpMQ0F3ZUdFeFlURm1PRFU1TENBd2VEZzVPRGs0TURBNUxDQXdlREJrTUdReE56RmhMQ0F3ZUdKbVltWmtZVFkxTENBd2VHVTJaVFl6TVdRM0xDQXdlRFF5TkRKak5qZzBMQ0F3ZURZNE5qaGlPR1F3TENBd2VEUXhOREZqTXpneUxDQXdlRGs1T1RsaU1ESTVMQ0F3ZURKa01tUTNOelZoTENBd2VEQm1NR1l4TVRGbExDQXdlR0l3WWpCallqZGlMQ0F3ZURVME5UUm1ZMkU0TENBd2VHSmlZbUprTmpaa0xDQXdlREUyTVRZellUSmpYVHRjYmx4dUlDQWdJQzh2SUZSeVlXNXpabTl5YldGMGFXOXVjeUJtYjNJZ1pHVmpjbmx3ZEdsdmJseHVJQ0FnSUhaaGNpQlVOU0E5SUZzd2VEVXhaalJoTnpVd0xDQXdlRGRsTkRFMk5UVXpMQ0F3ZURGaE1UZGhOR016TENBd2VETmhNamMxWlRrMkxDQXdlRE5pWVdJMlltTmlMQ0F3ZURGbU9XUTBOV1l4TENBd2VHRmpabUUxT0dGaUxDQXdlRFJpWlRNd016a3pMQ0F3ZURJd016Qm1ZVFUxTENBd2VHRmtOelkyWkdZMkxDQXdlRGc0WTJNM05qa3hMQ0F3ZUdZMU1ESTBZekkxTENBd2VEUm1aVFZrTjJaakxDQXdlR00xTW1GalltUTNMQ0F3ZURJMk16VTBORGd3TENBd2VHSTFOakpoTXpobUxDQXdlR1JsWWpFMVlUUTVMQ0F3ZURJMVltRXhZalkzTENBd2VEUTFaV0V3WlRrNExDQXdlRFZrWm1Wak1HVXhMQ0F3ZUdNek1tWTNOVEF5TENBd2VEZ3hOR05tTURFeUxDQXdlRGhrTkRZNU4yRXpMQ0F3ZURaaVpETm1PV00yTENBd2VEQXpPR1kxWm1VM0xDQXdlREUxT1RJNVl6azFMQ0F3ZUdKbU5tUTNZV1ZpTENBd2VEazFOVEkxT1dSaExDQXdlR1EwWW1VNE16SmtMQ0F3ZURVNE56UXlNV1F6TENBd2VEUTVaVEEyT1RJNUxDQXdlRGhsWXpsak9EUTBMQ0F3ZURjMVl6STRPVFpoTENBd2VHWTBPR1UzT1RjNExDQXdlRGs1TlRnelpUWmlMQ0F3ZURJM1lqazNNV1JrTENBd2VHSmxaVEUwWm1JMkxDQXdlR1l3T0RoaFpERTNMQ0F3ZUdNNU1qQmhZelkyTENBd2VEZGtZMlV6WVdJMExDQXdlRFl6WkdZMFlURTRMQ0F3ZUdVMU1XRXpNVGd5TENBd2VEazNOVEV6TXpZd0xDQXdlRFl5TlRNM1pqUTFMQ0F3ZUdJeE5qUTNOMlV3TENBd2VHSmlObUpoWlRnMExDQXdlR1psT0RGaE1ERmpMQ0F3ZUdZNU1EZ3lZamswTENBd2VEY3dORGcyT0RVNExDQXdlRGhtTkRWbVpERTVMQ0F3ZURrMFpHVTJZemczTENBd2VEVXlOMkptT0dJM0xDQXdlR0ZpTnpOa016SXpMQ0F3ZURjeU5HSXdNbVV5TENBd2VHVXpNV1k0WmpVM0xDQXdlRFkyTlRWaFlqSmhMQ0F3ZUdJeVpXSXlPREEzTENBd2VESm1ZalZqTWpBekxDQXdlRGcyWXpVM1lqbGhMQ0F3ZUdRek16Y3dPR0UxTENBd2VETXdNamc0TjJZeUxDQXdlREl6WW1aaE5XSXlMQ0F3ZURBeU1ETTJZV0poTENBd2VHVmtNVFk0TWpWakxDQXdlRGhoWTJZeFl6SmlMQ0F3ZUdFM056bGlORGt5TENBd2VHWXpNRGRtTW1Zd0xDQXdlRFJsTmpsbE1tRXhMQ0F3ZURZMVpHRm1OR05rTENBd2VEQTJNRFZpWldRMUxDQXdlR1F4TXpRMk1qRm1MQ0F3ZUdNMFlUWm1aVGhoTENBd2VETTBNbVUxTXpsa0xDQXdlR0V5WmpNMU5XRXdMQ0F3ZURBMU9HRmxNVE15TENBd2VHRTBaalpsWWpjMUxDQXdlREJpT0RObFl6TTVMQ0F3ZURRd05qQmxabUZoTENBd2VEVmxOekU1WmpBMkxDQXdlR0prTm1VeE1EVXhMQ0F3ZURObE1qRTRZV1k1TENBd2VEazJaR1F3TmpOa0xDQXdlR1JrTTJVd05XRmxMQ0F3ZURSa1pUWmlaRFEyTENBd2VEa3hOVFE0WkdJMUxDQXdlRGN4WXpRMVpEQTFMQ0F3ZURBME1EWmtORFptTENBd2VEWXdOVEF4TldabUxDQXdlREU1T1RobVlqSTBMQ0F3ZUdRMlltUmxPVGszTENBd2VEZzVOREEwTTJOakxDQXdlRFkzWkRrNVpUYzNMQ0F3ZUdJd1pUZzBNbUprTENBd2VEQTNPRGs0WWpnNExDQXdlR1UzTVRrMVlqTTRMQ0F3ZURjNVl6aGxaV1JpTENBd2VHRXhOMk13WVRRM0xDQXdlRGRqTkRJd1ptVTVMQ0F3ZUdZNE9EUXhaV001TENBd2VEQXdNREF3TURBd0xDQXdlREE1T0RBNE5qZ3pMQ0F3ZURNeU1tSmxaRFE0TENBd2VERmxNVEUzTUdGakxDQXdlRFpqTldFM01qUmxMQ0F3ZUdaa01HVm1abVppTENBd2VEQm1PRFV6T0RVMkxDQXdlRE5rWVdWa05URmxMQ0F3ZURNMk1tUXpPVEkzTENBd2VEQmhNR1prT1RZMExDQXdlRFk0TldOaE5qSXhMQ0F3ZURsaU5XSTFOR1F4TENBd2VESTBNell5WlROaExDQXdlREJqTUdFMk4ySXhMQ0F3ZURrek5UZGxOekJtTENBd2VHSTBaV1U1Tm1ReUxDQXdlREZpT1dJNU1UbGxMQ0F3ZURnd1l6QmpOVFJtTENBd2VEWXhaR015TUdFeUxDQXdlRFZoTnpjMFlqWTVMQ0F3ZURGak1USXhZVEUyTENBd2VHVXlPVE5pWVRCaExDQXdlR013WVRBeVlXVTFMQ0F3ZUROak1qSmxNRFF6TENBd2VERXlNV0l4TnpGa0xDQXdlREJsTURrd1pEQmlMQ0F3ZUdZeU9HSmpOMkZrTENBd2VESmtZalpoT0dJNUxDQXdlREUwTVdWaE9XTTRMQ0F3ZURVM1pqRXhPVGcxTENBd2VHRm1OelV3TnpSakxDQXdlR1ZsT1Rsa1pHSmlMQ0F3ZUdFek4yWTJNR1prTENBd2VHWTNNREV5TmpsbUxDQXdlRFZqTnpKbU5XSmpMQ0F3ZURRME5qWXpZbU0xTENBd2VEVmlabUkzWlRNMExDQXdlRGhpTkRNeU9UYzJMQ0F3ZUdOaU1qTmpObVJqTENBd2VHSTJaV1JtWXpZNExDQXdlR0k0WlRSbU1UWXpMQ0F3ZUdRM016RmtZMk5oTENBd2VEUXlOak00TlRFd0xDQXdlREV6T1RjeU1qUXdMQ0F3ZURnMFl6WXhNVEl3TENBd2VEZzFOR0V5TkRka0xDQXdlR1F5WW1JelpHWTRMQ0F3ZUdGbFpqa3pNakV4TENBd2VHTTNNamxoTVRaa0xDQXdlREZrT1dVeVpqUmlMQ0F3ZUdSallqSXpNR1l6TENBd2VEQmtPRFkxTW1WakxDQXdlRGMzWXpGbE0yUXdMQ0F3ZURKaVlqTXhOalpqTENBd2VHRTVOekJpT1RrNUxDQXdlREV4T1RRME9HWmhMQ0F3ZURRM1pUazJOREl5TENBd2VHRTRabU00WTJNMExDQXdlR0V3WmpBelpqRmhMQ0F3ZURVMk4yUXlZMlE0TENBd2VESXlNek01TUdWbUxDQXdlRGczTkRrMFpXTTNMQ0F3ZUdRNU16aGtNV014TENBd2VEaGpZMkZoTW1abExDQXdlRGs0WkRRd1lqTTJMQ0F3ZUdFMlpqVTRNV05tTENBd2VHRTFOMkZrWlRJNExDQXdlR1JoWWpjNFpUSTJMQ0F3ZURObVlXUmlabUUwTENBd2VESmpNMkU1WkdVMExDQXdlRFV3TnpnNU1qQmtMQ0F3ZURaaE5XWmpZemxpTENBd2VEVTBOMlUwTmpZeUxDQXdlR1kyT0dReE0yTXlMQ0F3ZURrd1pEaGlPR1U0TENBd2VESmxNemxtTnpWbExDQXdlRGd5WXpOaFptWTFMQ0F3ZURsbU5XUTRNR0psTENBd2VEWTVaREE1TXpkakxDQXdlRFptWkRVeVpHRTVMQ0F3ZUdObU1qVXhNbUl6TENBd2VHTTRZV001T1ROaUxDQXdlREV3TVRnM1pHRTNMQ0F3ZUdVNE9XTTJNelpsTENBd2VHUmlNMkppWWpkaUxDQXdlR05rTWpZM09EQTVMQ0F3ZURabE5Ua3hPR1kwTENBd2VHVmpPV0ZpTnpBeExDQXdlRGd6TkdZNVlXRTRMQ0F3ZUdVMk9UVTJaVFkxTENBd2VHRmhabVpsTmpkbExDQXdlREl4WW1OalpqQTRMQ0F3ZUdWbU1UVmxPR1UyTENBd2VHSmhaVGM1WW1RNUxDQXdlRFJoTm1Zek5tTmxMQ0F3ZUdWaE9XWXdPV1EwTENBd2VESTVZakEzWTJRMkxDQXdlRE14WVRSaU1tRm1MQ0F3ZURKaE0yWXlNek14TENBd2VHTTJZVFU1TkRNd0xDQXdlRE0xWVRJMk5tTXdMQ0F3ZURjME5HVmlZek0zTENBd2VHWmpPREpqWVdFMkxDQXdlR1V3T1RCa01HSXdMQ0F3ZURNellUZGtPREUxTENBd2VHWXhNRFE1T0RSaExDQXdlRFF4WldOa1lXWTNMQ0F3ZURkbVkyUTFNREJsTENBd2VERTNPVEZtTmpKbUxDQXdlRGMyTkdSa05qaGtMQ0F3ZURRelpXWmlNRFJrTENBd2VHTmpZV0UwWkRVMExDQXdlR1UwT1RZd05HUm1MQ0F3ZURsbFpERmlOV1V6TENBd2VEUmpObUU0T0RGaUxDQXdlR014TW1NeFptSTRMQ0F3ZURRMk5qVTFNVGRtTENBd2VEbGtOV1ZsWVRBMExDQXdlREF4T0dNek5UVmtMQ0F3ZUdaaE9EYzNORGN6TENBd2VHWmlNR0kwTVRKbExDQXdlR0l6TmpjeFpEVmhMQ0F3ZURreVpHSmtNalV5TENBd2VHVTVNVEExTmpNekxDQXdlRFprWkRZME56RXpMQ0F3ZURsaFpEYzJNVGhqTENBd2VETTNZVEV3WXpkaExDQXdlRFU1WmpneE5EaGxMQ0F3ZUdWaU1UTXpZemc1TENBd2VHTmxZVGt5TjJWbExDQXdlR0kzTmpGak9UTTFMQ0F3ZUdVeE1XTmxOV1ZrTENBd2VEZGhORGRpTVROakxDQXdlRGxqWkRKa1pqVTVMQ0F3ZURVMVpqSTNNek5tTENBd2VERTRNVFJqWlRjNUxDQXdlRGN6WXpjek4ySm1MQ0F3ZURVelpqZGpaR1ZoTENBd2VEVm1abVJoWVRWaUxDQXdlR1JtTTJRMlpqRTBMQ0F3ZURjNE5EUmtZamcyTENBd2VHTmhZV1ptTXpneExDQXdlR0k1Tmpoak5ETmxMQ0F3ZURNNE1qUXpOREpqTENBd2VHTXlZVE0wTURWbUxDQXdlREUyTVdSak16Y3lMQ0F3ZUdKalpUSXlOVEJqTENBd2VESTRNMk0wT1RoaUxDQXdlR1ptTUdRNU5UUXhMQ0F3ZURNNVlUZ3dNVGN4TENBd2VEQTRNR05pTTJSbExDQXdlR1E0WWpSbE5EbGpMQ0F3ZURZME5UWmpNVGt3TENBd2VEZGlZMkk0TkRZeExDQXdlR1ExTXpKaU5qY3dMQ0F3ZURRNE5tTTFZemMwTENBd2VHUXdZamcxTnpReVhUdGNiaUFnSUNCMllYSWdWRFlnUFNCYk1IZzFNRFV4WmpSaE55d2dNSGcxTXpkbE5ERTJOU3dnTUhoak16RmhNVGRoTkN3Z01IZzVOak5oTWpjMVpTd2dNSGhqWWpOaVlXSTJZaXdnTUhobU1URm1PV1EwTlN3Z01IaGhZbUZqWm1FMU9Dd2dNSGc1TXpSaVpUTXdNeXdnTUhnMU5USXdNekJtWVN3Z01IaG1ObUZrTnpZMlpDd2dNSGc1TVRnNFkyTTNOaXdnTUhneU5XWTFNREkwWXl3Z01IaG1ZelJtWlRWa055d2dNSGhrTjJNMU1tRmpZaXdnTUhnNE1ESTJNelUwTkN3Z01IZzRabUkxTmpKaE15d2dNSGcwT1dSbFlqRTFZU3dnTUhnMk56STFZbUV4WWl3Z01IZzVPRFExWldFd1pTd2dNSGhsTVRWa1ptVmpNQ3dnTUhnd01tTXpNbVkzTlN3Z01IZ3hNamd4TkdObU1Dd2dNSGhoTXpoa05EWTVOeXdnTUhoak5qWmlaRE5tT1N3Z01IaGxOekF6T0dZMVppd2dNSGc1TlRFMU9USTVZeXdnTUhobFltSm1ObVEzWVN3Z01IaGtZVGsxTlRJMU9Td2dNSGd5WkdRMFltVTRNeXdnTUhoa016VTROelF5TVN3Z01IZ3lPVFE1WlRBMk9Td2dNSGcwTkRobFl6bGpPQ3dnTUhnMllUYzFZekk0T1N3Z01IZzNPR1kwT0dVM09Td2dNSGcyWWprNU5UZ3paU3dnTUhoa1pESTNZamszTVN3Z01IaGlObUpsWlRFMFppd2dNSGd4TjJZd09EaGhaQ3dnTUhnMk5tTTVNakJoWXl3Z01IaGlORGRrWTJVellTd2dNSGd4T0RZelpHWTBZU3dnTUhnNE1tVTFNV0V6TVN3Z01IZzJNRGszTlRFek15d2dNSGcwTlRZeU5UTTNaaXdnTUhobE1HSXhOalEzTnl3Z01IZzROR0ppTm1KaFpTd2dNSGd4WTJabE9ERmhNQ3dnTUhnNU5HWTVNRGd5WWl3Z01IZzFPRGN3TkRnMk9Dd2dNSGd4T1RobU5EVm1aQ3dnTUhnNE56azBaR1UyWXl3Z01IaGlOelV5TjJKbU9Dd2dNSGd5TTJGaU56TmtNeXdnTUhobE1qY3lOR0l3TWl3Z01IZzFOMlV6TVdZNFppd2dNSGd5WVRZMk5UVmhZaXdnTUhnd04ySXlaV0l5T0N3Z01IZ3dNekptWWpWak1pd2dNSGc1WVRnMll6VTNZaXdnTUhoaE5XUXpNemN3T0N3Z01IaG1Nak13TWpnNE55d2dNSGhpTWpJelltWmhOU3dnTUhoaVlUQXlNRE0yWVN3Z01IZzFZMlZrTVRZNE1pd2dNSGd5WWpoaFkyWXhZeXdnTUhnNU1tRTNOemxpTkN3Z01IaG1NR1l6TURkbU1pd2dNSGhoTVRSbE5qbGxNaXdnTUhoalpEWTFaR0ZtTkN3Z01IaGtOVEEyTURWaVpTd2dNSGd4Wm1ReE16UTJNaXdnTUhnNFlXTTBZVFptWlN3Z01IZzVaRE0wTW1VMU15d2dNSGhoTUdFeVpqTTFOU3dnTUhnek1qQTFPR0ZsTVN3Z01IZzNOV0UwWmpabFlpd2dNSGd6T1RCaU9ETmxZeXdnTUhoaFlUUXdOakJsWml3Z01IZ3dOalZsTnpFNVppd2dNSGcxTVdKa05tVXhNQ3dnTUhobU9UTmxNakU0WVN3Z01IZ3paRGsyWkdRd05pd2dNSGhoWldSa00yVXdOU3dnTUhnME5qUmtaVFppWkN3Z01IaGlOVGt4TlRRNFpDd2dNSGd3TlRjeFl6UTFaQ3dnTUhnMlpqQTBNRFprTkN3Z01IaG1aall3TlRBeE5Td2dNSGd5TkRFNU9UaG1ZaXdnTUhnNU4yUTJZbVJsT1N3Z01IaGpZemc1TkRBME15d2dNSGczTnpZM1pEazVaU3dnTUhoaVpHSXdaVGcwTWl3Z01IZzRPREEzT0RrNFlpd2dNSGd6T0dVM01UazFZaXdnTUhoa1lqYzVZemhsWlN3Z01IZzBOMkV4TjJNd1lTd2dNSGhsT1Rkak5ESXdaaXdnTUhoak9XWTRPRFF4WlN3Z01IZ3dNREF3TURBd01Dd2dNSGc0TXpBNU9EQTROaXdnTUhnME9ETXlNbUpsWkN3Z01IaGhZekZsTVRFM01Dd2dNSGcwWlRaak5XRTNNaXdnTUhobVltWmtNR1ZtWml3Z01IZzFOakJtT0RVek9Dd2dNSGd4WlROa1lXVmtOU3dnTUhneU56TTJNbVF6T1N3Z01IZzJOREJoTUdaa09Td2dNSGd5TVRZNE5XTmhOaXdnTUhoa01UbGlOV0kxTkN3Z01IZ3pZVEkwTXpZeVpTd2dNSGhpTVRCak1HRTJOeXdnTUhnd1pqa3pOVGRsTnl3Z01IaGtNbUkwWldVNU5pd2dNSGc1WlRGaU9XSTVNU3dnTUhnMFpqZ3dZekJqTlN3Z01IaGhNall4WkdNeU1Dd2dNSGcyT1RWaE56YzBZaXdnTUhneE5qRmpNVEl4WVN3Z01IZ3dZV1V5T1ROaVlTd2dNSGhsTldNd1lUQXlZU3dnTUhnME16TmpNakpsTUN3Z01IZ3haREV5TVdJeE55d2dNSGd3WWpCbE1Ea3daQ3dnTUhoaFpHWXlPR0pqTnl3Z01IaGlPVEprWWpaaE9Dd2dNSGhqT0RFME1XVmhPU3dnTUhnNE5UVTNaakV4T1N3Z01IZzBZMkZtTnpVd055d2dNSGhpWW1WbE9UbGtaQ3dnTUhobVpHRXpOMlkyTUN3Z01IZzVabVkzTURFeU5pd2dNSGhpWXpWak56Sm1OU3dnTUhoak5UUTBOall6WWl3Z01IZ3pORFZpWm1JM1pTd2dNSGczTmpoaU5ETXlPU3dnTUhoa1kyTmlNak5qTml3Z01IZzJPR0kyWldSbVl5d2dNSGcyTTJJNFpUUm1NU3dnTUhoallXUTNNekZrWXl3Z01IZ3hNRFF5TmpNNE5Td2dNSGcwTURFek9UY3lNaXdnTUhneU1EZzBZell4TVN3Z01IZzNaRGcxTkdFeU5Dd2dNSGhtT0dReVltSXpaQ3dnTUhneE1XRmxaamt6TWl3Z01IZzJaR00zTWpsaE1Td2dNSGcwWWpGa09XVXlaaXdnTUhobU0yUmpZakl6TUN3Z01IaGxZekJrT0RZMU1pd2dNSGhrTURjM1l6RmxNeXdnTUhnMll6SmlZak14Tml3Z01IZzVPV0U1TnpCaU9Td2dNSGhtWVRFeE9UUTBPQ3dnTUhneU1qUTNaVGsyTkN3Z01IaGpOR0U0Wm1NNFl5d2dNSGd4WVdFd1pqQXpaaXdnTUhoa09EVTJOMlF5WXl3Z01IaGxaakl5TXpNNU1Dd2dNSGhqTnpnM05EazBaU3dnTUhoak1XUTVNemhrTVN3Z01IaG1aVGhqWTJGaE1pd2dNSGd6TmprNFpEUXdZaXdnTUhoalptRTJaalU0TVN3Z01IZ3lPR0UxTjJGa1pTd2dNSGd5Tm1SaFlqYzRaU3dnTUhoaE5ETm1ZV1JpWml3Z01IaGxOREpqTTJFNVpDd2dNSGd3WkRVd056ZzVNaXdnTUhnNVlqWmhOV1pqWXl3Z01IZzJNalUwTjJVME5pd2dNSGhqTW1ZMk9HUXhNeXdnTUhobE9Ea3daRGhpT0N3Z01IZzFaVEpsTXpsbU55d2dNSGhtTlRneVl6TmhaaXdnTUhoaVpUbG1OV1E0TUN3Z01IZzNZelk1WkRBNU15d2dNSGhoT1RabVpEVXlaQ3dnTUhoaU0yTm1NalV4TWl3Z01IZ3pZbU00WVdNNU9Td2dNSGhoTnpFd01UZzNaQ3dnTUhnMlpXVTRPV00yTXl3Z01IZzNZbVJpTTJKaVlpd2dNSGd3T1dOa01qWTNPQ3dnTUhobU5EWmxOVGt4T0N3Z01IZ3dNV1ZqT1dGaU55d2dNSGhoT0Rnek5HWTVZU3dnTUhnMk5XVTJPVFUyWlN3Z01IZzNaV0ZoWm1abE5pd2dNSGd3T0RJeFltTmpaaXdnTUhobE5tVm1NVFZsT0N3Z01IaGtPV0poWlRjNVlpd2dNSGhqWlRSaE5tWXpOaXdnTUhoa05HVmhPV1l3T1N3Z01IaGtOakk1WWpBM1l5d2dNSGhoWmpNeFlUUmlNaXdnTUhnek1USmhNMll5TXl3Z01IZ3pNR00yWVRVNU5Dd2dNSGhqTURNMVlUSTJOaXdnTUhnek56YzBOR1ZpWXl3Z01IaGhObVpqT0RKallTd2dNSGhpTUdVd09UQmtNQ3dnTUhneE5UTXpZVGRrT0N3Z01IZzBZV1l4TURRNU9Dd2dNSGhtTnpReFpXTmtZU3dnTUhnd1pUZG1ZMlExTUN3Z01IZ3laakUzT1RGbU5pd2dNSGc0WkRjMk5HUmtOaXdnTUhnMFpEUXpaV1ppTUN3Z01IZzFOR05qWVdFMFpDd2dNSGhrWm1VME9UWXdOQ3dnTUhobE16bGxaREZpTlN3Z01IZ3hZalJqTm1FNE9Dd2dNSGhpT0dNeE1tTXhaaXdnTUhnM1pqUTJOalUxTVN3Z01IZ3dORGxrTldWbFlTd2dNSGcxWkRBeE9HTXpOU3dnTUhnM00yWmhPRGMzTkN3Z01IZ3laV1ppTUdJME1Td2dNSGcxWVdJek5qY3haQ3dnTUhnMU1qa3laR0prTWl3Z01IZ3pNMlU1TVRBMU5pd2dNSGd4TXpaa1pEWTBOeXdnTUhnNFl6bGhaRGMyTVN3Z01IZzNZVE0zWVRFd1l5d2dNSGc0WlRVNVpqZ3hOQ3dnTUhnNE9XVmlNVE16WXl3Z01IaGxaV05sWVRreU55d2dNSGd6TldJM05qRmpPU3dnTUhobFpHVXhNV05sTlN3Z01IZ3pZemRoTkRkaU1Td2dNSGcxT1RsalpESmtaaXdnTUhnelpqVTFaakkzTXl3Z01IZzNPVEU0TVRSalpTd2dNSGhpWmpjell6Y3pOeXdnTUhobFlUVXpaamRqWkN3Z01IZzFZalZtWm1SaFlTd2dNSGd4TkdSbU0yUTJaaXdnTUhnNE5qYzRORFJrWWl3Z01IZzRNV05oWVdabU15d2dNSGd6WldJNU5qaGpOQ3dnTUhneVl6TTRNalF6TkN3Z01IZzFabU15WVRNME1Dd2dNSGczTWpFMk1XUmpNeXdnTUhnd1kySmpaVEl5TlN3Z01IZzRZakk0TTJNME9Td2dNSGcwTVdabU1HUTVOU3dnTUhnM01UTTVZVGd3TVN3Z01IaGtaVEE0TUdOaU15d2dNSGc1WTJRNFlqUmxOQ3dnTUhnNU1EWTBOVFpqTVN3Z01IZzJNVGRpWTJJNE5Dd2dNSGczTUdRMU16SmlOaXdnTUhnM05EUTRObU0xWXl3Z01IZzBNbVF3WWpnMU4xMDdYRzRnSUNBZ2RtRnlJRlEzSUQwZ1d6QjRZVGMxTURVeFpqUXNJREI0TmpVMU16ZGxOREVzSURCNFlUUmpNekZoTVRjc0lEQjROV1U1TmpOaE1qY3NJREI0Tm1KallqTmlZV0lzSURCNE5EVm1NVEZtT1dRc0lEQjROVGhoWW1GalptRXNJREI0TURNNU16UmlaVE1zSURCNFptRTFOVEl3TXpBc0lEQjRObVJtTm1Ga056WXNJREI0TnpZNU1UZzRZMk1zSURCNE5HTXlOV1kxTURJc0lEQjRaRGRtWXpSbVpUVXNJREI0WTJKa04yTTFNbUVzSURCNE5EUTRNREkyTXpVc0lEQjRZVE00Wm1JMU5qSXNJREI0TldFME9XUmxZakVzSURCNE1XSTJOekkxWW1Fc0lEQjRNR1U1T0RRMVpXRXNJREI0WXpCbE1UVmtabVVzSURCNE56VXdNbU16TW1Zc0lEQjRaakF4TWpneE5HTXNJREI0T1RkaE16aGtORFlzSURCNFpqbGpOalppWkRNc0lEQjROV1psTnpBek9HWXNJREI0T1dNNU5URTFPVElzSURCNE4yRmxZbUptTm1Rc0lEQjROVGxrWVRrMU5USXNJREI0T0RNeVpHUTBZbVVzSURCNE1qRmtNelU0TnpRc0lEQjROamt5T1RRNVpUQXNJREI0WXpnME5EaGxZemtzSURCNE9EazJZVGMxWXpJc0lEQjROemszT0dZME9HVXNJREI0TTJVMllqazVOVGdzSURCNE56RmtaREkzWWprc0lEQjROR1ppTm1KbFpURXNJREI0WVdReE4yWXdPRGdzSURCNFlXTTJObU01TWpBc0lEQjRNMkZpTkRka1kyVXNJREI0TkdFeE9EWXpaR1lzSURCNE16RTRNbVUxTVdFc0lEQjRNek0yTURrM05URXNJREI0TjJZME5UWXlOVE1zSURCNE56ZGxNR0l4TmpRc0lEQjRZV1U0TkdKaU5tSXNJREI0WVRBeFkyWmxPREVzSURCNE1tSTVOR1k1TURnc0lEQjROamcxT0Rjd05EZ3NJREI0Wm1ReE9UaG1ORFVzSURCNE5tTTROemswWkdVc0lEQjRaamhpTnpVeU4ySXNJREI0WkRNeU0yRmlOek1zSURCNE1ESmxNamN5TkdJc0lEQjRPR1kxTjJVek1XWXNJREI0WVdJeVlUWTJOVFVzSURCNE1qZ3dOMkl5WldJc0lEQjRZekl3TXpKbVlqVXNJREI0TjJJNVlUZzJZelVzSURCNE1EaGhOV1F6TXpjc0lEQjRPRGRtTWpNd01qZ3NJREI0WVRWaU1qSXpZbVlzSURCNE5tRmlZVEF5TURNc0lEQjRPREkxWTJWa01UWXNJREI0TVdNeVlqaGhZMllzSURCNFlqUTVNbUUzTnprc0lEQjRaakptTUdZek1EY3NJREI0WlRKaE1UUmxOamtzSURCNFpqUmpaRFkxWkdFc0lEQjRZbVZrTlRBMk1EVXNJREI0TmpJeFptUXhNelFzSURCNFptVTRZV00wWVRZc0lEQjROVE01WkRNME1tVXNJREI0TlRWaE1HRXlaak1zSURCNFpURXpNakExT0dFc0lEQjRaV0kzTldFMFpqWXNJREI0WldNek9UQmlPRE1zSURCNFpXWmhZVFF3TmpBc0lEQjRPV1l3TmpWbE56RXNJREI0TVRBMU1XSmtObVVzSURCNE9HRm1PVE5sTWpFc0lEQjRNRFl6WkRrMlpHUXNJREI0TURWaFpXUmtNMlVzSURCNFltUTBOalJrWlRZc0lEQjRPR1JpTlRreE5UUXNJREI0TldRd05UY3hZelFzSURCNFpEUTJaakEwTURZc0lEQjRNVFZtWmpZd05UQXNJREI0Wm1JeU5ERTVPVGdzSURCNFpUazVOMlEyWW1Rc0lEQjRORE5qWXpnNU5EQXNJREI0T1dVM056WTNaRGtzSURCNE5ESmlaR0l3WlRnc0lEQjRPR0k0T0RBM09Ea3NJREI0TldJek9HVTNNVGtzSURCNFpXVmtZamM1WXpnc0lEQjRNR0UwTjJFeE4yTXNJREI0TUdabE9UZGpORElzSURCNE1XVmpPV1k0T0RRc0lEQjRNREF3TURBd01EQXNJREI0T0RZNE16QTVPREFzSURCNFpXUTBPRE15TW1Jc0lEQjROekJoWXpGbE1URXNJREI0TnpJMFpUWmpOV0VzSURCNFptWm1ZbVprTUdVc0lEQjRNemcxTmpCbU9EVXNJREI0WkRVeFpUTmtZV1VzSURCNE16a3lOek0yTW1Rc0lEQjRaRGsyTkRCaE1HWXNJREI0WVRZeU1UWTROV01zSURCNE5UUmtNVGxpTldJc0lEQjRNbVV6WVRJME16WXNJREI0TmpkaU1UQmpNR0VzSURCNFpUY3daamt6TlRjc0lEQjRPVFprTW1JMFpXVXNJREI0T1RFNVpURmlPV0lzSURCNFl6VTBaamd3WXpBc0lEQjRNakJoTWpZeFpHTXNJREI0TkdJMk9UVmhOemNzSURCNE1XRXhOakZqTVRJc0lEQjRZbUV3WVdVeU9UTXNJREI0TW1GbE5XTXdZVEFzSURCNFpUQTBNek5qTWpJc0lEQjRNVGN4WkRFeU1XSXNJREI0TUdRd1lqQmxNRGtzSURCNFl6ZGhaR1l5T0dJc0lEQjRZVGhpT1RKa1lqWXNJREI0WVRsak9ERTBNV1VzSURCNE1UazROVFUzWmpFc0lEQjRNRGMwWTJGbU56VXNJREI0WkdSaVltVmxPVGtzSURCNE5qQm1aR0V6TjJZc0lEQjRNalk1Wm1ZM01ERXNJREI0WmpWaVl6VmpOeklzSURCNE0ySmpOVFEwTmpZc0lEQjROMlV6TkRWaVptSXNJREI0TWprM05qaGlORE1zSURCNFl6WmtZMk5pTWpNc0lEQjRabU0yT0dJMlpXUXNJREI0WmpFMk0ySTRaVFFzSURCNFpHTmpZV1EzTXpFc0lEQjRPRFV4TURReU5qTXNJREI0TWpJME1ERXpPVGNzSURCNE1URXlNRGcwWXpZc0lEQjRNalEzWkRnMU5HRXNJREI0TTJSbU9HUXlZbUlzSURCNE16SXhNV0ZsWmprc0lEQjRZVEUyWkdNM01qa3NJREI0TW1ZMFlqRmtPV1VzSURCNE16Qm1NMlJqWWpJc0lEQjROVEpsWXpCa09EWXNJREI0WlROa01EYzNZekVzSURCNE1UWTJZekppWWpNc0lEQjRZams1T1dFNU56QXNJREI0TkRobVlURXhPVFFzSURCNE5qUXlNalEzWlRrc0lEQjRPR05qTkdFNFptTXNJREI0TTJZeFlXRXdaakFzSURCNE1tTmtPRFUyTjJRc0lEQjRPVEJsWmpJeU16TXNJREI0TkdWak56ZzNORGtzSURCNFpERmpNV1E1TXpnc0lEQjRZVEptWlRoalkyRXNJREI0TUdJek5qazRaRFFzSURCNE9ERmpabUUyWmpVc0lEQjRaR1V5T0dFMU4yRXNJREI0T0dVeU5tUmhZamNzSURCNFltWmhORE5tWVdRc0lEQjRPV1JsTkRKak0yRXNJREI0T1RJd1pEVXdOemdzSURCNFkyTTVZalpoTldZc0lEQjRORFkyTWpVME4yVXNJREI0TVROak1tWTJPR1FzSURCNFlqaGxPRGt3WkRnc0lEQjRaamMxWlRKbE16a3NJREI0WVdabU5UZ3lZek1zSURCNE9EQmlaVGxtTldRc0lEQjRPVE0zWXpZNVpEQXNJREI0TW1SaE9UWm1aRFVzSURCNE1USmlNMk5tTWpVc0lEQjRPVGt6WW1NNFlXTXNJREI0TjJSaE56RXdNVGdzSURCNE5qTTJaV1U0T1dNc0lEQjRZbUkzWW1SaU0ySXNJREI0Tnpnd09XTmtNallzSURCNE1UaG1ORFpsTlRrc0lEQjRZamN3TVdWak9XRXNJREI0T1dGaE9EZ3pOR1lzSURCNE5tVTJOV1UyT1RVc0lEQjRaVFkzWldGaFptWXNJREI0WTJZd09ESXhZbU1zSURCNFpUaGxObVZtTVRVc0lEQjRPV0prT1dKaFpUY3NJREI0TXpaalpUUmhObVlzSURCNE1EbGtOR1ZoT1dZc0lEQjROMk5rTmpJNVlqQXNJREI0WWpKaFpqTXhZVFFzSURCNE1qTXpNVEpoTTJZc0lEQjRPVFF6TUdNMllUVXNJREI0Tmpaak1ETTFZVElzSURCNFltTXpOemMwTkdVc0lEQjRZMkZoTm1aak9ESXNJREI0WkRCaU1HVXdPVEFzSURCNFpEZ3hOVE16WVRjc0lEQjRPVGcwWVdZeE1EUXNJREI0WkdGbU56UXhaV01zSURCNE5UQXdaVGRtWTJRc0lEQjRaall5WmpFM09URXNJREI0WkRZNFpEYzJOR1FzSURCNFlqQTBaRFF6WldZc0lEQjROR1ExTkdOallXRXNJREI0TURSa1ptVTBPVFlzSURCNFlqVmxNemxsWkRFc0lEQjRPRGd4WWpSak5tRXNJREI0TVdaaU9HTXhNbU1zSURCNE5URTNaalEyTmpVc0lEQjRaV0V3TkRsa05XVXNJREI0TXpVMVpEQXhPR01zSURCNE56UTNNMlpoT0Rjc0lEQjROREV5WldaaU1HSXNJREI0TVdRMVlXSXpOamNzSURCNFpESTFNamt5WkdJc0lEQjROVFl6TTJVNU1UQXNJREI0TkRjeE16WmtaRFlzSURCNE5qRTRZemxoWkRjc0lEQjRNR00zWVRNM1lURXNJREI0TVRRNFpUVTVaamdzSURCNE0yTTRPV1ZpTVRNc0lEQjRNamRsWldObFlUa3NJREI0WXprek5XSTNOakVzSURCNFpUVmxaR1V4TVdNc0lEQjRZakV6WXpkaE5EY3NJREI0WkdZMU9UbGpaRElzSURCNE56TXpaalUxWmpJc0lEQjRZMlUzT1RFNE1UUXNJREI0TXpkaVpqY3pZemNzSURCNFkyUmxZVFV6Wmpjc0lEQjRZV0UxWWpWbVptUXNJREI0Tm1ZeE5HUm1NMlFzSURCNFpHSTROamM0TkRRc0lEQjRaak00TVdOaFlXWXNJREI0WXpRelpXSTVOamdzSURCNE16UXlZek00TWpRc0lEQjROREExWm1NeVlUTXNJREI0WXpNM01qRTJNV1FzSURCNE1qVXdZMkpqWlRJc0lEQjRORGs0WWpJNE0yTXNJREI0T1RVME1XWm1NR1FzSURCNE1ERTNNVE01WVRnc0lEQjRZak5rWlRBNE1HTXNJREI0WlRRNVkyUTRZalFzSURCNFl6RTVNRFkwTlRZc0lEQjRPRFEyTVRkaVkySXNJREI0WWpZM01HUTFNeklzSURCNE5XTTNORFE0Tm1Nc0lEQjROVGMwTW1Rd1lqaGRPMXh1SUNBZ0lIWmhjaUJVT0NBOUlGc3dlR1kwWVRjMU1EVXhMQ0F3ZURReE5qVTFNemRsTENBd2VERTNZVFJqTXpGaExDQXdlREkzTldVNU5qTmhMQ0F3ZUdGaU5tSmpZak5pTENBd2VEbGtORFZtTVRGbUxDQXdlR1poTlRoaFltRmpMQ0F3ZUdVek1ETTVNelJpTENBd2VETXdabUUxTlRJd0xDQXdlRGMyTm1SbU5tRmtMQ0F3ZUdOak56WTVNVGc0TENBd2VEQXlOR015TldZMUxDQXdlR1UxWkRkbVl6Um1MQ0F3ZURKaFkySmtOMk0xTENBd2VETTFORFE0TURJMkxDQXdlRFl5WVRNNFptSTFMQ0F3ZUdJeE5XRTBPV1JsTENBd2VHSmhNV0kyTnpJMUxDQXdlR1ZoTUdVNU9EUTFMQ0F3ZUdabFl6QmxNVFZrTENBd2VESm1OelV3TW1NekxDQXdlRFJqWmpBeE1qZ3hMQ0F3ZURRMk9UZGhNemhrTENBd2VHUXpaamxqTmpaaUxDQXdlRGhtTldabE56QXpMQ0F3ZURreU9XTTVOVEUxTENBd2VEWmtOMkZsWW1KbUxDQXdlRFV5TlRsa1lUazFMQ0F3ZUdKbE9ETXlaR1EwTENBd2VEYzBNakZrTXpVNExDQXdlR1V3TmpreU9UUTVMQ0F3ZUdNNVl6ZzBORGhsTENBd2VHTXlPRGsyWVRjMUxDQXdlRGhsTnprM09HWTBMQ0F3ZURVNE0yVTJZams1TENBd2VHSTVOekZrWkRJM0xDQXdlR1V4TkdaaU5tSmxMQ0F3ZURnNFlXUXhOMll3TENBd2VESXdZV00yTm1NNUxDQXdlR05sTTJGaU5EZGtMQ0F3ZUdSbU5HRXhPRFl6TENBd2VERmhNekU0TW1VMUxDQXdlRFV4TXpNMk1EazNMQ0F3ZURVek4yWTBOVFl5TENBd2VEWTBOemRsTUdJeExDQXdlRFppWVdVNE5HSmlMQ0F3ZURneFlUQXhZMlpsTENBd2VEQTRNbUk1TkdZNUxDQXdlRFE0TmpnMU9EY3dMQ0F3ZURRMVptUXhPVGhtTENBd2VHUmxObU00TnprMExDQXdlRGRpWmpoaU56VXlMQ0F3ZURjelpETXlNMkZpTENBd2VEUmlNREpsTWpjeUxDQXdlREZtT0dZMU4yVXpMQ0F3ZURVMVlXSXlZVFkyTENBd2VHVmlNamd3TjJJeUxDQXdlR0kxWXpJd016Sm1MQ0F3ZUdNMU4ySTVZVGcyTENBd2VETTNNRGhoTldRekxDQXdlREk0T0RkbU1qTXdMQ0F3ZUdKbVlUVmlNakl6TENBd2VEQXpObUZpWVRBeUxDQXdlREUyT0RJMVkyVmtMQ0F3ZUdObU1XTXlZamhoTENBd2VEYzVZalE1TW1FM0xDQXdlREEzWmpKbU1HWXpMQ0F3ZURZNVpUSmhNVFJsTENBd2VHUmhaalJqWkRZMUxDQXdlREExWW1Wa05UQTJMQ0F3ZURNME5qSXhabVF4TENBd2VHRTJabVU0WVdNMExDQXdlREpsTlRNNVpETTBMQ0F3ZUdZek5UVmhNR0V5TENBd2VEaGhaVEV6TWpBMUxDQXdlR1kyWldJM05XRTBMQ0F3ZURnelpXTXpPVEJpTENBd2VEWXdaV1poWVRRd0xDQXdlRGN4T1dZd05qVmxMQ0F3ZURabE1UQTFNV0prTENBd2VESXhPR0ZtT1RObExDQXdlR1JrTURZelpEazJMQ0F3ZURObE1EVmhaV1JrTENBd2VHVTJZbVEwTmpSa0xDQXdlRFUwT0dSaU5Ua3hMQ0F3ZUdNME5XUXdOVGN4TENBd2VEQTJaRFEyWmpBMExDQXdlRFV3TVRWbVpqWXdMQ0F3ZURrNFptSXlOREU1TENBd2VHSmtaVGs1TjJRMkxDQXdlRFF3TkROall6ZzVMQ0F3ZUdRNU9XVTNOelkzTENBd2VHVTROREppWkdJd0xDQXdlRGc1T0dJNE9EQTNMQ0F3ZURFNU5XSXpPR1UzTENBd2VHTTRaV1ZrWWpjNUxDQXdlRGRqTUdFME4yRXhMQ0F3ZURReU1HWmxPVGRqTENBd2VEZzBNV1ZqT1dZNExDQXdlREF3TURBd01EQXdMQ0F3ZURnd09EWTRNekE1TENBd2VESmlaV1EwT0RNeUxDQXdlREV4TnpCaFl6RmxMQ0F3ZURWaE56STBaVFpqTENBd2VEQmxabVptWW1aa0xDQXdlRGcxTXpnMU5qQm1MQ0F3ZUdGbFpEVXhaVE5rTENBd2VESmtNemt5TnpNMkxDQXdlREJtWkRrMk5EQmhMQ0F3ZURWallUWXlNVFk0TENBd2VEVmlOVFJrTVRsaUxDQXdlRE0yTW1VellUSTBMQ0F3ZURCaE5qZGlNVEJqTENBd2VEVTNaVGN3WmprekxDQXdlR1ZsT1Raa01tSTBMQ0F3ZURsaU9URTVaVEZpTENBd2VHTXdZelUwWmpnd0xDQXdlR1JqTWpCaE1qWXhMQ0F3ZURjM05HSTJPVFZoTENBd2VERXlNV0V4TmpGakxDQXdlRGt6WW1Fd1lXVXlMQ0F3ZUdFd01tRmxOV013TENBd2VESXlaVEEwTXpOakxDQXdlREZpTVRjeFpERXlMQ0F3ZURBNU1HUXdZakJsTENBd2VEaGlZemRoWkdZeUxDQXdlR0kyWVRoaU9USmtMQ0F3ZURGbFlUbGpPREUwTENBd2VHWXhNVGs0TlRVM0xDQXdlRGMxTURjMFkyRm1MQ0F3ZURrNVpHUmlZbVZsTENBd2VEZG1OakJtWkdFekxDQXdlREF4TWpZNVptWTNMQ0F3ZURjeVpqVmlZelZqTENBd2VEWTJNMkpqTlRRMExDQXdlR1ppTjJVek5EVmlMQ0F3ZURRek1qazNOamhpTENBd2VESXpZelprWTJOaUxDQXdlR1ZrWm1NMk9HSTJMQ0F3ZUdVMFpqRTJNMkk0TENBd2VETXhaR05qWVdRM0xDQXdlRFl6T0RVeE1EUXlMQ0F3ZURrM01qSTBNREV6TENBd2VHTTJNVEV5TURnMExDQXdlRFJoTWpRM1pEZzFMQ0F3ZUdKaU0yUm1PR1F5TENBd2VHWTVNekl4TVdGbExDQXdlREk1WVRFMlpHTTNMQ0F3ZURsbE1tWTBZakZrTENBd2VHSXlNekJtTTJSakxDQXdlRGcyTlRKbFl6QmtMQ0F3ZUdNeFpUTmtNRGMzTENBd2VHSXpNVFkyWXpKaUxDQXdlRGN3WWprNU9XRTVMQ0F3ZURrME5EaG1ZVEV4TENBd2VHVTVOalF5TWpRM0xDQXdlR1pqT0dOak5HRTRMQ0F3ZUdZd00yWXhZV0V3TENBd2VEZGtNbU5rT0RVMkxDQXdlRE16T1RCbFpqSXlMQ0F3ZURRNU5HVmpOemczTENBd2VETTRaREZqTVdRNUxDQXdlR05oWVRKbVpUaGpMQ0F3ZUdRME1HSXpOams0TENBd2VHWTFPREZqWm1FMkxDQXdlRGRoWkdVeU9HRTFMQ0F3ZUdJM09HVXlObVJoTENBd2VHRmtZbVpoTkRObUxDQXdlRE5oT1dSbE5ESmpMQ0F3ZURjNE9USXdaRFV3TENBd2VEVm1ZMk01WWpaaExDQXdlRGRsTkRZMk1qVTBMQ0F3ZURoa01UTmpNbVkyTENBd2VHUTRZamhsT0Rrd0xDQXdlRE01WmpjMVpUSmxMQ0F3ZUdNellXWm1OVGd5TENBd2VEVmtPREJpWlRsbUxDQXdlR1F3T1RNM1l6WTVMQ0F3ZUdRMU1tUmhPVFptTENBd2VESTFNVEppTTJObUxDQXdlR0ZqT1RrelltTTRMQ0F3ZURFNE4yUmhOekV3TENBd2VEbGpOak0yWldVNExDQXdlRE5pWW1JM1ltUmlMQ0F3ZURJMk56Z3dPV05rTENBd2VEVTVNVGhtTkRabExDQXdlRGxoWWpjd01XVmpMQ0F3ZURSbU9XRmhPRGd6TENBd2VEazFObVUyTldVMkxDQXdlR1ptWlRZM1pXRmhMQ0F3ZUdKalkyWXdPREl4TENBd2VERTFaVGhsTm1WbUxDQXdlR1UzT1dKa09XSmhMQ0F3ZURabU16WmpaVFJoTENBd2VEbG1NRGxrTkdWaExDQXdlR0l3TjJOa05qSTVMQ0F3ZUdFMFlqSmhaak14TENBd2VETm1Nak16TVRKaExDQXdlR0UxT1RRek1HTTJMQ0F3ZUdFeU5qWmpNRE0xTENBd2VEUmxZbU16TnpjMExDQXdlRGd5WTJGaE5tWmpMQ0F3ZURrd1pEQmlNR1V3TENBd2VHRTNaRGd4TlRNekxDQXdlREEwT1RnMFlXWXhMQ0F3ZUdWalpHRm1OelF4TENBd2VHTmtOVEF3WlRkbUxDQXdlRGt4WmpZeVpqRTNMQ0F3ZURSa1pEWTRaRGMyTENBd2VHVm1ZakEwWkRRekxDQXdlR0ZoTkdRMU5HTmpMQ0F3ZURrMk1EUmtabVUwTENBd2VHUXhZalZsTXpsbExDQXdlRFpoT0RneFlqUmpMQ0F3ZURKak1XWmlPR014TENBd2VEWTFOVEUzWmpRMkxDQXdlRFZsWldFd05EbGtMQ0F3ZURoak16VTFaREF4TENBd2VEZzNOelEzTTJaaExDQXdlREJpTkRFeVpXWmlMQ0F3ZURZM01XUTFZV0l6TENBd2VHUmlaREkxTWpreUxDQXdlREV3TlRZek0yVTVMQ0F3ZUdRMk5EY3hNelprTENBd2VHUTNOakU0WXpsaExDQXdlR0V4TUdNM1lUTTNMQ0F3ZUdZNE1UUTRaVFU1TENBd2VERXpNMk00T1dWaUxDQXdlR0U1TWpkbFpXTmxMQ0F3ZURZeFl6a3pOV0kzTENBd2VERmpaVFZsWkdVeExDQXdlRFEzWWpFell6ZGhMQ0F3ZUdReVpHWTFPVGxqTENBd2VHWXlOek16WmpVMUxDQXdlREUwWTJVM09URTRMQ0F3ZUdNM016ZGlaamN6TENBd2VHWTNZMlJsWVRVekxDQXdlR1prWVdFMVlqVm1MQ0F3ZUROa05tWXhOR1JtTENBd2VEUTBaR0k0TmpjNExDQXdlR0ZtWmpNNE1XTmhMQ0F3ZURZNFl6UXpaV0k1TENBd2VESTBNelF5WXpNNExDQXdlR0V6TkRBMVptTXlMQ0F3ZURGa1l6TTNNakUyTENBd2VHVXlNalV3WTJKakxDQXdlRE5qTkRrNFlqSTRMQ0F3ZURCa09UVTBNV1ptTENBd2VHRTRNREUzTVRNNUxDQXdlREJqWWpOa1pUQTRMQ0F3ZUdJMFpUUTVZMlE0TENBd2VEVTJZekU1TURZMExDQXdlR05pT0RRMk1UZGlMQ0F3ZURNeVlqWTNNR1ExTENBd2VEWmpOV00zTkRRNExDQXdlR0k0TlRjME1tUXdYVHRjYmx4dUlDQWdJQzh2SUZSeVlXNXpabTl5YldGMGFXOXVjeUJtYjNJZ1pHVmpjbmx3ZEdsdmJpQnJaWGtnWlhod1lXNXphVzl1WEc0Z0lDQWdkbUZ5SUZVeElEMGdXekI0TURBd01EQXdNREFzSURCNE1HVXdPVEJrTUdJc0lEQjRNV014TWpGaE1UWXNJREI0TVRJeFlqRTNNV1FzSURCNE16Z3lORE0wTW1Nc0lEQjRNell5WkRNNU1qY3NJREI0TWpRek5qSmxNMkVzSURCNE1tRXpaakl6TXpFc0lEQjROekEwT0RZNE5UZ3NJREI0TjJVME1UWTFOVE1zSURCNE5tTTFZVGN5TkdVc0lEQjROakkxTXpkbU5EVXNJREI0TkRnMll6VmpOelFzSURCNE5EWTJOVFV4TjJZc0lEQjROVFEzWlRRMk5qSXNJREI0TldFM056UmlOamtzSURCNFpUQTVNR1F3WWpBc0lEQjRaV1U1T1dSa1ltSXNJREI0Wm1NNE1tTmhZVFlzSURCNFpqSTRZbU0zWVdRc0lEQjRaRGhpTkdVME9XTXNJREI0WkRaaVpHVTVPVGNzSURCNFl6UmhObVpsT0dFc0lEQjRZMkZoWm1Zek9ERXNJREI0T1RCa09HSTRaVGdzSURCNE9XVmtNV0kxWlRNc0lEQjRPR05qWVdFeVptVXNJREI0T0RKak0yRm1aalVzSURCNFlUaG1ZemhqWXpRc0lEQjRZVFptTlRneFkyWXNJREI0WWpSbFpUazJaRElzSURCNFltRmxOemxpWkRrc0lEQjRaR0l6WW1KaU4ySXNJREI0WkRVek1tSTJOekFzSURCNFl6Y3lPV0V4Tm1Rc0lEQjRZemt5TUdGak5qWXNJREI0WlRNeFpqaG1OVGNzSURCNFpXUXhOamd5TldNc0lEQjRabVl3WkRrMU5ERXNJREI0WmpFd05EazROR0VzSURCNFlXSTNNMlF6TWpNc0lEQjRZVFUzWVdSbE1qZ3NJREI0WWpjMk1XTTVNelVzSURCNFlqazJPR00wTTJVc0lEQjRPVE0xTjJVM01HWXNJREI0T1dRMVpXVmhNRFFzSURCNE9HWTBOV1prTVRrc0lEQjRPREUwWTJZd01USXNJREI0TTJKaFlqWmlZMklzSURCNE16VmhNalkyWXpBc0lEQjRNamRpT1RjeFpHUXNJREI0TWpsaU1EZGpaRFlzSURCNE1ETTRaalZtWlRjc0lEQjRNR1E0TmpVeVpXTXNJREI0TVdZNVpEUTFaakVzSURCNE1URTVORFE0Wm1Fc0lEQjROR0psTXpBek9UTXNJREI0TkRWbFlUQmxPVGdzSURCNE5UZG1NVEU1T0RVc0lEQjROVGxtT0RFME9HVXNJREI0TnpOak56TTNZbVlzSURCNE4yUmpaVE5oWWpRc0lEQjRObVprTlRKa1lUa3NJREI0TmpGa1l6SXdZVElzSURCNFlXUTNOalprWmpZc0lEQjRZVE0zWmpZd1ptUXNJREI0WWpFMk5EYzNaVEFzSURCNFltWTJaRGRoWldJc0lEQjRPVFUxTWpVNVpHRXNJREI0T1dJMVlqVTBaREVzSURCNE9EazBNRFF6WTJNc0lEQjRPRGMwT1RSbFl6Y3NJREI0WkdRelpUQTFZV1VzSURCNFpETXpOekE0WVRVc0lEQjRZekV5WXpGbVlqZ3NJREI0WTJZeU5URXlZak1zSURCNFpUVXhZVE14T0RJc0lEQjRaV0l4TXpOak9Ea3NJREI0Wmprd09ESmlPVFFzSURCNFpqY3dNVEkyT1dZc0lEQjROR1JsTm1Ka05EWXNJREI0TkRObFptSXdOR1FzSURCNE5URm1OR0UzTlRBc0lEQjROV1ptWkdGaE5XSXNJREI0TnpWak1qZzVObUVzSURCNE4ySmpZamcwTmpFc0lEQjROamxrTURrek4yTXNJREI0Tmpka09UbGxOemNzSURCNE0yUmhaV1ExTVdVc0lEQjRNek5oTjJRNE1UVXNJREI0TWpGaVkyTm1NRGdzSURCNE1tWmlOV015TURNc0lEQjRNRFU0WVdVeE16SXNJREI0TUdJNE0yVmpNemtzSURCNE1UazVPR1ppTWpRc0lEQjRNVGM1TVdZMk1tWXNJREI0TnpZMFpHUTJPR1FzSURCNE56ZzBOR1JpT0RZc0lEQjRObUUxWm1Oak9XSXNJREI0TmpRMU5tTXhPVEFzSURCNE5HVTJPV1V5WVRFc0lEQjROREEyTUdWbVlXRXNJREI0TlRJM1ltWTRZamNzSURCNE5XTTNNbVkxWW1Nc0lEQjRNRFl3TldKbFpEVXNJREI0TURnd1kySXpaR1VzSURCNE1XRXhOMkUwWXpNc0lEQjRNVFF4WldFNVl6Z3NJREI0TTJVeU1UaGhaamtzSURCNE16QXlPRGczWmpJc0lEQjRNakl6TXprd1pXWXNJREI0TW1NellUbGtaVFFzSURCNE9UWmtaREEyTTJRc0lEQjRPVGhrTkRCaU16WXNJREI0T0dGalpqRmpNbUlzSURCNE9EUmpOakV4TWpBc0lEQjRZV1ZtT1RNeU1URXNJREI0WVRCbU1ETm1NV0VzSURCNFlqSmxZakk0TURjc0lEQjRZbU5sTWpJMU1HTXNJREI0WlRZNU5UWmxOalVzSURCNFpUZzVZell6Tm1Vc0lEQjRabUU0TnpjME56TXNJREI0WmpRNFpUYzVOemdzSURCNFpHVmlNVFZoTkRrc0lEQjRaREJpT0RVM05ESXNJREI0WXpKaE16UXdOV1lzSURCNFkyTmhZVFJrTlRRc0lEQjROREZsWTJSaFpqY3NJREI0TkdabE5XUTNabU1zSURCNE5XUm1aV013WlRFc0lEQjROVE5tTjJOa1pXRXNJREI0Tnpsak9HVmxaR0lzSURCNE56ZGpNV1V6WkRBc0lEQjROalZrWVdZMFkyUXNJREI0Tm1Ka00yWTVZellzSURCNE16RmhOR0l5WVdZc0lEQjRNMlpoWkdKbVlUUXNJREI0TW1SaU5tRTRZamtzSURCNE1qTmlabUUxWWpJc0lEQjRNRGs0TURnMk9ETXNJREI0TURjNE9UaGlPRGdzSURCNE1UVTVNamxqT1RVc0lEQjRNV0k1WWpreE9XVXNJREI0WVRFM1l6QmhORGNzSURCNFlXWTNOVEEzTkdNc0lEQjRZbVEyWlRFd05URXNJREI0WWpNMk56RmtOV0VzSURCNE9UazFPRE5sTm1Jc0lEQjRPVGMxTVRNek5qQXNJREI0T0RVMFlUSTBOMlFzSURCNE9HSTBNekk1TnpZc0lEQjRaREV6TkRZeU1XWXNJREI0WkdZelpEWm1NVFFzSURCNFkyUXlOamM0TURrc0lEQjRZek15WmpjMU1ESXNJREI0WlRreE1EVTJNek1zSURCNFpUY3hPVFZpTXpnc0lEQjRaalV3TWpSak1qVXNJREI0Wm1Jd1lqUXhNbVVzSURCNE9XRmtOell4T0dNc0lEQjRPVFJrWlRaak9EY3NJREI0T0Raak5UZGlPV0VzSURCNE9EaGpZemMyT1RFc0lEQjRZVEptTXpVMVlUQXNJREI0WVdObVlUVTRZV0lzSURCNFltVmxNVFJtWWpZc0lEQjRZakJsT0RReVltUXNJREI0WldFNVpqQTVaRFFzSURCNFpUUTVOakEwWkdZc0lEQjRaalk0WkRFell6SXNJREI0WmpnNE5ERmxZemtzSURCNFpESmlZak5rWmpnc0lEQjRaR05pTWpNd1pqTXNJREI0WTJWaE9USTNaV1VzSURCNFl6QmhNREpoWlRVc0lEQjROMkUwTjJJeE0yTXNJREI0TnpRMFpXSmpNemNzSURCNE5qWTFOV0ZpTW1Fc0lEQjROamcxWTJFMk1qRXNJREI0TkRJMk16ZzFNVEFzSURCNE5HTTJZVGc0TVdJc0lEQjROV1UzTVRsbU1EWXNJREI0TlRBM09Ea3lNR1FzSURCNE1HRXdabVE1TmpRc0lEQjRNRFF3Tm1RME5tWXNJREI0TVRZeFpHTXpOeklzSURCNE1UZ3hOR05sTnprc0lEQjRNekl5WW1Wa05EZ3NJREI0TTJNeU1tVXdORE1zSURCNE1tVXpPV1kzTldVc0lEQjRNakF6TUdaaE5UVXNJREI0WldNNVlXSTNNREVzSURCNFpUSTVNMkpoTUdFc0lEQjRaakE0T0dGa01UY3NJREI0Wm1VNE1XRXdNV01zSURCNFpEUmlaVGd6TW1Rc0lEQjRaR0ZpTnpobE1qWXNJREI0WXpoaFl6azVNMklzSURCNFl6WmhOVGswTXpBc0lEQjRPV05rTW1SbU5Ua3NJREI0T1RKa1ltUXlOVElzSURCNE9EQmpNR00xTkdZc0lEQjRPR1ZqT1dNNE5EUXNJREI0WVRSbU5tVmlOelVzSURCNFlXRm1abVUyTjJVc0lEQjRZamhsTkdZeE5qTXNJREI0WWpabFpHWmpOamdzSURCNE1HTXdZVFkzWWpFc0lEQjRNREl3TXpaaFltRXNJREI0TVRBeE9EZGtZVGNzSURCNE1XVXhNVGN3WVdNc0lEQjRNelF5WlRVek9XUXNJREI0TTJFeU56VmxPVFlzSURCNE1qZ3pZelE1T0dJc0lEQjRNall6TlRRME9EQXNJREI0TjJNME1qQm1aVGtzSURCNE56STBZakF5WlRJc0lEQjROakExTURFMVptWXNJREI0Tm1VMU9URTRaalFzSURCNE5EUTJOak5pWXpVc0lEQjROR0UyWmpNMlkyVXNJREI0TlRnM05ESXhaRE1zSURCNE5UWTNaREpqWkRnc0lEQjRNemRoTVRCak4yRXNJREI0TXpsaE9EQXhOekVzSURCNE1tSmlNekUyTm1Nc0lEQjRNalZpWVRGaU5qY3NJREI0TUdZNE5UTTROVFlzSURCNE1ERTRZek0xTldRc0lEQjRNVE01TnpJeU5EQXNJREI0TVdRNVpUSm1OR0lzSURCNE5EZGxPVFkwTWpJc0lEQjRORGxsTURZNU1qa3NJREI0TldKbVlqZGxNelFzSURCNE5UVm1NamN6TTJZc0lEQjROMlpqWkRVd01HVXNJREI0TnpGak5EVmtNRFVzSURCNE5qTmtaalJoTVRnc0lEQjRObVJrTmpRM01UTXNJREI0WkRjek1XUmpZMkVzSURCNFpEa3pPR1F4WXpFc0lEQjRZMkl5TTJNMlpHTXNJREI0WXpVeVlXTmlaRGNzSURCNFpXWXhOV1U0WlRZc0lEQjRaVEV4WTJVMVpXUXNJREI0WmpNd04yWXlaakFzSURCNFptUXdaV1ptWm1Jc0lEQjRZVGMzT1dJME9USXNJREI0WVRrM01HSTVPVGtzSURCNFltSTJZbUZsT0RRc0lEQjRZalUyTW1Fek9HWXNJREI0T1dZMVpEZ3dZbVVzSURCNE9URTFORGhrWWpVc0lEQjRPRE0wWmpsaFlUZ3NJREI0T0dRME5qazNZVE5kTzF4dUlDQWdJSFpoY2lCVk1pQTlJRnN3ZURBd01EQXdNREF3TENBd2VEQmlNR1V3T1RCa0xDQXdlREUyTVdNeE1qRmhMQ0F3ZURGa01USXhZakUzTENBd2VESmpNemd5TkRNMExDQXdlREkzTXpZeVpETTVMQ0F3ZUROaE1qUXpOakpsTENBd2VETXhNbUV6WmpJekxDQXdlRFU0TnpBME9EWTRMQ0F3ZURVek4yVTBNVFkxTENBd2VEUmxObU0xWVRjeUxDQXdlRFExTmpJMU16ZG1MQ0F3ZURjME5EZzJZelZqTENBd2VEZG1ORFkyTlRVeExDQXdlRFl5TlRRM1pUUTJMQ0F3ZURZNU5XRTNOelJpTENBd2VHSXdaVEE1TUdRd0xDQXdlR0ppWldVNU9XUmtMQ0F3ZUdFMlptTTRNbU5oTENBd2VHRmtaakk0WW1NM0xDQXdlRGxqWkRoaU5HVTBMQ0F3ZURrM1pEWmlaR1U1TENBd2VEaGhZelJoTm1abExDQXdlRGd4WTJGaFptWXpMQ0F3ZUdVNE9UQmtPR0k0TENBd2VHVXpPV1ZrTVdJMUxDQXdlR1psT0dOallXRXlMQ0F3ZUdZMU9ESmpNMkZtTENBd2VHTTBZVGhtWXpoakxDQXdlR05tWVRabU5UZ3hMQ0F3ZUdReVlqUmxaVGsyTENBd2VHUTVZbUZsTnpsaUxDQXdlRGRpWkdJelltSmlMQ0F3ZURjd1pEVXpNbUkyTENBd2VEWmtZemN5T1dFeExDQXdlRFkyWXpreU1HRmpMQ0F3ZURVM1pUTXhaamhtTENBd2VEVmpaV1F4TmpneUxDQXdlRFF4Wm1Zd1pEazFMQ0F3ZURSaFpqRXdORGs0TENBd2VESXpZV0kzTTJRekxDQXdlREk0WVRVM1lXUmxMQ0F3ZURNMVlqYzJNV001TENBd2VETmxZamsyT0dNMExDQXdlREJtT1RNMU4yVTNMQ0F3ZURBME9XUTFaV1ZoTENBd2VERTVPR1kwTldaa0xDQXdlREV5T0RFMFkyWXdMQ0F3ZUdOaU0ySmhZalppTENBd2VHTXdNelZoTWpZMkxDQXdlR1JrTWpkaU9UY3hMQ0F3ZUdRMk1qbGlNRGRqTENBd2VHVTNNRE00WmpWbUxDQXdlR1ZqTUdRNE5qVXlMQ0F3ZUdZeE1XWTVaRFExTENBd2VHWmhNVEU1TkRRNExDQXdlRGt6TkdKbE16QXpMQ0F3ZURrNE5EVmxZVEJsTENBd2VEZzFOVGRtTVRFNUxDQXdlRGhsTlRsbU9ERTBMQ0F3ZUdKbU56TmpOek0zTENBd2VHSTBOMlJqWlROaExDQXdlR0U1Tm1aa05USmtMQ0F3ZUdFeU5qRmtZekl3TENBd2VHWTJZV1EzTmpaa0xDQXdlR1prWVRNM1pqWXdMQ0F3ZUdVd1lqRTJORGMzTENBd2VHVmlZbVkyWkRkaExDQXdlR1JoT1RVMU1qVTVMQ0F3ZUdReE9XSTFZalUwTENBd2VHTmpPRGswTURRekxDQXdlR00zT0RjME9UUmxMQ0F3ZUdGbFpHUXpaVEExTENBd2VHRTFaRE16TnpBNExDQXdlR0k0WXpFeVl6Rm1MQ0F3ZUdJelkyWXlOVEV5TENBd2VEZ3laVFV4WVRNeExDQXdlRGc1WldJeE16TmpMQ0F3ZURrMFpqa3dPREppTENBd2VEbG1aamN3TVRJMkxDQXdlRFEyTkdSbE5tSmtMQ0F3ZURSa05ETmxabUl3TENBd2VEVXdOVEZtTkdFM0xDQXdlRFZpTldabVpHRmhMQ0F3ZURaaE56VmpNamc1TENBd2VEWXhOMkpqWWpnMExDQXdlRGRqTmpsa01Ea3pMQ0F3ZURjM05qZGtPVGxsTENBd2VERmxNMlJoWldRMUxDQXdlREUxTXpOaE4yUTRMQ0F3ZURBNE1qRmlZMk5tTENBd2VEQXpNbVppTldNeUxDQXdlRE15TURVNFlXVXhMQ0F3ZURNNU1HSTRNMlZqTENBd2VESTBNVGs1T0daaUxDQXdlREptTVRjNU1XWTJMQ0F3ZURoa056WTBaR1EyTENBd2VEZzJOemcwTkdSaUxDQXdlRGxpTm1FMVptTmpMQ0F3ZURrd05qUTFObU14TENBd2VHRXhOR1UyT1dVeUxDQXdlR0ZoTkRBMk1HVm1MQ0F3ZUdJM05USTNZbVk0TENBd2VHSmpOV00zTW1ZMUxDQXdlR1ExTURZd05XSmxMQ0F3ZUdSbE1EZ3dZMkl6TENBd2VHTXpNV0V4TjJFMExDQXdlR000TVRReFpXRTVMQ0F3ZUdZNU0yVXlNVGhoTENBd2VHWXlNekF5T0RnM0xDQXdlR1ZtTWpJek16a3dMQ0F3ZUdVME1tTXpZVGxrTENBd2VETmtPVFprWkRBMkxDQXdlRE0yT1Roa05EQmlMQ0F3ZURKaU9HRmpaakZqTENBd2VESXdPRFJqTmpFeExDQXdlREV4WVdWbU9UTXlMQ0F3ZURGaFlUQm1NRE5tTENBd2VEQTNZakpsWWpJNExDQXdlREJqWW1ObE1qSTFMQ0F3ZURZMVpUWTVOVFpsTENBd2VEWmxaVGc1WXpZekxDQXdlRGN6Wm1FNE56YzBMQ0F3ZURjNFpqUTRaVGM1TENBd2VEUTVaR1ZpTVRWaExDQXdlRFF5WkRCaU9EVTNMQ0F3ZURWbVl6SmhNelF3TENBd2VEVTBZMk5oWVRSa0xDQXdlR1kzTkRGbFkyUmhMQ0F3ZUdaak5HWmxOV1EzTENBd2VHVXhOV1JtWldNd0xDQXdlR1ZoTlRObU4yTmtMQ0F3ZUdSaU56bGpPR1ZsTENBd2VHUXdOemRqTVdVekxDQXdlR05rTmpWa1lXWTBMQ0F3ZUdNMk5tSmtNMlk1TENBd2VHRm1NekZoTkdJeUxDQXdlR0UwTTJaaFpHSm1MQ0F3ZUdJNU1tUmlObUU0TENBd2VHSXlNak5pWm1FMUxDQXdlRGd6TURrNE1EZzJMQ0F3ZURnNE1EYzRPVGhpTENBd2VEazFNVFU1TWpsakxDQXdlRGxsTVdJNVlqa3hMQ0F3ZURRM1lURTNZekJoTENBd2VEUmpZV1kzTlRBM0xDQXdlRFV4WW1RMlpURXdMQ0F3ZURWaFlqTTJOekZrTENBd2VEWmlPVGsxT0RObExDQXdlRFl3T1RjMU1UTXpMQ0F3ZURka09EVTBZVEkwTENBd2VEYzJPR0kwTXpJNUxDQXdlREZtWkRFek5EWXlMQ0F3ZURFMFpHWXpaRFptTENBd2VEQTVZMlF5TmpjNExDQXdlREF5WXpNeVpqYzFMQ0F3ZURNelpUa3hNRFUyTENBd2VETTRaVGN4T1RWaUxDQXdlREkxWmpVd01qUmpMQ0F3ZURKbFptSXdZalF4TENBd2VEaGpPV0ZrTnpZeExDQXdlRGczT1RSa1pUWmpMQ0F3ZURsaE9EWmpOVGRpTENBd2VEa3hPRGhqWXpjMkxDQXdlR0V3WVRKbU16VTFMQ0F3ZUdGaVlXTm1ZVFU0TENBd2VHSTJZbVZsTVRSbUxDQXdlR0prWWpCbE9EUXlMQ0F3ZUdRMFpXRTVaakE1TENBd2VHUm1aVFE1TmpBMExDQXdlR015WmpZNFpERXpMQ0F3ZUdNNVpqZzROREZsTENBd2VHWTRaREppWWpOa0xDQXdlR1l6WkdOaU1qTXdMQ0F3ZUdWbFkyVmhPVEkzTENBd2VHVTFZekJoTURKaExDQXdlRE5qTjJFME4ySXhMQ0F3ZURNM056UTBaV0pqTENBd2VESmhOalkxTldGaUxDQXdlREl4TmpnMVkyRTJMQ0F3ZURFd05ESTJNemcxTENBd2VERmlOR00yWVRnNExDQXdlREEyTldVM01UbG1MQ0F3ZURCa05UQTNPRGt5TENBd2VEWTBNR0V3Wm1RNUxDQXdlRFptTURRd05tUTBMQ0F3ZURjeU1UWXhaR016TENBd2VEYzVNVGd4TkdObExDQXdlRFE0TXpJeVltVmtMQ0F3ZURRek0yTXlNbVV3TENBd2VEVmxNbVV6T1dZM0xDQXdlRFUxTWpBek1HWmhMQ0F3ZURBeFpXTTVZV0kzTENBd2VEQmhaVEk1TTJKaExDQXdlREUzWmpBNE9HRmtMQ0F3ZURGalptVTRNV0V3TENBd2VESmtaRFJpWlRnekxDQXdlREkyWkdGaU56aGxMQ0F3ZUROaVl6aGhZems1TENBd2VETXdZelpoTlRrMExDQXdlRFU1T1dOa01tUm1MQ0F3ZURVeU9USmtZbVF5TENBd2VEUm1PREJqTUdNMUxDQXdlRFEwT0dWak9XTTRMQ0F3ZURjMVlUUm1ObVZpTENBd2VEZGxZV0ZtWm1VMkxDQXdlRFl6WWpobE5HWXhMQ0F3ZURZNFlqWmxaR1pqTENBd2VHSXhNR013WVRZM0xDQXdlR0poTURJd016WmhMQ0F3ZUdFM01UQXhPRGRrTENBd2VHRmpNV1V4TVRjd0xDQXdlRGxrTXpReVpUVXpMQ0F3ZURrMk0yRXlOelZsTENBd2VEaGlNamd6WXpRNUxDQXdlRGd3TWpZek5UUTBMQ0F3ZUdVNU4yTTBNakJtTENBd2VHVXlOekkwWWpBeUxDQXdlR1ptTmpBMU1ERTFMQ0F3ZUdZME5tVTFPVEU0TENBd2VHTTFORFEyTmpOaUxDQXdlR05sTkdFMlpqTTJMQ0F3ZUdRek5UZzNOREl4TENBd2VHUTROVFkzWkRKakxDQXdlRGRoTXpkaE1UQmpMQ0F3ZURjeE16bGhPREF4TENBd2VEWmpNbUppTXpFMkxDQXdlRFkzTWpWaVlURmlMQ0F3ZURVMk1HWTROVE00TENBd2VEVmtNREU0WXpNMUxDQXdlRFF3TVRNNU56SXlMQ0F3ZURSaU1XUTVaVEptTENBd2VESXlORGRsT1RZMExDQXdlREk1TkRsbE1EWTVMQ0F3ZURNME5XSm1ZamRsTENBd2VETm1OVFZtTWpjekxDQXdlREJsTjJaalpEVXdMQ0F3ZURBMU56RmpORFZrTENBd2VERTROak5rWmpSaExDQXdlREV6Tm1Sa05qUTNMQ0F3ZUdOaFpEY3pNV1JqTENBd2VHTXhaRGt6T0dReExDQXdlR1JqWTJJeU0yTTJMQ0F3ZUdRM1l6VXlZV05pTENBd2VHVTJaV1l4TldVNExDQXdlR1ZrWlRFeFkyVTFMQ0F3ZUdZd1pqTXdOMll5TENBd2VHWmlabVF3WldabUxDQXdlRGt5WVRjM09XSTBMQ0F3ZURrNVlUazNNR0k1TENBd2VEZzBZbUkyWW1GbExDQXdlRGhtWWpVMk1tRXpMQ0F3ZUdKbE9XWTFaRGd3TENBd2VHSTFPVEUxTkRoa0xDQXdlR0U0T0RNMFpqbGhMQ0F3ZUdFek9HUTBOamszWFR0Y2JpQWdJQ0IyWVhJZ1ZUTWdQU0JiTUhnd01EQXdNREF3TUN3Z01IZ3daREJpTUdVd09Td2dNSGd4WVRFMk1XTXhNaXdnTUhneE56RmtNVEl4WWl3Z01IZ3pOREpqTXpneU5Dd2dNSGd6T1RJM016WXlaQ3dnTUhneVpUTmhNalF6Tml3Z01IZ3lNek14TW1Felppd2dNSGcyT0RVNE56QTBPQ3dnTUhnMk5UVXpOMlUwTVN3Z01IZzNNalJsTm1NMVlTd2dNSGczWmpRMU5qSTFNeXdnTUhnMVl6YzBORGcyWXl3Z01IZzFNVGRtTkRZMk5Td2dNSGcwTmpZeU5UUTNaU3dnTUhnMFlqWTVOV0UzTnl3Z01IaGtNR0l3WlRBNU1Dd2dNSGhrWkdKaVpXVTVPU3dnTUhoallXRTJabU00TWl3Z01IaGpOMkZrWmpJNFlpd2dNSGhsTkRsalpEaGlOQ3dnTUhobE9UazNaRFppWkN3Z01IaG1aVGhoWXpSaE5pd2dNSGhtTXpneFkyRmhaaXdnTUhoaU9HVTRPVEJrT0N3Z01IaGlOV1V6T1dWa01Td2dNSGhoTW1abE9HTmpZU3dnTUhoaFptWTFPREpqTXl3Z01IZzRZMk0wWVRobVl5d2dNSGc0TVdObVlUWm1OU3dnTUhnNU5tUXlZalJsWlN3Z01IZzVZbVE1WW1GbE55d2dNSGhpWWpkaVpHSXpZaXdnTUhoaU5qY3daRFV6TWl3Z01IaGhNVFprWXpjeU9Td2dNSGhoWXpZMll6a3lNQ3dnTUhnNFpqVTNaVE14Wml3Z01IZzRNalZqWldReE5pd2dNSGc1TlRReFptWXdaQ3dnTUhnNU9EUmhaakV3TkN3Z01IaGtNekl6WVdJM015d2dNSGhrWlRJNFlUVTNZU3dnTUhoak9UTTFZamMyTVN3Z01IaGpORE5sWWprMk9Dd2dNSGhsTnpCbU9UTTFOeXdnTUhobFlUQTBPV1ExWlN3Z01IaG1aREU1T0dZME5Td2dNSGhtTURFeU9ERTBZeXdnTUhnMlltTmlNMkpoWWl3Z01IZzJObU13TXpWaE1pd2dNSGczTVdSa01qZGlPU3dnTUhnM1kyUTJNamxpTUN3Z01IZzFabVUzTURNNFppd2dNSGcxTW1Wak1HUTROaXdnTUhnME5XWXhNV1k1WkN3Z01IZzBPR1poTVRFNU5Dd2dNSGd3TXprek5HSmxNeXdnTUhnd1pUazRORFZsWVN3Z01IZ3hPVGcxTlRkbU1Td2dNSGd4TkRobE5UbG1PQ3dnTUhnek4ySm1Oek5qTnl3Z01IZ3pZV0kwTjJSalpTd2dNSGd5WkdFNU5tWmtOU3dnTUhneU1HRXlOakZrWXl3Z01IZzJaR1kyWVdRM05pd2dNSGcyTUdaa1lUTTNaaXdnTUhnM04yVXdZakUyTkN3Z01IZzNZV1ZpWW1ZMlpDd2dNSGcxT1dSaE9UVTFNaXdnTUhnMU5HUXhPV0kxWWl3Z01IZzBNMk5qT0RrME1Dd2dNSGcwWldNM09EYzBPU3dnTUhnd05XRmxaR1F6WlN3Z01IZ3dPR0UxWkRNek55d2dNSGd4Wm1JNFl6RXlZeXdnTUhneE1tSXpZMll5TlN3Z01IZ3pNVGd5WlRVeFlTd2dNSGd6WXpnNVpXSXhNeXdnTUhneVlqazBaamt3T0N3Z01IZ3lOamxtWmpjd01Td2dNSGhpWkRRMk5HUmxOaXdnTUhoaU1EUmtORE5sWml3Z01IaGhOelV3TlRGbU5Dd2dNSGhoWVRWaU5XWm1aQ3dnTUhnNE9UWmhOelZqTWl3Z01IZzRORFl4TjJKallpd2dNSGc1TXpkak5qbGtNQ3dnTUhnNVpUYzNOamRrT1N3Z01IaGtOVEZsTTJSaFpTd2dNSGhrT0RFMU16TmhOeXdnTUhoalpqQTRNakZpWXl3Z01IaGpNakF6TW1aaU5Td2dNSGhsTVRNeU1EVTRZU3dnTUhobFl6TTVNR0k0TXl3Z01IaG1ZakkwTVRrNU9Dd2dNSGhtTmpKbU1UYzVNU3dnTUhoa05qaGtOelkwWkN3Z01IaGtZamcyTnpnME5Dd2dNSGhqWXpsaU5tRTFaaXdnTUhoak1Ua3dOalExTml3Z01IaGxNbUV4TkdVMk9Td2dNSGhsWm1GaE5EQTJNQ3dnTUhobU9HSTNOVEkzWWl3Z01IaG1OV0pqTldNM01pd2dNSGhpWldRMU1EWXdOU3dnTUhoaU0yUmxNRGd3WXl3Z01IaGhOR016TVdFeE55d2dNSGhoT1dNNE1UUXhaU3dnTUhnNFlXWTVNMlV5TVN3Z01IZzROMll5TXpBeU9Dd2dNSGc1TUdWbU1qSXpNeXdnTUhnNVpHVTBNbU16WVN3Z01IZ3dOak5rT1Raa1pDd2dNSGd3WWpNMk9UaGtOQ3dnTUhneFl6SmlPR0ZqWml3Z01IZ3hNVEl3T0RSak5pd2dNSGd6TWpFeFlXVm1PU3dnTUhnelpqRmhZVEJtTUN3Z01IZ3lPREEzWWpKbFlpd2dNSGd5TlRCalltTmxNaXdnTUhnMlpUWTFaVFk1TlN3Z01IZzJNelpsWlRnNVl5d2dNSGczTkRjelptRTROeXdnTUhnM09UYzRaalE0WlN3Z01IZzFZVFE1WkdWaU1Td2dNSGcxTnpReVpEQmlPQ3dnTUhnME1EVm1ZekpoTXl3Z01IZzBaRFUwWTJOaFlTd2dNSGhrWVdZM05ERmxZeXdnTUhoa04yWmpOR1psTlN3Z01IaGpNR1V4TldSbVpTd2dNSGhqWkdWaE5UTm1OeXdnTUhobFpXUmlOemxqT0N3Z01IaGxNMlF3Tnpkak1Td2dNSGhtTkdOa05qVmtZU3dnTUhobU9XTTJObUprTXl3Z01IaGlNbUZtTXpGaE5Dd2dNSGhpWm1FME0yWmhaQ3dnTUhoaE9HSTVNbVJpTml3Z01IaGhOV0l5TWpOaVppd2dNSGc0Tmpnek1EazRNQ3dnTUhnNFlqZzRNRGM0T1N3Z01IZzVZemsxTVRVNU1pd2dNSGc1TVRsbE1XSTVZaXdnTUhnd1lUUTNZVEUzWXl3Z01IZ3dOelJqWVdZM05Td2dNSGd4TURVeFltUTJaU3dnTUhneFpEVmhZak0yTnl3Z01IZ3paVFppT1RrMU9Dd2dNSGd6TXpZd09UYzFNU3dnTUhneU5EZGtPRFUwWVN3Z01IZ3lPVGMyT0dJME15d2dNSGcyTWpGbVpERXpOQ3dnTUhnMlpqRTBaR1l6WkN3Z01IZzNPREE1WTJReU5pd2dNSGczTlRBeVl6TXlaaXdnTUhnMU5qTXpaVGt4TUN3Z01IZzFZak00WlRjeE9Td2dNSGcwWXpJMVpqVXdNaXdnTUhnME1USmxabUl3WWl3Z01IZzJNVGhqT1dGa055d2dNSGcyWXpnM09UUmtaU3dnTUhnM1lqbGhPRFpqTlN3Z01IZzNOamt4T0Roall5d2dNSGcxTldFd1lUSm1NeXdnTUhnMU9HRmlZV05tWVN3Z01IZzBabUkyWW1WbE1Td2dNSGcwTW1Ka1lqQmxPQ3dnTUhnd09XUTBaV0U1Wml3Z01IZ3dOR1JtWlRRNU5pd2dNSGd4TTJNeVpqWTRaQ3dnTUhneFpXTTVaamc0TkN3Z01IZ3paR1k0WkRKaVlpd2dNSGd6TUdZelpHTmlNaXdnTUhneU4yVmxZMlZoT1N3Z01IZ3lZV1UxWXpCaE1Dd2dNSGhpTVROak4yRTBOeXdnTUhoaVl6TTNOelEwWlN3Z01IaGhZakpoTmpZMU5Td2dNSGhoTmpJeE5qZzFZeXdnTUhnNE5URXdOREkyTXl3Z01IZzRPREZpTkdNMllTd2dNSGc1WmpBMk5XVTNNU3dnTUhnNU1qQmtOVEEzT0N3Z01IaGtPVFkwTUdFd1ppd2dNSGhrTkRabU1EUXdOaXdnTUhoak16Y3lNVFl4WkN3Z01IaGpaVGM1TVRneE5Dd2dNSGhsWkRRNE16SXlZaXdnTUhobE1EUXpNMk15TWl3Z01IaG1OelZsTW1Vek9Td2dNSGhtWVRVMU1qQXpNQ3dnTUhoaU56QXhaV001WVN3Z01IaGlZVEJoWlRJNU15d2dNSGhoWkRFM1pqQTRPQ3dnTUhoaE1ERmpabVU0TVN3Z01IZzRNekprWkRSaVpTd2dNSGc0WlRJMlpHRmlOeXdnTUhnNU9UTmlZemhoWXl3Z01IZzVORE13WXpaaE5Td2dNSGhrWmpVNU9XTmtNaXdnTUhoa01qVXlPVEprWWl3Z01IaGpOVFJtT0RCak1Dd2dNSGhqT0RRME9HVmpPU3dnTUhobFlqYzFZVFJtTml3Z01IaGxOamRsWVdGbVppd2dNSGhtTVRZellqaGxOQ3dnTUhobVl6WTRZalpsWkN3Z01IZzJOMkl4TUdNd1lTd2dNSGcyWVdKaE1ESXdNeXdnTUhnM1pHRTNNVEF4T0N3Z01IZzNNR0ZqTVdVeE1Td2dNSGcxTXpsa016UXlaU3dnTUhnMVpUazJNMkV5Tnl3Z01IZzBPVGhpTWpnell5d2dNSGcwTkRnd01qWXpOU3dnTUhnd1ptVTVOMk0wTWl3Z01IZ3dNbVV5TnpJMFlpd2dNSGd4TldabU5qQTFNQ3dnTUhneE9HWTBObVUxT1N3Z01IZ3pZbU0xTkRRMk5pd2dNSGd6Tm1ObE5HRTJaaXdnTUhneU1XUXpOVGczTkN3Z01IZ3lZMlE0TlRZM1pDd2dNSGd3WXpkaE16ZGhNU3dnTUhnd01UY3hNemxoT0N3Z01IZ3hOalpqTW1KaU15d2dNSGd4WWpZM01qVmlZU3dnTUhnek9EVTJNR1k0TlN3Z01IZ3pOVFZrTURFNFl5d2dNSGd5TWpRd01UTTVOeXdnTUhneVpqUmlNV1E1WlN3Z01IZzJOREl5TkRkbE9Td2dNSGcyT1RJNU5EbGxNQ3dnTUhnM1pUTTBOV0ptWWl3Z01IZzNNek5tTlRWbU1pd2dNSGcxTURCbE4yWmpaQ3dnTUhnMVpEQTFOekZqTkN3Z01IZzBZVEU0TmpOa1ppd2dNSGcwTnpFek5tUmtOaXdnTUhoa1kyTmhaRGN6TVN3Z01IaGtNV014WkRrek9Dd2dNSGhqTm1SalkySXlNeXdnTUhoalltUTNZelV5WVN3Z01IaGxPR1UyWldZeE5Td2dNSGhsTldWa1pURXhZeXdnTUhobU1tWXdaak13Tnl3Z01IaG1abVppWm1Rd1pTd2dNSGhpTkRreVlUYzNPU3dnTUhoaU9UazVZVGszTUN3Z01IaGhaVGcwWW1JMllpd2dNSGhoTXpobVlqVTJNaXdnTUhnNE1HSmxPV1kxWkN3Z01IZzRaR0kxT1RFMU5Dd2dNSGc1WVdFNE9ETTBaaXdnTUhnNU4yRXpPR1EwTmwwN1hHNGdJQ0FnZG1GeUlGVTBJRDBnV3pCNE1EQXdNREF3TURBc0lEQjRNRGt3WkRCaU1HVXNJREI0TVRJeFlURTJNV01zSURCNE1XSXhOekZrTVRJc0lEQjRNalF6TkRKak16Z3NJREI0TW1Rek9USTNNellzSURCNE16WXlaVE5oTWpRc0lEQjRNMll5TXpNeE1tRXNJREI0TkRnMk9EVTROekFzSURCNE5ERTJOVFV6TjJVc0lEQjROV0UzTWpSbE5tTXNJREI0TlRNM1pqUTFOaklzSURCNE5tTTFZemMwTkRnc0lEQjROalUxTVRkbU5EWXNJREI0TjJVME5qWXlOVFFzSURCNE56YzBZalk1TldFc0lEQjRPVEJrTUdJd1pUQXNJREI0T1Rsa1pHSmlaV1VzSURCNE9ESmpZV0UyWm1Nc0lEQjRPR0pqTjJGa1pqSXNJREI0WWpSbE5EbGpaRGdzSURCNFltUmxPVGszWkRZc0lEQjRZVFptWlRoaFl6UXNJREI0WVdabU16Z3hZMkVzSURCNFpEaGlPR1U0T1RBc0lEQjRaREZpTldVek9XVXNJREI0WTJGaE1tWmxPR01zSURCNFl6TmhabVkxT0RJc0lEQjRabU00WTJNMFlUZ3NJREI0WmpVNE1XTm1ZVFlzSURCNFpXVTVObVF5WWpRc0lEQjRaVGM1WW1RNVltRXNJREI0TTJKaVlqZGlaR0lzSURCNE16SmlOamN3WkRVc0lEQjRNamxoTVRaa1l6Y3NJREI0TWpCaFl6WTJZemtzSURCNE1XWTRaalUzWlRNc0lEQjRNVFk0TWpWalpXUXNJREI0TUdRNU5UUXhabVlzSURCNE1EUTVPRFJoWmpFc0lEQjROek5rTXpJellXSXNJREI0TjJGa1pUSTRZVFVzSURCNE5qRmpPVE0xWWpjc0lEQjROamhqTkRObFlqa3NJREI0TlRkbE56Qm1PVE1zSURCNE5XVmxZVEEwT1dRc0lEQjRORFZtWkRFNU9HWXNJREI0TkdObU1ERXlPREVzSURCNFlXSTJZbU5pTTJJc0lEQjRZVEkyTm1Nd016VXNJREI0WWprM01XUmtNamNzSURCNFlqQTNZMlEyTWprc0lEQjRPR1kxWm1VM01ETXNJREI0T0RZMU1tVmpNR1FzSURCNE9XUTBOV1l4TVdZc0lEQjRPVFEwT0daaE1URXNJREI0WlRNd016a3pOR0lzSURCNFpXRXdaVGs0TkRVc0lEQjRaakV4T1RnMU5UY3NJREI0WmpneE5EaGxOVGtzSURCNFl6Y3pOMkptTnpNc0lEQjRZMlV6WVdJME4yUXNJREI0WkRVeVpHRTVObVlzSURCNFpHTXlNR0V5TmpFc0lEQjROelkyWkdZMllXUXNJREI0TjJZMk1HWmtZVE1zSURCNE5qUTNOMlV3WWpFc0lEQjRObVEzWVdWaVltWXNJREI0TlRJMU9XUmhPVFVzSURCNE5XSTFOR1F4T1dJc0lEQjROREEwTTJOak9Ea3NJREI0TkRrMFpXTTNPRGNzSURCNE0yVXdOV0ZsWkdRc0lEQjRNemN3T0dFMVpETXNJREI0TW1NeFptSTRZekVzSURCNE1qVXhNbUl6WTJZc0lEQjRNV0V6TVRneVpUVXNJREI0TVRNell6ZzVaV0lzSURCNE1EZ3lZamswWmprc0lEQjRNREV5TmpsbVpqY3NJREI0WlRaaVpEUTJOR1FzSURCNFpXWmlNRFJrTkRNc0lEQjRaalJoTnpVd05URXNJREI0Wm1SaFlUVmlOV1lzSURCNFl6STRPVFpoTnpVc0lEQjRZMkk0TkRZeE4ySXNJREI0WkRBNU16ZGpOamtzSURCNFpEazVaVGMzTmpjc0lEQjRZV1ZrTlRGbE0yUXNJREI0WVRka09ERTFNek1zSURCNFltTmpaakE0TWpFc0lEQjRZalZqTWpBek1tWXNJREI0T0dGbE1UTXlNRFVzSURCNE9ETmxZek01TUdJc0lEQjRPVGhtWWpJME1Ua3NJREI0T1RGbU5qSm1NVGNzSURCNE5HUmtOamhrTnpZc0lEQjRORFJrWWpnMk56Z3NJREI0Tldaall6bGlObUVzSURCNE5UWmpNVGt3TmpRc0lEQjROamxsTW1FeE5HVXNJREI0TmpCbFptRmhOREFzSURCNE4ySm1PR0kzTlRJc0lEQjROekptTldKak5XTXNJREI0TURWaVpXUTFNRFlzSURCNE1HTmlNMlJsTURnc0lEQjRNVGRoTkdNek1XRXNJREI0TVdWaE9XTTRNVFFzSURCNE1qRTRZV1k1TTJVc0lEQjRNamc0TjJZeU16QXNJREI0TXpNNU1HVm1NaklzSURCNE0yRTVaR1UwTW1Nc0lEQjRaR1F3TmpOa09UWXNJREI0WkRRd1lqTTJPVGdzSURCNFkyWXhZekppT0dFc0lEQjRZell4TVRJd09EUXNJREI0Wmprek1qRXhZV1VzSURCNFpqQXpaakZoWVRBc0lEQjRaV0l5T0RBM1lqSXNJREI0WlRJeU5UQmpZbU1zSURCNE9UVTJaVFkxWlRZc0lEQjRPV00yTXpabFpUZ3NJREI0T0RjM05EY3pabUVzSURCNE9HVTNPVGM0WmpRc0lEQjRZakUxWVRRNVpHVXNJREI0WWpnMU56UXlaREFzSURCNFlUTTBNRFZtWXpJc0lEQjRZV0UwWkRVMFkyTXNJREI0WldOa1lXWTNOREVzSURCNFpUVmtOMlpqTkdZc0lEQjRabVZqTUdVeE5XUXNJREI0WmpkalpHVmhOVE1zSURCNFl6aGxaV1JpTnprc0lEQjRZekZsTTJRd056Y3NJREI0WkdGbU5HTmtOalVzSURCNFpETm1PV00yTm1Jc0lEQjRZVFJpTW1GbU16RXNJREI0WVdSaVptRTBNMllzSURCNFlqWmhPR0k1TW1Rc0lEQjRZbVpoTldJeU1qTXNJREI0T0RBNE5qZ3pNRGtzSURCNE9EazRZamc0TURjc0lEQjRPVEk1WXprMU1UVXNJREI0T1dJNU1UbGxNV0lzSURCNE4yTXdZVFEzWVRFc0lEQjROelV3TnpSallXWXNJREI0Tm1VeE1EVXhZbVFzSURCNE5qY3haRFZoWWpNc0lEQjROVGd6WlRaaU9Ua3NJREI0TlRFek16WXdPVGNzSURCNE5HRXlORGRrT0RVc0lEQjRORE15T1RjMk9HSXNJREI0TXpRMk1qRm1aREVzSURCNE0yUTJaakUwWkdZc0lEQjRNalkzT0RBNVkyUXNJREI0TW1ZM05UQXlZek1zSURCNE1UQTFOak16WlRrc0lEQjRNVGsxWWpNNFpUY3NJREI0TURJMFl6STFaalVzSURCNE1HSTBNVEpsWm1Jc0lEQjRaRGMyTVRoak9XRXNJREI0WkdVMll6ZzNPVFFzSURCNFl6VTNZamxoT0RZc0lEQjRZMk0zTmpreE9EZ3NJREI0WmpNMU5XRXdZVElzSURCNFptRTFPR0ZpWVdNc0lEQjRaVEUwWm1JMlltVXNJREI0WlRnME1tSmtZakFzSURCNE9XWXdPV1EwWldFc0lEQjRPVFl3TkdSbVpUUXNJREI0T0dReE0yTXlaallzSURCNE9EUXhaV001Wmpnc0lEQjRZbUl6WkdZNFpESXNJREI0WWpJek1HWXpaR01zSURCNFlUa3lOMlZsWTJVc0lEQjRZVEF5WVdVMVl6QXNJREI0TkRkaU1UTmpOMkVzSURCNE5HVmlZek0zTnpRc0lEQjROVFZoWWpKaE5qWXNJREI0TldOaE5qSXhOamdzSURCNE5qTTROVEV3TkRJc0lEQjRObUU0T0RGaU5HTXNJREI0TnpFNVpqQTJOV1VzSURCNE56ZzVNakJrTlRBc0lEQjRNR1prT1RZME1HRXNJREI0TURaa05EWm1NRFFzSURCNE1XUmpNemN5TVRZc0lEQjRNVFJqWlRjNU1UZ3NJREI0TW1KbFpEUTRNeklzSURCNE1qSmxNRFF6TTJNc0lEQjRNemxtTnpWbE1tVXNJREI0TXpCbVlUVTFNakFzSURCNE9XRmlOekF4WldNc0lEQjRPVE5pWVRCaFpUSXNJREI0T0RoaFpERTNaakFzSURCNE9ERmhNREZqWm1Vc0lEQjRZbVU0TXpKa1pEUXNJREI0WWpjNFpUSTJaR0VzSURCNFlXTTVPVE5pWXpnc0lEQjRZVFU1TkRNd1l6WXNJREI0WkRKa1pqVTVPV01zSURCNFpHSmtNalV5T1RJc0lEQjRZekJqTlRSbU9EQXNJREI0WXpsak9EUTBPR1VzSURCNFpqWmxZamMxWVRRc0lEQjRabVpsTmpkbFlXRXNJREI0WlRSbU1UWXpZamdzSURCNFpXUm1Zelk0WWpZc0lEQjRNR0UyTjJJeE1HTXNJREI0TURNMllXSmhNRElzSURCNE1UZzNaR0UzTVRBc0lEQjRNVEUzTUdGak1XVXNJREI0TW1VMU16bGtNelFzSURCNE1qYzFaVGsyTTJFc0lEQjRNMk0wT1RoaU1qZ3NJREI0TXpVME5EZ3dNallzSURCNE5ESXdabVU1TjJNc0lEQjROR0l3TW1VeU56SXNJREI0TlRBeE5XWm1OakFzSURCNE5Ua3hPR1kwTm1Vc0lEQjROall6WW1NMU5EUXNJREI0Tm1Zek5tTmxOR0VzSURCNE56UXlNV1F6TlRnc0lEQjROMlF5WTJRNE5UWXNJREI0WVRFd1l6ZGhNemNzSURCNFlUZ3dNVGN4TXprc0lEQjRZak14Tmpaak1tSXNJREI0WW1FeFlqWTNNalVzSURCNE9EVXpPRFUyTUdZc0lEQjRPR016TlRWa01ERXNJREI0T1RjeU1qUXdNVE1zSURCNE9XVXlaalJpTVdRc0lEQjRaVGsyTkRJeU5EY3NJREI0WlRBMk9USTVORGtzSURCNFptSTNaVE0wTldJc0lEQjRaakkzTXpObU5UVXNJREI0WTJRMU1EQmxOMllzSURCNFl6UTFaREExTnpFc0lEQjRaR1kwWVRFNE5qTXNJREI0WkRZME56RXpObVFzSURCNE16RmtZMk5oWkRjc0lEQjRNemhrTVdNeFpEa3NJREI0TWpOak5tUmpZMklzSURCNE1tRmpZbVEzWXpVc0lEQjRNVFZsT0dVMlpXWXNJREI0TVdObE5XVmtaVEVzSURCNE1EZG1NbVl3WmpNc0lEQjRNR1ZtWm1aaVptUXNJREI0TnpsaU5Ea3lZVGNzSURCNE56QmlPVGs1WVRrc0lEQjRObUpoWlRnMFltSXNJREI0TmpKaE16aG1ZalVzSURCNE5XUTRNR0psT1dZc0lEQjROVFE0WkdJMU9URXNJREI0TkdZNVlXRTRPRE1zSURCNE5EWTVOMkV6T0dSZE8xeHVYRzRnSUNBZ1puVnVZM1JwYjI0Z1kyOXVkbVZ5ZEZSdlNXNTBNeklvWW5sMFpYTXBJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISmxjM1ZzZENBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUdKNWRHVnpMbXhsYm1kMGFEc2dhU0FyUFNBMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFF1Y0hWemFDaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9ZbmwwWlhOYmFTQWdJQ0JkSUR3OElESTBLU0I4WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0dKNWRHVnpXMmtnS3lBeFhTQThQQ0F4TmlrZ2ZGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaGllWFJsYzF0cElDc2dNbDBnUER3Z0lEZ3BJSHhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5sMFpYTmJhU0FySUROZFhHNGdJQ0FnSUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUVGRlV5QTlJR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVNoMGFHbHpJR2x1YzNSaGJtTmxiMllnUVVWVEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnUlhKeWIzSW9KMEZGVXlCdGRYTjBJR0psSUdsdWMzUmhibWwwWVhSbFpDQjNhWFJvSUdCdVpYZGdKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZEdocGN5d2dKMnRsZVNjc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGJIVmxPaUJqYjJWeVkyVkJjbkpoZVNoclpYa3NJSFJ5ZFdVcFhHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0J5WlhCaGNtVW9LVHRjYmlBZ0lDQjlYRzVjYmx4dUlDQWdJRUZGVXk1d2NtOTBiM1I1Y0dVdVgzQnlaWEJoY21VZ1BTQm1kVzVqZEdsdmJpZ3BJSHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdjbTkxYm1SeklEMGdiblZ0WW1WeVQyWlNiM1Z1WkhOYmRHaHBjeTVyWlhrdWJHVnVaM1JvWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEp2ZFc1a2N5QTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJsdWRtRnNhV1FnYTJWNUlITnBlbVVnS0cxMWMzUWdZbVVnTVRZc0lESTBJRzl5SURNeUlHSjVkR1Z6S1NjcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1pXNWpjbmx3ZEdsdmJpQnliM1Z1WkNCclpYbHpYRzRnSUNBZ0lDQWdJSFJvYVhNdVgwdGxJRDBnVzEwN1hHNWNiaUFnSUNBZ0lDQWdMeThnWkdWamNubHdkR2x2YmlCeWIzVnVaQ0JyWlhselhHNGdJQ0FnSUNBZ0lIUm9hWE11WDB0a0lEMGdXMTA3WEc1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BEMGdjbTkxYm1Sek95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgwdGxMbkIxYzJnb1d6QXNJREFzSURBc0lEQmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDB0a0xuQjFjMmdvV3pBc0lEQXNJREFzSURCZEtUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhaaGNpQnliM1Z1WkV0bGVVTnZkVzUwSUQwZ0tISnZkVzVrY3lBcklERXBJQ29nTkR0Y2JpQWdJQ0FnSUNBZ2RtRnlJRXRESUQwZ2RHaHBjeTVyWlhrdWJHVnVaM1JvSUM4Z05EdGNibHh1SUNBZ0lDQWdJQ0F2THlCamIyNTJaWEowSUhSb1pTQnJaWGtnYVc1MGJ5QnBiblJ6WEc0Z0lDQWdJQ0FnSUhaaGNpQjBheUE5SUdOdmJuWmxjblJVYjBsdWRETXlLSFJvYVhNdWEyVjVLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QmpiM0I1SUhaaGJIVmxjeUJwYm5SdklISnZkVzVrSUd0bGVTQmhjbkpoZVhOY2JpQWdJQ0FnSUNBZ2RtRnlJR2x1WkdWNE8xeHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRXRET3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbHVaR1Y0SUQwZ2FTQStQaUF5TzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlMyVmJhVzVrWlhoZFcya2dKU0EwWFNBOUlIUnJXMmxkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlMyUmJjbTkxYm1SeklDMGdhVzVrWlhoZFcya2dKU0EwWFNBOUlIUnJXMmxkTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnYTJWNUlHVjRjR0Z1YzJsdmJpQW9abWx3Y3kweE9UY2djMlZqZEdsdmJpQTFMaklwWEc0Z0lDQWdJQ0FnSUhaaGNpQnlZMjl1Y0c5cGJuUmxjaUE5SURBN1hHNGdJQ0FnSUNBZ0lIWmhjaUIwSUQwZ1MwTXNJSFIwTzF4dUlDQWdJQ0FnSUNCM2FHbHNaU0FvZENBOElISnZkVzVrUzJWNVEyOTFiblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFIwSUQwZ2RHdGJTME1nTFNBeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhScld6QmRJRjQ5SUNnb1Uxc29kSFFnUGo0Z01UWXBJQ1lnTUhoR1JsMGdQRHdnTWpRcElGNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1Uxc29kSFFnUGo0Z0lEZ3BJQ1lnTUhoR1JsMGdQRHdnTVRZcElGNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1Uxc2dkSFFnSUNBZ0lDQWdJQ1lnTUhoR1JsMGdQRHdnSURncElGNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1Uxc29kSFFnUGo0Z01qUXBJQ1lnTUhoR1JsMGdJQ0FnSUNBZ0lGNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb2NtTnZibHR5WTI5dWNHOXBiblJsY2wwZ1BEd2dNalFwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpqYjI1d2IybHVkR1Z5SUNzOUlERTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR3RsZVNCbGVIQmhibk5wYjI0Z0tHWnZjaUJ1YjI0dE1qVTJJR0pwZENsY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoTFF5QWhQU0E0S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREU3SUdrZ1BDQkxRenNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSclcybGRJRjQ5SUhSclcya2dMU0F4WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHdGxlU0JsZUhCaGJuTnBiMjRnWm05eUlESTFOaTFpYVhRZ2EyVjVjeUJwY3lCY0luTnNhV2RvZEd4NUlHUnBabVpsY21WdWRGd2lJQ2htYVhCekxURTVOeWxjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREU3SUdrZ1BDQW9TME1nTHlBeUtUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJyVzJsZElGNDlJSFJyVzJrZ0xTQXhYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhRZ1BTQjBhMXNvUzBNZ0x5QXlLU0F0SURGZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR3RiUzBNZ0x5QXlYU0JlUFNBb1Uxc2dkSFFnSUNBZ0lDQWdJQ1lnTUhoR1JsMGdJQ0FnSUNBZ0lGNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoVFd5aDBkQ0ErUGlBZ09Da2dKaUF3ZUVaR1hTQThQQ0FnT0NrZ1hseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0ZOYktIUjBJRDQrSURFMktTQW1JREI0UmtaZElEdzhJREUyS1NCZVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FvVTFzb2RIUWdQajRnTWpRcElDWWdNSGhHUmwwZ1BEd2dNalFwS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0FvUzBNZ0x5QXlLU0FySURFN0lHa2dQQ0JMUXpzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnJXMmxkSUY0OUlIUnJXMmtnTFNBeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHTnZjSGtnZG1Gc2RXVnpJR2x1ZEc4Z2NtOTFibVFnYTJWNUlHRnljbUY1YzF4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdrZ1BTQXdMQ0J5TENCak8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZDJocGJHVWdLR2tnUENCTFF5QW1KaUIwSUR3Z2NtOTFibVJMWlhsRGIzVnVkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJZ1BTQjBJRDQrSURJN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1l5QTlJSFFnSlNBME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDB0bFczSmRXMk5kSUQwZ2RHdGJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZTMlJiY205MWJtUnpJQzBnY2wxYlkxMGdQU0IwYTF0cEt5dGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFFyS3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJR2x1ZG1WeWMyVXRZMmx3YUdWeUxXbG1lU0IwYUdVZ1pHVmpjbmx3ZEdsdmJpQnliM1Z1WkNCclpYa2dLR1pwY0hNdE1UazNJSE5sWTNScGIyNGdOUzR6S1Z4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCeUlEMGdNVHNnY2lBOElISnZkVzVrY3pzZ2Npc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQmpJRDBnTURzZ1l5QThJRFE3SUdNckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFIwSUQwZ2RHaHBjeTVmUzJSYmNsMWJZMTA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZTMlJiY2wxYlkxMGdQU0FvVlRGYktIUjBJRDQrSURJMEtTQW1JREI0UmtaZElGNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlZNbHNvZEhRZ1BqNGdNVFlwSUNZZ01IaEdSbDBnWGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZVeld5aDBkQ0ErUGlBZ09Da2dKaUF3ZUVaR1hTQmVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdWVFJiSUhSMElDQWdJQ0FnSUNBbUlEQjRSa1pkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRUZGVXk1d2NtOTBiM1I1Y0dVdVpXNWpjbmx3ZENBOUlHWjFibU4wYVc5dUtIQnNZV2x1ZEdWNGRDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2NHeGhhVzUwWlhoMExteGxibWQwYUNBaFBTQXhOaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZHBiblpoYkdsa0lIQnNZV2x1ZEdWNGRDQnphWHBsSUNodGRYTjBJR0psSURFMklHSjVkR1Z6S1NjcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlISnZkVzVrY3lBOUlIUm9hWE11WDB0bExteGxibWQwYUNBdElERTdYRzRnSUNBZ0lDQWdJSFpoY2lCaElEMGdXekFzSURBc0lEQXNJREJkTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR052Ym5abGNuUWdjR3hoYVc1MFpYaDBJSFJ2SUNocGJuUnpJRjRnYTJWNUtWeHVJQ0FnSUNBZ0lDQjJZWElnZENBOUlHTnZiblpsY25SVWIwbHVkRE15S0hCc1lXbHVkR1Y0ZENrN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dORHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFcybGRJRjQ5SUhSb2FYTXVYMHRsV3pCZFcybGRPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdZWEJ3YkhrZ2NtOTFibVFnZEhKaGJuTm1iM0p0YzF4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCeUlEMGdNVHNnY2lBOElISnZkVzVrY3pzZ2Npc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRFE3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZiYVYwZ1BTQW9WREZiS0hSYklHa2dJQ0FnSUNBZ0lDQmRJRDQrSURJMEtTQW1JREI0Wm1aZElGNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGUXlXeWgwV3locElDc2dNU2tnSlNBMFhTQStQaUF4TmlrZ0ppQXdlR1ptWFNCZVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCVU0xc29kRnNvYVNBcklESXBJQ1VnTkYwZ1BqNGdJRGdwSUNZZ01IaG1abDBnWGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVkRSYklIUmJLR2tnS3lBektTQWxJRFJkSUNBZ0lDQWdJQ0FtSURCNFptWmRJRjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgwdGxXM0pkVzJsZEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSFFnUFNCaExuTnNhV05sS0NrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCMGFHVWdiR0Z6ZENCeWIzVnVaQ0JwY3lCemNHVmphV0ZzWEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE4xYkhRZ1BTQmpjbVZoZEdWQmNuSmhlU2d4Tmlrc0lIUjBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SURRN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkSFFnUFNCMGFHbHpMbDlMWlZ0eWIzVnVaSE5kVzJsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemRXeDBXelFnS2lCcElDQWdJRjBnUFNBb1Uxc29kRnNnYVNBZ0lDQWdJQ0FnSUYwZ1BqNGdNalFwSUNZZ01IaG1abDBnWGlBb2RIUWdQajRnTWpRcEtTQW1JREI0Wm1ZN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUmJOQ0FxSUdrZ0t5QXhYU0E5SUNoVFd5aDBXeWhwSUNzZ01Ta2dKU0EwWFNBK1BpQXhOaWtnSmlBd2VHWm1YU0JlSUNoMGRDQStQaUF4TmlrcElDWWdNSGhtWmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RGczBJQ29nYVNBcklESmRJRDBnS0ZOYktIUmJLR2tnS3lBeUtTQWxJRFJkSUQ0K0lDQTRLU0FtSURCNFptWmRJRjRnS0hSMElENCtJQ0E0S1NrZ0ppQXdlR1ptTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MFd6UWdLaUJwSUNzZ00xMGdQU0FvVTFzZ2RGc29hU0FySURNcElDVWdORjBnSUNBZ0lDQWdJQ1lnTUhobVpsMGdYaUFnZEhRZ0lDQWdJQ0FnS1NBbUlEQjRabVk3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRUZGVXk1d2NtOTBiM1I1Y0dVdVpHVmpjbmx3ZENBOUlHWjFibU4wYVc5dUtHTnBjR2hsY25SbGVIUXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnBjR2hsY25SbGVIUXViR1Z1WjNSb0lDRTlJREUyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMmx1ZG1Gc2FXUWdZMmx3YUdWeWRHVjRkQ0J6YVhwbElDaHRkWE4wSUdKbElERTJJR0o1ZEdWektTY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSEp2ZFc1a2N5QTlJSFJvYVhNdVgwdGtMbXhsYm1kMGFDQXRJREU3WEc0Z0lDQWdJQ0FnSUhaaGNpQmhJRDBnV3pBc0lEQXNJREFzSURCZE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUdOdmJuWmxjblFnY0d4aGFXNTBaWGgwSUhSdklDaHBiblJ6SUY0Z2EyVjVLVnh1SUNBZ0lDQWdJQ0IyWVhJZ2RDQTlJR052Ym5abGNuUlViMGx1ZERNeUtHTnBjR2hsY25SbGVIUXBPMXh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SURRN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkRnRwWFNCZVBTQjBhR2x6TGw5TFpGc3dYVnRwWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUdGd2NHeDVJSEp2ZFc1a0lIUnlZVzV6Wm05eWJYTmNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdjaUE5SURFN0lISWdQQ0J5YjNWdVpITTdJSElyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENBME95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFcybGRJRDBnS0ZRMVd5aDBXeUJwSUNBZ0lDQWdJQ0FnSUYwZ1BqNGdNalFwSUNZZ01IaG1abDBnWGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnVkRaYktIUmJLR2tnS3lBektTQWxJRFJkSUQ0K0lERTJLU0FtSURCNFptWmRJRjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRlEzV3loMFd5aHBJQ3NnTWlrZ0pTQTBYU0ErUGlBZ09Da2dKaUF3ZUdabVhTQmVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQlVPRnNnZEZzb2FTQXJJREVwSUNVZ05GMGdJQ0FnSUNBZ0lDWWdNSGhtWmwwZ1hseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmUzJSYmNsMWJhVjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RDQTlJR0V1YzJ4cFkyVW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJSFJvWlNCc1lYTjBJSEp2ZFc1a0lHbHpJSE53WldOcFlXeGNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUdOeVpXRjBaVUZ5Y21GNUtERTJLU3dnZEhRN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2dORHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGRDQTlJSFJvYVhNdVgwdGtXM0p2ZFc1a2MxMWJhVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSYk5DQXFJR2tnSUNBZ1hTQTlJQ2hUYVZzb2RGc2dhU0FnSUNBZ0lDQWdJRjBnUGo0Z01qUXBJQ1lnTUhobVpsMGdYaUFvZEhRZ1BqNGdNalFwS1NBbUlEQjRabVk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSYk5DQXFJR2tnS3lBeFhTQTlJQ2hUYVZzb2RGc29hU0FySURNcElDVWdORjBnUGo0Z01UWXBJQ1lnTUhobVpsMGdYaUFvZEhRZ1BqNGdNVFlwS1NBbUlEQjRabVk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSYk5DQXFJR2tnS3lBeVhTQTlJQ2hUYVZzb2RGc29hU0FySURJcElDVWdORjBnUGo0Z0lEZ3BJQ1lnTUhobVpsMGdYaUFvZEhRZ1BqNGdJRGdwS1NBbUlEQjRabVk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE4xYkhSYk5DQXFJR2tnS3lBelhTQTlJQ2hUYVZzZ2RGc29hU0FySURFcElDVWdORjBnSUNBZ0lDQWdJQ1lnTUhobVpsMGdYaUFnZEhRZ0lDQWdJQ0FnS1NBbUlEQjRabVk3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4dUlDQWdJSDFjYmx4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ0lFMXZaR1VnVDJZZ1QzQmxjbUYwYVc5dUlDMGdSV3hsWTNSdmJtbGpJRU52WkdWaWIyOXJJQ2hGUTBJcFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZG1GeUlFMXZaR1ZQWms5d1pYSmhkR2x2YmtWRFFpQTlJR1oxYm1OMGFXOXVLR3RsZVNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVNoMGFHbHpJR2x1YzNSaGJtTmxiMllnVFc5a1pVOW1UM0JsY21GMGFXOXVSVU5DS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dSWEp5YjNJb0owRkZVeUJ0ZFhOMElHSmxJR2x1YzNSaGJtbDBZWFJsWkNCM2FYUm9JR0J1WlhkZ0p5azdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbVJsYzJOeWFYQjBhVzl1SUQwZ1hDSkZiR1ZqZEhKdmJtbGpJRU52WkdVZ1FteHZZMnRjSWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV1WVcxbElEMGdYQ0psWTJKY0lqdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWhaWE1nUFNCdVpYY2dRVVZUS0d0bGVTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1RXOWtaVTltVDNCbGNtRjBhVzl1UlVOQ0xuQnliM1J2ZEhsd1pTNWxibU55ZVhCMElEMGdablZ1WTNScGIyNG9jR3hoYVc1MFpYaDBLU0I3WEc0Z0lDQWdJQ0FnSUhCc1lXbHVkR1Y0ZENBOUlHTnZaWEpqWlVGeWNtRjVLSEJzWVdsdWRHVjRkQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ2h3YkdGcGJuUmxlSFF1YkdWdVozUm9JQ1VnTVRZcElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMmx1ZG1Gc2FXUWdjR3hoYVc1MFpYaDBJSE5wZW1VZ0tHMTFjM1FnWW1VZ2JYVnNkR2x3YkdVZ2IyWWdNVFlnWW5sMFpYTXBKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjJZWElnWTJsd2FHVnlkR1Y0ZENBOUlHTnlaV0YwWlVGeWNtRjVLSEJzWVdsdWRHVjRkQzVzWlc1bmRHZ3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1lteHZZMnNnUFNCamNtVmhkR1ZCY25KaGVTZ3hOaWs3WEc1Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndiR0ZwYm5SbGVIUXViR1Z1WjNSb095QnBJQ3M5SURFMktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIzQjVRWEp5WVhrb2NHeGhhVzUwWlhoMExDQmliRzlqYXl3Z01Dd2dhU3dnYVNBcklERTJLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnNiMk5ySUQwZ2RHaHBjeTVmWVdWekxtVnVZM0o1Y0hRb1lteHZZMnNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl3ZVVGeWNtRjVLR0pzYjJOckxDQmphWEJvWlhKMFpYaDBMQ0JwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmphWEJvWlhKMFpYaDBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFMXZaR1ZQWms5d1pYSmhkR2x2YmtWRFFpNXdjbTkwYjNSNWNHVXVaR1ZqY25sd2RDQTlJR1oxYm1OMGFXOXVLR05wY0dobGNuUmxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ1kybHdhR1Z5ZEdWNGRDQTlJR052WlhKalpVRnljbUY1S0dOcGNHaGxjblJsZUhRcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNnb1kybHdhR1Z5ZEdWNGRDNXNaVzVuZEdnZ0pTQXhOaWtnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnbmFXNTJZV3hwWkNCamFYQm9aWEowWlhoMElITnBlbVVnS0cxMWMzUWdZbVVnYlhWc2RHbHdiR1VnYjJZZ01UWWdZbmwwWlhNcEp5azdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdjR3hoYVc1MFpYaDBJRDBnWTNKbFlYUmxRWEp5WVhrb1kybHdhR1Z5ZEdWNGRDNXNaVzVuZEdncE8xeHVJQ0FnSUNBZ0lDQjJZWElnWW14dlkyc2dQU0JqY21WaGRHVkJjbkpoZVNneE5pazdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCamFYQm9aWEowWlhoMExteGxibWQwYURzZ2FTQXJQU0F4TmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5d2VVRnljbUY1S0dOcGNHaGxjblJsZUhRc0lHSnNiMk5yTENBd0xDQnBMQ0JwSUNzZ01UWXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1lteHZZMnNnUFNCMGFHbHpMbDloWlhNdVpHVmpjbmx3ZENoaWJHOWpheWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiM0I1UVhKeVlYa29ZbXh2WTJzc0lIQnNZV2x1ZEdWNGRDd2dhU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHeGhhVzUwWlhoME8xeHVJQ0FnSUgxY2JseHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJRTF2WkdVZ1QyWWdUM0JsY21GMGFXOXVJQzBnUTJsd2FHVnlJRUpzYjJOcklFTm9ZV2x1YVc1bklDaERRa01wWEc0Z0lDQWdJQ292WEc0Z0lDQWdkbUZ5SUUxdlpHVlBaazl3WlhKaGRHbHZia05DUXlBOUlHWjFibU4wYVc5dUtHdGxlU3dnYVhZcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0NFb2RHaHBjeUJwYm5OMFlXNWpaVzltSUUxdlpHVlBaazl3WlhKaGRHbHZia05DUXlrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRVZ5Y205eUtDZEJSVk1nYlhWemRDQmlaU0JwYm5OMFlXNXBkR0YwWldRZ2QybDBhQ0JnYm1WM1lDY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVrWlhOamNtbHdkR2x2YmlBOUlGd2lRMmx3YUdWeUlFSnNiMk5ySUVOb1lXbHVhVzVuWENJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ym1GdFpTQTlJRndpWTJKalhDSTdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnBkaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhWFlnUFNCamNtVmhkR1ZCY25KaGVTZ3hOaWs3WEc1Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHBkaTVzWlc1bmRHZ2dJVDBnTVRZcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduYVc1MllXeHBaQ0JwYm1sMGFXRnNZWFJwYjI0Z2RtVmpkRzl5SUhOcGVtVWdLRzExYzNRZ1ltVWdNVFlnWW5sMFpYTXBKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c1lYTjBRMmx3YUdWeVlteHZZMnNnUFNCamIyVnlZMlZCY25KaGVTaHBkaXdnZEhKMVpTazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZV1Z6SUQwZ2JtVjNJRUZGVXloclpYa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFMXZaR1ZQWms5d1pYSmhkR2x2YmtOQ1F5NXdjbTkwYjNSNWNHVXVaVzVqY25sd2RDQTlJR1oxYm1OMGFXOXVLSEJzWVdsdWRHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNCd2JHRnBiblJsZUhRZ1BTQmpiMlZ5WTJWQmNuSmhlU2h3YkdGcGJuUmxlSFFwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2dvY0d4aGFXNTBaWGgwTG14bGJtZDBhQ0FsSURFMktTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RwYm5aaGJHbGtJSEJzWVdsdWRHVjRkQ0J6YVhwbElDaHRkWE4wSUdKbElHMTFiSFJwY0d4bElHOW1JREUySUdKNWRHVnpLU2NwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdOcGNHaGxjblJsZUhRZ1BTQmpjbVZoZEdWQmNuSmhlU2h3YkdGcGJuUmxlSFF1YkdWdVozUm9LVHRjYmlBZ0lDQWdJQ0FnZG1GeUlHSnNiMk5ySUQwZ1kzSmxZWFJsUVhKeVlYa29NVFlwTzF4dVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djR3hoYVc1MFpYaDBMbXhsYm1kMGFEc2dhU0FyUFNBeE5pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXdlVUZ5Y21GNUtIQnNZV2x1ZEdWNGRDd2dZbXh2WTJzc0lEQXNJR2tzSUdrZ0t5QXhOaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR29nUFNBd095QnFJRHdnTVRZN0lHb3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKc2IyTnJXMnBkSUY0OUlIUm9hWE11WDJ4aGMzUkRhWEJvWlhKaWJHOWphMXRxWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHRnpkRU5wY0dobGNtSnNiMk5ySUQwZ2RHaHBjeTVmWVdWekxtVnVZM0o1Y0hRb1lteHZZMnNwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl3ZVVGeWNtRjVLSFJvYVhNdVgyeGhjM1JEYVhCb1pYSmliRzlqYXl3Z1kybHdhR1Z5ZEdWNGRDd2dhU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kybHdhR1Z5ZEdWNGREdGNiaUFnSUNCOVhHNWNiaUFnSUNCTmIyUmxUMlpQY0dWeVlYUnBiMjVEUWtNdWNISnZkRzkwZVhCbExtUmxZM0o1Y0hRZ1BTQm1kVzVqZEdsdmJpaGphWEJvWlhKMFpYaDBLU0I3WEc0Z0lDQWdJQ0FnSUdOcGNHaGxjblJsZUhRZ1BTQmpiMlZ5WTJWQmNuSmhlU2hqYVhCb1pYSjBaWGgwS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvS0dOcGNHaGxjblJsZUhRdWJHVnVaM1JvSUNVZ01UWXBJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJsdWRtRnNhV1FnWTJsd2FHVnlkR1Y0ZENCemFYcGxJQ2h0ZFhOMElHSmxJRzExYkhScGNHeGxJRzltSURFMklHSjVkR1Z6S1NjcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlIQnNZV2x1ZEdWNGRDQTlJR055WldGMFpVRnljbUY1S0dOcGNHaGxjblJsZUhRdWJHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJR0pzYjJOcklEMGdZM0psWVhSbFFYSnlZWGtvTVRZcE8xeHVYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWTJsd2FHVnlkR1Y0ZEM1c1pXNW5kR2c3SUdrZ0t6MGdNVFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Y0hsQmNuSmhlU2hqYVhCb1pYSjBaWGgwTENCaWJHOWpheXdnTUN3Z2FTd2dhU0FySURFMktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdKc2IyTnJJRDBnZEdocGN5NWZZV1Z6TG1SbFkzSjVjSFFvWW14dlkyc3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnFJRDBnTURzZ2FpQThJREUyT3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGcGJuUmxlSFJiYVNBcklHcGRJRDBnWW14dlkydGJhbDBnWGlCMGFHbHpMbDlzWVhOMFEybHdhR1Z5WW14dlkydGJhbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZjSGxCY25KaGVTaGphWEJvWlhKMFpYaDBMQ0IwYUdsekxsOXNZWE4wUTJsd2FHVnlZbXh2WTJzc0lEQXNJR2tzSUdrZ0t5QXhOaWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NHeGhhVzUwWlhoME8xeHVJQ0FnSUgxY2JseHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dJRTF2WkdVZ1QyWWdUM0JsY21GMGFXOXVJQzBnUTJsd2FHVnlJRVpsWldSaVlXTnJJQ2hEUmtJcFhHNGdJQ0FnSUNvdlhHNGdJQ0FnZG1GeUlFMXZaR1ZQWms5d1pYSmhkR2x2YmtOR1FpQTlJR1oxYm1OMGFXOXVLR3RsZVN3Z2FYWXNJSE5sWjIxbGJuUlRhWHBsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doS0hSb2FYTWdhVzV6ZEdGdVkyVnZaaUJOYjJSbFQyWlBjR1Z5WVhScGIyNURSa0lwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QkZjbkp2Y2lnblFVVlRJRzExYzNRZ1ltVWdhVzV6ZEdGdWFYUmhkR1ZrSUhkcGRHZ2dZRzVsZDJBbktUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1Z6WTNKcGNIUnBiMjRnUFNCY0lrTnBjR2hsY2lCR1pXVmtZbUZqYTF3aU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG01aGJXVWdQU0JjSW1ObVlsd2lPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hhWFlwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2wySUQwZ1kzSmxZWFJsUVhKeVlYa29NVFlwTzF4dVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9hWFl1YkdWdVozUm9JQ0U5SURFMktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJsdWRtRnNhV1FnYVc1cGRHbGhiR0YwYVc5dUlIWmxZM1J2Y2lCemFYcGxJQ2h0ZFhOMElHSmxJREUySUhOcGVtVXBKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVhObFoyMWxiblJUYVhwbEtTQjdJSE5sWjIxbGJuUlRhWHBsSUQwZ01Uc2dmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVjMlZuYldWdWRGTnBlbVVnUFNCelpXZHRaVzUwVTJsNlpUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXphR2xtZEZKbFoybHpkR1Z5SUQwZ1kyOWxjbU5sUVhKeVlYa29hWFlzSUhSeWRXVXBPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZsY3lBOUlHNWxkeUJCUlZNb2EyVjVLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQk5iMlJsVDJaUGNHVnlZWFJwYjI1RFJrSXVjSEp2ZEc5MGVYQmxMbVZ1WTNKNWNIUWdQU0JtZFc1amRHbHZiaWh3YkdGcGJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ2h3YkdGcGJuUmxlSFF1YkdWdVozUm9JQ1VnZEdocGN5NXpaV2R0Wlc1MFUybDZaU2tnSVQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkcGJuWmhiR2xrSUhCc1lXbHVkR1Y0ZENCemFYcGxJQ2h0ZFhOMElHSmxJSE5sWjIxbGJuUlRhWHBsSUdKNWRHVnpLU2NwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUdWdVkzSjVjSFJsWkNBOUlHTnZaWEpqWlVGeWNtRjVLSEJzWVdsdWRHVjRkQ3dnZEhKMVpTazdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlIaHZjbE5sWjIxbGJuUTdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnWlc1amNubHdkR1ZrTG14bGJtZDBhRHNnYVNBclBTQjBhR2x6TG5ObFoyMWxiblJUYVhwbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCNGIzSlRaV2R0Wlc1MElEMGdkR2hwY3k1ZllXVnpMbVZ1WTNKNWNIUW9kR2hwY3k1ZmMyaHBablJTWldkcGMzUmxjaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnFJRDBnTURzZ2FpQThJSFJvYVhNdWMyVm5iV1Z1ZEZOcGVtVTdJR29yS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVZM0o1Y0hSbFpGdHBJQ3NnYWwwZ1hqMGdlRzl5VTJWbmJXVnVkRnRxWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVTJocFpuUWdkR2hsSUhKbFoybHpkR1Z5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiM0I1UVhKeVlYa29kR2hwY3k1ZmMyaHBablJTWldkcGMzUmxjaXdnZEdocGN5NWZjMmhwWm5SU1pXZHBjM1JsY2l3Z01Dd2dkR2hwY3k1elpXZHRaVzUwVTJsNlpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIzQjVRWEp5WVhrb1pXNWpjbmx3ZEdWa0xDQjBhR2x6TGw5emFHbG1kRkpsWjJsemRHVnlMQ0F4TmlBdElIUm9hWE11YzJWbmJXVnVkRk5wZW1Vc0lHa3NJR2tnS3lCMGFHbHpMbk5sWjIxbGJuUlRhWHBsS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmxibU55ZVhCMFpXUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1RXOWtaVTltVDNCbGNtRjBhVzl1UTBaQ0xuQnliM1J2ZEhsd1pTNWtaV055ZVhCMElEMGdablZ1WTNScGIyNG9ZMmx3YUdWeWRHVjRkQ2tnZTF4dUlDQWdJQ0FnSUNCcFppQW9LR05wY0dobGNuUmxlSFF1YkdWdVozUm9JQ1VnZEdocGN5NXpaV2R0Wlc1MFUybDZaU2tnSVQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkcGJuWmhiR2xrSUdOcGNHaGxjblJsZUhRZ2MybDZaU0FvYlhWemRDQmlaU0J6WldkdFpXNTBVMmw2WlNCaWVYUmxjeWtuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCd2JHRnBiblJsZUhRZ1BTQmpiMlZ5WTJWQmNuSmhlU2hqYVhCb1pYSjBaWGgwTENCMGNuVmxLVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdlRzl5VTJWbmJXVnVkRHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCd2JHRnBiblJsZUhRdWJHVnVaM1JvT3lCcElDczlJSFJvYVhNdWMyVm5iV1Z1ZEZOcGVtVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIaHZjbE5sWjIxbGJuUWdQU0IwYUdsekxsOWhaWE11Wlc1amNubHdkQ2gwYUdsekxsOXphR2xtZEZKbFoybHpkR1Z5S1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYWlBOUlEQTdJR29nUENCMGFHbHpMbk5sWjIxbGJuUlRhWHBsT3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGcGJuUmxlSFJiYVNBcklHcGRJRjQ5SUhodmNsTmxaMjFsYm5SYmFsMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGTm9hV1owSUhSb1pTQnlaV2RwYzNSbGNseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5d2VVRnljbUY1S0hSb2FYTXVYM05vYVdaMFVtVm5hWE4wWlhJc0lIUm9hWE11WDNOb2FXWjBVbVZuYVhOMFpYSXNJREFzSUhSb2FYTXVjMlZuYldWdWRGTnBlbVVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl3ZVVGeWNtRjVLR05wY0dobGNuUmxlSFFzSUhSb2FYTXVYM05vYVdaMFVtVm5hWE4wWlhJc0lERTJJQzBnZEdocGN5NXpaV2R0Wlc1MFUybDZaU3dnYVN3Z2FTQXJJSFJvYVhNdWMyVm5iV1Z1ZEZOcGVtVXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCc1lXbHVkR1Y0ZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lBZ1RXOWtaU0JQWmlCUGNHVnlZWFJwYjI0Z0xTQlBkWFJ3ZFhRZ1JtVmxaR0poWTJzZ0tFOUdRaWxjYmlBZ0lDQWdLaTljYmlBZ0lDQjJZWElnVFc5a1pVOW1UM0JsY21GMGFXOXVUMFpDSUQwZ1puVnVZM1JwYjI0b2EyVjVMQ0JwZGlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVNoMGFHbHpJR2x1YzNSaGJtTmxiMllnVFc5a1pVOW1UM0JsY21GMGFXOXVUMFpDS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dSWEp5YjNJb0owRkZVeUJ0ZFhOMElHSmxJR2x1YzNSaGJtbDBZWFJsWkNCM2FYUm9JR0J1WlhkZ0p5azdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbVJsYzJOeWFYQjBhVzl1SUQwZ1hDSlBkWFJ3ZFhRZ1JtVmxaR0poWTJ0Y0lqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dVlXMWxJRDBnWENKdlptSmNJanRjYmx4dUlDQWdJQ0FnSUNCcFppQW9JV2wyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwZGlBOUlHTnlaV0YwWlVGeWNtRjVLREUyS1R0Y2JseHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR2wyTG14bGJtZDBhQ0FoUFNBeE5pa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkcGJuWmhiR2xrSUdsdWFYUnBZV3hoZEdsdmJpQjJaV04wYjNJZ2MybDZaU0FvYlhWemRDQmlaU0F4TmlCaWVYUmxjeWtuS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyeGhjM1JRY21WamFYQm9aWElnUFNCamIyVnlZMlZCY25KaGVTaHBkaXdnZEhKMVpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyeGhjM1JRY21WamFYQm9aWEpKYm1SbGVDQTlJREUyTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGbGN5QTlJRzVsZHlCQlJWTW9hMlY1S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JOYjJSbFQyWlBjR1Z5WVhScGIyNVBSa0l1Y0hKdmRHOTBlWEJsTG1WdVkzSjVjSFFnUFNCbWRXNWpkR2x2Ymlod2JHRnBiblJsZUhRcElIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdWdVkzSjVjSFJsWkNBOUlHTnZaWEpqWlVGeWNtRjVLSEJzWVdsdWRHVjRkQ3dnZEhKMVpTazdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCbGJtTnllWEIwWldRdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXNZWE4wVUhKbFkybHdhR1Z5U1c1a1pYZ2dQVDA5SURFMktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHRnpkRkJ5WldOcGNHaGxjaUE5SUhSb2FYTXVYMkZsY3k1bGJtTnllWEIwS0hSb2FYTXVYMnhoYzNSUWNtVmphWEJvWlhJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4aGMzUlFjbVZqYVhCb1pYSkpibVJsZUNBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm1OeWVYQjBaV1JiYVYwZ1hqMGdkR2hwY3k1ZmJHRnpkRkJ5WldOcGNHaGxjbHQwYUdsekxsOXNZWE4wVUhKbFkybHdhR1Z5U1c1a1pYZ3JLMTA3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXNWpjbmx3ZEdWa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklFUmxZM0o1Y0hScGIyNGdhWE1nYzNsdFpYUnlhV05jYmlBZ0lDQk5iMlJsVDJaUGNHVnlZWFJwYjI1UFJrSXVjSEp2ZEc5MGVYQmxMbVJsWTNKNWNIUWdQU0JOYjJSbFQyWlBjR1Z5WVhScGIyNVBSa0l1Y0hKdmRHOTBlWEJsTG1WdVkzSjVjSFE3WEc1Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDQkRiM1Z1ZEdWeUlHOWlhbVZqZENCbWIzSWdRMVJTSUdOdmJXMXZiaUJ0YjJSbElHOW1JRzl3WlhKaGRHbHZibHh1SUNBZ0lDQXFMMXh1SUNBZ0lIWmhjaUJEYjNWdWRHVnlJRDBnWm5WdVkzUnBiMjRvYVc1cGRHbGhiRlpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNnaEtIUm9hWE1nYVc1emRHRnVZMlZ2WmlCRGIzVnVkR1Z5S1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dSWEp5YjNJb0owTnZkVzUwWlhJZ2JYVnpkQ0JpWlNCcGJuTjBZVzVwZEdGMFpXUWdkMmwwYUNCZ2JtVjNZQ2NwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnVjJVZ1lXeHNiM2NnTUN3Z1luVjBJR0Z1ZVhSb2FXNW5JR1poYkhObExXbHphQ0IxYzJWeklIUm9aU0JrWldaaGRXeDBJREZjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHVhWFJwWVd4V1lXeDFaU0FoUFQwZ01DQW1KaUFoYVc1cGRHbGhiRlpoYkhWbEtTQjdJR2x1YVhScFlXeFdZV3gxWlNBOUlERTdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUtHbHVhWFJwWVd4V1lXeDFaU2tnUFQwOUlDZHVkVzFpWlhJbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlqYjNWdWRHVnlJRDBnWTNKbFlYUmxRWEp5WVhrb01UWXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSV1lXeDFaU2hwYm1sMGFXRnNWbUZzZFdVcE8xeHVYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbk5sZEVKNWRHVnpLR2x1YVhScFlXeFdZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCRGIzVnVkR1Z5TG5CeWIzUnZkSGx3WlM1elpYUldZV3gxWlNBOUlHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWW9kbUZzZFdVcElDRTlQU0FuYm5WdFltVnlKeUI4ZkNCd1lYSnpaVWx1ZENoMllXeDFaU2tnSVQwZ2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25hVzUyWVd4cFpDQmpiM1Z1ZEdWeUlIWmhiSFZsSUNodGRYTjBJR0psSUdGdUlHbHVkR1ZuWlhJcEp5azdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QlhaU0JqWVc1dWIzUWdjMkZtWld4NUlHaGhibVJzWlNCdWRXMWlaWEp6SUdKbGVXOXVaQ0IwYUdVZ2MyRm1aU0J5WVc1blpTQm1iM0lnYVc1MFpXZGxjbk5jYmlBZ0lDQWdJQ0FnYVdZZ0tIWmhiSFZsSUQ0Z1RuVnRZbVZ5TGsxQldGOVRRVVpGWDBsT1ZFVkhSVklwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25hVzUwWldkbGNpQjJZV3gxWlNCdmRYUWdiMllnYzJGbVpTQnlZVzVuWlNjcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVc1a1pYZ2dQU0F4TlRzZ2FXNWtaWGdnUGowZ01Ec2dMUzFwYm1SbGVDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5MWJuUmxjbHRwYm1SbGVGMGdQU0IyWVd4MVpTQWxJREkxTmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbElEMGdjR0Z5YzJWSmJuUW9kbUZzZFdVZ0x5QXlOVFlwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnUTI5MWJuUmxjaTV3Y205MGIzUjVjR1V1YzJWMFFubDBaWE1nUFNCbWRXNWpkR2x2YmloaWVYUmxjeWtnZTF4dUlDQWdJQ0FnSUNCaWVYUmxjeUE5SUdOdlpYSmpaVUZ5Y21GNUtHSjVkR1Z6TENCMGNuVmxLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9ZbmwwWlhNdWJHVnVaM1JvSUNFOUlERTJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0oybHVkbUZzYVdRZ1kyOTFiblJsY2lCaWVYUmxjeUJ6YVhwbElDaHRkWE4wSUdKbElERTJJR0o1ZEdWektTY3BPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5MWJuUmxjaUE5SUdKNWRHVnpPMXh1SUNBZ0lIMDdYRzVjYmlBZ0lDQkRiM1Z1ZEdWeUxuQnliM1J2ZEhsd1pTNXBibU55WlcxbGJuUWdQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREUxT3lCcElENDlJREE3SUdrdExTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyTnZkVzUwWlhKYmFWMGdQVDA5SURJMU5Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTnZkVzUwWlhKYmFWMGdQU0F3TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5amIzVnVkR1Z5VzJsZEt5czdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JseHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlDQk5iMlJsSUU5bUlFOXdaWEpoZEdsdmJpQXRJRU52ZFc1MFpYSWdLRU5VVWlsY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IyWVhJZ1RXOWtaVTltVDNCbGNtRjBhVzl1UTFSU0lEMGdablZ1WTNScGIyNG9hMlY1TENCamIzVnVkR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doS0hSb2FYTWdhVzV6ZEdGdVkyVnZaaUJOYjJSbFQyWlBjR1Z5WVhScGIyNURWRklwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QkZjbkp2Y2lnblFVVlRJRzExYzNRZ1ltVWdhVzV6ZEdGdWFYUmhkR1ZrSUhkcGRHZ2dZRzVsZDJBbktUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVaR1Z6WTNKcGNIUnBiMjRnUFNCY0lrTnZkVzUwWlhKY0lqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dVlXMWxJRDBnWENKamRISmNJanRjYmx4dUlDQWdJQ0FnSUNCcFppQW9JU2hqYjNWdWRHVnlJR2x1YzNSaGJtTmxiMllnUTI5MWJuUmxjaWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052ZFc1MFpYSWdQU0J1WlhjZ1EyOTFiblJsY2loamIzVnVkR1Z5S1Z4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyOTFiblJsY2lBOUlHTnZkVzUwWlhJN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVnRZV2x1YVc1blEyOTFiblJsY2lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0psYldGcGJtbHVaME52ZFc1MFpYSkpibVJsZUNBOUlERTJPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZsY3lBOUlHNWxkeUJCUlZNb2EyVjVLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQk5iMlJsVDJaUGNHVnlZWFJwYjI1RFZGSXVjSEp2ZEc5MGVYQmxMbVZ1WTNKNWNIUWdQU0JtZFc1amRHbHZiaWh3YkdGcGJuUmxlSFFwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1Z1WTNKNWNIUmxaQ0E5SUdOdlpYSmpaVUZ5Y21GNUtIQnNZV2x1ZEdWNGRDd2dkSEoxWlNrN1hHNWNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JsYm1OeWVYQjBaV1F1YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5eVpXMWhhVzVwYm1kRGIzVnVkR1Z5U1c1a1pYZ2dQVDA5SURFMktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtVnRZV2x1YVc1blEyOTFiblJsY2lBOUlIUm9hWE11WDJGbGN5NWxibU55ZVhCMEtIUm9hWE11WDJOdmRXNTBaWEl1WDJOdmRXNTBaWElwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0psYldGcGJtbHVaME52ZFc1MFpYSkpibVJsZUNBOUlEQTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyOTFiblJsY2k1cGJtTnlaVzFsYm5Rb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1WTNKNWNIUmxaRnRwWFNCZVBTQjBhR2x6TGw5eVpXMWhhVzVwYm1kRGIzVnVkR1Z5VzNSb2FYTXVYM0psYldGcGJtbHVaME52ZFc1MFpYSkpibVJsZUNzclhUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJsYm1OeWVYQjBaV1E3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUkdWamNubHdkR2x2YmlCcGN5QnplVzFsZEhKcFkxeHVJQ0FnSUUxdlpHVlBaazl3WlhKaGRHbHZia05VVWk1d2NtOTBiM1I1Y0dVdVpHVmpjbmx3ZENBOUlFMXZaR1ZQWms5d1pYSmhkR2x2YmtOVVVpNXdjbTkwYjNSNWNHVXVaVzVqY25sd2REdGNibHh1WEc0Z0lDQWdMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpQWdJQ0F2THlCUVlXUmthVzVuWEc1Y2JpQWdJQ0F2THlCVFpXVTZhSFIwY0hNNkx5OTBiMjlzY3k1cFpYUm1MbTl5Wnk5b2RHMXNMM0ptWXpJek1UVmNiaUFnSUNCbWRXNWpkR2x2YmlCd2EyTnpOM0JoWkNoa1lYUmhLU0I3WEc0Z0lDQWdJQ0FnSUdSaGRHRWdQU0JqYjJWeVkyVkJjbkpoZVNoa1lYUmhMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhCaFpHUmxjaUE5SURFMklDMGdLR1JoZEdFdWJHVnVaM1JvSUNVZ01UWXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ1kzSmxZWFJsUVhKeVlYa29aR0YwWVM1c1pXNW5kR2dnS3lCd1lXUmtaWElwTzF4dUlDQWdJQ0FnSUNCamIzQjVRWEp5WVhrb1pHRjBZU3dnY21WemRXeDBLVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlHUmhkR0V1YkdWdVozUm9PeUJwSUR3Z2NtVnpkV3gwTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYTjFiSFJiYVYwZ1BTQndZV1JrWlhJN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtZFc1amRHbHZiaUJ3YTJOek4zTjBjbWx3S0dSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnWkdGMFlTQTlJR052WlhKalpVRnljbUY1S0dSaGRHRXNJSFJ5ZFdVcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWkdGMFlTNXNaVzVuZEdnZ1BDQXhOaWtnZXlCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFCTFExTWpOeUJwYm5aaGJHbGtJR3hsYm1kMGFDY3BPeUI5WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSEJoWkdSbGNpQTlJR1JoZEdGYlpHRjBZUzVzWlc1bmRHZ2dMU0F4WFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJoWkdSbGNpQStJREUyS1NCN0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblVFdERVeU0zSUhCaFpHUnBibWNnWW5sMFpTQnZkWFFnYjJZZ2NtRnVaMlVuS1RzZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCc1pXNW5kR2dnUFNCa1lYUmhMbXhsYm1kMGFDQXRJSEJoWkdSbGNqdGNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J3WVdSa1pYSTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUmhkR0ZiYkdWdVozUm9JQ3NnYVYwZ0lUMDlJSEJoWkdSbGNpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25VRXREVXlNM0lHbHVkbUZzYVdRZ2NHRmtaR2x1WnlCaWVYUmxKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCMllYSWdjbVZ6ZFd4MElEMGdZM0psWVhSbFFYSnlZWGtvYkdWdVozUm9LVHRjYmlBZ0lDQWdJQ0FnWTI5d2VVRnljbUY1S0dSaGRHRXNJSEpsYzNWc2RDd2dNQ3dnTUN3Z2JHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUlDQWdJQzh2SUVWNGNHOXlkR2x1WjF4dVhHNWNiaUFnSUNBdkx5QlVhR1VnWW14dlkyc2dZMmx3YUdWeVhHNGdJQ0FnZG1GeUlHRmxjMnB6SUQwZ2UxeHVJQ0FnSUNBZ0lDQkJSVk02SUVGRlV5eGNiaUFnSUNBZ0lDQWdRMjkxYm5SbGNqb2dRMjkxYm5SbGNpeGNibHh1SUNBZ0lDQWdJQ0JOYjJSbFQyWlBjR1Z5WVhScGIyNDZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHVmpZam9nVFc5a1pVOW1UM0JsY21GMGFXOXVSVU5DTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZMkpqT2lCTmIyUmxUMlpQY0dWeVlYUnBiMjVEUWtNc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWm1JNklFMXZaR1ZQWms5d1pYSmhkR2x2YmtOR1FpeGNiaUFnSUNBZ0lDQWdJQ0FnSUc5bVlqb2dUVzlrWlU5bVQzQmxjbUYwYVc5dVQwWkNMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kzUnlPaUJOYjJSbFQyWlBjR1Z5WVhScGIyNURWRkpjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQjFkR2xzY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYUdWNE9pQmpiMjUyWlhKMFNHVjRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RYUm1PRG9nWTI5dWRtVnlkRlYwWmpoY2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0J3WVdSa2FXNW5PaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndhMk56TnpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhaRG9nY0d0amN6ZHdZV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWFYQTZJSEJyWTNNM2MzUnlhWEJjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCZllYSnlZWGxVWlhOME9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyVnlZMlZCY25KaGVUb2dZMjlsY21ObFFYSnlZWGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpjbVZoZEdWQmNuSmhlVG9nWTNKbFlYUmxRWEp5WVhrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjNCNVFYSnlZWGs2SUdOdmNIbEJjbkpoZVN4Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNibHh1SUNBZ0lDOHZJRzV2WkdVdWFuTmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHVjRjRzl5ZEhNZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1lXVnphbk5jYmx4dUlDQWdJQzh2SUZKbGNYVnBjbVZLVXk5QlRVUmNiaUFnSUNBdkx5Qm9kSFJ3T2k4dmQzZDNMbkpsY1hWcGNtVnFjeTV2Y21jdlpHOWpjeTloY0drdWFIUnRiRnh1SUNBZ0lDOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzloYldScWN5OWhiV1JxY3kxaGNHa3ZkMmxyYVM5QlRVUmNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2Wmloa1pXWnBibVVwSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUdSbFptbHVaUzVoYldRcElIdGNiaUFnSUNBZ0lDQWdaR1ZtYVc1bEtGdGRMQ0JtZFc1amRHbHZiaWdwSUhzZ2NtVjBkWEp1SUdGbGMycHpPeUI5S1R0Y2JseHVJQ0FnSUM4dklGZGxZaUJDY205M2MyVnljMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNWNiaUFnSUNBZ0lDQWdMeThnU1dZZ2RHaGxjbVVnZDJGeklHRnVJR1Y0YVhOMGFXNW5JR3hwWW5KaGNua2dZWFFnWENKaFpYTnFjMXdpSUcxaGEyVWdjM1Z5WlNCcGRDZHpJSE4wYVd4c0lHRjJZV2xzWVdKc1pWeHVJQ0FnSUNBZ0lDQnBaaUFvY205dmRDNWhaWE5xY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdWemFuTXVYMkZsYzJweklEMGdjbTl2ZEM1aFpYTnFjenRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISnZiM1F1WVdWemFuTWdQU0JoWlhOcWN6dGNiaUFnSUNCOVhHNWNibHh1ZlNrb2RHaHBjeWs3WEc0aUxDSW9ablZ1WTNScGIyNGdLRzF2WkhWc1pTd2daWGh3YjNKMGN5a2dlMXh1SUNBbmRYTmxJSE4wY21samRDYzdYRzVjYmlBZ0x5OGdWWFJwYkhOY2JpQWdablZ1WTNScGIyNGdZWE56WlhKMElDaDJZV3dzSUcxelp5a2dlMXh1SUNBZ0lHbG1JQ2doZG1Gc0tTQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb2JYTm5JSHg4SUNkQmMzTmxjblJwYjI0Z1ptRnBiR1ZrSnlrN1hHNGdJSDFjYmx4dUlDQXZMeUJEYjNWc1pDQjFjMlVnWUdsdWFHVnlhWFJ6WUNCdGIyUjFiR1VzSUdKMWRDQmtiMjRuZENCM1lXNTBJSFJ2SUcxdmRtVWdabkp2YlNCemFXNW5iR1VnWm1sc1pWeHVJQ0F2THlCaGNtTm9hWFJsWTNSMWNtVWdlV1YwTGx4dUlDQm1kVzVqZEdsdmJpQnBibWhsY21sMGN5QW9ZM1J2Y2l3Z2MzVndaWEpEZEc5eUtTQjdYRzRnSUNBZ1kzUnZjaTV6ZFhCbGNsOGdQU0J6ZFhCbGNrTjBiM0k3WEc0Z0lDQWdkbUZ5SUZSbGJYQkRkRzl5SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMzA3WEc0Z0lDQWdWR1Z0Y0VOMGIzSXVjSEp2ZEc5MGVYQmxJRDBnYzNWd1pYSkRkRzl5TG5CeWIzUnZkSGx3WlR0Y2JpQWdJQ0JqZEc5eUxuQnliM1J2ZEhsd1pTQTlJRzVsZHlCVVpXMXdRM1J2Y2lncE8xeHVJQ0FnSUdOMGIzSXVjSEp2ZEc5MGVYQmxMbU52Ym5OMGNuVmpkRzl5SUQwZ1kzUnZjanRjYmlBZ2ZWeHVYRzRnSUM4dklFSk9YRzVjYmlBZ1puVnVZM1JwYjI0Z1FrNGdLRzUxYldKbGNpd2dZbUZ6WlN3Z1pXNWthV0Z1S1NCN1hHNGdJQ0FnYVdZZ0tFSk9MbWx6UWs0b2JuVnRZbVZ5S1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJXSmxjanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG01bFoyRjBhWFpsSUQwZ01EdGNiaUFnSUNCMGFHbHpMbmR2Y21SeklEMGdiblZzYkR0Y2JpQWdJQ0IwYUdsekxteGxibWQwYUNBOUlEQTdYRzVjYmlBZ0lDQXZMeUJTWldSMVkzUnBiMjRnWTI5dWRHVjRkRnh1SUNBZ0lIUm9hWE11Y21Wa0lEMGdiblZzYkR0Y2JseHVJQ0FnSUdsbUlDaHVkVzFpWlhJZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNBZ0lHbG1JQ2hpWVhObElEMDlQU0FuYkdVbklIeDhJR0poYzJVZ1BUMDlJQ2RpWlNjcElIdGNiaUFnSUNBZ0lDQWdaVzVrYVdGdUlEMGdZbUZ6WlR0Y2JpQWdJQ0FnSUNBZ1ltRnpaU0E5SURFd08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjBhR2x6TGw5cGJtbDBLRzUxYldKbGNpQjhmQ0F3TENCaVlYTmxJSHg4SURFd0xDQmxibVJwWVc0Z2ZId2dKMkpsSnlrN1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdsbUlDaDBlWEJsYjJZZ2JXOWtkV3hsSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1FrNDdYRzRnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdaWGh3YjNKMGN5NUNUaUE5SUVKT08xeHVJQ0I5WEc1Y2JpQWdRazR1UWs0Z1BTQkNUanRjYmlBZ1FrNHVkMjl5WkZOcGVtVWdQU0F5Tmp0Y2JseHVJQ0IyWVhJZ1FuVm1abVZ5TzF4dUlDQjBjbmtnZTF4dUlDQWdJRUoxWm1abGNpQTlJSEpsY1hWcGNtVW9KMkoxWm1abGNpY3BMa0oxWm1abGNqdGNiaUFnZlNCallYUmphQ0FvWlNrZ2UxeHVJQ0I5WEc1Y2JpQWdRazR1YVhOQ1RpQTlJR1oxYm1OMGFXOXVJR2x6UWs0Z0tHNTFiU2tnZTF4dUlDQWdJR2xtSUNodWRXMGdhVzV6ZEdGdVkyVnZaaUJDVGlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc1MWJTQWhQVDBnYm5Wc2JDQW1KaUIwZVhCbGIyWWdiblZ0SUQwOVBTQW5iMkpxWldOMEp5QW1KbHh1SUNBZ0lDQWdiblZ0TG1OdmJuTjBjblZqZEc5eUxuZHZjbVJUYVhwbElEMDlQU0JDVGk1M2IzSmtVMmw2WlNBbUppQkJjbkpoZVM1cGMwRnljbUY1S0c1MWJTNTNiM0prY3lrN1hHNGdJSDA3WEc1Y2JpQWdRazR1YldGNElEMGdablZ1WTNScGIyNGdiV0Y0SUNoc1pXWjBMQ0J5YVdkb2RDa2dlMXh1SUNBZ0lHbG1JQ2hzWldaMExtTnRjQ2h5YVdkb2RDa2dQaUF3S1NCeVpYUjFjbTRnYkdWbWREdGNiaUFnSUNCeVpYUjFjbTRnY21sbmFIUTdYRzRnSUgwN1hHNWNiaUFnUWs0dWJXbHVJRDBnWm5WdVkzUnBiMjRnYldsdUlDaHNaV1owTENCeWFXZG9kQ2tnZTF4dUlDQWdJR2xtSUNoc1pXWjBMbU50Y0NoeWFXZG9kQ2tnUENBd0tTQnlaWFIxY200Z2JHVm1kRHRjYmlBZ0lDQnlaWFIxY200Z2NtbG5hSFE3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbDlwYm1sMElEMGdablZ1WTNScGIyNGdhVzVwZENBb2JuVnRZbVZ5TENCaVlYTmxMQ0JsYm1ScFlXNHBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzUxYldKbGNpQTlQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBibWwwVG5WdFltVnlLRzUxYldKbGNpd2dZbUZ6WlN3Z1pXNWthV0Z1S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUc1MWJXSmxjaUE5UFQwZ0oyOWlhbVZqZENjcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlwYm1sMFFYSnlZWGtvYm5WdFltVnlMQ0JpWVhObExDQmxibVJwWVc0cE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGlZWE5sSUQwOVBTQW5hR1Y0SnlrZ2UxeHVJQ0FnSUNBZ1ltRnpaU0E5SURFMk8xeHVJQ0FnSUgxY2JpQWdJQ0JoYzNObGNuUW9ZbUZ6WlNBOVBUMGdLR0poYzJVZ2ZDQXdLU0FtSmlCaVlYTmxJRDQ5SURJZ0ppWWdZbUZ6WlNBOFBTQXpOaWs3WEc1Y2JpQWdJQ0J1ZFcxaVpYSWdQU0J1ZFcxaVpYSXVkRzlUZEhKcGJtY29LUzV5WlhCc1lXTmxLQzljWEhNckwyY3NJQ2NuS1R0Y2JpQWdJQ0IyWVhJZ2MzUmhjblFnUFNBd08xeHVJQ0FnSUdsbUlDaHVkVzFpWlhKYk1GMGdQVDA5SUNjdEp5a2dlMXh1SUNBZ0lDQWdjM1JoY25Rckt6dGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9ZbUZ6WlNBOVBUMGdNVFlwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM0JoY25ObFNHVjRLRzUxYldKbGNpd2djM1JoY25RcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOXdZWEp6WlVKaGMyVW9iblZ0WW1WeUxDQmlZWE5sTENCemRHRnlkQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0c1MWJXSmxjbHN3WFNBOVBUMGdKeTBuS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbTVsWjJGMGFYWmxJRDBnTVR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxuTjBjbWx3S0NrN1hHNWNiaUFnSUNCcFppQW9aVzVrYVdGdUlDRTlQU0FuYkdVbktTQnlaWFIxY200N1hHNWNiaUFnSUNCMGFHbHpMbDlwYm1sMFFYSnlZWGtvZEdocGN5NTBiMEZ5Y21GNUtDa3NJR0poYzJVc0lHVnVaR2xoYmlrN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTGw5cGJtbDBUblZ0WW1WeUlEMGdablZ1WTNScGIyNGdYMmx1YVhST2RXMWlaWElnS0c1MWJXSmxjaXdnWW1GelpTd2daVzVrYVdGdUtTQjdYRzRnSUNBZ2FXWWdLRzUxYldKbGNpQThJREFwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVibVZuWVhScGRtVWdQU0F4TzF4dUlDQWdJQ0FnYm5WdFltVnlJRDBnTFc1MWJXSmxjanRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLRzUxYldKbGNpQThJREI0TkRBd01EQXdNQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NTNiM0prY3lBOUlGc2diblZ0WW1WeUlDWWdNSGd6Wm1abVptWm1JRjA3WEc0Z0lDQWdJQ0IwYUdsekxteGxibWQwYUNBOUlERTdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHVkVzFpWlhJZ1BDQXdlREV3TURBd01EQXdNREF3TURBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG5kdmNtUnpJRDBnVzF4dUlDQWdJQ0FnSUNCdWRXMWlaWElnSmlBd2VETm1abVptWm1Zc1hHNGdJQ0FnSUNBZ0lDaHVkVzFpWlhJZ0x5QXdlRFF3TURBd01EQXBJQ1lnTUhnelptWm1abVptWEc0Z0lDQWdJQ0JkTzF4dUlDQWdJQ0FnZEdocGN5NXNaVzVuZEdnZ1BTQXlPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCaGMzTmxjblFvYm5WdFltVnlJRHdnTUhneU1EQXdNREF3TURBd01EQXdNQ2s3SUM4dklESWdYaUExTXlBb2RXNXpZV1psS1Z4dUlDQWdJQ0FnZEdocGN5NTNiM0prY3lBOUlGdGNiaUFnSUNBZ0lDQWdiblZ0WW1WeUlDWWdNSGd6Wm1abVptWm1MRnh1SUNBZ0lDQWdJQ0FvYm5WdFltVnlJQzhnTUhnME1EQXdNREF3S1NBbUlEQjRNMlptWm1abVppeGNiaUFnSUNBZ0lDQWdNVnh1SUNBZ0lDQWdYVHRjYmlBZ0lDQWdJSFJvYVhNdWJHVnVaM1JvSUQwZ016dGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9aVzVrYVdGdUlDRTlQU0FuYkdVbktTQnlaWFIxY200N1hHNWNiaUFnSUNBdkx5QlNaWFpsY25ObElIUm9aU0JpZVhSbGMxeHVJQ0FnSUhSb2FYTXVYMmx1YVhSQmNuSmhlU2gwYUdsekxuUnZRWEp5WVhrb0tTd2dZbUZ6WlN3Z1pXNWthV0Z1S1R0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1WDJsdWFYUkJjbkpoZVNBOUlHWjFibU4wYVc5dUlGOXBibWwwUVhKeVlYa2dLRzUxYldKbGNpd2dZbUZ6WlN3Z1pXNWthV0Z1S1NCN1hHNGdJQ0FnTHk4Z1VHVnlhR0Z3Y3lCaElGVnBiblE0UVhKeVlYbGNiaUFnSUNCaGMzTmxjblFvZEhsd1pXOW1JRzUxYldKbGNpNXNaVzVuZEdnZ1BUMDlJQ2R1ZFcxaVpYSW5LVHRjYmlBZ0lDQnBaaUFvYm5WdFltVnlMbXhsYm1kMGFDQThQU0F3S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21SeklEMGdXeUF3SUYwN1hHNGdJQ0FnSUNCMGFHbHpMbXhsYm1kMGFDQTlJREU3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IwYUdsekxteGxibWQwYUNBOUlFMWhkR2d1WTJWcGJDaHVkVzFpWlhJdWJHVnVaM1JvSUM4Z015azdYRzRnSUNBZ2RHaHBjeTUzYjNKa2N5QTlJRzVsZHlCQmNuSmhlU2gwYUdsekxteGxibWQwYUNrN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCMGFHbHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21SelcybGRJRDBnTUR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2Fpd2dkenRjYmlBZ0lDQjJZWElnYjJabUlEMGdNRHRjYmlBZ0lDQnBaaUFvWlc1a2FXRnVJRDA5UFNBblltVW5LU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tHa2dQU0J1ZFcxaVpYSXViR1Z1WjNSb0lDMGdNU3dnYWlBOUlEQTdJR2tnUGowZ01Ec2dhU0F0UFNBektTQjdYRzRnSUNBZ0lDQWdJSGNnUFNCdWRXMWlaWEpiYVYwZ2ZDQW9iblZ0WW1WeVcya2dMU0F4WFNBOFBDQTRLU0I4SUNodWRXMWlaWEpiYVNBdElESmRJRHc4SURFMktUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1M2IzSmtjMXRxWFNCOFBTQW9keUE4UENCdlptWXBJQ1lnTUhnelptWm1abVptTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmR2Y21Selcyb2dLeUF4WFNBOUlDaDNJRDQrUGlBb01qWWdMU0J2Wm1ZcEtTQW1JREI0TTJabVptWm1aanRjYmlBZ0lDQWdJQ0FnYjJabUlDczlJREkwTzF4dUlDQWdJQ0FnSUNCcFppQW9iMlptSUQ0OUlESTJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IyWm1JQzA5SURJMk8xeHVJQ0FnSUNBZ0lDQWdJR29yS3p0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb1pXNWthV0Z1SUQwOVBTQW5iR1VuS1NCN1hHNGdJQ0FnSUNCbWIzSWdLR2tnUFNBd0xDQnFJRDBnTURzZ2FTQThJRzUxYldKbGNpNXNaVzVuZEdnN0lHa2dLejBnTXlrZ2UxeHVJQ0FnSUNBZ0lDQjNJRDBnYm5WdFltVnlXMmxkSUh3Z0tHNTFiV0psY2x0cElDc2dNVjBnUER3Z09Da2dmQ0FvYm5WdFltVnlXMmtnS3lBeVhTQThQQ0F4TmlrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11ZDI5eVpITmJhbDBnZkQwZ0tIY2dQRHdnYjJabUtTQW1JREI0TTJabVptWm1aanRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNiM0prYzF0cUlDc2dNVjBnUFNBb2R5QStQajRnS0RJMklDMGdiMlptS1NrZ0ppQXdlRE5tWm1abVptWTdYRzRnSUNBZ0lDQWdJRzltWmlBclBTQXlORHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHOW1aaUErUFNBeU5pa2dlMXh1SUNBZ0lDQWdJQ0FnSUc5bVppQXRQU0F5Tmp0Y2JpQWdJQ0FnSUNBZ0lDQnFLeXM3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSeWFYQW9LVHRjYmlBZ2ZUdGNibHh1SUNCbWRXNWpkR2x2YmlCd1lYSnpaVWhsZUNBb2MzUnlMQ0J6ZEdGeWRDd2daVzVrS1NCN1hHNGdJQ0FnZG1GeUlISWdQU0F3TzF4dUlDQWdJSFpoY2lCc1pXNGdQU0JOWVhSb0xtMXBiaWh6ZEhJdWJHVnVaM1JvTENCbGJtUXBPMXh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0J6ZEdGeWREc2dhU0E4SUd4bGJqc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdZeUE5SUhOMGNpNWphR0Z5UTI5a1pVRjBLR2twSUMwZ05EZzdYRzVjYmlBZ0lDQWdJSElnUER3OUlEUTdYRzVjYmlBZ0lDQWdJQzh2SUNkaEp5QXRJQ2RtSjF4dUlDQWdJQ0FnYVdZZ0tHTWdQajBnTkRrZ0ppWWdZeUE4UFNBMU5Da2dlMXh1SUNBZ0lDQWdJQ0J5SUh3OUlHTWdMU0EwT1NBcklEQjRZVHRjYmx4dUlDQWdJQ0FnTHk4Z0owRW5JQzBnSjBZblhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHTWdQajBnTVRjZ0ppWWdZeUE4UFNBeU1pa2dlMXh1SUNBZ0lDQWdJQ0J5SUh3OUlHTWdMU0F4TnlBcklEQjRZVHRjYmx4dUlDQWdJQ0FnTHk4Z0p6QW5JQzBnSnprblhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeUlIdzlJR01nSmlBd2VHWTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5TzF4dUlDQjlYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbDl3WVhKelpVaGxlQ0E5SUdaMWJtTjBhVzl1SUY5d1lYSnpaVWhsZUNBb2JuVnRZbVZ5TENCemRHRnlkQ2tnZTF4dUlDQWdJQzh2SUVOeVpXRjBaU0J3YjNOemFXSnNlU0JpYVdkblpYSWdZWEp5WVhrZ2RHOGdaVzV6ZFhKbElIUm9ZWFFnYVhRZ1ptbDBjeUIwYUdVZ2JuVnRZbVZ5WEc0Z0lDQWdkR2hwY3k1c1pXNW5kR2dnUFNCTllYUm9MbU5sYVd3b0tHNTFiV0psY2k1c1pXNW5kR2dnTFNCemRHRnlkQ2tnTHlBMktUdGNiaUFnSUNCMGFHbHpMbmR2Y21SeklEMGdibVYzSUVGeWNtRjVLSFJvYVhNdWJHVnVaM1JvS1R0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhSb2FYTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0F3TzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCcUxDQjNPMXh1SUNBZ0lDOHZJRk5qWVc0Z01qUXRZbWwwSUdOb2RXNXJjeUJoYm1RZ1lXUmtJSFJvWlcwZ2RHOGdkR2hsSUc1MWJXSmxjbHh1SUNBZ0lIWmhjaUJ2Wm1ZZ1BTQXdPMXh1SUNBZ0lHWnZjaUFvYVNBOUlHNTFiV0psY2k1c1pXNW5kR2dnTFNBMkxDQnFJRDBnTURzZ2FTQStQU0J6ZEdGeWREc2dhU0F0UFNBMktTQjdYRzRnSUNBZ0lDQjNJRDBnY0dGeWMyVklaWGdvYm5WdFltVnlMQ0JwTENCcElDc2dOaWs3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6VzJwZElIdzlJQ2gzSUR3OElHOW1aaWtnSmlBd2VETm1abVptWm1ZN1hHNGdJQ0FnSUNBdkx5Qk9UMVJGT2lCZ01IZ3pabVptWm1aZ0lHbHpJR2x1ZEdWdWRHbHZibUZzSUdobGNtVXNJREkyWW1sMGN5QnRZWGdnYzJocFpuUWdLeUF5TkdKcGRDQm9aWGdnYkdsdFlseHVJQ0FnSUNBZ2RHaHBjeTUzYjNKa2MxdHFJQ3NnTVYwZ2ZEMGdkeUErUGo0Z0tESTJJQzBnYjJabUtTQW1JREI0TTJabVptWm1PMXh1SUNBZ0lDQWdiMlptSUNzOUlESTBPMXh1SUNBZ0lDQWdhV1lnS0c5bVppQStQU0F5TmlrZ2UxeHVJQ0FnSUNBZ0lDQnZabVlnTFQwZ01qWTdYRzRnSUNBZ0lDQWdJR29yS3p0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0drZ0t5QTJJQ0U5UFNCemRHRnlkQ2tnZTF4dUlDQWdJQ0FnZHlBOUlIQmhjbk5sU0dWNEtHNTFiV0psY2l3Z2MzUmhjblFzSUdrZ0t5QTJLVHRjYmlBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYWwwZ2ZEMGdLSGNnUER3Z2IyWm1LU0FtSURCNE0yWm1abVptWmp0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFpQXJJREZkSUh3OUlIY2dQajQrSUNneU5pQXRJRzltWmlrZ0ppQXdlRE5tWm1abVpqdGNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NXpkSEpwY0NncE8xeHVJQ0I5TzF4dVhHNGdJR1oxYm1OMGFXOXVJSEJoY25ObFFtRnpaU0FvYzNSeUxDQnpkR0Z5ZEN3Z1pXNWtMQ0J0ZFd3cElIdGNiaUFnSUNCMllYSWdjaUE5SURBN1hHNGdJQ0FnZG1GeUlHeGxiaUE5SUUxaGRHZ3ViV2x1S0hOMGNpNXNaVzVuZEdnc0lHVnVaQ2s3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SUhOMFlYSjBPeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNBZ0lIWmhjaUJqSUQwZ2MzUnlMbU5vWVhKRGIyUmxRWFFvYVNrZ0xTQTBPRHRjYmx4dUlDQWdJQ0FnY2lBcVBTQnRkV3c3WEc1Y2JpQWdJQ0FnSUM4dklDZGhKMXh1SUNBZ0lDQWdhV1lnS0dNZ1BqMGdORGtwSUh0Y2JpQWdJQ0FnSUNBZ2NpQXJQU0JqSUMwZ05Ea2dLeUF3ZUdFN1hHNWNiaUFnSUNBZ0lDOHZJQ2RCSjF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoaklENDlJREUzS1NCN1hHNGdJQ0FnSUNBZ0lISWdLejBnWXlBdElERTNJQ3NnTUhoaE8xeHVYRzRnSUNBZ0lDQXZMeUFuTUNjZ0xTQW5PU2RjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJSElnS3owZ1l6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSEk3WEc0Z0lIMWNibHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVYM0JoY25ObFFtRnpaU0E5SUdaMWJtTjBhVzl1SUY5d1lYSnpaVUpoYzJVZ0tHNTFiV0psY2l3Z1ltRnpaU3dnYzNSaGNuUXBJSHRjYmlBZ0lDQXZMeUJKYm1sMGFXRnNhWHBsSUdGeklIcGxjbTljYmlBZ0lDQjBhR2x6TG5kdmNtUnpJRDBnV3lBd0lGMDdYRzRnSUNBZ2RHaHBjeTVzWlc1bmRHZ2dQU0F4TzF4dVhHNGdJQ0FnTHk4Z1JtbHVaQ0JzWlc1bmRHZ2diMllnYkdsdFlpQnBiaUJpWVhObFhHNGdJQ0FnWm05eUlDaDJZWElnYkdsdFlreGxiaUE5SURBc0lHeHBiV0pRYjNjZ1BTQXhPeUJzYVcxaVVHOTNJRHc5SURCNE0yWm1abVptWmpzZ2JHbHRZbEJ2ZHlBcVBTQmlZWE5sS1NCN1hHNGdJQ0FnSUNCc2FXMWlUR1Z1S3lzN1hHNGdJQ0FnZlZ4dUlDQWdJR3hwYldKTVpXNHRMVHRjYmlBZ0lDQnNhVzFpVUc5M0lEMGdLR3hwYldKUWIzY2dMeUJpWVhObEtTQjhJREE3WEc1Y2JpQWdJQ0IyWVhJZ2RHOTBZV3dnUFNCdWRXMWlaWEl1YkdWdVozUm9JQzBnYzNSaGNuUTdYRzRnSUNBZ2RtRnlJRzF2WkNBOUlIUnZkR0ZzSUNVZ2JHbHRZa3hsYmp0Y2JpQWdJQ0IyWVhJZ1pXNWtJRDBnVFdGMGFDNXRhVzRvZEc5MFlXd3NJSFJ2ZEdGc0lDMGdiVzlrS1NBcklITjBZWEowTzF4dVhHNGdJQ0FnZG1GeUlIZHZjbVFnUFNBd08xeHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQnpkR0Z5ZERzZ2FTQThJR1Z1WkRzZ2FTQXJQU0JzYVcxaVRHVnVLU0I3WEc0Z0lDQWdJQ0IzYjNKa0lEMGdjR0Z5YzJWQ1lYTmxLRzUxYldKbGNpd2dhU3dnYVNBcklHeHBiV0pNWlc0c0lHSmhjMlVwTzF4dVhHNGdJQ0FnSUNCMGFHbHpMbWx0ZFd4dUtHeHBiV0pRYjNjcE8xeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWQyOXlaSE5iTUYwZ0t5QjNiM0prSUR3Z01IZzBNREF3TURBd0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iTUYwZ0t6MGdkMjl5WkR0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmxoWkdSdUtIZHZjbVFwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNodGIyUWdJVDA5SURBcElIdGNiaUFnSUNBZ0lIWmhjaUJ3YjNjZ1BTQXhPMXh1SUNBZ0lDQWdkMjl5WkNBOUlIQmhjbk5sUW1GelpTaHVkVzFpWlhJc0lHa3NJRzUxYldKbGNpNXNaVzVuZEdnc0lHSmhjMlVwTzF4dVhHNGdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnYlc5a095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2NHOTNJQ285SUdKaGMyVTdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJSFJvYVhNdWFXMTFiRzRvY0c5M0tUdGNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxuZHZjbVJ6V3pCZElDc2dkMjl5WkNBOElEQjROREF3TURBd01Da2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxuZHZjbVJ6V3pCZElDczlJSGR2Y21RN1hHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlwWVdSa2JpaDNiM0prS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbU52Y0hrZ1BTQm1kVzVqZEdsdmJpQmpiM0I1SUNoa1pYTjBLU0I3WEc0Z0lDQWdaR1Z6ZEM1M2IzSmtjeUE5SUc1bGR5QkJjbkpoZVNoMGFHbHpMbXhsYm1kMGFDazdYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQmtaWE4wTG5kdmNtUnpXMmxkSUQwZ2RHaHBjeTUzYjNKa2MxdHBYVHRjYmlBZ0lDQjlYRzRnSUNBZ1pHVnpkQzVzWlc1bmRHZ2dQU0IwYUdsekxteGxibWQwYUR0Y2JpQWdJQ0JrWlhOMExtNWxaMkYwYVhabElEMGdkR2hwY3k1dVpXZGhkR2wyWlR0Y2JpQWdJQ0JrWlhOMExuSmxaQ0E5SUhSb2FYTXVjbVZrTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVqYkc5dVpTQTlJR1oxYm1OMGFXOXVJR05zYjI1bElDZ3BJSHRjYmlBZ0lDQjJZWElnY2lBOUlHNWxkeUJDVGlodWRXeHNLVHRjYmlBZ0lDQjBhR2x6TG1OdmNIa29jaWs3WEc0Z0lDQWdjbVYwZFhKdUlISTdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExsOWxlSEJoYm1RZ1BTQm1kVzVqZEdsdmJpQmZaWGh3WVc1a0lDaHphWHBsS1NCN1hHNGdJQ0FnZDJocGJHVWdLSFJvYVhNdWJHVnVaM1JvSUR3Z2MybDZaU2tnZTF4dUlDQWdJQ0FnZEdocGN5NTNiM0prYzF0MGFHbHpMbXhsYm1kMGFDc3JYU0E5SURBN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkpsYlc5MlpTQnNaV0ZrYVc1bklHQXdZQ0JtY205dElHQjBhR2x6WUZ4dUlDQkNUaTV3Y205MGIzUjVjR1V1YzNSeWFYQWdQU0JtZFc1amRHbHZiaUJ6ZEhKcGNDQW9LU0I3WEc0Z0lDQWdkMmhwYkdVZ0tIUm9hWE11YkdWdVozUm9JRDRnTVNBbUppQjBhR2x6TG5kdmNtUnpXM1JvYVhNdWJHVnVaM1JvSUMwZ01WMGdQVDA5SURBcElIdGNiaUFnSUNBZ0lIUm9hWE11YkdWdVozUm9MUzA3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl1YjNKdFUybG5iaWdwTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVmYm05eWJWTnBaMjRnUFNCbWRXNWpkR2x2YmlCZmJtOXliVk5wWjI0Z0tDa2dlMXh1SUNBZ0lDOHZJQzB3SUQwZ01GeHVJQ0FnSUdsbUlDaDBhR2x6TG14bGJtZDBhQ0E5UFQwZ01TQW1KaUIwYUdsekxuZHZjbVJ6V3pCZElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbTVsWjJGMGFYWmxJRDBnTUR0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbWx1YzNCbFkzUWdQU0JtZFc1amRHbHZiaUJwYm5Od1pXTjBJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLSFJvYVhNdWNtVmtJRDhnSnp4Q1RpMVNPaUFuSURvZ0p6eENUam9nSnlrZ0t5QjBhR2x6TG5SdlUzUnlhVzVuS0RFMktTQXJJQ2MrSnp0Y2JpQWdmVHRjYmx4dUlDQXZLbHh1WEc0Z0lIWmhjaUI2WlhKdmN5QTlJRnRkTzF4dUlDQjJZWElnWjNKdmRYQlRhWHBsY3lBOUlGdGRPMXh1SUNCMllYSWdaM0p2ZFhCQ1lYTmxjeUE5SUZ0ZE8xeHVYRzRnSUhaaGNpQnpJRDBnSnljN1hHNGdJSFpoY2lCcElEMGdMVEU3WEc0Z0lIZG9hV3hsSUNncksya2dQQ0JDVGk1M2IzSmtVMmw2WlNrZ2UxeHVJQ0FnSUhwbGNtOXpXMmxkSUQwZ2N6dGNiaUFnSUNCeklDczlJQ2N3Snp0Y2JpQWdmVnh1SUNCbmNtOTFjRk5wZW1Weld6QmRJRDBnTUR0Y2JpQWdaM0p2ZFhCVGFYcGxjMXN4WFNBOUlEQTdYRzRnSUdkeWIzVndRbUZ6WlhOYk1GMGdQU0F3TzF4dUlDQm5jbTkxY0VKaGMyVnpXekZkSUQwZ01EdGNiaUFnZG1GeUlHSmhjMlVnUFNBeUlDMGdNVHRjYmlBZ2QyaHBiR1VnS0NzclltRnpaU0E4SURNMklDc2dNU2tnZTF4dUlDQWdJSFpoY2lCbmNtOTFjRk5wZW1VZ1BTQXdPMXh1SUNBZ0lIWmhjaUJuY205MWNFSmhjMlVnUFNBeE8xeHVJQ0FnSUhkb2FXeGxJQ2huY205MWNFSmhjMlVnUENBb01TQThQQ0JDVGk1M2IzSmtVMmw2WlNrZ0x5QmlZWE5sS1NCN1hHNGdJQ0FnSUNCbmNtOTFjRUpoYzJVZ0tqMGdZbUZ6WlR0Y2JpQWdJQ0FnSUdkeWIzVndVMmw2WlNBclBTQXhPMXh1SUNBZ0lIMWNiaUFnSUNCbmNtOTFjRk5wZW1WelcySmhjMlZkSUQwZ1ozSnZkWEJUYVhwbE8xeHVJQ0FnSUdkeWIzVndRbUZ6WlhOYlltRnpaVjBnUFNCbmNtOTFjRUpoYzJVN1hHNGdJSDFjYmx4dUlDQXFMMXh1WEc0Z0lIWmhjaUI2WlhKdmN5QTlJRnRjYmlBZ0lDQW5KeXhjYmlBZ0lDQW5NQ2NzWEc0Z0lDQWdKekF3Snl4Y2JpQWdJQ0FuTURBd0p5eGNiaUFnSUNBbk1EQXdNQ2NzWEc0Z0lDQWdKekF3TURBd0p5eGNiaUFnSUNBbk1EQXdNREF3Snl4Y2JpQWdJQ0FuTURBd01EQXdNQ2NzWEc0Z0lDQWdKekF3TURBd01EQXdKeXhjYmlBZ0lDQW5NREF3TURBd01EQXdKeXhjYmlBZ0lDQW5NREF3TURBd01EQXdNQ2NzWEc0Z0lDQWdKekF3TURBd01EQXdNREF3Snl4Y2JpQWdJQ0FuTURBd01EQXdNREF3TURBd0p5eGNiaUFnSUNBbk1EQXdNREF3TURBd01EQXdNQ2NzWEc0Z0lDQWdKekF3TURBd01EQXdNREF3TURBd0p5eGNiaUFnSUNBbk1EQXdNREF3TURBd01EQXdNREF3Snl4Y2JpQWdJQ0FuTURBd01EQXdNREF3TURBd01EQXdNQ2NzWEc0Z0lDQWdKekF3TURBd01EQXdNREF3TURBd01EQXdKeXhjYmlBZ0lDQW5NREF3TURBd01EQXdNREF3TURBd01EQXdKeXhjYmlBZ0lDQW5NREF3TURBd01EQXdNREF3TURBd01EQXdNQ2NzWEc0Z0lDQWdKekF3TURBd01EQXdNREF3TURBd01EQXdNREF3Snl4Y2JpQWdJQ0FuTURBd01EQXdNREF3TURBd01EQXdNREF3TURBd0p5eGNiaUFnSUNBbk1EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNQ2NzWEc0Z0lDQWdKekF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd0p5eGNiaUFnSUNBbk1EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3Snl4Y2JpQWdJQ0FuTURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNQ2RjYmlBZ1hUdGNibHh1SUNCMllYSWdaM0p2ZFhCVGFYcGxjeUE5SUZ0Y2JpQWdJQ0F3TENBd0xGeHVJQ0FnSURJMUxDQXhOaXdnTVRJc0lERXhMQ0F4TUN3Z09Td2dPQ3hjYmlBZ0lDQTRMQ0EzTENBM0xDQTNMQ0EzTENBMkxDQTJMRnh1SUNBZ0lEWXNJRFlzSURZc0lEWXNJRFlzSURVc0lEVXNYRzRnSUNBZ05Td2dOU3dnTlN3Z05Td2dOU3dnTlN3Z05TeGNiaUFnSUNBMUxDQTFMQ0ExTENBMUxDQTFMQ0ExTENBMVhHNGdJRjA3WEc1Y2JpQWdkbUZ5SUdkeWIzVndRbUZ6WlhNZ1BTQmJYRzRnSUNBZ01Dd2dNQ3hjYmlBZ0lDQXpNelUxTkRRek1pd2dORE13TkRZM01qRXNJREUyTnpjM01qRTJMQ0EwT0RneU9ERXlOU3dnTmpBME5qWXhOellzSURRd016VXpOakEzTENBeE5qYzNOekl4Tml4Y2JpQWdJQ0EwTXpBME5qY3lNU3dnTVRBd01EQXdNREFzSURFNU5EZzNNVGN4TENBek5UZ3pNVGd3T0N3Z05qSTNORGcxTVRjc0lEYzFNamsxTXpZc0lERXhNemt3TmpJMUxGeHVJQ0FnSURFMk56YzNNakUyTENBeU5ERXpOelUyT1N3Z016UXdNVEl5TWpRc0lEUTNNRFExT0RneExDQTJOREF3TURBd01Dd2dOREE0TkRFd01Td2dOVEUxTXpZek1peGNiaUFnSUNBMk5ETTJNelF6TENBM09UWXlOakkwTENBNU56WTFOakkxTENBeE1UZzRNVE0zTml3Z01UUXpORGc1TURjc0lERTNNakV3TXpZNExDQXlNRFV4TVRFME9TeGNiaUFnSUNBeU5ETXdNREF3TUN3Z01qZzJNamt4TlRFc0lETXpOVFUwTkRNeUxDQXpPVEV6TlRNNU15d2dORFUwTXpVME1qUXNJRFV5TlRJeE9EYzFMQ0EyTURRMk5qRTNObHh1SUNCZE8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNTBiMU4wY21sdVp5QTlJR1oxYm1OMGFXOXVJSFJ2VTNSeWFXNW5JQ2hpWVhObExDQndZV1JrYVc1bktTQjdYRzRnSUNBZ1ltRnpaU0E5SUdKaGMyVWdmSHdnTVRBN1hHNGdJQ0FnY0dGa1pHbHVaeUE5SUhCaFpHUnBibWNnZkNBd0lIeDhJREU3WEc1Y2JpQWdJQ0IyWVhJZ2IzVjBPMXh1SUNBZ0lHbG1JQ2hpWVhObElEMDlQU0F4TmlCOGZDQmlZWE5sSUQwOVBTQW5hR1Y0SnlrZ2UxeHVJQ0FnSUNBZ2IzVjBJRDBnSnljN1hHNGdJQ0FnSUNCMllYSWdiMlptSUQwZ01EdGNiaUFnSUNBZ0lIWmhjaUJqWVhKeWVTQTlJREE3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUhSb2FYTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSGNnUFNCMGFHbHpMbmR2Y21SelcybGRPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2QyOXlaQ0E5SUNnb0tIY2dQRHdnYjJabUtTQjhJR05oY25KNUtTQW1JREI0Wm1abVptWm1LUzUwYjFOMGNtbHVaeWd4TmlrN1hHNGdJQ0FnSUNBZ0lHTmhjbko1SUQwZ0tIY2dQajQrSUNneU5DQXRJRzltWmlrcElDWWdNSGhtWm1abVptWTdYRzRnSUNBZ0lDQWdJR2xtSUNoallYSnllU0FoUFQwZ01DQjhmQ0JwSUNFOVBTQjBhR2x6TG14bGJtZDBhQ0F0SURFcElIdGNiaUFnSUNBZ0lDQWdJQ0J2ZFhRZ1BTQjZaWEp2YzFzMklDMGdkMjl5WkM1c1pXNW5kR2hkSUNzZ2QyOXlaQ0FySUc5MWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J2ZFhRZ1BTQjNiM0prSUNzZ2IzVjBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUc5bVppQXJQU0F5TzF4dUlDQWdJQ0FnSUNCcFppQW9iMlptSUQ0OUlESTJLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2IyWm1JQzA5SURJMk8xeHVJQ0FnSUNBZ0lDQWdJR2t0TFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLR05oY25KNUlDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lHOTFkQ0E5SUdOaGNuSjVMblJ2VTNSeWFXNW5LREUyS1NBcklHOTFkRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSGRvYVd4bElDaHZkWFF1YkdWdVozUm9JQ1VnY0dGa1pHbHVaeUFoUFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0J2ZFhRZ1BTQW5NQ2NnS3lCdmRYUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NXVaV2RoZEdsMlpTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnZkWFFnUFNBbkxTY2dLeUJ2ZFhRN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnYjNWME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGlZWE5sSUQwOVBTQW9ZbUZ6WlNCOElEQXBJQ1ltSUdKaGMyVWdQajBnTWlBbUppQmlZWE5sSUR3OUlETTJLU0I3WEc0Z0lDQWdJQ0F2THlCMllYSWdaM0p2ZFhCVGFYcGxJRDBnVFdGMGFDNW1iRzl2Y2loQ1RpNTNiM0prVTJsNlpTQXFJRTFoZEdndVRFNHlJQzhnVFdGMGFDNXNiMmNvWW1GelpTa3BPMXh1SUNBZ0lDQWdkbUZ5SUdkeWIzVndVMmw2WlNBOUlHZHliM1Z3VTJsNlpYTmJZbUZ6WlYwN1hHNGdJQ0FnSUNBdkx5QjJZWElnWjNKdmRYQkNZWE5sSUQwZ1RXRjBhQzV3YjNjb1ltRnpaU3dnWjNKdmRYQlRhWHBsS1R0Y2JpQWdJQ0FnSUhaaGNpQm5jbTkxY0VKaGMyVWdQU0JuY205MWNFSmhjMlZ6VzJKaGMyVmRPMXh1SUNBZ0lDQWdiM1YwSUQwZ0p5YzdYRzRnSUNBZ0lDQjJZWElnWXlBOUlIUm9hWE11WTJ4dmJtVW9LVHRjYmlBZ0lDQWdJR011Ym1WbllYUnBkbVVnUFNBd08xeHVJQ0FnSUNBZ2QyaHBiR1VnS0NGakxtbHpXbVZ5YnlncEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCeUlEMGdZeTV0YjJSdUtHZHliM1Z3UW1GelpTa3VkRzlUZEhKcGJtY29ZbUZ6WlNrN1hHNGdJQ0FnSUNBZ0lHTWdQU0JqTG1sa2FYWnVLR2R5YjNWd1FtRnpaU2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZqTG1seldtVnlieWdwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiM1YwSUQwZ2VtVnliM05iWjNKdmRYQlRhWHBsSUMwZ2NpNXNaVzVuZEdoZElDc2djaUFySUc5MWREdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J2ZFhRZ1BTQnlJQ3NnYjNWME8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NXBjMXBsY204b0tTa2dlMXh1SUNBZ0lDQWdJQ0J2ZFhRZ1BTQW5NQ2NnS3lCdmRYUTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjNhR2xzWlNBb2IzVjBMbXhsYm1kMGFDQWxJSEJoWkdScGJtY2dJVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdiM1YwSUQwZ0p6QW5JQ3NnYjNWME8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdWJtVm5ZWFJwZG1VZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ2IzVjBJRDBnSnkwbklDc2diM1YwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJRzkxZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JoYzNObGNuUW9abUZzYzJVc0lDZENZWE5sSUhOb2IzVnNaQ0JpWlNCaVpYUjNaV1Z1SURJZ1lXNWtJRE0ySnlrN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5SdlRuVnRZbVZ5SUQwZ1puVnVZM1JwYjI0Z2RHOU9kVzFpWlhJZ0tDa2dlMXh1SUNBZ0lIWmhjaUJ5WlhRZ1BTQjBhR2x6TG5kdmNtUnpXekJkTzF4dUlDQWdJR2xtSUNoMGFHbHpMbXhsYm1kMGFDQTlQVDBnTWlrZ2UxeHVJQ0FnSUNBZ2NtVjBJQ3M5SUhSb2FYTXVkMjl5WkhOYk1WMGdLaUF3ZURRd01EQXdNREE3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwYUdsekxteGxibWQwYUNBOVBUMGdNeUFtSmlCMGFHbHpMbmR2Y21Seld6SmRJRDA5UFNBd2VEQXhLU0I3WEc0Z0lDQWdJQ0F2THlCT1QxUkZPaUJoZENCMGFHbHpJSE4wWVdkbElHbDBJR2x6SUd0dWIzZHVJSFJvWVhRZ2RHaGxJSFJ2Y0NCaWFYUWdhWE1nYzJWMFhHNGdJQ0FnSUNCeVpYUWdLejBnTUhneE1EQXdNREF3TURBd01EQXdNQ0FySUNoMGFHbHpMbmR2Y21Seld6RmRJQ29nTUhnME1EQXdNREF3S1R0Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXViR1Z1WjNSb0lENGdNaWtnZTF4dUlDQWdJQ0FnWVhOelpYSjBLR1poYkhObExDQW5UblZ0WW1WeUlHTmhiaUJ2Ym14NUlITmhabVZzZVNCemRHOXlaU0IxY0NCMGJ5QTFNeUJpYVhSekp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUFvZEdocGN5NXVaV2RoZEdsMlpTQWhQVDBnTUNrZ1B5QXRjbVYwSURvZ2NtVjBPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNTBiMHBUVDA0Z1BTQm1kVzVqZEdsdmJpQjBiMHBUVDA0Z0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMblJ2VTNSeWFXNW5LREUyS1R0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1ZEc5Q2RXWm1aWElnUFNCbWRXNWpkR2x2YmlCMGIwSjFabVpsY2lBb1pXNWthV0Z1TENCc1pXNW5kR2dwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kSGx3Wlc5bUlFSjFabVpsY2lBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5SdlFYSnlZWGxNYVd0bEtFSjFabVpsY2l3Z1pXNWthV0Z1TENCc1pXNW5kR2dwTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzUwYjBGeWNtRjVJRDBnWm5WdVkzUnBiMjRnZEc5QmNuSmhlU0FvWlc1a2FXRnVMQ0JzWlc1bmRHZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUwYjBGeWNtRjVUR2xyWlNoQmNuSmhlU3dnWlc1a2FXRnVMQ0JzWlc1bmRHZ3BPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNTBiMEZ5Y21GNVRHbHJaU0E5SUdaMWJtTjBhVzl1SUhSdlFYSnlZWGxNYVd0bElDaEJjbkpoZVZSNWNHVXNJR1Z1WkdsaGJpd2diR1Z1WjNSb0tTQjdYRzRnSUNBZ2RtRnlJR0o1ZEdWTVpXNW5kR2dnUFNCMGFHbHpMbUo1ZEdWTVpXNW5kR2dvS1R0Y2JpQWdJQ0IyWVhJZ2NtVnhUR1Z1WjNSb0lEMGdiR1Z1WjNSb0lIeDhJRTFoZEdndWJXRjRLREVzSUdKNWRHVk1aVzVuZEdncE8xeHVJQ0FnSUdGemMyVnlkQ2hpZVhSbFRHVnVaM1JvSUR3OUlISmxjVXhsYm1kMGFDd2dKMko1ZEdVZ1lYSnlZWGtnYkc5dVoyVnlJSFJvWVc0Z1pHVnphWEpsWkNCc1pXNW5kR2duS1R0Y2JpQWdJQ0JoYzNObGNuUW9jbVZ4VEdWdVozUm9JRDRnTUN3Z0oxSmxjWFZsYzNSbFpDQmhjbkpoZVNCc1pXNW5kR2dnUEQwZ01DY3BPMXh1WEc0Z0lDQWdkR2hwY3k1emRISnBjQ2dwTzF4dUlDQWdJSFpoY2lCc2FYUjBiR1ZGYm1ScFlXNGdQU0JsYm1ScFlXNGdQVDA5SUNkc1pTYzdYRzRnSUNBZ2RtRnlJSEpsY3lBOUlHNWxkeUJCY25KaGVWUjVjR1VvY21WeFRHVnVaM1JvS1R0Y2JseHVJQ0FnSUhaaGNpQmlMQ0JwTzF4dUlDQWdJSFpoY2lCeElEMGdkR2hwY3k1amJHOXVaU2dwTzF4dUlDQWdJR2xtSUNnaGJHbDBkR3hsUlc1a2FXRnVLU0I3WEc0Z0lDQWdJQ0F2THlCQmMzTjFiV1VnWW1sbkxXVnVaR2xoYmx4dUlDQWdJQ0FnWm05eUlDaHBJRDBnTURzZ2FTQThJSEpsY1V4bGJtZDBhQ0F0SUdKNWRHVk1aVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCeVpYTmJhVjBnUFNBd08xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQm1iM0lnS0drZ1BTQXdPeUFoY1M1cGMxcGxjbThvS1RzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdJZ1BTQnhMbUZ1Wkd4dUtEQjRabVlwTzF4dUlDQWdJQ0FnSUNCeExtbDFjMmh5YmlnNEtUdGNibHh1SUNBZ0lDQWdJQ0J5WlhOYmNtVnhUR1Z1WjNSb0lDMGdhU0F0SURGZElEMGdZanRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2hwSUQwZ01Ec2dJWEV1YVhOYVpYSnZLQ2s3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0JpSUQwZ2NTNWhibVJzYmlnd2VHWm1LVHRjYmlBZ0lDQWdJQ0FnY1M1cGRYTm9jbTRvT0NrN1hHNWNiaUFnSUNBZ0lDQWdjbVZ6VzJsZElEMGdZanRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnWm05eUlDZzdJR2tnUENCeVpYRk1aVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCeVpYTmJhVjBnUFNBd08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJ5WlhNN1hHNGdJSDA3WEc1Y2JpQWdhV1lnS0UxaGRHZ3VZMng2TXpJcElIdGNiaUFnSUNCQ1RpNXdjbTkwYjNSNWNHVXVYMk52ZFc1MFFtbDBjeUE5SUdaMWJtTjBhVzl1SUY5amIzVnVkRUpwZEhNZ0tIY3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQXpNaUF0SUUxaGRHZ3VZMng2TXpJb2R5azdYRzRnSUNBZ2ZUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQkNUaTV3Y205MGIzUjVjR1V1WDJOdmRXNTBRbWwwY3lBOUlHWjFibU4wYVc5dUlGOWpiM1Z1ZEVKcGRITWdLSGNwSUh0Y2JpQWdJQ0FnSUhaaGNpQjBJRDBnZHp0Y2JpQWdJQ0FnSUhaaGNpQnlJRDBnTUR0Y2JpQWdJQ0FnSUdsbUlDaDBJRDQ5SURCNE1UQXdNQ2tnZTF4dUlDQWdJQ0FnSUNCeUlDczlJREV6TzF4dUlDQWdJQ0FnSUNCMElENCtQajBnTVRNN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9kQ0ErUFNBd2VEUXdLU0I3WEc0Z0lDQWdJQ0FnSUhJZ0t6MGdOenRjYmlBZ0lDQWdJQ0FnZENBK1BqNDlJRGM3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JwWmlBb2RDQStQU0F3ZURncElIdGNiaUFnSUNBZ0lDQWdjaUFyUFNBME8xeHVJQ0FnSUNBZ0lDQjBJRDQrUGowZ05EdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2gwSUQ0OUlEQjRNRElwSUh0Y2JpQWdJQ0FnSUNBZ2NpQXJQU0F5TzF4dUlDQWdJQ0FnSUNCMElENCtQajBnTWp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUJ5SUNzZ2REdGNiaUFnSUNCOU8xeHVJQ0I5WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTGw5NlpYSnZRbWwwY3lBOUlHWjFibU4wYVc5dUlGOTZaWEp2UW1sMGN5QW9keWtnZTF4dUlDQWdJQzh2SUZOb2IzSjBMV04xZEZ4dUlDQWdJR2xtSUNoM0lEMDlQU0F3S1NCeVpYUjFjbTRnTWpZN1hHNWNiaUFnSUNCMllYSWdkQ0E5SUhjN1hHNGdJQ0FnZG1GeUlISWdQU0F3TzF4dUlDQWdJR2xtSUNnb2RDQW1JREI0TVdabVppa2dQVDA5SURBcElIdGNiaUFnSUNBZ0lISWdLejBnTVRNN1hHNGdJQ0FnSUNCMElENCtQajBnTVRNN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNnb2RDQW1JREI0TjJZcElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCeUlDczlJRGM3WEc0Z0lDQWdJQ0IwSUQ0K1BqMGdOenRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLQ2gwSUNZZ01IaG1LU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdjaUFyUFNBME8xeHVJQ0FnSUNBZ2RDQStQajQ5SURRN1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNnb2RDQW1JREI0TXlrZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUhJZ0t6MGdNanRjYmlBZ0lDQWdJSFFnUGo0K1BTQXlPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9LSFFnSmlBd2VERXBJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQnlLeXM3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeU8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZKbGRIVnliaUJ1ZFcxaVpYSWdiMllnZFhObFpDQmlhWFJ6SUdsdUlHRWdRazVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbUpwZEV4bGJtZDBhQ0E5SUdaMWJtTjBhVzl1SUdKcGRFeGxibWQwYUNBb0tTQjdYRzRnSUNBZ2RtRnlJSGNnUFNCMGFHbHpMbmR2Y21SelczUm9hWE11YkdWdVozUm9JQzBnTVYwN1hHNGdJQ0FnZG1GeUlHaHBJRDBnZEdocGN5NWZZMjkxYm5SQ2FYUnpLSGNwTzF4dUlDQWdJSEpsZEhWeWJpQW9kR2hwY3k1c1pXNW5kR2dnTFNBeEtTQXFJREkySUNzZ2FHazdYRzRnSUgwN1hHNWNiaUFnWm5WdVkzUnBiMjRnZEc5Q2FYUkJjbkpoZVNBb2JuVnRLU0I3WEc0Z0lDQWdkbUZ5SUhjZ1BTQnVaWGNnUVhKeVlYa29iblZ0TG1KcGRFeGxibWQwYUNncEtUdGNibHh1SUNBZ0lHWnZjaUFvZG1GeUlHSnBkQ0E5SURBN0lHSnBkQ0E4SUhjdWJHVnVaM1JvT3lCaWFYUXJLeWtnZTF4dUlDQWdJQ0FnZG1GeUlHOW1aaUE5SUNoaWFYUWdMeUF5TmlrZ2ZDQXdPMXh1SUNBZ0lDQWdkbUZ5SUhkaWFYUWdQU0JpYVhRZ0pTQXlOanRjYmx4dUlDQWdJQ0FnZDF0aWFYUmRJRDBnS0c1MWJTNTNiM0prYzF0dlptWmRJQ1lnS0RFZ1BEd2dkMkpwZENrcElENCtQaUIzWW1sME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIzTzF4dUlDQjlYRzVjYmlBZ0x5OGdUblZ0WW1WeUlHOW1JSFJ5WVdsc2FXNW5JSHBsY204Z1ltbDBjMXh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVlbVZ5YjBKcGRITWdQU0JtZFc1amRHbHZiaUI2WlhKdlFtbDBjeUFvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YVhOYVpYSnZLQ2twSUhKbGRIVnliaUF3TzF4dVhHNGdJQ0FnZG1GeUlISWdQU0F3TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZEdocGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZG1GeUlHSWdQU0IwYUdsekxsOTZaWEp2UW1sMGN5aDBhR2x6TG5kdmNtUnpXMmxkS1R0Y2JpQWdJQ0FnSUhJZ0t6MGdZanRjYmlBZ0lDQWdJR2xtSUNoaUlDRTlQU0F5TmlrZ1luSmxZV3M3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeU8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1aWVYUmxUR1Z1WjNSb0lEMGdablZ1WTNScGIyNGdZbmwwWlV4bGJtZDBhQ0FvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRTFoZEdndVkyVnBiQ2gwYUdsekxtSnBkRXhsYm1kMGFDZ3BJQzhnT0NrN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5SdlZIZHZjeUE5SUdaMWJtTjBhVzl1SUhSdlZIZHZjeUFvZDJsa2RHZ3BJSHRjYmlBZ0lDQnBaaUFvZEdocGN5NXVaV2RoZEdsMlpTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZV0p6S0NrdWFXNXZkRzRvZDJsa2RHZ3BMbWxoWkdSdUtERXBPMXh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiRzl1WlNncE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1bWNtOXRWSGR2Y3lBOUlHWjFibU4wYVc5dUlHWnliMjFVZDI5eklDaDNhV1IwYUNrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG5SbGMzUnVLSGRwWkhSb0lDMGdNU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtNXZkRzRvZDJsa2RHZ3BMbWxoWkdSdUtERXBMbWx1Wldjb0tUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyeHZibVVvS1R0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1YVhOT1pXY2dQU0JtZFc1amRHbHZiaUJwYzA1bFp5QW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Ym1WbllYUnBkbVVnSVQwOUlEQTdYRzRnSUgwN1hHNWNiaUFnTHk4Z1VtVjBkWEp1SUc1bFoyRjBhWFpsSUdOc2IyNWxJRzltSUdCMGFHbHpZRnh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVibVZuSUQwZ1puVnVZM1JwYjI0Z2JtVm5JQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHOXVaU2dwTG1sdVpXY29LVHRjYmlBZ2ZUdGNibHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVhVzVsWnlBOUlHWjFibU4wYVc5dUlHbHVaV2NnS0NrZ2UxeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1cGMxcGxjbThvS1NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV1WldkaGRHbDJaU0JlUFNBeE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0I5TzF4dVhHNGdJQzh2SUU5eUlHQnVkVzFnSUhkcGRHZ2dZSFJvYVhOZ0lHbHVMWEJzWVdObFhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cGRXOXlJRDBnWm5WdVkzUnBiMjRnYVhWdmNpQW9iblZ0S1NCN1hHNGdJQ0FnZDJocGJHVWdLSFJvYVhNdWJHVnVaM1JvSUR3Z2JuVnRMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1M2IzSmtjMXQwYUdsekxteGxibWQwYUNzclhTQTlJREE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J1ZFcwdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYVYwZ1BTQjBhR2x6TG5kdmNtUnpXMmxkSUh3Z2JuVnRMbmR2Y21SelcybGRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wY21sd0tDazdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExtbHZjaUE5SUdaMWJtTjBhVzl1SUdsdmNpQW9iblZ0S1NCN1hHNGdJQ0FnWVhOelpYSjBLQ2gwYUdsekxtNWxaMkYwYVhabElId2diblZ0TG01bFoyRjBhWFpsS1NBOVBUMGdNQ2s3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YVhWdmNpaHVkVzBwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRTl5SUdCdWRXMWdJSGRwZEdnZ1lIUm9hWE5nWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzV2Y2lBOUlHWjFibU4wYVc5dUlHOXlJQ2h1ZFcwcElIdGNiaUFnSUNCcFppQW9kR2hwY3k1c1pXNW5kR2dnUGlCdWRXMHViR1Z1WjNSb0tTQnlaWFIxY200Z2RHaHBjeTVqYkc5dVpTZ3BMbWx2Y2lodWRXMHBPMXh1SUNBZ0lISmxkSFZ5YmlCdWRXMHVZMnh2Ym1Vb0tTNXBiM0lvZEdocGN5azdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExuVnZjaUE5SUdaMWJtTjBhVzl1SUhWdmNpQW9iblZ0S1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDRnYm5WdExteGxibWQwYUNrZ2NtVjBkWEp1SUhSb2FYTXVZMnh2Ym1Vb0tTNXBkVzl5S0c1MWJTazdYRzRnSUNBZ2NtVjBkWEp1SUc1MWJTNWpiRzl1WlNncExtbDFiM0lvZEdocGN5azdYRzRnSUgwN1hHNWNiaUFnTHk4Z1FXNWtJR0J1ZFcxZ0lIZHBkR2dnWUhSb2FYTmdJR2x1TFhCc1lXTmxYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXBkV0Z1WkNBOUlHWjFibU4wYVc5dUlHbDFZVzVrSUNodWRXMHBJSHRjYmlBZ0lDQXZMeUJpSUQwZ2JXbHVMV3hsYm1kMGFDaHVkVzBzSUhSb2FYTXBYRzRnSUNBZ2RtRnlJR0k3WEc0Z0lDQWdhV1lnS0hSb2FYTXViR1Z1WjNSb0lENGdiblZ0TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnWWlBOUlHNTFiVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1lpQTlJSFJvYVhNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCaUxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6VzJsZElEMGdkR2hwY3k1M2IzSmtjMXRwWFNBbUlHNTFiUzUzYjNKa2MxdHBYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBhR2x6TG14bGJtZDBhQ0E5SUdJdWJHVnVaM1JvTzF4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUnlhWEFvS1R0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1YVdGdVpDQTlJR1oxYm1OMGFXOXVJR2xoYm1RZ0tHNTFiU2tnZTF4dUlDQWdJR0Z6YzJWeWRDZ29kR2hwY3k1dVpXZGhkR2wyWlNCOElHNTFiUzV1WldkaGRHbDJaU2tnUFQwOUlEQXBPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWwxWVc1a0tHNTFiU2s3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRVzVrSUdCdWRXMWdJSGRwZEdnZ1lIUm9hWE5nWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVoYm1RZ1BTQm1kVzVqZEdsdmJpQmhibVFnS0c1MWJTa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBK0lHNTFiUzVzWlc1bmRHZ3BJSEpsZEhWeWJpQjBhR2x6TG1Oc2IyNWxLQ2t1YVdGdVpDaHVkVzBwTzF4dUlDQWdJSEpsZEhWeWJpQnVkVzB1WTJ4dmJtVW9LUzVwWVc1a0tIUm9hWE1wTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzUxWVc1a0lEMGdablZ1WTNScGIyNGdkV0Z1WkNBb2JuVnRLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXViR1Z1WjNSb0lENGdiblZ0TG14bGJtZDBhQ2tnY21WMGRYSnVJSFJvYVhNdVkyeHZibVVvS1M1cGRXRnVaQ2h1ZFcwcE8xeHVJQ0FnSUhKbGRIVnliaUJ1ZFcwdVkyeHZibVVvS1M1cGRXRnVaQ2gwYUdsektUdGNiaUFnZlR0Y2JseHVJQ0F2THlCWWIzSWdZRzUxYldBZ2QybDBhQ0JnZEdocGMyQWdhVzR0Y0d4aFkyVmNiaUFnUWs0dWNISnZkRzkwZVhCbExtbDFlRzl5SUQwZ1puVnVZM1JwYjI0Z2FYVjRiM0lnS0c1MWJTa2dlMXh1SUNBZ0lDOHZJR0V1YkdWdVozUm9JRDRnWWk1c1pXNW5kR2hjYmlBZ0lDQjJZWElnWVR0Y2JpQWdJQ0IyWVhJZ1lqdGNiaUFnSUNCcFppQW9kR2hwY3k1c1pXNW5kR2dnUGlCdWRXMHViR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQmhJRDBnZEdocGN6dGNiaUFnSUNBZ0lHSWdQU0J1ZFcwN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR0VnUFNCdWRXMDdYRzRnSUNBZ0lDQmlJRDBnZEdocGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHSXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0JoTG5kdmNtUnpXMmxkSUY0Z1lpNTNiM0prYzF0cFhUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9kR2hwY3lBaFBUMGdZU2tnZTF4dUlDQWdJQ0FnWm05eUlDZzdJR2tnUENCaExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0JoTG5kdmNtUnpXMmxkTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWJHVnVaM1JvSUQwZ1lTNXNaVzVuZEdnN1hHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXpkSEpwY0NncE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cGVHOXlJRDBnWm5WdVkzUnBiMjRnYVhodmNpQW9iblZ0S1NCN1hHNGdJQ0FnWVhOelpYSjBLQ2gwYUdsekxtNWxaMkYwYVhabElId2diblZ0TG01bFoyRjBhWFpsS1NBOVBUMGdNQ2s3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YVhWNGIzSW9iblZ0S1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJZYjNJZ1lHNTFiV0FnZDJsMGFDQmdkR2hwYzJCY2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5odmNpQTlJR1oxYm1OMGFXOXVJSGh2Y2lBb2JuVnRLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXViR1Z1WjNSb0lENGdiblZ0TG14bGJtZDBhQ2tnY21WMGRYSnVJSFJvYVhNdVkyeHZibVVvS1M1cGVHOXlLRzUxYlNrN1hHNGdJQ0FnY21WMGRYSnVJRzUxYlM1amJHOXVaU2dwTG1sNGIzSW9kR2hwY3lrN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5WNGIzSWdQU0JtZFc1amRHbHZiaUIxZUc5eUlDaHVkVzBwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQaUJ1ZFcwdWJHVnVaM1JvS1NCeVpYUjFjbTRnZEdocGN5NWpiRzl1WlNncExtbDFlRzl5S0c1MWJTazdYRzRnSUNBZ2NtVjBkWEp1SUc1MWJTNWpiRzl1WlNncExtbDFlRzl5S0hSb2FYTXBPMXh1SUNCOU8xeHVYRzRnSUM4dklFNXZkQ0JnWUhSb2FYTmdZQ0IzYVhSb0lHQmdkMmxrZEdoZ1lDQmlhWFIzYVdSMGFGeHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWFXNXZkRzRnUFNCbWRXNWpkR2x2YmlCcGJtOTBiaUFvZDJsa2RHZ3BJSHRjYmlBZ0lDQmhjM05sY25Rb2RIbHdaVzltSUhkcFpIUm9JRDA5UFNBbmJuVnRZbVZ5SnlBbUppQjNhV1IwYUNBK1BTQXdLVHRjYmx4dUlDQWdJSFpoY2lCaWVYUmxjMDVsWldSbFpDQTlJRTFoZEdndVkyVnBiQ2gzYVdSMGFDQXZJREkyS1NCOElEQTdYRzRnSUNBZ2RtRnlJR0pwZEhOTVpXWjBJRDBnZDJsa2RHZ2dKU0F5Tmp0Y2JseHVJQ0FnSUM4dklFVjRkR1Z1WkNCMGFHVWdZblZtWm1WeUlIZHBkR2dnYkdWaFpHbHVaeUI2WlhKdlpYTmNiaUFnSUNCMGFHbHpMbDlsZUhCaGJtUW9ZbmwwWlhOT1pXVmtaV1FwTzF4dVhHNGdJQ0FnYVdZZ0tHSnBkSE5NWldaMElENGdNQ2tnZTF4dUlDQWdJQ0FnWW5sMFpYTk9aV1ZrWldRdExUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QklZVzVrYkdVZ1kyOXRjR3hsZEdVZ2QyOXlaSE5jYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR0o1ZEdWelRtVmxaR1ZrT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYVYwZ1BTQitkR2hwY3k1M2IzSmtjMXRwWFNBbUlEQjRNMlptWm1abVpqdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QklZVzVrYkdVZ2RHaGxJSEpsYzJsa2RXVmNiaUFnSUNCcFppQW9ZbWwwYzB4bFpuUWdQaUF3S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21SelcybGRJRDBnZm5Sb2FYTXVkMjl5WkhOYmFWMGdKaUFvTUhnelptWm1abVptSUQ0K0lDZ3lOaUF0SUdKcGRITk1aV1owS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1FXNWtJSEpsYlc5MlpTQnNaV0ZrYVc1bklIcGxjbTlsYzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5OMGNtbHdLQ2s3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbTV2ZEc0Z1BTQm1kVzVqZEdsdmJpQnViM1J1SUNoM2FXUjBhQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1Oc2IyNWxLQ2t1YVc1dmRHNG9kMmxrZEdncE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZObGRDQmdZbWwwWUNCdlppQmdkR2hwYzJCY2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5ObGRHNGdQU0JtZFc1amRHbHZiaUJ6WlhSdUlDaGlhWFFzSUhaaGJDa2dlMXh1SUNBZ0lHRnpjMlZ5ZENoMGVYQmxiMllnWW1sMElEMDlQU0FuYm5WdFltVnlKeUFtSmlCaWFYUWdQajBnTUNrN1hHNWNiaUFnSUNCMllYSWdiMlptSUQwZ0tHSnBkQ0F2SURJMktTQjhJREE3WEc0Z0lDQWdkbUZ5SUhkaWFYUWdQU0JpYVhRZ0pTQXlOanRjYmx4dUlDQWdJSFJvYVhNdVgyVjRjR0Z1WkNodlptWWdLeUF4S1R0Y2JseHVJQ0FnSUdsbUlDaDJZV3dwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmIyWm1YU0E5SUhSb2FYTXVkMjl5WkhOYmIyWm1YU0I4SUNneElEdzhJSGRpYVhRcE8xeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6VzI5bVpsMGdQU0IwYUdsekxuZHZjbVJ6VzI5bVpsMGdKaUIrS0RFZ1BEd2dkMkpwZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUnlhWEFvS1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJCWkdRZ1lHNTFiV0FnZEc4Z1lIUm9hWE5nSUdsdUxYQnNZV05sWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVwWVdSa0lEMGdablZ1WTNScGIyNGdhV0ZrWkNBb2JuVnRLU0I3WEc0Z0lDQWdkbUZ5SUhJN1hHNWNiaUFnSUNBdkx5QnVaV2RoZEdsMlpTQXJJSEJ2YzJsMGFYWmxYRzRnSUNBZ2FXWWdLSFJvYVhNdWJtVm5ZWFJwZG1VZ0lUMDlJREFnSmlZZ2JuVnRMbTVsWjJGMGFYWmxJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG01bFoyRjBhWFpsSUQwZ01EdGNiaUFnSUNBZ0lISWdQU0IwYUdsekxtbHpkV0lvYm5WdEtUdGNiaUFnSUNBZ0lIUm9hWE11Ym1WbllYUnBkbVVnWGowZ01UdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl1YjNKdFUybG5iaWdwTzF4dVhHNGdJQ0FnTHk4Z2NHOXphWFJwZG1VZ0t5QnVaV2RoZEdsMlpWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTV1WldkaGRHbDJaU0E5UFQwZ01DQW1KaUJ1ZFcwdWJtVm5ZWFJwZG1VZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUc1MWJTNXVaV2RoZEdsMlpTQTlJREE3WEc0Z0lDQWdJQ0J5SUQwZ2RHaHBjeTVwYzNWaUtHNTFiU2s3WEc0Z0lDQWdJQ0J1ZFcwdWJtVm5ZWFJwZG1VZ1BTQXhPMXh1SUNBZ0lDQWdjbVYwZFhKdUlISXVYMjV2Y20xVGFXZHVLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnWVM1c1pXNW5kR2dnUGlCaUxteGxibWQwYUZ4dUlDQWdJSFpoY2lCaExDQmlPMXh1SUNBZ0lHbG1JQ2gwYUdsekxteGxibWQwYUNBK0lHNTFiUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJR0VnUFNCMGFHbHpPMXh1SUNBZ0lDQWdZaUE5SUc1MWJUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWVNBOUlHNTFiVHRjYmlBZ0lDQWdJR0lnUFNCMGFHbHpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJqWVhKeWVTQTlJREE3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JpTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnlJRDBnS0dFdWQyOXlaSE5iYVYwZ2ZDQXdLU0FySUNoaUxuZHZjbVJ6VzJsZElId2dNQ2tnS3lCallYSnllVHRjYmlBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYVYwZ1BTQnlJQ1lnTUhnelptWm1abVptTzF4dUlDQWdJQ0FnWTJGeWNua2dQU0J5SUQ0K1BpQXlOanRjYmlBZ0lDQjlYRzRnSUNBZ1ptOXlJQ2c3SUdOaGNuSjVJQ0U5UFNBd0lDWW1JR2tnUENCaExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0J5SUQwZ0tHRXVkMjl5WkhOYmFWMGdmQ0F3S1NBcklHTmhjbko1TzF4dUlDQWdJQ0FnZEdocGN5NTNiM0prYzF0cFhTQTlJSElnSmlBd2VETm1abVptWm1ZN1hHNGdJQ0FnSUNCallYSnllU0E5SUhJZ1BqNCtJREkyTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdWJHVnVaM1JvSUQwZ1lTNXNaVzVuZEdnN1hHNGdJQ0FnYVdZZ0tHTmhjbko1SUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6VzNSb2FYTXViR1Z1WjNSb1hTQTlJR05oY25KNU8xeHVJQ0FnSUNBZ2RHaHBjeTVzWlc1bmRHZ3JLenRjYmlBZ0lDQXZMeUJEYjNCNUlIUm9aU0J5WlhOMElHOW1JSFJvWlNCM2IzSmtjMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9ZU0FoUFQwZ2RHaHBjeWtnZTF4dUlDQWdJQ0FnWm05eUlDZzdJR2tnUENCaExteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0JoTG5kdmNtUnpXMmxkTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRUZrWkNCZ2JuVnRZQ0IwYnlCZ2RHaHBjMkJjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbUZrWkNBOUlHWjFibU4wYVc5dUlHRmtaQ0FvYm5WdEtTQjdYRzRnSUNBZ2RtRnlJSEpsY3p0Y2JpQWdJQ0JwWmlBb2JuVnRMbTVsWjJGMGFYWmxJQ0U5UFNBd0lDWW1JSFJvYVhNdWJtVm5ZWFJwZG1VZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUc1MWJTNXVaV2RoZEdsMlpTQTlJREE3WEc0Z0lDQWdJQ0J5WlhNZ1BTQjBhR2x6TG5OMVlpaHVkVzBwTzF4dUlDQWdJQ0FnYm5WdExtNWxaMkYwYVhabElGNDlJREU3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbVZ6TzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYm5WdExtNWxaMkYwYVhabElEMDlQU0F3SUNZbUlIUm9hWE11Ym1WbllYUnBkbVVnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWJtVm5ZWFJwZG1VZ1BTQXdPMXh1SUNBZ0lDQWdjbVZ6SUQwZ2JuVnRMbk4xWWloMGFHbHpLVHRjYmlBZ0lDQWdJSFJvYVhNdWJtVm5ZWFJwZG1VZ1BTQXhPMXh1SUNBZ0lDQWdjbVYwZFhKdUlISmxjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BpQnVkVzB1YkdWdVozUm9LU0J5WlhSMWNtNGdkR2hwY3k1amJHOXVaU2dwTG1saFpHUW9iblZ0S1R0Y2JseHVJQ0FnSUhKbGRIVnliaUJ1ZFcwdVkyeHZibVVvS1M1cFlXUmtLSFJvYVhNcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZOMVluUnlZV04wSUdCdWRXMWdJR1p5YjIwZ1lIUm9hWE5nSUdsdUxYQnNZV05sWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVwYzNWaUlEMGdablZ1WTNScGIyNGdhWE4xWWlBb2JuVnRLU0I3WEc0Z0lDQWdMeThnZEdocGN5QXRJQ2d0Ym5WdEtTQTlJSFJvYVhNZ0t5QnVkVzFjYmlBZ0lDQnBaaUFvYm5WdExtNWxaMkYwYVhabElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCdWRXMHVibVZuWVhScGRtVWdQU0F3TzF4dUlDQWdJQ0FnZG1GeUlISWdQU0IwYUdsekxtbGhaR1FvYm5WdEtUdGNiaUFnSUNBZ0lHNTFiUzV1WldkaGRHbDJaU0E5SURFN1hHNGdJQ0FnSUNCeVpYUjFjbTRnY2k1ZmJtOXliVk5wWjI0b0tUdGNibHh1SUNBZ0lDOHZJQzEwYUdseklDMGdiblZ0SUQwZ0xTaDBhR2x6SUNzZ2JuVnRLVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kR2hwY3k1dVpXZGhkR2wyWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnZEdocGN5NXVaV2RoZEdsMlpTQTlJREE3WEc0Z0lDQWdJQ0IwYUdsekxtbGhaR1FvYm5WdEtUdGNiaUFnSUNBZ0lIUm9hWE11Ym1WbllYUnBkbVVnUFNBeE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjV2Y20xVGFXZHVLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUVhRZ2RHaHBjeUJ3YjJsdWRDQmliM1JvSUc1MWJXSmxjbk1nWVhKbElIQnZjMmwwYVhabFhHNGdJQ0FnZG1GeUlHTnRjQ0E5SUhSb2FYTXVZMjF3S0c1MWJTazdYRzVjYmlBZ0lDQXZMeUJQY0hScGJXbDZZWFJwYjI0Z0xTQjZaWEp2YVdaNVhHNGdJQ0FnYVdZZ0tHTnRjQ0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdkR2hwY3k1dVpXZGhkR2wyWlNBOUlEQTdYRzRnSUNBZ0lDQjBhR2x6TG14bGJtZDBhQ0E5SURFN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21Seld6QmRJRDBnTUR0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHRWdQaUJpWEc0Z0lDQWdkbUZ5SUdFc0lHSTdYRzRnSUNBZ2FXWWdLR050Y0NBK0lEQXBJSHRjYmlBZ0lDQWdJR0VnUFNCMGFHbHpPMXh1SUNBZ0lDQWdZaUE5SUc1MWJUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnWVNBOUlHNTFiVHRjYmlBZ0lDQWdJR0lnUFNCMGFHbHpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJqWVhKeWVTQTlJREE3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JpTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnlJRDBnS0dFdWQyOXlaSE5iYVYwZ2ZDQXdLU0F0SUNoaUxuZHZjbVJ6VzJsZElId2dNQ2tnS3lCallYSnllVHRjYmlBZ0lDQWdJR05oY25KNUlEMGdjaUErUGlBeU5qdGNiaUFnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnUFNCeUlDWWdNSGd6Wm1abVptWm1PMXh1SUNBZ0lIMWNiaUFnSUNCbWIzSWdLRHNnWTJGeWNua2dJVDA5SURBZ0ppWWdhU0E4SUdFdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSElnUFNBb1lTNTNiM0prYzF0cFhTQjhJREFwSUNzZ1kyRnljbms3WEc0Z0lDQWdJQ0JqWVhKeWVTQTlJSElnUGo0Z01qWTdYRzRnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXMmxkSUQwZ2NpQW1JREI0TTJabVptWm1aanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJEYjNCNUlISmxjM1FnYjJZZ2RHaGxJSGR2Y21SelhHNGdJQ0FnYVdZZ0tHTmhjbko1SUQwOVBTQXdJQ1ltSUdrZ1BDQmhMbXhsYm1kMGFDQW1KaUJoSUNFOVBTQjBhR2x6S1NCN1hHNGdJQ0FnSUNCbWIzSWdLRHNnYVNBOElHRXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzYjNKa2MxdHBYU0E5SUdFdWQyOXlaSE5iYVYwN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NXNaVzVuZEdnZ1BTQk5ZWFJvTG0xaGVDaDBhR2x6TG14bGJtZDBhQ3dnYVNrN1hHNWNiaUFnSUNCcFppQW9ZU0FoUFQwZ2RHaHBjeWtnZTF4dUlDQWdJQ0FnZEdocGN5NXVaV2RoZEdsMlpTQTlJREU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSeWFYQW9LVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlRkV0owY21GamRDQmdiblZ0WUNCbWNtOXRJR0IwYUdsellGeHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWMzVmlJRDBnWm5WdVkzUnBiMjRnYzNWaUlDaHVkVzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHOXVaU2dwTG1semRXSW9iblZ0S1R0Y2JpQWdmVHRjYmx4dUlDQm1kVzVqZEdsdmJpQnpiV0ZzYkUxMWJGUnZJQ2h6Wld4bUxDQnVkVzBzSUc5MWRDa2dlMXh1SUNBZ0lHOTFkQzV1WldkaGRHbDJaU0E5SUc1MWJTNXVaV2RoZEdsMlpTQmVJSE5sYkdZdWJtVm5ZWFJwZG1VN1hHNGdJQ0FnZG1GeUlHeGxiaUE5SUNoelpXeG1MbXhsYm1kMGFDQXJJRzUxYlM1c1pXNW5kR2dwSUh3Z01EdGNiaUFnSUNCdmRYUXViR1Z1WjNSb0lEMGdiR1Z1TzF4dUlDQWdJR3hsYmlBOUlDaHNaVzRnTFNBeEtTQjhJREE3WEc1Y2JpQWdJQ0F2THlCUVpXVnNJRzl1WlNCcGRHVnlZWFJwYjI0Z0tHTnZiWEJwYkdWeUlHTmhiaWQwSUdSdklHbDBMQ0JpWldOaGRYTmxJRzltSUdOdlpHVWdZMjl0Y0d4bGVHbDBlU2xjYmlBZ0lDQjJZWElnWVNBOUlITmxiR1l1ZDI5eVpITmJNRjBnZkNBd08xeHVJQ0FnSUhaaGNpQmlJRDBnYm5WdExuZHZjbVJ6V3pCZElId2dNRHRjYmlBZ0lDQjJZWElnY2lBOUlHRWdLaUJpTzF4dVhHNGdJQ0FnZG1GeUlHeHZJRDBnY2lBbUlEQjRNMlptWm1abVpqdGNiaUFnSUNCMllYSWdZMkZ5Y25rZ1BTQW9jaUF2SURCNE5EQXdNREF3TUNrZ2ZDQXdPMXh1SUNBZ0lHOTFkQzUzYjNKa2Mxc3dYU0E5SUd4dk8xeHVYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2F5QTlJREU3SUdzZ1BDQnNaVzQ3SUdzckt5a2dlMXh1SUNBZ0lDQWdMeThnVTNWdElHRnNiQ0IzYjNKa2N5QjNhWFJvSUhSb1pTQnpZVzFsSUdCcElDc2dhaUE5SUd0Z0lHRnVaQ0JoWTJOMWJYVnNZWFJsSUdCdVkyRnljbmxnTEZ4dUlDQWdJQ0FnTHk4Z2JtOTBaU0IwYUdGMElHNWpZWEp5ZVNCamIzVnNaQ0JpWlNBK1BTQXdlRE5tWm1abVptWmNiaUFnSUNBZ0lIWmhjaUJ1WTJGeWNua2dQU0JqWVhKeWVTQStQajRnTWpZN1hHNGdJQ0FnSUNCMllYSWdjbmR2Y21RZ1BTQmpZWEp5ZVNBbUlEQjRNMlptWm1abVpqdGNiaUFnSUNBZ0lIWmhjaUJ0WVhoS0lEMGdUV0YwYUM1dGFXNG9heXdnYm5WdExteGxibWQwYUNBdElERXBPMXh1SUNBZ0lDQWdabTl5SUNoMllYSWdhaUE5SUUxaGRHZ3ViV0Y0S0RBc0lHc2dMU0J6Wld4bUxteGxibWQwYUNBcklERXBPeUJxSUR3OUlHMWhlRW83SUdvckt5a2dlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2FTQTlJQ2hySUMwZ2Fpa2dmQ0F3TzF4dUlDQWdJQ0FnSUNCaElEMGdjMlZzWmk1M2IzSmtjMXRwWFNCOElEQTdYRzRnSUNBZ0lDQWdJR0lnUFNCdWRXMHVkMjl5WkhOYmFsMGdmQ0F3TzF4dUlDQWdJQ0FnSUNCeUlEMGdZU0FxSUdJZ0t5QnlkMjl5WkR0Y2JpQWdJQ0FnSUNBZ2JtTmhjbko1SUNzOUlDaHlJQzhnTUhnME1EQXdNREF3S1NCOElEQTdYRzRnSUNBZ0lDQWdJSEozYjNKa0lEMGdjaUFtSURCNE0yWm1abVptWmp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUc5MWRDNTNiM0prYzF0clhTQTlJSEozYjNKa0lId2dNRHRjYmlBZ0lDQWdJR05oY25KNUlEMGdibU5oY25KNUlId2dNRHRjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLR05oY25KNUlDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCdmRYUXVkMjl5WkhOYmExMGdQU0JqWVhKeWVTQjhJREE3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHOTFkQzVzWlc1bmRHZ3RMVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2IzVjBMbk4wY21sd0tDazdYRzRnSUgxY2JseHVJQ0F2THlCVVQwUlBLR2x1WkhWMGJua3BPaUJwZENCdFlYa2dZbVVnY21WaGMyOXVZV0pzWlNCMGJ5QnZiV2wwSUdsMElHWnZjaUIxYzJWeWN5QjNhRzhnWkc5dUozUWdibVZsWkZ4dUlDQXZMeUIwYnlCM2IzSnJJSGRwZEdnZ01qVTJMV0pwZENCdWRXMWlaWEp6TENCdmRHaGxjbmRwYzJVZ2FYUWdaMmwyWlhNZ01qQWxJR2x0Y0hKdmRtVnRaVzUwSUdadmNpQXlOVFl0WW1sMFhHNGdJQzh2SUcxMWJIUnBjR3hwWTJGMGFXOXVJQ2hzYVd0bElHVnNiR2x3ZEdsaklITmxZM0F5TlRack1Ta3VYRzRnSUhaaGNpQmpiMjFpTVRCTmRXeFVieUE5SUdaMWJtTjBhVzl1SUdOdmJXSXhNRTExYkZSdklDaHpaV3htTENCdWRXMHNJRzkxZENrZ2UxeHVJQ0FnSUhaaGNpQmhJRDBnYzJWc1ppNTNiM0prY3p0Y2JpQWdJQ0IyWVhJZ1lpQTlJRzUxYlM1M2IzSmtjenRjYmlBZ0lDQjJZWElnYnlBOUlHOTFkQzUzYjNKa2N6dGNiaUFnSUNCMllYSWdZeUE5SURBN1hHNGdJQ0FnZG1GeUlHeHZPMXh1SUNBZ0lIWmhjaUJ0YVdRN1hHNGdJQ0FnZG1GeUlHaHBPMXh1SUNBZ0lIWmhjaUJoTUNBOUlHRmJNRjBnZkNBd08xeHVJQ0FnSUhaaGNpQmhiREFnUFNCaE1DQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZV2d3SUQwZ1lUQWdQajQrSURFek8xeHVJQ0FnSUhaaGNpQmhNU0E5SUdGYk1WMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaGJERWdQU0JoTVNBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1lXZ3hJRDBnWVRFZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaE1pQTlJR0ZiTWwwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJoYkRJZ1BTQmhNaUFtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWVdneUlEMGdZVElnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJoTXlBOUlHRmJNMTBnZkNBd08xeHVJQ0FnSUhaaGNpQmhiRE1nUFNCaE15QW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZV2d6SUQwZ1lUTWdQajQrSURFek8xeHVJQ0FnSUhaaGNpQmhOQ0E5SUdGYk5GMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaGJEUWdQU0JoTkNBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1lXZzBJRDBnWVRRZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaE5TQTlJR0ZiTlYwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJoYkRVZ1BTQmhOU0FtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWVdnMUlEMGdZVFVnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJoTmlBOUlHRmJObDBnZkNBd08xeHVJQ0FnSUhaaGNpQmhiRFlnUFNCaE5pQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZV2cySUQwZ1lUWWdQajQrSURFek8xeHVJQ0FnSUhaaGNpQmhOeUE5SUdGYk4xMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaGJEY2dQU0JoTnlBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1lXZzNJRDBnWVRjZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaE9DQTlJR0ZiT0YwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJoYkRnZ1BTQmhPQ0FtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWVdnNElEMGdZVGdnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJoT1NBOUlHRmJPVjBnZkNBd08xeHVJQ0FnSUhaaGNpQmhiRGtnUFNCaE9TQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZV2c1SUQwZ1lUa2dQajQrSURFek8xeHVJQ0FnSUhaaGNpQmlNQ0E5SUdKYk1GMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaWJEQWdQU0JpTUNBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1ltZ3dJRDBnWWpBZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaU1TQTlJR0piTVYwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJpYkRFZ1BTQmlNU0FtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWW1neElEMGdZakVnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJpTWlBOUlHSmJNbDBnZkNBd08xeHVJQ0FnSUhaaGNpQmliRElnUFNCaU1pQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZbWd5SUQwZ1lqSWdQajQrSURFek8xeHVJQ0FnSUhaaGNpQmlNeUE5SUdKYk0xMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaWJETWdQU0JpTXlBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1ltZ3pJRDBnWWpNZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaU5DQTlJR0piTkYwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJpYkRRZ1BTQmlOQ0FtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWW1nMElEMGdZalFnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJpTlNBOUlHSmJOVjBnZkNBd08xeHVJQ0FnSUhaaGNpQmliRFVnUFNCaU5TQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZbWcxSUQwZ1lqVWdQajQrSURFek8xeHVJQ0FnSUhaaGNpQmlOaUE5SUdKYk5sMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaWJEWWdQU0JpTmlBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1ltZzJJRDBnWWpZZ1BqNCtJREV6TzF4dUlDQWdJSFpoY2lCaU55QTlJR0piTjEwZ2ZDQXdPMXh1SUNBZ0lIWmhjaUJpYkRjZ1BTQmlOeUFtSURCNE1XWm1aanRjYmlBZ0lDQjJZWElnWW1nM0lEMGdZamNnUGo0K0lERXpPMXh1SUNBZ0lIWmhjaUJpT0NBOUlHSmJPRjBnZkNBd08xeHVJQ0FnSUhaaGNpQmliRGdnUFNCaU9DQW1JREI0TVdabVpqdGNiaUFnSUNCMllYSWdZbWc0SUQwZ1lqZ2dQajQrSURFek8xeHVJQ0FnSUhaaGNpQmlPU0E5SUdKYk9WMGdmQ0F3TzF4dUlDQWdJSFpoY2lCaWJEa2dQU0JpT1NBbUlEQjRNV1ptWmp0Y2JpQWdJQ0IyWVhJZ1ltZzVJRDBnWWprZ1BqNCtJREV6TzF4dVhHNGdJQ0FnYjNWMExtNWxaMkYwYVhabElEMGdjMlZzWmk1dVpXZGhkR2wyWlNCZUlHNTFiUzV1WldkaGRHbDJaVHRjYmlBZ0lDQnZkWFF1YkdWdVozUm9JRDBnTVRrN1hHNGdJQ0FnTHlvZ2F5QTlJREFnS2k5Y2JpQWdJQ0JzYnlBOUlFMWhkR2d1YVcxMWJDaGhiREFzSUdKc01DazdYRzRnSUNBZ2JXbGtJRDBnVFdGMGFDNXBiWFZzS0dGc01Dd2dZbWd3S1R0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9NQ3dnWW13d0tTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ1RXRjBhQzVwYlhWc0tHRm9NQ3dnWW1nd0tUdGNiaUFnSUNCMllYSWdkekFnUFNBb0tDaGpJQ3NnYkc4cElId2dNQ2tnS3lBb0tHMXBaQ0FtSURCNE1XWm1aaWtnUER3Z01UTXBLU0I4SURBN1hHNGdJQ0FnWXlBOUlDZ29LR2hwSUNzZ0tHMXBaQ0ErUGo0Z01UTXBLU0I4SURBcElDc2dLSGN3SUQ0K1BpQXlOaWtwSUh3Z01EdGNiaUFnSUNCM01DQW1QU0F3ZURObVptWm1abVk3WEc0Z0lDQWdMeW9nYXlBOUlERWdLaTljYmlBZ0lDQnNieUE5SUUxaGRHZ3VhVzExYkNoaGJERXNJR0pzTUNrN1hHNGdJQ0FnYldsa0lEMGdUV0YwYUM1cGJYVnNLR0ZzTVN3Z1ltZ3dLVHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb01Td2dZbXd3S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnVFdGMGFDNXBiWFZzS0dGb01Td2dZbWd3S1R0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJEQXNJR0pzTVNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc01Dd2dZbWd4S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnd0xDQmliREVwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d3TENCaWFERXBLU0I4SURBN1hHNGdJQ0FnZG1GeUlIY3hJRDBnS0Nnb1l5QXJJR3h2S1NCOElEQXBJQ3NnS0NodGFXUWdKaUF3ZURGbVptWXBJRHc4SURFektTa2dmQ0F3TzF4dUlDQWdJR01nUFNBb0tDaG9hU0FySUNodGFXUWdQajQrSURFektTa2dmQ0F3S1NBcklDaDNNU0ErUGo0Z01qWXBLU0I4SURBN1hHNGdJQ0FnZHpFZ0pqMGdNSGd6Wm1abVptWm1PMXh1SUNBZ0lDOHFJR3NnUFNBeUlDb3ZYRzRnSUNBZ2JHOGdQU0JOWVhSb0xtbHRkV3dvWVd3eUxDQmliREFwTzF4dUlDQWdJRzFwWkNBOUlFMWhkR2d1YVcxMWJDaGhiRElzSUdKb01DazdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURJc0lHSnNNQ2twSUh3Z01EdGNiaUFnSUNCb2FTQTlJRTFoZEdndWFXMTFiQ2hoYURJc0lHSm9NQ2s3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3eExDQmliREVwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRFc0lHSm9NU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTVN3Z1ltd3hLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9NU3dnWW1neEtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc01Dd2dZbXd5S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3d0xDQmlhRElwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURBc0lHSnNNaWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhREFzSUdKb01pa3BJSHdnTUR0Y2JpQWdJQ0IyWVhJZ2R6SWdQU0FvS0NoaklDc2diRzhwSUh3Z01Da2dLeUFvS0cxcFpDQW1JREI0TVdabVppa2dQRHdnTVRNcEtTQjhJREE3WEc0Z0lDQWdZeUE5SUNnb0tHaHBJQ3NnS0cxcFpDQStQajRnTVRNcEtTQjhJREFwSUNzZ0tIY3lJRDQrUGlBeU5pa3BJSHdnTUR0Y2JpQWdJQ0IzTWlBbVBTQXdlRE5tWm1abVptWTdYRzRnSUNBZ0x5b2dheUE5SURNZ0tpOWNiaUFnSUNCc2J5QTlJRTFoZEdndWFXMTFiQ2hoYkRNc0lHSnNNQ2s3WEc0Z0lDQWdiV2xrSUQwZ1RXRjBhQzVwYlhWc0tHRnNNeXdnWW1nd0tUdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTXl3Z1ltd3dLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdUV0YwYUM1cGJYVnNLR0ZvTXl3Z1ltZ3dLVHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRJc0lHSnNNU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTWl3Z1ltZ3hLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d5TENCaWJERXBLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZ3lMQ0JpYURFcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3eExDQmliRElwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRFc0lHSm9NaWtwSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTVN3Z1ltd3lLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9NU3dnWW1neUtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc01Dd2dZbXd6S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3d0xDQmlhRE1wS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURBc0lHSnNNeWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhREFzSUdKb015a3BJSHdnTUR0Y2JpQWdJQ0IyWVhJZ2R6TWdQU0FvS0NoaklDc2diRzhwSUh3Z01Da2dLeUFvS0cxcFpDQW1JREI0TVdabVppa2dQRHdnTVRNcEtTQjhJREE3WEc0Z0lDQWdZeUE5SUNnb0tHaHBJQ3NnS0cxcFpDQStQajRnTVRNcEtTQjhJREFwSUNzZ0tIY3pJRDQrUGlBeU5pa3BJSHdnTUR0Y2JpQWdJQ0IzTXlBbVBTQXdlRE5tWm1abVptWTdYRzRnSUNBZ0x5b2dheUE5SURRZ0tpOWNiaUFnSUNCc2J5QTlJRTFoZEdndWFXMTFiQ2hoYkRRc0lHSnNNQ2s3WEc0Z0lDQWdiV2xrSUQwZ1RXRjBhQzVwYlhWc0tHRnNOQ3dnWW1nd0tUdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTkN3Z1ltd3dLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdUV0YwYUM1cGJYVnNLR0ZvTkN3Z1ltZ3dLVHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRNc0lHSnNNU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTXl3Z1ltZ3hLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d6TENCaWJERXBLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZ3pMQ0JpYURFcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3eUxDQmliRElwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRJc0lHSm9NaWtwSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTWl3Z1ltd3lLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9NaXdnWW1neUtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc01Td2dZbXd6S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3eExDQmlhRE1wS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURFc0lHSnNNeWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhREVzSUdKb015a3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJEQXNJR0pzTkNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc01Dd2dZbWcwS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnd0xDQmliRFFwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d3TENCaWFEUXBLU0I4SURBN1hHNGdJQ0FnZG1GeUlIYzBJRDBnS0Nnb1l5QXJJR3h2S1NCOElEQXBJQ3NnS0NodGFXUWdKaUF3ZURGbVptWXBJRHc4SURFektTa2dmQ0F3TzF4dUlDQWdJR01nUFNBb0tDaG9hU0FySUNodGFXUWdQajQrSURFektTa2dmQ0F3S1NBcklDaDNOQ0ErUGo0Z01qWXBLU0I4SURBN1hHNGdJQ0FnZHpRZ0pqMGdNSGd6Wm1abVptWm1PMXh1SUNBZ0lDOHFJR3NnUFNBMUlDb3ZYRzRnSUNBZ2JHOGdQU0JOWVhSb0xtbHRkV3dvWVd3MUxDQmliREFwTzF4dUlDQWdJRzFwWkNBOUlFMWhkR2d1YVcxMWJDaGhiRFVzSUdKb01DazdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURVc0lHSnNNQ2twSUh3Z01EdGNiaUFnSUNCb2FTQTlJRTFoZEdndWFXMTFiQ2hoYURVc0lHSm9NQ2s3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3MExDQmliREVwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRRc0lHSm9NU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTkN3Z1ltd3hLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9OQ3dnWW1neEtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc015d2dZbXd5S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3ekxDQmlhRElwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURNc0lHSnNNaWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRE1zSUdKb01pa3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJESXNJR0pzTXlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc01pd2dZbWd6S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdneUxDQmliRE1wS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d5TENCaWFETXBLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXd3hMQ0JpYkRRcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJERXNJR0pvTkNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb01Td2dZbXcwS1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTVN3Z1ltZzBLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNQ3dnWW13MUtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3dMQ0JpYURVcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEQXNJR0pzTlNrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURBc0lHSm9OU2twSUh3Z01EdGNiaUFnSUNCMllYSWdkelVnUFNBb0tDaGpJQ3NnYkc4cElId2dNQ2tnS3lBb0tHMXBaQ0FtSURCNE1XWm1aaWtnUER3Z01UTXBLU0I4SURBN1hHNGdJQ0FnWXlBOUlDZ29LR2hwSUNzZ0tHMXBaQ0ErUGo0Z01UTXBLU0I4SURBcElDc2dLSGMxSUQ0K1BpQXlOaWtwSUh3Z01EdGNiaUFnSUNCM05TQW1QU0F3ZURObVptWm1abVk3WEc0Z0lDQWdMeW9nYXlBOUlEWWdLaTljYmlBZ0lDQnNieUE5SUUxaGRHZ3VhVzExYkNoaGJEWXNJR0pzTUNrN1hHNGdJQ0FnYldsa0lEMGdUV0YwYUM1cGJYVnNLR0ZzTml3Z1ltZ3dLVHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb05pd2dZbXd3S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnVFdGMGFDNXBiWFZzS0dGb05pd2dZbWd3S1R0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJEVXNJR0pzTVNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc05Td2dZbWd4S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnMUxDQmliREVwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cxTENCaWFERXBLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzBMQ0JpYkRJcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEUXNJR0pvTWlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb05Dd2dZbXd5S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTkN3Z1ltZ3lLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNeXdnWW13ektTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3pMQ0JpYURNcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFETXNJR0pzTXlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURNc0lHSm9NeWtwSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRElzSUdKc05Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNNaXdnWW1nMEtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZ3lMQ0JpYkRRcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdneUxDQmlhRFFwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3d4TENCaWJEVXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiREVzSUdKb05Ta3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9NU3dnWW13MUtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb01Td2dZbWcxS1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTUN3Z1ltdzJLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3d3TENCaWFEWXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhREFzSUdKc05pa3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEQXNJR0pvTmlrcElId2dNRHRjYmlBZ0lDQjJZWElnZHpZZ1BTQW9LQ2hqSUNzZ2JHOHBJSHdnTUNrZ0t5QW9LRzFwWkNBbUlEQjRNV1ptWmlrZ1BEd2dNVE1wS1NCOElEQTdYRzRnSUNBZ1l5QTlJQ2dvS0docElDc2dLRzFwWkNBK1BqNGdNVE1wS1NCOElEQXBJQ3NnS0hjMklENCtQaUF5TmlrcElId2dNRHRjYmlBZ0lDQjNOaUFtUFNBd2VETm1abVptWm1ZN1hHNGdJQ0FnTHlvZ2F5QTlJRGNnS2k5Y2JpQWdJQ0JzYnlBOUlFMWhkR2d1YVcxMWJDaGhiRGNzSUdKc01DazdYRzRnSUNBZ2JXbGtJRDBnVFdGMGFDNXBiWFZzS0dGc055d2dZbWd3S1R0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OeXdnWW13d0tTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ1RXRjBhQzVwYlhWc0tHRm9OeXdnWW1nd0tUdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRFlzSUdKc01Ta3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNOaXdnWW1neEtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZzJMQ0JpYkRFcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnMkxDQmlhREVwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3cxTENCaWJESXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRFVzSUdKb01pa3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OU3dnWW13eUtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb05Td2dZbWd5S1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTkN3Z1ltd3pLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3cwTENCaWFETXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRFFzSUdKc015a3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEUXNJR0pvTXlrcElId2dNRHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRNc0lHSnNOQ2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTXl3Z1ltZzBLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d6TENCaWJEUXBLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZ3pMQ0JpYURRcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3eUxDQmliRFVwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRJc0lHSm9OU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTWl3Z1ltdzFLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9NaXdnWW1nMUtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc01Td2dZbXcyS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3eExDQmlhRFlwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURFc0lHSnNOaWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhREVzSUdKb05pa3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJEQXNJR0pzTnlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc01Dd2dZbWczS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnd0xDQmliRGNwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d3TENCaWFEY3BLU0I4SURBN1hHNGdJQ0FnZG1GeUlIYzNJRDBnS0Nnb1l5QXJJR3h2S1NCOElEQXBJQ3NnS0NodGFXUWdKaUF3ZURGbVptWXBJRHc4SURFektTa2dmQ0F3TzF4dUlDQWdJR01nUFNBb0tDaG9hU0FySUNodGFXUWdQajQrSURFektTa2dmQ0F3S1NBcklDaDNOeUErUGo0Z01qWXBLU0I4SURBN1hHNGdJQ0FnZHpjZ0pqMGdNSGd6Wm1abVptWm1PMXh1SUNBZ0lDOHFJR3NnUFNBNElDb3ZYRzRnSUNBZ2JHOGdQU0JOWVhSb0xtbHRkV3dvWVd3NExDQmliREFwTzF4dUlDQWdJRzFwWkNBOUlFMWhkR2d1YVcxMWJDaGhiRGdzSUdKb01DazdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURnc0lHSnNNQ2twSUh3Z01EdGNiaUFnSUNCb2FTQTlJRTFoZEdndWFXMTFiQ2hoYURnc0lHSm9NQ2s3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3M0xDQmliREVwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRjc0lHSm9NU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTnl3Z1ltd3hLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9OeXdnWW1neEtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc05pd2dZbXd5S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3MkxDQmlhRElwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURZc0lHSnNNaWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRFlzSUdKb01pa3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJEVXNJR0pzTXlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc05Td2dZbWd6S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnMUxDQmliRE1wS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cxTENCaWFETXBLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzBMQ0JpYkRRcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEUXNJR0pvTkNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb05Dd2dZbXcwS1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTkN3Z1ltZzBLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNeXdnWW13MUtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3pMQ0JpYURVcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFETXNJR0pzTlNrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURNc0lHSm9OU2twSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRElzSUdKc05pa3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNNaXdnWW1nMktTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZ3lMQ0JpYkRZcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdneUxDQmlhRFlwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3d4TENCaWJEY3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiREVzSUdKb055a3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9NU3dnWW13M0tTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb01Td2dZbWczS1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTUN3Z1ltdzRLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3d3TENCaWFEZ3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhREFzSUdKc09Da3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEQXNJR0pvT0NrcElId2dNRHRjYmlBZ0lDQjJZWElnZHpnZ1BTQW9LQ2hqSUNzZ2JHOHBJSHdnTUNrZ0t5QW9LRzFwWkNBbUlEQjRNV1ptWmlrZ1BEd2dNVE1wS1NCOElEQTdYRzRnSUNBZ1l5QTlJQ2dvS0docElDc2dLRzFwWkNBK1BqNGdNVE1wS1NCOElEQXBJQ3NnS0hjNElENCtQaUF5TmlrcElId2dNRHRjYmlBZ0lDQjNPQ0FtUFNBd2VETm1abVptWm1ZN1hHNGdJQ0FnTHlvZ2F5QTlJRGtnS2k5Y2JpQWdJQ0JzYnlBOUlFMWhkR2d1YVcxMWJDaGhiRGtzSUdKc01DazdYRzRnSUNBZ2JXbGtJRDBnVFdGMGFDNXBiWFZzS0dGc09Td2dZbWd3S1R0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9PU3dnWW13d0tTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ1RXRjBhQzVwYlhWc0tHRm9PU3dnWW1nd0tUdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRGdzSUdKc01Ta3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNPQ3dnWW1neEtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZzRMQ0JpYkRFcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnNExDQmlhREVwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3czTENCaWJESXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRGNzSUdKb01pa3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OeXdnWW13eUtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb055d2dZbWd5S1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTml3Z1ltd3pLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3cyTENCaWFETXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRFlzSUdKc015a3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEWXNJR0pvTXlrcElId2dNRHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRVc0lHSnNOQ2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTlN3Z1ltZzBLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cxTENCaWJEUXBLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZzFMQ0JpYURRcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3MExDQmliRFVwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRRc0lHSm9OU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTkN3Z1ltdzFLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9OQ3dnWW1nMUtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc015d2dZbXcyS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3ekxDQmlhRFlwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURNc0lHSnNOaWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRE1zSUdKb05pa3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJESXNJR0pzTnlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc01pd2dZbWczS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdneUxDQmliRGNwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d5TENCaWFEY3BLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXd3hMQ0JpYkRncEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJERXNJR0pvT0NrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb01Td2dZbXc0S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTVN3Z1ltZzRLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNNQ3dnWW13NUtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXd3dMQ0JpYURrcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEQXNJR0pzT1NrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURBc0lHSm9PU2twSUh3Z01EdGNiaUFnSUNCMllYSWdkemtnUFNBb0tDaGpJQ3NnYkc4cElId2dNQ2tnS3lBb0tHMXBaQ0FtSURCNE1XWm1aaWtnUER3Z01UTXBLU0I4SURBN1hHNGdJQ0FnWXlBOUlDZ29LR2hwSUNzZ0tHMXBaQ0ErUGo0Z01UTXBLU0I4SURBcElDc2dLSGM1SUQ0K1BpQXlOaWtwSUh3Z01EdGNiaUFnSUNCM09TQW1QU0F3ZURObVptWm1abVk3WEc0Z0lDQWdMeW9nYXlBOUlERXdJQ292WEc0Z0lDQWdiRzhnUFNCTllYUm9MbWx0ZFd3b1lXdzVMQ0JpYkRFcE8xeHVJQ0FnSUcxcFpDQTlJRTFoZEdndWFXMTFiQ2hoYkRrc0lHSm9NU2s3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEa3NJR0pzTVNrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUUxaGRHZ3VhVzExYkNoaGFEa3NJR0pvTVNrN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzRMQ0JpYkRJcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEZ3NJR0pvTWlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb09Dd2dZbXd5S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvT0N3Z1ltZ3lLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNOeXdnWW13ektTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXdzNMQ0JpYURNcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEY3NJR0pzTXlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURjc0lHSm9NeWtwSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRFlzSUdKc05Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNOaXdnWW1nMEtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZzJMQ0JpYkRRcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnMkxDQmlhRFFwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3cxTENCaWJEVXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRFVzSUdKb05Ta3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OU3dnWW13MUtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb05Td2dZbWcxS1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTkN3Z1ltdzJLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3cwTENCaWFEWXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRFFzSUdKc05pa3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEUXNJR0pvTmlrcElId2dNRHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRNc0lHSnNOeWtwSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTXl3Z1ltZzNLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d6TENCaWJEY3BLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZ3pMQ0JpYURjcEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3eUxDQmliRGdwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRJc0lHSm9PQ2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTWl3Z1ltdzRLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9NaXdnWW1nNEtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc01Td2dZbXc1S1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3eExDQmlhRGtwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURFc0lHSnNPU2twSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhREVzSUdKb09Ta3BJSHdnTUR0Y2JpQWdJQ0IyWVhJZ2R6RXdJRDBnS0Nnb1l5QXJJR3h2S1NCOElEQXBJQ3NnS0NodGFXUWdKaUF3ZURGbVptWXBJRHc4SURFektTa2dmQ0F3TzF4dUlDQWdJR01nUFNBb0tDaG9hU0FySUNodGFXUWdQajQrSURFektTa2dmQ0F3S1NBcklDaDNNVEFnUGo0K0lESTJLU2tnZkNBd08xeHVJQ0FnSUhjeE1DQW1QU0F3ZURObVptWm1abVk3WEc0Z0lDQWdMeW9nYXlBOUlERXhJQ292WEc0Z0lDQWdiRzhnUFNCTllYUm9MbWx0ZFd3b1lXdzVMQ0JpYkRJcE8xeHVJQ0FnSUcxcFpDQTlJRTFoZEdndWFXMTFiQ2hoYkRrc0lHSm9NaWs3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEa3NJR0pzTWlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUUxaGRHZ3VhVzExYkNoaGFEa3NJR0pvTWlrN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzRMQ0JpYkRNcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEZ3NJR0pvTXlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb09Dd2dZbXd6S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvT0N3Z1ltZ3pLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNOeXdnWW13MEtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXdzNMQ0JpYURRcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEY3NJR0pzTkNrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURjc0lHSm9OQ2twSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRFlzSUdKc05Ta3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNOaXdnWW1nMUtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZzJMQ0JpYkRVcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnMkxDQmlhRFVwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3cxTENCaWJEWXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRFVzSUdKb05pa3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OU3dnWW13MktTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb05Td2dZbWcyS1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTkN3Z1ltdzNLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3cwTENCaWFEY3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRFFzSUdKc055a3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEUXNJR0pvTnlrcElId2dNRHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRNc0lHSnNPQ2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTXl3Z1ltZzRLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2d6TENCaWJEZ3BLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZ3pMQ0JpYURncEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3eUxDQmliRGtwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRJc0lHSm9PU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTWl3Z1ltdzVLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9NaXdnWW1nNUtTa2dmQ0F3TzF4dUlDQWdJSFpoY2lCM01URWdQU0FvS0NoaklDc2diRzhwSUh3Z01Da2dLeUFvS0cxcFpDQW1JREI0TVdabVppa2dQRHdnTVRNcEtTQjhJREE3WEc0Z0lDQWdZeUE5SUNnb0tHaHBJQ3NnS0cxcFpDQStQajRnTVRNcEtTQjhJREFwSUNzZ0tIY3hNU0ErUGo0Z01qWXBLU0I4SURBN1hHNGdJQ0FnZHpFeElDWTlJREI0TTJabVptWm1aanRjYmlBZ0lDQXZLaUJySUQwZ01USWdLaTljYmlBZ0lDQnNieUE5SUUxaGRHZ3VhVzExYkNoaGJEa3NJR0pzTXlrN1hHNGdJQ0FnYldsa0lEMGdUV0YwYUM1cGJYVnNLR0ZzT1N3Z1ltZ3pLVHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb09Td2dZbXd6S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnVFdGMGFDNXBiWFZzS0dGb09Td2dZbWd6S1R0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJEZ3NJR0pzTkNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc09Dd2dZbWcwS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnNExDQmliRFFwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2c0TENCaWFEUXBLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzNMQ0JpYkRVcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEY3NJR0pvTlNrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb055d2dZbXcxS1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTnl3Z1ltZzFLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNOaXdnWW13MktTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXdzJMQ0JpYURZcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEWXNJR0pzTmlrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURZc0lHSm9OaWtwSUh3Z01EdGNiaUFnSUNCc2J5QTlJQ2hzYnlBcklFMWhkR2d1YVcxMWJDaGhiRFVzSUdKc055a3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRnNOU3dnWW1nM0tTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXZzFMQ0JpYkRjcEtTQjhJREE3WEc0Z0lDQWdhR2tnUFNBb2FHa2dLeUJOWVhSb0xtbHRkV3dvWVdnMUxDQmlhRGNwS1NCOElEQTdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3cwTENCaWJEZ3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRFFzSUdKb09Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9OQ3dnWW13NEtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb05Dd2dZbWc0S1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTXl3Z1ltdzVLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3d6TENCaWFEa3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRE1zSUdKc09Ta3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFETXNJR0pvT1NrcElId2dNRHRjYmlBZ0lDQjJZWElnZHpFeUlEMGdLQ2dvWXlBcklHeHZLU0I4SURBcElDc2dLQ2h0YVdRZ0ppQXdlREZtWm1ZcElEdzhJREV6S1NrZ2ZDQXdPMXh1SUNBZ0lHTWdQU0FvS0Nob2FTQXJJQ2h0YVdRZ1BqNCtJREV6S1NrZ2ZDQXdLU0FySUNoM01USWdQajQrSURJMktTa2dmQ0F3TzF4dUlDQWdJSGN4TWlBbVBTQXdlRE5tWm1abVptWTdYRzRnSUNBZ0x5b2dheUE5SURFeklDb3ZYRzRnSUNBZ2JHOGdQU0JOWVhSb0xtbHRkV3dvWVd3NUxDQmliRFFwTzF4dUlDQWdJRzFwWkNBOUlFMWhkR2d1YVcxMWJDaGhiRGtzSUdKb05DazdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURrc0lHSnNOQ2twSUh3Z01EdGNiaUFnSUNCb2FTQTlJRTFoZEdndWFXMTFiQ2hoYURrc0lHSm9OQ2s3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3NExDQmliRFVwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRnc0lHSm9OU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvT0N3Z1ltdzFLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9PQ3dnWW1nMUtTa2dmQ0F3TzF4dUlDQWdJR3h2SUQwZ0tHeHZJQ3NnVFdGMGFDNXBiWFZzS0dGc055d2dZbXcyS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVd3M0xDQmlhRFlwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURjc0lHSnNOaWtwSUh3Z01EdGNiaUFnSUNCb2FTQTlJQ2hvYVNBcklFMWhkR2d1YVcxMWJDaGhhRGNzSUdKb05pa3BJSHdnTUR0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJEWXNJR0pzTnlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc05pd2dZbWczS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnMkxDQmliRGNwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cyTENCaWFEY3BLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzFMQ0JpYkRncEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEVXNJR0pvT0NrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb05Td2dZbXc0S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTlN3Z1ltZzRLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNOQ3dnWW13NUtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXdzBMQ0JpYURrcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEUXNJR0pzT1NrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURRc0lHSm9PU2twSUh3Z01EdGNiaUFnSUNCMllYSWdkekV6SUQwZ0tDZ29ZeUFySUd4dktTQjhJREFwSUNzZ0tDaHRhV1FnSmlBd2VERm1abVlwSUR3OElERXpLU2tnZkNBd08xeHVJQ0FnSUdNZ1BTQW9LQ2hvYVNBcklDaHRhV1FnUGo0K0lERXpLU2tnZkNBd0tTQXJJQ2gzTVRNZ1BqNCtJREkyS1NrZ2ZDQXdPMXh1SUNBZ0lIY3hNeUFtUFNBd2VETm1abVptWm1ZN1hHNGdJQ0FnTHlvZ2F5QTlJREUwSUNvdlhHNGdJQ0FnYkc4Z1BTQk5ZWFJvTG1sdGRXd29ZV3c1TENCaWJEVXBPMXh1SUNBZ0lHMXBaQ0E5SUUxaGRHZ3VhVzExYkNoaGJEa3NJR0pvTlNrN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRGtzSUdKc05Ta3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlFMWhkR2d1YVcxMWJDaGhhRGtzSUdKb05TazdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3c0TENCaWJEWXBLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRGdzSUdKb05pa3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9PQ3dnWW13MktTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb09Dd2dZbWcyS1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTnl3Z1ltdzNLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3czTENCaWFEY3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRGNzSUdKc055a3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEY3NJR0pvTnlrcElId2dNRHRjYmlBZ0lDQnNieUE5SUNoc2J5QXJJRTFoZEdndWFXMTFiQ2hoYkRZc0lHSnNPQ2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZzTml3Z1ltZzRLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV2cyTENCaWJEZ3BLU0I4SURBN1hHNGdJQ0FnYUdrZ1BTQW9hR2tnS3lCTllYUm9MbWx0ZFd3b1lXZzJMQ0JpYURncEtTQjhJREE3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3MUxDQmliRGtwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRVc0lHSm9PU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvTlN3Z1ltdzVLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9OU3dnWW1nNUtTa2dmQ0F3TzF4dUlDQWdJSFpoY2lCM01UUWdQU0FvS0NoaklDc2diRzhwSUh3Z01Da2dLeUFvS0cxcFpDQW1JREI0TVdabVppa2dQRHdnTVRNcEtTQjhJREE3WEc0Z0lDQWdZeUE5SUNnb0tHaHBJQ3NnS0cxcFpDQStQajRnTVRNcEtTQjhJREFwSUNzZ0tIY3hOQ0ErUGo0Z01qWXBLU0I4SURBN1hHNGdJQ0FnZHpFMElDWTlJREI0TTJabVptWm1aanRjYmlBZ0lDQXZLaUJySUQwZ01UVWdLaTljYmlBZ0lDQnNieUE5SUUxaGRHZ3VhVzExYkNoaGJEa3NJR0pzTmlrN1hHNGdJQ0FnYldsa0lEMGdUV0YwYUM1cGJYVnNLR0ZzT1N3Z1ltZzJLVHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb09Td2dZbXcyS1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnVFdGMGFDNXBiWFZzS0dGb09Td2dZbWcyS1R0Y2JpQWdJQ0JzYnlBOUlDaHNieUFySUUxaGRHZ3VhVzExYkNoaGJEZ3NJR0pzTnlrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGc09Dd2dZbWczS1NrZ2ZDQXdPMXh1SUNBZ0lHMXBaQ0E5SUNodGFXUWdLeUJOWVhSb0xtbHRkV3dvWVdnNExDQmliRGNwS1NCOElEQTdYRzRnSUNBZ2FHa2dQU0FvYUdrZ0t5Qk5ZWFJvTG1sdGRXd29ZV2c0TENCaWFEY3BLU0I4SURBN1hHNGdJQ0FnYkc4Z1BTQW9iRzhnS3lCTllYUm9MbWx0ZFd3b1lXdzNMQ0JpYkRncEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGJEY3NJR0pvT0NrcElId2dNRHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb055d2dZbXc0S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnS0docElDc2dUV0YwYUM1cGJYVnNLR0ZvTnl3Z1ltZzRLU2tnZkNBd08xeHVJQ0FnSUd4dklEMGdLR3h2SUNzZ1RXRjBhQzVwYlhWc0tHRnNOaXdnWW13NUtTa2dmQ0F3TzF4dUlDQWdJRzFwWkNBOUlDaHRhV1FnS3lCTllYUm9MbWx0ZFd3b1lXdzJMQ0JpYURrcEtTQjhJREE3WEc0Z0lDQWdiV2xrSUQwZ0tHMXBaQ0FySUUxaGRHZ3VhVzExYkNoaGFEWXNJR0pzT1NrcElId2dNRHRjYmlBZ0lDQm9hU0E5SUNob2FTQXJJRTFoZEdndWFXMTFiQ2hoYURZc0lHSm9PU2twSUh3Z01EdGNiaUFnSUNCMllYSWdkekUxSUQwZ0tDZ29ZeUFySUd4dktTQjhJREFwSUNzZ0tDaHRhV1FnSmlBd2VERm1abVlwSUR3OElERXpLU2tnZkNBd08xeHVJQ0FnSUdNZ1BTQW9LQ2hvYVNBcklDaHRhV1FnUGo0K0lERXpLU2tnZkNBd0tTQXJJQ2gzTVRVZ1BqNCtJREkyS1NrZ2ZDQXdPMXh1SUNBZ0lIY3hOU0FtUFNBd2VETm1abVptWm1ZN1hHNGdJQ0FnTHlvZ2F5QTlJREUySUNvdlhHNGdJQ0FnYkc4Z1BTQk5ZWFJvTG1sdGRXd29ZV3c1TENCaWJEY3BPMXh1SUNBZ0lHMXBaQ0E5SUUxaGRHZ3VhVzExYkNoaGJEa3NJR0pvTnlrN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRGtzSUdKc055a3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlFMWhkR2d1YVcxMWJDaGhhRGtzSUdKb055azdYRzRnSUNBZ2JHOGdQU0FvYkc4Z0t5Qk5ZWFJvTG1sdGRXd29ZV3c0TENCaWJEZ3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhiRGdzSUdKb09Da3BJSHdnTUR0Y2JpQWdJQ0J0YVdRZ1BTQW9iV2xrSUNzZ1RXRjBhQzVwYlhWc0tHRm9PQ3dnWW13NEtTa2dmQ0F3TzF4dUlDQWdJR2hwSUQwZ0tHaHBJQ3NnVFdGMGFDNXBiWFZzS0dGb09Dd2dZbWc0S1NrZ2ZDQXdPMXh1SUNBZ0lHeHZJRDBnS0d4dklDc2dUV0YwYUM1cGJYVnNLR0ZzTnl3Z1ltdzVLU2tnZkNBd08xeHVJQ0FnSUcxcFpDQTlJQ2h0YVdRZ0t5Qk5ZWFJvTG1sdGRXd29ZV3czTENCaWFEa3BLU0I4SURBN1hHNGdJQ0FnYldsa0lEMGdLRzFwWkNBcklFMWhkR2d1YVcxMWJDaGhhRGNzSUdKc09Ta3BJSHdnTUR0Y2JpQWdJQ0JvYVNBOUlDaG9hU0FySUUxaGRHZ3VhVzExYkNoaGFEY3NJR0pvT1NrcElId2dNRHRjYmlBZ0lDQjJZWElnZHpFMklEMGdLQ2dvWXlBcklHeHZLU0I4SURBcElDc2dLQ2h0YVdRZ0ppQXdlREZtWm1ZcElEdzhJREV6S1NrZ2ZDQXdPMXh1SUNBZ0lHTWdQU0FvS0Nob2FTQXJJQ2h0YVdRZ1BqNCtJREV6S1NrZ2ZDQXdLU0FySUNoM01UWWdQajQrSURJMktTa2dmQ0F3TzF4dUlDQWdJSGN4TmlBbVBTQXdlRE5tWm1abVptWTdYRzRnSUNBZ0x5b2dheUE5SURFM0lDb3ZYRzRnSUNBZ2JHOGdQU0JOWVhSb0xtbHRkV3dvWVd3NUxDQmliRGdwTzF4dUlDQWdJRzFwWkNBOUlFMWhkR2d1YVcxMWJDaGhiRGtzSUdKb09DazdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYURrc0lHSnNPQ2twSUh3Z01EdGNiaUFnSUNCb2FTQTlJRTFoZEdndWFXMTFiQ2hoYURrc0lHSm9PQ2s3WEc0Z0lDQWdiRzhnUFNBb2JHOGdLeUJOWVhSb0xtbHRkV3dvWVd3NExDQmliRGtwS1NCOElEQTdYRzRnSUNBZ2JXbGtJRDBnS0cxcFpDQXJJRTFoZEdndWFXMTFiQ2hoYkRnc0lHSm9PU2twSUh3Z01EdGNiaUFnSUNCdGFXUWdQU0FvYldsa0lDc2dUV0YwYUM1cGJYVnNLR0ZvT0N3Z1ltdzVLU2tnZkNBd08xeHVJQ0FnSUdocElEMGdLR2hwSUNzZ1RXRjBhQzVwYlhWc0tHRm9PQ3dnWW1nNUtTa2dmQ0F3TzF4dUlDQWdJSFpoY2lCM01UY2dQU0FvS0NoaklDc2diRzhwSUh3Z01Da2dLeUFvS0cxcFpDQW1JREI0TVdabVppa2dQRHdnTVRNcEtTQjhJREE3WEc0Z0lDQWdZeUE5SUNnb0tHaHBJQ3NnS0cxcFpDQStQajRnTVRNcEtTQjhJREFwSUNzZ0tIY3hOeUErUGo0Z01qWXBLU0I4SURBN1hHNGdJQ0FnZHpFM0lDWTlJREI0TTJabVptWm1aanRjYmlBZ0lDQXZLaUJySUQwZ01UZ2dLaTljYmlBZ0lDQnNieUE5SUUxaGRHZ3VhVzExYkNoaGJEa3NJR0pzT1NrN1hHNGdJQ0FnYldsa0lEMGdUV0YwYUM1cGJYVnNLR0ZzT1N3Z1ltZzVLVHRjYmlBZ0lDQnRhV1FnUFNBb2JXbGtJQ3NnVFdGMGFDNXBiWFZzS0dGb09Td2dZbXc1S1NrZ2ZDQXdPMXh1SUNBZ0lHaHBJRDBnVFdGMGFDNXBiWFZzS0dGb09Td2dZbWc1S1R0Y2JpQWdJQ0IyWVhJZ2R6RTRJRDBnS0Nnb1l5QXJJR3h2S1NCOElEQXBJQ3NnS0NodGFXUWdKaUF3ZURGbVptWXBJRHc4SURFektTa2dmQ0F3TzF4dUlDQWdJR01nUFNBb0tDaG9hU0FySUNodGFXUWdQajQrSURFektTa2dmQ0F3S1NBcklDaDNNVGdnUGo0K0lESTJLU2tnZkNBd08xeHVJQ0FnSUhjeE9DQW1QU0F3ZURObVptWm1abVk3WEc0Z0lDQWdiMXN3WFNBOUlIY3dPMXh1SUNBZ0lHOWJNVjBnUFNCM01UdGNiaUFnSUNCdld6SmRJRDBnZHpJN1hHNGdJQ0FnYjFzelhTQTlJSGN6TzF4dUlDQWdJRzliTkYwZ1BTQjNORHRjYmlBZ0lDQnZXelZkSUQwZ2R6VTdYRzRnSUNBZ2IxczJYU0E5SUhjMk8xeHVJQ0FnSUc5Yk4xMGdQU0IzTnp0Y2JpQWdJQ0J2V3poZElEMGdkemc3WEc0Z0lDQWdiMXM1WFNBOUlIYzVPMXh1SUNBZ0lHOWJNVEJkSUQwZ2R6RXdPMXh1SUNBZ0lHOWJNVEZkSUQwZ2R6RXhPMXh1SUNBZ0lHOWJNVEpkSUQwZ2R6RXlPMXh1SUNBZ0lHOWJNVE5kSUQwZ2R6RXpPMXh1SUNBZ0lHOWJNVFJkSUQwZ2R6RTBPMXh1SUNBZ0lHOWJNVFZkSUQwZ2R6RTFPMXh1SUNBZ0lHOWJNVFpkSUQwZ2R6RTJPMXh1SUNBZ0lHOWJNVGRkSUQwZ2R6RTNPMXh1SUNBZ0lHOWJNVGhkSUQwZ2R6RTRPMXh1SUNBZ0lHbG1JQ2hqSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0J2V3pFNVhTQTlJR003WEc0Z0lDQWdJQ0J2ZFhRdWJHVnVaM1JvS3lzN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnZkWFE3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVRzlzZVdacGJHd2dZMjl0WWx4dUlDQnBaaUFvSVUxaGRHZ3VhVzExYkNrZ2UxeHVJQ0FnSUdOdmJXSXhNRTExYkZSdklEMGdjMjFoYkd4TmRXeFVienRjYmlBZ2ZWeHVYRzRnSUdaMWJtTjBhVzl1SUdKcFowMTFiRlJ2SUNoelpXeG1MQ0J1ZFcwc0lHOTFkQ2tnZTF4dUlDQWdJRzkxZEM1dVpXZGhkR2wyWlNBOUlHNTFiUzV1WldkaGRHbDJaU0JlSUhObGJHWXVibVZuWVhScGRtVTdYRzRnSUNBZ2IzVjBMbXhsYm1kMGFDQTlJSE5sYkdZdWJHVnVaM1JvSUNzZ2JuVnRMbXhsYm1kMGFEdGNibHh1SUNBZ0lIWmhjaUJqWVhKeWVTQTlJREE3WEc0Z0lDQWdkbUZ5SUdodVkyRnljbmtnUFNBd08xeHVJQ0FnSUdadmNpQW9kbUZ5SUdzZ1BTQXdPeUJySUR3Z2IzVjBMbXhsYm1kMGFDQXRJREU3SUdzckt5a2dlMXh1SUNBZ0lDQWdMeThnVTNWdElHRnNiQ0IzYjNKa2N5QjNhWFJvSUhSb1pTQnpZVzFsSUdCcElDc2dhaUE5SUd0Z0lHRnVaQ0JoWTJOMWJYVnNZWFJsSUdCdVkyRnljbmxnTEZ4dUlDQWdJQ0FnTHk4Z2JtOTBaU0IwYUdGMElHNWpZWEp5ZVNCamIzVnNaQ0JpWlNBK1BTQXdlRE5tWm1abVptWmNiaUFnSUNBZ0lIWmhjaUJ1WTJGeWNua2dQU0JvYm1OaGNuSjVPMXh1SUNBZ0lDQWdhRzVqWVhKeWVTQTlJREE3WEc0Z0lDQWdJQ0IyWVhJZ2NuZHZjbVFnUFNCallYSnllU0FtSURCNE0yWm1abVptWmp0Y2JpQWdJQ0FnSUhaaGNpQnRZWGhLSUQwZ1RXRjBhQzV0YVc0b2F5d2diblZ0TG14bGJtZDBhQ0F0SURFcE8xeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJRTFoZEdndWJXRjRLREFzSUdzZ0xTQnpaV3htTG14bGJtZDBhQ0FySURFcE95QnFJRHc5SUcxaGVFbzdJR29yS3lrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYVNBOUlHc2dMU0JxTzF4dUlDQWdJQ0FnSUNCMllYSWdZU0E5SUhObGJHWXVkMjl5WkhOYmFWMGdmQ0F3TzF4dUlDQWdJQ0FnSUNCMllYSWdZaUE5SUc1MWJTNTNiM0prYzF0cVhTQjhJREE3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlJRDBnWVNBcUlHSTdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlHeHZJRDBnY2lBbUlEQjRNMlptWm1abVpqdGNiaUFnSUNBZ0lDQWdibU5oY25KNUlEMGdLRzVqWVhKeWVTQXJJQ2dvY2lBdklEQjROREF3TURBd01Da2dmQ0F3S1NrZ2ZDQXdPMXh1SUNBZ0lDQWdJQ0JzYnlBOUlDaHNieUFySUhKM2IzSmtLU0I4SURBN1hHNGdJQ0FnSUNBZ0lISjNiM0prSUQwZ2JHOGdKaUF3ZURObVptWm1abVk3WEc0Z0lDQWdJQ0FnSUc1allYSnllU0E5SUNodVkyRnljbmtnS3lBb2JHOGdQajQrSURJMktTa2dmQ0F3TzF4dVhHNGdJQ0FnSUNBZ0lHaHVZMkZ5Y25rZ0t6MGdibU5oY25KNUlENCtQaUF5Tmp0Y2JpQWdJQ0FnSUNBZ2JtTmhjbko1SUNZOUlEQjRNMlptWm1abVpqdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHOTFkQzUzYjNKa2MxdHJYU0E5SUhKM2IzSmtPMXh1SUNBZ0lDQWdZMkZ5Y25rZ1BTQnVZMkZ5Y25rN1hHNGdJQ0FnSUNCdVkyRnljbmtnUFNCb2JtTmhjbko1TzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWTJGeWNua2dJVDA5SURBcElIdGNiaUFnSUNBZ0lHOTFkQzUzYjNKa2MxdHJYU0E5SUdOaGNuSjVPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCdmRYUXViR1Z1WjNSb0xTMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc5MWRDNXpkSEpwY0NncE8xeHVJQ0I5WEc1Y2JpQWdablZ1WTNScGIyNGdhblZ0WW05TmRXeFVieUFvYzJWc1ppd2diblZ0TENCdmRYUXBJSHRjYmlBZ0lDQjJZWElnWm1aMGJTQTlJRzVsZHlCR1JsUk5LQ2s3WEc0Z0lDQWdjbVYwZFhKdUlHWm1kRzB1YlhWc2NDaHpaV3htTENCdWRXMHNJRzkxZENrN1hHNGdJSDFjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1YlhWc1ZHOGdQU0JtZFc1amRHbHZiaUJ0ZFd4VWJ5QW9iblZ0TENCdmRYUXBJSHRjYmlBZ0lDQjJZWElnY21Wek8xeHVJQ0FnSUhaaGNpQnNaVzRnUFNCMGFHbHpMbXhsYm1kMGFDQXJJRzUxYlM1c1pXNW5kR2c3WEc0Z0lDQWdhV1lnS0hSb2FYTXViR1Z1WjNSb0lEMDlQU0F4TUNBbUppQnVkVzB1YkdWdVozUm9JRDA5UFNBeE1Da2dlMXh1SUNBZ0lDQWdjbVZ6SUQwZ1kyOXRZakV3VFhWc1ZHOG9kR2hwY3l3Z2JuVnRMQ0J2ZFhRcE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JHVnVJRHdnTmpNcElIdGNiaUFnSUNBZ0lISmxjeUE5SUhOdFlXeHNUWFZzVkc4b2RHaHBjeXdnYm5WdExDQnZkWFFwTzF4dUlDQWdJSDBnWld4elpTQnBaaUFvYkdWdUlEd2dNVEF5TkNrZ2UxeHVJQ0FnSUNBZ2NtVnpJRDBnWW1sblRYVnNWRzhvZEdocGN5d2diblZ0TENCdmRYUXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYTWdQU0JxZFcxaWIwMTFiRlJ2S0hSb2FYTXNJRzUxYlN3Z2IzVjBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2NtVnpPMXh1SUNCOU8xeHVYRzRnSUM4dklFTnZiMnhsZVMxVWRXdGxlU0JoYkdkdmNtbDBhRzBnWm05eUlFWkdWRnh1SUNBdkx5QnpiR2xuYUhSc2VTQnlaWFpwYzJsMFpXUWdkRzhnY21Wc2VTQnZiaUJzYjI5d2FXNW5JR2x1YzNSbFlXUWdiMllnY21WamRYSnphVzl1WEc1Y2JpQWdablZ1WTNScGIyNGdSa1pVVFNBb2VDd2dlU2tnZTF4dUlDQWdJSFJvYVhNdWVDQTlJSGc3WEc0Z0lDQWdkR2hwY3k1NUlEMGdlVHRjYmlBZ2ZWeHVYRzRnSUVaR1ZFMHVjSEp2ZEc5MGVYQmxMbTFoYTJWU1FsUWdQU0JtZFc1amRHbHZiaUJ0WVd0bFVrSlVJQ2hPS1NCN1hHNGdJQ0FnZG1GeUlIUWdQU0J1WlhjZ1FYSnlZWGtvVGlrN1hHNGdJQ0FnZG1GeUlHd2dQU0JDVGk1d2NtOTBiM1I1Y0dVdVgyTnZkVzUwUW1sMGN5aE9LU0F0SURFN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCT095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhSYmFWMGdQU0IwYUdsekxuSmxka0pwYmlocExDQnNMQ0JPS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkRHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlNaWFIxY201eklHSnBibUZ5ZVMxeVpYWmxjbk5sWkNCeVpYQnlaWE5sYm5SaGRHbHZiaUJ2WmlCZ2VHQmNiaUFnUmtaVVRTNXdjbTkwYjNSNWNHVXVjbVYyUW1sdUlEMGdablZ1WTNScGIyNGdjbVYyUW1sdUlDaDRMQ0JzTENCT0tTQjdYRzRnSUNBZ2FXWWdLSGdnUFQwOUlEQWdmSHdnZUNBOVBUMGdUaUF0SURFcElISmxkSFZ5YmlCNE8xeHVYRzRnSUNBZ2RtRnlJSEppSUQwZ01EdGNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElHdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2NtSWdmRDBnS0hnZ0ppQXhLU0E4UENBb2JDQXRJR2tnTFNBeEtUdGNiaUFnSUNBZ0lIZ2dQajQ5SURFN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSEppTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRkJsY21admNtMXpJRndpZEhkbFpXUnNhVzVuWENJZ2NHaGhjMlVzSUhSb1pYSmxabTl5WlNBblpXMTFiR0YwYVc1bkoxeHVJQ0F2THlCaVpXaGhkbWx2ZFhJZ2IyWWdkR2hsSUhKbFkzVnljMmwyWlNCaGJHZHZjbWwwYUcxY2JpQWdSa1pVVFM1d2NtOTBiM1I1Y0dVdWNHVnliWFYwWlNBOUlHWjFibU4wYVc5dUlIQmxjbTExZEdVZ0tISmlkQ3dnY25kekxDQnBkM01zSUhKMGQzTXNJR2wwZDNNc0lFNHBJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRTQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdjblIzYzF0cFhTQTlJSEozYzF0eVluUmJhVjFkTzF4dUlDQWdJQ0FnYVhSM2MxdHBYU0E5SUdsM2MxdHlZblJiYVYxZE8xeHVJQ0FnSUgxY2JpQWdmVHRjYmx4dUlDQkdSbFJOTG5CeWIzUnZkSGx3WlM1MGNtRnVjMlp2Y20wZ1BTQm1kVzVqZEdsdmJpQjBjbUZ1YzJadmNtMGdLSEozY3l3Z2FYZHpMQ0J5ZEhkekxDQnBkSGR6TENCT0xDQnlZblFwSUh0Y2JpQWdJQ0IwYUdsekxuQmxjbTExZEdVb2NtSjBMQ0J5ZDNNc0lHbDNjeXdnY25SM2N5d2dhWFIzY3l3Z1RpazdYRzVjYmlBZ0lDQm1iM0lnS0haaGNpQnpJRDBnTVRzZ2N5QThJRTQ3SUhNZ1BEdzlJREVwSUh0Y2JpQWdJQ0FnSUhaaGNpQnNJRDBnY3lBOFBDQXhPMXh1WEc0Z0lDQWdJQ0IyWVhJZ2NuUjNaR1lnUFNCTllYUm9MbU52Y3lneUlDb2dUV0YwYUM1UVNTQXZJR3dwTzF4dUlDQWdJQ0FnZG1GeUlHbDBkMlJtSUQwZ1RXRjBhQzV6YVc0b01pQXFJRTFoZEdndVVFa2dMeUJzS1R0Y2JseHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2NDQTlJREE3SUhBZ1BDQk9PeUJ3SUNzOUlHd3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlISjBkMlJtWHlBOUlISjBkMlJtTzF4dUlDQWdJQ0FnSUNCMllYSWdhWFIzWkdaZklEMGdhWFIzWkdZN1hHNWNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhaUE5SURBN0lHb2dQQ0J6T3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdjbVVnUFNCeWRIZHpXM0FnS3lCcVhUdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2FXVWdQU0JwZEhkelczQWdLeUJxWFR0Y2JseHVJQ0FnSUNBZ0lDQWdJSFpoY2lCeWJ5QTlJSEowZDNOYmNDQXJJR29nS3lCelhUdGNiaUFnSUNBZ0lDQWdJQ0IyWVhJZ2FXOGdQU0JwZEhkelczQWdLeUJxSUNzZ2MxMDdYRzVjYmlBZ0lDQWdJQ0FnSUNCMllYSWdjbmdnUFNCeWRIZGtabDhnS2lCeWJ5QXRJR2wwZDJSbVh5QXFJR2x2TzF4dVhHNGdJQ0FnSUNBZ0lDQWdhVzhnUFNCeWRIZGtabDhnS2lCcGJ5QXJJR2wwZDJSbVh5QXFJSEp2TzF4dUlDQWdJQ0FnSUNBZ0lISnZJRDBnY25nN1hHNWNiaUFnSUNBZ0lDQWdJQ0J5ZEhkelczQWdLeUJxWFNBOUlISmxJQ3NnY204N1hHNGdJQ0FnSUNBZ0lDQWdhWFIzYzF0d0lDc2dhbDBnUFNCcFpTQXJJR2x2TzF4dVhHNGdJQ0FnSUNBZ0lDQWdjblIzYzF0d0lDc2dhaUFySUhOZElEMGdjbVVnTFNCeWJ6dGNiaUFnSUNBZ0lDQWdJQ0JwZEhkelczQWdLeUJxSUNzZ2MxMGdQU0JwWlNBdElHbHZPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0x5b2dhbk5vYVc1MElHMWhlR1JsY0hSb0lEb2dabUZzYzJVZ0tpOWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2FpQWhQVDBnYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY25nZ1BTQnlkSGRrWmlBcUlISjBkMlJtWHlBdElHbDBkMlJtSUNvZ2FYUjNaR1pmTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwZEhka1psOGdQU0J5ZEhka1ppQXFJR2wwZDJSbVh5QXJJR2wwZDJSbUlDb2djblIzWkdaZk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY25SM1pHWmZJRDBnY25nN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUVaR1ZFMHVjSEp2ZEc5MGVYQmxMbWQxWlhOelRHVnVNVE5pSUQwZ1puVnVZM1JwYjI0Z1ozVmxjM05NWlc0eE0ySWdLRzRzSUcwcElIdGNiaUFnSUNCMllYSWdUaUE5SUUxaGRHZ3ViV0Y0S0cwc0lHNHBJSHdnTVR0Y2JpQWdJQ0IyWVhJZ2IyUmtJRDBnVGlBbUlERTdYRzRnSUNBZ2RtRnlJR2tnUFNBd08xeHVJQ0FnSUdadmNpQW9UaUE5SUU0Z0x5QXlJSHdnTURzZ1Rqc2dUaUE5SUU0Z1BqNCtJREVwSUh0Y2JpQWdJQ0FnSUdrckt6dGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnTVNBOFBDQnBJQ3NnTVNBcklHOWtaRHRjYmlBZ2ZUdGNibHh1SUNCR1JsUk5MbkJ5YjNSdmRIbHdaUzVqYjI1cWRXZGhkR1VnUFNCbWRXNWpkR2x2YmlCamIyNXFkV2RoZEdVZ0tISjNjeXdnYVhkekxDQk9LU0I3WEc0Z0lDQWdhV1lnS0U0Z1BEMGdNU2tnY21WMGRYSnVPMXh1WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JPSUM4Z01qc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdkQ0E5SUhKM2MxdHBYVHRjYmx4dUlDQWdJQ0FnY25kelcybGRJRDBnY25kelcwNGdMU0JwSUMwZ01WMDdYRzRnSUNBZ0lDQnlkM05iVGlBdElHa2dMU0F4WFNBOUlIUTdYRzVjYmlBZ0lDQWdJSFFnUFNCcGQzTmJhVjA3WEc1Y2JpQWdJQ0FnSUdsM2MxdHBYU0E5SUMxcGQzTmJUaUF0SUdrZ0xTQXhYVHRjYmlBZ0lDQWdJR2wzYzF0T0lDMGdhU0F0SURGZElEMGdMWFE3WEc0Z0lDQWdmVnh1SUNCOU8xeHVYRzRnSUVaR1ZFMHVjSEp2ZEc5MGVYQmxMbTV2Y20xaGJHbDZaVEV6WWlBOUlHWjFibU4wYVc5dUlHNXZjbTFoYkdsNlpURXpZaUFvZDNNc0lFNHBJSHRjYmlBZ0lDQjJZWElnWTJGeWNua2dQU0F3TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnVGlBdklESTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJSGNnUFNCTllYUm9Mbkp2ZFc1a0tIZHpXeklnS2lCcElDc2dNVjBnTHlCT0tTQXFJREI0TWpBd01DQXJYRzRnSUNBZ0lDQWdJRTFoZEdndWNtOTFibVFvZDNOYk1pQXFJR2xkSUM4Z1Rpa2dLMXh1SUNBZ0lDQWdJQ0JqWVhKeWVUdGNibHh1SUNBZ0lDQWdkM05iYVYwZ1BTQjNJQ1lnTUhnelptWm1abVptTzF4dVhHNGdJQ0FnSUNCcFppQW9keUE4SURCNE5EQXdNREF3TUNrZ2UxeHVJQ0FnSUNBZ0lDQmpZWEp5ZVNBOUlEQTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQmpZWEp5ZVNBOUlIY2dMeUF3ZURRd01EQXdNREFnZkNBd08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIzY3p0Y2JpQWdmVHRjYmx4dUlDQkdSbFJOTG5CeWIzUnZkSGx3WlM1amIyNTJaWEowTVROaUlEMGdablZ1WTNScGIyNGdZMjl1ZG1WeWRERXpZaUFvZDNNc0lHeGxiaXdnY25kekxDQk9LU0I3WEc0Z0lDQWdkbUZ5SUdOaGNuSjVJRDBnTUR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU3NyS1NCN1hHNGdJQ0FnSUNCallYSnllU0E5SUdOaGNuSjVJQ3NnS0hkelcybGRJSHdnTUNrN1hHNWNiaUFnSUNBZ0lISjNjMXN5SUNvZ2FWMGdQU0JqWVhKeWVTQW1JREI0TVdabVpqc2dZMkZ5Y25rZ1BTQmpZWEp5ZVNBK1BqNGdNVE03WEc0Z0lDQWdJQ0J5ZDNOYk1pQXFJR2tnS3lBeFhTQTlJR05oY25KNUlDWWdNSGd4Wm1abU95QmpZWEp5ZVNBOUlHTmhjbko1SUQ0K1BpQXhNenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJRWVdRZ2QybDBhQ0I2WlhKdlpYTmNiaUFnSUNCbWIzSWdLR2tnUFNBeUlDb2diR1Z1T3lCcElEd2dUanNnS3l0cEtTQjdYRzRnSUNBZ0lDQnlkM05iYVYwZ1BTQXdPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHRnpjMlZ5ZENoallYSnllU0E5UFQwZ01DazdYRzRnSUNBZ1lYTnpaWEowS0NoallYSnllU0FtSUg0d2VERm1abVlwSUQwOVBTQXdLVHRjYmlBZ2ZUdGNibHh1SUNCR1JsUk5MbkJ5YjNSdmRIbHdaUzV6ZEhWaUlEMGdablZ1WTNScGIyNGdjM1IxWWlBb1Rpa2dlMXh1SUNBZ0lIWmhjaUJ3YUNBOUlHNWxkeUJCY25KaGVTaE9LVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRTQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdjR2hiYVYwZ1BTQXdPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCd2FEdGNiaUFnZlR0Y2JseHVJQ0JHUmxSTkxuQnliM1J2ZEhsd1pTNXRkV3h3SUQwZ1puVnVZM1JwYjI0Z2JYVnNjQ0FvZUN3Z2VTd2diM1YwS1NCN1hHNGdJQ0FnZG1GeUlFNGdQU0F5SUNvZ2RHaHBjeTVuZFdWemMweGxiakV6WWloNExteGxibWQwYUN3Z2VTNXNaVzVuZEdncE8xeHVYRzRnSUNBZ2RtRnlJSEppZENBOUlIUm9hWE11YldGclpWSkNWQ2hPS1R0Y2JseHVJQ0FnSUhaaGNpQmZJRDBnZEdocGN5NXpkSFZpS0U0cE8xeHVYRzRnSUNBZ2RtRnlJSEozY3lBOUlHNWxkeUJCY25KaGVTaE9LVHRjYmlBZ0lDQjJZWElnY25kemRDQTlJRzVsZHlCQmNuSmhlU2hPS1R0Y2JpQWdJQ0IyWVhJZ2FYZHpkQ0E5SUc1bGR5QkJjbkpoZVNoT0tUdGNibHh1SUNBZ0lIWmhjaUJ1Y25keklEMGdibVYzSUVGeWNtRjVLRTRwTzF4dUlDQWdJSFpoY2lCdWNuZHpkQ0E5SUc1bGR5QkJjbkpoZVNoT0tUdGNiaUFnSUNCMllYSWdibWwzYzNRZ1BTQnVaWGNnUVhKeVlYa29UaWs3WEc1Y2JpQWdJQ0IyWVhJZ2NtMTNjeUE5SUc5MWRDNTNiM0prY3p0Y2JpQWdJQ0J5YlhkekxteGxibWQwYUNBOUlFNDdYRzVjYmlBZ0lDQjBhR2x6TG1OdmJuWmxjblF4TTJJb2VDNTNiM0prY3l3Z2VDNXNaVzVuZEdnc0lISjNjeXdnVGlrN1hHNGdJQ0FnZEdocGN5NWpiMjUyWlhKME1UTmlLSGt1ZDI5eVpITXNJSGt1YkdWdVozUm9MQ0J1Y25kekxDQk9LVHRjYmx4dUlDQWdJSFJvYVhNdWRISmhibk5tYjNKdEtISjNjeXdnWHl3Z2NuZHpkQ3dnYVhkemRDd2dUaXdnY21KMEtUdGNiaUFnSUNCMGFHbHpMblJ5WVc1elptOXliU2h1Y25kekxDQmZMQ0J1Y25kemRDd2dibWwzYzNRc0lFNHNJSEppZENrN1hHNWNiaUFnSUNCbWIzSWdLSFpoY2lCcElEMGdNRHNnYVNBOElFNDdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RtRnlJSEo0SUQwZ2NuZHpkRnRwWFNBcUlHNXlkM04wVzJsZElDMGdhWGR6ZEZ0cFhTQXFJRzVwZDNOMFcybGRPMXh1SUNBZ0lDQWdhWGR6ZEZ0cFhTQTlJSEozYzNSYmFWMGdLaUJ1YVhkemRGdHBYU0FySUdsM2MzUmJhVjBnS2lCdWNuZHpkRnRwWFR0Y2JpQWdJQ0FnSUhKM2MzUmJhVjBnUFNCeWVEdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbU52Ym1wMVoyRjBaU2h5ZDNOMExDQnBkM04wTENCT0tUdGNiaUFnSUNCMGFHbHpMblJ5WVc1elptOXliU2h5ZDNOMExDQnBkM04wTENCeWJYZHpMQ0JmTENCT0xDQnlZblFwTzF4dUlDQWdJSFJvYVhNdVkyOXVhblZuWVhSbEtISnRkM01zSUY4c0lFNHBPMXh1SUNBZ0lIUm9hWE11Ym05eWJXRnNhWHBsTVROaUtISnRkM01zSUU0cE8xeHVYRzRnSUNBZ2IzVjBMbTVsWjJGMGFYWmxJRDBnZUM1dVpXZGhkR2wyWlNCZUlIa3VibVZuWVhScGRtVTdYRzRnSUNBZ2IzVjBMbXhsYm1kMGFDQTlJSGd1YkdWdVozUm9JQ3NnZVM1c1pXNW5kR2c3WEc0Z0lDQWdjbVYwZFhKdUlHOTFkQzV6ZEhKcGNDZ3BPMXh1SUNCOU8xeHVYRzRnSUM4dklFMTFiSFJwY0d4NUlHQjBhR2x6WUNCaWVTQmdiblZ0WUZ4dUlDQkNUaTV3Y205MGIzUjVjR1V1YlhWc0lEMGdablZ1WTNScGIyNGdiWFZzSUNodWRXMHBJSHRjYmlBZ0lDQjJZWElnYjNWMElEMGdibVYzSUVKT0tHNTFiR3dwTzF4dUlDQWdJRzkxZEM1M2IzSmtjeUE5SUc1bGR5QkJjbkpoZVNoMGFHbHpMbXhsYm1kMGFDQXJJRzUxYlM1c1pXNW5kR2dwTzF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG0xMWJGUnZLRzUxYlN3Z2IzVjBLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5Qk5kV3gwYVhCc2VTQmxiWEJzYjNscGJtY2dSa1pVWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzV0ZFd4bUlEMGdablZ1WTNScGIyNGdiWFZzWmlBb2JuVnRLU0I3WEc0Z0lDQWdkbUZ5SUc5MWRDQTlJRzVsZHlCQ1RpaHVkV3hzS1R0Y2JpQWdJQ0J2ZFhRdWQyOXlaSE1nUFNCdVpYY2dRWEp5WVhrb2RHaHBjeTVzWlc1bmRHZ2dLeUJ1ZFcwdWJHVnVaM1JvS1R0Y2JpQWdJQ0J5WlhSMWNtNGdhblZ0WW05TmRXeFVieWgwYUdsekxDQnVkVzBzSUc5MWRDazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1NXNHRjR3hoWTJVZ1RYVnNkR2x3YkdsallYUnBiMjVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbWx0ZFd3Z1BTQm1kVzVqZEdsdmJpQnBiWFZzSUNodWRXMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYkc5dVpTZ3BMbTExYkZSdktHNTFiU3dnZEdocGN5azdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExtbHRkV3h1SUQwZ1puVnVZM1JwYjI0Z2FXMTFiRzRnS0c1MWJTa2dlMXh1SUNBZ0lHRnpjMlZ5ZENoMGVYQmxiMllnYm5WdElEMDlQU0FuYm5WdFltVnlKeWs3WEc0Z0lDQWdZWE56WlhKMEtHNTFiU0E4SURCNE5EQXdNREF3TUNrN1hHNWNiaUFnSUNBdkx5QkRZWEp5ZVZ4dUlDQWdJSFpoY2lCallYSnllU0E5SURBN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCMGFHbHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdkeUE5SUNoMGFHbHpMbmR2Y21SelcybGRJSHdnTUNrZ0tpQnVkVzA3WEc0Z0lDQWdJQ0IyWVhJZ2JHOGdQU0FvZHlBbUlEQjRNMlptWm1abVppa2dLeUFvWTJGeWNua2dKaUF3ZURObVptWm1abVlwTzF4dUlDQWdJQ0FnWTJGeWNua2dQajQ5SURJMk8xeHVJQ0FnSUNBZ1kyRnljbmtnS3owZ0tIY2dMeUF3ZURRd01EQXdNREFwSUh3Z01EdGNiaUFnSUNBZ0lDOHZJRTVQVkVVNklHeHZJR2x6SURJM1ltbDBJRzFoZUdsdGRXMWNiaUFnSUNBZ0lHTmhjbko1SUNzOUlHeHZJRDQrUGlBeU5qdGNiaUFnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnUFNCc2J5QW1JREI0TTJabVptWm1aanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWTJGeWNua2dJVDA5SURBcElIdGNiaUFnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnUFNCallYSnllVHRjYmlBZ0lDQWdJSFJvYVhNdWJHVnVaM1JvS3lzN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG0xMWJHNGdQU0JtZFc1amRHbHZiaUJ0ZFd4dUlDaHVkVzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHOXVaU2dwTG1sdGRXeHVLRzUxYlNrN1hHNGdJSDA3WEc1Y2JpQWdMeThnWUhSb2FYTmdJQ29nWUhSb2FYTmdYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXpjWElnUFNCbWRXNWpkR2x2YmlCemNYSWdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG0xMWJDaDBhR2x6S1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJnZEdocGMyQWdLaUJnZEdocGMyQWdhVzR0Y0d4aFkyVmNiaUFnUWs0dWNISnZkRzkwZVhCbExtbHpjWElnUFNCbWRXNWpkR2x2YmlCcGMzRnlJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1cGJYVnNLSFJvYVhNdVkyeHZibVVvS1NrN1hHNGdJSDA3WEc1Y2JpQWdMeThnVFdGMGFDNXdiM2NvWUhSb2FYTmdMQ0JnYm5WdFlDbGNiaUFnUWs0dWNISnZkRzkwZVhCbExuQnZkeUE5SUdaMWJtTjBhVzl1SUhCdmR5QW9iblZ0S1NCN1hHNGdJQ0FnZG1GeUlIY2dQU0IwYjBKcGRFRnljbUY1S0c1MWJTazdYRzRnSUNBZ2FXWWdLSGN1YkdWdVozUm9JRDA5UFNBd0tTQnlaWFIxY200Z2JtVjNJRUpPS0RFcE8xeHVYRzRnSUNBZ0x5OGdVMnRwY0NCc1pXRmthVzVuSUhwbGNtOWxjMXh1SUNBZ0lIWmhjaUJ5WlhNZ1BTQjBhR2x6TzF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZHk1c1pXNW5kR2c3SUdrckt5d2djbVZ6SUQwZ2NtVnpMbk54Y2lncEtTQjdYRzRnSUNBZ0lDQnBaaUFvZDF0cFhTQWhQVDBnTUNrZ1luSmxZV3M3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NzcmFTQThJSGN1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJ4SUQwZ2NtVnpMbk54Y2lncE95QnBJRHdnZHk1c1pXNW5kR2c3SUdrckt5d2djU0E5SUhFdWMzRnlLQ2twSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSGRiYVYwZ1BUMDlJREFwSUdOdmJuUnBiblZsTzF4dVhHNGdJQ0FnSUNBZ0lISmxjeUE5SUhKbGN5NXRkV3dvY1NrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSEpsY3p0Y2JpQWdmVHRjYmx4dUlDQXZMeUJUYUdsbWRDMXNaV1owSUdsdUxYQnNZV05sWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVwZFhOb2JHNGdQU0JtZFc1amRHbHZiaUJwZFhOb2JHNGdLR0pwZEhNcElIdGNiaUFnSUNCaGMzTmxjblFvZEhsd1pXOW1JR0pwZEhNZ1BUMDlJQ2R1ZFcxaVpYSW5JQ1ltSUdKcGRITWdQajBnTUNrN1hHNGdJQ0FnZG1GeUlISWdQU0JpYVhSeklDVWdNalk3WEc0Z0lDQWdkbUZ5SUhNZ1BTQW9ZbWwwY3lBdElISXBJQzhnTWpZN1hHNGdJQ0FnZG1GeUlHTmhjbko1VFdGemF5QTlJQ2d3ZURObVptWm1abVlnUGo0K0lDZ3lOaUF0SUhJcEtTQThQQ0FvTWpZZ0xTQnlLVHRjYmlBZ0lDQjJZWElnYVR0Y2JseHVJQ0FnSUdsbUlDaHlJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQjJZWElnWTJGeWNua2dQU0F3TzF4dVhHNGdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnZEdocGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNCMllYSWdibVYzUTJGeWNua2dQU0IwYUdsekxuZHZjbVJ6VzJsZElDWWdZMkZ5Y25sTllYTnJPMXh1SUNBZ0lDQWdJQ0IyWVhJZ1l5QTlJQ2dvZEdocGN5NTNiM0prYzF0cFhTQjhJREFwSUMwZ2JtVjNRMkZ5Y25rcElEdzhJSEk3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0JqSUh3Z1kyRnljbms3WEc0Z0lDQWdJQ0FnSUdOaGNuSjVJRDBnYm1WM1EyRnljbmtnUGo0K0lDZ3lOaUF0SUhJcE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvWTJGeWNua3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNiM0prYzF0cFhTQTlJR05oY25KNU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG14bGJtZDBhQ3NyTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoeklDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCbWIzSWdLR2tnUFNCMGFHbHpMbXhsYm1kMGFDQXRJREU3SUdrZ1BqMGdNRHNnYVMwdEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYVNBcklITmRJRDBnZEdocGN5NTNiM0prYzF0cFhUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElITTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXMmxkSUQwZ01EdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkR2hwY3k1c1pXNW5kR2dnS3owZ2N6dGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXpkSEpwY0NncE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cGMyaHNiaUE5SUdaMWJtTjBhVzl1SUdsemFHeHVJQ2hpYVhSektTQjdYRzRnSUNBZ0x5OGdWRTlFVHlocGJtUjFkRzU1S1RvZ2FXMXdiR1Z0Wlc1MElHMWxYRzRnSUNBZ1lYTnpaWEowS0hSb2FYTXVibVZuWVhScGRtVWdQVDA5SURBcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtbDFjMmhzYmloaWFYUnpLVHRjYmlBZ2ZUdGNibHh1SUNBdkx5QlRhR2xtZEMxeWFXZG9kQ0JwYmkxd2JHRmpaVnh1SUNBdkx5Qk9UMVJGT2lCZ2FHbHVkR0FnYVhNZ1lTQnNiM2RsYzNRZ1ltbDBJR0psWm05eVpTQjBjbUZwYkdsdVp5QjZaWEp2WlhOY2JpQWdMeThnVGs5VVJUb2dhV1lnWUdWNGRHVnVaR1ZrWUNCcGN5QndjbVZ6Wlc1MElDMGdhWFFnZDJsc2JDQmlaU0JtYVd4c1pXUWdkMmwwYUNCa1pYTjBjbTk1WldRZ1ltbDBjMXh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVhWFZ6YUhKdUlEMGdablZ1WTNScGIyNGdhWFZ6YUhKdUlDaGlhWFJ6TENCb2FXNTBMQ0JsZUhSbGJtUmxaQ2tnZTF4dUlDQWdJR0Z6YzJWeWRDaDBlWEJsYjJZZ1ltbDBjeUE5UFQwZ0oyNTFiV0psY2ljZ0ppWWdZbWwwY3lBK1BTQXdLVHRjYmlBZ0lDQjJZWElnYUR0Y2JpQWdJQ0JwWmlBb2FHbHVkQ2tnZTF4dUlDQWdJQ0FnYUNBOUlDaG9hVzUwSUMwZ0tHaHBiblFnSlNBeU5pa3BJQzhnTWpZN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJR2dnUFNBd08xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQnlJRDBnWW1sMGN5QWxJREkyTzF4dUlDQWdJSFpoY2lCeklEMGdUV0YwYUM1dGFXNG9LR0pwZEhNZ0xTQnlLU0F2SURJMkxDQjBhR2x6TG14bGJtZDBhQ2s3WEc0Z0lDQWdkbUZ5SUcxaGMyc2dQU0F3ZURObVptWm1abVlnWGlBb0tEQjRNMlptWm1abVppQStQajRnY2lrZ1BEd2djaWs3WEc0Z0lDQWdkbUZ5SUcxaGMydGxaRmR2Y21SeklEMGdaWGgwWlc1a1pXUTdYRzVjYmlBZ0lDQm9JQzA5SUhNN1hHNGdJQ0FnYUNBOUlFMWhkR2d1YldGNEtEQXNJR2dwTzF4dVhHNGdJQ0FnTHk4Z1JYaDBaVzVrWldRZ2JXOWtaU3dnWTI5d2VTQnRZWE5yWldRZ2NHRnlkRnh1SUNBZ0lHbG1JQ2h0WVhOclpXUlhiM0prY3lrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQnpPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdiV0Z6YTJWa1YyOXlaSE11ZDI5eVpITmJhVjBnUFNCMGFHbHpMbmR2Y21SelcybGRPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdiV0Z6YTJWa1YyOXlaSE11YkdWdVozUm9JRDBnY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2N5QTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0x5OGdUbTh0YjNBc0lIZGxJSE5vYjNWc1pDQnViM1FnYlc5MlpTQmhibmwwYUdsdVp5QmhkQ0JoYkd4Y2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb2FYTXViR1Z1WjNSb0lENGdjeWtnZTF4dUlDQWdJQ0FnZEdocGN5NXNaVzVuZEdnZ0xUMGdjenRjYmlBZ0lDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYVYwZ1BTQjBhR2x6TG5kdmNtUnpXMmtnS3lCelhUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdocGN5NTNiM0prYzFzd1hTQTlJREE3WEc0Z0lDQWdJQ0IwYUdsekxteGxibWQwYUNBOUlERTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR05oY25KNUlEMGdNRHRjYmlBZ0lDQm1iM0lnS0drZ1BTQjBhR2x6TG14bGJtZDBhQ0F0SURFN0lHa2dQajBnTUNBbUppQW9ZMkZ5Y25rZ0lUMDlJREFnZkh3Z2FTQStQU0JvS1RzZ2FTMHRLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2QyOXlaQ0E5SUhSb2FYTXVkMjl5WkhOYmFWMGdmQ0F3TzF4dUlDQWdJQ0FnZEdocGN5NTNiM0prYzF0cFhTQTlJQ2hqWVhKeWVTQThQQ0FvTWpZZ0xTQnlLU2tnZkNBb2QyOXlaQ0ErUGo0Z2NpazdYRzRnSUNBZ0lDQmpZWEp5ZVNBOUlIZHZjbVFnSmlCdFlYTnJPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRkIxYzJnZ1kyRnljbWxsWkNCaWFYUnpJR0Z6SUdFZ2JXRnphMXh1SUNBZ0lHbG1JQ2h0WVhOclpXUlhiM0prY3lBbUppQmpZWEp5ZVNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnYldGemEyVmtWMjl5WkhNdWQyOXlaSE5iYldGemEyVmtWMjl5WkhNdWJHVnVaM1JvS3l0ZElEMGdZMkZ5Y25rN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXekJkSUQwZ01EdGNiaUFnSUNBZ0lIUm9hWE11YkdWdVozUm9JRDBnTVR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1emRISnBjQ2dwTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVwYzJoeWJpQTlJR1oxYm1OMGFXOXVJR2x6YUhKdUlDaGlhWFJ6TENCb2FXNTBMQ0JsZUhSbGJtUmxaQ2tnZTF4dUlDQWdJQzh2SUZSUFJFOG9hVzVrZFhSdWVTazZJR2x0Y0d4bGJXVnVkQ0J0WlZ4dUlDQWdJR0Z6YzJWeWRDaDBhR2x6TG01bFoyRjBhWFpsSUQwOVBTQXdLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVwZFhOb2NtNG9ZbWwwY3l3Z2FHbHVkQ3dnWlhoMFpXNWtaV1FwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRk5vYVdaMExXeGxablJjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbk5vYkc0Z1BTQm1kVzVqZEdsdmJpQnphR3h1SUNoaWFYUnpLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTJ4dmJtVW9LUzVwYzJoc2JpaGlhWFJ6S1R0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1ZFhOb2JHNGdQU0JtZFc1amRHbHZiaUIxYzJoc2JpQW9ZbWwwY3lrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNiMjVsS0NrdWFYVnphR3h1S0dKcGRITXBPMXh1SUNCOU8xeHVYRzRnSUM4dklGTm9hV1owTFhKcFoyaDBYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXphSEp1SUQwZ1puVnVZM1JwYjI0Z2MyaHliaUFvWW1sMGN5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU5zYjI1bEtDa3VhWE5vY200b1ltbDBjeWs3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMblZ6YUhKdUlEMGdablZ1WTNScGIyNGdkWE5vY200Z0tHSnBkSE1wSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJHOXVaU2dwTG1sMWMyaHliaWhpYVhSektUdGNiaUFnZlR0Y2JseHVJQ0F2THlCVVpYTjBJR2xtSUc0Z1ltbDBJR2x6SUhObGRGeHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdWRHVnpkRzRnUFNCbWRXNWpkR2x2YmlCMFpYTjBiaUFvWW1sMEtTQjdYRzRnSUNBZ1lYTnpaWEowS0hSNWNHVnZaaUJpYVhRZ1BUMDlJQ2R1ZFcxaVpYSW5JQ1ltSUdKcGRDQStQU0F3S1R0Y2JpQWdJQ0IyWVhJZ2NpQTlJR0pwZENBbElESTJPMXh1SUNBZ0lIWmhjaUJ6SUQwZ0tHSnBkQ0F0SUhJcElDOGdNalk3WEc0Z0lDQWdkbUZ5SUhFZ1BTQXhJRHc4SUhJN1hHNWNiaUFnSUNBdkx5QkdZWE4wSUdOaGMyVTZJR0pwZENCcGN5QnRkV05vSUdocFoyaGxjaUIwYUdGdUlHRnNiQ0JsZUdsemRHbHVaeUIzYjNKa2MxeHVJQ0FnSUdsbUlDaDBhR2x6TG14bGJtZDBhQ0E4UFNCektTQnlaWFIxY200Z1ptRnNjMlU3WEc1Y2JpQWdJQ0F2THlCRGFHVmpheUJpYVhRZ1lXNWtJSEpsZEhWeWJseHVJQ0FnSUhaaGNpQjNJRDBnZEdocGN5NTNiM0prYzF0elhUdGNibHh1SUNBZ0lISmxkSFZ5YmlBaElTaDNJQ1lnY1NrN1hHNGdJSDA3WEc1Y2JpQWdMeThnVW1WMGRYSnVJRzl1YkhrZ2JHOTNaWEp6SUdKcGRITWdiMllnYm5WdFltVnlJQ2hwYmkxd2JHRmpaU2xjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbWx0WVhOcmJpQTlJR1oxYm1OMGFXOXVJR2x0WVhOcmJpQW9ZbWwwY3lrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gwZVhCbGIyWWdZbWwwY3lBOVBUMGdKMjUxYldKbGNpY2dKaVlnWW1sMGN5QStQU0F3S1R0Y2JpQWdJQ0IyWVhJZ2NpQTlJR0pwZEhNZ0pTQXlOanRjYmlBZ0lDQjJZWElnY3lBOUlDaGlhWFJ6SUMwZ2Npa2dMeUF5Tmp0Y2JseHVJQ0FnSUdGemMyVnlkQ2gwYUdsekxtNWxaMkYwYVhabElEMDlQU0F3TENBbmFXMWhjMnR1SUhkdmNtdHpJRzl1YkhrZ2QybDBhQ0J3YjNOcGRHbDJaU0J1ZFcxaVpYSnpKeWs3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQRDBnY3lrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSElnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJSE1yS3p0Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1c1pXNW5kR2dnUFNCTllYUm9MbTFwYmloekxDQjBhR2x6TG14bGJtZDBhQ2s3WEc1Y2JpQWdJQ0JwWmlBb2NpQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ2RtRnlJRzFoYzJzZ1BTQXdlRE5tWm1abVptWWdYaUFvS0RCNE0yWm1abVptWmlBK1BqNGdjaWtnUER3Z2NpazdYRzRnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXM1JvYVhNdWJHVnVaM1JvSUMwZ01WMGdKajBnYldGemF6dGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXpkSEpwY0NncE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUZKbGRIVnliaUJ2Ym14NUlHeHZkMlZ5Y3lCaWFYUnpJRzltSUc1MWJXSmxjbHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXViV0Z6YTI0Z1BTQm1kVzVqZEdsdmJpQnRZWE5yYmlBb1ltbDBjeWtnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1Oc2IyNWxLQ2t1YVcxaGMydHVLR0pwZEhNcE8xeHVJQ0I5TzF4dVhHNGdJQzh2SUVGa1pDQndiR0ZwYmlCdWRXMWlaWElnWUc1MWJXQWdkRzhnWUhSb2FYTmdYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXBZV1JrYmlBOUlHWjFibU4wYVc5dUlHbGhaR1J1SUNodWRXMHBJSHRjYmlBZ0lDQmhjM05sY25Rb2RIbHdaVzltSUc1MWJTQTlQVDBnSjI1MWJXSmxjaWNwTzF4dUlDQWdJR0Z6YzJWeWRDaHVkVzBnUENBd2VEUXdNREF3TURBcE8xeHVJQ0FnSUdsbUlDaHVkVzBnUENBd0tTQnlaWFIxY200Z2RHaHBjeTVwYzNWaWJpZ3RiblZ0S1R0Y2JseHVJQ0FnSUM4dklGQnZjM05wWW14bElITnBaMjRnWTJoaGJtZGxYRzRnSUNBZ2FXWWdLSFJvYVhNdWJtVm5ZWFJwZG1VZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG14bGJtZDBhQ0E5UFQwZ01TQW1KaUFvZEdocGN5NTNiM0prYzFzd1hTQjhJREFwSUR3Z2JuVnRLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYk1GMGdQU0J1ZFcwZ0xTQW9kR2hwY3k1M2IzSmtjMXN3WFNCOElEQXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtNWxaMkYwYVhabElEMGdNRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIUm9hWE11Ym1WbllYUnBkbVVnUFNBd08xeHVJQ0FnSUNBZ2RHaHBjeTVwYzNWaWJpaHVkVzBwTzF4dUlDQWdJQ0FnZEdocGN5NXVaV2RoZEdsMlpTQTlJREU3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCQlpHUWdkMmwwYUc5MWRDQmphR1ZqYTNOY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmFXRmtaRzRvYm5WdEtUdGNiaUFnZlR0Y2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdVgybGhaR1J1SUQwZ1puVnVZM1JwYjI0Z1gybGhaR1J1SUNodWRXMHBJSHRjYmlBZ0lDQjBhR2x6TG5kdmNtUnpXekJkSUNzOUlHNTFiVHRjYmx4dUlDQWdJQzh2SUVOaGNuSjVYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14bGJtZDBhQ0FtSmlCMGFHbHpMbmR2Y21SelcybGRJRDQ5SURCNE5EQXdNREF3TURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6VzJsZElDMDlJREI0TkRBd01EQXdNRHRjYmlBZ0lDQWdJR2xtSUNocElEMDlQU0IwYUdsekxteGxibWQwYUNBdElERXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTNiM0prYzF0cElDc2dNVjBnUFNBeE8xeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTUzYjNKa2MxdHBJQ3NnTVYwckt6dGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnZEdocGN5NXNaVzVuZEdnZ1BTQk5ZWFJvTG0xaGVDaDBhR2x6TG14bGJtZDBhQ3dnYVNBcklERXBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMDdYRzVjYmlBZ0x5OGdVM1ZpZEhKaFkzUWdjR3hoYVc0Z2JuVnRZbVZ5SUdCdWRXMWdJR1p5YjIwZ1lIUm9hWE5nWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVwYzNWaWJpQTlJR1oxYm1OMGFXOXVJR2x6ZFdKdUlDaHVkVzBwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kSGx3Wlc5bUlHNTFiU0E5UFQwZ0oyNTFiV0psY2ljcE8xeHVJQ0FnSUdGemMyVnlkQ2h1ZFcwZ1BDQXdlRFF3TURBd01EQXBPMXh1SUNBZ0lHbG1JQ2h1ZFcwZ1BDQXdLU0J5WlhSMWNtNGdkR2hwY3k1cFlXUmtiaWd0Ym5WdEtUdGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtNWxaMkYwYVhabElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbTVsWjJGMGFYWmxJRDBnTUR0Y2JpQWdJQ0FnSUhSb2FYTXVhV0ZrWkc0b2JuVnRLVHRjYmlBZ0lDQWdJSFJvYVhNdWJtVm5ZWFJwZG1VZ1BTQXhPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1M2IzSmtjMXN3WFNBdFBTQnVkVzA3WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTVzWlc1bmRHZ2dQVDA5SURFZ0ppWWdkR2hwY3k1M2IzSmtjMXN3WFNBOElEQXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iTUYwZ1BTQXRkR2hwY3k1M2IzSmtjMXN3WFR0Y2JpQWdJQ0FnSUhSb2FYTXVibVZuWVhScGRtVWdQU0F4TzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQXZMeUJEWVhKeWVWeHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14bGJtZDBhQ0FtSmlCMGFHbHpMbmR2Y21SelcybGRJRHdnTURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdLejBnTUhnME1EQXdNREF3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbmR2Y21Selcya2dLeUF4WFNBdFBTQXhPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wY21sd0tDazdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExtRmtaRzRnUFNCbWRXNWpkR2x2YmlCaFpHUnVJQ2h1ZFcwcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiRzl1WlNncExtbGhaR1J1S0c1MWJTazdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExuTjFZbTRnUFNCbWRXNWpkR2x2YmlCemRXSnVJQ2h1ZFcwcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWpiRzl1WlNncExtbHpkV0p1S0c1MWJTazdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExtbGhZbk1nUFNCbWRXNWpkR2x2YmlCcFlXSnpJQ2dwSUh0Y2JpQWdJQ0IwYUdsekxtNWxaMkYwYVhabElEMGdNRHRjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVoWW5NZ1BTQm1kVzVqZEdsdmJpQmhZbk1nS0NrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtTnNiMjVsS0NrdWFXRmljeWdwTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVmYVhOb2JHNXpkV0p0ZFd3Z1BTQm1kVzVqZEdsdmJpQmZhWE5vYkc1emRXSnRkV3dnS0c1MWJTd2diWFZzTENCemFHbG1kQ2tnZTF4dUlDQWdJSFpoY2lCc1pXNGdQU0J1ZFcwdWJHVnVaM1JvSUNzZ2MyaHBablE3WEc0Z0lDQWdkbUZ5SUdrN1hHNWNiaUFnSUNCMGFHbHpMbDlsZUhCaGJtUW9iR1Z1S1R0Y2JseHVJQ0FnSUhaaGNpQjNPMXh1SUNBZ0lIWmhjaUJqWVhKeWVTQTlJREE3WEc0Z0lDQWdabTl5SUNocElEMGdNRHNnYVNBOElHNTFiUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2R5QTlJQ2gwYUdsekxuZHZjbVJ6VzJrZ0t5QnphR2xtZEYwZ2ZDQXdLU0FySUdOaGNuSjVPMXh1SUNBZ0lDQWdkbUZ5SUhKcFoyaDBJRDBnS0c1MWJTNTNiM0prYzF0cFhTQjhJREFwSUNvZ2JYVnNPMXh1SUNBZ0lDQWdkeUF0UFNCeWFXZG9kQ0FtSURCNE0yWm1abVptWmp0Y2JpQWdJQ0FnSUdOaGNuSjVJRDBnS0hjZ1BqNGdNallwSUMwZ0tDaHlhV2RvZENBdklEQjROREF3TURBd01Da2dmQ0F3S1R0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFTQXJJSE5vYVdaMFhTQTlJSGNnSmlBd2VETm1abVptWm1ZN1hHNGdJQ0FnZlZ4dUlDQWdJR1p2Y2lBb095QnBJRHdnZEdocGN5NXNaVzVuZEdnZ0xTQnphR2xtZERzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IzSUQwZ0tIUm9hWE11ZDI5eVpITmJhU0FySUhOb2FXWjBYU0I4SURBcElDc2dZMkZ5Y25rN1hHNGdJQ0FnSUNCallYSnllU0E5SUhjZ1BqNGdNalk3WEc0Z0lDQWdJQ0IwYUdsekxuZHZjbVJ6VzJrZ0t5QnphR2xtZEYwZ1BTQjNJQ1lnTUhnelptWm1abVptTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoallYSnllU0E5UFQwZ01Da2djbVYwZFhKdUlIUm9hWE11YzNSeWFYQW9LVHRjYmx4dUlDQWdJQzh2SUZOMVluUnlZV04wYVc5dUlHOTJaWEptYkc5M1hHNGdJQ0FnWVhOelpYSjBLR05oY25KNUlEMDlQU0F0TVNrN1hHNGdJQ0FnWTJGeWNua2dQU0F3TzF4dUlDQWdJR1p2Y2lBb2FTQTlJREE3SUdrZ1BDQjBhR2x6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQjNJRDBnTFNoMGFHbHpMbmR2Y21SelcybGRJSHdnTUNrZ0t5QmpZWEp5ZVR0Y2JpQWdJQ0FnSUdOaGNuSjVJRDBnZHlBK1BpQXlOanRjYmlBZ0lDQWdJSFJvYVhNdWQyOXlaSE5iYVYwZ1BTQjNJQ1lnTUhnelptWm1abVptTzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG01bFoyRjBhWFpsSUQwZ01UdGNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk4wY21sd0tDazdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExsOTNiM0prUkdsMklEMGdablZ1WTNScGIyNGdYM2R2Y21SRWFYWWdLRzUxYlN3Z2JXOWtaU2tnZTF4dUlDQWdJSFpoY2lCemFHbG1kQ0E5SUhSb2FYTXViR1Z1WjNSb0lDMGdiblZ0TG14bGJtZDBhRHRjYmx4dUlDQWdJSFpoY2lCaElEMGdkR2hwY3k1amJHOXVaU2dwTzF4dUlDQWdJSFpoY2lCaUlEMGdiblZ0TzF4dVhHNGdJQ0FnTHk4Z1RtOXliV0ZzYVhwbFhHNGdJQ0FnZG1GeUlHSm9hU0E5SUdJdWQyOXlaSE5iWWk1c1pXNW5kR2dnTFNBeFhTQjhJREE3WEc0Z0lDQWdkbUZ5SUdKb2FVSnBkSE1nUFNCMGFHbHpMbDlqYjNWdWRFSnBkSE1vWW1ocEtUdGNiaUFnSUNCemFHbG1kQ0E5SURJMklDMGdZbWhwUW1sMGN6dGNiaUFnSUNCcFppQW9jMmhwWm5RZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUdJZ1BTQmlMblZ6YUd4dUtITm9hV1owS1R0Y2JpQWdJQ0FnSUdFdWFYVnphR3h1S0hOb2FXWjBLVHRjYmlBZ0lDQWdJR0pvYVNBOUlHSXVkMjl5WkhOYllpNXNaVzVuZEdnZ0xTQXhYU0I4SURBN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1NXNXBkR2xoYkdsNlpTQnhkVzkwYVdWdWRGeHVJQ0FnSUhaaGNpQnRJRDBnWVM1c1pXNW5kR2dnTFNCaUxteGxibWQwYUR0Y2JpQWdJQ0IyWVhJZ2NUdGNibHh1SUNBZ0lHbG1JQ2h0YjJSbElDRTlQU0FuYlc5a0p5a2dlMXh1SUNBZ0lDQWdjU0E5SUc1bGR5QkNUaWh1ZFd4c0tUdGNiaUFnSUNBZ0lIRXViR1Z1WjNSb0lEMGdiU0FySURFN1hHNGdJQ0FnSUNCeExuZHZjbVJ6SUQwZ2JtVjNJRUZ5Y21GNUtIRXViR1Z1WjNSb0tUdGNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2djUzVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnhMbmR2Y21SelcybGRJRDBnTUR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ1pHbG1aaUE5SUdFdVkyeHZibVVvS1M1ZmFYTm9iRzV6ZFdKdGRXd29ZaXdnTVN3Z2JTazdYRzRnSUNBZ2FXWWdLR1JwWm1ZdWJtVm5ZWFJwZG1VZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUdFZ1BTQmthV1ptTzF4dUlDQWdJQ0FnYVdZZ0tIRXBJSHRjYmlBZ0lDQWdJQ0FnY1M1M2IzSmtjMXR0WFNBOUlERTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ptOXlJQ2gyWVhJZ2FpQTlJRzBnTFNBeE95QnFJRDQ5SURBN0lHb3RMU2tnZTF4dUlDQWdJQ0FnZG1GeUlIRnFJRDBnS0dFdWQyOXlaSE5iWWk1c1pXNW5kR2dnS3lCcVhTQjhJREFwSUNvZ01IZzBNREF3TURBd0lDdGNiaUFnSUNBZ0lDQWdLR0V1ZDI5eVpITmJZaTVzWlc1bmRHZ2dLeUJxSUMwZ01WMGdmQ0F3S1R0Y2JseHVJQ0FnSUNBZ0x5OGdUazlVUlRvZ0tIRnFJQzhnWW1ocEtTQnBjeUFvTUhnelptWm1abVptSUNvZ01IZzBNREF3TURBd0lDc2dNSGd6Wm1abVptWm1LU0F2SURCNE1qQXdNREF3TUNCdFlYaGNiaUFnSUNBZ0lDOHZJQ2d3ZURkbVptWm1abVlwWEc0Z0lDQWdJQ0J4YWlBOUlFMWhkR2d1YldsdUtDaHhhaUF2SUdKb2FTa2dmQ0F3TENBd2VETm1abVptWm1ZcE8xeHVYRzRnSUNBZ0lDQmhMbDlwYzJoc2JuTjFZbTExYkNoaUxDQnhhaXdnYWlrN1hHNGdJQ0FnSUNCM2FHbHNaU0FvWVM1dVpXZGhkR2wyWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNCeGFpMHRPMXh1SUNBZ0lDQWdJQ0JoTG01bFoyRjBhWFpsSUQwZ01EdGNiaUFnSUNBZ0lDQWdZUzVmYVhOb2JHNXpkV0p0ZFd3b1lpd2dNU3dnYWlrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWVM1cGMxcGxjbThvS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR0V1Ym1WbllYUnBkbVVnWGowZ01UdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hFcElIdGNiaUFnSUNBZ0lDQWdjUzUzYjNKa2MxdHFYU0E5SUhGcU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2NTa2dlMXh1SUNBZ0lDQWdjUzV6ZEhKcGNDZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCaExuTjBjbWx3S0NrN1hHNWNiaUFnSUNBdkx5QkVaVzV2Y20xaGJHbDZaVnh1SUNBZ0lHbG1JQ2h0YjJSbElDRTlQU0FuWkdsMkp5QW1KaUJ6YUdsbWRDQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ1lTNXBkWE5vY200b2MyaHBablFwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQmthWFk2SUhFZ2ZId2diblZzYkN4Y2JpQWdJQ0FnSUcxdlpEb2dZVnh1SUNBZ0lIMDdYRzRnSUgwN1hHNWNiaUFnTHk4Z1RrOVVSVG9nTVNrZ1lHMXZaR1ZnSUdOaGJpQmlaU0J6WlhRZ2RHOGdZRzF2WkdBZ2RHOGdjbVZ4ZFdWemRDQnRiMlFnYjI1c2VTeGNiaUFnTHk4Z0lDQWdJQ0FnZEc4Z1lHUnBkbUFnZEc4Z2NtVnhkV1Z6ZENCa2FYWWdiMjVzZVN3Z2IzSWdZbVVnWVdKelpXNTBJSFJ2WEc0Z0lDOHZJQ0FnSUNBZ0lISmxjWFZsYzNRZ1ltOTBhQ0JrYVhZZ0ppQnRiMlJjYmlBZ0x5OGdJQ0FnSUNBZ01pa2dZSEJ2YzJsMGFYWmxZQ0JwY3lCMGNuVmxJR2xtSUhWdWMybG5ibVZrSUcxdlpDQnBjeUJ5WlhGMVpYTjBaV1JjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbVJwZG0xdlpDQTlJR1oxYm1OMGFXOXVJR1JwZG0xdlpDQW9iblZ0TENCdGIyUmxMQ0J3YjNOcGRHbDJaU2tnZTF4dUlDQWdJR0Z6YzJWeWRDZ2hiblZ0TG1seldtVnlieWdwS1R0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG1seldtVnlieWdwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNCa2FYWTZJRzVsZHlCQ1RpZ3dLU3hjYmlBZ0lDQWdJQ0FnYlc5a09pQnVaWGNnUWs0b01DbGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR1JwZGl3Z2JXOWtMQ0J5WlhNN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Ym1WbllYUnBkbVVnSVQwOUlEQWdKaVlnYm5WdExtNWxaMkYwYVhabElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCeVpYTWdQU0IwYUdsekxtNWxaeWdwTG1ScGRtMXZaQ2h1ZFcwc0lHMXZaR1VwTzF4dVhHNGdJQ0FnSUNCcFppQW9iVzlrWlNBaFBUMGdKMjF2WkNjcElIdGNiaUFnSUNBZ0lDQWdaR2wySUQwZ2NtVnpMbVJwZGk1dVpXY29LVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tHMXZaR1VnSVQwOUlDZGthWFluS1NCN1hHNGdJQ0FnSUNBZ0lHMXZaQ0E5SUhKbGN5NXRiMlF1Ym1WbktDazdYRzRnSUNBZ0lDQWdJR2xtSUNod2IzTnBkR2wyWlNBbUppQnRiMlF1Ym1WbllYUnBkbVVnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCdGIyUXVhV0ZrWkNodWRXMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUdScGRqb2daR2wyTEZ4dUlDQWdJQ0FnSUNCdGIyUTZJRzF2WkZ4dUlDQWdJQ0FnZlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTV1WldkaGRHbDJaU0E5UFQwZ01DQW1KaUJ1ZFcwdWJtVm5ZWFJwZG1VZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUhKbGN5QTlJSFJvYVhNdVpHbDJiVzlrS0c1MWJTNXVaV2NvS1N3Z2JXOWtaU2s3WEc1Y2JpQWdJQ0FnSUdsbUlDaHRiMlJsSUNFOVBTQW5iVzlrSnlrZ2UxeHVJQ0FnSUNBZ0lDQmthWFlnUFNCeVpYTXVaR2wyTG01bFp5Z3BPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdJQ0JrYVhZNklHUnBkaXhjYmlBZ0lDQWdJQ0FnYlc5a09pQnlaWE11Ylc5a1hHNGdJQ0FnSUNCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDZ29kR2hwY3k1dVpXZGhkR2wyWlNBbUlHNTFiUzV1WldkaGRHbDJaU2tnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJSEpsY3lBOUlIUm9hWE11Ym1WbktDa3VaR2wyYlc5a0tHNTFiUzV1Wldjb0tTd2diVzlrWlNrN1hHNWNiaUFnSUNBZ0lHbG1JQ2h0YjJSbElDRTlQU0FuWkdsMkp5a2dlMXh1SUNBZ0lDQWdJQ0J0YjJRZ1BTQnlaWE11Ylc5a0xtNWxaeWdwTzF4dUlDQWdJQ0FnSUNCcFppQW9jRzl6YVhScGRtVWdKaVlnYlc5a0xtNWxaMkYwYVhabElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdiVzlrTG1semRXSW9iblZ0S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQmthWFk2SUhKbGN5NWthWFlzWEc0Z0lDQWdJQ0FnSUcxdlpEb2diVzlrWEc0Z0lDQWdJQ0I5TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVKdmRHZ2diblZ0WW1WeWN5QmhjbVVnY0c5emFYUnBkbVVnWVhRZ2RHaHBjeUJ3YjJsdWRGeHVYRzRnSUNBZ0x5OGdVM1J5YVhBZ1ltOTBhQ0J1ZFcxaVpYSnpJSFJ2SUdGd2NISnZlR2x0WVhSbElITm9hV1owSUhaaGJIVmxYRzRnSUNBZ2FXWWdLRzUxYlM1c1pXNW5kR2dnUGlCMGFHbHpMbXhsYm1kMGFDQjhmQ0IwYUdsekxtTnRjQ2h1ZFcwcElEd2dNQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnWkdsMk9pQnVaWGNnUWs0b01Da3NYRzRnSUNBZ0lDQWdJRzF2WkRvZ2RHaHBjMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJXWlhKNUlITm9iM0owSUhKbFpIVmpkR2x2Ymx4dUlDQWdJR2xtSUNodWRXMHViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnSUNCcFppQW9iVzlrWlNBOVBUMGdKMlJwZGljcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0JrYVhZNklIUm9hWE11WkdsMmJpaHVkVzB1ZDI5eVpITmJNRjBwTEZ4dUlDQWdJQ0FnSUNBZ0lHMXZaRG9nYm5Wc2JGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2JXOWtaU0E5UFQwZ0oyMXZaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQmthWFk2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJQ0FnYlc5a09pQnVaWGNnUWs0b2RHaHBjeTV0YjJSdUtHNTFiUzUzYjNKa2Mxc3dYU2twWEc0Z0lDQWdJQ0FnSUgwN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lHUnBkam9nZEdocGN5NWthWFp1S0c1MWJTNTNiM0prYzFzd1hTa3NYRzRnSUNBZ0lDQWdJRzF2WkRvZ2JtVjNJRUpPS0hSb2FYTXViVzlrYmlodWRXMHVkMjl5WkhOYk1GMHBLVnh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmZDI5eVpFUnBkaWh1ZFcwc0lHMXZaR1VwTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRVpwYm1RZ1lIUm9hWE5nSUM4Z1lHNTFiV0JjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbVJwZGlBOUlHWjFibU4wYVc5dUlHUnBkaUFvYm5WdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaR2wyYlc5a0tHNTFiU3dnSjJScGRpY3NJR1poYkhObEtTNWthWFk3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdSbWx1WkNCZ2RHaHBjMkFnSlNCZ2JuVnRZRnh1SUNCQ1RpNXdjbTkwYjNSNWNHVXViVzlrSUQwZ1puVnVZM1JwYjI0Z2JXOWtJQ2h1ZFcwcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NWthWFp0YjJRb2JuVnRMQ0FuYlc5a0p5d2dabUZzYzJVcExtMXZaRHRjYmlBZ2ZUdGNibHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVkVzF2WkNBOUlHWjFibU4wYVc5dUlIVnRiMlFnS0c1MWJTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVJwZG0xdlpDaHVkVzBzSUNkdGIyUW5MQ0IwY25WbEtTNXRiMlE3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdSbWx1WkNCU2IzVnVaQ2hnZEdocGMyQWdMeUJnYm5WdFlDbGNiaUFnUWs0dWNISnZkRzkwZVhCbExtUnBkbEp2ZFc1a0lEMGdablZ1WTNScGIyNGdaR2wyVW05MWJtUWdLRzUxYlNrZ2UxeHVJQ0FnSUhaaGNpQmtiU0E5SUhSb2FYTXVaR2wyYlc5a0tHNTFiU2s3WEc1Y2JpQWdJQ0F2THlCR1lYTjBJR05oYzJVZ0xTQmxlR0ZqZENCa2FYWnBjMmx2Ymx4dUlDQWdJR2xtSUNoa2JTNXRiMlF1YVhOYVpYSnZLQ2twSUhKbGRIVnliaUJrYlM1a2FYWTdYRzVjYmlBZ0lDQjJZWElnYlc5a0lEMGdaRzB1WkdsMkxtNWxaMkYwYVhabElDRTlQU0F3SUQ4Z1pHMHViVzlrTG1semRXSW9iblZ0S1NBNklHUnRMbTF2WkR0Y2JseHVJQ0FnSUhaaGNpQm9ZV3htSUQwZ2JuVnRMblZ6YUhKdUtERXBPMXh1SUNBZ0lIWmhjaUJ5TWlBOUlHNTFiUzVoYm1Sc2JpZ3hLVHRjYmlBZ0lDQjJZWElnWTIxd0lEMGdiVzlrTG1OdGNDaG9ZV3htS1R0Y2JseHVJQ0FnSUM4dklGSnZkVzVrSUdSdmQyNWNiaUFnSUNCcFppQW9ZMjF3SUR3Z01DQjhmQ0J5TWlBOVBUMGdNU0FtSmlCamJYQWdQVDA5SURBcElISmxkSFZ5YmlCa2JTNWthWFk3WEc1Y2JpQWdJQ0F2THlCU2IzVnVaQ0IxY0Z4dUlDQWdJSEpsZEhWeWJpQmtiUzVrYVhZdWJtVm5ZWFJwZG1VZ0lUMDlJREFnUHlCa2JTNWthWFl1YVhOMVltNG9NU2tnT2lCa2JTNWthWFl1YVdGa1pHNG9NU2s3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbTF2Wkc0Z1BTQm1kVzVqZEdsdmJpQnRiMlJ1SUNodWRXMHBJSHRjYmlBZ0lDQmhjM05sY25Rb2JuVnRJRHc5SURCNE0yWm1abVptWmlrN1hHNGdJQ0FnZG1GeUlIQWdQU0FvTVNBOFBDQXlOaWtnSlNCdWRXMDdYRzVjYmlBZ0lDQjJZWElnWVdOaklEMGdNRHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnZEdocGN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJR2t0TFNrZ2UxeHVJQ0FnSUNBZ1lXTmpJRDBnS0hBZ0tpQmhZMk1nS3lBb2RHaHBjeTUzYjNKa2MxdHBYU0I4SURBcEtTQWxJRzUxYlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdZV05qTzF4dUlDQjlPMXh1WEc0Z0lDOHZJRWx1TFhCc1lXTmxJR1JwZG1semFXOXVJR0o1SUc1MWJXSmxjbHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVhV1JwZG00Z1BTQm1kVzVqZEdsdmJpQnBaR2wyYmlBb2JuVnRLU0I3WEc0Z0lDQWdZWE56WlhKMEtHNTFiU0E4UFNBd2VETm1abVptWm1ZcE8xeHVYRzRnSUNBZ2RtRnlJR05oY25KNUlEMGdNRHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnZEdocGN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJR2t0TFNrZ2UxeHVJQ0FnSUNBZ2RtRnlJSGNnUFNBb2RHaHBjeTUzYjNKa2MxdHBYU0I4SURBcElDc2dZMkZ5Y25rZ0tpQXdlRFF3TURBd01EQTdYRzRnSUNBZ0lDQjBhR2x6TG5kdmNtUnpXMmxkSUQwZ0tIY2dMeUJ1ZFcwcElId2dNRHRjYmlBZ0lDQWdJR05oY25KNUlEMGdkeUFsSUc1MWJUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXpkSEpwY0NncE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1a2FYWnVJRDBnWm5WdVkzUnBiMjRnWkdsMmJpQW9iblZ0S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyeHZibVVvS1M1cFpHbDJiaWh1ZFcwcE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1bFoyTmtJRDBnWm5WdVkzUnBiMjRnWldkalpDQW9jQ2tnZTF4dUlDQWdJR0Z6YzJWeWRDaHdMbTVsWjJGMGFYWmxJRDA5UFNBd0tUdGNiaUFnSUNCaGMzTmxjblFvSVhBdWFYTmFaWEp2S0NrcE8xeHVYRzRnSUNBZ2RtRnlJSGdnUFNCMGFHbHpPMXh1SUNBZ0lIWmhjaUI1SUQwZ2NDNWpiRzl1WlNncE8xeHVYRzRnSUNBZ2FXWWdLSGd1Ym1WbllYUnBkbVVnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJSGdnUFNCNExuVnRiMlFvY0NrN1hHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJSGdnUFNCNExtTnNiMjVsS0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1FTQXFJSGdnS3lCQ0lDb2dlU0E5SUhoY2JpQWdJQ0IyWVhJZ1FTQTlJRzVsZHlCQ1RpZ3hLVHRjYmlBZ0lDQjJZWElnUWlBOUlHNWxkeUJDVGlnd0tUdGNibHh1SUNBZ0lDOHZJRU1nS2lCNElDc2dSQ0FxSUhrZ1BTQjVYRzRnSUNBZ2RtRnlJRU1nUFNCdVpYY2dRazRvTUNrN1hHNGdJQ0FnZG1GeUlFUWdQU0J1WlhjZ1FrNG9NU2s3WEc1Y2JpQWdJQ0IyWVhJZ1p5QTlJREE3WEc1Y2JpQWdJQ0IzYUdsc1pTQW9lQzVwYzBWMlpXNG9LU0FtSmlCNUxtbHpSWFpsYmlncEtTQjdYRzRnSUNBZ0lDQjRMbWwxYzJoeWJpZ3hLVHRjYmlBZ0lDQWdJSGt1YVhWemFISnVLREVwTzF4dUlDQWdJQ0FnS3l0bk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhaaGNpQjVjQ0E5SUhrdVkyeHZibVVvS1R0Y2JpQWdJQ0IyWVhJZ2VIQWdQU0I0TG1Oc2IyNWxLQ2s3WEc1Y2JpQWdJQ0IzYUdsc1pTQW9JWGd1YVhOYVpYSnZLQ2twSUh0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JwYlNBOUlERTdJQ2g0TG5kdmNtUnpXekJkSUNZZ2FXMHBJRDA5UFNBd0lDWW1JR2tnUENBeU5qc2dLeXRwTENCcGJTQThQRDBnTVNrN1hHNGdJQ0FnSUNCcFppQW9hU0ErSURBcElIdGNiaUFnSUNBZ0lDQWdlQzVwZFhOb2NtNG9hU2s3WEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2hwTFMwZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLRUV1YVhOUFpHUW9LU0I4ZkNCQ0xtbHpUMlJrS0NrcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUVFdWFXRmtaQ2g1Y0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JDTG1semRXSW9lSEFwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUVFdWFYVnphSEp1S0RFcE8xeHVJQ0FnSUNBZ0lDQWdJRUl1YVhWemFISnVLREVwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHWnZjaUFvZG1GeUlHb2dQU0F3TENCcWJTQTlJREU3SUNoNUxuZHZjbVJ6V3pCZElDWWdhbTBwSUQwOVBTQXdJQ1ltSUdvZ1BDQXlOanNnS3l0cUxDQnFiU0E4UEQwZ01TazdYRzRnSUNBZ0lDQnBaaUFvYWlBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnZVM1cGRYTm9jbTRvYWlrN1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNocUxTMGdQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0VNdWFYTlBaR1FvS1NCOGZDQkVMbWx6VDJSa0tDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFTXVhV0ZrWkNoNWNDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCRUxtbHpkV0lvZUhBcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lFTXVhWFZ6YUhKdUtERXBPMXh1SUNBZ0lDQWdJQ0FnSUVRdWFYVnphSEp1S0RFcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR2xtSUNoNExtTnRjQ2g1S1NBK1BTQXdLU0I3WEc0Z0lDQWdJQ0FnSUhndWFYTjFZaWg1S1R0Y2JpQWdJQ0FnSUNBZ1FTNXBjM1ZpS0VNcE8xeHVJQ0FnSUNBZ0lDQkNMbWx6ZFdJb1JDazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjVMbWx6ZFdJb2VDazdYRzRnSUNBZ0lDQWdJRU11YVhOMVlpaEJLVHRjYmlBZ0lDQWdJQ0FnUkM1cGMzVmlLRUlwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQmhPaUJETEZ4dUlDQWdJQ0FnWWpvZ1JDeGNiaUFnSUNBZ0lHZGpaRG9nZVM1cGRYTm9iRzRvWnlsY2JpQWdJQ0I5TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRlJvYVhNZ2FYTWdjbVZrZFdObFpDQnBibU5oY201aGRHbHZiaUJ2WmlCMGFHVWdZbWx1WVhKNUlFVkZRVnh1SUNBdkx5QmhZbTkyWlN3Z1pHVnphV2R1WVhSbFpDQjBieUJwYm5abGNuUWdiV1Z0WW1WeWN5QnZaaUIwYUdWY2JpQWdMeThnWDNCeWFXMWxYeUJtYVdWc1pITWdSaWh3S1NCaGRDQmhJRzFoZUdsdFlXd2djM0JsWldSY2JpQWdRazR1Y0hKdmRHOTBlWEJsTGw5cGJuWnRjQ0E5SUdaMWJtTjBhVzl1SUY5cGJuWnRjQ0FvY0NrZ2UxeHVJQ0FnSUdGemMyVnlkQ2h3TG01bFoyRjBhWFpsSUQwOVBTQXdLVHRjYmlBZ0lDQmhjM05sY25Rb0lYQXVhWE5hWlhKdktDa3BPMXh1WEc0Z0lDQWdkbUZ5SUdFZ1BTQjBhR2x6TzF4dUlDQWdJSFpoY2lCaUlEMGdjQzVqYkc5dVpTZ3BPMXh1WEc0Z0lDQWdhV1lnS0dFdWJtVm5ZWFJwZG1VZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUdFZ1BTQmhMblZ0YjJRb2NDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdFZ1BTQmhMbU5zYjI1bEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSGd4SUQwZ2JtVjNJRUpPS0RFcE8xeHVJQ0FnSUhaaGNpQjRNaUE5SUc1bGR5QkNUaWd3S1R0Y2JseHVJQ0FnSUhaaGNpQmtaV3gwWVNBOUlHSXVZMnh2Ym1Vb0tUdGNibHh1SUNBZ0lIZG9hV3hsSUNoaExtTnRjRzRvTVNrZ1BpQXdJQ1ltSUdJdVkyMXdiaWd4S1NBK0lEQXBJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnBiU0E5SURFN0lDaGhMbmR2Y21Seld6QmRJQ1lnYVcwcElEMDlQU0F3SUNZbUlHa2dQQ0F5TmpzZ0t5dHBMQ0JwYlNBOFBEMGdNU2s3WEc0Z0lDQWdJQ0JwWmlBb2FTQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ1lTNXBkWE5vY200b2FTazdYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaHBMUzBnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIZ3hMbWx6VDJSa0tDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIZ3hMbWxoWkdRb1pHVnNkR0VwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUhneExtbDFjMmh5YmlneEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JtYjNJZ0tIWmhjaUJxSUQwZ01Dd2dhbTBnUFNBeE95QW9ZaTUzYjNKa2Mxc3dYU0FtSUdwdEtTQTlQVDBnTUNBbUppQnFJRHdnTWpZN0lDc3JhaXdnYW0wZ1BEdzlJREVwTzF4dUlDQWdJQ0FnYVdZZ0tHb2dQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lHSXVhWFZ6YUhKdUtHb3BPMXh1SUNBZ0lDQWdJQ0IzYUdsc1pTQW9haTB0SUQ0Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDRNaTVwYzA5a1pDZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjRNaTVwWVdSa0tHUmxiSFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCNE1pNXBkWE5vY200b01TazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tHRXVZMjF3S0dJcElENDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ1lTNXBjM1ZpS0dJcE8xeHVJQ0FnSUNBZ0lDQjRNUzVwYzNWaUtIZ3lLVHRjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR0l1YVhOMVlpaGhLVHRjYmlBZ0lDQWdJQ0FnZURJdWFYTjFZaWg0TVNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlISmxjenRjYmlBZ0lDQnBaaUFvWVM1amJYQnVLREVwSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0J5WlhNZ1BTQjRNVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVnpJRDBnZURJN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tISmxjeTVqYlhCdUtEQXBJRHdnTUNrZ2UxeHVJQ0FnSUNBZ2NtVnpMbWxoWkdRb2NDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUhKbGN6dGNiaUFnZlR0Y2JseHVJQ0JDVGk1d2NtOTBiM1I1Y0dVdVoyTmtJRDBnWm5WdVkzUnBiMjRnWjJOa0lDaHVkVzBwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVwYzFwbGNtOG9LU2tnY21WMGRYSnVJRzUxYlM1aFluTW9LVHRjYmlBZ0lDQnBaaUFvYm5WdExtbHpXbVZ5YnlncEtTQnlaWFIxY200Z2RHaHBjeTVoWW5Nb0tUdGNibHh1SUNBZ0lIWmhjaUJoSUQwZ2RHaHBjeTVqYkc5dVpTZ3BPMXh1SUNBZ0lIWmhjaUJpSUQwZ2JuVnRMbU5zYjI1bEtDazdYRzRnSUNBZ1lTNXVaV2RoZEdsMlpTQTlJREE3WEc0Z0lDQWdZaTV1WldkaGRHbDJaU0E5SURBN1hHNWNiaUFnSUNBdkx5QlNaVzF2ZG1VZ1kyOXRiVzl1SUdaaFkzUnZjaUJ2WmlCMGQyOWNiaUFnSUNCbWIzSWdLSFpoY2lCemFHbG1kQ0E5SURBN0lHRXVhWE5GZG1WdUtDa2dKaVlnWWk1cGMwVjJaVzRvS1RzZ2MyaHBablFyS3lrZ2UxeHVJQ0FnSUNBZ1lTNXBkWE5vY200b01TazdYRzRnSUNBZ0lDQmlMbWwxYzJoeWJpZ3hLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmtieUI3WEc0Z0lDQWdJQ0IzYUdsc1pTQW9ZUzVwYzBWMlpXNG9LU2tnZTF4dUlDQWdJQ0FnSUNCaExtbDFjMmh5YmlneEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIZG9hV3hsSUNoaUxtbHpSWFpsYmlncEtTQjdYRzRnSUNBZ0lDQWdJR0l1YVhWemFISnVLREVwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCMllYSWdjaUE5SUdFdVkyMXdLR0lwTzF4dUlDQWdJQ0FnYVdZZ0tISWdQQ0F3S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJRk4zWVhBZ1lHRmdJR0Z1WkNCZ1ltQWdkRzhnYldGclpTQmdZV0FnWVd4M1lYbHpJR0pwWjJkbGNpQjBhR0Z1SUdCaVlGeHVJQ0FnSUNBZ0lDQjJZWElnZENBOUlHRTdYRzRnSUNBZ0lDQWdJR0VnUFNCaU8xeHVJQ0FnSUNBZ0lDQmlJRDBnZER0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NpQTlQVDBnTUNCOGZDQmlMbU50Y0c0b01Ta2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHRXVhWE4xWWloaUtUdGNiaUFnSUNCOUlIZG9hV3hsSUNoMGNuVmxLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQmlMbWwxYzJoc2JpaHphR2xtZENrN1hHNGdJSDA3WEc1Y2JpQWdMeThnU1c1MlpYSjBJRzUxYldKbGNpQnBiaUIwYUdVZ1ptbGxiR1FnUmlodWRXMHBYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXBiblp0SUQwZ1puVnVZM1JwYjI0Z2FXNTJiU0FvYm5WdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVaV2RqWkNodWRXMHBMbUV1ZFcxdlpDaHVkVzBwTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVwYzBWMlpXNGdQU0JtZFc1amRHbHZiaUJwYzBWMlpXNGdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9kR2hwY3k1M2IzSmtjMXN3WFNBbUlERXBJRDA5UFNBd08xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1cGMwOWtaQ0E5SUdaMWJtTjBhVzl1SUdselQyUmtJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdLSFJvYVhNdWQyOXlaSE5iTUYwZ0ppQXhLU0E5UFQwZ01UdGNiaUFnZlR0Y2JseHVJQ0F2THlCQmJtUWdabWx5YzNRZ2QyOXlaQ0JoYm1RZ2JuVnRYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNWhibVJzYmlBOUlHWjFibU4wYVc5dUlHRnVaR3h1SUNodWRXMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUzYjNKa2Mxc3dYU0FtSUc1MWJUdGNiaUFnZlR0Y2JseHVJQ0F2THlCSmJtTnlaVzFsYm5RZ1lYUWdkR2hsSUdKcGRDQndiM05wZEdsdmJpQnBiaTFzYVc1bFhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1aWFXNWpiaUE5SUdaMWJtTjBhVzl1SUdKcGJtTnVJQ2hpYVhRcElIdGNiaUFnSUNCaGMzTmxjblFvZEhsd1pXOW1JR0pwZENBOVBUMGdKMjUxYldKbGNpY3BPMXh1SUNBZ0lIWmhjaUJ5SUQwZ1ltbDBJQ1VnTWpZN1hHNGdJQ0FnZG1GeUlITWdQU0FvWW1sMElDMGdjaWtnTHlBeU5qdGNiaUFnSUNCMllYSWdjU0E5SURFZ1BEd2djanRjYmx4dUlDQWdJQzh2SUVaaGMzUWdZMkZ6WlRvZ1ltbDBJR2x6SUcxMVkyZ2dhR2xuYUdWeUlIUm9ZVzRnWVd4c0lHVjRhWE4wYVc1bklIZHZjbVJ6WEc0Z0lDQWdhV1lnS0hSb2FYTXViR1Z1WjNSb0lEdzlJSE1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYMlY0Y0dGdVpDaHpJQ3NnTVNrN1hHNGdJQ0FnSUNCMGFHbHpMbmR2Y21SelczTmRJSHc5SUhFN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkJaR1FnWW1sMElHRnVaQ0J3Y205d1lXZGhkR1VzSUdsbUlHNWxaV1JsWkZ4dUlDQWdJSFpoY2lCallYSnllU0E5SUhFN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlITTdJR05oY25KNUlDRTlQU0F3SUNZbUlHa2dQQ0IwYUdsekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2R5QTlJSFJvYVhNdWQyOXlaSE5iYVYwZ2ZDQXdPMXh1SUNBZ0lDQWdkeUFyUFNCallYSnllVHRjYmlBZ0lDQWdJR05oY25KNUlEMGdkeUErUGo0Z01qWTdYRzRnSUNBZ0lDQjNJQ1k5SURCNE0yWm1abVptWmp0Y2JpQWdJQ0FnSUhSb2FYTXVkMjl5WkhOYmFWMGdQU0IzTzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWTJGeWNua2dJVDA5SURBcElIdGNiaUFnSUNBZ0lIUm9hWE11ZDI5eVpITmJhVjBnUFNCallYSnllVHRjYmlBZ0lDQWdJSFJvYVhNdWJHVnVaM1JvS3lzN1hHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVwYzFwbGNtOGdQU0JtZFc1amRHbHZiaUJwYzFwbGNtOGdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG14bGJtZDBhQ0E5UFQwZ01TQW1KaUIwYUdsekxuZHZjbVJ6V3pCZElEMDlQU0F3TzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzVqYlhCdUlEMGdablZ1WTNScGIyNGdZMjF3YmlBb2JuVnRLU0I3WEc0Z0lDQWdkbUZ5SUc1bFoyRjBhWFpsSUQwZ2JuVnRJRHdnTUR0Y2JseHVJQ0FnSUdsbUlDaDBhR2x6TG01bFoyRjBhWFpsSUNFOVBTQXdJQ1ltSUNGdVpXZGhkR2wyWlNrZ2NtVjBkWEp1SUMweE8xeHVJQ0FnSUdsbUlDaDBhR2x6TG01bFoyRjBhWFpsSUQwOVBTQXdJQ1ltSUc1bFoyRjBhWFpsS1NCeVpYUjFjbTRnTVR0Y2JseHVJQ0FnSUhSb2FYTXVjM1J5YVhBb0tUdGNibHh1SUNBZ0lIWmhjaUJ5WlhNN1hHNGdJQ0FnYVdZZ0tIUm9hWE11YkdWdVozUm9JRDRnTVNrZ2UxeHVJQ0FnSUNBZ2NtVnpJRDBnTVR0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdhV1lnS0c1bFoyRjBhWFpsS1NCN1hHNGdJQ0FnSUNBZ0lHNTFiU0E5SUMxdWRXMDdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJR0Z6YzJWeWRDaHVkVzBnUEQwZ01IZ3pabVptWm1abUxDQW5UblZ0WW1WeUlHbHpJSFJ2YnlCaWFXY25LVHRjYmx4dUlDQWdJQ0FnZG1GeUlIY2dQU0IwYUdsekxuZHZjbVJ6V3pCZElId2dNRHRjYmlBZ0lDQWdJSEpsY3lBOUlIY2dQVDA5SUc1MWJTQS9JREFnT2lCM0lEd2diblZ0SUQ4Z0xURWdPaUF4TzF4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZEdocGN5NXVaV2RoZEdsMlpTQWhQVDBnTUNrZ2NtVjBkWEp1SUMxeVpYTWdmQ0F3TzF4dUlDQWdJSEpsZEhWeWJpQnlaWE03WEc0Z0lIMDdYRzVjYmlBZ0x5OGdRMjl0Y0dGeVpTQjBkMjhnYm5WdFltVnljeUJoYm1RZ2NtVjBkWEp1T2x4dUlDQXZMeUF4SUMwZ2FXWWdZSFJvYVhOZ0lENGdZRzUxYldCY2JpQWdMeThnTUNBdElHbG1JR0IwYUdsellDQTlQU0JnYm5WdFlGeHVJQ0F2THlBdE1TQXRJR2xtSUdCMGFHbHpZQ0E4SUdCdWRXMWdYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNWpiWEFnUFNCbWRXNWpkR2x2YmlCamJYQWdLRzUxYlNrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG01bFoyRjBhWFpsSUNFOVBTQXdJQ1ltSUc1MWJTNXVaV2RoZEdsMlpTQTlQVDBnTUNrZ2NtVjBkWEp1SUMweE8xeHVJQ0FnSUdsbUlDaDBhR2x6TG01bFoyRjBhWFpsSUQwOVBTQXdJQ1ltSUc1MWJTNXVaV2RoZEdsMlpTQWhQVDBnTUNrZ2NtVjBkWEp1SURFN1hHNWNiaUFnSUNCMllYSWdjbVZ6SUQwZ2RHaHBjeTUxWTIxd0tHNTFiU2s3WEc0Z0lDQWdhV1lnS0hSb2FYTXVibVZuWVhScGRtVWdJVDA5SURBcElISmxkSFZ5YmlBdGNtVnpJSHdnTUR0Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6TzF4dUlDQjlPMXh1WEc0Z0lDOHZJRlZ1YzJsbmJtVmtJR052YlhCaGNtbHpiMjVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMblZqYlhBZ1BTQm1kVzVqZEdsdmJpQjFZMjF3SUNodWRXMHBJSHRjYmlBZ0lDQXZMeUJCZENCMGFHbHpJSEJ2YVc1MElHSnZkR2dnYm5WdFltVnljeUJvWVhabElIUm9aU0J6WVcxbElITnBaMjVjYmlBZ0lDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BpQnVkVzB1YkdWdVozUm9LU0J5WlhSMWNtNGdNVHRjYmlBZ0lDQnBaaUFvZEdocGN5NXNaVzVuZEdnZ1BDQnVkVzB1YkdWdVozUm9LU0J5WlhSMWNtNGdMVEU3WEc1Y2JpQWdJQ0IyWVhJZ2NtVnpJRDBnTUR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ2RHaHBjeTVzWlc1bmRHZ2dMU0F4T3lCcElENDlJREE3SUdrdExTa2dlMXh1SUNBZ0lDQWdkbUZ5SUdFZ1BTQjBhR2x6TG5kdmNtUnpXMmxkSUh3Z01EdGNiaUFnSUNBZ0lIWmhjaUJpSUQwZ2JuVnRMbmR2Y21SelcybGRJSHdnTUR0Y2JseHVJQ0FnSUNBZ2FXWWdLR0VnUFQwOUlHSXBJR052Ym5ScGJuVmxPMXh1SUNBZ0lDQWdhV1lnS0dFZ1BDQmlLU0I3WEc0Z0lDQWdJQ0FnSUhKbGN5QTlJQzB4TzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoaElENGdZaWtnZTF4dUlDQWdJQ0FnSUNCeVpYTWdQU0F4TzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ5WlhNN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG1kMGJpQTlJR1oxYm1OMGFXOXVJR2QwYmlBb2JuVnRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTIxd2JpaHVkVzBwSUQwOVBTQXhPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNW5kQ0E5SUdaMWJtTjBhVzl1SUdkMElDaHVkVzBwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amJYQW9iblZ0S1NBOVBUMGdNVHRjYmlBZ2ZUdGNibHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVaM1JsYmlBOUlHWjFibU4wYVc5dUlHZDBaVzRnS0c1MWJTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU50Y0c0b2JuVnRLU0ErUFNBd08xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1bmRHVWdQU0JtZFc1amRHbHZiaUJuZEdVZ0tHNTFiU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdGNDaHVkVzBwSUQ0OUlEQTdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExteDBiaUE5SUdaMWJtTjBhVzl1SUd4MGJpQW9iblZ0S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyMXdiaWh1ZFcwcElEMDlQU0F0TVR0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1YkhRZ1BTQm1kVzVqZEdsdmJpQnNkQ0FvYm5WdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjF3S0c1MWJTa2dQVDA5SUMweE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1c2RHVnVJRDBnWm5WdVkzUnBiMjRnYkhSbGJpQW9iblZ0S1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVkyMXdiaWh1ZFcwcElEdzlJREE3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbXgwWlNBOUlHWjFibU4wYVc5dUlHeDBaU0FvYm5WdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjF3S0c1MWJTa2dQRDBnTUR0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1WlhGdUlEMGdablZ1WTNScGIyNGdaWEZ1SUNodWRXMHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVqYlhCdUtHNTFiU2tnUFQwOUlEQTdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExtVnhJRDBnWm5WdVkzUnBiMjRnWlhFZ0tHNTFiU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG1OdGNDaHVkVzBwSUQwOVBTQXdPMXh1SUNCOU8xeHVYRzRnSUM4dlhHNGdJQzh2SUVFZ2NtVmtkV05sSUdOdmJuUmxlSFFzSUdOdmRXeGtJR0psSUhWemFXNW5JRzF2Ym5SbmIyMWxjbmtnYjNJZ2MyOXRaWFJvYVc1bklHSmxkSFJsY2l3Z1pHVndaVzVrYVc1blhHNGdJQzh2SUc5dUlIUm9aU0JnYldBZ2FYUnpaV3htTGx4dUlDQXZMMXh1SUNCQ1RpNXlaV1FnUFNCbWRXNWpkR2x2YmlCeVpXUWdLRzUxYlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VtVmtLRzUxYlNrN1hHNGdJSDA3WEc1Y2JpQWdRazR1Y0hKdmRHOTBlWEJsTG5SdlVtVmtJRDBnWm5WdVkzUnBiMjRnZEc5U1pXUWdLR04wZUNrZ2UxeHVJQ0FnSUdGemMyVnlkQ2doZEdocGN5NXlaV1FzSUNkQmJISmxZV1I1SUdFZ2JuVnRZbVZ5SUdsdUlISmxaSFZqZEdsdmJpQmpiMjUwWlhoMEp5azdYRzRnSUNBZ1lYTnpaWEowS0hSb2FYTXVibVZuWVhScGRtVWdQVDA5SURBc0lDZHlaV1FnZDI5eWEzTWdiMjVzZVNCM2FYUm9JSEJ2YzJsMGFYWmxjeWNwTzF4dUlDQWdJSEpsZEhWeWJpQmpkSGd1WTI5dWRtVnlkRlJ2S0hSb2FYTXBMbDltYjNKalpWSmxaQ2hqZEhncE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1bWNtOXRVbVZrSUQwZ1puVnVZM1JwYjI0Z1puSnZiVkpsWkNBb0tTQjdYRzRnSUNBZ1lYTnpaWEowS0hSb2FYTXVjbVZrTENBblpuSnZiVkpsWkNCM2IzSnJjeUJ2Ym14NUlIZHBkR2dnYm5WdFltVnljeUJwYmlCeVpXUjFZM1JwYjI0Z1kyOXVkR1Y0ZENjcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxaQzVqYjI1MlpYSjBSbkp2YlNoMGFHbHpLVHRjYmlBZ2ZUdGNibHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVYMlp2Y21ObFVtVmtJRDBnWm5WdVkzUnBiMjRnWDJadmNtTmxVbVZrSUNoamRIZ3BJSHRjYmlBZ0lDQjBhR2x6TG5KbFpDQTlJR04wZUR0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3p0Y2JpQWdmVHRjYmx4dUlDQkNUaTV3Y205MGIzUjVjR1V1Wm05eVkyVlNaV1FnUFNCbWRXNWpkR2x2YmlCbWIzSmpaVkpsWkNBb1kzUjRLU0I3WEc0Z0lDQWdZWE56WlhKMEtDRjBhR2x6TG5KbFpDd2dKMEZzY21WaFpIa2dZU0J1ZFcxaVpYSWdhVzRnY21Wa2RXTjBhVzl1SUdOdmJuUmxlSFFuS1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlptOXlZMlZTWldRb1kzUjRLVHRjYmlBZ2ZUdGNibHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVjbVZrUVdSa0lEMGdablZ1WTNScGIyNGdjbVZrUVdSa0lDaHVkVzBwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kR2hwY3k1eVpXUXNJQ2R5WldSQlpHUWdkMjl5YTNNZ2IyNXNlU0IzYVhSb0lISmxaQ0J1ZFcxaVpYSnpKeWs3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Y21Wa0xtRmtaQ2gwYUdsekxDQnVkVzBwTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzV5WldSSlFXUmtJRDBnWm5WdVkzUnBiMjRnY21Wa1NVRmtaQ0FvYm5WdEtTQjdYRzRnSUNBZ1lYTnpaWEowS0hSb2FYTXVjbVZrTENBbmNtVmtTVUZrWkNCM2IzSnJjeUJ2Ym14NUlIZHBkR2dnY21Wa0lHNTFiV0psY25NbktUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaV1F1YVdGa1pDaDBhR2x6TENCdWRXMHBPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXlaV1JUZFdJZ1BTQm1kVzVqZEdsdmJpQnlaV1JUZFdJZ0tHNTFiU2tnZTF4dUlDQWdJR0Z6YzJWeWRDaDBhR2x6TG5KbFpDd2dKM0psWkZOMVlpQjNiM0pyY3lCdmJteDVJSGRwZEdnZ2NtVmtJRzUxYldKbGNuTW5LVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WldRdWMzVmlLSFJvYVhNc0lHNTFiU2s3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbkpsWkVsVGRXSWdQU0JtZFc1amRHbHZiaUJ5WldSSlUzVmlJQ2h1ZFcwcElIdGNiaUFnSUNCaGMzTmxjblFvZEdocGN5NXlaV1FzSUNkeVpXUkpVM1ZpSUhkdmNtdHpJRzl1YkhrZ2QybDBhQ0J5WldRZ2JuVnRZbVZ5Y3ljcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxaQzVwYzNWaUtIUm9hWE1zSUc1MWJTazdYRzRnSUgwN1hHNWNiaUFnUWs0dWNISnZkRzkwZVhCbExuSmxaRk5vYkNBOUlHWjFibU4wYVc5dUlISmxaRk5vYkNBb2JuVnRLU0I3WEc0Z0lDQWdZWE56WlhKMEtIUm9hWE11Y21Wa0xDQW5jbVZrVTJoc0lIZHZjbXR6SUc5dWJIa2dkMmwwYUNCeVpXUWdiblZ0WW1WeWN5Y3BPMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsWkM1emFHd29kR2hwY3l3Z2JuVnRLVHRjYmlBZ2ZUdGNibHh1SUNCQ1RpNXdjbTkwYjNSNWNHVXVjbVZrVFhWc0lEMGdablZ1WTNScGIyNGdjbVZrVFhWc0lDaHVkVzBwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kR2hwY3k1eVpXUXNJQ2R5WldSTmRXd2dkMjl5YTNNZ2IyNXNlU0IzYVhSb0lISmxaQ0J1ZFcxaVpYSnpKeWs3WEc0Z0lDQWdkR2hwY3k1eVpXUXVYM1psY21sbWVUSW9kR2hwY3l3Z2JuVnRLVHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV5WldRdWJYVnNLSFJvYVhNc0lHNTFiU2s3WEc0Z0lIMDdYRzVjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbkpsWkVsTmRXd2dQU0JtZFc1amRHbHZiaUJ5WldSSlRYVnNJQ2h1ZFcwcElIdGNiaUFnSUNCaGMzTmxjblFvZEdocGN5NXlaV1FzSUNkeVpXUk5kV3dnZDI5eWEzTWdiMjVzZVNCM2FYUm9JSEpsWkNCdWRXMWlaWEp6SnlrN1hHNGdJQ0FnZEdocGN5NXlaV1F1WDNabGNtbG1lVElvZEdocGN5d2diblZ0S1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXUXVhVzExYkNoMGFHbHpMQ0J1ZFcwcE8xeHVJQ0I5TzF4dVhHNGdJRUpPTG5CeWIzUnZkSGx3WlM1eVpXUlRjWElnUFNCbWRXNWpkR2x2YmlCeVpXUlRjWElnS0NrZ2UxeHVJQ0FnSUdGemMyVnlkQ2gwYUdsekxuSmxaQ3dnSjNKbFpGTnhjaUIzYjNKcmN5QnZibXg1SUhkcGRHZ2djbVZrSUc1MWJXSmxjbk1uS1R0Y2JpQWdJQ0IwYUdsekxuSmxaQzVmZG1WeWFXWjVNU2gwYUdsektUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaV1F1YzNGeUtIUm9hWE1wTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzV5WldSSlUzRnlJRDBnWm5WdVkzUnBiMjRnY21Wa1NWTnhjaUFvS1NCN1hHNGdJQ0FnWVhOelpYSjBLSFJvYVhNdWNtVmtMQ0FuY21Wa1NWTnhjaUIzYjNKcmN5QnZibXg1SUhkcGRHZ2djbVZrSUc1MWJXSmxjbk1uS1R0Y2JpQWdJQ0IwYUdsekxuSmxaQzVmZG1WeWFXWjVNU2gwYUdsektUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaV1F1YVhOeGNpaDBhR2x6S1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJUY1hWaGNtVWdjbTl2ZENCdmRtVnlJSEJjYmlBZ1FrNHVjSEp2ZEc5MGVYQmxMbkpsWkZOeGNuUWdQU0JtZFc1amRHbHZiaUJ5WldSVGNYSjBJQ2dwSUh0Y2JpQWdJQ0JoYzNObGNuUW9kR2hwY3k1eVpXUXNJQ2R5WldSVGNYSjBJSGR2Y210eklHOXViSGtnZDJsMGFDQnlaV1FnYm5WdFltVnljeWNwTzF4dUlDQWdJSFJvYVhNdWNtVmtMbDkyWlhKcFpua3hLSFJvYVhNcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxaQzV6Y1hKMEtIUm9hWE1wTzF4dUlDQjlPMXh1WEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzV5WldSSmJuWnRJRDBnWm5WdVkzUnBiMjRnY21Wa1NXNTJiU0FvS1NCN1hHNGdJQ0FnWVhOelpYSjBLSFJvYVhNdWNtVmtMQ0FuY21Wa1NXNTJiU0IzYjNKcmN5QnZibXg1SUhkcGRHZ2djbVZrSUc1MWJXSmxjbk1uS1R0Y2JpQWdJQ0IwYUdsekxuSmxaQzVmZG1WeWFXWjVNU2gwYUdsektUdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXlaV1F1YVc1MmJTaDBhR2x6S1R0Y2JpQWdmVHRjYmx4dUlDQXZMeUJTWlhSMWNtNGdibVZuWVhScGRtVWdZMnh2Ym1VZ2IyWWdZSFJvYVhOZ0lDVWdZSEpsWkNCdGIyUjFiRzlnWEc0Z0lFSk9MbkJ5YjNSdmRIbHdaUzV5WldST1pXY2dQU0JtZFc1amRHbHZiaUJ5WldST1pXY2dLQ2tnZTF4dUlDQWdJR0Z6YzJWeWRDaDBhR2x6TG5KbFpDd2dKM0psWkU1bFp5QjNiM0pyY3lCdmJteDVJSGRwZEdnZ2NtVmtJRzUxYldKbGNuTW5LVHRjYmlBZ0lDQjBhR2x6TG5KbFpDNWZkbVZ5YVdaNU1TaDBhR2x6S1R0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpXUXVibVZuS0hSb2FYTXBPMXh1SUNCOU8xeHVYRzRnSUVKT0xuQnliM1J2ZEhsd1pTNXlaV1JRYjNjZ1BTQm1kVzVqZEdsdmJpQnlaV1JRYjNjZ0tHNTFiU2tnZTF4dUlDQWdJR0Z6YzJWeWRDaDBhR2x6TG5KbFpDQW1KaUFoYm5WdExuSmxaQ3dnSjNKbFpGQnZkeWh1YjNKdFlXeE9kVzBwSnlrN1hHNGdJQ0FnZEdocGN5NXlaV1F1WDNabGNtbG1lVEVvZEdocGN5azdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZrTG5CdmR5aDBhR2x6TENCdWRXMHBPMXh1SUNCOU8xeHVYRzRnSUM4dklGQnlhVzFsSUc1MWJXSmxjbk1nZDJsMGFDQmxabVpwWTJsbGJuUWdjbVZrZFdOMGFXOXVYRzRnSUhaaGNpQndjbWx0WlhNZ1BTQjdYRzRnSUNBZ2F6STFOam9nYm5Wc2JDeGNiaUFnSUNCd01qSTBPaUJ1ZFd4c0xGeHVJQ0FnSUhBeE9USTZJRzUxYkd3c1hHNGdJQ0FnY0RJMU5URTVPaUJ1ZFd4c1hHNGdJSDA3WEc1Y2JpQWdMeThnVUhObGRXUnZMVTFsY25ObGJtNWxJSEJ5YVcxbFhHNGdJR1oxYm1OMGFXOXVJRTFRY21sdFpTQW9ibUZ0WlN3Z2NDa2dlMXh1SUNBZ0lDOHZJRkFnUFNBeUlGNGdUaUF0SUV0Y2JpQWdJQ0IwYUdsekxtNWhiV1VnUFNCdVlXMWxPMXh1SUNBZ0lIUm9hWE11Y0NBOUlHNWxkeUJDVGlod0xDQXhOaWs3WEc0Z0lDQWdkR2hwY3k1dUlEMGdkR2hwY3k1d0xtSnBkRXhsYm1kMGFDZ3BPMXh1SUNBZ0lIUm9hWE11YXlBOUlHNWxkeUJDVGlneEtTNXBkWE5vYkc0b2RHaHBjeTV1S1M1cGMzVmlLSFJvYVhNdWNDazdYRzVjYmlBZ0lDQjBhR2x6TG5SdGNDQTlJSFJvYVhNdVgzUnRjQ2dwTzF4dUlDQjlYRzVjYmlBZ1RWQnlhVzFsTG5CeWIzUnZkSGx3WlM1ZmRHMXdJRDBnWm5WdVkzUnBiMjRnWDNSdGNDQW9LU0I3WEc0Z0lDQWdkbUZ5SUhSdGNDQTlJRzVsZHlCQ1RpaHVkV3hzS1R0Y2JpQWdJQ0IwYlhBdWQyOXlaSE1nUFNCdVpYY2dRWEp5WVhrb1RXRjBhQzVqWldsc0tIUm9hWE11YmlBdklERXpLU2s3WEc0Z0lDQWdjbVYwZFhKdUlIUnRjRHRjYmlBZ2ZUdGNibHh1SUNCTlVISnBiV1V1Y0hKdmRHOTBlWEJsTG1seVpXUjFZMlVnUFNCbWRXNWpkR2x2YmlCcGNtVmtkV05sSUNodWRXMHBJSHRjYmlBZ0lDQXZMeUJCYzNOMWJXVnpJSFJvWVhRZ1lHNTFiV0FnYVhNZ2JHVnpjeUIwYUdGdUlHQlFYakpnWEc0Z0lDQWdMeThnYm5WdElEMGdTRWtnS2lBb01pQmVJRTRnTFNCTEtTQXJJRWhKSUNvZ1N5QXJJRXhQSUQwZ1NFa2dLaUJMSUNzZ1RFOGdLRzF2WkNCUUtWeHVJQ0FnSUhaaGNpQnlJRDBnYm5WdE8xeHVJQ0FnSUhaaGNpQnliR1Z1TzF4dVhHNGdJQ0FnWkc4Z2UxeHVJQ0FnSUNBZ2RHaHBjeTV6Y0d4cGRDaHlMQ0IwYUdsekxuUnRjQ2s3WEc0Z0lDQWdJQ0J5SUQwZ2RHaHBjeTVwYlhWc1N5aHlLVHRjYmlBZ0lDQWdJSElnUFNCeUxtbGhaR1FvZEdocGN5NTBiWEFwTzF4dUlDQWdJQ0FnY214bGJpQTlJSEl1WW1sMFRHVnVaM1JvS0NrN1hHNGdJQ0FnZlNCM2FHbHNaU0FvY214bGJpQStJSFJvYVhNdWJpazdYRzVjYmlBZ0lDQjJZWElnWTIxd0lEMGdjbXhsYmlBOElIUm9hWE11YmlBL0lDMHhJRG9nY2k1MVkyMXdLSFJvYVhNdWNDazdYRzRnSUNBZ2FXWWdLR050Y0NBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnY2k1M2IzSmtjMXN3WFNBOUlEQTdYRzRnSUNBZ0lDQnlMbXhsYm1kMGFDQTlJREU3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2hqYlhBZ1BpQXdLU0I3WEc0Z0lDQWdJQ0J5TG1semRXSW9kR2hwY3k1d0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY2k1emRISnBjQ2dwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnlPMXh1SUNCOU8xeHVYRzRnSUUxUWNtbHRaUzV3Y205MGIzUjVjR1V1YzNCc2FYUWdQU0JtZFc1amRHbHZiaUJ6Y0d4cGRDQW9hVzV3ZFhRc0lHOTFkQ2tnZTF4dUlDQWdJR2x1Y0hWMExtbDFjMmh5YmloMGFHbHpMbTRzSURBc0lHOTFkQ2s3WEc0Z0lIMDdYRzVjYmlBZ1RWQnlhVzFsTG5CeWIzUnZkSGx3WlM1cGJYVnNTeUE5SUdaMWJtTjBhVzl1SUdsdGRXeExJQ2h1ZFcwcElIdGNiaUFnSUNCeVpYUjFjbTRnYm5WdExtbHRkV3dvZEdocGN5NXJLVHRjYmlBZ2ZUdGNibHh1SUNCbWRXNWpkR2x2YmlCTE1qVTJJQ2dwSUh0Y2JpQWdJQ0JOVUhKcGJXVXVZMkZzYkNoY2JpQWdJQ0FnSUhSb2FYTXNYRzRnSUNBZ0lDQW5hekkxTmljc1hHNGdJQ0FnSUNBblptWm1abVptWm1ZZ1ptWm1abVptWm1ZZ1ptWm1abVptWm1ZZ1ptWm1abVptWm1ZZ1ptWm1abVptWm1ZZ1ptWm1abVptWm1ZZ1ptWm1abVptWm1VZ1ptWm1abVpqTW1ZbktUdGNiaUFnZlZ4dUlDQnBibWhsY21sMGN5aExNalUyTENCTlVISnBiV1VwTzF4dVhHNGdJRXN5TlRZdWNISnZkRzkwZVhCbExuTndiR2wwSUQwZ1puVnVZM1JwYjI0Z2MzQnNhWFFnS0dsdWNIVjBMQ0J2ZFhSd2RYUXBJSHRjYmlBZ0lDQXZMeUF5TlRZZ1BTQTVJQ29nTWpZZ0t5QXlNbHh1SUNBZ0lIWmhjaUJ0WVhOcklEMGdNSGd6Wm1abVptWTdYRzVjYmlBZ0lDQjJZWElnYjNWMFRHVnVJRDBnVFdGMGFDNXRhVzRvYVc1d2RYUXViR1Z1WjNSb0xDQTVLVHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJRzkxZEV4bGJqc2dhU3NyS1NCN1hHNGdJQ0FnSUNCdmRYUndkWFF1ZDI5eVpITmJhVjBnUFNCcGJuQjFkQzUzYjNKa2MxdHBYVHRjYmlBZ0lDQjlYRzRnSUNBZ2IzVjBjSFYwTG14bGJtZDBhQ0E5SUc5MWRFeGxianRjYmx4dUlDQWdJR2xtSUNocGJuQjFkQzVzWlc1bmRHZ2dQRDBnT1NrZ2UxeHVJQ0FnSUNBZ2FXNXdkWFF1ZDI5eVpITmJNRjBnUFNBd08xeHVJQ0FnSUNBZ2FXNXdkWFF1YkdWdVozUm9JRDBnTVR0Y2JpQWdJQ0FnSUhKbGRIVnlianRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUJUYUdsbWRDQmllU0E1SUd4cGJXSnpYRzRnSUNBZ2RtRnlJSEJ5WlhZZ1BTQnBibkIxZEM1M2IzSmtjMXM1WFR0Y2JpQWdJQ0J2ZFhSd2RYUXVkMjl5WkhOYmIzVjBjSFYwTG14bGJtZDBhQ3NyWFNBOUlIQnlaWFlnSmlCdFlYTnJPMXh1WEc0Z0lDQWdabTl5SUNocElEMGdNVEE3SUdrZ1BDQnBibkIxZEM1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lDQWdkbUZ5SUc1bGVIUWdQU0JwYm5CMWRDNTNiM0prYzF0cFhTQjhJREE3WEc0Z0lDQWdJQ0JwYm5CMWRDNTNiM0prYzF0cElDMGdNVEJkSUQwZ0tDaHVaWGgwSUNZZ2JXRnpheWtnUER3Z05Da2dmQ0FvY0hKbGRpQStQajRnTWpJcE8xeHVJQ0FnSUNBZ2NISmxkaUE5SUc1bGVIUTdYRzRnSUNBZ2ZWeHVJQ0FnSUhCeVpYWWdQajQrUFNBeU1qdGNiaUFnSUNCcGJuQjFkQzUzYjNKa2MxdHBJQzBnTVRCZElEMGdjSEpsZGp0Y2JpQWdJQ0JwWmlBb2NISmxkaUE5UFQwZ01DQW1KaUJwYm5CMWRDNXNaVzVuZEdnZ1BpQXhNQ2tnZTF4dUlDQWdJQ0FnYVc1d2RYUXViR1Z1WjNSb0lDMDlJREV3TzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnBibkIxZEM1c1pXNW5kR2dnTFQwZ09UdGNiaUFnSUNCOVhHNGdJSDA3WEc1Y2JpQWdTekkxTmk1d2NtOTBiM1I1Y0dVdWFXMTFiRXNnUFNCbWRXNWpkR2x2YmlCcGJYVnNTeUFvYm5WdEtTQjdYRzRnSUNBZ0x5OGdTeUE5SURCNE1UQXdNREF3TTJReElEMGdXeUF3ZURRd0xDQXdlRE5rTVNCZFhHNGdJQ0FnYm5WdExuZHZjbVJ6VzI1MWJTNXNaVzVuZEdoZElEMGdNRHRjYmlBZ0lDQnVkVzB1ZDI5eVpITmJiblZ0TG14bGJtZDBhQ0FySURGZElEMGdNRHRjYmlBZ0lDQnVkVzB1YkdWdVozUm9JQ3M5SURJN1hHNWNiaUFnSUNBdkx5QmliM1Z1WkdWa0lHRjBPaUF3ZURRd0lDb2dNSGd6Wm1abVptWm1JQ3NnTUhnelpEQWdQU0F3ZURFd01EQXdNRE01TUZ4dUlDQWdJSFpoY2lCc2J5QTlJREE3WEc0Z0lDQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0J1ZFcwdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJSFpoY2lCM0lEMGdiblZ0TG5kdmNtUnpXMmxkSUh3Z01EdGNiaUFnSUNBZ0lHeHZJQ3M5SUhjZ0tpQXdlRE5rTVR0Y2JpQWdJQ0FnSUc1MWJTNTNiM0prYzF0cFhTQTlJR3h2SUNZZ01IZ3pabVptWm1abU8xeHVJQ0FnSUNBZ2JHOGdQU0IzSUNvZ01IZzBNQ0FySUNnb2JHOGdMeUF3ZURRd01EQXdNREFwSUh3Z01DazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdSbUZ6ZENCc1pXNW5kR2dnY21Wa2RXTjBhVzl1WEc0Z0lDQWdhV1lnS0c1MWJTNTNiM0prYzF0dWRXMHViR1Z1WjNSb0lDMGdNVjBnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJRzUxYlM1c1pXNW5kR2d0TFR0Y2JpQWdJQ0FnSUdsbUlDaHVkVzB1ZDI5eVpITmJiblZ0TG14bGJtZDBhQ0F0SURGZElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lHNTFiUzVzWlc1bmRHZ3RMVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1MWJUdGNiaUFnZlR0Y2JseHVJQ0JtZFc1amRHbHZiaUJRTWpJMElDZ3BJSHRjYmlBZ0lDQk5VSEpwYldVdVkyRnNiQ2hjYmlBZ0lDQWdJSFJvYVhNc1hHNGdJQ0FnSUNBbmNESXlOQ2NzWEc0Z0lDQWdJQ0FuWm1abVptWm1abVlnWm1abVptWm1abVlnWm1abVptWm1abVlnWm1abVptWm1abVlnTURBd01EQXdNREFnTURBd01EQXdNREFnTURBd01EQXdNREVuS1R0Y2JpQWdmVnh1SUNCcGJtaGxjbWwwY3loUU1qSTBMQ0JOVUhKcGJXVXBPMXh1WEc0Z0lHWjFibU4wYVc5dUlGQXhPVElnS0NrZ2UxeHVJQ0FnSUUxUWNtbHRaUzVqWVd4c0tGeHVJQ0FnSUNBZ2RHaHBjeXhjYmlBZ0lDQWdJQ2R3TVRreUp5eGNiaUFnSUNBZ0lDZG1abVptWm1abVppQm1abVptWm1abVppQm1abVptWm1abVppQm1abVptWm1abVpTQm1abVptWm1abVppQm1abVptWm1abVppY3BPMXh1SUNCOVhHNGdJR2x1YUdWeWFYUnpLRkF4T1RJc0lFMVFjbWx0WlNrN1hHNWNiaUFnWm5WdVkzUnBiMjRnVURJMU5URTVJQ2dwSUh0Y2JpQWdJQ0F2THlBeUlGNGdNalUxSUMwZ01UbGNiaUFnSUNCTlVISnBiV1V1WTJGc2JDaGNiaUFnSUNBZ0lIUm9hWE1zWEc0Z0lDQWdJQ0FuTWpVMU1Ua25MRnh1SUNBZ0lDQWdKemRtWm1abVptWm1abVptWm1abVptWWdabVptWm1abVptWm1abVptWm1abVppQm1abVptWm1abVptWm1abVptWm1abUlHWm1abVptWm1abVptWm1abVptWldRbktUdGNiaUFnZlZ4dUlDQnBibWhsY21sMGN5aFFNalUxTVRrc0lFMVFjbWx0WlNrN1hHNWNiaUFnVURJMU5URTVMbkJ5YjNSdmRIbHdaUzVwYlhWc1N5QTlJR1oxYm1OMGFXOXVJR2x0ZFd4TElDaHVkVzBwSUh0Y2JpQWdJQ0F2THlCTElEMGdNSGd4TTF4dUlDQWdJSFpoY2lCallYSnllU0E5SURBN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCdWRXMHViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhaaGNpQm9hU0E5SUNodWRXMHVkMjl5WkhOYmFWMGdmQ0F3S1NBcUlEQjRNVE1nS3lCallYSnllVHRjYmlBZ0lDQWdJSFpoY2lCc2J5QTlJR2hwSUNZZ01IZ3pabVptWm1abU8xeHVJQ0FnSUNBZ2FHa2dQajQrUFNBeU5qdGNibHh1SUNBZ0lDQWdiblZ0TG5kdmNtUnpXMmxkSUQwZ2JHODdYRzRnSUNBZ0lDQmpZWEp5ZVNBOUlHaHBPMXh1SUNBZ0lIMWNiaUFnSUNCcFppQW9ZMkZ5Y25rZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUc1MWJTNTNiM0prYzF0dWRXMHViR1Z1WjNSb0t5dGRJRDBnWTJGeWNuazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ1ZFcwN1hHNGdJSDA3WEc1Y2JpQWdMeThnUlhod2IzSjBaV1FnYlc5emRHeDVJR1p2Y2lCMFpYTjBhVzVuSUhCMWNuQnZjMlZ6TENCMWMyVWdjR3hoYVc0Z2JtRnRaU0JwYm5OMFpXRmtYRzRnSUVKT0xsOXdjbWx0WlNBOUlHWjFibU4wYVc5dUlIQnlhVzFsSUNodVlXMWxLU0I3WEc0Z0lDQWdMeThnUTJGamFHVmtJSFpsY25OcGIyNGdiMllnY0hKcGJXVmNiaUFnSUNCcFppQW9jSEpwYldWelcyNWhiV1ZkS1NCeVpYUjFjbTRnY0hKcGJXVnpXMjVoYldWZE8xeHVYRzRnSUNBZ2RtRnlJSEJ5YVcxbE8xeHVJQ0FnSUdsbUlDaHVZVzFsSUQwOVBTQW5hekkxTmljcElIdGNiaUFnSUNBZ0lIQnlhVzFsSUQwZ2JtVjNJRXN5TlRZb0tUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHNWhiV1VnUFQwOUlDZHdNakkwSnlrZ2UxeHVJQ0FnSUNBZ2NISnBiV1VnUFNCdVpYY2dVREl5TkNncE8xeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JtRnRaU0E5UFQwZ0ozQXhPVEluS1NCN1hHNGdJQ0FnSUNCd2NtbHRaU0E5SUc1bGR5QlFNVGt5S0NrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNodVlXMWxJRDA5UFNBbmNESTFOVEU1SnlrZ2UxeHVJQ0FnSUNBZ2NISnBiV1VnUFNCdVpYY2dVREkxTlRFNUtDazdYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVlc1cmJtOTNiaUJ3Y21sdFpTQW5JQ3NnYm1GdFpTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhCeWFXMWxjMXR1WVcxbFhTQTlJSEJ5YVcxbE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhCeWFXMWxPMXh1SUNCOU8xeHVYRzRnSUM4dlhHNGdJQzh2SUVKaGMyVWdjbVZrZFdOMGFXOXVJR1Z1WjJsdVpWeHVJQ0F2TDF4dUlDQm1kVzVqZEdsdmJpQlNaV1FnS0cwcElIdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHMGdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCMllYSWdjSEpwYldVZ1BTQkNUaTVmY0hKcGJXVW9iU2s3WEc0Z0lDQWdJQ0IwYUdsekxtMGdQU0J3Y21sdFpTNXdPMXh1SUNBZ0lDQWdkR2hwY3k1d2NtbHRaU0E5SUhCeWFXMWxPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCaGMzTmxjblFvYlM1bmRHNG9NU2tzSUNkdGIyUjFiSFZ6SUcxMWMzUWdZbVVnWjNKbFlYUmxjaUIwYUdGdUlERW5LVHRjYmlBZ0lDQWdJSFJvYVhNdWJTQTlJRzA3WEc0Z0lDQWdJQ0IwYUdsekxuQnlhVzFsSUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JTWldRdWNISnZkRzkwZVhCbExsOTJaWEpwWm5reElEMGdablZ1WTNScGIyNGdYM1psY21sbWVURWdLR0VwSUh0Y2JpQWdJQ0JoYzNObGNuUW9ZUzV1WldkaGRHbDJaU0E5UFQwZ01Dd2dKM0psWkNCM2IzSnJjeUJ2Ym14NUlIZHBkR2dnY0c5emFYUnBkbVZ6SnlrN1hHNGdJQ0FnWVhOelpYSjBLR0V1Y21Wa0xDQW5jbVZrSUhkdmNtdHpJRzl1YkhrZ2QybDBhQ0J5WldRZ2JuVnRZbVZ5Y3ljcE8xeHVJQ0I5TzF4dVhHNGdJRkpsWkM1d2NtOTBiM1I1Y0dVdVgzWmxjbWxtZVRJZ1BTQm1kVzVqZEdsdmJpQmZkbVZ5YVdaNU1pQW9ZU3dnWWlrZ2UxeHVJQ0FnSUdGemMyVnlkQ2dvWVM1dVpXZGhkR2wyWlNCOElHSXVibVZuWVhScGRtVXBJRDA5UFNBd0xDQW5jbVZrSUhkdmNtdHpJRzl1YkhrZ2QybDBhQ0J3YjNOcGRHbDJaWE1uS1R0Y2JpQWdJQ0JoYzNObGNuUW9ZUzV5WldRZ0ppWWdZUzV5WldRZ1BUMDlJR0l1Y21Wa0xGeHVJQ0FnSUNBZ0ozSmxaQ0IzYjNKcmN5QnZibXg1SUhkcGRHZ2djbVZrSUc1MWJXSmxjbk1uS1R0Y2JpQWdmVHRjYmx4dUlDQlNaV1F1Y0hKdmRHOTBlWEJsTG1sdGIyUWdQU0JtZFc1amRHbHZiaUJwYlc5a0lDaGhLU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEpwYldVcElISmxkSFZ5YmlCMGFHbHpMbkJ5YVcxbExtbHlaV1IxWTJVb1lTa3VYMlp2Y21ObFVtVmtLSFJvYVhNcE8xeHVJQ0FnSUhKbGRIVnliaUJoTG5WdGIyUW9kR2hwY3k1dEtTNWZabTl5WTJWU1pXUW9kR2hwY3lrN1hHNGdJSDA3WEc1Y2JpQWdVbVZrTG5CeWIzUnZkSGx3WlM1dVpXY2dQU0JtZFc1amRHbHZiaUJ1WldjZ0tHRXBJSHRjYmlBZ0lDQnBaaUFvWVM1cGMxcGxjbThvS1NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdFdVkyeHZibVVvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dExuTjFZaWhoS1M1ZlptOXlZMlZTWldRb2RHaHBjeWs3WEc0Z0lIMDdYRzVjYmlBZ1VtVmtMbkJ5YjNSdmRIbHdaUzVoWkdRZ1BTQm1kVzVqZEdsdmJpQmhaR1FnS0dFc0lHSXBJSHRjYmlBZ0lDQjBhR2x6TGw5MlpYSnBabmt5S0dFc0lHSXBPMXh1WEc0Z0lDQWdkbUZ5SUhKbGN5QTlJR0V1WVdSa0tHSXBPMXh1SUNBZ0lHbG1JQ2h5WlhNdVkyMXdLSFJvYVhNdWJTa2dQajBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVnpMbWx6ZFdJb2RHaHBjeTV0S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlISmxjeTVmWm05eVkyVlNaV1FvZEdocGN5azdYRzRnSUgwN1hHNWNiaUFnVW1Wa0xuQnliM1J2ZEhsd1pTNXBZV1JrSUQwZ1puVnVZM1JwYjI0Z2FXRmtaQ0FvWVN3Z1lpa2dlMXh1SUNBZ0lIUm9hWE11WDNabGNtbG1lVElvWVN3Z1lpazdYRzVjYmlBZ0lDQjJZWElnY21WeklEMGdZUzVwWVdSa0tHSXBPMXh1SUNBZ0lHbG1JQ2h5WlhNdVkyMXdLSFJvYVhNdWJTa2dQajBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVnpMbWx6ZFdJb2RHaHBjeTV0S1R0Y2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlISmxjenRjYmlBZ2ZUdGNibHh1SUNCU1pXUXVjSEp2ZEc5MGVYQmxMbk4xWWlBOUlHWjFibU4wYVc5dUlITjFZaUFvWVN3Z1lpa2dlMXh1SUNBZ0lIUm9hWE11WDNabGNtbG1lVElvWVN3Z1lpazdYRzVjYmlBZ0lDQjJZWElnY21WeklEMGdZUzV6ZFdJb1lpazdYRzRnSUNBZ2FXWWdLSEpsY3k1amJYQnVLREFwSUR3Z01Da2dlMXh1SUNBZ0lDQWdjbVZ6TG1saFpHUW9kR2hwY3k1dEtUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSEpsY3k1ZlptOXlZMlZTWldRb2RHaHBjeWs3WEc0Z0lIMDdYRzVjYmlBZ1VtVmtMbkJ5YjNSdmRIbHdaUzVwYzNWaUlEMGdablZ1WTNScGIyNGdhWE4xWWlBb1lTd2dZaWtnZTF4dUlDQWdJSFJvYVhNdVgzWmxjbWxtZVRJb1lTd2dZaWs3WEc1Y2JpQWdJQ0IyWVhJZ2NtVnpJRDBnWVM1cGMzVmlLR0lwTzF4dUlDQWdJR2xtSUNoeVpYTXVZMjF3Ymlnd0tTQThJREFwSUh0Y2JpQWdJQ0FnSUhKbGN5NXBZV1JrS0hSb2FYTXViU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTTdYRzRnSUgwN1hHNWNiaUFnVW1Wa0xuQnliM1J2ZEhsd1pTNXphR3dnUFNCbWRXNWpkR2x2YmlCemFHd2dLR0VzSUc1MWJTa2dlMXh1SUNBZ0lIUm9hWE11WDNabGNtbG1lVEVvWVNrN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWFXMXZaQ2hoTG5WemFHeHVLRzUxYlNrcE8xeHVJQ0I5TzF4dVhHNGdJRkpsWkM1d2NtOTBiM1I1Y0dVdWFXMTFiQ0E5SUdaMWJtTjBhVzl1SUdsdGRXd2dLR0VzSUdJcElIdGNiaUFnSUNCMGFHbHpMbDkyWlhKcFpua3lLR0VzSUdJcE8xeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtbHRiMlFvWVM1cGJYVnNLR0lwS1R0Y2JpQWdmVHRjYmx4dUlDQlNaV1F1Y0hKdmRHOTBlWEJsTG0xMWJDQTlJR1oxYm1OMGFXOXVJRzExYkNBb1lTd2dZaWtnZTF4dUlDQWdJSFJvYVhNdVgzWmxjbWxtZVRJb1lTd2dZaWs3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YVcxdlpDaGhMbTExYkNoaUtTazdYRzRnSUgwN1hHNWNiaUFnVW1Wa0xuQnliM1J2ZEhsd1pTNXBjM0Z5SUQwZ1puVnVZM1JwYjI0Z2FYTnhjaUFvWVNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxtbHRkV3dvWVN3Z1lTNWpiRzl1WlNncEtUdGNiaUFnZlR0Y2JseHVJQ0JTWldRdWNISnZkRzkwZVhCbExuTnhjaUE5SUdaMWJtTjBhVzl1SUhOeGNpQW9ZU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG0xMWJDaGhMQ0JoS1R0Y2JpQWdmVHRjYmx4dUlDQlNaV1F1Y0hKdmRHOTBlWEJsTG5OeGNuUWdQU0JtZFc1amRHbHZiaUJ6Y1hKMElDaGhLU0I3WEc0Z0lDQWdhV1lnS0dFdWFYTmFaWEp2S0NrcElISmxkSFZ5YmlCaExtTnNiMjVsS0NrN1hHNWNiaUFnSUNCMllYSWdiVzlrTXlBOUlIUm9hWE11YlM1aGJtUnNiaWd6S1R0Y2JpQWdJQ0JoYzNObGNuUW9iVzlrTXlBbElESWdQVDA5SURFcE8xeHVYRzRnSUNBZ0x5OGdSbUZ6ZENCallYTmxYRzRnSUNBZ2FXWWdLRzF2WkRNZ1BUMDlJRE1wSUh0Y2JpQWdJQ0FnSUhaaGNpQndiM2NnUFNCMGFHbHpMbTB1WVdSa0tHNWxkeUJDVGlneEtTa3VhWFZ6YUhKdUtESXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11Y0c5M0tHRXNJSEJ2ZHlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1ZHOXVaV3hzYVMxVGFHRnVhM01nWVd4bmIzSnBkR2h0SUNoVWIzUmhiR3g1SUhWdWIzQjBhVzFwZW1Wa0lHRnVaQ0J6Ykc5M0tWeHVJQ0FnSUM4dlhHNGdJQ0FnTHk4Z1JtbHVaQ0JSSUdGdVpDQlRMQ0IwYUdGMElGRWdLaUF5SUY0Z1V5QTlJQ2hRSUMwZ01TbGNiaUFnSUNCMllYSWdjU0E5SUhSb2FYTXViUzV6ZFdKdUtERXBPMXh1SUNBZ0lIWmhjaUJ6SUQwZ01EdGNiaUFnSUNCM2FHbHNaU0FvSVhFdWFYTmFaWEp2S0NrZ0ppWWdjUzVoYm1Sc2JpZ3hLU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdjeXNyTzF4dUlDQWdJQ0FnY1M1cGRYTm9jbTRvTVNrN1hHNGdJQ0FnZlZ4dUlDQWdJR0Z6YzJWeWRDZ2hjUzVwYzFwbGNtOG9LU2s3WEc1Y2JpQWdJQ0IyWVhJZ2IyNWxJRDBnYm1WM0lFSk9LREVwTG5SdlVtVmtLSFJvYVhNcE8xeHVJQ0FnSUhaaGNpQnVUMjVsSUQwZ2IyNWxMbkpsWkU1bFp5Z3BPMXh1WEc0Z0lDQWdMeThnUm1sdVpDQnhkV0ZrY21GMGFXTWdibTl1TFhKbGMybGtkV1ZjYmlBZ0lDQXZMeUJPVDFSRk9pQk5ZWGdnYVhNZ2MzVmphQ0JpWldOaGRYTmxJRzltSUdkbGJtVnlZV3hwZW1Wa0lGSnBaVzFoYm00Z2FIbHdiM1JvWlhOcGN5NWNiaUFnSUNCMllYSWdiSEJ2ZHlBOUlIUm9hWE11YlM1emRXSnVLREVwTG1sMWMyaHliaWd4S1R0Y2JpQWdJQ0IyWVhJZ2VpQTlJSFJvYVhNdWJTNWlhWFJNWlc1bmRHZ29LVHRjYmlBZ0lDQjZJRDBnYm1WM0lFSk9LRElnS2lCNklDb2dlaWt1ZEc5U1pXUW9kR2hwY3lrN1hHNWNiaUFnSUNCM2FHbHNaU0FvZEdocGN5NXdiM2NvZWl3Z2JIQnZkeWt1WTIxd0tHNVBibVVwSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0I2TG5KbFpFbEJaR1FvYms5dVpTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJR01nUFNCMGFHbHpMbkJ2ZHloNkxDQnhLVHRjYmlBZ0lDQjJZWElnY2lBOUlIUm9hWE11Y0c5M0tHRXNJSEV1WVdSa2JpZ3hLUzVwZFhOb2NtNG9NU2twTzF4dUlDQWdJSFpoY2lCMElEMGdkR2hwY3k1d2IzY29ZU3dnY1NrN1hHNGdJQ0FnZG1GeUlHMGdQU0J6TzF4dUlDQWdJSGRvYVd4bElDaDBMbU50Y0NodmJtVXBJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQjJZWElnZEcxd0lEMGdkRHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QjBiWEF1WTIxd0tHOXVaU2tnSVQwOUlEQTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQjBiWEFnUFNCMGJYQXVjbVZrVTNGeUtDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmhjM05sY25Rb2FTQThJRzBwTzF4dUlDQWdJQ0FnZG1GeUlHSWdQU0IwYUdsekxuQnZkeWhqTENCdVpYY2dRazRvTVNrdWFYVnphR3h1S0cwZ0xTQnBJQzBnTVNrcE8xeHVYRzRnSUNBZ0lDQnlJRDBnY2k1eVpXUk5kV3dvWWlrN1hHNGdJQ0FnSUNCaklEMGdZaTV5WldSVGNYSW9LVHRjYmlBZ0lDQWdJSFFnUFNCMExuSmxaRTExYkNoaktUdGNiaUFnSUNBZ0lHMGdQU0JwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnlPMXh1SUNCOU8xeHVYRzRnSUZKbFpDNXdjbTkwYjNSNWNHVXVhVzUyYlNBOUlHWjFibU4wYVc5dUlHbHVkbTBnS0dFcElIdGNiaUFnSUNCMllYSWdhVzUySUQwZ1lTNWZhVzUyYlhBb2RHaHBjeTV0S1R0Y2JpQWdJQ0JwWmlBb2FXNTJMbTVsWjJGMGFYWmxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQnBibll1Ym1WbllYUnBkbVVnUFNBd08xeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVhVzF2WkNocGJuWXBMbkpsWkU1bFp5Z3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXBiVzlrS0dsdWRpazdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJRkpsWkM1d2NtOTBiM1I1Y0dVdWNHOTNJRDBnWm5WdVkzUnBiMjRnY0c5M0lDaGhMQ0J1ZFcwcElIdGNiaUFnSUNCcFppQW9iblZ0TG1seldtVnlieWdwS1NCeVpYUjFjbTRnYm1WM0lFSk9LREVwTG5SdlVtVmtLSFJvYVhNcE8xeHVJQ0FnSUdsbUlDaHVkVzB1WTIxd2JpZ3hLU0E5UFQwZ01Da2djbVYwZFhKdUlHRXVZMnh2Ym1Vb0tUdGNibHh1SUNBZ0lIWmhjaUIzYVc1a2IzZFRhWHBsSUQwZ05EdGNiaUFnSUNCMllYSWdkMjVrSUQwZ2JtVjNJRUZ5Y21GNUtERWdQRHdnZDJsdVpHOTNVMmw2WlNrN1hHNGdJQ0FnZDI1a1d6QmRJRDBnYm1WM0lFSk9LREVwTG5SdlVtVmtLSFJvYVhNcE8xeHVJQ0FnSUhkdVpGc3hYU0E5SUdFN1hHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlESTdJR2tnUENCM2JtUXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUhkdVpGdHBYU0E5SUhSb2FYTXViWFZzS0hkdVpGdHBJQzBnTVYwc0lHRXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lIWmhjaUJ5WlhNZ1BTQjNibVJiTUYwN1hHNGdJQ0FnZG1GeUlHTjFjbkpsYm5RZ1BTQXdPMXh1SUNBZ0lIWmhjaUJqZFhKeVpXNTBUR1Z1SUQwZ01EdGNiaUFnSUNCMllYSWdjM1JoY25RZ1BTQnVkVzB1WW1sMFRHVnVaM1JvS0NrZ0pTQXlOanRjYmlBZ0lDQnBaaUFvYzNSaGNuUWdQVDA5SURBcElIdGNiaUFnSUNBZ0lITjBZWEowSUQwZ01qWTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ptOXlJQ2hwSUQwZ2JuVnRMbXhsYm1kMGFDQXRJREU3SUdrZ1BqMGdNRHNnYVMwdEtTQjdYRzRnSUNBZ0lDQjJZWElnZDI5eVpDQTlJRzUxYlM1M2IzSmtjMXRwWFR0Y2JpQWdJQ0FnSUdadmNpQW9kbUZ5SUdvZ1BTQnpkR0Z5ZENBdElERTdJR29nUGowZ01Ec2dhaTB0S1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJpYVhRZ1BTQW9kMjl5WkNBK1BpQnFLU0FtSURFN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h5WlhNZ0lUMDlJSGR1WkZzd1hTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGN5QTlJSFJvYVhNdWMzRnlLSEpsY3lrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb1ltbDBJRDA5UFNBd0lDWW1JR04xY25KbGJuUWdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0JqZFhKeVpXNTBUR1Z1SUQwZ01EdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MGFXNTFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5RZ1BEdzlJREU3WEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblFnZkQwZ1ltbDBPMXh1SUNBZ0lDQWdJQ0JqZFhKeVpXNTBUR1Z1S3lzN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqZFhKeVpXNTBUR1Z1SUNFOVBTQjNhVzVrYjNkVGFYcGxJQ1ltSUNocElDRTlQU0F3SUh4OElHb2dJVDA5SURBcEtTQmpiMjUwYVc1MVpUdGNibHh1SUNBZ0lDQWdJQ0J5WlhNZ1BTQjBhR2x6TG0xMWJDaHlaWE1zSUhkdVpGdGpkWEp5Wlc1MFhTazdYRzRnSUNBZ0lDQWdJR04xY25KbGJuUk1aVzRnUFNBd08xeHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MElEMGdNRHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSE4wWVhKMElEMGdNalk3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlISmxjenRjYmlBZ2ZUdGNibHh1SUNCU1pXUXVjSEp2ZEc5MGVYQmxMbU52Ym5abGNuUlVieUE5SUdaMWJtTjBhVzl1SUdOdmJuWmxjblJVYnlBb2JuVnRLU0I3WEc0Z0lDQWdkbUZ5SUhJZ1BTQnVkVzB1ZFcxdlpDaDBhR2x6TG0wcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUhJZ1BUMDlJRzUxYlNBL0lISXVZMnh2Ym1Vb0tTQTZJSEk3WEc0Z0lIMDdYRzVjYmlBZ1VtVmtMbkJ5YjNSdmRIbHdaUzVqYjI1MlpYSjBSbkp2YlNBOUlHWjFibU4wYVc5dUlHTnZiblpsY25SR2NtOXRJQ2h1ZFcwcElIdGNiaUFnSUNCMllYSWdjbVZ6SUQwZ2JuVnRMbU5zYjI1bEtDazdYRzRnSUNBZ2NtVnpMbkpsWkNBOUlHNTFiR3c3WEc0Z0lDQWdjbVYwZFhKdUlISmxjenRjYmlBZ2ZUdGNibHh1SUNBdkwxeHVJQ0F2THlCTmIyNTBaMjl0WlhKNUlHMWxkR2h2WkNCbGJtZHBibVZjYmlBZ0x5OWNibHh1SUNCQ1RpNXRiMjUwSUQwZ1puVnVZM1JwYjI0Z2JXOXVkQ0FvYm5WdEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5iMjUwS0c1MWJTazdYRzRnSUgwN1hHNWNiaUFnWm5WdVkzUnBiMjRnVFc5dWRDQW9iU2tnZTF4dUlDQWdJRkpsWkM1allXeHNLSFJvYVhNc0lHMHBPMXh1WEc0Z0lDQWdkR2hwY3k1emFHbG1kQ0E5SUhSb2FYTXViUzVpYVhSTVpXNW5kR2dvS1R0Y2JpQWdJQ0JwWmlBb2RHaHBjeTV6YUdsbWRDQWxJREkySUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0IwYUdsekxuTm9hV1owSUNzOUlESTJJQzBnS0hSb2FYTXVjMmhwWm5RZ0pTQXlOaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkR2hwY3k1eUlEMGdibVYzSUVKT0tERXBMbWwxYzJoc2JpaDBhR2x6TG5Ob2FXWjBLVHRjYmlBZ0lDQjBhR2x6TG5JeUlEMGdkR2hwY3k1cGJXOWtLSFJvYVhNdWNpNXpjWElvS1NrN1hHNGdJQ0FnZEdocGN5NXlhVzUySUQwZ2RHaHBjeTV5TGw5cGJuWnRjQ2gwYUdsekxtMHBPMXh1WEc0Z0lDQWdkR2hwY3k1dGFXNTJJRDBnZEdocGN5NXlhVzUyTG0xMWJDaDBhR2x6TG5JcExtbHpkV0p1S0RFcExtUnBkaWgwYUdsekxtMHBPMXh1SUNBZ0lIUm9hWE11YldsdWRpQTlJSFJvYVhNdWJXbHVkaTUxYlc5a0tIUm9hWE11Y2lrN1hHNGdJQ0FnZEdocGN5NXRhVzUySUQwZ2RHaHBjeTV5TG5OMVlpaDBhR2x6TG0xcGJuWXBPMXh1SUNCOVhHNGdJR2x1YUdWeWFYUnpLRTF2Ym5Rc0lGSmxaQ2s3WEc1Y2JpQWdUVzl1ZEM1d2NtOTBiM1I1Y0dVdVkyOXVkbVZ5ZEZSdklEMGdablZ1WTNScGIyNGdZMjl1ZG1WeWRGUnZJQ2h1ZFcwcElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXBiVzlrS0c1MWJTNTFjMmhzYmloMGFHbHpMbk5vYVdaMEtTazdYRzRnSUgwN1hHNWNiaUFnVFc5dWRDNXdjbTkwYjNSNWNHVXVZMjl1ZG1WeWRFWnliMjBnUFNCbWRXNWpkR2x2YmlCamIyNTJaWEowUm5KdmJTQW9iblZ0S1NCN1hHNGdJQ0FnZG1GeUlISWdQU0IwYUdsekxtbHRiMlFvYm5WdExtMTFiQ2gwYUdsekxuSnBibllwS1R0Y2JpQWdJQ0J5TG5KbFpDQTlJRzUxYkd3N1hHNGdJQ0FnY21WMGRYSnVJSEk3WEc0Z0lIMDdYRzVjYmlBZ1RXOXVkQzV3Y205MGIzUjVjR1V1YVcxMWJDQTlJR1oxYm1OMGFXOXVJR2x0ZFd3Z0tHRXNJR0lwSUh0Y2JpQWdJQ0JwWmlBb1lTNXBjMXBsY204b0tTQjhmQ0JpTG1seldtVnlieWdwS1NCN1hHNGdJQ0FnSUNCaExuZHZjbVJ6V3pCZElEMGdNRHRjYmlBZ0lDQWdJR0V1YkdWdVozUm9JRDBnTVR0Y2JpQWdJQ0FnSUhKbGRIVnliaUJoTzF4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCMElEMGdZUzVwYlhWc0tHSXBPMXh1SUNBZ0lIWmhjaUJqSUQwZ2RDNXRZWE5yYmloMGFHbHpMbk5vYVdaMEtTNXRkV3dvZEdocGN5NXRhVzUyS1M1cGJXRnphMjRvZEdocGN5NXphR2xtZENrdWJYVnNLSFJvYVhNdWJTazdYRzRnSUNBZ2RtRnlJSFVnUFNCMExtbHpkV0lvWXlrdWFYVnphSEp1S0hSb2FYTXVjMmhwWm5RcE8xeHVJQ0FnSUhaaGNpQnlaWE1nUFNCMU8xeHVYRzRnSUNBZ2FXWWdLSFV1WTIxd0tIUm9hWE11YlNrZ1BqMGdNQ2tnZTF4dUlDQWdJQ0FnY21WeklEMGdkUzVwYzNWaUtIUm9hWE11YlNrN1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMUxtTnRjRzRvTUNrZ1BDQXdLU0I3WEc0Z0lDQWdJQ0J5WlhNZ1BTQjFMbWxoWkdRb2RHaHBjeTV0S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdjbVZ6TGw5bWIzSmpaVkpsWkNoMGFHbHpLVHRjYmlBZ2ZUdGNibHh1SUNCTmIyNTBMbkJ5YjNSdmRIbHdaUzV0ZFd3Z1BTQm1kVzVqZEdsdmJpQnRkV3dnS0dFc0lHSXBJSHRjYmlBZ0lDQnBaaUFvWVM1cGMxcGxjbThvS1NCOGZDQmlMbWx6V21WeWJ5Z3BLU0J5WlhSMWNtNGdibVYzSUVKT0tEQXBMbDltYjNKalpWSmxaQ2gwYUdsektUdGNibHh1SUNBZ0lIWmhjaUIwSUQwZ1lTNXRkV3dvWWlrN1hHNGdJQ0FnZG1GeUlHTWdQU0IwTG0xaGMydHVLSFJvYVhNdWMyaHBablFwTG0xMWJDaDBhR2x6TG0xcGJuWXBMbWx0WVhOcmJpaDBhR2x6TG5Ob2FXWjBLUzV0ZFd3b2RHaHBjeTV0S1R0Y2JpQWdJQ0IyWVhJZ2RTQTlJSFF1YVhOMVlpaGpLUzVwZFhOb2NtNG9kR2hwY3k1emFHbG1kQ2s3WEc0Z0lDQWdkbUZ5SUhKbGN5QTlJSFU3WEc0Z0lDQWdhV1lnS0hVdVkyMXdLSFJvYVhNdWJTa2dQajBnTUNrZ2UxeHVJQ0FnSUNBZ2NtVnpJRDBnZFM1cGMzVmlLSFJvYVhNdWJTazdYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaDFMbU50Y0c0b01Da2dQQ0F3S1NCN1hHNGdJQ0FnSUNCeVpYTWdQU0IxTG1saFpHUW9kR2hwY3k1dEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnY21WekxsOW1iM0pqWlZKbFpDaDBhR2x6S1R0Y2JpQWdmVHRjYmx4dUlDQk5iMjUwTG5CeWIzUnZkSGx3WlM1cGJuWnRJRDBnWm5WdVkzUnBiMjRnYVc1MmJTQW9ZU2tnZTF4dUlDQWdJQzh2SUNoQlVpbGVMVEVnS2lCU1hqSWdQU0FvUVY0dE1TQXFJRkplTFRFcElDb2dVbDR5SUQwZ1FWNHRNU0FxSUZKY2JpQWdJQ0IyWVhJZ2NtVnpJRDBnZEdocGN5NXBiVzlrS0dFdVgybHVkbTF3S0hSb2FYTXViU2t1YlhWc0tIUm9hWE11Y2pJcEtUdGNiaUFnSUNCeVpYUjFjbTRnY21WekxsOW1iM0pqWlZKbFpDaDBhR2x6S1R0Y2JpQWdmVHRjYm4wcEtIUjVjR1Z2WmlCdGIyUjFiR1VnUFQwOUlDZDFibVJsWm1sdVpXUW5JSHg4SUcxdlpIVnNaU3dnZEdocGN5azdYRzRpTENJdktseHVJRUVnU21GMllWTmpjbWx3ZENCcGJYQnNaVzFsYm5SaGRHbHZiaUJ2WmlCMGFHVWdVMGhCSUdaaGJXbHNlU0J2WmlCb1lYTm9aWE1zSUdGelhHNGdaR1ZtYVc1bFpDQnBiaUJHU1ZCVElGQlZRaUF4T0RBdE5DQmhibVFnUmtsUVV5QlFWVUlnTWpBeUxDQmhjeUIzWld4c0lHRnpJSFJvWlNCamIzSnlaWE53YjI1a2FXNW5YRzRnU0UxQlF5QnBiWEJzWlcxbGJuUmhkR2x2YmlCaGN5QmtaV1pwYm1Wa0lHbHVJRVpKVUZNZ1VGVkNJREU1T0dGY2JseHVJRU52Y0hseWFXZG9kQ0JDY21saGJpQlVkWEpsYXlBeU1EQTRMVEl3TVRkY2JpQkVhWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnUWxORUlFeHBZMlZ1YzJWY2JpQlRaV1VnYUhSMGNEb3ZMMk5oYkdsbllYUnBieTVuYVhSb2RXSXVZMjl0TDJwelUwaEJMeUJtYjNJZ2JXOXlaU0JwYm1admNtMWhkR2x2Ymx4dVhHNGdVMlYyWlhKaGJDQm1kVzVqZEdsdmJuTWdkR0ZyWlc0Z1puSnZiU0JRWVhWc0lFcHZhRzV6ZEc5dVhHNHFMMXh1SjNWelpTQnpkSEpwWTNRbk95aG1kVzVqZEdsdmJpaFpLWHRtZFc1amRHbHZiaUJES0dNc1lTeGlLWHQyWVhJZ1pUMHdMR2c5VzEwc2JqMHdMR2NzYkN4a0xHWXNiU3h4TEhVc2NpeEpQU0V4TEhZOVcxMHNkejFiWFN4MExIazlJVEVzZWowaE1TeDRQUzB4TzJJOVlueDhlMzA3WnoxaUxtVnVZMjlrYVc1bmZIeGNJbFZVUmpoY0lqdDBQV0l1Ym5WdFVtOTFibVJ6Zkh3eE8ybG1LSFFoUFQxd1lYSnpaVWx1ZENoMExERXdLWHg4TVQ1MEtYUm9jbTkzSUVWeWNtOXlLRndpYm5WdFVtOTFibVJ6SUcxMWMzUWdZU0JwYm5SbFoyVnlJRDQ5SURGY0lpazdhV1lvWENKVFNFRXRNVndpUFQwOVl5bHRQVFV4TWl4eFBVc3NkVDFhTEdZOU1UWXdMSEk5Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUdFdWMyeHBZMlVvS1gwN1pXeHpaU0JwWmlnd1BUMDlZeTVzWVhOMFNXNWtaWGhQWmloY0lsTklRUzFjSWl3d0tTbHBaaWh4UFdaMWJtTjBhVzl1S0dFc1lpbDdjbVYwZFhKdUlFd29ZU3hpTEdNcGZTeDFQV1oxYm1OMGFXOXVLR0VzWWl4b0xHVXBlM1poY2lCckxHWTdhV1lvWENKVFNFRXRNakkwWENJOVBUMWpmSHhjSWxOSVFTMHlOVFpjSWowOVBXTXBhejBvWWlzMk5UNCtQams4UERRcEt6RTFMR1k5TVRZN1pXeHpaU0JwWmloY0lsTklRUzB6T0RSY0lqMDlQV044ZkZ3aVUwaEJMVFV4TWx3aVBUMDlZeWxyUFNoaUt6RXlPVDQrUGpFd1BEeGNialVwS3pNeExHWTlNekk3Wld4elpTQjBhSEp2ZHlCRmNuSnZjaWhjSWxWdVpYaHdaV04wWldRZ1pYSnliM0lnYVc0Z1UwaEJMVElnYVcxd2JHVnRaVzUwWVhScGIyNWNJaWs3Wm05eUtEdGhMbXhsYm1kMGFEdzlhenNwWVM1d2RYTm9LREFwTzJGYllqNCtQalZkZkQweE1qZzhQREkwTFdJbE16STdZajFpSzJnN1lWdHJYVDFpSmpReU9UUTVOamN5T1RVN1lWdHJMVEZkUFdJdk5ESTVORGsyTnpJNU5ud3dPMmc5WVM1c1pXNW5kR2c3Wm05eUtHSTlNRHRpUEdnN1lpczlaaWxsUFV3b1lTNXpiR2xqWlNoaUxHSXJaaWtzWlN4aktUdHBaaWhjSWxOSVFTMHlNalJjSWowOVBXTXBZVDFiWlZzd1hTeGxXekZkTEdWYk1sMHNaVnN6WFN4bFd6UmRMR1ZiTlYwc1pWczJYVjA3Wld4elpTQnBaaWhjSWxOSVFTMHlOVFpjSWowOVBXTXBZVDFsTzJWc2MyVWdhV1lvWENKVFNFRXRNemcwWENJOVBUMWpLV0U5VzJWYk1GMHVZU3hsV3pCZExtSXNaVnN4WFM1aExHVmJNVjB1WWl4bFd6SmRMbUVzWlZzeVhTNWlMR1ZiTTEwdVlTeGxXek5kTG1Jc1pWczBYUzVoTEdWYk5GMHVZaXhsV3pWZExtRXNaVnMxWFM1aVhUdGxiSE5sSUdsbUtGd2lVMGhCTFRVeE1sd2lQVDA5WXlsaFBWdGxXekJkTG1Fc1pWc3dYUzVpTEdWYk1WMHVZU3hsV3pGZExtSXNaVnN5WFM1aExHVmJNbDB1WWl4bFd6TmRMbUVzWlZzelhTNWlMR1ZiTkYwdVlTeGNibVZiTkYwdVlpeGxXelZkTG1Fc1pWczFYUzVpTEdWYk5sMHVZU3hsV3paZExtSXNaVnMzWFM1aExHVmJOMTB1WWwwN1pXeHpaU0IwYUhKdmR5QkZjbkp2Y2loY0lsVnVaWGh3WldOMFpXUWdaWEp5YjNJZ2FXNGdVMGhCTFRJZ2FXMXdiR1Z0Wlc1MFlYUnBiMjVjSWlrN2NtVjBkWEp1SUdGOUxISTlablZ1WTNScGIyNG9ZU2w3Y21WMGRYSnVJR0V1YzJ4cFkyVW9LWDBzWENKVFNFRXRNakkwWENJOVBUMWpLVzA5TlRFeUxHWTlNakkwTzJWc2MyVWdhV1lvWENKVFNFRXRNalUyWENJOVBUMWpLVzA5TlRFeUxHWTlNalUyTzJWc2MyVWdhV1lvWENKVFNFRXRNemcwWENJOVBUMWpLVzA5TVRBeU5DeG1QVE00TkR0bGJITmxJR2xtS0Z3aVUwaEJMVFV4TWx3aVBUMDlZeWx0UFRFd01qUXNaajAxTVRJN1pXeHpaU0IwYUhKdmR5QkZjbkp2Y2loY0lrTm9iM05sYmlCVFNFRWdkbUZ5YVdGdWRDQnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa1hDSXBPMlZzYzJVZ2FXWW9NRDA5UFdNdWJHRnpkRWx1WkdWNFQyWW9YQ0pUU0VFekxWd2lMREFwZkh3d1BUMDlZeTVzWVhOMFNXNWtaWGhQWmloY0lsTklRVXRGWENJc01Da3BlM1poY2lCR1BUWTdjVDFFTzNJOVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdNOVcxMHNaVHRtYjNJb1pUMHdPelUrWlR0bEt6MHhLV05iWlYwOVlWdGxYUzV6YkdsalpTZ3BPM0psZEhWeWJpQmpmVHQ0UFRFN2FXWW9YQ0pUU0VFekxUSXlORndpUFQwOVhHNWpLVzA5TVRFMU1peG1QVEl5TkR0bGJITmxJR2xtS0Z3aVUwaEJNeTB5TlRaY0lqMDlQV01wYlQweE1EZzRMR1k5TWpVMk8yVnNjMlVnYVdZb1hDSlRTRUV6TFRNNE5Gd2lQVDA5WXlsdFBUZ3pNaXhtUFRNNE5EdGxiSE5sSUdsbUtGd2lVMGhCTXkwMU1USmNJajA5UFdNcGJUMDFOellzWmowMU1USTdaV3h6WlNCcFppaGNJbE5JUVV0Rk1USTRYQ0k5UFQxaktXMDlNVE0wTkN4bVBTMHhMRVk5TXpFc2VqMGhNRHRsYkhObElHbG1LRndpVTBoQlMwVXlOVFpjSWowOVBXTXBiVDB4TURnNExHWTlMVEVzUmowek1TeDZQU0V3TzJWc2MyVWdkR2h5YjNjZ1JYSnliM0lvWENKRGFHOXpaVzRnVTBoQklIWmhjbWxoYm5RZ2FYTWdibTkwSUhOMWNIQnZjblJsWkZ3aUtUdDFQV1oxYm1OMGFXOXVLR0VzWXl4bExHSXNhQ2w3WlQxdE8zWmhjaUJyUFVZc1ppeG5QVnRkTEc0OVpUNCtQalVzYkQwd0xHUTlZejQrUGpVN1ptOXlLR1k5TUR0bVBHUW1KbU0rUFdVN1ppczliaWxpUFVRb1lTNXpiR2xqWlNobUxHWXJiaWtzWWlrc1l5MDlaVHRoUFdFdWMyeHBZMlVvWmlrN1ptOXlLR01sUFdVN1lTNXNaVzVuZEdnOGJqc3BZUzV3ZFhOb0tEQXBPMlk5WXo0K1BqTTdZVnRtUGo0eVhWNDlhenc4WmlVMEtqZzdZVnR1TFRGZFhqMHlNVFEzTkRnek5qUTRPMlp2Y2loaVBVUW9ZU3hpS1Rzek1pcG5MbXhsYm1kMGFEeG9PeWw3WVQxaVcyd2xYRzQxWFZ0c0x6VjhNRjA3Wnk1d2RYTm9LR0V1WWlrN2FXWW9NeklxWnk1c1pXNW5kR2crUFdncFluSmxZV3M3Wnk1d2RYTm9LR0V1WVNrN2JDczlNVHN3UFQwOU5qUXFiQ1ZsSmlaRUtHNTFiR3dzWWlsOWNtVjBkWEp1SUdkOWZXVnNjMlVnZEdoeWIzY2dSWEp5YjNJb1hDSkRhRzl6Wlc0Z1UwaEJJSFpoY21saGJuUWdhWE1nYm05MElITjFjSEJ2Y25SbFpGd2lLVHRrUFUwb1lTeG5MSGdwTzJ3OVFTaGpLVHQwYUdsekxuTmxkRWhOUVVOTFpYazlablZ1WTNScGIyNG9ZU3hpTEdncGUzWmhjaUJyTzJsbUtDRXdQVDA5U1NsMGFISnZkeUJGY25KdmNpaGNJa2hOUVVNZ2EyVjVJR0ZzY21WaFpIa2djMlYwWENJcE8ybG1LQ0V3UFQwOWVTbDBhSEp2ZHlCRmNuSnZjaWhjSWtOaGJtNXZkQ0J6WlhRZ1NFMUJReUJyWlhrZ1lXWjBaWElnWTJGc2JHbHVaeUIxY0dSaGRHVmNJaWs3YVdZb0lUQTlQVDE2S1hSb2NtOTNJRVZ5Y205eUtGd2lVMGhCUzBVZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNCbWIzSWdTRTFCUTF3aUtUdG5QU2hvZkh4N2ZTa3VaVzVqYjJScGJtZDhmRndpVlZSR09Gd2lPMkk5VFNoaUxHY3NlQ2tvWVNrN1lUMWlMbUpwYmt4bGJqdGlQV0l1ZG1Gc2RXVTdhejF0UGo0K016dG9QV3N2TkMweE8ybG1LR3M4WVM4NEtYdG1iM0lvWWoxMUtHSXNZU3d3TEVFb1l5a3NaaWs3WWk1c1pXNW5kR2c4UFdnN0tXSXVjSFZ6YUNnd0tUdGNibUpiYUYwbVBUUXlPVFE1Tmpjd05EQjlaV3h6WlNCcFppaHJQbUV2T0NsN1ptOXlLRHRpTG14bGJtZDBhRHc5YURzcFlpNXdkWE5vS0RBcE8ySmJhRjBtUFRReU9UUTVOamN3TkRCOVptOXlLR0U5TUR0aFBEMW9PMkVyUFRFcGRsdGhYVDFpVzJGZFhqa3dPVFV5TWpRNE5peDNXMkZkUFdKYllWMWVNVFUwT1RVMU5qZ3lPRHRzUFhFb2RpeHNLVHRsUFcwN1NUMGhNSDA3ZEdocGN5NTFjR1JoZEdVOVpuVnVZM1JwYjI0b1lTbDdkbUZ5SUdNc1lpeHJMR1k5TUN4blBXMCtQajQxTzJNOVpDaGhMR2dzYmlrN1lUMWpMbUpwYmt4bGJqdGlQV011ZG1Gc2RXVTdZejFoUGo0K05UdG1iM0lvYXowd08yczhZenRyS3oxbktXWXJiVHc5WVNZbUtHdzljU2hpTG5Oc2FXTmxLR3NzYXl0bktTeHNLU3htS3oxdEtUdGxLejFtTzJnOVlpNXpiR2xqWlNobVBqNCtOU2s3YmoxaEpXMDdlVDBoTUgwN2RHaHBjeTVuWlhSSVlYTm9QV1oxYm1OMGFXOXVLR0VzWWlsN2RtRnlJR3NzWnl4a0xHMDdhV1lvSVRBOVBUMUpLWFJvY205M0lFVnljbTl5S0Z3aVEyRnVibTkwSUdOaGJHd2daMlYwU0dGemFDQmhablJsY2lCelpYUjBhVzVuSUVoTlFVTWdhMlY1WENJcE8yUTlUaWhpS1R0cFppZ2hNRDA5UFhvcGUybG1LQzB4UFQwOVpDNXphR0ZyWlV4bGJpbDBhSEp2ZHlCRmNuSnZjaWhjSW5Ob1lXdGxUR1Z1SUcxMWMzUWdZbVVnYzNCbFkybG1hV1ZrSUdsdUlHOXdkR2x2Ym5OY0lpazdYRzVtUFdRdWMyaGhhMlZNWlc1OWMzZHBkR05vS0dFcGUyTmhjMlVnWENKSVJWaGNJanByUFdaMWJtTjBhVzl1S0dFcGUzSmxkSFZ5YmlCUEtHRXNaaXg0TEdRcGZUdGljbVZoYXp0allYTmxJRndpUWpZMFhDSTZhejFtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnVUNoaExHWXNlQ3hrS1gwN1luSmxZV3M3WTJGelpTQmNJa0paVkVWVFhDSTZhejFtZFc1amRHbHZiaWhoS1h0eVpYUjFjbTRnVVNoaExHWXNlQ2w5TzJKeVpXRnJPMk5oYzJVZ1hDSkJVbEpCV1VKVlJrWkZVbHdpT25SeWVYdG5QVzVsZHlCQmNuSmhlVUoxWm1abGNpZ3dLWDFqWVhSamFDaHdLWHQwYUhKdmR5QkZjbkp2Y2loY0lrRlNVa0ZaUWxWR1JrVlNJRzV2ZENCemRYQndiM0owWldRZ1lua2dkR2hwY3lCbGJuWnBjbTl1YldWdWRGd2lLVHQ5YXoxbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z1VpaGhMR1lzZUNsOU8ySnlaV0ZyTzJSbFptRjFiSFE2ZEdoeWIzY2dSWEp5YjNJb1hDSm1iM0p0WVhRZ2JYVnpkQ0JpWlNCSVJWZ3NJRUkyTkN3Z1FsbFVSVk1zSUc5eUlFRlNVa0ZaUWxWR1JrVlNYQ0lwTzMxdFBYVW9hQzV6YkdsalpTZ3BMRzRzWlN4eUtHd3BMR1lwTzJadmNpaG5QVEU3Wnp4ME8yY3JQVEVwSVRBOVBUMTZKaVl3SVQwOVppVXpNaVltS0cxYmJTNXNaVzVuZEdndE1WMG1QVEUyTnpjM01qRTFQajQrTWpRdFppVXpNaWtzYlQxMUtHMHNaaXhjYmpBc1FTaGpLU3htS1R0eVpYUjFjbTRnYXlodEtYMDdkR2hwY3k1blpYUklUVUZEUFdaMWJtTjBhVzl1S0dFc1lpbDdkbUZ5SUdzc1p5eGtMSEE3YVdZb0lURTlQVDFKS1hSb2NtOTNJRVZ5Y205eUtGd2lRMkZ1Ym05MElHTmhiR3dnWjJWMFNFMUJReUIzYVhSb2IzVjBJR1pwY25OMElITmxkSFJwYm1jZ1NFMUJReUJyWlhsY0lpazdaRDFPS0dJcE8zTjNhWFJqYUNoaEtYdGpZWE5sSUZ3aVNFVllYQ0k2YXoxbWRXNWpkR2x2YmloaEtYdHlaWFIxY200Z1R5aGhMR1lzZUN4a0tYMDdZbkpsWVdzN1kyRnpaU0JjSWtJMk5Gd2lPbXM5Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUZBb1lTeG1MSGdzWkNsOU8ySnlaV0ZyTzJOaGMyVWdYQ0pDV1ZSRlUxd2lPbXM5Wm5WdVkzUnBiMjRvWVNsN2NtVjBkWEp1SUZFb1lTeG1MSGdwZlR0aWNtVmhhenRqWVhObElGd2lRVkpTUVZsQ1ZVWkdSVkpjSWpwMGNubDdhejF1WlhjZ1FYSnlZWGxDZFdabVpYSW9NQ2w5WTJGMFkyZ29kaWw3ZEdoeWIzY2dSWEp5YjNJb1hDSkJVbEpCV1VKVlJrWkZVaUJ1YjNRZ2MzVndjRzl5ZEdWa0lHSjVJSFJvYVhNZ1pXNTJhWEp2Ym0xbGJuUmNJaWs3ZldzOVpuVnVZM1JwYjI0b1lTbDdjbVYwZFhKdUlGSW9ZU3htTEhncGZUdGljbVZoYXp0a1pXWmhkV3gwT25Sb2NtOTNJRVZ5Y205eUtGd2liM1YwY0hWMFJtOXliV0YwSUcxMWMzUWdZbVVnU0VWWUxDQkNOalFzSUVKWlZFVlRMQ0J2Y2lCQlVsSkJXVUpWUmtaRlVsd2lLVHRjYm4xblBYVW9hQzV6YkdsalpTZ3BMRzRzWlN4eUtHd3BMR1lwTzNBOWNTaDNMRUVvWXlrcE8zQTlkU2huTEdZc2JTeHdMR1lwTzNKbGRIVnliaUJyS0hBcGZYMW1kVzVqZEdsdmJpQmlLR01zWVNsN2RHaHBjeTVoUFdNN2RHaHBjeTVpUFdGOVpuVnVZM1JwYjI0Z1R5aGpMR0VzWWl4bEtYdDJZWElnYUQxY0lsd2lPMkV2UFRnN2RtRnlJRzRzWnl4a08yUTlMVEU5UFQxaVB6TTZNRHRtYjNJb2JqMHdPMjQ4WVR0dUt6MHhLV2M5WTF0dVBqNCtNbDArUGo0NEtpaGtLMjRsTkNwaUtTeG9LejFjSWpBeE1qTTBOVFkzT0RsaFltTmtaV1pjSWk1amFHRnlRWFFvWno0K1BqUW1NVFVwSzF3aU1ERXlNelExTmpjNE9XRmlZMlJsWmx3aUxtTm9ZWEpCZENobkpqRTFLVHR5WlhSMWNtNGdaUzV2ZFhSd2RYUlZjSEJsY2o5b0xuUnZWWEJ3WlhKRFlYTmxLQ2s2YUgxbWRXNWpkR2x2YmlCUUtHTXNZU3hpTEdVcGUzWmhjaUJvUFZ3aVhDSXNiajFoTHpnc1p5eGtMSEFzWmp0bVBTMHhQVDA5WWo4ek9qQTdabTl5S0djOU1EdG5QRzQ3WnlzOU15bG1iM0lvWkQxbkt6RThiajlqVzJjck1UNCtQakpkT2pBc2NEMW5Lekk4Ymo5alcyY3JNajQrUGpKZE9qQXNjRDBvWTF0blBqNCtNbDArUGo0NEtpaG1LMmNsTkNwaUtTWXlOVFVwUER3eE5ud29aRDQrUGpncUtHWXJLR2NyTVNrbE5DcGlLU1l5TlRVcFBEdzRmSEErUGo0NEtpaG1LMXh1S0djck1pa2xOQ3BpS1NZeU5UVXNaRDB3T3pRK1pEdGtLejB4S1RncVp5czJLbVE4UFdFL2FDczlYQ0pCUWtORVJVWkhTRWxLUzB4TlRrOVFVVkpUVkZWV1YxaFpXbUZpWTJSbFptZG9hV3ByYkcxdWIzQnhjbk4wZFhaM2VIbDZNREV5TXpRMU5qYzRPU3N2WENJdVkyaGhja0YwS0hBK1BqNDJLaWd6TFdRcEpqWXpLVHBvS3oxbExtSTJORkJoWkR0eVpYUjFjbTRnYUgxbWRXNWpkR2x2YmlCUktHTXNZU3hpS1h0MllYSWdaVDFjSWx3aU8yRXZQVGc3ZG1GeUlHZ3NaQ3huTzJjOUxURTlQVDFpUHpNNk1EdG1iM0lvYUQwd08yZzhZVHRvS3oweEtXUTlZMXRvUGo0K01sMCtQajQ0S2lobksyZ2xOQ3BpS1NZeU5UVXNaU3M5VTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNoa0tUdHlaWFIxY200Z1pYMW1kVzVqZEdsdmJpQlNLR01zWVN4aUtYdGhMejA0TzNaaGNpQmxMR2c5Ym1WM0lFRnljbUY1UW5WbVptVnlLR0VwTEdRc1p6dG5QVzVsZHlCVmFXNTBPRUZ5Y21GNUtHZ3BPMlE5TFRFOVBUMWlQek02TUR0bWIzSW9aVDB3TzJVOFlUdGxLejB4S1dkYlpWMDlZMXRsUGo0K01sMCtQajQ0S2loa0syVWxOQ3BpS1NZeU5UVTdjbVYwZFhKdUlHaDlablZ1WTNScGIyNGdUaWhqS1h0MllYSWdZVDE3YjNWMGNIVjBWWEJ3WlhJNklURXNZalkwVUdGa09sd2lQVndpTEhOb1lXdGxUR1Z1T2kweGZUdGpQV044Zkh0OU8xeHVZUzV2ZFhSd2RYUlZjSEJsY2oxakxtOTFkSEIxZEZWd2NHVnlmSHdoTVRzaE1EMDlQV011YUdGelQzZHVVSEp2Y0dWeWRIa29YQ0ppTmpSUVlXUmNJaWttSmloaExtSTJORkJoWkQxakxtSTJORkJoWkNrN2FXWW9JVEE5UFQxakxtaGhjMDkzYmxCeWIzQmxjblI1S0Z3aWMyaGhhMlZNWlc1Y0lpa3BlMmxtS0RBaFBUMWpMbk5vWVd0bFRHVnVKVGdwZEdoeWIzY2dSWEp5YjNJb1hDSnphR0ZyWlV4bGJpQnRkWE4wSUdKbElHRWdiWFZzZEdsd2JHVWdiMllnT0Z3aUtUdGhMbk5vWVd0bFRHVnVQV011YzJoaGEyVk1aVzU5YVdZb1hDSmliMjlzWldGdVhDSWhQVDEwZVhCbGIyWWdZUzV2ZFhSd2RYUlZjSEJsY2lsMGFISnZkeUJGY25KdmNpaGNJa2x1ZG1Gc2FXUWdiM1YwY0hWMFZYQndaWElnWm05eWJXRjBkR2x1WnlCdmNIUnBiMjVjSWlrN2FXWW9YQ0p6ZEhKcGJtZGNJaUU5UFhSNWNHVnZaaUJoTG1JMk5GQmhaQ2wwYUhKdmR5QkZjbkp2Y2loY0lrbHVkbUZzYVdRZ1lqWTBVR0ZrSUdadmNtMWhkSFJwYm1jZ2IzQjBhVzl1WENJcE8zSmxkSFZ5YmlCaGZXWjFibU4wYVc5dUlFMG9ZeXhoTEdJcGUzTjNhWFJqYUNoaEtYdGpZWE5sSUZ3aVZWUkdPRndpT21OaGMyVWdYQ0pWVkVZeE5rSkZYQ0k2WTJGelpTQmNJbFZVUmpFMlRFVmNJanBpY21WaGF6dGtaV1poZFd4ME9uUm9jbTkzSUVWeWNtOXlLRndpWlc1amIyUnBibWNnYlhWemRDQmlaU0JWVkVZNExDQlZWRVl4TmtKRkxDQnZjaUJWVkVZeE5reEZYQ0lwTzF4dWZYTjNhWFJqYUNoaktYdGpZWE5sSUZ3aVNFVllYQ0k2WXoxbWRXNWpkR2x2YmloaExHTXNaQ2w3ZG1GeUlHYzlZUzVzWlc1bmRHZ3NiQ3h3TEdZc2JTeHhMSFU3YVdZb01DRTlQV2NsTWlsMGFISnZkeUJGY25KdmNpaGNJbE4wY21sdVp5QnZaaUJJUlZnZ2RIbHdaU0J0ZFhOMElHSmxJR2x1SUdKNWRHVWdhVzVqY21WdFpXNTBjMXdpS1R0alBXTjhmRnN3WFR0a1BXUjhmREE3Y1Qxa1BqNCtNenQxUFMweFBUMDlZajh6T2pBN1ptOXlLR3c5TUR0c1BHYzdiQ3M5TWlsN2NEMXdZWEp6WlVsdWRDaGhMbk4xWW5OMGNpaHNMRElwTERFMktUdHBaaWhwYzA1aFRpaHdLU2wwYUhKdmR5QkZjbkp2Y2loY0lsTjBjbWx1WnlCdlppQklSVmdnZEhsd1pTQmpiMjUwWVdsdWN5QnBiblpoYkdsa0lHTm9ZWEpoWTNSbGNuTmNJaWs3YlQwb2JENCtQakVwSzNFN1ptOXlLR1k5YlQ0K1BqSTdZeTVzWlc1bmRHZzhQV1k3S1dNdWNIVnphQ2d3S1R0alcyWmRmRDF3UER3NEtpaDFLMjBsTkNwaUtYMXlaWFIxY201N2RtRnNkV1U2WXl4aWFXNU1aVzQ2TkNwbksyUjlmVHRpY21WaGF6dGpZWE5sSUZ3aVZFVllWRndpT21NOVpuVnVZM1JwYjI0b1l5eG9MR1FwZTNaaGNpQm5MR3dzY0Qwd0xHWXNiU3h4TEhVc2NpeDBPMmc5YUh4OFd6QmRPMlE5Wkh4OE1EdHhQV1ErUGo0ek8ybG1LRndpVlZSR09Gd2lQVDA5WVNsbWIzSW9kRDB0TVQwOVBWeHVZajh6T2pBc1pqMHdPMlk4WXk1c1pXNW5kR2c3WmlzOU1TbG1iM0lvWnoxakxtTm9ZWEpEYjJSbFFYUW9aaWtzYkQxYlhTd3hNamcrWno5c0xuQjFjMmdvWnlrNk1qQTBPRDVuUHloc0xuQjFjMmdvTVRreWZHYytQajQyS1N4c0xuQjFjMmdvTVRJNGZHY21Oak1wS1RvMU5USTVOajVuZkh3MU56TTBORHc5Wno5c0xuQjFjMmdvTWpJMGZHYytQajR4TWl3eE1qaDhaejQrUGpZbU5qTXNNVEk0ZkdjbU5qTXBPaWhtS3oweExHYzlOalUxTXpZcktDaG5KakV3TWpNcFBEd3hNSHhqTG1Ob1lYSkRiMlJsUVhRb1ppa21NVEF5TXlrc2JDNXdkWE5vS0RJME1IeG5QajQrTVRnc01USTRmR2MrUGo0eE1pWTJNeXd4TWpoOFp6NCtQalltTmpNc01USTRmR2NtTmpNcEtTeHRQVEE3YlR4c0xteGxibWQwYUR0dEt6MHhLWHR5UFhBcmNUdG1iM0lvZFQxeVBqNCtNanRvTG14bGJtZDBhRHc5ZFRzcGFDNXdkWE5vS0RBcE8yaGJkVjE4UFd4YmJWMDhQRGdxS0hRcmNpVTBLbUlwTzNBclBURjlaV3h6WlNCcFppaGNJbFZVUmpFMlFrVmNJajA5UFdGOGZGd2lWVlJHTVRaTVJWd2lQVDA5WVNsbWIzSW9kRDB0TVQwOVBXSS9Nam93TEd3OVhDSlZWRVl4Tmt4RlhDSTlQVDFoSmlZeElUMDlZbng4WENKVlZFWXhOa3hGWENJaFBUMWhKaVl4UFQwOVlpeG1QVEE3Wmp4akxteGxibWQwYUR0bUt6MHhLWHRuUFdNdVkyaGhja052WkdWQmRDaG1LVHRjYmlFd1BUMDliQ1ltS0cwOVp5WXlOVFVzWnoxdFBEdzRmR2MrUGo0NEtUdHlQWEFyY1R0bWIzSW9kVDF5UGo0K01qdG9MbXhsYm1kMGFEdzlkVHNwYUM1d2RYTm9LREFwTzJoYmRWMThQV2M4UERncUtIUXJjaVUwS21JcE8zQXJQVEo5Y21WMGRYSnVlM1poYkhWbE9tZ3NZbWx1VEdWdU9qZ3FjQ3RrZlgwN1luSmxZV3M3WTJGelpTQmNJa0kyTkZ3aU9tTTlablZ1WTNScGIyNG9ZU3hqTEdRcGUzWmhjaUJuUFRBc2JDeHdMR1lzYlN4eExIVXNjaXgwTzJsbUtDMHhQVDA5WVM1elpXRnlZMmdvTDE1YllTMTZRUzFhTUMwNVBTdGNYQzlkS3lRdktTbDBhSEp2ZHlCRmNuSnZjaWhjSWtsdWRtRnNhV1FnWTJoaGNtRmpkR1Z5SUdsdUlHSmhjMlV0TmpRZ2MzUnlhVzVuWENJcE8zQTlZUzVwYm1SbGVFOW1LRndpUFZ3aUtUdGhQV0V1Y21Wd2JHRmpaU2d2WEZ3OUwyY3NYQ0pjSWlrN2FXWW9MVEVoUFQxd0ppWndQR0V1YkdWdVozUm9LWFJvY205M0lFVnljbTl5S0Z3aVNXNTJZV3hwWkNBblBTY2dabTkxYm1RZ2FXNGdZbUZ6WlMwMk5DQnpkSEpwYm1kY0lpazdZejFqZkh4Yk1GMDdaRDFrZkh3d08zVTlaRDQrUGpNN2REMHRNVDA5UFdJL016b3dPMlp2Y2lod1BUQTdjRHhoTG14bGJtZDBhRHR3S3owMEtYdHhQV0V1YzNWaWMzUnlLSEFzTkNrN1ptOXlLR1k5YlQwd08yWThjUzVzWlc1bmRHZzdaaXM5TVNsc1BWd2lRVUpEUkVWR1IwaEpTa3RNVFU1UFVGRlNVMVJWVmxkWVdWcGhZbU5rWldabmFHbHFhMnh0Ym05d2NYSnpkSFYyZDNoNWVqQXhNak0wTlRZM09Ea3JMMXdpTG1sdVpHVjRUMllvY1Z0bVhTa3NYRzV0ZkQxc1BEd3hPQzAyS21ZN1ptOXlLR1k5TUR0bVBIRXViR1Z1WjNSb0xURTdaaXM5TVNsN2NqMW5LM1U3Wm05eUtHdzljajQrUGpJN1l5NXNaVzVuZEdnOFBXdzdLV011Y0hWemFDZ3dLVHRqVzJ4ZGZEMG9iVDQrUGpFMkxUZ3FaaVl5TlRVcFBEdzRLaWgwSzNJbE5DcGlLVHRuS3oweGZYMXlaWFIxY201N2RtRnNkV1U2WXl4aWFXNU1aVzQ2T0NwbksyUjlmVHRpY21WaGF6dGpZWE5sSUZ3aVFsbFVSVk5jSWpwalBXWjFibU4wYVc5dUtHRXNZeXhrS1h0MllYSWdaeXhzTEhBc1ppeHRMSEU3WXoxamZIeGJNRjA3WkQxa2ZId3dPM0E5WkQ0K1BqTTdjVDB0TVQwOVBXSS9Nem93TzJadmNpaHNQVEE3YkR4aExteGxibWQwYUR0c0t6MHhLV2M5WVM1amFHRnlRMjlrWlVGMEtHd3BMRzA5YkN0d0xHWTliVDQrUGpJc1l5NXNaVzVuZEdnOFBXWW1KbU11Y0hWemFDZ3dLU3hqVzJaZGZEMW5QRHc0S2loeEsyMGxOQ3BpS1R0eVpYUjFjbTU3ZG1Gc2RXVTZZeXhpYVc1TVpXNDZPQ3BoTG14bGJtZDBhQ3RrZlgwN1luSmxZV3M3WTJGelpTQmNJa0ZTVWtGWlFsVkdSa1ZTWENJNmRISjVlMk05Ym1WM0lFRnljbUY1UW5WbVptVnlLREFwZldOaGRHTm9LR1VwZTNSb2NtOTNJRVZ5Y205eUtGd2lRVkpTUVZsQ1ZVWkdSVklnYm05MElITjFjSEJ2Y25SbFpDQmllU0IwYUdseklHVnVkbWx5YjI1dFpXNTBYQ0lwTzMxalBWeHVablZ1WTNScGIyNG9ZU3hqTEdRcGUzWmhjaUJuTEd3c2NDeG1MRzBzY1R0alBXTjhmRnN3WFR0a1BXUjhmREE3YkQxa1BqNCtNenR0UFMweFBUMDlZajh6T2pBN2NUMXVaWGNnVldsdWREaEJjbkpoZVNoaEtUdG1iM0lvWnowd08yYzhZUzVpZVhSbFRHVnVaM1JvTzJjclBURXBaajFuSzJ3c2NEMW1QajQrTWl4akxteGxibWQwYUR3OWNDWW1ZeTV3ZFhOb0tEQXBMR05iY0YxOFBYRmJaMTA4UERncUtHMHJaaVUwS21JcE8zSmxkSFZ5Ym50MllXeDFaVHBqTEdKcGJreGxiam80S21FdVlubDBaVXhsYm1kMGFDdGtmWDA3WW5KbFlXczdaR1ZtWVhWc2REcDBhSEp2ZHlCRmNuSnZjaWhjSW1admNtMWhkQ0J0ZFhOMElHSmxJRWhGV0N3Z1ZFVllWQ3dnUWpZMExDQkNXVlJGVXl3Z2IzSWdRVkpTUVZsQ1ZVWkdSVkpjSWlrN2ZYSmxkSFZ5YmlCamZXWjFibU4wYVc5dUlIa29ZeXhoS1h0eVpYUjFjbTRnWXp3OFlYeGpQajQrTXpJdFlYMW1kVzVqZEdsdmJpQlRLR01zWVNsN2NtVjBkWEp1SURNeVBHRS9LR0V0UFRNeUxHNWxkeUJpS0dNdVlqdzhZWHhqTG1FK1BqNHpNaTFoTEdNdVlUdzhZWHhqTG1JK1BqNHpNaTFoS1NrNk1DRTlQV0UvYm1WM0lHSW9ZeTVoUER4aGZHTXVZajQrUGpNeUxXRXNZeTVpUER4aGZHTXVZVDQrUGpNeUxXRXBPbU45Wm5WdVkzUnBiMjRnZHloakxHRXBlM0psZEhWeWJpQmpQajQrWEc1aGZHTThQRE15TFdGOVpuVnVZM1JwYjI0Z2RDaGpMR0VwZTNaaGNpQnJQVzUxYkd3c2F6MXVaWGNnWWloakxtRXNZeTVpS1R0eVpYUjFjbTRnYXowek1qNDlZVDl1WlhjZ1lpaHJMbUUrUGo1aGZHc3VZanc4TXpJdFlTWTBNamswT1RZM01qazFMR3N1WWo0K1BtRjhheTVoUER3ek1pMWhKalF5T1RRNU5qY3lPVFVwT201bGR5QmlLR3N1WWo0K1BtRXRNeko4YXk1aFBEdzJOQzFoSmpReU9UUTVOamN5T1RVc2F5NWhQajQrWVMwek1ueHJMbUk4UERZMExXRW1OREk1TkRrMk56STVOU2w5Wm5WdVkzUnBiMjRnVkNoakxHRXBlM1poY2lCclBXNTFiR3c3Y21WMGRYSnVJR3M5TXpJK1BXRS9ibVYzSUdJb1l5NWhQajQrWVN4akxtSStQajVoZkdNdVlUdzhNekl0WVNZME1qazBPVFkzTWprMUtUcHVaWGNnWWlnd0xHTXVZVDQrUG1FdE16SXBmV1oxYm1OMGFXOXVJR0ZoS0dNc1lTeGlLWHR5WlhSMWNtNGdZeVpoWG41akptSjlablZ1WTNScGIyNGdZbUVvWXl4aExHc3BlM0psZEhWeWJpQnVaWGNnWWloakxtRW1ZUzVoWG41akxtRW1heTVoTEdNdVlpWmhMbUplZm1NdVlpWnJMbUlwZldaMWJtTjBhVzl1SUZVb1l5eGhMR0lwZTNKbGRIVnliaUJqSm1GZVl5WmlYbUVtWW4xbWRXNWpkR2x2YmlCallTaGpMR0VzYXlsN2NtVjBkWEp1SUc1bGR5QmlLR011WVNaaExtRmVZeTVoSm1zdVlWNWhMbUVtWEc1ckxtRXNZeTVpSm1FdVlsNWpMbUltYXk1aVhtRXVZaVpyTG1JcGZXWjFibU4wYVc5dUlHUmhLR01wZTNKbGRIVnliaUIzS0dNc01pbGVkeWhqTERFektWNTNLR01zTWpJcGZXWjFibU4wYVc5dUlHVmhLR01wZTNaaGNpQmhQWFFvWXl3eU9Da3NhejEwS0dNc016UXBPMk05ZENoakxETTVLVHR5WlhSMWNtNGdibVYzSUdJb1lTNWhYbXN1WVY1akxtRXNZUzVpWG1zdVlsNWpMbUlwZldaMWJtTjBhVzl1SUdaaEtHTXBlM0psZEhWeWJpQjNLR01zTmlsZWR5aGpMREV4S1Y1M0tHTXNNalVwZldaMWJtTjBhVzl1SUdkaEtHTXBlM1poY2lCaFBYUW9ZeXd4TkNrc2F6MTBLR01zTVRncE8yTTlkQ2hqTERReEtUdHlaWFIxY200Z2JtVjNJR0lvWVM1aFhtc3VZVjVqTG1Fc1lTNWlYbXN1WWw1akxtSXBmV1oxYm1OMGFXOXVJR2hoS0dNcGUzSmxkSFZ5YmlCM0tHTXNOeWxlZHloakxERTRLVjVqUGo0K00zMW1kVzVqZEdsdmJpQnBZU2hqS1h0MllYSWdZVDEwS0dNc01Ta3NhejEwS0dNc09DazdZejFVS0dNc055azdjbVYwZFhKdUlHNWxkeUJpS0dFdVlWNXJMbUZlWXk1aExHRXVZbDVyTG1KZVl5NWlLWDFtZFc1amRHbHZiaUJxWVNoaktYdHlaWFIxY200Z2R5aGpMREUzS1Y1M0tHTXNNVGtwWG1NK1BqNHhNSDFtZFc1amRHbHZiaUJyWVNoaktYdDJZWElnWVQxMEtHTXNNVGtwTEdzOWRDaGpMRFl4S1R0Y2JtTTlWQ2hqTERZcE8zSmxkSFZ5YmlCdVpYY2dZaWhoTG1GZWF5NWhYbU11WVN4aExtSmVheTVpWG1NdVlpbDlablZ1WTNScGIyNGdSeWhqTEdFcGUzWmhjaUJpUFNoakpqWTFOVE0xS1Nzb1lTWTJOVFV6TlNrN2NtVjBkWEp1S0NoalBqNCtNVFlwS3loaFBqNCtNVFlwS3loaVBqNCtNVFlwSmpZMU5UTTFLVHc4TVRaOFlpWTJOVFV6TlgxbWRXNWpkR2x2YmlCc1lTaGpMR0VzWWl4bEtYdDJZWElnYUQwb1l5WTJOVFV6TlNrcktHRW1OalUxTXpVcEt5aGlKalkxTlRNMUtTc29aU1kyTlRVek5TazdjbVYwZFhKdUtDaGpQajQrTVRZcEt5aGhQajQrTVRZcEt5aGlQajQrTVRZcEt5aGxQajQrTVRZcEt5aG9QajQrTVRZcEpqWTFOVE0xS1R3OE1UWjhhQ1kyTlRVek5YMW1kVzVqZEdsdmJpQklLR01zWVN4aUxHVXNhQ2w3ZG1GeUlHUTlLR01tTmpVMU16VXBLeWhoSmpZMU5UTTFLU3NvWWlZMk5UVXpOU2tyS0dVbU5qVTFNelVwS3lob0pqWTFOVE0xS1R0eVpYUjFjbTRvS0dNK1BqNHhOaWtyS0dFK1BqNHhOaWtyS0dJK1BqNHhOaWtyS0dVK1BqNHhOaWtyS0dnK1BqNHhOaWtyS0dRK1BqNHhOaWttTmpVMU16VXBQRHd4Tm54a0pqWTFOVE0xZldaMWJtTjBhVzl1SUcxaEtHTXNZU2w3ZG1GeUlHUXNaU3hvTzJROUtHTXVZaVkyTlRVek5Ta3JLR0V1WWlZMk5UVXpOU2s3WlQwb1l5NWlQajQrTVRZcEsxeHVLR0V1WWo0K1BqRTJLU3NvWkQ0K1BqRTJLVHRvUFNobEpqWTFOVE0xS1R3OE1UWjhaQ1kyTlRVek5UdGtQU2hqTG1FbU5qVTFNelVwS3loaExtRW1OalUxTXpVcEt5aGxQajQrTVRZcE8yVTlLR011WVQ0K1BqRTJLU3NvWVM1aFBqNCtNVFlwS3loa1BqNCtNVFlwTzNKbGRIVnliaUJ1WlhjZ1lpZ29aU1kyTlRVek5TazhQREUyZkdRbU5qVTFNelVzYUNsOVpuVnVZM1JwYjI0Z2JtRW9ZeXhoTEdRc1pTbDdkbUZ5SUdnc2JpeG5PMmc5S0dNdVlpWTJOVFV6TlNrcktHRXVZaVkyTlRVek5Ta3JLR1F1WWlZMk5UVXpOU2tyS0dVdVlpWTJOVFV6TlNrN2JqMG9ZeTVpUGo0K01UWXBLeWhoTG1JK1BqNHhOaWtyS0dRdVlqNCtQakUyS1Nzb1pTNWlQajQrTVRZcEt5aG9QajQrTVRZcE8yYzlLRzRtTmpVMU16VXBQRHd4Tm54b0pqWTFOVE0xTzJnOUtHTXVZU1kyTlRVek5Ta3JLR0V1WVNZMk5UVXpOU2tyS0dRdVlTWTJOVFV6TlNrcktHVXVZU1kyTlRVek5Ta3JLRzQrUGo0eE5pazdiajBvWXk1aFBqNCtNVFlwS3loaExtRStQajR4TmlrcktHUXVZVDQrUGpFMktTc29aUzVoUGo0K01UWXBLeWhvUGo0K01UWXBPM0psZEhWeWJpQnVaWGNnWWlnb2JpWTJOVFV6TlNrOFBERTJmR2dtTmpVMU16VXNaeWw5Wm5WdVkzUnBiMjRnYjJFb1l5eGhMR1FzWlN4b0tYdDJZWElnYml4bkxHdzdiajBvWXk1aUpseHVOalUxTXpVcEt5aGhMbUltTmpVMU16VXBLeWhrTG1JbU5qVTFNelVwS3lobExtSW1OalUxTXpVcEt5aG9MbUltTmpVMU16VXBPMmM5S0dNdVlqNCtQakUyS1Nzb1lTNWlQajQrTVRZcEt5aGtMbUkrUGo0eE5pa3JLR1V1WWo0K1BqRTJLU3NvYUM1aVBqNCtNVFlwS3lodVBqNCtNVFlwTzJ3OUtHY21OalUxTXpVcFBEd3hObnh1SmpZMU5UTTFPMjQ5S0dNdVlTWTJOVFV6TlNrcktHRXVZU1kyTlRVek5Ta3JLR1F1WVNZMk5UVXpOU2tyS0dVdVlTWTJOVFV6TlNrcktHZ3VZU1kyTlRVek5Ta3JLR2MrUGo0eE5pazdaejBvWXk1aFBqNCtNVFlwS3loaExtRStQajR4TmlrcktHUXVZVDQrUGpFMktTc29aUzVoUGo0K01UWXBLeWhvTG1FK1BqNHhOaWtyS0c0K1BqNHhOaWs3Y21WMGRYSnVJRzVsZHlCaUtDaG5KalkxTlRNMUtUdzhNVFo4YmlZMk5UVXpOU3hzS1gxbWRXNWpkR2x2YmlCQ0tHTXNZU2w3Y21WMGRYSnVJRzVsZHlCaUtHTXVZVjVoTG1Fc1l5NWlYbUV1WWlsOVpuVnVZM1JwYjI0Z1FTaGpLWHQyWVhJZ1lUMWJYU3hrTzJsbUtGd2lVMGhCTFRGY0lqMDlQV01wWVQxYk1UY3pNalU0TkRFNU15dzBNREl6TWpNek5ERTNMREkxTmpJek9ETXhNRElzTWpjeE56TXpPRGM0TERNeU9EVXpOemMxTWpCZE8yVnNjMlVnYVdZb01EMDlQV011YkdGemRFbHVaR1Y0VDJZb1hDSlRTRUV0WENJc01Da3BjM2RwZEdOb0tHRTlYRzViTXpJek9ETTNNVEF6TWl3NU1UUXhOVEEyTmpNc09ERXlOekF5T1RrNUxEUXhORFE1TVRJMk9UY3NOREk1TURjM05UZzFOeXd4TnpVd05qQXpNREkxTERFMk9UUXdOelk0TXprc016SXdOREEzTlRReU9GMHNaRDFiTVRjM09UQXpNemN3TXl3ek1UUTBNVE0wTWpjM0xERXdNVE01TURReU5ESXNNamMzTXpRNE1EYzJNaXd4TXpVNU9Ea3pNVEU1TERJMk1EQTRNakk1TWpRc05USTROek0wTmpNMUxERTFOREUwTlRreU1qVmRMR01wZTJOaGMyVWdYQ0pUU0VFdE1qSTBYQ0k2WW5KbFlXczdZMkZ6WlNCY0lsTklRUzB5TlRaY0lqcGhQV1E3WW5KbFlXczdZMkZ6WlNCY0lsTklRUzB6T0RSY0lqcGhQVnR1WlhjZ1lpZ3pOREU0TURjd016WTFMR0ZiTUYwcExHNWxkeUJpS0RFMk5UUXlOekF5TlRBc1lWc3hYU2tzYm1WM0lHSW9NalF6T0RVeU9UTTNNQ3hoV3pKZEtTeHVaWGNnWWlnek5UVTBOakl6TmpBc1lWc3pYU2tzYm1WM0lHSW9NVGN6TVRRd05UUXhOU3hoV3pSZEtTeHVaWGNnWWlnME1UQTBPRGc0TlRnNU5TeGhXelZkS1N4dVpYY2dZaWd6TmpjMU1EQTROVEkxTEdGYk5sMHBMRzVsZHlCaUtERXlNRE13TmpJNE1UTXNZVnMzWFNsZE8ySnlaV0ZyTzJOaGMyVWdYQ0pUU0VFdE5URXlYQ0k2WVQxYmJtVjNJR0lvWkZzd1hTdzBNRGc1TWpNMU56SXdLU3h1WlhjZ1lpaGtXekZkTERJeU1qYzROek0xT1RVcExGeHVibVYzSUdJb1pGc3lYU3cwTWpjeE1UYzFOekl6S1N4dVpYY2dZaWhrV3pOZExERTFPVFUzTlRBeE1qa3BMRzVsZHlCaUtHUmJORjBzTWpreE56VTJOVEV6Tnlrc2JtVjNJR0lvWkZzMVhTdzNNalUxTVRFeE9Ua3BMRzVsZHlCaUtHUmJObDBzTkRJeE5UTTRPVFUwTnlrc2JtVjNJR0lvWkZzM1hTd3pNamN3TXpNeU1Ea3BYVHRpY21WaGF6dGtaV1poZFd4ME9uUm9jbTkzSUVWeWNtOXlLRndpVlc1cmJtOTNiaUJUU0VFZ2RtRnlhV0Z1ZEZ3aUtUdDlaV3h6WlNCcFppZ3dQVDA5WXk1c1lYTjBTVzVrWlhoUFppaGNJbE5JUVRNdFhDSXNNQ2w4ZkRBOVBUMWpMbXhoYzNSSmJtUmxlRTltS0Z3aVUwaEJTMFZjSWl3d0tTbG1iM0lvWXowd096VStZenRqS3oweEtXRmJZMTA5VzI1bGR5QmlLREFzTUNrc2JtVjNJR0lvTUN3d0tTeHVaWGNnWWlnd0xEQXBMRzVsZHlCaUtEQXNNQ2tzYm1WM0lHSW9NQ3d3S1YwN1pXeHpaU0IwYUhKdmR5QkZjbkp2Y2loY0lrNXZJRk5JUVNCMllYSnBZVzUwY3lCemRYQndiM0owWldSY0lpazdjbVYwZFhKdUlHRjlablZ1WTNScGIyNGdTeWhqTEdFcGUzWmhjaUJpUFZ0ZExHVXNaQ3h1TEdjc2JDeHdMR1k3WlQxaFd6QmRPMlE5WVZzeFhUdHVQV0ZiTWwwN1p6MWhXek5kTzJ3OVlWczBYVHRtYjNJb1pqMHdPemd3UG1ZN1ppczlNU2xpVzJaZFBURTJQbVkvWTF0bVhUcDVLR0piWmkxY2JqTmRYbUpiWmkwNFhWNWlXMll0TVRSZFhtSmJaaTB4Tmwwc01Ta3NjRDB5TUQ1bVAwZ29lU2hsTERVcExHUW1ibDUrWkNabkxHd3NNVFV4T0RVd01ESTBPU3hpVzJaZEtUbzBNRDVtUDBnb2VTaGxMRFVwTEdSZWJsNW5MR3dzTVRnMU9UYzNOVE01TXl4aVcyWmRLVG8yTUQ1bVAwZ29lU2hsTERVcExGVW9aQ3h1TEdjcExHd3NNalF3TURrMU9UY3dPQ3hpVzJaZEtUcElLSGtvWlN3MUtTeGtYbTVlWnl4c0xETXpPVFUwTmprM09ESXNZbHRtWFNrc2JEMW5MR2M5Yml4dVBYa29aQ3d6TUNrc1pEMWxMR1U5Y0R0aFd6QmRQVWNvWlN4aFd6QmRLVHRoV3pGZFBVY29aQ3hoV3pGZEtUdGhXekpkUFVjb2JpeGhXekpkS1R0aFd6TmRQVWNvWnl4aFd6TmRLVHRoV3pSZFBVY29iQ3hoV3pSZEtUdHlaWFIxY200Z1lYMW1kVzVqZEdsdmJpQmFLR01zWVN4aUxHVXBlM1poY2lCa08yWnZjaWhrUFNoaEt6WTFQajQrT1R3OE5Da3JNVFU3WXk1c1pXNW5kR2c4UFdRN0tXTXVjSFZ6YUNnd0tUdGpXMkUrUGo0MVhYdzlNVEk0UER3eU5DMWhKVE15TzJFclBXSTdZMXRrWFQxaEpqUXlPVFE1TmpjeU9UVTdZMXRrTFRGZFBXRXZOREk1TkRrMk56STVObnd3TzJFOVl5NXNaVzVuZEdnN1ptOXlLR1E5TUR0a1BHRTdaQ3M5TVRZcFpUMUxLR011YzJ4cFkyVW9aQ3hrS3pFMktTeGxLVHR5WlhSMWNtNGdaWDFtZFc1amRHbHZiaUJNS0dNc1hHNWhMR3NwZTNaaGNpQmxMR2dzYml4bkxHd3NjQ3htTEcwc2NTeDFMSElzZEN4MkxIY3NlU3hCTEhvc2VDeEdMRUlzUXl4RUxFVTlXMTBzU2p0cFppaGNJbE5JUVMweU1qUmNJajA5UFd0OGZGd2lVMGhCTFRJMU5sd2lQVDA5YXlsMVBUWTBMSFE5TVN4RVBVNTFiV0psY2l4MlBVY3NkejFzWVN4NVBVZ3NRVDFvWVN4NlBXcGhMSGc5WkdFc1JqMW1ZU3hEUFZVc1FqMWhZU3hLUFdRN1pXeHpaU0JwWmloY0lsTklRUzB6T0RSY0lqMDlQV3Q4ZkZ3aVUwaEJMVFV4TWx3aVBUMDlheWwxUFRnd0xIUTlNaXhFUFdJc2RqMXRZU3gzUFc1aExIazliMkVzUVQxcFlTeDZQV3RoTEhnOVpXRXNSajFuWVN4RFBXTmhMRUk5WW1Fc1NqMVdPMlZzYzJVZ2RHaHliM2NnUlhKeWIzSW9YQ0pWYm1WNGNHVmpkR1ZrSUdWeWNtOXlJR2x1SUZOSVFTMHlJR2x0Y0d4bGJXVnVkR0YwYVc5dVhDSXBPMnM5WVZzd1hUdGxQV0ZiTVYwN2FEMWhXekpkTzI0OVlWc3pYVHRuUFdGYk5GMDdiRDFoV3pWZE8zQTlZVnMyWFR0bVBXRmJOMTA3Wm05eUtISTlNRHR5UEhVN2NpczlNU2t4Tmo1eVB5aHhQWElxZEN4dFBXTXViR1Z1WjNSb1BEMXhQekE2WTF0eFhTeHhQV011YkdWdVozUm9QRDF4S3pFL01EcGpXM0VyTVYwc1JWdHlYVDF1WlhjZ1JDaHRMSEVwS1RwRlczSmRQWGNvZWloRlczSXRNbDBwTEVWYmNpMDNYU3hCS0VWYmNpMHhOVjBwTEVWYmNpMWNiakUyWFNrc2JUMTVLR1lzUmlobktTeENLR2NzYkN4d0tTeEtXM0pkTEVWYmNsMHBMSEU5ZGloNEtHc3BMRU1vYXl4bExHZ3BLU3htUFhBc2NEMXNMR3c5Wnl4blBYWW9iaXh0S1N4dVBXZ3NhRDFsTEdVOWF5eHJQWFlvYlN4eEtUdGhXekJkUFhZb2F5eGhXekJkS1R0aFd6RmRQWFlvWlN4aFd6RmRLVHRoV3pKZFBYWW9hQ3hoV3pKZEtUdGhXek5kUFhZb2JpeGhXek5kS1R0aFd6UmRQWFlvWnl4aFd6UmRLVHRoV3pWZFBYWW9iQ3hoV3pWZEtUdGhXelpkUFhZb2NDeGhXelpkS1R0aFd6ZGRQWFlvWml4aFd6ZGRLVHR5WlhSMWNtNGdZWDFtZFc1amRHbHZiaUJFS0dNc1lTbDdkbUZ5SUdRc1pTeG9MRzRzWnoxYlhTeHNQVnRkTzJsbUtHNTFiR3doUFQxaktXWnZjaWhsUFRBN1pUeGpMbXhsYm1kMGFEdGxLejB5S1dGYktHVStQajR4S1NVMVhWc29aVDQrUGpFcEx6VjhNRjA5UWloaFd5aGxQajQrTVNrbE5WMWJLR1UrUGo0eEtTODFmREJkTEc1bGR5QmlLR05iWlNzeFhTeGpXMlZkS1NrN1ptOXlLR1E5TURzeU5ENWtPMlFyUFRFcGUyNDlRU2hjSWxOSVFUTXRYQ0lwTzJadmNpaGxQVEE3TlQ1bE8yVXJQVEVwZTJnOVlWdGxYVnN3WFR0MllYSWdjRDFoVzJWZFd6RmRMR1k5WVZ0bFhWc3lYU3h0UFdGYlpWMWJNMTBzY1QxaFcyVmRXelJkTzJkYlpWMDlibVYzSUdJb2FDNWhYbkF1WVY1bUxtRmVYRzV0TG1GZWNTNWhMR2d1WWw1d0xtSmVaaTVpWG0wdVlsNXhMbUlwZldadmNpaGxQVEE3TlQ1bE8yVXJQVEVwYkZ0bFhUMUNLR2RiS0dVck5Da2xOVjBzVXlobld5aGxLekVwSlRWZExERXBLVHRtYjNJb1pUMHdPelUrWlR0bEt6MHhLV1p2Y2lob1BUQTdOVDVvTzJnclBURXBZVnRsWFZ0b1hUMUNLR0ZiWlYxYmFGMHNiRnRsWFNrN1ptOXlLR1U5TURzMVBtVTdaU3M5TVNsbWIzSW9hRDB3T3pVK2FEdG9LejB4S1c1YmFGMWJLRElxWlNzekttZ3BKVFZkUFZNb1lWdGxYVnRvWFN4WFcyVmRXMmhkS1R0bWIzSW9aVDB3T3pVK1pUdGxLejB4S1dadmNpaG9QVEE3TlQ1b08yZ3JQVEVwWVZ0bFhWdG9YVDFDS0c1YlpWMWJhRjBzYm1WM0lHSW9mbTViS0dVck1Ta2xOVjFiYUYwdVlTWnVXeWhsS3pJcEpUVmRXMmhkTG1Fc2ZtNWJLR1VyTVNrbE5WMWJhRjB1WWladVd5aGxLeklwSlRWZFcyaGRMbUlwS1R0aFd6QmRXekJkUFVJb1lWc3dYVnN3WFN4WVcyUmRLWDF5WlhSMWNtNGdZWDEyWVhJZ1pDeFdMRmNzV0R0a1BWc3hNVEUyTXpVeU5EQTRMREU0T1RrME5EYzBOREVzTXpBME9UTXlNelEzTVN3ek9USXhNREE1TlRjekxEazJNVGs0TnpFMk15d3hOVEE0T1Rjd09Ua3pMREkwTlRNMk16VTNORGdzTWpnM01EYzJNekl5TVN3ek5qSTBNemd4TURnd0xETXhNRFU1T0RRd01TdzJNRGN5TWpVeU56Z3NYRzR4TkRJMk9EZ3hPVGczTERFNU1qVXdOemd6T0Rnc01qRTJNakEzT0RJd05pd3lOakUwT0RnNE1UQXpMRE15TkRneU1qSTFPREFzTXpnek5UTTVNRFF3TVN3ME1ESXlNakkwTnpjMExESTJORE0wTnpBM09DdzJNRFE0TURjMk1qZ3NOemN3TWpVMU9UZ3pMREV5TkRreE5UQXhNaklzTVRVMU5UQTRNVFk1TWl3eE9UazJNRFkwT1RnMkxESTFOVFF5TWpBNE9ESXNNamd5TVRnek5ETTBPU3d5T1RVeU9UazJPREE0TERNeU1UQXpNVE0yTnpFc016TXpOalUzTVRnNU1Td3pOVGcwTlRJNE56RXhMREV4TXpreU5qazVNeXd6TXpneU5ERTRPVFVzTmpZMk16QTNNakExTERjM016VXlPVGt4TWl3eE1qazBOelUzTXpjeUxERXpPVFl4T0RJeU9URXNNVFk1TlRFNE16Y3dNQ3d4T1RnMk5qWXhNRFV4TERJeE56Y3dNall6TlRBc01qUTFOamsxTmpBek55d3lOek13TkRnMU9USXhMREk0TWpBek1ESTBNVEVzTXpJMU9UY3pNRGd3TUN3ek16UTFOelkwTnpjeExETTFNVFl3TmpVNE1UY3NNell3TURNMU1qZ3dOQ3cwTURrME5UY3hPVEE1TERJM05UUXlNek0wTkN3ME16QXlNamMzTXpRc05UQTJPVFE0TmpFMkxEWTFPVEEyTURVMU5pdzRPRE01T1RjNE56Y3NPVFU0TVRNNU5UY3hMREV6TWpJNE1qSXlNVGdzTVRVek56QXdNakEyTXl3eE56UTNPRGN6TnpjNUxERTVOVFUxTmpJeU1qSXNNakF5TkRFd05EZ3hOU3hjYmpJeU1qYzNNekEwTlRJc01qTTJNVGcxTWpReU5Dd3lOREk0TkRNMk5EYzBMREkzTlRZM016UXhPRGNzTXpJd05EQXpNVFEzT1N3ek16STVNekkxTWprNFhUdFdQVnR1WlhjZ1lpaGtXekJkTERNMk1EazNOamMwTlRncExHNWxkeUJpS0dSYk1WMHNOakF5T0RreE56STFLU3h1WlhjZ1lpaGtXekpkTERNNU5qUTBPRFF6T1RrcExHNWxkeUJpS0dSYk0xMHNNakUzTXpJNU5UVTBPQ2tzYm1WM0lHSW9aRnMwWFN3ME1EZ3hOakk0TkRjeUtTeHVaWGNnWWloa1d6VmRMRE13TlRNNE16UXlOalVwTEc1bGR5QmlLR1JiTmwwc01qa3pOelkzTVRVM09Ta3NibVYzSUdJb1pGczNYU3d6TmpZME5qQTVOVFl3S1N4dVpYY2dZaWhrV3poZExESTNNelE0T0RNek9UUXBMRzVsZHlCaUtHUmJPVjBzTVRFMk5EazVOalUwTWlrc2JtVjNJR0lvWkZzeE1GMHNNVE15TXpZeE1EYzJOQ2tzYm1WM0lHSW9aRnN4TVYwc016VTVNRE13TkRrNU5Da3NibVYzSUdJb1pGc3hNbDBzTkRBMk9ERTRNak00TXlrc2JtVjNJR0lvWkZzeE0xMHNPVGt4TXpNMk1URXpLU3h1WlhjZ1lpaGtXekUwWFN3Mk16TTRNRE16TVRjcExHNWxkeUJpS0dSYk1UVmRMRE0wTnprM056UTROamdwTEc1bGR5QmlLR1JiTVRaZExESTJOalkyTVRNME5UZ3BMRzVsZHlCaUtHUmJNVGRkTERrME5EY3hNVEV6T1Nrc2JtVjNJR0lvWkZzeE9GMHNNak0wTVRJMk1qYzNNeWtzWEc1dVpYY2dZaWhrV3pFNVhTd3lNREEzT0RBd09UTXpLU3h1WlhjZ1lpaGtXekl3WFN3eE5EazFPVGt3T1RBeEtTeHVaWGNnWWloa1d6SXhYU3d4T0RVMk5ETXhNak0xS1N4dVpYY2dZaWhrV3pJeVhTd3pNVGMxTWpFNE1UTXlLU3h1WlhjZ1lpaGtXekl6WFN3eU1UazRPVFV3T0RNM0tTeHVaWGNnWWloa1d6STBYU3d6T1RrNU56RTVNek01S1N4dVpYY2dZaWhrV3pJMVhTdzNOalkzT0RRd01UWXBMRzVsZHlCaUtHUmJNalpkTERJMU5qWTFPVFE0TnprcExHNWxkeUJpS0dSYk1qZGRMRE15TURNek16YzVOVFlwTEc1bGR5QmlLR1JiTWpoZExERXdNelEwTlRjd01qWXBMRzVsZHlCaUtHUmJNamxkTERJME5qWTVORGc1TURFcExHNWxkeUJpS0dSYk16QmRMRE0zTlRnek1qWXpPRE1wTEc1bGR5QmlLR1JiTXpGZExERTJPRGN4Tnprek5pa3NibVYzSUdJb1pGc3pNbDBzTVRFNE9ERTNPVGsyTkNrc2JtVjNJR0lvWkZzek0xMHNNVFUwTmpBME5UY3pOQ2tzYm1WM0lHSW9aRnN6TkYwc01UVXlNamd3TlRRNE5Ta3NibVYzSUdJb1pGc3pOVjBzTWpZME16Z3pNemd5TXlrc2JtVjNJR0lvWkZzek5sMHNNak0wTXpVeU56TTVNQ2tzYm1WM0lHSW9aRnN6TjEwc01UQXhORFEzTnpRNE1Da3NibVYzSUdJb1pGc3pPRjBzTVRJd05qYzFPVEUwTWlrc2JtVjNJR0lvWkZzek9WMHNNelEwTURjM05qSTNLU3hjYm01bGR5QmlLR1JiTkRCZExERXlPVEE0TmpNME5qQXBMRzVsZHlCaUtHUmJOREZkTERNeE5UZzBOVFF5TnpNcExHNWxkeUJpS0dSYk5ESmRMRE0xTURVNU5USTJOVGNwTEc1bGR5QmlLR1JiTkROZExERXdOakl4TnpBd09Da3NibVYzSUdJb1pGczBORjBzTXpZd05qQXdPRE0wTkNrc2JtVjNJR0lvWkZzME5WMHNNVFF6TWpjeU5UYzNOaWtzYm1WM0lHSW9aRnMwTmwwc01UUTJOekF6TVRVNU5Da3NibVYzSUdJb1pGczBOMTBzT0RVeE1UWTVOekl3S1N4dVpYY2dZaWhrV3pRNFhTd3pNVEF3T0RJek56VXlLU3h1WlhjZ1lpaGtXelE1WFN3eE16WXpNalU0TVRrMUtTeHVaWGNnWWloa1d6VXdYU3d6TnpVd05qZzFOVGt6S1N4dVpYY2dZaWhrV3pVeFhTd3pOemcxTURVd01qZ3dLU3h1WlhjZ1lpaGtXelV5WFN3ek16RTRNekEzTkRJM0tTeHVaWGNnWWloa1d6VXpYU3d6T0RFeU56SXpOREF6S1N4dVpYY2dZaWhrV3pVMFhTd3lNREF6TURNME9UazFLU3h1WlhjZ1lpaGtXelUxWFN3ek5qQXlNRE0yT0RrNUtTeHVaWGNnWWloa1d6VTJYU3d4TlRjMU9Ua3dNREV5S1N4dVpYY2dZaWhrV3pVM1hTd3hNVEkxTlRreU9USTRLU3h1WlhjZ1lpaGtXelU0WFN3eU56RTJPVEEwTXpBMktTeHVaWGNnWWloa1d6VTVYU3cwTkRJM056WXdORFFwTEc1bGR5QmlLR1JiTmpCZExEVTVNelk1T0RNME5Da3NibVYzSUdJb1pGczJNVjBzWEc0ek56TXpNVEV3TWpRNUtTeHVaWGNnWWloa1d6WXlYU3d5T1RrNU16VXhOVGN6S1N4dVpYY2dZaWhrV3pZelhTd3pPREUxT1RJd05ESTNLU3h1WlhjZ1lpZ3pNemt4TlRZNU5qRTBMRE01TWpnek9ETTVNREFwTEc1bGR5QmlLRE0xTVRVeU5qY3lOekVzTlRZMk1qZ3dOekV4S1N4dVpYY2dZaWd6T1RRd01UZzNOakEyTERNME5UUXdOamsxTXpRcExHNWxkeUJpS0RReE1UZzJNekF5TnpFc05EQXdNREl6T1RrNU1pa3NibVYzSUdJb01URTJOREU0TkRjMExERTVNVFF4TXpnMU5UUXBMRzVsZHlCaUtERTNOREk1TWpReU1Td3lOek14TURVMU1qY3dLU3h1WlhjZ1lpZ3lPRGt6T0RBek5UWXNNekl3TXprNU16QXdOaWtzYm1WM0lHSW9ORFl3TXprek1qWTVMRE15TURZeU1ETXhOU2tzYm1WM0lHSW9OamcxTkRjeE56TXpMRFU0TnpRNU5qZ3pOaWtzYm1WM0lHSW9PRFV5TVRReU9UY3hMREV3T0RZM09USTROVEVwTEc1bGR5QmlLREV3TVRjd016WXlPVGdzTXpZMU5UUXpNVEF3S1N4dVpYY2dZaWd4TVRJMk1EQXdOVGd3TERJMk1UZ3lPVGMyTnpZcExHNWxkeUJpS0RFeU9EZ3dNek0wTnpBc016UXdPVGcxTlRFMU9Da3NibVYzSUdJb01UVXdNVFV3TlRrME9DdzBNak0wTlRBNU9EWTJLU3h1WlhjZ1lpZ3hOakEzTVRZM09URTFMRGs0TnpFMk56UTJPQ2tzYm1WM0lHSW9NVGd4TmpRd01qTXhOaXhjYmpFeU5EWXhPRGsxT1RFcFhUdFlQVnR1WlhjZ1lpZ3dMREVwTEc1bGR5QmlLREFzTXpJNE9UZ3BMRzVsZHlCaUtESXhORGMwT0RNMk5EZ3NNekk1TURZcExHNWxkeUJpS0RJeE5EYzBPRE0yTkRnc01qRTBOelV4TmpReE5pa3NibVYzSUdJb01Dd3pNamt3Tnlrc2JtVjNJR0lvTUN3eU1UUTNORGd6TmpRNUtTeHVaWGNnWWlneU1UUTNORGd6TmpRNExESXhORGMxTVRZMU5EVXBMRzVsZHlCaUtESXhORGMwT0RNMk5EZ3NNekkzTnpjcExHNWxkeUJpS0RBc01UTTRLU3h1WlhjZ1lpZ3dMREV6Tmlrc2JtVjNJR0lvTUN3eU1UUTNOVEUyTkRJMUtTeHVaWGNnWWlnd0xESXhORGMwT0RNMk5UZ3BMRzVsZHlCaUtEQXNNakUwTnpVeE5qVTFOU2tzYm1WM0lHSW9NakUwTnpRNE16WTBPQ3d4TXprcExHNWxkeUJpS0RJeE5EYzBPRE0yTkRnc016STVNRFVwTEc1bGR5QmlLREl4TkRjME9ETTJORGdzTXpJM056RXBMRzVsZHlCaUtESXhORGMwT0RNMk5EZ3NNekkzTnpBcExHNWxkeUJpS0RJeE5EYzBPRE0yTkRnc01USTRLU3h1WlhjZ1lpZ3dMRE15TnpjNEtTeHVaWGNnWWlneU1UUTNORGd6TmpRNExESXhORGMwT0RNMk5UZ3BMRzVsZHlCaUtESXhORGMwT0RNMk5EZ3NNakUwTnpVeE5qVTBOU2tzYm1WM0lHSW9NakUwTnpRNE16WTBPQ3d6TWpnNU5pa3NibVYzSUdJb01Dd3lNVFEzTkRnek5qUTVLU3hjYm01bGR5QmlLREl4TkRjME9ETTJORGdzTWpFME56VXhOalF5TkNsZE8xYzlXMXN3TERNMkxETXNOREVzTVRoZExGc3hMRFEwTERFd0xEUTFMREpkTEZzMk1pdzJMRFF6TERFMUxEWXhYU3hiTWpnc05UVXNNalVzTWpFc05UWmRMRnN5Tnl3eU1Dd3pPU3c0TERFMFhWMDdYQ0ptZFc1amRHbHZibHdpUFQwOWRIbHdaVzltSUdSbFptbHVaU1ltWkdWbWFXNWxMbUZ0WkQ5a1pXWnBibVVvWm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnUTMwcE9sd2lkVzVrWldacGJtVmtYQ0loUFQxMGVYQmxiMllnWlhod2IzSjBjejhvWENKMWJtUmxabWx1WldSY0lpRTlQWFI1Y0dWdlppQnRiMlIxYkdVbUptMXZaSFZzWlM1bGVIQnZjblJ6SmlZb2JXOWtkV3hsTG1WNGNHOXlkSE05UXlrc1pYaHdiM0owY3oxREtUcFpMbXB6VTBoQlBVTjlLU2gwYUdsektUdGNiaUlzSWk4cUtseHVJQ29nUTI5d2VYSnBaMmgwSUNoaktTQXlNREUwTFhCeVpYTmxiblFzSUVaaFkyVmliMjlyTENCSmJtTXVYRzRnS2x4dUlDb2dWR2hwY3lCemIzVnlZMlVnWTI5a1pTQnBjeUJzYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnVFVsVUlHeHBZMlZ1YzJVZ1ptOTFibVFnYVc0Z2RHaGxYRzRnS2lCTVNVTkZUbE5GSUdacGJHVWdhVzRnZEdobElISnZiM1FnWkdseVpXTjBiM0o1SUc5bUlIUm9hWE1nYzI5MWNtTmxJSFJ5WldVdVhHNGdLaTljYmx4dWRtRnlJSEoxYm5ScGJXVWdQU0FvWm5WdVkzUnBiMjRnS0dWNGNHOXlkSE1wSUh0Y2JpQWdYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNiaUFnZG1GeUlFOXdJRDBnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaVHRjYmlBZ2RtRnlJR2hoYzA5M2JpQTlJRTl3TG1oaGMwOTNibEJ5YjNCbGNuUjVPMXh1SUNCMllYSWdkVzVrWldacGJtVmtPeUF2THlCTmIzSmxJR052YlhCeVpYTnphV0pzWlNCMGFHRnVJSFp2YVdRZ01DNWNiaUFnZG1GeUlDUlRlVzFpYjJ3Z1BTQjBlWEJsYjJZZ1UzbHRZbTlzSUQwOVBTQmNJbVoxYm1OMGFXOXVYQ0lnUHlCVGVXMWliMndnT2lCN2ZUdGNiaUFnZG1GeUlHbDBaWEpoZEc5eVUzbHRZbTlzSUQwZ0pGTjViV0p2YkM1cGRHVnlZWFJ2Y2lCOGZDQmNJa0JBYVhSbGNtRjBiM0pjSWp0Y2JpQWdkbUZ5SUdGemVXNWpTWFJsY21GMGIzSlRlVzFpYjJ3Z1BTQWtVM2x0WW05c0xtRnplVzVqU1hSbGNtRjBiM0lnZkh3Z1hDSkFRR0Z6ZVc1alNYUmxjbUYwYjNKY0lqdGNiaUFnZG1GeUlIUnZVM1J5YVc1blZHRm5VM2x0WW05c0lEMGdKRk41YldKdmJDNTBiMU4wY21sdVoxUmhaeUI4ZkNCY0lrQkFkRzlUZEhKcGJtZFVZV2RjSWp0Y2JseHVJQ0JtZFc1amRHbHZiaUIzY21Gd0tHbHVibVZ5Um00c0lHOTFkR1Z5Um00c0lITmxiR1lzSUhSeWVVeHZZM05NYVhOMEtTQjdYRzRnSUNBZ0x5OGdTV1lnYjNWMFpYSkdiaUJ3Y205MmFXUmxaQ0JoYm1RZ2IzVjBaWEpHYmk1d2NtOTBiM1I1Y0dVZ2FYTWdZU0JIWlc1bGNtRjBiM0lzSUhSb1pXNGdiM1YwWlhKR2JpNXdjbTkwYjNSNWNHVWdhVzV6ZEdGdVkyVnZaaUJIWlc1bGNtRjBiM0l1WEc0Z0lDQWdkbUZ5SUhCeWIzUnZSMlZ1WlhKaGRHOXlJRDBnYjNWMFpYSkdiaUFtSmlCdmRYUmxja1p1TG5CeWIzUnZkSGx3WlNCcGJuTjBZVzVqWlc5bUlFZGxibVZ5WVhSdmNpQS9JRzkxZEdWeVJtNGdPaUJIWlc1bGNtRjBiM0k3WEc0Z0lDQWdkbUZ5SUdkbGJtVnlZWFJ2Y2lBOUlFOWlhbVZqZEM1amNtVmhkR1VvY0hKdmRHOUhaVzVsY21GMGIzSXVjSEp2ZEc5MGVYQmxLVHRjYmlBZ0lDQjJZWElnWTI5dWRHVjRkQ0E5SUc1bGR5QkRiMjUwWlhoMEtIUnllVXh2WTNOTWFYTjBJSHg4SUZ0ZEtUdGNibHh1SUNBZ0lDOHZJRlJvWlNBdVgybHVkbTlyWlNCdFpYUm9iMlFnZFc1cFptbGxjeUIwYUdVZ2FXMXdiR1Z0Wlc1MFlYUnBiMjV6SUc5bUlIUm9aU0F1Ym1WNGRDeGNiaUFnSUNBdkx5QXVkR2h5YjNjc0lHRnVaQ0F1Y21WMGRYSnVJRzFsZEdodlpITXVYRzRnSUNBZ1oyVnVaWEpoZEc5eUxsOXBiblp2YTJVZ1BTQnRZV3RsU1c1MmIydGxUV1YwYUc5a0tHbHVibVZ5Um00c0lITmxiR1lzSUdOdmJuUmxlSFFwTzF4dVhHNGdJQ0FnY21WMGRYSnVJR2RsYm1WeVlYUnZjanRjYmlBZ2ZWeHVJQ0JsZUhCdmNuUnpMbmR5WVhBZ1BTQjNjbUZ3TzF4dVhHNGdJQzh2SUZSeWVTOWpZWFJqYUNCb1pXeHdaWElnZEc4Z2JXbHVhVzFwZW1VZ1pHVnZjSFJwYldsNllYUnBiMjV6TGlCU1pYUjFjbTV6SUdFZ1kyOXRjR3hsZEdsdmJseHVJQ0F2THlCeVpXTnZjbVFnYkdsclpTQmpiMjUwWlhoMExuUnllVVZ1ZEhKcFpYTmJhVjB1WTI5dGNHeGxkR2x2Ymk0Z1ZHaHBjeUJwYm5SbGNtWmhZMlVnWTI5MWJHUmNiaUFnTHk4Z2FHRjJaU0JpWldWdUlDaGhibVFnZDJGeklIQnlaWFpwYjNWemJIa3BJR1JsYzJsbmJtVmtJSFJ2SUhSaGEyVWdZU0JqYkc5emRYSmxJSFJ2SUdKbFhHNGdJQzh2SUdsdWRtOXJaV1FnZDJsMGFHOTFkQ0JoY21kMWJXVnVkSE1zSUdKMWRDQnBiaUJoYkd3Z2RHaGxJR05oYzJWeklIZGxJR05oY21VZ1lXSnZkWFFnZDJWY2JpQWdMeThnWVd4eVpXRmtlU0JvWVhabElHRnVJR1Y0YVhOMGFXNW5JRzFsZEdodlpDQjNaU0IzWVc1MElIUnZJR05oYkd3c0lITnZJSFJvWlhKbEozTWdibThnYm1WbFpGeHVJQ0F2THlCMGJ5QmpjbVZoZEdVZ1lTQnVaWGNnWm5WdVkzUnBiMjRnYjJKcVpXTjBMaUJYWlNCallXNGdaWFpsYmlCblpYUWdZWGRoZVNCM2FYUm9JR0Z6YzNWdGFXNW5YRzRnSUM4dklIUm9aU0J0WlhSb2IyUWdkR0ZyWlhNZ1pYaGhZM1JzZVNCdmJtVWdZWEpuZFcxbGJuUXNJSE5wYm1ObElIUm9ZWFFnYUdGd2NHVnVjeUIwYnlCaVpTQjBjblZsWEc0Z0lDOHZJR2x1SUdWMlpYSjVJR05oYzJVc0lITnZJSGRsSUdSdmJpZDBJR2hoZG1VZ2RHOGdkRzkxWTJnZ2RHaGxJR0Z5WjNWdFpXNTBjeUJ2WW1wbFkzUXVJRlJvWlZ4dUlDQXZMeUJ2Ym14NUlHRmtaR2wwYVc5dVlXd2dZV3hzYjJOaGRHbHZiaUJ5WlhGMWFYSmxaQ0JwY3lCMGFHVWdZMjl0Y0d4bGRHbHZiaUJ5WldOdmNtUXNJSGRvYVdOb1hHNGdJQzh2SUdoaGN5QmhJSE4wWVdKc1pTQnphR0Z3WlNCaGJtUWdjMjhnYUc5d1pXWjFiR3g1SUhOb2IzVnNaQ0JpWlNCamFHVmhjQ0IwYnlCaGJHeHZZMkYwWlM1Y2JpQWdablZ1WTNScGIyNGdkSEo1UTJGMFkyZ29abTRzSUc5aWFpd2dZWEpuS1NCN1hHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCN0lIUjVjR1U2SUZ3aWJtOXliV0ZzWENJc0lHRnlaem9nWm00dVkyRnNiQ2h2WW1vc0lHRnlaeWtnZlR0Y2JpQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCN0lIUjVjR1U2SUZ3aWRHaHliM2RjSWl3Z1lYSm5PaUJsY25JZ2ZUdGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQjJZWElnUjJWdVUzUmhkR1ZUZFhOd1pXNWtaV1JUZEdGeWRDQTlJRndpYzNWemNHVnVaR1ZrVTNSaGNuUmNJanRjYmlBZ2RtRnlJRWRsYmxOMFlYUmxVM1Z6Y0dWdVpHVmtXV2xsYkdRZ1BTQmNJbk4xYzNCbGJtUmxaRmxwWld4a1hDSTdYRzRnSUhaaGNpQkhaVzVUZEdGMFpVVjRaV04xZEdsdVp5QTlJRndpWlhobFkzVjBhVzVuWENJN1hHNGdJSFpoY2lCSFpXNVRkR0YwWlVOdmJYQnNaWFJsWkNBOUlGd2lZMjl0Y0d4bGRHVmtYQ0k3WEc1Y2JpQWdMeThnVW1WMGRYSnVhVzVuSUhSb2FYTWdiMkpxWldOMElHWnliMjBnZEdobElHbHVibVZ5Um00Z2FHRnpJSFJvWlNCellXMWxJR1ZtWm1WamRDQmhjMXh1SUNBdkx5QmljbVZoYTJsdVp5QnZkWFFnYjJZZ2RHaGxJR1JwYzNCaGRHTm9JSE4zYVhSamFDQnpkR0YwWlcxbGJuUXVYRzRnSUhaaGNpQkRiMjUwYVc1MVpWTmxiblJwYm1Wc0lEMGdlMzA3WEc1Y2JpQWdMeThnUkhWdGJYa2dZMjl1YzNSeWRXTjBiM0lnWm5WdVkzUnBiMjV6SUhSb1lYUWdkMlVnZFhObElHRnpJSFJvWlNBdVkyOXVjM1J5ZFdOMGIzSWdZVzVrWEc0Z0lDOHZJQzVqYjI1emRISjFZM1J2Y2k1d2NtOTBiM1I1Y0dVZ2NISnZjR1Z5ZEdsbGN5Qm1iM0lnWm5WdVkzUnBiMjV6SUhSb1lYUWdjbVYwZFhKdUlFZGxibVZ5WVhSdmNseHVJQ0F2THlCdlltcGxZM1J6TGlCR2IzSWdablZzYkNCemNHVmpJR052YlhCc2FXRnVZMlVzSUhsdmRTQnRZWGtnZDJsemFDQjBieUJqYjI1bWFXZDFjbVVnZVc5MWNseHVJQ0F2THlCdGFXNXBabWxsY2lCdWIzUWdkRzhnYldGdVoyeGxJSFJvWlNCdVlXMWxjeUJ2WmlCMGFHVnpaU0IwZDI4Z1puVnVZM1JwYjI1ekxseHVJQ0JtZFc1amRHbHZiaUJIWlc1bGNtRjBiM0lvS1NCN2ZWeHVJQ0JtZFc1amRHbHZiaUJIWlc1bGNtRjBiM0pHZFc1amRHbHZiaWdwSUh0OVhHNGdJR1oxYm1OMGFXOXVJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVVSEp2ZEc5MGVYQmxLQ2tnZTMxY2JseHVJQ0F2THlCVWFHbHpJR2x6SUdFZ2NHOXNlV1pwYkd3Z1ptOXlJQ1ZKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU1VnWm05eUlHVnVkbWx5YjI1dFpXNTBjeUIwYUdGMFhHNGdJQzh2SUdSdmJpZDBJRzVoZEdsMlpXeDVJSE4xY0hCdmNuUWdhWFF1WEc0Z0lIWmhjaUJKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU0E5SUh0OU8xeHVJQ0JKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaVnRwZEdWeVlYUnZjbE41YldKdmJGMGdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNN1hHNGdJSDA3WEc1Y2JpQWdkbUZ5SUdkbGRGQnliM1J2SUQwZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1PMXh1SUNCMllYSWdUbUYwYVhabFNYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVZ1BTQm5aWFJRY205MGJ5QW1KaUJuWlhSUWNtOTBieWhuWlhSUWNtOTBieWgyWVd4MVpYTW9XMTBwS1NrN1hHNGdJR2xtSUNoT1lYUnBkbVZKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU0FtSmx4dUlDQWdJQ0FnVG1GMGFYWmxTWFJsY21GMGIzSlFjbTkwYjNSNWNHVWdJVDA5SUU5d0lDWW1YRzRnSUNBZ0lDQm9ZWE5QZDI0dVkyRnNiQ2hPWVhScGRtVkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTd2dhWFJsY21GMGIzSlRlVzFpYjJ3cEtTQjdYRzRnSUNBZ0x5OGdWR2hwY3lCbGJuWnBjbTl1YldWdWRDQm9ZWE1nWVNCdVlYUnBkbVVnSlVsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSlRzZ2RYTmxJR2wwSUdsdWMzUmxZV1JjYmlBZ0lDQXZMeUJ2WmlCMGFHVWdjRzlzZVdacGJHd3VYRzRnSUNBZ1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVZ1BTQk9ZWFJwZG1WSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlR0Y2JpQWdmVnh1WEc0Z0lIWmhjaUJIY0NBOUlFZGxibVZ5WVhSdmNrWjFibU4wYVc5dVVISnZkRzkwZVhCbExuQnliM1J2ZEhsd1pTQTlYRzRnSUNBZ1IyVnVaWEpoZEc5eUxuQnliM1J2ZEhsd1pTQTlJRTlpYW1WamRDNWpjbVZoZEdVb1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVcE8xeHVJQ0JIWlc1bGNtRjBiM0pHZFc1amRHbHZiaTV3Y205MGIzUjVjR1VnUFNCSGNDNWpiMjV6ZEhKMVkzUnZjaUE5SUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1VUhKdmRHOTBlWEJsTzF4dUlDQkhaVzVsY21GMGIzSkdkVzVqZEdsdmJsQnliM1J2ZEhsd1pTNWpiMjV6ZEhKMVkzUnZjaUE5SUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1TzF4dUlDQkhaVzVsY21GMGIzSkdkVzVqZEdsdmJsQnliM1J2ZEhsd1pWdDBiMU4wY21sdVoxUmhaMU41YldKdmJGMGdQVnh1SUNBZ0lFZGxibVZ5WVhSdmNrWjFibU4wYVc5dUxtUnBjM0JzWVhsT1lXMWxJRDBnWENKSFpXNWxjbUYwYjNKR2RXNWpkR2x2Ymx3aU8xeHVYRzRnSUM4dklFaGxiSEJsY2lCbWIzSWdaR1ZtYVc1cGJtY2dkR2hsSUM1dVpYaDBMQ0F1ZEdoeWIzY3NJR0Z1WkNBdWNtVjBkWEp1SUcxbGRHaHZaSE1nYjJZZ2RHaGxYRzRnSUM4dklFbDBaWEpoZEc5eUlHbHVkR1Z5Wm1GalpTQnBiaUIwWlhKdGN5QnZaaUJoSUhOcGJtZHNaU0F1WDJsdWRtOXJaU0J0WlhSb2IyUXVYRzRnSUdaMWJtTjBhVzl1SUdSbFptbHVaVWwwWlhKaGRHOXlUV1YwYUc5a2N5aHdjbTkwYjNSNWNHVXBJSHRjYmlBZ0lDQmJYQ0p1WlhoMFhDSXNJRndpZEdoeWIzZGNJaXdnWENKeVpYUjFjbTVjSWwwdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlodFpYUm9iMlFwSUh0Y2JpQWdJQ0FnSUhCeWIzUnZkSGx3WlZ0dFpYUm9iMlJkSUQwZ1puVnVZM1JwYjI0b1lYSm5LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBiblp2YTJVb2JXVjBhRzlrTENCaGNtY3BPMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUdWNGNHOXlkSE11YVhOSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmlBOUlHWjFibU4wYVc5dUtHZGxia1oxYmlrZ2UxeHVJQ0FnSUhaaGNpQmpkRzl5SUQwZ2RIbHdaVzltSUdkbGJrWjFiaUE5UFQwZ1hDSm1kVzVqZEdsdmJsd2lJQ1ltSUdkbGJrWjFiaTVqYjI1emRISjFZM1J2Y2p0Y2JpQWdJQ0J5WlhSMWNtNGdZM1J2Y2x4dUlDQWdJQ0FnUHlCamRHOXlJRDA5UFNCSFpXNWxjbUYwYjNKR2RXNWpkR2x2YmlCOGZGeHVJQ0FnSUNBZ0lDQXZMeUJHYjNJZ2RHaGxJRzVoZEdsMlpTQkhaVzVsY21GMGIzSkdkVzVqZEdsdmJpQmpiMjV6ZEhKMVkzUnZjaXdnZEdobElHSmxjM1FnZDJVZ1kyRnVYRzRnSUNBZ0lDQWdJQzh2SUdSdklHbHpJSFJ2SUdOb1pXTnJJR2wwY3lBdWJtRnRaU0J3Y205d1pYSjBlUzVjYmlBZ0lDQWdJQ0FnS0dOMGIzSXVaR2x6Y0d4aGVVNWhiV1VnZkh3Z1kzUnZjaTV1WVcxbEtTQTlQVDBnWENKSFpXNWxjbUYwYjNKR2RXNWpkR2x2Ymx3aVhHNGdJQ0FnSUNBNklHWmhiSE5sTzF4dUlDQjlPMXh1WEc0Z0lHVjRjRzl5ZEhNdWJXRnlheUE5SUdaMWJtTjBhVzl1S0dkbGJrWjFiaWtnZTF4dUlDQWdJR2xtSUNoUFltcGxZM1F1YzJWMFVISnZkRzkwZVhCbFQyWXBJSHRjYmlBZ0lDQWdJRTlpYW1WamRDNXpaWFJRY205MGIzUjVjR1ZQWmloblpXNUdkVzRzSUVkbGJtVnlZWFJ2Y2taMWJtTjBhVzl1VUhKdmRHOTBlWEJsS1R0Y2JpQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdaMlZ1Um5WdUxsOWZjSEp2ZEc5Zlh5QTlJRWRsYm1WeVlYUnZja1oxYm1OMGFXOXVVSEp2ZEc5MGVYQmxPMXh1SUNBZ0lDQWdhV1lnS0NFb2RHOVRkSEpwYm1kVVlXZFRlVzFpYjJ3Z2FXNGdaMlZ1Um5WdUtTa2dlMXh1SUNBZ0lDQWdJQ0JuWlc1R2RXNWJkRzlUZEhKcGJtZFVZV2RUZVcxaWIyeGRJRDBnWENKSFpXNWxjbUYwYjNKR2RXNWpkR2x2Ymx3aU8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JuWlc1R2RXNHVjSEp2ZEc5MGVYQmxJRDBnVDJKcVpXTjBMbU55WldGMFpTaEhjQ2s3WEc0Z0lDQWdjbVYwZFhKdUlHZGxia1oxYmp0Y2JpQWdmVHRjYmx4dUlDQXZMeUJYYVhSb2FXNGdkR2hsSUdKdlpIa2diMllnWVc1NUlHRnplVzVqSUdaMWJtTjBhVzl1TENCZ1lYZGhhWFFnZUdBZ2FYTWdkSEpoYm5ObWIzSnRaV1FnZEc5Y2JpQWdMeThnWUhscFpXeGtJSEpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaUzVoZDNKaGNDaDRLV0FzSUhOdklIUm9ZWFFnZEdobElISjFiblJwYldVZ1kyRnVJSFJsYzNSY2JpQWdMeThnWUdoaGMwOTNiaTVqWVd4c0tIWmhiSFZsTENCY0lsOWZZWGRoYVhSY0lpbGdJSFJ2SUdSbGRHVnliV2x1WlNCcFppQjBhR1VnZVdsbGJHUmxaQ0IyWVd4MVpTQnBjMXh1SUNBdkx5QnRaV0Z1ZENCMGJ5QmlaU0JoZDJGcGRHVmtMbHh1SUNCbGVIQnZjblJ6TG1GM2NtRndJRDBnWm5WdVkzUnBiMjRvWVhKbktTQjdYRzRnSUNBZ2NtVjBkWEp1SUhzZ1gxOWhkMkZwZERvZ1lYSm5JSDA3WEc0Z0lIMDdYRzVjYmlBZ1puVnVZM1JwYjI0Z1FYTjVibU5KZEdWeVlYUnZjaWhuWlc1bGNtRjBiM0lwSUh0Y2JpQWdJQ0JtZFc1amRHbHZiaUJwYm5admEyVW9iV1YwYUc5a0xDQmhjbWNzSUhKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnZG1GeUlISmxZMjl5WkNBOUlIUnllVU5oZEdOb0tHZGxibVZ5WVhSdmNsdHRaWFJvYjJSZExDQm5aVzVsY21GMGIzSXNJR0Z5WnlrN1hHNGdJQ0FnSUNCcFppQW9jbVZqYjNKa0xuUjVjR1VnUFQwOUlGd2lkR2h5YjNkY0lpa2dlMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9jbVZqYjNKa0xtRnlaeWs3WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ2NtVmpiM0prTG1GeVp6dGNiaUFnSUNBZ0lDQWdkbUZ5SUhaaGJIVmxJRDBnY21WemRXeDBMblpoYkhWbE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZG1Gc2RXVWdKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ1hDSnZZbXBsWTNSY0lpQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FHRnpUM2R1TG1OaGJHd29kbUZzZFdVc0lGd2lYMTloZDJGcGRGd2lLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvZG1Gc2RXVXVYMTloZDJGcGRDa3VkR2hsYmlobWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzUyYjJ0bEtGd2libVY0ZEZ3aUxDQjJZV3gxWlN3Z2NtVnpiMngyWlN3Z2NtVnFaV04wS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlMQ0JtZFc1amRHbHZiaWhsY25JcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWRtOXJaU2hjSW5Sb2NtOTNYQ0lzSUdWeWNpd2djbVZ6YjJ4MlpTd2djbVZxWldOMEtUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb2RtRnNkV1VwTG5Sb1pXNG9ablZ1WTNScGIyNG9kVzUzY21Gd2NHVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdWMmhsYmlCaElIbHBaV3hrWldRZ1VISnZiV2x6WlNCcGN5QnlaWE52YkhabFpDd2dhWFJ6SUdacGJtRnNJSFpoYkhWbElHSmxZMjl0WlhOY2JpQWdJQ0FnSUNBZ0lDQXZMeUIwYUdVZ0xuWmhiSFZsSUc5bUlIUm9aU0JRY205dGFYTmxQSHQyWVd4MVpTeGtiMjVsZlQ0Z2NtVnpkV3gwSUdadmNpQjBhR1ZjYmlBZ0lDQWdJQ0FnSUNBdkx5QmpkWEp5Wlc1MElHbDBaWEpoZEdsdmJpNWNiaUFnSUNBZ0lDQWdJQ0J5WlhOMWJIUXVkbUZzZFdVZ1BTQjFibmR5WVhCd1pXUTdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0I5TENCbWRXNWpkR2x2YmlobGNuSnZjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJRWxtSUdFZ2NtVnFaV04wWldRZ1VISnZiV2x6WlNCM1lYTWdlV2xsYkdSbFpDd2dkR2h5YjNjZ2RHaGxJSEpsYW1WamRHbHZiaUJpWVdOclhHNGdJQ0FnSUNBZ0lDQWdMeThnYVc1MGJ5QjBhR1VnWVhONWJtTWdaMlZ1WlhKaGRHOXlJR1oxYm1OMGFXOXVJSE52SUdsMElHTmhiaUJpWlNCb1lXNWtiR1ZrSUhSb1pYSmxMbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJwYm5admEyVW9YQ0owYUhKdmQxd2lMQ0JsY25KdmNpd2djbVZ6YjJ4MlpTd2djbVZxWldOMEtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdkbUZ5SUhCeVpYWnBiM1Z6VUhKdmJXbHpaVHRjYmx4dUlDQWdJR1oxYm1OMGFXOXVJR1Z1Y1hWbGRXVW9iV1YwYUc5a0xDQmhjbWNwSUh0Y2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUdOaGJHeEpiblp2YTJWWGFYUm9UV1YwYUc5a1FXNWtRWEpuS0NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9ablZ1WTNScGIyNG9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVc1MmIydGxLRzFsZEdodlpDd2dZWEpuTENCeVpYTnZiSFpsTENCeVpXcGxZM1FwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlIQnlaWFpwYjNWelVISnZiV2x6WlNBOVhHNGdJQ0FnSUNBZ0lDOHZJRWxtSUdWdWNYVmxkV1VnYUdGeklHSmxaVzRnWTJGc2JHVmtJR0psWm05eVpTd2dkR2hsYmlCM1pTQjNZVzUwSUhSdklIZGhhWFFnZFc1MGFXeGNiaUFnSUNBZ0lDQWdMeThnWVd4c0lIQnlaWFpwYjNWeklGQnliMjFwYzJWeklHaGhkbVVnWW1WbGJpQnlaWE52YkhabFpDQmlaV1p2Y21VZ1kyRnNiR2x1WnlCcGJuWnZhMlVzWEc0Z0lDQWdJQ0FnSUM4dklITnZJSFJvWVhRZ2NtVnpkV3gwY3lCaGNtVWdZV3gzWVhseklHUmxiR2wyWlhKbFpDQnBiaUIwYUdVZ1kyOXljbVZqZENCdmNtUmxjaTRnU1daY2JpQWdJQ0FnSUNBZ0x5OGdaVzV4ZFdWMVpTQm9ZWE1nYm05MElHSmxaVzRnWTJGc2JHVmtJR0psWm05eVpTd2dkR2hsYmlCcGRDQnBjeUJwYlhCdmNuUmhiblFnZEc5Y2JpQWdJQ0FnSUNBZ0x5OGdZMkZzYkNCcGJuWnZhMlVnYVcxdFpXUnBZWFJsYkhrc0lIZHBkR2h2ZFhRZ2QyRnBkR2x1WnlCdmJpQmhJR05oYkd4aVlXTnJJSFJ2SUdacGNtVXNYRzRnSUNBZ0lDQWdJQzh2SUhOdklIUm9ZWFFnZEdobElHRnplVzVqSUdkbGJtVnlZWFJ2Y2lCbWRXNWpkR2x2YmlCb1lYTWdkR2hsSUc5d2NHOXlkSFZ1YVhSNUlIUnZJR1J2WEc0Z0lDQWdJQ0FnSUM4dklHRnVlU0J1WldObGMzTmhjbmtnYzJWMGRYQWdhVzRnWVNCd2NtVmthV04wWVdKc1pTQjNZWGt1SUZSb2FYTWdjSEpsWkdsamRHRmlhV3hwZEhsY2JpQWdJQ0FnSUNBZ0x5OGdhWE1nZDJoNUlIUm9aU0JRY205dGFYTmxJR052Ym5OMGNuVmpkRzl5SUhONWJtTm9jbTl1YjNWemJIa2dhVzUyYjJ0bGN5QnBkSE5jYmlBZ0lDQWdJQ0FnTHk4Z1pYaGxZM1YwYjNJZ1kyRnNiR0poWTJzc0lHRnVaQ0IzYUhrZ1lYTjVibU1nWm5WdVkzUnBiMjV6SUhONWJtTm9jbTl1YjNWemJIbGNiaUFnSUNBZ0lDQWdMeThnWlhobFkzVjBaU0JqYjJSbElHSmxabTl5WlNCMGFHVWdabWx5YzNRZ1lYZGhhWFF1SUZOcGJtTmxJSGRsSUdsdGNHeGxiV1Z1ZENCemFXMXdiR1ZjYmlBZ0lDQWdJQ0FnTHk4Z1lYTjVibU1nWm5WdVkzUnBiMjV6SUdsdUlIUmxjbTF6SUc5bUlHRnplVzVqSUdkbGJtVnlZWFJ2Y25Nc0lHbDBJR2x6SUdWemNHVmphV0ZzYkhsY2JpQWdJQ0FnSUNBZ0x5OGdhVzF3YjNKMFlXNTBJSFJ2SUdkbGRDQjBhR2x6SUhKcFoyaDBMQ0JsZG1WdUlIUm9iM1ZuYUNCcGRDQnlaWEYxYVhKbGN5QmpZWEpsTGx4dUlDQWdJQ0FnSUNCd2NtVjJhVzkxYzFCeWIyMXBjMlVnUHlCd2NtVjJhVzkxYzFCeWIyMXBjMlV1ZEdobGJpaGNiaUFnSUNBZ0lDQWdJQ0JqWVd4c1NXNTJiMnRsVjJsMGFFMWxkR2h2WkVGdVpFRnlaeXhjYmlBZ0lDQWdJQ0FnSUNBdkx5QkJkbTlwWkNCd2NtOXdZV2RoZEdsdVp5Qm1ZV2xzZFhKbGN5QjBieUJRY205dGFYTmxjeUJ5WlhSMWNtNWxaQ0JpZVNCc1lYUmxjbHh1SUNBZ0lDQWdJQ0FnSUM4dklHbHVkbTlqWVhScGIyNXpJRzltSUhSb1pTQnBkR1Z5WVhSdmNpNWNiaUFnSUNBZ0lDQWdJQ0JqWVd4c1NXNTJiMnRsVjJsMGFFMWxkR2h2WkVGdVpFRnlaMXh1SUNBZ0lDQWdJQ0FwSURvZ1kyRnNiRWx1ZG05clpWZHBkR2hOWlhSb2IyUkJibVJCY21jb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QkVaV1pwYm1VZ2RHaGxJSFZ1YVdacFpXUWdhR1ZzY0dWeUlHMWxkR2h2WkNCMGFHRjBJR2x6SUhWelpXUWdkRzhnYVcxd2JHVnRaVzUwSUM1dVpYaDBMRnh1SUNBZ0lDOHZJQzUwYUhKdmR5d2dZVzVrSUM1eVpYUjFjbTRnS0hObFpTQmtaV1pwYm1WSmRHVnlZWFJ2Y2sxbGRHaHZaSE1wTGx4dUlDQWdJSFJvYVhNdVgybHVkbTlyWlNBOUlHVnVjWFZsZFdVN1hHNGdJSDFjYmx4dUlDQmtaV1pwYm1WSmRHVnlZWFJ2Y2sxbGRHaHZaSE1vUVhONWJtTkpkR1Z5WVhSdmNpNXdjbTkwYjNSNWNHVXBPMXh1SUNCQmMzbHVZMGwwWlhKaGRHOXlMbkJ5YjNSdmRIbHdaVnRoYzNsdVkwbDBaWEpoZEc5eVUzbHRZbTlzWFNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjenRjYmlBZ2ZUdGNiaUFnWlhod2IzSjBjeTVCYzNsdVkwbDBaWEpoZEc5eUlEMGdRWE41Ym1OSmRHVnlZWFJ2Y2p0Y2JseHVJQ0F2THlCT2IzUmxJSFJvWVhRZ2MybHRjR3hsSUdGemVXNWpJR1oxYm1OMGFXOXVjeUJoY21VZ2FXMXdiR1Z0Wlc1MFpXUWdiMjRnZEc5d0lHOW1YRzRnSUM4dklFRnplVzVqU1hSbGNtRjBiM0lnYjJKcVpXTjBjenNnZEdobGVTQnFkWE4wSUhKbGRIVnliaUJoSUZCeWIyMXBjMlVnWm05eUlIUm9aU0IyWVd4MVpTQnZabHh1SUNBdkx5QjBhR1VnWm1sdVlXd2djbVZ6ZFd4MElIQnliMlIxWTJWa0lHSjVJSFJvWlNCcGRHVnlZWFJ2Y2k1Y2JpQWdaWGh3YjNKMGN5NWhjM2x1WXlBOUlHWjFibU4wYVc5dUtHbHVibVZ5Um00c0lHOTFkR1Z5Um00c0lITmxiR1lzSUhSeWVVeHZZM05NYVhOMEtTQjdYRzRnSUNBZ2RtRnlJR2wwWlhJZ1BTQnVaWGNnUVhONWJtTkpkR1Z5WVhSdmNpaGNiaUFnSUNBZ0lIZHlZWEFvYVc1dVpYSkdiaXdnYjNWMFpYSkdiaXdnYzJWc1ppd2dkSEo1VEc5amMweHBjM1FwWEc0Z0lDQWdLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQmxlSEJ2Y25SekxtbHpSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNG9iM1YwWlhKR2JpbGNiaUFnSUNBZ0lEOGdhWFJsY2lBdkx5QkpaaUJ2ZFhSbGNrWnVJR2x6SUdFZ1oyVnVaWEpoZEc5eUxDQnlaWFIxY200Z2RHaGxJR1oxYkd3Z2FYUmxjbUYwYjNJdVhHNGdJQ0FnSUNBNklHbDBaWEl1Ym1WNGRDZ3BMblJvWlc0b1puVnVZM1JwYjI0b2NtVnpkV3gwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZEM1a2IyNWxJRDhnY21WemRXeDBMblpoYkhWbElEb2dhWFJsY2k1dVpYaDBLQ2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0I5TzF4dVhHNGdJR1oxYm1OMGFXOXVJRzFoYTJWSmJuWnZhMlZOWlhSb2IyUW9hVzV1WlhKR2Jpd2djMlZzWml3Z1kyOXVkR1Y0ZENrZ2UxeHVJQ0FnSUhaaGNpQnpkR0YwWlNBOUlFZGxibE4wWVhSbFUzVnpjR1Z1WkdWa1UzUmhjblE3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdhVzUyYjJ0bEtHMWxkR2h2WkN3Z1lYSm5LU0I3WEc0Z0lDQWdJQ0JwWmlBb2MzUmhkR1VnUFQwOUlFZGxibE4wWVhSbFJYaGxZM1YwYVc1bktTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNJa2RsYm1WeVlYUnZjaUJwY3lCaGJISmxZV1I1SUhKMWJtNXBibWRjSWlrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHbG1JQ2h6ZEdGMFpTQTlQVDBnUjJWdVUzUmhkR1ZEYjIxd2JHVjBaV1FwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzFsZEdodlpDQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ1lYSm5PMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdRbVVnWm05eVoybDJhVzVuTENCd1pYSWdNalV1TXk0ekxqTXVNeUJ2WmlCMGFHVWdjM0JsWXpwY2JpQWdJQ0FnSUNBZ0x5OGdhSFIwY0hNNkx5OXdaVzl3YkdVdWJXOTZhV3hzWVM1dmNtY3ZmbXB2Y21WdVpHOXlabVl2WlhNMkxXUnlZV1owTG1oMGJXd2pjMlZqTFdkbGJtVnlZWFJ2Y25KbGMzVnRaVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdaRzl1WlZKbGMzVnNkQ2dwTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCamIyNTBaWGgwTG0xbGRHaHZaQ0E5SUcxbGRHaHZaRHRjYmlBZ0lDQWdJR052Ym5SbGVIUXVZWEpuSUQwZ1lYSm5PMXh1WEc0Z0lDQWdJQ0IzYUdsc1pTQW9kSEoxWlNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWkdWc1pXZGhkR1VnUFNCamIyNTBaWGgwTG1SbGJHVm5ZWFJsTzF4dUlDQWdJQ0FnSUNCcFppQW9aR1ZzWldkaGRHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCMllYSWdaR1ZzWldkaGRHVlNaWE4xYkhRZ1BTQnRZWGxpWlVsdWRtOXJaVVJsYkdWbllYUmxLR1JsYkdWbllYUmxMQ0JqYjI1MFpYaDBLVHRjYmlBZ0lDQWdJQ0FnSUNCcFppQW9aR1ZzWldkaGRHVlNaWE4xYkhRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtaV3hsWjJGMFpWSmxjM1ZzZENBOVBUMGdRMjl1ZEdsdWRXVlRaVzUwYVc1bGJDa2dZMjl1ZEdsdWRXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWkdWc1pXZGhkR1ZTWlhOMWJIUTdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0dOdmJuUmxlSFF1YldWMGFHOWtJRDA5UFNCY0ltNWxlSFJjSWlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUZObGRIUnBibWNnWTI5dWRHVjRkQzVmYzJWdWRDQm1iM0lnYkdWbllXTjVJSE4xY0hCdmNuUWdiMllnUW1GaVpXd25jMXh1SUNBZ0lDQWdJQ0FnSUM4dklHWjFibU4wYVc5dUxuTmxiblFnYVcxd2JHVnRaVzUwWVhScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRHVjRkQzV6Wlc1MElEMGdZMjl1ZEdWNGRDNWZjMlZ1ZENBOUlHTnZiblJsZUhRdVlYSm5PMXh1WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyOXVkR1Y0ZEM1dFpYUm9iMlFnUFQwOUlGd2lkR2h5YjNkY0lpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlNBOVBUMGdSMlZ1VTNSaGRHVlRkWE53Wlc1a1pXUlRkR0Z5ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRHVWdQU0JIWlc1VGRHRjBaVU52YlhCc1pYUmxaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUdOdmJuUmxlSFF1WVhKbk8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lHTnZiblJsZUhRdVpHbHpjR0YwWTJoRmVHTmxjSFJwYjI0b1kyOXVkR1Y0ZEM1aGNtY3BPMXh1WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb1kyOXVkR1Y0ZEM1dFpYUm9iMlFnUFQwOUlGd2ljbVYwZFhKdVhDSXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamIyNTBaWGgwTG1GaWNuVndkQ2hjSW5KbGRIVnlibHdpTENCamIyNTBaWGgwTG1GeVp5azdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCemRHRjBaU0E5SUVkbGJsTjBZWFJsUlhobFkzVjBhVzVuTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ5WldOdmNtUWdQU0IwY25sRFlYUmphQ2hwYm01bGNrWnVMQ0J6Wld4bUxDQmpiMjUwWlhoMEtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW01dmNtMWhiRndpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnU1dZZ1lXNGdaWGhqWlhCMGFXOXVJR2x6SUhSb2NtOTNiaUJtY205dElHbHVibVZ5Um00c0lIZGxJR3hsWVhabElITjBZWFJsSUQwOVBWeHVJQ0FnSUNBZ0lDQWdJQzh2SUVkbGJsTjBZWFJsUlhobFkzVjBhVzVuSUdGdVpDQnNiMjl3SUdKaFkyc2dabTl5SUdGdWIzUm9aWElnYVc1MmIyTmhkR2x2Ymk1Y2JpQWdJQ0FnSUNBZ0lDQnpkR0YwWlNBOUlHTnZiblJsZUhRdVpHOXVaVnh1SUNBZ0lDQWdJQ0FnSUNBZ1B5QkhaVzVUZEdGMFpVTnZiWEJzWlhSbFpGeHVJQ0FnSUNBZ0lDQWdJQ0FnT2lCSFpXNVRkR0YwWlZOMWMzQmxibVJsWkZscFpXeGtPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSEpsWTI5eVpDNWhjbWNnUFQwOUlFTnZiblJwYm5WbFUyVnVkR2x1Wld3cElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2NtVmpiM0prTG1GeVp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdSdmJtVTZJR052Ym5SbGVIUXVaRzl1WlZ4dUlDQWdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtSUNoeVpXTnZjbVF1ZEhsd1pTQTlQVDBnWENKMGFISnZkMXdpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjM1JoZEdVZ1BTQkhaVzVUZEdGMFpVTnZiWEJzWlhSbFpEdGNiaUFnSUNBZ0lDQWdJQ0F2THlCRWFYTndZWFJqYUNCMGFHVWdaWGhqWlhCMGFXOXVJR0o1SUd4dmIzQnBibWNnWW1GamF5QmhjbTkxYm1RZ2RHOGdkR2hsWEc0Z0lDQWdJQ0FnSUNBZ0x5OGdZMjl1ZEdWNGRDNWthWE53WVhSamFFVjRZMlZ3ZEdsdmJpaGpiMjUwWlhoMExtRnlaeWtnWTJGc2JDQmhZbTkyWlM1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjUwWlhoMExtMWxkR2h2WkNBOUlGd2lkR2h5YjNkY0lqdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1MFpYaDBMbUZ5WnlBOUlISmxZMjl5WkM1aGNtYzdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1SUNCOVhHNWNiaUFnTHk4Z1EyRnNiQ0JrWld4bFoyRjBaUzVwZEdWeVlYUnZjbHRqYjI1MFpYaDBMbTFsZEdodlpGMG9ZMjl1ZEdWNGRDNWhjbWNwSUdGdVpDQm9ZVzVrYkdVZ2RHaGxYRzRnSUM4dklISmxjM1ZzZEN3Z1pXbDBhR1Z5SUdKNUlISmxkSFZ5Ym1sdVp5QmhJSHNnZG1Gc2RXVXNJR1J2Ym1VZ2ZTQnlaWE4xYkhRZ1puSnZiU0IwYUdWY2JpQWdMeThnWkdWc1pXZGhkR1VnYVhSbGNtRjBiM0lzSUc5eUlHSjVJRzF2WkdsbWVXbHVaeUJqYjI1MFpYaDBMbTFsZEdodlpDQmhibVFnWTI5dWRHVjRkQzVoY21jc1hHNGdJQzh2SUhObGRIUnBibWNnWTI5dWRHVjRkQzVrWld4bFoyRjBaU0IwYnlCdWRXeHNMQ0JoYm1RZ2NtVjBkWEp1YVc1bklIUm9aU0JEYjI1MGFXNTFaVk5sYm5ScGJtVnNMbHh1SUNCbWRXNWpkR2x2YmlCdFlYbGlaVWx1ZG05clpVUmxiR1ZuWVhSbEtHUmxiR1ZuWVhSbExDQmpiMjUwWlhoMEtTQjdYRzRnSUNBZ2RtRnlJRzFsZEdodlpDQTlJR1JsYkdWbllYUmxMbWwwWlhKaGRHOXlXMk52Ym5SbGVIUXViV1YwYUc5a1hUdGNiaUFnSUNCcFppQW9iV1YwYUc5a0lEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUM4dklFRWdMblJvY205M0lHOXlJQzV5WlhSMWNtNGdkMmhsYmlCMGFHVWdaR1ZzWldkaGRHVWdhWFJsY21GMGIzSWdhR0Z6SUc1dklDNTBhSEp2ZDF4dUlDQWdJQ0FnTHk4Z2JXVjBhRzlrSUdGc2QyRjVjeUIwWlhKdGFXNWhkR1Z6SUhSb1pTQjVhV1ZzWkNvZ2JHOXZjQzVjYmlBZ0lDQWdJR052Ym5SbGVIUXVaR1ZzWldkaGRHVWdQU0J1ZFd4c08xeHVYRzRnSUNBZ0lDQnBaaUFvWTI5dWRHVjRkQzV0WlhSb2IyUWdQVDA5SUZ3aWRHaHliM2RjSWlrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJPYjNSbE9pQmJYQ0p5WlhSMWNtNWNJbDBnYlhWemRDQmlaU0IxYzJWa0lHWnZjaUJGVXpNZ2NHRnljMmx1WnlCamIyMXdZWFJwWW1sc2FYUjVMbHh1SUNBZ0lDQWdJQ0JwWmlBb1pHVnNaV2RoZEdVdWFYUmxjbUYwYjNKYlhDSnlaWFIxY201Y0lsMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QkpaaUIwYUdVZ1pHVnNaV2RoZEdVZ2FYUmxjbUYwYjNJZ2FHRnpJR0VnY21WMGRYSnVJRzFsZEdodlpDd2daMmwyWlNCcGRDQmhYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1kyaGhibU5sSUhSdklHTnNaV0Z1SUhWd0xseHVJQ0FnSUNBZ0lDQWdJR052Ym5SbGVIUXViV1YwYUc5a0lEMGdYQ0p5WlhSMWNtNWNJanRjYmlBZ0lDQWdJQ0FnSUNCamIyNTBaWGgwTG1GeVp5QTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNCdFlYbGlaVWx1ZG05clpVUmxiR1ZuWVhSbEtHUmxiR1ZuWVhSbExDQmpiMjUwWlhoMEtUdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGpiMjUwWlhoMExtMWxkR2h2WkNBOVBUMGdYQ0owYUhKdmQxd2lLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJKWmlCdFlYbGlaVWx1ZG05clpVUmxiR1ZuWVhSbEtHTnZiblJsZUhRcElHTm9ZVzVuWldRZ1kyOXVkR1Y0ZEM1dFpYUm9iMlFnWm5KdmJWeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1hDSnlaWFIxY201Y0lpQjBieUJjSW5Sb2NtOTNYQ0lzSUd4bGRDQjBhR0YwSUc5MlpYSnlhV1JsSUhSb1pTQlVlWEJsUlhKeWIzSWdZbVZzYjNjdVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdRMjl1ZEdsdWRXVlRaVzUwYVc1bGJEdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmpiMjUwWlhoMExtMWxkR2h2WkNBOUlGd2lkR2h5YjNkY0lqdGNiaUFnSUNBZ0lDQWdZMjl1ZEdWNGRDNWhjbWNnUFNCdVpYY2dWSGx3WlVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUZ3aVZHaGxJR2wwWlhKaGRHOXlJR1J2WlhNZ2JtOTBJSEJ5YjNacFpHVWdZU0FuZEdoeWIzY25JRzFsZEdodlpGd2lLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJRU52Ym5ScGJuVmxVMlZ1ZEdsdVpXdzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RtRnlJSEpsWTI5eVpDQTlJSFJ5ZVVOaGRHTm9LRzFsZEdodlpDd2daR1ZzWldkaGRHVXVhWFJsY21GMGIzSXNJR052Ym5SbGVIUXVZWEpuS1R0Y2JseHVJQ0FnSUdsbUlDaHlaV052Y21RdWRIbHdaU0E5UFQwZ1hDSjBhSEp2ZDF3aUtTQjdYRzRnSUNBZ0lDQmpiMjUwWlhoMExtMWxkR2h2WkNBOUlGd2lkR2h5YjNkY0lqdGNiaUFnSUNBZ0lHTnZiblJsZUhRdVlYSm5JRDBnY21WamIzSmtMbUZ5Wnp0Y2JpQWdJQ0FnSUdOdmJuUmxlSFF1WkdWc1pXZGhkR1VnUFNCdWRXeHNPMXh1SUNBZ0lDQWdjbVYwZFhKdUlFTnZiblJwYm5WbFUyVnVkR2x1Wld3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZG1GeUlHbHVabThnUFNCeVpXTnZjbVF1WVhKbk8xeHVYRzRnSUNBZ2FXWWdLQ0VnYVc1bWJ5a2dlMXh1SUNBZ0lDQWdZMjl1ZEdWNGRDNXRaWFJvYjJRZ1BTQmNJblJvY205M1hDSTdYRzRnSUNBZ0lDQmpiMjUwWlhoMExtRnlaeUE5SUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pwZEdWeVlYUnZjaUJ5WlhOMWJIUWdhWE1nYm05MElHRnVJRzlpYW1WamRGd2lLVHRjYmlBZ0lDQWdJR052Ym5SbGVIUXVaR1ZzWldkaGRHVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ2NtVjBkWEp1SUVOdmJuUnBiblZsVTJWdWRHbHVaV3c3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dsdVptOHVaRzl1WlNrZ2UxeHVJQ0FnSUNBZ0x5OGdRWE56YVdkdUlIUm9aU0J5WlhOMWJIUWdiMllnZEdobElHWnBibWx6YUdWa0lHUmxiR1ZuWVhSbElIUnZJSFJvWlNCMFpXMXdiM0poY25sY2JpQWdJQ0FnSUM4dklIWmhjbWxoWW14bElITndaV05wWm1sbFpDQmllU0JrWld4bFoyRjBaUzV5WlhOMWJIUk9ZVzFsSUNoelpXVWdaR1ZzWldkaGRHVlphV1ZzWkNrdVhHNGdJQ0FnSUNCamIyNTBaWGgwVzJSbGJHVm5ZWFJsTG5KbGMzVnNkRTVoYldWZElEMGdhVzVtYnk1MllXeDFaVHRjYmx4dUlDQWdJQ0FnTHk4Z1VtVnpkVzFsSUdWNFpXTjFkR2x2YmlCaGRDQjBhR1VnWkdWemFYSmxaQ0JzYjJOaGRHbHZiaUFvYzJWbElHUmxiR1ZuWVhSbFdXbGxiR1FwTGx4dUlDQWdJQ0FnWTI5dWRHVjRkQzV1WlhoMElEMGdaR1ZzWldkaGRHVXVibVY0ZEV4dll6dGNibHh1SUNBZ0lDQWdMeThnU1dZZ1kyOXVkR1Y0ZEM1dFpYUm9iMlFnZDJGeklGd2lkR2h5YjNkY0lpQmlkWFFnZEdobElHUmxiR1ZuWVhSbElHaGhibVJzWldRZ2RHaGxYRzRnSUNBZ0lDQXZMeUJsZUdObGNIUnBiMjRzSUd4bGRDQjBhR1VnYjNWMFpYSWdaMlZ1WlhKaGRHOXlJSEJ5YjJObFpXUWdibTl5YldGc2JIa3VJRWxtWEc0Z0lDQWdJQ0F2THlCamIyNTBaWGgwTG0xbGRHaHZaQ0IzWVhNZ1hDSnVaWGgwWENJc0lHWnZjbWRsZENCamIyNTBaWGgwTG1GeVp5QnphVzVqWlNCcGRDQm9ZWE1nWW1WbGJseHVJQ0FnSUNBZ0x5OGdYQ0pqYjI1emRXMWxaRndpSUdKNUlIUm9aU0JrWld4bFoyRjBaU0JwZEdWeVlYUnZjaTRnU1dZZ1kyOXVkR1Y0ZEM1dFpYUm9iMlFnZDJGelhHNGdJQ0FnSUNBdkx5QmNJbkpsZEhWeWJsd2lMQ0JoYkd4dmR5QjBhR1VnYjNKcFoybHVZV3dnTG5KbGRIVnliaUJqWVd4c0lIUnZJR052Ym5ScGJuVmxJR2x1SUhSb1pWeHVJQ0FnSUNBZ0x5OGdiM1YwWlhJZ1oyVnVaWEpoZEc5eUxseHVJQ0FnSUNBZ2FXWWdLR052Ym5SbGVIUXViV1YwYUc5a0lDRTlQU0JjSW5KbGRIVnlibHdpS1NCN1hHNGdJQ0FnSUNBZ0lHTnZiblJsZUhRdWJXVjBhRzlrSUQwZ1hDSnVaWGgwWENJN1hHNGdJQ0FnSUNBZ0lHTnZiblJsZUhRdVlYSm5JRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQzh2SUZKbExYbHBaV3hrSUhSb1pTQnlaWE4xYkhRZ2NtVjBkWEp1WldRZ1lua2dkR2hsSUdSbGJHVm5ZWFJsSUcxbGRHaHZaQzVjYmlBZ0lDQWdJSEpsZEhWeWJpQnBibVp2TzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZSb1pTQmtaV3hsWjJGMFpTQnBkR1Z5WVhSdmNpQnBjeUJtYVc1cGMyaGxaQ3dnYzI4Z1ptOXlaMlYwSUdsMElHRnVaQ0JqYjI1MGFXNTFaU0IzYVhSb1hHNGdJQ0FnTHk4Z2RHaGxJRzkxZEdWeUlHZGxibVZ5WVhSdmNpNWNiaUFnSUNCamIyNTBaWGgwTG1SbGJHVm5ZWFJsSUQwZ2JuVnNiRHRjYmlBZ0lDQnlaWFIxY200Z1EyOXVkR2x1ZFdWVFpXNTBhVzVsYkR0Y2JpQWdmVnh1WEc0Z0lDOHZJRVJsWm1sdVpTQkhaVzVsY21GMGIzSXVjSEp2ZEc5MGVYQmxMbnR1WlhoMExIUm9jbTkzTEhKbGRIVnlibjBnYVc0Z2RHVnliWE1nYjJZZ2RHaGxYRzRnSUM4dklIVnVhV1pwWldRZ0xsOXBiblp2YTJVZ2FHVnNjR1Z5SUcxbGRHaHZaQzVjYmlBZ1pHVm1hVzVsU1hSbGNtRjBiM0pOWlhSb2IyUnpLRWR3S1R0Y2JseHVJQ0JIY0Z0MGIxTjBjbWx1WjFSaFoxTjViV0p2YkYwZ1BTQmNJa2RsYm1WeVlYUnZjbHdpTzF4dVhHNGdJQzh2SUVFZ1IyVnVaWEpoZEc5eUlITm9iM1ZzWkNCaGJIZGhlWE1nY21WMGRYSnVJR2wwYzJWc1ppQmhjeUIwYUdVZ2FYUmxjbUYwYjNJZ2IySnFaV04wSUhkb1pXNGdkR2hsWEc0Z0lDOHZJRUJBYVhSbGNtRjBiM0lnWm5WdVkzUnBiMjRnYVhNZ1kyRnNiR1ZrSUc5dUlHbDBMaUJUYjIxbElHSnliM2R6WlhKekp5QnBiWEJzWlcxbGJuUmhkR2x2Ym5NZ2IyWWdkR2hsWEc0Z0lDOHZJR2wwWlhKaGRHOXlJSEJ5YjNSdmRIbHdaU0JqYUdGcGJpQnBibU52Y25KbFkzUnNlU0JwYlhCc1pXMWxiblFnZEdocGN5d2dZMkYxYzJsdVp5QjBhR1VnUjJWdVpYSmhkRzl5WEc0Z0lDOHZJRzlpYW1WamRDQjBieUJ1YjNRZ1ltVWdjbVYwZFhKdVpXUWdabkp2YlNCMGFHbHpJR05oYkd3dUlGUm9hWE1nWlc1emRYSmxjeUIwYUdGMElHUnZaWE51SjNRZ2FHRndjR1Z1TGx4dUlDQXZMeUJUWldVZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyWmhZMlZpYjI5ckwzSmxaMlZ1WlhKaGRHOXlMMmx6YzNWbGN5OHlOelFnWm05eUlHMXZjbVVnWkdWMFlXbHNjeTVjYmlBZ1IzQmJhWFJsY21GMGIzSlRlVzFpYjJ4ZElEMGdablZ1WTNScGIyNG9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE03WEc0Z0lIMDdYRzVjYmlBZ1IzQXVkRzlUZEhKcGJtY2dQU0JtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdYQ0piYjJKcVpXTjBJRWRsYm1WeVlYUnZjbDFjSWp0Y2JpQWdmVHRjYmx4dUlDQm1kVzVqZEdsdmJpQndkWE5vVkhKNVJXNTBjbmtvYkc5amN5a2dlMXh1SUNBZ0lIWmhjaUJsYm5SeWVTQTlJSHNnZEhKNVRHOWpPaUJzYjJOeld6QmRJSDA3WEc1Y2JpQWdJQ0JwWmlBb01TQnBiaUJzYjJOektTQjdYRzRnSUNBZ0lDQmxiblJ5ZVM1allYUmphRXh2WXlBOUlHeHZZM05iTVYwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tESWdhVzRnYkc5amN5a2dlMXh1SUNBZ0lDQWdaVzUwY25rdVptbHVZV3hzZVV4dll5QTlJR3h2WTNOYk1sMDdYRzRnSUNBZ0lDQmxiblJ5ZVM1aFpuUmxja3h2WXlBOUlHeHZZM05iTTEwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEdocGN5NTBjbmxGYm5SeWFXVnpMbkIxYzJnb1pXNTBjbmtwTzF4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2NtVnpaWFJVY25sRmJuUnllU2hsYm5SeWVTa2dlMXh1SUNBZ0lIWmhjaUJ5WldOdmNtUWdQU0JsYm5SeWVTNWpiMjF3YkdWMGFXOXVJSHg4SUh0OU8xeHVJQ0FnSUhKbFkyOXlaQzUwZVhCbElEMGdYQ0p1YjNKdFlXeGNJanRjYmlBZ0lDQmtaV3hsZEdVZ2NtVmpiM0prTG1GeVp6dGNiaUFnSUNCbGJuUnllUzVqYjIxd2JHVjBhVzl1SUQwZ2NtVmpiM0prTzF4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z1EyOXVkR1Y0ZENoMGNubE1iMk56VEdsemRDa2dlMXh1SUNBZ0lDOHZJRlJvWlNCeWIyOTBJR1Z1ZEhKNUlHOWlhbVZqZENBb1pXWm1aV04wYVhabGJIa2dZU0IwY25rZ2MzUmhkR1Z0Wlc1MElIZHBkR2h2ZFhRZ1lTQmpZWFJqYUZ4dUlDQWdJQzh2SUc5eUlHRWdabWx1WVd4c2VTQmliRzlqYXlrZ1oybDJaWE1nZFhNZ1lTQndiR0ZqWlNCMGJ5QnpkRzl5WlNCMllXeDFaWE1nZEdoeWIzZHVJR1p5YjIxY2JpQWdJQ0F2THlCc2IyTmhkR2x2Ym5NZ2QyaGxjbVVnZEdobGNtVWdhWE1nYm04Z1pXNWpiRzl6YVc1bklIUnllU0J6ZEdGMFpXMWxiblF1WEc0Z0lDQWdkR2hwY3k1MGNubEZiblJ5YVdWeklEMGdXM3NnZEhKNVRHOWpPaUJjSW5KdmIzUmNJaUI5WFR0Y2JpQWdJQ0IwY25sTWIyTnpUR2x6ZEM1bWIzSkZZV05vS0hCMWMyaFVjbmxGYm5SeWVTd2dkR2hwY3lrN1hHNGdJQ0FnZEdocGN5NXlaWE5sZENoMGNuVmxLVHRjYmlBZ2ZWeHVYRzRnSUdWNGNHOXlkSE11YTJWNWN5QTlJR1oxYm1OMGFXOXVLRzlpYW1WamRDa2dlMXh1SUNBZ0lIWmhjaUJyWlhseklEMGdXMTA3WEc0Z0lDQWdabTl5SUNoMllYSWdhMlY1SUdsdUlHOWlhbVZqZENrZ2UxeHVJQ0FnSUNBZ2EyVjVjeTV3ZFhOb0tHdGxlU2s3WEc0Z0lDQWdmVnh1SUNBZ0lHdGxlWE11Y21WMlpYSnpaU2dwTzF4dVhHNGdJQ0FnTHk4Z1VtRjBhR1Z5SUhSb1lXNGdjbVYwZFhKdWFXNW5JR0Z1SUc5aWFtVmpkQ0IzYVhSb0lHRWdibVY0ZENCdFpYUm9iMlFzSUhkbElHdGxaWEJjYmlBZ0lDQXZMeUIwYUdsdVozTWdjMmx0Y0d4bElHRnVaQ0J5WlhSMWNtNGdkR2hsSUc1bGVIUWdablZ1WTNScGIyNGdhWFJ6Wld4bUxseHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJ1WlhoMEtDa2dlMXh1SUNBZ0lDQWdkMmhwYkdVZ0tHdGxlWE11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnJaWGtnUFNCclpYbHpMbkJ2Y0NncE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYTJWNUlHbHVJRzlpYW1WamRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUc1bGVIUXVkbUZzZFdVZ1BTQnJaWGs3WEc0Z0lDQWdJQ0FnSUNBZ2JtVjRkQzVrYjI1bElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxlSFE3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdWRzhnWVhadmFXUWdZM0psWVhScGJtY2dZVzRnWVdSa2FYUnBiMjVoYkNCdlltcGxZM1FzSUhkbElHcDFjM1FnYUdGdVp5QjBhR1VnTG5aaGJIVmxYRzRnSUNBZ0lDQXZMeUJoYm1RZ0xtUnZibVVnY0hKdmNHVnlkR2xsY3lCdlptWWdkR2hsSUc1bGVIUWdablZ1WTNScGIyNGdiMkpxWldOMElHbDBjMlZzWmk0Z1ZHaHBjMXh1SUNBZ0lDQWdMeThnWVd4emJ5Qmxibk4xY21WeklIUm9ZWFFnZEdobElHMXBibWxtYVdWeUlIZHBiR3dnYm05MElHRnViMjU1YldsNlpTQjBhR1VnWm5WdVkzUnBiMjR1WEc0Z0lDQWdJQ0J1WlhoMExtUnZibVVnUFNCMGNuVmxPMXh1SUNBZ0lDQWdjbVYwZFhKdUlHNWxlSFE3WEc0Z0lDQWdmVHRjYmlBZ2ZUdGNibHh1SUNCbWRXNWpkR2x2YmlCMllXeDFaWE1vYVhSbGNtRmliR1VwSUh0Y2JpQWdJQ0JwWmlBb2FYUmxjbUZpYkdVcElIdGNiaUFnSUNBZ0lIWmhjaUJwZEdWeVlYUnZjazFsZEdodlpDQTlJR2wwWlhKaFlteGxXMmwwWlhKaGRHOXlVM2x0WW05c1hUdGNiaUFnSUNBZ0lHbG1JQ2hwZEdWeVlYUnZjazFsZEdodlpDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdhWFJsY21GMGIzSk5aWFJvYjJRdVkyRnNiQ2hwZEdWeVlXSnNaU2s3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FYUmxjbUZpYkdVdWJtVjRkQ0E5UFQwZ1hDSm1kVzVqZEdsdmJsd2lLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJwZEdWeVlXSnNaVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tDRnBjMDVoVGlocGRHVnlZV0pzWlM1c1pXNW5kR2dwS1NCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwSUQwZ0xURXNJRzVsZUhRZ1BTQm1kVzVqZEdsdmJpQnVaWGgwS0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSGRvYVd4bElDZ3JLMmtnUENCcGRHVnlZV0pzWlM1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNob1lYTlBkMjR1WTJGc2JDaHBkR1Z5WVdKc1pTd2dhU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WNGRDNTJZV3gxWlNBOUlHbDBaWEpoWW14bFcybGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGgwTG1SdmJtVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGVIUTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2JtVjRkQzUyWVd4MVpTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJQ0FnSUNCdVpYaDBMbVJ2Ym1VZ1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxlSFE3WEc0Z0lDQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxlSFF1Ym1WNGRDQTlJRzVsZUhRN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1VtVjBkWEp1SUdGdUlHbDBaWEpoZEc5eUlIZHBkR2dnYm04Z2RtRnNkV1Z6TGx4dUlDQWdJSEpsZEhWeWJpQjdJRzVsZUhRNklHUnZibVZTWlhOMWJIUWdmVHRjYmlBZ2ZWeHVJQ0JsZUhCdmNuUnpMblpoYkhWbGN5QTlJSFpoYkhWbGN6dGNibHh1SUNCbWRXNWpkR2x2YmlCa2IyNWxVbVZ6ZFd4MEtDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCN0lIWmhiSFZsT2lCMWJtUmxabWx1WldRc0lHUnZibVU2SUhSeWRXVWdmVHRjYmlBZ2ZWeHVYRzRnSUVOdmJuUmxlSFF1Y0hKdmRHOTBlWEJsSUQwZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eU9pQkRiMjUwWlhoMExGeHVYRzRnSUNBZ2NtVnpaWFE2SUdaMWJtTjBhVzl1S0hOcmFYQlVaVzF3VW1WelpYUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdWNISmxkaUE5SURBN1hHNGdJQ0FnSUNCMGFHbHpMbTVsZUhRZ1BTQXdPMXh1SUNBZ0lDQWdMeThnVW1WelpYUjBhVzVuSUdOdmJuUmxlSFF1WDNObGJuUWdabTl5SUd4bFoyRmplU0J6ZFhCd2IzSjBJRzltSUVKaFltVnNKM05jYmlBZ0lDQWdJQzh2SUdaMWJtTjBhVzl1TG5ObGJuUWdhVzF3YkdWdFpXNTBZWFJwYjI0dVhHNGdJQ0FnSUNCMGFHbHpMbk5sYm5RZ1BTQjBhR2x6TGw5elpXNTBJRDBnZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnZEdocGN5NWtiMjVsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0IwYUdsekxtUmxiR1ZuWVhSbElEMGdiblZzYkR0Y2JseHVJQ0FnSUNBZ2RHaHBjeTV0WlhSb2IyUWdQU0JjSW01bGVIUmNJanRjYmlBZ0lDQWdJSFJvYVhNdVlYSm5JRDBnZFc1a1pXWnBibVZrTzF4dVhHNGdJQ0FnSUNCMGFHbHpMblJ5ZVVWdWRISnBaWE11Wm05eVJXRmphQ2h5WlhObGRGUnllVVZ1ZEhKNUtUdGNibHh1SUNBZ0lDQWdhV1lnS0NGemEybHdWR1Z0Y0ZKbGMyVjBLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUc1aGJXVWdhVzRnZEdocGN5a2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklFNXZkQ0J6ZFhKbElHRmliM1YwSUhSb1pTQnZjSFJwYldGc0lHOXlaR1Z5SUc5bUlIUm9aWE5sSUdOdmJtUnBkR2x2Ym5NNlhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0c1aGJXVXVZMmhoY2tGMEtEQXBJRDA5UFNCY0luUmNJaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JvWVhOUGQyNHVZMkZzYkNoMGFHbHpMQ0J1WVcxbEtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWhhWE5PWVU0b0syNWhiV1V1YzJ4cFkyVW9NU2twS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdselcyNWhiV1ZkSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J6ZEc5d09pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVpHOXVaU0E5SUhSeWRXVTdYRzVjYmlBZ0lDQWdJSFpoY2lCeWIyOTBSVzUwY25rZ1BTQjBhR2x6TG5SeWVVVnVkSEpwWlhOYk1GMDdYRzRnSUNBZ0lDQjJZWElnY205dmRGSmxZMjl5WkNBOUlISnZiM1JGYm5SeWVTNWpiMjF3YkdWMGFXOXVPMXh1SUNBZ0lDQWdhV1lnS0hKdmIzUlNaV052Y21RdWRIbHdaU0E5UFQwZ1hDSjBhSEp2ZDF3aUtTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lISnZiM1JTWldOdmNtUXVZWEpuTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NXlkbUZzTzF4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JrYVhOd1lYUmphRVY0WTJWd2RHbHZiam9nWm5WdVkzUnBiMjRvWlhoalpYQjBhVzl1S1NCN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1a2IyNWxLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJR1Y0WTJWd2RHbHZianRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnZG1GeUlHTnZiblJsZUhRZ1BTQjBhR2x6TzF4dUlDQWdJQ0FnWm5WdVkzUnBiMjRnYUdGdVpHeGxLR3h2WXl3Z1kyRjFaMmgwS1NCN1hHNGdJQ0FnSUNBZ0lISmxZMjl5WkM1MGVYQmxJRDBnWENKMGFISnZkMXdpTzF4dUlDQWdJQ0FnSUNCeVpXTnZjbVF1WVhKbklEMGdaWGhqWlhCMGFXOXVPMXh1SUNBZ0lDQWdJQ0JqYjI1MFpYaDBMbTVsZUhRZ1BTQnNiMk03WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR05oZFdkb2RDa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklFbG1JSFJvWlNCa2FYTndZWFJqYUdWa0lHVjRZMlZ3ZEdsdmJpQjNZWE1nWTJGMVoyaDBJR0o1SUdFZ1kyRjBZMmdnWW14dlkyc3NYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2RHaGxiaUJzWlhRZ2RHaGhkQ0JqWVhSamFDQmliRzlqYXlCb1lXNWtiR1VnZEdobElHVjRZMlZ3ZEdsdmJpQnViM0p0WVd4c2VTNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1MFpYaDBMbTFsZEdodlpDQTlJRndpYm1WNGRGd2lPMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuUmxlSFF1WVhKbklEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNFaElHTmhkV2RvZER0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJSFJvYVhNdWRISjVSVzUwY21sbGN5NXNaVzVuZEdnZ0xTQXhPeUJwSUQ0OUlEQTdJQzB0YVNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWlc1MGNua2dQU0IwYUdsekxuUnllVVZ1ZEhKcFpYTmJhVjA3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaV052Y21RZ1BTQmxiblJ5ZVM1amIyMXdiR1YwYVc5dU8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNobGJuUnllUzUwY25sTWIyTWdQVDA5SUZ3aWNtOXZkRndpS1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnUlhoalpYQjBhVzl1SUhSb2NtOTNiaUJ2ZFhSemFXUmxJRzltSUdGdWVTQjBjbmtnWW14dlkyc2dkR2hoZENCamIzVnNaQ0JvWVc1a2JHVmNiaUFnSUNBZ0lDQWdJQ0F2THlCcGRDd2djMjhnYzJWMElIUm9aU0JqYjIxd2JHVjBhVzl1SUhaaGJIVmxJRzltSUhSb1pTQmxiblJwY21VZ1puVnVZM1JwYjI0Z2RHOWNiaUFnSUNBZ0lDQWdJQ0F2THlCMGFISnZkeUIwYUdVZ1pYaGpaWEIwYVc5dUxseHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm9ZVzVrYkdVb1hDSmxibVJjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb1pXNTBjbmt1ZEhKNVRHOWpJRHc5SUhSb2FYTXVjSEpsZGlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoY2lCb1lYTkRZWFJqYUNBOUlHaGhjMDkzYmk1allXeHNLR1Z1ZEhKNUxDQmNJbU5oZEdOb1RHOWpYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJvWVhOR2FXNWhiR3g1SUQwZ2FHRnpUM2R1TG1OaGJHd29aVzUwY25rc0lGd2labWx1WVd4c2VVeHZZMXdpS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNob1lYTkRZWFJqYUNBbUppQm9ZWE5HYVc1aGJHeDVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NXdjbVYySUR3Z1pXNTBjbmt1WTJGMFkyaE1iMk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2hoYm1Sc1pTaGxiblJ5ZVM1allYUmphRXh2WXl3Z2RISjFaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFJvYVhNdWNISmxkaUE4SUdWdWRISjVMbVpwYm1Gc2JIbE1iMk1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR2hoYm1Sc1pTaGxiblJ5ZVM1bWFXNWhiR3g1VEc5aktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYUdGelEyRjBZMmdwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbkJ5WlhZZ1BDQmxiblJ5ZVM1allYUmphRXh2WXlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYUdGdVpHeGxLR1Z1ZEhKNUxtTmhkR05vVEc5akxDQjBjblZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9hR0Z6Um1sdVlXeHNlU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjSEpsZGlBOElHVnVkSEo1TG1acGJtRnNiSGxNYjJNcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdoaGJtUnNaU2hsYm5SeWVTNW1hVzVoYkd4NVRHOWpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSjBjbmtnYzNSaGRHVnRaVzUwSUhkcGRHaHZkWFFnWTJGMFkyZ2diM0lnWm1sdVlXeHNlVndpS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdZV0p5ZFhCME9pQm1kVzVqZEdsdmJpaDBlWEJsTENCaGNtY3BJSHRjYmlBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNCMGFHbHpMblJ5ZVVWdWRISnBaWE11YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F3T3lBdExXa3BJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHVnVkSEo1SUQwZ2RHaHBjeTUwY25sRmJuUnlhV1Z6VzJsZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWlc1MGNua3VkSEo1VEc5aklEdzlJSFJvYVhNdWNISmxkaUFtSmx4dUlDQWdJQ0FnSUNBZ0lDQWdhR0Z6VDNkdUxtTmhiR3dvWlc1MGNua3NJRndpWm1sdVlXeHNlVXh2WTF3aUtTQW1KbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV3Y21WMklEd2daVzUwY25rdVptbHVZV3hzZVV4dll5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGNpQm1hVzVoYkd4NVJXNTBjbmtnUFNCbGJuUnllVHRjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9abWx1WVd4c2VVVnVkSEo1SUNZbVhHNGdJQ0FnSUNBZ0lDQWdLSFI1Y0dVZ1BUMDlJRndpWW5KbFlXdGNJaUI4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQjBlWEJsSUQwOVBTQmNJbU52Ym5ScGJuVmxYQ0lwSUNZbVhHNGdJQ0FnSUNBZ0lDQWdabWx1WVd4c2VVVnVkSEo1TG5SeWVVeHZZeUE4UFNCaGNtY2dKaVpjYmlBZ0lDQWdJQ0FnSUNCaGNtY2dQRDBnWm1sdVlXeHNlVVZ1ZEhKNUxtWnBibUZzYkhsTWIyTXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1NXZHViM0psSUhSb1pTQm1hVzVoYkd4NUlHVnVkSEo1SUdsbUlHTnZiblJ5YjJ3Z2FYTWdibTkwSUdwMWJYQnBibWNnZEc4Z1lWeHVJQ0FnSUNBZ0lDQXZMeUJzYjJOaGRHbHZiaUJ2ZFhSemFXUmxJSFJvWlNCMGNua3ZZMkYwWTJnZ1lteHZZMnN1WEc0Z0lDQWdJQ0FnSUdacGJtRnNiSGxGYm5SeWVTQTlJRzUxYkd3N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIWmhjaUJ5WldOdmNtUWdQU0JtYVc1aGJHeDVSVzUwY25rZ1B5Qm1hVzVoYkd4NVJXNTBjbmt1WTI5dGNHeGxkR2x2YmlBNklIdDlPMXh1SUNBZ0lDQWdjbVZqYjNKa0xuUjVjR1VnUFNCMGVYQmxPMXh1SUNBZ0lDQWdjbVZqYjNKa0xtRnlaeUE5SUdGeVp6dGNibHh1SUNBZ0lDQWdhV1lnS0dacGJtRnNiSGxGYm5SeWVTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtMWxkR2h2WkNBOUlGd2libVY0ZEZ3aU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG01bGVIUWdQU0JtYVc1aGJHeDVSVzUwY25rdVptbHVZV3hzZVV4dll6dGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFTnZiblJwYm5WbFUyVnVkR2x1Wld3N1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbU52YlhCc1pYUmxLSEpsWTI5eVpDazdYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHTnZiWEJzWlhSbE9pQm1kVzVqZEdsdmJpaHlaV052Y21Rc0lHRm1kR1Z5VEc5aktTQjdYRzRnSUNBZ0lDQnBaaUFvY21WamIzSmtMblI1Y0dVZ1BUMDlJRndpZEdoeWIzZGNJaWtnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ5WldOdmNtUXVZWEpuTzF4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9jbVZqYjNKa0xuUjVjR1VnUFQwOUlGd2lZbkpsWVd0Y0lpQjhmRnh1SUNBZ0lDQWdJQ0FnSUhKbFkyOXlaQzUwZVhCbElEMDlQU0JjSW1OdmJuUnBiblZsWENJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1dVpYaDBJRDBnY21WamIzSmtMbUZ5Wnp0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NtVmpiM0prTG5SNWNHVWdQVDA5SUZ3aWNtVjBkWEp1WENJcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1eWRtRnNJRDBnZEdocGN5NWhjbWNnUFNCeVpXTnZjbVF1WVhKbk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG0xbGRHaHZaQ0E5SUZ3aWNtVjBkWEp1WENJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ym1WNGRDQTlJRndpWlc1a1hDSTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEpsWTI5eVpDNTBlWEJsSUQwOVBTQmNJbTV2Y20xaGJGd2lJQ1ltSUdGbWRHVnlURzlqS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ym1WNGRDQTlJR0ZtZEdWeVRHOWpPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0J5WlhSMWNtNGdRMjl1ZEdsdWRXVlRaVzUwYVc1bGJEdGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1ptbHVhWE5vT2lCbWRXNWpkR2x2YmlobWFXNWhiR3g1VEc5aktTQjdYRzRnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnZEdocGN5NTBjbmxGYm5SeWFXVnpMbXhsYm1kMGFDQXRJREU3SUdrZ1BqMGdNRHNnTFMxcEtTQjdYRzRnSUNBZ0lDQWdJSFpoY2lCbGJuUnllU0E5SUhSb2FYTXVkSEo1Ulc1MGNtbGxjMXRwWFR0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Z1ZEhKNUxtWnBibUZzYkhsTWIyTWdQVDA5SUdacGJtRnNiSGxNYjJNcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtTnZiWEJzWlhSbEtHVnVkSEo1TG1OdmJYQnNaWFJwYjI0c0lHVnVkSEo1TG1GbWRHVnlURzlqS1R0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE5sZEZSeWVVVnVkSEo1S0dWdWRISjVLVHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnUTI5dWRHbHVkV1ZUWlc1MGFXNWxiRHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0JjSW1OaGRHTm9YQ0k2SUdaMWJtTjBhVzl1S0hSeWVVeHZZeWtnZTF4dUlDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlIUm9hWE11ZEhKNVJXNTBjbWxsY3k1c1pXNW5kR2dnTFNBeE95QnBJRDQ5SURBN0lDMHRhU2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdaVzUwY25rZ1BTQjBhR2x6TG5SeWVVVnVkSEpwWlhOYmFWMDdYRzRnSUNBZ0lDQWdJR2xtSUNobGJuUnllUzUwY25sTWIyTWdQVDA5SUhSeWVVeHZZeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhjaUJ5WldOdmNtUWdQU0JsYm5SeWVTNWpiMjF3YkdWMGFXOXVPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHlaV052Y21RdWRIbHdaU0E5UFQwZ1hDSjBhSEp2ZDF3aUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkR2h5YjNkdUlEMGdjbVZqYjNKa0xtRnlaenRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMlYwVkhKNVJXNTBjbmtvWlc1MGNua3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHliM2R1TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDOHZJRlJvWlNCamIyNTBaWGgwTG1OaGRHTm9JRzFsZEdodlpDQnRkWE4wSUc5dWJIa2dZbVVnWTJGc2JHVmtJSGRwZEdnZ1lTQnNiMk5oZEdsdmJseHVJQ0FnSUNBZ0x5OGdZWEpuZFcxbGJuUWdkR2hoZENCamIzSnlaWE53YjI1a2N5QjBieUJoSUd0dWIzZHVJR05oZEdOb0lHSnNiMk5yTGx4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRndpYVd4c1pXZGhiQ0JqWVhSamFDQmhkSFJsYlhCMFhDSXBPMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmtaV3hsWjJGMFpWbHBaV3hrT2lCbWRXNWpkR2x2YmlocGRHVnlZV0pzWlN3Z2NtVnpkV3gwVG1GdFpTd2dibVY0ZEV4dll5a2dlMXh1SUNBZ0lDQWdkR2hwY3k1a1pXeGxaMkYwWlNBOUlIdGNiaUFnSUNBZ0lDQWdhWFJsY21GMGIzSTZJSFpoYkhWbGN5aHBkR1Z5WVdKc1pTa3NYRzRnSUNBZ0lDQWdJSEpsYzNWc2RFNWhiV1U2SUhKbGMzVnNkRTVoYldVc1hHNGdJQ0FnSUNBZ0lHNWxlSFJNYjJNNklHNWxlSFJNYjJOY2JpQWdJQ0FnSUgwN1hHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtMWxkR2h2WkNBOVBUMGdYQ0p1WlhoMFhDSXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1JHVnNhV0psY21GMFpXeDVJR1p2Y21kbGRDQjBhR1VnYkdGemRDQnpaVzUwSUhaaGJIVmxJSE52SUhSb1lYUWdkMlVnWkc5dUozUmNiaUFnSUNBZ0lDQWdMeThnWVdOamFXUmxiblJoYkd4NUlIQmhjM01nYVhRZ2IyNGdkRzhnZEdobElHUmxiR1ZuWVhSbExseHVJQ0FnSUNBZ0lDQjBhR2x6TG1GeVp5QTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnY21WMGRYSnVJRU52Ym5ScGJuVmxVMlZ1ZEdsdVpXdzdYRzRnSUNBZ2ZWeHVJQ0I5TzF4dVhHNGdJQzh2SUZKbFoyRnlaR3hsYzNNZ2IyWWdkMmhsZEdobGNpQjBhR2x6SUhOamNtbHdkQ0JwY3lCbGVHVmpkWFJwYm1jZ1lYTWdZU0JEYjIxdGIyNUtVeUJ0YjJSMWJHVmNiaUFnTHk4Z2IzSWdibTkwTENCeVpYUjFjbTRnZEdobElISjFiblJwYldVZ2IySnFaV04wSUhOdklIUm9ZWFFnZDJVZ1kyRnVJR1JsWTJ4aGNtVWdkR2hsSUhaaGNtbGhZbXhsWEc0Z0lDOHZJSEpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaU0JwYmlCMGFHVWdiM1YwWlhJZ2MyTnZjR1VzSUhkb2FXTm9JR0ZzYkc5M2N5QjBhR2x6SUcxdlpIVnNaU0IwYnlCaVpWeHVJQ0F2THlCcGJtcGxZM1JsWkNCbFlYTnBiSGtnWW5rZ1lHSnBiaTl5WldkbGJtVnlZWFJ2Y2lBdExXbHVZMngxWkdVdGNuVnVkR2x0WlNCelkzSnBjSFF1YW5OZ0xseHVJQ0J5WlhSMWNtNGdaWGh3YjNKMGN6dGNibHh1ZlNoY2JpQWdMeThnU1dZZ2RHaHBjeUJ6WTNKcGNIUWdhWE1nWlhobFkzVjBhVzVuSUdGeklHRWdRMjl0Ylc5dVNsTWdiVzlrZFd4bExDQjFjMlVnYlc5a2RXeGxMbVY0Y0c5eWRITmNiaUFnTHk4Z1lYTWdkR2hsSUhKbFoyVnVaWEpoZEc5eVVuVnVkR2x0WlNCdVlXMWxjM0JoWTJVdUlFOTBhR1Z5ZDJselpTQmpjbVZoZEdVZ1lTQnVaWGNnWlcxd2RIbGNiaUFnTHk4Z2IySnFaV04wTGlCRmFYUm9aWElnZDJGNUxDQjBhR1VnY21WemRXeDBhVzVuSUc5aWFtVmpkQ0IzYVd4c0lHSmxJSFZ6WldRZ2RHOGdhVzVwZEdsaGJHbDZaVnh1SUNBdkx5QjBhR1VnY21WblpXNWxjbUYwYjNKU2RXNTBhVzFsSUhaaGNtbGhZbXhsSUdGMElIUm9aU0IwYjNBZ2IyWWdkR2hwY3lCbWFXeGxMbHh1SUNCMGVYQmxiMllnYlc5a2RXeGxJRDA5UFNCY0ltOWlhbVZqZEZ3aUlEOGdiVzlrZFd4bExtVjRjRzl5ZEhNZ09pQjdmVnh1S1NrN1hHNWNiblJ5ZVNCN1hHNGdJSEpsWjJWdVpYSmhkRzl5VW5WdWRHbHRaU0E5SUhKMWJuUnBiV1U3WEc1OUlHTmhkR05vSUNoaFkyTnBaR1Z1ZEdGc1UzUnlhV04wVFc5a1pTa2dlMXh1SUNBdkx5QlVhR2x6SUcxdlpIVnNaU0J6YUc5MWJHUWdibTkwSUdKbElISjFibTVwYm1jZ2FXNGdjM1J5YVdOMElHMXZaR1VzSUhOdklIUm9aU0JoWW05MlpWeHVJQ0F2THlCaGMzTnBaMjV0Wlc1MElITm9iM1ZzWkNCaGJIZGhlWE1nZDI5eWF5QjFibXhsYzNNZ2MyOXRaWFJvYVc1bklHbHpJRzFwYzJOdmJtWnBaM1Z5WldRdUlFcDFjM1JjYmlBZ0x5OGdhVzRnWTJGelpTQnlkVzUwYVcxbExtcHpJR0ZqWTJsa1pXNTBZV3hzZVNCeWRXNXpJR2x1SUhOMGNtbGpkQ0J0YjJSbExDQjNaU0JqWVc0Z1pYTmpZWEJsWEc0Z0lDOHZJSE4wY21samRDQnRiMlJsSUhWemFXNW5JR0VnWjJ4dlltRnNJRVoxYm1OMGFXOXVJR05oYkd3dUlGUm9hWE1nWTI5MWJHUWdZMjl1WTJWcGRtRmliSGtnWm1GcGJGeHVJQ0F2THlCcFppQmhJRU52Ym5SbGJuUWdVMlZqZFhKcGRIa2dVRzlzYVdONUlHWnZjbUpwWkhNZ2RYTnBibWNnUm5WdVkzUnBiMjRzSUdKMWRDQnBiaUIwYUdGMElHTmhjMlZjYmlBZ0x5OGdkR2hsSUhCeWIzQmxjaUJ6YjJ4MWRHbHZiaUJwY3lCMGJ5Qm1hWGdnZEdobElHRmpZMmxrWlc1MFlXd2djM1J5YVdOMElHMXZaR1VnY0hKdllteGxiUzRnU1daY2JpQWdMeThnZVc5MUozWmxJRzFwYzJOdmJtWnBaM1Z5WldRZ2VXOTFjaUJpZFc1a2JHVnlJSFJ2SUdadmNtTmxJSE4wY21samRDQnRiMlJsSUdGdVpDQmhjSEJzYVdWa0lHRmNiaUFnTHk4Z1ExTlFJSFJ2SUdadmNtSnBaQ0JHZFc1amRHbHZiaXdnWVc1a0lIbHZkU2R5WlNCdWIzUWdkMmxzYkdsdVp5QjBieUJtYVhnZ1pXbDBhR1Z5SUc5bUlIUm9iM05sWEc0Z0lDOHZJSEJ5YjJKc1pXMXpMQ0J3YkdWaGMyVWdaR1YwWVdsc0lIbHZkWElnZFc1cGNYVmxJSEJ5WldScFkyRnRaVzUwSUdsdUlHRWdSMmwwU0hWaUlHbHpjM1ZsTGx4dUlDQkdkVzVqZEdsdmJpaGNJbkpjSWl3Z1hDSnlaV2RsYm1WeVlYUnZjbEoxYm5ScGJXVWdQU0J5WENJcEtISjFiblJwYldVcE8xeHVmVnh1SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlodGIyUjFiR1VwSUh0Y2JseDBhV1lnS0NGdGIyUjFiR1V1ZDJWaWNHRmphMUJ2YkhsbWFXeHNLU0I3WEc1Y2RGeDBiVzlrZFd4bExtUmxjSEpsWTJGMFpTQTlJR1oxYm1OMGFXOXVLQ2tnZTMwN1hHNWNkRngwYlc5a2RXeGxMbkJoZEdoeklEMGdXMTA3WEc1Y2RGeDBMeThnYlc5a2RXeGxMbkJoY21WdWRDQTlJSFZ1WkdWbWFXNWxaQ0JpZVNCa1pXWmhkV3gwWEc1Y2RGeDBhV1lnS0NGdGIyUjFiR1V1WTJocGJHUnlaVzRwSUcxdlpIVnNaUzVqYUdsc1pISmxiaUE5SUZ0ZE8xeHVYSFJjZEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaHRiMlIxYkdVc0lGd2liRzloWkdWa1hDSXNJSHRjYmx4MFhIUmNkR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzVjZEZ4MFhIUm5aWFE2SUdaMWJtTjBhVzl1S0NrZ2UxeHVYSFJjZEZ4MFhIUnlaWFIxY200Z2JXOWtkV3hsTG13N1hHNWNkRngwWEhSOVhHNWNkRngwZlNrN1hHNWNkRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHMXZaSFZzWlN3Z1hDSnBaRndpTENCN1hHNWNkRngwWEhSbGJuVnRaWEpoWW14bE9pQjBjblZsTEZ4dVhIUmNkRngwWjJWME9pQm1kVzVqZEdsdmJpZ3BJSHRjYmx4MFhIUmNkRngwY21WMGRYSnVJRzF2WkhWc1pTNXBPMXh1WEhSY2RGeDBmVnh1WEhSY2RIMHBPMXh1WEhSY2RHMXZaSFZzWlM1M1pXSndZV05yVUc5c2VXWnBiR3dnUFNBeE8xeHVYSFI5WEc1Y2RISmxkSFZ5YmlCdGIyUjFiR1U3WEc1OU8xeHVJaXdpYVcxd2IzSjBJSHROWlhOellXZGxMQ0JGZG1WdWRITXNJRk4xWTJObGMzTlRkR0YwWlgwZ1puSnZiU0FuTGk5TlpYTnpZV2RsY3ljN1hHNXBiWEJ2Y25RZ2UxTndhVU52Ym1acFp5d2dWSEpoYm5OaFkzUnBiMjVQY0hScGIyNXpmU0JtY205dElDY3VMMU53YVUxdlpHVnNjeWM3WEc1cGJYQnZjblFnZTFKbGNYVmxjM1JKWkVobGJIQmxjbjBnWm5KdmJTQW5MaTlTWlhGMVpYTjBTV1JJWld4d1pYSW5PMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdRMkZ6YUc5MWRFOXViSGxTWlhGMVpYTjBYRzU3SUNCY2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loaGJXOTFiblJEWlc1MGN5d2djRzl6VW1WbVNXUXBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGxCdmMxSmxaa2xrSUQwZ2NHOXpVbVZtU1dRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTJGemFHOTFkRUZ0YjNWdWRDQTlJR0Z0YjNWdWRFTmxiblJ6TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11VTNWeVkyaGhjbWRsUVcxdmRXNTBJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNW1hV2NnUFNCdVpYY2dVM0JwUTI5dVptbG5LQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVUM0IwYVc5dWN5QTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrOXdkR2x2Ym5Nb0tUdGNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdWRzlOWlhOellXZGxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCa1lYUmhJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p3YjNOZmNtVm1YMmxrWENJNklIUm9hWE11VUc5elVtVm1TV1FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbU5oYzJoZllXMXZkVzUwWENJNklIUm9hWE11UTJGemFHOTFkRUZ0YjNWdWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWMzVnlZMmhoY21kbFgyRnRiM1Z1ZEZ3aU9pQjBhR2x6TGxOMWNtTm9ZWEpuWlVGdGIzVnVkRnh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlFjbWx1ZEUxbGNtTm9ZVzUwUTI5d2VTQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlFjbTl0Y0hSR2IzSkRkWE4wYjIxbGNrTnZjSGxQYmtWbWRIQnZjeUE5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JUYVdkdVlYUjFjbVZHYkc5M1QyNUZablJ3YjNNZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5NUJaR1JTWldObGFYQjBRMjl1Wm1sbktHUmhkR0VwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMazl3ZEdsdmJuTXVRV1JrVDNCMGFXOXVjeWhrWVhSaEtUdGNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUUxbGMzTmhaMlVvVW1WeGRXVnpkRWxrU0dWc2NHVnlMa2xrS0Z3aVkzTm9iM1YwWENJcExDQkZkbVZ1ZEhNdVEyRnphRzkxZEU5dWJIbFNaWEYxWlhOMExDQmtZWFJoTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJEWVhOb2IzVjBUMjVzZVZKbGMzQnZibk5sWEc1N1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDIwZ1BTQnRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsSmxjWFZsYzNSSlpDQTlJRzB1U1dRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUc5elVtVm1TV1FnUFNCdExrUmhkR0V1Y0c5elgzSmxabDlwWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVUWTJobGJXVk9ZVzFsSUQwZ2JTNUVZWFJoTG5OamFHVnRaVjl1WVcxbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxOMVkyTmxjM01nUFNCdExrZGxkRk4xWTJObGMzTlRkR0YwWlNncElEMDlJRk4xWTJObGMzTlRkR0YwWlM1VGRXTmpaWE56TzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEZKU1RpZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhXMXdpY25KdVhDSmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRU5oYzJodmRYUkJiVzkxYm5Rb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlWdGNJbU5oYzJoZllXMXZkVzUwWENKZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRFSmhibXRPYjI1RFlYTm9RVzF2ZFc1MEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRmJYQ0ppWVc1clgyNXZibU5oYzJoZllXMXZkVzUwWENKZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRFSmhibXREWVhOb1FXMXZkVzUwS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdGYlhDSmlZVzVyWDJOaGMyaGZZVzF2ZFc1MFhDSmRPMXh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0JIWlhSRGRYTjBiMjFsY2xKbFkyVnBjSFFvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVZ0Y0ltTjFjM1J2YldWeVgzSmxZMlZwY0hSY0lsMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBUV1Z5WTJoaGJuUlNaV05sYVhCMEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRmJYQ0p0WlhKamFHRnVkRjl5WldObGFYQjBYQ0pkTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNCSFpYUlNaWE53YjI1elpWUmxlSFFvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVZ0Y0ltaHZjM1JmY21WemNHOXVjMlZmZEdWNGRGd2lYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJTWlhOd2IyNXpaVU52WkdVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlWdGNJbWh2YzNSZmNtVnpjRzl1YzJWZlkyOWtaVndpWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1IyVjBWR1Z5YldsdVlXeFNaV1psY21WdVkyVkpaQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoVzF3aWRHVnliV2x1WVd4ZmNtVm1YMmxrWENKZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRFRmpZMjkxYm5SVWVYQmxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWENKaFkyTnZkVzUwWDNSNWNHVmNJbDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwUVhWMGFFTnZaR1VvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVZ0Y0ltRjFkR2hmWTI5a1pWd2lYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJDWVc1clJHRjBaU2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoVzF3aVltRnVhMTlrWVhSbFhDSmRPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRUpoYm10VWFXMWxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWENKaVlXNXJYM1JwYldWY0lsMDdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRWRsZEUxaGMydGxaRkJoYmlncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaFcxd2liV0Z6YTJWa1gzQmhibHdpWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1IyVjBWR1Z5YldsdVlXeEpaQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoVzF3aWRHVnliV2x1WVd4ZmFXUmNJbDA3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdWMkZ6VFdWeVkyaGhiblJTWldObGFYQjBVSEpwYm5SbFpDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhXMXdpYldWeVkyaGhiblJmY21WalpXbHdkRjl3Y21sdWRHVmtYQ0pkTzF4dUlDQWdJSDFjYmx4dUlDQWdJRmRoYzBOMWMzUnZiV1Z5VW1WalpXbHdkRkJ5YVc1MFpXUW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZVnRjSW1OMWMzUnZiV1Z5WDNKbFkyVnBjSFJmY0hKcGJuUmxaRndpWFR0Y2JpQWdJQ0I5WEc0Z0lDQWdYRzRnSUNBZ1IyVjBVM1Z5WTJoaGNtZGxRVzF2ZFc1MEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRmJYQ0p6ZFhKamFHRnlaMlZmWVcxdmRXNTBYQ0pkTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEZKbGMzQnZibk5sVm1Gc2RXVW9ZWFIwY21saWRYUmxLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZVnRoZEhSeWFXSjFkR1ZkTzF4dUlDQWdJSDFjYmx4dWZTSXNJbVY0Y0c5eWRDQmpiMjV6ZENCRGIyNXVaV04wYVc5dVUzUmhkR1VnUFNCN1hHNGdJQ0FnUkdselkyOXVibVZqZEdWa09pQW5SR2x6WTI5dWJtVmpkR1ZrSnl4Y2JpQWdJQ0JEYjI1dVpXTjBhVzVuT2lBblEyOXVibVZqZEdsdVp5Y3NYRzRnSUNBZ1EyOXVibVZqZEdWa09pQW5RMjl1Ym1WamRHVmtKMXh1ZlR0Y2JseHVaWGh3YjNKMElHTnZibk4wSUZOUVNWOVFVazlVVDBOUFRDQWdJRDBnSjNOd2FTNHlMall1TUNjN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCRGIyNXVaV04wYVc5dVUzUmhkR1ZGZG1WdWRFRnlaM05jYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loamIyNXVaV04wYVc5dVUzUmhkR1VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1dVpXTjBhVzl1VTNSaGRHVWdQU0JqYjI1dVpXTjBhVzl1VTNSaGRHVTdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdUV1Z6YzJGblpVVjJaVzUwUVhKbmMxeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NU5aWE56WVdkbElEMGdiV1Z6YzJGblpUdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QkRiMjV1WldOMGFXOXVJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVCWkdSeVpYTnpJQ0FnSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjV1WldOMFpXUWdJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVUzUmhkR1VnSUNBZ0lDQTlJRU52Ym01bFkzUnBiMjVUZEdGMFpTNUVhWE5qYjI1dVpXTjBaV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVM0JwVUhKdmRHOWpiMndnUFNCVFVFbGZVRkpQVkU5RFQwdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzZHpJQ0FnSUNBZ0lDQTlJRzUxYkd3N1hHNWNiaUFnSUNBZ0lDQWdhV1lvZEhsd1pXOW1JRmRsWWxOdlkydGxkQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblJXNTJhWEp2Ym0xbGJuUWdaRzlsY3lCdWIzUWdjM1Z3Y0c5eWRDQlhaV0pUYjJOclpYUnpKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JEYjI1dVpXTjBLRlZ6WlZObFkzVnlaVmRsWWxOdlkydGxkSE1wSUh0Y2JpQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1VGRHRjBaU0E5UFQwZ1EyOXVibVZqZEdsdmJsTjBZWFJsTGtOdmJtNWxZM1JsWkNCOGZDQjBhR2x6TGxOMFlYUmxJRDA5UFNCRGIyNXVaV04wYVc5dVUzUmhkR1V1UTI5dWJtVmpkR2x1WnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1lXeHlaV0ZrZVNCamIyNXVaV04wWldRZ2IzSWdZMjl1Ym1WamRHbHVaeTRnWkdselkyOXVibVZqZENCbWFYSnpkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVUzUmhkR1VnUFNCRGIyNXVaV04wYVc5dVUzUmhkR1V1UTI5dWJtVmpkR2x1Wnp0Y2JseHVJQ0FnSUNBZ0lDQXZMME55WldGMFpTQmhJRzVsZHlCemIyTnJaWFFnYVc1emRHRnVZMlVnYzNCbFkybG1lV2x1WnlCMGFHVWdkWEpzTENCVFVFa2djSEp2ZEc5amIyd2dZVzVrSUZkbFluTnZZMnRsZENCMGJ5QjFjMlV1WEc0Z0lDQWdJQ0FnSUM4dlZHaGxJSGRwYkd3Z1kzSmxZWFJsSUdFZ1ZFTlFMMGxRSUhOdlkydGxkQ0JqYjI1dVpXTjBhVzl1SUhSdklIUm9aU0J3Y205MmFXUmxaQ0JWVWt3Z1lXNWtJSEJsY21admNtMGdTRlJVVUNCM1pXSnpiMk5yWlhRZ2JtVm5iM1JwWVhScGIyNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmQzTWdJQ0FnSUNBZ0lDQWdJRDBnYm1WM0lGZGxZbE52WTJ0bGRDaDBhR2x6TGtGa1pISmxjM01zSUhSb2FYTXVVM0JwVUhKdmRHOWpiMndwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkzY3k1dmJtOXdaVzRnSUNBZ1BTQW9LU0E5UGlCMGFHbHpMbkJ2Ykd4WFpXSlRiMk5yWlhSRGIyNXVaV04wYVc5dUtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzZHpMbTl1YldWemMyRm5aU0E5SUNod1lYbHNiMkZrS1NBOVBpQjBhR2x6TG05dVRXVnpjMkZuWlZKbFkyVnBkbVZrS0hCaGVXeHZZV1FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDkzY3k1dmJtTnNiM05sSUNBZ1BTQW9LU0E5UGlCMGFHbHpMbTl1UTJ4dmMyVmtLQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM2R6TG05dVpYSnliM0lnSUNBOUlDaGxjbklwSUQwK0lIUm9hWE11YjI1RmNuSnZjaWhsY25JcE8xeHVYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NkRGIyNXVaV04wYVc5dVUzUmhkSFZ6UTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUc1bGR5QkRiMjV1WldOMGFXOXVVM1JoZEdWRmRtVnVkRUZ5WjNNb1EyOXVibVZqZEdsdmJsTjBZWFJsTGtOdmJtNWxZM1JwYm1jcGZTa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFUnBjMk52Ym01bFkzUW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGxOMFlYUmxJRDA5SUVOdmJtNWxZM1JwYjI1VGRHRjBaUzVFYVhOamIyNXVaV04wWldRcElISmxkSFZ5Ymp0Y2JseHVJQ0FnSUNBZ0lDQnBaaWgwYUdsekxsOTNjeUFtSmlCMGFHbHpMbDkzY3k1eVpXRmtlVk4wWVhSbElDRTlJSFJvYVhNdVgzZHpMa05NVDFORlJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZDNNdVkyeHZjMlVvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDkzY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkM011YjI1dmNHVnVJQ0FnSUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNkekxtOXViV1Z6YzJGblpTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOTNjeTV2Ym1Oc2IzTmxJQ0FnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmZDNNdWIyNWxjbkp2Y2lBZ0lEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdWIyNURiRzl6WldRb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCVFpXNWtLRzFsYzNOaFoyVXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkM011YzJWdVpDaHRaWE56WVdkbEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCdmJrOXdaVzVsWkNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VGRHRjBaU0E5SUVOdmJtNWxZM1JwYjI1VGRHRjBaUzVEYjI1dVpXTjBaV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Ym1WamRHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjBOdmJtNWxZM1JwYjI1VGRHRjBkWE5EYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nYm1WM0lFTnZibTVsWTNScGIyNVRkR0YwWlVWMlpXNTBRWEpuY3loRGIyNXVaV04wYVc5dVUzUmhkR1V1UTI5dWJtVmpkR1ZrS1gwcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCdmJrTnNiM05sWkNncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNXVaV04wWldRZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVUZEdGMFpTQTlJRU52Ym01bFkzUnBiMjVUZEdGMFpTNUVhWE5qYjI1dVpXTjBaV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM2R6SUQwZ2JuVnNiRHRjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0owTnZibTVsWTNScGIyNVRkR0YwZFhORGFHRnVaMlZrSnl3Z2UyUmxkR0ZwYkRvZ2JtVjNJRU52Ym01bFkzUnBiMjVUZEdGMFpVVjJaVzUwUVhKbmN5aERiMjV1WldOMGFXOXVVM1JoZEdVdVJHbHpZMjl1Ym1WamRHVmtLWDBwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J3YjJ4c1YyVmlVMjlqYTJWMFEyOXVibVZqZEdsdmJpaGpiM1Z1ZENBOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZHbHRaVzkxZENCMGNubHBibWNnZEc4Z1kyOXVibVZqZENCaFpuUmxjaUF5TUNBcUlESXdNRzF6SUQwZ05EQXdNQ0J0YzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1ZmQzTXVjbVZoWkhsVGRHRjBaU0E5UFQwZ2RHaHBjeTVmZDNNdVQxQkZUaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1dmJrOXdaVzVsWkNncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppaGpiM1Z1ZENBOElESXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiM1Z1ZENzck8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUIwYUdsekxuQnZiR3hYWldKVGIyTnJaWFJEYjI1dVpXTjBhVzl1S0dOdmRXNTBLU3dnTWpBd0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVSR2x6WTI5dWJtVmpkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYjI1TlpYTnpZV2RsVW1WalpXbDJaV1FvYldWemMyRm5aU2tnZTF4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25UV1Z6YzJGblpWSmxZMlZwZG1Wa0p5d2dlMlJsZEdGcGJEb2dibVYzSUUxbGMzTmhaMlZGZG1WdWRFRnlaM01vYldWemMyRm5aUzVrWVhSaEtYMHBLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnZia1Z5Y205eUtHVnljaWtnZTF4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25SWEp5YjNKU1pXTmxhWFpsWkNjc0lIdGtaWFJoYVd3NklHNWxkeUJOWlhOellXZGxSWFpsYm5SQmNtZHpLR1Z5Y2lsOUtTazdYRzRnSUNBZ2ZWeHVmVnh1SWl3aWFXMXdiM0owSUdwelUwaEJJR1p5YjIwZ0oycHpjMmhoSnp0Y2JtbHRjRzl5ZENCaFpYTnFjeUJtY205dElDZGhaWE10YW5Nbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1EzSjVjSFJ2SUh0Y2JpQWdJQ0JjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JseHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklFVnVZM0o1Y0hRZ1lTQmliRzlqYXlCMWMybHVaeUJEUWtNZ1lXNWtJRkJMUTFNM0xseHVJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW10bGVWd2lQbFJvWlNCclpYa2dkbUZzZFdVOEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2laR0YwWVZ3aVBsUm9aU0J0WlhOellXZGxJSFJ2SUdWdVkzSjVjSFE4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh5WlhSMWNtNXpQbEpsZEhWeWJuTWdkR2hsSUhKbGMzVnNkR2x1WnlCbGJtTnllWEIwWldRZ2MzUnlhVzVuSUdSaGRHRWdZWE1nU0VWWUxqd3ZjbVYwZFhKdWN6NWNiaUFnSUNCemRHRjBhV01nUVdWelJXNWpjbmx3ZENBb2EyVjVMQ0JrWVhSaEtTQjdYRzRnSUNBZ0lDQWdJR3hsZENCaWVYUmxjeUE5SUdGbGMycHpMblYwYVd4ekxtaGxlQzUwYjBKNWRHVnpLR3RsZVNrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdsMklEMGdXekI0TURBc0lEQjRNREFzSURCNE1EQXNJREI0TURBc0lEQjRNREFzSURCNE1EQXNJREI0TURBc0lEQjRNREFzSURCNE1EQXNJREI0TURBc0lEQjRNREFzSURCNE1EQXNJREI0TURBc0lEQjRNREFzSURCNE1EQXNJREI0TURBZ1hUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHVjRkRUo1ZEdWeklEMGdZV1Z6YW5NdWNHRmtaR2x1Wnk1d2EyTnpOeTV3WVdRb1lXVnphbk11ZFhScGJITXVkWFJtT0M1MGIwSjVkR1Z6S0dSaGRHRXBLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZV1Z6UTJKaklEMGdibVYzSUdGbGMycHpMazF2WkdWUFprOXdaWEpoZEdsdmJpNWpZbU1vWW5sMFpYTXNJR2wyS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWlc1amNubHdkR1ZrUW5sMFpYTWdQU0JoWlhORFltTXVaVzVqY25sd2RDaDBaWGgwUW5sMFpYTXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxibU55ZVhCMFpXUlRkSEpwYm1jZ1BTQmhaWE5xY3k1MWRHbHNjeTVvWlhndVpuSnZiVUo1ZEdWektHVnVZM0o1Y0hSbFpFSjVkR1Z6S1R0Y2JseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXNWpjbmx3ZEdWa1UzUnlhVzVuTzF4dUlDQWdJSDFjYmlBZ0lDQmNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QkVaV055ZVhCMElHRWdZbXh2WTJzZ2RYTnBibWNnWVNCRFFrTWdZVzVrSUZCTFExTTNMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltdGxlVndpUGxSb1pTQnJaWGtnZG1Gc2RXVThMM0JoY21GdFBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpWkdGMFlWd2lQblJvWlNCa1lYUmhJSFJ2SUdSbFkzSjVjSFE4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh5WlhSMWNtNXpQbEpsZEhWeWJuTWdkR2hsSUhKbGMzVnNkR2x1WnlCa1lYUmhJR1JsWTNKNWNIUmxaQ0JwYmlCd2JHRnBiblJsZUhRdVBDOXlaWFIxY201elBseHVJQ0FnSUhOMFlYUnBZeUJCWlhORVpXTnllWEIwS0d0bGVTd2daR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWW5sMFpYTWdQU0JoWlhOcWN5NTFkR2xzY3k1b1pYZ3VkRzlDZVhSbGN5aHJaWGtwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JwZGlBOUlGc3dlREF3TENBd2VEQXdMQ0F3ZURBd0xDQXdlREF3TENBd2VEQXdMQ0F3ZURBd0xDQXdlREF3TENBd2VEQXdMQ0F3ZURBd0xDQXdlREF3TENBd2VEQXdMQ0F3ZURBd0xDQXdlREF3TENBd2VEQXdMQ0F3ZURBd0xDQXdlREF3SUYwN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWdVkzSjVjSFJsWkVKNWRHVnpJRDBnWVdWemFuTXVkWFJwYkhNdWFHVjRMblJ2UW5sMFpYTW9aR0YwWVNrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdGbGMwTmlZeUE5SUc1bGR5QmhaWE5xY3k1TmIyUmxUMlpQY0dWeVlYUnBiMjR1WTJKaktHSjVkR1Z6TENCcGRpazdYRzRnSUNBZ0lDQWdJR052Ym5OMElHUmxZM0o1Y0hSbFpFSjVkR1Z6SUQwZ1lXVnpRMkpqTG1SbFkzSjVjSFFvWlc1amNubHdkR1ZrUW5sMFpYTXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmtaV055ZVhCMFpXUWdQU0JoWlhOcWN5NTFkR2xzY3k1MWRHWTRMbVp5YjIxQ2VYUmxjeWhoWlhOcWN5NXdZV1JrYVc1bkxuQnJZM00zTG5OMGNtbHdLR1JsWTNKNWNIUmxaRUo1ZEdWektTazdYRzRnSUNBZ1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCa1pXTnllWEIwWldRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1EyRnNZM1ZzWVhSbGN5QjBhR1VnU0UxQlExTklRVEkxTmlCemFXZHVZWFIxY21VZ2IyWWdZU0J0WlhOellXZGxMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltdGxlVndpUGxSb1pTQkliV0ZqSUV0bGVTQmhjeUJJUlZnOEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2liV1Z6YzJGblpWUnZVMmxuYmx3aVBsUm9aU0J0WlhOellXZGxJSFJ2SUhOcFoyNDhMM0JoY21GdFBseHVJQ0FnSUM4dklEeHlaWFIxY201elBsUm9aU0JJVFVGRFUwaEJNalUySUhOcFoyNWhkSFZ5WlNCaGN5QmhJR2hsZUNCemRISnBibWM4TDNKbGRIVnlibk0rWEc0Z0lDQWdjM1JoZEdsaklFaHRZV05UYVdkdVlYUjFjbVVvYTJWNUxDQnRaWE56WVdkbFZHOVRhV2R1S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J6YUdGUFltb2dQU0J1WlhjZ2FuTlRTRUVvWENKVFNFRXRNalUyWENJc0lGd2lWRVZZVkZ3aUtUdGNibHh1SUNBZ0lDQWdJQ0J6YUdGUFltb3VjMlYwU0UxQlEwdGxlU2hyWlhrc0owaEZXQ2NwTzF4dUlDQWdJQ0FnSUNCemFHRlBZbW91ZFhCa1lYUmxLRzFsYzNOaFoyVlViMU5wWjI0cE8xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlITm9ZVTlpYWk1blpYUklUVUZES0Z3aVNFVllYQ0lwTzF4dUlDQWdJSDFjYmx4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaHBjeUIxZEdsc2FYUjVJR1oxYm1OMGFXOXVJR05oYkdOMWJHRjBaWE1nZEdobElGTklRUzB5TlRZZ2RtRnNkV1VnYVc0Z2FHVjRZV1JsWTJsdFlXd2dabTl5YldGMFhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUhaaGJIVmxJSFJvWlNCMllXeDFaU0IwYnlCaVpTQm9ZWE5vWldSY2JpQWdJQ0FnS2k5Y2JpQWdJQ0J6ZEdGMGFXTWdSMlZ1WlhKaGRHVklZWE5vS0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnphR0ZQWW1vZ1BTQnVaWGNnYW5OVFNFRW9KMU5JUVMweU5UWW5MQ0FuU0VWWUp5azdYRzRnSUNBZ0lDQWdJSE5vWVU5aWFpNTFjR1JoZEdVb2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6YUdGSVlYTm9JRDBnYzJoaFQySnFMbWRsZEVoaGMyZ29KMGhGV0NjcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyaGhTR0Z6YUR0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdRazRnWm5KdmJTQW5ZbTR1YW5Nbk8xeHVYRzR2THlCVWFHbHpJR055WldGMFpYTWdkR2hsSUhCeWFYWmhkR1VnWVc1a0lIQjFZbXhwWXlCclpYbHpJR1p2Y2lCa2FXWm1hV1V0YUdWc2JHMWhiaUFvYUhSMGNITTZMeTlsYmk1M2FXdHBjR1ZrYVdFdWIzSm5MM2RwYTJrdlJHbG1abWxsSlVVeUpUZ3dKVGt6U0dWc2JHMWhibDlyWlhsZlpYaGphR0Z1WjJValEzSjVjSFJ2WjNKaGNHaHBZMTlsZUhCc1lXNWhkR2x2YmlsY2JpOHZJRkpGVVZWSlVrVk5SVTVVVXpvZ1ltNHVhbk5jYmk4dklFRlRVMVZOVUZSSlQwNVRPaUJKYm5CMWRITWdkRzhnZEdobElHWjFibU4wYVc5dWN5QmhjbVVnYUdWNFlXUmxZMmx0WVd3Z2MzUnlhVzVuYzF4dVhHNHZMeUE4YzNWdGJXRnllVDVjYmk4dklGUm9hWE1nWTJ4aGMzTWdhVzF3YkdWdFpXNTBjeUIwYUdVZ1JHbG1abWxsTFVobGJHeHRZVzRnWVd4bmIzSnBkR2h0SUhWemFXNW5JRUpwWjBsdWRHVm5aWEp6TGx4dUx5OGdTWFFnWTJGdUlHUnZJSFJvWlNBeklHMWhhVzRnZEdocGJtZHpPbHh1THk4Z01TNGdSMlZ1WlhKaGRHVWdZU0J5WVc1a2IyMGdVSEpwZG1GMFpTQkxaWGtnWm05eUlIbHZkUzVjYmk4dklESXVJRWRsYm1WeVlYUmxJSGx2ZFhJZ1VIVmliR2xqSUV0bGVTQmlZWE5sWkNCdmJpQjViM1Z5SUZCeWFYWmhkR1VnUzJWNUxseHVMeThnTXk0Z1IyVnVaWEpoZEdVZ2RHaGxJRk5sWTNKbGRDQm5hWFpsYmlCMGFHVnBjaUJRZFdKc2FXTWdTMlY1SUdGdVpDQjViM1Z5SUZCeWFYWmhkR1VnUzJWNVhHNHZMeUJ3SUdGdVpDQm5JR0Z5WlNCMGFHVWdjMmhoY21Wa0lHTnZibk4wWVc1MGN5Qm1iM0lnZEdobElHRnNaMjl5YVhSb2JTd2dZV3RoSUhCeWFXMWxVQ0JoYm1RZ2NISnBiV1ZITGx4dUx5OGdQQzl6ZFcxdFlYSjVQbHh1Wlhod2IzSjBJR05zWVhOeklFUnBabVpwWlVobGJHeHRZVzRnZTF4dVhHNGdJQ0FnWTI5dWMzUnlkV04wYjNJZ0tDa2dlMXh1WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnUjJWdVpYSmhkR1Z6SUdFZ2NtRnVaRzl0SUZCeWFYWmhkR1VnUzJWNUlIUm9ZWFFnZVc5MUlHTmhiaUIxYzJVdVhHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpY0Z3aVBqd3ZjR0Z5WVcwK1hHNGdJQ0FnTHk4Z1BISmxkSFZ5Ym5NK1VtRnVaRzl0SUZCeWFYWmhkR1VnUzJWNVBDOXlaWFIxY201elBseHVJQ0FnSUZKaGJtUnZiVkJ5YVhaaGRHVkxaWGtvYldGNFZtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJRzFoZUZaaGJIVmxRazRnSUNBZ0lDQTlJRzVsZHlCQ1RpaHRZWGhXWVd4MVpTazdYRzRnSUNBZ0lDQWdJR3hsZENCemFHbG1kRVJwYzNSaGJtTmxJQ0FnUFNCTllYUm9MbVpzYjI5eUtDaE5ZWFJvTG5KaGJtUnZiU2dwSUNvZ01UQXdNQ2tnS3lBeEtUdGNiaUFnSUNBZ0lDQWdiR1YwSUhKaGJtUkNhWFJKYm5RZ0lDQWdJQ0E5SUcxaGVGWmhiSFZsUWs0dWMyaHliaWh6YUdsbWRFUnBjM1JoYm1ObEtUc2dMeThnVW1sbmFIUWdjMmhwWm5RZ1pHbDJhV1JsY3lCaWVTQmhJSEJ2ZDJWeUlHOW1JREpjYmlBZ0lDQWdJQ0FnYkdWMElHMXBiaUFnSUNBZ0lDQWdJQ0FnSUNBOUlHNWxkeUJDVGlneUtUdGNibHh1SUNBZ0lDQWdJQ0JwWmloeVlXNWtRbWwwU1c1MExtTnRjQ2h0YVc0cElEMDlJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV2x1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlISmhibVJDYVhSSmJuUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdRMkZzWTNWc1lYUmxjeUIwYUdVZ1VIVmliR2xqSUV0bGVTQm1jbTl0SUdFZ1VISnBkbUYwWlNCTFpYa3VYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWNGd2lQand2Y0dGeVlXMCtYRzRnSUNBZ0x5OGdQSEJoY21GdElHNWhiV1U5WENKblhDSStQQzl3WVhKaGJUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW5CeWFYWmhkR1ZMWlhsY0lqNDhMM0JoY21GdFBseHVJQ0FnSUM4dklEeHlaWFIxY201elBsQjFZbXhwWXlCTFpYa2dLRWhsZUNrOEwzSmxkSFZ5Ym5NK1hHNGdJQ0FnVUhWaWJHbGpTMlY1S0hBc0lHY3NJSEJ5YVhaaGRHVkxaWGtwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWVVobGVDQTlJRzVsZHlCQ1RpaHdjbWwyWVhSbFMyVjVMQ0F4TmlrN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdkSVpYZ2dQU0J1WlhjZ1FrNG9aeXdnTVRZcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdGIyNTBVSEpwYldVZ1BTQkNUaTV0YjI1MEtHNWxkeUJDVGlod0xDQXhOaWtwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JuVW1Wa0lEMGdaMGhsZUM1MGIxSmxaQ2h0YjI1MFVISnBiV1VwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6WldOeVpYUWdQU0JuVW1Wa0xuSmxaRkJ2ZHloaFNHVjRLUzVtY205dFVtVmtLQ2t1ZEc5VGRISnBibWNvTVRZcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnpaV055WlhRN0lDQmNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QkRZV3hqZFd4aGRHVnpJSFJvWlNCemFHRnlaV1FnYzJWamNtVjBJR2RwZG1WdUlIUm9aV2x5SUZCMVlteHBZeUJMWlhrZ0tFRXBJR0Z1WkNCNWIzVnlJRkJ5YVhaaGRHVWdTMlY1SUNoaUtWeHVJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW5CY0lqNDhMM0JoY21GdFBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpZEdobGFYSlFkV0pzYVdOTFpYbGNJajQ4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWVXOTFjbEJ5YVhaaGRHVkxaWGxjSWo0OEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4eVpYUjFjbTV6UGp3dmNtVjBkWEp1Y3o1Y2JpQWdJQ0JUWldOeVpYUW9jQ3dnZEdobGFYSlFkV0pzYVdOTFpYa3NJSGx2ZFhKUWNtbDJZWFJsUzJWNUtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHSklaWGdnUFNCdVpYY2dRazRvZEdobGFYSlFkV0pzYVdOTFpYa3NJREUyS1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnUVVobGVDQTlJRzVsZHlCQ1RpaDViM1Z5VUhKcGRtRjBaVXRsZVN3Z01UWXBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnRiMjUwVUhKcGJXVWdQU0JDVGk1dGIyNTBLRzVsZHlCQ1RpaHdMQ0F4TmlrcE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCQ1VtVmtJRDBnWWtobGVDNTBiMUpsWkNodGIyNTBVSEpwYldVcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQkNVbVZrTG5KbFpGQnZkeWhCU0dWNEtTNW1jbTl0VW1Wa0tDa3VkRzlUZEhKcGJtY29NVFlwTG5SdlZYQndaWEpEWVhObEtDazdYRzRnSUNBZ2ZWeHVYRzU5WEc0aUxDSnBiWEJ2Y25RZ2UwVjJaVzUwY3l3Z1RXVnpjMkZuWlgwZ1puSnZiU0FuTGk5TlpYTnpZV2RsY3ljN1hHNXBiWEJ2Y25RZ2UwTnllWEIwYjMwZ1puSnZiU0FuTGk5RGNubHdkRzhuTzF4dWFXMXdiM0owSUh0VFpXTnlaWFJ6ZlNCbWNtOXRJQ2N1TDFObFkzSmxkSE1uTzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUzJWNVVtOXNiR2x1WjBobGJIQmxjaUI3WEc0Z0lDQWdjM1JoZEdsaklGQmxjbVp2Y20xTFpYbFNiMnhzYVc1bktHdHlVbVZ4ZFdWemRDd2dZM1Z5Y21WdWRGTmxZM0psZEhNcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCc1pYUWdiU0E5SUc1bGR5Qk5aWE56WVdkbEtHdHlVbVZ4ZFdWemRDNUpaQ3dnUlhabGJuUnpMa3RsZVZKdmJHeFNaWE53YjI1elpTd2dlMXdpYzNSaGRIVnpYQ0k2SUZ3aVkyOXVabWx5YldWa1hDSjlMQ0IwY25WbEtUdGNiaUFnSUNBZ0lDQWdiR1YwSUc1bGQxTmxZM0psZEhNZ1BTQnVaWGNnVTJWamNtVjBjeWhEY25sd2RHOHVSMlZ1WlhKaGRHVklZWE5vS0dOMWNuSmxiblJUWldOeVpYUnpMa1Z1WTB0bGVTa3VkRzlWY0hCbGNrTmhjMlVvS1N4RGNubHdkRzh1UjJWdVpYSmhkR1ZJWVhOb0tHTjFjbkpsYm5SVFpXTnlaWFJ6TGtodFlXTkxaWGtwTG5SdlZYQndaWEpEWVhObEtDa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUV0bGVWSnZiR3hwYm1kU1pYTjFiSFFvYlN3Z2JtVjNVMlZqY21WMGN5azdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdTMlY1VW05c2JHbHVaMUpsYzNWc2RDQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9hMlY1VW05c2JHbHVaME52Ym1acGNtMWhkR2x2Yml3Z2JtVjNVMlZqY21WMGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxrdGxlVkp2Ykd4cGJtZERiMjVtYVhKdFlYUnBiMjRnUFNCclpYbFNiMnhzYVc1blEyOXVabWx5YldGMGFXOXVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrNWxkMU5sWTNKbGRITWdQU0J1WlhkVFpXTnlaWFJ6TzF4dUlDQWdJSDFjYm4xY2JpSXNJbVY0Y0c5eWRDQmpiR0Z6Y3lCTWIyZG5aWElnZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0dWc1pXMWxiblFzSUd4cGJtVlRaWEJsY21GMGIzSWdQU0FuWEZ4dUp5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtSjFabVpsY2lBZ0lDQWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVsYkdWdFpXNTBJQ0FnSUQwZ1pXeGxiV1Z1ZER0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYVc1bFUyVndaWEpoZEc5eUlEMGdiR2x1WlZObGNHVnlZWFJ2Y2p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JKYm1adktDNHVMbUZ5WjNNcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aWRXWm1aWEl1Y0hWemFDaGhjbWR6TG1wdmFXNG9KeUFuS1NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGJtUmxjaWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRVJsWW5WbktDNHVMbUZ5WjNNcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1aWRXWm1aWEl1Y0hWemFDaGhjbWR6TG1wdmFXNG9KeUFuS1NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGJtUmxjaWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRmRoY200b0xpNHVZWEpuY3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1KMVptWmxjaTV3ZFhOb0tHRnlaM011YW05cGJpZ25JQ2NwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WdVpHVnlLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSWEp5YjNJb0xpNHVZWEpuY3lrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1KMVptWmxjaTV3ZFhOb0tHRnlaM011YW05cGJpZ25JQ2NwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WdVpHVnlLQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRMjl1YzI5c1pTZ3VMaTVoY21kektTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0dGeVozTXVhbTlwYmlnbklDY3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmZjbVZ1WkdWeUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5RdWFXNXVaWEpVWlhoMElEMGdkR2hwY3k1aWRXWm1aWEl1YW05cGJpaDBhR2x6TG14cGJtVlRaWEJsY21GMGIzSXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxtVnNaVzFsYm5RdWMyTnliMnhzVkc5d0lEMGdkR2hwY3k1bGJHVnRaVzUwTG5OamNtOXNiRWhsYVdkb2REdGNiaUFnSUNCOVhHNWNiaUFnSUNCRGJHVmhjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVpZFdabVpYSWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WdVpHVnlLQ2s3WEc0Z0lDQWdmVnh1ZlZ4dUlpd2lhVzF3YjNKMElIdERjbmx3ZEc5OUlHWnliMjBnSnk0dlEzSjVjSFJ2Snp0Y2JseHVMeThnUEhOMWJXMWhjbmsrWEc0dkx5QkZkbVZ1ZEhNZ2MzUmhkR2xqWVd4c2VTQmtaV05zWVhKbGN5QjBhR1VnZG1GeWFXOTFjeUJsZG1WdWRDQnVZVzFsY3lCcGJpQnRaWE56WVdkbGN5NWNiaTh2SUR3dmMzVnRiV0Z5ZVQ1Y2JtVjRjRzl5ZENCamIyNXpkQ0JGZG1WdWRITWdQU0I3WEc0Z0lDQWdJRkJoYVhKU1pYRjFaWE4wSURvZ1hDSndZV2x5WDNKbGNYVmxjM1JjSWl4Y2JpQWdJQ0FnUzJWNVVtVnhkV1Z6ZENBNklGd2lhMlY1WDNKbGNYVmxjM1JjSWl4Y2JpQWdJQ0FnUzJWNVVtVnpjRzl1YzJVZ09pQmNJbXRsZVY5eVpYTndiMjV6WlZ3aUxGeHVJQ0FnSUNCTFpYbERhR1ZqYXlBNklGd2lhMlY1WDJOb1pXTnJYQ0lzWEc0Z0lDQWdJRkJoYVhKU1pYTndiMjV6WlNBNklGd2ljR0ZwY2w5eVpYTndiMjV6WlZ3aUxGeHVJQ0FnSUNCRWNtOXdTMlY1YzBGa2RtbGpaU0E2SUZ3aVpISnZjRjlyWlhselhDSXNYRzVjYmlBZ0lDQWdURzluYVc1U1pYRjFaWE4wSURvZ1hDSnNiMmRwYmw5eVpYRjFaWE4wWENJc1hHNGdJQ0FnSUV4dloybHVVbVZ6Y0c5dWMyVWdPaUJjSW14dloybHVYM0psYzNCdmJuTmxYQ0lzWEc1Y2JpQWdJQ0FnVUdsdVp5QTZJRndpY0dsdVoxd2lMRnh1SUNBZ0lDQlFiMjVuSURvZ1hDSndiMjVuWENJc1hHNWNiaUFnSUNBZ1VIVnlZMmhoYzJWU1pYRjFaWE4wSURvZ1hDSndkWEpqYUdGelpWd2lMRnh1SUNBZ0lDQlFkWEpqYUdGelpWSmxjM0J2Ym5ObElEb2dYQ0p3ZFhKamFHRnpaVjl5WlhOd2IyNXpaVndpTEZ4dUlDQWdJQ0JEWVc1alpXeFVjbUZ1YzJGamRHbHZibEpsY1hWbGMzUWdPaUJjSW1OaGJtTmxiRjkwY21GdWMyRmpkR2x2Ymx3aUxGeHVJQ0FnSUNCRFlXNWpaV3hVY21GdWMyRmpkR2x2YmxKbGMzQnZibk5sSURvZ1hDSmpZVzVqWld4ZmNtVnpjRzl1YzJWY0lpeGNiaUFnSUNBZ1IyVjBUR0Z6ZEZSeVlXNXpZV04wYVc5dVVtVnhkV1Z6ZENBNklGd2laMlYwWDJ4aGMzUmZkSEpoYm5OaFkzUnBiMjVjSWl4Y2JpQWdJQ0FnUjJWMFRHRnpkRlJ5WVc1ellXTjBhVzl1VW1WemNHOXVjMlVnT2lCY0lteGhjM1JmZEhKaGJuTmhZM1JwYjI1Y0lpeGNiaUFnSUNBZ1VtVm1kVzVrVW1WeGRXVnpkQ0E2SUZ3aWNtVm1kVzVrWENJc1hHNGdJQ0FnSUZKbFpuVnVaRkpsYzNCdmJuTmxJRG9nWENKeVpXWjFibVJmY21WemNHOXVjMlZjSWl4Y2JpQWdJQ0FnVTJsbmJtRjBkWEpsVW1WeGRXbHlaV1FnT2lCY0luTnBaMjVoZEhWeVpWOXlaWEYxYVhKbFpGd2lMRnh1SUNBZ0lDQlRhV2R1WVhSMWNtVkVaV05zYVc1bFpDQTZJRndpYzJsbmJtRjBkWEpsWDJSbFkyeHBibVZjSWl4Y2JpQWdJQ0FnVTJsbmJtRjBkWEpsUVdOalpYQjBaV1FnT2lCY0luTnBaMjVoZEhWeVpWOWhZMk5sY0hSY0lpeGNiaUFnSUNBZ1FYVjBhRU52WkdWU1pYRjFhWEpsWkNBNklGd2lZWFYwYUc5eWFYTmhkR2x2Ymw5amIyUmxYM0psY1hWcGNtVmtYQ0lzWEc0Z0lDQWdJRUYxZEdoRGIyUmxRV1IyYVdObElEb2dYQ0poZFhSb2IzSnBjMkYwYVc5dVgyTnZaR1ZmWVdSMmFXTmxYQ0lzWEc1Y2JpQWdJQ0FnUTJGemFHOTFkRTl1YkhsU1pYRjFaWE4wSURvZ1hDSmpZWE5vWENJc1hHNGdJQ0FnSUVOaGMyaHZkWFJQYm14NVVtVnpjRzl1YzJVZ09pQmNJbU5oYzJoZmNtVnpjRzl1YzJWY0lpeGNibHh1SUNBZ0lDQk5iM1J2VUhWeVkyaGhjMlZTWlhGMVpYTjBJRG9nWENKdGIzUnZYM0IxY21Ob1lYTmxYQ0lzWEc0Z0lDQWdJRTF2ZEc5UWRYSmphR0Z6WlZKbGMzQnZibk5sSURvZ1hDSnRiM1J2WDNCMWNtTm9ZWE5sWDNKbGMzQnZibk5sWENJc1hHNWNiaUFnSUNBZ1UyVjBkR3hsVW1WeGRXVnpkQ0E2SUZ3aWMyVjBkR3hsWENJc1hHNGdJQ0FnSUZObGRIUnNaVkpsYzNCdmJuTmxJRG9nWENKelpYUjBiR1ZmY21WemNHOXVjMlZjSWl4Y2JpQWdJQ0FnVTJWMGRHeGxiV1Z1ZEVWdWNYVnBjbmxTWlhGMVpYTjBJRG9nWENKelpYUjBiR1Z0Wlc1MFgyVnVjWFZwY25sY0lpeGNiaUFnSUNBZ1UyVjBkR3hsYldWdWRFVnVjWFZwY25sU1pYTndiMjV6WlNBNklGd2ljMlYwZEd4bGJXVnVkRjlsYm5GMWFYSjVYM0psYzNCdmJuTmxYQ0lzWEc1Y2JpQWdJQ0FnVTJWMFVHOXpTVzVtYjFKbGNYVmxjM1FnT2lCY0luTmxkRjl3YjNOZmFXNW1iMXdpTEZ4dUlDQWdJQ0JUWlhSUWIzTkpibVp2VW1WemNHOXVjMlVnT2lCY0luTmxkRjl3YjNOZmFXNW1iMTl5WlhOd2IyNXpaVndpTEZ4dVhHNGdJQ0FnSUV0bGVWSnZiR3hTWlhGMVpYTjBJRG9nWENKeVpYRjFaWE4wWDNWelpWOXVaWGgwWDJ0bGVYTmNJaXhjYmlBZ0lDQWdTMlY1VW05c2JGSmxjM0J2Ym5ObElEb2dYQ0p5WlhOd2IyNXpaVjkxYzJWZmJtVjRkRjlyWlhselhDSXNYRzVjYmlBZ0lDQWdSWEp5YjNJZ09pQmNJbVZ5Y205eVhDSXNYRzRnSUNBZ1hHNGdJQ0FnSUVsdWRtRnNhV1JJYldGalUybG5ibUYwZFhKbElEb2dYQ0pmU1U1V1FVeEpSRjlUU1VkT1FWUlZVa1ZmWENJc1hHNWNiaUFnSUNBdkx5QlFZWGtnUVhRZ1ZHRmliR1VnVW1Wc1lYUmxaQ0JOWlhOellXZGxjMXh1SUNBZ0lGQmhlVUYwVkdGaWJHVkhaWFJVWVdKc1pVTnZibVpwWnlBNklGd2laMlYwWDNSaFlteGxYMk52Ym1acFoxd2lMQ0F2THlCcGJtTnZiV2x1Wnk0Z1YyaGxiaUJsWm5Sd2IzTWdkMkZ1ZEhNZ2RHOGdZWE5ySUhWeklHWnZjaUJRUUZRZ1kyOXVabWxuZFhKaGRHbHZiaTVjYmlBZ0lDQlFZWGxCZEZSaFlteGxVMlYwVkdGaWJHVkRiMjVtYVdjZ09pQmNJbk5sZEY5MFlXSnNaVjlqYjI1bWFXZGNJaXdnTHk4Z2IzVjBaMjlwYm1jdUlGZG9aVzRnZDJVZ2QyRnVkQ0IwYnlCcGJuTjBjblZqZENCbFpuUndiM01nZDJsMGFDQjBhR1VnVUVCVUlHTnZibVpwWjNWeVlYUnBiMjR1WEc0Z0lDQWdVR0Y1UVhSVVlXSnNaVWRsZEVKcGJHeEVaWFJoYVd4eklEb2dYQ0puWlhSZlltbHNiRjlrWlhSaGFXeHpYQ0lzSUM4dklHbHVZMjl0YVc1bkxpQlhhR1Z1SUdWbWRIQnZjeUIzWVc1MGN5QjBieUJoY21WMGNtbGxkbVVnZEdobElHSnBiR3dnWm05eUlHRWdkR0ZpYkdVdVhHNGdJQ0FnVUdGNVFYUlVZV0pzWlVKcGJHeEVaWFJoYVd4eklEb2dYQ0ppYVd4c1gyUmxkR0ZwYkhOY0lpd2dJQ0FnSUNBZ0lDOHZJRzkxZEdkdmFXNW5MaUJYWlNCeVpYQnNlU0IzYVhSb0lIUm9hWE1nZDJobGJpQmxablJ3YjNNZ2NtVnhkV1Z6ZEhNZ2RHOGdkWE1nWjJWMFgySnBiR3hmWkdWMFlXbHNjeTVjYmlBZ0lDQlFZWGxCZEZSaFlteGxRbWxzYkZCaGVXMWxiblFnT2lCY0ltSnBiR3hmY0dGNWJXVnVkRndpTENBZ0lDQWdJQ0FnTHk4Z2FXNWpiMjFwYm1jdUlGZG9aVzRnZEdobElHVm1kSEJ2Y3lCaFpIWnBZMlZ6SUZ4dVhHNGdJQ0FnVUhKcGJuUnBibWRTWlhGMVpYTjBJRG9nWENKd2NtbHVkRndpTEZ4dUlDQWdJRkJ5YVc1MGFXNW5VbVZ6Y0c5dWMyVWdPaUJjSW5CeWFXNTBYM0psYzNCdmJuTmxYQ0lzWEc1Y2JpQWdJQ0JVWlhKdGFXNWhiRk4wWVhSMWMxSmxjWFZsYzNRZ09pQmNJbWRsZEY5MFpYSnRhVzVoYkY5emRHRjBkWE5jSWl4Y2JpQWdJQ0JVWlhKdGFXNWhiRk4wWVhSMWMxSmxjM0J2Ym5ObElEb2dYQ0owWlhKdGFXNWhiRjl6ZEdGMGRYTmNJaXhjYmx4dUlDQWdJRUpoZEhSbGNubE1aWFpsYkVOb1lXNW5aV1FnT2lCY0ltSmhkSFJsY25sZmJHVjJaV3hmWTJoaGJtZGxaRndpTEZ4dVhHNGdJQ0FnVUdGNVFYUlVZV0pzWlVkbGRFOXdaVzVVWVdKc1pYTTZJRndpWjJWMFgyOXdaVzVmZEdGaWJHVnpYQ0lzWEc0Z0lDQWdVR0Y1UVhSVVlXSnNaVTl3Wlc1VVlXSnNaWE02SUZ3aWIzQmxibDkwWVdKc1pYTmNJaXhjYmx4dUlDQWdJRkJoZVVGMFZHRmliR1ZDYVd4c1VHRjViV1Z1ZEVac2IzZEZibVJsWkRvZ1hDSmlhV3hzWDNCaGVXMWxiblJmWm14dmQxOWxibVJsWkZ3aVhHNTlPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdVM1ZqWTJWemMxTjBZWFJsSUQwZ2UxeHVJQ0FnSUZWdWEyNXZkMjQ2SUNkVmJtdHViM2R1Snl3Z1UzVmpZMlZ6Y3pvZ0oxTjFZMk5sYzNNbkxDQkdZV2xzWldRNklDZEdZV2xzWldRblhHNTlPMXh1WEc0dkx5QThjM1Z0YldGeWVUNWNiaTh2SUUxbGMzTmhaMlZUZEdGdGNDQnlaWEJ5WlhObGJuUnpJSGRvWVhRZ2FYTWdjbVZ4ZFdseVpXUWdkRzhnZEhWeWJpQmhiaUJ2ZFhSbmIybHVaeUJOWlhOellXZGxJR2x1ZEc4Z1NuTnZibHh1THk4Z2FXNWpiSFZrYVc1bklHVnVZM0o1Y0hScGIyNGdZVzVrSUdSaGRHVWdjMlYwZEdsdVp5NWNiaTh2SUR3dmMzVnRiV0Z5ZVQ1Y2JtVjRjRzl5ZENCamJHRnpjeUJOWlhOellXZGxVM1JoYlhBZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtIQnZjMGxrTENCelpXTnlaWFJ6TENCelpYSjJaWEpVYVcxbFJHVnNkR0VwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRYjNOSlpDQTlJSEJ2YzBsa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxObFkzSmxkSE1nUFNCelpXTnlaWFJ6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbE5sY25abGNsUnBiV1ZFWld4MFlTQTlJSE5sY25abGNsUnBiV1ZFWld4MFlUdGNiaUFnSUNCOVhHNTlYRzVjYmk4dklEeHpkVzF0WVhKNVBseHVMeThnVFdWemMyRm5aVVZ1ZG1Wc2IzQmxJSEpsY0hKbGMyVnVkSE1nZEdobElHOTFkR1Z5SUhOMGNuVmpkSFZ5WlNCdlppQmhibmtnYldWemMyRm5aU0IwYUdGMElHbHpJR1Y0WTJoaGJtZGxaRnh1THk4Z1ltVjBkMlZsYmlCMGFHVWdVRzl6SUdGdVpDQjBhR1VnVUdsdVVHRmtJR0Z1WkNCMmFXTmxMWFpsY25OaExseHVMeThnVTJWbElHaDBkSEE2THk5M2QzY3VjMmx0Y0d4bGNHRjViV1Z1ZEdGd2FTNWpiMjB2SXk5aGNHa3ZiV1Z6YzJGblpTMWxibU55ZVhCMGFXOXVYRzR2THlBOEwzTjFiVzFoY25rK1hHNWxlSEJ2Y25RZ1kyeGhjM01nVFdWemMyRm5aVVZ1ZG1Wc2IzQmxJSHRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh0WlhOellXZGxMQ0JsYm1Nc0lHaHRZV01zSUhCdmMwbGtLU0I3WEc0Z0lDQWdJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQXZMeUJVYUdVZ1RXVnpjMkZuWlNCbWFXVnNaQ0JwY3lCelpYUWdiMjVzZVNCM2FHVnVJR2x1SUZWdUxXVnVZM0o1Y0hSbFpDQm1iM0p0TGx4dUlDQWdJQ0FnSUNBdkx5QkpiaUJtWVdOMElHbDBJR2x6SUhSb1pTQnZibXg1SUdacFpXeGtJR2x1SUdGdUlHVnVkbVZzYjNCbElHbHVJSFJvWlNCVmJpMUZibU55ZVhCMFpXUWdabTl5YlM1Y2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0IwYUdsekxrMWxjM05oWjJVZ1BTQnRaWE56WVdkbE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNBdkx5QlVhR1VnWlc1aklHWnBaV3hrSUdseklITmxkQ0J2Ym14NUlIZG9aVzRnYVc0Z1JXNWpjbmx3ZEdWa0lHWnZjbTB1WEc0Z0lDQWdJQ0FnSUM4dklFbDBJR052Ym5SaGFXNXpJSFJvWlNCbGJtTnllWEIwWldRZ1NuTnZiaUJ2WmlCaGJtOTBhR1Z5SUUxbGMzTmhaMlZGYm5abGJHOXdaU0JjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQjBhR2x6TGtWdVl5QTlJR1Z1WXp0Y2JseHVJQ0FnSUNBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnTHk4Z1ZHaGxJR2h0WVdNZ1ptbGxiR1FnYVhNZ2MyVjBJRzl1YkhrZ2QyaGxiaUJwYmlCRmJtTnllWEIwWldRZ1ptOXliUzVjYmlBZ0lDQWdJQ0FnTHk4Z1NYUWdhWE1nZEdobElITnBaMjVoZEhWeVpTQnZaaUIwYUdVZ1hDSmxibU5jSWlCbWFXVnNaQzVjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQjBhR2x6TGtodFlXTWdQU0JvYldGak8xeHVYRzRnSUNBZ0lDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNBdkx5QlVhR1VnY0c5elgybGtJR1pwWld4a0lHbHpJRzl1YkhrZ1ptbHNiR1ZrSUdadmNpQnZkWFJuYjJsdVp5QkZibU55ZVhCMFpXUWdiV1Z6YzJGblpYTXVYRzRnSUNBZ0lDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRYjNOSlpDQTlJSEJ2YzBsa08xeHVJQ0FnSUgxY2JseHVJQ0FnSUhSdlNsTlBUaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJSFJvYVhNdVRXVnpjMkZuWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1Z1WXpvZ2RHaHBjeTVGYm1Nc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JvYldGak9pQjBhR2x6TGtodFlXTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzTmZhV1E2SUhSb2FYTXVVRzl6U1dSY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNibHh1THk4Z1BITjFiVzFoY25rK1hHNHZMeUJOWlhOellXZGxJSEpsY0hKbGMyVnVkSE1nZEdobElHTnZiblJsYm5SeklHOW1JR0VnVFdWemMyRm5aUzVjYmk4dklGTmxaU0JvZEhSd09pOHZkM2QzTG5OcGJYQnNaWEJoZVcxbGJuUmhjR2t1WTI5dEx5TXZZWEJwTDIxbGMzTmhaMlV0Wlc1amNubHdkR2x2Ymx4dUx5OGdQQzl6ZFcxdFlYSjVQbHh1Wlhod2IzSjBJR05zWVhOeklFMWxjM05oWjJVZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHbGtMQ0JsZG1WdWRFNWhiV1VzSUdSaGRHRXNJRzVsWldSelJXNWpjbmx3ZEdsdmJpa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxrbGtJRDBnYVdRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UlhabGJuUk9ZVzFsSUQwZ1pYWmxiblJPWVcxbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtSaGRHRWdQU0JrWVhSaE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtSaGRHVlVhVzFsVTNSaGJYQWdQU0FuSnp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRYjNOSlpDQTlJQ2NuT3lBdkx5QlFiM05mYVdRZ2FYTWdjMlYwSUdobGNtVWdiMjVzZVNCbWIzSWdiM1YwWjI5cGJtY2dWVzR0Wlc1amNubHdkR1ZrSUcxbGMzTmhaMlZ6TGlCY2JpQWdJQ0FnSUNBZ2RHaHBjeTVKYm1OdmJXMXBibWRJYldGaklEMGdKeWM3SUM4dklGTnZiV1YwYVcxbGN5QjBhR1VnYkc5bmFXTWdZWEp2ZFc1a0lIUm9aU0JwYm1OdmJXbHVaeUJ0WlhOellXZGxJRzFwWjJoMElHNWxaV1FnWVdOalpYTnpJSFJ2SUhSb1pTQnpkV2R1WVhSMWNtVXNJR1p2Y2lCbGVHRnRjR3hsSUdsdUlIUm9aU0JyWlhsZlkyaGxZMnN1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjVsWldSelJXNWpjbmx3ZEdsdmJpQTlJRzVsWldSelJXNWpjbmx3ZEdsdmJqc2dMeThnUkdWdWIzUmxjeUIzYUdWMGFHVnlJR0Z1SUc5MWRHZHZhVzVuSUcxbGMzTmhaMlVnYm1WbFpITWdkRzhnWW1VZ1pXNWpjbmx3ZEdWa0lHbHVJRlJ2U25OdmJpZ3BYRzRnSUNBZ0lDQWdJSFJvYVhNdVJHVmpjbmx3ZEdWa1NuTnZiaUE5SUNjbk95QXZMeUJUWlhRZ2IyNGdZVzRnYVc1amIyMXBibWNnYldWemMyRm5aU0JxZFhOMElITnZJSGx2ZFNCallXNGdhR0YyWlNCaElHeHZiMnNnWVhRZ2QyaGhkQ0JwZENCc2IyOXJaV1FnYkdsclpTQnBiaUJwZEhNZ2FuTnZiaUJtYjNKdExseHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRGTjFZMk5sYzNOVGRHRjBaU2dwSUh0Y2JpQWdJQ0FnSUNBZ2FXWW9JWFJvYVhNdVJHRjBZU0I4ZkNCMGVYQmxiMllnZEdocGN5NUVZWFJoTG5OMVkyTmxjM01nUFQwOUlGd2lkVzVrWldacGJtVmtYQ0lwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlRkV05qWlhOelUzUmhkR1V1Vlc1cmJtOTNianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMa1JoZEdFdWMzVmpZMlZ6Y3lBL0lGTjFZMk5sYzNOVGRHRjBaUzVUZFdOalpYTnpJRG9nVTNWalkyVnpjMU4wWVhSbExrWmhhV3hsWkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSRmNuSnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVSR0YwWVM1bGNuSnZjbDl5WldGemIyNGdQeUIwYUdsekxrUmhkR0V1WlhKeWIzSmZjbVZoYzI5dUlEb2dYQ0pjSWp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSRmNuSnZja1JsZEdGcGJDZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVJHRjBZUzVsY25KdmNsOWtaWFJoYVd3N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFUyVnlkbVZ5VkdsdFpVUmxiSFJoS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnViM2NnUFNCRVlYUmxMbTV2ZHlncE8xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdMeThnVTNSaGJYQWdabTl5YldGME9pQXlNREU0TFRBMExURTVWREF4T2pReU9qTTRMakkzT1Z4dUlDQWdJQ0FnSUNCc1pYUWdaSFJ6SUQwZ2RHaHBjeTVFWVhSbFZHbHRaVk4wWVcxd0xuTndiR2wwS0M5YlhGd3RYRndyWEZ3dUlEcFVYUzhwTzF4dUlDQWdJQ0FnSUNCc1pYUWdiWE5uVkdsdFpTQTlJRzVsZHlCRVlYUmxLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdlV1ZoY2l3Z2JXOXVkR2dzSUdSaGRHVmNiaUFnSUNBZ0lDQWdJQ0FnSUdSMGMxc3dYU3dnWkhSeld6RmRJQzBnTVN3Z1pIUnpXekpkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnYUc5MWNpd2diV2x1ZFhSbExDQnpaV052Ym1Rc0lHMXBiR3hwYzF4dUlDQWdJQ0FnSUNBZ0lDQWdaSFJ6V3pOZExDQmtkSE5iTkYwc0lHUjBjMXMxWFN3Z1pIUnpXelpkWEc0Z0lDQWdJQ0FnSUNrdVoyVjBWR2x0WlNncE95QXZMeUJNYjJOaGJDQjBhVzFsSUhwdmJtVmNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdiWE5uVkdsdFpTQXRJRzV2ZHp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCSVpXeHdaWElnYldWMGFHOWtJSFJ2SUhCaGNuTmxJR0poYm1zZ1pHRjBaU0JtYjNKdFlYUWdNakF3TkRJd01UZ2dLR1JrVFUxNWVYbDVLVnh1SUNBZ0lITjBZWFJwWXlCUVlYSnpaVUpoYm10RVlYUmxLR0poYm10RVlYUmxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUtHSmhibXRFWVhSbExteGxibWQwYUNBaFBUMGdPQ2tnY21WMGRYSnVJRzUxYkd3N1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJFWVhSbEtHQWtlMkpoYm10RVlYUmxMbk4xWW5OMGNpZzBMRFFwZlMwa2UySmhibXRFWVhSbExuTjFZbk4wY2lneUxESXBmUzBrZTJKaGJtdEVZWFJsTG5OMVluTjBjaWd3TERJcGZXQXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRkJoY25ObGN5QmhJR0poYm1zZ1pHRjBaU0FtSUhScGJXVWdjM1J5SUdaeWIyMGdYQ0l3TlU5amRERTNYQ0lnTHlCY0lqQTFPakF3WENJZ0tGd2laR1JOVFUxNWVTOUlTRHB0YlZ3aUtTQnBiblJ2SUdSaGRHVWdiMkpxWEc0Z0lDQWdjM1JoZEdsaklGQmhjbk5sUW1GdWEwUmhkR1ZVYVcxbFUzUnlLR1JoZEdVc0lIUnBiV1VwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkVZWFJsS0dBa2UyUmhkR1V1YzNWaWMzUnlLREFzTWlsOUlDUjdaR0YwWlM1emRXSnpkSElvTWl3ektYMGdKSHRrWVhSbExuTjFZbk4wY2lnMUxESXBmU0FrZTNScGJXVjlZQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjM1JoZEdsaklFWnliMjFLYzI5dUtHMXpaMHB6YjI0c0lITmxZM0psZEhNcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUdWdWRpQTlJRXBUVDA0dWNHRnljMlVvYlhOblNuTnZiaWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWW9aVzUyTG0xbGMzTmhaMlVnSVQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUcxbGMzTmhaMlVnUFNCdVpYY2dUV1Z6YzJGblpTaGxibll1YldWemMyRm5aUzVwWkN3Z1pXNTJMbTFsYzNOaFoyVXVaWFpsYm5Rc0lHVnVkaTV0WlhOellXZGxMbVJoZEdFc0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVXVSR1ZqY25sd2RHVmtTbk52YmlBOUlHMXpaMHB6YjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV1Z6YzJGblpUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaV055WlhSeklEMDlJRzUxYkd3cFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGUm9hWE1nYldGNUlHaGhjSEJsYmlCcFppQjNaU0J6YjIxbGFHOTNJSEpsWTJWcGRtVmtJR0Z1SUdWdVkzSjVjSFJsWkNCdFpYTnpZV2RsSUdaeWIyMGdaV1owY0c5eklHSjFkQ0IzWlNkeVpTQnViM1FnWTI5dVptbG5aWEpsWkNCM2FYUm9JSE5sWTNKbGRITXVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkdiM0lnWlhoaGJYQnNaU3dnYVdZZ2QyVWdZMkZ1WTJWc0lIUm9aU0J3WVdseWFXNW5JSEJ5YjJObGMzTWdZU0JzYVhSMGJHVWdiR0YwWlNCcGJpQjBhR1VnWjJGdFpTQmhibVFnZDJVZ1oyVjBJR0Z1SUdWdVkzSjVjSFJsWkNCclpYbGZZMmhsWTJzZ2JXVnpjMkZuWlNCaFpuUmxjaUIzWlNkMlpTQmtjbTl3Y0dWa0lIUm9aU0JyWlhsekxseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCTlpYTnpZV2RsS0Z3aVZVNUxUazlYVGx3aUxDQmNJazVQVTBWRFVrVlVVMXdpTENCdWRXeHNMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QkpkSE1nWlc1amNubHdkR1ZrTENCMlpYSnBabmtnYzJsblhHNGdJQ0FnSUNBZ0lHeGxkQ0J6YVdjZ1BTQkRjbmx3ZEc4dVNHMWhZMU5wWjI1aGRIVnlaU2h6WldOeVpYUnpMa2h0WVdOTFpYa3NJR1Z1ZGk1bGJtTXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MybG5MblJ2VlhCd1pYSkRZWE5sS0NrZ0lUMGdaVzUyTG1odFlXTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z6YzJGblpTaGNJbDljSWl3Z1JYWmxiblJ6TGtsdWRtRnNhV1JJYldGalUybG5ibUYwZFhKbExDQnVkV3hzTENCbVlXeHpaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnNaWFFnWkdWamNubHdkR1ZrU25OdmJpQTlJRU55ZVhCMGJ5NUJaWE5FWldOeWVYQjBLSE5sWTNKbGRITXVSVzVqUzJWNUxDQmxibll1Wlc1aktUdGNibHh1SUNBZ0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUmxZM0o1Y0hSbFpFMXpaeUE5SUVwVFQwNHVjR0Z5YzJVb1pHVmpjbmx3ZEdWa1NuTnZiaWs3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdFpYTnpZV2RsSUQwZ2JtVjNJRTFsYzNOaFoyVW9aR1ZqY25sd2RHVmtUWE5uTG0xbGMzTmhaMlV1YVdRc0lHUmxZM0o1Y0hSbFpFMXpaeTV0WlhOellXZGxMbVYyWlc1MExDQmtaV055ZVhCMFpXUk5jMmN1YldWemMyRm5aUzVrWVhSaExDQjBjblZsS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aUzVFWVhSbFZHbHRaVk4wWVcxd0lEMGdaR1ZqY25sd2RHVmtUWE5uTG0xbGMzTmhaMlV1WkdGMFpYUnBiV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbExsQnZjMGxrSUQwZ1pHVmpjbmx3ZEdWa1RYTm5MbTFsYzNOaFoyVXVjRzl6WDJsa08xeHVJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aUzVKYm1OdmJXbHVaMGh0WVdNZ1BTQmxibll1YUcxaFl6c2dYRzRnSUNBZ0lDQWdJQ0FnSUNCdFpYTnpZV2RsTGtSbFkzSjVjSFJsWkVwemIyNGdQU0JrWldOeWVYQjBaV1JLYzI5dU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYldWemMyRm5aVHRjYmx4dUlDQWdJQ0FnSUNCOUlHTmhkR05vS0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXVnpjMkZuWlNoY0lsVk9TMDVQVjA1Y0lpd2dYQ0pWVGxCQlVsTkZRVUpNUlZ3aUxDQjdYQ0p0YzJkY0lqb2daR1ZqY25sd2RHVmtTbk52Ym4wc0lHWmhiSE5sS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUZSdlNuTnZiaWh6ZEdGdGNDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ2JtOTNJRDBnUkdGMFpTNXViM2NvS1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJSFI2YjJabWMyVjBJRDBnYm1WM0lFUmhkR1VvS1M1blpYUlVhVzFsZW05dVpVOW1abk5sZENncElDb2dOakFnS2lBeE1EQXdPMXh1SUNBZ0lDQWdJQ0JzWlhRZ1lXUnFkWE4wWldSVWFXMWxJRDBnYm1WM0lFUmhkR1VvYm05M0lDMGdkSHB2Wm1aelpYUWdLeUJ6ZEdGdGNDNVRaWEoyWlhKVWFXMWxSR1ZzZEdFcE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUVadmNtMWhkQ0JrWVhSbE9pQmNJbmw1ZVhrdFRVMHRaR1JVU0VnNmJXMDZjM011Wm1abVhDSmNiaUFnSUNBZ0lDQWdkR2hwY3k1RVlYUmxWR2x0WlZOMFlXMXdJRDBnWVdScWRYTjBaV1JVYVcxbExuUnZTVk5QVTNSeWFXNW5LQ2t1YzJ4cFkyVW9NQ3d0TVNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUc5elNXUWdQU0J6ZEdGdGNDNVFiM05KWkR0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lIWmhjaUJsYm5abGJHOXdaU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFsYzNOaFoyVTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkRvZ2RHaHBjeTVKWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGRtVnVkRG9nZEdocGN5NUZkbVZ1ZEU1aGJXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR0YwWVRvZ2RHaHBjeTVFWVhSaExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR1YwYVcxbE9pQjBhR2x6TGtSaGRHVlVhVzFsVTNSaGJYQmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDI1bFpXUnpSVzVqY25sd2RHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVlc1bGJtTnllWEIwWldRZ1RXVnpjMkZuWlhNZ2JtVmxaQ0JRYjNOSlJDQnBibk5wWkdVZ2RHaGxJRzFsYzNOaFoyVmNiaUFnSUNBZ0lDQWdJQ0FnSUdWdWRtVnNiM0JsTG0xbGMzTmhaMlV1Y0c5elgybGtJRDBnZEdocGN5NVFiM05KWkZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11UkdWamNubHdkR1ZrU25OdmJpQTlJRXBUVDA0dWMzUnlhVzVuYVdaNUtHVnVkbVZzYjNCbEtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDI1bFpXUnpSVzVqY25sd2RHbHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11UkdWamNubHdkR1ZrU25OdmJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUd4bGRDQmxibU5OYzJjZ1BTQkRjbmx3ZEc4dVFXVnpSVzVqY25sd2RDaHpkR0Z0Y0M1VFpXTnlaWFJ6TGtWdVkwdGxlU3dnZEdocGN5NUVaV055ZVhCMFpXUktjMjl1S1R0Y2JpQWdJQ0FnSUNBZ2JHVjBJR2h0WVdOVGFXY2dQU0JEY25sd2RHOHVTRzFoWTFOcFoyNWhkSFZ5WlNoemRHRnRjQzVUWldOeVpYUnpMa2h0WVdOTFpYa3NJR1Z1WTAxelp5azdYRzRnSUNBZ0lDQWdJR3hsZENCbGJtTnlUV1Z6YzJGblpVVnVkbVZzYjNCbElEMGdlMlZ1WXpvZ1pXNWpUWE5uTENCb2JXRmpPaUJvYldGalUybG5MblJ2VlhCd1pYSkRZWE5sS0Nrc0lIQnZjMTlwWkRvZ2MzUmhiWEF1VUc5elNXUjlPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJLVTA5T0xuTjBjbWx1WjJsbWVTaGxibU55VFdWemMyRm5aVVZ1ZG1Wc2IzQmxLVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSnBiWEJ2Y25RZ2UwVjJaVzUwY3l3Z1RXVnpjMkZuWlgwZ1puSnZiU0FuTGk5TlpYTnpZV2RsY3ljN1hHNXBiWEJ2Y25RZ2UxSmxjWFZsYzNSSlpFaGxiSEJsY24wZ1puSnZiU0FuTGk5U1pYRjFaWE4wU1dSSVpXeHdaWEluTzF4dVhHNHZMeUE4YzNWdGJXRnllVDVjYmk4dklGQmhhWEpwYm1jZ1NXNTBaWEpoWTNScGIyNGdNVG9nVDNWMFoyOXBibWRjYmk4dklEd3ZjM1Z0YldGeWVUNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCUVlXbHlVbVZ4ZFdWemRDQjdYRzRnSUNBZ1ZHOU5aWE56WVdkbEtDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZU0E5SUh0d1lXUmthVzVuT2lCMGNuVmxmVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCTlpYTnpZV2RsS0ZKbGNYVmxjM1JKWkVobGJIQmxjaTVKWkNoY0luQnlYQ0lwTENCRmRtVnVkSE11VUdGcGNsSmxjWFZsYzNRc0lHUmhkR0VzSUdaaGJITmxLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHZJRkJoYVhKcGJtY2dTVzUwWlhKaFkzUnBiMjRnTWpvZ1NXNWpiMjFwYm1kY2JtVjRjRzl5ZENCamJHRnpjeUJMWlhsU1pYRjFaWE4wSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lodEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVtVnhkV1Z6ZEVsa0lEMGdiUzVKWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVCWlc1aklEMGdiUzVFWVhSaExtVnVZeTVCTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa0ZvYldGaklEMGdiUzVFWVhSaExtaHRZV011UVR0Y2JpQWdJQ0I5WEc1OVhHNWNiaTh2SUZCaGFYSnBibWNnU1c1MFpYSmhZM1JwYjI0Z016b2dUM1YwWjI5cGJtZGNibVY0Y0c5eWRDQmpiR0Z6Y3lCTFpYbFNaWE53YjI1elpTQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jbVZ4ZFdWemRFbGtMQ0JDWlc1akxDQkNhRzFoWXlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGxKbGNYVmxjM1JKWkNBOUlISmxjWFZsYzNSSlpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1Q1pXNWpJRDBnUW1WdVl6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1Q2FHMWhZeUE5SUVKb2JXRmpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGUnZUV1Z6YzJGblpTZ3BJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHUmhkR0VnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm1NNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkNPaUIwYUdsekxrSmxibU5jYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCb2JXRmpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUWpvZ2RHaHBjeTVDYUcxaFkxeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdWemMyRm5aU2gwYUdsekxsSmxjWFZsYzNSSlpDd2dSWFpsYm5SekxrdGxlVkpsYzNCdmJuTmxMQ0JrWVhSaExDQm1ZV3h6WlNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2THlCUVlXbHlhVzVuSUVsdWRHVnlZV04wYVc5dUlEUTZJRWx1WTI5dGFXNW5YRzVsZUhCdmNuUWdZMnhoYzNNZ1MyVjVRMmhsWTJzZ2UxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHMHBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVhKdFlYUnBiMjVEYjJSbElEMGdiUzVKYm1OdmJXbHVaMGh0WVdNdWMzVmljM1J5YVc1bktEQXNOaWs3WEc0Z0lDQWdmVnh1ZlZ4dVhHNHZMeUJRWVdseWFXNW5JRWx1ZEdWeVlXTjBhVzl1SURVNklFbHVZMjl0YVc1blhHNWxlSEJ2Y25RZ1kyeGhjM01nVUdGcGNsSmxjM0J2Ym5ObElIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHRLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVM1ZqWTJWemN5QTlJRzB1UkdGMFlTNXpkV05qWlhOek8xeHVJQ0FnSUgxY2JuMWNibHh1THk4Z1NHOXNaR1Z5SUdOc1lYTnpJR1p2Y2lCVFpXTnlaWFJ6SUdGdVpDQkxaWGxTWlhOd2IyNXpaU3dnYzI4Z2RHaGhkQ0IzWlNCallXNGdkWE5sSUhSb1pXMGdkRzluWlhSb1pYSWdhVzRnYldWMGFHOWtJSE5wWjI1aGRIVnlaWE11WEc1bGVIQnZjblFnWTJ4aGMzTWdVMlZqY21WMGMwRnVaRXRsZVZKbGMzQnZibk5sSUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2loelpXTnlaWFJ6TENCclpYbFNaWE53YjI1elpTa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsTmxZM0psZEhNZ1BTQnpaV055WlhSek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGt0bGVWSmxjM0J2Ym5ObElEMGdhMlY1VW1WemNHOXVjMlU3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUkhKdmNFdGxlWE5TWlhGMVpYTjBYRzU3WEc0Z0lDQWdWRzlOWlhOellXZGxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdWemMyRm5aU2hTWlhGMVpYTjBTV1JJWld4d1pYSXVTV1FvWENKa2NuQnJlWE5jSWlrc0lFVjJaVzUwY3k1RWNtOXdTMlY1YzBGa2RtbGpaU3dnYm5Wc2JDd2dkSEoxWlNrN1hHNGdJQ0FnZlZ4dWZTSXNJbWx0Y0c5eWRDQjdVR0ZwY2xKbGNYVmxjM1FzSUV0bGVWSmxjM0J2Ym5ObExDQlRaV055WlhSelFXNWtTMlY1VW1WemNHOXVjMlY5SUdaeWIyMGdKeTR2VUdGcGNtbHVaeWM3WEc1cGJYQnZjblFnZTFObFkzSmxkSE45SUdaeWIyMGdKeTR2VTJWamNtVjBjeWM3WEc1cGJYQnZjblFnZTBOeWVYQjBiMzBnWm5KdmJTQW5MaTlEY25sd2RHOG5PMXh1YVcxd2IzSjBJSHRFYVdabWFXVklaV3hzYldGdWZTQm1jbTl0SUNjdUwwUnBabVpwWlVobGJHeHRZVzRuTzF4dVhHNHZMeUJVYUdseklHbHpJSFJvWlNCblpXNWxjbUYwYjNJZ2RYTmxaQ0JtYjNJZ1pHbG1abWxsTFdobGJHeHRZVzRnYVc0Z01qQTBPQzFpYVhRZ1RVOUVVQ0JIY205MWNDQXhOQ0JoY3lCd1pYSWdLR2gwZEhCek9pOHZkRzl2YkhNdWFXVjBaaTV2Y21jdmFIUnRiQzl5Wm1Nek5USTJJM05sWTNScGIyNHRNeWxjYm1WNGNHOXlkQ0JqYjI1emRDQkhSVTVGVWtGVVQxSWdQU0F5TzF4dVhHNHZMeUJVYUdseklHbHpJSFJvWlNCd2NtbHRaU0IxYzJWa0lHWnZjaUJrYVdabWFXVXRhR1ZzYkcxaGJpQjFjMmx1WnlBeU1EUTRMV0pwZENCTlQwUlFJRWR5YjNWd0lERTBJR0Z6SUhCbGNpQW9hSFIwY0hNNkx5OTBiMjlzY3k1cFpYUm1MbTl5Wnk5b2RHMXNMM0ptWXpNMU1qWWpjMlZqZEdsdmJpMHpLVnh1Wlhod2IzSjBJR052Ym5OMElFZFNUMVZRTVRSZk1qQTBPRjlDU1ZSZlRVOUVVQ0E5SUNkR1JrWkdSa1pHUmtaR1JrWkdSa1pHUXprd1JrUkJRVEl5TVRZNFF6SXpORU0wUXpZMk1qaENPREJFUXpGRFJERXlPVEF5TkVVd09EaEJOamREUXpjME1ESXdRa0pGUVRZelFqRXpPVUl5TWpVeE5FRXdPRGM1T0VVek5EQTBSRVJGUmprMU1UbENNME5FTTBFME16RkNNekF5UWpCQk5rUkdNalZHTVRRek56UkdSVEV6TlRaRU5rUTFNVU15TkRWRk5EZzFRalUzTmpZeU5VVTNSVU0yUmpRMFF6UXlSVGxCTmpNM1JVUTJRakJDUmtZMVEwSTJSalF3TmtJM1JVUkZSVE00TmtKR1FqVkJPRGs1UmtFMVFVVTVSakkwTVRFM1F6UkNNVVpGTmpRNU1qZzJOalV4UlVORk5EVkNNMFJETWpBd04wTkNPRUV4TmpOQ1JqQTFPVGhFUVRRNE16WXhRelUxUkRNNVFUWTVNVFl6UmtFNFJrUXlORU5HTlVZNE16WTFOVVF5TTBSRFFUTkJSRGsyTVVNMk1rWXpOVFl5TURnMU5USkNRamxGUkRVeU9UQTNOekE1TmprMk5rUTJOekJETXpVMFJUUkJRa001T0RBMFJqRTNORFpETURoRFFURTRNakUzUXpNeU9UQTFSVFEyTWtVek5rTkZNMEpGTXpsRk56Y3lRekU0TUVVNE5qQXpPVUl5TnpnelFUSkZRekEzUVRJNFJrSTFRelUxUkVZd05rWTBRelV5UXpsRVJUSkNRMEpHTmprMU5UZ3hOekU0TXprNU5UUTVOME5GUVRrMU5rRkZOVEUxUkRJeU5qRTRPVGhHUVRBMU1UQXhOVGN5T0VVMVFUaEJRVU5CUVRZNFJrWkdSa1pHUmtaR1JrWkdSa1pHUmljN1hHNWNiaTh2SUR4emRXMXRZWEo1UGx4dUx5OGdWR2hwY3lCemRHRjBhV01nWTJ4aGMzTWdhR1ZzY0hNZ2VXOTFJSGRwZEdnZ2RHaGxJSEJoYVhKcGJtY2djSEp2WTJWemN5QmhjeUJrYjJOMWJXVnVkR1ZrSUdobGNtVTZYRzR2THlCb2RIUndPaTh2ZDNkM0xuTnBiWEJzWlhCaGVXMWxiblJoY0drdVkyOXRMeU12WVhCcEwzQmhhWEpwYm1jdGNISnZZMlZ6YzF4dUx5OGdQQzl6ZFcxdFlYSjVQbHh1Wlhod2IzSjBJR05zWVhOeklGQmhhWEpwYm1kSVpXeHdaWElnZTF4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUVkbGJtVnlZWFJsY3lCaElIQmhhWEpwYm1jZ1VtVnhkV1Z6ZEM1Y2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1BISmxkSFZ5Ym5NK1RtVjNJRkJoYVhKU1pYRjFaWE4wUEM5eVpYUjFjbTV6UGx4dUlDQWdJSE4wWVhScFl5Qk9aWGRRWVdseVVtVnhkV1Z6ZENncElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJRWVdseVVtVnhkV1Z6ZENncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklFTmhiR04xYkdGMFpYTXZSMlZ1WlhKaGRHVnpJRk5sWTNKbGRITWdZVzVrSUV0bGVWSmxjM0J2Ym5ObElHZHBkbVZ1SUdGdUlHbHVZMjl0YVc1bklFdGxlVkpsY1hWbGMzUXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWEyVjVVbVZ4ZFdWemRGd2lQand2Y0dGeVlXMCtYRzRnSUNBZ0x5OGdQSEpsZEhWeWJuTStVMlZqY21WMGN5QmhibVFnUzJWNVVtVnpjRzl1YzJVZ2RHOGdjMlZ1WkNCaVlXTnJMand2Y21WMGRYSnVjejVjYmlBZ0lDQkhaVzVsY21GMFpWTmxZM0psZEhOQmJtUkxaWGxTWlhOd2IyNXpaU2hyWlhsU1pYRjFaWE4wS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JsYm1OUWRXSkJibVJUWldNZ1BTQjBhR2x6TGw5allXeGpkV3hoZEdWTmVWQjFZbXhwWTB0bGVVRnVaRk5sWTNKbGRDaHJaWGxTWlhGMVpYTjBMa0ZsYm1NcE8xeHVJQ0FnSUNBZ0lDQnNaWFFnUW1WdVl5QTlJR1Z1WTFCMVlrRnVaRk5sWXk1TmVWQjFZbXhwWTB0bGVUdGNiaUFnSUNBZ0lDQWdiR1YwSUZObGJtTWdQU0JsYm1OUWRXSkJibVJUWldNdVUyaGhjbVZrVTJWamNtVjBTMlY1TzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JvYldGalVIVmlRVzVrVTJWaklEMGdkR2hwY3k1ZlkyRnNZM1ZzWVhSbFRYbFFkV0pzYVdOTFpYbEJibVJUWldOeVpYUW9hMlY1VW1WeGRXVnpkQzVCYUcxaFl5azdYRzRnSUNBZ0lDQWdJR3hsZENCQ2FHMWhZeUE5SUdodFlXTlFkV0pCYm1SVFpXTXVUWGxRZFdKc2FXTkxaWGs3WEc0Z0lDQWdJQ0FnSUd4bGRDQlRhRzFoWXlBOUlHaHRZV05RZFdKQmJtUlRaV011VTJoaGNtVmtVMlZqY21WMFMyVjVPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnYkdWMElITmxZM0psZEhNZ1BTQnVaWGNnVTJWamNtVjBjeWhUWlc1akxDQlRhRzFoWXlrN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JyWlhsU1pYTndiMjV6WlNBOUlHNWxkeUJMWlhsU1pYTndiMjV6WlNoclpYbFNaWEYxWlhOMExsSmxjWFZsYzNSSlpDd2dRbVZ1WXl3Z1FtaHRZV01wTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVMlZqY21WMGMwRnVaRXRsZVZKbGMzQnZibk5sS0hObFkzSmxkSE1zSUd0bGVWSmxjM0J2Ym5ObEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlVkWEp1Y3lCaGJpQnBibU52YldsdVp5QmNJa0ZjSWlCMllXeDFaU0JtY205dElIUm9aU0JRYVc1UVlXUWdhVzUwYnlCMGFHVWdiM1YwWjI5cGJtY2dYQ0pDWENJZ2RtRnNkV1VnWEc0Z0lDQWdMeThnWVc1a0lIUm9aU0J6WldOeVpYUWdkbUZzZFdVZ2RYTnBibWNnUkdsbVptbGxTR1ZzYlcxaGJpQm9aV3h3WlhJdVhHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpZEdobGFYSlFkV0pzYVdOTFpYbGNJajVVYUdVZ2FXNWpiMjFwYm1jZ1FTQjJZV3gxWlR3dmNHRnlZVzArWEc0Z0lDQWdMeThnUEhKbGRIVnlibk0rV1c5MWNpQkNJSFpoYkhWbElHRnVaQ0IwYUdVZ1UyVmpjbVYwUEM5eVpYUjFjbTV6UGx4dUlDQWdJRjlqWVd4amRXeGhkR1ZOZVZCMVlteHBZMHRsZVVGdVpGTmxZM0psZENoMGFHVnBjbEIxWW14cFkwdGxlU2tnZTF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JrYVdabWFXVklaV3hzYldGdUlEMGdibVYzSUVScFptWnBaVWhsYkd4dFlXNG9LVHRjYmlBZ0lDQWdJQ0FnYkdWMElHMTVVSEpwZG1GMFpVSkpJRDBnWkdsbVptbGxTR1ZzYkcxaGJpNVNZVzVrYjIxUWNtbDJZWFJsUzJWNUtFZFNUMVZRTVRSZk1qQTBPRjlDU1ZSZlRVOUVVQ2s3WEc0Z0lDQWdJQ0FnSUd4bGRDQnRlVkIxWW14cFkwSkpJRDBnWkdsbVptbGxTR1ZzYkcxaGJpNVFkV0pzYVdOTFpYa29SMUpQVlZBeE5GOHlNRFE0WDBKSlZGOU5UMFJRTENCSFJVNUZVa0ZVVDFJc0lHMTVVSEpwZG1GMFpVSkpLVHRjYmlBZ0lDQWdJQ0FnYkdWMElITmxZM0psZEVKSklEMGdaR2xtWm1sbFNHVnNiRzFoYmk1VFpXTnlaWFFvUjFKUFZWQXhORjh5TURRNFgwSkpWRjlOVDBSUUxDQjBhR1ZwY2xCMVlteHBZMHRsZVN3Z2JYbFFjbWwyWVhSbFFra3BPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQnpaV055WlhRZ1BTQjBhR2x6TGtSSVUyVmpjbVYwVkc5VFVFbFRaV055WlhRb2MyVmpjbVYwUWtrcE8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVUhWaWJHbGpTMlY1UVc1a1UyVmpjbVYwS0cxNVVIVmliR2xqUWtrc0lITmxZM0psZENrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1EyOXVkbVZ5ZEhNZ2RHaGxJRVJJSUhObFkzSmxkQ0JDYVdkSmJuUmxaMlZ5SUdsdWRHOGdkR2hsSUdobGVDMXpkSEpwYm1jZ2RHOGdZbVVnZFhObFpDQmhjeUIwYUdVZ2MyVmpjbVYwTGx4dUlDQWdJQzh2SUZSb1pYSmxJR0Z5WlNCemIyMWxJRndpWjI5MFkyaDVZWE5jSWlCb1pYSmxJSGRvYVdOb0lHbHpJSGRvZVNCMGFHbHpJSEJwWldObElHOW1JSGR2Y21zZ2FYTWdZV0p6ZEhKaFkzUmxaQ0J6YnlCcGRDQmpZVzRnWW1VZ2RHVnpkR1ZrSUhObGNHRnlZWFJsYkhrdVhHNGdJQ0FnTHk4Z1UyVmxPaUJvZEhSd09pOHZkM2QzTG5OcGJYQnNaWEJoZVcxbGJuUmhjR2t1WTI5dEx5TXZZWEJwTDNCaGFYSnBibWN0Y0hKdlkyVnpjMXh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0luTmxZM0psZEVKSlhDSStVMlZqY21WMElHRnpJRUpwWjBsdWRHVm5aWEk4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh5WlhSMWNtNXpQbE5sWTNKbGRDQmhjeUJJWlhndFUzUnlhVzVuUEM5eVpYUjFjbTV6UGx4dUlDQWdJRVJJVTJWamNtVjBWRzlUVUVsVFpXTnlaWFFvYzJWamNtVjBLVnh1SUNBZ0lIc2dJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdTV1lnZEdobElHTmhiR04xYkdGMFpXUWdhR1Y0WVdSbFkybHRZV3dnYzJWamNtVjBJR1J2WlhOdUozUWdhR0YyWlNCaGJpQmxkbVZ1SUc1MWJXSmxjaUJ2WmlCamFHRnlZV04wWlhKekxDQjNaU0JoWkdRZ1lXNGdaWGgwY21FZ01DQjBieUIwYUdVZ2MzUmhjblF1SUZSb2FYTWdZV3hzYjNkeklGTklRUzB5TlRZZ2RHOGdiM0JsY21GMFpTQnZiaUIwYUdVZ2FHVjRZV1JsWTJsdFlXd2djMlZqY21WMElHRnpJR2xtSUdsMElIZGxjbVVnWVNCb1pYaGhaR1ZqYVcxaGJDQnlaWEJ5WlhObGJuUmhkR2x2YmlCdlppQmhJSE4wY21sdVp5NWNiaUFnSUNBZ0lDQWdhV1lnS0hObFkzSmxkQzVzWlc1bmRHZ2dKU0F5SUQwOVBTQXhLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxZM0psZENBOUlDY3dKeUFySUhObFkzSmxkRHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lITmxZM0psZENBOUlITmxZM0psZEM1d1lXUlRkR0Z5ZENnMU1USXNJQ2N3SnlrN1hHNWNiaUFnSUNBZ0lDQWdMeThnVjJVZ2MyaGhNalUySUhSb1lYUWdZbmwwWlNCaGNuSmhlU0JoYm1RZ2NtVjBkWEp1SUhSb1pTQm9aWGdnYzNSeWFXNW5JSEpsYzNWc2RGeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1EzSjVjSFJ2TGtkbGJtVnlZWFJsU0dGemFDaHpaV055WlhRcE8xeHVJQ0FnSUgxY2JuMWNibHh1THk4Z1BITjFiVzFoY25rK1hHNHZMeUJKYm5SbGNtNWhiQ0JJYjJ4a1pYSWdZMnhoYzNNZ1ptOXlJRkIxWW14cFl5QmhibVFnVTJWamNtVjBMQ0J6YnlCMGFHRjBJSGRsSUdOaGJpQjFjMlVnZEdobGJTQjBiMmRsZEdobGNpQnBiaUJ0WlhSb2IyUWdjMmxuYm1GMGRYSmxjeTRnWEc0dkx5QThMM04xYlcxaGNuaytYRzVsZUhCdmNuUWdZMnhoYzNNZ1VIVmliR2xqUzJWNVFXNWtVMlZqY21WMElIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHRlVkIxWW14cFkwdGxlU3dnYzJoaGNtVmtVMlZqY21WMFMyVjVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVUWGxRZFdKc2FXTkxaWGtnUFNCdGVWQjFZbXhwWTB0bGVUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VGFHRnlaV1JUWldOeVpYUkxaWGtnUFNCemFHRnlaV1JUWldOeVpYUkxaWGs3WEc0Z0lDQWdmVnh1ZlNJc0ltbHRjRzl5ZENCN1JYWmxiblJ6TENCTlpYTnpZV2RsZlNCbWNtOXRJQ2N1TDAxbGMzTmhaMlZ6Snp0Y2JtbHRjRzl5ZENCN1VIVnlZMmhoYzJWU1pYTndiMjV6WlgwZ1puSnZiU0FuTGk5UWRYSmphR0Z6WlNjN1hHNWNiaTh2SUR4emRXMXRZWEo1UGx4dUx5OGdWR2hwY3lCamJHRnpjeUJ5WlhCeVpYTmxiblJ6SUhSb1pTQkNhV3hzUkdWMFlXbHNjeUIwYUdGMElIUm9aU0JRVDFNZ2QybHNiQ0JpWlNCaGMydGxaQ0JtYjNJZ2RHaHliM1ZuYUc5MWRDQmhJRkJoZVVGMFZHRmliR1VnWm14dmR5NWNiaTh2SUR3dmMzVnRiV0Z5ZVQ1Y2JtVjRjRzl5ZENCamJHRnpjeUJDYVd4c1UzUmhkSFZ6VW1WemNHOXVjMlZjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lncElIdGNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklGTmxkQ0IwYUdseklFVnljbTl5SUdGalkyOXlaR2x1WjJ4NUlHbG1JSGx2ZFNCaGNtVWdibTkwSUdGaWJHVWdkRzhnY21WMGRYSnVJSFJvWlNCQ2FXeHNSR1YwWVdsc2N5QjBhR0YwSUhkbGNtVWdZWE5yWldRZ1puSnZiU0I1YjNVdVhHNGdJQ0FnSUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnZEdocGN5NVNaWE4xYkhRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUZSb2FYTWdhWE1nWVNCMWJtbHhkV1VnYVdSbGJuUnBabWxsY2lCMGFHRjBJSGx2ZFNCaGMzTnBaMjRnZEc4Z1pXRmphQ0JpYVd4c0xseHVJQ0FnSUNBZ0lDQXZMeUJKZENCdGFXZDBJR0psSUdadmNpQmxlR0Z0Y0d4bExDQjBhR1VnZEdsdFpYTjBZVzF3SUc5bUlIZG9aVzRnZEdobElHTnZkbVZ5SUhkaGN5QnZjR1Z1WldRdVhHNGdJQ0FnSUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnZEdocGN5NUNhV3hzU1dRZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUZSb2FYTWdhWE1nZEdobElIUmhZbXhsSUdsa0lIUm9ZWFFnZEdocGN5QmlhV3hzSUhkaGN5Qm1iM0l1WEc0Z0lDQWdJQ0FnSUM4dklGUm9aU0IzWVdsMFpYSWdkMmxzYkNCbGJuUmxjaUJwZENCdmJpQjBhR1VnUldaMGNHOXpJR0YwSUhSb1pTQnpkR0Z5ZENCdlppQjBhR1VnVUdGNVFYUlVZV0pzWlNCbWJHOTNJR0Z1WkNCMGFHVWdSV1owY0c5eklIZHBiR3dnWEc0Z0lDQWdJQ0FnSUM4dklISmxkSEpwWlhabElIUm9aU0JpYVd4c0lIVnphVzVuSUhSb1pTQjBZV0pzWlNCcFpDNGdYRzRnSUNBZ0lDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVVWVdKc1pVbGtJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxrOXdaWEpoZEc5eVNXUWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklGUm9aU0JVYjNSaGJDQkJiVzkxYm5RZ2IyNGdkR2hwY3lCaWFXeHNMQ0JwYmlCalpXNTBjeTVjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQjBhR2x6TGxSdmRHRnNRVzF2ZFc1MElEMGdNRHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQXZMeUJVYUdVZ1kzVnljbVZ1ZEd4NUlHOTFkSE5oYm1ScGJtY2dZVzF2ZFc1MElHOXVJSFJvYVhNZ1ltbHNiQ3dnYVc0Z1kyVnVkSE11WEc0Z0lDQWdJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBZ0lDQWdkR2hwY3k1UGRYUnpkR0Z1WkdsdVowRnRiM1Z1ZENBOUlEQTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lDOHZJRmx2ZFhJZ1VFOVRJR2x6SUhKbGNYVnBjbVZrSUhSdklIQmxjbk5wYzNRZ2MyOXRaU0J6ZEdGMFpTQnZiaUJpWldoaGJHWWdiMllnZEdobElFVm1kSEJ2Y3lCemJ5QjBhR1VnUldaMGNHOXpJR05oYmlCeVpXTnZkbVZ5SUhOMFlYUmxMbHh1SUNBZ0lDQWdJQ0F2THlCSmRDQnBjeUJxZFhOMElHRWdjR2xsWTJVZ2IyWWdjM1J5YVc1bklIUm9ZWFFnZVc5MUlITmhkbVVnWVdkaGFXNXpkQ0I1YjNWeUlHSnBiR3hKWkM1Y2JpQWdJQ0FnSUNBZ0x5OGdWMGhsYm1WMlpYSWdlVzkxSjNKbElHRnphMlZrSUdadmNpQkNhV3hzUkdWMFlXbHNjeXdnYldGclpTQnpkWEpsSUhsdmRTQnlaWFIxY200Z2RHaHBjeUJ3YVdWalpTQnZaaUJrWVhSaElHbG1JSGx2ZFNCb1lYWmxJR2wwTGx4dUlDQWdJQ0FnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVFtbHNiRVJoZEdFZ1BTQmNJbHdpTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2RsZEVKcGJHeFFZWGx0Wlc1MFNHbHpkRzl5ZVNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVFtbHNiRVJoZEdFcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJiWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdiR1YwSUdKcGJHeFFZWGx0Wlc1MFNHbHpkRzl5ZVNBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2MyRjJaV1JDYVd4c1JHRjBZU0E5SUVwVFQwNHVjR0Z5YzJVb2RHaHBjeTVDYVd4c1JHRjBZU2s3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOaGRtVmtRbWxzYkVSaGRHRXViV0Z3S0NoaWFXeHNLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCaGVXMWxiblJJYVhOMGIzSjVSVzUwY25rb1ltbHNiQzV3WVhsdFpXNTBYM1I1Y0dVc0lHSnBiR3d1Y0dGNWJXVnVkRjl6ZFcxdFlYSjVLVHRjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJRlJ2UW1sc2JFUmhkR0VvY0dncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFppQW9jR2d1YkdWdVozUm9JRHdnTVNsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRndpWENJN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdTbE5QVGk1emRISnBibWRwWm5rb2NHZ3BPMXh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0JVYjAxbGMzTmhaMlVvYldWemMyRm5aVWxrS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUmhkR0VnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5OMVkyTmxjM05jSWpvZ2RHaHBjeTVTWlhOMWJIUTlQVUpwYkd4U1pYUnlhV1YyWVd4U1pYTjFiSFF1VTFWRFEwVlRVMXh1SUNBZ0lDQWdJQ0I5TzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVFtbHNiRWxrS1NCa1lYUmhMbUpwYkd4ZmFXUWdQU0IwYUdsekxrSnBiR3hKWkR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVZHRmliR1ZKWkNrZ1pHRjBZUzUwWVdKc1pWOXBaQ0E5SUhSb2FYTXVWR0ZpYkdWSlpEdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVTWlhOMWJIUWdQVDBnUW1sc2JGSmxkSEpwWlhaaGJGSmxjM1ZzZEM1VFZVTkRSVk5US1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaExtSnBiR3hmZEc5MFlXeGZZVzF2ZFc1MElEMGdkR2hwY3k1VWIzUmhiRUZ0YjNWdWREdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSaGRHRXVZbWxzYkY5dmRYUnpkR0Z1WkdsdVoxOWhiVzkxYm5RZ1BTQjBhR2x6TGs5MWRITjBZVzVrYVc1blFXMXZkVzUwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVM1aWFXeHNYM0JoZVcxbGJuUmZhR2x6ZEc5eWVTQTlJSFJvYVhNdVoyVjBRbWxzYkZCaGVXMWxiblJJYVhOMGIzSjVLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoTG1WeWNtOXlYM0psWVhOdmJpQTlJSFJvYVhNdVVtVnpkV3gwTG5SdlUzUnlhVzVuS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaExtVnljbTl5WDJSbGRHRnBiQ0E5SUhSb2FYTXVVbVZ6ZFd4MExuUnZVM1J5YVc1bktDazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFMWxjM05oWjJVb2JXVnpjMkZuWlVsa0xDQkZkbVZ1ZEhNdVVHRjVRWFJVWVdKc1pVSnBiR3hFWlhSaGFXeHpMQ0JrWVhSaExDQjBjblZsS1R0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCQ2FXeHNVbVYwY21sbGRtRnNVbVZ6ZFd4MElEMGdYRzU3WEc0Z0lDQWdVMVZEUTBWVFV6b2dKMU5WUTBORlUxTW5MRnh1SUNBZ0lFbE9Wa0ZNU1VSZlZFRkNURVZmU1VRNklDZEpUbFpCVEVsRVgxUkJRa3hGWDBsRUp5eGNiaUFnSUNCSlRsWkJURWxFWDBKSlRFeGZTVVE2SUNkSlRsWkJURWxFWDBKSlRFeGZTVVFuTEZ4dUlDQWdJRWxPVmtGTVNVUmZUMUJGVWtGVVQxSmZTVVE2SUNkSlRsWkJURWxFWDA5UVJWSkJWRTlTWDBsRUoxeHVmVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJRkJoZVcxbGJuUlVlWEJsSUQwZ1hHNTdYRzRnSUNBZ1EwRlNSRG9nSjBOQlVrUW5MRnh1SUNBZ0lFTkJVMGc2SUNkRFFWTklKeUJjYm4wN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCQ2FXeHNVR0Y1YldWdWRGeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBibU52YldsdVowRmtkbWxqWlNBOUlHMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVFtbHNiRWxrSUQwZ2RHaHBjeTVmYVc1amIyMXBibWRCWkhacFkyVXVSR0YwWVZ0Y0ltSnBiR3hmYVdSY0lsMDdYRzRnSUNBZ0lDQWdJSFJvYVhNdVZHRmliR1ZKWkNBOUlIUm9hWE11WDJsdVkyOXRhVzVuUVdSMmFXTmxMa1JoZEdGYlhDSjBZV0pzWlY5cFpGd2lYVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVBjR1Z5WVhSdmNrbGtJRDBnZEdocGN5NWZhVzVqYjIxcGJtZEJaSFpwWTJVdVJHRjBZVnRjSW05d1pYSmhkRzl5WDJsa1hDSmRPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsQmhlVzFsYm5SR2JHOTNVM1JoY25SbFpDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQjJZWElnY0hRZ1BTQjBhR2x6TGw5cGJtTnZiV2x1WjBGa2RtbGpaUzVFWVhSaFcxd2ljR0Y1YldWdWRGOTBlWEJsWENKZE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxCaGVXMWxiblJVZVhCbElEMGdjSFE3WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBdkx5QjBhR2x6SUdseklIZG9aVzRnZDJVZ2NHeDVJSFJvWlNCemRXSWdiMkpxWldOMElGd2ljR0Y1YldWdWRGOWtaWFJoYVd4elhDSWdhVzUwYnlCaElIQjFjbU5vWVhObElISmxjM0J2Ym5ObElHWnZjaUJqYjI1MlpXNXBaVzVqWlM1Y2JpQWdJQ0FnSUNBZ2RtRnlJSEIxY21Ob1lYTmxUWE5uSUQwZ2JtVjNJRTFsYzNOaFoyVW9iUzVKWkN3Z1hDSndZWGx0Wlc1MFgyUmxkR0ZwYkhOY0lpd2diUzVFWVhSaFcxd2ljR0Y1YldWdWRGOWtaWFJoYVd4elhDSmRMQ0JtWVd4elpTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVIVnlZMmhoYzJWU1pYTndiMjV6WlNBOUlHNWxkeUJRZFhKamFHRnpaVkpsYzNCdmJuTmxLSEIxY21Ob1lYTmxUWE5uS1R0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGxCMWNtTm9ZWE5sUVcxdmRXNTBJRDBnZEdocGN5NVFkWEpqYUdGelpWSmxjM0J2Ym5ObExrZGxkRkIxY21Ob1lYTmxRVzF2ZFc1MEtDazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVZHbHdRVzF2ZFc1MElEMGdkR2hwY3k1UWRYSmphR0Z6WlZKbGMzQnZibk5sTGtkbGRGUnBjRUZ0YjNWdWRDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsTjFjbU5vWVhKblpVRnRiM1Z1ZENBOUlIUm9hWE11VUhWeVkyaGhjMlZTWlhOd2IyNXpaUzVIWlhSVGRYSmphR0Z5WjJWQmJXOTFiblFvS1R0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCUVlYbHRaVzUwU0dsemRHOXllVVZ1ZEhKNVhHNTdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9jR0Y1YldWdWRGUjVjR1VzSUhCaGVXMWxiblJUZFcxdFlYSjVLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UVlYbHRaVzUwVkhsd1pTQTlJSEJoZVcxbGJuUlVlWEJsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbEJoZVcxbGJuUlRkVzF0WVhKNUlEMGdjR0Y1YldWdWRGTjFiVzFoY25rN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEc5S1UwOU9LQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Y1YldWdWRGOTBlWEJsT2lCMGFHbHpMbEJoZVcxbGJuUlVlWEJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR0Y1YldWdWRGOXpkVzF0WVhKNU9pQjBhR2x6TGxCaGVXMWxiblJUZFcxdFlYSjVYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUVkbGRGUmxjbTFwYm1Gc1VtVm1TV1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVVHRjViV1Z1ZEZOMWJXMWhjbmxiWENKMFpYSnRhVzVoYkY5eVpXWmZhV1JjSWwwN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VHRjVRWFJVWVdKc1pVTnZibVpwWjF4dWUxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsQmhlVUYwVkdGaWJHVkZibUZpYkdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VDNCbGNtRjBiM0pKWkVWdVlXSnNaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVRjR3hwZEVKNVFXMXZkVzUwUlc1aFlteGxaQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrVnhkV0ZzVTNCc2FYUkZibUZpYkdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VkdGaWJHVlNaWFJ5YVdWMllXeEZibUZpYkdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnSUZ4dUlDQWdJQ0FnSUNCMGFHbHpMbFJwY0hCcGJtZEZibUZpYkdWa0lEMGdabUZzYzJVN1hHNGdJQ0FnWEc0Z0lDQWdJQ0FnSUhSb2FYTXVVM1Z0YldGeWVWSmxjRzl5ZEVWdVlXSnNaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQmNiaUFnSUNBZ0lDQWdkR2hwY3k1TVlXSmxiRkJoZVVKMWRIUnZiaUE5SUNjbk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGt4aFltVnNUM0JsY21GMGIzSkpaQ0E5SUNjbk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGt4aFltVnNWR0ZpYkdWSlpDQTlJQ2NuTzF4dUlDQWdJRnh1SUNBZ0lDQWdJQ0F2THlCY2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUVacGJHd2dhVzRnZDJsMGFDQnZjR1Z5WVhSdmNpQnBaSE1nZEdoaGRDQjBhR1VnWldaMGNHOXpJSFJsY20xcGJtRnNJSGRwYkd3Z2RtRnNhV1JoZEdVZ1lXZGhhVzV6ZEM0Z1hHNGdJQ0FnSUNBZ0lDOHZJRXhsWVhabElFVnRjSFI1SUhSdklHRnNiRzkzSUdGdWVTQnZjR1Z5WVhSdmNsOXBaQ0IwYUhKdmRXZG9MaUJjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lIUm9hWE11UVd4c2IzZGxaRTl3WlhKaGRHOXlTV1J6SUQwZ1cxMDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ZHOU5aWE56WVdkbEtHMWxjM05oWjJWSlpDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWVhSaElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSndZWGxmWVhSZmRHRmliR1ZmWlc1aFlteGxaRndpT2lCMGFHbHpMbEJoZVVGMFZHRmliR1ZGYm1GaWJHVmtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSnZjR1Z5WVhSdmNsOXBaRjlsYm1GaWJHVmtYQ0k2SUhSb2FYTXVUM0JsY21GMGIzSkpaRVZ1WVdKc1pXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCY0luTndiR2wwWDJKNVgyRnRiM1Z1ZEY5bGJtRmliR1ZrWENJNklIUm9hWE11VTNCc2FYUkNlVUZ0YjNWdWRFVnVZV0pzWldRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW1WeGRXRnNYM053YkdsMFgyVnVZV0pzWldSY0lqb2dkR2hwY3k1RmNYVmhiRk53YkdsMFJXNWhZbXhsWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpZEdsd2NHbHVaMTlsYm1GaWJHVmtYQ0k2SUhSb2FYTXVWR2x3Y0dsdVowVnVZV0pzWldRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5OMWJXMWhjbmxmY21Wd2IzSjBYMlZ1WVdKc1pXUmNJam9nZEdocGN5NVRkVzF0WVhKNVVtVndiM0owUlc1aFlteGxaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2ljR0Y1WDJKMWRIUnZibDlzWVdKbGJGd2lPaUIwYUdsekxreGhZbVZzVUdGNVFuVjBkRzl1TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p2Y0dWeVlYUnZjbDlwWkY5c1lXSmxiRndpT2lCMGFHbHpMa3hoWW1Wc1QzQmxjbUYwYjNKSlpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWRHRmliR1ZmYVdSZmJHRmlaV3hjSWpvZ2RHaHBjeTVNWVdKbGJGUmhZbXhsU1dRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW05d1pYSmhkRzl5WDJsa1gyeHBjM1JjSWpvZ2RHaHBjeTVCYkd4dmQyVmtUM0JsY21GMGIzSkpaSE1zWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJblJoWW14bFgzSmxkSEpwWlhaaGJGOWxibUZpYkdWa1hDSTZJSFJvYVhNdVZHRmliR1ZTWlhSeWFXVjJZV3hGYm1GaWJHVmtMRnh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z6YzJGblpTaHRaWE56WVdkbFNXUXNJRVYyWlc1MGN5NVFZWGxCZEZSaFlteGxVMlYwVkdGaWJHVkRiMjVtYVdjc0lHUmhkR0VzSUhSeWRXVXBPMXh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0J6ZEdGMGFXTWdSbVZoZEhWeVpVUnBjMkZpYkdWTlpYTnpZV2RsS0cxbGMzTmhaMlZKWkNrZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFlTQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2ljR0Y1WDJGMFgzUmhZbXhsWDJWdVlXSnNaV1JjSWpvZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnZlR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtHMWxjM05oWjJWSlpDd2dSWFpsYm5SekxsQmhlVUYwVkdGaWJHVlRaWFJVWVdKc1pVTnZibVpwWnl3Z1pHRjBZU3dnZEhKMVpTazdYRzRnSUNBZ2ZWeHVmVnh1WEc0dkx5QThjM1Z0YldGeWVUNWNiaTh2SUZSb1pYTmxJR0YwZEhKcFluVjBaWE1nZDI5eWF5Qm1iM0lnUTA5TklHbHVkR1Z5YjNBdVhHNHZMeUE4TDNOMWJXMWhjbmsrWEc1bGVIQnZjblFnWTJ4aGMzTWdSMlYwVDNCbGJsUmhZbXhsYzFKbGMzQnZibk5sWEc1N1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb0tTQjdYRzRnSUNBZ0lDQWdJQzh2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OHZJRmx2ZFhJZ1VFOVRJR2x6SUhKbGNYVnBjbVZrSUhSdklIQmxjbk5wYzNRZ2MyOXRaU0J6ZEdGMFpTQnZiaUJpWldoaGJHWWdiMllnZEdobElFVm1kSEJ2Y3lCemJ5QjBhR1VnUldaMGNHOXpJR05oYmlCeVpXTnZkbVZ5SUhOMFlYUmxMbHh1SUNBZ0lDQWdJQ0F2THk4Z1NYUWdhWE1nYW5WemRDQmhJSEJwWldObElHOW1JSE4wY21sdVp5QjBhR0YwSUhsdmRTQnpZWFpsSUdGbllXbHVjM1FnZVc5MWNpQnZjR1Z5WVhSdmNrbGtMbHh1SUNBZ0lDQWdJQ0F2THk4Z1YyaGxibVYyWlhJZ2VXOTFKM0psSUdGemEyVmtJR1p2Y2lCUGNHVnVWR0ZpYkdWekxDQnRZV3RsSUhOMWNtVWdlVzkxSUhKbGRIVnliaUIwYUdseklIQnBaV05sSUc5bUlHUmhkR0VnYVdZZ2VXOTFJR2hoZG1VZ2FYUXVYRzRnSUNBZ0lDQWdJQzh2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lIUm9hWE11VkdGaWJHVkVZWFJoSUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJQY0dWdVZHRmliR1Z6S0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1VVlXSnNaVVJoZEdFcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJiWFR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQktVMDlPTG5CaGNuTmxLSFJvYVhNdVZHRmliR1ZFWVhSaEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCVWIwMWxjM05oWjJVb2JXVnpjMkZuWlVsa0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JoZEdFZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFlXSnNaWE02SUhSb2FYTXVSMlYwVDNCbGJsUmhZbXhsY3lncFhHNGdJQ0FnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCTlpYTnpZV2RsS0cxbGMzTmhaMlZKWkN3Z1JYWmxiblJ6TGxCaGVVRjBWR0ZpYkdWUGNHVnVWR0ZpYkdWekxDQmtZWFJoTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JpOHZJRHh6ZFcxdFlYSjVQbHh1THk4Z1ZHaGxjMlVnWVhSMGNtbGlkWFJsY3lCM2IzSnJJR1p2Y2lCRFQwMGdhVzUwWlhKdmNDNWNiaTh2SUR3dmMzVnRiV0Z5ZVQ1Y2JtVjRjRzl5ZENCamJHRnpjeUJQY0dWdVZHRmliR1Z6Ulc1MGNubGNibnRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWdwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVVWVdKc1pVbGtJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1TVlXSmxiQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVFtbHNiRTkxZEhOMFlXNWthVzVuUVcxdmRXNTBJRDBnYm5Wc2JEdGNiaUFnSUNCOVhHNWNiaUFnSUNCMGIwcFRUMDRvS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWVdKc1pWOXBaRG9nZEdocGN5NVVZV0pzWlVsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdGaVpXdzZJSFJvYVhNdVRHRmlaV3dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmlhV3hzWDI5MWRITjBZVzVrYVc1blgyRnRiM1Z1ZERvZ2RHaHBjeTVDYVd4c1QzVjBjM1JoYm1ScGJtZEJiVzkxYm5SY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JuMWNibHh1THk4dklEeHpkVzF0WVhKNVBseHVMeTh2SUZSb1pYTmxJR0YwZEhKcFluVjBaWE1nZDI5eWF5Qm1iM0lnUTA5TklHbHVkR1Z5YjNBdVhHNHZMeThnUEM5emRXMXRZWEo1UGx4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nUW1sc2JGQmhlVzFsYm5SR2JHOTNSVzVrWldSU1pYTndiMjV6WlZ4dWUxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHMHBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGtKcGJHeEpaQ0E5SUcwdVJHRjBZUzVpYVd4c1gybGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrSnBiR3hQZFhSemRHRnVaR2x1WjBGdGIzVnVkQ0E5SUcwdVJHRjBZUzVpYVd4c1gyOTFkSE4wWVc1a2FXNW5YMkZ0YjNWdWREdGNiaUFnSUNBZ0lDQWdkR2hwY3k1Q2FXeHNWRzkwWVd4QmJXOTFiblFnUFNCdExrUmhkR0V1WW1sc2JGOTBiM1JoYkY5aGJXOTFiblE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVUM0JsY21GMGIzSkpaQ0E5SUcwdVJHRjBZUzV2Y0dWeVlYUnZjbDlwWkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVVWVdKc1pVbGtJRDBnYlM1RVlYUmhMblJoWW14bFgybGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTmhjbVJVYjNSaGJFTnZkVzUwSUQwZ2JTNUVZWFJoTG1OaGNtUmZkRzkwWVd4ZlkyOTFiblE3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMkZ5WkZSdmRHRnNRVzF2ZFc1MElEMGdiUzVFWVhSaExtTmhjbVJmZEc5MFlXeGZZVzF2ZFc1ME8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOaGMyaFViM1JoYkVOdmRXNTBJRDBnYlM1RVlYUmhMbU5oYzJoZmRHOTBZV3hmWTI5MWJuUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyRnphRlJ2ZEdGc1FXMXZkVzUwSUQwZ2JTNUVZWFJoTG1OaGMyaGZkRzkwWVd4ZllXMXZkVzUwTzF4dUlDQWdJSDFjYm4xY2JpSXNJbWx0Y0c5eWRDQjdVbVZ4ZFdWemRFbGtTR1ZzY0dWeWZTQm1jbTl0SUNjdUwxSmxjWFZsYzNSSlpFaGxiSEJsY2ljN1hHNXBiWEJ2Y25RZ2UwVjJaVzUwY3l3Z1RXVnpjMkZuWlgwZ1puSnZiU0FuTGk5TlpYTnpZV2RsY3ljN1hHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCUWIyNW5TR1ZzY0dWeVhHNTdYRzRnSUNBZ2MzUmhkR2xqSUVkbGJtVnlZWFJsVUc5dVoxSmxjM053YjI1elpTaHdhVzVuS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCTlpYTnpZV2RsS0hCcGJtY3VTV1FzSUVWMlpXNTBjeTVRYjI1bkxDQnVkV3hzTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJRYVc1blNHVnNjR1Z5WEc1N1hHNGdJQ0FnYzNSaGRHbGpJRWRsYm1WeVlYUmxVR2x1WjFKbGNYVmxjM1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCTlpYTnpZV2RsS0ZKbGNYVmxjM1JKWkVobGJIQmxjaTVKWkNoY0luQnBibWRjSWlrc0lFVjJaVzUwY3k1UWFXNW5MQ0J1ZFd4c0xDQjBjblZsS1R0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMDFsYzNOaFoyVXNJRVYyWlc1MGN5d2dVM1ZqWTJWemMxTjBZWFJsZlNCbWNtOXRJQ2N1TDAxbGMzTmhaMlZ6Snp0Y2JtbHRjRzl5ZENCN1VtVnhkV1Z6ZEVsa1NHVnNjR1Z5ZlNCbWNtOXRJQ2N1TDFKbGNYVmxjM1JKWkVobGJIQmxjaWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJUWlhSUWIzTkpibVp2VW1WeGRXVnpkRnh1ZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0habGNuTnBiMjRzSUhabGJtUnZja2xrTENCc2FXSnlZWEo1VEdGdVozVmhaMlVzSUd4cFluSmhjbmxXWlhKemFXOXVMQ0J2ZEdobGNrbHVabThwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOTJaWEp6YVc5dUlEMGdkbVZ5YzJsdmJqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRtVnVaRzl5U1dRZ1BTQjJaVzVrYjNKSlpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHbGljbUZ5ZVV4aGJtZDFZV2RsSUQwZ2JHbGljbUZ5ZVV4aGJtZDFZV2RsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzYVdKeVlYSjVWbVZ5YzJsdmJpQTlJR3hwWW5KaGNubFdaWEp6YVc5dU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dmRHaGxja2x1Wm04Z1BTQnZkR2hsY2tsdVptODdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2RHOU5aWE56WVdkbEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWVhSaElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXpYM1psY25OcGIyNDZJSFJvYVhNdVgzWmxjbk5wYjI0c1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNOZmRtVnVaRzl5WDJsa09pQjBhR2x6TGw5MlpXNWtiM0pKWkN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hwWW5KaGNubGZiR0Z1WjNWaFoyVTZJSFJvYVhNdVgyeHBZbkpoY25sTVlXNW5kV0ZuWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hwWW5KaGNubGZkbVZ5YzJsdmJqb2dkR2hwY3k1ZmJHbGljbUZ5ZVZabGNuTnBiMjRzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnZkR2hsY2w5cGJtWnZPaUIwYUdsekxsOXZkR2hsY2tsdVptOWNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFMWxjM05oWjJVb1VtVnhkV1Z6ZEVsa1NHVnNjR1Z5TGtsa0tGd2ljSEpoZGx3aUtTd2dSWFpsYm5SekxsTmxkRkJ2YzBsdVptOVNaWEYxWlhOMExDQmtZWFJoTENCMGNuVmxLVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJUWlhSUWIzTkpibVp2VW1WemNHOXVjMlZjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lodEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNWalkyVnpjeUE5SUcwdVIyVjBVM1ZqWTJWemMxTjBZWFJsS0NrZ1BUMGdVM1ZqWTJWemMxTjBZWFJsTGxOMVkyTmxjM003WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjBnUFNCdE8xeHVJQ0FnSUgxY2JpQWdJQ0JwYzFOMVkyTmxjM01vS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTjFZMk5sYzNNN1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZEVWeWNtOXlVbVZoYzI5dUtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVaWEp5YjNKZmNtVmhjMjl1TzF4dUlDQWdJSDFjYmlBZ0lDQm5aWFJGY25KdmNrUmxkR0ZwYkNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExtVnljbTl5WDJSbGRHRnBiRHRjYmlBZ0lDQjlYRzRnSUNBZ1oyVjBVbVZ6Y0c5dWMyVldZV3gxWlZkcGRHaEJkSFJ5YVdKMWRHVW9ZWFIwY21saWRYUmxLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZVnRoZEhSeWFXSjFkR1ZkTzF4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUVSbGRtbGpaVWx1Wm05Y2JudGNiaUFnSUNCemRHRjBhV01nUjJWMFFYQndSR1YyYVdObFNXNW1ieWdwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHVjJhV05sU1c1bWJ5QTlJSHQ5TzF4dUlDQWdJQ0FnSUNCa1pYWnBZMlZKYm1adld5ZGtaWFpwWTJWZmMzbHpkR1Z0SjEwZ1BTQnVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBPMXh1SUNBZ0lDQWdJQ0F2THlCa1pYWnBZMlZKYm1adkxrRmtaQ2hjSW1SbGRtbGpaVjl6ZVhOMFpXMWNJaXdnUlc1MmFYSnZibTFsYm5RdVQxTldaWEp6YVc5dUxsQnNZWFJtYjNKdExsUnZVM1J5YVc1bktDa2dLeUJjSWlCY0lpQXJJRVZ1ZG1seWIyNXRaVzUwTGs5VFZtVnljMmx2Ymk1V1pYSnphVzl1TGxSdlUzUnlhVzVuS0NrcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHVjJhV05sU1c1bWJ6dGNiaUFnSUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZTFKbGNYVmxjM1JKWkVobGJIQmxjbjBnWm5KdmJTQW5MaTlTWlhGMVpYTjBTV1JJWld4d1pYSW5PMXh1YVcxd2IzSjBJSHROWlhOellXZGxmU0JtY205dElDY3VMMDFsYzNOaFoyVnpKenRjYm1sdGNHOXlkQ0I3VUhWeVkyaGhjMlZTWlhOd2IyNXpaWDBnWm5KdmJTQW5MaTlRZFhKamFHRnpaU2M3WEc1cGJYQnZjblFnZTFOd2FVTnZibVpwWnl3Z1ZISmhibk5oWTNScGIyNVBjSFJwYjI1emZTQm1jbTl0SUNjdUwxTndhVTF2WkdWc2N5YzdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlFjbVZoZFhSb1JYWmxiblJ6SUQwZ1hHNTdYRzRnSUNBZ1FXTmpiM1Z1ZEZabGNtbG1lVkpsY1hWbGMzUTZJRndpWVdOamIzVnVkRjkyWlhKcFpubGNJaXhjYmlBZ0lDQkJZMk52ZFc1MFZtVnlhV1o1VW1WemNHOXVjMlU2SUZ3aVlXTmpiM1Z1ZEY5MlpYSnBabmxmY21WemNHOXVjMlZjSWl4Y2JpQWdJQ0JjYmlBZ0lDQlFjbVZoZFhSb1QzQmxibEpsY1hWbGMzUWdPaUJjSW5CeVpXRjFkR2hjSWl4Y2JpQWdJQ0JRY21WaGRYUm9UM0JsYmxKbGMzQnZibk5sSURvZ1hDSndjbVZoZFhSb1gzSmxjM0J2Ym5ObFhDSXNYRzVjYmlBZ0lDQlFjbVZoZFhSb1ZHOXdkWEJTWlhGMVpYTjBPaUJjSW5CeVpXRjFkR2hmZEc5d2RYQmNJaXhjYmlBZ0lDQlFjbVZoZFhSb1ZHOXdkWEJTWlhOd2IyNXpaVG9nWENKd2NtVmhkWFJvWDNSdmNIVndYM0psYzNCdmJuTmxYQ0lzWEc1Y2JpQWdJQ0JRY21WaGRYUm9SWGgwWlc1a1VtVnhkV1Z6ZERvZ1hDSndjbVZoZFhSb1gyVjRkR1Z1WkZ3aUxGeHVJQ0FnSUZCeVpXRjFkR2hGZUhSbGJtUlNaWE53YjI1elpUb2dYQ0p3Y21WaGRYUm9YMlY0ZEdWdVpGOXlaWE53YjI1elpWd2lMRnh1WEc0Z0lDQWdVSEpsWVhWMGFGQmhjblJwWVd4RFlXNWpaV3hzWVhScGIyNVNaWEYxWlhOMElEb2dYQ0p3Y21WaGRYUm9YM0JoY25ScFlXeGZZMkZ1WTJWc2JHRjBhVzl1WENJc1hHNGdJQ0FnVUhKbFlYVjBhRkJoY25ScFlXeERZVzVqWld4c1lYUnBiMjVTWlhOd2IyNXpaU0E2SUZ3aWNISmxZWFYwYUY5d1lYSjBhV0ZzWDJOaGJtTmxiR3hoZEdsdmJsOXlaWE53YjI1elpWd2lMRnh1SUNBZ0lGeHVJQ0FnSUZCeVpXRjFkR2hEWVc1alpXeHNZWFJwYjI1U1pYRjFaWE4wSURvZ1hDSndjbVZoZFhSb1gyTmhibU5sYkd4aGRHbHZibHdpTEZ4dUlDQWdJRkJ5WldGMWRHaERZVzVqWld4c1lYUnBiMjVTWlhOd2IyNXpaU0E2SUZ3aWNISmxZWFYwYUY5allXNWpaV3hzWVhScGIyNWZjbVZ6Y0c5dWMyVmNJaXhjYmx4dUlDQWdJRkJ5WldGMWRHaERiMjF3YkdWMFpWSmxjWFZsYzNRZ09pQmNJbU52YlhCc1pYUnBiMjVjSWl4Y2JpQWdJQ0JRY21WaGRYUm9RMjl0Y0d4bGRHVlNaWE53YjI1elpTQTZJRndpWTI5dGNHeGxkR2x2Ymw5eVpYTndiMjV6WlZ3aVhHNTlPMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdRV05qYjNWdWRGWmxjbWxtZVZKbGNYVmxjM1JjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lod2IzTlNaV1pKWkNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVRzl6VW1WbVNXUWdQU0J3YjNOU1pXWkpaRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlViMDFsYzNOaFoyVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbkJ2YzE5eVpXWmZhV1JjSWpvZ2RHaHBjeTVRYjNOU1pXWkpaRnh1SUNBZ0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z6YzJGblpTaFNaWEYxWlhOMFNXUklaV3h3WlhJdVNXUW9YQ0p3Y21GMlhDSXBMQ0JRY21WaGRYUm9SWFpsYm5SekxrRmpZMjkxYm5SV1pYSnBabmxTWlhGMVpYTjBMQ0JrWVhSaExDQjBjblZsS1R0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCQlkyTnZkVzUwVm1WeWFXWjVVbVZ6Y0c5dWMyVmNibnRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUVaWFJoYVd4eklEMGdibVYzSUZCMWNtTm9ZWE5sVW1WemNHOXVjMlVvYlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUc5elVtVm1TV1FnUFNCMGFHbHpMa1JsZEdGcGJITXVVRzl6VW1WbVNXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMGdQU0J0TzF4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUZCeVpXRjFkR2hQY0dWdVVtVnhkV1Z6ZEZ4dWUxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHRnRiM1Z1ZEVObGJuUnpMQ0J3YjNOU1pXWkpaQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQndiM05TWldaSlpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWNtVmhkWFJvUVcxdmRXNTBJRDBnWVcxdmRXNTBRMlZ1ZEhNN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5JRDBnYm1WM0lGTndhVU52Ym1acFp5Z3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrOXdkR2x2Ym5NZ1BTQnVaWGNnVkhKaGJuTmhZM1JwYjI1UGNIUnBiMjV6S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnVkc5TlpYTnpZV2RsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtZWFJoSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKd2IzTmZjbVZtWDJsa1hDSTZJSFJvYVhNdVVHOXpVbVZtU1dRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5CeVpXRjFkR2hmWVcxdmRXNTBYQ0k2SUhSb2FYTXVVSEpsWVhWMGFFRnRiM1Z1ZEZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JRY21sdWRFMWxjbU5vWVc1MFEyOXdlU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JRY205dGNIUkdiM0pEZFhOMGIyMWxja052Y0hsUGJrVm1kSEJ2Y3lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSVGFXZHVZWFIxY21WR2JHOTNUMjVGWm5Sd2IzTWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeTVCWkdSU1pXTmxhWEIwUTI5dVptbG5LR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGs5d2RHbHZibk11UVdSa1QzQjBhVzl1Y3loa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCTlpYTnpZV2RsS0ZKbGNYVmxjM1JKWkVobGJIQmxjaTVKWkNoY0luQnlZV05jSWlrc0lGQnlaV0YxZEdoRmRtVnVkSE11VUhKbFlYVjBhRTl3Wlc1U1pYRjFaWE4wTENCa1lYUmhMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlFjbVZoZFhSb1ZHOXdkWEJTWlhGMVpYTjBYRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY0hKbFlYVjBhRWxrTENCMGIzQjFjRUZ0YjNWdWRFTmxiblJ6TENCd2IzTlNaV1pKWkNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVSEpsWVhWMGFFbGtJRDBnY0hKbFlYVjBhRWxrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbFJ2Y0hWd1FXMXZkVzUwSUQwZ2RHOXdkWEJCYlc5MWJuUkRaVzUwY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRYjNOU1pXWkpaQ0E5SUhCdmMxSmxaa2xrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5QTlJRzVsZHlCVGNHbERiMjVtYVdjb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UGNIUnBiMjV6SUQwZ2JtVjNJRlJ5WVc1ellXTjBhVzl1VDNCMGFXOXVjeWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRlJ2VFdWemMyRm5aU2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ1pHRjBZU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRndpY0c5elgzSmxabDlwWkZ3aU9pQjBhR2x6TGxCdmMxSmxaa2xrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0p3Y21WaGRYUm9YMmxrWENJNklIUm9hWE11VUhKbFlYVjBhRWxrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0owYjNCMWNGOWhiVzkxYm5SY0lqb2dkR2hwY3k1VWIzQjFjRUZ0YjNWdWRGeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSUWNtbHVkRTFsY21Ob1lXNTBRMjl3ZVNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSUWNtOXRjSFJHYjNKRGRYTjBiMjFsY2tOdmNIbFBia1ZtZEhCdmN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlRhV2R1WVhSMWNtVkdiRzkzVDI1RlpuUndiM01nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnk1QlpHUlNaV05sYVhCMFEyOXVabWxuS0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrOXdkR2x2Ym5NdVFXUmtUM0IwYVc5dWN5aGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtGSmxjWFZsYzNSSlpFaGxiSEJsY2k1SlpDaGNJbkJ5ZEhWY0lpa3NJRkJ5WldGMWRHaEZkbVZ1ZEhNdVVISmxZWFYwYUZSdmNIVndVbVZ4ZFdWemRDd2daR0YwWVN3Z2RISjFaU2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVUhKbFlYVjBhRkJoY25ScFlXeERZVzVqWld4c1lYUnBiMjVTWlhGMVpYTjBYRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY0hKbFlYVjBhRWxrTENCd1lYSjBhV0ZzUTJGdVkyVnNiR0YwYVc5dVFXMXZkVzUwUTJWdWRITXNJSEJ2YzFKbFprbGtLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWNtVmhkWFJvU1dRZ1BTQndjbVZoZFhSb1NXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHRnlkR2xoYkVOaGJtTmxiR3hoZEdsdmJrRnRiM1Z1ZENBOUlIQmhjblJwWVd4RFlXNWpaV3hzWVhScGIyNUJiVzkxYm5SRFpXNTBjenRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFiM05TWldaSlpDQTlJSEJ2YzFKbFprbGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnlBOUlHNWxkeUJUY0dsRGIyNW1hV2NvS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVQY0hScGIyNXpJRDBnYm1WM0lGUnlZVzV6WVdOMGFXOXVUM0IwYVc5dWN5Z3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGUnZUV1Z6YzJGblpTZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWkdGMFlTQTlJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2ljRzl6WDNKbFpsOXBaRndpT2lCMGFHbHpMbEJ2YzFKbFprbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSndjbVZoZFhSb1gybGtYQ0k2SUhSb2FYTXVVSEpsWVhWMGFFbGtMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSndjbVZoZFhSb1gyTmhibU5sYkY5aGJXOTFiblJjSWpvZ2RHaHBjeTVRWVhKMGFXRnNRMkZ1WTJWc2JHRjBhVzl1UVcxdmRXNTBYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VSVzVoWW14bFpGQnlhVzUwVFdWeVkyaGhiblJEYjNCNUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VSVzVoWW14bFpGQnliMjF3ZEVadmNrTjFjM1J2YldWeVEyOXdlVTl1UldaMGNHOXpJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNW1hV2N1Ulc1aFlteGxaRk5wWjI1aGRIVnlaVVpzYjNkUGJrVm1kSEJ2Y3lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrRmtaRkpsWTJWcGNIUkRiMjVtYVdjb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVUM0IwYVc5dWN5NUJaR1JQY0hScGIyNXpLR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTFsYzNOaFoyVW9VbVZ4ZFdWemRFbGtTR1ZzY0dWeUxrbGtLRndpY0hKd1kxd2lLU3dnVUhKbFlYVjBhRVYyWlc1MGN5NVFjbVZoZFhSb1VHRnlkR2xoYkVOaGJtTmxiR3hoZEdsdmJsSmxjWFZsYzNRc0lHUmhkR0VzSUhSeWRXVXBPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRkJ5WldGMWRHaEZlSFJsYm1SU1pYRjFaWE4wWEc1N1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2NISmxZWFYwYUVsa0xDQndiM05TWldaSlpDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUhKbFlYVjBhRWxrSUQwZ2NISmxZWFYwYUVsa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxCdmMxSmxaa2xrSUQwZ2NHOXpVbVZtU1dRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5JRDBnYm1WM0lGTndhVU52Ym1acFp5Z3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrOXdkR2x2Ym5NZ1BTQnVaWGNnVkhKaGJuTmhZM1JwYjI1UGNIUnBiMjV6S0NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnVkc5TlpYTnpZV2RsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtZWFJoSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKd2IzTmZjbVZtWDJsa1hDSTZJSFJvYVhNdVVHOXpVbVZtU1dRc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JjSW5CeVpXRjFkR2hmYVdSY0lqb2dkR2hwY3k1UWNtVmhkWFJvU1dSY2JpQWdJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnk1RmJtRmliR1ZrVUhKcGJuUk5aWEpqYUdGdWRFTnZjSGtnUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnk1RmJtRmliR1ZrVUhKdmJYQjBSbTl5UTNWemRHOXRaWEpEYjNCNVQyNUZablJ3YjNNZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5NUZibUZpYkdWa1UybG5ibUYwZFhKbFJteHZkMDl1UldaMGNHOXpJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNW1hV2N1UVdSa1VtVmpaV2x3ZEVOdmJtWnBaeWhrWVhSaEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UGNIUnBiMjV6TGtGa1pFOXdkR2x2Ym5Nb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXVnpjMkZuWlNoU1pYRjFaWE4wU1dSSVpXeHdaWEl1U1dRb1hDSndjbVY0ZEZ3aUtTd2dVSEpsWVhWMGFFVjJaVzUwY3k1UWNtVmhkWFJvUlhoMFpXNWtVbVZ4ZFdWemRDd2daR0YwWVN3Z2RISjFaU2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVUhKbFlYVjBhRU5oYm1ObGJGSmxjWFZsYzNSY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdjbVZoZFhSb1NXUXNJSEJ2YzFKbFprbGtLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWNtVmhkWFJvU1dRZ1BTQndjbVZoZFhSb1NXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQndiM05TWldaSlpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNW1hV2NnUFNCdVpYY2dVM0JwUTI5dVptbG5LQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVUM0IwYVc5dWN5QTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrOXdkR2x2Ym5Nb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCVWIwMWxjM05oWjJVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JoZEdFZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCY0luQnZjMTl5WldaZmFXUmNJam9nZEdocGN5NVFiM05TWldaSlpDeGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aWNISmxZWFYwYUY5cFpGd2lPaUIwYUdsekxsQnlaV0YxZEdoSlpGeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSUWNtbHVkRTFsY21Ob1lXNTBRMjl3ZVNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSUWNtOXRjSFJHYjNKRGRYTjBiMjFsY2tOdmNIbFBia1ZtZEhCdmN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlRhV2R1WVhSMWNtVkdiRzkzVDI1RlpuUndiM01nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnk1QlpHUlNaV05sYVhCMFEyOXVabWxuS0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrOXdkR2x2Ym5NdVFXUmtUM0IwYVc5dWN5aGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtGSmxjWFZsYzNSSlpFaGxiSEJsY2k1SlpDaGNJbkJ5WVdOY0lpa3NJRkJ5WldGMWRHaEZkbVZ1ZEhNdVVISmxZWFYwYUVOaGJtTmxiR3hoZEdsdmJsSmxjWFZsYzNRc0lHUmhkR0VzSUhSeWRXVXBPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRkJ5WldGMWRHaERiMjF3YkdWMGFXOXVVbVZ4ZFdWemRGeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLSEJ5WldGMWRHaEpaQ3dnWTI5dGNHeGxkR2x2YmtGdGIzVnVkRU5sYm5SekxDQndiM05TWldaSlpDd2djM1Z5WTJoaGNtZGxRVzF2ZFc1MEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRY21WaGRYUm9TV1FnUFNCd2NtVmhkWFJvU1dRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dGNHeGxkR2x2YmtGdGIzVnVkQ0E5SUdOdmJYQnNaWFJwYjI1QmJXOTFiblJEWlc1MGN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWIzTlNaV1pKWkNBOUlIQnZjMUpsWmtsa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxOMWNtTm9ZWEpuWlVGdGIzVnVkQ0E5SUhOMWNtTm9ZWEpuWlVGdGIzVnVkRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjZ1BTQnVaWGNnVTNCcFEyOXVabWxuS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VDNCMGFXOXVjeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZiazl3ZEdsdmJuTW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlViMDFsYzNOaFoyVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbkJ2YzE5eVpXWmZhV1JjSWpvZ2RHaHBjeTVRYjNOU1pXWkpaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2ljSEpsWVhWMGFGOXBaRndpT2lCMGFHbHpMbEJ5WldGMWRHaEpaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lGd2lZMjl0Y0d4bGRHbHZibDloYlc5MWJuUmNJam9nZEdocGN5NURiMjF3YkdWMGFXOXVRVzF2ZFc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnWENKemRYSmphR0Z5WjJWZllXMXZkVzUwWENJNklIUm9hWE11VTNWeVkyaGhjbWRsUVcxdmRXNTBYRzRnSUNBZ0lDQWdJSDA3WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VSVzVoWW14bFpGQnlhVzUwVFdWeVkyaGhiblJEYjNCNUlEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEYjI1bWFXY3VSVzVoWW14bFpGQnliMjF3ZEVadmNrTjFjM1J2YldWeVEyOXdlVTl1UldaMGNHOXpJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNW1hV2N1Ulc1aFlteGxaRk5wWjI1aGRIVnlaVVpzYjNkUGJrVm1kSEJ2Y3lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrRmtaRkpsWTJWcGNIUkRiMjVtYVdjb1pHRjBZU2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVUM0IwYVc5dWN5NUJaR1JQY0hScGIyNXpLR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTFsYzNOaFoyVW9VbVZ4ZFdWemRFbGtTR1ZzY0dWeUxrbGtLRndpY0hKaFkxd2lLU3dnVUhKbFlYVjBhRVYyWlc1MGN5NVFjbVZoZFhSb1EyOXRjR3hsZEdWU1pYRjFaWE4wTENCa1lYUmhMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlFjbVZoZFhSb1VtVnpjRzl1YzJWY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHRLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWNtVmhkWFJvU1dRZ1BTQnRMa1JoZEdGYlhDSndjbVZoZFhSb1gybGtYQ0pkTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa1JsZEdGcGJITWdQU0J1WlhjZ1VIVnlZMmhoYzJWU1pYTndiMjV6WlNodEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWIzTlNaV1pKWkNBOUlIUm9hWE11UkdWMFlXbHNjeTVRYjNOU1pXWkpaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiU0E5SUcwN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFFtRnNZVzVqWlVGdGIzVnVkQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2RIaFVlWEJsSUQwZ2RHaHBjeTVmYlM1RVlYUmhXMXdpZEhKaGJuTmhZM1JwYjI1ZmRIbHdaVndpWFR0Y2JpQWdJQ0FnSUNBZ2MzZHBkR05vSUNoMGVGUjVjR1VwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSlFVa1V0UVZWVVNGd2lPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0ZiWENKd2NtVmhkWFJvWDJGdGIzVnVkRndpWFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSlVUMUJWVUZ3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRmJYQ0ppWVd4aGJtTmxYMkZ0YjNWdWRGd2lYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKRFFVNURSVXhjSWpvZ0x5OGdVRUZTVkVsQlRDQkRRVTVEUlV4TVFWUkpUMDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoVzF3aVltRnNZVzVqWlY5aGJXOTFiblJjSWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lVRkpGTFVGVlZFZ2dSVmhVWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlWdGNJbUpoYkdGdVkyVmZZVzF2ZFc1MFhDSmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSWxCRFQwMVFYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJREE3SUM4dklFSmhiR0Z1WTJVZ2FYTWdNQ0JoWm5SbGNpQmpiMjF3YkdWMGFXOXVYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpVUZKRkxVRlZWRWdnUTBGT1EwVk1YQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJREE3SUM4dklFSmhiR0Z1WTJVZ2FYTWdNQ0JoWm5SbGNpQmpZVzVqWld4c1lYUnBiMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURBN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUlFjbVYyYVc5MWMwSmhiR0Z1WTJWQmJXOTFiblFvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlIUjRWSGx3WlNBOUlIUm9hWE11WDIwdVJHRjBZVnRjSW5SeVlXNXpZV04wYVc5dVgzUjVjR1ZjSWwwN1hHNGdJQ0FnSUNBZ0lITjNhWFJqYUNBb2RIaFVlWEJsS1Z4dUlDQWdJQ0FnSUNCN0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRndpVUZKRkxVRlZWRWhjSWpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1hDSlVUMUJWVUZ3aU9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRmJYQ0psZUdsemRHbHVaMTl3Y21WaGRYUm9YMkZ0YjNWdWRGd2lYVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnWENKRFFVNURSVXhjSWpvZ0x5OGdVRUZTVkVsQlRDQkRRVTVEUlV4TVFWUkpUMDVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoVzF3aVpYaHBjM1JwYm1kZmNISmxZWFYwYUY5aGJXOTFiblJjSWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lVRkpGTFVGVlZFZ2dSVmhVWENJNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlWdGNJbVY0YVhOMGFXNW5YM0J5WldGMWRHaGZZVzF2ZFc1MFhDSmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSWxCRFQwMVFYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZFaEpVeUJKVXlCVVJVTklUa2xEUVV4TVdTQk9UMVFnUTA5U1VrVkRWQ0JYU0VWT0lFTlBUVkJNUlZSSlQwNGdTRUZRVUVWT1V5QkdUMUlnUVNCUVFWSlVTVUZNSUVGTlQxVk9WQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCQ1ZWUWdWVTVHVDFKVVZVNUJWRVZNV1N3Z1ZFaEpVeUJTUlZOUVQwNVRSU0JFVDBWVElFNVBWQ0JEVDA1VVFVbE9JRndpWlhocGMzUnBibWRmY0hKbFlYVjBhRjloYlc5MWJuUmNJaTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVFR5QmNJbU52YlhCc1pYUnBiMjVmWVcxdmRXNTBYQ0lnU1ZNZ1ZFaEZJRU5NVDFORlUxUWdWMFVnU0VGV1JTNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhXMXdpWTI5dGNHeGxkR2x2Ymw5aGJXOTFiblJjSWwwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGd2lVRkpGTFVGVlZFZ2dRMEZPUTBWTVhDSTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZVnRjSW5CeVpXRjFkR2hmWVcxdmRXNTBYQ0pkTzF4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z01EdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0JIWlhSRGIyMXdiR1YwYVc5dVFXMXZkVzUwS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQjBlRlI1Y0dVZ1BTQjBhR2x6TGw5dExrUmhkR0ZiWENKMGNtRnVjMkZqZEdsdmJsOTBlWEJsWENKZE8xeHVJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tIUjRWSGx3WlNsY2JpQWdJQ0FnSUNBZ2V5QWdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSWxCRFQwMVFYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVZ0Y0ltTnZiWEJzWlhScGIyNWZZVzF2ZFc1MFhDSmRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTUR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBVM1Z5WTJoaGNtZGxRVzF2ZFc1MEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUIwZUZSNWNHVWdQU0IwYUdsekxsOXRMa1JoZEdGYlhDSjBjbUZ1YzJGamRHbHZibDkwZVhCbFhDSmRPMXh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLSFI0Vkhsd1pTbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JjSWxCRFQwMVFYQ0k2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVZ0Y0luTjFjbU5vWVhKblpWOWhiVzkxYm5SY0lsMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF3TzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnVjJGelRXVnlZMmhoYm5SU1pXTmxhWEIwVUhKcGJuUmxaQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoVzF3aWJXVnlZMmhoYm5SZmNtVmpaV2x3ZEY5d2NtbHVkR1ZrWENKZE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUZkaGMwTjFjM1J2YldWeVVtVmpaV2x3ZEZCeWFXNTBaV1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVZ0Y0ltTjFjM1J2YldWeVgzSmxZMlZwY0hSZmNISnBiblJsWkZ3aVhUdGNiaUFnSUNCOVhHNTlJaXdpYVcxd2IzSjBJSHRGZG1WdWRITXNJRTFsYzNOaFoyVXNJRk4xWTJObGMzTlRkR0YwWlgwZ1puSnZiU0FuTGk5TlpYTnpZV2RsY3ljN1hHNXBiWEJ2Y25RZ2UxSmxjWFZsYzNSSlpFaGxiSEJsY24wZ1puSnZiU0FuTGk5U1pYRjFaWE4wU1dSSVpXeHdaWEluTzF4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVUhKcGJuUnBibWRTWlhGMVpYTjBYRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYTJWNUxDQndZWGxzYjJGa0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYTJWNUlEMGdhMlY1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3WVhsc2IyRmtJRDBnY0dGNWJHOWhaRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQjBiMDFsYzNOaFoyVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbXRsZVZ3aU9pQjBhR2x6TGw5clpYa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCY0luQmhlV3h2WVdSY0lqb2dkR2hwY3k1ZmNHRjViRzloWkZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdWemMyRm5aU2hTWlhGMVpYTjBTV1JJWld4d1pYSXVTV1FvWENKd2NtbHVkRndpS1N3Z1JYWmxiblJ6TGxCeWFXNTBhVzVuVW1WeGRXVnpkQ3dnWkdGMFlTd2dkSEoxWlNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1VISnBiblJwYm1kU1pYTndiMjV6WlZ4dWUxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHMHBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emRXTmpaWE56SUQwZ2JTNUhaWFJUZFdOalpYTnpVM1JoZEdVb0tTQTlQU0JUZFdOalpYTnpVM1JoZEdVdVUzVmpZMlZ6Y3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYlNBOUlHMDdYRzRnSUNBZ2ZWeHVJQ0FnSUdselUzVmpZMlZ6Y3lncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjM1ZqWTJWemN6dGNiaUFnSUNCOVhHNGdJQ0FnWjJWMFJYSnliM0pTWldGemIyNG9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzVsY25KdmNsOXlaV0Z6YjI0N1hHNGdJQ0FnZlZ4dUlDQWdJR2RsZEVWeWNtOXlSR1YwWVdsc0tDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVaWEp5YjNKZlpHVjBZV2xzTzF4dUlDQWdJSDFjYmlBZ0lDQm5aWFJTWlhOd2IyNXpaVlpoYkhWbFYybDBhRUYwZEhKcFluVjBaU2hoZEhSeWFXSjFkR1VwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoVzJGMGRISnBZblYwWlYwN1hHNGdJQ0FnZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRlJvYVhNZ1kyeGhjM01nYVhNZ1lTQnRiMk5ySUhCeWFXNTBaWElnWm05eUlIUm9aU0IwWlhKdGFXNWhiQ0IwYnlCd2NtbHVkQ0JTWldObGFYQjBjMXh1SUNvdlhHNWxlSEJ2Y25RZ1kyeGhjM01nVUhKcGJuUmxjaUI3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvWld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbUoxWm1abGNpQWdJQ0FnUFNCYlhUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwSUNBZ0lEMGdaV3hsYldWdWREdGNiaUFnSUNCOVhHNWNiaUFnSUNCd2NtbHVkQ2d1TGk1aGNtZHpLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZblZtWm1WeUxuQjFjMmdvWVhKbmN5NXFiMmx1S0NjZ0p5a3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXlaVzVrWlhJb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCZmNtVnVaR1Z5S0NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TG1Wc1pXMWxiblF1YVc1dVpYSlVaWGgwSUQwZ2RHaHBjeTVpZFdabVpYSXVhbTlwYmloZ1hGeHVYRnh1SUZ4Y1hGd3ZYRnhjWEM5Y1hGeGNMMXhjWEZ3dlhGeGNYQzljWEZ4Y0wxeGNYRnd2WEZ4Y1hDOWNYRnhjTDF4Y1hGd3ZYRnhjWEM5Y1hGeGNMMXhjWEZ3dlhGeGNYQzljWEZ4Y0x5QmNYRzVjWEc1Z0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bGJHVnRaVzUwTG5OamNtOXNiRlJ2Y0NBOUlIUm9hWE11Wld4bGJXVnVkQzV6WTNKdmJHeElaV2xuYUhRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUTJ4bFlYSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZblZtWm1WeUlEMGdXMTA3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0psYm1SbGNpZ3BPMXh1SUNBZ0lIMWNibjBpTENKcGJYQnZjblFnZTBWMlpXNTBjeXdnVTNWalkyVnpjMU4wWVhSbExDQk5aWE56WVdkbGZTQm1jbTl0SUNjdUwwMWxjM05oWjJWekp6dGNibWx0Y0c5eWRDQjdVbVZ4ZFdWemRFbGtTR1ZzY0dWeWZTQm1jbTl0SUNjdUwxSmxjWFZsYzNSSlpFaGxiSEJsY2ljN1hHNXBiWEJ2Y25RZ2UxTndhVU52Ym1acFp5d2dWSEpoYm5OaFkzUnBiMjVQY0hScGIyNXpmU0JtY205dElDY3VMMU53YVUxdlpHVnNjeWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJRZFhKamFHRnpaVkpsY1hWbGMzUWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR0Z0YjNWdWRFTmxiblJ6TENCd2IzTlNaV1pKWkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGxCdmMxSmxaa2xrSUQwZ2NHOXpVbVZtU1dRN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUhWeVkyaGhjMlZCYlc5MWJuUWdQU0JoYlc5MWJuUkRaVzUwY3p0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVVYVhCQmJXOTFiblFnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOaGMyaHZkWFJCYlc5MWJuUWdQU0F3TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbEJ5YjIxd2RFWnZja05oYzJodmRYUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VGRYSmphR0Z5WjJWQmJXOTFiblFnUFNBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeUE5SUc1bGR5QlRjR2xEYjI1bWFXY29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVBjSFJwYjI1eklEMGdibVYzSUZSeVlXNXpZV04wYVc5dVQzQjBhVzl1Y3lncE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUV4cFluSmhjbmtnUW1GamEzZGhjbVJ6SUVOdmJYQmhkR2xpYVd4cGRIbGNiaUFnSUNBZ0lDQWdkR2hwY3k1SlpDQTlJSEJ2YzFKbFprbGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrRnRiM1Z1ZEVObGJuUnpJRDBnWVcxdmRXNTBRMlZ1ZEhNN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUVcxdmRXNTBVM1Z0YldGeWVTZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lGQjFjbU5vWVhObE9pQWtleWgwYUdsekxsQjFjbU5vWVhObFFXMXZkVzUwSUM4Z01UQXdMakFwTG5SdlJtbDRaV1FvTWlsOU95QmNiaUFnSUNBZ0lDQWdJQ0FnSUZScGNEb2dKSHNvZEdocGN5NVVhWEJCYlc5MWJuUWdMeUF4TURBdU1Da3VkRzlHYVhobFpDZ3lLWDA3SUZ4dUlDQWdJQ0FnSUNBZ0lDQWdRMkZ6YUc5MWREb2dKSHNvZEdocGN5NURZWE5vYjNWMFFXMXZkVzUwSUM4Z01UQXdMakFwTG5SdlJtbDRaV1FvTWlsOU8yQTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ZHOU5aWE56WVdkbEtDa2dlMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YzE5eVpXWmZhV1E2SUhSb2FYTXVVRzl6VW1WbVNXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCd2RYSmphR0Z6WlY5aGJXOTFiblE2SUhSb2FYTXVVSFZ5WTJoaGMyVkJiVzkxYm5Rc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYVhCZllXMXZkVzUwT2lCMGFHbHpMbFJwY0VGdGIzVnVkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMmhmWVcxdmRXNTBPaUIwYUdsekxrTmhjMmh2ZFhSQmJXOTFiblFzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl0Y0hSZlptOXlYMk5oYzJodmRYUTZJSFJvYVhNdVVISnZiWEIwUm05eVEyRnphRzkxZEN3Z1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZFhKamFHRnlaMlZmWVcxdmRXNTBPaUIwYUdsekxsTjFjbU5vWVhKblpVRnRiM1Z1ZEZ4dUlDQWdJQ0FnSUNCOU8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JRY21sdWRFMWxjbU5vWVc1MFEyOXdlU0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuTGtWdVlXSnNaV1JRY205dGNIUkdiM0pEZFhOMGIyMWxja052Y0hsUGJrVm1kSEJ2Y3lBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSVGFXZHVZWFIxY21WR2JHOTNUMjVGWm5Sd2IzTWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeTVCWkdSU1pXTmxhWEIwUTI5dVptbG5LR1JoZEdFcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGs5d2RHbHZibk11UVdSa1QzQjBhVzl1Y3loa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCTlpYTnpZV2RsS0ZKbGNYVmxjM1JKWkVobGJIQmxjaTVKWkNoY0luQnlZMmh6WENJcExDQkZkbVZ1ZEhNdVVIVnlZMmhoYzJWU1pYRjFaWE4wTENCa1lYUmhMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlFkWEpqYUdGelpWSmxjM0J2Ym5ObFhHNTdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMGdQU0J0TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbEpsY1hWbGMzUkpaQ0E5SUcwdVNXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQnRMa1JoZEdFdWNHOXpYM0psWmw5cFpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VFkyaGxiV1ZPWVcxbElEMGdiUzVFWVhSaExuTmphR1Z0WlY5dVlXMWxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsTmphR1Z0WlVGd2NFNWhiV1VnUFNCdExrUmhkR0V1YzJOb1pXMWxYMjVoYldVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VTNWalkyVnpjeUE5SUcwdVIyVjBVM1ZqWTJWemMxTjBZWFJsS0NrZ1BUMGdVM1ZqWTJWemMxTjBZWFJsTGxOMVkyTmxjM003WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwVWxKT0tDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVjbkp1TzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEZCMWNtTm9ZWE5sUVcxdmRXNTBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1Y0hWeVkyaGhjMlZmWVcxdmRXNTBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRlJwY0VGdGIzVnVkQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG5ScGNGOWhiVzkxYm5RZ2ZId2dNRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJUZFhKamFHRnlaMlZCYlc5MWJuUW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzV6ZFhKamFHRnlaMlZmWVcxdmRXNTBJSHg4SURBN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFEyRnphRzkxZEVGdGIzVnVkQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG1OaGMyaGZZVzF2ZFc1ME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRFSmhibXRPYjI1RFlYTm9RVzF2ZFc1MEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVZbUZ1YTE5dWIyNWpZWE5vWDJGdGIzVnVkRHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJDWVc1clEyRnphRUZ0YjNWdWRDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbUpoYm10ZlkyRnphRjloYlc5MWJuUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBRM1Z6ZEc5dFpYSlNaV05sYVhCMEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVZM1Z6ZEc5dFpYSmZjbVZqWldsd2RDQjhmQ0JjSWx3aU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRFMWxjbU5vWVc1MFVtVmpaV2x3ZENncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExtMWxjbU5vWVc1MFgzSmxZMlZwY0hRZ2ZId2dYQ0pjSWp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSU1pYTndiMjV6WlZSbGVIUW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzVvYjNOMFgzSmxjM0J2Ym5ObFgzUmxlSFFnZkh3Z1hDSmNJanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJTWlhOd2IyNXpaVU52WkdVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNW9iM04wWDNKbGMzQnZibk5sWDJOdlpHVTdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRWRsZEZSbGNtMXBibUZzVW1WbVpYSmxibU5sU1dRb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNTBaWEp0YVc1aGJGOXlaV1pmYVdRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFEyRnlaRVZ1ZEhKNUtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVZMkZ5WkY5bGJuUnllVHRjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnUjJWMFFXTmpiM1Z1ZEZSNWNHVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzVoWTJOdmRXNTBYM1I1Y0dVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFFYVjBhRU52WkdVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNWhkWFJvWDJOdlpHVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBRbUZ1YTBSaGRHVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzVpWVc1clgyUmhkR1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwUW1GdWExUnBiV1VvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1aVlXNXJYM1JwYldVN1hHNGdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lFZGxkRTFoYzJ0bFpGQmhiaWdwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG0xaGMydGxaRjl3WVc0N1hHNGdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lFZGxkRlJsY20xcGJtRnNTV1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1MFpYSnRhVzVoYkY5cFpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCWFlYTk5aWEpqYUdGdWRGSmxZMlZwY0hSUWNtbHVkR1ZrS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdWJXVnlZMmhoYm5SZmNtVmpaV2x3ZEY5d2NtbHVkR1ZrTzF4dUlDQWdJSDFjYmx4dUlDQWdJRmRoYzBOMWMzUnZiV1Z5VW1WalpXbHdkRkJ5YVc1MFpXUW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzVqZFhOMGIyMWxjbDl5WldObGFYQjBYM0J5YVc1MFpXUTdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRWRsZEZObGRIUnNaVzFsYm5SRVlYUmxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJQzh2WENKaVlXNXJYM05sZEhSc1pXMWxiblJmWkdGMFpWd2lPbHdpTWpBd05ESXdNVGhjSWx4dUlDQWdJQ0FnSUNCMllYSWdaR0YwWlZOMGNpQTlJSFJvYVhNdVgyMHVSR0YwWVM1aVlXNXJYM05sZEhSc1pXMWxiblJmWkdGMFpUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGa1lYUmxVM1J5S1NCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWxjM05oWjJVdVVHRnljMlZDWVc1clJHRjBaU2hrWVhSbFUzUnlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJTWlhOd2IyNXpaVlpoYkhWbEtHRjBkSEpwWW5WMFpTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRmJZWFIwY21saWRYUmxYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlViMUJoZVcxbGJuUlRkVzF0WVhKNUtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWTJOdmRXNTBYM1I1Y0dVNklIUm9hWE11UjJWMFFXTmpiM1Z1ZEZSNWNHVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRjFkR2hmWTI5a1pUb2dkR2hwY3k1SFpYUkJkWFJvUTI5a1pTZ3BMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1ltRnVhMTlrWVhSbE9pQjBhR2x6TGtkbGRFSmhibXRFWVhSbEtDa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCaVlXNXJYM1JwYldVNklIUm9hWE11UjJWMFFtRnVhMVJwYldVb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdodmMzUmZjbVZ6Y0c5dWMyVmZZMjlrWlRvZ2RHaHBjeTVIWlhSU1pYTndiMjV6WlVOdlpHVW9LU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHaHZjM1JmY21WemNHOXVjMlZmZEdWNGREb2dkR2hwY3k1SFpYUlNaWE53YjI1elpWUmxlSFFvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzFoYzJ0bFpGOXdZVzQ2SUhSb2FYTXVSMlYwVFdGemEyVmtVR0Z1S0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3ZFhKamFHRnpaVjloYlc5MWJuUTZJSFJvYVhNdVIyVjBVSFZ5WTJoaGMyVkJiVzkxYm5Rb0tTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhKeWJqb2dkR2hwY3k1SFpYUlNVazRvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5qYUdWdFpWOXVZVzFsT2lCMGFHbHpMbE5qYUdWdFpVNWhiV1VzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBaWEp0YVc1aGJGOXBaRG9nZEdocGN5NUhaWFJVWlhKdGFXNWhiRWxrS0Nrc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlhKdGFXNWhiRjl5WldaZmFXUTZJSFJvYVhNdVIyVjBWR1Z5YldsdVlXeFNaV1psY21WdVkyVkpaQ2dwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkR2x3WDJGdGIzVnVkRG9nZEdocGN5NUhaWFJVYVhCQmJXOTFiblFvS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJSE4xY21Ob1lYSm5aVjloYlc5MWJuUTZJSFJvYVhNdVIyVjBVM1Z5WTJoaGNtZGxRVzF2ZFc1MEtDbGNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJEWVc1alpXeFVjbUZ1YzJGamRHbHZibEpsY1hWbGMzUmNibnRjYmlBZ0lDQmNiaUFnSUNCVWIwMWxjM05oWjJVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtGSmxjWFZsYzNSSlpFaGxiSEJsY2k1SlpDaGNJbU4wZUZ3aUtTd2dSWFpsYm5SekxrTmhibU5sYkZSeVlXNXpZV04wYVc5dVVtVnhkV1Z6ZEN3Z2JuVnNiQ3dnZEhKMVpTazdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdRMkZ1WTJWc1ZISmhibk5oWTNScGIyNVNaWE53YjI1elpWeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRJRDBnYlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVRYjNOU1pXWkpaQ0E5SUhSb2FYTXVYMjB1UkdGMFlTNXdiM05mY21WbVgybGtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsTjFZMk5sYzNNZ1BTQjBhR2x6TGw5dExrZGxkRk4xWTJObGMzTlRkR0YwWlNncElEMDlJRk4xWTJObGMzTlRkR0YwWlM1VGRXTmpaWE56TzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEVWeWNtOXlVbVZoYzI5dUtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVaWEp5YjNKZmNtVmhjMjl1TzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEVWeWNtOXlSR1YwWVdsc0tDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVaWEp5YjNKZlpHVjBZV2xzTzF4dUlDQWdJSDFjYmx4dUlDQWdJRmRoYzFSNGJsQmhjM1JRYjJsdWRFOW1UbTlTWlhSMWNtNG9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVIyVjBSWEp5YjNJb0tTNXpkR0Z5ZEhOWGFYUm9LRndpVkZoT1gxQkJVMVJmVUU5SlRsUmZUMFpmVGs5ZlVrVlVWVkpPWENJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRGSmxjM0J2Ym5ObFZtRnNkV1ZYYVhSb1FYUjBjbWxpZFhSbEtHRjBkSEpwWW5WMFpTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRmJZWFIwY21saWRYUmxYVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJIWlhSTVlYTjBWSEpoYm5OaFkzUnBiMjVTWlhGMVpYTjBYRzU3WEc0Z0lDQWdWRzlOWlhOellXZGxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVFdWemMyRm5aU2hTWlhGMVpYTjBTV1JJWld4d1pYSXVTV1FvWENKbmJIUmNJaWtzSUVWMlpXNTBjeTVIWlhSTVlYTjBWSEpoYm5OaFkzUnBiMjVTWlhGMVpYTjBMQ0J1ZFd4c0xDQjBjblZsS1R0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCSFpYUk1ZWE4wVkhKaGJuTmhZM1JwYjI1U1pYTndiMjV6WlZ4dWUxeHVJQ0FnSUdOdmJuTjBjblZqZEc5eUtHMHBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dElEMGdiVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlhZWE5TWlhSeWFXVjJaV1JUZFdOalpYTnpablZzYkhrb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdWMlVnWTJGdUozUWdjbVZzZVNCdmJpQmphR1ZqYTJsdVp5QmNJbk4xWTJObGMzTmNJaUJtYkdGbklHOXlJRndpWlhKeWIzSmNJaUJtYVdWc1pITWdhR1Z5WlN4Y2JpQWdJQ0FnSUNBZ0x5OGdZWE1nY21WMGNtbGxkbUZzSUcxaGVTQmlaU0J6ZFdOalpYTnpablZzTENCaWRYUWdkR2hsSUhKbGRISnBaWFpsWkNCMGNtRnVjMkZqZEdsdmJpQjNZWE1nWVNCbVlXbHNMbHh1SUNBZ0lDQWdJQ0F2THlCVGJ5QjNaU0JqYUdWamF5QnBaaUIzWlNCbmIzUWdZbUZqYXlCaGJpQlNaWE53YjI1elpVTnZaR1V1WEc0Z0lDQWdJQ0FnSUM4dklDaGhjeUJ2Y0hCdmMyVmtJSFJ2SUhOaGVTQmhiaUJ2Y0dWeVlYUnBiMjVmYVc1ZmNISnZaM0psYzNOZlpYSnliM0lwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFoSVhSb2FYTXVSMlYwVW1WemNHOXVjMlZEYjJSbEtDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1YyRnpWR2x0WlU5MWRFOW1VM2x1WTBWeWNtOXlLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrZGxkRVZ5Y205eUtDa3VjM1JoY25SelYybDBhQ2hjSWxSSlRVVmZUMVZVWDA5R1gxTlpUa05jSWlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnVjJGelQzQmxjbUYwYVc5dVNXNVFjbTluY21WemMwVnljbTl5S0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa2RsZEVWeWNtOXlLQ2t1YzNSaGNuUnpWMmwwYUNoY0lrOVFSVkpCVkVsUFRsOUpUbDlRVWs5SFVrVlRVMXdpS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JKYzFkaGFYUnBibWRHYjNKVGFXZHVZWFIxY21WU1pYTndiMjV6WlNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVIWlhSRmNuSnZjaWdwTG5OMFlYSjBjMWRwZEdnb1hDSlBVRVZTUVZSSlQwNWZTVTVmVUZKUFIxSkZVMU5mUVZkQlNWUkpUa2RmVTBsSFRrRlVWVkpGWENJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVselYyRnBkR2x1WjBadmNrRjFkR2hEYjJSbEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtkbGRFVnljbTl5S0NrdWMzUmhjblJ6VjJsMGFDaGNJazlRUlZKQlZFbFBUbDlKVGw5UVVrOUhVa1ZUVTE5QlYwRkpWRWxPUjE5UVNFOU9SVjlCVlZSSVgwTlBSRVZjSWlrN1hHNGdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lFbHpVM1JwYkd4SmJsQnliMmR5WlhOektIQnZjMUpsWmtsa0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVWMkZ6VDNCbGNtRjBhVzl1U1c1UWNtOW5jbVZ6YzBWeWNtOXlLQ2tnSmlZZ0tIUm9hWE11UjJWMFVHOXpVbVZtU1dRb0tTQTlQU0J3YjNOU1pXWkpaQ0I4ZkNCMGFHbHpMa2RsZEZCdmMxSmxaa2xrS0NrZ1BUMGdiblZzYkNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFUzVmpZMlZ6YzFOMFlYUmxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrZGxkRk4xWTJObGMzTlRkR0YwWlNncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUZkaGMxTjFZMk5sYzNObWRXeFVlQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUhaWFJUZFdOalpYTnpVM1JoZEdVb0tTQTlQU0JUZFdOalpYTnpVM1JoZEdVdVUzVmpZMlZ6Y3p0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSVWVGUjVjR1VvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1MGNtRnVjMkZqZEdsdmJsOTBlWEJsTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEZCdmMxSmxaa2xrS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdWNHOXpYM0psWmw5cFpEdGNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUkNZVzVyVG05dVEyRnphRUZ0YjNWdWRDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbUpoYm10ZmJtOXVZMkZ6YUY5aGJXOTFiblE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwVTJOb1pXMWxRWEJ3S0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdWMyTm9aVzFsWDI1aGJXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBVMk5vWlcxbFRtRnRaU2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG5OamFHVnRaVjl1WVcxbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRFRnRiM1Z1ZENncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExtRnRiM1Z1ZEY5d2RYSmphR0Z6WlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSVWNtRnVjMkZqZEdsdmJrRnRiM1Z1ZENncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExtRnRiM1Z1ZEY5MGNtRnVjMkZqZEdsdmJsOTBlWEJsTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEVKaGJtdEVZWFJsVkdsdFpWTjBjbWx1WnlncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMllYSWdaSE1nUFNCMGFHbHpMbDl0TGtSaGRHRXVZbUZ1YTE5a1lYUmxJQ3NnZEdocGN5NWZiUzVFWVhSaExtSmhibXRmZEdsdFpUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHUnpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRkpTVGlncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExuSnlianRjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnUjJWMFVtVnpjRzl1YzJWVVpYaDBLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1YUc5emRGOXlaWE53YjI1elpWOTBaWGgwSUh3Z1hDSmNJanRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJTWlhOd2IyNXpaVU52WkdVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNW9iM04wWDNKbGMzQnZibk5sWDJOdlpHVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdWR2hsY21VZ2FYTWdZU0JpZFdjc0lGWlRWaTA1TWpBc0lIZG9aWEpsWW5rZ2RHaGxJR04xYzNSdmJXVnlYM0psWTJWcGNIUWdhWE1nYldsemMybHVaeUJtY205dElHRWdaMngwSUhKbGMzQnZibk5sTGx4dUlDQWdJQzh2SUZSb1pTQmpkWEp5Wlc1MElISmxZMjl0YldWdVpHRjBhVzl1SUdseklIUnZJSFZ6WlNCMGFHVWdiV1Z5WTJoaGJuUWdjbVZqWldsd2RDQnBiaUJ3YkdGalpTQnZaaUJwZENCcFppQnlaWEYxYVhKbFpDNWNiaUFnSUNBdkx5QlVhR2x6SUcxbGRHaHZaQ0J0YjJScFptbGxjeUIwYUdVZ2RXNWtaWEpzZVdsdVp5QnBibU52YldsdVp5QnRaWE56WVdkbElHUmhkR0VnWW5rZ1kyOXdlV2x1WjF4dUlDQWdJQzh2SUhSb1pTQnRaWEpqYUdGdWRDQnlaV05sYVhCMElHbHVkRzhnZEdobElHTjFjM1J2YldWeUlISmxZMlZwY0hRZ2IyNXNlU0JwWmlCMGFHVnlaU0JjYmlBZ0lDQXZMeUJwY3lCaElHMWxjbU5vWVc1MFgzSmxZMlZwY0hRZ1lXNWtJSFJvWlhKbElHbHpJRzV2ZENCaElHTjFjM1J2YldWeVgzSmxZMlZwY0hRdUlDQWdYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lFTnZjSGxOWlhKamFHRnVkRkpsWTJWcGNIUlViME4xYzNSdmJXVnlVbVZqWldsd2RDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWTNJZ1BTQjBhR2x6TGw5dExrUmhkR0V1WTNWemRHOXRaWEpmY21WalpXbHdkRHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMXlJRDBnZEdocGN5NWZiUzVFWVhSaExtMWxjbU5vWVc1MFgzSmxZMlZwY0hRN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h0Y2lBaFBTQmNJbHdpSUNZbUlDRW9ZM0lwS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXRMa1JoZEdFdVkzVnpkRzl0WlhKZmNtVmpaV2x3ZENBOUlHMXlPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVW1WbWRXNWtVbVZ4ZFdWemRGeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR0Z0YjNWdWRFTmxiblJ6TENCd2IzTlNaV1pKWkN3Z2MzVndjSEpsYzNOTlpYSmphR0Z1ZEZCaGMzTjNiM0prS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUJiVzkxYm5SRFpXNTBjeUE5SUdGdGIzVnVkRU5sYm5Sek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtsa0lEMGdVbVZ4ZFdWemRFbGtTR1ZzY0dWeUxrbGtLRndpY21WbWRXNWtYQ0lwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbEJ2YzFKbFprbGtJRDBnY0c5elVtVm1TV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVM1Z3Y0hKbGMzTk5aWEpqYUdGdWRGQmhjM04zYjNKa0lEMGdjM1Z3Y0hKbGMzTk5aWEpqYUdGdWRGQmhjM04zYjNKa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeUE5SUc1bGR5QlRjR2xEYjI1bWFXY29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVBjSFJwYjI1eklEMGdibVYzSUZSeVlXNXpZV04wYVc5dVQzQjBhVzl1Y3lncE8xeHVJQ0FnSUgxY2JpQWdJQ0JjYmlBZ0lDQlViMDFsYzNOaFoyVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdiR1YwSUdSaGRHRWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV1oxYm1SZllXMXZkVzUwT2lCMGFHbHpMa0Z0YjNWdWRFTmxiblJ6TENCY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YzE5eVpXWmZhV1E2SUhSb2FYTXVVRzl6VW1WbVNXUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRYQndjbVZ6YzE5dFpYSmphR0Z1ZEY5d1lYTnpkMjl5WkRvZ2RHaHBjeTVUZFhCd2NtVnpjMDFsY21Ob1lXNTBVR0Z6YzNkdmNtUmNiaUFnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSUWNtbHVkRTFsY21Ob1lXNTBRMjl3ZVNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbkxrVnVZV0pzWldSUWNtOXRjSFJHYjNKRGRYTjBiMjFsY2tOdmNIbFBia1ZtZEhCdmN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlRhV2R1WVhSMWNtVkdiRzkzVDI1RlpuUndiM01nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwWnk1QlpHUlNaV05sYVhCMFEyOXVabWxuS0dSaGRHRXBPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrOXdkR2x2Ym5NdVFXUmtUM0IwYVc5dWN5aGtZWFJoS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5aWE56WVdkbEtGSmxjWFZsYzNSSlpFaGxiSEJsY2k1SlpDaGNJbkpsWm5WdVpGd2lLU3dnUlhabGJuUnpMbEpsWm5WdVpGSmxjWFZsYzNRc0lHUmhkR0VzSUhSeWRXVXBPMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRkpsWm5WdVpGSmxjM0J2Ym5ObFhHNTdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMGdQU0J0TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbEpsY1hWbGMzUkpaQ0E5SUcwdVNXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQnRMa1JoZEdFdWNHOXpYM0psWmw5cFpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VFkyaGxiV1ZPWVcxbElEMGdiUzVFWVhSaExuTmphR1Z0WlY5dVlXMWxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsTmphR1Z0WlVGd2NFNWhiV1VnUFNCdExrUmhkR0V1YzJOb1pXMWxYMjVoYldVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VTNWalkyVnpjeUE5SUcwdVIyVjBVM1ZqWTJWemMxTjBZWFJsS0NrZ1BUMGdVM1ZqWTJWemMxTjBZWFJsTGxOMVkyTmxjM003WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwVW1WbWRXNWtRVzF2ZFc1MEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVjbVZtZFc1a1gyRnRiM1Z1ZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSU1VrNG9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzV5Y200N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFEzVnpkRzl0WlhKU1pXTmxhWEIwS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdVkzVnpkRzl0WlhKZmNtVmpaV2x3ZENCOGZDQmNJbHdpTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEUxbGNtTm9ZVzUwVW1WalpXbHdkQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG0xbGNtTm9ZVzUwWDNKbFkyVnBjSFE3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUVkbGRGSmxjM0J2Ym5ObFZHVjRkQ2dwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG1odmMzUmZjbVZ6Y0c5dWMyVmZkR1Y0ZENCOGZDQmNJbHdpTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEZKbGMzQnZibk5sUTI5a1pTZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbWh2YzNSZmNtVnpjRzl1YzJWZlkyOWtaU0I4ZkNCY0lsd2lPMXh1SUNBZ0lIMWNibHh1WEc0Z0lDQWdSMlYwVkdWeWJXbHVZV3hTWldabGNtVnVZMlZKWkNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExuUmxjbTFwYm1Gc1gzSmxabDlwWkNCOGZDQmNJbHdpTzF4dUlDQWdJSDFjYmlBZ0lDQkhaWFJEWVhKa1JXNTBjbmtvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1allYSmtYMlZ1ZEhKNUlIeDhJRndpWENJN1hHNGdJQ0FnZlZ4dUlDQWdJRWRsZEVGalkyOTFiblJVZVhCbEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVZV05qYjNWdWRGOTBlWEJsSUh4OElGd2lYQ0k3WEc0Z0lDQWdmVnh1SUNBZ0lFZGxkRUYxZEdoRGIyUmxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WVhWMGFGOWpiMlJsSUh4OElGd2lYQ0k3WEc0Z0lDQWdmVnh1SUNBZ0lFZGxkRUpoYm10RVlYUmxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WW1GdWExOWtZWFJsSUh4OElGd2lYQ0k3WEc0Z0lDQWdmVnh1SUNBZ0lFZGxkRUpoYm10VWFXMWxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dExrUmhkR0V1WW1GdWExOTBhVzFsSUh4OElGd2lYQ0k3WEc0Z0lDQWdmVnh1SUNBZ0lFZGxkRTFoYzJ0bFpGQmhiaWdwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJTNUVZWFJoTG0xaGMydGxaRjl3WVc0Z2ZId2dYQ0pjSWp0Y2JpQWdJQ0I5WEc0Z0lDQWdSMlYwVkdWeWJXbHVZV3hKWkNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExuUmxjbTFwYm1Gc1gybGtJSHg4SUZ3aVhDSTdYRzRnSUNBZ2ZWeHVJQ0FnSUZkaGMwMWxjbU5vWVc1MFVtVmpaV2x3ZEZCeWFXNTBaV1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1dFpYSmphR0Z1ZEY5eVpXTmxhWEIwWDNCeWFXNTBaV1E3WEc0Z0lDQWdmVnh1SUNBZ0lGZGhjME4xYzNSdmJXVnlVbVZqWldsd2RGQnlhVzUwWldRb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMjB1UkdGMFlTNWpkWE4wYjIxbGNsOXlaV05sYVhCMFgzQnlhVzUwWldRN1hHNGdJQ0FnZlZ4dUlDQWdJRWRsZEZObGRIUnNaVzFsYm5SRVlYUmxLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJQzh2WENKaVlXNXJYM05sZEhSc1pXMWxiblJmWkdGMFpWd2lPbHdpTWpBd05ESXdNVGhjSWx4dUlDQWdJQ0FnSUNCMllYSWdaR0YwWlZOMGNpQTlJSFJvYVhNdVgyMHVSR0YwWVM1aVlXNXJYM05sZEhSc1pXMWxiblJmWkdGMFpUdGNiaUFnSUNBZ0lDQWdhV1lnS0NGa1lYUmxVM1J5S1NCeVpYUjFjbTRnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFMWxjM05oWjJVdVVHRnljMlZDWVc1clJHRjBaU2hrWVhSbFUzUnlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJTWlhOd2IyNXpaVlpoYkhWbEtHRjBkSEpwWW5WMFpTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRmJZWFIwY21saWRYUmxYVHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJUYVdkdVlYUjFjbVZTWlhGMWFYSmxaRnh1ZTF4dUlDQWdJR052Ym5OMGNuVmpkRzl5S0cwcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbEpsY1hWbGMzUkpaQ0E5SUcwdVNXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQnRMa1JoZEdFdWNHOXpYM0psWmw5cFpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVmpaV2x3ZEZSdlUybG5iaUE5SUcwdVJHRjBZUzV0WlhKamFHRnVkRjl5WldObGFYQjBPMXh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0JUYVdkdVlYUjFjbVZTWlhGMWFYSmxaQ2h3YjNOU1pXWkpaQ3dnY21WeGRXVnpkRWxrTENCeVpXTmxhWEIwVkc5VGFXZHVLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1U1pYRjFaWE4wU1dRZ1BTQnlaWEYxWlhOMFNXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVHOXpVbVZtU1dRZ1BTQndiM05TWldaSlpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVmpaV2x3ZEZSdlUybG5iaUE5SUhKbFkyVnBjSFJVYjFOcFoyNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBUV1Z5WTJoaGJuUlNaV05sYVhCMEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl5WldObGFYQjBWRzlUYVdkdU8xeHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklGTnBaMjVoZEhWeVpVUmxZMnhwYm1WY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHdiM05TWldaSlpDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUc5elVtVm1TV1FnUFNCd2IzTlNaV1pKWkR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JVYjAxbGMzTmhaMlVvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHUmhkR0VnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNOZmNtVm1YMmxrT2lCMGFHbHpMbEJ2YzFKbFprbGtYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXVnpjMkZuWlNoU1pYRjFaWE4wU1dSSVpXeHdaWEl1U1dRb1hDSnphV2RrWldOY0lpa3NJRVYyWlc1MGN5NVRhV2R1WVhSMWNtVkVaV05zYVc1bFpDd2daR0YwWVN3Z2RISjFaU2s3WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyeGhjM01nVTJsbmJtRjBkWEpsUVdOalpYQjBYRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvY0c5elVtVm1TV1FwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsQnZjMUpsWmtsa0lEMGdjRzl6VW1WbVNXUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1ZHOU5aWE56WVdkbEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJrWVhSaElEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXpYM0psWmw5cFpEb2dkR2hwY3k1UWIzTlNaV1pKWkZ4dUlDQWdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRTFsYzNOaFoyVW9VbVZ4ZFdWemRFbGtTR1ZzY0dWeUxrbGtLRndpYzJsbllXTmpYQ0lwTENCRmRtVnVkSE11VTJsbmJtRjBkWEpsUVdOalpYQjBaV1FzSUdSaGRHRXNJSFJ5ZFdVcE8xeHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklFMXZkRzlRZFhKamFHRnpaVkpsY1hWbGMzUmNibnRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWhoYlc5MWJuUkRaVzUwY3l3Z2NHOXpVbVZtU1dRc0lITjFjbU5vWVhKblpVRnRiM1Z1ZENsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVRzl6VW1WbVNXUWdQU0J3YjNOU1pXWkpaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFkWEpqYUdGelpVRnRiM1Z1ZENBOUlHRnRiM1Z1ZEVObGJuUnpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsTjFjbU5vWVhKblpVRnRiM1Z1ZENBOUlITjFjbU5vWVhKblpVRnRiM1Z1ZER0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVUZFhCd2NtVnpjMDFsY21Ob1lXNTBVR0Z6YzNkdmNtUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGIyNW1hV2NnUFNCdVpYY2dVM0JwUTI5dVptbG5LQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVUM0IwYVc5dWN5QTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrOXdkR2x2Ym5Nb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCVWIwMWxjM05oWjJVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JoZEdFZ1BTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCd2IzTmZjbVZtWDJsa09pQjBhR2x6TGxCdmMxSmxaa2xrTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjSFZ5WTJoaGMyVmZZVzF2ZFc1ME9pQjBhR2x6TGxCMWNtTm9ZWE5sUVcxdmRXNTBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzVnlZMmhoY21kbFgyRnRiM1Z1ZERvZ2RHaHBjeTVUZFhKamFHRnlaMlZCYlc5MWJuUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCemRYQndjbVZ6YzE5dFpYSmphR0Z1ZEY5d1lYTnpkMjl5WkRvZ2RHaHBjeTVUZFhCd2NtVnpjMDFsY21Ob1lXNTBVR0Z6YzNkdmNtUmNiaUFnSUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5NUZibUZpYkdWa1VISnBiblJOWlhKamFHRnVkRU52Y0hrZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa052Ym1acFp5NUZibUZpYkdWa1VISnZiWEIwUm05eVEzVnpkRzl0WlhKRGIzQjVUMjVGWm5Sd2IzTWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeTVGYm1GaWJHVmtVMmxuYm1GMGRYSmxSbXh2ZDA5dVJXWjBjRzl6SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjdVFXUmtVbVZqWldsd2RFTnZibVpwWnloa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVBjSFJwYjI1ekxrRmtaRTl3ZEdsdmJuTW9aR0YwWVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z6YzJGblpTaFNaWEYxWlhOMFNXUklaV3h3WlhJdVNXUW9YQ0p0YjNSdlhDSXBMQ0JGZG1WdWRITXVUVzkwYjFCMWNtTm9ZWE5sVW1WeGRXVnpkQ3dnWkdGMFlTd2dkSEoxWlNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1RXOTBiMUIxY21Ob1lYTmxVbVZ6Y0c5dWMyVmNibnRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFkWEpqYUdGelpWSmxjM0J2Ym5ObElEMGdibVYzSUZCMWNtTm9ZWE5sVW1WemNHOXVjMlVvYlNrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUc5elVtVm1TV1FnUFNCUWRYSmphR0Z6WlZKbGMzQnZibk5sTGxCdmMxSmxaa2xrTzF4dUlDQWdJSDFjYm4xY2JseHVaWGh3YjNKMElHTnNZWE56SUZCb2IyNWxSbTl5UVhWMGFGSmxjWFZwY21Wa1hHNTdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9MaTR1WVhKbmN5bGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1LR0Z5WjNNdWJHVnVaM1JvSUQwOVBTQTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGxCdmMxSmxaa2xrSUQwZ1lYSm5jMXN3WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVVtVnhkV1Z6ZEVsa0lEMGdZWEpuYzFzeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0JvYjI1bFRuVnRZbVZ5SUQwZ1lYSm5jMXN5WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyMWxjbU5vWVc1MFNXUWdQU0JoY21keld6TmRPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lvWVhKbmN5NXNaVzVuZEdnZ1BUMDlJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVVtVnhkV1Z6ZEVsa0lEMGdZWEpuYzFzd1hTNUpaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11VUc5elVtVm1TV1FnUFNCaGNtZHpXekJkTGtSaGRHRXVjRzl6WDNKbFpsOXBaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNCb2IyNWxUblZ0WW1WeUlEMGdZWEpuYzFzd1hTNUVZWFJoTG1GMWRHaGZZMlZ1ZEhKbFgzQm9iMjVsWDI1MWJXSmxjanRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDIxbGNtTm9ZVzUwU1dRZ1BTQmhjbWR6V3pCZExrUmhkR0V1YldWeVkyaGhiblJmYVdRN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMGx1ZG1Gc2FXUWdZMkZzYkNCemFXY2dabTl5SUZCb2IyNWxJR0YxZEdnZ2NtVnhkV2x5WldRZ1kyeGhjM01uS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JjYmlBZ0lDQkhaWFJRYUc5dVpVNTFiV0psY2lncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZjR2h2Ym1WT2RXMWlaWEk3WEc0Z0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUVkbGRFMWxjbU5vWVc1MFNXUW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIxbGNtTm9ZVzUwU1dRN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1FYVjBhRU52WkdWQlpIWnBZMlZjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lod2IzTlNaV1pKWkN3Z1lYVjBhRU52WkdVcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbEJ2YzFKbFprbGtJRDBnY0c5elVtVm1TV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRWFYwYUVOdlpHVWdQU0JoZFhSb1EyOWtaVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlViMDFsYzNOaFoyVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdSaGRHRWdQU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM05mY21WbVgybGtPaUIwYUdsekxsQnZjMUpsWmtsa0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVhWMGFGOWpiMlJsT2lCMGFHbHpMa0YxZEdoRGIyUmxYRzRnSUNBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1RXVnpjMkZuWlNoU1pYRjFaWE4wU1dSSVpXeHdaWEl1U1dRb1hDSmhkWFJvWVdSY0lpa3NJRVYyWlc1MGN5NUJkWFJvUTI5a1pVRmtkbWxqWlN3Z1pHRjBZU3dnZEhKMVpTazdYRzRnSUNBZ2ZWeHVmU0lzSW1sdGNHOXlkQ0I3VUhWeVkyaGhjMlZTWlhGMVpYTjBMQ0JTWldaMWJtUlNaWEYxWlhOMGZTQm1jbTl0SUNjdUwxQjFjbU5vWVhObEp6dGNibHh1Wlhod2IzSjBJR05zWVhOeklGQjFjbU5vWVhObFNHVnNjR1Z5WEc1N1hHNGdJQ0FnYzNSaGRHbGpJRU55WldGMFpWQjFjbU5vWVhObFVtVnhkV1Z6ZENoaGJXOTFiblJEWlc1MGN5d2djSFZ5WTJoaGMyVkpaQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVUhWeVkyaGhjMlZTWlhGMVpYTjBLR0Z0YjNWdWRFTmxiblJ6TENCd2RYSmphR0Z6WlVsa0tUdGNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdjM1JoZEdsaklFTnlaV0YwWlZCMWNtTm9ZWE5sVW1WeGRXVnpkRll5S0hCdmMxSmxaa2xrTENCd2RYSmphR0Z6WlVGdGIzVnVkQ3dnZEdsd1FXMXZkVzUwTENCallYTm9iM1YwUVcxdmRXNTBMQ0J3Y205dGNIUkdiM0pEWVhOb2IzVjBMQ0J6ZFhKamFHRnlaMlZCYlc5MWJuUXBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnY0hJZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0c1bGR5QlFkWEpqYUdGelpWSmxjWFZsYzNRb2NIVnlZMmhoYzJWQmJXOTFiblFzSUhCdmMxSmxaa2xrS1N4Y2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnUTJGemFHOTFkRUZ0YjNWdWREb2dZMkZ6YUc5MWRFRnRiM1Z1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRlJwY0VGdGIzVnVkRG9nZEdsd1FXMXZkVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdVSEp2YlhCMFJtOXlRMkZ6YUc5MWREb2djSEp2YlhCMFJtOXlRMkZ6YUc5MWRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUZOMWNtTm9ZWEpuWlVGdGIzVnVkRG9nYzNWeVkyaGhjbWRsUVcxdmRXNTBYRzRnSUNBZ0lDQWdJSDBwTzF4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCd2NqdGNiaUFnSUNCOVhHNWNiaUFnSUNCemRHRjBhV01nUTNKbFlYUmxVbVZtZFc1a1VtVnhkV1Z6ZENoaGJXOTFiblJEWlc1MGN5d2djSFZ5WTJoaGMyVkpaQ3dnYzNWd2NISmxjM05OWlhKamFHRnVkRkJoYzNOM2IzSmtLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJTWldaMWJtUlNaWEYxWlhOMEtHRnRiM1Z1ZEVObGJuUnpMQ0J3ZFhKamFHRnpaVWxrTENCemRYQndjbVZ6YzAxbGNtTm9ZVzUwVUdGemMzZHZjbVFwTzF4dUlDQWdJSDFjYmx4dWZWeHVJaXdpYkdWMElGOWZVbVZ4ZFdWemRFbGtTR1ZzY0dWeVEyOTFiblJsY2lBOUlERTdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlNaWEYxWlhOMFNXUklaV3h3WlhJZ2UxeHVJQ0FnSUhOMFlYUnBZeUJKWkNod2NtVm1hWGdwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhCeVpXWnBlQ0FySUY5ZlVtVnhkV1Z6ZEVsa1NHVnNjR1Z5UTI5MWJuUmxjaXNyTzF4dUlDQWdJSDFjYm4xY2JpSXNJbVY0Y0c5eWRDQmpiR0Z6Y3lCVFpXTnlaWFJ6SUh0Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lobGJtTkxaWGtzSUdodFlXTkxaWGtwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVGYm1OTFpYa2dJQ0FnSUQwZ1pXNWpTMlY1TzF4dUlDQWdJQ0FnSUNCMGFHbHpMa2h0WVdOTFpYa2dJQ0FnUFNCb2JXRmpTMlY1TzF4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QnpZWFpsS0VWdVkwdGxlU3dnU0cxaFkwdGxlU2tnZTF4dUlDQWdJQ0FnSUNCc2IyTmhiRk4wYjNKaFoyVXVjMlYwU1hSbGJTZ25SVzVqUzJWNUp5d2dSVzVqUzJWNUtUdGNiaUFnSUNBZ0lDQWdiRzlqWVd4VGRHOXlZV2RsTG5ObGRFbDBaVzBvSjBodFlXTkxaWGtuTENCSWJXRmpTMlY1S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdjbVZ6ZEc5eVpTZ3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCVFpXTnlaWFJ6S0d4dlkyRnNVM1J2Y21GblpTNW5aWFJKZEdWdEtDZEZibU5MWlhrbktTd2diRzlqWVd4VGRHOXlZV2RsTG1kbGRFbDBaVzBvSjBodFlXTkxaWGtuS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYzNSaGRHbGpJR2x6VTJGMlpXUW9LU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJzYjJOaGJGTjBiM0poWjJVdVoyVjBTWFJsYlNnblJXNWpTMlY1SnlrZ0ppWWdiRzlqWVd4VGRHOXlZV2RsTG1kbGRFbDBaVzBvSjBodFlXTkxaWGtuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdVbVZ6WlhRb0tTQjdYRzRnSUNBZ0lDQWdJR3h2WTJGc1UzUnZjbUZuWlM1eVpXMXZkbVZKZEdWdEtDZEZibU5MWlhrbktUdGNiaUFnSUNBZ0lDQWdiRzlqWVd4VGRHOXlZV2RsTG5KbGJXOTJaVWwwWlcwb0owaHRZV05MWlhrbktUdGNiaUFnSUNCOVhHNTlYRzRpTENKbGVIQnZjblFnWTJ4aGMzTWdSR1YyYVdObFFXUmtjbVZ6YzFOMFlYUjFjMXh1ZTF4dUlDQWdJR2RsZENCQlpHUnlaWE56S0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdsbUtIUm9hWE11VlhObFUyVmpkWEpsVjJWaVUyOWphMlYwY3lrZ1hHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtWnhaRzQ3WEc0Z0lDQWdJQ0FnSUgwZ1hHNGdJQ0FnSUNBZ0lHVnNjMlZjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YVhBN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCelpYUWdRV1JrY21WemN5aGhaR1J5WlhOektWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1VmMyVlRaV04xY21WWFpXSlRiMk5yWlhSektTQmNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVtY1dSdUlEMGdZV1JrY21WelpYTTdYRzRnSUNBZ0lDQWdJSDBnWEc0Z0lDQWdJQ0FnSUdWc2MyVmNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVwY0NBOUlHRmtaSEpsYzNNN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDFjMlZUWldOMWNtVlhaV0pUYjJOclpYUnpLU0JjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVZYTmxVMlZqZFhKbFYyVmlVMjlqYTJWMGN5QTlJSFZ6WlZObFkzVnlaVmRsWWxOdlkydGxkSE03WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwY0NBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVabkZrYmlBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVUR0Z6ZEZWd1pHRjBaV1FnUFNCdWRXeHNPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVSR1YyYVdObFFXUmtjbVZ6YzFKbGMzQnZibk5sUTI5a1pTQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11VW1WemNHOXVjMlZUZEdGMGRYTkVaWE5qY21sd2RHbHZiaUE5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVtVnpjRzl1YzJWTlpYTnpZV2RsSUQwZ2JuVnNiRHRjYmlBZ0lDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JFWlhacFkyVkJaR1J5WlhOelVtVnpjRzl1YzJWRGIyUmxJRDFjYm50Y2JpQWdJQ0JUVlVORFJWTlRPaUFuVTFWRFEwVlRVeWNzWEc0Z0lDQWdTVTVXUVV4SlJGOVRSVkpKUVV4ZlRsVk5Ra1ZTT2lBblNVNVdRVXhKUkY5VFJWSkpRVXhmVGxWTlFrVlNKeXhjYmlBZ0lDQkJSRVJTUlZOVFgwNVBWRjlEU0VGT1IwVkVPaUFuUVVSRVVrVlRVMTlPVDFSZlEwaEJUa2RGUkNjc1hHNGdJQ0FnVTBWU1NVRk1YMDVWVFVKRlVsOU9UMVJmUTBoQlRrZEZSRG9nSjFORlVrbEJURjlPVlUxQ1JWSmZUazlVWDBOSVFVNUhSVVFuTEZ4dUlDQWdJRVJGVmtsRFJWOVRSVkpXU1VORlgwVlNVazlTT2lBblJFVldTVU5GWDFORlVsWkpRMFZmUlZKU1QxSW5YRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnU0hSMGNGTjBZWFIxYzBOdlpHVWdQU0JjYm50Y2JpQWdJQ0JPYjNSR2IzVnVaRG9nTkRBMFhHNTlPMXh1WEc1bGVIQnZjblFnWTJ4aGMzTWdSR1YyYVdObFFXUmtjbVZ6YzFObGNuWnBZMlZjYm50Y2JpQWdJQ0F2THlCU1pYUnlhV1YyWlZObGNuWnBZMlVvYzJWeWFXRnNUblZ0WW1WeUxDQmhjR2xMWlhrZ1BTQW5jM0JwTFhOaGJYQnNaUzF3YjNNeEp5d2dZV054ZFdseVpYSkRiMlJsTENCMWMyVlRaV04xY21WWFpXSlRiMk5yWlhSekxDQnBjMVJsYzNSTmIyUmxLVnh1SUNBZ0lHRnplVzVqSUZKbGRISnBaWFpsVTJWeWRtbGpaU2h6WlhKcFlXeE9kVzFpWlhJc0lHRndhVXRsZVNBOUlDZHpjR2t0YzJGdGNHeGxMWEJ2Y3pFbkxDQmhZM0YxYVhKbGNrTnZaR1VzSUdselUyVmpkWEpsUTI5dWJtVmpkR2x2Yml3Z2FYTlVaWE4wVFc5a1pTa2dJQ0FnWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQkRUMDVPUlVOVVNVOU9YMVJKVFVWUFZWUWdQU0E0TURBd08xeHVJQ0FnSUNBZ0lDQjJZWElnY0dGMGFDQTlJR2x6VTJWamRYSmxRMjl1Ym1WamRHbHZiaUEvSUNkbWNXUnVKeUE2SUNkcGNDYzdYRzRnSUNBZ0lDQWdJSFpoY2lCa1pYWnBZMlZCWkdSeVpYTnpWWEpwSUQwZ2FYTlVaWE4wVFc5a1pTQS9JR0JvZEhSd2N6b3ZMMlJsZG1salpTMWhaR1J5WlhOekxXRndhUzF6WWk0a2UyRmpjWFZwY21WeVEyOWtaWDB1YlhOd0xtRnpjMlZ0WW14NWNHRjViV1Z1ZEhNdVkyOXRMM1l4THlSN2MyVnlhV0ZzVG5WdFltVnlmUzhrZTNCaGRHaDlZQ0E2SUdCb2RIUndjem92TDJSbGRtbGpaUzFoWkdSeVpYTnpMV0Z3YVM0a2UyRmpjWFZwY21WeVEyOWtaWDB1YlhOd0xtRnpjMlZ0WW14NWNHRjViV1Z1ZEhNdVkyOXRMM1l4THlSN2MyVnlhV0ZzVG5WdFltVnlmUzhrZTNCaGRHaDlZRHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnVUhKdmJXbHpaUzV5WVdObEtGdGNiaUFnSUNBZ0lDQWdJQ0FnSUdabGRHTm9LR1JsZG1salpVRmtaSEpsYzNOVmNta3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1YwYUc5a09pQW5SMFZVSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdWaFpHVnljem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkQlUwMHRUVk5RTFVSRlZrbERSUzFCUkVSU1JWTlRMVUZRU1MxTFJWa25PaUJoY0dsTFpYa3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCOUtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGR5QlFjbTl0YVhObEtDaGZMQ0J5WldwbFkzUXBJRDArWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdjbVZxWldOMEtHNWxkeUJGY25KdmNpZ25WR2x0Wlc5MWRDQjNhR2xzWlNCMGNubHBibWNnZEc4Z2NtVjBjbWxsZG1VZ1NWQWdZV1JrY21WemN5Y3BLU3dnUTA5T1RrVkRWRWxQVGw5VVNVMUZUMVZVS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdLU3hjYmlBZ0lDQWdJQ0FnSUNCZEtUdGNiaUFnSUNCOVhHNTlYRzRpTENKcGJYQnZjblFnZTBWMlpXNTBjeXdnVTNWalkyVnpjMU4wWVhSbExDQk5aWE56WVdkbGZTQm1jbTl0SUNjdUwwMWxjM05oWjJWekp6dGNibWx0Y0c5eWRDQjdVM0JwUTI5dVptbG5MQ0JVY21GdWMyRmpkR2x2Yms5d2RHbHZibk45SUdaeWIyMGdKeTR2VTNCcFRXOWtaV3h6Snp0Y2JseHVaWGh3YjNKMElHTnNZWE56SUZObGRIUnNaVkpsY1hWbGMzUWdlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLR2xrS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11U1dRZ1BTQnBaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjZ1BTQnVaWGNnVTNCcFEyOXVabWxuS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VDNCMGFXOXVjeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZiazl3ZEdsdmJuTW9LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQlViMDFsYzNOaFoyVW9LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtZWFJoSUQwZ2UzMDdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjdVJXNWhZbXhsWkZCeWFXNTBUV1Z5WTJoaGJuUkRiM0I1SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjdVJXNWhZbXhsWkZCeWIyMXdkRVp2Y2tOMWMzUnZiV1Z5UTI5d2VVOXVSV1owY0c5eklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlRhV2R1WVhSMWNtVkdiRzkzVDI1RlpuUndiM01nUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjdVFXUmtVbVZqWldsd2RFTnZibVpwWnloa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVBjSFJwYjI1ekxrRmtaRTl3ZEdsdmJuTW9aR0YwWVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z6YzJGblpTaDBhR2x6TGtsa0xDQkZkbVZ1ZEhNdVUyVjBkR3hsVW1WeGRXVnpkQ3dnWkdGMFlTd2dkSEoxWlNrN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1UyVjBkR3hsYldWdWRDQjdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9iU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbEpsY1hWbGMzUkpaQ0E5SUcwdVNXUTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMGdQU0J0TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbE4xWTJObGMzTWdQU0J0TGtkbGRGTjFZMk5sYzNOVGRHRjBaU2dwSUQwOUlGTjFZMk5sYzNOVGRHRjBaUzVUZFdOalpYTnpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZGxkRk5sZEhSc1pVSjVRV054ZFdseVpYSkRiM1Z1ZENncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExtRmpZM1Z0ZFd4aGRHVmtYM05sZEhSc1pWOWllVjloWTNGMWFYSmxjbDlqYjNWdWREdGNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUlRaWFIwYkdWQ2VVRmpjWFZwY21WeVZtRnNkV1VvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgyMHVSR0YwWVM1aFkyTjFiWFZzWVhSbFpGOXpaWFIwYkdWZllubGZZV054ZFdseVpYSmZkbUZzZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFZHOTBZV3hEYjNWdWRDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMbUZqWTNWdGRXeGhkR1ZrWDNSdmRHRnNYMk52ZFc1ME8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVkbGRGUnZkR0ZzVm1Gc2RXVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzVoWTJOMWJYVnNZWFJsWkY5MGIzUmhiRjkyWVd4MVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNCSFpYUlFaWEpwYjJSVGRHRnlkRlJwYldVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJwYldWVGRISWdQU0IwYUdsekxsOXRMa1JoZEdFdWMyVjBkR3hsYldWdWRGOXdaWEpwYjJSZmMzUmhjblJmZEdsdFpUc2dMeThnWENJd05Ub3dNRndpWEc0Z0lDQWdJQ0FnSUhaaGNpQmtZWFJsVTNSeUlEMGdkR2hwY3k1ZmJTNUVZWFJoTG5ObGRIUnNaVzFsYm5SZmNHVnlhVzlrWDNOMFlYSjBYMlJoZEdVN0lDOHZJRndpTURWUFkzUXhOMXdpWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJOWlhOellXZGxMbEJoY25ObFFtRnVhMFJoZEdWVWFXMWxVM1J5S0dSaGRHVlRkSElzSUhScGJXVlRkSElwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWRsZEZCbGNtbHZaRVZ1WkZScGJXVW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUhScGJXVlRkSElnUFNCMGFHbHpMbDl0TGtSaGRHRXVjMlYwZEd4bGJXVnVkRjl3WlhKcGIyUmZaVzVrWDNScGJXVTdJQzh2SUZ3aU1EVTZNREJjSWx4dUlDQWdJQ0FnSUNCMllYSWdaR0YwWlZOMGNpQTlJSFJvYVhNdVgyMHVSR0YwWVM1elpYUjBiR1Z0Wlc1MFgzQmxjbWx2WkY5bGJtUmZaR0YwWlRzZ0x5OGdYQ0l3TlU5amRERTNYQ0pjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRTFsYzNOaFoyVXVVR0Z5YzJWQ1lXNXJSR0YwWlZScGJXVlRkSElvWkdGMFpWTjBjaXdnZEdsdFpWTjBjaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwVkhKcFoyZGxjbVZrVkdsdFpTZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnZEdsdFpWTjBjaUE5SUhSb2FYTXVYMjB1UkdGMFlTNXpaWFIwYkdWdFpXNTBYM1J5YVdkblpYSmxaRjkwYVcxbE95QXZMeUJjSWpBMU9qQXdPalExWENKY2JpQWdJQ0FnSUNBZ2RtRnlJR1JoZEdWVGRISWdQU0IwYUdsekxsOXRMa1JoZEdFdWMyVjBkR3hsYldWdWRGOTBjbWxuWjJWeVpXUmZaR0YwWlRzZ0x5OGdYQ0l3TlU5amRERTNYQ0pjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRTFsYzNOaFoyVXVVR0Z5YzJWQ1lXNXJSR0YwWlZScGJXVlRkSElvWkdGMFpWTjBjaXdnZEdsdFpWTjBjaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdSMlYwVW1WemNHOXVjMlZVWlhoMEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0TGtSaGRHRXVhRzl6ZEY5eVpYTndiMjV6WlY5MFpYaDBPMXh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0JIWlhSU1pXTmxhWEIwS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdWJXVnlZMmhoYm5SZmNtVmpaV2x3ZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JIWlhSVWNtRnVjMkZqZEdsdmJsSmhibWRsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXRMa1JoZEdFdWRISmhibk5oWTNScGIyNWZjbUZ1WjJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUjJWMFZHVnliV2x1WVd4SlpDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYlM1RVlYUmhMblJsY20xcGJtRnNYMmxrTzF4dUlDQWdJSDFjYmx4dUlDQWdJRmRoYzAxbGNtTm9ZVzUwVW1WalpXbHdkRkJ5YVc1MFpXUW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIwdVJHRjBZUzV0WlhKamFHRnVkRjl5WldObGFYQjBYM0J5YVc1MFpXUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1IyVjBVMk5vWlcxbFUyVjBkR3hsYldWdWRFVnVkSEpwWlhNb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5qYUdWdFpYTWdQU0IwYUdsekxsOXRMa1JoZEdFdWMyTm9aVzFsY3p0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z6WTJobGJXVnpLU0J5WlhSMWNtNGdXMTA3WEc1Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhOamFHVnRaWE11YldGd0tDaHpZMmhsYldVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dVMk5vWlcxbFUyVjBkR3hsYldWdWRFVnVkSEo1S0hOamFHVnRaU2s3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklGTmphR1Z0WlZObGRIUnNaVzFsYm5SRmJuUnllVnh1ZTF4dUlDQWdJQzh2SUZOamFHVnRaVk5sZEhSc1pXMWxiblJGYm5SeWVTaHpkSEpwYm1jZ2MyTm9aVzFsVG1GdFpTd2dZbTl2YkNCelpYUjBiR1ZDZVVGamNYVnBjbVZ5TENCcGJuUWdkRzkwWVd4RGIzVnVkQ3dnYVc1MElIUnZkR0ZzVm1Gc2RXVXBYRzRnSUNBZ0x5OGdVMk5vWlcxbFUyVjBkR3hsYldWdWRFVnVkSEo1S0U5aWFtVmpkQ0J6WTJobGJXVlBZbW9wWEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvTGk0dVlYSm5jeWxjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtS0dGeVozTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsTmphR1Z0WlU1aGJXVWdQU0JoY21keld6QmRMbk5qYUdWdFpWOXVZVzFsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1VFpYUjBiR1ZDZVVGamNYVnBjbVZ5SUQwZ1lYSm5jMXN3WFM1elpYUjBiR1ZmWW5sZllXTnhkV2x5WlhJdWRHOU1iM2RsY2tOaGMyVW9LU0E5UFNCY0lubGxjMXdpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1VWIzUmhiRlpoYkhWbElEMGdjR0Z5YzJWSmJuUW9ZWEpuYzFzd1hTNTBiM1JoYkY5MllXeDFaU3d4TUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsUnZkR0ZzUTI5MWJuUWdQU0J3WVhKelpVbHVkQ2hoY21keld6QmRMblJ2ZEdGc1gyTnZkVzUwTERFd0tUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1LR0Z5WjNNdWJHVnVaM1JvSUQwOVBTQTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGxOamFHVnRaVTVoYldVZ1BTQmhjbWR6V3pCZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NVRaWFIwYkdWQ2VVRmpjWFZwY21WeUlEMGdZWEpuYzFzeFhUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVWRzkwWVd4RGIzVnVkQ0E5SUdGeVozTmJNbDA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGxSdmRHRnNWbUZzZFdVZ1BTQmhjbWR6V3pOZE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRlJ2VTNSeWFXNW5LQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmdVMk5vWlcxbFRtRnRaVG9nSkh0MGFHbHpMbE5qYUdWdFpVNWhiV1Y5TENCVFpYUjBiR1ZDZVVGamNYVnBjbVZ5T2lBa2UzUm9hWE11VTJWMGRHeGxRbmxCWTNGMWFYSmxjbjBzSUZSdmRHRnNRMjkxYm5RNklDUjdkR2hwY3k1VWIzUmhiRU52ZFc1MGZTd2dWRzkwWVd4V1lXeDFaVG9nSkh0MGFHbHpMbFJ2ZEdGc1ZtRnNkV1Y5WUR0Y2JpQWdJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCVFpYUjBiR1Z0Wlc1MFJXNXhkV2x5ZVZKbGNYVmxjM1JjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2locFpDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11U1dRZ1BTQnBaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjZ1BTQnVaWGNnVTNCcFEyOXVabWxuS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VDNCMGFXOXVjeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZiazl3ZEdsdmJuTW9LVHRjYmlBZ0lDQjlYRzRnSUNBZ1hHNGdJQ0FnVkc5TlpYTnpZV2RsS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmtZWFJoSUQwZ2UzMDdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjdVJXNWhZbXhsWkZCeWFXNTBUV1Z5WTJoaGJuUkRiM0I1SUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjdVJXNWhZbXhsWkZCeWIyMXdkRVp2Y2tOMWMzUnZiV1Z5UTI5d2VVOXVSV1owY0c5eklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTI5dVptbG5Ma1Z1WVdKc1pXUlRhV2R1WVhSMWNtVkdiRzkzVDI1RlpuUndiM01nUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURiMjVtYVdjdVFXUmtVbVZqWldsd2RFTnZibVpwWnloa1lYUmhLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVBjSFJwYjI1ekxrRmtaRTl3ZEdsdmJuTW9aR0YwWVNrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dUV1Z6YzJGblpTaDBhR2x6TGtsa0xDQkZkbVZ1ZEhNdVUyVjBkR3hsYldWdWRFVnVjWFZwY25sU1pYRjFaWE4wTENCa1lYUmhMQ0IwY25WbEtUdGNiaUFnSUNCOVhHNTlJaXdpYVcxd2IzSjBJSHROWlhOellXZGxMQ0JOWlhOellXZGxVM1JoYlhBc0lFVjJaVzUwY3l3Z1UzVmpZMlZ6YzFOMFlYUmxmU0JtY205dElDY3VMMDFsYzNOaFoyVnpKenRjYm1sdGNHOXlkQ0I3VTNCcFEyOXVabWxuTENCVGNHbEdiRzkzTENCVGNHbFRkR0YwZFhNc0lGQmhhWEpwYm1kR2JHOTNVM1JoZEdVc0lGUnlZVzV6WVdOMGFXOXVSbXh2ZDFOMFlYUmxMQ0JVY21GdWMyRmpkR2x2YmxSNWNHVXNJRWx1YVhScFlYUmxWSGhTWlhOMWJIUXNJRTFwWkZSNFVtVnpkV3gwTENCVGRXSnRhWFJCZFhSb1EyOWtaVkpsYzNWc2RDd2dWSEpoYm5OaFkzUnBiMjVQY0hScGIyNXpmU0JtY205dElDY3VMMU53YVUxdlpHVnNjeWM3WEc1cGJYQnZjblFnZTFKbGNYVmxjM1JKWkVobGJIQmxjbjBnWm5KdmJTQW5MaTlTWlhGMVpYTjBTV1JJWld4d1pYSW5PMXh1YVcxd2IzSjBJSHRRWVdseWFXNW5TR1ZzY0dWeWZTQm1jbTl0SUNjdUwxQmhhWEpwYm1kSVpXeHdaWEluTzF4dWFXMXdiM0owSUh0RGIyNXVaV04wYVc5dUxDQkRiMjV1WldOMGFXOXVVM1JoZEdWOUlHWnliMjBnSnk0dlEyOXVibVZqZEdsdmJpYzdYRzVwYlhCdmNuUWdlMU53YVZCaGVVRjBWR0ZpYkdWOUlHWnliMjBnSnk0dlUzQnBVR0Y1UVhSVVlXSnNaU2M3WEc1cGJYQnZjblFnZTFCaGVVRjBWR0ZpYkdWRGIyNW1hV2Q5SUdaeWIyMGdKeTR2VUdGNVFYUlVZV0pzWlNjN1hHNXBiWEJ2Y25RZ2UxTndhVkJ5WldGMWRHaDlJR1p5YjIwZ0p5NHZVM0JwVUhKbFlYVjBhQ2M3WEc1cGJYQnZjblFnZTBOaGMyaHZkWFJQYm14NVVtVnhkV1Z6ZEgwZ1puSnZiU0FuTGk5RFlYTm9iM1YwSnp0Y2JtbHRjRzl5ZENCN1UyVjBkR3hsVW1WeGRXVnpkQ3dnVTJWMGRHeGxiV1Z1ZEVWdWNYVnBjbmxTWlhGMVpYTjBmU0JtY205dElDY3VMMU5sZEhSc1pXMWxiblFuTzF4dWFXMXdiM0owSUh0RWNtOXdTMlY1YzFKbGNYVmxjM1FzSUV0bGVWSmxjWFZsYzNRc0lFdGxlVU5vWldOckxDQlFZV2x5VW1WemNHOXVjMlY5SUdaeWIyMGdKeTR2VUdGcGNtbHVaeWM3WEc1cGJYQnZjblFnZTFObGRGQnZjMGx1Wm05U1pYRjFaWE4wTENCVFpYUlFiM05KYm1adlVtVnpjRzl1YzJVc0lFUmxkbWxqWlVsdVptOTlJR1p5YjIwZ0p5NHZVRzl6U1c1bWJ5YzdYRzVwYlhCdmNuUWdlMUIxY21Ob1lYTmxTR1ZzY0dWeWZTQm1jbTl0SUNjdUwxQjFjbU5vWVhObFNHVnNjR1Z5Snp0Y2JtbHRjRzl5ZENCN1MyVjVVbTlzYkdsdVowaGxiSEJsY24wZ1puSnZiU0FuTGk5TFpYbFNiMnhzYVc1blNHVnNjR1Z5Snp0Y2JtbHRjRzl5ZENCN1VHbHVaMGhsYkhCbGNpd2dVRzl1WjBobGJIQmxjbjBnWm5KdmJTQW5MaTlRYVc1blNHVnNjR1Z5Snp0Y2JtbHRjRzl5ZENCN1IyVjBUR0Z6ZEZSeVlXNXpZV04wYVc5dVVtVnhkV1Z6ZEN3Z1IyVjBUR0Z6ZEZSeVlXNXpZV04wYVc5dVVtVnpjRzl1YzJVc0lGTnBaMjVoZEhWeVpVRmpZMlZ3ZEN3Z1UybG5ibUYwZFhKbFJHVmpiR2x1WlN3Z1RXOTBiMUIxY21Ob1lYTmxVbVZ4ZFdWemRDd2dRWFYwYUVOdlpHVkJaSFpwWTJVc0lFTmhibU5sYkZSeVlXNXpZV04wYVc5dVVtVnhkV1Z6ZEN3Z1UybG5ibUYwZFhKbFVtVnhkV2x5WldRc0lFTmhibU5sYkZSeVlXNXpZV04wYVc5dVVtVnpjRzl1YzJVc0lGQm9iMjVsUm05eVFYVjBhRkpsY1hWcGNtVmtmU0JtY205dElDY3VMMUIxY21Ob1lYTmxKenRjYm1sdGNHOXlkQ0I3UkdWMmFXTmxRV1JrY21WemMxTmxjblpwWTJVc0lFUmxkbWxqWlVGa1pISmxjM05UZEdGMGRYTXNJRVJsZG1salpVRmtaSEpsYzNOU1pYTndiMjV6WlVOdlpHVXNJRWgwZEhCVGRHRjBkWE5EYjJSbGZTQm1jbTl0SUNjdUwxTmxjblpwWTJVdlJHVjJhV05sVTJWeWRtbGpaU2M3WEc1cGJYQnZjblFnZTFCeWFXNTBhVzVuVW1WeGRXVnpkSDBnWm5KdmJTQW5MaTlRY21sdWRHbHVaeWM3WEc1cGJYQnZjblFnZTFSbGNtMXBibUZzVTNSaGRIVnpVbVZ4ZFdWemRIMGdabkp2YlNBbkxpOVVaWEp0YVc1aGJGTjBZWFIxY3ljN1hHNWNibU52Ym5OMElGTlFTVjlXUlZKVFNVOU9JRDBnSnpJdU5pNHdKenRjYmx4dVkyeGhjM01nVTNCcElIdGNibHh1SUNBZ0lHZGxkQ0JEZFhKeVpXNTBVM1JoZEhWektDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlkzVnljbVZ1ZEZOMFlYUjFjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpaWFFnUTNWeWNtVnVkRk4wWVhSMWN5aDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaWgwYUdsekxsOWpkWEp5Wlc1MFUzUmhkSFZ6SUQwOVBTQjJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTNWeWNtVnVkRk4wWVhSMWN5QTlJSFpoYkhWbE8xeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QkRkWE4wYjIxRmRtVnVkQ2duVTNSaGRIVnpRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFpoYkhWbGZTa3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHTnZibk4wY25WamRHOXlLSEJ2YzBsa0xDQnpaWEpwWVd4T2RXMWlaWElzSUdWbWRIQnZjMEZrWkhKbGMzTXNJSE5sWTNKbGRITXBJRnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNHOXpTV1FnUFNCd2IzTkpaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjMlZ5YVdGc1RuVnRZbVZ5SUQwZ2MyVnlhV0ZzVG5WdFltVnlPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXpaV055WlhSeklEMGdjMlZqY21WMGN6dGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlptOXlZMlZUWldOMWNtVlhaV0pUYjJOclpYUnpJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVm1kSEJ2YzBGa1pISmxjM01nUFNCY0luZHpPaTh2WENJZ0t5QmxablJ3YjNOQlpHUnlaWE56TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjZ1BTQmpiMjV6YjJ4bE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOdmJtWnBaeUE5SUc1bGR5QlRjR2xEYjI1bWFXY29LVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMjl1YmlBOUlHNWxkeUJEYjI1dVpXTjBhVzl1S0NrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwUkdWMmFXTmxVM1JoZEhWeklEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkdWMmFXTmxRWEJwUzJWNUlDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJGamNYVnBjbVZ5UTI5a1pTQWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJsUmxjM1JOYjJSbElDQWdJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyRjFkRzlCWkdSeVpYTnpVbVZ6YjJ4MWRHbHZia1Z1WVdKc1pXUWdQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0F2THlCUGRYSWdjM1JoYlhBZ1ptOXlJSE5wWjI1cGJtY2diM1YwWjI5cGJtY2diV1Z6YzJGblpYTmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzQnBUV1Z6YzJGblpWTjBZVzF3SUQwZ2JtVjNJRTFsYzNOaFoyVlRkR0Z0Y0NoMGFHbHpMbDl3YjNOSlpDd2dkR2hwY3k1ZmMyVmpjbVYwY3l3Z01DazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjRzl6Vm1WdVpHOXlTV1FnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdiM05XWlhKemFXOXVJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFHRnpVMlYwU1c1bWJ5QTlJRzUxYkd3N1hHNWNiaUFnSUNBZ0lDQWdMeThnVjJVZ2QybHNiQ0J0WVdsdWRHRnBiaUJ6YjIxbElITjBZWFJsWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjF2YzNSU1pXTmxiblJRYVc1blUyVnVkQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyMXZjM1JTWldObGJuUlFiMjVuVW1WalpXbDJaV1FnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRhWE56WldSUWIyNW5jME52ZFc1MElEMGdNRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVYwY21sbGMxTnBibU5sVEdGemRFUmxkbWxqWlVGa1pISmxjM05TWlhOdmJIVjBhVzl1SUQwZ01EdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJXOXpkRkpsWTJWdWRFeHZaMmx1VW1WemNHOXVjMlVnUFNCdWRXeHNPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0J2Ym1kVWFXMWxiM1YwSUQwZ05UQXdNRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjR2x1WjBaeVpYRjFaVzVqZVNBOUlERTRNREF3TzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WaFpIbFViMVJ5WVc1ellXTjBJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNHVnlhVzlrYVdOUWFXNW5WR2h5WldGa0lEMGdiblZzYkR0Y2JseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5MGVFMXZibWwwYjNKRGFHVmphMFp5WlhGMVpXNWplU0E5SURFd01EQTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTm9aV05yVDI1VWVFWnlaWEYxWlc1amVTQTlJREl3TURBd08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dFlYaFhZV2wwUm05eVEyRnVZMlZzVkhnZ1BTQXhNREF3TUR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJ4bFpYQkNaV1p2Y21WU1pXTnZibTVsWTNSTmN5QTlJRE13TURBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDIxcGMzTmxaRkJ2Ym1kelZHOUVhWE5qYjI1dVpXTjBJRDBnTWp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WMGNtbGxjMEpsWm05eVpWSmxjMjlzZG1sdVowUmxkbWxqWlVGa1pISmxjM01nUFNBek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpYUnlhV1Z6VTJsdVkyVk1ZWE4wVUdGcGNtbHVaeUE5SURBN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGRISnBaWE5DWldadmNtVlFZV2x5YVc1bklEMGdNenRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5WldkbGVFbDBaVzF6Um05eVJXWjBjRzl6UVdSa2NtVnpjeUE5SUM5ZVd6QXRPVjE3TVN3emZWeGNMbHN3TFRsZGV6RXNNMzFjWEM1Yk1DMDVYWHN4TEROOVhGd3VXekF0T1YxN01Td3pmU1F2TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5WldkbGVFbDBaVzF6Um05eVJuRmtia1ZtZEhCdmMwRmtaSEpsYzNNZ1BTQXZYbHRoTFhwQkxWb3dMVGxjWEM0dFhTc2tMenRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZuWlhoSmRHVnRjMFp2Y2xCdmMwbGtJRDBnTDE1YllTMTZRUzFhTUMwNVhTb2tMenRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUkdiRzkzSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnYm5Wc2JEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaU0FnSUNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxJQ0FnSUNBZ0lDQWdQU0J1ZFd4c08xeHVJQ0FnSUgxY2JseHVJQ0FnSUVWdVlXSnNaVkJoZVVGMFZHRmliR1VvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM0JwVUdGMElEMGdibVYzSUZOd2FWQmhlVUYwVkdGaWJHVW9kR2hwY3lrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl6Y0dsUVlYUTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1JHbHpZV0pzWlZCaGVVRjBWR0ZpYkdVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNCcFVHRjBJRDBnYm1WM0lGTndhVkJoZVVGMFZHRmliR1VvZEdocGN5azdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTndhVkJoZEM1RGIyNW1hV2N1VUdGNVFYUlVZV0pzWlVWdVlXSnNaV1FnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTndhVkJoZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JGYm1GaWJHVlFjbVZoZFhSb0tDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOd2FWQnlaV0YxZEdnZ1BTQnVaWGNnVTNCcFVISmxZWFYwYUNoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzTndhVkJ5WldGMWRHZzdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1UzUmhjblFvS1NCN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDl3YjNOV1pXNWtiM0pKWkNCOGZDQWhkR2hwY3k1ZmNHOXpWbVZ5YzJsdmJpbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVRTlUSUdsdVptOXliV0YwYVc5dUlHbHpJRzV2ZHlCeVpYRjFhWEpsWkNCMGJ5QmlaU0J6WlhSY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTUzWVhKdUtGd2lUV2x6YzJsdVp5QlFUMU1nZG1WdVpHOXlJRWxFSUdGdVpDQjJaWEp6YVc5dUxpQndiM05XWlc1a2IzSkpaQ0JoYm1RZ2NHOXpWbVZ5YzJsdmJpQmhjbVVnY21WeGRXbHlaV1FnWW1WbWIzSmxJSE4wWVhKMGFXNW5YQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGd2lUV2x6YzJsdVp5QlFUMU1nZG1WdVpHOXlJRWxFSUdGdVpDQjJaWEp6YVc5dUxpQndiM05XWlc1a2IzSkpaQ0JoYm1RZ2NHOXpWbVZ5YzJsdmJpQmhjbVVnY21WeGRXbHlaV1FnWW1WbWIzSmxJSE4wWVhKMGFXNW5YQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDlwYzFCdmMwbGtWbUZzYVdRb2RHaHBjeTVmY0c5elNXUXBLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJqYjI1MGFXNTFaU3dnWVhNZ2RHaGxlU0JqWVc0Z2MyVjBJSFJvWlNCd2IzTkpaQ0JzWVhSbGNpQnZibHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY0c5elNXUWdQU0JjSWx3aU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG5kaGNtNG9YQ0pKYm5aaGJHbGtJSEJoY21GdFpYUmxjaXdnY0d4bFlYTmxJR052Y25KbFkzUWdkR2hsYlNCaVpXWnZjbVVnY0dGcGNtbHVaMXdpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmYVhORlpuUndiM05CWkdSeVpYTnpWbUZzYVdRb2RHaHBjeTVmWldaMGNHOXpRV1JrY21WemN5a3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR052Ym5ScGJuVmxMQ0JoY3lCMGFHVjVJR05oYmlCelpYUWdkR2hsSUdWbWRIQnZjMEZrWkhKbGMzTWdiR0YwWlhJZ2IyNWNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlZtZEhCdmMwRmtaSEpsYzNNZ1BTQmNJbHdpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbmRoY200b1hDSkpiblpoYkdsa0lIQmhjbUZ0WlhSbGNpd2djR3hsWVhObElHTnZjbkpsWTNRZ2RHaGxiU0JpWldadmNtVWdjR0ZwY21sdVoxd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbGMyVjBRMjl1YmlncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHRnlkRlJ5WVc1ellXTjBhVzl1VFc5dWFYUnZjbWx1WjFSb2NtVmhaQ2dwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRVpzYjNjZ1BTQlRjR2xHYkc5M0xrbGtiR1U3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5elpXTnlaWFJ6SUNFOUlHNTFiR3dwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktGd2lVM1JoY25ScGJtY2dhVzRnVUdGcGNtVmtJRk4wWVhSbFhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTNWeWNtVnVkRk4wWVhSMWN5QTlJRk53YVZOMFlYUjFjeTVRWVdseVpXUkRiMjV1WldOMGFXNW5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5dWJpNURiMjV1WldOMEtDazdJQzh2SUZSb2FYTWdhWE1nYm05dUxXSnNiMk5yYVc1blhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGNJbE4wWVhKMGFXNW5JR2x1SUZWdWNHRnBjbVZrSUZOMFlYUmxYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZOMFlYUjFjeUE5SUZOd2FWTjBZWFIxY3k1VmJuQmhhWEpsWkR0Y2JpQWdJQ0FnSUNBZ2ZTQmNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OHZJRk5sZENCMGFHVWdZV054ZFdseVpYSWdZMjlrWlNCdlppQjViM1Z5SUdKaGJtc3NJSEJzWldGelpTQmpiMjUwWVdOMElFRnpjMlZ0WW14NUozTWdTVzUwWldkeVlYUnBiMjRnUlc1bmFXNWxaWEp6SUdadmNpQmhZM0YxYVhKbGNpQmpiMlJsTGx4dUlDQWdJQzh2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnVTJWMFFXTnhkV2x5WlhKRGIyUmxLR0ZqY1hWcGNtVnlRMjlrWlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkZqY1hWcGNtVnlRMjlrWlNBOUlHRmpjWFZwY21WeVEyOWtaVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dkx5QlRaWFFnZEdobElHRndhU0JyWlhrZ2RYTmxaQ0JtYjNJZ1lYVjBieUJoWkdSeVpYTnpJR1JwYzJOdmRtVnllU0JtWldGMGRYSmxYRzRnSUNBZ0x5OHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeThnUEhKbGRIVnlibk0rUEM5eVpYUjFjbTV6UGx4dUlDQWdJRk5sZEVSbGRtbGpaVUZ3YVV0bGVTaGtaWFpwWTJWQmNHbExaWGtwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWtaWFpwWTJWQmNHbExaWGtnUFNCa1pYWnBZMlZCY0dsTFpYazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THk4Z1FXeHNiM2R6SUhsdmRTQjBieUJ6WlhRZ2RHaGxJSE5sY21saGJDQnVkVzFpWlhJZ2IyWWdkR2hsSUVWbWRIQnZjMXh1SUNBZ0lDOHZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdVMlYwVTJWeWFXRnNUblZ0WW1WeUtITmxjbWxoYkU1MWJXSmxjaWxjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUlRkR0YwZFhNZ0lUMGdVM0JwVTNSaGRIVnpMbFZ1Y0dGcGNtVmtLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0FnSUhaaGNpQjNZWE1nUFNCMGFHbHpMbDl6WlhKcFlXeE9kVzFpWlhJN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNObGNtbGhiRTUxYldKbGNpQTlJSE5sY21saGJFNTFiV0psY2p0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVNHRnpVMlZ5YVdGc1RuVnRZbVZ5UTJoaGJtZGxaQ2gzWVhNcEtWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDloZFhSdlVtVnpiMngyWlVWbWRIQnZjMEZrWkhKbGMzTW9LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SRVpYWnBZMlZUZEdGMGRYTWdQVDBnYm5Wc2JDbGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUkVaWFpwWTJWVGRHRjBkWE1nUFNCdVpYY2dSR1YyYVdObFFXUmtjbVZ6YzFOMFlYUjFjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJFWlhacFkyVlRkR0YwZFhNdVJHVjJhV05sUVdSa2NtVnpjMUpsYzNCdmJuTmxRMjlrWlNBOUlFUmxkbWxqWlVGa1pISmxjM05TWlhOd2IyNXpaVU52WkdVdVUwVlNTVUZNWDA1VlRVSkZVbDlPVDFSZlEwaEJUa2RGUkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NkRVpYWnBZMlZCWkdSeVpYTnpRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEVSbGRtbGpaVk4wWVhSMWMzMHBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeThnUVd4c2IzZHpJSGx2ZFNCMGJ5QnpaWFFnZEdobElHRjFkRzhnWVdSa2NtVnpjeUJrYVhOamIzWmxjbmtnWm1WaGRIVnlaUzRnWEc0Z0lDQWdMeTh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THk4Z1BISmxkSFZ5Ym5NK1BDOXlaWFIxY201elBseHVJQ0FnSUZObGRFRjFkRzlCWkdSeVpYTnpVbVZ6YjJ4MWRHbHZiaWhoZFhSdlFXUmtjbVZ6YzFKbGMyOXNkWFJwYjI1RmJtRmliR1VwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBVM1JoZEhWeklEMDlJRk53YVZOMFlYUjFjeTVRWVdseVpXUkRiMjV1WldOMFpXUXBYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlIZGhjeUE5SUhSb2FYTXVYMkYxZEc5QlpHUnlaWE56VW1WemIyeDFkR2x2YmtWdVlXSnNaV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkYxZEc5QlpHUnlaWE56VW1WemIyeDFkR2x2YmtWdVlXSnNaV1FnUFNCaGRYUnZRV1JrY21WemMxSmxjMjlzZFhScGIyNUZibUZpYkdVN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hoZFhSdlFXUmtjbVZ6YzFKbGMyOXNkWFJwYjI1RmJtRmliR1VnSmlZZ0lYZGhjeWxjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnZDJVbmNtVWdkSFZ5Ym1sdVp5QnBkQ0J2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZllYVjBiMUpsYzI5c2RtVkZablJ3YjNOQlpHUnlaWE56S0NrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4dklFTmhiR3dnZEdocGN5QnRaWFJvYjJRZ2RHOGdjMlYwSUhSb1pTQmpiR2xsYm5RZ2JHbGljbUZ5ZVNCMFpYTjBJRzF2WkdVdVhHNGdJQ0FnTHk4dklGTmxkQ0JwZENCMGJ5QjBjblZsSUc5dWJIa2dkMmhwYkdVZ2VXOTFJR0Z5WlNCa1pYWmxiRzl3YVc1bklIUm9aU0JwYm5SbFozSmhkR2x2Ymk0Z1hHNGdJQ0FnTHk4dklFbDBJR1JsWm1GMWJIUnpJSFJ2SUdaaGJITmxMaUJHYjNJZ1lTQnlaV0ZzSUcxbGNtTm9ZVzUwTENCaGJIZGhlWE1nYkdWaGRtVWdhWFFnYzJWMElIUnZJR1poYkhObExpQmNiaUFnSUNBdkx5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZMeUE4Y0dGeVlXMGdibUZ0WlQxY0luUmxjM1JOYjJSbFhDSStQQzl3WVhKaGJUNWNiaUFnSUNBdkx5OGdQSEpsZEhWeWJuTStQQzl5WlhSMWNtNXpQbHh1SUNBZ0lGTmxkRlJsYzNSTmIyUmxLSFJsYzNSTmIyUmxLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRGTjBZWFIxY3lBbUppQjBhR2x6TGtOMWNuSmxiblJUZEdGMGRYTWdJVDBnVTNCcFUzUmhkSFZ6TGxWdWNHRnBjbVZrS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwWlhOMFRXOWtaU0E5UFNCMGFHbHpMbDlwYmxSbGMzUk5iMlJsS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkMlVuY21VZ1kyaGhibWRwYm1jZ2JXOWtaVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBibFJsYzNSTmIyUmxJRDBnZEdWemRFMXZaR1U3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMkYxZEc5U1pYTnZiSFpsUldaMGNHOXpRV1JrY21WemN5Z3BPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5OGdVMlYwSUhSb1pTQmpiR2xsYm5RZ2JHbGljbUZ5ZVNCMGJ5QjFjMlVnYzJWamRYSmxJSGRsWWlCemIyTnJaWFJ6SUZSTVV5QW9kM056SUhCeWIzUnZZMjlzS1Z4dUlDQWdJQzh2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnTHk4dklEeHdZWEpoYlNCdVlXMWxQVndpYVhOVFpXTjFjbVZjSWo0OEwzQmhjbUZ0UGx4dUlDQWdJQzh2THlBOGNtVjBkWEp1Y3o0OEwzSmxkSFZ5Ym5NK1hHNGdJQ0FnVTJWMFUyVmpkWEpsVjJWaVUyOWphMlYwY3loMWMyVlRaV04xY21WWFpXSlRiMk5yWlhSektWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWm05eVkyVlRaV04xY21WWFpXSlRiMk5yWlhSeklEMGdkWE5sVTJWamRYSmxWMlZpVTI5amEyVjBjenRjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJCYkd4dmQzTWdlVzkxSUhSdklITmxkQ0IwYUdVZ1VHOXpTV1FnZDJocFkyZ2dhV1JsYm5ScFptbGxjeUIwYUdseklHbHVjM1JoYm1ObElHOW1JSGx2ZFhJZ1VFOVRMbHh1SUNBZ0lDOHZJRU5oYmlCdmJteDVJR0psSUdOaGJHeGxaQ0JwYmlCMGFHZGxJRlZ1Y0dGcGNtVmtJSE4wWVhSbExpQmNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ1UyVjBVRzl6U1dRb2NHOXpTV1FwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBVM1JoZEhWeklDRTlJRk53YVZOMFlYUjFjeTVWYm5CaGFYSmxaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmx4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3YjNOSlpDQTlJRndpWENJN0lDOHZJSEpsYzJWMElIQnZjMGxrSUhSdklHZHBkbVVnYlc5eVpTQmxlSEJzYVdOcGRDQm1aV1ZrWW1GamExeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmYVhOUWIzTkpaRlpoYkdsa0tIQnZjMGxrS1NsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9YQ0pRYjNNZ1NXUWdjMlYwSUhSdklHNTFiR3hjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdiM05KWkNBOUlIQnZjMGxrTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6Y0dsTlpYTnpZV2RsVTNSaGJYQXVVRzl6U1dRZ1BTQndiM05KWkR0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSeWRXVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdRV3hzYjNkeklIbHZkU0IwYnlCelpYUWdkR2hsSUZCcGJsQmhaQ0JoWkdSeVpYTnpMaUJUYjIxbGRHbHRaWE1nZEdobElGQnBibEJoWkNCdGFXZG9kQ0JqYUdGdVoyVWdTVkFnWVdSa2NtVnpjeUJjYmlBZ0lDQXZMeUFvZDJVZ2NtVmpiMjF0Wlc1a0lISmxjMlZ5ZG1sdVp5QnpkR0YwYVdNZ1NWQnpJR2xtSUhCdmMzTnBZbXhsS1M1Y2JpQWdJQ0F2THlCRmFYUm9aWElnZDJGNUlIbHZkU0J1WldWa0lIUnZJR0ZzYkc5M0lIbHZkWElnVlhObGNpQjBieUJsYm5SbGNpQjBhR1VnU1ZBZ1lXUmtjbVZ6Y3lCdlppQjBhR1VnVUdsdVVHRmtMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQlRaWFJGWm5Sd2IzTkJaR1J5WlhOektHRmtaSEpsYzNNcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwVTNSaGRIVnpJRDA5SUZOd2FWTjBZWFIxY3k1UVlXbHlaV1JEYjI1dVpXTjBaV1FnZkh3Z2RHaHBjeTVmWVhWMGIwRmtaSEpsYzNOU1pYTnZiSFYwYVc5dVJXNWhZbXhsWkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZaV1owY0c5elFXUmtjbVZ6Y3lBOUlGd2lYQ0k3SUM4dklISmxjMlYwSUdWbWRIQnZjMEZrWkhKbGMzTWdkRzhnWjJsMlpTQnRiM0psSUdWNGNHeHBZMmwwSUdabFpXUmlZV05yWEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXBjMFZtZEhCdmMwRmtaSEpsYzNOV1lXeHBaQ2hoWkdSeVpYTnpLU2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1hDSkZablJ3YjNNZ1FXUmtjbVZ6Y3lCelpYUWdkRzhnYm5Wc2JGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWbWRIQnZjMEZrWkhKbGMzTWdQU0JjSW5kek9pOHZYQ0lnS3lCaFpHUnlaWE56TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1dUxrRmtaSEpsYzNNZ1BTQjBhR2x6TGw5bFpuUndiM05CWkdSeVpYTnpPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZEdGMGFXTWdSMlYwVm1WeWMybHZiaWdwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVMUJKWDFaRlVsTkpUMDQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeW9xWEc0Z0lDQWdJQ29nVTJWMGN5QjJZV3gxWlhNZ2RYTmxaQ0IwYnlCcFpHVnVkR2xtZVNCMGFHVWdVRTlUSUhOdlpuUjNZWEpsSUhSdklIUm9aU0JGUmxSUVQxTWdkR1Z5YldsdVlXd3VYRzRnSUNBZ0lDb2dUWFZ6ZENCaVpTQnpaWFFnWW1WbWIzSmxJSE4wWVhKMGFXNW5JVnh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSEJoY21GdElIQnZjMVpsYm1SdmNrbGtJRlpsYm1SdmNpQnBaR1Z1ZEdsbWFXVnlJRzltSUhSb1pTQlFUMU1nYVhSelpXeG1MbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQndiM05XWlhKemFXOXVJQ0JXWlhKemFXOXVJSE4wY21sdVp5QnZaaUIwYUdVZ1VFOVRJR2wwYzJWc1ppNWNiaUFnSUNBZ0tpOWNiaUFnSUNCVFpYUlFiM05KYm1adktIQnZjMVpsYm1SdmNrbGtMQ0J3YjNOV1pYSnphVzl1S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjRzl6Vm1WdVpHOXlTV1FnUFNCd2IzTldaVzVrYjNKSlpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNHOXpWbVZ5YzJsdmJpQTlJSEJ2YzFabGNuTnBiMjQ3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnUTJGc2JDQjBhR2x6SUc5dVpTQjNhR1Z1SUdFZ1pteHZkeUJwY3lCbWFXNXBjMmhsWkNCaGJtUWdlVzkxSUhkaGJuUWdkRzhnWjI4Z1ltRmpheUIwYnlCcFpHeGxJSE4wWVhSbExseHVJQ0FnSUM4dklGUjVjR2xqWVd4c2VTQjNhR1Z1SUhsdmRYSWdkWE5sY2lCamJHbGphM01nZEdobElGd2lUMHRjSWlCaWRXSjBkRzl1SUhSdklHRmphMjV2ZDJ4a1oyVWdkR2hoZENCd1lXbHlhVzVuSUdselhHNGdJQ0FnTHk4Z1ptbHVhWE5vWldRc0lHOXlJSFJvWVhRZ2RISmhibk5oWTNScGIyNGdhWE1nWm1sdWFYTm9aV1F1WEc0Z0lDQWdMeThnVjJobGJpQjBjblZsTENCNWIzVWdZMkZ1SUdScGMyMXBjM01nZEdobElHWnNiM2NnYzJOeVpXVnVJR0Z1WkNCemFHOTNJR0poWTJzZ2RHaGxJR2xrYkdVZ2MyTnlaV1Z1TGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlBOGNtVjBkWEp1Y3o1MGNuVmxJRzFsWVc1eklIZGxJR2hoZG1VZ2JXOTJaV1FnWW1GamF5QjBieUIwYUdVZ1NXUnNaU0J6ZEdGMFpTNGdabUZzYzJVZ2JXVmhibk1nWTNWeWNtVnVkQ0JtYkc5M0lIZGhjeUJ1YjNRZ1ptbHVhWE5vWldRZ2VXVjBMand2Y21WMGRYSnVjejVjYmlBZ0lDQkJZMnRHYkc5M1JXNWtaV1JCYm1SQ1lXTnJWRzlKWkd4bEtDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SR2JHOTNJRDA5SUZOd2FVWnNiM2N1U1dSc1pTbGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbE95QXZMeUJoYkhKbFlXUjVJR2xrYkdWY2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFJteHZkeUE5UFNCVGNHbEdiRzkzTGxCaGFYSnBibWNnSmlZZ2RHaHBjeTVEZFhKeVpXNTBVR0ZwY21sdVowWnNiM2RUZEdGMFpTNUdhVzVwYzJobFpDbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBOUlGTndhVVpzYjNjdVNXUnNaVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwUm14dmR5QTlQU0JUY0dsR2JHOTNMbFJ5WVc1ellXTjBhVzl1SUNZbUlIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGtacGJtbHphR1ZrS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SR2JHOTNJRDBnVTNCcFJteHZkeTVKWkd4bE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1pXNWtjbVZuYVc5dVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlVhR2x6SUhkcGJHd2dZMjl1Ym1WamRDQjBieUIwYUdVZ1JXWjBjRzl6SUdGdVpDQnpkR0Z5ZENCMGFHVWdjR0ZwY21sdVp5QndjbTlqWlhOekxseHVJQ0FnSUM4dklFOXViSGtnWTJGc2JDQjBhR2x6SUdsbUlIbHZkU0JoY21VZ2FXNGdkR2hsSUZWdWNHRnBjbVZrSUhOMFlYUmxMbHh1SUNBZ0lDOHZJRk4xWW5OamNtbGlaU0IwYnlCMGFHVWdVR0ZwY21sdVowWnNiM2RUZEdGMFpVTm9ZVzVuWldRZ1pYWmxiblFnZEc4Z1oyVjBJSFZ3WkdGMFpYTWdiMjRnZEdobElIQmhhWEpwYm1jZ2NISnZZMlZ6Y3k1Y2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1BISmxkSFZ5Ym5NK1YyaGxkR2hsY2lCd1lXbHlhVzVuSUdoaGN5QnBibWwwYVdGMFpXUWdiM0lnYm05MFBDOXlaWFIxY201elBseHVJQ0FnSUZCaGFYSW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbXh2WnloY0lsUnllV2x1WnlCMGJ5QndZV2x5SUM0dUxpNWNJaWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEZOMFlYUjFjeUFoUFNCVGNHbFRkR0YwZFhNdVZXNXdZV2x5WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1M1lYSnVLRndpVkhKcFpXUWdkRzhnVUdGcGNpd2dZblYwSUhkbEozSmxJR0ZzY21WaFpIa2djR0ZwY21Wa0xpQlRkRzl3SUhCaGFYSnBibWN1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5cGMxQnZjMGxrVm1Gc2FXUW9kR2hwY3k1ZmNHOXpTV1FwSUh4OElDRjBhR2x6TGw5cGMwVm1kSEJ2YzBGa1pISmxjM05XWVd4cFpDaDBhR2x6TGw5bFpuUndiM05CWkdSeVpYTnpLU2xjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbmRoY200b1hDSkpiblpoYkdsa0lGQnZjeUJKWkNCdmNpQkZablJ3YjNNZ1lXUmtjbVZ6Y3l3Z2MzUnZjQ0J3WVdseWFXNW5MbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dQU0JUY0dsR2JHOTNMbEJoYVhKcGJtYzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEZCaGFYSnBibWRHYkc5M1UzUmhkR1VnUFNCdVpYY2dVR0ZwY21sdVowWnNiM2RUZEdGMFpWeHVJQ0FnSUNBZ0lDQW9lMXh1SUNBZ0lDQWdJQ0FnSUNBZ1UzVmpZMlZ6YzJaMWJEb2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JHYVc1cGMyaGxaRG9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCTlpYTnpZV2RsT2lCY0lrTnZibTVsWTNScGJtY3VMaTVjSWl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRUYzWVdsMGFXNW5RMmhsWTJ0R2NtOXRSV1owY0c5ek9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRUYzWVdsMGFXNW5RMmhsWTJ0R2NtOXRVRzl6T2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lFTnZibVpwY20xaGRHbHZia052WkdVNklGd2lYQ0pjYmlBZ0lDQWdJQ0FnZlNrN1hHNWNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFCaGFYSnBibWRHYkc5M1UzUmhkR1ZEYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEdocGN5NURkWEp5Wlc1MFVHRnBjbWx1WjBac2IzZFRkR0YwWlgwcEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkyOXViaTVEYjI1dVpXTjBLQ2s3SUM4dklFNXZiaTFDYkc5amEybHVaMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCRFlXeHNJSFJvYVhNZ2QyaGxiaUI1YjNWeUlIVnpaWElnWTJ4cFkydHpJSGxsY3lCMGJ5QmpiMjVtYVhKdElIUm9aU0J3WVdseWFXNW5JR052WkdVZ2IyNGdlVzkxY2lCY2JpQWdJQ0F2THlCelkzSmxaVzRnYldGMFkyaGxjeUIwYUdVZ2IyNWxJRzl1SUhSb1pTQkZablJ3YjNNdVhHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUZCaGFYSnBibWREYjI1bWFYSnRRMjlrWlNncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdVEzVnljbVZ1ZEZCaGFYSnBibWRHYkc5M1UzUmhkR1V1UVhkaGFYUnBibWREYUdWamEwWnliMjFRYjNNcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklGZGxJSGRsY21WdUozUWdaWGh3WldOMGFXNW5JSFJvYVhOY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVFYZGhhWFJwYm1kRGFHVmphMFp5YjIxUWIzTWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVFYZGhhWFJwYm1kRGFHVmphMFp5YjIxRlpuUndiM01wWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUVKMWRDQjNaU0JoY21VZ2MzUnBiR3dnZDJGcGRHbHVaeUJtYjNJZ1kyOXVabWx5YldGMGFXOXVJR1p5YjIwZ1JXWjBjRzl6SUhOcFpHVXVYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhjSWxCaGFYSWdRMjlrWlNCRGIyNW1hWEp0WldRZ1puSnZiU0JRVDFNZ2MybGtaU3dnWW5WMElHRnRJSE4wYVd4c0lIZGhhWFJwYm1jZ1ptOXlJR052Ym1acGNtMWhkR2x2YmlCbWNtOXRJRVZtZEhCdmN5NWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJRWVdseWFXNW5SbXh2ZDFOMFlYUmxMazFsYzNOaFoyVWdQVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRndpUTJ4cFkyc2dXVVZUSUc5dUlFVkdWRkJQVXlCcFppQmpiMlJsSUdsek9pQmNJaUFySUhSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVEyOXVabWx5YldGMGFXOXVRMjlrWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NkUVlXbHlhVzVuUm14dmQxTjBZWFJsUTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdWOUtTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJiSEpsWVdSNUlHTnZibVpwY20xbFpDQm1jbTl0SUVWbWRIQnZjeUF0SUZOdklHRnNiQ0JuYjI5a0lHNXZkeTRnVjJVbmNtVWdVR0ZwY21Wa0lHRnNjMjhnWm5KdmJTQjBhR1VnVUU5VElIQmxjbk53WldOMGFYWmxMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWENKUVlXbHlJRU52WkdVZ1EyOXVabWx5YldWa0lHWnliMjBnVUU5VElITnBaR1VzSUdGdVpDQjNZWE1nWVd4eVpXRmtlU0JqYjI1bWFYSnRaV1FnWm5KdmJTQkZablJ3YjNNZ2MybGtaUzRnVUdGcGNtbHVaeUJtYVc1aGJHbHpaV1F1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiMjVRWVdseWFXNW5VM1ZqWTJWemN5Z3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYjI1U1pXRmtlVlJ2VkhKaGJuTmhZM1FvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklFTmhiR3dnZEdocGN5QnBaaUI1YjNWeUlIVnpaWElnWTJ4cFkydHpJRU5CVGtORlRDQnZjaUJPVHlCa2RYSnBibWNnZEdobElIQmhhWEpwYm1jZ2NISnZZMlZ6Y3k1Y2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnVUdGcGNtbHVaME5oYm1ObGJDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFJteHZkeUFoUFNCVGNHbEdiRzkzTGxCaGFYSnBibWNnZkh3Z2RHaHBjeTVEZFhKeVpXNTBVR0ZwY21sdVowWnNiM2RUZEdGMFpTNUdhVzVwYzJobFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVFYZGhhWFJwYm1kRGFHVmphMFp5YjIxUWIzTWdKaVlnSVhSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVFYZGhhWFJwYm1kRGFHVmphMFp5YjIxRlpuUndiM01wWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSb2FYTWdiV1ZoYm5NZ2RHaGhkQ0IwYUdVZ1JXWjBjRzl6SUdGc2NtVmhaSGtnZEdocGJtdHpJR2wwSjNNZ2NHRnBjbVZrTGx4dUlDQWdJQ0FnSUNBZ0lDQWdMeThnVEdWMEozTWdkR1ZzYkNCcGRDQjBieUJrY205d0lHdGxlWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNObGJtUW9ibVYzSUVSeWIzQkxaWGx6VW1WeGRXVnpkQ2dwTGxSdlRXVnpjMkZuWlNncEtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOXZibEJoYVhKcGJtZEdZV2xzWldRb0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QkRZV3hzSUhSb2FYTWdkMmhsYmlCNWIzVnlJSFZ6WlhNZ1kyeHBZMnR6SUhSb1pTQlZibkJoYVhJZ1luVjBkRzl1TGx4dUlDQWdJQzh2SUZSb2FYTWdkMmxzYkNCa2FYTmpiMjV1WldOMElHWnliMjBnZEdobElFVm1kSEJ2Y3lCaGJtUWdabTl5WjJWMElIUm9aU0J6WldOeVpYUnpMbHh1SUNBZ0lDOHZJRlJvWlNCRGRYSnlaVzUwVTNSaGRHVWdhWE1nZEdobGJpQmphR0Z1WjJWa0lIUnZJRlZ1Y0dGcGNtVmtMbHh1SUNBZ0lDOHZJRU5oYkd3Z2RHaHBjeUJ2Ym14NUlHbG1JSGx2ZFNCaGNtVWdibTkwSUhsbGRDQnBiaUIwYUdVZ1ZXNXdZV2x5WldRZ2MzUmhkR1V1WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJRlZ1Y0dGcGNpZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFUzUmhkSFZ6SUQwOUlGTndhVk4wWVhSMWN5NVZibkJoYVhKbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dJVDBnVTNCcFJteHZkeTVKWkd4bEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUM4dklFSmxjM1FnWldabWIzSjBJR3hsZEhScGJtY2dkR2hsSUdWbWRIQnZjeUJyYm05M0lIUm9ZWFFnZDJVbmNtVWdaSEp2Y0hCcGJtY2dkR2hsSUd0bGVYTXNJSE52SUdsMElHTmhiaUJrY205d0lIUm9aVzBnWVhNZ2QyVnNiQzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjMlZ1WkNodVpYY2dSSEp2Y0V0bGVYTlNaWEYxWlhOMEtDa3VWRzlOWlhOellXZGxLQ2twTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlrYjFWdWNHRnBjaWdwTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QmxibVJ5WldkcGIyNWNibHh1SUNBZ0lDOHZJSEpsWjJsdmJpQlVjbUZ1YzJGamRHbHZiaUJOWlhSb2IyUnpYRzVjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJKYm1sMGFXRjBaWE1nWVNCd2RYSmphR0Z6WlNCMGNtRnVjMkZqZEdsdmJpNGdRbVVnYzNWaWMyTnlhV0psWkNCMGJ5QlVlRVpzYjNkVGRHRjBaVU5vWVc1blpXUWdaWFpsYm5RZ2RHOGdaMlYwSUhWd1pHRjBaWE1nYjI0Z2RHaGxJSEJ5YjJObGMzTXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWNHOXpVbVZtU1dSY0lqNUJiSEJvWVc1MWJXVnlhV01nU1dSbGJuUnBabWxsY2lCbWIzSWdlVzkxY2lCd2RYSmphR0Z6WlM0OEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2lZVzF2ZFc1MFEyVnVkSE5jSWo1QmJXOTFiblFnYVc0Z1EyVnVkSE1nZEc4Z1kyaGhjbWRsUEM5d1lYSmhiVDVjYmlBZ0lDQXZMeUE4Y21WMGRYSnVjejVKYm1sMGFXRjBaVlI0VW1WemRXeDBQQzl5WlhSMWNtNXpQbHh1SUNBZ0lFbHVhWFJwWVhSbFVIVnlZMmhoYzJWVWVDaHdiM05TWldaSlpDd2dZVzF2ZFc1MFEyVnVkSE1wWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBVM1JoZEhWeklEMDlJRk53YVZOMFlYUjFjeTVWYm5CaGFYSmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJKYm1sMGFXRjBaVlI0VW1WemRXeDBLR1poYkhObExDQmNJazV2ZENCUVlXbHlaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBaFBTQlRjR2xHYkc5M0xrbGtiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnU1c1cGRHbGhkR1ZVZUZKbGMzVnNkQ2htWVd4elpTd2dYQ0pPYjNRZ1NXUnNaVndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCd2RYSmphR0Z6WlZKbGNYVmxjM1FnUFNCUWRYSmphR0Z6WlVobGJIQmxjaTVEY21WaGRHVlFkWEpqYUdGelpWSmxjWFZsYzNRb1lXMXZkVzUwUTJWdWRITXNJSEJ2YzFKbFprbGtLVHRjYmlBZ0lDQWdJQ0FnY0hWeVkyaGhjMlZTWlhGMVpYTjBMa052Ym1acFp5QTlJSFJvYVhNdVEyOXVabWxuTzF4dUlDQWdJQ0FnSUNCMllYSWdjSFZ5WTJoaGMyVk5jMmNnUFNCd2RYSmphR0Z6WlZKbGNYVmxjM1F1Vkc5TlpYTnpZV2RsS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRVpzYjNjZ1BTQlRjR2xHYkc5M0xsUnlZVzV6WVdOMGFXOXVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTQTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrWnNiM2RUZEdGMFpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmMxSmxaa2xrTENCVWNtRnVjMkZqZEdsdmJsUjVjR1V1VUhWeVkyaGhjMlVzSUdGdGIzVnVkRU5sYm5SekxDQndkWEpqYUdGelpVMXpaeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHQlhZV2wwYVc1bklHWnZjaUJGUmxSUVQxTWdZMjl1Ym1WamRHbHZiaUIwYnlCdFlXdGxJSEJoZVcxbGJuUWdjbVZ4ZFdWemRDQm1iM0lnSkh0aGJXOTFiblJEWlc1MGN5QXZJREV3TUM0d2ZXQXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmYzJWdVpDaHdkWEpqYUdGelpVMXpaeWtwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbExsTmxiblFvWUVGemEyVmtJRVZHVkZCUFV5QjBieUJoWTJObGNIUWdjR0Y1YldWdWRDQm1iM0lnSkh0aGJXOTFiblJEWlc1MGN5QXZJREV3TUM0d2ZXQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25WSGhHYkc5M1UzUmhkR1ZEYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVjlLU2s3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ1WlhjZ1NXNXBkR2xoZEdWVWVGSmxjM1ZzZENoMGNuVmxMQ0JjSWxCMWNtTm9ZWE5sSUVsdWFYUnBZWFJsWkZ3aUtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QkpibWwwYVdGMFpYTWdZU0J3ZFhKamFHRnpaU0IwY21GdWMyRmpkR2x2Ymk0Z1FtVWdjM1ZpYzJOeWFXSmxaQ0IwYnlCVWVFWnNiM2RUZEdGMFpVTm9ZVzVuWldRZ1pYWmxiblFnZEc4Z1oyVjBJSFZ3WkdGMFpYTWdiMjRnZEdobElIQnliMk5sYzNNdVhHNGdJQ0FnTHk4Z1BIQmhjbUUrVkdsd0lHRnVaQ0JqWVhOb2IzVjBJR0Z5WlNCdWIzUWdZV3hzYjNkbFpDQnphVzExYkhSaGJtVnZkWE5zZVM0OEwzQmhjbUUrWEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2ljRzl6VW1WbVNXUmNJajVCYmlCVmJtbHhkV1VnU1dSbGJuUnBabWxsY2lCbWIzSWdlVzkxY2lCUGNtUmxjaTlRZFhKamFHRnpaVHd2Y0dGeVlXMCtYRzRnSUNBZ0x5OGdQSEJoY21GdElHNWhiV1U5WENKd2RYSmphR0Z6WlVGdGIzVnVkRndpUGxSb1pTQlFkWEpqYUdGelpTQkJiVzkxYm5RZ2FXNGdRMlZ1ZEhNdVBDOXdZWEpoYlQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJblJwY0VGdGIzVnVkRndpUGxSb1pTQlVhWEFnUVcxdmRXNTBJR2x1SUVObGJuUnpQQzl3WVhKaGJUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW1OaGMyaHZkWFJCYlc5MWJuUmNJajVVYUdVZ1EyRnphRzkxZENCQmJXOTFiblFnYVc0Z1EyVnVkSE04TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWNISnZiWEIwUm05eVEyRnphRzkxZEZ3aVBsZG9aWFJvWlhJZ2RHOGdjSEp2YlhCMElIbHZkWElnWTNWemRHOXRaWElnWm05eUlHTmhjMmh2ZFhRZ2IyNGdkR2hsSUVWbWRIQnZjend2Y0dGeVlXMCtYRzRnSUNBZ0x5OGdQSEJoY21GdElHNWhiV1U5WENKdmNIUnBiMjV6WENJK1ZHaGxJRk5sZEhScGJtY2dkRzhnYzJWMElFaGxZV1JsY2lCaGJtUWdSbTl2ZEdWeUlHWnZjaUIwYUdVZ1VtVmpaV2x3ZER3dmNHRnlZVzArWEc0Z0lDQWdMeThnUEhCaGNtRnRJRzVoYldVOVhDSnpkWEpqYUdGeVoyVkJiVzkxYm5SY0lqNVVhR1VnVTNWeVkyaGhjbWRsSUVGdGIzVnVkQ0JwYmlCRFpXNTBjend2Y0dGeVlXMCtYRzRnSUNBZ0x5OGdQSEpsZEhWeWJuTStTVzVwZEdsaGRHVlVlRkpsYzNWc2REd3ZjbVYwZFhKdWN6NWNiaUFnSUNCSmJtbDBhV0YwWlZCMWNtTm9ZWE5sVkhoV01paHdiM05TWldaSlpDd2djSFZ5WTJoaGMyVkJiVzkxYm5Rc0lIUnBjRUZ0YjNWdWRDd2dZMkZ6YUc5MWRFRnRiM1Z1ZEN3Z2NISnZiWEIwUm05eVEyRnphRzkxZEN3Z2IzQjBhVzl1Y3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Yms5d2RHbHZibk1vS1N3Z2MzVnlZMmhoY21kbFFXMXZkVzUwSUQwZ01DbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SVGRHRjBkWE1nUFQwZ1UzQnBVM1JoZEhWekxsVnVjR0ZwY21Wa0tTQnlaWFIxY200Z2JtVjNJRWx1YVhScFlYUmxWSGhTWlhOMWJIUW9abUZzYzJVc0lGd2lUbTkwSUZCaGFYSmxaRndpS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdsd1FXMXZkVzUwSUQ0Z01DQW1KaUFvWTJGemFHOTFkRUZ0YjNWdWRDQStJREFnZkh3Z2NISnZiWEIwUm05eVEyRnphRzkxZENrcElISmxkSFZ5YmlCdVpYY2dTVzVwZEdsaGRHVlVlRkpsYzNWc2RDaG1ZV3h6WlN3Z1hDSkRZVzV1YjNRZ1FXTmpaWEIwSUZScGNITWdZVzVrSUVOaGMyaHZkWFFnWVhRZ2RHaGxJSE5oYldVZ2RHbHRaUzVjSWlrN1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFJteHZkeUFoUFNCVGNHbEdiRzkzTGtsa2JHVXBJSEpsZEhWeWJpQnVaWGNnU1c1cGRHbGhkR1ZVZUZKbGMzVnNkQ2htWVd4elpTd2dYQ0pPYjNRZ1NXUnNaVndpS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBOUlGTndhVVpzYjNjdVZISmhibk5oWTNScGIyNDdYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0IyWVhJZ2NIVnlZMmhoYzJVZ1BTQlFkWEpqYUdGelpVaGxiSEJsY2k1RGNtVmhkR1ZRZFhKamFHRnpaVkpsY1hWbGMzUldNaWh3YjNOU1pXWkpaQ3dnY0hWeVkyaGhjMlZCYlc5MWJuUXNJSFJwY0VGdGIzVnVkQ3dnWTJGemFHOTFkRUZ0YjNWdWRDd2djSEp2YlhCMFJtOXlRMkZ6YUc5MWRDd2djM1Z5WTJoaGNtZGxRVzF2ZFc1MEtUdGNiaUFnSUNBZ0lDQWdjSFZ5WTJoaGMyVXVRMjl1Wm1sbklEMGdkR2hwY3k1RGIyNW1hV2M3WEc0Z0lDQWdJQ0FnSUhCMWNtTm9ZWE5sTGs5d2RHbHZibk1nUFNCdmNIUnBiMjV6TzF4dUlDQWdJQ0FnSUNCMllYSWdjSFZ5WTJoaGMyVk5jMmNnUFNCd2RYSmphR0Z6WlM1VWIwMWxjM05oWjJVb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVZ1BTQnVaWGNnVkhKaGJuTmhZM1JwYjI1R2JHOTNVM1JoZEdVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNOU1pXWkpaQ3dnVkhKaGJuTmhZM1JwYjI1VWVYQmxMbEIxY21Ob1lYTmxMQ0J3ZFhKamFHRnpaVUZ0YjNWdWRDd2djSFZ5WTJoaGMyVk5jMmNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmdWMkZwZEdsdVp5Qm1iM0lnUlVaVVVFOVRJR052Ym01bFkzUnBiMjRnZEc4Z2JXRnJaU0J3WVhsdFpXNTBJSEpsY1hWbGMzUXVJQ1I3Y0hWeVkyaGhjMlV1UVcxdmRXNTBVM1Z0YldGeWVTZ3BmV0FwTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmMyVnVaQ2h3ZFhKamFHRnpaVTF6WnlrcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxMbE5sYm5Rb1lFRnphMlZrSUVWR1ZGQlBVeUIwYnlCaFkyTmxjSFFnY0dGNWJXVnVkQ0JtYjNJZ0pIdHdkWEpqYUdGelpTNUJiVzkxYm5SVGRXMXRZWEo1S0NsOVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZFVlRVpzYjNkVGRHRjBaVU5vWVc1blpXUW5MQ0I3WkdWMFlXbHNPaUIwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpYMHBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCSmJtbDBhV0YwWlZSNFVtVnpkV3gwS0hSeWRXVXNJRndpVUhWeVkyaGhjMlVnU1c1cGRHbGhkR1ZrWENJcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklFbHVhWFJwWVhSbGN5QmhJSEpsWm5WdVpDQjBjbUZ1YzJGamRHbHZiaTRnUW1VZ2MzVmljMk55YVdKbFpDQjBieUJVZUVac2IzZFRkR0YwWlVOb1lXNW5aV1FnWlhabGJuUWdkRzhnWjJWMElIVndaR0YwWlhNZ2IyNGdkR2hsSUhCeWIyTmxjM011WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2ljRzl6VW1WbVNXUmNJajVCYkhCb1lXNTFiV1Z5YVdNZ1NXUmxiblJwWm1sbGNpQm1iM0lnZVc5MWNpQnlaV1oxYm1RdVBDOXdZWEpoYlQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbUZ0YjNWdWRFTmxiblJ6WENJK1FXMXZkVzUwSUdsdUlFTmxiblJ6SUhSdklHTm9ZWEpuWlR3dmNHRnlZVzArWEc0Z0lDQWdMeThnUEhCaGNtRnRJRzVoYldVOVhDSnpkWEJ3Y21WemMwMWxjbU5vWVc1MFVHRnpjM2R2Y21SY0lqNU5aWEpqYUdGdWRDQlFZWE56ZDI5eVpDQmpiMjUwY205c0lHbHVJRlpCUVR3dmNHRnlZVzArWEc0Z0lDQWdMeThnUEhCaGNtRnRJRzVoYldVOVhDSnZjSFJwYjI1elhDSStWR2hsSUZObGRIUnBibWNnZEc4Z2MyVjBJRWhsWVdSbGNpQmhibVFnUm05dmRHVnlJR1p2Y2lCMGFHVWdVbVZqWldsd2REd3ZjR0Z5WVcwK1hHNGdJQ0FnTHk4Z1BISmxkSFZ5Ym5NK1NXNXBkR2xoZEdWVWVGSmxjM1ZzZER3dmNtVjBkWEp1Y3o1Y2JpQWdJQ0JKYm1sMGFXRjBaVkpsWm5WdVpGUjRLSEJ2YzFKbFprbGtMQ0JoYlc5MWJuUkRaVzUwY3l3Z2MzVndjSEpsYzNOTlpYSmphR0Z1ZEZCaGMzTjNiM0prSUQwZ1ptRnNjMlVzSUc5d2RHbHZibk1nUFNCdVpYY2dWSEpoYm5OaFkzUnBiMjVQY0hScGIyNXpLQ2twWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBVM1JoZEhWeklEMDlJRk53YVZOMFlYUjFjeTVWYm5CaGFYSmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJKYm1sMGFXRjBaVlI0VW1WemRXeDBLR1poYkhObExDQmNJazV2ZENCUVlXbHlaV1JjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBaFBTQlRjR2xHYkc5M0xrbGtiR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnU1c1cGRHbGhkR1ZVZUZKbGMzVnNkQ2htWVd4elpTd2dYQ0pPYjNRZ1NXUnNaVndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJSFpoY2lCeVpXWjFibVJTWlhGMVpYTjBJRDBnVUhWeVkyaGhjMlZJWld4d1pYSXVRM0psWVhSbFVtVm1kVzVrVW1WeGRXVnpkQ2hoYlc5MWJuUkRaVzUwY3l3Z2NHOXpVbVZtU1dRc0lITjFjSEJ5WlhOelRXVnlZMmhoYm5SUVlYTnpkMjl5WkNrN1hHNGdJQ0FnSUNBZ0lISmxablZ1WkZKbGNYVmxjM1F1UTI5dVptbG5JRDBnZEdocGN5NURiMjVtYVdjN1hHNGdJQ0FnSUNBZ0lISmxablZ1WkZKbGNYVmxjM1F1VDNCMGFXOXVjeUE5SUc5d2RHbHZibk03WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaV1oxYm1STmMyY2dQU0J5WldaMWJtUlNaWEYxWlhOMExsUnZUV1Z6YzJGblpTZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SR2JHOTNJRDBnVTNCcFJteHZkeTVVY21GdWMyRmpkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1VnUFNCdVpYY2dWSEpoYm5OaFkzUnBiMjVHYkc5M1UzUmhkR1VvWEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM05TWldaSlpDd2dWSEpoYm5OaFkzUnBiMjVVZVhCbExsSmxablZ1WkN3Z1lXMXZkVzUwUTJWdWRITXNJSEpsWm5WdVpFMXpaeXdnWEc0Z0lDQWdJQ0FnSUNBZ0lDQmdWMkZwZEdsdVp5Qm1iM0lnUlVaVVVFOVRJR052Ym01bFkzUnBiMjRnZEc4Z2JXRnJaU0J5WldaMWJtUWdjbVZ4ZFdWemRDQm1iM0lnSkhzb1lXMXZkVzUwUTJWdWRITWdMeUF4TURBdU1Da3VkRzlHYVhobFpDZ3lLWDFnS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTmxibVFvY21WbWRXNWtUWE5uS1NsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVMlZ1ZENoZ1FYTnJaV1FnUlVaVVVFOVRJSFJ2SUhKbFpuVnVaQ0FrZXloaGJXOTFiblJEWlc1MGN5QXZJREV3TUM0d0tTNTBiMFpwZUdWa0tESXBmV0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QkRkWE4wYjIxRmRtVnVkQ2duVkhoR2JHOTNVM1JoZEdWRGFHRnVaMlZrSnl3Z2UyUmxkR0ZwYkRvZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1Y5S1NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTVzVwZEdsaGRHVlVlRkpsYzNWc2RDaDBjblZsTENCY0lsSmxablZ1WkNCSmJtbDBhV0YwWldSY0lpazdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUV4bGRDQjBhR1VnUlVaVVVFOVRJR3R1YjNjZ2QyaGxkR2hsY2lCdFpYSmphR0Z1ZENCaFkyTmxjSFJsWkNCdmNpQmtaV05zYVc1bFpDQjBhR1VnYzJsbmJtRjBkWEpsWEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2lZV05qWlhCMFpXUmNJajUzYUdWMGFHVnlJRzFsY21Ob1lXNTBJR0ZqWTJWd2RHVmtJSFJvWlNCemFXZHVZWFIxY21VZ1puSnZiU0JqZFhOMGIyMWxjaUJ2Y2lCdWIzUThMM0JoY21GdFBseHVJQ0FnSUVGalkyVndkRk5wWjI1aGRIVnlaU2hoWTJObGNIUmxaQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUkdiRzkzSUNFOUlGTndhVVpzYjNjdVZISmhibk5oWTNScGIyNGdmSHdnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVSbWx1YVhOb1pXUWdmSHdnSVhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxMa0YzWVdsMGFXNW5VMmxuYm1GMGRYSmxRMmhsWTJzcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLRndpUVhOclpXUWdkRzhnWVdOalpYQjBJSE5wWjI1aGRIVnlaU0JpZFhRZ1NTQjNZWE1nYm05MElIZGhhWFJwYm1jZ1ptOXlJRzl1WlM1Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFMXBaRlI0VW1WemRXeDBLR1poYkhObExDQmNJa0Z6YTJWa0lIUnZJR0ZqWTJWd2RDQnphV2R1WVhSMWNtVWdZblYwSUVrZ2QyRnpJRzV2ZENCM1lXbDBhVzVuSUdadmNpQnZibVV1WENJcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVMmxuYm1GMGRYSmxVbVZ6Y0c5dVpHVmtLR0ZqWTJWd2RHVmtJRDhnWENKQlkyTmxjSFJwYm1jZ1UybG5ibUYwZFhKbExpNHVYQ0lnT2lCY0lrUmxZMnhwYm1sdVp5QlRhV2R1WVhSMWNtVXVMaTVjSWlrN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ6YVdkU1pYRk5jMmNnUFNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVUYVdkdVlYUjFjbVZTWlhGMWFYSmxaRTFsYzNOaFoyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTmxibVFvWVdOalpYQjBaV1JjYmlBZ0lDQWdJQ0FnSUNBZ0lEOGdibVYzSUZOcFoyNWhkSFZ5WlVGalkyVndkQ2gwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNVFiM05TWldaSlpDa3VWRzlOWlhOellXZGxLQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2dibVYzSUZOcFoyNWhkSFZ5WlVSbFkyeHBibVVvZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVRzl6VW1WbVNXUXBMbFJ2VFdWemMyRm5aU2dwS1R0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RVZUVac2IzZFRkR0YwWlVOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaWDBwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5hV1JVZUZKbGMzVnNkQ2gwY25WbExDQmNJbHdpS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCVGRXSnRhWFFnZEdobElFTnZaR1VnYjJKMFlXbHVaV1FnWW5rZ2VXOTFjaUIxYzJWeUlIZG9aVzRnY0dodmJtbHVaeUJtYjNJZ1lYVjBhQzRnWEc0Z0lDQWdMeThnU1hRZ2QybHNiQ0J5WlhSMWNtNGdhVzF0WldScFlYUmxiSGtnZEc4Z2RHVnNiQ0I1YjNVZ2QyaGxkR2hsY2lCMGFHVWdZMjlrWlNCb1lYTWdZU0IyWVd4cFpDQm1iM0p0WVhRZ2IzSWdibTkwTGlCY2JpQWdJQ0F2THlCSlppQjJZV3hwWkQwOWRISjFaU0JwY3lCeVpYUjFjbTVsWkN3Z2JtOGdibVZsWkNCMGJ5QmtieUJoYm5sMGFHbHVaeUJsYkhObExpQkZlSEJsWTNRZ2RYQmtZWFJsY3lCMmFXRWdjM1JoYm1SaGNtUWdZMkZzYkdKaFkyc3VYRzRnSUNBZ0x5OGdTV1lnZG1Gc2FXUTlQV1poYkhObElHbHpJSEpsZEhWeWJtVmtMQ0I1YjNVZ1kyRnVJSE5vYjNjZ2VXOTFjaUIxYzJWeUlIUm9aU0JoWTJOdmJYQmhibmxwYm1jZ2JXVnpjMkZuWlN3Z1lXNWtJR2x1ZG1sMFpTQjBhR1Z0SUhSdklHVnVkR1Z5SUdGdWIzUm9aWElnWTI5a1pTNGdYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aVlYVjBhRU52WkdWY0lqNVVhR1VnWTI5a1pTQnZZblJoYVc1bFpDQmllU0I1YjNWeUlIVnpaWElnWm5KdmJTQjBhR1VnYldWeVkyaGhiblFnWTJGc2JDQmpaVzUwY21VdUlFbDBJSE5vYjNWc1pDQmlaU0JoSURZdFkyaGhjbUZqZEdWeUlHRnNjR2hoTFc1MWJXVnlhV01nZG1Gc2RXVXVQQzl3WVhKaGJUNWNiaUFnSUNBdkx5QThjbVYwZFhKdWN6NVhhR1YwYUdWeUlHTnZaR1VnYUdGeklHRWdkbUZzYVdRZ1ptOXliV0YwSUc5eUlHNXZkQzQ4TDNKbGRIVnlibk0rWEc0Z0lDQWdVM1ZpYldsMFFYVjBhRU52WkdVb1lYVjBhRU52WkdVcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCcFppQW9ZWFYwYUVOdlpHVXViR1Z1WjNSb0lDRTlJRFlwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnVTNWaWJXbDBRWFYwYUVOdlpHVlNaWE4xYkhRb1ptRnNjMlVzSUZ3aVRtOTBJR0VnTmkxa2FXZHBkQ0JqYjJSbExsd2lLVHNnSUNBZ1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRFWnNiM2NnSVQwZ1UzQnBSbXh2ZHk1VWNtRnVjMkZqZEdsdmJpQjhmQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNUdhVzVwYzJobFpDQjhmQ0FoZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVRWGRoYVhScGJtZFFhRzl1WlVadmNrRjFkR2dwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktGd2lRWE5yWldRZ2RHOGdjMlZ1WkNCaGRYUm9JR052WkdVZ1luVjBJRWtnZDJGeklHNXZkQ0IzWVdsMGFXNW5JR1p2Y2lCdmJtVXVYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJUZFdKdGFYUkJkWFJvUTI5a1pWSmxjM1ZzZENobVlXeHpaU3dnWENKWFlYTWdibTkwSUhkaGFYUnBibWNnWm05eUlHOXVaUzVjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNUJkWFJvUTI5a1pWTmxiblFvWUZOMVltMXBkSFJwYm1jZ1FYVjBhQ0JEYjJSbElDUjdZWFYwYUVOdlpHVjlZQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM05sYm1Rb2JtVjNJRUYxZEdoRGIyUmxRV1IyYVdObEtIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGxCdmMxSmxaa2xrTENCaGRYUm9RMjlrWlNrdVZHOU5aWE56WVdkbEtDa3BPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxUjRSbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbGZTa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZOMVltMXBkRUYxZEdoRGIyUmxVbVZ6ZFd4MEtIUnlkV1VzSUZ3aVZtRnNhV1FnUTI5a1pTNWNJaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnUVhSMFpXMXdkSE1nZEc4Z1kyRnVZMlZzSUdFZ1ZISmhibk5oWTNScGIyNHVJRnh1SUNBZ0lDOHZJRUpsSUhOMVluTmpjbWxpWldRZ2RHOGdWSGhHYkc5M1UzUmhkR1ZEYUdGdVoyVmtJR1YyWlc1MElIUnZJSE5sWlNCb2IzY2dhWFFnWjI5bGN5NWNiaUFnSUNBdkx5QlhZV2wwSUdadmNpQjBhR1VnZEhKaGJuTmhZM1JwYjI0Z2RHOGdZbVVnWm1sdWFYTm9aV1FnWVc1a0lIUm9aVzRnYzJWbElIZG9aWFJvWlhJZ1kyRnVZMlZzYkdGMGFXOXVJSGRoY3lCemRXTmpaWE56Wm5Wc0lHOXlJRzV2ZEM1Y2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1BISmxkSFZ5Ym5NK1RXbGtWSGhTWlhOMWJIUWdMU0JtWVd4elpTQnZibXg1SUdsbUlIbHZkU0JqWVd4c1pXUWdhWFFnYVc0Z2RHaGxJSGR5YjI1bklITjBZWFJsUEM5eVpYUjFjbTV6UGx4dUlDQWdJRU5oYm1ObGJGUnlZVzV6WVdOMGFXOXVLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUkdiRzkzSUNFOUlGTndhVVpzYjNjdVZISmhibk5oWTNScGIyNGdmSHdnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVSbWx1YVhOb1pXUXBYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0Z3aVFYTnJaV1FnZEc4Z1kyRnVZMlZzSUhSeVlXNXpZV04wYVc5dUlHSjFkQ0JKSUhkaGN5QnViM1FnYVc0Z2RHaGxJRzFwWkdSc1pTQnZaaUJ2Ym1VdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5Qk5hV1JVZUZKbGMzVnNkQ2htWVd4elpTd2dYQ0pCYzJ0bFpDQjBieUJqWVc1alpXd2dkSEpoYm5OaFkzUnBiMjRnWW5WMElFa2dkMkZ6SUc1dmRDQnBiaUIwYUdVZ2JXbGtaR3hsSUc5bUlHOXVaUzVjSWlrN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0F2THlCVVNDMHhReXdnVkVndE0wTWdMU0JOWlhKamFHRnVkQ0J3Y21WemMyVmtJR05oYm1ObGJGeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVbVZ4ZFdWemRGTmxiblFwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCallXNWpaV3hTWlhFZ1BTQnVaWGNnUTJGdVkyVnNWSEpoYm5OaFkzUnBiMjVTWlhGMVpYTjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1RFlXNWpaV3hzYVc1bktGd2lRWFIwWlcxd2RHbHVaeUIwYnlCRFlXNWpaV3dnVkhKaGJuTmhZM1JwYjI0dUxpNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5elpXNWtLR05oYm1ObGJGSmxjUzVVYjAxbGMzTmhaMlVvS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCWFpTQklZV1FnVG05MElFVjJaVzRnVTJWdWRDQlNaWEYxWlhOMElGbGxkQzRnUTI5dWMybGtaWElnWVhNZ2EyNXZkMjRnWm1GcGJHVmtMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1Um1GcGJHVmtLRzUxYkd3c0lGd2lWSEpoYm5OaFkzUnBiMjRnUTJGdVkyVnNiR1ZrTGlCU1pYRjFaWE4wSUVoaFpDQnViM1FnWlhabGJpQmlaV1Z1SUhObGJuUWdlV1YwTGx3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxUjRSbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbGZTa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUUxcFpGUjRVbVZ6ZFd4MEtIUnlkV1VzSUZ3aVhDSXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRWx1YVhScFlYUmxjeUJoSUdOaGMyaHZkWFFnYjI1c2VTQjBjbUZ1YzJGamRHbHZiaTRnUW1VZ2MzVmljMk55YVdKbFpDQjBieUJVZUVac2IzZFRkR0YwWlVOb1lXNW5aV1FnWlhabGJuUWdkRzhnWjJWMElIVndaR0YwWlhNZ2IyNGdkR2hsSUhCeWIyTmxjM011WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2ljRzl6VW1WbVNXUmNJajVCYkhCb1lXNTFiV1Z5YVdNZ1NXUmxiblJwWm1sbGNpQm1iM0lnZVc5MWNpQjBjbUZ1YzJGamRHbHZiaTQ4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aVlXMXZkVzUwUTJWdWRITmNJajVCYlc5MWJuUWdhVzRnUTJWdWRITWdkRzhnWTJGemFDQnZkWFE4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWMzVnlZMmhoY21kbFFXMXZkVzUwWENJK1ZHaGxJRk4xY21Ob1lYSm5aU0JCYlc5MWJuUWdhVzRnUTJWdWRITThMM0JoY21GdFBseHVJQ0FnSUM4dklEeHlaWFIxY201elBrbHVhWFJwWVhSbFZIaFNaWE4xYkhROEwzSmxkSFZ5Ym5NK1hHNGdJQ0FnU1c1cGRHbGhkR1ZEWVhOb2IzVjBUMjVzZVZSNEtIQnZjMUpsWmtsa0xDQmhiVzkxYm5SRFpXNTBjeXdnYzNWeVkyaGhjbWRsUVcxdmRXNTBJRDBnTUN3Z2IzQjBhVzl1Y3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Yms5d2RHbHZibk1vS1NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGtOMWNuSmxiblJUZEdGMGRYTWdQVDBnVTNCcFUzUmhkSFZ6TGxWdWNHRnBjbVZrS1NCeVpYUjFjbTRnYm1WM0lFbHVhWFJwWVhSbFZIaFNaWE4xYkhRb1ptRnNjMlVzSUZ3aVRtOTBJRkJoYVhKbFpGd2lLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwUm14dmR5QWhQU0JUY0dsR2JHOTNMa2xrYkdVcElISmxkSFZ5YmlCdVpYY2dTVzVwZEdsaGRHVlVlRkpsYzNWc2RDaG1ZV3h6WlN3Z1hDSk9iM1FnU1dSc1pWd2lLVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdZMkZ6YUc5MWRFMXpaeUE5SUU5aWFtVmpkQzVoYzNOcFoyNG9ibVYzSUVOaGMyaHZkWFJQYm14NVVtVnhkV1Z6ZENoaGJXOTFiblJEWlc1MGN5d2djRzl6VW1WbVNXUXBMQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQlRkWEpqYUdGeVoyVkJiVzkxYm5RNklITjFjbU5vWVhKblpVRnRiM1Z1ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJRTl3ZEdsdmJuTTZJRzl3ZEdsdmJuTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCRGIyNW1hV2M2SUhSb2FYTXVRMjl1Wm1sblhHNGdJQ0FnSUNBZ0lIMHBMbFJ2VFdWemMyRm5aU2dwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRVpzYjNjZ1BTQlRjR2xHYkc5M0xsUnlZVzV6WVdOMGFXOXVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTQTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrWnNiM2RUZEdGMFpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmMxSmxaa2xrTENCVWNtRnVjMkZqZEdsdmJsUjVjR1V1UTJGemFHOTFkRTl1Ykhrc0lHRnRiM1Z1ZEVObGJuUnpMQ0JqWVhOb2IzVjBUWE5uTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZRmRoYVhScGJtY2dabTl5SUVWR1ZGQlBVeUJqYjI1dVpXTjBhVzl1SUhSdklITmxibVFnWTJGemFHOTFkQ0J5WlhGMVpYTjBJR1p2Y2lBa2V5aGhiVzkxYm5SRFpXNTBjeUF2SURFd01Da3VkRzlHYVhobFpDZ3lLWDFnS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTmxibVFvWTJGemFHOTFkRTF6WnlrcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxMbE5sYm5Rb1lFRnphMlZrSUVWR1ZGQlBVeUIwYnlCa2J5QmpZWE5vYjNWMElHWnZjaUFrZXloaGJXOTFiblJEWlc1MGN5QXZJREV3TUNrdWRHOUdhWGhsWkNneUtYMWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMVI0Um14dmQxTjBZWFJsUTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxmU2twTzF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFbHVhWFJwWVhSbFZIaFNaWE4xYkhRb2RISjFaU3dnWENKRFlYTm9iM1YwSUVsdWFYUnBZWFJsWkZ3aUtUdGNiaUFnSUNCOUlDQWdJRnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnU1c1cGRHbGhkR1Z6SUdFZ1RXRnBiQ0JQY21SbGNpQXZJRlJsYkdWd2FHOXVaU0JQY21SbGNpQlFkWEpqYUdGelpTQlVjbUZ1YzJGamRHbHZibHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0luQnZjMUpsWmtsa1hDSStRV3h3YUdGdWRXMWxjbWxqSUVsa1pXNTBhV1pwWlhJZ1ptOXlJSGx2ZFhJZ2RISmhibk5oWTNScGIyNHVQQzl3WVhKaGJUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW1GdGIzVnVkRU5sYm5SelhDSStRVzF2ZFc1MElHbHVJRU5sYm5SelBDOXdZWEpoYlQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbk4xY21Ob1lYSm5aVUZ0YjNWdWRGd2lQbFJvWlNCVGRYSmphR0Z5WjJVZ1FXMXZkVzUwSUdsdUlFTmxiblJ6UEM5d1lYSmhiVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0luTjFjSEJ5WlhOelRXVnlZMmhoYm5SUVlYTnpkMjl5WkZ3aVBqNU5aWEpqYUdGdWRDQlFZWE56ZDI5eVpDQmpiMjUwY205c0lHbHVJRlpCUVR3dmNHRnlZVzArWEc0Z0lDQWdMeThnUEhCaGNtRnRJRzVoYldVOVhDSnZjSFJwYjI1elhDSStWR2hsSUZObGRIUnBibWNnZEc4Z2MyVjBJRWhsWVdSbGNpQmhibVFnUm05dmRHVnlJR1p2Y2lCMGFHVWdVbVZqWldsd2REd3ZjR0Z5WVcwK1hHNGdJQ0FnTHk4Z1BISmxkSFZ5Ym5NK1NXNXBkR2xoZEdWVWVGSmxjM1ZzZER3dmNtVjBkWEp1Y3o1Y2JpQWdJQ0JKYm1sMGFXRjBaVTF2ZEc5UWRYSmphR0Z6WlZSNEtIQnZjMUpsWmtsa0xDQmhiVzkxYm5SRFpXNTBjeXdnYzNWeVkyaGhjbWRsUVcxdmRXNTBJRDBnTUN3Z2MzVndjSEpsYzNOTlpYSmphR0Z1ZEZCaGMzTjNiM0prSUQwZ1ptRnNjMlVzSUc5d2RHbHZibk1nUFNCdVpYY2dWSEpoYm5OaFkzUnBiMjVQY0hScGIyNXpLQ2twWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBVM1JoZEhWeklEMDlJRk53YVZOMFlYUjFjeTVWYm5CaGFYSmxaQ2tnY21WMGRYSnVJRzVsZHlCSmJtbDBhV0YwWlZSNFVtVnpkV3gwS0daaGJITmxMQ0JjSWs1dmRDQlFZV2x5WldSY0lpazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRVpzYjNjZ0lUMGdVM0JwUm14dmR5NUpaR3hsS1NCeVpYUjFjbTRnYm1WM0lFbHVhWFJwWVhSbFZIaFNaWE4xYkhRb1ptRnNjMlVzSUZ3aVRtOTBJRWxrYkdWY0lpazdYRzRnSUNBZ0lDQWdJSFpoY2lCdGIzUnZVSFZ5WTJoaGMyVk5jMmNnUFNCUFltcGxZM1F1WVhOemFXZHVLRzVsZHlCTmIzUnZVSFZ5WTJoaGMyVlNaWEYxWlhOMEtHRnRiM1Z1ZEVObGJuUnpMQ0J3YjNOU1pXWkpaQ2tzWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRk4xY21Ob1lYSm5aVUZ0YjNWdWREb2djM1Z5WTJoaGNtZGxRVzF2ZFc1MExGeHVJQ0FnSUNBZ0lDQWdJQ0FnVTNWd2NISmxjM05OWlhKamFHRnVkRkJoYzNOM2IzSmtPaUJ6ZFhCd2NtVnpjMDFsY21Ob1lXNTBVR0Z6YzNkdmNtUXNYRzRnSUNBZ0lDQWdJQ0FnSUNCRGIyNW1hV2M2SUhSb2FYTXVRMjl1Wm1sbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnVDNCMGFXOXVjem9nYjNCMGFXOXVjMXh1SUNBZ0lDQWdJQ0I5S1M1VWIwMWxjM05oWjJVb0tUdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SR2JHOTNJRDBnVTNCcFJteHZkeTVVY21GdWMyRmpkR2x2Ymp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1VnUFNCdVpYY2dWSEpoYm5OaFkzUnBiMjVHYkc5M1UzUmhkR1VvWEc0Z0lDQWdJQ0FnSUNBZ0lDQndiM05TWldaSlpDd2dWSEpoYm5OaFkzUnBiMjVVZVhCbExrMVBWRThzSUdGdGIzVnVkRU5sYm5SekxDQnRiM1J2VUhWeVkyaGhjMlZOYzJjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JnVjJGcGRHbHVaeUJtYjNJZ1JVWlVVRTlUSUdOdmJtNWxZM1JwYjI0Z2RHOGdjMlZ1WkNCTlQxUlBJSEpsY1hWbGMzUWdabTl5SUNSN0tHRnRiM1Z1ZEVObGJuUnpJQzhnTVRBd0tTNTBiMFpwZUdWa0tESXBmV0FwTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmMyVnVaQ2h0YjNSdlVIVnlZMmhoYzJWTmMyY3BLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1VFpXNTBLR0JCYzJ0bFpDQkZSbFJRVDFNZ1pHOGdUVTlVVHlCbWIzSWdKSHNvWVcxdmRXNTBRMlZ1ZEhNZ0x5QXhNREFwTG5SdlJtbDRaV1FvTWlsOVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZFVlRVpzYjNkVGRHRjBaVU5vWVc1blpXUW5MQ0I3WkdWMFlXbHNPaUIwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpYMHBLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzVsZHlCSmJtbDBhV0YwWlZSNFVtVnpkV3gwS0hSeWRXVXNJRndpVFU5VVR5QkpibWwwYVdGMFpXUmNJaWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdMeThnU1c1cGRHbGhkR1Z6SUdFZ2MyVjBkR3hsYldWdWRDQjBjbUZ1YzJGamRHbHZiaTVjYmlBZ0lDQXZMeUJDWlNCemRXSnpZM0pwWW1Wa0lIUnZJRlI0Um14dmQxTjBZWFJsUTJoaGJtZGxaQ0JsZG1WdWRDQjBieUJuWlhRZ2RYQmtZWFJsY3lCdmJpQjBhR1VnY0hKdlkyVnpjeTVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltOXdkR2x2Ym5OY0lqNVVhR1VnVTJWMGRHbHVaeUIwYnlCelpYUWdTR1ZoWkdWeUlHRnVaQ0JHYjI5MFpYSWdabTl5SUhSb1pTQlNaV05sYVhCMFBDOXdZWEpoYlQ1Y2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnU1c1cGRHbGhkR1ZUWlhSMGJHVlVlQ2h3YjNOU1pXWkpaQ3dnYjNCMGFXOXVjeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZiazl3ZEdsdmJuTW9LU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUlRkR0YwZFhNZ1BUMGdVM0JwVTNSaGRIVnpMbFZ1Y0dGcGNtVmtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRWx1YVhScFlYUmxWSGhTWlhOMWJIUW9abUZzYzJVc0lGd2lUbTkwSUZCaGFYSmxaRndpS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUkdiRzkzSUNFOUlGTndhVVpzYjNjdVNXUnNaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJKYm1sMGFXRjBaVlI0VW1WemRXeDBLR1poYkhObExDQmNJazV2ZENCSlpHeGxYQ0lwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhObGRIUnNaVTF6WnlBOUlFOWlhbVZqZEM1aGMzTnBaMjRvYm1WM0lGTmxkSFJzWlZKbGNYVmxjM1FvVW1WeGRXVnpkRWxrU0dWc2NHVnlMa2xrS0Z3aWMyVjBkR3hsWENJcEtTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1EyOXVabWxuT2lCMGFHbHpMa052Ym1acFp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUU5d2RHbHZibk02SUc5d2RHbHZibk5jYmlBZ0lDQWdJQ0FnZlNrdVZHOU5aWE56WVdkbEtDazdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFJteHZkeUE5SUZOd2FVWnNiM2N1VkhKaGJuTmhZM1JwYjI0N1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsSUQwZ2JtVjNJRlJ5WVc1ellXTjBhVzl1Um14dmQxTjBZWFJsS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdjRzl6VW1WbVNXUXNJRlJ5WVc1ellXTjBhVzl1Vkhsd1pTNVRaWFIwYkdVc0lEQXNJSE5sZEhSc1pVMXpaeXdnWEc0Z0lDQWdJQ0FnSUNBZ0lDQmdWMkZwZEdsdVp5Qm1iM0lnUlVaVVVFOVRJR052Ym01bFkzUnBiMjRnZEc4Z2JXRnJaU0JoSUhObGRIUnNaU0J5WlhGMVpYTjBZQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTmxibVFvYzJWMGRHeGxUWE5uS1NsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVMlZ1ZENoZ1FYTnJaV1FnUlVaVVVFOVRJSFJ2SUhObGRIUnNaUzVnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFSNFJteHZkMU4wWVhSbFEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsZlNrcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JtVjNJRWx1YVhScFlYUmxWSGhTWlhOMWJIUW9kSEoxWlN3Z1hDSlRaWFIwYkdVZ1NXNXBkR2xoZEdWa1hDSXBPeUFnSUZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2liM0IwYVc5dWMxd2lQbFJvWlNCVFpYUjBhVzVuSUhSdklITmxkQ0JJWldGa1pYSWdZVzVrSUVadmIzUmxjaUJtYjNJZ2RHaGxJRkpsWTJWcGNIUThMM0JoY21GdFBseHVJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNCSmJtbDBhV0YwWlZObGRIUnNaVzFsYm5SRmJuRjFhWEo1S0hCdmMxSmxaa2xrTENCdmNIUnBiMjV6SUQwZ2JtVjNJRlJ5WVc1ellXTjBhVzl1VDNCMGFXOXVjeWdwS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRk4wWVhSMWN5QTlQU0JUY0dsVGRHRjBkWE11Vlc1d1lXbHlaV1FwSUhKbGRIVnliaUJ1WlhjZ1NXNXBkR2xoZEdWVWVGSmxjM1ZzZENobVlXeHpaU3dnWENKT2IzUWdVR0ZwY21Wa1hDSXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGtOMWNuSmxiblJHYkc5M0lDRTlJRk53YVVac2IzY3VTV1JzWlNrZ2NtVjBkWEp1SUc1bGR5QkpibWwwYVdGMFpWUjRVbVZ6ZFd4MEtHWmhiSE5sTENCY0lrNXZkQ0JKWkd4bFhDSXBPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2MzUnNSVzV4VFhObklEMGdUMkpxWldOMExtRnpjMmxuYmlodVpYY2dVMlYwZEd4bGJXVnVkRVZ1Y1hWcGNubFNaWEYxWlhOMEtGSmxjWFZsYzNSSlpFaGxiSEJsY2k1SlpDaGNJbk4wYkdWdWNWd2lLU2tzWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRU52Ym1acFp6b2dkR2hwY3k1RGIyNW1hV2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQlBjSFJwYjI1ek9pQnZjSFJwYjI1elhHNGdJQ0FnSUNBZ0lIMHBMbFJ2VFdWemMyRm5aU2dwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRVpzYjNjZ1BTQlRjR2xHYkc5M0xsUnlZVzV6WVdOMGFXOXVPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTQTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrWnNiM2RUZEdGMFpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmMxSmxaa2xrTENCVWNtRnVjMkZqZEdsdmJsUjVjR1V1VTJWMGRHeGxiV1Z1ZEVWdWNYVnBjbmtzSURBc0lITjBiRVZ1Y1Uxelp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUZ3aVYyRnBkR2x1WnlCbWIzSWdSVVpVVUU5VElHTnZibTVsWTNScGIyNGdkRzhnYldGclpTQmhJSE5sZEhSc1pXMWxiblFnWlc1eGRXbHllVndpS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTmxibVFvYzNSc1JXNXhUWE5uS1NsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVMlZ1ZENoY0lrRnphMlZrSUVWR1ZGQlBVeUIwYnlCdFlXdGxJR0VnYzJWMGRHeGxiV1Z1ZENCbGJuRjFhWEo1TGx3aUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxUjRSbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbGZTa3BPMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdibVYzSUVsdWFYUnBZWFJsVkhoU1pYTjFiSFFvZEhKMVpTd2dYQ0pUWlhSMGJHVWdTVzVwZEdsaGRHVmtYQ0lwT3lBZ0lGeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklFbHVhWFJwWVhSbGN5QmhJRWRsZENCTVlYTjBJRlJ5WVc1ellXTjBhVzl1TGlCVmMyVWdkR2hwY3lCM2FHVnVJSGx2ZFNCM1lXNTBJSFJ2SUhKbGRISnBaWFpsSUhSb1pTQnRiM04wSUhKbFkyVnVkQ0IwY21GdWMyRmpkR2x2Ymx4dUlDQWdJQzh2SUhSb1lYUWdkMkZ6SUhCeWIyTmxjM05sWkNCaWVTQjBhR1VnUldaMGNHOXpMbHh1SUNBZ0lDOHZJRUpsSUhOMVluTmpjbWxpWldRZ2RHOGdWSGhHYkc5M1UzUmhkR1ZEYUdGdVoyVmtJR1YyWlc1MElIUnZJR2RsZENCMWNHUmhkR1Z6SUc5dUlIUm9aU0J3Y205alpYTnpMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQkpibWwwYVdGMFpVZGxkRXhoYzNSVWVDZ3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFUzUmhkSFZ6SUQwOUlGTndhVk4wWVhSMWN5NVZibkJoYVhKbFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkpibWwwYVdGMFpWUjRVbVZ6ZFd4MEtHWmhiSE5sTENCY0lrNXZkQ0JRWVdseVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFJteHZkeUFoUFNCVGNHbEdiRzkzTGtsa2JHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTVzVwZEdsaGRHVlVlRkpsYzNWc2RDaG1ZV3h6WlN3Z1hDSk9iM1FnU1dSc1pWd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJuYkhSU1pYRjFaWE4wVFhObklEMGdibVYzSUVkbGRFeGhjM1JVY21GdWMyRmpkR2x2YmxKbGNYVmxjM1FvS1M1VWIwMWxjM05oWjJVb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwUm14dmR5QTlJRk53YVVac2IzY3VWSEpoYm5OaFkzUnBiMjQ3WEc0Z0lDQWdJQ0FnSUhaaGNpQndiM05TWldaSlpDQTlJR2RzZEZKbGNYVmxjM1JOYzJjdVNXUTdJQzh2SUVkbGRFeGhjM1JVZUNCcGN5QnViM1FnZEhKNWFXNW5JSFJ2SUdkbGRDQmhibmwwYUdsdVp5QnpjR1ZqYVdacFl5QmlZV05yTGlCVGJ5QjNaU0JxZFhOMElIVnpaU0IwYUdVZ2JXVnpjMkZuWlNCcFpDNWNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVZ1BTQnVaWGNnVkhKaGJuTmhZM1JwYjI1R2JHOTNVM1JoZEdVb1hHNGdJQ0FnSUNBZ0lDQWdJQ0J3YjNOU1pXWkpaQ3dnVkhKaGJuTmhZM1JwYjI1VWVYQmxMa2RsZEV4aGMzUlVjbUZ1YzJGamRHbHZiaXdnTUN3Z1oyeDBVbVZ4ZFdWemRFMXpaeXdnWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbGRoYVhScGJtY2dabTl5SUVWR1ZGQlBVeUJqYjI1dVpXTjBhVzl1SUhSdklHMWhhMlVnWVNCSFpYUXRUR0Z6ZEMxVWNtRnVjMkZqZEdsdmJpQnlaWEYxWlhOMExsd2lLVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVRMkZzYkdsdVowZHNkQ2huYkhSU1pYRjFaWE4wVFhObkxrbGtLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDNObGJtUW9aMngwVW1WeGRXVnpkRTF6WnlrcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxMbE5sYm5Rb1lFRnphMlZrSUVWR1ZGQlBVeUJtYjNJZ2JHRnpkQ0IwY21GdWMyRmpkR2x2Ymk1Z0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lGeHVJQ0FnSUNBZ0lDQmtiMk4xYldWdWRDNWthWE53WVhSamFFVjJaVzUwS0c1bGR5QkRkWE4wYjIxRmRtVnVkQ2duVkhoR2JHOTNVM1JoZEdWRGFHRnVaMlZrSnl3Z2UyUmxkR0ZwYkRvZ2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1Y5S1NrN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dTVzVwZEdsaGRHVlVlRkpsYzNWc2RDaDBjblZsTENCY0lrZE1WQ0JKYm1sMGFXRjBaV1JjSWlrN0lDQWdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdWR2hwY3lCcGN5QjFjMlZtZFd3Z2RHOGdjbVZqYjNabGNpQm1jbTl0SUhsdmRYSWdVRTlUSUdOeVlYTm9hVzVuSUdsdUlIUm9aU0J0YVdSa2JHVWdiMllnWVNCMGNtRnVjMkZqZEdsdmJpNWNiaUFnSUNBdkx5QlhhR1Z1SUhsdmRTQnlaWE4wWVhKMElIbHZkWElnVUU5VExDQnBaaUI1YjNVZ2FHRmtJSE5oZG1Wa0lHVnViM1ZuYUNCemRHRjBaU3dnZVc5MUlHTmhiaUJqWVd4c0lIUm9hWE1nYldWMGFHOWtJSFJ2SUhKbFkyOTJaWElnZEdobElHTnNhV1Z1ZENCc2FXSnlZWEo1SUhOMFlYUmxMbHh1SUNBZ0lDOHZJRmx2ZFNCdVpXVmtJSFJ2SUdoaGRtVWdkR2hsSUhCdmMxSmxaa2xrSUhSb1lYUWdlVzkxSUhCaGMzTmxaQ0JwYmlCM2FYUm9JSFJvWlNCdmNtbG5hVzVoYkNCMGNtRnVjMkZqZEdsdmJpd2dZVzVrSUhSb1pTQjBjbUZ1YzJGamRHbHZiaUIwZVhCbExseHVJQ0FnSUM4dklGUm9hWE1nYldWMGFHOWtJSGRwYkd3Z2NtVjBkWEp1SUdsdGJXVmthV0YwWld4NUlIZG9aWFJvWlhJZ2NtVmpiM1psY25rZ2FHRnpJSE4wWVhKMFpXUWdiM0lnYm05MExseHVJQ0FnSUM4dklFbG1JSEpsWTI5MlpYSjVJR2hoY3lCemRHRnlkR1ZrTENCNWIzVWdibVZsWkNCMGJ5QmljbWx1WnlCMWNDQjBhR1VnZEhKaGJuTmhZM1JwYjI0Z2JXOWtZV3dnZEc4Z2VXOTFjaUIxYzJWeUlHRWdZbVVnYkdsemRHVnVhVzVuSUhSdklGUjRSbXh2ZDFOMFlYUmxRMmhoYm1kbFpDNWNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0x5OGdQSEJoY21GdElHNWhiV1U5WENKd2IzTlNaV1pKWkZ3aVBsUm9aU0JwY3lCMGFHRjBJSGx2ZFNCb1lXUWdZWE56YVdkdVpXUWdkRzhnZEdobElIUnlZVzV6WVdOMGFXOXVJSFJvWVhRZ2VXOTFJR0Z5WlNCMGNubHBibWNnZEc4Z2NtVmpiM1psY2k0OEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2lkSGhVZVhCbFhDSStWR2hsSUhSeVlXNXpZV04wYVc5dUlIUjVjR1V1UEM5d1lYSmhiVDVjYmlBZ0lDQXZMeUE4Y21WMGRYSnVjejQ4TDNKbGRIVnlibk0rWEc0Z0lDQWdTVzVwZEdsaGRHVlNaV052ZG1WeWVTaHdiM05TWldaSlpDd2dkSGhVZVhCbEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEZOMFlYUjFjeUE5UFNCVGNHbFRkR0YwZFhNdVZXNXdZV2x5WldRcElISmxkSFZ5YmlCdVpYY2dTVzVwZEdsaGRHVlVlRkpsYzNWc2RDaG1ZV3h6WlN3Z1hDSk9iM1FnVUdGcGNtVmtYQ0lwTzF4dUlDQWdJRnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBaFBTQlRjR2xHYkc5M0xrbGtiR1VwSUhKbGRIVnliaUJ1WlhjZ1NXNXBkR2xoZEdWVWVGSmxjM1ZzZENobVlXeHpaU3dnWENKT2IzUWdTV1JzWlZ3aUtUdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dQU0JUY0dsR2JHOTNMbFJ5WVc1ellXTjBhVzl1TzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ2RtRnlJR2RzZEZKbGNYVmxjM1JOYzJjZ1BTQnVaWGNnUjJWMFRHRnpkRlJ5WVc1ellXTjBhVzl1VW1WeGRXVnpkQ2dwTGxSdlRXVnpjMkZuWlNncE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlNBOUlHNWxkeUJVY21GdWMyRmpkR2x2Ymtac2IzZFRkR0YwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YzFKbFprbGtMQ0IwZUZSNWNHVXNJREFzSUdkc2RGSmxjWFZsYzNSTmMyY3NJRnh1SUNBZ0lDQWdJQ0FnSUNBZ1hDSlhZV2wwYVc1bklHWnZjaUJGUmxSUVQxTWdZMjl1Ym1WamRHbHZiaUIwYnlCaGRIUmxiWEIwSUhKbFkyOTJaWEo1TGx3aUtUdGNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDl6Wlc1a0tHZHNkRkpsY1hWbGMzUk5jMmNwS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNVRaVzUwS0dCQmMydGxaQ0JGUmxSUVQxTWdkRzhnY21WamIzWmxjaUJ6ZEdGMFpTNWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnblZIaEdiRzkzVTNSaGRHVkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdWOUtTazdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnVaWGNnU1c1cGRHbGhkR1ZVZUZKbGMzVnNkQ2gwY25WbExDQmNJbEpsWTI5MlpYSjVJRWx1YVhScFlYUmxaRndpS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCSGJIUk5ZWFJqYUNCaGRIUmxiWEIwY3lCMGJ5QmpiMjVqYkhWa1pTQjNhR1YwYUdWeUlHRWdaMngwVW1WemNHOXVjMlVnYldGMFkyaGxjeUJoYmlCbGVIQmxZM1JsWkNCMGNtRnVjMkZqZEdsdmJpQmhibVFnY21WMGRYSnVjMXh1SUNBZ0lDOHZJSFJvWlNCdmRYUmpiMjFsTGlCY2JpQWdJQ0F2THlCSlppQlRkV05qWlhOekwwWmhhV3hsWkNCcGN5QnlaWFIxY201bFpDd2dhWFFnYldWaGJuTWdkR2hoZENCMGFHVWdaM1JzVW1WemNHOXVjMlVnWkdsa0lHMWhkR05vTENCaGJtUWdkR2hoZENCMGNtRnVjMkZqZEdsdmJpQjNZWE1nYzNWalkyVnpablZzTDJaaGFXeGxaQzVjYmlBZ0lDQXZMeUJKWmlCVmJtdHViM2R1SUdseklISmxkSFZ5Ym1Wa0xDQnBkQ0J0WldGdWN5QjBhR0YwSUhSb1pTQm5iSFJTWlhOd2IyNXpaU0JrYjJWeklHNXZkQ0J0WVhSamFDQjBhR1VnWlhod1pXTjBaV1FnZEhKaGJuTmhZM1JwYjI0dUlGeHVJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW1kc2RGSmxjM0J2Ym5ObFhDSStWR2hsSUVkbGRFeGhjM1JVY21GdWMyRmpkR2x2YmxKbGMzQnZibk5sSUcxbGMzTmhaMlVnZEc4Z1kyaGxZMnM4TDNCaGNtRnRQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWNHOXpVbVZtU1dSY0lqNVVhR1VnVW1WbVpYSmxibU5sSUVsa0lIUm9ZWFFnZVc5MUlIQmhjM05sWkNCcGJpQjNhWFJvSUhSb1pTQnZjbWxuYVc1aGJDQnlaWEYxWlhOMExqd3ZjR0Z5WVcwK1hHNGdJQ0FnTHk4Z1BIQmhjbUZ0SUc1aGJXVTlYQ0psZUhCbFkzUmxaRUZ0YjNWdWRGd2lQbFJvWlNCMGIzUmhiQ0JoYlc5MWJuUWdhVzRnZEdobElHOXlhV2RwYm1Gc0lISmxjWFZsYzNROEwzQmhjbUZ0UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2ljbVZ4ZFdWemRGUnBiV1ZjSWo1VWFHVWdjbVZ4ZFdWemRDQjBhVzFsUEM5d1lYSmhiVDVjYmlBZ0lDQXZMeUE4Y21WMGRYSnVjejQ4TDNKbGRIVnlibk0rWEc0Z0lDQWdSMngwVFdGMFkyZ29aMngwVW1WemNHOXVjMlVzSUhCdmMxSmxaa2xrTENCbGVIQmxZM1JsWkVGdGIzVnVkQ3dnY21WeGRXVnpkRlJwYldVc0lDNHVMbVJsY0hKbFkyRjBaV1JCY21kektTQmNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lDOHZJRTlpYzI5c1pYUmxJRzFsZEdodlpDQmpZV3hzSUdOb1pXTnJYRzRnSUNBZ0lDQWdJQzh2SUU5c1pDQnBiblJsY21aaFkyVTZJRWRzZEUxaGRHTm9LRWRsZEV4aGMzUlVjbUZ1YzJGamRHbHZibEpsYzNCdmJuTmxJR2RzZEZKbGMzQnZibk5sTENCVWNtRnVjMkZqZEdsdmJsUjVjR1VnWlhod1pXTjBaV1JVZVhCbExDQnBiblFnWlhod1pXTjBaV1JCYlc5MWJuUXNJRVJoZEdWVWFXMWxJSEpsY1hWbGMzUlVhVzFsTENCemRISnBibWNnY0c5elVtVm1TV1FwWEc0Z0lDQWdJQ0FnSUdsbUtHUmxjSEpsWTJGMFpXUkJjbWR6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lvWkdWd2NtVmpZWFJsWkVGeVozTXViR1Z1WjNSb0lEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWENKUFluTnZiR1YwWlNCdFpYUm9iMlFnWTJGc2JDQmtaWFJsWTNSbFpEb2dWWE5sSUVkc2RFMWhkR05vS0dkc2RGSmxjM0J2Ym5ObExDQndiM05TWldaSlpDbGNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVIyeDBUV0YwWTJnb1oyeDBVbVZ6Y0c5dWMyVXNJR1JsY0hKbFkyRjBaV1JCY21keld6QmRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0Z3aVQySnpiMnhsZEdVZ2JXVjBhRzlrSUdOaGJHd2dkMmwwYUNCMWJtdHViM2R1SUdGeVozTTZJRlZ6WlNCSGJIUk5ZWFJqYUNoSFpYUk1ZWE4wVkhKaGJuTmhZM1JwYjI1U1pYTndiMjV6WlNCbmJIUlNaWE53YjI1elpTd2djM1J5YVc1bklIQnZjMUpsWmtsa0tWd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLR0JIVEZRZ1EwaEZRMHM2SUZCdmMxSmxaa2xrT2lBa2UzQnZjMUpsWmtsa2ZTMCtKSHRuYkhSU1pYTndiMjV6WlM1SFpYUlFiM05TWldaSlpDZ3BmV0FwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJuYkhSQ1lXNXJSR0YwWlZScGJXVlRkSElnUFNCbmJIUlNaWE53YjI1elpTNUhaWFJDWVc1clJHRjBaVlJwYldWVGRISnBibWNvS1RzZ0x5OGdaR1JOVFhsNWVYbElTRzF0YzNOY2JpQWdJQ0FnSUNBZ2RtRnlJR2RzZEVKaGJtdEVZWFJsVkdsdFpTQTlJRzVsZHlCRVlYUmxLR0FrZTJkc2RFSmhibXRFWVhSbFZHbHRaVk4wY2k1emRXSnpkSElvTkN3MEtYMHRKSHRuYkhSQ1lXNXJSR0YwWlZScGJXVlRkSEl1YzNWaWMzUnlLRElzTWlsOUxTUjdaMngwUW1GdWEwUmhkR1ZVYVcxbFUzUnlMbk4xWW5OMGNpZ3dMRElwZlNBa2UyZHNkRUpoYm10RVlYUmxWR2x0WlZOMGNpNXpkV0p6ZEhJb09Dd3lLWDA2Skh0bmJIUkNZVzVyUkdGMFpWUnBiV1ZUZEhJdWMzVmljM1J5S0RFd0xESXBmVG9rZTJkc2RFSmhibXRFWVhSbFZHbHRaVk4wY2k1emRXSnpkSElvTVRJc01pbDlZQ2s3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpiMjF3WVhKbElEMGdjR0Z5YzJWSmJuUW9jbVZ4ZFdWemRGUnBiV1VwSUMwZ1oyeDBRbUZ1YTBSaGRHVlVhVzFsTG1kbGRGUnBiV1VvS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVhCdmMxSmxaa2xrSUQwOUlHZHNkRkpsYzNCdmJuTmxMa2RsZEZCdmMxSmxaa2xrS0NrcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJUZFdOalpYTnpVM1JoZEdVdVZXNXJibTkzYmp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNobmJIUlNaWE53YjI1elpTNUhaWFJVZUZSNWNHVW9LUzUwYjFWd2NHVnlRMkZ6WlNncElEMDlJRndpVUZWU1EwaEJVMFZjSWlBbUppQm5iSFJTWlhOd2IyNXpaUzVIWlhSQ1lXNXJUbTl1UTJGemFFRnRiM1Z1ZENncElDRTlJR1Y0Y0dWamRHVmtRVzF2ZFc1MElDWW1JR052YlhCaGNtVWdQaUF3S1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV1Z6YzJGblpTNVRkV05qWlhOelUzUmhkR1V1Vlc1cmJtOTNianRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbmJIUlNaWE53YjI1elpTNUhaWFJUZFdOalpYTnpVM1JoZEdVb0tUdGNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdVSEpwYm5SU1pXTmxhWEIwS0d0bGVTd2djR0Y1Ykc5aFpDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNObGJtUW9ibVYzSUZCeWFXNTBhVzVuVW1WeGRXVnpkQ2hyWlhrc0lIQmhlV3h2WVdRcExuUnZUV1Z6YzJGblpTZ3BLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJVWlhKdGFXNWhiRk4wWVhSMWN5Z3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5elpXNWtLRzVsZHlCVVpYSnRhVzVoYkZOMFlYUjFjMUpsY1hWbGMzUW9LUzVVYjAxbGMzTmhaMlVvS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1pXNWtjbVZuYVc5dVhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUM4dklISmxaMmx2YmlCSmJuUmxjbTVoYkhNZ1ptOXlJRkJoYVhKcGJtY2dSbXh2ZDF4dVhHNGdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1NHRnVaR3hwYm1jZ2RHaGxJREp1WkNCcGJuUmxjbUZqZEdsdmJpQnZaaUIwYUdVZ2NHRnBjbWx1WnlCd2NtOWpaWE56TENCcExtVXVJR0Z1SUdsdVkyOXRhVzVuSUV0bGVWSmxjWFZsYzNRdVhHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpYlZ3aVBtbHVZMjl0YVc1bklHMWxjM05oWjJVOEwzQmhjbUZ0UGx4dUlDQWdJRjlvWVc1a2JHVkxaWGxTWlhGMVpYTjBLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SUVlXbHlhVzVuUm14dmQxTjBZWFJsTGsxbGMzTmhaMlVnUFNCY0lrNWxaMjkwYVdGMGFXNW5JRkJoYVhKcGJtY3VMaTVjSWp0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMUJoYVhKcGJtZEdiRzkzVTNSaGRHVkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaWDBwS1R0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJWYzJVZ2RHaGxJR2hsYkhCbGNpNGdTWFFnZEdGclpYTWdkR2hsSUdsdVkyOXRhVzVuSUhKbGNYVmxjM1FzSUdGdVpDQm5aVzVsY21GMFpYTWdkR2hsSUhObFkzSmxkSE1nWVc1a0lIUm9aU0J5WlhOd2IyNXpaUzVjYmlBZ0lDQWdJQ0FnZG1GeUlIQm9JQ0FnSUNBZ1BTQnVaWGNnVUdGcGNtbHVaMGhsYkhCbGNpZ3BPMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnpkV3gwSUNBOUlIQm9Ma2RsYm1WeVlYUmxVMlZqY21WMGMwRnVaRXRsZVZKbGMzQnZibk5sS0c1bGR5QkxaWGxTWlhGMVpYTjBLRzBwS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWamNtVjBjeUE5SUhKbGMzVnNkQzVUWldOeVpYUnpPeUF2THlCM1pTQnViM2NnYUdGMlpTQnpaV055WlhSekxDQmhiSFJvYjNWbmFDQndZV2x5YVc1bklHbHpJRzV2ZENCbWRXeHNlU0JtYVc1cGMyaGxaQ0I1WlhRdVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOd2FVMWxjM05oWjJWVGRHRnRjQzVUWldOeVpYUnpJRDBnZEdocGN5NWZjMlZqY21WMGN6c2dMeThnZFhCa1lYUnBibWNnYjNWeUlITjBZVzF3SUhkcGRHZ2dkR2hsSUhObFkzSmxkSE1nYzI4Z1kyRnVJR1Z1WTNKNWNIUWdiV1Z6YzJGblpYTWdiR0YwWlhJdVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNObGJtUW9jbVZ6ZFd4MExrdGxlVkpsYzNCdmJuTmxMbFJ2VFdWemMyRm5aU2dwS1RzZ0x5OGdjMlZ1WkNCMGFHVWdhMlY1WDNKbGMzQnZibk5sTENCcExtVXVJR2x1ZEdWeVlXTjBhVzl1SURNZ2IyWWdjR0ZwY21sdVp5NWNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QklZVzVrYkdsdVp5QjBhR1VnTkhSb0lHbHVkR1Z5WVdOMGFXOXVJRzltSUhSb1pTQndZV2x5YVc1bklIQnliMk5sYzNNZ2FTNWxMaUJoYmlCcGJtTnZiV2x1WnlCTFpYbERhR1ZqYXk1Y2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1BIQmhjbUZ0SUc1aGJXVTlYQ0p0WENJK1BDOXdZWEpoYlQ1Y2JpQWdJQ0JmYUdGdVpHeGxTMlY1UTJobFkyc29iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCclpYbERhR1ZqYXlBOUlHNWxkeUJMWlhsRGFHVmpheWh0S1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBVR0ZwY21sdVowWnNiM2RUZEdGMFpTNURiMjVtYVhKdFlYUnBiMjVEYjJSbElEMGdhMlY1UTJobFkyc3VRMjl1Wm1seWJXRjBhVzl1UTI5a1pUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaUzVCZDJGcGRHbHVaME5vWldOclJuSnZiVVZtZEhCdmN5QTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXVRWGRoYVhScGJtZERhR1ZqYTBaeWIyMVFiM01nUFNCMGNuVmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SUVlXbHlhVzVuUm14dmQxTjBZWFJsTGsxbGMzTmhaMlVnUFNCY0lrTnZibVpwY20wZ2RHaGhkQ0IwYUdVZ1ptOXNiRzkzYVc1bklFTnZaR1VnYVhNZ2MyaHZkMmx1WnlCdmJpQjBhR1VnVkdWeWJXbHVZV3hjSWp0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMUJoYVhKcGJtZEdiRzkzVTNSaGRHVkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaWDBwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCSVlXNWtiR2x1WnlCMGFHVWdOWFJvSUdGdVpDQm1hVzVoYkNCcGJuUmxjbUZqZEdsdmJpQnZaaUIwYUdVZ2NHRnBjbWx1WnlCd2NtOWpaWE56TENCcExtVXVJR0Z1SUdsdVkyOXRhVzVuSUZCaGFYSlNaWE53YjI1elpWeHVJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW0xY0lqNDhMM0JoY21GdFBseHVJQ0FnSUY5b1lXNWtiR1ZRWVdseVVtVnpjRzl1YzJVb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3WVdseVVtVnpjQ0E5SUc1bGR5QlFZV2x5VW1WemNHOXVjMlVvYlNrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaUzVCZDJGcGRHbHVaME5vWldOclJuSnZiVVZtZEhCdmN5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQnBaaUFvY0dGcGNsSmxjM0F1VTNWalkyVnpjeWxjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVFYZGhhWFJwYm1kRGFHVmphMFp5YjIxUWIzTXBYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdVM1JwYkd3Z1YyRnBkR2x1WnlCbWIzSWdWWE5sY2lCMGJ5QnpZWGtnZVdWeklHOXVJRkJQVTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLRndpUjI5MElGQmhhWElnUTI5dVptbHliU0JtY205dElFVm1kSEJ2Y3l3Z1luVjBJSE4wYVd4c0lIZGhhWFJwYm1jZ1ptOXlJSFZ6WlNCMGJ5QmpiMjVtYVhKdElHWnliMjBnVUU5VExsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SUVlXbHlhVzVuUm14dmQxTjBZWFJsTGsxbGMzTmhaMlVnUFNCY0lrTnZibVpwY20wZ2RHaGhkQ0IwYUdVZ1ptOXNiRzkzYVc1bklFTnZaR1VnYVhNZ2QyaGhkQ0IwYUdVZ1JVWlVVRTlUSUhOb2IzZGxaRndpTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZFFZV2x5YVc1blJteHZkMU4wWVhSbFEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVjlLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWENKSGIzUWdVR0ZwY2lCRGIyNW1hWEp0SUdaeWIyMGdSV1owY0c5ekxDQmhibVFnWVd4eVpXRmtlU0JvWVdRZ1kyOXVabWx5YlNCbWNtOXRJRkJQVXk0Z1RtOTNJR3AxYzNRZ2QyRnBkR2x1WnlCbWIzSWdabWx5YzNRZ2NHOXVaeTVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYjI1UVlXbHlhVzVuVTNWalkyVnpjeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTU0J1WldWa0lIUnZJSEJwYm1jdmJHOW5hVzRnWlhabGJpQnBaaUIwYUdVZ2NHOXpJSFZ6WlhJZ2FHRnpJRzV2ZENCellXbGtJSGxsY3lCNVpYUXNJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZbVZqWVhWelpTQnZkR2hsY25kcGMyVWdkMmwwYUdsdUlEVWdjMlZqYjI1a2N5QmpiMjV1WldOMGFXOXVaeUIzYVd4c0lHSmxJR1J5YjNCd1pXUWdZbmtnWldaMGNHOXpMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzNSaGNuUlFaWEpwYjJScFkxQnBibWNvS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOXVVR0ZwY21sdVowWmhhV3hsWkNncE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gyaGhibVJzWlVSeWIzQkxaWGx6UVdSMmFXTmxLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGNJa1ZtZEhCdmN5QjNZWE1nVlc1d1lXbHlaV1F1SUVrZ2MyaGhiR3dnZFc1d1lXbHlJR1p5YjIwZ2JYa2daVzVrSUdGeklIZGxiR3d1WENJcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5a2IxVnVjR0ZwY2lncE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUY5dmJsQmhhWEpwYm1kVGRXTmpaWE56S0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVUzVmpZMlZ6YzJaMWJDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRkJoYVhKcGJtZEdiRzkzVTNSaGRHVXVSbWx1YVhOb1pXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJRWVdseWFXNW5SbXh2ZDFOMFlYUmxMazFsYzNOaFoyVWdQU0JjSWxCaGFYSnBibWNnVTNWalkyVnpjMloxYkNGY0lqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVTNSaGRIVnpJRDBnVTNCcFUzUmhkSFZ6TGxCaGFYSmxaRU52Ym01bFkzUmxaRHRjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxTmxZM0psZEhORGFHRnVaMlZrSnl3Z2UyUmxkR0ZwYkRvZ2RHaHBjeTVmYzJWamNtVjBjMzBwS1R0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMUJoYVhKcGJtZEdiRzkzVTNSaGRHVkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaWDBwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JmYjI1UVlXbHlhVzVuUm1GcGJHVmtLQ2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTmxZM0psZEhNZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6Y0dsTlpYTnpZV2RsVTNSaGJYQXVVMlZqY21WMGN5QTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOdmJtNHVSR2x6WTI5dWJtVmpkQ2dwTzF4dVhHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRk4wWVhSMWN5QTlJRk53YVZOMFlYUjFjeTVWYm5CaGFYSmxaRHRjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFVHRnBjbWx1WjBac2IzZFRkR0YwWlM1TlpYTnpZV2RsSUQwZ1hDSlFZV2x5YVc1bklFWmhhV3hsWkZ3aU8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJRWVdseWFXNW5SbXh2ZDFOMFlYUmxMa1pwYm1semFHVmtJRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVUdGcGNtbHVaMFpzYjNkVGRHRjBaUzVUZFdOalpYTnpablZzSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGQmhhWEpwYm1kR2JHOTNVM1JoZEdVdVFYZGhhWFJwYm1kRGFHVmphMFp5YjIxUWIzTWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFCaGFYSnBibWRHYkc5M1UzUmhkR1ZEYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEdocGN5NURkWEp5Wlc1MFVHRnBjbWx1WjBac2IzZFRkR0YwWlgwcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCZlpHOVZibkJoYVhJb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEZFhKeVpXNTBVM1JoZEhWeklEMGdVM0JwVTNSaGRIVnpMbFZ1Y0dGcGNtVmtPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpiMjV1TGtScGMyTnZibTVsWTNRb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMyVmpjbVYwY3lBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM053YVUxbGMzTmhaMlZUZEdGdGNDNVRaV055WlhSeklEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMU5sWTNKbGRITkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1ZmMyVmpjbVYwYzMwcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlRiMjFsZEdsdFpYTWdkR2hsSUhObGNuWmxjaUJoYzJ0eklIVnpJSFJ2SUhKdmJHd2diM1Z5SUhObFkzSmxkSE11WEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQzh2SUR4d1lYSmhiU0J1WVcxbFBWd2liVndpUGp3dmNHRnlZVzArWEc0Z0lDQWdYMmhoYm1Sc1pVdGxlVkp2Ykd4cGJtZFNaWEYxWlhOMEtHMHBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQXZMeUIzWlNCallXeGpkV3hoZEdVZ2RHaGxJRzVsZHlCdmJtVnpMaTR1WEc0Z0lDQWdJQ0FnSUhaaGNpQnJjbEpsY3lBOUlFdGxlVkp2Ykd4cGJtZElaV3h3WlhJdVVHVnlabTl5YlV0bGVWSnZiR3hwYm1jb2JTd2dkR2hwY3k1ZmMyVmpjbVYwY3lrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNObFkzSmxkSE1nUFNCcmNsSmxjeTVPWlhkVFpXTnlaWFJ6T3lBdkx5QmhibVFnZFhCa1lYUmxJRzkxY2lCelpXTnlaWFJ6SUhkcGRHZ2dkR2hsYlZ4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6Y0dsTlpYTnpZV2RsVTNSaGJYQXVVMlZqY21WMGN5QTlJSFJvYVhNdVgzTmxZM0psZEhNN0lDOHZJR0Z1WkNCdmRYSWdjM1JoYlhCY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWdVpDaHJjbEpsY3k1TFpYbFNiMnhzYVc1blEyOXVabWx5YldGMGFXOXVLVHNnTHk4Z1lXNWtJSGRsSUhSbGJHd2dkR2hsSUhObGNuWmxjaUIwYUdGMElHRnNiQ0JwY3lCM1pXeHNMbHh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnblUyVmpjbVYwYzBOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGFHbHpMbDl6WldOeVpYUnpmU2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUZSb1pTQlFhVzVRWVdRZ2MyVnlkbVZ5SUhkcGJHd2djMlZ1WkNCMWN5QjBhR2x6SUcxbGMzTmhaMlVnZDJobGJpQmhJR04xYzNSdmJXVnlJSE5wWjI1aGRIVnlaU0JwY3lCeVpYRnBjbVZrTGx4dUlDQWdJQzh2SUZkbElHNWxaV1FnZEc4Z1lYTnJJSFJvWlNCamRYTjBiMjFsY2lCMGJ5QnphV2R1SUhSb1pTQnBibU52YldsdVp5QnlaV05sYVhCMExseHVJQ0FnSUM4dklFRnVaQ0IwYUdWdUlIUmxiR3dnZEdobElIQnBibkJoWkNCM2FHVjBhR1Z5SUhSb1pTQnphV2R1WVhSMWNtVWdhWE1nYjJzZ2IzSWdibTkwTGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbTFjSWo0OEwzQmhjbUZ0UGx4dUlDQWdJRjlvWVc1a2JHVlRhV2R1WVhSMWNtVlNaWEYxYVhKbFpDaHRLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVkyOXRhVzVuVUc5elVtVm1TV1FnUFNCdExrUmhkR0V1Y0c5elgzSmxabDlwWkR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dJVDBnVTNCcFJteHZkeTVVY21GdWMyRmpkR2x2YmlCOGZDQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1R2FXNXBjMmhsWkNCOGZDQWhkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVVHOXpVbVZtU1dRZ1BUMGdhVzVqYjIxcGJtZFFiM05TWldaSlpDbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWUZKbFkyVnBkbVZrSUZOcFoyNWhkSFZ5WlNCU1pYRjFhWEpsWkNCaWRYUWdTU0IzWVhNZ2JtOTBJSGRoYVhScGJtY2dabTl5SUc5dVpTNGdTVzVqYjIxcGJtY2dVRzl6SUZKbFppQkpSRG9nSkh0cGJtTnZiV2x1WjFCdmMxSmxaa2xrZldBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxMbE5wWjI1aGRIVnlaVkpsY1hWcGNtVmtLRzVsZHlCVGFXZHVZWFIxY21WU1pYRjFhWEpsWkNodEtTd2dYQ0pCYzJzZ1EzVnpkRzl0WlhJZ2RHOGdVMmxuYmlCMGFHVWdVbVZqWldsd2RGd2lLVHRjYmlBZ0lDQmNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFSNFJteHZkMU4wWVhSbFEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsZlNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklGUm9aU0JRYVc1UVlXUWdjMlZ5ZG1WeUlIZHBiR3dnYzJWdVpDQjFjeUIwYUdseklHMWxjM05oWjJVZ2QyaGxiaUJoYmlCaGRYUm9JR052WkdVZ2FYTWdjbVZ4ZFdseVpXUXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWJWd2lQand2Y0dGeVlXMCtYRzRnSUNBZ1gyaGhibVJzWlVGMWRHaERiMlJsVW1WeGRXbHlaV1FvYlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnBibU52YldsdVoxQnZjMUpsWmtsa0lEMGdiUzVFWVhSaExuQnZjMTl5WldaZmFXUTdYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMa04xY25KbGJuUkdiRzkzSUNFOUlGTndhVVpzYjNjdVZISmhibk5oWTNScGIyNGdmSHdnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVSbWx1YVhOb1pXUWdmSHdnSVhSb2FYTXVRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxMbEJ2YzFKbFprbGtJRDA5SUdsdVkyOXRhVzVuVUc5elVtVm1TV1FwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjlzYjJjdWFXNW1ieWhnVW1WalpXbDJaV1FnUVhWMGFDQkRiMlJsSUZKbGNYVnBjbVZrSUdKMWRDQkpJSGRoY3lCdWIzUWdkMkZwZEdsdVp5Qm1iM0lnYjI1bExpQkpibU52YldsdVp5QlFiM01nVW1WbUlFbEVPaUFrZTJsdVkyOXRhVzVuVUc5elVtVm1TV1I5WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZG1GeUlIQm9iMjVsUm05eVFYVjBhRkpsY1hWcGNtVmtJRDBnYm1WM0lGQm9iMjVsUm05eVFYVjBhRkpsY1hWcGNtVmtLRzBwTzF4dUlDQWdJQ0FnSUNCMllYSWdiWE5uSUQwZ1lFRjFkR2dnUTI5a1pTQlNaWEYxYVhKbFpDNGdRMkZzYkNBa2UzQm9iMjVsUm05eVFYVjBhRkpsY1hWcGNtVmtMa2RsZEZCb2IyNWxUblZ0WW1WeUtDbDlJR0Z1WkNCeGRXOTBaU0J0WlhKamFHRnVkQ0JwWkNBa2UzQm9iMjVsUm05eVFYVjBhRkpsY1hWcGNtVmtMa2RsZEUxbGNtTm9ZVzUwU1dRb0tYMWdPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNVFhRzl1WlVadmNrRjFkR2hTWlhGMWFYSmxaQ2h3YUc5dVpVWnZja0YxZEdoU1pYRjFhWEpsWkN3Z2JYTm5LVHRjYmlBZ0lDQmNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFSNFJteHZkMU4wWVhSbFEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsZlNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklGUm9aU0JRYVc1UVlXUWdjMlZ5ZG1WeUlIZHBiR3dnY21Wd2JIa2dkRzhnYjNWeUlGQjFjbU5vWVhObFVtVnhkV1Z6ZENCM2FYUm9JR0VnVUhWeVkyaGhjMlZTWlhOd2IyNXpaUzVjYmlBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdMeThnUEhCaGNtRnRJRzVoYldVOVhDSnRYQ0krUEM5d1lYSmhiVDVjYmlBZ0lDQmZhR0Z1Wkd4bFVIVnlZMmhoYzJWU1pYTndiMjV6WlNodEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR2x1WTI5dGFXNW5VRzl6VW1WbVNXUWdQU0J0TGtSaGRHRXVjRzl6WDNKbFpsOXBaRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRVpzYjNjZ0lUMGdVM0JwUm14dmR5NVVjbUZ1YzJGamRHbHZiaUI4ZkNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVHYVc1cGMyaGxaQ0I4ZkNBaGRHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1VUc5elVtVm1TV1FnUFQwZ2FXNWpiMjFwYm1kUWIzTlNaV1pKWkNsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9ZRkpsWTJWcGRtVmtJRkIxY21Ob1lYTmxJSEpsYzNCdmJuTmxJR0oxZENCSklIZGhjeUJ1YjNRZ2QyRnBkR2x1WnlCbWIzSWdiMjVsTGlCSmJtTnZiV2x1WnlCUWIzTWdVbVZtSUVsRU9pQWtlMmx1WTI5dGFXNW5VRzl6VW1WbVNXUjlYQ0pnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCVVNDMHhRU3dnVkVndE1rRmNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbExrTnZiWEJzWlhSbFpDaHRMa2RsZEZOMVkyTmxjM05UZEdGMFpTZ3BMQ0J0TENCY0lsQjFjbU5vWVhObElGUnlZVzV6WVdOMGFXOXVJRVZ1WkdWa0xsd2lLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZFZ3ROa0VzSUZSSUxUWkZYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnblZIaEdiRzkzVTNSaGRHVkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdWOUtTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdWR2hsSUZCcGJsQmhaQ0J6WlhKMlpYSWdkMmxzYkNCeVpYQnNlU0IwYnlCdmRYSWdRMkZ6YUc5MWRFOXViSGxTWlhGMVpYTjBJSGRwZEdnZ1lTQkRZWE5vYjNWMFQyNXNlVkpsYzNCdmJuTmxMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltMWNJajQ4TDNCaGNtRnRQbHh1SUNBZ0lGOW9ZVzVrYkdWRFlYTm9iM1YwVDI1c2VWSmxjM0J2Ym5ObEtHMHBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYVc1amIyMXBibWRRYjNOU1pXWkpaQ0E5SUcwdVJHRjBZUzV3YjNOZmNtVm1YMmxrTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwUm14dmR5QWhQU0JUY0dsR2JHOTNMbFJ5WVc1ellXTjBhVzl1SUh4OElIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGtacGJtbHphR1ZrSUh4OElDRjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1UWIzTlNaV1pKWkNBOVBTQnBibU52YldsdVoxQnZjMUpsWmtsa0tWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhnVW1WalpXbDJaV1FnUTJGemFHOTFkQ0JTWlhOd2IyNXpaU0JpZFhRZ1NTQjNZWE1nYm05MElIZGhhWFJwYm1jZ1ptOXlJRzl1WlM0Z1NXNWpiMjFwYm1jZ1VHOXpJRkpsWmlCSlJEb2dKSHRwYm1OdmJXbHVaMUJ2YzFKbFprbGtmV0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SUZSSUxURkJMQ0JVU0MweVFWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVEyOXRjR3hsZEdWa0tHMHVSMlYwVTNWalkyVnpjMU4wWVhSbEtDa3NJRzBzSUZ3aVEyRnphRzkxZENCVWNtRnVjMkZqZEdsdmJpQkZibVJsWkM1Y0lpazdYRzRnSUNBZ0lDQWdJQzh2SUZSSUxUWkJMQ0JVU0MwMlJWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFSNFJteHZkMU4wWVhSbFEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsZlNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUM4dklGUm9aU0JRYVc1UVlXUWdjMlZ5ZG1WeUlIZHBiR3dnY21Wd2JIa2dkRzhnYjNWeUlFMXZkRzlRZFhKamFHRnpaVkpsY1hWbGMzUWdkMmwwYUNCaElFMXZkRzlRZFhKamFHRnpaVkpsYzNCdmJuTmxMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltMWNJajQ4TDNCaGNtRnRQbHh1SUNBZ0lGOW9ZVzVrYkdWTmIzUnZVSFZ5WTJoaGMyVlNaWE53YjI1elpTaHRLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVkyOXRhVzVuVUc5elVtVm1TV1FnUFNCdExrUmhkR0V1Y0c5elgzSmxabDlwWkR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dJVDBnVTNCcFJteHZkeTVVY21GdWMyRmpkR2x2YmlCOGZDQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1R2FXNXBjMmhsWkNCOGZDQWhkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVVHOXpVbVZtU1dRZ1BUMGdhVzVqYjIxcGJtZFFiM05TWldaSlpDbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWUZKbFkyVnBkbVZrSUUxdmRHOGdVbVZ6Y0c5dWMyVWdZblYwSUVrZ2QyRnpJRzV2ZENCM1lXbDBhVzVuSUdadmNpQnZibVV1SUVsdVkyOXRhVzVuSUZCdmN5QlNaV1lnU1VRNklDUjdhVzVqYjIxcGJtZFFiM05TWldaSlpIMWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQXZMeUJVU0MweFFTd2dWRWd0TWtGY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGtOdmJYQnNaWFJsWkNodExrZGxkRk4xWTJObGMzTlRkR0YwWlNncExDQnRMQ0JjSWsxdmRHOGdWSEpoYm5OaFkzUnBiMjRnUlc1a1pXUXVYQ0lwTzF4dUlDQWdJQ0FnSUNBdkx5QlVTQzAyUVN3Z1ZFZ3ROa1ZjYmlBZ0lDQWdJQ0FnWEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZFVlRVpzYjNkVGRHRjBaVU5vWVc1blpXUW5MQ0I3WkdWMFlXbHNPaUIwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpYMHBLVHRjYmlBZ0lDQjlJQ0FnWEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCVWFHVWdVR2x1VUdGa0lITmxjblpsY2lCM2FXeHNJSEpsY0d4NUlIUnZJRzkxY2lCU1pXWjFibVJTWlhGMVpYTjBJSGRwZEdnZ1lTQlNaV1oxYm1SU1pYTndiMjV6WlM1Y2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1BIQmhjbUZ0SUc1aGJXVTlYQ0p0WENJK1BDOXdZWEpoYlQ1Y2JpQWdJQ0JmYUdGdVpHeGxVbVZtZFc1a1VtVnpjRzl1YzJVb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwYm1OdmJXbHVaMUJ2YzFKbFprbGtJRDBnYlM1RVlYUmhMbkJ2YzE5eVpXWmZhV1E3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGtOMWNuSmxiblJHYkc5M0lDRTlJRk53YVVac2IzY3VWSEpoYm5OaFkzUnBiMjRnZkh3Z2RHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1Um1sdWFYTm9aV1FnZkNBaGRHaHBjeTVEZFhKeVpXNTBWSGhHYkc5M1UzUmhkR1V1VUc5elVtVm1TV1FnUFQwZ2FXNWpiMjFwYm1kUWIzTlNaV1pKWkNsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9ZRkpsWTJWcGRtVmtJRkpsWm5WdVpDQnlaWE53YjI1elpTQmlkWFFnU1NCM1lYTWdibTkwSUhkaGFYUnBibWNnWm05eUlIUm9hWE1nYjI1bExpQkpibU52YldsdVp5QlFiM01nVW1WbUlFbEVPaUFrZTJsdVkyOXRhVzVuVUc5elVtVm1TV1I5WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnTHk4Z1ZFZ3RNVUVzSUZSSUxUSkJYRzRnSUNBZ0lDQWdJRnh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNURiMjF3YkdWMFpXUW9iUzVIWlhSVGRXTmpaWE56VTNSaGRHVW9LU3dnYlN3Z1hDSlNaV1oxYm1RZ1ZISmhibk5oWTNScGIyNGdSVzVrWldRdVhDSXBPMXh1SUNBZ0lDQWdJQ0F2THlCVVNDMDJRU3dnVkVndE5rVmNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NkVWVFWnNiM2RUZEdGMFpVTm9ZVzVuWldRbkxDQjdaR1YwWVdsc09pQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlgwcEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlVUMFJQT2lCSVlXNWtiR1VnZEdobElGTmxkSFJzWlcxbGJuUWdVbVZ6Y0c5dWMyVWdjbVZqWldsMlpXUWdabkp2YlNCMGFHVWdVR2x1VUdGa1hHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUM4dklEeHdZWEpoYlNCdVlXMWxQVndpYlZ3aVBqd3ZjR0Z5WVcwK1hHNGdJQ0FnU0dGdVpHeGxVMlYwZEd4bFVtVnpjRzl1YzJVb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SR2JHOTNJQ0U5SUZOd2FVWnNiM2N1VkhKaGJuTmhZM1JwYjI0Z2ZId2dkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVJtbHVhWE5vWldRcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLR0JTWldObGFYWmxaQ0JUWlhSMGJHVWdjbVZ6Y0c5dWMyVWdZblYwSUVrZ2QyRnpJRzV2ZENCM1lXbDBhVzVuSUdadmNpQnZibVV1SUNSN2JTNUVaV055ZVhCMFpXUktjMjl1ZldBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklGUklMVEZCTENCVVNDMHlRVnh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVRMjl0Y0d4bGRHVmtLRzB1UjJWMFUzVmpZMlZ6YzFOMFlYUmxLQ2tzSUcwc0lGd2lVMlYwZEd4bElGUnlZVzV6WVdOMGFXOXVJRVZ1WkdWa0xsd2lLVHRjYmlBZ0lDQWdJQ0FnTHk4Z1ZFZ3ROa0VzSUZSSUxUWkZYRzRnSUNBZ1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RVZUVac2IzZFRkR0YwWlVOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaWDBwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCSVlXNWtiR1VnZEdobElGTmxkSFJzWlcxbGJuUWdSVzV4ZFdseWVTQlNaWE53YjI1elpTQnlaV05sYVhabFpDQm1jbTl0SUhSb1pTQlFhVzVRWVdSY2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1BIQmhjbUZ0SUc1aGJXVTlYQ0p0WENJK1BDOXdZWEpoYlQ1Y2JpQWdJQ0JmYUdGdVpHeGxVMlYwZEd4bGJXVnVkRVZ1Y1hWcGNubFNaWE53YjI1elpTaHRLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRFWnNiM2NnSVQwZ1UzQnBSbXh2ZHk1VWNtRnVjMkZqZEdsdmJpQjhmQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNUdhVzVwYzJobFpDbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWUZKbFkyVnBkbVZrSUZObGRIUnNaVzFsYm5RZ1JXNXhkV2x5ZVNCeVpYTndiMjV6WlNCaWRYUWdTU0IzWVhNZ2JtOTBJSGRoYVhScGJtY2dabTl5SUc5dVpTNGdKSHR0TGtSbFkzSjVjSFJsWkVwemIyNTlZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdMeThnVkVndE1VRXNJRlJJTFRKQlhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1RGIyMXdiR1YwWldRb2JTNUhaWFJUZFdOalpYTnpVM1JoZEdVb0tTd2diU3dnWENKVFpYUjBiR1Z0Wlc1MElFVnVjWFZwY25rZ1JXNWtaV1F1WENJcE8xeHVJQ0FnSUNBZ0lDQXZMeUJVU0MwMlFTd2dWRWd0TmtWY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RVZUVac2IzZFRkR0YwWlVOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaWDBwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCVGIyMWxkR2x0WlhNZ2QyVWdjbVZqWldsMlpTQmxkbVZ1ZENCMGVYQmxJRndpWlhKeWIzSmNJaUJtY205dElIUm9aU0J6WlhKMlpYSXNJSE4xWTJnZ1lYTWdkMmhsYmlCallXeHNhVzVuSUdOaGJtTmxiRjkwY21GdWMyRmpkR2x2YmlCaGJtUWdkR2hsY21VZ2FYTWdibThnZEhKaGJuTmhZM1JwYjI0Z2FXNGdjSEp2WjNKbGMzTXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWJWd2lQand2Y0dGeVlXMCtYRzRnSUNBZ1gyaGhibVJzWlVWeWNtOXlSWFpsYm5Rb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SR2JHOTNJRDA5SUZOd2FVWnNiM2N1VkhKaGJuTmhZM1JwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ1ltSUNGMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVHYVc1cGMyaGxaRnh1SUNBZ0lDQWdJQ0FnSUNBZ0ppWWdkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVFYUjBaVzF3ZEdsdVoxUnZRMkZ1WTJWc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FtSmlCdExrZGxkRVZ5Y205eUtDa2dQVDBnWENKT1QxOVVVa0ZPVTBGRFZFbFBUbHdpS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCVVNDMHlSVnh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWUZkaGN5QjBjbmxwYm1jZ2RHOGdZMkZ1WTJWc0lHRWdkSEpoYm5OaFkzUnBiMjRnWW5WMElIUm9aWEpsSUdseklHNXZkR2hwYm1jZ2RHOGdZMkZ1WTJWc0xpQkRZV3hzYVc1bklFZE1WQ0IwYnlCelpXVWdkMmhoZENkeklIVndZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5allXeHNSMlYwVEdGemRGUnlZVzV6WVdOMGFXOXVLQ2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloZ1VtVmpaV2wyWldRZ1JYSnliM0lnUlhabGJuUWdRblYwSUVSdmJpZDBJR3R1YjNjZ2QyaGhkQ0IwYnlCa2J5QjNhWFJvSUdsMExpQWtlMjB1UkdWamNubHdkR1ZrU25OdmJuMWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUZkb1pXNGdkR2hsSUZCcGJsQmhaQ0J5WlhSMWNtNXpJSFJ2SUhWeklIZG9ZWFFnZEdobElFeGhjM1FnVkhKaGJuTmhZM1JwYjI0Z2QyRnpMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUE4Y0dGeVlXMGdibUZ0WlQxY0ltMWNJajQ4TDNCaGNtRnRQbHh1SUNBZ0lGOW9ZVzVrYkdWSFpYUk1ZWE4wVkhKaGJuTmhZM1JwYjI1U1pYTndiMjV6WlNodEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFI0VTNSaGRHVWdQU0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRFWnNiM2NnSVQwZ1UzQnBSbXh2ZHk1VWNtRnVjMkZqZEdsdmJpQjhmQ0IwZUZOMFlYUmxMa1pwYm1semFHVmtLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloY0lsSmxZMlZwZG1Wa0lHZHNkQ0J5WlhOd2IyNXpaU0JpZFhRZ2QyVWdkMlZ5WlNCdWIzUWdhVzRnZEdobElHMXBaR1JzWlNCdlppQmhJSFI0TGlCcFoyNXZjbWx1Wnk1Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvSVhSNFUzUmhkR1V1UVhkaGFYUnBibWRIYkhSU1pYTndiMjV6WlNsY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9YQ0p5WldObGFYWmxaQ0JoSUdkc2RDQnlaWE53YjI1elpTQmlkWFFnZDJVZ2FHRmtJRzV2ZENCaGMydGxaQ0JtYjNJZ2IyNWxJSGRwZEdocGJpQjBhR2x6SUhSeVlXNXpZV04wYVc5dUxpQlFaWEpvWVhCeklHeGxablJ2ZG1WeUlHWnliMjBnY0hKbGRtbHZkWE1nYjI1bExpQnBaMjV2Y21sdVp5NWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JwWmlBb2RIaFRkR0YwWlM1TVlYTjBSMngwVW1WeGRXVnpkRWxrSUNFOUlHMHVTV1FwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktGd2ljbVZqWldsMlpXUWdZU0JuYkhRZ2NtVnpjRzl1YzJVZ1luVjBJSFJvWlNCdFpYTnpZV2RsSUdsa0lHUnZaWE1nYm05MElHMWhkR05vSUhSb1pTQm5iSFFnY21WeGRXVnpkQ0IwYUdGMElIZGxJSE5sYm5RdUlITjBjbUZ1WjJVdUlHbG5ibTl5YVc1bkxsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUZSSUxUUWdWMlVnZDJWeVpTQnBiaUIwYUdVZ2JXbGtaR3hsSUc5bUlHRWdkSEpoYm5OaFkzUnBiMjR1WEc0Z0lDQWdJQ0FnSUM4dklFeGxkQ2R6SUdGMGRHVnRjSFFnY21WamIzWmxjbmt1SUZSb2FYTWdhWE1nYzNSbGNDQTBJRzltSUZSeVlXNXpZV04wYVc5dUlGQnliMk5sYzNOcGJtY2dTR0Z1Wkd4cGJtZGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1lFZHZkQ0JNWVhOMElGUnlZVzV6WVdOMGFXOXVMaTVnS1R0Y2JpQWdJQ0FnSUNBZ2RIaFRkR0YwWlM1SGIzUkhiSFJTWlhOd2IyNXpaU2dwTzF4dUlDQWdJQ0FnSUNCMllYSWdaM1JzVW1WemNHOXVjMlVnUFNCdVpYY2dSMlYwVEdGemRGUnlZVzV6WVdOMGFXOXVVbVZ6Y0c5dWMyVW9iU2s3WEc0Z0lDQWdJQ0FnSUhSNFUzUmhkR1V1UjB4VVVtVnpjRzl1YzJWUWIzTlNaV1pKWkNBOUlHZDBiRkpsYzNCdmJuTmxMa2RsZEZCdmMxSmxaa2xrS0NrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doWjNSc1VtVnpjRzl1YzJVdVYyRnpVbVYwY21sbGRtVmtVM1ZqWTJWemMyWjFiR3g1S0NrcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG5kR3hTWlhOd2IyNXpaUzVKYzFOMGFXeHNTVzVRY205bmNtVnpjeWgwZUZOMFlYUmxMbEJ2YzFKbFprbGtLU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJVU0MwMFJTQXRJRTl3WlhKaGRHbHZiaUJKYmlCUWNtOW5jbVZ6YzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2QwYkZKbGMzQnZibk5sTGtselYyRnBkR2x1WjBadmNsTnBaMjVoZEhWeVpWSmxjM0J2Ym5ObEtDa2dKaVlnSVhSNFUzUmhkR1V1UVhkaGFYUnBibWRUYVdkdVlYUjFjbVZEYUdWamF5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLRndpUldaMGNHOXpJR2x6SUhkaGFYUnBibWNnWm05eUlIVnpJSFJ2SUhObGJtUWdhWFFnYzJsbmJtRjBkWEpsSUdGalkyVndkQzlrWldOc2FXNWxMQ0JpZFhRZ2QyVWdkMlZ5WlNCdWIzUWdZWGRoY21VZ2IyWWdkR2hwY3k0Z1hDSWdLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSlVhR1VnZFhObGNpQmpZVzRnYjI1c2VTQnlaV0ZzYkhrZ1pHVmpiR2x1WlNCaGRDQjBhR2x6SUhOMFlXZGxJR0Z6SUhSb1pYSmxJR2x6SUc1dklISmxZMlZwY0hRZ2RHOGdjSEpwYm5RZ1ptOXlJSE5wWjI1cGJtY3VYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1VGFXZHVZWFIxY21WU1pYRjFhWEpsWkNodVpYY2dVMmxuYm1GMGRYSmxVbVZ4ZFdseVpXUW9kSGhUZEdGMFpTNVFiM05TWldaSlpDd2diUzVKWkN3Z1hDSk5TVk5UU1U1SElGSkZRMFZKVUZSY1hHNGdSRVZEVEVsT1JTQkJUa1FnVkZKWklFRkhRVWxPTGx3aUtTd2dYQ0pTWldOdmRtVnlaV1FnYVc0Z1UybG5ibUYwZFhKbElGSmxjWFZwY21Wa0lHSjFkQ0IzWlNCa2IyNG5kQ0JvWVhabElISmxZMlZwY0hRdUlGbHZkU0J0WVhrZ1JHVmpiR2x1WlNCMGFHVnVJRkpsZEhKNUxsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWjNSc1VtVnpjRzl1YzJVdVNYTlhZV2wwYVc1blJtOXlRWFYwYUVOdlpHVW9LU0FtSmlBaGRIaFRkR0YwWlM1QmQyRnBkR2x1WjFCb2IyNWxSbTl5UVhWMGFDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLRndpUldaMGNHOXpJR2x6SUhkaGFYUnBibWNnWm05eUlIVnpJSFJ2SUhObGJtUWdhWFFnWVhWMGFDQmpiMlJsTENCaWRYUWdkMlVnZDJWeVpTQnViM1FnWVhkaGNtVWdiMllnZEdocGN5NGdYQ0lnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYQ0pYWlNCallXNGdiMjVzZVNCallXNWpaV3dnZEdobElIUnlZVzV6WVdOMGFXOXVJR0YwSUhSb2FYTWdjM1JoWjJVZ1lYTWdkMlVnWkc5dUozUWdhR0YyWlNCbGJtOTFaMmdnYVc1bWIzSnRZWFJwYjI0Z2RHOGdjbVZqYjNabGNpQm1jbTl0SUhSb2FYTXVYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1UWFHOXVaVVp2Y2tGMWRHaFNaWEYxYVhKbFpDaHVaWGNnVUdodmJtVkdiM0pCZFhSb1VtVnhkV2x5WldRb2RIaFRkR0YwWlM1UWIzTlNaV1pKWkN3Z2JTNUpaQ3dnWENKVlRrdE9UMWRPWENJc0lGd2lWVTVMVGs5WFRsd2lLU3dnWENKU1pXTnZkbVZ5WldRZ2JXbGtJRkJvYjI1bExVWnZjaTFCZFhSb0lHSjFkQ0JrYjI0bmRDQm9ZWFpsSUdSbGRHRnBiSE11SUZsdmRTQnRZWGtnUTJGdVkyVnNJSFJvWlc0Z1VtVjBjbmt1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloY0lrOXdaWEpoZEdsdmJpQnpkR2xzYkNCcGJpQndjbTluY21WemN5NHVMaUJ6ZEdGNUlIZGhhWFJwYm1jdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5Qk9ieUJ1WldWa0lIUnZJSEIxWW14cGMyZ2dkSGhHYkc5M1UzUmhkR1ZEYUdGdVoyVmtMaUJEWVc0Z2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9aM1JzVW1WemNHOXVjMlV1VjJGelZHbHRaVTkxZEU5bVUzbHVZMFZ5Y205eUtDa3BYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUR1YwSjNNZ2JtOTBJR2RwZG1VZ2RYQWdZbUZ6WldRZ2IyNGdZU0JVVDA5VElHVnljbTl5TGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFeGxkQ2R6SUd4dlp5QnBkQ3dnWVc1a0lHbG5ibTl5WlNCcGRDNGdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1lGUnBiV1V0VDNWMExVOW1MVk41Ym1NZ1pYSnliM0lnYVc0Z1IyVjBJRXhoYzNRZ1ZISmhibk5oWTNScGIyNGdjbVZ6Y0c5dWMyVXVJRXhsZENkeklHbG5ibTl5WlNCcGRDQmhibVFnZDJVbmJHd2dkSEo1SUdGbllXbHVMbUFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklFNXZJRzVsWldRZ2RHOGdjSFZpYkdsemFDQjBlRVpzYjNkVGRHRjBaVU5vWVc1blpXUXVJRU5oYmlCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGUklMVFJZSUMwZ1ZXNWxlSEJsWTNSbFpDQlNaWE53YjI1elpTQjNhR1Z1SUhKbFkyOTJaWEpwYm1kY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhnVlc1bGVIQmxZM1JsWkNCU1pYTndiMjV6WlNCcGJpQkhaWFFnVEdGemRDQlVjbUZ1YzJGamRHbHZiaUJrZFhKcGJtY2dMU0JTWldObGFYWmxaQ0J3YjNOU1pXWkpaRG9rZTJkMGJGSmxjM0J2Ym5ObExrZGxkRkJ2YzFKbFprbGtLQ2w5SUVWeWNtOXlPaVI3YlM1SFpYUkZjbkp2Y2lncGZTNGdTV2R1YjNKcGJtY3VZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUjRVM1JoZEdVdVZIbHdaU0E5UFNCVWNtRnVjMkZqZEdsdmJsUjVjR1V1UjJWMFRHRnpkRlJ5WVc1ellXTjBhVzl1S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUZSSVNWTWdWMEZUSUVFZ1VFeEJTVTRnUjBWVUlFeEJVMVFnVkZKQlRsTkJRMVJKVDA0Z1VrVlJWVVZUVkN3Z1RrOVVJRVpQVWlCU1JVTlBWa1ZTV1NCUVZWSlFUMU5GVXk1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhjSWxKbGRISnBaWFpsWkNCTVlYTjBJRlJ5WVc1ellXTjBhVzl1SUdGeklHRnphMlZrSUdScGNtVmpkR3g1SUdKNUlIUm9aU0IxYzJWeUxsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuZEd4U1pYTndiMjV6WlM1RGIzQjVUV1Z5WTJoaGJuUlNaV05sYVhCMFZHOURkWE4wYjIxbGNsSmxZMlZwY0hRb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlRk4wWVhSbExrTnZiWEJzWlhSbFpDaHRMa2RsZEZOMVkyTmxjM05UZEdGMFpTZ3BMQ0J0TENCY0lreGhjM1FnVkhKaGJuTmhZM1JwYjI0Z1VtVjBjbWxsZG1Wa1hDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGUklMVFJCSUMwZ1RHVjBKM01nZEhKNUlIUnZJRzFoZEdOb0lIUm9aU0J5WldObGFYWmxaQ0JzWVhOMElIUnlZVzV6WVdOMGFXOXVJR0ZuWVdsdWMzUWdkR2hsSUdOMWNuSmxiblFnZEhKaGJuTmhZM1JwYjI1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjM1ZqWTJWemMxTjBZWFJsSUQwZ2RHaHBjeTVIYkhSTllYUmphQ2huZEd4U1pYTndiMjV6WlN3Z2RIaFRkR0YwWlM1UWIzTlNaV1pKWkN3Z2RIaFRkR0YwWlM1QmJXOTFiblJEWlc1MGN5d2dkSGhUZEdGMFpTNVNaWEYxWlhOMFZHbHRaU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjFZMk5sYzNOVGRHRjBaU0E5UFNCVGRXTmpaWE56VTNSaGRHVXVWVzVyYm05M2JpbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGUklMVFJPT2lCRWFXUnVKM1FnVFdGMFkyZ2diM1Z5SUhSeVlXNXpZV04wYVc5dUxpQkRiMjV6YVdSbGNpQlZibXR1YjNkdUlGTjBZWFJsTGx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloY0lrUnBaQ0J1YjNRZ2JXRjBZMmdnZEhKaGJuTmhZM1JwYjI0dVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVGTjBZWFJsTGxWdWEyNXZkMjVEYjIxd2JHVjBaV1FvWENKR1lXbHNaV1FnZEc4Z2NtVmpiM1psY2lCVWNtRnVjMkZqZEdsdmJpQlRkR0YwZFhNdUlFTm9aV05ySUVWR1ZGQlBVeTRnWENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJVU0MwMFdUb2dWMlVnVFdGMFkyaGxaQ3dnZEhKaGJuTmhZM1JwYjI0Z1ptbHVhWE5vWldRc0lHeGxkQ2R6SUhWd1pHRjBaU0J2ZFhKelpXeDJaWE5jYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ozUnNVbVZ6Y0c5dWMyVXVRMjl3ZVUxbGNtTm9ZVzUwVW1WalpXbHdkRlJ2UTNWemRHOXRaWEpTWldObGFYQjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjRVM1JoZEdVdVEyOXRjR3hsZEdWa0tITjFZMk5sYzNOVGRHRjBaU3dnYlN3Z1hDSlVjbUZ1YzJGamRHbHZiaUJGYm1SbFpDNWNJaWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25WSGhHYkc5M1UzUmhkR1ZEYUdGdVoyVmtKeXdnZTJSbGRHRnBiRG9nZEhoVGRHRjBaWDBwS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2TDFkb1pXNGdkR2hsSUhSeVlXNXpZV04wYVc5dUlHTmhibU5sYkNCeVpYTndiMjV6WlNCcGN5QnlaWFIxY201bFpDNWNiaUFnSUNCZmFHRnVaR3hsUTJGdVkyVnNWSEpoYm5OaFkzUnBiMjVTWlhOd2IyNXpaU2h0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhVzVqYjIxcGJtZFFiM05TWldaSlpDQTlJRzB1UkdGMFlTNXdiM05mY21WbVgybGtPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjBlRk4wWVhSbElEMGdkR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOaGJtTmxiRkpsYzNCdmJuTmxJRDBnYm1WM0lFTmhibU5sYkZSeVlXNXpZV04wYVc5dVVtVnpjRzl1YzJVb2JTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRVpzYjNjZ0lUMGdVM0JwUm14dmR5NVVjbUZ1YzJGamRHbHZiaUI4ZkNCMGVGTjBZWFJsTGtacGJtbHphR1ZrSUh4OElDRjBlRk4wWVhSbExsQnZjMUpsWmtsa0lEMDlJR2x1WTI5dGFXNW5VRzl6VW1WbVNXUXBYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doWTJGdVkyVnNVbVZ6Y0c5dWMyVXVWMkZ6VkhodVVHRnpkRkJ2YVc1MFQyWk9iMUpsZEhWeWJpZ3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9ZRkpsWTJWcGRtVmtJRU5oYm1ObGJDQlNaWEYxYVhKbFpDQmlkWFFnU1NCM1lYTWdibTkwSUhkaGFYUnBibWNnWm05eUlHOXVaUzRnU1c1amIyMXBibWNnVUc5eklGSmxaaUJKUkRvZ0pIdHBibU52YldsdVoxQnZjMUpsWmtsa2ZXQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNoallXNWpaV3hTWlhOd2IyNXpaUzVUZFdOalpYTnpLU0J5WlhSMWNtNDdYRzVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG5kaGNtNG9YQ0pHWVdsc1pXUWdkRzhnWTJGdVkyVnNJSFJ5WVc1ellXTjBhVzl1T2lCeVpXRnpiMjQ5WENJZ0t5QmpZVzVqWld4U1pYTndiMjV6WlM1SFpYUkZjbkp2Y2xKbFlYTnZiaWdwSUNzZ1hDSXNJR1JsZEdGcGJEMWNJaUFySUdOaGJtTmxiRkpsYzNCdmJuTmxMa2RsZEVWeWNtOXlSR1YwWVdsc0tDa3BPMXh1WEc0Z0lDQWdJQ0FnSUhSNFUzUmhkR1V1UTJGdVkyVnNSbUZwYkdWa0tGd2lSbUZwYkdWa0lIUnZJR05oYm1ObGJDQjBjbUZ1YzJGamRHbHZiam9nWENJZ0t5QmpZVzVqWld4U1pYTndiMjV6WlM1SFpYUkZjbkp2Y2tSbGRHRnBiQ2dwSUNzZ1hDSXVJRU5vWldOcklFVkdWRkJQVXk1Y0lpazdYRzRnSUNBZ1hHNGdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RVZUVac2IzZFRkR0YwWlVOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGVGTjBZWFJsZlNrcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUY5b1lXNWtiR1ZUWlhSUWIzTkpibVp2VW1WemNHOXVjMlVvYlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWE53YjI1elpTQTlJRzVsZHlCVFpYUlFiM05KYm1adlVtVnpjRzl1YzJVb2JTazdYRzRnSUNBZ0lDQWdJR2xtSUNoeVpYTndiMjV6WlM1cGMxTjFZMk5sYzNNb0tTbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGelUyVjBTVzVtYnlBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloY0lsTmxkSFJwYm1jZ1VFOVRJR2x1Wm04Z2MzVmpZMlZ6YzJaMWJGd2lLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NTNZWEp1S0Z3aVUyVjBkR2x1WnlCUVQxTWdhVzVtYnlCbVlXbHNaV1E2SUhKbFlYTnZiajFjSWlBcklISmxjM0J2Ym5ObExtZGxkRVZ5Y205eVVtVmhjMjl1S0NrZ0t5QmNJaXdnWkdWMFlXbHNQVndpSUNzZ2NtVnpjRzl1YzJVdVoyVjBSWEp5YjNKRVpYUmhhV3dvS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCZmMzUmhjblJVY21GdWMyRmpkR2x2YmsxdmJtbDBiM0pwYm1kVWFISmxZV1FvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHNWxaV1J6VUhWaWJHbHphR2x1WnlBOUlHWmhiSE5sTzF4dUlDQWdJRnh1SUNBZ0lDQWdJQ0IyWVhJZ2RIaFRkR0YwWlNBOUlIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwUm14dmR5QTlQU0JUY0dsR2JHOTNMbFJ5WVc1ellXTjBhVzl1SUNZbUlDRjBlRk4wWVhSbExrWnBibWx6YUdWa0tWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjM1JoZEdVZ1BTQjBlRk4wWVhSbE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tITjBZWFJsTGtGMGRHVnRjSFJwYm1kVWIwTmhibU5sYkNBbUppQkVZWFJsTG01dmR5Z3BJRDRnYzNSaGRHVXVRMkZ1WTJWc1FYUjBaVzF3ZEZScGJXVWdLeUIwYUdsekxsOXRZWGhYWVdsMFJtOXlRMkZ1WTJWc1ZIZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWRWd0TWxRZ0xTQjBiMjhnYkc5dVp5QnphVzVqWlNCallXNWpaV3dnWVhSMFpXMXdkQ0F0SUVOdmJuTnBaR1Z5SUhWdWEyNXZkMjVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGdRbVZsYmlCMGIyOGdiRzl1WnlCM1lXbDBhVzVuSUdadmNpQjBjbUZ1YzJGamRHbHZiaUIwYnlCallXNWpaV3d1WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIaFRkR0YwWlM1VmJtdHViM2R1UTI5dGNHeGxkR1ZrS0dCWFlXbDBaV1FnYkc5dVp5QmxibTkxWjJnZ1ptOXlJRU5oYm1ObGJDQlVjbUZ1YzJGamRHbHZiaUJ5WlhOMWJIUXVJRU5vWldOcklFVkdWRkJQVXk0Z1lDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVZsWkhOUWRXSnNhWE5vYVc1bklEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tITjBZWFJsTGxKbGNYVmxjM1JUWlc1MElDWW1JRVJoZEdVdWJtOTNLQ2tnUGlCemRHRjBaUzVNWVhOMFUzUmhkR1ZTWlhGMVpYTjBWR2x0WlNBcklIUm9hWE11WDJOb1pXTnJUMjVVZUVaeVpYRjFaVzVqZVNsY2JpQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCVVNDMHhWQ3dnVkVndE5GUWdMU0JKZENkeklHSmxaVzRnWVNCM2FHbHNaU0J6YVc1alpTQjNaU0J5WldObGFYWmxaQ0JoYmlCMWNHUmhkR1VzSUd4bGRDZHpJR05oYkd3Z1lTQkhURlJjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGdRMmhsWTJ0cGJtY2diMjRnYjNWeUlIUnlZVzV6WVdOMGFXOXVMaUJNWVhOMElIZGxJR0Z6YTJWa0lIZGhjeUJoZENBa2UzTjBZWFJsTGt4aGMzUlRkR0YwWlZKbGNYVmxjM1JVYVcxbGZTNHVMbUFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMk5oYkd4SFpYUk1ZWE4wVkhKaGJuTmhZM1JwYjI0b0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdhV1lnS0c1bFpXUnpVSFZpYkdsemFHbHVaeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaRzlqZFcxbGJuUXVaR2x6Y0dGMFkyaEZkbVZ1ZENodVpYY2dRM1Z6ZEc5dFJYWmxiblFvSjFSNFJteHZkMU4wWVhSbFEyaGhibWRsWkNjc0lIdGtaWFJoYVd3NklIUm9hWE11UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsZlNrcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYzJWMFZHbHRaVzkxZENnb0tTQTlQaUIwYUdsekxsOXpkR0Z5ZEZSeVlXNXpZV04wYVc5dVRXOXVhWFJ2Y21sdVoxUm9jbVZoWkNncExDQjBhR2x6TGw5MGVFMXZibWwwYjNKRGFHVmphMFp5WlhGMVpXNWplU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdVSEpwYm5ScGJtZFNaWE53YjI1elpTaHRLU0I3WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVFdWMGFHOWtJRzV2ZENCcGJYQnNaVzFsYm5SbFpDNGdVR3hsWVhObElHOTJaWEozY21sMFpTQjBhR2x6SUcxbGRHaHZaQ0JwYmlCNWIzVnlJRkJQVXljcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUZSbGNtMXBibUZzVTNSaGRIVnpVbVZ6Y0c5dWMyVW9iU2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjAxbGRHaHZaQ0J1YjNRZ2FXMXdiR1Z0Wlc1MFpXUXVJRkJzWldGelpTQnZkbVZ5ZDNKcGRHVWdkR2hwY3lCdFpYUm9iMlFnYVc0Z2VXOTFjaUJRVDFNbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCQ1lYUjBaWEo1VEdWMlpXeERhR0Z1WjJWa0tHMHBJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2ROWlhSb2IyUWdibTkwSUdsdGNHeGxiV1Z1ZEdWa0xpQlFiR1ZoYzJVZ2IzWmxjbmR5YVhSbElIUm9hWE1nYldWMGFHOWtJR2x1SUhsdmRYSWdVRTlUSnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWDJoaGJtUnNaVkJ5YVc1MGFXNW5VbVZ6Y0c5dWMyVW9iU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZEdocGN5NVFjbWx1ZEdsdVoxSmxjM0J2Ym5ObElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCMGFHbHpMbEJ5YVc1MGFXNW5VbVZ6Y0c5dWMyVW9iU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMmhoYm1Sc1pWUmxjbTFwYm1Gc1UzUmhkSFZ6VW1WemNHOXVjMlVvYlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHaHBjeTVVWlhKdGFXNWhiRk4wWVhSMWMxSmxjM0J2Ym5ObElEMDlQU0FuWm5WdVkzUnBiMjRuS1NCMGFHbHpMbFJsY20xcGJtRnNVM1JoZEhWelVtVnpjRzl1YzJVb2JTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gyaGhibVJzWlVKaGRIUmxjbmxNWlhabGJFTm9ZVzVuWldRb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdkR2hwY3k1Q1lYUjBaWEo1VEdWMlpXeERhR0Z1WjJWa0lEMDlQU0FuWm5WdVkzUnBiMjRuS1NCMGFHbHpMa0poZEhSbGNubE1aWFpsYkVOb1lXNW5aV1FvYlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1pXNWtjbVZuYVc5dVhHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUM4dklISmxaMmx2YmlCSmJuUmxjbTVoYkhNZ1ptOXlJRU52Ym01bFkzUnBiMjRnVFdGdVlXZGxiV1Z1ZEZ4dVhHNGdJQ0FnWDNKbGMyVjBRMjl1YmlncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNBdkx5QlRaWFIxY0NCMGFHVWdRMjl1Ym1WamRHbHZibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpiMjV1SUQwZ2JtVjNJRU52Ym01bFkzUnBiMjRvS1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZhWE5WYzJsdVowaDBkSEJ6S0NrZ2ZId2dkR2hwY3k1ZlptOXlZMlZUWldOMWNtVlhaV0pUYjJOclpYUnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloY0lsTmxZM1Z5WlNCamIyNXVaV04wYVc5dUlHUmxkR1ZqZEdWa0xsd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJWbWRIQnZjMEZrWkhKbGMzTWdQU0IwYUdsekxsOWxablJ3YjNOQlpHUnlaWE56TG5KbGNHeGhZMlVvWENKM2N6b3ZMMXdpTENCY0luZHpjem92TDF3aUtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTI5dWJpNUJaR1J5WlhOeklEMGdkR2hwY3k1ZlpXWjBjRzl6UVdSa2NtVnpjenRjYmlBZ0lDQmNiaUFnSUNBZ0lDQWdMeThnVW1WbmFYTjBaWElnYjNWeUlFVjJaVzUwSUVoaGJtUnNaWEp6WEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjBOdmJtNWxZM1JwYjI1VGRHRjBkWE5EYUdGdVoyVmtKeXdnS0dVcElEMCtJSFJvYVhNdVgyOXVVM0JwUTI5dWJtVmpkR2x2YmxOMFlYUjFjME5vWVc1blpXUW9aUzVrWlhSaGFXd3BLVHRjYmlBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduVFdWemMyRm5aVkpsWTJWcGRtVmtKeXdnS0dVcElEMCtJSFJvYVhNdVgyOXVVM0JwVFdWemMyRm5aVkpsWTJWcGRtVmtLR1V1WkdWMFlXbHNLU2s3WEc0Z0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjBWeWNtOXlVbVZqWldsMlpXUW5MQ0FvWlNrZ1BUNGdkR2hwY3k1ZmIyNVhjMFZ5Y205eVVtVmpaV2wyWldRb1pTNWtaWFJoYVd3cEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QlVhR2x6SUcxbGRHaHZaQ0IzYVd4c0lHSmxJR05oYkd4bFpDQjNhR1Z1SUhSb1pTQmpiMjV1WldOMGFXOXVJSE4wWVhSMWN5QmphR0Z1WjJWekxseHVJQ0FnSUM4dklGbHZkU0JoY21VZ1pXNWpiM1Z5WVdkbFpDQjBieUJrYVhOd2JHRjVJR0VnVUdsdVVHRmtJRU52Ym01bFkzUnBiMjRnU1c1a2FXTmhkRzl5SUc5dUlIUm9aU0JRVDFNZ2MyTnlaV1Z1TGx4dUlDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlBOGNHRnlZVzBnYm1GdFpUMWNJbk4wWVhSbFhDSStQQzl3WVhKaGJUNWNiaUFnSUNCZmIyNVRjR2xEYjI1dVpXTjBhVzl1VTNSaGRIVnpRMmhoYm1kbFpDaHpkR0YwWlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhOM2FYUmphQ0FvYzNSaGRHVXVRMjl1Ym1WamRHbHZibE4wWVhSbEtWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRU52Ym01bFkzUnBiMjVUZEdGMFpTNURiMjV1WldOMGFXNW5PbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktHQkpKMjBnUTI5dWJtVmpkR2x1WnlCMGJ5QjBhR1VnUldaMGNHOXpJR0YwSUNSN2RHaHBjeTVmWldaMGNHOXpRV1JrY21WemMzMHVMaTVnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCRGIyNXVaV04wYVc5dVUzUmhkR1V1UTI5dWJtVmpkR1ZrT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0psZEhKcFpYTlRhVzVqWlV4aGMzUkVaWFpwWTJWQlpHUnlaWE56VW1WemIyeDFkR2x2YmlBOUlEQTdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVEZFhKeVpXNTBSbXh2ZHlBOVBTQlRjR2xHYkc5M0xsQmhhWEpwYm1jZ0ppWWdkR2hwY3k1RGRYSnlaVzUwVTNSaGRIVnpJRDA5SUZOd2FWTjBZWFIxY3k1VmJuQmhhWEpsWkNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVEzVnljbVZ1ZEZCaGFYSnBibWRHYkc5M1UzUmhkR1V1VFdWemMyRm5aU0E5SUZ3aVVtVnhkV1Z6ZEdsdVp5QjBieUJRWVdseUxpNHVYQ0k3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnZZM1Z0Wlc1MExtUnBjM0JoZEdOb1JYWmxiblFvYm1WM0lFTjFjM1J2YlVWMlpXNTBLQ2RRWVdseWFXNW5SbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZCaGFYSnBibWRHYkc5M1UzUmhkR1Y5S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd2NpQTlJRkJoYVhKcGJtZElaV3h3WlhJdVRtVjNVR0ZwY2xKbGNYVmxjM1FvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmMyVnVaQ2h3Y2k1VWIwMWxjM05oWjJVb0tTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktHQkpKMjBnUTI5dWJtVmpkR1ZrSUhSdklDUjdkR2hwY3k1ZlpXWjBjRzl6UVdSa2NtVnpjMzB1TGk1Z0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjM0JwVFdWemMyRm5aVk4wWVcxd0xsTmxZM0psZEhNZ1BTQjBhR2x6TGw5elpXTnlaWFJ6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emRHRnlkRkJsY21sdlpHbGpVR2x1WnlncE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQkRiMjV1WldOMGFXOXVVM1JoZEdVdVJHbHpZMjl1Ym1WamRHVmtPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUV4bGRDZHpJSEpsYzJWMElITnZiV1VnYkdsbVpXTjVZMnhsSUhKbGJHRjBaV1FnZEc4Z1kyOXVibVZqZEdsdmJpQnpkR0YwWlN3Z2NtVmhaSGtnWm05eUlHNWxlSFFnWTI5dWJtVmpkR2x2Ymx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLR0JKSjIwZ1pHbHpZMjl1Ym1WamRHVmtJR1p5YjIwZ0pIdDBhR2x6TGw5bFpuUndiM05CWkdSeVpYTnpmUzR1TG1BcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDIxdmMzUlNaV05sYm5SUWFXNW5VMlZ1ZENBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiVzl6ZEZKbFkyVnVkRkJ2Ym1kU1pXTmxhWFpsWkNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiV2x6YzJWa1VHOXVaM05EYjNWdWRDQTlJREE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjM1J2Y0ZCbGNtbHZaR2xqVUdsdVp5Z3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11UTNWeWNtVnVkRk4wWVhSMWN5QWhQU0JUY0dsVGRHRjBkWE11Vlc1d1lXbHlaV1FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJUZEdGMGRYTWdQU0JUY0dsVGRHRjBkWE11VUdGcGNtVmtRMjl1Ym1WamRHbHVaenRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NURkWEp5Wlc1MFJteHZkeUE5UFNCVGNHbEdiRzkzTGxSeVlXNXpZV04wYVc5dUlDWW1JQ0YwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNUdhVzVwYzJobFpDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2QyVW5jbVVnYVc0Z2RHaGxJRzFwWkdSc1pTQnZaaUJoSUhSeVlXNXpZV04wYVc5dUxDQnFkWE4wSUhOdklIbHZkU0JyYm05M0lWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWRWd0TVVSY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLR0JNYjNOMElHTnZibTVsWTNScGIyNGdhVzRnZEdobElHMXBaR1JzWlNCdlppQmhJSFJ5WVc1ellXTjBhVzl1TGk0dVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5amIyNXVJRDA5SUc1MWJHd3BJSEpsZEhWeWJqc2dMeThnVkdocGN5QnRaV0Z1Y3lCMGFHVWdhVzV6ZEdGdVkyVWdhR0Z6SUdKbFpXNGdaR2x6Y0c5elpXUXVJRUZpYjNKMGFXNW5MbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMkYxZEc5QlpHUnlaWE56VW1WemIyeDFkR2x2YmtWdVlXSnNaV1FwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXlaWFJ5YVdWelUybHVZMlZNWVhOMFJHVjJhV05sUVdSa2NtVnpjMUpsYzI5c2RYUnBiMjRnUGowZ2RHaHBjeTVmY21WMGNtbGxjMEpsWm05eVpWSmxjMjlzZG1sdVowUmxkbWxqWlVGa1pISmxjM01wWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWVhWMGIxSmxjMjlzZG1WRlpuUndiM05CWkdSeVpYTnpLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY21WMGNtbGxjMU5wYm1ObFRHRnpkRVJsZG1salpVRmtaSEpsYzNOU1pYTnZiSFYwYVc5dUlEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpYUnlhV1Z6VTJsdVkyVk1ZWE4wUkdWMmFXTmxRV1JrY21WemMxSmxjMjlzZFhScGIyNGdLejBnTVR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0dCWGFXeHNJSFJ5ZVNCMGJ5QnlaV052Ym01bFkzUWdhVzRnSkh0MGFHbHpMbDl6YkdWbGNFSmxabTl5WlZKbFkyOXVibVZqZEUxemZXMXpMaTR1WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVRM1Z5Y21WdWRGTjBZWFIxY3lBaFBTQlRjR2xUZEdGMGRYTXVWVzV3WVdseVpXUXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJwY3lCdWIyNHRZbXh2WTJ0cGJtZGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmloMGFHbHpMbDlqYjI1dUtTQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTnZibTR1UTI5dWJtVmpkQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z2RHaHBjeTVmYzJ4bFpYQkNaV1p2Y21WU1pXTnZibTVsWTNSTmN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEVac2IzY2dQVDBnVTNCcFJteHZkeTVRWVdseWFXNW5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVEzVnljbVZ1ZEZCaGFYSnBibWRHYkc5M1UzUmhkR1V1Um1sdWFYTm9aV1FwSUhKbGRIVnlianRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZjbVYwY21sbGMxTnBibU5sVEdGemRGQmhhWEpwYm1jZ1BqMGdkR2hwY3k1ZmNtVjBjbWxsYzBKbFptOXlaVkJoYVhKcGJtY3BYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0psZEhKcFpYTlRhVzVqWlV4aGMzUlFZV2x5YVc1bklEMGdNRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTUzWVhKdUtGd2lURzl6ZENCRGIyNXVaV04wYVc5dUlHUjFjbWx1WnlCd1lXbHlhVzVuTGx3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDI5dVVHRnBjbWx1WjBaaGFXeGxaQ2dwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxQmhhWEpwYm1kR2JHOTNVM1JoZEdWRGFHRnVaMlZrSnl3Z2UyUmxkR0ZwYkRvZ2RHaHBjeTVEZFhKeVpXNTBVR0ZwY21sdVowWnNiM2RUZEdGMFpYMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0dCWGFXeHNJSFJ5ZVNCMGJ5QnlaUzF3WVdseUlHbHVJQ1I3ZEdocGN5NWZjMnhsWlhCQ1pXWnZjbVZTWldOdmJtNWxZM1JOYzMxdGN5QXVMaTVnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SVGRHRjBkWE1nSVQwZ1UzQnBVM1JoZEhWekxsQmhhWEpsWkVOdmJtNWxZM1JsWkNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRlJvYVhNZ2FYTWdibTl1TFdKc2IyTnJhVzVuWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqYjI1dUtTQjBhR2x6TGw5amIyNXVMa052Ym01bFkzUW9LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXlaWFJ5YVdWelUybHVZMlZNWVhOMFVHRnBjbWx1WnlBclBTQXhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3dnZEdocGN5NWZjMnhsWlhCQ1pXWnZjbVZTWldOdmJtNWxZM1JOY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduVlc1cmJtOTNiaUJ6ZEdGMFpUb2dKeUFySUhOMFlYUmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUZSb2FYTWdhWE1nWVc0Z2FXMXdiM0owWVc1MElIQnBaV05sSUc5bUlIUm9aU0J3ZFhwNmJHVXVJRWwwSjNNZ1lTQmlZV05yWjNKdmRXNWtJSFJvY21WaFpDQjBhR0YwSUhCbGNtbHZaR2xqWVd4c2VWeHVJQ0FnSUM4dklITmxibVJ6SUZCcGJtZHpJSFJ2SUhSb1pTQnpaWEoyWlhJdUlFbG1JR2wwSUdSdlpYTnVKM1FnY21WalpXbDJaU0JRYjI1bmN5d2dhWFFnWTI5dWMybGtaWEp6SUhSb1pTQmpiMjV1WldOMGFXOXVJR0Z6SUdKeWIydGxibHh1SUNBZ0lDOHZJSE52SUdsMElHUnBjMk52Ym01bFkzUnpMaUJjYmlBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdYM04wWVhKMFVHVnlhVzlrYVdOUWFXNW5LQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6ZEc5d1VHVnlhVzlrYVdOUWFXNW5LQ2s3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM0JsY21sdlpHbGpVR2x1WjFSb2NtVmhaQ0E5SUhObGRFbHVkR1Z5ZG1Gc0tDZ3BJRDArSUhSb2FYTXVYM0JsY21sdlpHbGpVR2x1WnlncExIUm9hWE11WDNCcGJtZEdjbVZ4ZFdWdVkza3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXdaWEpwYjJScFkxQnBibWNvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JmY0dWeWFXOWthV05RYVc1bktDa2dlMXh1SUNBZ0lDQWdJQ0F2THlCM2FHbHNaU0JwSjIwZ2MzUnBiR3dnWTI5dWJtVmpkR1ZrSUVGT1JDQndZV2x5WldRdUxpNWNiaUFnSUNBZ0lDQWdhV1lvZEdocGN5NWZZMjl1Ymk1RGIyNXVaV04wWldRZ0ppWWdkR2hwY3k1ZmMyVmpjbVYwY3lBaFBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWtiMUJwYm1jb0tUdGNibHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyMXZjM1JTWldObGJuUlFhVzVuVTJWdWRDQWhQU0J1ZFd4c0lDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoMGFHbHpMbDl0YjNOMFVtVmpaVzUwVUc5dVoxSmxZMlZwZG1Wa0lEMDlJRzUxYkd3Z2ZId2dkR2hwY3k1ZmJXOXpkRkpsWTJWdWRGQnZibWRTWldObGFYWmxaQzVKWkNBaFBTQjBhR2x6TGw5dGIzTjBVbVZqWlc1MFVHbHVaMU5sYm5RdVNXUXBLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYldsemMyVmtVRzl1WjNORGIzVnVkQ0FyUFNBeE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLR0JGWm5Sd2IzTWdaR2xrYmlkMElISmxjR3g1SUhSdklHMTVJRkJwYm1jdUlFMXBjM05sWkNCRGIzVnVkRG9nSkh0MGFHbHpMbDl0YVhOelpXUlFiMjVuYzBOdmRXNTBmUzhrZTNSb2FYTXVYMjFwYzNObFpGQnZibWR6Vkc5RWFYTmpiMjV1WldOMGZTNWdLVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZiV2x6YzJWa1VHOXVaM05EYjNWdWRDQThJSFJvYVhNdVgyMXBjM05sWkZCdmJtZHpWRzlFYVhOamIyNXVaV04wS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VhVzVtYnloY0lsUnllV2x1WnlCaGJtOTBhR1Z5SUhCcGJtY3VMaTVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6ZEdGeWRGQmxjbWx2WkdsalVHbHVaeWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaHBjeUJ0WldGdWN5QjBhR0YwSUhkbElHaGhkbVVnYm05MElISmxZMlZwZG1Wa0lHRWdjRzl1WnlCbWIzSWdiM1Z5SUcxdmMzUWdjbVZqWlc1MElIQnBibWN1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRmRsSUdOdmJuTnBaR1Z5SUhSb2FYTWdZMjl1Ym1WamRHbHZiaUJoY3lCaWNtOXJaVzR1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRXhsZENkeklFUnBjMk52Ym01bFkzUXVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLRndpUkdselkyOXVibVZqZEdsdVp5NHVMbHdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyOXViaTVFYVhOamIyNXVaV04wS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTjBiM0JRWlhKcGIyUnBZMUJwYm1jb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXRhWE56WldSUWIyNW5jME52ZFc1MElEMGdNRHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdmU3gwYUdsekxsOXdiMjVuVkdsdFpXOTFkQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTjBiM0JRWlhKcGIyUnBZMUJwYm1jb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1cGJtWnZLRndpUTJGdVkyVnNiR2x1WnlCd1pYSnBiMlJwWXlCd2FXNW5JR0Z6SUhkbGNtVWdaR2x6WTI5dWJtVmpkR1ZrSUc5eUlHNXZkQ0J3WVdseVpXUmNJaWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCWFpTQmpZV3hzSUhSb2FYTWdiM1Z5YzJWc2RtVnpJR0Z6SUhOdmIyNGdZWE1nZDJVbmNtVWdjbVZoWkhrZ2RHOGdkSEpoYm5OaFkzUWdkMmwwYUNCMGFHVWdVR2x1VUdGa0lHRm1kR1Z5SUdFZ1kyOXVibVZqZEdsdmJpQnBjeUJsYzNSaFlteHBjMmhsWkM1Y2JpQWdJQ0F2THlCVWFHbHpJR1oxYm1OMGFXOXVJR2x6SUdWbVptVmpkR2wyWld4NUlHTmhiR3hsWkNCaFpuUmxjaUIzWlNCeVpXTmxhWFpsWkNCMGFHVWdabWx5YzNRZ1RHOW5hVzRnVW1WemNHOXVjMlVnWm5KdmJTQjBhR1VnVUdsdVVHRmtMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQmZiMjVTWldGa2VWUnZWSEpoYm5OaFkzUW9LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1hDSlBiaUJTWldGa2VTQlVieUJVY21GdWMyRmpkQ0ZjSWlrN1hHNWNiaUFnSUNBZ0lDQWdMeThnVTI4c0lIZGxJR2hoZG1VZ2FuVnpkQ0J0WVdSbElHRWdZMjl1Ym1WamRHbHZiaXdnY0dsdVoyVmtJR0Z1WkNCc2IyZG5aV1FnYVc0Z2MzVmpZMlZ6YzJaMWJHeDVMbHh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVGRHRjBkWE1nUFNCVGNHbFRkR0YwZFhNdVVHRnBjbVZrUTI5dWJtVmpkR1ZrTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxrTjFjbkpsYm5SR2JHOTNJRDA5SUZOd2FVWnNiM2N1VkhKaGJuTmhZM1JwYjI0Z0ppWWdJWFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbExrWnBibWx6YUdWa0tWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVVtVnhkV1Z6ZEZObGJuUXBYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWRWd0TTBFZ0xTQlhaU2QyWlNCcWRYTjBJSEpsWTI5dWJtVmpkR1ZrSUdGdVpDQjNaWEpsSUdsdUlIUm9aU0J0YVdSa2JHVWdiMllnVkhndVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdUR1YwSjNNZ1oyVjBJSFJvWlNCc1lYTjBJSFJ5WVc1ellXTjBhVzl1SUhSdklHTm9aV05ySUhkb1lYUWdkMlVnYldsbmFIUWdhR0YyWlNCdGFYTnpaV1FnYjNWMElHOXVMbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTmhiR3hIWlhSTVlYTjBWSEpoYm5OaFkzUnBiMjRvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNjMlZjYmlBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJVU0MwelFWSWdMU0JYWlNCb1lXUWdibTkwSUdWMlpXNGdjMlZ1ZENCMGFHVWdjbVZ4ZFdWemRDQjVaWFF1SUV4bGRDZHpJR1J2SUhSb1lYUWdibTkzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjMlZ1WkNoMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVTWlhGMVpYTjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SVWVFWnNiM2RUZEdGMFpTNVRaVzUwS0dCVFpXNWthVzVuSUZKbGNYVmxjM1FnVG05M0xpNHVZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5amRXMWxiblF1WkdsemNHRjBZMmhGZG1WdWRDaHVaWGNnUTNWemRHOXRSWFpsYm5Rb0oxUjRSbXh2ZDFOMFlYUmxRMmhoYm1kbFpDY3NJSHRrWlhSaGFXdzZJSFJvYVhNdVEzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbGZTa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJWY2JpQWdJQ0FnSUNBZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5b1lYTlRaWFJKYm1adktTQjdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTmhiR3hUWlhSUWIzTkpibVp2S0NrN0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCc1pYUW5jeUJoYkhOdklIUmxiR3dnZEdobElHVm1kSEJ2Y3lCdmRYSWdiR0YwWlhOMElIUmhZbXhsSUdOdmJtWnBaM1Z5WVhScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppaDBhR2x6TGw5emNHbFFZWFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6Y0dsUVlYUXVVSFZ6YUZCaGVVRjBWR0ZpYkdWRGIyNW1hV2NvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRjlqWVd4c1UyVjBVRzl6U1c1bWJ5Z3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnYzJWMFVHOXpTVzVtYjFKbGNYVmxjM1FnUFNCdVpYY2dVMlYwVUc5elNXNW1iMUpsY1hWbGMzUW9kR2hwY3k1ZmNHOXpWbVZ5YzJsdmJpd2dkR2hwY3k1ZmNHOXpWbVZ1Wkc5eVNXUXNJRndpYW5OY0lpd2dVMUJKWDFaRlVsTkpUMDRzSUVSbGRtbGpaVWx1Wm04dVIyVjBRWEJ3UkdWMmFXTmxTVzVtYnlncEtUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMyVnVaQ2h6WlhSUWIzTkpibVp2VW1WeGRXVnpkQzUwYjAxbGMzTmhaMlVvS1NrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1YyaGxiaUIzWlNCa2FYTmpiMjV1WldOMExDQjNaU0J6YUc5MWJHUWdZV3h6YnlCemRHOXdJSFJvWlNCd1pYSnBiMlJwWXlCd2FXNW5MbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQmZjM1J2Y0ZCbGNtbHZaR2xqVUdsdVp5Z3BJSHRjYmlBZ0lDQWdJQ0FnYVdZb2RHaHBjeTVmY0dWeWFXOWthV05RYVc1blZHaHlaV0ZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCSlppQjNaU0IzWlhKbElHRnNjbVZoWkhrZ2MyVjBJSFZ3TENCamJHVmhiaUIxY0NCaVpXWnZjbVVnY21WemRHRnlkR2x1Wnk1Y2JpQWdJQ0FnSUNBZ0lDQWdJR05zWldGeVNXNTBaWEoyWVd3b2RHaHBjeTVmY0dWeWFXOWthV05RYVc1blZHaHlaV0ZrS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzQmxjbWx2WkdsalVHbHVaMVJvY21WaFpDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QlRaVzVrSUdFZ1VHbHVaeUIwYnlCMGFHVWdVMlZ5ZG1WeVhHNGdJQ0FnWDJSdlVHbHVaeWdwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IyWVhJZ2NHbHVaeUE5SUZCcGJtZElaV3h3WlhJdVIyVnVaWEpoZEdWUWFXNW5VbVZ4ZFdWemRDZ3BPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRiM04wVW1WalpXNTBVR2x1WjFObGJuUWdQU0J3YVc1bk8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5elpXNWtLSEJwYm1jcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5dGIzTjBVbVZqWlc1MFVHbHVaMU5sYm5SVWFXMWxJRDBnUkdGMFpTNXViM2NvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCU1pXTmxhWFpsWkNCaElGQnZibWNnWm5KdmJTQjBhR1VnYzJWeWRtVnlYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRHh3WVhKaGJTQnVZVzFsUFZ3aWJWd2lQand2Y0dGeVlXMCtYRzRnSUNBZ1gyaGhibVJzWlVsdVkyOXRhVzVuVUc5dVp5aHRLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdMeThnVjJVZ2JtVmxaQ0IwYnlCdFlXbHVkR0ZwYmlCMGFHbHpJSFJwYldVZ1pHVnNkR0VnYjNSb1pYSjNhWE5sSUhSb1pTQnpaWEoyWlhJZ2QybHNiQ0J1YjNRZ1lXTmpaWEIwSUc5MWNpQnRaWE56WVdkbGN5NWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzQnBUV1Z6YzJGblpWTjBZVzF3TGxObGNuWmxjbFJwYldWRVpXeDBZU0E5SUcwdVIyVjBVMlZ5ZG1WeVZHbHRaVVJsYkhSaEtDazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDIxdmMzUlNaV05sYm5SUWIyNW5VbVZqWldsMlpXUWdQVDBnYm5Wc2JDbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSbWx5YzNRZ2NHOXVaeUJ5WldObGFYWmxaQ0JoWm5SbGNpQmhJR052Ym01bFkzUnBiMjRzSUdGdVpDQmhablJsY2lCMGFHVWdjR0ZwY21sdVp5QndjbTlqWlhOeklHbHpJR1oxYkd4NUlHWnBibUZzYVhObFpDNWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGtOMWNuSmxiblJUZEdGMGRYTWdJVDBnVTNCcFUzUmhkSFZ6TGxWdWNHRnBjbVZrS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktGd2lSbWx5YzNRZ2NHOXVaeUJ2WmlCamIyNXVaV04wYVc5dUlHRnVaQ0JwYmlCd1lXbHlaV1FnYzNSaGRHVXVYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMjl1VW1WaFpIbFViMVJ5WVc1ellXTjBLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxYRzRnSUNBZ0lDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxtbHVabThvWENKR2FYSnpkQ0J3YjI1bklHOW1JR052Ym01bFkzUnBiMjRnWW5WMElIQmhhWEpwYm1jZ2NISnZZMlZ6Y3lCdWIzUWdabWx1WVd4cGMyVmtJSGxsZEM1Y0lpazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRiM04wVW1WalpXNTBVRzl1WjFKbFkyVnBkbVZrSUQwZ2JUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbVJsWW5WbktHQlFiMjVuVEdGMFpXNWplVG9rZTBSaGRHVXVibTkzS0NrZ0xTQjBhR2x6TGw5dGIzTjBVbVZqWlc1MFVHbHVaMU5sYm5SVWFXMWxmV0FwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUZSb1pTQnpaWEoyWlhJZ2QybHNiQ0JoYkhOdklITmxibVFnZFhNZ2NHbHVaM011SUZkbElHNWxaV1FnZEc4Z2NtVndiSGtnZDJsMGFDQmhJSEJ2Ym1jZ2MyOGdhWFFnWkc5bGMyNG5kQ0JrYVhOamIyNXVaV04wSUhWekxseHVJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBdkx5QThjR0Z5WVcwZ2JtRnRaVDFjSW0xY0lqNDhMM0JoY21GdFBseHVJQ0FnSUY5b1lXNWtiR1ZKYm1OdmJXbHVaMUJwYm1jb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ3YjI1bklEMGdVRzl1WjBobGJIQmxjaTVIWlc1bGNtRjBaVkJ2Ym1kU1pYTnpjRzl1YzJVb2JTazdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzTmxibVFvY0c5dVp5azdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdRWE5ySUhSb1pTQlFhVzVRWVdRZ2RHOGdkR1ZzYkNCMWN5QjNhR0YwSUhSb1pTQk5iM04wSUZKbFkyVnVkQ0JVY21GdWMyRmpkR2x2YmlCM1lYTmNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ1gyTmhiR3hIWlhSTVlYTjBWSEpoYm5OaFkzUnBiMjRvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHZHNkRkpsY1hWbGMzUk5jMmNnUFNCdVpYY2dSMlYwVEdGemRGUnlZVzV6WVdOMGFXOXVVbVZ4ZFdWemRDZ3BMbFJ2VFdWemMyRm5aU2dwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaUzVEWVd4c2FXNW5SMngwS0dkc2RGSmxjWFZsYzNSTmMyY3VTV1FwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6Wlc1a0tHZHNkRkpsY1hWbGMzUk5jMmNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQzh2SUZSb2FYTWdiV1YwYUc5a0lIZHBiR3dnWW1VZ1kyRnNiR1ZrSUhkb1pXNWxkbVZ5SUhkbElISmxZMlZwZG1VZ1lTQnRaWE56WVdkbElHWnliMjBnZEdobElFTnZibTVsWTNScGIyNWNiaUFnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0x5OGdQSEJoY21GdElHNWhiV1U5WENKdFpYTnpZV2RsU25OdmJsd2lQand2Y0dGeVlXMCtYRzRnSUNBZ1gyOXVVM0JwVFdWemMyRm5aVkpsWTJWcGRtVmtLRzFsYzNOaFoyVktjMjl1S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnTHk4Z1JtbHljM1FnZDJVZ2NHRnljMlVnZEdobElHbHVZMjl0YVc1bklHMWxjM05oWjJWY2JpQWdJQ0FnSUNBZ2RtRnlJRzBnUFNCTlpYTnpZV2RsTGtaeWIyMUtjMjl1S0cxbGMzTmhaMlZLYzI5dUxrMWxjM05oWjJVc0lIUm9hWE11WDNObFkzSmxkSE1wTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhjSWxKbFkyVnBkbVZrT2x3aUlDc2diUzVFWldOeWVYQjBaV1JLYzI5dUtUdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb1UzQnBVSEpsWVhWMGFDNUpjMUJ5WldGMWRHaEZkbVZ1ZENodExrVjJaVzUwVG1GdFpTa3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOd2FWQnlaV0YxZEdndVgyaGhibVJzWlZCeVpXRjFkR2hOWlhOellXZGxLRzBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdU8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1FXNWtJSFJvWlc0Z2QyVWdjM2RwZEdOb0lHOXVJSFJvWlNCbGRtVnVkQ0IwZVhCbExseHVJQ0FnSUNBZ0lDQnpkMmwwWTJnZ0tHMHVSWFpsYm5ST1lXMWxLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVWMlpXNTBjeTVMWlhsU1pYRjFaWE4wT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmhoYm1Sc1pVdGxlVkpsY1hWbGMzUW9iU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRVYyWlc1MGN5NUxaWGxEYUdWamF6cGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZMWlhsRGFHVmpheWh0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUlhabGJuUnpMbEJoYVhKU1pYTndiMjV6WlRwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlvWVc1a2JHVlFZV2x5VW1WemNHOXVjMlVvYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVWMlpXNTBjeTVFY205d1MyVjVjMEZrZG1salpUcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZFY205d1MyVjVjMEZrZG1salpTaHRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdSWFpsYm5SekxsQjFjbU5vWVhObFVtVnpjRzl1YzJVNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGdVpHeGxVSFZ5WTJoaGMyVlNaWE53YjI1elpTaHRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdSWFpsYm5SekxsSmxablZ1WkZKbGMzQnZibk5sT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmhoYm1Sc1pWSmxablZ1WkZKbGMzQnZibk5sS0cwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCRmRtVnVkSE11UTJGemFHOTFkRTl1YkhsU1pYTndiMjV6WlRwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlvWVc1a2JHVkRZWE5vYjNWMFQyNXNlVkpsYzNCdmJuTmxLRzBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JGZG1WdWRITXVUVzkwYjFCMWNtTm9ZWE5sVW1WemNHOXVjMlU2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhR0Z1Wkd4bFRXOTBiMUIxY21Ob1lYTmxVbVZ6Y0c5dWMyVW9iU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRVYyWlc1MGN5NVRhV2R1WVhSMWNtVlNaWEYxYVhKbFpEcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZUYVdkdVlYUjFjbVZTWlhGMWFYSmxaQ2h0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUlhabGJuUnpMa0YxZEdoRGIyUmxVbVZ4ZFdseVpXUTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFHRnVaR3hsUVhWMGFFTnZaR1ZTWlhGMWFYSmxaQ2h0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUlhabGJuUnpMa2RsZEV4aGMzUlVjbUZ1YzJGamRHbHZibEpsYzNCdmJuTmxPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyaGhibVJzWlVkbGRFeGhjM1JVY21GdWMyRmpkR2x2YmxKbGMzQnZibk5sS0cwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCRmRtVnVkSE11VTJWMGRHeGxVbVZ6Y0c5dWMyVTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1SVlXNWtiR1ZUWlhSMGJHVlNaWE53YjI1elpTaHRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdSWFpsYm5SekxsTmxkSFJzWlcxbGJuUkZibkYxYVhKNVVtVnpjRzl1YzJVNlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYUdGdVpHeGxVMlYwZEd4bGJXVnVkRVZ1Y1hWcGNubFNaWE53YjI1elpTaHRLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdSWFpsYm5SekxsQnBibWM2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhR0Z1Wkd4bFNXNWpiMjFwYm1kUWFXNW5LRzBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JGZG1WdWRITXVVRzl1WnpwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlvWVc1a2JHVkpibU52YldsdVoxQnZibWNvYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVWMlpXNTBjeTVMWlhsU2IyeHNVbVZ4ZFdWemREcGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5b1lXNWtiR1ZMWlhsU2IyeHNhVzVuVW1WeGRXVnpkQ2h0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUlhabGJuUnpMa05oYm1ObGJGUnlZVzV6WVdOMGFXOXVVbVZ6Y0c5dWMyVTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmFHRnVaR3hsUTJGdVkyVnNWSEpoYm5OaFkzUnBiMjVTWlhOd2IyNXpaU2h0S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTmhjMlVnUlhabGJuUnpMbE5sZEZCdmMwbHVabTlTWlhOd2IyNXpaVHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWVFpYUlFiM05KYm1adlVtVnpjRzl1YzJVb2JTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElFVjJaVzUwY3k1UVlYbEJkRlJoWW14bFIyVjBWR0ZpYkdWRGIyNW1hV2M2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDNOd2FWQmhkQ0E5UFNCdWRXeHNLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYzJWdVpDaFFZWGxCZEZSaFlteGxRMjl1Wm1sbkxrWmxZWFIxY21WRWFYTmhZbXhsVFdWemMyRm5aU2hTWlhGMVpYTjBTV1JJWld4d1pYSXVTV1FvWENKd1lYUmpiMjVtWENJcEtTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpjR2xRWVhRdVgyaGhibVJzWlVkbGRGUmhZbXhsUTI5dVptbG5LRzBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JGZG1WdWRITXVVR0Y1UVhSVVlXSnNaVWRsZEVKcGJHeEVaWFJoYVd4ek9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOd2FWQmhkQzVmYUdGdVpHeGxSMlYwUW1sc2JFUmxkR0ZwYkhOU1pYRjFaWE4wS0cwcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCRmRtVnVkSE11VUdGNVFYUlVZV0pzWlVKcGJHeFFZWGx0Wlc1ME9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNOd2FWQmhkQzVmYUdGdVpHeGxRbWxzYkZCaGVXMWxiblJCWkhacFkyVW9iU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRVYyWlc1MGN5NVFZWGxCZEZSaFlteGxSMlYwVDNCbGJsUmhZbXhsY3pwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl6Y0dsUVlYUXVYMmhoYm1Sc1pVZGxkRTl3Wlc1VVlXSnNaWE5TWlhGMVpYTjBLRzBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JGZG1WdWRITXVVR0Y1UVhSVVlXSnNaVUpwYkd4UVlYbHRaVzUwUm14dmQwVnVaR1ZrT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM053YVZCaGRDNWZhR0Z1Wkd4bFFtbHNiRkJoZVcxbGJuUkdiRzkzUlc1a1pXUW9iU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRVYyWlc1MGN5NVFjbWx1ZEdsdVoxSmxjM0J2Ym5ObE9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJoaGJtUnNaVkJ5YVc1MGFXNW5VbVZ6Y0c5dWMyVW9iU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRVYyWlc1MGN5NVVaWEp0YVc1aGJGTjBZWFIxYzFKbGMzQnZibk5sT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmhoYm1Sc1pWUmxjbTFwYm1Gc1UzUmhkSFZ6VW1WemNHOXVjMlVvYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZWE5sSUVWMlpXNTBjeTVDWVhSMFpYSjVUR1YyWld4RGFHRnVaMlZrT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmhoYm1Sc1pVSmhkSFJsY25sTVpYWmxiRU5vWVc1blpXUW9iU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRVYyWlc1MGN5NUZjbkp2Y2pwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlvWVc1a2JHVkZjbkp2Y2tWMlpXNTBLRzBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JGZG1WdWRITXVTVzUyWVd4cFpFaHRZV05UYVdkdVlYUjFjbVU2WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiRzluTG1sdVptOG9YQ0pKSUdOdmRXeGtJRzV2ZENCMlpYSnBabmtnYldWemMyRm5aU0JtY205dElFVm1kSEJ2Y3k0Z1dXOTFJRzFwWjJoMElHaGhkbVVnZEc4Z1ZXNHRjR0ZwY2lCRlpuUndiM01nWVc1a0lIUm9aVzRnY21WamIyNXVaV04wTGx3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1lFa2daRzl1SjNRZ1ZXNWtaWEp6ZEdGdVpDQkZkbVZ1ZERvZ0pIdHRMa1YyWlc1MFRtRnRaWDBzSUNSN2JTNUVZWFJoZlM0Z1VHVnlhR0Z3Y3lCSklHaGhkbVVnYm05MElHbHRjR3hsYldWdWRHVmtJR2wwSUhsbGRDNWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lGOXZibGR6UlhKeWIzSlNaV05sYVhabFpDaGxjbkp2Y2lsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1M1lYSnVLRndpVW1WalpXbDJaV1FnVjFNZ1JYSnliM0pjSWl3Z1pYSnliM0l1VFdWemMyRm5aU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYM05sYm1Rb2JXVnpjMkZuWlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnFjMjl1SUQwZ2JXVnpjMkZuWlM1VWIwcHpiMjRvZEdocGN5NWZjM0JwVFdWemMyRm5aVk4wWVcxd0tUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMk52Ym00dVEyOXVibVZqZEdWa0tWeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjdWFXNW1ieWhjSWxObGJtUnBibWM2SUZ3aUlDc2diV1Z6YzJGblpTNUVaV055ZVhCMFpXUktjMjl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTnZibTR1VTJWdVpDaHFjMjl1S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVnNjMlZjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJHOW5MbWx1Wm04b1hDSkJjMnRsWkNCMGJ5QnpaVzVrTENCaWRYUWdibTkwSUdOdmJtNWxZM1JsWkRvZ1hDSWdLeUJ0WlhOellXZGxMa1JsWTNKNWNIUmxaRXB6YjI0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gybHpVRzl6U1dSV1lXeHBaQ2h3YjNOSlpDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2doY0c5elNXUXBYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NTNZWEp1S0Z3aVVHOXpJRWxrSUdOaGJtNXZkQ0JpWlNCdWRXeHNJRzl5SUdWdGNIUjVYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0hCdmMwbGtMbXhsYm1kMGFDQStJREUyS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1ZDJGeWJpaGNJbEJ2Y3lCSlpDQnBjeUJuY21WaGRHVnlJSFJvWVc0Z01UWWdZMmhoY21GamRHVnljMXdpS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR2xtSUNnaGNHOXpTV1F1YldGMFkyZ29kR2hwY3k1ZmNtVm5aWGhKZEdWdGMwWnZjbEJ2YzBsa0tTbGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYkc5bkxuZGhjbTRvWENKUWIzTWdTV1FnWTJGdWJtOTBJR2x1WTJ4MVpHVWdjM0JsWTJsaGJDQmphR0Z5WVdOMFpYSnpYQ0lwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMmx6UldaMGNHOXpRV1JrY21WemMxWmhiR2xrS0dWbWRIQnZjMEZrWkhKbGMzTXBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVdWbWRIQnZjMEZrWkhKbGMzTXBYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NTNZWEp1S0Z3aVZHaGxJRVZtZEhCdmN5QmhaR1J5WlhOeklHTmhibTV2ZENCaVpTQnVkV3hzSUc5eUlHVnRjSFI1WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMkZ1YVhScGMyVmtSV1owY0c5elFXUmtjbVZ6Y3lBOUlHVm1kSEJ2YzBGa1pISmxjM011Y21Wd2JHRmpaU2d2WG5kYmMxMC9jenBjWEM5Y1hDOHZMQ0JjSWx3aUtUdGNibHh1SUNBZ0lDQWdJQ0F2THlCVWFHVWdaV1owY0c5elFXUmtjbVZ6Y3lCdFlYa2dZbVVnWVc0Z1NWQWdZV1JrY21WemN5QnZjaUJwWmlCaGRYUnZRV1JrY21WemMxSmxjMjlzZFhScGIyNUZibUZpYkdWa0lHbHpJSFJ5ZFdVc0lHRWdSbEZFVGx4dUlDQWdJQ0FnSUNCcFppQW9YRzRnSUNBZ0lDQWdJQ0FnSUNBb0lYUm9hWE11WDJGMWRHOUJaR1J5WlhOelVtVnpiMngxZEdsdmJrVnVZV0pzWldRZ0ppWWdJWE5oYm1sMGFYTmxaRVZtZEhCdmMwRmtaSEpsYzNNdWJXRjBZMmdvZEdocGN5NWZjbVZuWlhoSmRHVnRjMFp2Y2tWbWRIQnZjMEZrWkhKbGMzTXBLU0I4ZkZ4dUlDQWdJQ0FnSUNBZ0lDQWdLSFJvYVhNdVgyRjFkRzlCWkdSeVpYTnpVbVZ6YjJ4MWRHbHZia1Z1WVdKc1pXUWdKaVlnSVhOaGJtbDBhWE5sWkVWbWRIQnZjMEZrWkhKbGMzTXViV0YwWTJnb2RHaHBjeTVmY21WblpYaEpkR1Z0YzBadmNrWnhaRzVGWm5Sd2IzTkJaR1J5WlhOektTbGNiaUFnSUNBZ0lDQWdLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VkMkZ5YmloY0lsUm9aU0JGWm5Sd2IzTWdZV1JrY21WemN5QnBjeUJ1YjNRZ2FXNGdkR2hsSUhKcFoyaDBJR1p2Y20xaGRGd2lLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFaGhjMU5sY21saGJFNTFiV0psY2tOb1lXNW5aV1FvZFhCa1lYUmxaRk5sY21saGJFNTFiV0psY2lsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXpaWEpwWVd4T2RXMWlaWElnSVQwZ2RYQmtZWFJsWkZObGNtbGhiRTUxYldKbGNqdGNiaUFnSUNCOVhHNWNiaUFnSUNCSVlYTkZablJ3YjNOQlpHUnlaWE56UTJoaGJtZGxaQ2gxY0dSaGRHVmtSV1owY0c5elFXUmtjbVZ6Y3lsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOWxablJ3YjNOQlpHUnlaWE56SUNFOUlIVndaR0YwWldSRlpuUndiM05CWkdSeVpYTnpPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHRnplVzVqSUY5aGRYUnZVbVZ6YjJ4MlpVVm1kSEJ2YzBGa1pISmxjM01vS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5aGRYUnZRV1JrY21WemMxSmxjMjlzZFhScGIyNUZibUZpYkdWa0tWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lGeHVJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYM05sY21saGJFNTFiV0psY2lCOGZDQWhkR2hwY3k1ZlpHVjJhV05sUVhCcFMyVjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VkMkZ5YmloY0lrMXBjM05wYm1jZ2MyVnlhV0ZzVG5WdFltVnlJR0Z1WkM5dmNpQmtaWFpwWTJWQmNHbExaWGt1SUU1bFpXUWdkRzhnYzJWMElIUm9aVzBnWW1WbWIzSmxJR1p2Y2lCQmRYUnZJRUZrWkhKbGMzTWdkRzhnZDI5eWF5NWNJaWs3SUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJR2x6VTJWamRYSmxRMjl1Ym1WamRHbHZiaUE5SUhSb2FYTXVYMmx6VTJWamRYSmxRMjl1Ym1WamRHbHZiaWdwTzF4dVhHNGdJQ0FnSUNBZ0lIWmhjaUJ6WlhKMmFXTmxJRDBnYm1WM0lFUmxkbWxqWlVGa1pISmxjM05UWlhKMmFXTmxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RISjVYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJoWkdSeVpYTnpVbVZ6Y0c5dWMyVWdJQ0FnSUQwZ1lYZGhhWFFnYzJWeWRtbGpaUzVTWlhSeWFXVjJaVk5sY25acFkyVW9kR2hwY3k1ZmMyVnlhV0ZzVG5WdFltVnlMQ0IwYUdsekxsOWtaWFpwWTJWQmNHbExaWGtzSUhSb2FYTXVYMkZqY1hWcGNtVnlRMjlrWlN3Z2FYTlRaV04xY21WRGIyNXVaV04wYVc5dUxDQjBhR2x6TGw5cGJsUmxjM1JOYjJSbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQmhaR1J5WlhOelVtVnpjRzl1YzJWS2MyOXVJRDBnWVhkaGFYUWdZV1JrY21WemMxSmxjM0J2Ym5ObExtcHpiMjRvS1R0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFJHVjJhV05sVTNSaGRIVnpJRDBnVDJKcVpXTjBMbUZ6YzJsbmJpaHVaWGNnUkdWMmFXTmxRV1JrY21WemMxTjBZWFIxY3locGMxTmxZM1Z5WlVOdmJtNWxZM1JwYjI0cExDQmNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGNEb2dZV1JrY21WemMxSmxjM0J2Ym5ObFNuTnZiaTVwY0N4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNXUnVPaUJoWkdSeVpYTnpVbVZ6Y0c5dWMyVktjMjl1TG1aeFpHNHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSR1YyYVdObFFXUmtjbVZ6YzFKbGMzQnZibk5sUTI5a1pUb2dZV1JrY21WemMxSmxjM0J2Ym5ObExuTjBZWFIxY3l4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCU1pYTndiMjV6WlZOMFlYUjFjMFJsYzJOeWFYQjBhVzl1T2lCaFpHUnlaWE56VW1WemNHOXVjMlV1YzNSaGRIVnpWR1Y0ZEN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCU1pYTndiMjV6WlUxbGMzTmhaMlU2SUdGa1pISmxjM05TWlhOd2IyNXpaUzV6ZEdGMGRYTlVaWGgwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUV4aGMzUlZjR1JoZEdWa09pQmhaR1J5WlhOelVtVnpjRzl1YzJWS2MyOXVMbXhoYzNSZmRYQmtZWFJsWkZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1kyRjBZMmdnS0dWeWNpa2dYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRVJsZG1salpWTjBZWFIxY3lBOUlIUm9hWE11UTNWeWNtVnVkRVJsZG1salpWTjBZWFIxY3lCOGZDQnVaWGNnUkdWMmFXTmxRV1JrY21WemMxTjBZWFIxY3locGMxTmxZM1Z5WlVOdmJtNWxZM1JwYjI0cE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NURkWEp5Wlc1MFJHVjJhV05sVTNSaGRIVnpMa1JsZG1salpVRmtaSEpsYzNOU1pYTndiMjV6WlVOdlpHVWdQU0JFWlhacFkyVkJaR1J5WlhOelVtVnpjRzl1YzJWRGIyUmxMa1JGVmtsRFJWOVRSVkpXU1VORlgwVlNVazlTTzF4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1RGRYSnlaVzUwUkdWMmFXTmxVM1JoZEhWekxsSmxjM0J2Ym5ObFUzUmhkSFZ6UkdWelkzSnBjSFJwYjI0Z1BTQmxjbkk3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGtOMWNuSmxiblJFWlhacFkyVlRkR0YwZFhNdVVtVnpjRzl1YzJWTlpYTnpZV2RsSUQwZ1pYSnlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VkMkZ5YmlobGNuSXViV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25SR1YyYVdObFFXUmtjbVZ6YzBOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGFHbHpMa04xY25KbGJuUkVaWFpwWTJWVGRHRjBkWE45S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdJRnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR0ZrWkhKbGMzTlNaWE53YjI1elpTNXpkR0YwZFhNZ1BUMGdTSFIwY0ZOMFlYUjFjME52WkdVdVRtOTBSbTkxYm1RcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVRM1Z5Y21WdWRFUmxkbWxqWlZOMFlYUjFjeTVFWlhacFkyVkJaR1J5WlhOelVtVnpjRzl1YzJWRGIyUmxJRDBnUkdWMmFXTmxRV1JrY21WemMxSmxjM0J2Ym5ObFEyOWtaUzVKVGxaQlRFbEVYMU5GVWtsQlRGOU9WVTFDUlZJN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZEVaWFpwWTJWQlpHUnlaWE56UTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVRM1Z5Y21WdWRFUmxkbWxqWlZOMFlYUjFjMzBwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUtDRmhaR1J5WlhOelVtVnpjRzl1YzJVdWIyc2dmSHdnSVdGa1pISmxjM05TWlhOd2IyNXpaVXB6YjI0Z2ZId2dJWFJvYVhNdVEzVnljbVZ1ZEVSbGRtbGpaVk4wWVhSMWN5NUJaR1J5WlhOektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMa04xY25KbGJuUkVaWFpwWTJWVGRHRjBkWE11UkdWMmFXTmxRV1JrY21WemMxSmxjM0J2Ym5ObFEyOWtaU0E5SUVSbGRtbGpaVUZrWkhKbGMzTlNaWE53YjI1elpVTnZaR1V1UkVWV1NVTkZYMU5GVWxaSlEwVmZSVkpTVDFJN1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUdSdlkzVnRaVzUwTG1ScGMzQmhkR05vUlhabGJuUW9ibVYzSUVOMWMzUnZiVVYyWlc1MEtDZEVaWFpwWTJWQlpHUnlaWE56UTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVRM1Z5Y21WdWRFUmxkbWxqWlZOMFlYUjFjMzBwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1SVlYTkZablJ3YjNOQlpHUnlaWE56UTJoaGJtZGxaQ2gwYUdsekxrTjFjbkpsYm5SRVpYWnBZMlZUZEdGMGRYTXVRV1JrY21WemN5a3BYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11UTNWeWNtVnVkRVJsZG1salpWTjBZWFIxY3k1RVpYWnBZMlZCWkdSeVpYTnpVbVZ6Y0c5dWMyVkRiMlJsSUQwZ1JHVjJhV05sUVdSa2NtVnpjMUpsYzNCdmJuTmxRMjlrWlM1QlJFUlNSVk5UWDA1UFZGOURTRUZPUjBWRU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCa2IyTjFiV1Z1ZEM1a2FYTndZWFJqYUVWMlpXNTBLRzVsZHlCRGRYTjBiMjFGZG1WdWRDZ25SR1YyYVdObFFXUmtjbVZ6YzBOb1lXNW5aV1FuTENCN1pHVjBZV2xzT2lCMGFHbHpMa04xY25KbGJuUkVaWFpwWTJWVGRHRjBkWE45S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBdkx5QjFjR1JoZEdVZ1pHVjJhV05sSUdGdVpDQmpiMjV1WldOMGFXOXVJR0ZrWkhKbGMzTmNiaUFnSUNBZ0lDQWdkbUZ5SUhCeWIzUnZZMjlzSUQwZ2FYTlRaV04xY21WRGIyNXVaV04wYVc5dUlEOGdYQ0ozYzNOY0lpQTZJRndpZDNOY0lqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpXWjBjRzl6UVdSa2NtVnpjeUE5SUhCeWIzUnZZMjlzSUNzZ1hDSTZMeTljSWlBcklIUm9hWE11UTNWeWNtVnVkRVJsZG1salpWTjBZWFIxY3k1QlpHUnlaWE56TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYjI1dUxrRmtaSEpsYzNNZ1BTQjBhR2x6TGw5bFpuUndiM05CWkdSeVpYTnpPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrTjFjbkpsYm5SRVpYWnBZMlZUZEdGMGRYTXVSR1YyYVdObFFXUmtjbVZ6YzFKbGMzQnZibk5sUTI5a1pTQTlJRVJsZG1salpVRmtaSEpsYzNOU1pYTndiMjV6WlVOdlpHVXVVMVZEUTBWVFV6dGNibHh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnblJHVjJhV05sUVdSa2NtVnpjME5vWVc1blpXUW5MQ0I3WkdWMFlXbHNPaUIwYUdsekxrTjFjbkpsYm5SRVpYWnBZMlZUZEdGMGRYTjlLU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMmx6VlhOcGJtZElkSFJ3Y3lncElGeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNkb2RIUndjem9uSUQwOUlHUnZZM1Z0Wlc1MExteHZZMkYwYVc5dUxuQnliM1J2WTI5c0lEOGdkSEoxWlNBNklHWmhiSE5sTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUdSbGRHVnliV2x1WlNCM2FHVjBhR1Z5SUhSdklIVnpaU0IzYzNNZ2IzSWdibTkwWEc0Z0lDQWdYMmx6VTJWamRYSmxRMjl1Ym1WamRHbHZiaWdwSUZ4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybHpWWE5wYm1kSWRIUndjeWdwSUh4OElIUm9hWE11WDJadmNtTmxVMlZqZFhKbFYyVmlVMjlqYTJWMGN6dGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0I3VTNCcExDQlRVRWxmVmtWU1UwbFBUbjA3WEc0aUxDSnBiWEJ2Y25RZ2UxTjFZMk5sYzNOVGRHRjBaWDBnWm5KdmJTQW5MaTlOWlhOellXZGxjeWM3WEc1Y2JpOHZJRHh6ZFcxdFlYSjVQbHh1THk4Z1VtVndjbVZ6Wlc1MGN5QjBhR1VnTXlCUVlXbHlhVzVuSUhOMFlYUjFjMlZ6SUhSb1lYUWdkR2hsSUZOd2FTQnBibk4wWVc1NFkyVWdZMkZ1SUdKbElHbHVMbHh1THk4Z1BDOXpkVzF0WVhKNVBseHVaWGh3YjNKMElHTnZibk4wSUZOd2FWTjBZWFIxY3lBOUlGeHVlMXh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRkJoYVhKbFpDQmhibVFnUTI5dWJtVmpkR1ZrWEc0Z0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJRkJoYVhKbFpFTnZibTVsWTNSbFpEb2dKMUJoYVhKbFpFTnZibTVsWTNSbFpDY3NYRzRnSUNBZ1hHNGdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnTHk4Z1VHRnBjbVZrSUdKMWRDQjBjbmxwYm1jZ2RHOGdaWE4wWVdKc2FYTm9JR0VnWTI5dWJtVmpkR2x2YmlCY2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnVUdGcGNtVmtRMjl1Ym1WamRHbHVaem9nSjFCaGFYSmxaRU52Ym01bFkzUnBibWNuTEZ4dUlDQWdJRnh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRlZ1Y0dGcGNtVmtYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lGVnVjR0ZwY21Wa09pQW5WVzV3WVdseVpXUW5YRzU5TzF4dVhHNHZMeUE4YzNWdGJXRnllVDVjYmk4dklGUm9aU0JUY0drZ2FXNXpkR0Z1WTJVZ1kyRnVJR0psSUdsdUlHOXVaU0J2WmlCMGFHVnpaU0JtYkc5M2N5QmhkQ0JoYm5rZ2NHOXBiblFnYVc0Z2RHbHRaUzVjYmk4dklEd3ZjM1Z0YldGeWVUNWNibVY0Y0c5eWRDQmpiMjV6ZENCVGNHbEdiRzkzSUQwZ1hHNTdYRzRnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0x5OGdRM1Z5Y21WdWRHeDVJR2R2YVc1bklIUm9jbTkxWjJnZ2RHaGxJRkJoYVhKcGJtY2dVSEp2WTJWemN5QkdiRzkzTGx4dUlDQWdJQzh2SUVoaGNIQmxibk1nWkhWeWFXNW5JSFJvWlNCVmJuQmhhWEpsWkNCVGNHbFRkR0YwZFhNdVhHNGdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUZCaGFYSnBibWM2SUNkUVlXbHlhVzVuSnl4Y2JpQWdJQ0JjYmlBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQXZMeUJEZFhKeVpXNTBiSGtnWjI5cGJtY2dkR2h5YjNWbmFDQjBhR1VnZEhKaGJuTmhZM1JwYjI0Z1VISnZZMlZ6Y3lCR2JHOTNMbHh1SUNBZ0lDOHZJRU5oYm01dmRDQm9ZWEJ3Wlc0Z2FXNGdkR2hsSUZWdWNHRnBjbVZrSUZOd2FWTjBZWFIxY3k1Y2JpQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnVkhKaGJuTmhZM1JwYjI0NklDZFVjbUZ1YzJGamRHbHZiaWNzWEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCT2IzUWdhVzRnWVc1NUlHOW1JSFJvWlNCdmRHaGxjaUJ6ZEdGMFpYTXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lFbGtiR1U2SUNkSlpHeGxKMXh1ZlR0Y2JseHVMeThnUEhOMWJXMWhjbmsrWEc0dkx5QlNaWEJ5WlhObGJuUnpJSFJvWlNCUVlXbHlhVzVuSUVac2IzY2dVM1JoZEdVZ1pIVnlhVzVuSUhSb1pTQndZV2x5YVc1bklIQnliMk5sYzNNZ1hHNHZMeUE4TDNOMWJXMWhjbmsrWEc1bGVIQnZjblFnWTJ4aGMzTWdVR0ZwY21sdVowWnNiM2RUZEdGMFpWeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLSE4wWVhSbEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNBdkx5QlRiMjFsSUhSbGVIUWdkR2hoZENCallXNGdZbVVnWkdsemNHeGhlV1ZrSUdsdUlIUm9aU0JRWVdseWFXNW5JRkJ5YjJObGMzTWdVMk55WldWdVhHNGdJQ0FnSUNBZ0lDOHZJSFJvWVhRZ2FXNWthV05oZEdWeklIZG9ZWFFnZEdobElIQmhhWEpwYm1jZ2NISnZZMlZ6Y3lCcGN5QjFjQ0IwYnk1Y2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0IwYUdsekxrMWxjM05oWjJVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0F2THlCWGFHVnVJSFJ5ZFdVc0lHbDBJRzFsWVc1eklIUm9ZWFFnZEdobElFVkdWRkJQVXlCcGN5QnphRzlwYm1jZ2RHaGxJR052Ym1acGNtMWhkR2x2YmlCamIyUmxMRnh1SUNBZ0lDQWdJQ0F2THlCaGJtUWdlVzkxY2lCMWMyVnlJRzVsWldSeklIUnZJSEJ5WlhOeklGbEZVeUJ2Y2lCT1R5QnZiaUIwYUdVZ1JVWlVVRTlUTGx4dUlDQWdJQ0FnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVFYZGhhWFJwYm1kRGFHVmphMFp5YjIxRlpuUndiM01nUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lDOHZJRmRvWlc0Z2RISjFaU3dnZVc5MUlHNWxaV1FnZEc4Z1pHbHpjR3hoZVNCMGFHVWdXVVZUTDA1UElHSjFkSFJ2Ym5NZ2IyNGdlVzkxSUhCaGFYSnBibWNnYzJOeVpXVnVYRzRnSUNBZ0lDQWdJQzh2SUdadmNpQjViM1Z5SUhWelpYSWdkRzhnWTI5dVptbHliU0IwYUdVZ1kyOWtaUzVjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQjBhR2x6TGtGM1lXbDBhVzVuUTJobFkydEdjbTl0VUc5eklEMGdiblZzYkR0Y2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0F2THlCVWFHbHpJR2x6SUhSb1pTQmpiMjVtYVhKdFlYUnBiMjRnWTI5a1pTQm1iM0lnZEdobElIQmhhWEpwYm1jZ2NISnZZMlZ6Y3k1Y2JpQWdJQ0FnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0IwYUdsekxrTnZibVpwY20xaGRHbHZia052WkdVZ1BTQnVkV3hzTzF4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUVsdVpHbGpZWFJsY3lCM2FHVjBhR1Z5SUhSb1pTQlFZV2x5YVc1bklFWnNiM2NnYUdGeklHWnBibWx6YUdWa0lHbDBjeUJxYjJJdVhHNGdJQ0FnSUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnZEdocGN5NUdhVzVwYzJobFpDQTlJRzUxYkd3N1hHNGdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnTHk4Z1NXNWthV05oZEdWeklIZG9aWFJvWlhJZ2NHRnBjbWx1WnlCM1lYTWdjM1ZqWTJWemMyWjFiQ0J2Y2lCdWIzUXVYRzRnSUNBZ0lDQWdJQzh2SUR3dmMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVUZFdOalpYTnpablZzSUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnSUNCcFppaHpkR0YwWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnVDJKcVpXTjBMbUZ6YzJsbmJpaDBhR2x6TENCemRHRjBaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0I5SUNBZ1hHNTlYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQlVjbUZ1YzJGamRHbHZibFI1Y0dVZ1BTQmNibnRjYmlBZ0lDQlFkWEpqYUdGelpUb2dKMUIxY21Ob1lYTmxKeXhjYmlBZ0lDQlNaV1oxYm1RNklDZFNaV1oxYm1RbkxGeHVJQ0FnSUVOaGMyaHZkWFJQYm14NU9pQW5RMkZ6YUc5MWRFOXViSGtuTEZ4dUlDQWdJRTFQVkU4NklDZE5UMVJQSnl4Y2JpQWdJQ0JUWlhSMGJHVTZJQ2RUWlhSMGJHVW5MRnh1SUNBZ0lGTmxkSFJzWlcxbGJuUkZibkYxYVhKNU9pQW5VMlYwZEd4bGJXVnVkRVZ1Y1hWcGNua25MRnh1SUNBZ0lFZGxkRXhoYzNSVWNtRnVjMkZqZEdsdmJqb2dKMGRsZEV4aGMzUlVjbUZ1YzJGamRHbHZiaWNzWEc0Z0lDQWdVSEpsWVhWMGFEb2dKMUJ5WldGMWRHZ25MRnh1SUNBZ0lFRmpZMjkxYm5SV1pYSnBabms2SUNkQlkyTnZkVzUwVm1WeWFXWjVKMXh1ZlR0Y2JseHVMeThnUEhOMWJXMWhjbmsrWEc0dkx5QlZjMlZrSUdGeklHRWdjbVYwZFhKdUlHbHVJSFJvWlNCSmJtbDBhV0YwWlZSNElHMWxkR2h2WkhNZ2RHOGdjMmxuYm1sbWVTQjNhR1YwYUdWeUlGeHVMeThnZEdobElIUnlZVzV6WVdOMGFXOXVJSGRoY3lCcGJtbDBhV0YwWldRZ2IzSWdibTkwTENCaGJtUWdZU0J5WldGemIyNGdkRzhnWjI4Z2QybDBhQ0JwZEM1Y2JpOHZJRHd2YzNWdGJXRnllVDVjYm1WNGNHOXlkQ0JqYkdGemN5QkpibWwwYVdGMFpWUjRVbVZ6ZFd4MFhHNTdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9hVzVwZEdsaGRHVmtMQ0J0WlhOellXZGxLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklGZG9aWFJvWlhJZ2RHaGxJSFI0SUhkaGN5QnBibWwwYVdGMFpXUXVYRzRnSUNBZ0lDQWdJQzh2SUZkb1pXNGdkSEoxWlN3Z2VXOTFJR05oYmlCbGVIQmxZM1FnZFhCa1lYUmxaQ0IwYnlCNWIzVnlJSEpsWjJsemRHVnlaV1FnWTJGc2JHSmhZMnN1WEc0Z0lDQWdJQ0FnSUM4dklGZG9aVzRnWm1Gc2MyVXNJSGx2ZFNCallXNGdjbVYwY25rZ1kyRnNiR2x1WnlCMGFHVWdTVzVwZEdsaGRHVllJRzFsZEdodlpDNWNiaUFnSUNBZ0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNCMGFHbHpMa2x1YVhScFlYUmxaQ0E5SUdsdWFYUnBZWFJsWkR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnTHk4Z1ZHVjRkQ0IwYUdGMElHZHBkbVZ6SUhKbFlYTnZiaUJtYjNJZ2RHaGxJRWx1YVhScFlYUmxaQ0JtYkdGbkxDQmxjM0JsWTJsaGJHeDVJR2x1SUdOaGMyVWdiMllnWm1Gc2MyVXVJRnh1SUNBZ0lDQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lIUm9hWE11VFdWemMyRm5aU0E5SUcxbGMzTmhaMlU3WEc0Z0lDQWdmVnh1ZlZ4dVhHNHZMeUE4YzNWdGJXRnllVDVjYmk4dklGVnpaV1FnWVhNZ1lTQnlaWFIxY200Z2FXNGdZMkZzYkhNZ2JXbGtJSFJ5WVc1ellXTjBhVzl1SUhSdklHeGxkQ0I1YjNVZ2EyNXZkMXh1THk4Z2QyaGxkR2hsY2lCMGFHVWdZMkZzYkNCM1lYTWdkbUZzYVdRZ2IzSWdibTkwTGx4dUx5OGdWR2hsYzJVZ1lYUjBjbWxpZFhSbGN5QjNiM0pySUdadmNpQkRUMDBnYVc1MFpYSnZjQzVjYmk4dklEd3ZjM1Z0YldGeWVUNWNibVY0Y0c5eWRDQmpiR0Z6Y3lCTmFXUlVlRkpsYzNWc2RGeHVlMXh1SUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDOHZJRlJvYVhNZ1pHVm1ZWFZzZENCemRIVmpkSFZ5WlNCM2IzSnJjeUJtYjNJZ1EwOU5JR2x1ZEdWeWIzQXVYRzRnSUNBZ0x5OGdQQzl6ZFcxdFlYSjVQbHh1SUNBZ0lHTnZibk4wY25WamRHOXlLSFpoYkdsa0xDQnRaWE56WVdkbEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVXWVd4cFpDQTlJSFpoYkdsa08xeHVJQ0FnSUNBZ0lDQjBhR2x6TGsxbGMzTmhaMlVnUFNCdFpYTnpZV2RsTzF4dUlDQWdJSDFjYm4wZ0lDQWdYRzVjYmk4dklEeHpkVzF0WVhKNVBseHVMeThnVW1Wd2NtVnpaVzUwY3lCMGFHVWdVM1JoZEdVZ1pIVnlhVzVuSUdFZ1ZISmhibk5oWTNScGIyNUdiRzkzWEc0dkx5QThMM04xYlcxaGNuaytYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZISmhibk5oWTNScGIyNUdiRzkzVTNSaGRHVmNibnRjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjaWh3YjNOU1pXWkpaQ3dnZEhsd1pTd2dZVzF2ZFc1MFEyVnVkSE1zSUcxbGMzTmhaMlVzSUcxelp5bGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0F2THlBZ1ZHaGxJR2xrSUdkcGRtVnVJSFJ2SUhSb2FYTWdkSEpoYm5OaFkzUnBiMjVjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQjBhR2x6TGxCdmMxSmxaa2xrSUNBZ1BTQndiM05TWldaSlpEdGNiaUFnSUNBZ0lDQWdkR2hwY3k1SlpDQWdJQ0FnSUNBZ0lEMGdjRzl6VW1WbVNXUTdJQzh2SUc5aWMyOXNaWFJsTENCaWRYUWdiR1YwSjNNZ2JXRnBiblJoYVc0Z2FYUWdabTl5SUc1dmR5d2dkRzhnYldWaGJpQnpZVzFsSUdGeklGQnZjMUpsWmtsa0xseHVYRzRnSUNBZ0lDQWdJQzh2SUR4emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNBdkx5QlFkWEpqYUdGelpTOVNaV1oxYm1RdlUyVjBkR3hsTHk0dUxseHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVWSGx3WlNBOUlIUjVjR1U3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUVFZ2RHVjRkQ0J0WlhOellXZGxJSFJ2SUdScGMzQnNZWGtnYjI0Z2VXOTFjaUJVY21GdWMyRmpkR2x2YmlCR2JHOTNJRk5qY21WbGJseHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVSR2x6Y0d4aGVVMWxjM05oWjJVZ1BTQnRjMmM3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUVGdGIzVnVkQ0JwYmlCalpXNTBjeUJtYjNJZ2RHaHBjeUIwY21GdWMyRmpkR2x2Ymx4dUlDQWdJQ0FnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVFXMXZkVzUwUTJWdWRITWdQU0JoYlc5MWJuUkRaVzUwY3p0Y2JseHVJQ0FnSUNBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnTHk4Z1YyaDBhR1Z5SUhSb1pTQnlaWEYxWlhOMElHaGhjeUJpWldWdUlITmxiblFnZEc4Z2RHaGxJRVZHVkZCUFV5QjVaWFFnYjNJZ2JtOTBMbHh1SUNBZ0lDQWdJQ0F2THlCSmJpQjBhR1VnVUdGcGNtVmtRMjl1Ym1WamRHbHVaeUJ6ZEdGMFpTd2dkR2hsSUhSeVlXNXpZV04wYVc5dUlHbHpJR2x1YVhScFlYUmxaRnh1SUNBZ0lDQWdJQ0F2THlCaWRYUWdkR2hsSUhKbGNYVmxjM1FnYVhNZ2IyNXNlU0J6Wlc1MElHOXVZMlVnZEdobElHTnZibTVsWTNScGIyNGdhWE1nY21WamIzWmxjbVZrTGx4dUlDQWdJQ0FnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVVtVnhkV1Z6ZEZObGJuUWdQU0JtWVd4elpUdGNibHh1SUNBZ0lDQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OGdWR2hsSUhScGJXVWdkMmhsYmlCMGFHVWdjbVZ4ZFdWemRDQjNZWE1nYzJWdWRDQjBieUIwYUdVZ1JVWlVVRTlUTGx4dUlDQWdJQ0FnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVVtVnhkV1Z6ZEZScGJXVWdQU0J1ZFd4c08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnTHk4Z1ZHaGxJSFJwYldVZ2QyaGxiaUIzWlNCc1lYTjBJR0Z6YTJWa0lHWnZjaUJoYmlCMWNHUmhkR1VzSUdsdVkyeDFaR2x1WnlCMGFHVWdiM0pwWjJsdVlXd2djbVZ4ZFdWemRDQmhkQ0JtYVhKemRGeHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVUR0Z6ZEZOMFlYUmxVbVZ4ZFdWemRGUnBiV1VnUFNCdWRXeHNPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lDOHZJRlJvWlNCcFpDQnZaaUIwYUdVZ2JHRnpkQ0JuYkhRZ2NtVnhkV1Z6ZENCdFpYTnpZV2RsSUhSb1lYUWdkMkZ6SUhObGJuUXVJSFZ6WldRZ2RHOGdiV0YwWTJnZ2QybDBhQ0IwYUdVZ2NtVnpjRzl1YzJVdVhHNGdJQ0FnSUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnZEdocGN5NU1ZWE4wUjJ4MFVtVnhkV1Z6ZEVsa0lEMGdiblZzYkR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnTHk4Z1YyaGxkR2hsY2lCM1pTZHlaU0JqZFhKeVpXNTBiSGtnWVhSMFpXMXdkR2x1WnlCMGJ5QkRZVzVqWld3Z2RHaGxJSFJ5WVc1ellXTjBhVzl1TGx4dUlDQWdJQ0FnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVFYUjBaVzF3ZEdsdVoxUnZRMkZ1WTJWc0lEMGdiblZzYkR0Y2JpQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lDOHZJRmRvWlc0Z2RHaHBjeUJtYkdGbklHbHpJRzl1TENCNWIzVWdibVZsWkNCMGJ5QmthWE53YkdGNUlIUm9aU0JrYVdkdVlYUjFjbVVnWVdOalpYQjBMMlJsWTJ4cGJtVWdZblYwZEc5dWN5QnBiaUI1YjNWeUlGeHVJQ0FnSUNBZ0lDQXZMeUIwY21GdWMyRmpkR2x2YmlCbWJHOTNJSE5qY21WbGJpNWNiaUFnSUNBZ0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNCMGFHbHpMa0YzWVdsMGFXNW5VMmxuYm1GMGRYSmxRMmhsWTJzZ1BTQm1ZV3h6WlR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnTHk4Z1YyaGxiaUIwYUdseklHWnNZV2NnYVhNZ2IyNHNJSGx2ZFNCdVpXVmtJSFJ2SUhOb2IzY2dlVzkxY2lCMWMyVnlJSFJvWlNCd2FHOXVaU0J1ZFcxaVpYSWdkRzhnWTJGc2JDQjBieUJuWlhRZ2RHaGxJR0YxZEdodmNtbHpZWFJwYjI0Z1kyOWtaUzVjYmlBZ0lDQWdJQ0FnTHk4Z1ZHaGxiaUI1YjNVZ2JtVmxaQ0IwYnlCd2NtOTJhV1JsSUhsdmRYSWdkWE5sY2lCdFpXRnVjeUIwYnlCbGJuUmxjaUIwYUdGMElHZHBkbVZ1SUdOdlpHVWdZVzVrSUhOMVltMXBkQ0JwZENCMmFXRWdVM1ZpYldsMFFYVjBhRU52WkdVb0tTNWNiaUFnSUNBZ0lDQWdMeThnUEM5emRXMXRZWEo1UGx4dUlDQWdJQ0FnSUNCMGFHbHpMa0YzWVdsMGFXNW5VR2h2Ym1WR2IzSkJkWFJvSUQwZ2JuVnNiRHRjYmx4dUlDQWdJQ0FnSUNBdkx5QThjM1Z0YldGeWVUNWNiaUFnSUNBZ0lDQWdMeThnVjJobGRHaGxjaUIwYUdseklIUnlZVzV6WVdOMGFXOXVJR1pzYjNjZ2FYTWdiM1psY2lCdmNpQnViM1F1WEc0Z0lDQWdJQ0FnSUM4dklEd3ZjM1Z0YldGeWVUNWNiaUFnSUNBZ0lDQWdkR2hwY3k1R2FXNXBjMmhsWkNBOUlHWmhiSE5sTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0F2THlCVWFHVWdjM1ZqWTJWemN5QnpkR0YwWlNCdlppQjBhR2x6SUhSeVlXNXpZV04wYVc5dUxpQlRkR0Z5ZEhNZ2IyWm1JR0Z6SUZWdWEyNXZkMjR1WEc0Z0lDQWdJQ0FnSUM4dklGZG9aVzRnWm1sdWFYTm9aV1FzSUdOaGJpQmlaU0JUZFdOalpYTnpMQ0JHWVdsc1pXUWdUMUlnVlc1cmJtOTNiaTVjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQjBhR2x6TGxOMVkyTmxjM01nUFNCVGRXTmpaWE56VTNSaGRHVXVWVzVyYm05M2JqdGNibHh1SUNBZ0lDQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0FnSUNBZ0x5OGdWR2hsSUhKbGMzQnZibk5sSUdGMElIUm9aU0JsYm1RZ2IyWWdkR2hsSUhSeVlXNXpZV04wYVc5dUxpQmNiaUFnSUNBZ0lDQWdMeThnVFdsbmFIUWdibTkwSUdKbElIQnlaWE5sYm5RZ2FXNGdZV3hzSUdWa1oyVWdZMkZ6WlhNdVhHNGdJQ0FnSUNBZ0lDOHZJRmx2ZFNCallXNGdkR2hsYmlCMGRYSnVJSFJvYVhNZ1RXVnpjMkZuWlNCcGJuUnZJSFJvWlNCaGNIQnliM0J5YVdGMFpTQnpkSEoxWTNSMWNtVXNYRzRnSUNBZ0lDQWdJQzh2SUhOMVkyZ2dZWE1nVUhWeVkyaGhjMlZTWlhOd2IyNXpaU3dnVW1WbWRXNWtVbVZ6Y0c5dWMyVXNJR1YwWTF4dUlDQWdJQ0FnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVVtVnpjRzl1YzJVZ1BTQnVkV3hzTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJRHh6ZFcxdFlYSjVQbHh1SUNBZ0lDQWdJQ0F2THlCVWFHVWdiV1Z6YzJGblpTQjBhR1VnZDJVZ2NtVmpaV2wyWldRZ1puSnZiU0JGUmxSUVQxTWdkR2hoZENCMGIyeGtJSFZ6SUhSb1lYUWdjMmxuYm1GMGRYSmxJR2x6SUhKbGNYVnBjbVZrTGx4dUlDQWdJQ0FnSUNBdkx5QThMM04xYlcxaGNuaytYRzRnSUNBZ0lDQWdJSFJvYVhNdVUybG5ibUYwZFhKbFVtVnhkV2x5WldSTlpYTnpZV2RsSUQwZ2JuVnNiRHRjYmlBZ0lDQmNiaUFnSUNBZ0lDQWdMeThnUEhOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUM4dklGUm9aU0J0WlhOellXZGxJSFJvWlNCM1pTQnlaV05sYVhabFpDQm1jbTl0SUVWR1ZGQlBVeUIwYUdGMElIUnZiR1FnZFhNZ2RHaGhkQ0JRYUc5dVpTQkdiM0lnUVhWMGFDQnBjeUJ5WlhGMWFYSmxaQzVjYmlBZ0lDQWdJQ0FnTHk4Z1BDOXpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQjBhR2x6TGxCb2IyNWxSbTl5UVhWMGFGSmxjWFZwY21Wa1RXVnpjMkZuWlNBOUlHNTFiR3c3WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdQSE4xYlcxaGNuaytYRzRnSUNBZ0lDQWdJQzh2SUZSb1pTQjBhVzFsSUhkb1pXNGdkR2hsSUdOaGJtTmxiQ0JoZEhSbGJYQjBJSGRoY3lCdFlXUmxMbHh1SUNBZ0lDQWdJQ0F2THlBOEwzTjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lIUm9hWE11UTJGdVkyVnNRWFIwWlcxd2RGUnBiV1VnUFNCdWRXeHNPMXh1WEc0Z0lDQWdJQ0FnSUM4dklEeHpkVzF0WVhKNVBseHVJQ0FnSUNBZ0lDQXZMeUJVYUdVZ2NtVnhkV1Z6ZENCdFpYTnpZV2RsSUhSb1lYUWdkMlVnWVhKbElITmxibVJwYm1jdmMyVnVkQ0IwYnlCMGFHVWdjMlZ5ZG1WeUxseHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVVbVZ4ZFdWemRDQTlJRzFsYzNOaFoyVTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1BITjFiVzFoY25rK1hHNGdJQ0FnSUNBZ0lDOHZJRmRvWlhSb1pYSWdkMlVuY21VZ1kzVnljbVZ1ZEd4NUlIZGhhWFJwYm1jZ1ptOXlJR0VnUjJWMElFeGhjM1FnVkhKaGJuTmhZM1JwYjI0Z1VtVnpjRzl1YzJVZ2RHOGdaMlYwSUdGdUlIVndaR0YwWlM0Z1hHNGdJQ0FnSUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnZEdocGN5NUJkMkZwZEdsdVowZHNkRkpsYzNCdmJuTmxJRDBnYm5Wc2JEdGNibHh1SUNBZ0lDQWdJQ0IwYUdsekxrZE1WRkpsYzNCdmJuTmxVRzl6VW1WbVNXUWdQU0J1ZFd4c08xeHVJQ0FnSUgxY2JseHVJQ0FnSUZObGJuUW9iWE5uS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVNaWEYxWlhOMFUyVnVkQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVVtVnhkV1Z6ZEZScGJXVWdQU0JFWVhSbExtNXZkeWdwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa3hoYzNSVGRHRjBaVkpsY1hWbGMzUlVhVzFsSUQwZ1JHRjBaUzV1YjNjb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RWFYTndiR0Y1VFdWemMyRm5aU0E5SUcxelp6dGNiaUFnSUNCOVhHNWNiaUFnSUNCRFlXNWpaV3hzYVc1bktHMXpaeWxjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVFYUjBaVzF3ZEdsdVoxUnZRMkZ1WTJWc0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVEWVc1alpXeEJkSFJsYlhCMFZHbHRaU0E5SUVSaGRHVXVibTkzS0NrN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UkdsemNHeGhlVTFsYzNOaFoyVWdQU0J0YzJjN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUTJGdVkyVnNSbUZwYkdWa0tHMXpaeWxjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVFYUjBaVzF3ZEdsdVoxUnZRMkZ1WTJWc0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UkdsemNHeGhlVTFsYzNOaFoyVWdQU0J0YzJjN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnUTJGc2JHbHVaMGRzZENobmJIUlNaWEYxWlhOMFNXUXBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGtGM1lXbDBhVzVuUjJ4MFVtVnpjRzl1YzJVZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa3hoYzNSVGRHRjBaVkpsY1hWbGMzUlVhVzFsSUQwZ1JHRjBaUzV1YjNjb0tUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1TVlYTjBSMngwVW1WeGRXVnpkRWxrSUQwZ1oyeDBVbVZ4ZFdWemRFbGtPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFZHZkRWRzZEZKbGMzQnZibk5sS0NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRWGRoYVhScGJtZEhiSFJTWlhOd2IyNXpaU0E5SUdaaGJITmxPMXh1SUNBZ0lIMWNiaUFnSUNCY2JpQWdJQ0JHWVdsc1pXUW9jbVZ6Y0c5dWMyVXNJRzF6WnlsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVVM1ZqWTJWemN5QTlJRk4xWTJObGMzTlRkR0YwWlM1R1lXbHNaV1E3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVSbWx1YVhOb1pXUWdQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGxKbGMzQnZibk5sSUQwZ2NtVnpjRzl1YzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UkdsemNHeGhlVTFsYzNOaFoyVWdQU0J0YzJjN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnVTJsbmJtRjBkWEpsVW1WeGRXbHlaV1FvYzNCcFRXVnpjMkZuWlN3Z2JYTm5LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1VGFXZHVZWFIxY21WU1pYRjFhWEpsWkUxbGMzTmhaMlVnUFNCemNHbE5aWE56WVdkbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtGM1lXbDBhVzVuVTJsbmJtRjBkWEpsUTJobFkyc2dQU0IwY25WbE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtScGMzQnNZWGxOWlhOellXZGxJRDBnYlhObk8xeHVJQ0FnSUgxY2JseHVJQ0FnSUZOcFoyNWhkSFZ5WlZKbGMzQnZibVJsWkNodGMyY3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGtGM1lXbDBhVzVuVTJsbmJtRjBkWEpsUTJobFkyc2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RWFYTndiR0Y1VFdWemMyRm5aU0E5SUcxelp6dGNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdVR2h2Ym1WR2IzSkJkWFJvVW1WeGRXbHlaV1FvYzNCcFRXVnpjMkZuWlN3Z2JYTm5LVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1UWFHOXVaVVp2Y2tGMWRHaFNaWEYxYVhKbFpFMWxjM05oWjJVZ1BTQnpjR2xOWlhOellXZGxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrRjNZV2wwYVc1blVHaHZibVZHYjNKQmRYUm9JRDBnZEhKMVpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RWFYTndiR0Y1VFdWemMyRm5aU0E5SUcxelp6dGNiaUFnSUNCOVhHNGdJQ0FnWEc0Z0lDQWdRWFYwYUVOdlpHVlRaVzUwS0cxelp5bGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UVhkaGFYUnBibWRRYUc5dVpVWnZja0YxZEdnZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVFYVhOd2JHRjVUV1Z6YzJGblpTQTlJRzF6Wnp0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JEYjIxd2JHVjBaV1FvYzNSaGRHVXNJSEpsYzNCdmJuTmxMQ0J0YzJjcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbE4xWTJObGMzTWdQU0J6ZEdGMFpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1U1pYTndiMjV6WlNBOUlISmxjM0J2Ym5ObE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtacGJtbHphR1ZrSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUJkSFJsYlhCMGFXNW5WRzlEWVc1alpXd2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1QmQyRnBkR2x1WjBkc2RGSmxjM0J2Ym5ObElEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UVhkaGFYUnBibWRUYVdkdVlYUjFjbVZEYUdWamF5QTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGtGM1lXbDBhVzVuVUdodmJtVkdiM0pCZFhSb0lEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11UkdsemNHeGhlVTFsYzNOaFoyVWdQU0J0YzJjN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnVlc1cmJtOTNia052YlhCc1pYUmxaQ2h0YzJjcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbE4xWTJObGMzTWdQU0JUZFdOalpYTnpVM1JoZEdVdVZXNXJibTkzYmp0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVTWlhOd2IyNXpaU0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJSFJvYVhNdVJtbHVhWE5vWldRZ1BTQjBjblZsTzF4dUlDQWdJQ0FnSUNCMGFHbHpMa0YwZEdWdGNIUnBibWRVYjBOaGJtTmxiQ0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxrRjNZV2wwYVc1blIyeDBVbVZ6Y0c5dWMyVWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1QmQyRnBkR2x1WjFOcFoyNWhkSFZ5WlVOb1pXTnJJRDBnWm1Gc2MyVTdYRzRnSUNBZ0lDQWdJSFJvYVhNdVFYZGhhWFJwYm1kUWFHOXVaVVp2Y2tGMWRHZ2dQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkR2hwY3k1RWFYTndiR0Y1VFdWemMyRm5aU0E5SUcxelp6dGNiaUFnSUNCOVhHNTlYRzVjYmk4dklEeHpkVzF0WVhKNVBseHVMeThnVlhObFpDQmhjeUJoSUhKbGRIVnliaUJwYmlCMGFHVWdVM1ZpYldsMFFYVjBhRU52WkdVZ2JXVjBhRzlrSUhSdklITnBaMjVwWm5rZ2QyaGxkR2hsY2lCRGIyUmxJR2x6SUhaaGJHbGtYRzR2THlBOEwzTjFiVzFoY25rK1hHNWxlSEJ2Y25RZ1kyeGhjM01nVTNWaWJXbDBRWFYwYUVOdlpHVlNaWE4xYkhSY2JudGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaDJZV3hwWkVadmNtMWhkQ3dnYldWemMyRm5aU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVZtRnNhV1JHYjNKdFlYUWdQU0IyWVd4cFpFWnZjbTFoZER0Y2JseHVJQ0FnSUNBZ0lDQXZMeUE4YzNWdGJXRnllVDVjYmlBZ0lDQWdJQ0FnTHk4Z1ZHVjRkQ0IwYUdGMElHZHBkbVZ6SUhKbFlYTnZiaUJtYjNJZ1NXNTJZV3hwWkdsMGVWeHVJQ0FnSUNBZ0lDQXZMeUE4TDNOMWJXMWhjbmsrWEc0Z0lDQWdJQ0FnSUhSb2FYTXVUV1Z6YzJGblpTQTlJRzFsYzNOaFoyVTdYRzRnSUNBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWTJ4aGMzTWdVM0JwUTI5dVptbG5YRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11VUhKcGJuUk5aWEpqYUdGdWRFTnZjSGtnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnZEdocGN5NVFjbTl0Y0hSR2IzSkRkWE4wYjIxbGNrTnZjSGxQYmtWbWRIQnZjeUE5SUdaaGJITmxPMXh1SUNBZ0lDQWdJQ0IwYUdsekxsTnBaMjVoZEhWeVpVWnNiM2RQYmtWbWRIQnZjeUE5SUdaaGJITmxPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVSVzVoWW14bFpGQnlhVzUwVFdWeVkyaGhiblJEYjNCNUlEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Ulc1aFlteGxaRkJ5YjIxd2RFWnZja04xYzNSdmJXVnlRMjl3ZVU5dVJXWjBjRzl6SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVSVzVoWW14bFpGTnBaMjVoZEhWeVpVWnNiM2RQYmtWbWRIQnZjeUE5SUdaaGJITmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lFRmtaRkpsWTJWcGNIUkRiMjVtYVdjb2JXVnpjMkZuWlVSaGRHRXBYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NVFjbTl0Y0hSR2IzSkRkWE4wYjIxbGNrTnZjSGxQYmtWbWRIQnZjeUFtSmlCMGFHbHpMa1Z1WVdKc1pXUlFjbTl0Y0hSR2IzSkRkWE4wYjIxbGNrTnZjSGxQYmtWbWRIQnZjeWxjYmlBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiV1Z6YzJGblpVUmhkR0V1Y0hKdmJYQjBYMlp2Y2w5amRYTjBiMjFsY2w5amIzQjVJRDBnZEdocGN5NVFjbTl0Y0hSR2IzSkRkWE4wYjIxbGNrTnZjSGxQYmtWbWRIQnZjenRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1VGFXZHVZWFIxY21WR2JHOTNUMjVGWm5Sd2IzTWdKaVlnZEdocGN5NUZibUZpYkdWa1UybG5ibUYwZFhKbFJteHZkMDl1UldaMGNHOXpLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFJHRjBZUzV3Y21sdWRGOW1iM0pmYzJsbmJtRjBkWEpsWDNKbGNYVnBjbVZrWDNSeVlXNXpZV04wYVc5dWN5QTlJSFJvYVhNdVUybG5ibUYwZFhKbFJteHZkMDl1UldaMGNHOXpPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGxCeWFXNTBUV1Z5WTJoaGJuUkRiM0I1SUNZbUlIUm9hWE11Ulc1aFlteGxaRkJ5YVc1MFRXVnlZMmhoYm5SRGIzQjVLVnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnRaWE56WVdkbFJHRjBZUzV3Y21sdWRGOXRaWEpqYUdGdWRGOWpiM0I1SUQwZ2RHaHBjeTVRY21sdWRFMWxjbU5vWVc1MFEyOXdlVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYldWemMyRm5aVVJoZEdFN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnVkc5VGRISnBibWNvS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0JRY205dGNIUkdiM0pEZFhOMGIyMWxja052Y0hsUGJrVm1kSEJ2Y3pva2UzUm9hWE11VUhKdmJYQjBSbTl5UTNWemRHOXRaWEpEYjNCNVQyNUZablJ3YjNOOUlGTnBaMjVoZEhWeVpVWnNiM2RQYmtWbWRIQnZjem9rZTNSb2FYTXVVMmxuYm1GMGRYSmxSbXh2ZDA5dVJXWjBjRzl6ZlNCUWNtbHVkRTFsY21Ob1lXNTBRMjl3ZVRvZ0pIdDBhR2x6TGxCeWFXNTBUV1Z5WTJoaGJuUkRiM0I1ZldBN1hHNGdJQ0FnZlZ4dWZWeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1ZISmhibk5oWTNScGIyNVBjSFJwYjI1elhHNTdYRzRnSUNBZ1kyOXVjM1J5ZFdOMGIzSW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk4xYzNSdmJXVnlVbVZqWldsd2RFaGxZV1JsY2lBOUlGd2lYQ0k3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk4xYzNSdmJXVnlVbVZqWldsd2RFWnZiM1JsY2lBOUlGd2lYQ0k3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjFsY21Ob1lXNTBVbVZqWldsd2RFaGxZV1JsY2lBOUlGd2lYQ0k3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjFsY21Ob1lXNTBVbVZqWldsd2RFWnZiM1JsY2lBOUlGd2lYQ0k3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdVMlYwUTNWemRHOXRaWEpTWldObGFYQjBTR1ZoWkdWeUtHTjFjM1J2YldWeVVtVmpaV2x3ZEVobFlXUmxjaWxjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTjFjM1J2YldWeVVtVmpaV2x3ZEVobFlXUmxjaUE5SUdOMWMzUnZiV1Z5VW1WalpXbHdkRWhsWVdSbGNqdGNiaUFnSUNCOVhHNWNiaUFnSUNCVFpYUkRkWE4wYjIxbGNsSmxZMlZwY0hSR2IyOTBaWElvWTNWemRHOXRaWEpTWldObGFYQjBSbTl2ZEdWeUtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTNWemRHOXRaWEpTWldObGFYQjBSbTl2ZEdWeUlEMGdZM1Z6ZEc5dFpYSlNaV05sYVhCMFJtOXZkR1Z5TzF4dUlDQWdJSDFjYmlBZ0lDQlRaWFJOWlhKamFHRnVkRkpsWTJWcGNIUklaV0ZrWlhJb2JXVnlZMmhoYm5SU1pXTmxhWEIwU0dWaFpHVnlLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJXVnlZMmhoYm5SU1pXTmxhWEIwU0dWaFpHVnlJRDBnYldWeVkyaGhiblJTWldObGFYQjBTR1ZoWkdWeU8xeHVJQ0FnSUgxY2JpQWdJQ0JUWlhSTlpYSmphR0Z1ZEZKbFkyVnBjSFJHYjI5MFpYSW9iV1Z5WTJoaGJuUlNaV05sYVhCMFJtOXZkR1Z5S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiV1Z5WTJoaGJuUlNaV05sYVhCMFJtOXZkR1Z5SUQwZ2JXVnlZMmhoYm5SU1pXTmxhWEIwUm05dmRHVnlPMXh1SUNBZ0lIMWNiaUFnSUNCQlpHUlBjSFJwYjI1ektHMWxjM05oWjJWRVlYUmhLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpVUmhkR0V1WTNWemRHOXRaWEpmY21WalpXbHdkRjlvWldGa1pYSWdQU0IwYUdsekxsOWpkWE4wYjIxbGNsSmxZMlZwY0hSSVpXRmtaWEk3WEc0Z0lDQWdJQ0FnSUcxbGMzTmhaMlZFWVhSaExtTjFjM1J2YldWeVgzSmxZMlZwY0hSZlptOXZkR1Z5SUQwZ2RHaHBjeTVmWTNWemRHOXRaWEpTWldObGFYQjBSbTl2ZEdWeU8xeHVJQ0FnSUNBZ0lDQnRaWE56WVdkbFJHRjBZUzV0WlhKamFHRnVkRjl5WldObGFYQjBYMmhsWVdSbGNpQTlJSFJvYVhNdVgyMWxjbU5vWVc1MFVtVmpaV2x3ZEVobFlXUmxjanRjYmlBZ0lDQWdJQ0FnYldWemMyRm5aVVJoZEdFdWJXVnlZMmhoYm5SZmNtVmpaV2x3ZEY5bWIyOTBaWElnUFNCMGFHbHpMbDl0WlhKamFHRnVkRkpsWTJWcGNIUkdiMjkwWlhJN1hHNWNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHMWxjM05oWjJWRVlYUmhPMXh1SUNBZ0lIMWNibjBpTENKcGJYQnZjblFnZTFKbGNYVmxjM1JKWkVobGJIQmxjbjBnWm5KdmJTQW5MaTlTWlhGMVpYTjBTV1JJWld4d1pYSW5PMXh1YVcxd2IzSjBJSHRDYVd4c1VHRjViV1Z1ZEN3Z1VHRjVRWFJVWVdKc1pVTnZibVpwWnl3Z1VHRjViV1Z1ZEVocGMzUnZjbmxGYm5SeWVTd2dRbWxzYkZKbGRISnBaWFpoYkZKbGMzVnNkQ3dnUW1sc2JGTjBZWFIxYzFKbGMzQnZibk5sZlNCbWNtOXRJQ2N1TDFCaGVVRjBWR0ZpYkdVbk8xeHVYRzVsZUhCdmNuUWdZMnhoYzNNZ1UzQnBVR0Y1UVhSVVlXSnNaVnh1ZXlBZ1hHNGdJQ0FnWTI5dWMzUnlkV04wYjNJb2MzQnBLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzQnBJRDBnYzNCcE8xeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY2dQU0JqYjI1emIyeGxPMXh1WEc0Z0lDQWdJQ0FnSUhSb2FYTXVRMjl1Wm1sbklEMGdibVYzSUZCaGVVRjBWR0ZpYkdWRGIyNW1hV2NvS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlBOGMzVnRiV0Z5ZVQ1Y2JpQWdJQ0F2THlCVWFHbHpJR1JsYkdWbllYUmxJSGRwYkd3Z1ltVWdZMkZzYkdWa0lIZG9aVzRnZEdobElFVm1kSEJ2Y3lCdVpXVmtjeUIwYnlCcmJtOTNJSFJvWlNCamRYSnlaVzUwSUhOMFlYUmxJRzltSUdFZ1ltbHNiQ0JtYjNJZ1lTQjBZV0pzWlM0Z1hHNGdJQ0FnTHk4Z1BIQmhjbUVnTHo1Y2JpQWdJQ0F2THlCUVlYSmhiV1YwWlhKek9qeHdZWEpoSUM4K1hHNGdJQ0FnTHk4Z1ltbHNiRWxrSUMwZ1ZHaGxJSFZ1YVhGMVpTQnBaR1Z1ZEdsbWFXVnlJRzltSUhSb1pTQmlhV3hzTGlCSlppQmxiWEIwZVN3Z2FYUWdiV1ZoYm5NZ2RHaGhkQ0IwYUdVZ1VHRjVRWFJVWVdKc1pTQm1iRzkzSUc5dUlIUm9aU0JGWm5Sd2IzTWdhWE1nYW5WemRDQnpkR0Z5ZEdsdVp5d2dZVzVrSUhSb1pTQnNiMjlyZFhBZ2FYTWdZbmtnZEdGaWJHVkpaQzQ4Y0dGeVlTQXZQbHh1SUNBZ0lDOHZJSFJoWW14bFNXUWdMU0JVYUdVZ2FXUmxiblJwWm1sbGNpQnZaaUIwYUdVZ2RHRmliR1VnZEdoaGRDQjBhR1VnWW1sc2JDQnBjeUJtYjNJdUlEeHdZWEpoSUM4K1hHNGdJQ0FnTHk4Z2IzQmxjbUYwYjNKSlpDQXRJRlJvWlNCcFpDQnZaaUIwYUdVZ2IzQmxjbUYwYjNJZ1pXNTBaWEpsWkNCdmJpQjBhR1VnWldaMGNHOXpMaUE4Y0dGeVlTQXZQbHh1SUNBZ0lDOHZJRHh3WVhKaElDOCtYRzRnSUNBZ0x5OGdVbVYwZFhKdU9qeHdZWEpoSUM4K1hHNGdJQ0FnTHk4Z1dXOTFJRzVsWldRZ2RHOGdjbVYwZFhKdUlIUm9aU0JqZFhKeVpXNTBJSE4wWVhSbElHOW1JSFJvWlNCaWFXeHNMbHh1SUNBZ0lDOHZJRHd2YzNWdGJXRnllVDVjYmlBZ0lDQkhaWFJDYVd4c1UzUmhkSFZ6S0dKcGJHeEpaQ3dnZEdGaWJHVkpaQ3dnYjNCbGNtRjBiM0pKWkN3Z2NHRjViV1Z1ZEVac2IzZFRkR0Z5ZEdWa0tTQjdYRzRnSUNBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25UV1YwYUc5a0lHNXZkQ0JwYlhCc1pXMWxiblJsWkM0Z1VHeGxZWE5sSUc5MlpYSjNjbWwwWlNCMGFHbHpJRzFsZEdodlpDQnBiaUI1YjNWeUlGQlBVeWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVGaWMzUnlZV04wSUcxbGRHaHZaQ3dnYlhWemRDQnBiWEJzWlcxbGJuUWdhVzRnVUU5VElITjVjM1JsYlZ4dUlDQWdJRUpwYkd4UVlYbHRaVzUwVW1WalpXbDJaV1FvWW1sc2JGQmhlVzFsYm5Rc0lIVndaR0YwWldSQ2FXeHNSR0YwWVNrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owMWxkR2h2WkNCdWIzUWdhVzF3YkdWdFpXNTBaV1F1SUZCc1pXRnpaU0J2ZG1WeWQzSnBkR1VnZEdocGN5QnRaWFJvYjJRZ2FXNGdlVzkxY2lCUVQxTW5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQkhaWFJQY0dWdVZHRmliR1Z6S0c5d1pYSmhkRzl5U1dRcElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtDZE5aWFJvYjJRZ2JtOTBJR2x0Y0d4bGJXVnVkR1ZrTGlCUWJHVmhjMlVnYjNabGNuZHlhWFJsSUhSb2FYTWdiV1YwYUc5a0lHbHVJSGx2ZFhJZ1VFOVRKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdRbWxzYkZCaGVXMWxiblJHYkc5M1JXNWtaV1FvYldWemMyRm5aU2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjAxbGRHaHZaQ0J1YjNRZ2FXMXdiR1Z0Wlc1MFpXUXVJRkJzWldGelpTQnZkbVZ5ZDNKcGRHVWdkR2hwY3lCdFpYUm9iMlFnYVc0Z2VXOTFjaUJRVDFNbktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCUWRYTm9VR0Y1UVhSVVlXSnNaVU52Ym1acFp5Z3BYRzRnSUNBZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emNHa3VYM05sYm1Rb2RHaHBjeTVEYjI1bWFXY3VWRzlOWlhOellXZGxLRkpsY1hWbGMzUkpaRWhsYkhCbGNpNUpaQ2hjSW5CaGRHTnZibVpjSWlrcEtUdGNiaUFnSUNCOUlGeHVJQ0FnSUZ4dUlDQWdJRjlvWVc1a2JHVkhaWFJDYVd4c1JHVjBZV2xzYzFKbGNYVmxjM1FvYlNsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnZjR1Z5WVhSdmNrbGtJRDBnYlM1RVlYUmhXMXdpYjNCbGNtRjBiM0pmYVdSY0lsMDdYRzRnSUNBZ0lDQWdJSFpoY2lCMFlXSnNaVWxrSUQwZ2JTNUVZWFJoVzF3aWRHRmliR1ZmYVdSY0lsMDdYRzRnSUNBZ0lDQWdJSFpoY2lCd1lYbHRaVzUwUm14dmQxTjBZWEowWldRZ1BTQnRMa1JoZEdGYlhDSndZWGx0Wlc1MFgyWnNiM2RmYzNSaGNuUmxaRndpWFR0Y2JseHVJQ0FnSUNBZ0lDQXZMeUJCYzJzZ1VFOVRJR1p2Y2lCQ2FXeHNJRVJsZEdGcGJITWdabTl5SUhSb2FYTWdkR0ZpYkdWSlpDd2dhVzVzZFdScGJtY2daVzVqYjJSbFpDQlFZWGx0Wlc1MFJHRjBZVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtIUm9hWE11UjJWMFFtbHNiRk4wWVhSMWN5aGNJbHdpTENCMFlXSnNaVWxrTENCdmNHVnlZWFJ2Y2tsa0xDQndZWGx0Wlc1MFJteHZkMU4wWVhKMFpXUXBLUzUwYUdWdUtHSnBiR3hUZEdGMGRYTWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZbWxzYkZOMFlYUjFjeTVVWVdKc1pVbGtJRDBnZEdGaWJHVkpaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hpYVd4c1UzUmhkSFZ6TGxSdmRHRnNRVzF2ZFc1MElEdzlJREFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0Z3aVZHRmliR1VnYUdGeklEQWdkRzkwWVd3Z1lXMXZkVzUwTGlCdWIzUWdjMlZ1WkdsdVp5QnBkQ0IwYnlCbFpuUndiM011WENJcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWFXeHNVM1JoZEhWekxsSmxjM1ZzZENBOUlFSnBiR3hTWlhSeWFXVjJZV3hTWlhOMWJIUXVTVTVXUVV4SlJGOVVRVUpNUlY5SlJEdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXpjR2t1WDNObGJtUW9ZbWxzYkZOMFlYUjFjeTVVYjAxbGMzTmhaMlVvYlM1SlpDa3BPMXh1SUNBZ0lDQWdJQ0I5S1Z4dUlDQWdJSDFjYmx4dUlDQWdJRjlvWVc1a2JHVkNhV3hzVUdGNWJXVnVkRUZrZG1salpTaHRLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUdKcGJHeFFZWGx0Wlc1MElEMGdibVYzSUVKcGJHeFFZWGx0Wlc1MEtHMHBPMXh1SUNBZ0lDQWdJQ0JjYmlBZ0lDQWdJQ0FnTHk4Z1FYTnJJRkJQVXlCbWIzSWdRbWxzYkNCRVpYUmhhV3h6TENCcGJteDFaR2x1WnlCbGJtTnZaR1ZrSUZCaGVXMWxiblJFWVhSaFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvZEdocGN5NUhaWFJDYVd4c1UzUmhkSFZ6S0dKcGJHeFFZWGx0Wlc1MExrSnBiR3hKWkN3Z1ltbHNiRkJoZVcxbGJuUXVWR0ZpYkdWSlpDd2dZbWxzYkZCaGVXMWxiblF1VDNCbGNtRjBiM0pKWkN3Z1ltbHNiRkJoZVcxbGJuUXVVR0Y1YldWdWRFWnNiM2RUZEdGeWRHVmtLU2t1ZEdobGJpaGxlR2x6ZEdsdVowSnBiR3hUZEdGMGRYTWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWNGFYTjBhVzVuUW1sc2JGTjBZWFIxY3k1U1pYTjFiSFFnSVQwZ1FtbHNiRkpsZEhKcFpYWmhiRkpsYzNWc2RDNVRWVU5EUlZOVEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2Wnk1M1lYSnVLRndpUTI5MWJHUWdibTkwSUhKbGRISnBaWFpsSUVKcGJHd2dVM1JoZEhWeklHWnZjaUJRWVhsdFpXNTBJRUZrZG1salpTNGdVMlZ1WkdsdVp5QkZjbkp2Y2lCMGJ5QkZablJ3YjNNdVhDSXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzTndhUzVmYzJWdVpDaGxlR2x6ZEdsdVowSnBiR3hUZEdGMGRYTXVWRzlOWlhOellXZGxLRzB1U1dRcEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWNGFYTjBhVzVuVUdGNWJXVnVkRWhwYzNSdmNua2dQU0JsZUdsemRHbHVaMEpwYkd4VGRHRjBkWE11WjJWMFFtbHNiRkJoZVcxbGJuUklhWE4wYjNKNUtDazdYRzRnSUNCY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCbWIzVnVaRVY0YVhOMGFXNW5SVzUwY25rZ1BTQmxlR2x6ZEdsdVoxQmhlVzFsYm5SSWFYTjBiM0o1TG1acGJtUW9jR2hsSUQwK0lIQm9aUzVIWlhSVVpYSnRhVzVoYkZKbFprbGtLQ2tnUFQwZ1ltbHNiRkJoZVcxbGJuUXVVSFZ5WTJoaGMyVlNaWE53YjI1elpTNUhaWFJVWlhKdGFXNWhiRkpsWm1WeVpXNWpaVWxrS0NrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHWnZkVzVrUlhocGMzUnBibWRGYm5SeWVTbGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QlhaU0JvWVhabElHRnNjbVZoWkhrZ2NISnZZMlZ6YzJWa0lIUm9hWE1nY0dGNWJXVnVkQzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCd1pYSm9ZWEJ6SUVWbWRIQnZjeUJrYVdRZ1oyVjBJRzkxY2lCaFkydHViM2RzWldSblpXMWxiblF1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1RHVjBKM01nZFhCa1lYUmxJRVZtZEhCdmN5NWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c2IyY3VkMkZ5YmloY0lraGhaQ0JoYkhKbFlXUjVJSEpsWTJWcGRtVmtJSFJvYVhNZ1ltbHNiRjl3WVhsdFpXMXVkQ0JoWkhacFkyVWdabkp2YlNCbFpuUndiM011SUVsbmJtOXlhVzVuTGx3aUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emNHa3VYM05sYm1Rb1pYaHBjM1JwYm1kQ2FXeHNVM1JoZEhWekxsUnZUV1Z6YzJGblpTaHRMa2xrS1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJNWlhRbmN5QmhaR1FnZEdobElHNWxkeUJsYm5SeWVTQjBieUIwYUdVZ2FHbHpkRzl5ZVZ4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhWd1pHRjBaV1JJYVhOMGIzSjVSVzUwY21sbGN5QTlJR1Y0YVhOMGFXNW5VR0Y1YldWdWRFaHBjM1J2Y25rN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVmtTR2x6ZEc5eWVVVnVkSEpwWlhNdWNIVnphQ2hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhjZ1VHRjViV1Z1ZEVocGMzUnZjbmxGYm5SeWVTaGlhV3hzVUdGNWJXVnVkQzVRWVhsdFpXNTBWSGx3WlM1MGIweHZkMlZ5UTJGelpTZ3BMQ0JpYVd4c1VHRjViV1Z1ZEM1UWRYSmphR0Z6WlZKbGMzQnZibk5sTGxSdlVHRjViV1Z1ZEZOMWJXMWhjbmtvS1NsY2JpQWdJQ0FnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjFjR1JoZEdWa1FtbHNiRVJoZEdFZ1BTQkNhV3hzVTNSaGRIVnpVbVZ6Y0c5dWMyVXVWRzlDYVd4c1JHRjBZU2gxY0dSaGRHVmtTR2x6ZEc5eWVVVnVkSEpwWlhNcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QkJaSFpwYzJVZ1VFOVRJRzltSUc1bGR5QndZWGx0Wlc1MElHRm5ZV2x1YzNRZ2RHaHBjeUJpYVd4c0xDQmhibVFnZEdobElIVndaR0YwWldRZ1FtbHNiRVJoZEdFZ2RHOGdVMkYyWlM1Y2JpQWdJQ0FnSUNBZ0lDQWdJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaDBhR2x6TGtKcGJHeFFZWGx0Wlc1MFVtVmpaV2wyWldRb1ltbHNiRkJoZVcxbGJuUXNJSFZ3WkdGMFpXUkNhV3hzUkdGMFlTa3BMblJvWlc0b2RYQmtZWFJsWkVKcGJHeFRkR0YwZFhNZ1BUNGdlMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NuVnpkQ0JwYmlCallYTmxJR05zYVdWdWRDQm1iM0puYjNRZ2RHOGdjMlYwSUhSb1pYTmxPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ3WkdGMFpXUkNhV3hzVTNSaGRIVnpMa0pwYkd4SlpDQTlJR0pwYkd4UVlYbHRaVzUwTGtKcGJHeEpaRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxY0dSaGRHVmtRbWxzYkZOMFlYUjFjeTVVWVdKc1pVbGtJRDBnWW1sc2JGQmhlVzFsYm5RdVZHRmliR1ZKWkR0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gxY0dSaGRHVmtRbWxzYkZOMFlYUjFjeTVTWlhOMWJIUWdJVDBnUW1sc2JGSmxkSEpwWlhaaGJGSmxjM1ZzZEM1VFZVTkRSVk5US1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NTNZWEp1S0Z3aVVFOVRJRVZ5Y205eVpXUWdkMmhsYmlCaVpXbHVaeUJCWkhacGMyVmtJRzltSUZCaGVXMWxiblF1SUV4bGRIUnBibWNnUlVaVVVFOVRJR3R1YjNjc0lHRnVaQ0J6Wlc1a2FXNW5JR1Y0YVhOMGFXNW5JR0pwYkd3Z1pHRjBZUzVjSWlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjFjR1JoZEdWa1FtbHNiRk4wWVhSMWN5NUNhV3hzUkdGMFlTQTlJR1Y0YVhOMGFXNW5RbWxzYkZOMFlYUjFjeTVDYVd4c1JHRjBZVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4elpWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ3WkdGMFpXUkNhV3hzVTNSaGRIVnpMa0pwYkd4RVlYUmhJRDBnZFhCa1lYUmxaRUpwYkd4RVlYUmhPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5emNHa3VYM05sYm1Rb2RYQmtZWFJsWkVKcGJHeFRkR0YwZFhNdVZHOU5aWE56WVdkbEtHMHVTV1FwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lGOW9ZVzVrYkdWSFpYUlVZV0pzWlVOdmJtWnBaeWh0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjM0JwTGw5elpXNWtLSFJvYVhNdVEyOXVabWxuTGxSdlRXVnpjMkZuWlNodExrbGtLU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdYMmhoYm1Sc1pVZGxkRTl3Wlc1VVlXSnNaWE5TWlhGMVpYTjBLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZjR1Z5WVhSdmNrbGtJRDBnYlM1RVlYUmhXMXdpYjNCbGNtRjBiM0pmYVdSY0lsMDdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1FYTnJJRkJQVXlCbWIzSWdRbWxzYkNCRVpYUmhhV3h6SUdadmNpQjBhR2x6SUhSaFlteGxTV1FzSUdsdWJIVmthVzVuSUdWdVkyOWtaV1FnVUdGNWJXVnVkRVJoZEdGY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjNCbGJsUmhZbXhsYzFKbGMzQnZibk5sSUQwZ2RIbHdaVzltSUhSb2FYTXVSMlYwVDNCbGJsUmhZbXhsY3lBOVBUMGdKMloxYm1OMGFXOXVKMXh1SUNBZ0lDQWdJQ0FnSUNBZ1B5QjBhR2x6TGtkbGRFOXdaVzVVWVdKc1pYTW9iM0JsY21GMGIzSkpaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lEb2diblZzYkR0Y2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z2Y0dWdVZHRmliR1Z6VW1WemNHOXVjMlVnZkh3Z0lXOXdaVzVVWVdKc1pYTlNaWE53YjI1elpTNVVZV0pzWlVSaGRHRWdmSHdnSVc5d1pXNVVZV0pzWlhOU1pYTndiMjV6WlM1VVlXSnNaVVJoZEdFdWJHVnVaM1JvS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Y0dWdVZHRmliR1Z6VW1WemNHOXVjMlVnUFNCdVpYY2dSMlYwVDNCbGJsUmhZbXhsYzFKbGMzQnZibk5sS0NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOXNiMmN1YVc1bWJ5aGNJbFJvWlhKbElHbHpJRzV2SUc5d1pXNGdkR0ZpYkdVdVhDSXBPMXh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNCcExsOXpaVzVrS0c5d1pXNVVZV0pzWlhOU1pYTndiMjV6WlM1VWIwMWxjM05oWjJVb2JTNUpaQ2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJRjlvWVc1a2JHVkNhV3hzVUdGNWJXVnVkRVpzYjNkRmJtUmxaQ2h0S1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NUNhV3hzVUdGNWJXVnVkRVpzYjNkRmJtUmxaQ2h0S1R0Y2JpQWdJQ0I5WEc1OVhHNGlMQ0pwYlhCdmNuUWdlMXh1SUNBZ0lGQnlaV0YxZEdoRmRtVnVkSE1zWEc0Z0lDQWdRV05qYjNWdWRGWmxjbWxtZVZKbGNYVmxjM1FzSUZ4dUlDQWdJRkJ5WldGMWRHaFBjR1Z1VW1WeGRXVnpkQ3dnWEc0Z0lDQWdVSEpsWVhWMGFGUnZjSFZ3VW1WeGRXVnpkQ3dnWEc0Z0lDQWdVSEpsWVhWMGFGQmhjblJwWVd4RFlXNWpaV3hzWVhScGIyNVNaWEYxWlhOMExDQmNiaUFnSUNCUWNtVmhkWFJvUlhoMFpXNWtVbVZ4ZFdWemRDeGNiaUFnSUNCUWNtVmhkWFJvUTI5dGNHeGxkR2x2YmxKbGNYVmxjM1FzWEc0Z0lDQWdVSEpsWVhWMGFFTmhibU5sYkZKbGNYVmxjM1I5SUdaeWIyMGdKeTR2VUhKbFlYVjBhQ2M3WEc1Y2JseHVhVzF3YjNKMElIdFVjbUZ1YzJGamRHbHZia1pzYjNkVGRHRjBaU3dnVkhKaGJuTmhZM1JwYjI1VWVYQmxMQ0JKYm1sMGFXRjBaVlI0VW1WemRXeDBMQ0JUY0dsVGRHRjBkWE1zSUZOd2FVWnNiM2NzSUZOd2FVTnZibVpwWnl3Z1ZISmhibk5oWTNScGIyNVBjSFJwYjI1emZTQm1jbTl0SUNjdUwxTndhVTF2WkdWc2N5YzdYRzVjYm1WNGNHOXlkQ0JqYkdGemN5QlRjR2xRY21WaGRYUm9YRzU3WEc0Z0lDQWdZMjl1YzNSeWRXTjBiM0lvYzNCcEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzNCcElEMGdjM0JwTzF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzYjJjZ1BTQmpiMjV6YjJ4bE8xeHVYRzRnSUNBZ0lDQWdJSFJvYVhNdVEyOXVabWxuSUQwZ2JtVjNJRk53YVVOdmJtWnBaeWdwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWx1YVhScFlYUmxRV05qYjNWdWRGWmxjbWxtZVZSNEtIQnZjMUpsWmtsa0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJSFpsY21sbWVVMXpaeUE5SUc1bGR5QkJZMk52ZFc1MFZtVnlhV1o1VW1WeGRXVnpkQ2h3YjNOU1pXWkpaQ2t1Vkc5TlpYTnpZV2RsS0NrN1hHNWNiaUFnSUNBZ0lDQWdkbUZ5SUhSbWN5QTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrWnNiM2RUZEdGMFpTaGNiaUFnSUNBZ0lDQWdJQ0FnSUhCdmMxSmxaa2xrTENCVWNtRnVjMkZqZEdsdmJsUjVjR1V1UVdOamIzVnVkRlpsY21sbWVTd2dNQ3dnZG1WeWFXWjVUWE5uTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0pYWVdsMGFXNW5JR1p2Y2lCRlJsUlFUMU1nWTI5dWJtVmpkR2x2YmlCMGJ5QnRZV3RsSUdGalkyOTFiblFnZG1WeWFXWjVJSEpsY1hWbGMzUmNJaWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpaVzUwVFhObklEMGdYQ0pCYzJ0bFpDQkZSbFJRVDFNZ2RHOGdkbVZ5YVdaNUlHRmpZMjkxYm5SY0lqdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJsdWFYUnBZWFJsVUhKbFlYVjBhRlI0S0hSbWN5d2djMlZ1ZEUxelp5azdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRWx1YVhScFlYUmxUM0JsYmxSNEtIQnZjMUpsWmtsa0xDQmhiVzkxYm5SRFpXNTBjeXdnYjNCMGFXOXVjeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZiazl3ZEdsdmJuTW9LU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdGMyY2dQU0JQWW1wbFkzUXVZWE56YVdkdUtHNWxkeUJRY21WaGRYUm9UM0JsYmxKbGNYVmxjM1FvWVcxdmRXNTBRMlZ1ZEhNc0lIQnZjMUpsWmtsa0tTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1EyOXVabWxuT2lCMGFHbHpMa052Ym1acFp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUU5d2RHbHZibk02SUc5d2RHbHZibk5jYmlBZ0lDQWdJQ0FnZlNrdVZHOU5aWE56WVdkbEtDazdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlIUm1jeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZia1pzYjNkVGRHRjBaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjMUpsWmtsa0xDQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVVISmxZWFYwYUN3Z1lXMXZkVzUwUTJWdWRITXNJRzF6Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0JYWVdsMGFXNW5JR1p2Y2lCRlJsUlFUMU1nWTI5dWJtVmpkR2x2YmlCMGJ5QnRZV3RsSUhCeVpXRjFkR2dnY21WeGRXVnpkQ0JtYjNJZ0pIc29ZVzF2ZFc1MFEyVnVkSE1nTHlBeE1EQXVNQ2t1ZEc5R2FYaGxaQ2d5S1gxZ0tUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhObGJuUk5jMmNnUFNCZ1FYTnJaV1FnUlVaVVVFOVRJSFJ2SUdOeVpXRjBaU0J3Y21WaGRYUm9JR1p2Y2lBa2V5aGhiVzkxYm5SRFpXNTBjeUF2SURFd01DNHdLUzUwYjBacGVHVmtLRElwZldBN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlwYm1sMGFXRjBaVkJ5WldGMWRHaFVlQ2gwWm5Nc0lITmxiblJOYzJjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUVsdWFYUnBZWFJsVkc5d2RYQlVlQ2h3YjNOU1pXWkpaQ3dnY0hKbFlYVjBhRWxrTENCaGJXOTFiblJEWlc1MGN5d2diM0IwYVc5dWN5QTlJRzVsZHlCVWNtRnVjMkZqZEdsdmJrOXdkR2x2Ym5Nb0tTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJ0YzJjZ1BTQlBZbXBsWTNRdVlYTnphV2R1S0c1bGR5QlFjbVZoZFhSb1ZHOXdkWEJTWlhGMVpYTjBLSEJ5WldGMWRHaEpaQ3dnWVcxdmRXNTBRMlZ1ZEhNc0lIQnZjMUpsWmtsa0tTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1EyOXVabWxuT2lCMGFHbHpMa052Ym1acFp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUU5d2RHbHZibk02SUc5d2RHbHZibk5jYmlBZ0lDQWdJQ0FnZlNrdVZHOU5aWE56WVdkbEtDazdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlIUm1jeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZia1pzYjNkVGRHRjBaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjMUpsWmtsa0xDQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVVISmxZWFYwYUN3Z1lXMXZkVzUwUTJWdWRITXNJRzF6Wnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR0JYWVdsMGFXNW5JR1p2Y2lCRlJsUlFUMU1nWTI5dWJtVmpkR2x2YmlCMGJ5QnRZV3RsSUhCeVpXRjFkR2dnZEc5d2RYQWdjbVZ4ZFdWemRDQm1iM0lnSkhzb1lXMXZkVzUwUTJWdWRITWdMeUF4TURBdU1Da3VkRzlHYVhobFpDZ3lLWDFnS1R0Y2JpQWdJQ0FnSUNBZ2RtRnlJSE5sYm5STmMyY2dQU0JnUVhOclpXUWdSVVpVVUU5VElIUnZJRzFoYTJVZ2NISmxZWFYwYUNCMGIzQjFjQ0JtYjNJZ0pIc29ZVzF2ZFc1MFEyVnVkSE1nTHlBeE1EQXVNQ2t1ZEc5R2FYaGxaQ2d5S1gxZ08xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYVc1cGRHbGhkR1ZRY21WaGRYUm9WSGdvZEdaekxDQnpaVzUwVFhObktUdGNiaUFnSUNCOVhHNWNiaUFnSUNCSmJtbDBhV0YwWlZCaGNuUnBZV3hEWVc1alpXeHNZWFJwYjI1VWVDaHdiM05TWldaSlpDd2djSEpsWVhWMGFFbGtMQ0JoYlc5MWJuUkRaVzUwY3l3Z2IzQjBhVzl1Y3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Yms5d2RHbHZibk1vS1NsY2JpQWdJQ0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQnRjMmNnUFNCUFltcGxZM1F1WVhOemFXZHVLRzVsZHlCUWNtVmhkWFJvVUdGeWRHbGhiRU5oYm1ObGJHeGhkR2x2YmxKbGNYVmxjM1FvY0hKbFlYVjBhRWxrTENCaGJXOTFiblJEWlc1MGN5d2djRzl6VW1WbVNXUXBMRnh1SUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQkRiMjVtYVdjNklIUm9hWE11UTI5dVptbG5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ1QzQjBhVzl1Y3pvZ2IzQjBhVzl1YzF4dUlDQWdJQ0FnSUNCOUtTNVViMDFsYzNOaFoyVW9LVHRjYmx4dUlDQWdJQ0FnSUNCMllYSWdkR1p6SUQwZ2JtVjNJRlJ5WVc1ellXTjBhVzl1Um14dmQxTjBZWFJsS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdjRzl6VW1WbVNXUXNJRlJ5WVc1ellXTjBhVzl1Vkhsd1pTNVFjbVZoZFhSb0xDQmhiVzkxYm5SRFpXNTBjeXdnYlhObkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWUZkaGFYUnBibWNnWm05eUlFVkdWRkJQVXlCamIyNXVaV04wYVc5dUlIUnZJRzFoYTJVZ2NISmxZWFYwYUNCd1lYSjBhV0ZzSUdOaGJtTmxiR3hoZEdsdmJpQnlaWEYxWlhOMElHWnZjaUFrZXloaGJXOTFiblJEWlc1MGN5QXZJREV3TUM0d0tTNTBiMFpwZUdWa0tESXBmV0FwTzF4dUlDQWdJQ0FnSUNCMllYSWdjMlZ1ZEUxelp5QTlJR0JCYzJ0bFpDQkZSbFJRVDFNZ2RHOGdiV0ZyWlNCd2NtVmhkWFJvSUhCaGNuUnBZV3dnWTJGdVkyVnNiR0YwYVc5dUlHWnZjaUFrZXloaGJXOTFiblJEWlc1MGN5QXZJREV3TUM0d0tTNTBiMFpwZUdWa0tESXBmV0E3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBibWwwYVdGMFpWQnlaV0YxZEdoVWVDaDBabk1zSUhObGJuUk5jMmNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWx1YVhScFlYUmxSWGgwWlc1a1ZIZ29jRzl6VW1WbVNXUXNJSEJ5WldGMWRHaEpaQ3dnYjNCMGFXOXVjeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZiazl3ZEdsdmJuTW9LU2xjYmlBZ0lDQjdYRzRnSUNBZ0lDQWdJSFpoY2lCdGMyY2dQU0JQWW1wbFkzUXVZWE56YVdkdUtHNWxkeUJRY21WaGRYUm9SWGgwWlc1a1VtVnhkV1Z6ZENod2NtVmhkWFJvU1dRc0lIQnZjMUpsWmtsa0tTeGNiaUFnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1EyOXVabWxuT2lCMGFHbHpMa052Ym1acFp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUU5d2RHbHZibk02SUc5d2RHbHZibk5jYmlBZ0lDQWdJQ0FnZlNrdVZHOU5aWE56WVdkbEtDazdYRzVjYmlBZ0lDQWdJQ0FnZG1GeUlIUm1jeUE5SUc1bGR5QlVjbUZ1YzJGamRHbHZia1pzYjNkVGRHRjBaU2hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnZjMUpsWmtsa0xDQlVjbUZ1YzJGamRHbHZibFI1Y0dVdVVISmxZWFYwYUN3Z01Dd2diWE5uTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdYQ0pYWVdsMGFXNW5JR1p2Y2lCRlJsUlFUMU1nWTI5dWJtVmpkR2x2YmlCMGJ5QnRZV3RsSUhCeVpXRjFkR2dnUlhoMFpXNWtJSEpsY1hWbGMzUmNJaWs3WEc0Z0lDQWdJQ0FnSUhaaGNpQnpaVzUwVFhObklEMGdYQ0pCYzJ0bFpDQkZSbFJRVDFNZ2RHOGdiV0ZyWlNCd2NtVmhkWFJvSUVWNGRHVnVaQ0J5WlhGMVpYTjBYQ0k3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXBibWwwYVdGMFpWQnlaV0YxZEdoVWVDaDBabk1zSUhObGJuUk5jMmNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJRWx1YVhScFlYUmxRMjl0Y0d4bGRHbHZibFI0S0hCdmMxSmxaa2xrTENCd2NtVmhkWFJvU1dRc0lHRnRiM1Z1ZEVObGJuUnpMQ0J6ZFhKamFHRnlaMlZCYlc5MWJuUWdQU0F3TENCdmNIUnBiMjV6SUQwZ2JtVjNJRlJ5WVc1ellXTjBhVzl1VDNCMGFXOXVjeWdwS1Z4dUlDQWdJSHRjYmlBZ0lDQWdJQ0FnZG1GeUlHMXpaeUE5SUU5aWFtVmpkQzVoYzNOcFoyNG9ibVYzSUZCeVpXRjFkR2hEYjIxd2JHVjBhVzl1VW1WeGRXVnpkQ2h3Y21WaGRYUm9TV1FzSUdGdGIzVnVkRU5sYm5SekxDQndiM05TWldaSlpDa3NYRzRnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lFTnZibVpwWnpvZ2RHaHBjeTVEYjI1bWFXY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCVGRYSmphR0Z5WjJWQmJXOTFiblE2SUhOMWNtTm9ZWEpuWlVGdGIzVnVkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lFOXdkR2x2Ym5NNklHOXdkR2x2Ym5OY2JpQWdJQ0FnSUNBZ2ZTa3VWRzlOWlhOellXZGxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ2RtRnlJSFJtY3lBOUlHNWxkeUJVY21GdWMyRmpkR2x2Ymtac2IzZFRkR0YwWlNoY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2YzFKbFprbGtMQ0JVY21GdWMyRmpkR2x2YmxSNWNHVXVVSEpsWVhWMGFDd2dZVzF2ZFc1MFEyVnVkSE1zSUcxelp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUdCWFlXbDBhVzVuSUdadmNpQkZSbFJRVDFNZ1kyOXVibVZqZEdsdmJpQjBieUJ0WVd0bElIQnlaV0YxZEdnZ1kyOXRjR3hsZEdsdmJpQnlaWEYxWlhOMElHWnZjaUFrZXloaGJXOTFiblJEWlc1MGN5QXZJREV3TUM0d0tTNTBiMFpwZUdWa0tESXBmV0FwTzF4dUlDQWdJQ0FnSUNCMllYSWdjMlZ1ZEUxelp5QTlJR0JCYzJ0bFpDQkZSbFJRVDFNZ2RHOGdiV0ZyWlNCd2NtVmhkWFJvSUdOdmJYQnNaWFJwYjI0Z1ptOXlJQ1I3S0dGdGIzVnVkRU5sYm5SeklDOGdNVEF3TGpBcExuUnZSbWw0WldRb01pbDlZRHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVgybHVhWFJwWVhSbFVISmxZWFYwYUZSNEtIUm1jeXdnYzJWdWRFMXpaeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdTVzVwZEdsaGRHVkRZVzVqWld4VWVDaHdiM05TWldaSlpDd2djSEpsWVhWMGFFbGtMQ0J2Y0hScGIyNXpJRDBnYm1WM0lGUnlZVzV6WVdOMGFXOXVUM0IwYVc5dWN5Z3BLVnh1SUNBZ0lIdGNiaUFnSUNBZ0lDQWdkbUZ5SUcxelp5QTlJRTlpYW1WamRDNWhjM05wWjI0b2JtVjNJRkJ5WldGMWRHaERZVzVqWld4U1pYRjFaWE4wS0hCeVpXRjFkR2hKWkN3Z2NHOXpVbVZtU1dRcExGeHVJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCRGIyNW1hV2M2SUhSb2FYTXVRMjl1Wm1sbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnVDNCMGFXOXVjem9nYjNCMGFXOXVjMXh1SUNBZ0lDQWdJQ0I5S1M1VWIwMWxjM05oWjJVb0tUdGNibHh1SUNBZ0lDQWdJQ0IyWVhJZ2RHWnpJRDBnYm1WM0lGUnlZVzV6WVdOMGFXOXVSbXh2ZDFOMFlYUmxLRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHOXpVbVZtU1dRc0lGUnlZVzV6WVdOMGFXOXVWSGx3WlM1UWNtVmhkWFJvTENBd0xDQnRjMmNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmNJbGRoYVhScGJtY2dabTl5SUVWR1ZGQlBVeUJqYjI1dVpXTjBhVzl1SUhSdklHMWhhMlVnY0hKbFlYVjBhQ0JqWVc1alpXeHNZWFJwYjI0Z2NtVnhkV1Z6ZEZ3aUtUdGNiaUFnSUNBZ0lDQWdkbUZ5SUhObGJuUk5jMmNnUFNCY0lrRnphMlZrSUVWR1ZGQlBVeUIwYnlCdFlXdGxJSEJ5WldGMWRHZ2dZMkZ1WTJWc2JHRjBhVzl1SUhKbGNYVmxjM1JjSWp0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVYMmx1YVhScFlYUmxVSEpsWVhWMGFGUjRLSFJtY3l3Z2MyVnVkRTF6WnlrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnWDJsdWFYUnBZWFJsVUhKbFlYVjBhRlI0S0hSbWN5d2djMlZ1ZEUxelp5bGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXpjR2t1UTNWeWNtVnVkRk4wWVhSMWN5QTlQU0JUY0dsVGRHRjBkWE11Vlc1d1lXbHlaV1FwSUhKbGRIVnliaUJ1WlhjZ1NXNXBkR2xoZEdWVWVGSmxjM1ZzZENobVlXeHpaU3dnWENKT2IzUWdVR0ZwY21Wa1hDSXBPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5emNHa3VRM1Z5Y21WdWRFWnNiM2NnSVQwZ1UzQnBSbXh2ZHk1SlpHeGxLU0J5WlhSMWNtNGdibVYzSUVsdWFYUnBZWFJsVkhoU1pYTjFiSFFvWm1Gc2MyVXNJRndpVG05MElFbGtiR1ZjSWlrN1hHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzQnBMa04xY25KbGJuUkdiRzkzSUQwZ1UzQnBSbXh2ZHk1VWNtRnVjMkZqZEdsdmJqdGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMzQnBMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaU0E5SUhSbWN6dGNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYM053YVM1ZmMyVnVaQ2gwWm5NdVVtVnhkV1Z6ZENrcFhHNGdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM053YVM1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdVdVUyVnVkQ2h6Wlc1MFRYTm5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJRnh1SUNBZ0lDQWdJQ0JrYjJOMWJXVnVkQzVrYVhOd1lYUmphRVYyWlc1MEtHNWxkeUJEZFhOMGIyMUZkbVZ1ZENnblZIaEdiRzkzVTNSaGRHVkRhR0Z1WjJWa0p5d2dlMlJsZEdGcGJEb2dkR2hwY3k1ZmMzQnBMa04xY25KbGJuUlVlRVpzYjNkVGRHRjBaWDBwS1R0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QkpibWwwYVdGMFpWUjRVbVZ6ZFd4MEtIUnlkV1VzSUZ3aVVISmxZWFYwYUNCSmJtbDBhV0YwWldSY0lpazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gyaGhibVJzWlZCeVpXRjFkR2hOWlhOellXZGxLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0J6ZDJsMFkyZ2dLRzB1UlhabGJuUk9ZVzFsS1Z4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElGQnlaV0YxZEdoRmRtVnVkSE11UVdOamIzVnVkRlpsY21sbWVWSmxjM0J2Ym5ObE9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJoaGJtUnNaVUZqWTI5MWJuUldaWEpwWm5sU1pYTndiMjV6WlNodEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05oYzJVZ1VISmxZWFYwYUVWMlpXNTBjeTVRY21WaGRYUm9UM0JsYmxKbGMzQnZibk5sT2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCUWNtVmhkWFJvUlhabGJuUnpMbEJ5WldGMWRHaFViM0IxY0ZKbGMzQnZibk5sT2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCUWNtVmhkWFJvUlhabGJuUnpMbEJ5WldGMWRHaFFZWEowYVdGc1EyRnVZMlZzYkdGMGFXOXVVbVZ6Y0c5dWMyVTZYRzRnSUNBZ0lDQWdJQ0FnSUNCallYTmxJRkJ5WldGMWRHaEZkbVZ1ZEhNdVVISmxZWFYwYUVWNGRHVnVaRkpsYzNCdmJuTmxPbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0JRY21WaGRYUm9SWFpsYm5SekxsQnlaV0YxZEdoRGIyMXdiR1YwWlZKbGMzQnZibk5sT2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZ6WlNCUWNtVmhkWFJvUlhabGJuUnpMbEJ5WldGMWRHaERZVzVqWld4c1lYUnBiMjVTWlhOd2IyNXpaVHBjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOW9ZVzVrYkdWUWNtVmhkWFJvVW1WemNHOXVjMlVvYlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dlp5NXBibVp2S0dCSklHUnZiaWQwSUZWdVpHVnljM1JoYm1RZ1VISmxZWFYwYUNCRmRtVnVkRG9nSkh0dExrVjJaVzUwVG1GdFpYMHNJQ1I3YlM1RVlYUmhmUzRnVUdWeWFHRndjeUJKSUdoaGRtVWdibTkwSUdsdGNHeGxiV1Z1ZEdWa0lHbDBJSGxsZEM1Z0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUY5b1lXNWtiR1ZCWTJOdmRXNTBWbVZ5YVdaNVVtVnpjRzl1YzJVb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwYm1OdmJXbHVaMUJ2YzFKbFprbGtJRDBnYlM1RVlYUmhMbkJ2YzE5eVpXWmZhV1E3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVWdQU0IwYUdsekxsOXpjR2t1UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmMzQnBMa04xY25KbGJuUkdiRzkzSUNFOUlGTndhVVpzYjNjdVZISmhibk5oWTNScGIyNGdmSHdnWTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGtacGJtbHphR1ZrSUh4OElDRmpkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVRzl6VW1WbVNXUWdQVDA5SUdsdVkyOXRhVzVuVUc5elVtVm1TV1FwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktHQlNaV05sYVhabFpDQkJZMk52ZFc1MElGWmxjbWxtZVNCeVpYTndiMjV6WlNCaWRYUWdTU0IzWVhNZ2JtOTBJSGRoYVhScGJtY2dabTl5SUc5dVpTNGdTVzVqYjIxcGJtY2dVRzl6SUZKbFppQkpSRG9nSkh0cGJtTnZiV2x1WjFCdmMxSmxaa2xrZldBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUM4dklGUklMVEZCTENCVVNDMHlRVnh1WEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblJVZUVac2IzZFRkR0YwWlM1RGIyMXdiR1YwWldRb2JTNUhaWFJUZFdOalpYTnpVM1JoZEdVb0tTd2diU3dnWENKQlkyTnZkVzUwSUZabGNtbG1lU0JVY21GdWMyRmpkR2x2YmlCRmJtUmxaQzVjSWlrN1hHNGdJQ0FnSUNBZ0lDOHZJRlJJTFRaQkxDQlVTQzAyUlZ4dUlDQWdJQ0FnSUNCY2JpQWdJQ0FnSUNBZ1pHOWpkVzFsYm5RdVpHbHpjR0YwWTJoRmRtVnVkQ2h1WlhjZ1EzVnpkRzl0UlhabGJuUW9KMVI0Um14dmQxTjBZWFJsUTJoaGJtZGxaQ2NzSUh0a1pYUmhhV3c2SUhSb2FYTXVYM053YVM1RGRYSnlaVzUwVkhoR2JHOTNVM1JoZEdWOUtTazdYRzRnSUNBZ2ZWeHVJQ0FnSUZ4dUlDQWdJRjlvWVc1a2JHVlFjbVZoZFhSb1VtVnpjRzl1YzJVb2JTbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lIWmhjaUJwYm1OdmJXbHVaMUJ2YzFKbFprbGtJRDBnYlM1RVlYUmhMbkJ2YzE5eVpXWmZhV1E3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVWdQU0IwYUdsekxsOXpjR2t1UTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTzF4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmMzQnBMa04xY25KbGJuUkdiRzkzSUNFOUlGTndhVVpzYjNjdVZISmhibk5oWTNScGIyNGdmSHdnWTNWeWNtVnVkRlI0Um14dmQxTjBZWFJsTGtacGJtbHphR1ZrSUh4OElDRmpkWEp5Wlc1MFZIaEdiRzkzVTNSaGRHVXVVRzl6VW1WbVNXUWdQVDA5SUdsdVkyOXRhVzVuVUc5elVtVm1TV1FwWEc0Z0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZaeTVwYm1adktHQlNaV05sYVhabFpDQlFjbVZoZFhSb0lISmxjM0J2Ym5ObElHSjFkQ0JKSUhkaGN5QnViM1FnZDJGcGRHbHVaeUJtYjNJZ2IyNWxMaUJKYm1OdmJXbHVaeUJRYjNNZ1VtVm1JRWxFT2lBa2UybHVZMjl0YVc1blVHOXpVbVZtU1dSOVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0x5OGdWRWd0TVVFc0lGUklMVEpCWEc1Y2JpQWdJQ0FnSUNBZ1kzVnljbVZ1ZEZSNFJteHZkMU4wWVhSbExrTnZiWEJzWlhSbFpDaHRMa2RsZEZOMVkyTmxjM05UZEdGMFpTZ3BMQ0J0TENCY0lsQnlaV0YxZEdnZ1ZISmhibk5oWTNScGIyNGdSVzVrWldRdVhDSXBPMXh1SUNBZ0lDQWdJQ0F2THlCVVNDMDJRU3dnVkVndE5rVmNiaUFnSUNBZ0lDQWdYRzRnSUNBZ0lDQWdJR1J2WTNWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb2JtVjNJRU4xYzNSdmJVVjJaVzUwS0NkVWVFWnNiM2RUZEdGMFpVTm9ZVzVuWldRbkxDQjdaR1YwWVdsc09pQjBhR2x6TGw5emNHa3VRM1Z5Y21WdWRGUjRSbXh2ZDFOMFlYUmxmU2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJSE4wWVhScFl5QkpjMUJ5WldGMWRHaEZkbVZ1ZENobGRtVnVkRTVoYldVcFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWlhabGJuUk9ZVzFsTG14aGMzUkpibVJsZUU5bUtGd2ljSEpsWVhWMGFGd2lMREFwSUQwOVBTQXdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHg4SUdWMlpXNTBUbUZ0WlNBOVBTQlFjbVZoZFhSb1JYWmxiblJ6TGxCeVpXRjFkR2hEYjIxd2JHVjBaVkpsYzNCdmJuTmxYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmSHdnWlhabGJuUk9ZVzFsSUQwOUlGQnlaV0YxZEdoRmRtVnVkSE11VUhKbFlYVjBhRU52YlhCc1pYUmxVbVZ4ZFdWemRGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIeDhJR1YyWlc1MFRtRnRaU0E5UFNCUWNtVmhkWFJvUlhabGJuUnpMa0ZqWTI5MWJuUldaWEpwWm5sU1pYRjFaWE4wWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZkh3Z1pYWmxiblJPWVcxbElEMDlJRkJ5WldGMWRHaEZkbVZ1ZEhNdVFXTmpiM1Z1ZEZabGNtbG1lVkpsYzNCdmJuTmxPMXh1SUNBZ0lIMWNibjFjYmlJc0ltbHRjRzl5ZENCN1JYWmxiblJ6TENCTlpYTnpZV2RsZlNCbWNtOXRJQ2N1TDAxbGMzTmhaMlZ6Snp0Y2JtbHRjRzl5ZENCN1VtVnhkV1Z6ZEVsa1NHVnNjR1Z5ZlNCbWNtOXRJQ2N1TDFKbGNYVmxjM1JKWkVobGJIQmxjaWM3WEc1Y2JtVjRjRzl5ZENCamJHRnpjeUJVWlhKdGFXNWhiRk4wWVhSMWMxSmxjWFZsYzNSY2JudGNiaUFnSUNCVWIwMWxjM05oWjJVb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RtRnlJR1JoZEdFZ1BTQjdmVHRjYmx4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM0lFMWxjM05oWjJVb1VtVnhkV1Z6ZEVsa1NHVnNjR1Z5TGtsa0tGd2lkSEp0Ym14Y0lpa3NJRVYyWlc1MGN5NVVaWEp0YVc1aGJGTjBZWFIxYzFKbGNYVmxjM1FzSUdSaGRHRXNJSFJ5ZFdVcE8xeHVJQ0FnSUgxY2JuMWNibHh1Wlhod2IzSjBJR05zWVhOeklGUmxjbTFwYm1Gc1UzUmhkSFZ6VW1WemNHOXVjMlZjYm50Y2JpQWdJQ0JqYjI1emRISjFZM1J2Y2lodEtWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYlNBOUlHMDdYRzRnSUNBZ2ZWeHVJQ0FnSUVkbGRGTjBZWFIxY3lncFhHNGdJQ0FnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZiUzVFWVhSaExuTjBZWFIxY3p0Y2JpQWdJQ0I5WEc0Z0lDQWdSMlYwUW1GMGRHVnllVXhsZG1Wc0tDbGNiaUFnSUNCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCd1lYSnpaVWx1ZENoMGFHbHpMbDl0TGtSaGRHRXVZbUYwZEdWeWVWOXNaWFpsYkN3eE1DazdYRzRnSUNBZ2ZWeHVJQ0FnSUVselEyaGhjbWRwYm1jb0tWeHVJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNFaGRHaHBjeTVmYlM1RVlYUmhMbU5vWVhKbmFXNW5PMXh1SUNBZ0lIMWNibjFjYmx4dVpYaHdiM0owSUdOc1lYTnpJRlJsY20xcGJtRnNRbUYwZEdWeWVWeHVlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlLRzBwWEc0Z0lDQWdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxrSmhkSFJsY25sTVpYWmxiQ0E5SUhCaGNuTmxTVzUwS0cwdVJHRjBZUzVpWVhSMFpYSjVYMnhsZG1Wc0xERXdLVHRjYmlBZ0lDQjlYRzU5WEc0aUxDSXZLaUFvYVdkdWIzSmxaQ2tnS2k4aVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOSJdLCJzb3VyY2VSb290IjoiIn0=